
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         00010e38  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000006ac  08018e38  08018e38  00028e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080194e4  080194e4  000301f4  2**0
                  CONTENTS
  6 .ARM          00000008  080194e4  080194e4  000294e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080194ec  080194ec  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080194ec  080194ec  000294ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080194f0  080194f0  000294f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001f4  20000000  080194f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000868  200001f8  080196e8  000301f8  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000a60  080196e8  00030a60  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002336e  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004b30  00000000  00000000  00053592  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001708  00000000  00000000  000580c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014c8  00000000  00000000  000597d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024b72  00000000  00000000  0005ac98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000166c1  00000000  00000000  0007f80a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c90a1  00000000  00000000  00095ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0015ef6c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007278  00000000  00000000  0015efe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001f8 	.word	0x200001f8
 800801c:	00000000 	.word	0x00000000
 8008020:	08018e20 	.word	0x08018e20

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001fc 	.word	0x200001fc
 800803c:	08018e20 	.word	0x08018e20

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
//
//
//
//}
void InitPosition()
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <InitPosition+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <InitPosition+0x34>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <InitPosition+0x34>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	70da      	strb	r2, [r3, #3]
	Pos.Dir = front;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <InitPosition+0x34>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	709a      	strb	r2, [r3, #2]
	Pos.Act = Wait;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <InitPosition+0x34>)
 8008e16:	2204      	movs	r2, #4
 8008e18:	711a      	strb	r2, [r3, #4]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <InitPosition+0x34>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	715a      	strb	r2, [r3, #5]

}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000000 	.word	0x20000000

08008e30 <GetWallCtrlDirection>:
int GetWallCtrlDirection()
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0

	switch(Pos.Car)
 8008e34:	4b9a      	ldr	r3, [pc, #616]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e36:	78db      	ldrb	r3, [r3, #3]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	f200 812b 	bhi.w	8009094 <GetWallCtrlDirection+0x264>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <GetWallCtrlDirection+0x14>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008ee5 	.word	0x08008ee5
 8008e4c:	08008f75 	.word	0x08008f75
 8008e50:	08009005 	.word	0x08009005
	{
	case north:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008e54:	4b92      	ldr	r3, [pc, #584]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4b91      	ldr	r3, [pc, #580]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4a90      	ldr	r2, [pc, #576]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008e62:	0103      	lsls	r3, r0, #4
 8008e64:	440b      	add	r3, r1
 8008e66:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e6a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d111      	bne.n	8008e98 <GetWallCtrlDirection+0x68>
 8008e74:	4b8a      	ldr	r3, [pc, #552]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	4b89      	ldr	r3, [pc, #548]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4a88      	ldr	r2, [pc, #544]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008e82:	0103      	lsls	r3, r0, #4
 8008e84:	440b      	add	r3, r1
 8008e86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e8a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <GetWallCtrlDirection+0x68>
		{
			return D_WALL_PID;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0fe      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008e98:	4b81      	ldr	r3, [pc, #516]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4b80      	ldr	r3, [pc, #512]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4a7f      	ldr	r2, [pc, #508]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008ea6:	0103      	lsls	r3, r0, #4
 8008ea8:	440b      	add	r3, r1
 8008eaa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008eae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <GetWallCtrlDirection+0x8c>
		{
			return R_WALL_PID;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e0ec      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008ebc:	4b78      	ldr	r3, [pc, #480]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	4b77      	ldr	r3, [pc, #476]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4a76      	ldr	r2, [pc, #472]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008eca:	0103      	lsls	r3, r0, #4
 8008ecc:	440b      	add	r3, r1
 8008ece:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ed2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <GetWallCtrlDirection+0xb0>
		{
			return L_WALL_PID;
 8008edc:	2302      	movs	r3, #2
 8008ede:	e0da      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008ee0:	2306      	movs	r3, #6
 8008ee2:	e0d8      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;

	case east:
		if(Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//south)
 8008ee4:	4b6e      	ldr	r3, [pc, #440]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	4b6d      	ldr	r3, [pc, #436]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4a6c      	ldr	r2, [pc, #432]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008ef2:	0103      	lsls	r3, r0, #4
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008efa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d111      	bne.n	8008f28 <GetWallCtrlDirection+0xf8>
 8008f04:	4b66      	ldr	r3, [pc, #408]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	4b65      	ldr	r3, [pc, #404]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4a64      	ldr	r2, [pc, #400]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f12:	0103      	lsls	r3, r0, #4
 8008f14:	440b      	add	r3, r1
 8008f16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f1a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <GetWallCtrlDirection+0xf8>
		{
			return D_WALL_PID;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0b6      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall)
 8008f28:	4b5d      	ldr	r3, [pc, #372]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	4b5c      	ldr	r3, [pc, #368]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	4619      	mov	r1, r3
 8008f34:	4a5b      	ldr	r2, [pc, #364]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f36:	0103      	lsls	r3, r0, #4
 8008f38:	440b      	add	r3, r1
 8008f3a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f3e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <GetWallCtrlDirection+0x11c>
		{
			return L_WALL_PID;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e0a4      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].south == wall)
 8008f4c:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	4b53      	ldr	r3, [pc, #332]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	4619      	mov	r1, r3
 8008f58:	4a52      	ldr	r2, [pc, #328]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f5a:	0103      	lsls	r3, r0, #4
 8008f5c:	440b      	add	r3, r1
 8008f5e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f62:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <GetWallCtrlDirection+0x140>
		{
			return R_WALL_PID;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e092      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008f70:	2306      	movs	r3, #6
 8008f72:	e090      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;
	case south:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008f74:	4b4a      	ldr	r3, [pc, #296]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4b49      	ldr	r3, [pc, #292]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4a48      	ldr	r2, [pc, #288]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f82:	0103      	lsls	r3, r0, #4
 8008f84:	440b      	add	r3, r1
 8008f86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f8a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d111      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
 8008f94:	4b42      	ldr	r3, [pc, #264]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	4b41      	ldr	r3, [pc, #260]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4a40      	ldr	r2, [pc, #256]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fa2:	0103      	lsls	r3, r0, #4
 8008fa4:	440b      	add	r3, r1
 8008fa6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008faa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
		{
			return D_WALL_PID;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e06e      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008fb8:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	4b38      	ldr	r3, [pc, #224]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4a37      	ldr	r2, [pc, #220]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fc6:	0103      	lsls	r3, r0, #4
 8008fc8:	440b      	add	r3, r1
 8008fca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008fce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <GetWallCtrlDirection+0x1ac>
		{
			return L_WALL_PID;
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e05c      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008fdc:	4b30      	ldr	r3, [pc, #192]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	4b2f      	ldr	r3, [pc, #188]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4a2e      	ldr	r2, [pc, #184]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fea:	0103      	lsls	r3, r0, #4
 8008fec:	440b      	add	r3, r1
 8008fee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ff2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <GetWallCtrlDirection+0x1d0>
		{
			return R_WALL_PID;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e04a      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009000:	2306      	movs	r3, #6
 8009002:	e048      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;
	case west:

		if ( Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8009004:	4b26      	ldr	r3, [pc, #152]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	4619      	mov	r1, r3
 8009010:	4a24      	ldr	r2, [pc, #144]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009012:	0103      	lsls	r3, r0, #4
 8009014:	440b      	add	r3, r1
 8009016:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800901a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d111      	bne.n	8009048 <GetWallCtrlDirection+0x218>
 8009024:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	4619      	mov	r1, r3
 8009030:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009032:	0103      	lsls	r3, r0, #4
 8009034:	440b      	add	r3, r1
 8009036:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800903a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <GetWallCtrlDirection+0x218>
		{
			return D_WALL_PID;
 8009044:	2301      	movs	r3, #1
 8009046:	e026      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall )
 8009048:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	4619      	mov	r1, r3
 8009054:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009056:	0103      	lsls	r3, r0, #4
 8009058:	440b      	add	r3, r1
 800905a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800905e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <GetWallCtrlDirection+0x23c>
		{
			return R_WALL_PID;
 8009068:	2303      	movs	r3, #3
 800906a:	e014      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].south == wall )
 800906c:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	4619      	mov	r1, r3
 8009078:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <GetWallCtrlDirection+0x274>)
 800907a:	0103      	lsls	r3, r0, #4
 800907c:	440b      	add	r3, r1
 800907e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009082:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <GetWallCtrlDirection+0x260>
		{
			return L_WALL_PID;
 800908c:	2302      	movs	r3, #2
 800908e:	e002      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009090:	2306      	movs	r3, #6
 8009092:	e000      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8009094:	2306      	movs	r3, #6
		break;
	}

}
 8009096:	4618      	mov	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	20000000 	.word	0x20000000
 80090a4:	200004b8 	.word	0x200004b8

080090a8 <WallSafe>:
	Pos.Car = car;
	Pos.Dir = dir;
	Pos.WallSaf = safe_or_warn;
}
void WallSafe()
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_safe;
 80090ac:	4b03      	ldr	r3, [pc, #12]	; (80090bc <WallSafe+0x14>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	715a      	strb	r2, [r3, #5]
}
 80090b2:	bf00      	nop
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	20000000 	.word	0x20000000

080090c0 <WallWarn>:
void WallWarn()
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_warn;
 80090c4:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <WallWarn+0x14>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	715a      	strb	r2, [r3, #5]
}
 80090ca:	bf00      	nop
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20000000 	.word	0x20000000

080090d8 <ControlWall>:
void ControlWall()
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
	//直進中で
		//端の座標なら確実に型壁制御
	//斜め走行は別でアクションを定義

	//横壁制御
	int wall_ctrl_dir = GetWallCtrlDirection();	//次の座標のも返してみて、できれば連続で制御をする。
 80090de:	f7ff fea7 	bl	8008e30 <GetWallCtrlDirection>
 80090e2:	6078      	str	r0, [r7, #4]
	//割り込み中に呼ぶかアクション中に呼ぶか。アクション中の方が座標と壁の状態が確実。いや、判定が遅れると嫌だからやっぱり割り込み。移動量はflagで。

	//PIDChangeFlagStraight(N_WALL_PID);//直進flagはどれでも無い状態。制御なし。
	PIDChangeFlag(R_WALL_PID, 0);
 80090e4:	2100      	movs	r1, #0
 80090e6:	2003      	movs	r0, #3
 80090e8:	f003 fa06 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 80090ec:	2100      	movs	r1, #0
 80090ee:	2001      	movs	r0, #1
 80090f0:	f003 fa02 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 80090f4:	2100      	movs	r1, #0
 80090f6:	2000      	movs	r0, #0
 80090f8:	f003 f9fe 	bl	800c4f8 <PIDChangeFlag>
	//アクションごとに壁制御を記述した方がいいかも

	//アクション、方向、壁安全。

	//減速の時、壁の状態
	if(Pos.Dir == front)		//区画の区切りで前方に進むと決めたあと、動作としては加速か、straight。初期状態はwaitから加速へ
 80090fc:	4b7c      	ldr	r3, [pc, #496]	; (80092f0 <ControlWall+0x218>)
 80090fe:	789b      	ldrb	r3, [r3, #2]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d13f      	bne.n	8009184 <ControlWall+0xac>
	{
		switch(Pos.Act)
 8009104:	4b7a      	ldr	r3, [pc, #488]	; (80092f0 <ControlWall+0x218>)
 8009106:	791b      	ldrb	r3, [r3, #4]
 8009108:	2b05      	cmp	r3, #5
 800910a:	f200 80ec 	bhi.w	80092e6 <ControlWall+0x20e>
 800910e:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <ControlWall+0x3c>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	0800912d 	.word	0x0800912d
 8009118:	080092e7 	.word	0x080092e7
 800911c:	080092e7 	.word	0x080092e7
 8009120:	080092e7 	.word	0x080092e7
 8009124:	080092e7 	.word	0x080092e7
 8009128:	08009137 	.word	0x08009137
		{
		case accel:
			PIDChangeFlag( A_VELO_PID , 1);
 800912c:	2101      	movs	r1, #1
 800912e:	2000      	movs	r0, #0
 8009130:	f003 f9e2 	bl	800c4f8 <PIDChangeFlag>
			//一つ先の区画がわかっていて加速したいときに
			break;
 8009134:	e0d8      	b.n	80092e8 <ControlWall+0x210>
		case decel:
			//減速はないけど一応今後のため。
			break;
		case straight:
			//3/3おっけーかも
			if( (wall_ctrl_dir != N_WALL_PID)  && (AddVelocity == 0) )	//左右どちらかに壁があるとき
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b06      	cmp	r3, #6
 800913a:	d01d      	beq.n	8009178 <ControlWall+0xa0>
 800913c:	4b6d      	ldr	r3, [pc, #436]	; (80092f4 <ControlWall+0x21c>)
 800913e:	edd3 7a00 	vldr	s15, [r3]
 8009142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914a:	d115      	bne.n	8009178 <ControlWall+0xa0>
			{
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800914c:	4b68      	ldr	r3, [pc, #416]	; (80092f0 <ControlWall+0x218>)
 800914e:	795b      	ldrb	r3, [r3, #5]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d108      	bne.n	8009166 <ControlWall+0x8e>
				{
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009154:	2101      	movs	r1, #1
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f003 f9ce 	bl	800c4f8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800915c:	2100      	movs	r1, #0
 800915e:	2000      	movs	r0, #0
 8009160:	f003 f9ca 	bl	800c4f8 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 8009164:	e00d      	b.n	8009182 <ControlWall+0xaa>
				}
				else
				{
					PIDChangeFlag(wall_ctrl_dir, 0);
 8009166:	2100      	movs	r1, #0
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f003 f9c5 	bl	800c4f8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 800916e:	2101      	movs	r1, #1
 8009170:	2000      	movs	r0, #0
 8009172:	f003 f9c1 	bl	800c4f8 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 8009176:	e004      	b.n	8009182 <ControlWall+0xaa>
				}
			}
			else
			{
				PIDChangeFlag( A_VELO_PID , 1);
 8009178:	2101      	movs	r1, #1
 800917a:	2000      	movs	r0, #0
 800917c:	f003 f9bc 	bl	800c4f8 <PIDChangeFlag>
			}
			break;
 8009180:	e0b2      	b.n	80092e8 <ControlWall+0x210>
 8009182:	e0b1      	b.n	80092e8 <ControlWall+0x210>
		//移動量がN割りのフラグ。直進は、Uターンの加減速を含まない、ただの一区画直進なので、移動量判定でできる。と思ったら分けてた?
		//Actはstraight


	}
	else if(Pos.Dir == left)	//左に行くとき
 8009184:	4b5a      	ldr	r3, [pc, #360]	; (80092f0 <ControlWall+0x218>)
 8009186:	789b      	ldrb	r3, [r3, #2]
 8009188:	2b02      	cmp	r3, #2
 800918a:	d140      	bne.n	800920e <ControlWall+0x136>
	{
		if(Pos.Act == slalom)
 800918c:	4b58      	ldr	r3, [pc, #352]	; (80092f0 <ControlWall+0x218>)
 800918e:	791b      	ldrb	r3, [r3, #4]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d108      	bne.n	80091a6 <ControlWall+0xce>
		{
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID, 0);
			TargetAngularV = 0;
 8009194:	4b58      	ldr	r3, [pc, #352]	; (80092f8 <ControlWall+0x220>)
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800919c:	4b57      	ldr	r3, [pc, #348]	; (80092fc <ControlWall+0x224>)
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]





}
 80091a4:	e0a0      	b.n	80092e8 <ControlWall+0x210>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80091a6:	4b52      	ldr	r3, [pc, #328]	; (80092f0 <ControlWall+0x218>)
 80091a8:	791b      	ldrb	r3, [r3, #4]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d11d      	bne.n	80091ea <ControlWall+0x112>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b06      	cmp	r3, #6
 80091b2:	d015      	beq.n	80091e0 <ControlWall+0x108>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091b4:	4b4e      	ldr	r3, [pc, #312]	; (80092f0 <ControlWall+0x218>)
 80091b6:	795b      	ldrb	r3, [r3, #5]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d108      	bne.n	80091ce <ControlWall+0xf6>
					PIDChangeFlag(wall_ctrl_dir, 1);
 80091bc:	2101      	movs	r1, #1
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f003 f99a 	bl	800c4f8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 80091c4:	2100      	movs	r1, #0
 80091c6:	2000      	movs	r0, #0
 80091c8:	f003 f996 	bl	800c4f8 <PIDChangeFlag>
}
 80091cc:	e08c      	b.n	80092e8 <ControlWall+0x210>
					PIDChangeFlag(wall_ctrl_dir, 0);
 80091ce:	2100      	movs	r1, #0
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f003 f991 	bl	800c4f8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80091d6:	2101      	movs	r1, #1
 80091d8:	2000      	movs	r0, #0
 80091da:	f003 f98d 	bl	800c4f8 <PIDChangeFlag>
}
 80091de:	e083      	b.n	80092e8 <ControlWall+0x210>
				PIDChangeFlag( A_VELO_PID , 1);
 80091e0:	2101      	movs	r1, #1
 80091e2:	2000      	movs	r0, #0
 80091e4:	f003 f988 	bl	800c4f8 <PIDChangeFlag>
}
 80091e8:	e07e      	b.n	80092e8 <ControlWall+0x210>
		else if(Pos.Act == accel)
 80091ea:	4b41      	ldr	r3, [pc, #260]	; (80092f0 <ControlWall+0x218>)
 80091ec:	791b      	ldrb	r3, [r3, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d104      	bne.n	80091fc <ControlWall+0x124>
			PIDChangeFlag( A_VELO_PID , 1);
 80091f2:	2101      	movs	r1, #1
 80091f4:	2000      	movs	r0, #0
 80091f6:	f003 f97f 	bl	800c4f8 <PIDChangeFlag>
}
 80091fa:	e075      	b.n	80092e8 <ControlWall+0x210>
		else if(Pos.Act == rotate)
 80091fc:	4b3c      	ldr	r3, [pc, #240]	; (80092f0 <ControlWall+0x218>)
 80091fe:	791b      	ldrb	r3, [r3, #4]
 8009200:	2b03      	cmp	r3, #3
 8009202:	d171      	bne.n	80092e8 <ControlWall+0x210>
			PIDChangeFlag( A_VELO_PID , 0);
 8009204:	2100      	movs	r1, #0
 8009206:	2000      	movs	r0, #0
 8009208:	f003 f976 	bl	800c4f8 <PIDChangeFlag>
}
 800920c:	e06c      	b.n	80092e8 <ControlWall+0x210>
	else if(Pos.Dir == right)
 800920e:	4b38      	ldr	r3, [pc, #224]	; (80092f0 <ControlWall+0x218>)
 8009210:	789b      	ldrb	r3, [r3, #2]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d140      	bne.n	8009298 <ControlWall+0x1c0>
		if(Pos.Act == slalom)
 8009216:	4b36      	ldr	r3, [pc, #216]	; (80092f0 <ControlWall+0x218>)
 8009218:	791b      	ldrb	r3, [r3, #4]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d108      	bne.n	8009230 <ControlWall+0x158>
			TargetAngularV = 0;
 800921e:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <ControlWall+0x220>)
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009226:	4b35      	ldr	r3, [pc, #212]	; (80092fc <ControlWall+0x224>)
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
}
 800922e:	e05b      	b.n	80092e8 <ControlWall+0x210>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 8009230:	4b2f      	ldr	r3, [pc, #188]	; (80092f0 <ControlWall+0x218>)
 8009232:	791b      	ldrb	r3, [r3, #4]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d11d      	bne.n	8009274 <ControlWall+0x19c>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b06      	cmp	r3, #6
 800923c:	d015      	beq.n	800926a <ControlWall+0x192>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800923e:	4b2c      	ldr	r3, [pc, #176]	; (80092f0 <ControlWall+0x218>)
 8009240:	795b      	ldrb	r3, [r3, #5]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d108      	bne.n	8009258 <ControlWall+0x180>
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009246:	2101      	movs	r1, #1
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f003 f955 	bl	800c4f8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800924e:	2100      	movs	r1, #0
 8009250:	2000      	movs	r0, #0
 8009252:	f003 f951 	bl	800c4f8 <PIDChangeFlag>
}
 8009256:	e047      	b.n	80092e8 <ControlWall+0x210>
					PIDChangeFlag(wall_ctrl_dir, 0);
 8009258:	2100      	movs	r1, #0
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f003 f94c 	bl	800c4f8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 8009260:	2101      	movs	r1, #1
 8009262:	2000      	movs	r0, #0
 8009264:	f003 f948 	bl	800c4f8 <PIDChangeFlag>
}
 8009268:	e03e      	b.n	80092e8 <ControlWall+0x210>
				PIDChangeFlag( A_VELO_PID , 1);
 800926a:	2101      	movs	r1, #1
 800926c:	2000      	movs	r0, #0
 800926e:	f003 f943 	bl	800c4f8 <PIDChangeFlag>
}
 8009272:	e039      	b.n	80092e8 <ControlWall+0x210>
		else if(Pos.Act == accel)
 8009274:	4b1e      	ldr	r3, [pc, #120]	; (80092f0 <ControlWall+0x218>)
 8009276:	791b      	ldrb	r3, [r3, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <ControlWall+0x1ae>
			PIDChangeFlag( A_VELO_PID , 1);
 800927c:	2101      	movs	r1, #1
 800927e:	2000      	movs	r0, #0
 8009280:	f003 f93a 	bl	800c4f8 <PIDChangeFlag>
}
 8009284:	e030      	b.n	80092e8 <ControlWall+0x210>
		else if(Pos.Act == rotate)
 8009286:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <ControlWall+0x218>)
 8009288:	791b      	ldrb	r3, [r3, #4]
 800928a:	2b03      	cmp	r3, #3
 800928c:	d12c      	bne.n	80092e8 <ControlWall+0x210>
			PIDChangeFlag( A_VELO_PID , 0);
 800928e:	2100      	movs	r1, #0
 8009290:	2000      	movs	r0, #0
 8009292:	f003 f931 	bl	800c4f8 <PIDChangeFlag>
}
 8009296:	e027      	b.n	80092e8 <ControlWall+0x210>
	else if(Pos.Dir == back)
 8009298:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <ControlWall+0x218>)
 800929a:	789b      	ldrb	r3, [r3, #2]
 800929c:	2b03      	cmp	r3, #3
 800929e:	d123      	bne.n	80092e8 <ControlWall+0x210>
		if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80092a0:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <ControlWall+0x218>)
 80092a2:	791b      	ldrb	r3, [r3, #4]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d115      	bne.n	80092d4 <ControlWall+0x1fc>
			if(Pos.WallSaf == wall_safe)	//フラグ作る。前に壁が無いパターンの減速は、後半の壁の状態の影響を受けることがある。35*0.5mmが目安か。
 80092a8:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <ControlWall+0x218>)
 80092aa:	795b      	ldrb	r3, [r3, #5]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d108      	bne.n	80092c2 <ControlWall+0x1ea>
				PIDChangeFlag(wall_ctrl_dir , 1);
 80092b0:	2101      	movs	r1, #1
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f003 f920 	bl	800c4f8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID, 0);
 80092b8:	2100      	movs	r1, #0
 80092ba:	2000      	movs	r0, #0
 80092bc:	f003 f91c 	bl	800c4f8 <PIDChangeFlag>
}
 80092c0:	e012      	b.n	80092e8 <ControlWall+0x210>
				PIDChangeFlag(wall_ctrl_dir, 0);
 80092c2:	2100      	movs	r1, #0
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f003 f917 	bl	800c4f8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 80092ca:	2101      	movs	r1, #1
 80092cc:	2000      	movs	r0, #0
 80092ce:	f003 f913 	bl	800c4f8 <PIDChangeFlag>
}
 80092d2:	e009      	b.n	80092e8 <ControlWall+0x210>
		else if(Pos.Act == accel)
 80092d4:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <ControlWall+0x218>)
 80092d6:	791b      	ldrb	r3, [r3, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d105      	bne.n	80092e8 <ControlWall+0x210>
			PIDChangeFlag( A_VELO_PID , 1);
 80092dc:	2101      	movs	r1, #1
 80092de:	2000      	movs	r0, #0
 80092e0:	f003 f90a 	bl	800c4f8 <PIDChangeFlag>
}
 80092e4:	e000      	b.n	80092e8 <ControlWall+0x210>
			break;
 80092e6:	bf00      	nop
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20000000 	.word	0x20000000
 80092f4:	200003f8 	.word	0x200003f8
 80092f8:	20000400 	.word	0x20000400
 80092fc:	20000428 	.word	0x20000428

08009300 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
	Pos.Act = Wait;
 8009304:	4b17      	ldr	r3, [pc, #92]	; (8009364 <WaitStopAndReset+0x64>)
 8009306:	2204      	movs	r2, #4
 8009308:	711a      	strb	r2, [r3, #4]
	ControlWall();//ベイブレード対策
 800930a:	f7ff fee5 	bl	80090d8 <ControlWall>
	do
	{

		//壁制御の更新
		TargetVelocityBody = 0;
 800930e:	4b16      	ldr	r3, [pc, #88]	; (8009368 <WaitStopAndReset+0x68>)
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
		Acceleration = 0;
 8009316:	4b15      	ldr	r3, [pc, #84]	; (800936c <WaitStopAndReset+0x6c>)
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 800931e:	4b14      	ldr	r3, [pc, #80]	; (8009370 <WaitStopAndReset+0x70>)
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 8009326:	4b13      	ldr	r3, [pc, #76]	; (8009374 <WaitStopAndReset+0x74>)
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 800932e:	4b12      	ldr	r3, [pc, #72]	; (8009378 <WaitStopAndReset+0x78>)
 8009330:	edd3 7a00 	vldr	s15, [r3]
 8009334:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800937c <WaitStopAndReset+0x7c>
 8009338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800933c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009340:	dd02      	ble.n	8009348 <WaitStopAndReset+0x48>
			printf("回転停止中\r\n");
 8009342:	480f      	ldr	r0, [pc, #60]	; (8009380 <WaitStopAndReset+0x80>)
 8009344:	f00b fc0e 	bl	8014b64 <puts>

	}while(CurrentVelocity[BODY] != 0);
 8009348:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <WaitStopAndReset+0x78>)
 800934a:	edd3 7a02 	vldr	s15, [r3, #8]
 800934e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009356:	d1da      	bne.n	800930e <WaitStopAndReset+0xe>
	HAL_Delay(200);
 8009358:	20c8      	movs	r0, #200	; 0xc8
 800935a:	f005 f9ef 	bl	800e73c <HAL_Delay>
}
 800935e:	bf00      	nop
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000000 	.word	0x20000000
 8009368:	200004a0 	.word	0x200004a0
 800936c:	2000042c 	.word	0x2000042c
 8009370:	20000400 	.word	0x20000400
 8009374:	20000428 	.word	0x20000428
 8009378:	20000440 	.word	0x20000440
 800937c:	43fa0000 	.word	0x43fa0000
 8009380:	08018e38 	.word	0x08018e38
 8009384:	00000000 	.word	0x00000000

08009388 <RotateAccel>:
void RotateAccel(float deg, float rotate_ang_v)
{
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	b095      	sub	sp, #84	; 0x54
 800938e:	af0c      	add	r7, sp, #48	; 0x30
 8009390:	ed87 0a03 	vstr	s0, [r7, #12]
 8009394:	edc7 0a02 	vstr	s1, [r7, #8]
	TargetAngularV = 0;
 8009398:	4b91      	ldr	r3, [pc, #580]	; (80095e0 <RotateAccel+0x258>)
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
	float additional_ang_v=0;
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
	additional_ang_v = rotate_ang_v;//rotate_ang_v - AngularV;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	61fb      	str	r3, [r7, #28]
//
//	int keep_pulse[2] = {
//			TotalPulseLeft,
//			TotalPulseRight
//	};
	float move_angle = deg * M_PI/ 180;
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff f804 	bl	80083b8 <__aeabi_f2d>
 80093b0:	a385      	add	r3, pc, #532	; (adr r3, 80095c8 <RotateAccel+0x240>)
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f7ff f857 	bl	8008468 <__aeabi_dmul>
 80093ba:	4603      	mov	r3, r0
 80093bc:	460c      	mov	r4, r1
 80093be:	4618      	mov	r0, r3
 80093c0:	4621      	mov	r1, r4
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	4b87      	ldr	r3, [pc, #540]	; (80095e4 <RotateAccel+0x25c>)
 80093c8:	f7ff f978 	bl	80086bc <__aeabi_ddiv>
 80093cc:	4603      	mov	r3, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	4618      	mov	r0, r3
 80093d2:	4621      	mov	r1, r4
 80093d4:	f7ff fb40 	bl	8008a58 <__aeabi_d2f>
 80093d8:	4603      	mov	r3, r0
 80093da:	61bb      	str	r3, [r7, #24]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	float debug[2] = {0};
 80093dc:	f107 0310 	add.w	r3, r7, #16
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	605a      	str	r2, [r3, #4]
	debug[0] = Angle;
 80093e6:	4b80      	ldr	r3, [pc, #512]	; (80095e8 <RotateAccel+0x260>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	613b      	str	r3, [r7, #16]
	if( rotate_ang_v > 0)	//右回転
 80093ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80093f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f8:	f340 808f 	ble.w	800951a <RotateAccel+0x192>
	{
		move_angle = move_angle + Angle;//Angleが負にずれ過ぎて、
 80093fc:	4b7a      	ldr	r3, [pc, #488]	; (80095e8 <RotateAccel+0x260>)
 80093fe:	edd3 7a00 	vldr	s15, [r3]
 8009402:	ed97 7a06 	vldr	s14, [r7, #24]
 8009406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800940a:	edc7 7a06 	vstr	s15, [r7, #24]
		debug[1] = move_angle;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	617b      	str	r3, [r7, #20]
		//ここのwhileが抜けないことがある
		while( (move_angle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulseRight ) ) )*/)
 8009412:	e076      	b.n	8009502 <RotateAccel+0x17a>
		{
			AngularAcceleration = 64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8009414:	69f8      	ldr	r0, [r7, #28]
 8009416:	f7fe ffcf 	bl	80083b8 <__aeabi_f2d>
 800941a:	a36d      	add	r3, pc, #436	; (adr r3, 80095d0 <RotateAccel+0x248>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7ff f822 	bl	8008468 <__aeabi_dmul>
 8009424:	4603      	mov	r3, r0
 8009426:	460c      	mov	r4, r1
 8009428:	4625      	mov	r5, r4
 800942a:	461c      	mov	r4, r3
 800942c:	69f8      	ldr	r0, [r7, #28]
 800942e:	f7fe ffc3 	bl	80083b8 <__aeabi_f2d>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4620      	mov	r0, r4
 8009438:	4629      	mov	r1, r5
 800943a:	f7ff f815 	bl	8008468 <__aeabi_dmul>
 800943e:	4603      	mov	r3, r0
 8009440:	460c      	mov	r4, r1
 8009442:	4625      	mov	r5, r4
 8009444:	461c      	mov	r4, r3
 8009446:	edd7 7a03 	vldr	s15, [r7, #12]
 800944a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800944e:	ee17 0a90 	vmov	r0, s15
 8009452:	f7fe ffb1 	bl	80083b8 <__aeabi_f2d>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7ff f92d 	bl	80086bc <__aeabi_ddiv>
 8009462:	4603      	mov	r3, r0
 8009464:	460c      	mov	r4, r1
 8009466:	4618      	mov	r0, r3
 8009468:	4621      	mov	r1, r4
 800946a:	f7ff faf5 	bl	8008a58 <__aeabi_d2f>
 800946e:	4602      	mov	r2, r0
 8009470:	4b5e      	ldr	r3, [pc, #376]	; (80095ec <RotateAccel+0x264>)
 8009472:	601a      	str	r2, [r3, #0]
			//printf("回転加速中: %f, %f, %f, %f\r\n", start_angle, move_angle, Angle, AngularV);

			if( AngularV == -0)	//ベイブレードになりそうだったら止まる。
 8009474:	4b5e      	ldr	r3, [pc, #376]	; (80095f0 <RotateAccel+0x268>)
 8009476:	edd3 7a00 	vldr	s15, [r3]
 800947a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009482:	d13e      	bne.n	8009502 <RotateAccel+0x17a>
			{
				//緊急停止。センサの値を見る。
				Motor_PWM_Stop();
 8009484:	f005 f840 	bl	800e508 <Motor_PWM_Stop>
				while(1)
				{
					Signal(7);
 8009488:	2007      	movs	r0, #7
 800948a:	f003 f9b5 	bl	800c7f8 <Signal>
					printf("回転加速中: photo : %f, %f, debug : %f, %f, AngV:%f, zg:%d, timer1:%d, timer8:%d\r\n",Photo[FL],Photo[FR], debug[0], debug[1], AngularV, zg,timer1,timer8);
 800948e:	4b59      	ldr	r3, [pc, #356]	; (80095f4 <RotateAccel+0x26c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe ff90 	bl	80083b8 <__aeabi_f2d>
 8009498:	e9c7 0100 	strd	r0, r1, [r7]
 800949c:	4b55      	ldr	r3, [pc, #340]	; (80095f4 <RotateAccel+0x26c>)
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe ff89 	bl	80083b8 <__aeabi_f2d>
 80094a6:	4604      	mov	r4, r0
 80094a8:	460d      	mov	r5, r1
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe ff83 	bl	80083b8 <__aeabi_f2d>
 80094b2:	4680      	mov	r8, r0
 80094b4:	4689      	mov	r9, r1
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe ff7d 	bl	80083b8 <__aeabi_f2d>
 80094be:	4682      	mov	sl, r0
 80094c0:	468b      	mov	fp, r1
 80094c2:	4b4b      	ldr	r3, [pc, #300]	; (80095f0 <RotateAccel+0x268>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe ff76 	bl	80083b8 <__aeabi_f2d>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4949      	ldr	r1, [pc, #292]	; (80095f8 <RotateAccel+0x270>)
 80094d2:	8809      	ldrh	r1, [r1, #0]
 80094d4:	b209      	sxth	r1, r1
 80094d6:	460e      	mov	r6, r1
 80094d8:	4948      	ldr	r1, [pc, #288]	; (80095fc <RotateAccel+0x274>)
 80094da:	6809      	ldr	r1, [r1, #0]
 80094dc:	4848      	ldr	r0, [pc, #288]	; (8009600 <RotateAccel+0x278>)
 80094de:	6800      	ldr	r0, [r0, #0]
 80094e0:	900a      	str	r0, [sp, #40]	; 0x28
 80094e2:	9109      	str	r1, [sp, #36]	; 0x24
 80094e4:	9608      	str	r6, [sp, #32]
 80094e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094ea:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80094ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80094f2:	e9cd 4500 	strd	r4, r5, [sp]
 80094f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094fa:	4842      	ldr	r0, [pc, #264]	; (8009604 <RotateAccel+0x27c>)
 80094fc:	f00b fabe 	bl	8014a7c <iprintf>
					Signal(7);
 8009500:	e7c2      	b.n	8009488 <RotateAccel+0x100>
		while( (move_angle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulseRight ) ) )*/)
 8009502:	4b39      	ldr	r3, [pc, #228]	; (80095e8 <RotateAccel+0x260>)
 8009504:	edd3 7a00 	vldr	s15, [r3]
 8009508:	ed97 7a06 	vldr	s14, [r7, #24]
 800950c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009514:	f73f af7e 	bgt.w	8009414 <RotateAccel+0x8c>
 8009518:	e04a      	b.n	80095b0 <RotateAccel+0x228>

			}
		}

	}
	else if( rotate_ang_v < 0)
 800951a:	edd7 7a02 	vldr	s15, [r7, #8]
 800951e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009526:	d543      	bpl.n	80095b0 <RotateAccel+0x228>
	{
		move_angle = -move_angle + Angle;
 8009528:	4b2f      	ldr	r3, [pc, #188]	; (80095e8 <RotateAccel+0x260>)
 800952a:	ed93 7a00 	vldr	s14, [r3]
 800952e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009536:	edc7 7a06 	vstr	s15, [r7, #24]
		//printf("加速 負\r\n");
		while( (move_angle < Angle)/* && ( ( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulseRight ) ) ) */)
 800953a:	e02f      	b.n	800959c <RotateAccel+0x214>
		{

			AngularAcceleration = -1*64*T1*additional_ang_v*additional_ang_v / (2*deg);
 800953c:	69f8      	ldr	r0, [r7, #28]
 800953e:	f7fe ff3b 	bl	80083b8 <__aeabi_f2d>
 8009542:	a325      	add	r3, pc, #148	; (adr r3, 80095d8 <RotateAccel+0x250>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f7fe ff8e 	bl	8008468 <__aeabi_dmul>
 800954c:	4603      	mov	r3, r0
 800954e:	460c      	mov	r4, r1
 8009550:	4625      	mov	r5, r4
 8009552:	461c      	mov	r4, r3
 8009554:	69f8      	ldr	r0, [r7, #28]
 8009556:	f7fe ff2f 	bl	80083b8 <__aeabi_f2d>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4620      	mov	r0, r4
 8009560:	4629      	mov	r1, r5
 8009562:	f7fe ff81 	bl	8008468 <__aeabi_dmul>
 8009566:	4603      	mov	r3, r0
 8009568:	460c      	mov	r4, r1
 800956a:	4625      	mov	r5, r4
 800956c:	461c      	mov	r4, r3
 800956e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009572:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009576:	ee17 0a90 	vmov	r0, s15
 800957a:	f7fe ff1d 	bl	80083b8 <__aeabi_f2d>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f7ff f899 	bl	80086bc <__aeabi_ddiv>
 800958a:	4603      	mov	r3, r0
 800958c:	460c      	mov	r4, r1
 800958e:	4618      	mov	r0, r3
 8009590:	4621      	mov	r1, r4
 8009592:	f7ff fa61 	bl	8008a58 <__aeabi_d2f>
 8009596:	4602      	mov	r2, r0
 8009598:	4b14      	ldr	r3, [pc, #80]	; (80095ec <RotateAccel+0x264>)
 800959a:	601a      	str	r2, [r3, #0]
		while( (move_angle < Angle)/* && ( ( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulseRight ) ) ) */)
 800959c:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <RotateAccel+0x260>)
 800959e:	edd3 7a00 	vldr	s15, [r3]
 80095a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80095a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ae:	d4c5      	bmi.n	800953c <RotateAccel+0x1b4>

		}

	}
	AngularAcceleration = 0;
 80095b0:	4b0e      	ldr	r3, [pc, #56]	; (80095ec <RotateAccel+0x264>)
 80095b2:	f04f 0200 	mov.w	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
}
 80095b8:	bf00      	nop
 80095ba:	3724      	adds	r7, #36	; 0x24
 80095bc:	46bd      	mov	sp, r7
 80095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c2:	bf00      	nop
 80095c4:	f3af 8000 	nop.w
 80095c8:	54442d18 	.word	0x54442d18
 80095cc:	400921fb 	.word	0x400921fb
 80095d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80095d4:	3fb0624d 	.word	0x3fb0624d
 80095d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80095dc:	bfb0624d 	.word	0xbfb0624d
 80095e0:	20000400 	.word	0x20000400
 80095e4:	40668000 	.word	0x40668000
 80095e8:	20000258 	.word	0x20000258
 80095ec:	20000428 	.word	0x20000428
 80095f0:	20000254 	.word	0x20000254
 80095f4:	20000458 	.word	0x20000458
 80095f8:	20000a20 	.word	0x20000a20
 80095fc:	200003e4 	.word	0x200003e4
 8009600:	200003e0 	.word	0x200003e0
 8009604:	08018e4c 	.word	0x08018e4c

08009608 <RotateConst>:
void RotateConst(float deg, float rotate_ang_v)
{
 8009608:	b590      	push	{r4, r7, lr}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009612:	edc7 0a00 	vstr	s1, [r7]
//
//	int keep_pulse[2] = {
//			TotalPulseLeft,
//			TotalPulseRight
//	};
	float move_angle = deg * M_PI/ 180;
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7fe fece 	bl	80083b8 <__aeabi_f2d>
 800961c:	a33e      	add	r3, pc, #248	; (adr r3, 8009718 <RotateConst+0x110>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	f7fe ff21 	bl	8008468 <__aeabi_dmul>
 8009626:	4603      	mov	r3, r0
 8009628:	460c      	mov	r4, r1
 800962a:	4618      	mov	r0, r3
 800962c:	4621      	mov	r1, r4
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	4b33      	ldr	r3, [pc, #204]	; (8009700 <RotateConst+0xf8>)
 8009634:	f7ff f842 	bl	80086bc <__aeabi_ddiv>
 8009638:	4603      	mov	r3, r0
 800963a:	460c      	mov	r4, r1
 800963c:	4618      	mov	r0, r3
 800963e:	4621      	mov	r1, r4
 8009640:	f7ff fa0a 	bl	8008a58 <__aeabi_d2f>
 8009644:	4603      	mov	r3, r0
 8009646:	60fb      	str	r3, [r7, #12]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if (rotate_ang_v > 0)
 8009648:	edd7 7a00 	vldr	s15, [r7]
 800964c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009654:	dd2d      	ble.n	80096b2 <RotateConst+0xaa>
	{
		move_angle += Angle;
 8009656:	4b2b      	ldr	r3, [pc, #172]	; (8009704 <RotateConst+0xfc>)
 8009658:	edd3 7a00 	vldr	s15, [r3]
 800965c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009664:	edc7 7a03 	vstr	s15, [r7, #12]
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulseRight ) )) )
 8009668:	e018      	b.n	800969c <RotateConst+0x94>
		{
			//TargetAngularV = rotate_ang_v;
			AngularAcceleration = 0;
 800966a:	4b27      	ldr	r3, [pc, #156]	; (8009708 <RotateConst+0x100>)
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
			if(CurrentVelocity[LEFT] > 500)
 8009672:	4b26      	ldr	r3, [pc, #152]	; (800970c <RotateConst+0x104>)
 8009674:	edd3 7a00 	vldr	s15, [r3]
 8009678:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009710 <RotateConst+0x108>
 800967c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009684:	dc00      	bgt.n	8009688 <RotateConst+0x80>
 8009686:	e009      	b.n	800969c <RotateConst+0x94>
				printf("回転定速中: %f\r\n", move_angle);
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7fe fe95 	bl	80083b8 <__aeabi_f2d>
 800968e:	4603      	mov	r3, r0
 8009690:	460c      	mov	r4, r1
 8009692:	461a      	mov	r2, r3
 8009694:	4623      	mov	r3, r4
 8009696:	481f      	ldr	r0, [pc, #124]	; (8009714 <RotateConst+0x10c>)
 8009698:	f00b f9f0 	bl	8014a7c <iprintf>
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulseRight ) )) )
 800969c:	4b19      	ldr	r3, [pc, #100]	; (8009704 <RotateConst+0xfc>)
 800969e:	edd3 7a00 	vldr	s15, [r3]
 80096a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80096a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ae:	dcdc      	bgt.n	800966a <RotateConst+0x62>
 80096b0:	e01e      	b.n	80096f0 <RotateConst+0xe8>

		}

	}
	else if (rotate_ang_v < 0)
 80096b2:	edd7 7a00 	vldr	s15, [r7]
 80096b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096be:	d517      	bpl.n	80096f0 <RotateConst+0xe8>
	{
		move_angle = -move_angle + Angle;
 80096c0:	4b10      	ldr	r3, [pc, #64]	; (8009704 <RotateConst+0xfc>)
 80096c2:	ed93 7a00 	vldr	s14, [r3]
 80096c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80096ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096ce:	edc7 7a03 	vstr	s15, [r7, #12]
		//printf("定速 負\r\n");
		while( (move_angle < Angle))// &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulseRight ) )) )
 80096d2:	e003      	b.n	80096dc <RotateConst+0xd4>
		{
			//TargetAngularV = rotate_ang_v;

			AngularAcceleration = 0;
 80096d4:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <RotateConst+0x100>)
 80096d6:	f04f 0200 	mov.w	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
		while( (move_angle < Angle))// &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulseRight ) )) )
 80096dc:	4b09      	ldr	r3, [pc, #36]	; (8009704 <RotateConst+0xfc>)
 80096de:	edd3 7a00 	vldr	s15, [r3]
 80096e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80096e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ee:	d4f1      	bmi.n	80096d4 <RotateConst+0xcc>
		}

	}
	AngularAcceleration = 0;
 80096f0:	4b05      	ldr	r3, [pc, #20]	; (8009708 <RotateConst+0x100>)
 80096f2:	f04f 0200 	mov.w	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
}
 80096f8:	bf00      	nop
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd90      	pop	{r4, r7, pc}
 8009700:	40668000 	.word	0x40668000
 8009704:	20000258 	.word	0x20000258
 8009708:	20000428 	.word	0x20000428
 800970c:	20000440 	.word	0x20000440
 8009710:	43fa0000 	.word	0x43fa0000
 8009714:	08018ea4 	.word	0x08018ea4
 8009718:	54442d18 	.word	0x54442d18
 800971c:	400921fb 	.word	0x400921fb

08009720 <RotateDecel>:
void RotateDecel(float deg, float rotate_ang_v)
{
 8009720:	b5b0      	push	{r4, r5, r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	ed87 0a01 	vstr	s0, [r7, #4]
 800972a:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 800972e:	f04f 0300 	mov.w	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
	additional_ang_v = rotate_ang_v;// - AngularV;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	60fb      	str	r3, [r7, #12]
//	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
//	int keep_pulse[2] = {
//			TotalPulseLeft,
//			TotalPulseRight
//	};
	float move_angle = deg * M_PI / 180;
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7fe fe3d 	bl	80083b8 <__aeabi_f2d>
 800973e:	a386      	add	r3, pc, #536	; (adr r3, 8009958 <RotateDecel+0x238>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f7fe fe90 	bl	8008468 <__aeabi_dmul>
 8009748:	4603      	mov	r3, r0
 800974a:	460c      	mov	r4, r1
 800974c:	4618      	mov	r0, r3
 800974e:	4621      	mov	r1, r4
 8009750:	f04f 0200 	mov.w	r2, #0
 8009754:	4b76      	ldr	r3, [pc, #472]	; (8009930 <RotateDecel+0x210>)
 8009756:	f7fe ffb1 	bl	80086bc <__aeabi_ddiv>
 800975a:	4603      	mov	r3, r0
 800975c:	460c      	mov	r4, r1
 800975e:	4618      	mov	r0, r3
 8009760:	4621      	mov	r1, r4
 8009762:	f7ff f979 	bl	8008a58 <__aeabi_d2f>
 8009766:	4603      	mov	r3, r0
 8009768:	60bb      	str	r3, [r7, #8]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 800976a:	edd7 7a00 	vldr	s15, [r7]
 800976e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009776:	dd69      	ble.n	800984c <RotateDecel+0x12c>
	{
		move_angle += Angle;
 8009778:	4b6e      	ldr	r3, [pc, #440]	; (8009934 <RotateDecel+0x214>)
 800977a:	edd3 7a00 	vldr	s15, [r3]
 800977e:	ed97 7a02 	vldr	s14, [r7, #8]
 8009782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009786:	edc7 7a02 	vstr	s15, [r7, #8]

		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulseRight ) )) )
 800978a:	e054      	b.n	8009836 <RotateDecel+0x116>
		{
			AngularAcceleration = -1*64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7fe fe13 	bl	80083b8 <__aeabi_f2d>
 8009792:	a365      	add	r3, pc, #404	; (adr r3, 8009928 <RotateDecel+0x208>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7fe fe66 	bl	8008468 <__aeabi_dmul>
 800979c:	4603      	mov	r3, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	4625      	mov	r5, r4
 80097a2:	461c      	mov	r4, r3
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7fe fe07 	bl	80083b8 <__aeabi_f2d>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4620      	mov	r0, r4
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7fe fe59 	bl	8008468 <__aeabi_dmul>
 80097b6:	4603      	mov	r3, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	4625      	mov	r5, r4
 80097bc:	461c      	mov	r4, r3
 80097be:	edd7 7a01 	vldr	s15, [r7, #4]
 80097c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80097c6:	ee17 0a90 	vmov	r0, s15
 80097ca:	f7fe fdf5 	bl	80083b8 <__aeabi_f2d>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4620      	mov	r0, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	f7fe ff71 	bl	80086bc <__aeabi_ddiv>
 80097da:	4603      	mov	r3, r0
 80097dc:	460c      	mov	r4, r1
 80097de:	4618      	mov	r0, r3
 80097e0:	4621      	mov	r1, r4
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	4b54      	ldr	r3, [pc, #336]	; (8009938 <RotateDecel+0x218>)
 80097e8:	f7fe fe3e 	bl	8008468 <__aeabi_dmul>
 80097ec:	4603      	mov	r3, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	4618      	mov	r0, r3
 80097f2:	4621      	mov	r1, r4
 80097f4:	f7ff f930 	bl	8008a58 <__aeabi_d2f>
 80097f8:	4602      	mov	r2, r0
 80097fa:	4b50      	ldr	r3, [pc, #320]	; (800993c <RotateDecel+0x21c>)
 80097fc:	601a      	str	r2, [r3, #0]
			if(CurrentVelocity[LEFT] > 500)
 80097fe:	4b50      	ldr	r3, [pc, #320]	; (8009940 <RotateDecel+0x220>)
 8009800:	edd3 7a00 	vldr	s15, [r3]
 8009804:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8009944 <RotateDecel+0x224>
 8009808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800980c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009810:	dd09      	ble.n	8009826 <RotateDecel+0x106>
				printf("回転減速中: %f\r\n", move_angle);
 8009812:	68b8      	ldr	r0, [r7, #8]
 8009814:	f7fe fdd0 	bl	80083b8 <__aeabi_f2d>
 8009818:	4603      	mov	r3, r0
 800981a:	460c      	mov	r4, r1
 800981c:	461a      	mov	r2, r3
 800981e:	4623      	mov	r3, r4
 8009820:	4849      	ldr	r0, [pc, #292]	; (8009948 <RotateDecel+0x228>)
 8009822:	f00b f92b 	bl	8014a7c <iprintf>

			if( AngularV <= 0)
 8009826:	4b49      	ldr	r3, [pc, #292]	; (800994c <RotateDecel+0x22c>)
 8009828:	edd3 7a00 	vldr	s15, [r3]
 800982c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009834:	d967      	bls.n	8009906 <RotateDecel+0x1e6>
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulseRight ) )) )
 8009836:	4b3f      	ldr	r3, [pc, #252]	; (8009934 <RotateDecel+0x214>)
 8009838:	edd3 7a00 	vldr	s15, [r3]
 800983c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009848:	dca0      	bgt.n	800978c <RotateDecel+0x6c>
 800984a:	e05f      	b.n	800990c <RotateDecel+0x1ec>
				break;
		}

	}
	else if( rotate_ang_v < 0)
 800984c:	edd7 7a00 	vldr	s15, [r7]
 8009850:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009858:	d558      	bpl.n	800990c <RotateDecel+0x1ec>
	{
		move_angle = -move_angle + Angle;
 800985a:	4b36      	ldr	r3, [pc, #216]	; (8009934 <RotateDecel+0x214>)
 800985c:	ed93 7a00 	vldr	s14, [r3]
 8009860:	edd7 7a02 	vldr	s15, [r7, #8]
 8009864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009868:	edc7 7a02 	vstr	s15, [r7, #8]
		//printf("減速 負\r\n");
		while( (move_angle < Angle) )//&&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulseRight ) )) )
 800986c:	e040      	b.n	80098f0 <RotateDecel+0x1d0>
		{
			AngularAcceleration = 64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7fe fda2 	bl	80083b8 <__aeabi_f2d>
 8009874:	a32c      	add	r3, pc, #176	; (adr r3, 8009928 <RotateDecel+0x208>)
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	f7fe fdf5 	bl	8008468 <__aeabi_dmul>
 800987e:	4603      	mov	r3, r0
 8009880:	460c      	mov	r4, r1
 8009882:	4625      	mov	r5, r4
 8009884:	461c      	mov	r4, r3
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7fe fd96 	bl	80083b8 <__aeabi_f2d>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4620      	mov	r0, r4
 8009892:	4629      	mov	r1, r5
 8009894:	f7fe fde8 	bl	8008468 <__aeabi_dmul>
 8009898:	4603      	mov	r3, r0
 800989a:	460c      	mov	r4, r1
 800989c:	4625      	mov	r5, r4
 800989e:	461c      	mov	r4, r3
 80098a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80098a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098a8:	ee17 0a90 	vmov	r0, s15
 80098ac:	f7fe fd84 	bl	80083b8 <__aeabi_f2d>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4620      	mov	r0, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7fe ff00 	bl	80086bc <__aeabi_ddiv>
 80098bc:	4603      	mov	r3, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	4618      	mov	r0, r3
 80098c2:	4621      	mov	r1, r4
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	4b21      	ldr	r3, [pc, #132]	; (8009950 <RotateDecel+0x230>)
 80098ca:	f7fe fdcd 	bl	8008468 <__aeabi_dmul>
 80098ce:	4603      	mov	r3, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	4618      	mov	r0, r3
 80098d4:	4621      	mov	r1, r4
 80098d6:	f7ff f8bf 	bl	8008a58 <__aeabi_d2f>
 80098da:	4602      	mov	r2, r0
 80098dc:	4b17      	ldr	r3, [pc, #92]	; (800993c <RotateDecel+0x21c>)
 80098de:	601a      	str	r2, [r3, #0]

			if( AngularV >= 0)
 80098e0:	4b1a      	ldr	r3, [pc, #104]	; (800994c <RotateDecel+0x22c>)
 80098e2:	edd3 7a00 	vldr	s15, [r3]
 80098e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ee:	da0c      	bge.n	800990a <RotateDecel+0x1ea>
		while( (move_angle < Angle) )//&&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulseLeft ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulseRight ) )) )
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <RotateDecel+0x214>)
 80098f2:	edd3 7a00 	vldr	s15, [r3]
 80098f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80098fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009902:	d4b4      	bmi.n	800986e <RotateDecel+0x14e>
 8009904:	e002      	b.n	800990c <RotateDecel+0x1ec>
				break;
 8009906:	bf00      	nop
 8009908:	e000      	b.n	800990c <RotateDecel+0x1ec>
				break;
 800990a:	bf00      	nop
		}

	}
	AngularAcceleration = 0;
 800990c:	4b0b      	ldr	r3, [pc, #44]	; (800993c <RotateDecel+0x21c>)
 800990e:	f04f 0200 	mov.w	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <RotateDecel+0x234>)
 8009916:	f04f 0200 	mov.w	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
}
 800991c:	bf00      	nop
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bdb0      	pop	{r4, r5, r7, pc}
 8009924:	f3af 8000 	nop.w
 8009928:	d2f1a9fc 	.word	0xd2f1a9fc
 800992c:	3f50624d 	.word	0x3f50624d
 8009930:	40668000 	.word	0x40668000
 8009934:	20000258 	.word	0x20000258
 8009938:	c0500000 	.word	0xc0500000
 800993c:	20000428 	.word	0x20000428
 8009940:	20000440 	.word	0x20000440
 8009944:	43fa0000 	.word	0x43fa0000
 8009948:	08018ebc 	.word	0x08018ebc
 800994c:	20000254 	.word	0x20000254
 8009950:	40500000 	.word	0x40500000
 8009954:	20000400 	.word	0x20000400
 8009958:	54442d18 	.word	0x54442d18
 800995c:	400921fb 	.word	0x400921fb

08009960 <Rotate>:
void Rotate(float deg, float ang_accel)
{
 8009960:	b590      	push	{r4, r7, lr}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	ed87 0a01 	vstr	s0, [r7, #4]
 800996a:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = rotate;
 800996e:	4b4a      	ldr	r3, [pc, #296]	; (8009a98 <Rotate+0x138>)
 8009970:	2203      	movs	r2, #3
 8009972:	711a      	strb	r2, [r3, #4]
//	}
//	InitPulse((int*)(&(TIM3->CNT)), INITIAL_PULSE);
//	InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//	ResetCounter();

	WallWarn();
 8009974:	f7ff fba4 	bl	80090c0 <WallWarn>
	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
 8009978:	f7ff fbae 	bl	80090d8 <ControlWall>
	RotateAccel(deg*30/90, ang_accel);//15
 800997c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009980:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8009984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009988:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8009a9c <Rotate+0x13c>
 800998c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009990:	edd7 0a00 	vldr	s1, [r7]
 8009994:	eeb0 0a66 	vmov.f32	s0, s13
 8009998:	f7ff fcf6 	bl	8009388 <RotateAccel>
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);
	RotateConst(deg*30/90, ang_accel);//25
 800999c:	edd7 7a01 	vldr	s15, [r7, #4]
 80099a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80099a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099a8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8009a9c <Rotate+0x13c>
 80099ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80099b0:	edd7 0a00 	vldr	s1, [r7]
 80099b4:	eeb0 0a66 	vmov.f32	s0, s13
 80099b8:	f7ff fe26 	bl	8009608 <RotateConst>
	RotateDecel(deg*30/90, ang_accel);//50
 80099bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80099c0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80099c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099c8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009a9c <Rotate+0x13c>
 80099cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80099d0:	edd7 0a00 	vldr	s1, [r7]
 80099d4:	eeb0 0a66 	vmov.f32	s0, s13
 80099d8:	f7ff fea2 	bl	8009720 <RotateDecel>
//			TargetAngularV = ang_accel;
//			printf("deg:負, Angle, AngularV : %f, %f\r\n",Angle, AngularV );
//		}
//
//	}
	WaitStopAndReset();
 80099dc:	f7ff fc90 	bl	8009300 <WaitStopAndReset>
	ControlWall();
 80099e0:	f7ff fb7a 	bl	80090d8 <ControlWall>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 80099e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80099e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8009aa0 <Rotate+0x140>
 80099ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80099f0:	ee16 0a90 	vmov	r0, s13
 80099f4:	f7fe fce0 	bl	80083b8 <__aeabi_f2d>
 80099f8:	a325      	add	r3, pc, #148	; (adr r3, 8009a90 <Rotate+0x130>)
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f7fe fd33 	bl	8008468 <__aeabi_dmul>
 8009a02:	4603      	mov	r3, r0
 8009a04:	460c      	mov	r4, r1
 8009a06:	4618      	mov	r0, r3
 8009a08:	4621      	mov	r1, r4
 8009a0a:	f7fe ffdd 	bl	80089c8 <__aeabi_d2iz>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	60fb      	str	r3, [r7, #12]
	if(ang_accel < 0)
 8009a12:	edd7 7a00 	vldr	s15, [r7]
 8009a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1e:	d513      	bpl.n	8009a48 <Rotate+0xe8>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 8009a20:	4b20      	ldr	r3, [pc, #128]	; (8009aa4 <Rotate+0x144>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	0fd9      	lsrs	r1, r3, #31
 8009a28:	440b      	add	r3, r1
 8009a2a:	105b      	asrs	r3, r3, #1
 8009a2c:	425b      	negs	r3, r3
 8009a2e:	4413      	add	r3, r2
 8009a30:	4a1c      	ldr	r2, [pc, #112]	; (8009aa4 <Rotate+0x144>)
 8009a32:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009a34:	4b1b      	ldr	r3, [pc, #108]	; (8009aa4 <Rotate+0x144>)
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	0fd9      	lsrs	r1, r3, #31
 8009a3c:	440b      	add	r3, r1
 8009a3e:	105b      	asrs	r3, r3, #1
 8009a40:	4413      	add	r3, r2
 8009a42:	4a18      	ldr	r2, [pc, #96]	; (8009aa4 <Rotate+0x144>)
 8009a44:	6053      	str	r3, [r2, #4]
 8009a46:	e019      	b.n	8009a7c <Rotate+0x11c>
	}
	else 	if(ang_accel > 0)
 8009a48:	edd7 7a00 	vldr	s15, [r7]
 8009a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a54:	dd12      	ble.n	8009a7c <Rotate+0x11c>
	{
		KeepPulse[LEFT] += target_pulse/2;
 8009a56:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <Rotate+0x144>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	0fd9      	lsrs	r1, r3, #31
 8009a5e:	440b      	add	r3, r1
 8009a60:	105b      	asrs	r3, r3, #1
 8009a62:	4413      	add	r3, r2
 8009a64:	4a0f      	ldr	r2, [pc, #60]	; (8009aa4 <Rotate+0x144>)
 8009a66:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 8009a68:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <Rotate+0x144>)
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	0fd9      	lsrs	r1, r3, #31
 8009a70:	440b      	add	r3, r1
 8009a72:	105b      	asrs	r3, r3, #1
 8009a74:	425b      	negs	r3, r3
 8009a76:	4413      	add	r3, r2
 8009a78:	4a0a      	ldr	r2, [pc, #40]	; (8009aa4 <Rotate+0x144>)
 8009a7a:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 8009a7c:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <Rotate+0x144>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	4a08      	ldr	r2, [pc, #32]	; (8009aa4 <Rotate+0x144>)
 8009a82:	6093      	str	r3, [r2, #8]

	//printf("回転終了\r\n");
}
 8009a84:	bf00      	nop
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd90      	pop	{r4, r7, pc}
 8009a8c:	f3af 8000 	nop.w
 8009a90:	c95204f7 	.word	0xc95204f7
 8009a94:	40fc5979 	.word	0x40fc5979
 8009a98:	20000000 	.word	0x20000000
 8009a9c:	42b40000 	.word	0x42b40000
 8009aa0:	43b40000 	.word	0x43b40000
 8009aa4:	2000044c 	.word	0x2000044c

08009aa8 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	b095      	sub	sp, #84	; 0x54
 8009aae:	af0a      	add	r7, sp, #40	; 0x28
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009ab0:	4ba7      	ldr	r3, [pc, #668]	; (8009d50 <SlalomRight+0x2a8>)
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009ab6:	f7ff fb0f 	bl	80090d8 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009aba:	4ba6      	ldr	r3, [pc, #664]	; (8009d54 <SlalomRight+0x2ac>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = 4;         //スラローム前距離
 8009ac0:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8009ac4:	623b      	str	r3, [r7, #32]
	float fol = 6;         //スラローム後距離
 8009ac6:	4ba4      	ldr	r3, [pc, #656]	; (8009d58 <SlalomRight+0x2b0>)
 8009ac8:	61fb      	str	r3, [r7, #28]
	float alpha_turn = 0.0115;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009aca:	4ba4      	ldr	r3, [pc, #656]	; (8009d5c <SlalomRight+0x2b4>)
 8009acc:	61bb      	str	r3, [r7, #24]
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 8009ace:	4ba4      	ldr	r3, [pc, #656]	; (8009d60 <SlalomRight+0x2b8>)
 8009ad0:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009ad2:	4ba4      	ldr	r3, [pc, #656]	; (8009d64 <SlalomRight+0x2bc>)
 8009ad4:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009ad6:	4ba4      	ldr	r3, [pc, #656]	; (8009d68 <SlalomRight+0x2c0>)
 8009ad8:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 8009ada:	4ba4      	ldr	r3, [pc, #656]	; (8009d6c <SlalomRight+0x2c4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulseLeft + TotalPulseRight;	//汎用的に書いておく
 8009ae0:	4ba3      	ldr	r3, [pc, #652]	; (8009d70 <SlalomRight+0x2c8>)
 8009ae2:	ed93 7a00 	vldr	s14, [r3]
 8009ae6:	4ba3      	ldr	r3, [pc, #652]	; (8009d74 <SlalomRight+0x2cc>)
 8009ae8:	edd3 7a00 	vldr	s15, [r3]
 8009aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009af4:	ee17 3a90 	vmov	r3, s15
 8009af8:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulseLeft + TotalPulseRight) ) //移動量を条件に直進
 8009afa:	e00a      	b.n	8009b12 <SlalomRight+0x6a>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009afc:	4b9e      	ldr	r3, [pc, #632]	; (8009d78 <SlalomRight+0x2d0>)
 8009afe:	f04f 0200 	mov.w	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009b04:	4b9d      	ldr	r3, [pc, #628]	; (8009d7c <SlalomRight+0x2d4>)
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
			TargetVelocityBody = v_turn;
 8009b0c:	4a9c      	ldr	r2, [pc, #624]	; (8009d80 <SlalomRight+0x2d8>)
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	6013      	str	r3, [r2, #0]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulseLeft + TotalPulseRight) ) //移動量を条件に直進
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7fe fc3e 	bl	8008394 <__aeabi_i2d>
 8009b18:	4604      	mov	r4, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009b24:	ee17 0a90 	vmov	r0, s15
 8009b28:	f7fe fc46 	bl	80083b8 <__aeabi_f2d>
 8009b2c:	a386      	add	r3, pc, #536	; (adr r3, 8009d48 <SlalomRight+0x2a0>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7fe fdc3 	bl	80086bc <__aeabi_ddiv>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	f7fe fadd 	bl	80080fc <__adddf3>
 8009b42:	4603      	mov	r3, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	4625      	mov	r5, r4
 8009b48:	461c      	mov	r4, r3
 8009b4a:	4b89      	ldr	r3, [pc, #548]	; (8009d70 <SlalomRight+0x2c8>)
 8009b4c:	ed93 7a00 	vldr	s14, [r3]
 8009b50:	4b88      	ldr	r3, [pc, #544]	; (8009d74 <SlalomRight+0x2cc>)
 8009b52:	edd3 7a00 	vldr	s15, [r3]
 8009b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b5a:	ee17 0a90 	vmov	r0, s15
 8009b5e:	f7fe fc2b 	bl	80083b8 <__aeabi_f2d>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4620      	mov	r0, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7fe ff0d 	bl	8008988 <__aeabi_dcmpgt>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1c3      	bne.n	8009afc <SlalomRight+0x54>

			////printf("直進1\r\n");
	}
	now_angv = AngularV;
 8009b74:	4b7d      	ldr	r3, [pc, #500]	; (8009d6c <SlalomRight+0x2c4>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 8009b7a:	4b82      	ldr	r3, [pc, #520]	; (8009d84 <SlalomRight+0x2dc>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	603b      	str	r3, [r7, #0]

	while(start_angle + ang1 > Angle)
 8009b80:	e046      	b.n	8009c10 <SlalomRight+0x168>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			AngularAcceleration = alpha_turn;
 8009b82:	4a7e      	ldr	r2, [pc, #504]	; (8009d7c <SlalomRight+0x2d4>)
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	6013      	str	r3, [r2, #0]
			TargetVelocityBody = v_turn;
 8009b88:	4a7d      	ldr	r2, [pc, #500]	; (8009d80 <SlalomRight+0x2d8>)
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	6013      	str	r3, [r2, #0]

			if( AngularV == 0)	//ベイブレードになりそうだったら止まる。
 8009b8e:	4b77      	ldr	r3, [pc, #476]	; (8009d6c <SlalomRight+0x2c4>)
 8009b90:	edd3 7a00 	vldr	s15, [r3]
 8009b94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9c:	d138      	bne.n	8009c10 <SlalomRight+0x168>
			{
				t = 0;
 8009b9e:	4b7a      	ldr	r3, [pc, #488]	; (8009d88 <SlalomRight+0x2e0>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
				//緊急停止。センサの値を見る。
				Motor_PWM_Stop();
 8009ba4:	f004 fcb0 	bl	800e508 <Motor_PWM_Stop>
				while(1)
				{
					Signal(7);
 8009ba8:	2007      	movs	r0, #7
 8009baa:	f002 fe25 	bl	800c7f8 <Signal>
					printf("スラローム加速中: photo : %f, %f, now_angv:%f, AngV:%f, zg:%d, timer1:%d, timer8:%d\r\n",Photo[FL],Photo[FR],now_angv,AngularV, zg,timer1,timer8);
 8009bae:	4b77      	ldr	r3, [pc, #476]	; (8009d8c <SlalomRight+0x2e4>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe fc00 	bl	80083b8 <__aeabi_f2d>
 8009bb8:	4682      	mov	sl, r0
 8009bba:	468b      	mov	fp, r1
 8009bbc:	4b73      	ldr	r3, [pc, #460]	; (8009d8c <SlalomRight+0x2e4>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fe fbf9 	bl	80083b8 <__aeabi_f2d>
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	460d      	mov	r5, r1
 8009bca:	68b8      	ldr	r0, [r7, #8]
 8009bcc:	f7fe fbf4 	bl	80083b8 <__aeabi_f2d>
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	4689      	mov	r9, r1
 8009bd4:	4b65      	ldr	r3, [pc, #404]	; (8009d6c <SlalomRight+0x2c4>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fbed 	bl	80083b8 <__aeabi_f2d>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	496b      	ldr	r1, [pc, #428]	; (8009d90 <SlalomRight+0x2e8>)
 8009be4:	8809      	ldrh	r1, [r1, #0]
 8009be6:	b209      	sxth	r1, r1
 8009be8:	460e      	mov	r6, r1
 8009bea:	496a      	ldr	r1, [pc, #424]	; (8009d94 <SlalomRight+0x2ec>)
 8009bec:	6809      	ldr	r1, [r1, #0]
 8009bee:	486a      	ldr	r0, [pc, #424]	; (8009d98 <SlalomRight+0x2f0>)
 8009bf0:	6800      	ldr	r0, [r0, #0]
 8009bf2:	9008      	str	r0, [sp, #32]
 8009bf4:	9107      	str	r1, [sp, #28]
 8009bf6:	9606      	str	r6, [sp, #24]
 8009bf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009bfc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009c00:	e9cd 4500 	strd	r4, r5, [sp]
 8009c04:	4652      	mov	r2, sl
 8009c06:	465b      	mov	r3, fp
 8009c08:	4864      	ldr	r0, [pc, #400]	; (8009d9c <SlalomRight+0x2f4>)
 8009c0a:	f00a ff37 	bl	8014a7c <iprintf>
					Signal(7);
 8009c0e:	e7cb      	b.n	8009ba8 <SlalomRight+0x100>
	while(start_angle + ang1 > Angle)
 8009c10:	ed97 7a00 	vldr	s14, [r7]
 8009c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c1c:	4b59      	ldr	r3, [pc, #356]	; (8009d84 <SlalomRight+0x2dc>)
 8009c1e:	edd3 7a00 	vldr	s15, [r3]
 8009c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2a:	dcaa      	bgt.n	8009b82 <SlalomRight+0xda>

			}

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009c2c:	4b53      	ldr	r3, [pc, #332]	; (8009d7c <SlalomRight+0x2d4>)
 8009c2e:	f04f 0200 	mov.w	r2, #0
 8009c32:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 8009c34:	4b4d      	ldr	r3, [pc, #308]	; (8009d6c <SlalomRight+0x2c4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009c3a:	e036      	b.n	8009caa <SlalomRight+0x202>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009c3c:	4b4e      	ldr	r3, [pc, #312]	; (8009d78 <SlalomRight+0x2d0>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a4d      	ldr	r2, [pc, #308]	; (8009d78 <SlalomRight+0x2d0>)
 8009c42:	6013      	str	r3, [r2, #0]
			TargetVelocityBody = v_turn;
 8009c44:	4a4e      	ldr	r2, [pc, #312]	; (8009d80 <SlalomRight+0x2d8>)
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	6013      	str	r3, [r2, #0]
			////printf("円弧\r\n");
			if(AngularV == 0)	//ベイブレードになりそうだったら止まる。
 8009c4a:	4b48      	ldr	r3, [pc, #288]	; (8009d6c <SlalomRight+0x2c4>)
 8009c4c:	edd3 7a00 	vldr	s15, [r3]
 8009c50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c58:	d127      	bne.n	8009caa <SlalomRight+0x202>
			{
				//緊急停止。センサの値を見る。
				Motor_PWM_Stop();
 8009c5a:	f004 fc55 	bl	800e508 <Motor_PWM_Stop>
				while(1)
				{
					Signal(7);
 8009c5e:	2007      	movs	r0, #7
 8009c60:	f002 fdca 	bl	800c7f8 <Signal>
					printf("スラローム定速中: photo%f, %f, %f, %d\r\n",Photo[FL],Photo[FR], AngularV, zg);
 8009c64:	4b49      	ldr	r3, [pc, #292]	; (8009d8c <SlalomRight+0x2e4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe fba5 	bl	80083b8 <__aeabi_f2d>
 8009c6e:	4680      	mov	r8, r0
 8009c70:	4689      	mov	r9, r1
 8009c72:	4b46      	ldr	r3, [pc, #280]	; (8009d8c <SlalomRight+0x2e4>)
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fb9e 	bl	80083b8 <__aeabi_f2d>
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	460d      	mov	r5, r1
 8009c80:	4b3a      	ldr	r3, [pc, #232]	; (8009d6c <SlalomRight+0x2c4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe fb97 	bl	80083b8 <__aeabi_f2d>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4940      	ldr	r1, [pc, #256]	; (8009d90 <SlalomRight+0x2e8>)
 8009c90:	8809      	ldrh	r1, [r1, #0]
 8009c92:	b209      	sxth	r1, r1
 8009c94:	9104      	str	r1, [sp, #16]
 8009c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c9a:	e9cd 4500 	strd	r4, r5, [sp]
 8009c9e:	4642      	mov	r2, r8
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	483f      	ldr	r0, [pc, #252]	; (8009da0 <SlalomRight+0x2f8>)
 8009ca4:	f00a feea 	bl	8014a7c <iprintf>
					Signal(7);
 8009ca8:	e7d9      	b.n	8009c5e <SlalomRight+0x1b6>
	while(start_angle + ang2 > Angle)
 8009caa:	ed97 7a00 	vldr	s14, [r7]
 8009cae:	edd7 7a04 	vldr	s15, [r7, #16]
 8009cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cb6:	4b33      	ldr	r3, [pc, #204]	; (8009d84 <SlalomRight+0x2dc>)
 8009cb8:	edd3 7a00 	vldr	s15, [r3]
 8009cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc4:	dcba      	bgt.n	8009c3c <SlalomRight+0x194>
				}

			}
	}

	now_angv = AngularV;
 8009cc6:	4b29      	ldr	r3, [pc, #164]	; (8009d6c <SlalomRight+0x2c4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 8009ccc:	e016      	b.n	8009cfc <SlalomRight+0x254>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			AngularAcceleration = -alpha_turn;
 8009cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cd2:	eef1 7a67 	vneg.f32	s15, s15
 8009cd6:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <SlalomRight+0x2d4>)
 8009cd8:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 8009cdc:	4b26      	ldr	r3, [pc, #152]	; (8009d78 <SlalomRight+0x2d0>)
 8009cde:	edd3 7a00 	vldr	s15, [r3]
 8009ce2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cea:	d504      	bpl.n	8009cf6 <SlalomRight+0x24e>
			{
				TargetAngularV = 0;
 8009cec:	4b22      	ldr	r3, [pc, #136]	; (8009d78 <SlalomRight+0x2d0>)
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]
				break;
 8009cf4:	e010      	b.n	8009d18 <SlalomRight+0x270>
			}
			TargetVelocityBody = v_turn;
 8009cf6:	4a22      	ldr	r2, [pc, #136]	; (8009d80 <SlalomRight+0x2d8>)
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	6013      	str	r3, [r2, #0]
	while( start_angle + ang3 > Angle)
 8009cfc:	ed97 7a00 	vldr	s14, [r7]
 8009d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d08:	4b1e      	ldr	r3, [pc, #120]	; (8009d84 <SlalomRight+0x2dc>)
 8009d0a:	edd3 7a00 	vldr	s15, [r3]
 8009d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d16:	dcda      	bgt.n	8009cce <SlalomRight+0x226>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009d18:	4b18      	ldr	r3, [pc, #96]	; (8009d7c <SlalomRight+0x2d4>)
 8009d1a:	f04f 0200 	mov.w	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009d20:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <SlalomRight+0x2d0>)
 8009d22:	f04f 0200 	mov.w	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]
	now_pulse = TotalPulseLeft + TotalPulseRight;
 8009d28:	4b11      	ldr	r3, [pc, #68]	; (8009d70 <SlalomRight+0x2c8>)
 8009d2a:	ed93 7a00 	vldr	s14, [r3]
 8009d2e:	4b11      	ldr	r3, [pc, #68]	; (8009d74 <SlalomRight+0x2cc>)
 8009d30:	edd3 7a00 	vldr	s15, [r3]
 8009d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d3c:	ee17 3a90 	vmov	r3, s15
 8009d40:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulseLeft + TotalPulseRight) )
 8009d42:	e036      	b.n	8009db2 <SlalomRight+0x30a>
 8009d44:	f3af 8000 	nop.w
 8009d48:	317249d5 	.word	0x317249d5
 8009d4c:	3f502de0 	.word	0x3f502de0
 8009d50:	20000000 	.word	0x20000000
 8009d54:	20000468 	.word	0x20000468
 8009d58:	40c00000 	.word	0x40c00000
 8009d5c:	3c3c6a7f 	.word	0x3c3c6a7f
 8009d60:	3f060a92 	.word	0x3f060a92
 8009d64:	3f860a92 	.word	0x3f860a92
 8009d68:	3fc90fdb 	.word	0x3fc90fdb
 8009d6c:	20000254 	.word	0x20000254
 8009d70:	20000478 	.word	0x20000478
 8009d74:	20000474 	.word	0x20000474
 8009d78:	20000400 	.word	0x20000400
 8009d7c:	20000428 	.word	0x20000428
 8009d80:	200004a0 	.word	0x200004a0
 8009d84:	20000258 	.word	0x20000258
 8009d88:	200003dc 	.word	0x200003dc
 8009d8c:	20000458 	.word	0x20000458
 8009d90:	20000a20 	.word	0x20000a20
 8009d94:	200003e4 	.word	0x200003e4
 8009d98:	200003e0 	.word	0x200003e0
 8009d9c:	08018ed4 	.word	0x08018ed4
 8009da0:	08018f34 	.word	0x08018f34
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009da4:	4b38      	ldr	r3, [pc, #224]	; (8009e88 <SlalomRight+0x3e0>)
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]
			TargetVelocityBody = v_turn;
 8009dac:	4a37      	ldr	r2, [pc, #220]	; (8009e8c <SlalomRight+0x3e4>)
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	6013      	str	r3, [r2, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulseLeft + TotalPulseRight) )
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7fe faee 	bl	8008394 <__aeabi_i2d>
 8009db8:	4604      	mov	r4, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8009dc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009dc4:	ee17 0a90 	vmov	r0, s15
 8009dc8:	f7fe faf6 	bl	80083b8 <__aeabi_f2d>
 8009dcc:	a32a      	add	r3, pc, #168	; (adr r3, 8009e78 <SlalomRight+0x3d0>)
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	f7fe fc73 	bl	80086bc <__aeabi_ddiv>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	f7fe f98d 	bl	80080fc <__adddf3>
 8009de2:	4603      	mov	r3, r0
 8009de4:	460c      	mov	r4, r1
 8009de6:	4625      	mov	r5, r4
 8009de8:	461c      	mov	r4, r3
 8009dea:	4b29      	ldr	r3, [pc, #164]	; (8009e90 <SlalomRight+0x3e8>)
 8009dec:	ed93 7a00 	vldr	s14, [r3]
 8009df0:	4b28      	ldr	r3, [pc, #160]	; (8009e94 <SlalomRight+0x3ec>)
 8009df2:	edd3 7a00 	vldr	s15, [r3]
 8009df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dfa:	ee17 0a90 	vmov	r0, s15
 8009dfe:	f7fe fadb 	bl	80083b8 <__aeabi_f2d>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4620      	mov	r0, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f7fe fdbd 	bl	8008988 <__aeabi_dcmpgt>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1c7      	bne.n	8009da4 <SlalomRight+0x2fc>
			//printf("直進2\r\n");
	}
	TargetAngle += 90*M_PI/180;
 8009e14:	4b20      	ldr	r3, [pc, #128]	; (8009e98 <SlalomRight+0x3f0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe facd 	bl	80083b8 <__aeabi_f2d>
 8009e1e:	a318      	add	r3, pc, #96	; (adr r3, 8009e80 <SlalomRight+0x3d8>)
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	f7fe f96a 	bl	80080fc <__adddf3>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	4621      	mov	r1, r4
 8009e30:	f7fe fe12 	bl	8008a58 <__aeabi_d2f>
 8009e34:	4602      	mov	r2, r0
 8009e36:	4b18      	ldr	r3, [pc, #96]	; (8009e98 <SlalomRight+0x3f0>)
 8009e38:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulseBody - KeepPulse[BODY];
 8009e3a:	4b18      	ldr	r3, [pc, #96]	; (8009e9c <SlalomRight+0x3f4>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e46:	4b16      	ldr	r3, [pc, #88]	; (8009ea0 <SlalomRight+0x3f8>)
 8009e48:	edd3 6a00 	vldr	s13, [r3]
 8009e4c:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <SlalomRight+0x3f4>)
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	ee07 3a90 	vmov	s15, r3
 8009e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e64:	ee17 2a90 	vmov	r2, s15
 8009e68:	4b0c      	ldr	r3, [pc, #48]	; (8009e9c <SlalomRight+0x3f4>)
 8009e6a:	609a      	str	r2, [r3, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009e6c:	bf00      	nop
 8009e6e:	372c      	adds	r7, #44	; 0x2c
 8009e70:	46bd      	mov	sp, r7
 8009e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e76:	bf00      	nop
 8009e78:	317249d5 	.word	0x317249d5
 8009e7c:	3f502de0 	.word	0x3f502de0
 8009e80:	54442d18 	.word	0x54442d18
 8009e84:	3ff921fb 	.word	0x3ff921fb
 8009e88:	20000400 	.word	0x20000400
 8009e8c:	200004a0 	.word	0x200004a0
 8009e90:	20000478 	.word	0x20000478
 8009e94:	20000474 	.word	0x20000474
 8009e98:	20000430 	.word	0x20000430
 8009e9c:	2000044c 	.word	0x2000044c
 8009ea0:	20000404 	.word	0x20000404
 8009ea4:	00000000 	.word	0x00000000

08009ea8 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009ea8:	b5b0      	push	{r4, r5, r7, lr}
 8009eaa:	b08a      	sub	sp, #40	; 0x28
 8009eac:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009eae:	4b9e      	ldr	r3, [pc, #632]	; (800a128 <SlalomLeft+0x280>)
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009eb4:	f7ff f910 	bl	80090d8 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009eb8:	4b9c      	ldr	r3, [pc, #624]	; (800a12c <SlalomLeft+0x284>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = 4;         //スラローム前距離
 8009ebe:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8009ec2:	623b      	str	r3, [r7, #32]
	float fol = 6;         //スラローム後距離
 8009ec4:	4b9a      	ldr	r3, [pc, #616]	; (800a130 <SlalomLeft+0x288>)
 8009ec6:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -0.0115;//125;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009ec8:	4b9a      	ldr	r3, [pc, #616]	; (800a134 <SlalomLeft+0x28c>)
 8009eca:	61bb      	str	r3, [r7, #24]
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 8009ecc:	4b9a      	ldr	r3, [pc, #616]	; (800a138 <SlalomLeft+0x290>)
 8009ece:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009ed0:	4b9a      	ldr	r3, [pc, #616]	; (800a13c <SlalomLeft+0x294>)
 8009ed2:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009ed4:	4b9a      	ldr	r3, [pc, #616]	; (800a140 <SlalomLeft+0x298>)
 8009ed6:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulseLeft + TotalPulseRight;	//汎用的に書いておく
 8009ed8:	4b9a      	ldr	r3, [pc, #616]	; (800a144 <SlalomLeft+0x29c>)
 8009eda:	ed93 7a00 	vldr	s14, [r3]
 8009ede:	4b9a      	ldr	r3, [pc, #616]	; (800a148 <SlalomLeft+0x2a0>)
 8009ee0:	edd3 7a00 	vldr	s15, [r3]
 8009ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009eec:	ee17 3a90 	vmov	r3, s15
 8009ef0:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulseLeft + TotalPulseRight) ) //移動量を条件に直進
 8009ef2:	e00a      	b.n	8009f0a <SlalomLeft+0x62>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009ef4:	4b95      	ldr	r3, [pc, #596]	; (800a14c <SlalomLeft+0x2a4>)
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009efc:	4b94      	ldr	r3, [pc, #592]	; (800a150 <SlalomLeft+0x2a8>)
 8009efe:	f04f 0200 	mov.w	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]
			TargetVelocityBody = v_turn;
 8009f04:	4a93      	ldr	r2, [pc, #588]	; (800a154 <SlalomLeft+0x2ac>)
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	6013      	str	r3, [r2, #0]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulseLeft + TotalPulseRight) ) //移動量を条件に直進
 8009f0a:	68b8      	ldr	r0, [r7, #8]
 8009f0c:	f7fe fa42 	bl	8008394 <__aeabi_i2d>
 8009f10:	4604      	mov	r4, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f1c:	ee17 0a90 	vmov	r0, s15
 8009f20:	f7fe fa4a 	bl	80083b8 <__aeabi_f2d>
 8009f24:	a37c      	add	r3, pc, #496	; (adr r3, 800a118 <SlalomLeft+0x270>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	f7fe fbc7 	bl	80086bc <__aeabi_ddiv>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	4620      	mov	r0, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7fe f8e1 	bl	80080fc <__adddf3>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	4625      	mov	r5, r4
 8009f40:	461c      	mov	r4, r3
 8009f42:	4b80      	ldr	r3, [pc, #512]	; (800a144 <SlalomLeft+0x29c>)
 8009f44:	ed93 7a00 	vldr	s14, [r3]
 8009f48:	4b7f      	ldr	r3, [pc, #508]	; (800a148 <SlalomLeft+0x2a0>)
 8009f4a:	edd3 7a00 	vldr	s15, [r3]
 8009f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f52:	ee17 0a90 	vmov	r0, s15
 8009f56:	f7fe fa2f 	bl	80083b8 <__aeabi_f2d>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7fe fd11 	bl	8008988 <__aeabi_dcmpgt>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1c3      	bne.n	8009ef4 <SlalomLeft+0x4c>

			////printf("直進1\r\n");
	}


	float start_angle = Angle;
 8009f6c:	4b7a      	ldr	r3, [pc, #488]	; (800a158 <SlalomLeft+0x2b0>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 8009f72:	e005      	b.n	8009f80 <SlalomLeft+0xd8>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			AngularAcceleration = alpha_turn;
 8009f74:	4a76      	ldr	r2, [pc, #472]	; (800a150 <SlalomLeft+0x2a8>)
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	6013      	str	r3, [r2, #0]
			TargetVelocityBody = v_turn;
 8009f7a:	4a76      	ldr	r2, [pc, #472]	; (800a154 <SlalomLeft+0x2ac>)
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	6013      	str	r3, [r2, #0]
	while(start_angle - ang1 < Angle)
 8009f80:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f84:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f8c:	4b72      	ldr	r3, [pc, #456]	; (800a158 <SlalomLeft+0x2b0>)
 8009f8e:	edd3 7a00 	vldr	s15, [r3]
 8009f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9a:	d4eb      	bmi.n	8009f74 <SlalomLeft+0xcc>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009f9c:	4b6c      	ldr	r3, [pc, #432]	; (800a150 <SlalomLeft+0x2a8>)
 8009f9e:	f04f 0200 	mov.w	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009fa4:	e006      	b.n	8009fb4 <SlalomLeft+0x10c>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009fa6:	4b69      	ldr	r3, [pc, #420]	; (800a14c <SlalomLeft+0x2a4>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a68      	ldr	r2, [pc, #416]	; (800a14c <SlalomLeft+0x2a4>)
 8009fac:	6013      	str	r3, [r2, #0]
			TargetVelocityBody = v_turn;
 8009fae:	4a69      	ldr	r2, [pc, #420]	; (800a154 <SlalomLeft+0x2ac>)
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	6013      	str	r3, [r2, #0]
	while(start_angle - ang2 < Angle)
 8009fb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8009fb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fc0:	4b65      	ldr	r3, [pc, #404]	; (800a158 <SlalomLeft+0x2b0>)
 8009fc2:	edd3 7a00 	vldr	s15, [r3]
 8009fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fce:	d4ea      	bmi.n	8009fa6 <SlalomLeft+0xfe>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009fd0:	e016      	b.n	800a000 <SlalomLeft+0x158>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			AngularAcceleration = -alpha_turn;
 8009fd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fd6:	eef1 7a67 	vneg.f32	s15, s15
 8009fda:	4b5d      	ldr	r3, [pc, #372]	; (800a150 <SlalomLeft+0x2a8>)
 8009fdc:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 8009fe0:	4b5a      	ldr	r3, [pc, #360]	; (800a14c <SlalomLeft+0x2a4>)
 8009fe2:	edd3 7a00 	vldr	s15, [r3]
 8009fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fee:	dd04      	ble.n	8009ffa <SlalomLeft+0x152>
			{
				TargetAngularV = 0;
 8009ff0:	4b56      	ldr	r3, [pc, #344]	; (800a14c <SlalomLeft+0x2a4>)
 8009ff2:	f04f 0200 	mov.w	r2, #0
 8009ff6:	601a      	str	r2, [r3, #0]
				break;
 8009ff8:	e010      	b.n	800a01c <SlalomLeft+0x174>
			}
			TargetVelocityBody = v_turn;
 8009ffa:	4a56      	ldr	r2, [pc, #344]	; (800a154 <SlalomLeft+0x2ac>)
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	6013      	str	r3, [r2, #0]
	while( start_angle - ang3 < Angle)
 800a000:	ed97 7a01 	vldr	s14, [r7, #4]
 800a004:	edd7 7a03 	vldr	s15, [r7, #12]
 800a008:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a00c:	4b52      	ldr	r3, [pc, #328]	; (800a158 <SlalomLeft+0x2b0>)
 800a00e:	edd3 7a00 	vldr	s15, [r3]
 800a012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01a:	d4da      	bmi.n	8009fd2 <SlalomLeft+0x12a>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 800a01c:	4b4c      	ldr	r3, [pc, #304]	; (800a150 <SlalomLeft+0x2a8>)
 800a01e:	f04f 0200 	mov.w	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800a024:	4b49      	ldr	r3, [pc, #292]	; (800a14c <SlalomLeft+0x2a4>)
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]
	now_pulse = TotalPulseLeft + TotalPulseRight;
 800a02c:	4b45      	ldr	r3, [pc, #276]	; (800a144 <SlalomLeft+0x29c>)
 800a02e:	ed93 7a00 	vldr	s14, [r3]
 800a032:	4b45      	ldr	r3, [pc, #276]	; (800a148 <SlalomLeft+0x2a0>)
 800a034:	edd3 7a00 	vldr	s15, [r3]
 800a038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a03c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a040:	ee17 3a90 	vmov	r3, s15
 800a044:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulseLeft + TotalPulseRight) )
 800a046:	e006      	b.n	800a056 <SlalomLeft+0x1ae>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 800a048:	4b40      	ldr	r3, [pc, #256]	; (800a14c <SlalomLeft+0x2a4>)
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	601a      	str	r2, [r3, #0]
			TargetVelocityBody = v_turn;
 800a050:	4a40      	ldr	r2, [pc, #256]	; (800a154 <SlalomLeft+0x2ac>)
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	6013      	str	r3, [r2, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulseLeft + TotalPulseRight) )
 800a056:	68b8      	ldr	r0, [r7, #8]
 800a058:	f7fe f99c 	bl	8008394 <__aeabi_i2d>
 800a05c:	4604      	mov	r4, r0
 800a05e:	460d      	mov	r5, r1
 800a060:	edd7 7a07 	vldr	s15, [r7, #28]
 800a064:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a068:	ee17 0a90 	vmov	r0, s15
 800a06c:	f7fe f9a4 	bl	80083b8 <__aeabi_f2d>
 800a070:	a329      	add	r3, pc, #164	; (adr r3, 800a118 <SlalomLeft+0x270>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7fe fb21 	bl	80086bc <__aeabi_ddiv>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	f7fe f83b 	bl	80080fc <__adddf3>
 800a086:	4603      	mov	r3, r0
 800a088:	460c      	mov	r4, r1
 800a08a:	4625      	mov	r5, r4
 800a08c:	461c      	mov	r4, r3
 800a08e:	4b2d      	ldr	r3, [pc, #180]	; (800a144 <SlalomLeft+0x29c>)
 800a090:	ed93 7a00 	vldr	s14, [r3]
 800a094:	4b2c      	ldr	r3, [pc, #176]	; (800a148 <SlalomLeft+0x2a0>)
 800a096:	edd3 7a00 	vldr	s15, [r3]
 800a09a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a09e:	ee17 0a90 	vmov	r0, s15
 800a0a2:	f7fe f989 	bl	80083b8 <__aeabi_f2d>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7fe fc6b 	bl	8008988 <__aeabi_dcmpgt>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1c7      	bne.n	800a048 <SlalomLeft+0x1a0>
			//printf("直進2\r\n");
	}
	TargetAngle += -90*M_PI/180;
 800a0b8:	4b28      	ldr	r3, [pc, #160]	; (800a15c <SlalomLeft+0x2b4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe f97b 	bl	80083b8 <__aeabi_f2d>
 800a0c2:	a317      	add	r3, pc, #92	; (adr r3, 800a120 <SlalomLeft+0x278>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f7fe f816 	bl	80080f8 <__aeabi_dsub>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	f7fe fcc0 	bl	8008a58 <__aeabi_d2f>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	4b20      	ldr	r3, [pc, #128]	; (800a15c <SlalomLeft+0x2b4>)
 800a0dc:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulseBody - KeepPulse[BODY];
 800a0de:	4b20      	ldr	r3, [pc, #128]	; (800a160 <SlalomLeft+0x2b8>)
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a0ea:	4b1e      	ldr	r3, [pc, #120]	; (800a164 <SlalomLeft+0x2bc>)
 800a0ec:	edd3 6a00 	vldr	s13, [r3]
 800a0f0:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <SlalomLeft+0x2b8>)
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	ee07 3a90 	vmov	s15, r3
 800a0f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a100:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a108:	ee17 2a90 	vmov	r2, s15
 800a10c:	4b14      	ldr	r3, [pc, #80]	; (800a160 <SlalomLeft+0x2b8>)
 800a10e:	609a      	str	r2, [r3, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800a110:	bf00      	nop
 800a112:	3728      	adds	r7, #40	; 0x28
 800a114:	46bd      	mov	sp, r7
 800a116:	bdb0      	pop	{r4, r5, r7, pc}
 800a118:	317249d5 	.word	0x317249d5
 800a11c:	3f502de0 	.word	0x3f502de0
 800a120:	54442d18 	.word	0x54442d18
 800a124:	3ff921fb 	.word	0x3ff921fb
 800a128:	20000000 	.word	0x20000000
 800a12c:	20000468 	.word	0x20000468
 800a130:	40c00000 	.word	0x40c00000
 800a134:	bc3c6a7f 	.word	0xbc3c6a7f
 800a138:	3f060a92 	.word	0x3f060a92
 800a13c:	3f860a92 	.word	0x3f860a92
 800a140:	3fc90fdb 	.word	0x3fc90fdb
 800a144:	20000478 	.word	0x20000478
 800a148:	20000474 	.word	0x20000474
 800a14c:	20000400 	.word	0x20000400
 800a150:	20000428 	.word	0x20000428
 800a154:	200004a0 	.word	0x200004a0
 800a158:	20000258 	.word	0x20000258
 800a15c:	20000430 	.word	0x20000430
 800a160:	2000044c 	.word	0x2000044c
 800a164:	20000404 	.word	0x20000404

0800a168 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 800a168:	b5b0      	push	{r4, r5, r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a172:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = accel;
 800a176:	4b4a      	ldr	r3, [pc, #296]	; (800a2a0 <Accel+0x138>)
 800a178:	2200      	movs	r2, #0
 800a17a:	711a      	strb	r2, [r3, #4]
	ControlWall();
 800a17c:	f7fe ffac 	bl	80090d8 <ControlWall>
	TargetAngularV = 0;
 800a180:	4b48      	ldr	r3, [pc, #288]	; (800a2a4 <Accel+0x13c>)
 800a182:	f04f 0200 	mov.w	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 800a188:	f04f 0300 	mov.w	r3, #0
 800a18c:	60fb      	str	r3, [r7, #12]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800a18e:	4b46      	ldr	r3, [pc, #280]	; (800a2a8 <Accel+0x140>)
 800a190:	edd3 7a02 	vldr	s15, [r3, #8]
 800a194:	ed97 7a00 	vldr	s14, [r7]
 800a198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a19c:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulseBody;
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7fe f909 	bl	80083b8 <__aeabi_f2d>
 800a1a6:	a33a      	add	r3, pc, #232	; (adr r3, 800a290 <Accel+0x128>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7fe f95c 	bl	8008468 <__aeabi_dmul>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	4625      	mov	r5, r4
 800a1b6:	461c      	mov	r4, r3
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7fe f8fd 	bl	80083b8 <__aeabi_f2d>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7fe f94f 	bl	8008468 <__aeabi_dmul>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	4625      	mov	r5, r4
 800a1d0:	461c      	mov	r4, r3
 800a1d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1da:	ee17 0a90 	vmov	r0, s15
 800a1de:	f7fe f8eb 	bl	80083b8 <__aeabi_f2d>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7fe fa67 	bl	80086bc <__aeabi_ddiv>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	f7fe fc2f 	bl	8008a58 <__aeabi_d2f>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4b2b      	ldr	r3, [pc, #172]	; (800a2ac <Accel+0x144>)
 800a1fe:	601a      	str	r2, [r3, #0]
	WallWarn();
 800a200:	f7fe ff5e 	bl	80090c0 <WallWarn>
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800a204:	edd7 7a01 	vldr	s15, [r7, #4]
 800a208:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a20c:	ee17 0a90 	vmov	r0, s15
 800a210:	f7fe f8d2 	bl	80083b8 <__aeabi_f2d>
 800a214:	a320      	add	r3, pc, #128	; (adr r3, 800a298 <Accel+0x130>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7fe fa4f 	bl	80086bc <__aeabi_ddiv>
 800a21e:	4603      	mov	r3, r0
 800a220:	460c      	mov	r4, r1
 800a222:	4618      	mov	r0, r3
 800a224:	4621      	mov	r1, r4
 800a226:	f7fe fbcf 	bl	80089c8 <__aeabi_d2iz>
 800a22a:	4603      	mov	r3, r0
 800a22c:	60bb      	str	r3, [r7, #8]

	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulseBody ) )
 800a22e:	bf00      	nop
 800a230:	4b1f      	ldr	r3, [pc, #124]	; (800a2b0 <Accel+0x148>)
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4413      	add	r3, r2
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a240:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <Accel+0x14c>)
 800a242:	edd3 7a00 	vldr	s15, [r3]
 800a246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24e:	dcef      	bgt.n	800a230 <Accel+0xc8>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 800a250:	4b16      	ldr	r3, [pc, #88]	; (800a2ac <Accel+0x144>)
 800a252:	f04f 0200 	mov.w	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800a258:	4b15      	ldr	r3, [pc, #84]	; (800a2b0 <Accel+0x148>)
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	4413      	add	r3, r2
 800a260:	4a13      	ldr	r2, [pc, #76]	; (800a2b0 <Accel+0x148>)
 800a262:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a264:	4b12      	ldr	r3, [pc, #72]	; (800a2b0 <Accel+0x148>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	0fd9      	lsrs	r1, r3, #31
 800a26c:	440b      	add	r3, r1
 800a26e:	105b      	asrs	r3, r3, #1
 800a270:	4413      	add	r3, r2
 800a272:	4a0f      	ldr	r2, [pc, #60]	; (800a2b0 <Accel+0x148>)
 800a274:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <Accel+0x148>)
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	0fd9      	lsrs	r1, r3, #31
 800a27e:	440b      	add	r3, r1
 800a280:	105b      	asrs	r3, r3, #1
 800a282:	4413      	add	r3, r2
 800a284:	4a0a      	ldr	r2, [pc, #40]	; (800a2b0 <Accel+0x148>)
 800a286:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800a288:	bf00      	nop
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bdb0      	pop	{r4, r5, r7, pc}
 800a290:	d2f1a9fc 	.word	0xd2f1a9fc
 800a294:	3f50624d 	.word	0x3f50624d
 800a298:	317249d5 	.word	0x317249d5
 800a29c:	3f502de0 	.word	0x3f502de0
 800a2a0:	20000000 	.word	0x20000000
 800a2a4:	20000400 	.word	0x20000400
 800a2a8:	20000440 	.word	0x20000440
 800a2ac:	2000042c 	.word	0x2000042c
 800a2b0:	2000044c 	.word	0x2000044c
 800a2b4:	20000404 	.word	0x20000404

0800a2b8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 800a2b8:	b5b0      	push	{r4, r5, r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	ed87 0a01 	vstr	s0, [r7, #4]
 800a2c2:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = decel;
 800a2c6:	4b72      	ldr	r3, [pc, #456]	; (800a490 <Decel+0x1d8>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	711a      	strb	r2, [r3, #4]
	//int keep_pulse = TotalPulseBody;
	float down_speed=0;
 800a2cc:	f04f 0300 	mov.w	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed;
 800a2d2:	4b70      	ldr	r3, [pc, #448]	; (800a494 <Decel+0x1dc>)
 800a2d4:	ed93 7a02 	vldr	s14, [r3, #8]
 800a2d8:	edd7 7a00 	vldr	s15, [r7]
 800a2dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2e0:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7fe f867 	bl	80083b8 <__aeabi_f2d>
 800a2ea:	a365      	add	r3, pc, #404	; (adr r3, 800a480 <Decel+0x1c8>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7fe f8ba 	bl	8008468 <__aeabi_dmul>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	4625      	mov	r5, r4
 800a2fa:	461c      	mov	r4, r3
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7fe f85b 	bl	80083b8 <__aeabi_f2d>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4620      	mov	r0, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	f7fe f8ad 	bl	8008468 <__aeabi_dmul>
 800a30e:	4603      	mov	r3, r0
 800a310:	460c      	mov	r4, r1
 800a312:	4625      	mov	r5, r4
 800a314:	461c      	mov	r4, r3
 800a316:	edd7 7a01 	vldr	s15, [r7, #4]
 800a31a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a31e:	ee17 0a90 	vmov	r0, s15
 800a322:	f7fe f849 	bl	80083b8 <__aeabi_f2d>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4620      	mov	r0, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7fe f9c5 	bl	80086bc <__aeabi_ddiv>
 800a332:	4603      	mov	r3, r0
 800a334:	460c      	mov	r4, r1
 800a336:	4618      	mov	r0, r3
 800a338:	4621      	mov	r1, r4
 800a33a:	f7fe fb8d 	bl	8008a58 <__aeabi_d2f>
 800a33e:	4603      	mov	r3, r0
 800a340:	ee07 3a90 	vmov	s15, r3
 800a344:	eef1 7a67 	vneg.f32	s15, s15
 800a348:	4b53      	ldr	r3, [pc, #332]	; (800a498 <Decel+0x1e0>)
 800a34a:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	WallSafe();
 800a34e:	f7fe feab 	bl	80090a8 <WallSafe>
	ControlWall();
 800a352:	f7fe fec1 	bl	80090d8 <ControlWall>
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800a356:	edd7 7a01 	vldr	s15, [r7, #4]
 800a35a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a35e:	ee17 0a90 	vmov	r0, s15
 800a362:	f7fe f829 	bl	80083b8 <__aeabi_f2d>
 800a366:	a348      	add	r3, pc, #288	; (adr r3, 800a488 <Decel+0x1d0>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7fe f9a6 	bl	80086bc <__aeabi_ddiv>
 800a370:	4603      	mov	r3, r0
 800a372:	460c      	mov	r4, r1
 800a374:	4618      	mov	r0, r3
 800a376:	4621      	mov	r1, r4
 800a378:	f7fe fb26 	bl	80089c8 <__aeabi_d2iz>
 800a37c:	4603      	mov	r3, r0
 800a37e:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3600) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulseBody) )
 800a380:	e03e      	b.n	800a400 <Decel+0x148>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocityBody <= 0)
 800a382:	4b46      	ldr	r3, [pc, #280]	; (800a49c <Decel+0x1e4>)
 800a384:	edd3 7a00 	vldr	s15, [r3]
 800a388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a390:	d810      	bhi.n	800a3b4 <Decel+0xfc>
		{
			TargetVelocityBody = 0;
 800a392:	4b42      	ldr	r3, [pc, #264]	; (800a49c <Decel+0x1e4>)
 800a394:	f04f 0200 	mov.w	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
			Acceleration = 0;
 800a39a:	4b3f      	ldr	r3, [pc, #252]	; (800a498 <Decel+0x1e0>)
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800a3a2:	4b3f      	ldr	r3, [pc, #252]	; (800a4a0 <Decel+0x1e8>)
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800a3aa:	4b3e      	ldr	r3, [pc, #248]	; (800a4a4 <Decel+0x1ec>)
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
			break;
 800a3b2:	e044      	b.n	800a43e <Decel+0x186>
		}
		if(KeepPulse[BODY] + (target_pulse/2) < TotalPulseBody )
 800a3b4:	4b3c      	ldr	r3, [pc, #240]	; (800a4a8 <Decel+0x1f0>)
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	0fd9      	lsrs	r1, r3, #31
 800a3bc:	440b      	add	r3, r1
 800a3be:	105b      	asrs	r3, r3, #1
 800a3c0:	4413      	add	r3, r2
 800a3c2:	ee07 3a90 	vmov	s15, r3
 800a3c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a3ca:	4b38      	ldr	r3, [pc, #224]	; (800a4ac <Decel+0x1f4>)
 800a3cc:	edd3 7a00 	vldr	s15, [r3]
 800a3d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d8:	d400      	bmi.n	800a3dc <Decel+0x124>
 800a3da:	e011      	b.n	800a400 <Decel+0x148>
		{
			WallWarn();
 800a3dc:	f7fe fe70 	bl	80090c0 <WallWarn>
			//ControlWall();
			PIDChangeFlag(L_WALL_PID, 0);
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	2002      	movs	r0, #2
 800a3e4:	f002 f888 	bl	800c4f8 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	2003      	movs	r0, #3
 800a3ec:	f002 f884 	bl	800c4f8 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	f002 f880 	bl	800c4f8 <PIDChangeFlag>
			PIDChangeFlag( A_VELO_PID , 1);
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	f002 f87c 	bl	800c4f8 <PIDChangeFlag>
	while( (	(Photo[FR]+Photo[FL]) < 3600) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulseBody) )
 800a400:	4b2b      	ldr	r3, [pc, #172]	; (800a4b0 <Decel+0x1f8>)
 800a402:	ed93 7a03 	vldr	s14, [r3, #12]
 800a406:	4b2a      	ldr	r3, [pc, #168]	; (800a4b0 <Decel+0x1f8>)
 800a408:	edd3 7a00 	vldr	s15, [r3]
 800a40c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a410:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a4b4 <Decel+0x1fc>
 800a414:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41c:	d50f      	bpl.n	800a43e <Decel+0x186>
 800a41e:	4b22      	ldr	r3, [pc, #136]	; (800a4a8 <Decel+0x1f0>)
 800a420:	689a      	ldr	r2, [r3, #8]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	4413      	add	r3, r2
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a42e:	4b1f      	ldr	r3, [pc, #124]	; (800a4ac <Decel+0x1f4>)
 800a430:	edd3 7a00 	vldr	s15, [r3]
 800a434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43c:	dca1      	bgt.n	800a382 <Decel+0xca>

		}


	}
	WaitStopAndReset();
 800a43e:	f7fe ff5f 	bl	8009300 <WaitStopAndReset>
	KeepPulse[BODY] += target_pulse;
 800a442:	4b19      	ldr	r3, [pc, #100]	; (800a4a8 <Decel+0x1f0>)
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4413      	add	r3, r2
 800a44a:	4a17      	ldr	r2, [pc, #92]	; (800a4a8 <Decel+0x1f0>)
 800a44c:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a44e:	4b16      	ldr	r3, [pc, #88]	; (800a4a8 <Decel+0x1f0>)
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	0fd9      	lsrs	r1, r3, #31
 800a456:	440b      	add	r3, r1
 800a458:	105b      	asrs	r3, r3, #1
 800a45a:	4413      	add	r3, r2
 800a45c:	4a12      	ldr	r2, [pc, #72]	; (800a4a8 <Decel+0x1f0>)
 800a45e:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a460:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <Decel+0x1f0>)
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	0fd9      	lsrs	r1, r3, #31
 800a468:	440b      	add	r3, r1
 800a46a:	105b      	asrs	r3, r3, #1
 800a46c:	4413      	add	r3, r2
 800a46e:	4a0e      	ldr	r2, [pc, #56]	; (800a4a8 <Decel+0x1f0>)
 800a470:	6053      	str	r3, [r2, #4]


}
 800a472:	bf00      	nop
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bdb0      	pop	{r4, r5, r7, pc}
 800a47a:	bf00      	nop
 800a47c:	f3af 8000 	nop.w
 800a480:	d2f1a9fc 	.word	0xd2f1a9fc
 800a484:	3f50624d 	.word	0x3f50624d
 800a488:	317249d5 	.word	0x317249d5
 800a48c:	3f502de0 	.word	0x3f502de0
 800a490:	20000000 	.word	0x20000000
 800a494:	20000440 	.word	0x20000440
 800a498:	2000042c 	.word	0x2000042c
 800a49c:	200004a0 	.word	0x200004a0
 800a4a0:	20000400 	.word	0x20000400
 800a4a4:	20000428 	.word	0x20000428
 800a4a8:	2000044c 	.word	0x2000044c
 800a4ac:	20000404 	.word	0x20000404
 800a4b0:	20000458 	.word	0x20000458
 800a4b4:	45610000 	.word	0x45610000

0800a4b8 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 800a4b8:	b590      	push	{r4, r7, lr}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fd ff65 	bl	8008394 <__aeabi_i2d>
 800a4ca:	a333      	add	r3, pc, #204	; (adr r3, 800a598 <Calib+0xe0>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f7fe f8f4 	bl	80086bc <__aeabi_ddiv>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	4618      	mov	r0, r3
 800a4da:	4621      	mov	r1, r4
 800a4dc:	f7fe fa74 	bl	80089c8 <__aeabi_d2iz>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	60fb      	str	r3, [r7, #12]
	//int keep_pulse = TotalPulseBody+target_pulse;
	if(target_pulse > 0)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	dd1d      	ble.n	800a526 <Calib+0x6e>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulseBody )
 800a4ea:	e006      	b.n	800a4fa <Calib+0x42>
		{
			Acceleration = 0;
 800a4ec:	4b24      	ldr	r3, [pc, #144]	; (800a580 <Calib+0xc8>)
 800a4ee:	f04f 0200 	mov.w	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]
			TargetVelocityBody = 70;
 800a4f4:	4b23      	ldr	r3, [pc, #140]	; (800a584 <Calib+0xcc>)
 800a4f6:	4a24      	ldr	r2, [pc, #144]	; (800a588 <Calib+0xd0>)
 800a4f8:	601a      	str	r2, [r3, #0]
		while( KeepPulse[BODY] + target_pulse > TotalPulseBody )
 800a4fa:	4b24      	ldr	r3, [pc, #144]	; (800a58c <Calib+0xd4>)
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a50a:	4b21      	ldr	r3, [pc, #132]	; (800a590 <Calib+0xd8>)
 800a50c:	edd3 7a00 	vldr	s15, [r3]
 800a510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a518:	dce8      	bgt.n	800a4ec <Calib+0x34>
		}
		KeepPulse[BODY] += target_pulse;
 800a51a:	4b1c      	ldr	r3, [pc, #112]	; (800a58c <Calib+0xd4>)
 800a51c:	689a      	ldr	r2, [r3, #8]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	4a1a      	ldr	r2, [pc, #104]	; (800a58c <Calib+0xd4>)
 800a524:	6093      	str	r3, [r2, #8]

	}
	if(target_pulse < 0 )
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	da1d      	bge.n	800a568 <Calib+0xb0>
	{
		while( KeepPulse[BODY] + target_pulse < TotalPulseBody )
 800a52c:	e006      	b.n	800a53c <Calib+0x84>
		{
			Acceleration = 0;
 800a52e:	4b14      	ldr	r3, [pc, #80]	; (800a580 <Calib+0xc8>)
 800a530:	f04f 0200 	mov.w	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
			TargetVelocityBody = -70;
 800a536:	4b13      	ldr	r3, [pc, #76]	; (800a584 <Calib+0xcc>)
 800a538:	4a16      	ldr	r2, [pc, #88]	; (800a594 <Calib+0xdc>)
 800a53a:	601a      	str	r2, [r3, #0]
		while( KeepPulse[BODY] + target_pulse < TotalPulseBody )
 800a53c:	4b13      	ldr	r3, [pc, #76]	; (800a58c <Calib+0xd4>)
 800a53e:	689a      	ldr	r2, [r3, #8]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4413      	add	r3, r2
 800a544:	ee07 3a90 	vmov	s15, r3
 800a548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a54c:	4b10      	ldr	r3, [pc, #64]	; (800a590 <Calib+0xd8>)
 800a54e:	edd3 7a00 	vldr	s15, [r3]
 800a552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55a:	d4e8      	bmi.n	800a52e <Calib+0x76>
		}
		KeepPulse[BODY] += target_pulse;
 800a55c:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <Calib+0xd4>)
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4413      	add	r3, r2
 800a564:	4a09      	ldr	r2, [pc, #36]	; (800a58c <Calib+0xd4>)
 800a566:	6093      	str	r3, [r2, #8]
	}
	TargetVelocityBody = 0;
 800a568:	4b06      	ldr	r3, [pc, #24]	; (800a584 <Calib+0xcc>)
 800a56a:	f04f 0200 	mov.w	r2, #0
 800a56e:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800a570:	4b03      	ldr	r3, [pc, #12]	; (800a580 <Calib+0xc8>)
 800a572:	f04f 0200 	mov.w	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
}
 800a578:	bf00      	nop
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd90      	pop	{r4, r7, pc}
 800a580:	2000042c 	.word	0x2000042c
 800a584:	200004a0 	.word	0x200004a0
 800a588:	428c0000 	.word	0x428c0000
 800a58c:	2000044c 	.word	0x2000044c
 800a590:	20000404 	.word	0x20000404
 800a594:	c28c0000 	.word	0xc28c0000
 800a598:	317249d5 	.word	0x317249d5
 800a59c:	3f502de0 	.word	0x3f502de0

0800a5a0 <Compensate>:
void Compensate()
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
	//誤差補正する
	//Pos.を考え中
	Pos.Act = compensate;
 800a5a4:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <Compensate+0x20>)
 800a5a6:	2206      	movs	r2, #6
 800a5a8:	711a      	strb	r2, [r3, #4]
	//前壁補正
	TargetPhoto[FL];

#else
	//バック補正
	ControlWall();
 800a5aa:	f7fe fd95 	bl	80090d8 <ControlWall>
	Calib(-50);
 800a5ae:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800a5b2:	f7ff ff81 	bl	800a4b8 <Calib>
	HAL_Delay(250);
 800a5b6:	20fa      	movs	r0, #250	; 0xfa
 800a5b8:	f004 f8c0 	bl	800e73c <HAL_Delay>

//	Accel(7,-70);
//	Decel(7,0);
#endif

}
 800a5bc:	bf00      	nop
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000000 	.word	0x20000000
 800a5c4:	00000000 	.word	0x00000000

0800a5c8 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 800a5c8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	ed87 0a03 	vstr	s0, [r7, #12]
 800a5d2:	edc7 0a02 	vstr	s1, [r7, #8]
 800a5d6:	ed87 1a01 	vstr	s2, [r7, #4]
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulseBody;
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 800a5da:	edd7 7a03 	vldr	s15, [r7, #12]
 800a5de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a5e2:	ee17 0a90 	vmov	r0, s15
 800a5e6:	f7fd fee7 	bl	80083b8 <__aeabi_f2d>
 800a5ea:	a35f      	add	r3, pc, #380	; (adr r3, 800a768 <GoStraight+0x1a0>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f7fe f864 	bl	80086bc <__aeabi_ddiv>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	f7fe f9e4 	bl	80089c8 <__aeabi_d2iz>
 800a600:	4603      	mov	r3, r0
 800a602:	617b      	str	r3, [r7, #20]

	if(accel != 0) //加速するとき
 800a604:	edd7 7a01 	vldr	s15, [r7, #4]
 800a608:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a610:	d02a      	beq.n	800a668 <GoStraight+0xa0>
	{
		WallWarn();
 800a612:	f7fe fd55 	bl	80090c0 <WallWarn>
		ControlWall();
 800a616:	f7fe fd5f 	bl	80090d8 <ControlWall>
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800a61a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a61e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a622:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a626:	ed97 7a02 	vldr	s14, [r7, #8]
 800a62a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a62e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a632:	eef0 0a67 	vmov.f32	s1, s15
 800a636:	eeb0 0a66 	vmov.f32	s0, s13
 800a63a:	f7ff fd95 	bl	800a168 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulseBody) )
 800a63e:	bf00      	nop
 800a640:	4b45      	ldr	r3, [pc, #276]	; (800a758 <GoStraight+0x190>)
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	0fd9      	lsrs	r1, r3, #31
 800a648:	440b      	add	r3, r1
 800a64a:	105b      	asrs	r3, r3, #1
 800a64c:	4413      	add	r3, r2
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a656:	4b41      	ldr	r3, [pc, #260]	; (800a75c <GoStraight+0x194>)
 800a658:	edd3 7a00 	vldr	s15, [r3]
 800a65c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a664:	dcec      	bgt.n	800a640 <GoStraight+0x78>
 800a666:	e051      	b.n	800a70c <GoStraight+0x144>
	//		}
		}
	}
	else
	{
		Pos.Act = straight;
 800a668:	4b3d      	ldr	r3, [pc, #244]	; (800a760 <GoStraight+0x198>)
 800a66a:	2205      	movs	r2, #5
 800a66c:	711a      	strb	r2, [r3, #4]
		WallSafe();
 800a66e:	f7fe fd1b 	bl	80090a8 <WallSafe>
		ControlWall();
 800a672:	f7fe fd31 	bl	80090d8 <ControlWall>
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulseBody) )
 800a676:	e039      	b.n	800a6ec <GoStraight+0x124>
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulseBody )
 800a678:	4b37      	ldr	r3, [pc, #220]	; (800a758 <GoStraight+0x190>)
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fd fe89 	bl	8008394 <__aeabi_i2d>
 800a682:	4604      	mov	r4, r0
 800a684:	460d      	mov	r5, r1
 800a686:	6978      	ldr	r0, [r7, #20]
 800a688:	f7fd fe84 	bl	8008394 <__aeabi_i2d>
 800a68c:	a330      	add	r3, pc, #192	; (adr r3, 800a750 <GoStraight+0x188>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7fd fee9 	bl	8008468 <__aeabi_dmul>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4620      	mov	r0, r4
 800a69c:	4629      	mov	r1, r5
 800a69e:	f7fd fd2d 	bl	80080fc <__adddf3>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	4625      	mov	r5, r4
 800a6a8:	461c      	mov	r4, r3
 800a6aa:	4b2c      	ldr	r3, [pc, #176]	; (800a75c <GoStraight+0x194>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fd fe82 	bl	80083b8 <__aeabi_f2d>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f7fe f946 	bl	800894c <__aeabi_dcmplt>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d100      	bne.n	800a6c8 <GoStraight+0x100>
 800a6c6:	e011      	b.n	800a6ec <GoStraight+0x124>
			{
				WallWarn();
 800a6c8:	f7fe fcfa 	bl	80090c0 <WallWarn>
				PIDChangeFlag(L_WALL_PID, 0);
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	2002      	movs	r0, #2
 800a6d0:	f001 ff12 	bl	800c4f8 <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	2003      	movs	r0, #3
 800a6d8:	f001 ff0e 	bl	800c4f8 <PIDChangeFlag>
				PIDChangeFlag(D_WALL_PID, 0);
 800a6dc:	2100      	movs	r1, #0
 800a6de:	2001      	movs	r0, #1
 800a6e0:	f001 ff0a 	bl	800c4f8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f001 ff06 	bl	800c4f8 <PIDChangeFlag>
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulseBody) )
 800a6ec:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <GoStraight+0x190>)
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	ee07 3a90 	vmov	s15, r3
 800a6f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6fc:	4b17      	ldr	r3, [pc, #92]	; (800a75c <GoStraight+0x194>)
 800a6fe:	edd3 7a00 	vldr	s15, [r3]
 800a702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	dcb5      	bgt.n	800a678 <GoStraight+0xb0>
	//余分に加速した場合、あとの減速で速度を落としきれないことになっていたので、減速時にその時の速度を使うようにした。
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	int target_pulse = (int)(2*(move_distance/2)/MM_PER_PULSE);
//	int keep_pulse = TotalPulseBody;
	//WallWarn();
	Acceleration = 0;
 800a70c:	4b15      	ldr	r3, [pc, #84]	; (800a764 <GoStraight+0x19c>)
 800a70e:	f04f 0200 	mov.w	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800a714:	4b10      	ldr	r3, [pc, #64]	; (800a758 <GoStraight+0x190>)
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4413      	add	r3, r2
 800a71c:	4a0e      	ldr	r2, [pc, #56]	; (800a758 <GoStraight+0x190>)
 800a71e:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a720:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <GoStraight+0x190>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	0fd9      	lsrs	r1, r3, #31
 800a728:	440b      	add	r3, r1
 800a72a:	105b      	asrs	r3, r3, #1
 800a72c:	4413      	add	r3, r2
 800a72e:	4a0a      	ldr	r2, [pc, #40]	; (800a758 <GoStraight+0x190>)
 800a730:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a732:	4b09      	ldr	r3, [pc, #36]	; (800a758 <GoStraight+0x190>)
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	0fd9      	lsrs	r1, r3, #31
 800a73a:	440b      	add	r3, r1
 800a73c:	105b      	asrs	r3, r3, #1
 800a73e:	4413      	add	r3, r2
 800a740:	4a05      	ldr	r2, [pc, #20]	; (800a758 <GoStraight+0x190>)
 800a742:	6053      	str	r3, [r2, #4]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 800a744:	bf00      	nop
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bdb0      	pop	{r4, r5, r7, pc}
 800a74c:	f3af 8000 	nop.w
 800a750:	9999999a 	.word	0x9999999a
 800a754:	3fd99999 	.word	0x3fd99999
 800a758:	2000044c 	.word	0x2000044c
 800a75c:	20000404 	.word	0x20000404
 800a760:	20000000 	.word	0x20000000
 800a764:	2000042c 	.word	0x2000042c
 800a768:	317249d5 	.word	0x317249d5
 800a76c:	3f502de0 	.word	0x3f502de0

0800a770 <TurnRight>:
void TurnRight(char mode)
{
 800a770:	b590      	push	{r4, r7, lr}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a77a:	79fb      	ldrb	r3, [r7, #7]
 800a77c:	2b53      	cmp	r3, #83	; 0x53
 800a77e:	d032      	beq.n	800a7e6 <TurnRight+0x76>
 800a780:	2b54      	cmp	r3, #84	; 0x54
 800a782:	d000      	beq.n	800a786 <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 800a784:	e032      	b.n	800a7ec <TurnRight+0x7c>
		Decel(45, 0);
 800a786:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800a800 <TurnRight+0x90>
 800a78a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800a804 <TurnRight+0x94>
 800a78e:	f7ff fd93 	bl	800a2b8 <Decel>
		Rotate( 90 , 2*M_PI);
 800a792:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a808 <TurnRight+0x98>
 800a796:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800a80c <TurnRight+0x9c>
 800a79a:	f7ff f8e1 	bl	8009960 <Rotate>
		TargetAngle += 90*M_PI/180;
 800a79e:	4b1c      	ldr	r3, [pc, #112]	; (800a810 <TurnRight+0xa0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fd fe08 	bl	80083b8 <__aeabi_f2d>
 800a7a8:	a313      	add	r3, pc, #76	; (adr r3, 800a7f8 <TurnRight+0x88>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	f7fd fca5 	bl	80080fc <__adddf3>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	f7fe f94d 	bl	8008a58 <__aeabi_d2f>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	4b13      	ldr	r3, [pc, #76]	; (800a810 <TurnRight+0xa0>)
 800a7c2:	601a      	str	r2, [r3, #0]
		HAL_Delay(250);
 800a7c4:	20fa      	movs	r0, #250	; 0xfa
 800a7c6:	f003 ffb9 	bl	800e73c <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f001 fe93 	bl	800c4f8 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 800a7d2:	4b10      	ldr	r3, [pc, #64]	; (800a814 <TurnRight+0xa4>)
 800a7d4:	edd3 7a00 	vldr	s15, [r3]
 800a7d8:	eef0 0a67 	vmov.f32	s1, s15
 800a7dc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a804 <TurnRight+0x94>
 800a7e0:	f7ff fcc2 	bl	800a168 <Accel>
		break;
 800a7e4:	e002      	b.n	800a7ec <TurnRight+0x7c>
		SlalomRight();
 800a7e6:	f7ff f95f 	bl	8009aa8 <SlalomRight>
		break;
 800a7ea:	bf00      	nop
	}


}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd90      	pop	{r4, r7, pc}
 800a7f4:	f3af 8000 	nop.w
 800a7f8:	54442d18 	.word	0x54442d18
 800a7fc:	3ff921fb 	.word	0x3ff921fb
 800a800:	00000000 	.word	0x00000000
 800a804:	42340000 	.word	0x42340000
 800a808:	40c90fdb 	.word	0x40c90fdb
 800a80c:	42b40000 	.word	0x42b40000
 800a810:	20000430 	.word	0x20000430
 800a814:	20000468 	.word	0x20000468

0800a818 <TurnLeft>:
void TurnLeft(char mode)
{
 800a818:	b590      	push	{r4, r7, lr}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	2b53      	cmp	r3, #83	; 0x53
 800a826:	d032      	beq.n	800a88e <TurnLeft+0x76>
 800a828:	2b54      	cmp	r3, #84	; 0x54
 800a82a:	d000      	beq.n	800a82e <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 800a82c:	e032      	b.n	800a894 <TurnLeft+0x7c>
		Decel(45, 0);
 800a82e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800a8a8 <TurnLeft+0x90>
 800a832:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800a8ac <TurnLeft+0x94>
 800a836:	f7ff fd3f 	bl	800a2b8 <Decel>
		Rotate( 90 , -2*M_PI);
 800a83a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a8b0 <TurnLeft+0x98>
 800a83e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800a8b4 <TurnLeft+0x9c>
 800a842:	f7ff f88d 	bl	8009960 <Rotate>
		TargetAngle += -90*M_PI/180;
 800a846:	4b1c      	ldr	r3, [pc, #112]	; (800a8b8 <TurnLeft+0xa0>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fd fdb4 	bl	80083b8 <__aeabi_f2d>
 800a850:	a313      	add	r3, pc, #76	; (adr r3, 800a8a0 <TurnLeft+0x88>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7fd fc4f 	bl	80080f8 <__aeabi_dsub>
 800a85a:	4603      	mov	r3, r0
 800a85c:	460c      	mov	r4, r1
 800a85e:	4618      	mov	r0, r3
 800a860:	4621      	mov	r1, r4
 800a862:	f7fe f8f9 	bl	8008a58 <__aeabi_d2f>
 800a866:	4602      	mov	r2, r0
 800a868:	4b13      	ldr	r3, [pc, #76]	; (800a8b8 <TurnLeft+0xa0>)
 800a86a:	601a      	str	r2, [r3, #0]
		HAL_Delay(250);
 800a86c:	20fa      	movs	r0, #250	; 0xfa
 800a86e:	f003 ff65 	bl	800e73c <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a872:	2101      	movs	r1, #1
 800a874:	2000      	movs	r0, #0
 800a876:	f001 fe3f 	bl	800c4f8 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 800a87a:	4b10      	ldr	r3, [pc, #64]	; (800a8bc <TurnLeft+0xa4>)
 800a87c:	edd3 7a00 	vldr	s15, [r3]
 800a880:	eef0 0a67 	vmov.f32	s1, s15
 800a884:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a8ac <TurnLeft+0x94>
 800a888:	f7ff fc6e 	bl	800a168 <Accel>
		break;
 800a88c:	e002      	b.n	800a894 <TurnLeft+0x7c>
		SlalomLeft();
 800a88e:	f7ff fb0b 	bl	8009ea8 <SlalomLeft>
		break;
 800a892:	bf00      	nop
	}

}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd90      	pop	{r4, r7, pc}
 800a89c:	f3af 8000 	nop.w
 800a8a0:	54442d18 	.word	0x54442d18
 800a8a4:	3ff921fb 	.word	0x3ff921fb
 800a8a8:	00000000 	.word	0x00000000
 800a8ac:	42340000 	.word	0x42340000
 800a8b0:	c0c90fdb 	.word	0xc0c90fdb
 800a8b4:	42b40000 	.word	0x42b40000
 800a8b8:	20000430 	.word	0x20000430
 800a8bc:	20000468 	.word	0x20000468

0800a8c0 <GoBack>:
void GoBack()
{
 800a8c0:	b598      	push	{r3, r4, r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800a8c4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a930 <GoBack+0x70>
 800a8c8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a934 <GoBack+0x74>
 800a8cc:	f7ff fcf4 	bl	800a2b8 <Decel>
//	HAL_Delay(500);
	//補正して
	//Compensate();
	//Calib();
	//回転して
	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。
 800a8d0:	eddf 0a19 	vldr	s1, [pc, #100]	; 800a938 <GoBack+0x78>
 800a8d4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a93c <GoBack+0x7c>
 800a8d8:	f7ff f842 	bl	8009960 <Rotate>
//	PIDReset(R_VELO_PID);
//	PIDReset(A_VELO_PID);
	//HAL_Delay(200);
	//Rotate(90, 2.5);
	//HAL_Delay(500);
	TargetAngle += 180*M_PI/180;
 800a8dc:	4b18      	ldr	r3, [pc, #96]	; (800a940 <GoBack+0x80>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fd fd69 	bl	80083b8 <__aeabi_f2d>
 800a8e6:	a310      	add	r3, pc, #64	; (adr r3, 800a928 <GoBack+0x68>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7fd fc06 	bl	80080fc <__adddf3>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	f7fe f8ae 	bl	8008a58 <__aeabi_d2f>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	4b10      	ldr	r3, [pc, #64]	; (800a940 <GoBack+0x80>)
 800a900:	601a      	str	r2, [r3, #0]
	//加速する
//	PIDReset(L_VELO_PID);
//	PIDReset(R_VELO_PID);
//	PIDReset(A_VELO_PID);
	HAL_Delay(200);
 800a902:	20c8      	movs	r0, #200	; 0xc8
 800a904:	f003 ff1a 	bl	800e73c <HAL_Delay>
	Compensate();
 800a908:	f7ff fe4a 	bl	800a5a0 <Compensate>
	//PIDChangeFlag( A_VELO_PID, 1);
	Accel(61.5, ExploreVelocity);
 800a90c:	4b0d      	ldr	r3, [pc, #52]	; (800a944 <GoBack+0x84>)
 800a90e:	edd3 7a00 	vldr	s15, [r3]
 800a912:	eef0 0a67 	vmov.f32	s1, s15
 800a916:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a948 <GoBack+0x88>
 800a91a:	f7ff fc25 	bl	800a168 <Accel>
	//ここまでで目標走行距離を完了する

}
 800a91e:	bf00      	nop
 800a920:	bd98      	pop	{r3, r4, r7, pc}
 800a922:	bf00      	nop
 800a924:	f3af 8000 	nop.w
 800a928:	54442d18 	.word	0x54442d18
 800a92c:	400921fb 	.word	0x400921fb
 800a930:	00000000 	.word	0x00000000
 800a934:	42340000 	.word	0x42340000
 800a938:	40c90fdb 	.word	0x40c90fdb
 800a93c:	43340000 	.word	0x43340000
 800a940:	20000430 	.word	0x20000430
 800a944:	20000468 	.word	0x20000468
 800a948:	42760000 	.word	0x42760000

0800a94c <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
void SelectAction(char turn_mode)	//前後左右であらわす
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	4603      	mov	r3, r0
 800a954:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir)
 800a956:	4b18      	ldr	r3, [pc, #96]	; (800a9b8 <SelectAction+0x6c>)
 800a958:	789b      	ldrb	r3, [r3, #2]
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d826      	bhi.n	800a9ac <SelectAction+0x60>
 800a95e:	a201      	add	r2, pc, #4	; (adr r2, 800a964 <SelectAction+0x18>)
 800a960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a964:	0800a975 	.word	0x0800a975
 800a968:	0800a993 	.word	0x0800a993
 800a96c:	0800a99d 	.word	0x0800a99d
 800a970:	0800a9a7 	.word	0x0800a9a7
	//直進
	case front:
		//直進flagオン
		//PIDChangeFlag( A_VELO_PID, 1);

		GoStraight(90, ExploreVelocity, AddVelocity);
 800a974:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <SelectAction+0x70>)
 800a976:	edd3 7a00 	vldr	s15, [r3]
 800a97a:	4b11      	ldr	r3, [pc, #68]	; (800a9c0 <SelectAction+0x74>)
 800a97c:	ed93 7a00 	vldr	s14, [r3]
 800a980:	eeb0 1a47 	vmov.f32	s2, s14
 800a984:	eef0 0a67 	vmov.f32	s1, s15
 800a988:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a9c4 <SelectAction+0x78>
 800a98c:	f7ff fe1c 	bl	800a5c8 <GoStraight>

		break;
 800a990:	e00d      	b.n	800a9ae <SelectAction+0x62>
	//右方向
	case right:	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight(turn_mode);
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	4618      	mov	r0, r3
 800a996:	f7ff feeb 	bl	800a770 <TurnRight>
		break;
 800a99a:	e008      	b.n	800a9ae <SelectAction+0x62>
	//左方向
	case left:
		TurnLeft(turn_mode);
 800a99c:	79fb      	ldrb	r3, [r7, #7]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7ff ff3a 	bl	800a818 <TurnLeft>
		break;
 800a9a4:	e003      	b.n	800a9ae <SelectAction+0x62>
	case back:
		GoBack();	//Uターン
 800a9a6:	f7ff ff8b 	bl	800a8c0 <GoBack>
		break;
 800a9aa:	e000      	b.n	800a9ae <SelectAction+0x62>


	default :
		break;
 800a9ac:	bf00      	nop

	}
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000000 	.word	0x20000000
 800a9bc:	20000468 	.word	0x20000468
 800a9c0:	200003f8 	.word	0x200003f8
 800a9c4:	42b40000 	.word	0x42b40000

0800a9c8 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <GetPulseDisplacement>:
//目的 : エンコーダパルスの初期値との差分を取得する(割り込み内)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : パルスの変位
//-------------------------//
int GetPulseDisplacement(int *timer_counter,  int initial_pulse)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
	//割り込みで呼び出す想定
	//カウンタをリセットするのは別のところ
	int current_pulse = *timer_counter;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]
	int pulse_displacement = -1* (current_pulse - initial_pulse);
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	60bb      	str	r3, [r7, #8]
	//前回値として保存

//	//次回の呼び出しのためにすぐ初期化。
	InitPulse( timer_counter, initial_pulse);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7ff ffe2 	bl	800a9c8 <InitPulse>

	return pulse_displacement;
 800aa04:	68bb      	ldr	r3, [r7, #8]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b087      	sub	sp, #28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 800aa20:	4a2c      	ldr	r2, [pc, #176]	; (800aad4 <GetWallDataAverage+0xc4>)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	bfb8      	it	lt
 800aa30:	425b      	neglt	r3, r3
 800aa32:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800aa34:	4927      	ldr	r1, [pc, #156]	; (800aad4 <GetWallDataAverage+0xc4>)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800aa3e:	4a26      	ldr	r2, [pc, #152]	; (800aad8 <GetWallDataAverage+0xc8>)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	441a      	add	r2, r3
 800aa4a:	4923      	ldr	r1, [pc, #140]	; (800aad8 <GetWallDataAverage+0xc8>)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800aa52:	4a22      	ldr	r2, [pc, #136]	; (800aadc <GetWallDataAverage+0xcc>)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	491f      	ldr	r1, [pc, #124]	; (800aadc <GetWallDataAverage+0xcc>)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800aa64:	4a1d      	ldr	r2, [pc, #116]	; (800aadc <GetWallDataAverage+0xcc>)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d121      	bne.n	800aab6 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800aa72:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <GetWallDataAverage+0xc8>)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa7a:	ee07 3a90 	vmov	s15, r3
 800aa7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa82:	4a16      	ldr	r2, [pc, #88]	; (800aadc <GetWallDataAverage+0xcc>)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa96:	4a12      	ldr	r2, [pc, #72]	; (800aae0 <GetWallDataAverage+0xd0>)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800aaa2:	4a0d      	ldr	r2, [pc, #52]	; (800aad8 <GetWallDataAverage+0xc8>)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 800aaac:	4a0b      	ldr	r2, [pc, #44]	; (800aadc <GetWallDataAverage+0xcc>)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2100      	movs	r1, #0
 800aab2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800aab6:	4a0a      	ldr	r2, [pc, #40]	; (800aae0 <GetWallDataAverage+0xd0>)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4413      	add	r3, r2
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	ee07 3a90 	vmov	s15, r3
}
 800aac4:	eeb0 0a67 	vmov.f32	s0, s15
 800aac8:	371c      	adds	r7, #28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	20000214 	.word	0x20000214
 800aad8:	20000224 	.word	0x20000224
 800aadc:	20000234 	.word	0x20000234
 800aae0:	20000244 	.word	0x20000244

0800aae4 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 800aae4:	b480      	push	{r7}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	ed87 0a02 	vstr	s0, [r7, #8]
 800aaf0:	edc7 0a01 	vstr	s1, [r7, #4]
 800aaf4:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800aaf8:	f04f 0300 	mov.w	r3, #0
 800aafc:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	ee07 3a90 	vmov	s15, r3
 800ab04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab08:	edd7 7a02 	vldr	s15, [r7, #8]
 800ab0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab10:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab14:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ab18:	ed97 7a00 	vldr	s14, [r7]
 800ab1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab20:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	ee07 3a90 	vmov	s15, r3
}
 800ab2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab2e:	371c      	adds	r7, #28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800ab42:	2301      	movs	r3, #1
 800ab44:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800ab46:	2300      	movs	r3, #0
 800ab48:	60bb      	str	r3, [r7, #8]
 800ab4a:	e007      	b.n	800ab5c <IntegerPower+0x24>
	{
		pattern_num *= integer;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	fb02 f303 	mul.w	r3, r2, r3
 800ab54:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	60bb      	str	r3, [r7, #8]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	dbf3      	blt.n	800ab4c <IntegerPower+0x14>
	}
	return pattern_num;
 800ab64:	68fb      	ldr	r3, [r7, #12]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800ab72:	b480      	push	{r7}
 800ab74:	b08b      	sub	sp, #44	; 0x2c
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	ed87 0a03 	vstr	s0, [r7, #12]
 800ab7c:	edc7 0a02 	vstr	s1, [r7, #8]
 800ab80:	ed87 1a01 	vstr	s2, [r7, #4]
 800ab84:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800ab86:	edd7 6a03 	vldr	s13, [r7, #12]
 800ab8a:	ed97 7a01 	vldr	s14, [r7, #4]
 800ab8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab92:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800ab96:	edd7 6a02 	vldr	s13, [r7, #8]
 800ab9a:	ed97 7a01 	vldr	s14, [r7, #4]
 800ab9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba2:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800aba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abaa:	edd7 7a06 	vldr	s15, [r7, #24]
 800abae:	ee77 6a67 	vsub.f32	s13, s14, s15
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	ee07 3a90 	vmov	s15, r3
 800abb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc0:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800abc8:	2300      	movs	r3, #0
 800abca:	623b      	str	r3, [r7, #32]
 800abcc:	e018      	b.n	800ac00 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abd8:	edd7 7a05 	vldr	s15, [r7, #20]
 800abdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abe0:	edd7 7a06 	vldr	s15, [r7, #24]
 800abe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abe8:	ed97 7a07 	vldr	s14, [r7, #28]
 800abec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf4:	db01      	blt.n	800abfa <GetBatteryLevel+0x88>
		{
			pattern = i;
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	3301      	adds	r3, #1
 800abfe:	623b      	str	r3, [r7, #32]
 800ac00:	6a3a      	ldr	r2, [r7, #32]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	dbe2      	blt.n	800abce <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	372c      	adds	r7, #44	; 0x2c
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
	...

0800ac18 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 800ac1c:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <Buffering+0x24>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	2100      	movs	r1, #0
 800ac24:	4618      	mov	r0, r3
 800ac26:	f009 ffbd 	bl	8014ba4 <setbuf>
	  setbuf(stdin,NULL);
 800ac2a:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <Buffering+0x24>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	2100      	movs	r1, #0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f009 ffb6 	bl	8014ba4 <setbuf>
}
 800ac38:	bf00      	nop
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20000024 	.word	0x20000024

0800ac40 <Copy_Gain>:
void Copy_Gain()
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b092      	sub	sp, #72	; 0x48
 800ac44:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 800ac46:	4b2c      	ldr	r3, [pc, #176]	; (800acf8 <Copy_Gain+0xb8>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 800ac4c:	463b      	mov	r3, r7
 800ac4e:	2240      	movs	r2, #64	; 0x40
 800ac50:	2100      	movs	r1, #0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f009 f8cb 	bl	8013dee <memset>
	data[0] = Pid[L_VELO_PID].KP;
 800ac58:	4b28      	ldr	r3, [pc, #160]	; (800acfc <Copy_Gain+0xbc>)
 800ac5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac5e:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 800ac60:	4b26      	ldr	r3, [pc, #152]	; (800acfc <Copy_Gain+0xbc>)
 800ac62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac66:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 800ac68:	4b24      	ldr	r3, [pc, #144]	; (800acfc <Copy_Gain+0xbc>)
 800ac6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ac6e:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 800ac70:	4b22      	ldr	r3, [pc, #136]	; (800acfc <Copy_Gain+0xbc>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 800ac76:	4b21      	ldr	r3, [pc, #132]	; (800acfc <Copy_Gain+0xbc>)
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800ac7c:	4b1f      	ldr	r3, [pc, #124]	; (800acfc <Copy_Gain+0xbc>)
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 800ac82:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <Copy_Gain+0xbc>)
 800ac84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac86:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800ac88:	4b1c      	ldr	r3, [pc, #112]	; (800acfc <Copy_Gain+0xbc>)
 800ac8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac8c:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 800ac8e:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <Copy_Gain+0xbc>)
 800ac90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac92:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 800ac94:	4b19      	ldr	r3, [pc, #100]	; (800acfc <Copy_Gain+0xbc>)
 800ac96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac9a:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 800ac9c:	4b17      	ldr	r3, [pc, #92]	; (800acfc <Copy_Gain+0xbc>)
 800ac9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca2:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 800aca4:	4b15      	ldr	r3, [pc, #84]	; (800acfc <Copy_Gain+0xbc>)
 800aca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 800acac:	4b13      	ldr	r3, [pc, #76]	; (800acfc <Copy_Gain+0xbc>)
 800acae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb0:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800acb2:	4b12      	ldr	r3, [pc, #72]	; (800acfc <Copy_Gain+0xbc>)
 800acb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb6:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800acb8:	4b10      	ldr	r3, [pc, #64]	; (800acfc <Copy_Gain+0xbc>)
 800acba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acbc:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 800acbe:	2300      	movs	r3, #0
 800acc0:	643b      	str	r3, [r7, #64]	; 0x40
 800acc2:	e012      	b.n	800acea <Copy_Gain+0xaa>
	{

		FLASH_Write_Word_F( address, data[i]);
 800acc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800accc:	4413      	add	r3, r2
 800acce:	3b48      	subs	r3, #72	; 0x48
 800acd0:	edd3 7a00 	vldr	s15, [r3]
 800acd4:	eeb0 0a67 	vmov.f32	s0, s15
 800acd8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800acda:	f003 fa01 	bl	800e0e0 <FLASH_Write_Word_F>
		address += 0x04;
 800acde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ace0:	3304      	adds	r3, #4
 800ace2:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 800ace4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace6:	3301      	adds	r3, #1
 800ace8:	643b      	str	r3, [r7, #64]	; 0x40
 800acea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acec:	2b0e      	cmp	r3, #14
 800acee:	dde9      	ble.n	800acc4 <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800acf0:	bf00      	nop
 800acf2:	3748      	adds	r7, #72	; 0x48
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	080191a0 	.word	0x080191a0
 800acfc:	2000025c 	.word	0x2000025c

0800ad00 <Load_Gain>:
void Load_Gain()
{
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b095      	sub	sp, #84	; 0x54
 800ad04:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800ad06:	4b59      	ldr	r3, [pc, #356]	; (800ae6c <Load_Gain+0x16c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 800ad0c:	463b      	mov	r3, r7
 800ad0e:	2240      	movs	r2, #64	; 0x40
 800ad10:	2100      	movs	r1, #0
 800ad12:	4618      	mov	r0, r3
 800ad14:	f009 f86b 	bl	8013dee <memset>

	//チェック
	int judge;
	uint8_t j=0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800ad1e:	2300      	movs	r3, #0
 800ad20:	647b      	str	r3, [r7, #68]	; 0x44
 800ad22:	e038      	b.n	800ad96 <Load_Gain+0x96>
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 800ad24:	463a      	mov	r2, r7
 800ad26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ad30:	f003 fa00 	bl	800e134 <FLASH_Read_Word_F>
		address += 0x04;
 800ad34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad36:	3304      	adds	r3, #4
 800ad38:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 800ad3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ad42:	4413      	add	r3, r2
 800ad44:	3b50      	subs	r3, #80	; 0x50
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fd fb35 	bl	80083b8 <__aeabi_f2d>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	460c      	mov	r4, r1
 800ad52:	461a      	mov	r2, r3
 800ad54:	4623      	mov	r3, r4
 800ad56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad58:	4845      	ldr	r0, [pc, #276]	; (800ae70 <Load_Gain+0x170>)
 800ad5a:	f009 fe8f 	bl	8014a7c <iprintf>
		//work_ram[]がデフォ値なら、そのまま
		judge = isnanf(data[i]);
 800ad5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ad66:	4413      	add	r3, r2
 800ad68:	3b50      	subs	r3, #80	; 0x50
 800ad6a:	edd3 7a00 	vldr	s15, [r3]
 800ad6e:	eef4 7a67 	vcmp.f32	s15, s15
 800ad72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad76:	bf6c      	ite	vs
 800ad78:	2301      	movvs	r3, #1
 800ad7a:	2300      	movvc	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	643b      	str	r3, [r7, #64]	; 0x40
		if(judge != 0)
 800ad80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d004      	beq.n	800ad90 <Load_Gain+0x90>
		{
			j++;
 800ad86:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800ad90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad92:	3301      	adds	r3, #1
 800ad94:	647b      	str	r3, [r7, #68]	; 0x44
 800ad96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad98:	2b0e      	cmp	r3, #14
 800ad9a:	ddc3      	ble.n	800ad24 <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800ad9c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ada0:	4619      	mov	r1, r3
 800ada2:	4834      	ldr	r0, [pc, #208]	; (800ae74 <Load_Gain+0x174>)
 800ada4:	f009 fe6a 	bl	8014a7c <iprintf>
		if(j == 15)//全てnan0であれば
 800ada8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800adac:	2b0f      	cmp	r3, #15
 800adae:	d059      	beq.n	800ae64 <Load_Gain+0x164>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800adb0:	edd7 7a00 	vldr	s15, [r7]
 800adb4:	ed97 7a01 	vldr	s14, [r7, #4]
 800adb8:	edd7 6a02 	vldr	s13, [r7, #8]
 800adbc:	eeb0 1a66 	vmov.f32	s2, s13
 800adc0:	eef0 0a47 	vmov.f32	s1, s14
 800adc4:	eeb0 0a67 	vmov.f32	s0, s15
 800adc8:	2004      	movs	r0, #4
 800adca:	f001 fb69 	bl	800c4a0 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800adce:	edd7 7a00 	vldr	s15, [r7]
 800add2:	ed97 7a01 	vldr	s14, [r7, #4]
 800add6:	edd7 6a02 	vldr	s13, [r7, #8]
 800adda:	eeb0 1a66 	vmov.f32	s2, s13
 800adde:	eef0 0a47 	vmov.f32	s1, s14
 800ade2:	eeb0 0a67 	vmov.f32	s0, s15
 800ade6:	2005      	movs	r0, #5
 800ade8:	f001 fb5a 	bl	800c4a0 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800adec:	edd7 7a03 	vldr	s15, [r7, #12]
 800adf0:	ed97 7a04 	vldr	s14, [r7, #16]
 800adf4:	edd7 6a05 	vldr	s13, [r7, #20]
 800adf8:	eeb0 1a66 	vmov.f32	s2, s13
 800adfc:	eef0 0a47 	vmov.f32	s1, s14
 800ae00:	eeb0 0a67 	vmov.f32	s0, s15
 800ae04:	2000      	movs	r0, #0
 800ae06:	f001 fb4b 	bl	800c4a0 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800ae0a:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae0e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ae12:	edd7 6a08 	vldr	s13, [r7, #32]
 800ae16:	eeb0 1a66 	vmov.f32	s2, s13
 800ae1a:	eef0 0a47 	vmov.f32	s1, s14
 800ae1e:	eeb0 0a67 	vmov.f32	s0, s15
 800ae22:	2002      	movs	r0, #2
 800ae24:	f001 fb3c 	bl	800c4a0 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800ae28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ae2c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae30:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae34:	eeb0 1a66 	vmov.f32	s2, s13
 800ae38:	eef0 0a47 	vmov.f32	s1, s14
 800ae3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ae40:	2003      	movs	r0, #3
 800ae42:	f001 fb2d 	bl	800c4a0 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800ae46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ae4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae4e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae52:	eeb0 1a66 	vmov.f32	s2, s13
 800ae56:	eef0 0a47 	vmov.f32	s1, s14
 800ae5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ae5e:	2001      	movs	r0, #1
 800ae60:	f001 fb1e 	bl	800c4a0 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800ae64:	bf00      	nop
 800ae66:	3754      	adds	r7, #84	; 0x54
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd90      	pop	{r4, r7, pc}
 800ae6c:	080191a0 	.word	0x080191a0
 800ae70:	08018f64 	.word	0x08018f64
 800ae74:	08018f70 	.word	0x08018f70

0800ae78 <Change_Gain>:
void Change_Gain()
{
 800ae78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ae7c:	b086      	sub	sp, #24
 800ae7e:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800ae80:	48af      	ldr	r0, [pc, #700]	; (800b140 <Change_Gain+0x2c8>)
 800ae82:	f006 fe98 	bl	8011bb6 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800ae86:	48af      	ldr	r0, [pc, #700]	; (800b144 <Change_Gain+0x2cc>)
 800ae88:	f006 fe95 	bl	8011bb6 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800ae8c:	f003 fb3c 	bl	800e508 <Motor_PWM_Stop>
	EmitterOFF();
 800ae90:	f003 fa54 	bl	800e33c <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 800ae94:	20c8      	movs	r0, #200	; 0xc8
 800ae96:	f003 fc51 	bl	800e73c <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 800ae9a:	2330      	movs	r3, #48	; 0x30
 800ae9c:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 800ae9e:	2330      	movs	r3, #48	; 0x30
 800aea0:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800aea2:	48a9      	ldr	r0, [pc, #676]	; (800b148 <Change_Gain+0x2d0>)
 800aea4:	f009 fe5e 	bl	8014b64 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800aea8:	4ba8      	ldr	r3, [pc, #672]	; (800b14c <Change_Gain+0x2d4>)
 800aeaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fd fa82 	bl	80083b8 <__aeabi_f2d>
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4689      	mov	r9, r1
 800aeb8:	4ba4      	ldr	r3, [pc, #656]	; (800b14c <Change_Gain+0x2d4>)
 800aeba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fd fa7a 	bl	80083b8 <__aeabi_f2d>
 800aec4:	4604      	mov	r4, r0
 800aec6:	460d      	mov	r5, r1
 800aec8:	4ba0      	ldr	r3, [pc, #640]	; (800b14c <Change_Gain+0x2d4>)
 800aeca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fd fa72 	bl	80083b8 <__aeabi_f2d>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aedc:	e9cd 4500 	strd	r4, r5, [sp]
 800aee0:	4642      	mov	r2, r8
 800aee2:	464b      	mov	r3, r9
 800aee4:	489a      	ldr	r0, [pc, #616]	; (800b150 <Change_Gain+0x2d8>)
 800aee6:	f009 fdc9 	bl	8014a7c <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800aeea:	4b98      	ldr	r3, [pc, #608]	; (800b14c <Change_Gain+0x2d4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fd fa62 	bl	80083b8 <__aeabi_f2d>
 800aef4:	4680      	mov	r8, r0
 800aef6:	4689      	mov	r9, r1
 800aef8:	4b94      	ldr	r3, [pc, #592]	; (800b14c <Change_Gain+0x2d4>)
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fd fa5b 	bl	80083b8 <__aeabi_f2d>
 800af02:	4604      	mov	r4, r0
 800af04:	460d      	mov	r5, r1
 800af06:	4b91      	ldr	r3, [pc, #580]	; (800b14c <Change_Gain+0x2d4>)
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fd fa54 	bl	80083b8 <__aeabi_f2d>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af18:	e9cd 4500 	strd	r4, r5, [sp]
 800af1c:	4642      	mov	r2, r8
 800af1e:	464b      	mov	r3, r9
 800af20:	488c      	ldr	r0, [pc, #560]	; (800b154 <Change_Gain+0x2dc>)
 800af22:	f009 fdab 	bl	8014a7c <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800af26:	4b89      	ldr	r3, [pc, #548]	; (800b14c <Change_Gain+0x2d4>)
 800af28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fd fa44 	bl	80083b8 <__aeabi_f2d>
 800af30:	4680      	mov	r8, r0
 800af32:	4689      	mov	r9, r1
 800af34:	4b85      	ldr	r3, [pc, #532]	; (800b14c <Change_Gain+0x2d4>)
 800af36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fd fa3d 	bl	80083b8 <__aeabi_f2d>
 800af3e:	4604      	mov	r4, r0
 800af40:	460d      	mov	r5, r1
 800af42:	4b82      	ldr	r3, [pc, #520]	; (800b14c <Change_Gain+0x2d4>)
 800af44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af46:	4618      	mov	r0, r3
 800af48:	f7fd fa36 	bl	80083b8 <__aeabi_f2d>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af54:	e9cd 4500 	strd	r4, r5, [sp]
 800af58:	4642      	mov	r2, r8
 800af5a:	464b      	mov	r3, r9
 800af5c:	487e      	ldr	r0, [pc, #504]	; (800b158 <Change_Gain+0x2e0>)
 800af5e:	f009 fd8d 	bl	8014a7c <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800af62:	4b7a      	ldr	r3, [pc, #488]	; (800b14c <Change_Gain+0x2d4>)
 800af64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fd fa25 	bl	80083b8 <__aeabi_f2d>
 800af6e:	4680      	mov	r8, r0
 800af70:	4689      	mov	r9, r1
 800af72:	4b76      	ldr	r3, [pc, #472]	; (800b14c <Change_Gain+0x2d4>)
 800af74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fd fa1d 	bl	80083b8 <__aeabi_f2d>
 800af7e:	4604      	mov	r4, r0
 800af80:	460d      	mov	r5, r1
 800af82:	4b72      	ldr	r3, [pc, #456]	; (800b14c <Change_Gain+0x2d4>)
 800af84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fd fa15 	bl	80083b8 <__aeabi_f2d>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af96:	e9cd 4500 	strd	r4, r5, [sp]
 800af9a:	4642      	mov	r2, r8
 800af9c:	464b      	mov	r3, r9
 800af9e:	486f      	ldr	r0, [pc, #444]	; (800b15c <Change_Gain+0x2e4>)
 800afa0:	f009 fd6c 	bl	8014a7c <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800afa4:	4b69      	ldr	r3, [pc, #420]	; (800b14c <Change_Gain+0x2d4>)
 800afa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fd fa05 	bl	80083b8 <__aeabi_f2d>
 800afae:	4680      	mov	r8, r0
 800afb0:	4689      	mov	r9, r1
 800afb2:	4b66      	ldr	r3, [pc, #408]	; (800b14c <Change_Gain+0x2d4>)
 800afb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fd f9fe 	bl	80083b8 <__aeabi_f2d>
 800afbc:	4604      	mov	r4, r0
 800afbe:	460d      	mov	r5, r1
 800afc0:	4b62      	ldr	r3, [pc, #392]	; (800b14c <Change_Gain+0x2d4>)
 800afc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fd f9f7 	bl	80083b8 <__aeabi_f2d>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afd2:	e9cd 4500 	strd	r4, r5, [sp]
 800afd6:	4642      	mov	r2, r8
 800afd8:	464b      	mov	r3, r9
 800afda:	4861      	ldr	r0, [pc, #388]	; (800b160 <Change_Gain+0x2e8>)
 800afdc:	f009 fd4e 	bl	8014a7c <iprintf>

		Buffering();
 800afe0:	f7ff fe1a 	bl	800ac18 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800afe4:	485f      	ldr	r0, [pc, #380]	; (800b164 <Change_Gain+0x2ec>)
 800afe6:	f009 fd49 	bl	8014a7c <iprintf>
 800afea:	1dfb      	adds	r3, r7, #7
 800afec:	4619      	mov	r1, r3
 800afee:	485e      	ldr	r0, [pc, #376]	; (800b168 <Change_Gain+0x2f0>)
 800aff0:	f009 fdc0 	bl	8014b74 <iscanf>
		if(change_mode == '0')
 800aff4:	79fb      	ldrb	r3, [r7, #7]
 800aff6:	2b30      	cmp	r3, #48	; 0x30
 800aff8:	f000 80f4 	beq.w	800b1e4 <Change_Gain+0x36c>
			break;
		}
		else
		{

			Buffering();
 800affc:	f7ff fe0c 	bl	800ac18 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800b000:	485a      	ldr	r0, [pc, #360]	; (800b16c <Change_Gain+0x2f4>)
 800b002:	f009 fd3b 	bl	8014a7c <iprintf>
 800b006:	1dbb      	adds	r3, r7, #6
 800b008:	4619      	mov	r1, r3
 800b00a:	4857      	ldr	r0, [pc, #348]	; (800b168 <Change_Gain+0x2f0>)
 800b00c:	f009 fdb2 	bl	8014b74 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	4619      	mov	r1, r3
 800b014:	79bb      	ldrb	r3, [r7, #6]
 800b016:	461a      	mov	r2, r3
 800b018:	4855      	ldr	r0, [pc, #340]	; (800b170 <Change_Gain+0x2f8>)
 800b01a:	f009 fd2f 	bl	8014a7c <iprintf>

			Buffering();
 800b01e:	f7ff fdfb 	bl	800ac18 <Buffering>
			printf("\r\n値を入力 : ");
 800b022:	4854      	ldr	r0, [pc, #336]	; (800b174 <Change_Gain+0x2fc>)
 800b024:	f009 fd2a 	bl	8014a7c <iprintf>

			switch(change_mode)
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	3b31      	subs	r3, #49	; 0x31
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	f200 80c1 	bhi.w	800b1b4 <Change_Gain+0x33c>
 800b032:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <Change_Gain+0x1c0>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b04d 	.word	0x0800b04d
 800b03c:	0800b07f 	.word	0x0800b07f
 800b040:	0800b0b1 	.word	0x0800b0b1
 800b044:	0800b0e1 	.word	0x0800b0e1
 800b048:	0800b111 	.word	0x0800b111
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 800b04c:	79bb      	ldrb	r3, [r7, #6]
 800b04e:	2b70      	cmp	r3, #112	; 0x70
 800b050:	d104      	bne.n	800b05c <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 800b052:	4949      	ldr	r1, [pc, #292]	; (800b178 <Change_Gain+0x300>)
 800b054:	4849      	ldr	r0, [pc, #292]	; (800b17c <Change_Gain+0x304>)
 800b056:	f009 fd8d 	bl	8014b74 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 800b05a:	e0af      	b.n	800b1bc <Change_Gain+0x344>
				else if(pid == 'i')
 800b05c:	79bb      	ldrb	r3, [r7, #6]
 800b05e:	2b69      	cmp	r3, #105	; 0x69
 800b060:	d104      	bne.n	800b06c <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800b062:	4947      	ldr	r1, [pc, #284]	; (800b180 <Change_Gain+0x308>)
 800b064:	4845      	ldr	r0, [pc, #276]	; (800b17c <Change_Gain+0x304>)
 800b066:	f009 fd85 	bl	8014b74 <iscanf>
				break;
 800b06a:	e0a7      	b.n	800b1bc <Change_Gain+0x344>
				else if(pid == 'd')
 800b06c:	79bb      	ldrb	r3, [r7, #6]
 800b06e:	2b64      	cmp	r3, #100	; 0x64
 800b070:	f040 80a4 	bne.w	800b1bc <Change_Gain+0x344>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800b074:	4943      	ldr	r1, [pc, #268]	; (800b184 <Change_Gain+0x30c>)
 800b076:	4841      	ldr	r0, [pc, #260]	; (800b17c <Change_Gain+0x304>)
 800b078:	f009 fd7c 	bl	8014b74 <iscanf>
				break;
 800b07c:	e09e      	b.n	800b1bc <Change_Gain+0x344>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 800b07e:	79bb      	ldrb	r3, [r7, #6]
 800b080:	2b70      	cmp	r3, #112	; 0x70
 800b082:	d104      	bne.n	800b08e <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 800b084:	4931      	ldr	r1, [pc, #196]	; (800b14c <Change_Gain+0x2d4>)
 800b086:	483d      	ldr	r0, [pc, #244]	; (800b17c <Change_Gain+0x304>)
 800b088:	f009 fd74 	bl	8014b74 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 800b08c:	e098      	b.n	800b1c0 <Change_Gain+0x348>
				else if(pid == 'i')
 800b08e:	79bb      	ldrb	r3, [r7, #6]
 800b090:	2b69      	cmp	r3, #105	; 0x69
 800b092:	d104      	bne.n	800b09e <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800b094:	493c      	ldr	r1, [pc, #240]	; (800b188 <Change_Gain+0x310>)
 800b096:	4839      	ldr	r0, [pc, #228]	; (800b17c <Change_Gain+0x304>)
 800b098:	f009 fd6c 	bl	8014b74 <iscanf>
				break;
 800b09c:	e090      	b.n	800b1c0 <Change_Gain+0x348>
				else if(pid == 'd')
 800b09e:	79bb      	ldrb	r3, [r7, #6]
 800b0a0:	2b64      	cmp	r3, #100	; 0x64
 800b0a2:	f040 808d 	bne.w	800b1c0 <Change_Gain+0x348>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800b0a6:	4939      	ldr	r1, [pc, #228]	; (800b18c <Change_Gain+0x314>)
 800b0a8:	4834      	ldr	r0, [pc, #208]	; (800b17c <Change_Gain+0x304>)
 800b0aa:	f009 fd63 	bl	8014b74 <iscanf>
				break;
 800b0ae:	e087      	b.n	800b1c0 <Change_Gain+0x348>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 800b0b0:	79bb      	ldrb	r3, [r7, #6]
 800b0b2:	2b70      	cmp	r3, #112	; 0x70
 800b0b4:	d104      	bne.n	800b0c0 <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 800b0b6:	4936      	ldr	r1, [pc, #216]	; (800b190 <Change_Gain+0x318>)
 800b0b8:	4830      	ldr	r0, [pc, #192]	; (800b17c <Change_Gain+0x304>)
 800b0ba:	f009 fd5b 	bl	8014b74 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 800b0be:	e081      	b.n	800b1c4 <Change_Gain+0x34c>
				else if(pid == 'i')
 800b0c0:	79bb      	ldrb	r3, [r7, #6]
 800b0c2:	2b69      	cmp	r3, #105	; 0x69
 800b0c4:	d104      	bne.n	800b0d0 <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800b0c6:	4933      	ldr	r1, [pc, #204]	; (800b194 <Change_Gain+0x31c>)
 800b0c8:	482c      	ldr	r0, [pc, #176]	; (800b17c <Change_Gain+0x304>)
 800b0ca:	f009 fd53 	bl	8014b74 <iscanf>
				break;
 800b0ce:	e079      	b.n	800b1c4 <Change_Gain+0x34c>
				else if(pid == 'd')
 800b0d0:	79bb      	ldrb	r3, [r7, #6]
 800b0d2:	2b64      	cmp	r3, #100	; 0x64
 800b0d4:	d176      	bne.n	800b1c4 <Change_Gain+0x34c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800b0d6:	4930      	ldr	r1, [pc, #192]	; (800b198 <Change_Gain+0x320>)
 800b0d8:	4828      	ldr	r0, [pc, #160]	; (800b17c <Change_Gain+0x304>)
 800b0da:	f009 fd4b 	bl	8014b74 <iscanf>
				break;
 800b0de:	e071      	b.n	800b1c4 <Change_Gain+0x34c>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 800b0e0:	79bb      	ldrb	r3, [r7, #6]
 800b0e2:	2b70      	cmp	r3, #112	; 0x70
 800b0e4:	d104      	bne.n	800b0f0 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 800b0e6:	492d      	ldr	r1, [pc, #180]	; (800b19c <Change_Gain+0x324>)
 800b0e8:	4824      	ldr	r0, [pc, #144]	; (800b17c <Change_Gain+0x304>)
 800b0ea:	f009 fd43 	bl	8014b74 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 800b0ee:	e06b      	b.n	800b1c8 <Change_Gain+0x350>
				else if(pid == 'i')
 800b0f0:	79bb      	ldrb	r3, [r7, #6]
 800b0f2:	2b69      	cmp	r3, #105	; 0x69
 800b0f4:	d104      	bne.n	800b100 <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800b0f6:	492a      	ldr	r1, [pc, #168]	; (800b1a0 <Change_Gain+0x328>)
 800b0f8:	4820      	ldr	r0, [pc, #128]	; (800b17c <Change_Gain+0x304>)
 800b0fa:	f009 fd3b 	bl	8014b74 <iscanf>
				break;
 800b0fe:	e063      	b.n	800b1c8 <Change_Gain+0x350>
				else if(pid == 'd')
 800b100:	79bb      	ldrb	r3, [r7, #6]
 800b102:	2b64      	cmp	r3, #100	; 0x64
 800b104:	d160      	bne.n	800b1c8 <Change_Gain+0x350>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800b106:	4927      	ldr	r1, [pc, #156]	; (800b1a4 <Change_Gain+0x32c>)
 800b108:	481c      	ldr	r0, [pc, #112]	; (800b17c <Change_Gain+0x304>)
 800b10a:	f009 fd33 	bl	8014b74 <iscanf>
				break;
 800b10e:	e05b      	b.n	800b1c8 <Change_Gain+0x350>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800b110:	79bb      	ldrb	r3, [r7, #6]
 800b112:	2b70      	cmp	r3, #112	; 0x70
 800b114:	d104      	bne.n	800b120 <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 800b116:	4924      	ldr	r1, [pc, #144]	; (800b1a8 <Change_Gain+0x330>)
 800b118:	4818      	ldr	r0, [pc, #96]	; (800b17c <Change_Gain+0x304>)
 800b11a:	f009 fd2b 	bl	8014b74 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 800b11e:	e055      	b.n	800b1cc <Change_Gain+0x354>
				else if(pid == 'i')
 800b120:	79bb      	ldrb	r3, [r7, #6]
 800b122:	2b69      	cmp	r3, #105	; 0x69
 800b124:	d104      	bne.n	800b130 <Change_Gain+0x2b8>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800b126:	4921      	ldr	r1, [pc, #132]	; (800b1ac <Change_Gain+0x334>)
 800b128:	4814      	ldr	r0, [pc, #80]	; (800b17c <Change_Gain+0x304>)
 800b12a:	f009 fd23 	bl	8014b74 <iscanf>
				break;
 800b12e:	e04d      	b.n	800b1cc <Change_Gain+0x354>
				else if(pid == 'd')
 800b130:	79bb      	ldrb	r3, [r7, #6]
 800b132:	2b64      	cmp	r3, #100	; 0x64
 800b134:	d14a      	bne.n	800b1cc <Change_Gain+0x354>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800b136:	491e      	ldr	r1, [pc, #120]	; (800b1b0 <Change_Gain+0x338>)
 800b138:	4810      	ldr	r0, [pc, #64]	; (800b17c <Change_Gain+0x304>)
 800b13a:	f009 fd1b 	bl	8014b74 <iscanf>
				break;
 800b13e:	e045      	b.n	800b1cc <Change_Gain+0x354>
 800b140:	20000940 	.word	0x20000940
 800b144:	200006b8 	.word	0x200006b8
 800b148:	08018f78 	.word	0x08018f78
 800b14c:	2000025c 	.word	0x2000025c
 800b150:	08018f90 	.word	0x08018f90
 800b154:	08018fb0 	.word	0x08018fb0
 800b158:	08018fcc 	.word	0x08018fcc
 800b15c:	08018fe8 	.word	0x08018fe8
 800b160:	08019004 	.word	0x08019004
 800b164:	08019020 	.word	0x08019020
 800b168:	08019038 	.word	0x08019038
 800b16c:	0801903c 	.word	0x0801903c
 800b170:	08019050 	.word	0x08019050
 800b174:	08019074 	.word	0x08019074
 800b178:	2000030c 	.word	0x2000030c
 800b17c:	08019088 	.word	0x08019088
 800b180:	20000310 	.word	0x20000310
 800b184:	20000314 	.word	0x20000314
 800b188:	20000260 	.word	0x20000260
 800b18c:	20000264 	.word	0x20000264
 800b190:	200002b4 	.word	0x200002b4
 800b194:	200002b8 	.word	0x200002b8
 800b198:	200002bc 	.word	0x200002bc
 800b19c:	200002e0 	.word	0x200002e0
 800b1a0:	200002e4 	.word	0x200002e4
 800b1a4:	200002e8 	.word	0x200002e8
 800b1a8:	20000288 	.word	0x20000288
 800b1ac:	2000028c 	.word	0x2000028c
 800b1b0:	20000290 	.word	0x20000290
			default :
				printf("該当しません\r\n");
 800b1b4:	4816      	ldr	r0, [pc, #88]	; (800b210 <Change_Gain+0x398>)
 800b1b6:	f009 fcd5 	bl	8014b64 <puts>
				break;
 800b1ba:	e008      	b.n	800b1ce <Change_Gain+0x356>
				break;
 800b1bc:	bf00      	nop
 800b1be:	e006      	b.n	800b1ce <Change_Gain+0x356>
				break;
 800b1c0:	bf00      	nop
 800b1c2:	e004      	b.n	800b1ce <Change_Gain+0x356>
				break;
 800b1c4:	bf00      	nop
 800b1c6:	e002      	b.n	800b1ce <Change_Gain+0x356>
				break;
 800b1c8:	bf00      	nop
 800b1ca:	e000      	b.n	800b1ce <Change_Gain+0x356>
				break;
 800b1cc:	bf00      	nop
			}
			Buffering();
 800b1ce:	f7ff fd23 	bl	800ac18 <Buffering>
			scanf("%c",&nl);
 800b1d2:	1d7b      	adds	r3, r7, #5
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	480f      	ldr	r0, [pc, #60]	; (800b214 <Change_Gain+0x39c>)
 800b1d8:	f009 fccc 	bl	8014b74 <iscanf>
			printf("\r\n");
 800b1dc:	480e      	ldr	r0, [pc, #56]	; (800b218 <Change_Gain+0x3a0>)
 800b1de:	f009 fcc1 	bl	8014b64 <puts>
		printf("現在のPIDゲイン\r\n");
 800b1e2:	e65e      	b.n	800aea2 <Change_Gain+0x2a>
			break;
 800b1e4:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 800b1e6:	480d      	ldr	r0, [pc, #52]	; (800b21c <Change_Gain+0x3a4>)
 800b1e8:	f009 fcbc 	bl	8014b64 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800b1ec:	f002 ffcc 	bl	800e188 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800b1f0:	f7ff fd26 	bl	800ac40 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800b1f4:	2007      	movs	r0, #7
 800b1f6:	f003 f8af 	bl	800e358 <ChangeLED>
	HAL_Delay(200);
 800b1fa:	20c8      	movs	r0, #200	; 0xc8
 800b1fc:	f003 fa9e 	bl	800e73c <HAL_Delay>
	ChangeLED(0);
 800b200:	2000      	movs	r0, #0
 800b202:	f003 f8a9 	bl	800e358 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800b206:	bf00      	nop
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b210:	0801908c 	.word	0x0801908c
 800b214:	08019038 	.word	0x08019038
 800b218:	080190a0 	.word	0x080190a0
 800b21c:	080190a4 	.word	0x080190a4

0800b220 <ControlMotor>:
	//区画の中心を走るような状態
		//左のみ右のみもしくは両方に壁がある状態
		//今の座標で左右の壁があるかつ直進中判定できれば、

void ControlMotor()
{
 800b220:	b5b0      	push	{r4, r5, r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
	//UpdatePhisicalDataFromEnc();
//	PulseDisplacement[LEFT] = TIM3->CNT - INITIAL_PULSE;
//	TIM3->CNT = INITIAL_PULSE;
//	PulseDisplacement[RIGHT] = TIM4->CNT - INITIAL_PULSE;
//	TIM4->CNT = INITIAL_PULSE;
	PulseDisplacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE/*&KeepCounter[LEFT]*/);
 800b226:	f247 512f 	movw	r1, #29999	; 0x752f
 800b22a:	48a1      	ldr	r0, [pc, #644]	; (800b4b0 <ControlMotor+0x290>)
 800b22c:	f7ff fbda 	bl	800a9e4 <GetPulseDisplacement>
 800b230:	4602      	mov	r2, r0
 800b232:	4ba0      	ldr	r3, [pc, #640]	; (800b4b4 <ControlMotor+0x294>)
 800b234:	601a      	str	r2, [r3, #0]
	PulseDisplacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE/*&KeepCounter[RIGHT]*/);
 800b236:	f247 512f 	movw	r1, #29999	; 0x752f
 800b23a:	489f      	ldr	r0, [pc, #636]	; (800b4b8 <ControlMotor+0x298>)
 800b23c:	f7ff fbd2 	bl	800a9e4 <GetPulseDisplacement>
 800b240:	4602      	mov	r2, r0
 800b242:	4b9c      	ldr	r3, [pc, #624]	; (800b4b4 <ControlMotor+0x294>)
 800b244:	605a      	str	r2, [r3, #4]
	//速度 mm/s
	CurrentVelocity[LEFT] = ( (float)PulseDisplacement[LEFT] * MM_PER_PULSE ) / T1;
 800b246:	4b9b      	ldr	r3, [pc, #620]	; (800b4b4 <ControlMotor+0x294>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b252:	ee17 0a90 	vmov	r0, s15
 800b256:	f7fd f8af 	bl	80083b8 <__aeabi_f2d>
 800b25a:	a391      	add	r3, pc, #580	; (adr r3, 800b4a0 <ControlMotor+0x280>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	f7fd f902 	bl	8008468 <__aeabi_dmul>
 800b264:	4603      	mov	r3, r0
 800b266:	460c      	mov	r4, r1
 800b268:	4618      	mov	r0, r3
 800b26a:	4621      	mov	r1, r4
 800b26c:	a38e      	add	r3, pc, #568	; (adr r3, 800b4a8 <ControlMotor+0x288>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	f7fd fa23 	bl	80086bc <__aeabi_ddiv>
 800b276:	4603      	mov	r3, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	4618      	mov	r0, r3
 800b27c:	4621      	mov	r1, r4
 800b27e:	f7fd fbeb 	bl	8008a58 <__aeabi_d2f>
 800b282:	4602      	mov	r2, r0
 800b284:	4b8d      	ldr	r3, [pc, #564]	; (800b4bc <ControlMotor+0x29c>)
 800b286:	601a      	str	r2, [r3, #0]
	CurrentVelocity[RIGHT] = ( (float)PulseDisplacement[RIGHT] * MM_PER_PULSE ) / T1;
 800b288:	4b8a      	ldr	r3, [pc, #552]	; (800b4b4 <ControlMotor+0x294>)
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	ee07 3a90 	vmov	s15, r3
 800b290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b294:	ee17 0a90 	vmov	r0, s15
 800b298:	f7fd f88e 	bl	80083b8 <__aeabi_f2d>
 800b29c:	a380      	add	r3, pc, #512	; (adr r3, 800b4a0 <ControlMotor+0x280>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7fd f8e1 	bl	8008468 <__aeabi_dmul>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	a37e      	add	r3, pc, #504	; (adr r3, 800b4a8 <ControlMotor+0x288>)
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	f7fd fa02 	bl	80086bc <__aeabi_ddiv>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	4618      	mov	r0, r3
 800b2be:	4621      	mov	r1, r4
 800b2c0:	f7fd fbca 	bl	8008a58 <__aeabi_d2f>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	4b7d      	ldr	r3, [pc, #500]	; (800b4bc <ControlMotor+0x29c>)
 800b2c8:	605a      	str	r2, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )/2;
 800b2ca:	4b7c      	ldr	r3, [pc, #496]	; (800b4bc <ControlMotor+0x29c>)
 800b2cc:	ed93 7a00 	vldr	s14, [r3]
 800b2d0:	4b7a      	ldr	r3, [pc, #488]	; (800b4bc <ControlMotor+0x29c>)
 800b2d2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b2d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b2de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2e2:	4b76      	ldr	r3, [pc, #472]	; (800b4bc <ControlMotor+0x29c>)
 800b2e4:	edc3 7a02 	vstr	s15, [r3, #8]
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800b2e8:	4b75      	ldr	r3, [pc, #468]	; (800b4c0 <ControlMotor+0x2a0>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	4b71      	ldr	r3, [pc, #452]	; (800b4b4 <ControlMotor+0x294>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	4a73      	ldr	r2, [pc, #460]	; (800b4c0 <ControlMotor+0x2a0>)
 800b2f4:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800b2f6:	4b72      	ldr	r3, [pc, #456]	; (800b4c0 <ControlMotor+0x2a0>)
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	4b6e      	ldr	r3, [pc, #440]	; (800b4b4 <ControlMotor+0x294>)
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	4413      	add	r3, r2
 800b300:	4a6f      	ldr	r2, [pc, #444]	; (800b4c0 <ControlMotor+0x2a0>)
 800b302:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800b304:	4b6e      	ldr	r3, [pc, #440]	; (800b4c0 <ControlMotor+0x2a0>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	4b6d      	ldr	r3, [pc, #436]	; (800b4c0 <ControlMotor+0x2a0>)
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	4413      	add	r3, r2
 800b30e:	4a6c      	ldr	r2, [pc, #432]	; (800b4c0 <ControlMotor+0x2a0>)
 800b310:	6093      	str	r3, [r2, #8]
	//角速度 rad/s
	AngularV = ( CurrentVelocity[LEFT] - CurrentVelocity[RIGHT] ) / TREAD_WIDTH;
 800b312:	4b6a      	ldr	r3, [pc, #424]	; (800b4bc <ControlMotor+0x29c>)
 800b314:	ed93 7a00 	vldr	s14, [r3]
 800b318:	4b68      	ldr	r3, [pc, #416]	; (800b4bc <ControlMotor+0x29c>)
 800b31a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b31e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b322:	eddf 6a68 	vldr	s13, [pc, #416]	; 800b4c4 <ControlMotor+0x2a4>
 800b326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b32a:	4b67      	ldr	r3, [pc, #412]	; (800b4c8 <ControlMotor+0x2a8>)
 800b32c:	edc3 7a00 	vstr	s15, [r3]
	//ImuAngV = GetDataIMUdouble();
//    read_gyro_data();
//    read_accel_data();
//	AngularV = GetDataIMUfloat();//(float)ImuAngV;
	//角度 rad/msを積算
	Angle += AngularV * T1;
 800b330:	4b66      	ldr	r3, [pc, #408]	; (800b4cc <ControlMotor+0x2ac>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4618      	mov	r0, r3
 800b336:	f7fd f83f 	bl	80083b8 <__aeabi_f2d>
 800b33a:	4604      	mov	r4, r0
 800b33c:	460d      	mov	r5, r1
 800b33e:	4b62      	ldr	r3, [pc, #392]	; (800b4c8 <ControlMotor+0x2a8>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f7fd f838 	bl	80083b8 <__aeabi_f2d>
 800b348:	a357      	add	r3, pc, #348	; (adr r3, 800b4a8 <ControlMotor+0x288>)
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7fd f88b 	bl	8008468 <__aeabi_dmul>
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	4620      	mov	r0, r4
 800b358:	4629      	mov	r1, r5
 800b35a:	f7fc fecf 	bl	80080fc <__adddf3>
 800b35e:	4603      	mov	r3, r0
 800b360:	460c      	mov	r4, r1
 800b362:	4618      	mov	r0, r3
 800b364:	4621      	mov	r1, r4
 800b366:	f7fd fb77 	bl	8008a58 <__aeabi_d2f>
 800b36a:	4602      	mov	r2, r0
 800b36c:	4b57      	ldr	r3, [pc, #348]	; (800b4cc <ControlMotor+0x2ac>)
 800b36e:	601a      	str	r2, [r3, #0]
	//ImuAngle += ImuAngV*T1;
//	ControlWall();
//	int wall_d =0,wall_l =0,wall_r =0;
	int wall_d =0,wall_l =0,wall_r =0;
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	2300      	movs	r3, #0
 800b376:	60bb      	str	r3, [r7, #8]
 800b378:	2300      	movs	r3, #0
 800b37a:	607b      	str	r3, [r7, #4]
	int ang_out=0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	603b      	str	r3, [r7, #0]
	//直進なら	//直進かどうかの判定をどうするか。アクションは一応4種類しかないので、それに合わせてflagを作っておく。
		//壁ありなら


	//処理を減らすには、
	if( Pos.Dir == front)
 800b380:	4b53      	ldr	r3, [pc, #332]	; (800b4d0 <ControlMotor+0x2b0>)
 800b382:	789b      	ldrb	r3, [r3, #2]
 800b384:	2b00      	cmp	r3, #0
 800b386:	f040 80df 	bne.w	800b548 <ControlMotor+0x328>
	{
		if( Pid[A_VELO_PID].flag == 1 )
 800b38a:	4b52      	ldr	r3, [pc, #328]	; (800b4d4 <ControlMotor+0x2b4>)
 800b38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d127      	bne.n	800b3e2 <ControlMotor+0x1c2>
		{
			ang_out = PIDControl( A_VELO_PID, T1, TargetAngle, Angle);
 800b392:	4b51      	ldr	r3, [pc, #324]	; (800b4d8 <ControlMotor+0x2b8>)
 800b394:	edd3 7a00 	vldr	s15, [r3]
 800b398:	4b4c      	ldr	r3, [pc, #304]	; (800b4cc <ControlMotor+0x2ac>)
 800b39a:	ed93 7a00 	vldr	s14, [r3]
 800b39e:	eeb0 1a47 	vmov.f32	s2, s14
 800b3a2:	eef0 0a67 	vmov.f32	s1, s15
 800b3a6:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800b4dc <ControlMotor+0x2bc>
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	f001 f8f8 	bl	800c5a0 <PIDControl>
 800b3b0:	6038      	str	r0, [r7, #0]
			TargetAngularV = (float)ang_out*0.001;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	ee07 3a90 	vmov	s15, r3
 800b3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3bc:	ee17 0a90 	vmov	r0, s15
 800b3c0:	f7fc fffa 	bl	80083b8 <__aeabi_f2d>
 800b3c4:	a338      	add	r3, pc, #224	; (adr r3, 800b4a8 <ControlMotor+0x288>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f7fd f84d 	bl	8008468 <__aeabi_dmul>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	460c      	mov	r4, r1
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	f7fd fb3f 	bl	8008a58 <__aeabi_d2f>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	4b40      	ldr	r3, [pc, #256]	; (800b4e0 <ControlMotor+0x2c0>)
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	e0b2      	b.n	800b548 <ControlMotor+0x328>
		}
		else if( Pid[D_WALL_PID].flag == 1 )
 800b3e2:	4b3c      	ldr	r3, [pc, #240]	; (800b4d4 <ControlMotor+0x2b4>)
 800b3e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d12c      	bne.n	800b444 <ControlMotor+0x224>
		{
			wall_d = PIDControl( D_WALL_PID, T1, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800b3ea:	4b3e      	ldr	r3, [pc, #248]	; (800b4e4 <ControlMotor+0x2c4>)
 800b3ec:	edd3 6a02 	vldr	s13, [r3, #8]
 800b3f0:	4b3c      	ldr	r3, [pc, #240]	; (800b4e4 <ControlMotor+0x2c4>)
 800b3f2:	ed93 7a01 	vldr	s14, [r3, #4]
 800b3f6:	4b3c      	ldr	r3, [pc, #240]	; (800b4e8 <ControlMotor+0x2c8>)
 800b3f8:	edd3 7a00 	vldr	s15, [r3]
 800b3fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b400:	eeb0 1a67 	vmov.f32	s2, s15
 800b404:	eef0 0a66 	vmov.f32	s1, s13
 800b408:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800b4dc <ControlMotor+0x2bc>
 800b40c:	2001      	movs	r0, #1
 800b40e:	f001 f8c7 	bl	800c5a0 <PIDControl>
 800b412:	60f8      	str	r0, [r7, #12]
			TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b41e:	ee17 0a90 	vmov	r0, s15
 800b422:	f7fc ffc9 	bl	80083b8 <__aeabi_f2d>
 800b426:	a320      	add	r3, pc, #128	; (adr r3, 800b4a8 <ControlMotor+0x288>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	f7fd f81c 	bl	8008468 <__aeabi_dmul>
 800b430:	4603      	mov	r3, r0
 800b432:	460c      	mov	r4, r1
 800b434:	4618      	mov	r0, r3
 800b436:	4621      	mov	r1, r4
 800b438:	f7fd fb0e 	bl	8008a58 <__aeabi_d2f>
 800b43c:	4602      	mov	r2, r0
 800b43e:	4b28      	ldr	r3, [pc, #160]	; (800b4e0 <ControlMotor+0x2c0>)
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	e081      	b.n	800b548 <ControlMotor+0x328>
		}
		else if( Pid[L_WALL_PID].flag == 1 )
 800b444:	4b23      	ldr	r3, [pc, #140]	; (800b4d4 <ControlMotor+0x2b4>)
 800b446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d150      	bne.n	800b4f0 <ControlMotor+0x2d0>
		{
			wall_l = PIDControl( L_WALL_PID, T1,  Photo[SL], TargetPhoto[SL]);
 800b44e:	4b25      	ldr	r3, [pc, #148]	; (800b4e4 <ControlMotor+0x2c4>)
 800b450:	edd3 7a02 	vldr	s15, [r3, #8]
 800b454:	4b25      	ldr	r3, [pc, #148]	; (800b4ec <ControlMotor+0x2cc>)
 800b456:	ed93 7a02 	vldr	s14, [r3, #8]
 800b45a:	eeb0 1a47 	vmov.f32	s2, s14
 800b45e:	eef0 0a67 	vmov.f32	s1, s15
 800b462:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800b4dc <ControlMotor+0x2bc>
 800b466:	2002      	movs	r0, #2
 800b468:	f001 f89a 	bl	800c5a0 <PIDControl>
 800b46c:	60b8      	str	r0, [r7, #8]
			TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	ee07 3a90 	vmov	s15, r3
 800b474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b478:	ee17 0a90 	vmov	r0, s15
 800b47c:	f7fc ff9c 	bl	80083b8 <__aeabi_f2d>
 800b480:	a309      	add	r3, pc, #36	; (adr r3, 800b4a8 <ControlMotor+0x288>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f7fc ffef 	bl	8008468 <__aeabi_dmul>
 800b48a:	4603      	mov	r3, r0
 800b48c:	460c      	mov	r4, r1
 800b48e:	4618      	mov	r0, r3
 800b490:	4621      	mov	r1, r4
 800b492:	f7fd fae1 	bl	8008a58 <__aeabi_d2f>
 800b496:	4602      	mov	r2, r0
 800b498:	4b11      	ldr	r3, [pc, #68]	; (800b4e0 <ControlMotor+0x2c0>)
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	e054      	b.n	800b548 <ControlMotor+0x328>
 800b49e:	bf00      	nop
 800b4a0:	317249d5 	.word	0x317249d5
 800b4a4:	3f502de0 	.word	0x3f502de0
 800b4a8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b4ac:	3f50624d 	.word	0x3f50624d
 800b4b0:	40000424 	.word	0x40000424
 800b4b4:	200004ac 	.word	0x200004ac
 800b4b8:	40000824 	.word	0x40000824
 800b4bc:	20000440 	.word	0x20000440
 800b4c0:	20000434 	.word	0x20000434
 800b4c4:	42120000 	.word	0x42120000
 800b4c8:	20000254 	.word	0x20000254
 800b4cc:	20000258 	.word	0x20000258
 800b4d0:	20000000 	.word	0x20000000
 800b4d4:	2000025c 	.word	0x2000025c
 800b4d8:	20000430 	.word	0x20000430
 800b4dc:	3a83126f 	.word	0x3a83126f
 800b4e0:	20000400 	.word	0x20000400
 800b4e4:	20000458 	.word	0x20000458
 800b4e8:	20000420 	.word	0x20000420
 800b4ec:	20000488 	.word	0x20000488

		}
		else if( Pid[R_WALL_PID].flag == 1 )
 800b4f0:	4b63      	ldr	r3, [pc, #396]	; (800b680 <ControlMotor+0x460>)
 800b4f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d126      	bne.n	800b548 <ControlMotor+0x328>
		{
			wall_r = PIDControl( R_WALL_PID, T1, TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800b4fa:	4b62      	ldr	r3, [pc, #392]	; (800b684 <ControlMotor+0x464>)
 800b4fc:	edd3 7a01 	vldr	s15, [r3, #4]
 800b500:	4b61      	ldr	r3, [pc, #388]	; (800b688 <ControlMotor+0x468>)
 800b502:	ed93 7a01 	vldr	s14, [r3, #4]
 800b506:	eeb0 1a47 	vmov.f32	s2, s14
 800b50a:	eef0 0a67 	vmov.f32	s1, s15
 800b50e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800b68c <ControlMotor+0x46c>
 800b512:	2003      	movs	r0, #3
 800b514:	f001 f844 	bl	800c5a0 <PIDControl>
 800b518:	6078      	str	r0, [r7, #4]
			TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	ee07 3a90 	vmov	s15, r3
 800b520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b524:	ee17 0a90 	vmov	r0, s15
 800b528:	f7fc ff46 	bl	80083b8 <__aeabi_f2d>
 800b52c:	a352      	add	r3, pc, #328	; (adr r3, 800b678 <ControlMotor+0x458>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7fc ff99 	bl	8008468 <__aeabi_dmul>
 800b536:	4603      	mov	r3, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	4618      	mov	r0, r3
 800b53c:	4621      	mov	r1, r4
 800b53e:	f7fd fa8b 	bl	8008a58 <__aeabi_d2f>
 800b542:	4602      	mov	r2, r0
 800b544:	4b52      	ldr	r3, [pc, #328]	; (800b690 <ControlMotor+0x470>)
 800b546:	601a      	str	r2, [r3, #0]
//		TargetAngularV += AngularAcceleration;
//	}
	//タイヤ目標値計算
	//減速させすぎると、目標パルスに達する前にマイナスに振れてしまう

	TargetVelocity[BODY] += Acceleration;
 800b548:	4b52      	ldr	r3, [pc, #328]	; (800b694 <ControlMotor+0x474>)
 800b54a:	ed93 7a02 	vldr	s14, [r3, #8]
 800b54e:	4b52      	ldr	r3, [pc, #328]	; (800b698 <ControlMotor+0x478>)
 800b550:	edd3 7a00 	vldr	s15, [r3]
 800b554:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b558:	4b4e      	ldr	r3, [pc, #312]	; (800b694 <ControlMotor+0x474>)
 800b55a:	edc3 7a02 	vstr	s15, [r3, #8]
	TargetAngularV += AngularAcceleration;
 800b55e:	4b4c      	ldr	r3, [pc, #304]	; (800b690 <ControlMotor+0x470>)
 800b560:	ed93 7a00 	vldr	s14, [r3]
 800b564:	4b4d      	ldr	r3, [pc, #308]	; (800b69c <ControlMotor+0x47c>)
 800b566:	edd3 7a00 	vldr	s15, [r3]
 800b56a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b56e:	4b48      	ldr	r3, [pc, #288]	; (800b690 <ControlMotor+0x470>)
 800b570:	edc3 7a00 	vstr	s15, [r3]
//		PIDChangeFlag(A_VELO_PID, 0);
//	}

	//壁制御を入れる条件
	//型壁制御は端の区画にいるとき。必ず。
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY]*2 - TargetAngularV * TREAD_WIDTH )/2;
 800b574:	4b47      	ldr	r3, [pc, #284]	; (800b694 <ControlMotor+0x474>)
 800b576:	edd3 7a02 	vldr	s15, [r3, #8]
 800b57a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b57e:	ee17 0a90 	vmov	r0, s15
 800b582:	f7fc ff19 	bl	80083b8 <__aeabi_f2d>
 800b586:	4604      	mov	r4, r0
 800b588:	460d      	mov	r5, r1
 800b58a:	4b41      	ldr	r3, [pc, #260]	; (800b690 <ControlMotor+0x470>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fc ff12 	bl	80083b8 <__aeabi_f2d>
 800b594:	f04f 0200 	mov.w	r2, #0
 800b598:	4b41      	ldr	r3, [pc, #260]	; (800b6a0 <ControlMotor+0x480>)
 800b59a:	f7fc ff65 	bl	8008468 <__aeabi_dmul>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	f7fc fda7 	bl	80080f8 <__aeabi_dsub>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	f04f 0200 	mov.w	r2, #0
 800b5b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5ba:	f7fd f87f 	bl	80086bc <__aeabi_ddiv>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	f7fd fa47 	bl	8008a58 <__aeabi_d2f>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b31      	ldr	r3, [pc, #196]	; (800b694 <ControlMotor+0x474>)
 800b5ce:	605a      	str	r2, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b5d0:	4b2f      	ldr	r3, [pc, #188]	; (800b690 <ControlMotor+0x470>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fc feef 	bl	80083b8 <__aeabi_f2d>
 800b5da:	f04f 0200 	mov.w	r2, #0
 800b5de:	4b30      	ldr	r3, [pc, #192]	; (800b6a0 <ControlMotor+0x480>)
 800b5e0:	f7fc ff42 	bl	8008468 <__aeabi_dmul>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	4625      	mov	r5, r4
 800b5ea:	461c      	mov	r4, r3
 800b5ec:	4b29      	ldr	r3, [pc, #164]	; (800b694 <ControlMotor+0x474>)
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fc fee1 	bl	80083b8 <__aeabi_f2d>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	f7fc fd7d 	bl	80080fc <__adddf3>
 800b602:	4603      	mov	r3, r0
 800b604:	460c      	mov	r4, r1
 800b606:	4618      	mov	r0, r3
 800b608:	4621      	mov	r1, r4
 800b60a:	f7fd fa25 	bl	8008a58 <__aeabi_d2f>
 800b60e:	4602      	mov	r2, r0
 800b610:	4b20      	ldr	r3, [pc, #128]	; (800b694 <ControlMotor+0x474>)
 800b612:	601a      	str	r2, [r3, #0]

	//目標角速度が0のときは角速度制御も入れる。
	//制御出力値生成
	//PIDControl(int n, int T, float target, float current, int *output);
	//もう一回車体速度制御+角速度制御でやってみる。ダメだった。ブレブレ。
	VelocityLeftOut = PIDControl( L_WALL_PID, T1, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b614:	4b1f      	ldr	r3, [pc, #124]	; (800b694 <ControlMotor+0x474>)
 800b616:	edd3 7a00 	vldr	s15, [r3]
 800b61a:	4b22      	ldr	r3, [pc, #136]	; (800b6a4 <ControlMotor+0x484>)
 800b61c:	ed93 7a00 	vldr	s14, [r3]
 800b620:	eeb0 1a47 	vmov.f32	s2, s14
 800b624:	eef0 0a67 	vmov.f32	s1, s15
 800b628:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b68c <ControlMotor+0x46c>
 800b62c:	2002      	movs	r0, #2
 800b62e:	f000 ffb7 	bl	800c5a0 <PIDControl>
 800b632:	4602      	mov	r2, r0
 800b634:	4b1c      	ldr	r3, [pc, #112]	; (800b6a8 <ControlMotor+0x488>)
 800b636:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_WALL_PID, T1, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b638:	4b16      	ldr	r3, [pc, #88]	; (800b694 <ControlMotor+0x474>)
 800b63a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b63e:	4b19      	ldr	r3, [pc, #100]	; (800b6a4 <ControlMotor+0x484>)
 800b640:	ed93 7a01 	vldr	s14, [r3, #4]
 800b644:	eeb0 1a47 	vmov.f32	s2, s14
 800b648:	eef0 0a67 	vmov.f32	s1, s15
 800b64c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800b68c <ControlMotor+0x46c>
 800b650:	2003      	movs	r0, #3
 800b652:	f000 ffa5 	bl	800c5a0 <PIDControl>
 800b656:	4602      	mov	r2, r0
 800b658:	4b14      	ldr	r3, [pc, #80]	; (800b6ac <ControlMotor+0x48c>)
 800b65a:	601a      	str	r2, [r3, #0]

	//L_motor = VelocityLeftOut; //WallLeftOut
	//R_motor = VelocityRightOut; //+ WallRightOut

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b65c:	4b12      	ldr	r3, [pc, #72]	; (800b6a8 <ControlMotor+0x488>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	4b12      	ldr	r3, [pc, #72]	; (800b6ac <ControlMotor+0x48c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4619      	mov	r1, r3
 800b666:	4610      	mov	r0, r2
 800b668:	f002 ff6a 	bl	800e540 <Motor_Switch>

//	int left = 300, right = 300;
//	Motor_Switch( left, right );

}
 800b66c:	bf00      	nop
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bdb0      	pop	{r4, r5, r7, pc}
 800b674:	f3af 8000 	nop.w
 800b678:	d2f1a9fc 	.word	0xd2f1a9fc
 800b67c:	3f50624d 	.word	0x3f50624d
 800b680:	2000025c 	.word	0x2000025c
 800b684:	20000488 	.word	0x20000488
 800b688:	20000458 	.word	0x20000458
 800b68c:	3a83126f 	.word	0x3a83126f
 800b690:	20000400 	.word	0x20000400
 800b694:	200003e8 	.word	0x200003e8
 800b698:	2000042c 	.word	0x2000042c
 800b69c:	20000428 	.word	0x20000428
 800b6a0:	40424000 	.word	0x40424000
 800b6a4:	20000440 	.word	0x20000440
 800b6a8:	2000046c 	.word	0x2000046c
 800b6ac:	2000049c 	.word	0x2000049c

0800b6b0 <HAL_TIM_PeriodElapsedCallback>:
//	}
//}

//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a2a      	ldr	r2, [pc, #168]	; (800b764 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d111      	bne.n	800b6e4 <HAL_TIM_PeriodElapsedCallback+0x34>
		//ConvertEncData();
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		timer1 += t;
 800b6c0:	4b29      	ldr	r3, [pc, #164]	; (800b768 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	4b29      	ldr	r3, [pc, #164]	; (800b76c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	4a27      	ldr	r2, [pc, #156]	; (800b768 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b6cc:	6013      	str	r3, [r2, #0]
		if(timer1 == 30000)
 800b6ce:	4b26      	ldr	r3, [pc, #152]	; (800b768 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f247 5230 	movw	r2, #30000	; 0x7530
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d102      	bne.n	800b6e0 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			t = 0;
 800b6da:	4b24      	ldr	r3, [pc, #144]	; (800b76c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]
		}
		ControlMotor();
 800b6e0:	f7ff fd9e 	bl	800b220 <ControlMotor>
//もう一回車体速度制御+角速度制御でやってみる。ダメだった。ブレブレ。
//PIDの関数の処理の重さはどうか。

	}

	if( htim == &htim8)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a22      	ldr	r2, [pc, #136]	; (800b770 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d136      	bne.n	800b75a <HAL_TIM_PeriodElapsedCallback+0xaa>
	{
		//timer += t;
		timer8 += t;
 800b6ec:	4b21      	ldr	r3, [pc, #132]	; (800b774 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	4b1e      	ldr	r3, [pc, #120]	; (800b76c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	4a1f      	ldr	r2, [pc, #124]	; (800b774 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800b6f8:	6013      	str	r3, [r2, #0]

		//壁センサデータの更新だけ
		//UpdatePhotoData();
		//処理がこれだけなら影響しない。問題はTIM1の処理の重さ。1msで終えられていないから狂ってくる。
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800b6fa:	4b1f      	ldr	r3, [pc, #124]	; (800b778 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2200      	movs	r2, #0
 800b700:	4619      	mov	r1, r3
 800b702:	200a      	movs	r0, #10
 800b704:	f7ff f984 	bl	800aa10 <GetWallDataAverage>
 800b708:	eef0 7a40 	vmov.f32	s15, s0
 800b70c:	4b1b      	ldr	r3, [pc, #108]	; (800b77c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800b70e:	edc3 7a00 	vstr	s15, [r3]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800b712:	4b19      	ldr	r3, [pc, #100]	; (800b778 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	4619      	mov	r1, r3
 800b71a:	200a      	movs	r0, #10
 800b71c:	f7ff f978 	bl	800aa10 <GetWallDataAverage>
 800b720:	eef0 7a40 	vmov.f32	s15, s0
 800b724:	4b15      	ldr	r3, [pc, #84]	; (800b77c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800b726:	edc3 7a01 	vstr	s15, [r3, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800b72a:	4b15      	ldr	r3, [pc, #84]	; (800b780 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2202      	movs	r2, #2
 800b730:	4619      	mov	r1, r3
 800b732:	200a      	movs	r0, #10
 800b734:	f7ff f96c 	bl	800aa10 <GetWallDataAverage>
 800b738:	eef0 7a40 	vmov.f32	s15, s0
 800b73c:	4b0f      	ldr	r3, [pc, #60]	; (800b77c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800b73e:	edc3 7a02 	vstr	s15, [r3, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800b742:	4b0f      	ldr	r3, [pc, #60]	; (800b780 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	2203      	movs	r2, #3
 800b748:	4619      	mov	r1, r3
 800b74a:	200a      	movs	r0, #10
 800b74c:	f7ff f960 	bl	800aa10 <GetWallDataAverage>
 800b750:	eef0 7a40 	vmov.f32	s15, s0
 800b754:	4b09      	ldr	r3, [pc, #36]	; (800b77c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800b756:	edc3 7a03 	vstr	s15, [r3, #12]
	}
//	if( htim == &htim9)
//	{
//
//	}
}
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20000940 	.word	0x20000940
 800b768:	200003e4 	.word	0x200003e4
 800b76c:	200003dc 	.word	0x200003dc
 800b770:	200006b8 	.word	0x200006b8
 800b774:	200003e0 	.word	0x200003e0
 800b778:	200003c0 	.word	0x200003c0
 800b77c:	20000458 	.word	0x20000458
 800b780:	200003cc 	.word	0x200003cc

0800b784 <wall_init>:
				FLASH_Write_Word(address+12, Wall[i][j].west);
				address += 16;
			}
	}
}
void wall_init(){
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b78a:	2300      	movs	r3, #0
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	e037      	b.n	800b800 <wall_init+0x7c>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b790:	2300      	movs	r3, #0
 800b792:	60bb      	str	r3, [r7, #8]
 800b794:	e02e      	b.n	800b7f4 <wall_init+0x70>
				Wall[i][j].north = UNKNOWN;
 800b796:	493d      	ldr	r1, [pc, #244]	; (800b88c <wall_init+0x108>)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	011a      	lsls	r2, r3, #4
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	441a      	add	r2, r3
 800b7a0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b7a4:	f043 0303 	orr.w	r3, r3, #3
 800b7a8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800b7ac:	4937      	ldr	r1, [pc, #220]	; (800b88c <wall_init+0x108>)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	011a      	lsls	r2, r3, #4
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	441a      	add	r2, r3
 800b7b6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b7ba:	f043 030c 	orr.w	r3, r3, #12
 800b7be:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800b7c2:	4932      	ldr	r1, [pc, #200]	; (800b88c <wall_init+0x108>)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	011a      	lsls	r2, r3, #4
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	441a      	add	r2, r3
 800b7cc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b7d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800b7d4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800b7d8:	492c      	ldr	r1, [pc, #176]	; (800b88c <wall_init+0x108>)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	011a      	lsls	r2, r3, #4
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	441a      	add	r2, r3
 800b7e2:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b7e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7ea:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	60bb      	str	r3, [r7, #8]
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b0f      	cmp	r3, #15
 800b7f8:	ddcd      	ble.n	800b796 <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b0f      	cmp	r3, #15
 800b804:	ddc4      	ble.n	800b790 <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b806:	2300      	movs	r3, #0
 800b808:	607b      	str	r3, [r7, #4]
 800b80a:	e02a      	b.n	800b862 <wall_init+0xde>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800b80c:	4a1f      	ldr	r2, [pc, #124]	; (800b88c <wall_init+0x108>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	015b      	lsls	r3, r3, #5
 800b812:	4413      	add	r3, r2
 800b814:	f103 021e 	add.w	r2, r3, #30
 800b818:	7813      	ldrb	r3, [r2, #0]
 800b81a:	2101      	movs	r1, #1
 800b81c:	f361 0301 	bfi	r3, r1, #0, #2
 800b820:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800b822:	491a      	ldr	r1, [pc, #104]	; (800b88c <wall_init+0x108>)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b82a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b82e:	2001      	movs	r0, #1
 800b830:	f360 0383 	bfi	r3, r0, #2, #2
 800b834:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800b838:	4a14      	ldr	r2, [pc, #80]	; (800b88c <wall_init+0x108>)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	015b      	lsls	r3, r3, #5
 800b83e:	441a      	add	r2, r3
 800b840:	7813      	ldrb	r3, [r2, #0]
 800b842:	2101      	movs	r1, #1
 800b844:	f361 1305 	bfi	r3, r1, #4, #2
 800b848:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800b84a:	4910      	ldr	r1, [pc, #64]	; (800b88c <wall_init+0x108>)
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b852:	2001      	movs	r0, #1
 800b854:	f360 1387 	bfi	r3, r0, #6, #2
 800b858:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3301      	adds	r3, #1
 800b860:	607b      	str	r3, [r7, #4]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b0f      	cmp	r3, #15
 800b866:	ddd1      	ble.n	800b80c <wall_init+0x88>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800b868:	4a08      	ldr	r2, [pc, #32]	; (800b88c <wall_init+0x108>)
 800b86a:	7813      	ldrb	r3, [r2, #0]
 800b86c:	2101      	movs	r1, #1
 800b86e:	f361 0383 	bfi	r3, r1, #2, #2
 800b872:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800b874:	4a05      	ldr	r2, [pc, #20]	; (800b88c <wall_init+0x108>)
 800b876:	7813      	ldrb	r3, [r2, #0]
 800b878:	f36f 0301 	bfc	r3, #0, #2
 800b87c:	7013      	strb	r3, [r2, #0]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800b87e:	bf00      	nop
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	200004b8 	.word	0x200004b8

0800b890 <wall_set>:
	FLASH_Write_Word(address+8, Wall[x][y].south);
	FLASH_Write_Word(address+12, Wall[x][y].west);

}
//壁の更新xyグローバル
void wall_set(uint8_t x, uint8_t y, cardinal car, float side_left, float side_right, float front_left, float front_right){
 800b890:	b480      	push	{r7}
 800b892:	b089      	sub	sp, #36	; 0x24
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	ed87 0a04 	vstr	s0, [r7, #16]
 800b89c:	edc7 0a03 	vstr	s1, [r7, #12]
 800b8a0:	ed87 1a02 	vstr	s2, [r7, #8]
 800b8a4:	edc7 1a01 	vstr	s3, [r7, #4]
 800b8a8:	75fb      	strb	r3, [r7, #23]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	75bb      	strb	r3, [r7, #22]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	757b      	strb	r3, [r7, #21]
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[car] = ((front_left + front_right)/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800b8b2:	ed97 7a02 	vldr	s14, [r7, #8]
 800b8b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800b8ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b8c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8c6:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800ba8c <wall_set+0x1fc>
 800b8ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d2:	bfcc      	ite	gt
 800b8d4:	2301      	movgt	r3, #1
 800b8d6:	2300      	movle	r3, #0
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	7d7b      	ldrb	r3, [r7, #21]
 800b8dc:	f107 0120 	add.w	r1, r7, #32
 800b8e0:	440b      	add	r3, r1
 800b8e2:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(car + 1)%4] = side_right > RIGHT_WALL  ?  WALL :  NOWALL;
 800b8e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b8ea:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ba90 <wall_set+0x200>
 800b8ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f6:	bfcc      	ite	gt
 800b8f8:	2301      	movgt	r3, #1
 800b8fa:	2300      	movle	r3, #0
 800b8fc:	b2d9      	uxtb	r1, r3
 800b8fe:	7d7b      	ldrb	r3, [r7, #21]
 800b900:	3301      	adds	r3, #1
 800b902:	425a      	negs	r2, r3
 800b904:	f003 0303 	and.w	r3, r3, #3
 800b908:	f002 0203 	and.w	r2, r2, #3
 800b90c:	bf58      	it	pl
 800b90e:	4253      	negpl	r3, r2
 800b910:	460a      	mov	r2, r1
 800b912:	f107 0120 	add.w	r1, r7, #32
 800b916:	440b      	add	r3, r1
 800b918:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(car + 2)%4] = NOWALL;
 800b91c:	7d7b      	ldrb	r3, [r7, #21]
 800b91e:	3302      	adds	r3, #2
 800b920:	425a      	negs	r2, r3
 800b922:	f003 0303 	and.w	r3, r3, #3
 800b926:	f002 0203 	and.w	r2, r2, #3
 800b92a:	bf58      	it	pl
 800b92c:	4253      	negpl	r3, r2
 800b92e:	f107 0220 	add.w	r2, r7, #32
 800b932:	4413      	add	r3, r2
 800b934:	2200      	movs	r2, #0
 800b936:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(car + 3)%4] = side_left > LEFT_WALL ?  WALL :  NOWALL;
 800b93a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b93e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800ba94 <wall_set+0x204>
 800b942:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b94a:	bfcc      	ite	gt
 800b94c:	2301      	movgt	r3, #1
 800b94e:	2300      	movle	r3, #0
 800b950:	b2d9      	uxtb	r1, r3
 800b952:	7d7b      	ldrb	r3, [r7, #21]
 800b954:	3303      	adds	r3, #3
 800b956:	425a      	negs	r2, r3
 800b958:	f003 0303 	and.w	r3, r3, #3
 800b95c:	f002 0203 	and.w	r2, r2, #3
 800b960:	bf58      	it	pl
 800b962:	4253      	negpl	r3, r2
 800b964:	460a      	mov	r2, r1
 800b966:	f107 0120 	add.w	r1, r7, #32
 800b96a:	440b      	add	r3, r1
 800b96c:	f803 2c04 	strb.w	r2, [r3, #-4]

	  //各方角の壁に壁の有無を代入
	  Wall[x][y].north = wall_dir[0];
 800b970:	7f39      	ldrb	r1, [r7, #28]
 800b972:	7dfa      	ldrb	r2, [r7, #23]
 800b974:	7dbb      	ldrb	r3, [r7, #22]
 800b976:	f001 0103 	and.w	r1, r1, #3
 800b97a:	b2c8      	uxtb	r0, r1
 800b97c:	4946      	ldr	r1, [pc, #280]	; (800ba98 <wall_set+0x208>)
 800b97e:	0112      	lsls	r2, r2, #4
 800b980:	441a      	add	r2, r3
 800b982:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b986:	f360 0301 	bfi	r3, r0, #0, #2
 800b98a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].east = wall_dir[1];
 800b98e:	7f79      	ldrb	r1, [r7, #29]
 800b990:	7dfa      	ldrb	r2, [r7, #23]
 800b992:	7dbb      	ldrb	r3, [r7, #22]
 800b994:	f001 0103 	and.w	r1, r1, #3
 800b998:	b2c8      	uxtb	r0, r1
 800b99a:	493f      	ldr	r1, [pc, #252]	; (800ba98 <wall_set+0x208>)
 800b99c:	0112      	lsls	r2, r2, #4
 800b99e:	441a      	add	r2, r3
 800b9a0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b9a4:	f360 0383 	bfi	r3, r0, #2, #2
 800b9a8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].south = wall_dir[2];
 800b9ac:	7fb9      	ldrb	r1, [r7, #30]
 800b9ae:	7dfa      	ldrb	r2, [r7, #23]
 800b9b0:	7dbb      	ldrb	r3, [r7, #22]
 800b9b2:	f001 0103 	and.w	r1, r1, #3
 800b9b6:	b2c8      	uxtb	r0, r1
 800b9b8:	4937      	ldr	r1, [pc, #220]	; (800ba98 <wall_set+0x208>)
 800b9ba:	0112      	lsls	r2, r2, #4
 800b9bc:	441a      	add	r2, r3
 800b9be:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b9c2:	f360 1305 	bfi	r3, r0, #4, #2
 800b9c6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].west = wall_dir[3];
 800b9ca:	7ff9      	ldrb	r1, [r7, #31]
 800b9cc:	7dfa      	ldrb	r2, [r7, #23]
 800b9ce:	7dbb      	ldrb	r3, [r7, #22]
 800b9d0:	f001 0103 	and.w	r1, r1, #3
 800b9d4:	b2c8      	uxtb	r0, r1
 800b9d6:	4930      	ldr	r1, [pc, #192]	; (800ba98 <wall_set+0x208>)
 800b9d8:	0112      	lsls	r2, r2, #4
 800b9da:	441a      	add	r2, r3
 800b9dc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b9e0:	f360 1387 	bfi	r3, r0, #6, #2
 800b9e4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(y < (NUMBER_OF_SQUARES-1) )
 800b9e8:	7dbb      	ldrb	r3, [r7, #22]
 800b9ea:	2b0e      	cmp	r3, #14
 800b9ec:	d80f      	bhi.n	800ba0e <wall_set+0x17e>
	  {
		  Wall[x][y+1].south = wall_dir[0];//北端でなければ
 800b9ee:	7f39      	ldrb	r1, [r7, #28]
 800b9f0:	7dfa      	ldrb	r2, [r7, #23]
 800b9f2:	7dbb      	ldrb	r3, [r7, #22]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	f001 0103 	and.w	r1, r1, #3
 800b9fa:	b2c8      	uxtb	r0, r1
 800b9fc:	4926      	ldr	r1, [pc, #152]	; (800ba98 <wall_set+0x208>)
 800b9fe:	0112      	lsls	r2, r2, #4
 800ba00:	441a      	add	r2, r3
 800ba02:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ba06:	f360 1305 	bfi	r3, r0, #4, #2
 800ba0a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  //address = start_adress_sector1 + ( x*16) + ( (y+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[x][y+1].south);
	  }
	  if(x < (NUMBER_OF_SQUARES-1) )
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	2b0e      	cmp	r3, #14
 800ba12:	d80f      	bhi.n	800ba34 <wall_set+0x1a4>
	  {
		  Wall[x+1][y].west = wall_dir[1];//東端でなければ
 800ba14:	7f79      	ldrb	r1, [r7, #29]
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	7dbb      	ldrb	r3, [r7, #22]
 800ba1c:	f001 0103 	and.w	r1, r1, #3
 800ba20:	b2c8      	uxtb	r0, r1
 800ba22:	491d      	ldr	r1, [pc, #116]	; (800ba98 <wall_set+0x208>)
 800ba24:	0112      	lsls	r2, r2, #4
 800ba26:	441a      	add	r2, r3
 800ba28:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ba2c:	f360 1387 	bfi	r3, r0, #6, #2
 800ba30:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( (x+1)*16) + ( (y)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[x+1][y].west);
	  }
	  if(y > 0 )
 800ba34:	7dbb      	ldrb	r3, [r7, #22]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00f      	beq.n	800ba5a <wall_set+0x1ca>
	  {
		  Wall[x][y-1].north = wall_dir[2];//南端でなければ
 800ba3a:	7fb9      	ldrb	r1, [r7, #30]
 800ba3c:	7dfa      	ldrb	r2, [r7, #23]
 800ba3e:	7dbb      	ldrb	r3, [r7, #22]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	f001 0103 	and.w	r1, r1, #3
 800ba46:	b2c8      	uxtb	r0, r1
 800ba48:	4913      	ldr	r1, [pc, #76]	; (800ba98 <wall_set+0x208>)
 800ba4a:	0112      	lsls	r2, r2, #4
 800ba4c:	441a      	add	r2, r3
 800ba4e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ba52:	f360 0301 	bfi	r3, r0, #0, #2
 800ba56:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( x*16) + ( (y-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[x][y-1].north);
	  }
	  if(x > 0 )
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00f      	beq.n	800ba80 <wall_set+0x1f0>
	  {
		  Wall[x-1][y].east = wall_dir[3];//西端でなければ
 800ba60:	7ff9      	ldrb	r1, [r7, #31]
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	1e5a      	subs	r2, r3, #1
 800ba66:	7dbb      	ldrb	r3, [r7, #22]
 800ba68:	f001 0103 	and.w	r1, r1, #3
 800ba6c:	b2c8      	uxtb	r0, r1
 800ba6e:	490a      	ldr	r1, [pc, #40]	; (800ba98 <wall_set+0x208>)
 800ba70:	0112      	lsls	r2, r2, #4
 800ba72:	441a      	add	r2, r3
 800ba74:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ba78:	f360 0383 	bfi	r3, r0, #2, #2
 800ba7c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  }

	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(x,y);
}
 800ba80:	bf00      	nop
 800ba82:	3724      	adds	r7, #36	; 0x24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	428c0000 	.word	0x428c0000
 800ba90:	42b40000 	.word	0x42b40000
 800ba94:	42c80000 	.word	0x42c80000
 800ba98:	200004b8 	.word	0x200004b8

0800ba9c <LeftHandJudge>:
	}while(flag);

}
//ノード
//左手法での方向決定
void LeftHandJudge(char turn_mode){
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	4603      	mov	r3, r0
 800baa4:	71fb      	strb	r3, [r7, #7]
	/*--旋回モード選?��?--*/

	/*-=1-=1*/
    	  switch(Pos.Car){
 800baa6:	4bae      	ldr	r3, [pc, #696]	; (800bd60 <LeftHandJudge+0x2c4>)
 800baa8:	78db      	ldrb	r3, [r3, #3]
 800baaa:	2b03      	cmp	r3, #3
 800baac:	f200 81e1 	bhi.w	800be72 <LeftHandJudge+0x3d6>
 800bab0:	a201      	add	r2, pc, #4	; (adr r2, 800bab8 <LeftHandJudge+0x1c>)
 800bab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab6:	bf00      	nop
 800bab8:	0800bac9 	.word	0x0800bac9
 800babc:	0800bbb1 	.word	0x0800bbb1
 800bac0:	0800bc99 	.word	0x0800bc99
 800bac4:	0800bd8b 	.word	0x0800bd8b
    	  case north:

    		  if(Wall[Pos.X][Pos.Y].west == NOWALL){
 800bac8:	4ba5      	ldr	r3, [pc, #660]	; (800bd60 <LeftHandJudge+0x2c4>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	4618      	mov	r0, r3
 800bace:	4ba4      	ldr	r3, [pc, #656]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bad0:	785b      	ldrb	r3, [r3, #1]
 800bad2:	4619      	mov	r1, r3
 800bad4:	4aa3      	ldr	r2, [pc, #652]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bad6:	0103      	lsls	r3, r0, #4
 800bad8:	440b      	add	r3, r1
 800bada:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bade:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d110      	bne.n	800bb0a <LeftHandJudge+0x6e>
    			  Pos.Dir = left;
 800bae8:	4b9d      	ldr	r3, [pc, #628]	; (800bd60 <LeftHandJudge+0x2c4>)
 800baea:	2202      	movs	r2, #2
 800baec:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe ff2b 	bl	800a94c <SelectAction>
    			  Pos.Car = west;
 800baf6:	4b9a      	ldr	r3, [pc, #616]	; (800bd60 <LeftHandJudge+0x2c4>)
 800baf8:	2203      	movs	r2, #3
 800bafa:	70da      	strb	r2, [r3, #3]
    		      Pos.X-=1;
 800bafc:	4b98      	ldr	r3, [pc, #608]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	4b96      	ldr	r3, [pc, #600]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb06:	701a      	strb	r2, [r3, #0]
    	       	  Pos.Y-=1;
    		  }



    		  break;
 800bb08:	e1b4      	b.n	800be74 <LeftHandJudge+0x3d8>
    		  else if(Wall[Pos.X][Pos.Y].north == NOWALL){
 800bb0a:	4b95      	ldr	r3, [pc, #596]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	4b93      	ldr	r3, [pc, #588]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb12:	785b      	ldrb	r3, [r3, #1]
 800bb14:	4619      	mov	r1, r3
 800bb16:	4a93      	ldr	r2, [pc, #588]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bb18:	0103      	lsls	r3, r0, #4
 800bb1a:	440b      	add	r3, r1
 800bb1c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bb20:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d110      	bne.n	800bb4c <LeftHandJudge+0xb0>
    			  Pos.Dir = front;
 800bb2a:	4b8d      	ldr	r3, [pc, #564]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bb30:	79fb      	ldrb	r3, [r7, #7]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fe ff0a 	bl	800a94c <SelectAction>
    			  Pos.Car = north;
 800bb38:	4b89      	ldr	r3, [pc, #548]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	70da      	strb	r2, [r3, #3]
    			  Pos.Y+=1;
 800bb3e:	4b88      	ldr	r3, [pc, #544]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb40:	785b      	ldrb	r3, [r3, #1]
 800bb42:	3301      	adds	r3, #1
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	4b86      	ldr	r3, [pc, #536]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb48:	705a      	strb	r2, [r3, #1]
    		  break;
 800bb4a:	e193      	b.n	800be74 <LeftHandJudge+0x3d8>
    		  else if(Wall[Pos.X][Pos.Y].east == NOWALL){
 800bb4c:	4b84      	ldr	r3, [pc, #528]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	4b83      	ldr	r3, [pc, #524]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb54:	785b      	ldrb	r3, [r3, #1]
 800bb56:	4619      	mov	r1, r3
 800bb58:	4a82      	ldr	r2, [pc, #520]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bb5a:	0103      	lsls	r3, r0, #4
 800bb5c:	440b      	add	r3, r1
 800bb5e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bb62:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d110      	bne.n	800bb8e <LeftHandJudge+0xf2>
    			  Pos.Dir = right;
 800bb6c:	4b7c      	ldr	r3, [pc, #496]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb6e:	2201      	movs	r2, #1
 800bb70:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fe fee9 	bl	800a94c <SelectAction>
    	          Pos.Car = east;
 800bb7a:	4b79      	ldr	r3, [pc, #484]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	70da      	strb	r2, [r3, #3]
    	          Pos.X+=1;
 800bb80:	4b77      	ldr	r3, [pc, #476]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	3301      	adds	r3, #1
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	4b75      	ldr	r3, [pc, #468]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb8a:	701a      	strb	r2, [r3, #0]
    		  break;
 800bb8c:	e172      	b.n	800be74 <LeftHandJudge+0x3d8>
    			  Pos.Dir = back;
 800bb8e:	4b74      	ldr	r3, [pc, #464]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb90:	2203      	movs	r2, #3
 800bb92:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe fed8 	bl	800a94c <SelectAction>
    	       	  Pos.Car = south;
 800bb9c:	4b70      	ldr	r3, [pc, #448]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bb9e:	2202      	movs	r2, #2
 800bba0:	70da      	strb	r2, [r3, #3]
    	       	  Pos.Y-=1;
 800bba2:	4b6f      	ldr	r3, [pc, #444]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bba4:	785b      	ldrb	r3, [r3, #1]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	4b6d      	ldr	r3, [pc, #436]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbac:	705a      	strb	r2, [r3, #1]
    		  break;
 800bbae:	e161      	b.n	800be74 <LeftHandJudge+0x3d8>
    	  case east:
    		  if(Wall[Pos.X][Pos.Y].north== NOWALL){
 800bbb0:	4b6b      	ldr	r3, [pc, #428]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	4b6a      	ldr	r3, [pc, #424]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbb8:	785b      	ldrb	r3, [r3, #1]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4a69      	ldr	r2, [pc, #420]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bbbe:	0103      	lsls	r3, r0, #4
 800bbc0:	440b      	add	r3, r1
 800bbc2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bbc6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d110      	bne.n	800bbf2 <LeftHandJudge+0x156>
    			  Pos.Dir = left;
 800bbd0:	4b63      	ldr	r3, [pc, #396]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bbd6:	79fb      	ldrb	r3, [r7, #7]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe feb7 	bl	800a94c <SelectAction>
    			  Pos.Car = north;
 800bbde:	4b60      	ldr	r3, [pc, #384]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	70da      	strb	r2, [r3, #3]
    			  Pos.Y+=1;
 800bbe4:	4b5e      	ldr	r3, [pc, #376]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbe6:	785b      	ldrb	r3, [r3, #1]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	4b5c      	ldr	r3, [pc, #368]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbee:	705a      	strb	r2, [r3, #1]
    			  SelectAction(turn_mode);
      			  Pos.Car = west;
      		      Pos.X-=1;
    		  }

    		  break;
 800bbf0:	e140      	b.n	800be74 <LeftHandJudge+0x3d8>
    		  else if(Wall[Pos.X][Pos.Y].east == NOWALL){
 800bbf2:	4b5b      	ldr	r3, [pc, #364]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	4b59      	ldr	r3, [pc, #356]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bbfa:	785b      	ldrb	r3, [r3, #1]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4a59      	ldr	r2, [pc, #356]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bc00:	0103      	lsls	r3, r0, #4
 800bc02:	440b      	add	r3, r1
 800bc04:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bc08:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d110      	bne.n	800bc34 <LeftHandJudge+0x198>
    			  Pos.Dir = front;
 800bc12:	4b53      	ldr	r3, [pc, #332]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bc18:	79fb      	ldrb	r3, [r7, #7]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe fe96 	bl	800a94c <SelectAction>
    	          Pos.Car = east;
 800bc20:	4b4f      	ldr	r3, [pc, #316]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc22:	2201      	movs	r2, #1
 800bc24:	70da      	strb	r2, [r3, #3]
    	          Pos.X+=1;
 800bc26:	4b4e      	ldr	r3, [pc, #312]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	4b4c      	ldr	r3, [pc, #304]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc30:	701a      	strb	r2, [r3, #0]
    		  break;
 800bc32:	e11f      	b.n	800be74 <LeftHandJudge+0x3d8>
    		  else if(Wall[Pos.X][Pos.Y].south == NOWALL){
 800bc34:	4b4a      	ldr	r3, [pc, #296]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	4b49      	ldr	r3, [pc, #292]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	4a48      	ldr	r2, [pc, #288]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bc42:	0103      	lsls	r3, r0, #4
 800bc44:	440b      	add	r3, r1
 800bc46:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bc4a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d110      	bne.n	800bc76 <LeftHandJudge+0x1da>
    			  Pos.Dir = right;
 800bc54:	4b42      	ldr	r3, [pc, #264]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe fe75 	bl	800a94c <SelectAction>
    	       	  Pos.Car = south;
 800bc62:	4b3f      	ldr	r3, [pc, #252]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc64:	2202      	movs	r2, #2
 800bc66:	70da      	strb	r2, [r3, #3]
    	       	  Pos.Y-=1;
 800bc68:	4b3d      	ldr	r3, [pc, #244]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc6a:	785b      	ldrb	r3, [r3, #1]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	4b3b      	ldr	r3, [pc, #236]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc72:	705a      	strb	r2, [r3, #1]
    		  break;
 800bc74:	e0fe      	b.n	800be74 <LeftHandJudge+0x3d8>
    			  Pos.Dir = back;
 800bc76:	4b3a      	ldr	r3, [pc, #232]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc78:	2203      	movs	r2, #3
 800bc7a:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bc7c:	79fb      	ldrb	r3, [r7, #7]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe fe64 	bl	800a94c <SelectAction>
      			  Pos.Car = west;
 800bc84:	4b36      	ldr	r3, [pc, #216]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc86:	2203      	movs	r2, #3
 800bc88:	70da      	strb	r2, [r3, #3]
      		      Pos.X-=1;
 800bc8a:	4b35      	ldr	r3, [pc, #212]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	4b33      	ldr	r3, [pc, #204]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc94:	701a      	strb	r2, [r3, #0]
    		  break;
 800bc96:	e0ed      	b.n	800be74 <LeftHandJudge+0x3d8>
    	  case south:
    		  if(Wall[Pos.X][Pos.Y].east == NOWALL){
 800bc98:	4b31      	ldr	r3, [pc, #196]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	4b30      	ldr	r3, [pc, #192]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bca0:	785b      	ldrb	r3, [r3, #1]
 800bca2:	4619      	mov	r1, r3
 800bca4:	4a2f      	ldr	r2, [pc, #188]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bca6:	0103      	lsls	r3, r0, #4
 800bca8:	440b      	add	r3, r1
 800bcaa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bcae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d110      	bne.n	800bcda <LeftHandJudge+0x23e>
    			  Pos.Dir = left;
 800bcb8:	4b29      	ldr	r3, [pc, #164]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bcba:	2202      	movs	r2, #2
 800bcbc:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fe fe43 	bl	800a94c <SelectAction>
    	          Pos.Car = east;
 800bcc6:	4b26      	ldr	r3, [pc, #152]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bcc8:	2201      	movs	r2, #1
 800bcca:	70da      	strb	r2, [r3, #3]
    	          Pos.X+=1;
 800bccc:	4b24      	ldr	r3, [pc, #144]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bcd6:	701a      	strb	r2, [r3, #0]
    			  SelectAction(turn_mode);
      			  Pos.Car = north;
      			  Pos.Y+=1;
    		  }

    		  break;
 800bcd8:	e0cc      	b.n	800be74 <LeftHandJudge+0x3d8>
    		  else if(Wall[Pos.X][Pos.Y].south == NOWALL){
 800bcda:	4b21      	ldr	r3, [pc, #132]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	4618      	mov	r0, r3
 800bce0:	4b1f      	ldr	r3, [pc, #124]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bce2:	785b      	ldrb	r3, [r3, #1]
 800bce4:	4619      	mov	r1, r3
 800bce6:	4a1f      	ldr	r2, [pc, #124]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bce8:	0103      	lsls	r3, r0, #4
 800bcea:	440b      	add	r3, r1
 800bcec:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bcf0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d110      	bne.n	800bd1c <LeftHandJudge+0x280>
    			  Pos.Dir = front;
 800bcfa:	4b19      	ldr	r3, [pc, #100]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bd00:	79fb      	ldrb	r3, [r7, #7]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe fe22 	bl	800a94c <SelectAction>
    	       	  Pos.Car = south;
 800bd08:	4b15      	ldr	r3, [pc, #84]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	70da      	strb	r2, [r3, #3]
    	       	  Pos.Y-=1;
 800bd0e:	4b14      	ldr	r3, [pc, #80]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd10:	785b      	ldrb	r3, [r3, #1]
 800bd12:	3b01      	subs	r3, #1
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	4b12      	ldr	r3, [pc, #72]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd18:	705a      	strb	r2, [r3, #1]
    		  break;
 800bd1a:	e0ab      	b.n	800be74 <LeftHandJudge+0x3d8>
    		  else if(Wall[Pos.X][Pos.Y].west == NOWALL){
 800bd1c:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	4618      	mov	r0, r3
 800bd22:	4b0f      	ldr	r3, [pc, #60]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd24:	785b      	ldrb	r3, [r3, #1]
 800bd26:	4619      	mov	r1, r3
 800bd28:	4a0e      	ldr	r2, [pc, #56]	; (800bd64 <LeftHandJudge+0x2c8>)
 800bd2a:	0103      	lsls	r3, r0, #4
 800bd2c:	440b      	add	r3, r1
 800bd2e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bd32:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d115      	bne.n	800bd68 <LeftHandJudge+0x2cc>
    			  Pos.Dir = right;
 800bd3c:	4b08      	ldr	r3, [pc, #32]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fe fe01 	bl	800a94c <SelectAction>
      			  Pos.Car = west;
 800bd4a:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd4c:	2203      	movs	r2, #3
 800bd4e:	70da      	strb	r2, [r3, #3]
      		      Pos.X-=1;
 800bd50:	4b03      	ldr	r3, [pc, #12]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	4b01      	ldr	r3, [pc, #4]	; (800bd60 <LeftHandJudge+0x2c4>)
 800bd5a:	701a      	strb	r2, [r3, #0]
    		  break;
 800bd5c:	e08a      	b.n	800be74 <LeftHandJudge+0x3d8>
 800bd5e:	bf00      	nop
 800bd60:	20000000 	.word	0x20000000
 800bd64:	200004b8 	.word	0x200004b8
    			  Pos.Dir = back;
 800bd68:	4b44      	ldr	r3, [pc, #272]	; (800be7c <LeftHandJudge+0x3e0>)
 800bd6a:	2203      	movs	r2, #3
 800bd6c:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fe fdeb 	bl	800a94c <SelectAction>
      			  Pos.Car = north;
 800bd76:	4b41      	ldr	r3, [pc, #260]	; (800be7c <LeftHandJudge+0x3e0>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	70da      	strb	r2, [r3, #3]
      			  Pos.Y+=1;
 800bd7c:	4b3f      	ldr	r3, [pc, #252]	; (800be7c <LeftHandJudge+0x3e0>)
 800bd7e:	785b      	ldrb	r3, [r3, #1]
 800bd80:	3301      	adds	r3, #1
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	4b3d      	ldr	r3, [pc, #244]	; (800be7c <LeftHandJudge+0x3e0>)
 800bd86:	705a      	strb	r2, [r3, #1]
    		  break;
 800bd88:	e074      	b.n	800be74 <LeftHandJudge+0x3d8>
    	  case west:
    		  if(Wall[Pos.X][Pos.Y].south == NOWALL){
 800bd8a:	4b3c      	ldr	r3, [pc, #240]	; (800be7c <LeftHandJudge+0x3e0>)
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	4b3a      	ldr	r3, [pc, #232]	; (800be7c <LeftHandJudge+0x3e0>)
 800bd92:	785b      	ldrb	r3, [r3, #1]
 800bd94:	4619      	mov	r1, r3
 800bd96:	4a3a      	ldr	r2, [pc, #232]	; (800be80 <LeftHandJudge+0x3e4>)
 800bd98:	0103      	lsls	r3, r0, #4
 800bd9a:	440b      	add	r3, r1
 800bd9c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bda0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d110      	bne.n	800bdcc <LeftHandJudge+0x330>
    			  Pos.Dir = left;
 800bdaa:	4b34      	ldr	r3, [pc, #208]	; (800be7c <LeftHandJudge+0x3e0>)
 800bdac:	2202      	movs	r2, #2
 800bdae:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fe fdca 	bl	800a94c <SelectAction>
    	       	  Pos.Car = south;
 800bdb8:	4b30      	ldr	r3, [pc, #192]	; (800be7c <LeftHandJudge+0x3e0>)
 800bdba:	2202      	movs	r2, #2
 800bdbc:	70da      	strb	r2, [r3, #3]
    	       	  Pos.Y -= 1;
 800bdbe:	4b2f      	ldr	r3, [pc, #188]	; (800be7c <LeftHandJudge+0x3e0>)
 800bdc0:	785b      	ldrb	r3, [r3, #1]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	4b2d      	ldr	r3, [pc, #180]	; (800be7c <LeftHandJudge+0x3e0>)
 800bdc8:	705a      	strb	r2, [r3, #1]
    			  SelectAction(turn_mode);
    	          Pos.Car = east;
    	          Pos.X+=1;
    		  }

    		  break;
 800bdca:	e053      	b.n	800be74 <LeftHandJudge+0x3d8>
    		  else if(Wall[Pos.X][Pos.Y].west == NOWALL){
 800bdcc:	4b2b      	ldr	r3, [pc, #172]	; (800be7c <LeftHandJudge+0x3e0>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	4b2a      	ldr	r3, [pc, #168]	; (800be7c <LeftHandJudge+0x3e0>)
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4a29      	ldr	r2, [pc, #164]	; (800be80 <LeftHandJudge+0x3e4>)
 800bdda:	0103      	lsls	r3, r0, #4
 800bddc:	440b      	add	r3, r1
 800bdde:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bde2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d110      	bne.n	800be0e <LeftHandJudge+0x372>
    			  Pos.Dir = front;
 800bdec:	4b23      	ldr	r3, [pc, #140]	; (800be7c <LeftHandJudge+0x3e0>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe fda9 	bl	800a94c <SelectAction>
    			  Pos.Car = west;
 800bdfa:	4b20      	ldr	r3, [pc, #128]	; (800be7c <LeftHandJudge+0x3e0>)
 800bdfc:	2203      	movs	r2, #3
 800bdfe:	70da      	strb	r2, [r3, #3]
    		      Pos.X-=1;
 800be00:	4b1e      	ldr	r3, [pc, #120]	; (800be7c <LeftHandJudge+0x3e0>)
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	3b01      	subs	r3, #1
 800be06:	b2da      	uxtb	r2, r3
 800be08:	4b1c      	ldr	r3, [pc, #112]	; (800be7c <LeftHandJudge+0x3e0>)
 800be0a:	701a      	strb	r2, [r3, #0]
    		  break;
 800be0c:	e032      	b.n	800be74 <LeftHandJudge+0x3d8>
    		  else if(Wall[Pos.X][Pos.Y].north == NOWALL){
 800be0e:	4b1b      	ldr	r3, [pc, #108]	; (800be7c <LeftHandJudge+0x3e0>)
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	4618      	mov	r0, r3
 800be14:	4b19      	ldr	r3, [pc, #100]	; (800be7c <LeftHandJudge+0x3e0>)
 800be16:	785b      	ldrb	r3, [r3, #1]
 800be18:	4619      	mov	r1, r3
 800be1a:	4a19      	ldr	r2, [pc, #100]	; (800be80 <LeftHandJudge+0x3e4>)
 800be1c:	0103      	lsls	r3, r0, #4
 800be1e:	440b      	add	r3, r1
 800be20:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800be24:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d110      	bne.n	800be50 <LeftHandJudge+0x3b4>
    			  Pos.Dir = right;
 800be2e:	4b13      	ldr	r3, [pc, #76]	; (800be7c <LeftHandJudge+0x3e0>)
 800be30:	2201      	movs	r2, #1
 800be32:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fd88 	bl	800a94c <SelectAction>
      			  Pos.Car = north;
 800be3c:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <LeftHandJudge+0x3e0>)
 800be3e:	2200      	movs	r2, #0
 800be40:	70da      	strb	r2, [r3, #3]
      			  Pos.Y+=1;
 800be42:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <LeftHandJudge+0x3e0>)
 800be44:	785b      	ldrb	r3, [r3, #1]
 800be46:	3301      	adds	r3, #1
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	4b0c      	ldr	r3, [pc, #48]	; (800be7c <LeftHandJudge+0x3e0>)
 800be4c:	705a      	strb	r2, [r3, #1]
    		  break;
 800be4e:	e011      	b.n	800be74 <LeftHandJudge+0x3d8>
    			  Pos.Dir = back;
 800be50:	4b0a      	ldr	r3, [pc, #40]	; (800be7c <LeftHandJudge+0x3e0>)
 800be52:	2203      	movs	r2, #3
 800be54:	709a      	strb	r2, [r3, #2]
    			  SelectAction(turn_mode);
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fe fd77 	bl	800a94c <SelectAction>
    	          Pos.Car = east;
 800be5e:	4b07      	ldr	r3, [pc, #28]	; (800be7c <LeftHandJudge+0x3e0>)
 800be60:	2201      	movs	r2, #1
 800be62:	70da      	strb	r2, [r3, #3]
    	          Pos.X+=1;
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <LeftHandJudge+0x3e0>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	3301      	adds	r3, #1
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	4b03      	ldr	r3, [pc, #12]	; (800be7c <LeftHandJudge+0x3e0>)
 800be6e:	701a      	strb	r2, [r3, #0]
    		  break;
 800be70:	e000      	b.n	800be74 <LeftHandJudge+0x3d8>
    	  default:
    		  break;
 800be72:	bf00      	nop
    	  }//swtich end
}
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20000000 	.word	0x20000000
 800be80:	200004b8 	.word	0x200004b8

0800be84 <InitExplore>:
#include "Flash.h"
#include "Interrupt.h"
#include "Debug.h"

void InitExplore()
{
 800be84:	b580      	push	{r7, lr}
 800be86:	af00      	add	r7, sp, #0
	PIDReset(A_VELO_PID);

	HAL_Delay(500);
#else
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800be88:	f002 fb24 	bl	800e4d4 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800be8c:	f002 fa28 	bl	800e2e0 <EncoderStart>
	EmitterON();
 800be90:	f002 fa46 	bl	800e320 <EmitterON>
	ADCStart();
 800be94:	f002 f8a4 	bl	800dfe0 <ADCStart>
	IMU_init();
 800be98:	f002 f9f8 	bl	800e28c <IMU_init>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800be9c:	2100      	movs	r1, #0
 800be9e:	2004      	movs	r0, #4
 800bea0:	f000 fb2a 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800bea4:	2100      	movs	r1, #0
 800bea6:	2005      	movs	r0, #5
 800bea8:	f000 fb26 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800beac:	2100      	movs	r1, #0
 800beae:	2002      	movs	r0, #2
 800beb0:	f000 fb22 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800beb4:	2100      	movs	r1, #0
 800beb6:	2003      	movs	r0, #3
 800beb8:	f000 fb1e 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bebc:	2100      	movs	r1, #0
 800bebe:	2001      	movs	r0, #1
 800bec0:	f000 fb1a 	bl	800c4f8 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800bec4:	2100      	movs	r1, #0
 800bec6:	2000      	movs	r0, #0
 800bec8:	f000 fb16 	bl	800c4f8 <PIDChangeFlag>


	Load_Gain();
 800becc:	f7fe ff18 	bl	800ad00 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bed0:	f247 512f 	movw	r1, #29999	; 0x752f
 800bed4:	4826      	ldr	r0, [pc, #152]	; (800bf70 <InitExplore+0xec>)
 800bed6:	f7fe fd77 	bl	800a9c8 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800beda:	f247 512f 	movw	r1, #29999	; 0x752f
 800bede:	4825      	ldr	r0, [pc, #148]	; (800bf74 <InitExplore+0xf0>)
 800bee0:	f7fe fd72 	bl	800a9c8 <InitPulse>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800bee4:	4824      	ldr	r0, [pc, #144]	; (800bf78 <InitExplore+0xf4>)
 800bee6:	f005 fe42 	bl	8011b6e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800beea:	4824      	ldr	r0, [pc, #144]	; (800bf7c <InitExplore+0xf8>)
 800beec:	f005 fe3f 	bl	8011b6e <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800bef0:	4b23      	ldr	r3, [pc, #140]	; (800bf80 <InitExplore+0xfc>)
 800bef2:	f04f 0200 	mov.w	r2, #0
 800bef6:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800bef8:	4b22      	ldr	r3, [pc, #136]	; (800bf84 <InitExplore+0x100>)
 800befa:	f04f 0200 	mov.w	r2, #0
 800befe:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800bf00:	4b21      	ldr	r3, [pc, #132]	; (800bf88 <InitExplore+0x104>)
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800bf08:	4b20      	ldr	r3, [pc, #128]	; (800bf8c <InitExplore+0x108>)
 800bf0a:	f04f 0200 	mov.w	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800bf10:	4b1f      	ldr	r3, [pc, #124]	; (800bf90 <InitExplore+0x10c>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800bf16:	4b1e      	ldr	r3, [pc, #120]	; (800bf90 <InitExplore+0x10c>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800bf1c:	4b1c      	ldr	r3, [pc, #112]	; (800bf90 <InitExplore+0x10c>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	//IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。

	TargetPhoto[SL] = Photo[SL];
 800bf22:	4b1c      	ldr	r3, [pc, #112]	; (800bf94 <InitExplore+0x110>)
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	4a1c      	ldr	r2, [pc, #112]	; (800bf98 <InitExplore+0x114>)
 800bf28:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800bf2a:	4b1a      	ldr	r3, [pc, #104]	; (800bf94 <InitExplore+0x110>)
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	4a1a      	ldr	r2, [pc, #104]	; (800bf98 <InitExplore+0x114>)
 800bf30:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bf32:	4b19      	ldr	r3, [pc, #100]	; (800bf98 <InitExplore+0x114>)
 800bf34:	ed93 7a02 	vldr	s14, [r3, #8]
 800bf38:	4b17      	ldr	r3, [pc, #92]	; (800bf98 <InitExplore+0x114>)
 800bf3a:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf42:	4b16      	ldr	r3, [pc, #88]	; (800bf9c <InitExplore+0x118>)
 800bf44:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800bf48:	2004      	movs	r0, #4
 800bf4a:	f000 faeb 	bl	800c524 <PIDReset>
	PIDReset(R_VELO_PID);
 800bf4e:	2005      	movs	r0, #5
 800bf50:	f000 fae8 	bl	800c524 <PIDReset>

	PIDReset(A_VELO_PID);
 800bf54:	2000      	movs	r0, #0
 800bf56:	f000 fae5 	bl	800c524 <PIDReset>
	PIDReset(L_WALL_PID);
 800bf5a:	2002      	movs	r0, #2
 800bf5c:	f000 fae2 	bl	800c524 <PIDReset>
	PIDReset(R_WALL_PID);
 800bf60:	2003      	movs	r0, #3
 800bf62:	f000 fadf 	bl	800c524 <PIDReset>
	PIDReset(D_WALL_PID);
 800bf66:	2001      	movs	r0, #1
 800bf68:	f000 fadc 	bl	800c524 <PIDReset>

#endif
}
 800bf6c:	bf00      	nop
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	40000424 	.word	0x40000424
 800bf74:	40000824 	.word	0x40000824
 800bf78:	20000940 	.word	0x20000940
 800bf7c:	200006b8 	.word	0x200006b8
 800bf80:	200003e8 	.word	0x200003e8
 800bf84:	20000400 	.word	0x20000400
 800bf88:	2000042c 	.word	0x2000042c
 800bf8c:	20000428 	.word	0x20000428
 800bf90:	20000434 	.word	0x20000434
 800bf94:	20000458 	.word	0x20000458
 800bf98:	20000488 	.word	0x20000488
 800bf9c:	20000420 	.word	0x20000420

0800bfa0 <Debug>:
void Debug()
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b09e      	sub	sp, #120	; 0x78
 800bfa4:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800bfa6:	f7ff ff6d 	bl	800be84 <InitExplore>
	InitPosition();
 800bfaa:	f7fc ff25 	bl	8008df8 <InitPosition>
	wall_init();
 800bfae:	f7ff fbe9 	bl	800b784 <wall_init>

	TotalPulse[RIGHT] = 0;
 800bfb2:	4b2c      	ldr	r3, [pc, #176]	; (800c064 <Debug+0xc4>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bfb8:	4b2a      	ldr	r3, [pc, #168]	; (800c064 <Debug+0xc4>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800bfbe:	4b29      	ldr	r3, [pc, #164]	; (800c064 <Debug+0xc4>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	609a      	str	r2, [r3, #8]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	//x,y,dir,sbrl,現在→ x2,y2,dir2,sbrl2更新
//void ChangeNowStatus()

	PIDChangeFlag(L_VELO_PID, 1);
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	2004      	movs	r0, #4
 800bfc8:	f000 fa96 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bfcc:	2101      	movs	r1, #1
 800bfce:	2005      	movs	r0, #5
 800bfd0:	f000 fa92 	bl	800c4f8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800bfd4:	4b23      	ldr	r3, [pc, #140]	; (800c064 <Debug+0xc4>)
 800bfd6:	6899      	ldr	r1, [r3, #8]
 800bfd8:	4b22      	ldr	r3, [pc, #136]	; (800c064 <Debug+0xc4>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	4b21      	ldr	r3, [pc, #132]	; (800c064 <Debug+0xc4>)
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	4821      	ldr	r0, [pc, #132]	; (800c068 <Debug+0xc8>)
 800bfe2:	f008 fd4b 	bl	8014a7c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	2001      	movs	r0, #1
 800bfea:	f000 fa85 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bfee:	2100      	movs	r1, #0
 800bff0:	2002      	movs	r0, #2
 800bff2:	f000 fa81 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bff6:	2100      	movs	r1, #0
 800bff8:	2003      	movs	r0, #3
 800bffa:	f000 fa7d 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800bffe:	2100      	movs	r1, #0
 800c000:	2000      	movs	r0, #0
 800c002:	f000 fa79 	bl	800c4f8 <PIDChangeFlag>
	ExploreVelocity=0;
 800c006:	4b19      	ldr	r3, [pc, #100]	; (800c06c <Debug+0xcc>)
 800c008:	f04f 0200 	mov.w	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800c00e:	2003      	movs	r0, #3
 800c010:	f002 f9a2 	bl	800e358 <ChangeLED>
//	{
//		printf("zg:%f, double:%lf\r\n",(float)zg, AngularV);//, double:%lf\r\n");
//	}

	//直進テスト
	ExploreVelocity=90;
 800c014:	4b15      	ldr	r3, [pc, #84]	; (800c06c <Debug+0xcc>)
 800c016:	4a16      	ldr	r2, [pc, #88]	; (800c070 <Debug+0xd0>)
 800c018:	601a      	str	r2, [r3, #0]
	t = 0;
 800c01a:	4b16      	ldr	r3, [pc, #88]	; (800c074 <Debug+0xd4>)
 800c01c:	2200      	movs	r2, #0
 800c01e:	601a      	str	r2, [r3, #0]
	timer1=0;
 800c020:	4b15      	ldr	r3, [pc, #84]	; (800c078 <Debug+0xd8>)
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
	timer8=0;
 800c026:	4b15      	ldr	r3, [pc, #84]	; (800c07c <Debug+0xdc>)
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]

	TargetVelocity[BODY] = ExploreVelocity;
 800c02c:	4b0f      	ldr	r3, [pc, #60]	; (800c06c <Debug+0xcc>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a13      	ldr	r2, [pc, #76]	; (800c080 <Debug+0xe0>)
 800c032:	6093      	str	r3, [r2, #8]
	TIM1 ->CNT = 0;
 800c034:	4b13      	ldr	r3, [pc, #76]	; (800c084 <Debug+0xe4>)
 800c036:	2200      	movs	r2, #0
 800c038:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 ->CNT = 0;//これ大事かも
 800c03a:	4b13      	ldr	r3, [pc, #76]	; (800c088 <Debug+0xe8>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	625a      	str	r2, [r3, #36]	; 0x24
	t = 1;
 800c040:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <Debug+0xd4>)
 800c042:	2201      	movs	r2, #1
 800c044:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(t == 0)
 800c046:	4b0b      	ldr	r3, [pc, #44]	; (800c074 <Debug+0xd4>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1fb      	bne.n	800c046 <Debug+0xa6>
		{
			printf("1: %d, 8 :%d, spi : %d\r\n",timer1, timer8, spi_dma_data);
 800c04e:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <Debug+0xd8>)
 800c050:	6819      	ldr	r1, [r3, #0]
 800c052:	4b0a      	ldr	r3, [pc, #40]	; (800c07c <Debug+0xdc>)
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	4b0d      	ldr	r3, [pc, #52]	; (800c08c <Debug+0xec>)
 800c058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c05c:	480c      	ldr	r0, [pc, #48]	; (800c090 <Debug+0xf0>)
 800c05e:	f008 fd0d 	bl	8014a7c <iprintf>
		if(t == 0)
 800c062:	e7f0      	b.n	800c046 <Debug+0xa6>
 800c064:	20000434 	.word	0x20000434
 800c068:	080190b0 	.word	0x080190b0
 800c06c:	20000468 	.word	0x20000468
 800c070:	42b40000 	.word	0x42b40000
 800c074:	200003dc 	.word	0x200003dc
 800c078:	200003e4 	.word	0x200003e4
 800c07c:	200003e0 	.word	0x200003e0
 800c080:	200003e8 	.word	0x200003e8
 800c084:	40010000 	.word	0x40010000
 800c088:	40010400 	.word	0x40010400
 800c08c:	20000a2c 	.word	0x20000a2c
 800c090:	080190e4 	.word	0x080190e4

0800c094 <ParameterSetting>:
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
void ParameterSetting()
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
	Load_Gain();
 800c098:	f7fe fe32 	bl	800ad00 <Load_Gain>
	Change_Gain();
 800c09c:	f7fe feec 	bl	800ae78 <Change_Gain>

}
 800c0a0:	bf00      	nop
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <GainTestLWall>:


void GainTestLWall()
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	af00      	add	r7, sp, #0
	InitExplore();
 800c0a8:	f7ff feec 	bl	800be84 <InitExplore>
	InitPosition();
 800c0ac:	f7fc fea4 	bl	8008df8 <InitPosition>
	wall_init();
 800c0b0:	f7ff fb68 	bl	800b784 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c0b4:	4b12      	ldr	r3, [pc, #72]	; (800c100 <GainTestLWall+0x5c>)
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c0ba:	4b11      	ldr	r3, [pc, #68]	; (800c100 <GainTestLWall+0x5c>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c0c0:	4b0f      	ldr	r3, [pc, #60]	; (800c100 <GainTestLWall+0x5c>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	2004      	movs	r0, #4
 800c0ca:	f000 fa15 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	2005      	movs	r0, #5
 800c0d2:	f000 fa11 	bl	800c4f8 <PIDChangeFlag>
	//PIDChangeFlagStraight(L_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	2001      	movs	r0, #1
 800c0da:	f000 fa0d 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 1);
 800c0de:	2101      	movs	r1, #1
 800c0e0:	2002      	movs	r0, #2
 800c0e2:	f000 fa09 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	2003      	movs	r0, #3
 800c0ea:	f000 fa05 	bl	800c4f8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c0ee:	4b05      	ldr	r3, [pc, #20]	; (800c104 <GainTestLWall+0x60>)
 800c0f0:	f04f 0200 	mov.w	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
	ChangeLED(4);
 800c0f6:	2004      	movs	r0, #4
 800c0f8:	f002 f92e 	bl	800e358 <ChangeLED>
	while(1)
 800c0fc:	e7fe      	b.n	800c0fc <GainTestLWall+0x58>
 800c0fe:	bf00      	nop
 800c100:	20000434 	.word	0x20000434
 800c104:	20000468 	.word	0x20000468

0800c108 <GainTestRWall>:
	{

	}
}
void GainTestRWall()
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
	InitExplore();
 800c10c:	f7ff feba 	bl	800be84 <InitExplore>
	InitPosition();
 800c110:	f7fc fe72 	bl	8008df8 <InitPosition>
	wall_init();
 800c114:	f7ff fb36 	bl	800b784 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c118:	4b12      	ldr	r3, [pc, #72]	; (800c164 <GainTestRWall+0x5c>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c11e:	4b11      	ldr	r3, [pc, #68]	; (800c164 <GainTestRWall+0x5c>)
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c124:	4b0f      	ldr	r3, [pc, #60]	; (800c164 <GainTestRWall+0x5c>)
 800c126:	2200      	movs	r2, #0
 800c128:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c12a:	2101      	movs	r1, #1
 800c12c:	2004      	movs	r0, #4
 800c12e:	f000 f9e3 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c132:	2101      	movs	r1, #1
 800c134:	2005      	movs	r0, #5
 800c136:	f000 f9df 	bl	800c4f8 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c13a:	2100      	movs	r1, #0
 800c13c:	2001      	movs	r0, #1
 800c13e:	f000 f9db 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c142:	2100      	movs	r1, #0
 800c144:	2002      	movs	r0, #2
 800c146:	f000 f9d7 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800c14a:	2101      	movs	r1, #1
 800c14c:	2003      	movs	r0, #3
 800c14e:	f000 f9d3 	bl	800c4f8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <GainTestRWall+0x60>)
 800c154:	f04f 0200 	mov.w	r2, #0
 800c158:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800c15a:	2001      	movs	r0, #1
 800c15c:	f002 f8fc 	bl	800e358 <ChangeLED>
	while(1)
 800c160:	e7fe      	b.n	800c160 <GainTestRWall+0x58>
 800c162:	bf00      	nop
 800c164:	20000434 	.word	0x20000434
 800c168:	20000468 	.word	0x20000468

0800c16c <GainTestDWall>:
	{

	}
}
void GainTestDWall()
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	af00      	add	r7, sp, #0
	InitExplore();
 800c170:	f7ff fe88 	bl	800be84 <InitExplore>
	InitPosition();
 800c174:	f7fc fe40 	bl	8008df8 <InitPosition>
	wall_init();
 800c178:	f7ff fb04 	bl	800b784 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c17c:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <GainTestDWall+0x5c>)
 800c17e:	2200      	movs	r2, #0
 800c180:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c182:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <GainTestDWall+0x5c>)
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c188:	4b0f      	ldr	r3, [pc, #60]	; (800c1c8 <GainTestDWall+0x5c>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c18e:	2101      	movs	r1, #1
 800c190:	2004      	movs	r0, #4
 800c192:	f000 f9b1 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c196:	2101      	movs	r1, #1
 800c198:	2005      	movs	r0, #5
 800c19a:	f000 f9ad 	bl	800c4f8 <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800c19e:	2101      	movs	r1, #1
 800c1a0:	2001      	movs	r0, #1
 800c1a2:	f000 f9a9 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	2002      	movs	r0, #2
 800c1aa:	f000 f9a5 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	2003      	movs	r0, #3
 800c1b2:	f000 f9a1 	bl	800c4f8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c1b6:	4b05      	ldr	r3, [pc, #20]	; (800c1cc <GainTestDWall+0x60>)
 800c1b8:	f04f 0200 	mov.w	r2, #0
 800c1bc:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800c1be:	2002      	movs	r0, #2
 800c1c0:	f002 f8ca 	bl	800e358 <ChangeLED>
	while(1)
 800c1c4:	e7fe      	b.n	800c1c4 <GainTestDWall+0x58>
 800c1c6:	bf00      	nop
 800c1c8:	20000434 	.word	0x20000434
 800c1cc:	20000468 	.word	0x20000468

0800c1d0 <GainTestAVelo>:

	}
}

void GainTestAVelo()
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	af00      	add	r7, sp, #0
	InitExplore();
 800c1d4:	f7ff fe56 	bl	800be84 <InitExplore>
	InitPosition();
 800c1d8:	f7fc fe0e 	bl	8008df8 <InitPosition>
	wall_init();
 800c1dc:	f7ff fad2 	bl	800b784 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c1e0:	4b14      	ldr	r3, [pc, #80]	; (800c234 <GainTestAVelo+0x64>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c1e6:	4b13      	ldr	r3, [pc, #76]	; (800c234 <GainTestAVelo+0x64>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c1ec:	4b11      	ldr	r3, [pc, #68]	; (800c234 <GainTestAVelo+0x64>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c1f2:	2101      	movs	r1, #1
 800c1f4:	2004      	movs	r0, #4
 800c1f6:	f000 f97f 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c1fa:	2101      	movs	r1, #1
 800c1fc:	2005      	movs	r0, #5
 800c1fe:	f000 f97b 	bl	800c4f8 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800c202:	2101      	movs	r1, #1
 800c204:	2000      	movs	r0, #0
 800c206:	f000 f977 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c20a:	2100      	movs	r1, #0
 800c20c:	2001      	movs	r0, #1
 800c20e:	f000 f973 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c212:	2100      	movs	r1, #0
 800c214:	2002      	movs	r0, #2
 800c216:	f000 f96f 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c21a:	2100      	movs	r1, #0
 800c21c:	2003      	movs	r0, #3
 800c21e:	f000 f96b 	bl	800c4f8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c222:	4b05      	ldr	r3, [pc, #20]	; (800c238 <GainTestAVelo+0x68>)
 800c224:	f04f 0200 	mov.w	r2, #0
 800c228:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800c22a:	2005      	movs	r0, #5
 800c22c:	f002 f894 	bl	800e358 <ChangeLED>
	while(1)
 800c230:	e7fe      	b.n	800c230 <GainTestAVelo+0x60>
 800c232:	bf00      	nop
 800c234:	20000434 	.word	0x20000434
 800c238:	20000468 	.word	0x20000468

0800c23c <WritingFree>:
	{

	}
}
void WritingFree()
{
 800c23c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c240:	b086      	sub	sp, #24
 800c242:	af06      	add	r7, sp, #24

	InitExplore();
 800c244:	f7ff fe1e 	bl	800be84 <InitExplore>

	printf("3\r\n");
 800c248:	4838      	ldr	r0, [pc, #224]	; (800c32c <WritingFree+0xf0>)
 800c24a:	f008 fc8b 	bl	8014b64 <puts>
//	printf("オフセット:%f, double角速度:%f, double角度:%f, float角速度:%f, float角度:%f",zg_offset,ImuAngV, ImuAngle, AngularV, Angle);
//}

	//迷路とステータスの準備
	//方角と座標の初期化。
	InitPosition();
 800c24e:	f7fc fdd3 	bl	8008df8 <InitPosition>
//	uint8_t x, y;
//	Pos.Car = north;
//	x=0,y=0;
	wall_init();
 800c252:	f7ff fa97 	bl	800b784 <wall_init>
	printf("4\r\n");
 800c256:	4836      	ldr	r0, [pc, #216]	; (800c330 <WritingFree+0xf4>)
 800c258:	f008 fc84 	bl	8014b64 <puts>
	//時間用の処理の初期化。
	//int timer = 0;
	//エンコーダ移動量の初期化。
	TotalPulse[RIGHT] = 0;
 800c25c:	4b35      	ldr	r3, [pc, #212]	; (800c334 <WritingFree+0xf8>)
 800c25e:	2200      	movs	r2, #0
 800c260:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c262:	4b34      	ldr	r3, [pc, #208]	; (800c334 <WritingFree+0xf8>)
 800c264:	2200      	movs	r2, #0
 800c266:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c268:	4b32      	ldr	r3, [pc, #200]	; (800c334 <WritingFree+0xf8>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	609a      	str	r2, [r3, #8]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	//x,y,dir,sbrl,現在→ x2,y2,dir2,sbrl2更新
//void ChangeNowStatus()

	PIDChangeFlag(L_VELO_PID, 1);
 800c26e:	2101      	movs	r1, #1
 800c270:	2004      	movs	r0, #4
 800c272:	f000 f941 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c276:	2101      	movs	r1, #1
 800c278:	2005      	movs	r0, #5
 800c27a:	f000 f93d 	bl	800c4f8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c27e:	4b2d      	ldr	r3, [pc, #180]	; (800c334 <WritingFree+0xf8>)
 800c280:	6899      	ldr	r1, [r3, #8]
 800c282:	4b2c      	ldr	r3, [pc, #176]	; (800c334 <WritingFree+0xf8>)
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	4b2b      	ldr	r3, [pc, #172]	; (800c334 <WritingFree+0xf8>)
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	482b      	ldr	r0, [pc, #172]	; (800c338 <WritingFree+0xfc>)
 800c28c:	f008 fbf6 	bl	8014a7c <iprintf>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c290:	2100      	movs	r1, #0
 800c292:	2001      	movs	r0, #1
 800c294:	f000 f930 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c298:	2100      	movs	r1, #0
 800c29a:	2002      	movs	r0, #2
 800c29c:	f000 f92c 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	2003      	movs	r0, #3
 800c2a4:	f000 f928 	bl	800c4f8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c2a8:	4b24      	ldr	r3, [pc, #144]	; (800c33c <WritingFree+0x100>)
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800c2b0:	2007      	movs	r0, #7
 800c2b2:	f002 f851 	bl	800e358 <ChangeLED>

	}
#else
	while(1)
	{
		printf("%f, %f, %f, %f\r\n", Photo[FL],Photo[FR],Photo[FL]+Photo[FR],(Photo[FL]+Photo[FR])/2);//壁センサ前のチェック。
 800c2b6:	4b22      	ldr	r3, [pc, #136]	; (800c340 <WritingFree+0x104>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fc f87c 	bl	80083b8 <__aeabi_f2d>
 800c2c0:	4682      	mov	sl, r0
 800c2c2:	468b      	mov	fp, r1
 800c2c4:	4b1e      	ldr	r3, [pc, #120]	; (800c340 <WritingFree+0x104>)
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fc f875 	bl	80083b8 <__aeabi_f2d>
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4b1b      	ldr	r3, [pc, #108]	; (800c340 <WritingFree+0x104>)
 800c2d4:	ed93 7a00 	vldr	s14, [r3]
 800c2d8:	4b19      	ldr	r3, [pc, #100]	; (800c340 <WritingFree+0x104>)
 800c2da:	edd3 7a03 	vldr	s15, [r3, #12]
 800c2de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2e2:	ee17 0a90 	vmov	r0, s15
 800c2e6:	f7fc f867 	bl	80083b8 <__aeabi_f2d>
 800c2ea:	4680      	mov	r8, r0
 800c2ec:	4689      	mov	r9, r1
 800c2ee:	4b14      	ldr	r3, [pc, #80]	; (800c340 <WritingFree+0x104>)
 800c2f0:	ed93 7a00 	vldr	s14, [r3]
 800c2f4:	4b12      	ldr	r3, [pc, #72]	; (800c340 <WritingFree+0x104>)
 800c2f6:	edd3 7a03 	vldr	s15, [r3, #12]
 800c2fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c302:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c306:	ee16 0a90 	vmov	r0, s13
 800c30a:	f7fc f855 	bl	80083b8 <__aeabi_f2d>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c316:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c31a:	e9cd 4500 	strd	r4, r5, [sp]
 800c31e:	4652      	mov	r2, sl
 800c320:	465b      	mov	r3, fp
 800c322:	4808      	ldr	r0, [pc, #32]	; (800c344 <WritingFree+0x108>)
 800c324:	f008 fbaa 	bl	8014a7c <iprintf>
 800c328:	e7c5      	b.n	800c2b6 <WritingFree+0x7a>
 800c32a:	bf00      	nop
 800c32c:	08019100 	.word	0x08019100
 800c330:	08019104 	.word	0x08019104
 800c334:	20000434 	.word	0x20000434
 800c338:	080190b0 	.word	0x080190b0
 800c33c:	20000468 	.word	0x20000468
 800c340:	20000458 	.word	0x20000458
 800c344:	08019108 	.word	0x08019108

0800c348 <Explore>:


}

void Explore()
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す
	InitExplore();
 800c34e:	f7ff fd99 	bl	800be84 <InitExplore>

	printf("3\r\n");
 800c352:	4848      	ldr	r0, [pc, #288]	; (800c474 <Explore+0x12c>)
 800c354:	f008 fc06 	bl	8014b64 <puts>
//	printf("オフセット:%f, double角速度:%f, double角度:%f, float角速度:%f, float角度:%f",zg_offset,ImuAngV, ImuAngle, AngularV, Angle);
//}

	//迷路とステータスの準備
	//方角と座標の初期化。
	InitPosition();
 800c358:	f7fc fd4e 	bl	8008df8 <InitPosition>
//	uint8_t x, y;
//	Pos.Car = north;
//	x=0,y=0;
	wall_init();
 800c35c:	f7ff fa12 	bl	800b784 <wall_init>
	printf("4\r\n");
 800c360:	4845      	ldr	r0, [pc, #276]	; (800c478 <Explore+0x130>)
 800c362:	f008 fbff 	bl	8014b64 <puts>
	//時間用の処理の初期化。
	//int timer = 0;
	//エンコーダ移動量の初期化。
	TotalPulse[RIGHT] = 0;
 800c366:	4b45      	ldr	r3, [pc, #276]	; (800c47c <Explore+0x134>)
 800c368:	2200      	movs	r2, #0
 800c36a:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c36c:	4b43      	ldr	r3, [pc, #268]	; (800c47c <Explore+0x134>)
 800c36e:	2200      	movs	r2, #0
 800c370:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c372:	4b42      	ldr	r3, [pc, #264]	; (800c47c <Explore+0x134>)
 800c374:	2200      	movs	r2, #0
 800c376:	609a      	str	r2, [r3, #8]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	//x,y,dir,sbrl,現在→ x2,y2,dir2,sbrl2更新
//void ChangeNowStatus()

	PIDChangeFlag(L_VELO_PID, 1);
 800c378:	2101      	movs	r1, #1
 800c37a:	2004      	movs	r0, #4
 800c37c:	f000 f8bc 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c380:	2101      	movs	r1, #1
 800c382:	2005      	movs	r0, #5
 800c384:	f000 f8b8 	bl	800c4f8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c388:	4b3c      	ldr	r3, [pc, #240]	; (800c47c <Explore+0x134>)
 800c38a:	6899      	ldr	r1, [r3, #8]
 800c38c:	4b3b      	ldr	r3, [pc, #236]	; (800c47c <Explore+0x134>)
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	4b3a      	ldr	r3, [pc, #232]	; (800c47c <Explore+0x134>)
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	483a      	ldr	r0, [pc, #232]	; (800c480 <Explore+0x138>)
 800c396:	f008 fb71 	bl	8014a7c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c39a:	2100      	movs	r1, #0
 800c39c:	2001      	movs	r0, #1
 800c39e:	f000 f8ab 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	2002      	movs	r0, #2
 800c3a6:	f000 f8a7 	bl	800c4f8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	2003      	movs	r0, #3
 800c3ae:	f000 f8a3 	bl	800c4f8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=90;
 800c3b2:	4b34      	ldr	r3, [pc, #208]	; (800c484 <Explore+0x13c>)
 800c3b4:	4a34      	ldr	r2, [pc, #208]	; (800c488 <Explore+0x140>)
 800c3b6:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800c3b8:	2002      	movs	r0, #2
 800c3ba:	f001 ffcd 	bl	800e358 <ChangeLED>
//	while(1)
//	{
//
//	}
	int i=0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	607b      	str	r3, [r7, #4]
	Accel(61.5, ExploreVelocity);
 800c3c2:	4b30      	ldr	r3, [pc, #192]	; (800c484 <Explore+0x13c>)
 800c3c4:	edd3 7a00 	vldr	s15, [r3]
 800c3c8:	eef0 0a67 	vmov.f32	s1, s15
 800c3cc:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800c48c <Explore+0x144>
 800c3d0:	f7fd feca 	bl	800a168 <Accel>
	//y++;
	Pos.Y++;
 800c3d4:	4b2e      	ldr	r3, [pc, #184]	; (800c490 <Explore+0x148>)
 800c3d6:	785b      	ldrb	r3, [r3, #1]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	4b2c      	ldr	r3, [pc, #176]	; (800c490 <Explore+0x148>)
 800c3de:	705a      	strb	r2, [r3, #1]
	//uint8_t xlog[10]={0},ylog[10]={0};

	while( (Pos.X != 3) || (Pos.Y != 3))
 800c3e0:	e02d      	b.n	800c43e <Explore+0xf6>
		//移動しきったあとに状態を更新するか、アクションが決まった時点で更新するか。後者にすれば、移動しきる前に、壁の状態を検知して、次のマップ更新ができる。次のアクションを用意しておく。
		//今の座標と進行方向から次の方角がわかり座標を更新できる。
		//現在の方角と座標を更新

		//移動後の座標と方角で新たに壁情報を取得
		i++;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	607b      	str	r3, [r7, #4]
		if(i%2)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <Explore+0xb2>
			ChangeLED(7);
 800c3f2:	2007      	movs	r0, #7
 800c3f4:	f001 ffb0 	bl	800e358 <ChangeLED>
 800c3f8:	e002      	b.n	800c400 <Explore+0xb8>
		else
			ChangeLED(0);
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	f001 ffac 	bl	800e358 <ChangeLED>

		wall_set(Pos.X, Pos.Y,Pos.Car,Photo[SL], Photo[SR], Photo[FL], Photo[FR]);
 800c400:	4b23      	ldr	r3, [pc, #140]	; (800c490 <Explore+0x148>)
 800c402:	7818      	ldrb	r0, [r3, #0]
 800c404:	4b22      	ldr	r3, [pc, #136]	; (800c490 <Explore+0x148>)
 800c406:	7859      	ldrb	r1, [r3, #1]
 800c408:	4b21      	ldr	r3, [pc, #132]	; (800c490 <Explore+0x148>)
 800c40a:	78da      	ldrb	r2, [r3, #3]
 800c40c:	4b21      	ldr	r3, [pc, #132]	; (800c494 <Explore+0x14c>)
 800c40e:	edd3 7a02 	vldr	s15, [r3, #8]
 800c412:	4b20      	ldr	r3, [pc, #128]	; (800c494 <Explore+0x14c>)
 800c414:	ed93 7a01 	vldr	s14, [r3, #4]
 800c418:	4b1e      	ldr	r3, [pc, #120]	; (800c494 <Explore+0x14c>)
 800c41a:	edd3 6a00 	vldr	s13, [r3]
 800c41e:	4b1d      	ldr	r3, [pc, #116]	; (800c494 <Explore+0x14c>)
 800c420:	ed93 6a03 	vldr	s12, [r3, #12]
 800c424:	eef0 1a46 	vmov.f32	s3, s12
 800c428:	eeb0 1a66 	vmov.f32	s2, s13
 800c42c:	eef0 0a47 	vmov.f32	s1, s14
 800c430:	eeb0 0a67 	vmov.f32	s0, s15
 800c434:	f7ff fa2c 	bl	800b890 <wall_set>
		//UpdateWalkMap();

		//ChangeLED(0);
		//方向決定と、座標方角の更新。
		//方向決定を変える。
		LeftHandJudge('S');
 800c438:	2053      	movs	r0, #83	; 0x53
 800c43a:	f7ff fb2f 	bl	800ba9c <LeftHandJudge>
	while( (Pos.X != 3) || (Pos.Y != 3))
 800c43e:	4b14      	ldr	r3, [pc, #80]	; (800c490 <Explore+0x148>)
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	2b03      	cmp	r3, #3
 800c444:	d1cd      	bne.n	800c3e2 <Explore+0x9a>
 800c446:	4b12      	ldr	r3, [pc, #72]	; (800c490 <Explore+0x148>)
 800c448:	785b      	ldrb	r3, [r3, #1]
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d1c9      	bne.n	800c3e2 <Explore+0x9a>
		UpdateMap();
		//進行方向決定 (最短経路導出から決定するか、評価値比較か、単純な左手か)
		my_direction = DetermineDirection();
#endif
	}
	Decel(35, 0);
 800c44e:	eddf 0a12 	vldr	s1, [pc, #72]	; 800c498 <Explore+0x150>
 800c452:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800c49c <Explore+0x154>
 800c456:	f7fd ff2f 	bl	800a2b8 <Decel>
	//flashに保存

	Signal(7);
 800c45a:	2007      	movs	r0, #7
 800c45c:	f000 f9cc 	bl	800c7f8 <Signal>
	while(1)
	{
		for(i=0;i < 10; i++)
 800c460:	2300      	movs	r3, #0
 800c462:	607b      	str	r3, [r7, #4]
 800c464:	e002      	b.n	800c46c <Explore+0x124>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	3301      	adds	r3, #1
 800c46a:	607b      	str	r3, [r7, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b09      	cmp	r3, #9
 800c470:	ddf9      	ble.n	800c466 <Explore+0x11e>
 800c472:	e7f5      	b.n	800c460 <Explore+0x118>
 800c474:	08019100 	.word	0x08019100
 800c478:	08019104 	.word	0x08019104
 800c47c:	20000434 	.word	0x20000434
 800c480:	080190b0 	.word	0x080190b0
 800c484:	20000468 	.word	0x20000468
 800c488:	42b40000 	.word	0x42b40000
 800c48c:	42760000 	.word	0x42760000
 800c490:	20000000 	.word	0x20000000
 800c494:	20000458 	.word	0x20000458
 800c498:	00000000 	.word	0x00000000
 800c49c:	420c0000 	.word	0x420c0000

0800c4a0 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800c4ac:	edc7 0a01 	vstr	s1, [r7, #4]
 800c4b0:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 800c4b4:	4a0f      	ldr	r2, [pc, #60]	; (800c4f4 <PIDSetGain+0x54>)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	212c      	movs	r1, #44	; 0x2c
 800c4ba:	fb01 f303 	mul.w	r3, r1, r3
 800c4be:	4413      	add	r3, r2
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 800c4c4:	4a0b      	ldr	r2, [pc, #44]	; (800c4f4 <PIDSetGain+0x54>)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	212c      	movs	r1, #44	; 0x2c
 800c4ca:	fb01 f303 	mul.w	r3, r1, r3
 800c4ce:	4413      	add	r3, r2
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 800c4d6:	4a07      	ldr	r2, [pc, #28]	; (800c4f4 <PIDSetGain+0x54>)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	212c      	movs	r1, #44	; 0x2c
 800c4dc:	fb01 f303 	mul.w	r3, r1, r3
 800c4e0:	4413      	add	r3, r2
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	601a      	str	r2, [r3, #0]
//
//	p = *Pid[n];
//	p->KP;
}
 800c4e8:	bf00      	nop
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	2000025c 	.word	0x2000025c

0800c4f8 <PIDChangeFlag>:
//{
//	ei[n] = 0;
//	elast[n] = 0;
//}
void PIDChangeFlag(int n, int on_or_off)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 800c502:	4a07      	ldr	r2, [pc, #28]	; (800c520 <PIDChangeFlag+0x28>)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	212c      	movs	r1, #44	; 0x2c
 800c508:	fb01 f303 	mul.w	r3, r1, r3
 800c50c:	4413      	add	r3, r2
 800c50e:	3328      	adds	r3, #40	; 0x28
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	601a      	str	r2, [r3, #0]
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	2000025c 	.word	0x2000025c

0800c524 <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800c52c:	4a1b      	ldr	r2, [pc, #108]	; (800c59c <PIDReset+0x78>)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	212c      	movs	r1, #44	; 0x2c
 800c532:	fb01 f303 	mul.w	r3, r1, r3
 800c536:	4413      	add	r3, r2
 800c538:	330c      	adds	r3, #12
 800c53a:	f04f 0200 	mov.w	r2, #0
 800c53e:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 800c540:	4a16      	ldr	r2, [pc, #88]	; (800c59c <PIDReset+0x78>)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	212c      	movs	r1, #44	; 0x2c
 800c546:	fb01 f303 	mul.w	r3, r1, r3
 800c54a:	4413      	add	r3, r2
 800c54c:	3310      	adds	r3, #16
 800c54e:	f04f 0200 	mov.w	r2, #0
 800c552:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 800c554:	4a11      	ldr	r2, [pc, #68]	; (800c59c <PIDReset+0x78>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	212c      	movs	r1, #44	; 0x2c
 800c55a:	fb01 f303 	mul.w	r3, r1, r3
 800c55e:	4413      	add	r3, r2
 800c560:	3314      	adds	r3, #20
 800c562:	f04f 0200 	mov.w	r2, #0
 800c566:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 800c568:	4a0c      	ldr	r2, [pc, #48]	; (800c59c <PIDReset+0x78>)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	212c      	movs	r1, #44	; 0x2c
 800c56e:	fb01 f303 	mul.w	r3, r1, r3
 800c572:	4413      	add	r3, r2
 800c574:	3318      	adds	r3, #24
 800c576:	f04f 0200 	mov.w	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 800c57c:	4a07      	ldr	r2, [pc, #28]	; (800c59c <PIDReset+0x78>)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	212c      	movs	r1, #44	; 0x2c
 800c582:	fb01 f303 	mul.w	r3, r1, r3
 800c586:	4413      	add	r3, r2
 800c588:	3324      	adds	r3, #36	; 0x24
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]
}
 800c58e:	bf00      	nop
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	2000025c 	.word	0x2000025c

0800c5a0 <PIDControl>:
{
	Pid[n].target = target;
	Pid[n].current = current;
}
int PIDControl(int n, float T, float target, float current)
{
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800c5ac:	edc7 0a01 	vstr	s1, [r7, #4]
 800c5b0:	ed87 1a00 	vstr	s2, [r7]
	//PIDInput( n, target, current);
	Pid[n].target = target;
 800c5b4:	4a8f      	ldr	r2, [pc, #572]	; (800c7f4 <PIDControl+0x254>)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	212c      	movs	r1, #44	; 0x2c
 800c5ba:	fb01 f303 	mul.w	r3, r1, r3
 800c5be:	4413      	add	r3, r2
 800c5c0:	3320      	adds	r3, #32
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	601a      	str	r2, [r3, #0]
	Pid[n].current = current;
 800c5c6:	4a8b      	ldr	r2, [pc, #556]	; (800c7f4 <PIDControl+0x254>)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	212c      	movs	r1, #44	; 0x2c
 800c5cc:	fb01 f303 	mul.w	r3, r1, r3
 800c5d0:	4413      	add	r3, r2
 800c5d2:	331c      	adds	r3, #28
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	601a      	str	r2, [r3, #0]

	Pid[n].e = Pid[n].target - Pid[n].current;
 800c5d8:	4a86      	ldr	r2, [pc, #536]	; (800c7f4 <PIDControl+0x254>)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	212c      	movs	r1, #44	; 0x2c
 800c5de:	fb01 f303 	mul.w	r3, r1, r3
 800c5e2:	4413      	add	r3, r2
 800c5e4:	3320      	adds	r3, #32
 800c5e6:	ed93 7a00 	vldr	s14, [r3]
 800c5ea:	4a82      	ldr	r2, [pc, #520]	; (800c7f4 <PIDControl+0x254>)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	212c      	movs	r1, #44	; 0x2c
 800c5f0:	fb01 f303 	mul.w	r3, r1, r3
 800c5f4:	4413      	add	r3, r2
 800c5f6:	331c      	adds	r3, #28
 800c5f8:	edd3 7a00 	vldr	s15, [r3]
 800c5fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c600:	4a7c      	ldr	r2, [pc, #496]	; (800c7f4 <PIDControl+0x254>)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	212c      	movs	r1, #44	; 0x2c
 800c606:	fb01 f303 	mul.w	r3, r1, r3
 800c60a:	4413      	add	r3, r2
 800c60c:	330c      	adds	r3, #12
 800c60e:	edc3 7a00 	vstr	s15, [r3]
	Pid[n].ei += Pid[n].e * T;
 800c612:	4a78      	ldr	r2, [pc, #480]	; (800c7f4 <PIDControl+0x254>)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	212c      	movs	r1, #44	; 0x2c
 800c618:	fb01 f303 	mul.w	r3, r1, r3
 800c61c:	4413      	add	r3, r2
 800c61e:	3310      	adds	r3, #16
 800c620:	ed93 7a00 	vldr	s14, [r3]
 800c624:	4a73      	ldr	r2, [pc, #460]	; (800c7f4 <PIDControl+0x254>)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	212c      	movs	r1, #44	; 0x2c
 800c62a:	fb01 f303 	mul.w	r3, r1, r3
 800c62e:	4413      	add	r3, r2
 800c630:	330c      	adds	r3, #12
 800c632:	edd3 6a00 	vldr	s13, [r3]
 800c636:	edd7 7a02 	vldr	s15, [r7, #8]
 800c63a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c63e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c642:	4a6c      	ldr	r2, [pc, #432]	; (800c7f4 <PIDControl+0x254>)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	212c      	movs	r1, #44	; 0x2c
 800c648:	fb01 f303 	mul.w	r3, r1, r3
 800c64c:	4413      	add	r3, r2
 800c64e:	3310      	adds	r3, #16
 800c650:	edc3 7a00 	vstr	s15, [r3]
	Pid[n].ed = ( Pid[n].e - Pid[n].elast ) / T;
 800c654:	4a67      	ldr	r2, [pc, #412]	; (800c7f4 <PIDControl+0x254>)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	212c      	movs	r1, #44	; 0x2c
 800c65a:	fb01 f303 	mul.w	r3, r1, r3
 800c65e:	4413      	add	r3, r2
 800c660:	330c      	adds	r3, #12
 800c662:	ed93 7a00 	vldr	s14, [r3]
 800c666:	4a63      	ldr	r2, [pc, #396]	; (800c7f4 <PIDControl+0x254>)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	212c      	movs	r1, #44	; 0x2c
 800c66c:	fb01 f303 	mul.w	r3, r1, r3
 800c670:	4413      	add	r3, r2
 800c672:	3318      	adds	r3, #24
 800c674:	edd3 7a00 	vldr	s15, [r3]
 800c678:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c67c:	ed97 7a02 	vldr	s14, [r7, #8]
 800c680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c684:	4a5b      	ldr	r2, [pc, #364]	; (800c7f4 <PIDControl+0x254>)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	212c      	movs	r1, #44	; 0x2c
 800c68a:	fb01 f303 	mul.w	r3, r1, r3
 800c68e:	4413      	add	r3, r2
 800c690:	3314      	adds	r3, #20
 800c692:	edc3 7a00 	vstr	s15, [r3]
	Pid[n].elast = Pid[n].e;
 800c696:	4a57      	ldr	r2, [pc, #348]	; (800c7f4 <PIDControl+0x254>)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	212c      	movs	r1, #44	; 0x2c
 800c69c:	fb01 f303 	mul.w	r3, r1, r3
 800c6a0:	4413      	add	r3, r2
 800c6a2:	330c      	adds	r3, #12
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	4953      	ldr	r1, [pc, #332]	; (800c7f4 <PIDControl+0x254>)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	202c      	movs	r0, #44	; 0x2c
 800c6ac:	fb00 f303 	mul.w	r3, r0, r3
 800c6b0:	440b      	add	r3, r1
 800c6b2:	3318      	adds	r3, #24
 800c6b4:	601a      	str	r2, [r3, #0]
	Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800c6b6:	4a4f      	ldr	r2, [pc, #316]	; (800c7f4 <PIDControl+0x254>)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	212c      	movs	r1, #44	; 0x2c
 800c6bc:	fb01 f303 	mul.w	r3, r1, r3
 800c6c0:	4413      	add	r3, r2
 800c6c2:	ed93 7a00 	vldr	s14, [r3]
 800c6c6:	4a4b      	ldr	r2, [pc, #300]	; (800c7f4 <PIDControl+0x254>)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	212c      	movs	r1, #44	; 0x2c
 800c6cc:	fb01 f303 	mul.w	r3, r1, r3
 800c6d0:	4413      	add	r3, r2
 800c6d2:	330c      	adds	r3, #12
 800c6d4:	edd3 7a00 	vldr	s15, [r3]
 800c6d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6dc:	4a45      	ldr	r2, [pc, #276]	; (800c7f4 <PIDControl+0x254>)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	212c      	movs	r1, #44	; 0x2c
 800c6e2:	fb01 f303 	mul.w	r3, r1, r3
 800c6e6:	4413      	add	r3, r2
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	edd3 6a00 	vldr	s13, [r3]
 800c6ee:	4a41      	ldr	r2, [pc, #260]	; (800c7f4 <PIDControl+0x254>)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	212c      	movs	r1, #44	; 0x2c
 800c6f4:	fb01 f303 	mul.w	r3, r1, r3
 800c6f8:	4413      	add	r3, r2
 800c6fa:	3310      	adds	r3, #16
 800c6fc:	edd3 7a00 	vldr	s15, [r3]
 800c700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c704:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c708:	4a3a      	ldr	r2, [pc, #232]	; (800c7f4 <PIDControl+0x254>)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	212c      	movs	r1, #44	; 0x2c
 800c70e:	fb01 f303 	mul.w	r3, r1, r3
 800c712:	4413      	add	r3, r2
 800c714:	3308      	adds	r3, #8
 800c716:	edd3 6a00 	vldr	s13, [r3]
 800c71a:	4a36      	ldr	r2, [pc, #216]	; (800c7f4 <PIDControl+0x254>)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	212c      	movs	r1, #44	; 0x2c
 800c720:	fb01 f303 	mul.w	r3, r1, r3
 800c724:	4413      	add	r3, r2
 800c726:	3314      	adds	r3, #20
 800c728:	edd3 7a00 	vldr	s15, [r3]
 800c72c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c730:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c734:	ee17 0a90 	vmov	r0, s15
 800c738:	f7fb fe3e 	bl	80083b8 <__aeabi_f2d>
 800c73c:	4603      	mov	r3, r0
 800c73e:	460c      	mov	r4, r1
 800c740:	ec44 3b10 	vmov	d0, r3, r4
 800c744:	f007 fad4 	bl	8013cf0 <round>
 800c748:	ec54 3b10 	vmov	r3, r4, d0
 800c74c:	4618      	mov	r0, r3
 800c74e:	4621      	mov	r1, r4
 800c750:	f7fc f93a 	bl	80089c8 <__aeabi_d2iz>
 800c754:	4a27      	ldr	r2, [pc, #156]	; (800c7f4 <PIDControl+0x254>)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	212c      	movs	r1, #44	; 0x2c
 800c75a:	fb01 f303 	mul.w	r3, r1, r3
 800c75e:	4413      	add	r3, r2
 800c760:	3324      	adds	r3, #36	; 0x24
 800c762:	6018      	str	r0, [r3, #0]
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800c764:	4a23      	ldr	r2, [pc, #140]	; (800c7f4 <PIDControl+0x254>)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	212c      	movs	r1, #44	; 0x2c
 800c76a:	fb01 f303 	mul.w	r3, r1, r3
 800c76e:	4413      	add	r3, r2
 800c770:	3328      	adds	r3, #40	; 0x28
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d130      	bne.n	800c7da <PIDControl+0x23a>
	{
		Pid[n].e = 0;
 800c778:	4a1e      	ldr	r2, [pc, #120]	; (800c7f4 <PIDControl+0x254>)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	212c      	movs	r1, #44	; 0x2c
 800c77e:	fb01 f303 	mul.w	r3, r1, r3
 800c782:	4413      	add	r3, r2
 800c784:	330c      	adds	r3, #12
 800c786:	f04f 0200 	mov.w	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0;
 800c78c:	4a19      	ldr	r2, [pc, #100]	; (800c7f4 <PIDControl+0x254>)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	212c      	movs	r1, #44	; 0x2c
 800c792:	fb01 f303 	mul.w	r3, r1, r3
 800c796:	4413      	add	r3, r2
 800c798:	3310      	adds	r3, #16
 800c79a:	f04f 0200 	mov.w	r2, #0
 800c79e:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0;
 800c7a0:	4a14      	ldr	r2, [pc, #80]	; (800c7f4 <PIDControl+0x254>)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	212c      	movs	r1, #44	; 0x2c
 800c7a6:	fb01 f303 	mul.w	r3, r1, r3
 800c7aa:	4413      	add	r3, r2
 800c7ac:	3314      	adds	r3, #20
 800c7ae:	f04f 0200 	mov.w	r2, #0
 800c7b2:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0;
 800c7b4:	4a0f      	ldr	r2, [pc, #60]	; (800c7f4 <PIDControl+0x254>)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	212c      	movs	r1, #44	; 0x2c
 800c7ba:	fb01 f303 	mul.w	r3, r1, r3
 800c7be:	4413      	add	r3, r2
 800c7c0:	3318      	adds	r3, #24
 800c7c2:	f04f 0200 	mov.w	r2, #0
 800c7c6:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 800c7c8:	4a0a      	ldr	r2, [pc, #40]	; (800c7f4 <PIDControl+0x254>)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	212c      	movs	r1, #44	; 0x2c
 800c7ce:	fb01 f303 	mul.w	r3, r1, r3
 800c7d2:	4413      	add	r3, r2
 800c7d4:	3324      	adds	r3, #36	; 0x24
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	601a      	str	r2, [r3, #0]
		//PIDReset(n);
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );
	return Pid[n].out;
 800c7da:	4a06      	ldr	r2, [pc, #24]	; (800c7f4 <PIDControl+0x254>)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	212c      	movs	r1, #44	; 0x2c
 800c7e0:	fb01 f303 	mul.w	r3, r1, r3
 800c7e4:	4413      	add	r3, r2
 800c7e6:	3324      	adds	r3, #36	; 0x24
 800c7e8:	681b      	ldr	r3, [r3, #0]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3714      	adds	r7, #20
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd90      	pop	{r4, r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	2000025c 	.word	0x2000025c

0800c7f8 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int mode)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800c800:	2300      	movs	r3, #0
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e00e      	b.n	800c824 <Signal+0x2c>
	{
		ChangeLED(mode);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f001 fda6 	bl	800e358 <ChangeLED>
		HAL_Delay(100);
 800c80c:	2064      	movs	r0, #100	; 0x64
 800c80e:	f001 ff95 	bl	800e73c <HAL_Delay>
		ChangeLED(0);
 800c812:	2000      	movs	r0, #0
 800c814:	f001 fda0 	bl	800e358 <ChangeLED>
		HAL_Delay(100);
 800c818:	2064      	movs	r0, #100	; 0x64
 800c81a:	f001 ff8f 	bl	800e73c <HAL_Delay>
	for(int i=0; i < 5; i++)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3301      	adds	r3, #1
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2b04      	cmp	r3, #4
 800c828:	dded      	ble.n	800c806 <Signal+0xe>
	}
}
 800c82a:	bf00      	nop
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
	...

0800c834 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800c83c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800c888 <BatteryCheck+0x54>
 800c840:	eddf 0a12 	vldr	s1, [pc, #72]	; 800c88c <BatteryCheck+0x58>
 800c844:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7fe f94b 	bl	800aae4 <ADCToBatteryVoltage>
 800c84e:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800c852:	2103      	movs	r1, #3
 800c854:	2002      	movs	r0, #2
 800c856:	f7fe f96f 	bl	800ab38 <IntegerPower>
 800c85a:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800c85c:	6938      	ldr	r0, [r7, #16]
 800c85e:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800c890 <BatteryCheck+0x5c>
 800c862:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800c894 <BatteryCheck+0x60>
 800c866:	ed97 0a05 	vldr	s0, [r7, #20]
 800c86a:	f7fe f982 	bl	800ab72 <GetBatteryLevel>
 800c86e:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800c870:	68f9      	ldr	r1, [r7, #12]
 800c872:	4809      	ldr	r0, [pc, #36]	; (800c898 <BatteryCheck+0x64>)
 800c874:	f008 f902 	bl	8014a7c <iprintf>
	Signal( battery_level );
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	f7ff ffbd 	bl	800c7f8 <Signal>
}
 800c87e:	bf00      	nop
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	45800000 	.word	0x45800000
 800c88c:	40533333 	.word	0x40533333
 800c890:	41066666 	.word	0x41066666
 800c894:	40e66666 	.word	0x40e66666
 800c898:	0801911c 	.word	0x0801911c

0800c89c <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af02      	add	r7, sp, #8
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	603a      	str	r2, [r7, #0]
 800c8a6:	71fb      	strb	r3, [r7, #7]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800c8ac:	f001 fd38 	bl	800e320 <EmitterON>
	ADCStart();
 800c8b0:	f001 fb96 	bl	800dfe0 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800c8b4:	4841      	ldr	r0, [pc, #260]	; (800c9bc <ModeSelect+0x120>)
 800c8b6:	f005 f95a 	bl	8011b6e <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800c8ba:	f001 fd11 	bl	800e2e0 <EncoderStart>

	//while中で選択
	*pMode=min;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	79fa      	ldrb	r2, [r7, #7]
 800c8c2:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 800c8c4:	f247 512f 	movw	r1, #29999	; 0x752f
 800c8c8:	483d      	ldr	r0, [pc, #244]	; (800c9c0 <ModeSelect+0x124>)
 800c8ca:	f7fe f87d 	bl	800a9c8 <InitPulse>

	int ENC3_LEFT;
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800c8ce:	e05e      	b.n	800c98e <ModeSelect+0xf2>
	{
		printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
 800c8d0:	4b3c      	ldr	r3, [pc, #240]	; (800c9c4 <ModeSelect+0x128>)
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fb fd6f 	bl	80083b8 <__aeabi_f2d>
 800c8da:	460a      	mov	r2, r1
 800c8dc:	4601      	mov	r1, r0
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	460a      	mov	r2, r1
 800c8e6:	4838      	ldr	r0, [pc, #224]	; (800c9c8 <ModeSelect+0x12c>)
 800c8e8:	f008 f8c8 	bl	8014a7c <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800c8ec:	4b37      	ldr	r3, [pc, #220]	; (800c9cc <ModeSelect+0x130>)
 800c8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f0:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f24b 522e 	movw	r2, #46382	; 0xb52e
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	dd21      	ble.n	800c940 <ModeSelect+0xa4>
		  {
		  	  *pMode += 1;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	f993 3000 	ldrsb.w	r3, [r3]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	3301      	adds	r3, #1
 800c906:	b2db      	uxtb	r3, r3
 800c908:	b25a      	sxtb	r2, r3
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	f993 3000 	ldrsb.w	r3, [r3]
 800c914:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800c918:	429a      	cmp	r2, r3
 800c91a:	da02      	bge.n	800c922 <ModeSelect+0x86>
		  	  {
		  		  *pMode = min;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	79fa      	ldrb	r2, [r7, #7]
 800c920:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	f993 3000 	ldrsb.w	r3, [r3]
 800c928:	4618      	mov	r0, r3
 800c92a:	f001 fd15 	bl	800e358 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 800c92e:	f247 512f 	movw	r1, #29999	; 0x752f
 800c932:	4823      	ldr	r0, [pc, #140]	; (800c9c0 <ModeSelect+0x124>)
 800c934:	f7fe f848 	bl	800a9c8 <InitPulse>
		  	  HAL_Delay(500);
 800c938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c93c:	f001 fefe 	bl	800e73c <HAL_Delay>

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f243 522f 	movw	r2, #13615	; 0x352f
 800c946:	4293      	cmp	r3, r2
 800c948:	dc21      	bgt.n	800c98e <ModeSelect+0xf2>
		  {
		  	  *pMode -= 1;
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	f993 3000 	ldrsb.w	r3, [r3]
 800c950:	b2db      	uxtb	r3, r3
 800c952:	3b01      	subs	r3, #1
 800c954:	b2db      	uxtb	r3, r3
 800c956:	b25a      	sxtb	r2, r3
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	f993 3000 	ldrsb.w	r3, [r3]
 800c962:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800c966:	429a      	cmp	r2, r3
 800c968:	dd02      	ble.n	800c970 <ModeSelect+0xd4>
		  	  {
		  	  		  *pMode = max;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	79ba      	ldrb	r2, [r7, #6]
 800c96e:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	f993 3000 	ldrsb.w	r3, [r3]
 800c976:	4618      	mov	r0, r3
 800c978:	f001 fcee 	bl	800e358 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE);
 800c97c:	f247 512f 	movw	r1, #29999	; 0x752f
 800c980:	480f      	ldr	r0, [pc, #60]	; (800c9c0 <ModeSelect+0x124>)
 800c982:	f7fe f821 	bl	800a9c8 <InitPulse>
		  	  HAL_Delay(500);
 800c986:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c98a:	f001 fed7 	bl	800e73c <HAL_Delay>
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800c98e:	4b0d      	ldr	r3, [pc, #52]	; (800c9c4 <ModeSelect+0x128>)
 800c990:	edd3 7a03 	vldr	s15, [r3, #12]
 800c994:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800c9d0 <ModeSelect+0x134>
 800c998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a0:	d496      	bmi.n	800c8d0 <ModeSelect+0x34>
		  }
	}

	EmitterOFF();
 800c9a2:	f001 fccb 	bl	800e33c <EmitterOFF>
	ADCStop();
 800c9a6:	f001 fb3b 	bl	800e020 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 800c9aa:	4804      	ldr	r0, [pc, #16]	; (800c9bc <ModeSelect+0x120>)
 800c9ac:	f005 f903 	bl	8011bb6 <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 800c9b0:	f001 fca6 	bl	800e300 <EncoderStop>

	//モード選択後どうするか
}
 800c9b4:	bf00      	nop
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	200006b8 	.word	0x200006b8
 800c9c0:	40000424 	.word	0x40000424
 800c9c4:	20000458 	.word	0x20000458
 800c9c8:	08019124 	.word	0x08019124
 800c9cc:	40000400 	.word	0x40000400
 800c9d0:	437a0000 	.word	0x437a0000

0800c9d4 <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c9dc:	1d39      	adds	r1, r7, #4
 800c9de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	4803      	ldr	r0, [pc, #12]	; (800c9f4 <__io_putchar+0x20>)
 800c9e6:	f006 fc7d 	bl	80132e4 <HAL_UART_Transmit>
	return ch;
 800c9ea:	687b      	ldr	r3, [r7, #4]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	200008a0 	.word	0x200008a0

0800c9f8 <__io_getchar>:
int __io_getchar(void) {
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800c9fe:	2302      	movs	r3, #2
 800ca00:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800ca02:	e007      	b.n	800ca14 <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800ca04:	1db9      	adds	r1, r7, #6
 800ca06:	230a      	movs	r3, #10
 800ca08:	2201      	movs	r2, #1
 800ca0a:	4806      	ldr	r0, [pc, #24]	; (800ca24 <__io_getchar+0x2c>)
 800ca0c:	f006 fd03 	bl	8013416 <HAL_UART_Receive>
 800ca10:	4603      	mov	r3, r0
 800ca12:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1f4      	bne.n	800ca04 <__io_getchar+0xc>
//	break;
//}

}

return(Data);
 800ca1a:	79bb      	ldrb	r3, [r7, #6]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	200008a0 	.word	0x200008a0

0800ca28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ca2e:	f001 fe13 	bl	800e658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ca32:	f000 f8b3 	bl	800cb9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ca36:	f000 fcfd 	bl	800d434 <MX_GPIO_Init>
  MX_DMA_Init();
 800ca3a:	f000 fcd3 	bl	800d3e4 <MX_DMA_Init>
  MX_ADC1_Init();
 800ca3e:	f000 f917 	bl	800cc70 <MX_ADC1_Init>
  MX_ADC2_Init();
 800ca42:	f000 f983 	bl	800cd4c <MX_ADC2_Init>
  MX_TIM3_Init();
 800ca46:	f000 fadd 	bl	800d004 <MX_TIM3_Init>
  MX_TIM2_Init();
 800ca4a:	f000 fa65 	bl	800cf18 <MX_TIM2_Init>
  MX_SPI3_Init();
 800ca4e:	f000 f9dd 	bl	800ce0c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800ca52:	f000 fc9d 	bl	800d390 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800ca56:	f000 fb7d 	bl	800d154 <MX_TIM5_Init>
  MX_TIM4_Init();
 800ca5a:	f000 fb27 	bl	800d0ac <MX_TIM4_Init>
  MX_TIM8_Init();
 800ca5e:	f000 fbef 	bl	800d240 <MX_TIM8_Init>
  MX_TIM1_Init();
 800ca62:	f000 fa09 	bl	800ce78 <MX_TIM1_Init>
//  {
//
//  }


  ADCStart();
 800ca66:	f001 fabb 	bl	800dfe0 <ADCStart>
  HAL_Delay(500);
 800ca6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ca6e:	f001 fe65 	bl	800e73c <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800ca72:	4b41      	ldr	r3, [pc, #260]	; (800cb78 <main+0x150>)
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff fedc 	bl	800c834 <BatteryCheck>

  int8_t mode=0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	71fb      	strb	r3, [r7, #7]
  printf("mode : %d\r\n", mode);
 800ca80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca84:	4619      	mov	r1, r3
 800ca86:	483d      	ldr	r0, [pc, #244]	; (800cb7c <main+0x154>)
 800ca88:	f007 fff8 	bl	8014a7c <iprintf>
  ModeSelect( 0, 7, &mode);
 800ca8c:	1dfb      	adds	r3, r7, #7
 800ca8e:	461a      	mov	r2, r3
 800ca90:	2107      	movs	r1, #7
 800ca92:	2000      	movs	r0, #0
 800ca94:	f7ff ff02 	bl	800c89c <ModeSelect>
  Signal( mode );
 800ca98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff feab 	bl	800c7f8 <Signal>
  printf("スイッチ\r\n");
 800caa2:	4837      	ldr	r0, [pc, #220]	; (800cb80 <main+0x158>)
 800caa4:	f008 f85e 	bl	8014b64 <puts>

  //pidパラメータの初期化をもっと書き換えやすいところでやる
// Flashから読みした?ータを避するRAM上
  PIDSetGain(L_VELO_PID, 11.1, 2430, 0.002);//D0.0036 //I2430くら
 800caa8:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800cb84 <main+0x15c>
 800caac:	eddf 0a36 	vldr	s1, [pc, #216]	; 800cb88 <main+0x160>
 800cab0:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800cb8c <main+0x164>
 800cab4:	2004      	movs	r0, #4
 800cab6:	f7ff fcf3 	bl	800c4a0 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 11.1, 2430, 0.002);//I150,
 800caba:	ed9f 1a32 	vldr	s2, [pc, #200]	; 800cb84 <main+0x15c>
 800cabe:	eddf 0a32 	vldr	s1, [pc, #200]	; 800cb88 <main+0x160>
 800cac2:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800cb8c <main+0x164>
 800cac6:	2005      	movs	r0, #5
 800cac8:	f7ff fcea 	bl	800c4a0 <PIDSetGain>
  //PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
  //未調整
  PIDSetGain(A_VELO_PID, 7,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800cacc:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cb90 <main+0x168>
 800cad0:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800cb90 <main+0x168>
 800cad4:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800cad8:	2000      	movs	r0, #0
 800cada:	f7ff fce1 	bl	800c4a0 <PIDSetGain>
  //Iは積�?=偏差を消す。ゲインが大きいと偏差が縮まるが、収束が
  //Dは微
  PIDSetGain(D_WALL_PID, 3.2, 0, 0);//速度制御がある
 800cade:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800cb90 <main+0x168>
 800cae2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800cb90 <main+0x168>
 800cae6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800cb94 <main+0x16c>
 800caea:	2001      	movs	r0, #1
 800caec:	f7ff fcd8 	bl	800c4a0 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 6.4, 0, 0);
 800caf0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800cb90 <main+0x168>
 800caf4:	eddf 0a26 	vldr	s1, [pc, #152]	; 800cb90 <main+0x168>
 800caf8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800cb98 <main+0x170>
 800cafc:	2002      	movs	r0, #2
 800cafe:	f7ff fccf 	bl	800c4a0 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 6.4, 0, 0);
 800cb02:	ed9f 1a23 	vldr	s2, [pc, #140]	; 800cb90 <main+0x168>
 800cb06:	eddf 0a22 	vldr	s1, [pc, #136]	; 800cb90 <main+0x168>
 800cb0a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800cb98 <main+0x170>
 800cb0e:	2003      	movs	r0, #3
 800cb10:	f7ff fcc6 	bl	800c4a0 <PIDSetGain>
  //PidFlag = A_VELO_PID;
  while (1)
  {

	  switch( mode )
 800cb14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb18:	2b07      	cmp	r3, #7
 800cb1a:	d82b      	bhi.n	800cb74 <main+0x14c>
 800cb1c:	a201      	add	r2, pc, #4	; (adr r2, 800cb24 <main+0xfc>)
 800cb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb22:	bf00      	nop
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	0800cb4b 	.word	0x0800cb4b
 800cb2c:	0800cb51 	.word	0x0800cb51
 800cb30:	0800cb57 	.word	0x0800cb57
 800cb34:	0800cb5d 	.word	0x0800cb5d
 800cb38:	0800cb63 	.word	0x0800cb63
 800cb3c:	0800cb69 	.word	0x0800cb69
 800cb40:	0800cb6f 	.word	0x0800cb6f
	  {
	  case 0:

		  ParameterSetting();
 800cb44:	f7ff faa6 	bl	800c094 <ParameterSetting>
		//wall_flash_print();
		  break;
 800cb48:	e015      	b.n	800cb76 <main+0x14e>
	  case 1:
		  GainTestRWall();
 800cb4a:	f7ff fadd 	bl	800c108 <GainTestRWall>
		  break;
 800cb4e:	e012      	b.n	800cb76 <main+0x14e>
	  case 2:
		  GainTestDWall();
 800cb50:	f7ff fb0c 	bl	800c16c <GainTestDWall>
		  break;
 800cb54:	e00f      	b.n	800cb76 <main+0x14e>
	  case 3:
		  Debug();
 800cb56:	f7ff fa23 	bl	800bfa0 <Debug>
		  break;
 800cb5a:	e00c      	b.n	800cb76 <main+0x14e>
	  case 4:
		  GainTestLWall();
 800cb5c:	f7ff faa2 	bl	800c0a4 <GainTestLWall>
		  break;
 800cb60:	e009      	b.n	800cb76 <main+0x14e>
	  case 5:
		  GainTestAVelo();
 800cb62:	f7ff fb35 	bl	800c1d0 <GainTestAVelo>
		  break;
 800cb66:	e006      	b.n	800cb76 <main+0x14e>
	  case 6:
		  Explore();
 800cb68:	f7ff fbee 	bl	800c348 <Explore>
		  break;
 800cb6c:	e003      	b.n	800cb76 <main+0x14e>
	  case 7:
		  WritingFree();
 800cb6e:	f7ff fb65 	bl	800c23c <WritingFree>
		  break;
 800cb72:	e000      	b.n	800cb76 <main+0x14e>
	  default :
		  break;
 800cb74:	bf00      	nop
	  switch( mode )
 800cb76:	e7cd      	b.n	800cb14 <main+0xec>
 800cb78:	200003c0 	.word	0x200003c0
 800cb7c:	08019140 	.word	0x08019140
 800cb80:	0801914c 	.word	0x0801914c
 800cb84:	3b03126f 	.word	0x3b03126f
 800cb88:	4517e000 	.word	0x4517e000
 800cb8c:	4131999a 	.word	0x4131999a
 800cb90:	00000000 	.word	0x00000000
 800cb94:	404ccccd 	.word	0x404ccccd
 800cb98:	40cccccd 	.word	0x40cccccd

0800cb9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b094      	sub	sp, #80	; 0x50
 800cba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cba2:	f107 0320 	add.w	r3, r7, #32
 800cba6:	2230      	movs	r2, #48	; 0x30
 800cba8:	2100      	movs	r1, #0
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f007 f91f 	bl	8013dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cbb0:	f107 030c 	add.w	r3, r7, #12
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	605a      	str	r2, [r3, #4]
 800cbba:	609a      	str	r2, [r3, #8]
 800cbbc:	60da      	str	r2, [r3, #12]
 800cbbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60bb      	str	r3, [r7, #8]
 800cbc4:	4b28      	ldr	r3, [pc, #160]	; (800cc68 <SystemClock_Config+0xcc>)
 800cbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc8:	4a27      	ldr	r2, [pc, #156]	; (800cc68 <SystemClock_Config+0xcc>)
 800cbca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbce:	6413      	str	r3, [r2, #64]	; 0x40
 800cbd0:	4b25      	ldr	r3, [pc, #148]	; (800cc68 <SystemClock_Config+0xcc>)
 800cbd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbd8:	60bb      	str	r3, [r7, #8]
 800cbda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cbdc:	2300      	movs	r3, #0
 800cbde:	607b      	str	r3, [r7, #4]
 800cbe0:	4b22      	ldr	r3, [pc, #136]	; (800cc6c <SystemClock_Config+0xd0>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a21      	ldr	r2, [pc, #132]	; (800cc6c <SystemClock_Config+0xd0>)
 800cbe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	4b1f      	ldr	r3, [pc, #124]	; (800cc6c <SystemClock_Config+0xd0>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbf4:	607b      	str	r3, [r7, #4]
 800cbf6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cbfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cc00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cc02:	2302      	movs	r3, #2
 800cc04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cc06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800cc0c:	2304      	movs	r3, #4
 800cc0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800cc10:	23a8      	movs	r3, #168	; 0xa8
 800cc12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cc14:	2302      	movs	r3, #2
 800cc16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800cc18:	2304      	movs	r3, #4
 800cc1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cc1c:	f107 0320 	add.w	r3, r7, #32
 800cc20:	4618      	mov	r0, r3
 800cc22:	f003 fca3 	bl	801056c <HAL_RCC_OscConfig>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800cc2c:	f000 fccc 	bl	800d5c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cc30:	230f      	movs	r3, #15
 800cc32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cc34:	2302      	movs	r3, #2
 800cc36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cc3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cc40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cc42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800cc48:	f107 030c 	add.w	r3, r7, #12
 800cc4c:	2105      	movs	r1, #5
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f003 fefc 	bl	8010a4c <HAL_RCC_ClockConfig>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800cc5a:	f000 fcb5 	bl	800d5c8 <Error_Handler>
  }
}
 800cc5e:	bf00      	nop
 800cc60:	3750      	adds	r7, #80	; 0x50
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	40023800 	.word	0x40023800
 800cc6c:	40007000 	.word	0x40007000

0800cc70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800cc76:	463b      	mov	r3, r7
 800cc78:	2200      	movs	r2, #0
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	605a      	str	r2, [r3, #4]
 800cc7e:	609a      	str	r2, [r3, #8]
 800cc80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800cc82:	4b2f      	ldr	r3, [pc, #188]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cc84:	4a2f      	ldr	r2, [pc, #188]	; (800cd44 <MX_ADC1_Init+0xd4>)
 800cc86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800cc88:	4b2d      	ldr	r3, [pc, #180]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cc8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cc8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cc90:	4b2b      	ldr	r3, [pc, #172]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800cc96:	4b2a      	ldr	r3, [pc, #168]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cc98:	2201      	movs	r2, #1
 800cc9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800cc9c:	4b28      	ldr	r3, [pc, #160]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cc9e:	2201      	movs	r2, #1
 800cca0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cca2:	4b27      	ldr	r3, [pc, #156]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ccaa:	4b25      	ldr	r3, [pc, #148]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ccb0:	4b23      	ldr	r3, [pc, #140]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800ccb2:	4a25      	ldr	r2, [pc, #148]	; (800cd48 <MX_ADC1_Init+0xd8>)
 800ccb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ccb6:	4b22      	ldr	r3, [pc, #136]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800ccbc:	4b20      	ldr	r3, [pc, #128]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800ccbe:	2203      	movs	r2, #3
 800ccc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ccc2:	4b1f      	ldr	r3, [pc, #124]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ccca:	4b1d      	ldr	r3, [pc, #116]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cccc:	2201      	movs	r2, #1
 800ccce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ccd0:	481b      	ldr	r0, [pc, #108]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800ccd2:	f001 fd55 	bl	800e780 <HAL_ADC_Init>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ccdc:	f000 fc74 	bl	800d5c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800cce0:	230a      	movs	r3, #10
 800cce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cce4:	2301      	movs	r3, #1
 800cce6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800cce8:	2303      	movs	r3, #3
 800ccea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ccec:	463b      	mov	r3, r7
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4813      	ldr	r0, [pc, #76]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800ccf2:	f002 f82d 	bl	800ed50 <HAL_ADC_ConfigChannel>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ccfc:	f000 fc64 	bl	800d5c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800cd00:	230e      	movs	r3, #14
 800cd02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800cd04:	2302      	movs	r3, #2
 800cd06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cd08:	463b      	mov	r3, r7
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	480c      	ldr	r0, [pc, #48]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cd0e:	f002 f81f 	bl	800ed50 <HAL_ADC_ConfigChannel>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800cd18:	f000 fc56 	bl	800d5c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800cd1c:	2309      	movs	r3, #9
 800cd1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800cd20:	2303      	movs	r3, #3
 800cd22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cd24:	463b      	mov	r3, r7
 800cd26:	4619      	mov	r1, r3
 800cd28:	4805      	ldr	r0, [pc, #20]	; (800cd40 <MX_ADC1_Init+0xd0>)
 800cd2a:	f002 f811 	bl	800ed50 <HAL_ADC_ConfigChannel>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800cd34:	f000 fc48 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cd38:	bf00      	nop
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	20000858 	.word	0x20000858
 800cd44:	40012000 	.word	0x40012000
 800cd48:	0f000001 	.word	0x0f000001

0800cd4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800cd52:	463b      	mov	r3, r7
 800cd54:	2200      	movs	r2, #0
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	605a      	str	r2, [r3, #4]
 800cd5a:	609a      	str	r2, [r3, #8]
 800cd5c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800cd5e:	4b28      	ldr	r3, [pc, #160]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd60:	4a28      	ldr	r2, [pc, #160]	; (800ce04 <MX_ADC2_Init+0xb8>)
 800cd62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800cd64:	4b26      	ldr	r3, [pc, #152]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cd6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800cd6c:	4b24      	ldr	r3, [pc, #144]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800cd72:	4b23      	ldr	r3, [pc, #140]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd74:	2201      	movs	r2, #1
 800cd76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800cd78:	4b21      	ldr	r3, [pc, #132]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800cd7e:	4b20      	ldr	r3, [pc, #128]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cd86:	4b1e      	ldr	r3, [pc, #120]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cd8c:	4b1c      	ldr	r3, [pc, #112]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd8e:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <MX_ADC2_Init+0xbc>)
 800cd90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cd92:	4b1b      	ldr	r3, [pc, #108]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800cd98:	4b19      	ldr	r3, [pc, #100]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800cd9e:	4b18      	ldr	r3, [pc, #96]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cda6:	4b16      	ldr	r3, [pc, #88]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cda8:	2201      	movs	r2, #1
 800cdaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800cdac:	4814      	ldr	r0, [pc, #80]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cdae:	f001 fce7 	bl	800e780 <HAL_ADC_Init>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800cdb8:	f000 fc06 	bl	800d5c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800cdbc:	230b      	movs	r3, #11
 800cdbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800cdc8:	463b      	mov	r3, r7
 800cdca:	4619      	mov	r1, r3
 800cdcc:	480c      	ldr	r0, [pc, #48]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cdce:	f001 ffbf 	bl	800ed50 <HAL_ADC_ConfigChannel>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800cdd8:	f000 fbf6 	bl	800d5c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800cddc:	230f      	movs	r3, #15
 800cdde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800cde0:	2302      	movs	r3, #2
 800cde2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800cde4:	463b      	mov	r3, r7
 800cde6:	4619      	mov	r1, r3
 800cde8:	4805      	ldr	r0, [pc, #20]	; (800ce00 <MX_ADC2_Init+0xb4>)
 800cdea:	f001 ffb1 	bl	800ed50 <HAL_ADC_ConfigChannel>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800cdf4:	f000 fbe8 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800cdf8:	bf00      	nop
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20000738 	.word	0x20000738
 800ce04:	40012100 	.word	0x40012100
 800ce08:	0f000001 	.word	0x0f000001

0800ce0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800ce10:	4b17      	ldr	r3, [pc, #92]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce12:	4a18      	ldr	r2, [pc, #96]	; (800ce74 <MX_SPI3_Init+0x68>)
 800ce14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ce16:	4b16      	ldr	r3, [pc, #88]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce18:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ce1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ce1e:	4b14      	ldr	r3, [pc, #80]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ce24:	4b12      	ldr	r3, [pc, #72]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800ce2a:	4b11      	ldr	r3, [pc, #68]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce2c:	2202      	movs	r2, #2
 800ce2e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ce30:	4b0f      	ldr	r3, [pc, #60]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce32:	2201      	movs	r2, #1
 800ce34:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ce36:	4b0e      	ldr	r3, [pc, #56]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce3c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800ce3e:	4b0c      	ldr	r3, [pc, #48]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce40:	2228      	movs	r2, #40	; 0x28
 800ce42:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ce44:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce46:	2200      	movs	r2, #0
 800ce48:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ce4a:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce50:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800ce56:	4b06      	ldr	r3, [pc, #24]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce58:	220a      	movs	r2, #10
 800ce5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ce5c:	4804      	ldr	r0, [pc, #16]	; (800ce70 <MX_SPI3_Init+0x64>)
 800ce5e:	f003 ffe7 	bl	8010e30 <HAL_SPI_Init>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800ce68:	f000 fbae 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ce6c:	bf00      	nop
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	20000800 	.word	0x20000800
 800ce74:	40003c00 	.word	0x40003c00

0800ce78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ce7e:	f107 0308 	add.w	r3, r7, #8
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	605a      	str	r2, [r3, #4]
 800ce88:	609a      	str	r2, [r3, #8]
 800ce8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ce8c:	463b      	mov	r3, r7
 800ce8e:	2200      	movs	r2, #0
 800ce90:	601a      	str	r2, [r3, #0]
 800ce92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ce94:	4b1e      	ldr	r3, [pc, #120]	; (800cf10 <MX_TIM1_Init+0x98>)
 800ce96:	4a1f      	ldr	r2, [pc, #124]	; (800cf14 <MX_TIM1_Init+0x9c>)
 800ce98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800ce9a:	4b1d      	ldr	r3, [pc, #116]	; (800cf10 <MX_TIM1_Init+0x98>)
 800ce9c:	22a7      	movs	r2, #167	; 0xa7
 800ce9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cea0:	4b1b      	ldr	r3, [pc, #108]	; (800cf10 <MX_TIM1_Init+0x98>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800cea6:	4b1a      	ldr	r3, [pc, #104]	; (800cf10 <MX_TIM1_Init+0x98>)
 800cea8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ceac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ceae:	4b18      	ldr	r3, [pc, #96]	; (800cf10 <MX_TIM1_Init+0x98>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ceb4:	4b16      	ldr	r3, [pc, #88]	; (800cf10 <MX_TIM1_Init+0x98>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ceba:	4b15      	ldr	r3, [pc, #84]	; (800cf10 <MX_TIM1_Init+0x98>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800cec0:	4813      	ldr	r0, [pc, #76]	; (800cf10 <MX_TIM1_Init+0x98>)
 800cec2:	f004 fe29 	bl	8011b18 <HAL_TIM_Base_Init>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d001      	beq.n	800ced0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800cecc:	f000 fb7c 	bl	800d5c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ced0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ced4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ced6:	f107 0308 	add.w	r3, r7, #8
 800ceda:	4619      	mov	r1, r3
 800cedc:	480c      	ldr	r0, [pc, #48]	; (800cf10 <MX_TIM1_Init+0x98>)
 800cede:	f005 fbf3 	bl	80126c8 <HAL_TIM_ConfigClockSource>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800cee8:	f000 fb6e 	bl	800d5c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ceec:	2300      	movs	r3, #0
 800ceee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cef0:	2300      	movs	r3, #0
 800cef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800cef4:	463b      	mov	r3, r7
 800cef6:	4619      	mov	r1, r3
 800cef8:	4805      	ldr	r0, [pc, #20]	; (800cf10 <MX_TIM1_Init+0x98>)
 800cefa:	f006 f89f 	bl	801303c <HAL_TIMEx_MasterConfigSynchronization>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d001      	beq.n	800cf08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800cf04:	f000 fb60 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800cf08:	bf00      	nop
 800cf0a:	3718      	adds	r7, #24
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	20000940 	.word	0x20000940
 800cf14:	40010000 	.word	0x40010000

0800cf18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08e      	sub	sp, #56	; 0x38
 800cf1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cf1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf22:	2200      	movs	r2, #0
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	605a      	str	r2, [r3, #4]
 800cf28:	609a      	str	r2, [r3, #8]
 800cf2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf2c:	f107 0320 	add.w	r3, r7, #32
 800cf30:	2200      	movs	r2, #0
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cf36:	1d3b      	adds	r3, r7, #4
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	605a      	str	r2, [r3, #4]
 800cf3e:	609a      	str	r2, [r3, #8]
 800cf40:	60da      	str	r2, [r3, #12]
 800cf42:	611a      	str	r2, [r3, #16]
 800cf44:	615a      	str	r2, [r3, #20]
 800cf46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800cf48:	4b2d      	ldr	r3, [pc, #180]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cf4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800cf50:	4b2b      	ldr	r3, [pc, #172]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf56:	4b2a      	ldr	r3, [pc, #168]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800cf5c:	4b28      	ldr	r3, [pc, #160]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf5e:	f241 0267 	movw	r2, #4199	; 0x1067
 800cf62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cf64:	4b26      	ldr	r3, [pc, #152]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf66:	2200      	movs	r2, #0
 800cf68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cf6a:	4b25      	ldr	r3, [pc, #148]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800cf70:	4823      	ldr	r0, [pc, #140]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf72:	f004 fdd1 	bl	8011b18 <HAL_TIM_Base_Init>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800cf7c:	f000 fb24 	bl	800d5c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cf80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800cf86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	481c      	ldr	r0, [pc, #112]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf8e:	f005 fb9b 	bl	80126c8 <HAL_TIM_ConfigClockSource>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800cf98:	f000 fb16 	bl	800d5c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800cf9c:	4818      	ldr	r0, [pc, #96]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cf9e:	f004 ff89 	bl	8011eb4 <HAL_TIM_PWM_Init>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800cfa8:	f000 fb0e 	bl	800d5c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cfac:	2300      	movs	r3, #0
 800cfae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cfb4:	f107 0320 	add.w	r3, r7, #32
 800cfb8:	4619      	mov	r1, r3
 800cfba:	4811      	ldr	r0, [pc, #68]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cfbc:	f006 f83e 	bl	801303c <HAL_TIMEx_MasterConfigSynchronization>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800cfc6:	f000 faff 	bl	800d5c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cfca:	2360      	movs	r3, #96	; 0x60
 800cfcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800cfda:	1d3b      	adds	r3, r7, #4
 800cfdc:	220c      	movs	r2, #12
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4807      	ldr	r0, [pc, #28]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cfe2:	f005 faab 	bl	801253c <HAL_TIM_PWM_ConfigChannel>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d001      	beq.n	800cff0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800cfec:	f000 faec 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800cff0:	4803      	ldr	r0, [pc, #12]	; (800d000 <MX_TIM2_Init+0xe8>)
 800cff2:	f000 fd99 	bl	800db28 <HAL_TIM_MspPostInit>

}
 800cff6:	bf00      	nop
 800cff8:	3738      	adds	r7, #56	; 0x38
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000980 	.word	0x20000980

0800d004 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b08c      	sub	sp, #48	; 0x30
 800d008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d00a:	f107 030c 	add.w	r3, r7, #12
 800d00e:	2224      	movs	r2, #36	; 0x24
 800d010:	2100      	movs	r1, #0
 800d012:	4618      	mov	r0, r3
 800d014:	f006 feeb 	bl	8013dee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d018:	1d3b      	adds	r3, r7, #4
 800d01a:	2200      	movs	r2, #0
 800d01c:	601a      	str	r2, [r3, #0]
 800d01e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d020:	4b20      	ldr	r3, [pc, #128]	; (800d0a4 <MX_TIM3_Init+0xa0>)
 800d022:	4a21      	ldr	r2, [pc, #132]	; (800d0a8 <MX_TIM3_Init+0xa4>)
 800d024:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d026:	4b1f      	ldr	r3, [pc, #124]	; (800d0a4 <MX_TIM3_Init+0xa0>)
 800d028:	2200      	movs	r2, #0
 800d02a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d02c:	4b1d      	ldr	r3, [pc, #116]	; (800d0a4 <MX_TIM3_Init+0xa0>)
 800d02e:	2200      	movs	r2, #0
 800d030:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800d032:	4b1c      	ldr	r3, [pc, #112]	; (800d0a4 <MX_TIM3_Init+0xa0>)
 800d034:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800d038:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d03a:	4b1a      	ldr	r3, [pc, #104]	; (800d0a4 <MX_TIM3_Init+0xa0>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d040:	4b18      	ldr	r3, [pc, #96]	; (800d0a4 <MX_TIM3_Init+0xa0>)
 800d042:	2200      	movs	r2, #0
 800d044:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d046:	2303      	movs	r3, #3
 800d048:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d04a:	2300      	movs	r3, #0
 800d04c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d04e:	2301      	movs	r3, #1
 800d050:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d052:	2300      	movs	r3, #0
 800d054:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d05a:	2300      	movs	r3, #0
 800d05c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d05e:	2301      	movs	r3, #1
 800d060:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d062:	2300      	movs	r3, #0
 800d064:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d06a:	f107 030c 	add.w	r3, r7, #12
 800d06e:	4619      	mov	r1, r3
 800d070:	480c      	ldr	r0, [pc, #48]	; (800d0a4 <MX_TIM3_Init+0xa0>)
 800d072:	f004 ffeb 	bl	801204c <HAL_TIM_Encoder_Init>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800d07c:	f000 faa4 	bl	800d5c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d080:	2300      	movs	r3, #0
 800d082:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d084:	2300      	movs	r3, #0
 800d086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d088:	1d3b      	adds	r3, r7, #4
 800d08a:	4619      	mov	r1, r3
 800d08c:	4805      	ldr	r0, [pc, #20]	; (800d0a4 <MX_TIM3_Init+0xa0>)
 800d08e:	f005 ffd5 	bl	801303c <HAL_TIMEx_MasterConfigSynchronization>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800d098:	f000 fa96 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800d09c:	bf00      	nop
 800d09e:	3730      	adds	r7, #48	; 0x30
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	200007c0 	.word	0x200007c0
 800d0a8:	40000400 	.word	0x40000400

0800d0ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08c      	sub	sp, #48	; 0x30
 800d0b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d0b2:	f107 030c 	add.w	r3, r7, #12
 800d0b6:	2224      	movs	r2, #36	; 0x24
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f006 fe97 	bl	8013dee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d0c0:	1d3b      	adds	r3, r7, #4
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
 800d0c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800d0c8:	4b20      	ldr	r3, [pc, #128]	; (800d14c <MX_TIM4_Init+0xa0>)
 800d0ca:	4a21      	ldr	r2, [pc, #132]	; (800d150 <MX_TIM4_Init+0xa4>)
 800d0cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800d0ce:	4b1f      	ldr	r3, [pc, #124]	; (800d14c <MX_TIM4_Init+0xa0>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0d4:	4b1d      	ldr	r3, [pc, #116]	; (800d14c <MX_TIM4_Init+0xa0>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800d0da:	4b1c      	ldr	r3, [pc, #112]	; (800d14c <MX_TIM4_Init+0xa0>)
 800d0dc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800d0e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d0e2:	4b1a      	ldr	r3, [pc, #104]	; (800d14c <MX_TIM4_Init+0xa0>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d0e8:	4b18      	ldr	r3, [pc, #96]	; (800d14c <MX_TIM4_Init+0xa0>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d0fe:	2300      	movs	r3, #0
 800d100:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d102:	2300      	movs	r3, #0
 800d104:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d106:	2301      	movs	r3, #1
 800d108:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d10a:	2300      	movs	r3, #0
 800d10c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d112:	f107 030c 	add.w	r3, r7, #12
 800d116:	4619      	mov	r1, r3
 800d118:	480c      	ldr	r0, [pc, #48]	; (800d14c <MX_TIM4_Init+0xa0>)
 800d11a:	f004 ff97 	bl	801204c <HAL_TIM_Encoder_Init>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800d124:	f000 fa50 	bl	800d5c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d128:	2300      	movs	r3, #0
 800d12a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d12c:	2300      	movs	r3, #0
 800d12e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d130:	1d3b      	adds	r3, r7, #4
 800d132:	4619      	mov	r1, r3
 800d134:	4805      	ldr	r0, [pc, #20]	; (800d14c <MX_TIM4_Init+0xa0>)
 800d136:	f005 ff81 	bl	801303c <HAL_TIMEx_MasterConfigSynchronization>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800d140:	f000 fa42 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800d144:	bf00      	nop
 800d146:	3730      	adds	r7, #48	; 0x30
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	200006f8 	.word	0x200006f8
 800d150:	40000800 	.word	0x40000800

0800d154 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b08e      	sub	sp, #56	; 0x38
 800d158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d15a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d15e:	2200      	movs	r2, #0
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	605a      	str	r2, [r3, #4]
 800d164:	609a      	str	r2, [r3, #8]
 800d166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d168:	f107 0320 	add.w	r3, r7, #32
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]
 800d170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d172:	1d3b      	adds	r3, r7, #4
 800d174:	2200      	movs	r2, #0
 800d176:	601a      	str	r2, [r3, #0]
 800d178:	605a      	str	r2, [r3, #4]
 800d17a:	609a      	str	r2, [r3, #8]
 800d17c:	60da      	str	r2, [r3, #12]
 800d17e:	611a      	str	r2, [r3, #16]
 800d180:	615a      	str	r2, [r3, #20]
 800d182:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800d184:	4b2c      	ldr	r3, [pc, #176]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d186:	4a2d      	ldr	r2, [pc, #180]	; (800d23c <MX_TIM5_Init+0xe8>)
 800d188:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800d18a:	4b2b      	ldr	r3, [pc, #172]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d190:	4b29      	ldr	r3, [pc, #164]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d192:	2200      	movs	r2, #0
 800d194:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800d196:	4b28      	ldr	r3, [pc, #160]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d198:	f241 0267 	movw	r2, #4199	; 0x1067
 800d19c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d19e:	4b26      	ldr	r3, [pc, #152]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d1a4:	4b24      	ldr	r3, [pc, #144]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800d1aa:	4823      	ldr	r0, [pc, #140]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d1ac:	f004 fcb4 	bl	8011b18 <HAL_TIM_Base_Init>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800d1b6:	f000 fa07 	bl	800d5c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d1ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800d1c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	481c      	ldr	r0, [pc, #112]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d1c8:	f005 fa7e 	bl	80126c8 <HAL_TIM_ConfigClockSource>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800d1d2:	f000 f9f9 	bl	800d5c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800d1d6:	4818      	ldr	r0, [pc, #96]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d1d8:	f004 fe6c 	bl	8011eb4 <HAL_TIM_PWM_Init>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d001      	beq.n	800d1e6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800d1e2:	f000 f9f1 	bl	800d5c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d1ee:	f107 0320 	add.w	r3, r7, #32
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	4810      	ldr	r0, [pc, #64]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d1f6:	f005 ff21 	bl	801303c <HAL_TIMEx_MasterConfigSynchronization>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800d200:	f000 f9e2 	bl	800d5c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d204:	2360      	movs	r3, #96	; 0x60
 800d206:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d210:	2300      	movs	r3, #0
 800d212:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d214:	1d3b      	adds	r3, r7, #4
 800d216:	2204      	movs	r2, #4
 800d218:	4619      	mov	r1, r3
 800d21a:	4807      	ldr	r0, [pc, #28]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d21c:	f005 f98e 	bl	801253c <HAL_TIM_PWM_ConfigChannel>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800d226:	f000 f9cf 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800d22a:	4803      	ldr	r0, [pc, #12]	; (800d238 <MX_TIM5_Init+0xe4>)
 800d22c:	f000 fc7c 	bl	800db28 <HAL_TIM_MspPostInit>

}
 800d230:	bf00      	nop
 800d232:	3738      	adds	r7, #56	; 0x38
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	20000780 	.word	0x20000780
 800d23c:	40000c00 	.word	0x40000c00

0800d240 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b096      	sub	sp, #88	; 0x58
 800d244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d24a:	2200      	movs	r2, #0
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	605a      	str	r2, [r3, #4]
 800d250:	609a      	str	r2, [r3, #8]
 800d252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d25e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d262:	2200      	movs	r2, #0
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	605a      	str	r2, [r3, #4]
 800d268:	609a      	str	r2, [r3, #8]
 800d26a:	60da      	str	r2, [r3, #12]
 800d26c:	611a      	str	r2, [r3, #16]
 800d26e:	615a      	str	r2, [r3, #20]
 800d270:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d272:	1d3b      	adds	r3, r7, #4
 800d274:	2220      	movs	r2, #32
 800d276:	2100      	movs	r1, #0
 800d278:	4618      	mov	r0, r3
 800d27a:	f006 fdb8 	bl	8013dee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800d27e:	4b42      	ldr	r3, [pc, #264]	; (800d388 <MX_TIM8_Init+0x148>)
 800d280:	4a42      	ldr	r2, [pc, #264]	; (800d38c <MX_TIM8_Init+0x14c>)
 800d282:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800d284:	4b40      	ldr	r3, [pc, #256]	; (800d388 <MX_TIM8_Init+0x148>)
 800d286:	22a7      	movs	r2, #167	; 0xa7
 800d288:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d28a:	4b3f      	ldr	r3, [pc, #252]	; (800d388 <MX_TIM8_Init+0x148>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800d290:	4b3d      	ldr	r3, [pc, #244]	; (800d388 <MX_TIM8_Init+0x148>)
 800d292:	2231      	movs	r2, #49	; 0x31
 800d294:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d296:	4b3c      	ldr	r3, [pc, #240]	; (800d388 <MX_TIM8_Init+0x148>)
 800d298:	2200      	movs	r2, #0
 800d29a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800d29c:	4b3a      	ldr	r3, [pc, #232]	; (800d388 <MX_TIM8_Init+0x148>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d2a2:	4b39      	ldr	r3, [pc, #228]	; (800d388 <MX_TIM8_Init+0x148>)
 800d2a4:	2280      	movs	r2, #128	; 0x80
 800d2a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800d2a8:	4837      	ldr	r0, [pc, #220]	; (800d388 <MX_TIM8_Init+0x148>)
 800d2aa:	f004 fc35 	bl	8011b18 <HAL_TIM_Base_Init>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800d2b4:	f000 f988 	bl	800d5c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d2b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800d2be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4830      	ldr	r0, [pc, #192]	; (800d388 <MX_TIM8_Init+0x148>)
 800d2c6:	f005 f9ff 	bl	80126c8 <HAL_TIM_ConfigClockSource>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d001      	beq.n	800d2d4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800d2d0:	f000 f97a 	bl	800d5c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800d2d4:	482c      	ldr	r0, [pc, #176]	; (800d388 <MX_TIM8_Init+0x148>)
 800d2d6:	f004 fc99 	bl	8011c0c <HAL_TIM_OC_Init>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800d2e0:	f000 f972 	bl	800d5c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d2ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	4825      	ldr	r0, [pc, #148]	; (800d388 <MX_TIM8_Init+0x148>)
 800d2f4:	f005 fea2 	bl	801303c <HAL_TIMEx_MasterConfigSynchronization>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800d2fe:	f000 f963 	bl	800d5c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800d302:	2330      	movs	r3, #48	; 0x30
 800d304:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800d306:	2318      	movs	r3, #24
 800d308:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d30a:	2300      	movs	r3, #0
 800d30c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d30e:	2300      	movs	r3, #0
 800d310:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d312:	2300      	movs	r3, #0
 800d314:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d316:	2300      	movs	r3, #0
 800d318:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d31a:	2300      	movs	r3, #0
 800d31c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d31e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d322:	2200      	movs	r2, #0
 800d324:	4619      	mov	r1, r3
 800d326:	4818      	ldr	r0, [pc, #96]	; (800d388 <MX_TIM8_Init+0x148>)
 800d328:	f005 f8a8 	bl	801247c <HAL_TIM_OC_ConfigChannel>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800d332:	f000 f949 	bl	800d5c8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800d336:	4b14      	ldr	r3, [pc, #80]	; (800d388 <MX_TIM8_Init+0x148>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	699a      	ldr	r2, [r3, #24]
 800d33c:	4b12      	ldr	r3, [pc, #72]	; (800d388 <MX_TIM8_Init+0x148>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f042 0208 	orr.w	r2, r2, #8
 800d344:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d346:	2300      	movs	r3, #0
 800d348:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d34a:	2300      	movs	r3, #0
 800d34c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d34e:	2300      	movs	r3, #0
 800d350:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d356:	2300      	movs	r3, #0
 800d358:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d35a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d35e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d360:	2300      	movs	r3, #0
 800d362:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d364:	1d3b      	adds	r3, r7, #4
 800d366:	4619      	mov	r1, r3
 800d368:	4807      	ldr	r0, [pc, #28]	; (800d388 <MX_TIM8_Init+0x148>)
 800d36a:	f005 fee3 	bl	8013134 <HAL_TIMEx_ConfigBreakDeadTime>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800d374:	f000 f928 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800d378:	4803      	ldr	r0, [pc, #12]	; (800d388 <MX_TIM8_Init+0x148>)
 800d37a:	f000 fbd5 	bl	800db28 <HAL_TIM_MspPostInit>

}
 800d37e:	bf00      	nop
 800d380:	3758      	adds	r7, #88	; 0x58
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	200006b8 	.word	0x200006b8
 800d38c:	40010400 	.word	0x40010400

0800d390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d394:	4b11      	ldr	r3, [pc, #68]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d396:	4a12      	ldr	r2, [pc, #72]	; (800d3e0 <MX_USART1_UART_Init+0x50>)
 800d398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d39a:	4b10      	ldr	r3, [pc, #64]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d39c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d3a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d3a2:	4b0e      	ldr	r3, [pc, #56]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d3a8:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d3ae:	4b0b      	ldr	r3, [pc, #44]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d3b4:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d3b6:	220c      	movs	r2, #12
 800d3b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d3ba:	4b08      	ldr	r3, [pc, #32]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d3c0:	4b06      	ldr	r3, [pc, #24]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d3c6:	4805      	ldr	r0, [pc, #20]	; (800d3dc <MX_USART1_UART_Init+0x4c>)
 800d3c8:	f005 ff3f 	bl	801324a <HAL_UART_Init>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d3d2:	f000 f8f9 	bl	800d5c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d3d6:	bf00      	nop
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	200008a0 	.word	0x200008a0
 800d3e0:	40011000 	.word	0x40011000

0800d3e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	607b      	str	r3, [r7, #4]
 800d3ee:	4b10      	ldr	r3, [pc, #64]	; (800d430 <MX_DMA_Init+0x4c>)
 800d3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f2:	4a0f      	ldr	r2, [pc, #60]	; (800d430 <MX_DMA_Init+0x4c>)
 800d3f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3f8:	6313      	str	r3, [r2, #48]	; 0x30
 800d3fa:	4b0d      	ldr	r3, [pc, #52]	; (800d430 <MX_DMA_Init+0x4c>)
 800d3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d402:	607b      	str	r3, [r7, #4]
 800d404:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800d406:	2200      	movs	r2, #0
 800d408:	2100      	movs	r1, #0
 800d40a:	2038      	movs	r0, #56	; 0x38
 800d40c:	f002 f825 	bl	800f45a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800d410:	2038      	movs	r0, #56	; 0x38
 800d412:	f002 f83e 	bl	800f492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800d416:	2200      	movs	r2, #0
 800d418:	2100      	movs	r1, #0
 800d41a:	203a      	movs	r0, #58	; 0x3a
 800d41c:	f002 f81d 	bl	800f45a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800d420:	203a      	movs	r0, #58	; 0x3a
 800d422:	f002 f836 	bl	800f492 <HAL_NVIC_EnableIRQ>

}
 800d426:	bf00      	nop
 800d428:	3708      	adds	r7, #8
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	40023800 	.word	0x40023800

0800d434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08a      	sub	sp, #40	; 0x28
 800d438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d43a:	f107 0314 	add.w	r3, r7, #20
 800d43e:	2200      	movs	r2, #0
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	605a      	str	r2, [r3, #4]
 800d444:	609a      	str	r2, [r3, #8]
 800d446:	60da      	str	r2, [r3, #12]
 800d448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d44a:	2300      	movs	r3, #0
 800d44c:	613b      	str	r3, [r7, #16]
 800d44e:	4b59      	ldr	r3, [pc, #356]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d452:	4a58      	ldr	r2, [pc, #352]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d458:	6313      	str	r3, [r2, #48]	; 0x30
 800d45a:	4b56      	ldr	r3, [pc, #344]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d462:	613b      	str	r3, [r7, #16]
 800d464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d466:	2300      	movs	r3, #0
 800d468:	60fb      	str	r3, [r7, #12]
 800d46a:	4b52      	ldr	r3, [pc, #328]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46e:	4a51      	ldr	r2, [pc, #324]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d470:	f043 0304 	orr.w	r3, r3, #4
 800d474:	6313      	str	r3, [r2, #48]	; 0x30
 800d476:	4b4f      	ldr	r3, [pc, #316]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47a:	f003 0304 	and.w	r3, r3, #4
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d482:	2300      	movs	r3, #0
 800d484:	60bb      	str	r3, [r7, #8]
 800d486:	4b4b      	ldr	r3, [pc, #300]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48a:	4a4a      	ldr	r2, [pc, #296]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d48c:	f043 0301 	orr.w	r3, r3, #1
 800d490:	6313      	str	r3, [r2, #48]	; 0x30
 800d492:	4b48      	ldr	r3, [pc, #288]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	60bb      	str	r3, [r7, #8]
 800d49c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d49e:	2300      	movs	r3, #0
 800d4a0:	607b      	str	r3, [r7, #4]
 800d4a2:	4b44      	ldr	r3, [pc, #272]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4a6:	4a43      	ldr	r2, [pc, #268]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d4a8:	f043 0302 	orr.w	r3, r3, #2
 800d4ac:	6313      	str	r3, [r2, #48]	; 0x30
 800d4ae:	4b41      	ldr	r3, [pc, #260]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b2:	f003 0302 	and.w	r3, r3, #2
 800d4b6:	607b      	str	r3, [r7, #4]
 800d4b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	603b      	str	r3, [r7, #0]
 800d4be:	4b3d      	ldr	r3, [pc, #244]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c2:	4a3c      	ldr	r2, [pc, #240]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d4c4:	f043 0308 	orr.w	r3, r3, #8
 800d4c8:	6313      	str	r3, [r2, #48]	; 0x30
 800d4ca:	4b3a      	ldr	r3, [pc, #232]	; (800d5b4 <MX_GPIO_Init+0x180>)
 800d4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ce:	f003 0308 	and.w	r3, r3, #8
 800d4d2:	603b      	str	r3, [r7, #0]
 800d4d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f44f 7141 	mov.w	r1, #772	; 0x304
 800d4dc:	4836      	ldr	r0, [pc, #216]	; (800d5b8 <MX_GPIO_Init+0x184>)
 800d4de:	f003 f82b 	bl	8010538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	2105      	movs	r1, #5
 800d4e6:	4835      	ldr	r0, [pc, #212]	; (800d5bc <MX_GPIO_Init+0x188>)
 800d4e8:	f003 f826 	bl	8010538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	2104      	movs	r1, #4
 800d4f0:	4833      	ldr	r0, [pc, #204]	; (800d5c0 <MX_GPIO_Init+0x18c>)
 800d4f2:	f003 f821 	bl	8010538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4fc:	4831      	ldr	r0, [pc, #196]	; (800d5c4 <MX_GPIO_Init+0x190>)
 800d4fe:	f003 f81b 	bl	8010538 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800d502:	f44f 7341 	mov.w	r3, #772	; 0x304
 800d506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d508:	2301      	movs	r3, #1
 800d50a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d50c:	2300      	movs	r3, #0
 800d50e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d510:	2300      	movs	r3, #0
 800d512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d514:	f107 0314 	add.w	r3, r7, #20
 800d518:	4619      	mov	r1, r3
 800d51a:	4827      	ldr	r0, [pc, #156]	; (800d5b8 <MX_GPIO_Init+0x184>)
 800d51c:	f002 fe72 	bl	8010204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800d520:	2305      	movs	r3, #5
 800d522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d524:	2301      	movs	r3, #1
 800d526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d528:	2300      	movs	r3, #0
 800d52a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d52c:	2300      	movs	r3, #0
 800d52e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d530:	f107 0314 	add.w	r3, r7, #20
 800d534:	4619      	mov	r1, r3
 800d536:	4821      	ldr	r0, [pc, #132]	; (800d5bc <MX_GPIO_Init+0x188>)
 800d538:	f002 fe64 	bl	8010204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800d53c:	f241 0304 	movw	r3, #4100	; 0x1004
 800d540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d542:	2300      	movs	r3, #0
 800d544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d546:	2300      	movs	r3, #0
 800d548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d54a:	f107 0314 	add.w	r3, r7, #20
 800d54e:	4619      	mov	r1, r3
 800d550:	481c      	ldr	r0, [pc, #112]	; (800d5c4 <MX_GPIO_Init+0x190>)
 800d552:	f002 fe57 	bl	8010204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800d556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d55a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d55c:	2300      	movs	r3, #0
 800d55e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d560:	2300      	movs	r3, #0
 800d562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d564:	f107 0314 	add.w	r3, r7, #20
 800d568:	4619      	mov	r1, r3
 800d56a:	4814      	ldr	r0, [pc, #80]	; (800d5bc <MX_GPIO_Init+0x188>)
 800d56c:	f002 fe4a 	bl	8010204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d570:	2304      	movs	r3, #4
 800d572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d574:	2301      	movs	r3, #1
 800d576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d578:	2300      	movs	r3, #0
 800d57a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d57c:	2300      	movs	r3, #0
 800d57e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d580:	f107 0314 	add.w	r3, r7, #20
 800d584:	4619      	mov	r1, r3
 800d586:	480e      	ldr	r0, [pc, #56]	; (800d5c0 <MX_GPIO_Init+0x18c>)
 800d588:	f002 fe3c 	bl	8010204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d58c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d592:	2301      	movs	r3, #1
 800d594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d596:	2300      	movs	r3, #0
 800d598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d59a:	2300      	movs	r3, #0
 800d59c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d59e:	f107 0314 	add.w	r3, r7, #20
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	4807      	ldr	r0, [pc, #28]	; (800d5c4 <MX_GPIO_Init+0x190>)
 800d5a6:	f002 fe2d 	bl	8010204 <HAL_GPIO_Init>

}
 800d5aa:	bf00      	nop
 800d5ac:	3728      	adds	r7, #40	; 0x28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	40023800 	.word	0x40023800
 800d5b8:	40020800 	.word	0x40020800
 800d5bc:	40020000 	.word	0x40020000
 800d5c0:	40020c00 	.word	0x40020c00
 800d5c4:	40020400 	.word	0x40020400

0800d5c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d5cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d5ce:	e7fe      	b.n	800d5ce <Error_Handler+0x6>

0800d5d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	607b      	str	r3, [r7, #4]
 800d5da:	4b13      	ldr	r3, [pc, #76]	; (800d628 <HAL_MspInit+0x58>)
 800d5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5de:	4a12      	ldr	r2, [pc, #72]	; (800d628 <HAL_MspInit+0x58>)
 800d5e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5e4:	6453      	str	r3, [r2, #68]	; 0x44
 800d5e6:	4b10      	ldr	r3, [pc, #64]	; (800d628 <HAL_MspInit+0x58>)
 800d5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5ee:	607b      	str	r3, [r7, #4]
 800d5f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	603b      	str	r3, [r7, #0]
 800d5f6:	4b0c      	ldr	r3, [pc, #48]	; (800d628 <HAL_MspInit+0x58>)
 800d5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fa:	4a0b      	ldr	r2, [pc, #44]	; (800d628 <HAL_MspInit+0x58>)
 800d5fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d600:	6413      	str	r3, [r2, #64]	; 0x40
 800d602:	4b09      	ldr	r3, [pc, #36]	; (800d628 <HAL_MspInit+0x58>)
 800d604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d60a:	603b      	str	r3, [r7, #0]
 800d60c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800d60e:	2200      	movs	r2, #0
 800d610:	2100      	movs	r1, #0
 800d612:	2004      	movs	r0, #4
 800d614:	f001 ff21 	bl	800f45a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800d618:	2004      	movs	r0, #4
 800d61a:	f001 ff3a 	bl	800f492 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d61e:	bf00      	nop
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	40023800 	.word	0x40023800

0800d62c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08c      	sub	sp, #48	; 0x30
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d634:	f107 031c 	add.w	r3, r7, #28
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	605a      	str	r2, [r3, #4]
 800d63e:	609a      	str	r2, [r3, #8]
 800d640:	60da      	str	r2, [r3, #12]
 800d642:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a73      	ldr	r2, [pc, #460]	; (800d818 <HAL_ADC_MspInit+0x1ec>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d17a      	bne.n	800d744 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d64e:	2300      	movs	r3, #0
 800d650:	61bb      	str	r3, [r7, #24]
 800d652:	4b72      	ldr	r3, [pc, #456]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d656:	4a71      	ldr	r2, [pc, #452]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d65c:	6453      	str	r3, [r2, #68]	; 0x44
 800d65e:	4b6f      	ldr	r3, [pc, #444]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d666:	61bb      	str	r3, [r7, #24]
 800d668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d66a:	2300      	movs	r3, #0
 800d66c:	617b      	str	r3, [r7, #20]
 800d66e:	4b6b      	ldr	r3, [pc, #428]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d672:	4a6a      	ldr	r2, [pc, #424]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d674:	f043 0304 	orr.w	r3, r3, #4
 800d678:	6313      	str	r3, [r2, #48]	; 0x30
 800d67a:	4b68      	ldr	r3, [pc, #416]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67e:	f003 0304 	and.w	r3, r3, #4
 800d682:	617b      	str	r3, [r7, #20]
 800d684:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d686:	2300      	movs	r3, #0
 800d688:	613b      	str	r3, [r7, #16]
 800d68a:	4b64      	ldr	r3, [pc, #400]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68e:	4a63      	ldr	r2, [pc, #396]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d690:	f043 0302 	orr.w	r3, r3, #2
 800d694:	6313      	str	r3, [r2, #48]	; 0x30
 800d696:	4b61      	ldr	r3, [pc, #388]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69a:	f003 0302 	and.w	r3, r3, #2
 800d69e:	613b      	str	r3, [r7, #16]
 800d6a0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800d6a2:	2311      	movs	r3, #17
 800d6a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6ae:	f107 031c 	add.w	r3, r7, #28
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	485a      	ldr	r0, [pc, #360]	; (800d820 <HAL_ADC_MspInit+0x1f4>)
 800d6b6:	f002 fda5 	bl	8010204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d6be:	2303      	movs	r3, #3
 800d6c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6c6:	f107 031c 	add.w	r3, r7, #28
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	4855      	ldr	r0, [pc, #340]	; (800d824 <HAL_ADC_MspInit+0x1f8>)
 800d6ce:	f002 fd99 	bl	8010204 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800d6d2:	4b55      	ldr	r3, [pc, #340]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d6d4:	4a55      	ldr	r2, [pc, #340]	; (800d82c <HAL_ADC_MspInit+0x200>)
 800d6d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800d6d8:	4b53      	ldr	r3, [pc, #332]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d6de:	4b52      	ldr	r3, [pc, #328]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d6e4:	4b50      	ldr	r3, [pc, #320]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800d6ea:	4b4f      	ldr	r3, [pc, #316]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d6ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d6f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d6f2:	4b4d      	ldr	r3, [pc, #308]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d6f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d6f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d6fa:	4b4b      	ldr	r3, [pc, #300]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d6fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d700:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800d702:	4b49      	ldr	r3, [pc, #292]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d704:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d708:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800d70a:	4b47      	ldr	r3, [pc, #284]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d710:	4b45      	ldr	r3, [pc, #276]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d712:	2200      	movs	r2, #0
 800d714:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800d716:	4844      	ldr	r0, [pc, #272]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d718:	f001 fed6 	bl	800f4c8 <HAL_DMA_Init>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800d722:	f7ff ff51 	bl	800d5c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4a3f      	ldr	r2, [pc, #252]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d72a:	639a      	str	r2, [r3, #56]	; 0x38
 800d72c:	4a3e      	ldr	r2, [pc, #248]	; (800d828 <HAL_ADC_MspInit+0x1fc>)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800d732:	2200      	movs	r2, #0
 800d734:	2100      	movs	r1, #0
 800d736:	2012      	movs	r0, #18
 800d738:	f001 fe8f 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800d73c:	2012      	movs	r0, #18
 800d73e:	f001 fea8 	bl	800f492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800d742:	e065      	b.n	800d810 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a39      	ldr	r2, [pc, #228]	; (800d830 <HAL_ADC_MspInit+0x204>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d160      	bne.n	800d810 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800d74e:	2300      	movs	r3, #0
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	4b32      	ldr	r3, [pc, #200]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d756:	4a31      	ldr	r2, [pc, #196]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d75c:	6453      	str	r3, [r2, #68]	; 0x44
 800d75e:	4b2f      	ldr	r3, [pc, #188]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d76a:	2300      	movs	r3, #0
 800d76c:	60bb      	str	r3, [r7, #8]
 800d76e:	4b2b      	ldr	r3, [pc, #172]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d772:	4a2a      	ldr	r2, [pc, #168]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d774:	f043 0304 	orr.w	r3, r3, #4
 800d778:	6313      	str	r3, [r2, #48]	; 0x30
 800d77a:	4b28      	ldr	r3, [pc, #160]	; (800d81c <HAL_ADC_MspInit+0x1f0>)
 800d77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77e:	f003 0304 	and.w	r3, r3, #4
 800d782:	60bb      	str	r3, [r7, #8]
 800d784:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800d786:	2322      	movs	r3, #34	; 0x22
 800d788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d78a:	2303      	movs	r3, #3
 800d78c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d78e:	2300      	movs	r3, #0
 800d790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d792:	f107 031c 	add.w	r3, r7, #28
 800d796:	4619      	mov	r1, r3
 800d798:	4821      	ldr	r0, [pc, #132]	; (800d820 <HAL_ADC_MspInit+0x1f4>)
 800d79a:	f002 fd33 	bl	8010204 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800d79e:	4b25      	ldr	r3, [pc, #148]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7a0:	4a25      	ldr	r2, [pc, #148]	; (800d838 <HAL_ADC_MspInit+0x20c>)
 800d7a2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800d7a4:	4b23      	ldr	r3, [pc, #140]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d7aa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d7ac:	4b21      	ldr	r3, [pc, #132]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800d7b2:	4b20      	ldr	r3, [pc, #128]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800d7b8:	4b1e      	ldr	r3, [pc, #120]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d7be:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d7c0:	4b1c      	ldr	r3, [pc, #112]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d7c6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d7c8:	4b1a      	ldr	r3, [pc, #104]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d7ce:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800d7d0:	4b18      	ldr	r3, [pc, #96]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7d6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800d7d8:	4b16      	ldr	r3, [pc, #88]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d7de:	4b15      	ldr	r3, [pc, #84]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800d7e4:	4813      	ldr	r0, [pc, #76]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7e6:	f001 fe6f 	bl	800f4c8 <HAL_DMA_Init>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800d7f0:	f7ff feea 	bl	800d5c8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4a0f      	ldr	r2, [pc, #60]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7f8:	639a      	str	r2, [r3, #56]	; 0x38
 800d7fa:	4a0e      	ldr	r2, [pc, #56]	; (800d834 <HAL_ADC_MspInit+0x208>)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800d800:	2200      	movs	r2, #0
 800d802:	2100      	movs	r1, #0
 800d804:	2012      	movs	r0, #18
 800d806:	f001 fe28 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800d80a:	2012      	movs	r0, #18
 800d80c:	f001 fe41 	bl	800f492 <HAL_NVIC_EnableIRQ>
}
 800d810:	bf00      	nop
 800d812:	3730      	adds	r7, #48	; 0x30
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	40012000 	.word	0x40012000
 800d81c:	40023800 	.word	0x40023800
 800d820:	40020800 	.word	0x40020800
 800d824:	40020400 	.word	0x40020400
 800d828:	200008e0 	.word	0x200008e0
 800d82c:	40026410 	.word	0x40026410
 800d830:	40012100 	.word	0x40012100
 800d834:	200009c0 	.word	0x200009c0
 800d838:	40026440 	.word	0x40026440

0800d83c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08a      	sub	sp, #40	; 0x28
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d844:	f107 0314 	add.w	r3, r7, #20
 800d848:	2200      	movs	r2, #0
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	605a      	str	r2, [r3, #4]
 800d84e:	609a      	str	r2, [r3, #8]
 800d850:	60da      	str	r2, [r3, #12]
 800d852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a1d      	ldr	r2, [pc, #116]	; (800d8d0 <HAL_SPI_MspInit+0x94>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d134      	bne.n	800d8c8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800d85e:	2300      	movs	r3, #0
 800d860:	613b      	str	r3, [r7, #16]
 800d862:	4b1c      	ldr	r3, [pc, #112]	; (800d8d4 <HAL_SPI_MspInit+0x98>)
 800d864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d866:	4a1b      	ldr	r2, [pc, #108]	; (800d8d4 <HAL_SPI_MspInit+0x98>)
 800d868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d86c:	6413      	str	r3, [r2, #64]	; 0x40
 800d86e:	4b19      	ldr	r3, [pc, #100]	; (800d8d4 <HAL_SPI_MspInit+0x98>)
 800d870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d876:	613b      	str	r3, [r7, #16]
 800d878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	4b15      	ldr	r3, [pc, #84]	; (800d8d4 <HAL_SPI_MspInit+0x98>)
 800d880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d882:	4a14      	ldr	r2, [pc, #80]	; (800d8d4 <HAL_SPI_MspInit+0x98>)
 800d884:	f043 0304 	orr.w	r3, r3, #4
 800d888:	6313      	str	r3, [r2, #48]	; 0x30
 800d88a:	4b12      	ldr	r3, [pc, #72]	; (800d8d4 <HAL_SPI_MspInit+0x98>)
 800d88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88e:	f003 0304 	and.w	r3, r3, #4
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800d896:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d89a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d89c:	2302      	movs	r3, #2
 800d89e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d8a8:	2306      	movs	r3, #6
 800d8aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8ac:	f107 0314 	add.w	r3, r7, #20
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	4809      	ldr	r0, [pc, #36]	; (800d8d8 <HAL_SPI_MspInit+0x9c>)
 800d8b4:	f002 fca6 	bl	8010204 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	2033      	movs	r0, #51	; 0x33
 800d8be:	f001 fdcc 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800d8c2:	2033      	movs	r0, #51	; 0x33
 800d8c4:	f001 fde5 	bl	800f492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800d8c8:	bf00      	nop
 800d8ca:	3728      	adds	r7, #40	; 0x28
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	40003c00 	.word	0x40003c00
 800d8d4:	40023800 	.word	0x40023800
 800d8d8:	40020800 	.word	0x40020800

0800d8dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a44      	ldr	r2, [pc, #272]	; (800d9fc <HAL_TIM_Base_MspInit+0x120>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d11e      	bne.n	800d92c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	617b      	str	r3, [r7, #20]
 800d8f2:	4b43      	ldr	r3, [pc, #268]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8f6:	4a42      	ldr	r2, [pc, #264]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d8f8:	f043 0301 	orr.w	r3, r3, #1
 800d8fc:	6453      	str	r3, [r2, #68]	; 0x44
 800d8fe:	4b40      	ldr	r3, [pc, #256]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800d90a:	2200      	movs	r2, #0
 800d90c:	2100      	movs	r1, #0
 800d90e:	2018      	movs	r0, #24
 800d910:	f001 fda3 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800d914:	2018      	movs	r0, #24
 800d916:	f001 fdbc 	bl	800f492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800d91a:	2200      	movs	r2, #0
 800d91c:	2101      	movs	r1, #1
 800d91e:	2019      	movs	r0, #25
 800d920:	f001 fd9b 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800d924:	2019      	movs	r0, #25
 800d926:	f001 fdb4 	bl	800f492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d92a:	e062      	b.n	800d9f2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM2)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d934:	d116      	bne.n	800d964 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d936:	2300      	movs	r3, #0
 800d938:	613b      	str	r3, [r7, #16]
 800d93a:	4b31      	ldr	r3, [pc, #196]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93e:	4a30      	ldr	r2, [pc, #192]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d940:	f043 0301 	orr.w	r3, r3, #1
 800d944:	6413      	str	r3, [r2, #64]	; 0x40
 800d946:	4b2e      	ldr	r3, [pc, #184]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94a:	f003 0301 	and.w	r3, r3, #1
 800d94e:	613b      	str	r3, [r7, #16]
 800d950:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800d952:	2200      	movs	r2, #0
 800d954:	2100      	movs	r1, #0
 800d956:	201c      	movs	r0, #28
 800d958:	f001 fd7f 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d95c:	201c      	movs	r0, #28
 800d95e:	f001 fd98 	bl	800f492 <HAL_NVIC_EnableIRQ>
}
 800d962:	e046      	b.n	800d9f2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a26      	ldr	r2, [pc, #152]	; (800da04 <HAL_TIM_Base_MspInit+0x128>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d116      	bne.n	800d99c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d96e:	2300      	movs	r3, #0
 800d970:	60fb      	str	r3, [r7, #12]
 800d972:	4b23      	ldr	r3, [pc, #140]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d976:	4a22      	ldr	r2, [pc, #136]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d978:	f043 0308 	orr.w	r3, r3, #8
 800d97c:	6413      	str	r3, [r2, #64]	; 0x40
 800d97e:	4b20      	ldr	r3, [pc, #128]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d982:	f003 0308 	and.w	r3, r3, #8
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800d98a:	2200      	movs	r2, #0
 800d98c:	2100      	movs	r1, #0
 800d98e:	2032      	movs	r0, #50	; 0x32
 800d990:	f001 fd63 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800d994:	2032      	movs	r0, #50	; 0x32
 800d996:	f001 fd7c 	bl	800f492 <HAL_NVIC_EnableIRQ>
}
 800d99a:	e02a      	b.n	800d9f2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM8)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a19      	ldr	r2, [pc, #100]	; (800da08 <HAL_TIM_Base_MspInit+0x12c>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d125      	bne.n	800d9f2 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60bb      	str	r3, [r7, #8]
 800d9aa:	4b15      	ldr	r3, [pc, #84]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ae:	4a14      	ldr	r2, [pc, #80]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d9b0:	f043 0302 	orr.w	r3, r3, #2
 800d9b4:	6453      	str	r3, [r2, #68]	; 0x44
 800d9b6:	4b12      	ldr	r3, [pc, #72]	; (800da00 <HAL_TIM_Base_MspInit+0x124>)
 800d9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ba:	f003 0302 	and.w	r3, r3, #2
 800d9be:	60bb      	str	r3, [r7, #8]
 800d9c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	2102      	movs	r1, #2
 800d9c6:	202c      	movs	r0, #44	; 0x2c
 800d9c8:	f001 fd47 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d9cc:	202c      	movs	r0, #44	; 0x2c
 800d9ce:	f001 fd60 	bl	800f492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	202d      	movs	r0, #45	; 0x2d
 800d9d8:	f001 fd3f 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800d9dc:	202d      	movs	r0, #45	; 0x2d
 800d9de:	f001 fd58 	bl	800f492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	202e      	movs	r0, #46	; 0x2e
 800d9e8:	f001 fd37 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800d9ec:	202e      	movs	r0, #46	; 0x2e
 800d9ee:	f001 fd50 	bl	800f492 <HAL_NVIC_EnableIRQ>
}
 800d9f2:	bf00      	nop
 800d9f4:	3718      	adds	r7, #24
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	40010000 	.word	0x40010000
 800da00:	40023800 	.word	0x40023800
 800da04:	40000c00 	.word	0x40000c00
 800da08:	40010400 	.word	0x40010400

0800da0c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08c      	sub	sp, #48	; 0x30
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da14:	f107 031c 	add.w	r3, r7, #28
 800da18:	2200      	movs	r2, #0
 800da1a:	601a      	str	r2, [r3, #0]
 800da1c:	605a      	str	r2, [r3, #4]
 800da1e:	609a      	str	r2, [r3, #8]
 800da20:	60da      	str	r2, [r3, #12]
 800da22:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a3a      	ldr	r2, [pc, #232]	; (800db14 <HAL_TIM_Encoder_MspInit+0x108>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d134      	bne.n	800da98 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800da2e:	2300      	movs	r3, #0
 800da30:	61bb      	str	r3, [r7, #24]
 800da32:	4b39      	ldr	r3, [pc, #228]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800da34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da36:	4a38      	ldr	r2, [pc, #224]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800da38:	f043 0302 	orr.w	r3, r3, #2
 800da3c:	6413      	str	r3, [r2, #64]	; 0x40
 800da3e:	4b36      	ldr	r3, [pc, #216]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800da40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da42:	f003 0302 	and.w	r3, r3, #2
 800da46:	61bb      	str	r3, [r7, #24]
 800da48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da4a:	2300      	movs	r3, #0
 800da4c:	617b      	str	r3, [r7, #20]
 800da4e:	4b32      	ldr	r3, [pc, #200]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800da50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da52:	4a31      	ldr	r2, [pc, #196]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800da54:	f043 0301 	orr.w	r3, r3, #1
 800da58:	6313      	str	r3, [r2, #48]	; 0x30
 800da5a:	4b2f      	ldr	r3, [pc, #188]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800da5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da5e:	f003 0301 	and.w	r3, r3, #1
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800da66:	23c0      	movs	r3, #192	; 0xc0
 800da68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da6a:	2302      	movs	r3, #2
 800da6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da6e:	2300      	movs	r3, #0
 800da70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da72:	2300      	movs	r3, #0
 800da74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800da76:	2302      	movs	r3, #2
 800da78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da7a:	f107 031c 	add.w	r3, r7, #28
 800da7e:	4619      	mov	r1, r3
 800da80:	4826      	ldr	r0, [pc, #152]	; (800db1c <HAL_TIM_Encoder_MspInit+0x110>)
 800da82:	f002 fbbf 	bl	8010204 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800da86:	2200      	movs	r2, #0
 800da88:	2100      	movs	r1, #0
 800da8a:	201d      	movs	r0, #29
 800da8c:	f001 fce5 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800da90:	201d      	movs	r0, #29
 800da92:	f001 fcfe 	bl	800f492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800da96:	e038      	b.n	800db0a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a20      	ldr	r2, [pc, #128]	; (800db20 <HAL_TIM_Encoder_MspInit+0x114>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d133      	bne.n	800db0a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800daa2:	2300      	movs	r3, #0
 800daa4:	613b      	str	r3, [r7, #16]
 800daa6:	4b1c      	ldr	r3, [pc, #112]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800daa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daaa:	4a1b      	ldr	r2, [pc, #108]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800daac:	f043 0304 	orr.w	r3, r3, #4
 800dab0:	6413      	str	r3, [r2, #64]	; 0x40
 800dab2:	4b19      	ldr	r3, [pc, #100]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800dab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab6:	f003 0304 	and.w	r3, r3, #4
 800daba:	613b      	str	r3, [r7, #16]
 800dabc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dabe:	2300      	movs	r3, #0
 800dac0:	60fb      	str	r3, [r7, #12]
 800dac2:	4b15      	ldr	r3, [pc, #84]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800dac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac6:	4a14      	ldr	r2, [pc, #80]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800dac8:	f043 0302 	orr.w	r3, r3, #2
 800dacc:	6313      	str	r3, [r2, #48]	; 0x30
 800dace:	4b12      	ldr	r3, [pc, #72]	; (800db18 <HAL_TIM_Encoder_MspInit+0x10c>)
 800dad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad2:	f003 0302 	and.w	r3, r3, #2
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800dada:	23c0      	movs	r3, #192	; 0xc0
 800dadc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dade:	2302      	movs	r3, #2
 800dae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dae2:	2300      	movs	r3, #0
 800dae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dae6:	2300      	movs	r3, #0
 800dae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800daea:	2302      	movs	r3, #2
 800daec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800daee:	f107 031c 	add.w	r3, r7, #28
 800daf2:	4619      	mov	r1, r3
 800daf4:	480b      	ldr	r0, [pc, #44]	; (800db24 <HAL_TIM_Encoder_MspInit+0x118>)
 800daf6:	f002 fb85 	bl	8010204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800dafa:	2200      	movs	r2, #0
 800dafc:	2100      	movs	r1, #0
 800dafe:	201e      	movs	r0, #30
 800db00:	f001 fcab 	bl	800f45a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800db04:	201e      	movs	r0, #30
 800db06:	f001 fcc4 	bl	800f492 <HAL_NVIC_EnableIRQ>
}
 800db0a:	bf00      	nop
 800db0c:	3730      	adds	r7, #48	; 0x30
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	40000400 	.word	0x40000400
 800db18:	40023800 	.word	0x40023800
 800db1c:	40020000 	.word	0x40020000
 800db20:	40000800 	.word	0x40000800
 800db24:	40020400 	.word	0x40020400

0800db28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08c      	sub	sp, #48	; 0x30
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db30:	f107 031c 	add.w	r3, r7, #28
 800db34:	2200      	movs	r2, #0
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	605a      	str	r2, [r3, #4]
 800db3a:	609a      	str	r2, [r3, #8]
 800db3c:	60da      	str	r2, [r3, #12]
 800db3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db48:	d11e      	bne.n	800db88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db4a:	2300      	movs	r3, #0
 800db4c:	61bb      	str	r3, [r7, #24]
 800db4e:	4b43      	ldr	r3, [pc, #268]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800db50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db52:	4a42      	ldr	r2, [pc, #264]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800db54:	f043 0301 	orr.w	r3, r3, #1
 800db58:	6313      	str	r3, [r2, #48]	; 0x30
 800db5a:	4b40      	ldr	r3, [pc, #256]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800db5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db5e:	f003 0301 	and.w	r3, r3, #1
 800db62:	61bb      	str	r3, [r7, #24]
 800db64:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800db66:	2308      	movs	r3, #8
 800db68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db6a:	2302      	movs	r3, #2
 800db6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db72:	2303      	movs	r3, #3
 800db74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800db76:	2301      	movs	r3, #1
 800db78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db7a:	f107 031c 	add.w	r3, r7, #28
 800db7e:	4619      	mov	r1, r3
 800db80:	4837      	ldr	r0, [pc, #220]	; (800dc60 <HAL_TIM_MspPostInit+0x138>)
 800db82:	f002 fb3f 	bl	8010204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800db86:	e064      	b.n	800dc52 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a35      	ldr	r2, [pc, #212]	; (800dc64 <HAL_TIM_MspPostInit+0x13c>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d11e      	bne.n	800dbd0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db92:	2300      	movs	r3, #0
 800db94:	617b      	str	r3, [r7, #20]
 800db96:	4b31      	ldr	r3, [pc, #196]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800db98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9a:	4a30      	ldr	r2, [pc, #192]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800db9c:	f043 0301 	orr.w	r3, r3, #1
 800dba0:	6313      	str	r3, [r2, #48]	; 0x30
 800dba2:	4b2e      	ldr	r3, [pc, #184]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800dba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba6:	f003 0301 	and.w	r3, r3, #1
 800dbaa:	617b      	str	r3, [r7, #20]
 800dbac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800dbae:	2302      	movs	r3, #2
 800dbb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbb2:	2302      	movs	r3, #2
 800dbb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800dbbe:	2302      	movs	r3, #2
 800dbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbc2:	f107 031c 	add.w	r3, r7, #28
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	4825      	ldr	r0, [pc, #148]	; (800dc60 <HAL_TIM_MspPostInit+0x138>)
 800dbca:	f002 fb1b 	bl	8010204 <HAL_GPIO_Init>
}
 800dbce:	e040      	b.n	800dc52 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a24      	ldr	r2, [pc, #144]	; (800dc68 <HAL_TIM_MspPostInit+0x140>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d13b      	bne.n	800dc52 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbda:	2300      	movs	r3, #0
 800dbdc:	613b      	str	r3, [r7, #16]
 800dbde:	4b1f      	ldr	r3, [pc, #124]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800dbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe2:	4a1e      	ldr	r2, [pc, #120]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800dbe4:	f043 0301 	orr.w	r3, r3, #1
 800dbe8:	6313      	str	r3, [r2, #48]	; 0x30
 800dbea:	4b1c      	ldr	r3, [pc, #112]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800dbec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	613b      	str	r3, [r7, #16]
 800dbf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	60fb      	str	r3, [r7, #12]
 800dbfa:	4b18      	ldr	r3, [pc, #96]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800dbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfe:	4a17      	ldr	r2, [pc, #92]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800dc00:	f043 0304 	orr.w	r3, r3, #4
 800dc04:	6313      	str	r3, [r2, #48]	; 0x30
 800dc06:	4b15      	ldr	r3, [pc, #84]	; (800dc5c <HAL_TIM_MspPostInit+0x134>)
 800dc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc0a:	f003 0304 	and.w	r3, r3, #4
 800dc0e:	60fb      	str	r3, [r7, #12]
 800dc10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dc12:	2320      	movs	r3, #32
 800dc14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc16:	2302      	movs	r3, #2
 800dc18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800dc22:	2303      	movs	r3, #3
 800dc24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc26:	f107 031c 	add.w	r3, r7, #28
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	480c      	ldr	r0, [pc, #48]	; (800dc60 <HAL_TIM_MspPostInit+0x138>)
 800dc2e:	f002 fae9 	bl	8010204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800dc32:	2340      	movs	r3, #64	; 0x40
 800dc34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc36:	2302      	movs	r3, #2
 800dc38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800dc42:	2303      	movs	r3, #3
 800dc44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc46:	f107 031c 	add.w	r3, r7, #28
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	4807      	ldr	r0, [pc, #28]	; (800dc6c <HAL_TIM_MspPostInit+0x144>)
 800dc4e:	f002 fad9 	bl	8010204 <HAL_GPIO_Init>
}
 800dc52:	bf00      	nop
 800dc54:	3730      	adds	r7, #48	; 0x30
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	40023800 	.word	0x40023800
 800dc60:	40020000 	.word	0x40020000
 800dc64:	40000c00 	.word	0x40000c00
 800dc68:	40010400 	.word	0x40010400
 800dc6c:	40020800 	.word	0x40020800

0800dc70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08a      	sub	sp, #40	; 0x28
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc78:	f107 0314 	add.w	r3, r7, #20
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	601a      	str	r2, [r3, #0]
 800dc80:	605a      	str	r2, [r3, #4]
 800dc82:	609a      	str	r2, [r3, #8]
 800dc84:	60da      	str	r2, [r3, #12]
 800dc86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a19      	ldr	r2, [pc, #100]	; (800dcf4 <HAL_UART_MspInit+0x84>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d12c      	bne.n	800dcec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800dc92:	2300      	movs	r3, #0
 800dc94:	613b      	str	r3, [r7, #16]
 800dc96:	4b18      	ldr	r3, [pc, #96]	; (800dcf8 <HAL_UART_MspInit+0x88>)
 800dc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc9a:	4a17      	ldr	r2, [pc, #92]	; (800dcf8 <HAL_UART_MspInit+0x88>)
 800dc9c:	f043 0310 	orr.w	r3, r3, #16
 800dca0:	6453      	str	r3, [r2, #68]	; 0x44
 800dca2:	4b15      	ldr	r3, [pc, #84]	; (800dcf8 <HAL_UART_MspInit+0x88>)
 800dca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dca6:	f003 0310 	and.w	r3, r3, #16
 800dcaa:	613b      	str	r3, [r7, #16]
 800dcac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dcae:	2300      	movs	r3, #0
 800dcb0:	60fb      	str	r3, [r7, #12]
 800dcb2:	4b11      	ldr	r3, [pc, #68]	; (800dcf8 <HAL_UART_MspInit+0x88>)
 800dcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb6:	4a10      	ldr	r2, [pc, #64]	; (800dcf8 <HAL_UART_MspInit+0x88>)
 800dcb8:	f043 0301 	orr.w	r3, r3, #1
 800dcbc:	6313      	str	r3, [r2, #48]	; 0x30
 800dcbe:	4b0e      	ldr	r3, [pc, #56]	; (800dcf8 <HAL_UART_MspInit+0x88>)
 800dcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc2:	f003 0301 	and.w	r3, r3, #1
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800dcca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800dcce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dcd8:	2303      	movs	r3, #3
 800dcda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dcdc:	2307      	movs	r3, #7
 800dcde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dce0:	f107 0314 	add.w	r3, r7, #20
 800dce4:	4619      	mov	r1, r3
 800dce6:	4805      	ldr	r0, [pc, #20]	; (800dcfc <HAL_UART_MspInit+0x8c>)
 800dce8:	f002 fa8c 	bl	8010204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800dcec:	bf00      	nop
 800dcee:	3728      	adds	r7, #40	; 0x28
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	40011000 	.word	0x40011000
 800dcf8:	40023800 	.word	0x40023800
 800dcfc:	40020000 	.word	0x40020000

0800dd00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dd00:	b480      	push	{r7}
 800dd02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800dd04:	e7fe      	b.n	800dd04 <NMI_Handler+0x4>

0800dd06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dd06:	b480      	push	{r7}
 800dd08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dd0a:	e7fe      	b.n	800dd0a <HardFault_Handler+0x4>

0800dd0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dd10:	e7fe      	b.n	800dd10 <MemManage_Handler+0x4>

0800dd12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dd12:	b480      	push	{r7}
 800dd14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dd16:	e7fe      	b.n	800dd16 <BusFault_Handler+0x4>

0800dd18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dd1c:	e7fe      	b.n	800dd1c <UsageFault_Handler+0x4>

0800dd1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dd1e:	b480      	push	{r7}
 800dd20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dd22:	bf00      	nop
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dd30:	bf00      	nop
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dd3e:	bf00      	nop
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dd4c:	f000 fcd6 	bl	800e6fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dd50:	bf00      	nop
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800dd58:	f001 ffb6 	bl	800fcc8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800dd5c:	bf00      	nop
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800dd64:	4803      	ldr	r0, [pc, #12]	; (800dd74 <ADC_IRQHandler+0x14>)
 800dd66:	f000 fd4e 	bl	800e806 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800dd6a:	4803      	ldr	r0, [pc, #12]	; (800dd78 <ADC_IRQHandler+0x18>)
 800dd6c:	f000 fd4b 	bl	800e806 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800dd70:	bf00      	nop
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	20000858 	.word	0x20000858
 800dd78:	20000738 	.word	0x20000738

0800dd7c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800dd80:	4802      	ldr	r0, [pc, #8]	; (800dd8c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800dd82:	f004 fa73 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800dd86:	bf00      	nop
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20000940 	.word	0x20000940

0800dd90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800dd94:	4802      	ldr	r0, [pc, #8]	; (800dda0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800dd96:	f004 fa69 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800dd9a:	bf00      	nop
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	20000940 	.word	0x20000940

0800dda4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800dda8:	4802      	ldr	r0, [pc, #8]	; (800ddb4 <TIM2_IRQHandler+0x10>)
 800ddaa:	f004 fa5f 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ddae:	bf00      	nop
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	20000980 	.word	0x20000980

0800ddb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800ddbc:	4802      	ldr	r0, [pc, #8]	; (800ddc8 <TIM3_IRQHandler+0x10>)
 800ddbe:	f004 fa55 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800ddc2:	bf00      	nop
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	200007c0 	.word	0x200007c0

0800ddcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800ddd0:	4802      	ldr	r0, [pc, #8]	; (800dddc <TIM4_IRQHandler+0x10>)
 800ddd2:	f004 fa4b 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800ddd6:	bf00      	nop
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	200006f8 	.word	0x200006f8

0800dde0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800dde4:	4802      	ldr	r0, [pc, #8]	; (800ddf0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800dde6:	f004 fa41 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800ddea:	bf00      	nop
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	200006b8 	.word	0x200006b8

0800ddf4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ddf8:	4802      	ldr	r0, [pc, #8]	; (800de04 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800ddfa:	f004 fa37 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800ddfe:	bf00      	nop
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	200006b8 	.word	0x200006b8

0800de08 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800de0c:	4802      	ldr	r0, [pc, #8]	; (800de18 <TIM8_CC_IRQHandler+0x10>)
 800de0e:	f004 fa2d 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800de12:	bf00      	nop
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	200006b8 	.word	0x200006b8

0800de1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800de20:	4802      	ldr	r0, [pc, #8]	; (800de2c <TIM5_IRQHandler+0x10>)
 800de22:	f004 fa23 	bl	801226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800de26:	bf00      	nop
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	20000780 	.word	0x20000780

0800de30 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800de34:	4802      	ldr	r0, [pc, #8]	; (800de40 <SPI3_IRQHandler+0x10>)
 800de36:	f003 fc3f 	bl	80116b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800de3a:	bf00      	nop
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	20000800 	.word	0x20000800

0800de44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800de48:	4802      	ldr	r0, [pc, #8]	; (800de54 <DMA2_Stream0_IRQHandler+0x10>)
 800de4a:	f001 fcd5 	bl	800f7f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800de4e:	bf00      	nop
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	200008e0 	.word	0x200008e0

0800de58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800de5c:	4802      	ldr	r0, [pc, #8]	; (800de68 <DMA2_Stream2_IRQHandler+0x10>)
 800de5e:	f001 fccb 	bl	800f7f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800de62:	bf00      	nop
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	200009c0 	.word	0x200009c0

0800de6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800de6c:	b480      	push	{r7}
 800de6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800de70:	4b08      	ldr	r3, [pc, #32]	; (800de94 <SystemInit+0x28>)
 800de72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de76:	4a07      	ldr	r2, [pc, #28]	; (800de94 <SystemInit+0x28>)
 800de78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800de80:	4b04      	ldr	r3, [pc, #16]	; (800de94 <SystemInit+0x28>)
 800de82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800de86:	609a      	str	r2, [r3, #8]
#endif
}
 800de88:	bf00      	nop
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	e000ed00 	.word	0xe000ed00

0800de98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b086      	sub	sp, #24
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dea4:	2300      	movs	r3, #0
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e00a      	b.n	800dec0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800deaa:	f7fe fda5 	bl	800c9f8 <__io_getchar>
 800deae:	4601      	mov	r1, r0
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	1c5a      	adds	r2, r3, #1
 800deb4:	60ba      	str	r2, [r7, #8]
 800deb6:	b2ca      	uxtb	r2, r1
 800deb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	3301      	adds	r3, #1
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	697a      	ldr	r2, [r7, #20]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	dbf0      	blt.n	800deaa <_read+0x12>
	}

return len;
 800dec8:	687b      	ldr	r3, [r7, #4]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3718      	adds	r7, #24
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b086      	sub	sp, #24
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	60f8      	str	r0, [r7, #12]
 800deda:	60b9      	str	r1, [r7, #8]
 800dedc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dede:	2300      	movs	r3, #0
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	e009      	b.n	800def8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	1c5a      	adds	r2, r3, #1
 800dee8:	60ba      	str	r2, [r7, #8]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	4618      	mov	r0, r3
 800deee:	f7fe fd71 	bl	800c9d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	3301      	adds	r3, #1
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	697a      	ldr	r2, [r7, #20]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	429a      	cmp	r2, r3
 800defe:	dbf1      	blt.n	800dee4 <_write+0x12>
	}
	return len;
 800df00:	687b      	ldr	r3, [r7, #4]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3718      	adds	r7, #24
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <_close>:

int _close(int file)
{
 800df0a:	b480      	push	{r7}
 800df0c:	b083      	sub	sp, #12
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
	return -1;
 800df12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800df22:	b480      	push	{r7}
 800df24:	b083      	sub	sp, #12
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800df32:	605a      	str	r2, [r3, #4]
	return 0;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	370c      	adds	r7, #12
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <_isatty>:

int _isatty(int file)
{
 800df42:	b480      	push	{r7}
 800df44:	b083      	sub	sp, #12
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
	return 1;
 800df4a:	2301      	movs	r3, #1
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
	return 0;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3714      	adds	r7, #20
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
	...

0800df74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800df7c:	4a14      	ldr	r2, [pc, #80]	; (800dfd0 <_sbrk+0x5c>)
 800df7e:	4b15      	ldr	r3, [pc, #84]	; (800dfd4 <_sbrk+0x60>)
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800df88:	4b13      	ldr	r3, [pc, #76]	; (800dfd8 <_sbrk+0x64>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d102      	bne.n	800df96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800df90:	4b11      	ldr	r3, [pc, #68]	; (800dfd8 <_sbrk+0x64>)
 800df92:	4a12      	ldr	r2, [pc, #72]	; (800dfdc <_sbrk+0x68>)
 800df94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800df96:	4b10      	ldr	r3, [pc, #64]	; (800dfd8 <_sbrk+0x64>)
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4413      	add	r3, r2
 800df9e:	693a      	ldr	r2, [r7, #16]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d207      	bcs.n	800dfb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dfa4:	f005 feee 	bl	8013d84 <__errno>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	230c      	movs	r3, #12
 800dfac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800dfae:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb2:	e009      	b.n	800dfc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dfb4:	4b08      	ldr	r3, [pc, #32]	; (800dfd8 <_sbrk+0x64>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dfba:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <_sbrk+0x64>)
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	4a05      	ldr	r2, [pc, #20]	; (800dfd8 <_sbrk+0x64>)
 800dfc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	20020000 	.word	0x20020000
 800dfd4:	00000400 	.word	0x00000400
 800dfd8:	200003bc 	.word	0x200003bc
 800dfdc:	20000a60 	.word	0x20000a60

0800dfe0 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800dfe4:	2203      	movs	r2, #3
 800dfe6:	490a      	ldr	r1, [pc, #40]	; (800e010 <ADCStart+0x30>)
 800dfe8:	480a      	ldr	r0, [pc, #40]	; (800e014 <ADCStart+0x34>)
 800dfea:	f000 fd4d 	bl	800ea88 <HAL_ADC_Start_DMA>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <ADCStart+0x18>
	{
		Error_Handler();
 800dff4:	f7ff fae8 	bl	800d5c8 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800dff8:	2202      	movs	r2, #2
 800dffa:	4907      	ldr	r1, [pc, #28]	; (800e018 <ADCStart+0x38>)
 800dffc:	4807      	ldr	r0, [pc, #28]	; (800e01c <ADCStart+0x3c>)
 800dffe:	f000 fd43 	bl	800ea88 <HAL_ADC_Start_DMA>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <ADCStart+0x2c>
	{
		Error_Handler();
 800e008:	f7ff fade 	bl	800d5c8 <Error_Handler>
	}

}
 800e00c:	bf00      	nop
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	200003c0 	.word	0x200003c0
 800e014:	20000858 	.word	0x20000858
 800e018:	200003cc 	.word	0x200003cc
 800e01c:	20000738 	.word	0x20000738

0800e020 <ADCStop>:
void ADCStop()
{
 800e020:	b580      	push	{r7, lr}
 800e022:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800e024:	480e      	ldr	r0, [pc, #56]	; (800e060 <ADCStop+0x40>)
 800e026:	f000 fe21 	bl	800ec6c <HAL_ADC_Stop_DMA>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d007      	beq.n	800e040 <ADCStop+0x20>
	{
		printf("な\r\n");
 800e030:	480c      	ldr	r0, [pc, #48]	; (800e064 <ADCStop+0x44>)
 800e032:	f006 fd97 	bl	8014b64 <puts>
		Error_Handler();
 800e036:	f7ff fac7 	bl	800d5c8 <Error_Handler>
		printf("に\r\n");
 800e03a:	480b      	ldr	r0, [pc, #44]	; (800e068 <ADCStop+0x48>)
 800e03c:	f006 fd92 	bl	8014b64 <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800e040:	480a      	ldr	r0, [pc, #40]	; (800e06c <ADCStop+0x4c>)
 800e042:	f000 fe13 	bl	800ec6c <HAL_ADC_Stop_DMA>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d007      	beq.n	800e05c <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800e04c:	4808      	ldr	r0, [pc, #32]	; (800e070 <ADCStop+0x50>)
 800e04e:	f006 fd89 	bl	8014b64 <puts>
		Error_Handler();
 800e052:	f7ff fab9 	bl	800d5c8 <Error_Handler>
		printf("ね\r\n");
 800e056:	4807      	ldr	r0, [pc, #28]	; (800e074 <ADCStop+0x54>)
 800e058:	f006 fd84 	bl	8014b64 <puts>
	}
}
 800e05c:	bf00      	nop
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	20000858 	.word	0x20000858
 800e064:	0801915c 	.word	0x0801915c
 800e068:	08019164 	.word	0x08019164
 800e06c:	20000738 	.word	0x20000738
 800e070:	0801916c 	.word	0x0801916c
 800e074:	08019174 	.word	0x08019174

0800e078 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800e078:	b480      	push	{r7}
 800e07a:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800e07c:	4b05      	ldr	r3, [pc, #20]	; (800e094 <FLASH_Unlock+0x1c>)
 800e07e:	4a06      	ldr	r2, [pc, #24]	; (800e098 <FLASH_Unlock+0x20>)
 800e080:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800e082:	4b04      	ldr	r3, [pc, #16]	; (800e094 <FLASH_Unlock+0x1c>)
 800e084:	4a05      	ldr	r2, [pc, #20]	; (800e09c <FLASH_Unlock+0x24>)
 800e086:	605a      	str	r2, [r3, #4]
}
 800e088:	bf00      	nop
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	40023c00 	.word	0x40023c00
 800e098:	45670123 	.word	0x45670123
 800e09c:	cdef89ab 	.word	0xcdef89ab

0800e0a0 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800e0a4:	4b05      	ldr	r3, [pc, #20]	; (800e0bc <FLASH_Lock+0x1c>)
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	4a04      	ldr	r2, [pc, #16]	; (800e0bc <FLASH_Lock+0x1c>)
 800e0aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0ae:	6113      	str	r3, [r2, #16]

}
 800e0b0:	bf00      	nop
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop
 800e0bc:	40023c00 	.word	0x40023c00

0800e0c0 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800e0c4:	bf00      	nop
 800e0c6:	4b05      	ldr	r3, [pc, #20]	; (800e0dc <FLASH_WaitBusy+0x1c>)
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1f9      	bne.n	800e0c6 <FLASH_WaitBusy+0x6>
}
 800e0d2:	bf00      	nop
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr
 800e0dc:	40023c00 	.word	0x40023c00

0800e0e0 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800e0ec:	f7ff ffc4 	bl	800e078 <FLASH_Unlock>

	FLASH_WaitBusy();
 800e0f0:	f7ff ffe6 	bl	800e0c0 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800e0f4:	4b0e      	ldr	r3, [pc, #56]	; (800e130 <FLASH_Write_Word_F+0x50>)
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	4a0d      	ldr	r2, [pc, #52]	; (800e130 <FLASH_Write_Word_F+0x50>)
 800e0fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e0fe:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800e100:	4b0b      	ldr	r3, [pc, #44]	; (800e130 <FLASH_Write_Word_F+0x50>)
 800e102:	691b      	ldr	r3, [r3, #16]
 800e104:	4a0a      	ldr	r2, [pc, #40]	; (800e130 <FLASH_Write_Word_F+0x50>)
 800e106:	f043 0301 	orr.w	r3, r3, #1
 800e10a:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	683a      	ldr	r2, [r7, #0]
 800e110:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800e112:	f7ff ffd5 	bl	800e0c0 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800e116:	4b06      	ldr	r3, [pc, #24]	; (800e130 <FLASH_Write_Word_F+0x50>)
 800e118:	691b      	ldr	r3, [r3, #16]
 800e11a:	4a05      	ldr	r2, [pc, #20]	; (800e130 <FLASH_Write_Word_F+0x50>)
 800e11c:	f023 0301 	bic.w	r3, r3, #1
 800e120:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800e122:	f7ff ffbd 	bl	800e0a0 <FLASH_Lock>
}
 800e126:	bf00      	nop
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	40023c00 	.word	0x40023c00

0800e134 <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800e13e:	f7ff ff9b 	bl	800e078 <FLASH_Unlock>

	FLASH_WaitBusy();
 800e142:	f7ff ffbd 	bl	800e0c0 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800e146:	4b0f      	ldr	r3, [pc, #60]	; (800e184 <FLASH_Read_Word_F+0x50>)
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	4a0e      	ldr	r2, [pc, #56]	; (800e184 <FLASH_Read_Word_F+0x50>)
 800e14c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e150:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800e152:	4b0c      	ldr	r3, [pc, #48]	; (800e184 <FLASH_Read_Word_F+0x50>)
 800e154:	691b      	ldr	r3, [r3, #16]
 800e156:	4a0b      	ldr	r2, [pc, #44]	; (800e184 <FLASH_Read_Word_F+0x50>)
 800e158:	f043 0301 	orr.w	r3, r3, #1
 800e15c:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800e166:	f7ff ffab 	bl	800e0c0 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800e16a:	4b06      	ldr	r3, [pc, #24]	; (800e184 <FLASH_Read_Word_F+0x50>)
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	4a05      	ldr	r2, [pc, #20]	; (800e184 <FLASH_Read_Word_F+0x50>)
 800e170:	f023 0301 	bic.w	r3, r3, #1
 800e174:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800e176:	f7ff ff93 	bl	800e0a0 <FLASH_Lock>
}
 800e17a:	bf00      	nop
 800e17c:	3708      	adds	r7, #8
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	40023c00 	.word	0x40023c00

0800e188 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800e18e:	f001 fe4f 	bl	800fe30 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800e192:	2300      	movs	r3, #0
 800e194:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800e196:	2309      	movs	r3, #9
 800e198:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800e19a:	2302      	movs	r3, #2
 800e19c:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800e1a2:	1d3a      	adds	r2, r7, #4
 800e1a4:	f107 0308 	add.w	r3, r7, #8
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f001 ff08 	bl	800ffc0 <HAL_FLASHEx_Erase>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800e1b4:	f001 fe5e 	bl	800fe74 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800e1b8:	7ffb      	ldrb	r3, [r7, #31]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d105      	bne.n	800e1ca <Flash_clear_sector9+0x42>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c4:	d101      	bne.n	800e1ca <Flash_clear_sector9+0x42>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e000      	b.n	800e1cc <Flash_clear_sector9+0x44>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f003 0301 	and.w	r3, r3, #1
 800e1d0:	b2db      	uxtb	r3, r3
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3720      	adds	r7, #32
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
	...

0800e1dc <read_byte>:
		Error_Handler();
		printf("エラー2\r\n");
	}
	printf("ok\r\n");
}
inline uint8_t read_byte( uint8_t reg ) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 800e1e6:	79fb      	ldrb	r3, [r7, #7]
 800e1e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	2104      	movs	r1, #4
 800e1f4:	480d      	ldr	r0, [pc, #52]	; (800e22c <read_byte+0x50>)
 800e1f6:	f002 f99f 	bl	8010538 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e1fa:	f107 010f 	add.w	r1, r7, #15
 800e1fe:	2364      	movs	r3, #100	; 0x64
 800e200:	2201      	movs	r2, #1
 800e202:	480b      	ldr	r0, [pc, #44]	; (800e230 <read_byte+0x54>)
 800e204:	f002 fe78 	bl	8010ef8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800e208:	f107 010e 	add.w	r1, r7, #14
 800e20c:	2364      	movs	r3, #100	; 0x64
 800e20e:	2201      	movs	r2, #1
 800e210:	4807      	ldr	r0, [pc, #28]	; (800e230 <read_byte+0x54>)
 800e212:	f002 ffa5 	bl	8011160 <HAL_SPI_Receive>
	CS_SET;
 800e216:	2201      	movs	r2, #1
 800e218:	2104      	movs	r1, #4
 800e21a:	4804      	ldr	r0, [pc, #16]	; (800e22c <read_byte+0x50>)
 800e21c:	f002 f98c 	bl	8010538 <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 800e220:	7bbb      	ldrb	r3, [r7, #14]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	40020c00 	.word	0x40020c00
 800e230:	20000800 	.word	0x20000800

0800e234 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	4603      	mov	r3, r0
 800e23c:	460a      	mov	r2, r1
 800e23e:	71fb      	strb	r3, [r7, #7]
 800e240:	4613      	mov	r3, r2
 800e242:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800e244:	79fb      	ldrb	r3, [r7, #7]
 800e246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800e24e:	2200      	movs	r2, #0
 800e250:	2104      	movs	r1, #4
 800e252:	480c      	ldr	r0, [pc, #48]	; (800e284 <write_byte+0x50>)
 800e254:	f002 f970 	bl	8010538 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e258:	f107 010f 	add.w	r1, r7, #15
 800e25c:	2364      	movs	r3, #100	; 0x64
 800e25e:	2201      	movs	r2, #1
 800e260:	4809      	ldr	r0, [pc, #36]	; (800e288 <write_byte+0x54>)
 800e262:	f002 fe49 	bl	8010ef8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e266:	1db9      	adds	r1, r7, #6
 800e268:	2364      	movs	r3, #100	; 0x64
 800e26a:	2201      	movs	r2, #1
 800e26c:	4806      	ldr	r0, [pc, #24]	; (800e288 <write_byte+0x54>)
 800e26e:	f002 fe43 	bl	8010ef8 <HAL_SPI_Transmit>
	CS_SET;
 800e272:	2201      	movs	r2, #1
 800e274:	2104      	movs	r1, #4
 800e276:	4803      	ldr	r0, [pc, #12]	; (800e284 <write_byte+0x50>)
 800e278:	f002 f95e 	bl	8010538 <HAL_GPIO_WritePin>
}
 800e27c:	bf00      	nop
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	40020c00 	.word	0x40020c00
 800e288:	20000800 	.word	0x20000800

0800e28c <IMU_init>:

uint8_t IMU_init() {
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800e292:	2000      	movs	r0, #0
 800e294:	f7ff ffa2 	bl	800e1dc <read_byte>
 800e298:	4603      	mov	r3, r0
 800e29a:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800e29c:	79bb      	ldrb	r3, [r7, #6]
 800e29e:	2be0      	cmp	r3, #224	; 0xe0
 800e2a0:	d119      	bne.n	800e2d6 <IMU_init+0x4a>
		ret = 1;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	2006      	movs	r0, #6
 800e2aa:	f7ff ffc3 	bl	800e234 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800e2ae:	2110      	movs	r1, #16
 800e2b0:	2003      	movs	r0, #3
 800e2b2:	f7ff ffbf 	bl	800e234 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800e2b6:	2120      	movs	r1, #32
 800e2b8:	207f      	movs	r0, #127	; 0x7f
 800e2ba:	f7ff ffbb 	bl	800e234 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800e2be:	2117      	movs	r1, #23
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	f7ff ffb7 	bl	800e234 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 800e2c6:	2106      	movs	r1, #6
 800e2c8:	2014      	movs	r0, #20
 800e2ca:	f7ff ffb3 	bl	800e234 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	207f      	movs	r0, #127	; 0x7f
 800e2d2:	f7ff ffaf 	bl	800e234 <write_byte>
	}
	return ret;
 800e2d6:	79fb      	ldrb	r3, [r7, #7]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800e2e4:	213c      	movs	r1, #60	; 0x3c
 800e2e6:	4804      	ldr	r0, [pc, #16]	; (800e2f8 <EncoderStart+0x18>)
 800e2e8:	f003 ff42 	bl	8012170 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e2ec:	213c      	movs	r1, #60	; 0x3c
 800e2ee:	4803      	ldr	r0, [pc, #12]	; (800e2fc <EncoderStart+0x1c>)
 800e2f0:	f003 ff3e 	bl	8012170 <HAL_TIM_Encoder_Start>
}
 800e2f4:	bf00      	nop
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	200007c0 	.word	0x200007c0
 800e2fc:	200006f8 	.word	0x200006f8

0800e300 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800e300:	b580      	push	{r7, lr}
 800e302:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800e304:	213c      	movs	r1, #60	; 0x3c
 800e306:	4804      	ldr	r0, [pc, #16]	; (800e318 <EncoderStop+0x18>)
 800e308:	f003 ff69 	bl	80121de <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800e30c:	213c      	movs	r1, #60	; 0x3c
 800e30e:	4803      	ldr	r0, [pc, #12]	; (800e31c <EncoderStop+0x1c>)
 800e310:	f003 ff65 	bl	80121de <HAL_TIM_Encoder_Stop>
}
 800e314:	bf00      	nop
 800e316:	bd80      	pop	{r7, pc}
 800e318:	200007c0 	.word	0x200007c0
 800e31c:	200006f8 	.word	0x200006f8

0800e320 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800e320:	b580      	push	{r7, lr}
 800e322:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800e324:	2100      	movs	r1, #0
 800e326:	4804      	ldr	r0, [pc, #16]	; (800e338 <EmitterON+0x18>)
 800e328:	f003 fca6 	bl	8011c78 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e32c:	2100      	movs	r1, #0
 800e32e:	4802      	ldr	r0, [pc, #8]	; (800e338 <EmitterON+0x18>)
 800e330:	f004 fdb9 	bl	8012ea6 <HAL_TIMEx_OCN_Start_IT>

}
 800e334:	bf00      	nop
 800e336:	bd80      	pop	{r7, pc}
 800e338:	200006b8 	.word	0x200006b8

0800e33c <EmitterOFF>:
void EmitterOFF()
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800e340:	2100      	movs	r1, #0
 800e342:	4804      	ldr	r0, [pc, #16]	; (800e354 <EmitterOFF+0x18>)
 800e344:	f003 fd1c 	bl	8011d80 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e348:	2100      	movs	r1, #0
 800e34a:	4802      	ldr	r0, [pc, #8]	; (800e354 <EmitterOFF+0x18>)
 800e34c:	f004 fe00 	bl	8012f50 <HAL_TIMEx_OCN_Stop_IT>

}
 800e350:	bf00      	nop
 800e352:	bd80      	pop	{r7, pc}
 800e354:	200006b8 	.word	0x200006b8

0800e358 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b07      	cmp	r3, #7
 800e364:	f200 80ac 	bhi.w	800e4c0 <ChangeLED+0x168>
 800e368:	a201      	add	r2, pc, #4	; (adr r2, 800e370 <ChangeLED+0x18>)
 800e36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e36e:	bf00      	nop
 800e370:	0800e391 	.word	0x0800e391
 800e374:	0800e3b7 	.word	0x0800e3b7
 800e378:	0800e3dd 	.word	0x0800e3dd
 800e37c:	0800e403 	.word	0x0800e403
 800e380:	0800e429 	.word	0x0800e429
 800e384:	0800e44f 	.word	0x0800e44f
 800e388:	0800e475 	.word	0x0800e475
 800e38c:	0800e49b 	.word	0x0800e49b
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e390:	2200      	movs	r2, #0
 800e392:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e396:	484d      	ldr	r0, [pc, #308]	; (800e4cc <ChangeLED+0x174>)
 800e398:	f002 f8ce 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e39c:	2200      	movs	r2, #0
 800e39e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3a2:	484a      	ldr	r0, [pc, #296]	; (800e4cc <ChangeLED+0x174>)
 800e3a4:	f002 f8c8 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3ae:	4848      	ldr	r0, [pc, #288]	; (800e4d0 <ChangeLED+0x178>)
 800e3b0:	f002 f8c2 	bl	8010538 <HAL_GPIO_WritePin>
		break;
 800e3b4:	e085      	b.n	800e4c2 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3bc:	4843      	ldr	r0, [pc, #268]	; (800e4cc <ChangeLED+0x174>)
 800e3be:	f002 f8bb 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3c8:	4840      	ldr	r0, [pc, #256]	; (800e4cc <ChangeLED+0x174>)
 800e3ca:	f002 f8b5 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3d4:	483e      	ldr	r0, [pc, #248]	; (800e4d0 <ChangeLED+0x178>)
 800e3d6:	f002 f8af 	bl	8010538 <HAL_GPIO_WritePin>
		break;
 800e3da:	e072      	b.n	800e4c2 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3e2:	483a      	ldr	r0, [pc, #232]	; (800e4cc <ChangeLED+0x174>)
 800e3e4:	f002 f8a8 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3ee:	4837      	ldr	r0, [pc, #220]	; (800e4cc <ChangeLED+0x174>)
 800e3f0:	f002 f8a2 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3fa:	4835      	ldr	r0, [pc, #212]	; (800e4d0 <ChangeLED+0x178>)
 800e3fc:	f002 f89c 	bl	8010538 <HAL_GPIO_WritePin>

		break;
 800e400:	e05f      	b.n	800e4c2 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e402:	2201      	movs	r2, #1
 800e404:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e408:	4830      	ldr	r0, [pc, #192]	; (800e4cc <ChangeLED+0x174>)
 800e40a:	f002 f895 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e40e:	2201      	movs	r2, #1
 800e410:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e414:	482d      	ldr	r0, [pc, #180]	; (800e4cc <ChangeLED+0x174>)
 800e416:	f002 f88f 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e41a:	2200      	movs	r2, #0
 800e41c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e420:	482b      	ldr	r0, [pc, #172]	; (800e4d0 <ChangeLED+0x178>)
 800e422:	f002 f889 	bl	8010538 <HAL_GPIO_WritePin>
		break;
 800e426:	e04c      	b.n	800e4c2 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e428:	2200      	movs	r2, #0
 800e42a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e42e:	4827      	ldr	r0, [pc, #156]	; (800e4cc <ChangeLED+0x174>)
 800e430:	f002 f882 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e434:	2200      	movs	r2, #0
 800e436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e43a:	4824      	ldr	r0, [pc, #144]	; (800e4cc <ChangeLED+0x174>)
 800e43c:	f002 f87c 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e440:	2201      	movs	r2, #1
 800e442:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e446:	4822      	ldr	r0, [pc, #136]	; (800e4d0 <ChangeLED+0x178>)
 800e448:	f002 f876 	bl	8010538 <HAL_GPIO_WritePin>
		break;
 800e44c:	e039      	b.n	800e4c2 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e44e:	2201      	movs	r2, #1
 800e450:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e454:	481d      	ldr	r0, [pc, #116]	; (800e4cc <ChangeLED+0x174>)
 800e456:	f002 f86f 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e45a:	2200      	movs	r2, #0
 800e45c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e460:	481a      	ldr	r0, [pc, #104]	; (800e4cc <ChangeLED+0x174>)
 800e462:	f002 f869 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e466:	2201      	movs	r2, #1
 800e468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e46c:	4818      	ldr	r0, [pc, #96]	; (800e4d0 <ChangeLED+0x178>)
 800e46e:	f002 f863 	bl	8010538 <HAL_GPIO_WritePin>
		break;
 800e472:	e026      	b.n	800e4c2 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e474:	2200      	movs	r2, #0
 800e476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e47a:	4814      	ldr	r0, [pc, #80]	; (800e4cc <ChangeLED+0x174>)
 800e47c:	f002 f85c 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e480:	2201      	movs	r2, #1
 800e482:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e486:	4811      	ldr	r0, [pc, #68]	; (800e4cc <ChangeLED+0x174>)
 800e488:	f002 f856 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e48c:	2201      	movs	r2, #1
 800e48e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e492:	480f      	ldr	r0, [pc, #60]	; (800e4d0 <ChangeLED+0x178>)
 800e494:	f002 f850 	bl	8010538 <HAL_GPIO_WritePin>

		break;
 800e498:	e013      	b.n	800e4c2 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e49a:	2201      	movs	r2, #1
 800e49c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e4a0:	480a      	ldr	r0, [pc, #40]	; (800e4cc <ChangeLED+0x174>)
 800e4a2:	f002 f849 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e4ac:	4807      	ldr	r0, [pc, #28]	; (800e4cc <ChangeLED+0x174>)
 800e4ae:	f002 f843 	bl	8010538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e4b8:	4805      	ldr	r0, [pc, #20]	; (800e4d0 <ChangeLED+0x178>)
 800e4ba:	f002 f83d 	bl	8010538 <HAL_GPIO_WritePin>

		break;
 800e4be:	e000      	b.n	800e4c2 <ChangeLED+0x16a>
	default: break;
 800e4c0:	bf00      	nop

	}
}
 800e4c2:	bf00      	nop
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	40020800 	.word	0x40020800
 800e4d0:	40020400 	.word	0x40020400

0800e4d4 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e4d8:	210c      	movs	r1, #12
 800e4da:	4809      	ldr	r0, [pc, #36]	; (800e500 <Motor_PWM_Start+0x2c>)
 800e4dc:	f003 fd20 	bl	8011f20 <HAL_TIM_PWM_Start>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800e4e6:	f7ff f86f 	bl	800d5c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e4ea:	2104      	movs	r1, #4
 800e4ec:	4805      	ldr	r0, [pc, #20]	; (800e504 <Motor_PWM_Start+0x30>)
 800e4ee:	f003 fd17 	bl	8011f20 <HAL_TIM_PWM_Start>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800e4f8:	f7ff f866 	bl	800d5c8 <Error_Handler>
  }
#endif
}
 800e4fc:	bf00      	nop
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	20000980 	.word	0x20000980
 800e504:	20000780 	.word	0x20000780

0800e508 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800e508:	b580      	push	{r7, lr}
 800e50a:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e50c:	210c      	movs	r1, #12
 800e50e:	4809      	ldr	r0, [pc, #36]	; (800e534 <Motor_PWM_Stop+0x2c>)
 800e510:	f003 fd44 	bl	8011f9c <HAL_TIM_PWM_Stop>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800e51a:	f7ff f855 	bl	800d5c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e51e:	2104      	movs	r1, #4
 800e520:	4805      	ldr	r0, [pc, #20]	; (800e538 <Motor_PWM_Stop+0x30>)
 800e522:	f003 fd3b 	bl	8011f9c <HAL_TIM_PWM_Stop>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d001      	beq.n	800e530 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800e52c:	f7ff f84c 	bl	800d5c8 <Error_Handler>
  }
#endif
}
 800e530:	bf00      	nop
 800e532:	bd80      	pop	{r7, pc}
 800e534:	20000980 	.word	0x20000980
 800e538:	20000780 	.word	0x20000780
 800e53c:	00000000 	.word	0x00000000

0800e540 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	dd05      	ble.n	800e55c <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800e550:	2201      	movs	r2, #1
 800e552:	2104      	movs	r1, #4
 800e554:	4828      	ldr	r0, [pc, #160]	; (800e5f8 <Motor_Switch+0xb8>)
 800e556:	f001 ffef 	bl	8010538 <HAL_GPIO_WritePin>
 800e55a:	e00a      	b.n	800e572 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	da07      	bge.n	800e572 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800e562:	2200      	movs	r2, #0
 800e564:	2104      	movs	r1, #4
 800e566:	4824      	ldr	r0, [pc, #144]	; (800e5f8 <Motor_Switch+0xb8>)
 800e568:	f001 ffe6 	bl	8010538 <HAL_GPIO_WritePin>
		left = -left;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	425b      	negs	r3, r3
 800e570:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	dd05      	ble.n	800e584 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800e578:	2200      	movs	r2, #0
 800e57a:	2101      	movs	r1, #1
 800e57c:	481e      	ldr	r0, [pc, #120]	; (800e5f8 <Motor_Switch+0xb8>)
 800e57e:	f001 ffdb 	bl	8010538 <HAL_GPIO_WritePin>
 800e582:	e00a      	b.n	800e59a <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	da07      	bge.n	800e59a <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800e58a:	2201      	movs	r2, #1
 800e58c:	2101      	movs	r1, #1
 800e58e:	481a      	ldr	r0, [pc, #104]	; (800e5f8 <Motor_Switch+0xb8>)
 800e590:	f001 ffd2 	bl	8010538 <HAL_GPIO_WritePin>
	  	right = -right;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	425b      	negs	r3, r3
 800e598:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7f9 fefa 	bl	8008394 <__aeabi_i2d>
 800e5a0:	a313      	add	r3, pc, #76	; (adr r3, 800e5f0 <Motor_Switch+0xb0>)
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	f7fa f9ef 	bl	8008988 <__aeabi_dcmpgt>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d002      	beq.n	800e5b6 <Motor_Switch+0x76>
 800e5b0:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800e5b4:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800e5b6:	6838      	ldr	r0, [r7, #0]
 800e5b8:	f7f9 feec 	bl	8008394 <__aeabi_i2d>
 800e5bc:	a30c      	add	r3, pc, #48	; (adr r3, 800e5f0 <Motor_Switch+0xb0>)
 800e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c2:	f7fa f9e1 	bl	8008988 <__aeabi_dcmpgt>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <Motor_Switch+0x92>
 800e5cc:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800e5d0:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e5d2:	4b0a      	ldr	r3, [pc, #40]	; (800e5fc <Motor_Switch+0xbc>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e5da:	4b09      	ldr	r3, [pc, #36]	; (800e600 <Motor_Switch+0xc0>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	683a      	ldr	r2, [r7, #0]
 800e5e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e5e2:	bf00      	nop
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w
 800e5f0:	00000000 	.word	0x00000000
 800e5f4:	40a3b000 	.word	0x40a3b000
 800e5f8:	40020000 	.word	0x40020000
 800e5fc:	20000980 	.word	0x20000980
 800e600:	20000780 	.word	0x20000780

0800e604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e63c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e608:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e60a:	e003      	b.n	800e614 <LoopCopyDataInit>

0800e60c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e60c:	4b0c      	ldr	r3, [pc, #48]	; (800e640 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e60e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e610:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e612:	3104      	adds	r1, #4

0800e614 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e614:	480b      	ldr	r0, [pc, #44]	; (800e644 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e616:	4b0c      	ldr	r3, [pc, #48]	; (800e648 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e618:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e61a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e61c:	d3f6      	bcc.n	800e60c <CopyDataInit>
  ldr  r2, =_sbss
 800e61e:	4a0b      	ldr	r2, [pc, #44]	; (800e64c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e620:	e002      	b.n	800e628 <LoopFillZerobss>

0800e622 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e622:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e624:	f842 3b04 	str.w	r3, [r2], #4

0800e628 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e628:	4b09      	ldr	r3, [pc, #36]	; (800e650 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e62a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e62c:	d3f9      	bcc.n	800e622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e62e:	f7ff fc1d 	bl	800de6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e632:	f005 fbad 	bl	8013d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e636:	f7fe f9f7 	bl	800ca28 <main>
  bx  lr    
 800e63a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e63c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e640:	080194f4 	.word	0x080194f4
  ldr  r0, =_sdata
 800e644:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e648:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 800e64c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 800e650:	20000a60 	.word	0x20000a60

0800e654 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e654:	e7fe      	b.n	800e654 <CAN1_RX0_IRQHandler>
	...

0800e658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e65c:	4b0e      	ldr	r3, [pc, #56]	; (800e698 <HAL_Init+0x40>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a0d      	ldr	r2, [pc, #52]	; (800e698 <HAL_Init+0x40>)
 800e662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e668:	4b0b      	ldr	r3, [pc, #44]	; (800e698 <HAL_Init+0x40>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a0a      	ldr	r2, [pc, #40]	; (800e698 <HAL_Init+0x40>)
 800e66e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e674:	4b08      	ldr	r3, [pc, #32]	; (800e698 <HAL_Init+0x40>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a07      	ldr	r2, [pc, #28]	; (800e698 <HAL_Init+0x40>)
 800e67a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e67e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e680:	2003      	movs	r0, #3
 800e682:	f000 fedf 	bl	800f444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e686:	2000      	movs	r0, #0
 800e688:	f000 f808 	bl	800e69c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e68c:	f7fe ffa0 	bl	800d5d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	40023c00 	.word	0x40023c00

0800e69c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e6a4:	4b12      	ldr	r3, [pc, #72]	; (800e6f0 <HAL_InitTick+0x54>)
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	4b12      	ldr	r3, [pc, #72]	; (800e6f4 <HAL_InitTick+0x58>)
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e6b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fef7 	bl	800f4ae <HAL_SYSTICK_Config>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e00e      	b.n	800e6e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2b0f      	cmp	r3, #15
 800e6ce:	d80a      	bhi.n	800e6e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	6879      	ldr	r1, [r7, #4]
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d8:	f000 febf 	bl	800f45a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e6dc:	4a06      	ldr	r2, [pc, #24]	; (800e6f8 <HAL_InitTick+0x5c>)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	e000      	b.n	800e6e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e6e6:	2301      	movs	r3, #1
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	20000018 	.word	0x20000018
 800e6f4:	20000020 	.word	0x20000020
 800e6f8:	2000001c 	.word	0x2000001c

0800e6fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e700:	4b06      	ldr	r3, [pc, #24]	; (800e71c <HAL_IncTick+0x20>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	461a      	mov	r2, r3
 800e706:	4b06      	ldr	r3, [pc, #24]	; (800e720 <HAL_IncTick+0x24>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4413      	add	r3, r2
 800e70c:	4a04      	ldr	r2, [pc, #16]	; (800e720 <HAL_IncTick+0x24>)
 800e70e:	6013      	str	r3, [r2, #0]
}
 800e710:	bf00      	nop
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	20000020 	.word	0x20000020
 800e720:	20000a38 	.word	0x20000a38

0800e724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e724:	b480      	push	{r7}
 800e726:	af00      	add	r7, sp, #0
  return uwTick;
 800e728:	4b03      	ldr	r3, [pc, #12]	; (800e738 <HAL_GetTick+0x14>)
 800e72a:	681b      	ldr	r3, [r3, #0]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	20000a38 	.word	0x20000a38

0800e73c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e744:	f7ff ffee 	bl	800e724 <HAL_GetTick>
 800e748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e754:	d005      	beq.n	800e762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e756:	4b09      	ldr	r3, [pc, #36]	; (800e77c <HAL_Delay+0x40>)
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	4413      	add	r3, r2
 800e760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e762:	bf00      	nop
 800e764:	f7ff ffde 	bl	800e724 <HAL_GetTick>
 800e768:	4602      	mov	r2, r0
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	1ad3      	subs	r3, r2, r3
 800e76e:	68fa      	ldr	r2, [r7, #12]
 800e770:	429a      	cmp	r2, r3
 800e772:	d8f7      	bhi.n	800e764 <HAL_Delay+0x28>
  {
  }
}
 800e774:	bf00      	nop
 800e776:	3710      	adds	r7, #16
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	20000020 	.word	0x20000020

0800e780 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e788:	2300      	movs	r3, #0
 800e78a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	e033      	b.n	800e7fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d109      	bne.n	800e7b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7fe ff44 	bl	800d62c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b6:	f003 0310 	and.w	r3, r3, #16
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d118      	bne.n	800e7f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e7c6:	f023 0302 	bic.w	r3, r3, #2
 800e7ca:	f043 0202 	orr.w	r2, r3, #2
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 fbde 	bl	800ef94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e2:	f023 0303 	bic.w	r3, r3, #3
 800e7e6:	f043 0201 	orr.w	r2, r3, #1
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	641a      	str	r2, [r3, #64]	; 0x40
 800e7ee:	e001      	b.n	800e7f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b084      	sub	sp, #16
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800e80e:	2300      	movs	r3, #0
 800e810:	60fb      	str	r3, [r7, #12]
 800e812:	2300      	movs	r3, #0
 800e814:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f003 0302 	and.w	r3, r3, #2
 800e820:	2b02      	cmp	r3, #2
 800e822:	bf0c      	ite	eq
 800e824:	2301      	moveq	r3, #1
 800e826:	2300      	movne	r3, #0
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	f003 0320 	and.w	r3, r3, #32
 800e836:	2b20      	cmp	r3, #32
 800e838:	bf0c      	ite	eq
 800e83a:	2301      	moveq	r3, #1
 800e83c:	2300      	movne	r3, #0
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d049      	beq.n	800e8dc <HAL_ADC_IRQHandler+0xd6>
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d046      	beq.n	800e8dc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e852:	f003 0310 	and.w	r3, r3, #16
 800e856:	2b00      	cmp	r3, #0
 800e858:	d105      	bne.n	800e866 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e85e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e870:	2b00      	cmp	r3, #0
 800e872:	d12b      	bne.n	800e8cc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d127      	bne.n	800e8cc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e882:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e886:	2b00      	cmp	r3, #0
 800e888:	d006      	beq.n	800e898 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e894:	2b00      	cmp	r3, #0
 800e896:	d119      	bne.n	800e8cc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	685a      	ldr	r2, [r3, #4]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f022 0220 	bic.w	r2, r2, #32
 800e8a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d105      	bne.n	800e8cc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c4:	f043 0201 	orr.w	r2, r3, #1
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 fa17 	bl	800ed00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f06f 0212 	mvn.w	r2, #18
 800e8da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f003 0304 	and.w	r3, r3, #4
 800e8e6:	2b04      	cmp	r3, #4
 800e8e8:	bf0c      	ite	eq
 800e8ea:	2301      	moveq	r3, #1
 800e8ec:	2300      	movne	r3, #0
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8fc:	2b80      	cmp	r3, #128	; 0x80
 800e8fe:	bf0c      	ite	eq
 800e900:	2301      	moveq	r3, #1
 800e902:	2300      	movne	r3, #0
 800e904:	b2db      	uxtb	r3, r3
 800e906:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d057      	beq.n	800e9be <HAL_ADC_IRQHandler+0x1b8>
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d054      	beq.n	800e9be <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e918:	f003 0310 	and.w	r3, r3, #16
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d105      	bne.n	800e92c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e924:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e936:	2b00      	cmp	r3, #0
 800e938:	d139      	bne.n	800e9ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e940:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800e944:	2b00      	cmp	r3, #0
 800e946:	d006      	beq.n	800e956 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800e952:	2b00      	cmp	r3, #0
 800e954:	d12b      	bne.n	800e9ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800e960:	2b00      	cmp	r3, #0
 800e962:	d124      	bne.n	800e9ae <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d11d      	bne.n	800e9ae <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800e976:	2b00      	cmp	r3, #0
 800e978:	d119      	bne.n	800e9ae <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	685a      	ldr	r2, [r3, #4]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e988:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e98e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e99a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d105      	bne.n	800e9ae <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9a6:	f043 0201 	orr.w	r2, r3, #1
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fc6e 	bl	800f290 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f06f 020c 	mvn.w	r2, #12
 800e9bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f003 0301 	and.w	r3, r3, #1
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	bf0c      	ite	eq
 800e9cc:	2301      	moveq	r3, #1
 800e9ce:	2300      	movne	r3, #0
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9de:	2b40      	cmp	r3, #64	; 0x40
 800e9e0:	bf0c      	ite	eq
 800e9e2:	2301      	moveq	r3, #1
 800e9e4:	2300      	movne	r3, #0
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d017      	beq.n	800ea20 <HAL_ADC_IRQHandler+0x21a>
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d014      	beq.n	800ea20 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f003 0301 	and.w	r3, r3, #1
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d10d      	bne.n	800ea20 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f000 f989 	bl	800ed28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f06f 0201 	mvn.w	r2, #1
 800ea1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f003 0320 	and.w	r3, r3, #32
 800ea2a:	2b20      	cmp	r3, #32
 800ea2c:	bf0c      	ite	eq
 800ea2e:	2301      	moveq	r3, #1
 800ea30:	2300      	movne	r3, #0
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ea40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea44:	bf0c      	ite	eq
 800ea46:	2301      	moveq	r3, #1
 800ea48:	2300      	movne	r3, #0
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d015      	beq.n	800ea80 <HAL_ADC_IRQHandler+0x27a>
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d012      	beq.n	800ea80 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea5e:	f043 0202 	orr.w	r2, r3, #2
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f06f 0220 	mvn.w	r2, #32
 800ea6e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 f963 	bl	800ed3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f06f 0220 	mvn.w	r2, #32
 800ea7e:	601a      	str	r2, [r3, #0]
  }
}
 800ea80:	bf00      	nop
 800ea82:	3710      	adds	r7, #16
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d101      	bne.n	800eaa6 <HAL_ADC_Start_DMA+0x1e>
 800eaa2:	2302      	movs	r3, #2
 800eaa4:	e0cc      	b.n	800ec40 <HAL_ADC_Start_DMA+0x1b8>
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	f003 0301 	and.w	r3, r3, #1
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d018      	beq.n	800eaee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	689a      	ldr	r2, [r3, #8]
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f042 0201 	orr.w	r2, r2, #1
 800eaca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800eacc:	4b5e      	ldr	r3, [pc, #376]	; (800ec48 <HAL_ADC_Start_DMA+0x1c0>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4a5e      	ldr	r2, [pc, #376]	; (800ec4c <HAL_ADC_Start_DMA+0x1c4>)
 800ead2:	fba2 2303 	umull	r2, r3, r2, r3
 800ead6:	0c9a      	lsrs	r2, r3, #18
 800ead8:	4613      	mov	r3, r2
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	4413      	add	r3, r2
 800eade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800eae0:	e002      	b.n	800eae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	3b01      	subs	r3, #1
 800eae6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1f9      	bne.n	800eae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	f003 0301 	and.w	r3, r3, #1
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	f040 80a0 	bne.w	800ec3e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800eb06:	f023 0301 	bic.w	r3, r3, #1
 800eb0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d007      	beq.n	800eb30 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800eb28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb3c:	d106      	bne.n	800eb4c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb42:	f023 0206 	bic.w	r2, r3, #6
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	645a      	str	r2, [r3, #68]	; 0x44
 800eb4a:	e002      	b.n	800eb52 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800eb5a:	4b3d      	ldr	r3, [pc, #244]	; (800ec50 <HAL_ADC_Start_DMA+0x1c8>)
 800eb5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb62:	4a3c      	ldr	r2, [pc, #240]	; (800ec54 <HAL_ADC_Start_DMA+0x1cc>)
 800eb64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6a:	4a3b      	ldr	r2, [pc, #236]	; (800ec58 <HAL_ADC_Start_DMA+0x1d0>)
 800eb6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb72:	4a3a      	ldr	r2, [pc, #232]	; (800ec5c <HAL_ADC_Start_DMA+0x1d4>)
 800eb74:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800eb7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	685a      	ldr	r2, [r3, #4]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800eb8e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	689a      	ldr	r2, [r3, #8]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb9e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	334c      	adds	r3, #76	; 0x4c
 800ebaa:	4619      	mov	r1, r3
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f000 fd38 	bl	800f624 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	f003 031f 	and.w	r3, r3, #31
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d12a      	bne.n	800ec16 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a26      	ldr	r2, [pc, #152]	; (800ec60 <HAL_ADC_Start_DMA+0x1d8>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d015      	beq.n	800ebf6 <HAL_ADC_Start_DMA+0x16e>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4a25      	ldr	r2, [pc, #148]	; (800ec64 <HAL_ADC_Start_DMA+0x1dc>)
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d105      	bne.n	800ebe0 <HAL_ADC_Start_DMA+0x158>
 800ebd4:	4b1e      	ldr	r3, [pc, #120]	; (800ec50 <HAL_ADC_Start_DMA+0x1c8>)
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	f003 031f 	and.w	r3, r3, #31
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00a      	beq.n	800ebf6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a20      	ldr	r2, [pc, #128]	; (800ec68 <HAL_ADC_Start_DMA+0x1e0>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d129      	bne.n	800ec3e <HAL_ADC_Start_DMA+0x1b6>
 800ebea:	4b19      	ldr	r3, [pc, #100]	; (800ec50 <HAL_ADC_Start_DMA+0x1c8>)
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	f003 031f 	and.w	r3, r3, #31
 800ebf2:	2b0f      	cmp	r3, #15
 800ebf4:	d823      	bhi.n	800ec3e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d11c      	bne.n	800ec3e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	689a      	ldr	r2, [r3, #8]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ec12:	609a      	str	r2, [r3, #8]
 800ec14:	e013      	b.n	800ec3e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a11      	ldr	r2, [pc, #68]	; (800ec60 <HAL_ADC_Start_DMA+0x1d8>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d10e      	bne.n	800ec3e <HAL_ADC_Start_DMA+0x1b6>
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d107      	bne.n	800ec3e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	689a      	ldr	r2, [r3, #8]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ec3c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3718      	adds	r7, #24
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	20000018 	.word	0x20000018
 800ec4c:	431bde83 	.word	0x431bde83
 800ec50:	40012300 	.word	0x40012300
 800ec54:	0800f18d 	.word	0x0800f18d
 800ec58:	0800f247 	.word	0x0800f247
 800ec5c:	0800f263 	.word	0x0800f263
 800ec60:	40012000 	.word	0x40012000
 800ec64:	40012100 	.word	0x40012100
 800ec68:	40012200 	.word	0x40012200

0800ec6c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d101      	bne.n	800ec86 <HAL_ADC_Stop_DMA+0x1a>
 800ec82:	2302      	movs	r3, #2
 800ec84:	e038      	b.n	800ecf8 <HAL_ADC_Stop_DMA+0x8c>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	689a      	ldr	r2, [r3, #8]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f022 0201 	bic.w	r2, r2, #1
 800ec9c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	f003 0301 	and.w	r3, r3, #1
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d120      	bne.n	800ecee <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	689a      	ldr	r2, [r3, #8]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ecba:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 fd07 	bl	800f6d4 <HAL_DMA_Abort>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	685a      	ldr	r2, [r3, #4]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ecd8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ece2:	f023 0301 	bic.w	r3, r3, #1
 800ece6:	f043 0201 	orr.w	r2, r3, #1
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800ecf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800ed08:	bf00      	nop
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d101      	bne.n	800ed6c <HAL_ADC_ConfigChannel+0x1c>
 800ed68:	2302      	movs	r3, #2
 800ed6a:	e105      	b.n	800ef78 <HAL_ADC_ConfigChannel+0x228>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b09      	cmp	r3, #9
 800ed7a:	d925      	bls.n	800edc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	68d9      	ldr	r1, [r3, #12]
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	461a      	mov	r2, r3
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	005b      	lsls	r3, r3, #1
 800ed8e:	4413      	add	r3, r2
 800ed90:	3b1e      	subs	r3, #30
 800ed92:	2207      	movs	r2, #7
 800ed94:	fa02 f303 	lsl.w	r3, r2, r3
 800ed98:	43da      	mvns	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	400a      	ands	r2, r1
 800eda0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	68d9      	ldr	r1, [r3, #12]
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	689a      	ldr	r2, [r3, #8]
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	4618      	mov	r0, r3
 800edb4:	4603      	mov	r3, r0
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4403      	add	r3, r0
 800edba:	3b1e      	subs	r3, #30
 800edbc:	409a      	lsls	r2, r3
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	430a      	orrs	r2, r1
 800edc4:	60da      	str	r2, [r3, #12]
 800edc6:	e022      	b.n	800ee0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	6919      	ldr	r1, [r3, #16]
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	461a      	mov	r2, r3
 800edd6:	4613      	mov	r3, r2
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	4413      	add	r3, r2
 800eddc:	2207      	movs	r2, #7
 800edde:	fa02 f303 	lsl.w	r3, r2, r3
 800ede2:	43da      	mvns	r2, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	400a      	ands	r2, r1
 800edea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	6919      	ldr	r1, [r3, #16]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	689a      	ldr	r2, [r3, #8]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	4618      	mov	r0, r3
 800edfe:	4603      	mov	r3, r0
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	4403      	add	r3, r0
 800ee04:	409a      	lsls	r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	430a      	orrs	r2, r1
 800ee0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	2b06      	cmp	r3, #6
 800ee14:	d824      	bhi.n	800ee60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	685a      	ldr	r2, [r3, #4]
 800ee20:	4613      	mov	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4413      	add	r3, r2
 800ee26:	3b05      	subs	r3, #5
 800ee28:	221f      	movs	r2, #31
 800ee2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee2e:	43da      	mvns	r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	400a      	ands	r2, r1
 800ee36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	4618      	mov	r0, r3
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	685a      	ldr	r2, [r3, #4]
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	3b05      	subs	r3, #5
 800ee52:	fa00 f203 	lsl.w	r2, r0, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	430a      	orrs	r2, r1
 800ee5c:	635a      	str	r2, [r3, #52]	; 0x34
 800ee5e:	e04c      	b.n	800eefa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	2b0c      	cmp	r3, #12
 800ee66:	d824      	bhi.n	800eeb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	4613      	mov	r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	4413      	add	r3, r2
 800ee78:	3b23      	subs	r3, #35	; 0x23
 800ee7a:	221f      	movs	r2, #31
 800ee7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee80:	43da      	mvns	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	400a      	ands	r2, r1
 800ee88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	4618      	mov	r0, r3
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	685a      	ldr	r2, [r3, #4]
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	4413      	add	r3, r2
 800eea2:	3b23      	subs	r3, #35	; 0x23
 800eea4:	fa00 f203 	lsl.w	r2, r0, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	430a      	orrs	r2, r1
 800eeae:	631a      	str	r2, [r3, #48]	; 0x30
 800eeb0:	e023      	b.n	800eefa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	685a      	ldr	r2, [r3, #4]
 800eebc:	4613      	mov	r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4413      	add	r3, r2
 800eec2:	3b41      	subs	r3, #65	; 0x41
 800eec4:	221f      	movs	r2, #31
 800eec6:	fa02 f303 	lsl.w	r3, r2, r3
 800eeca:	43da      	mvns	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	400a      	ands	r2, r1
 800eed2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	4618      	mov	r0, r3
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	685a      	ldr	r2, [r3, #4]
 800eee6:	4613      	mov	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4413      	add	r3, r2
 800eeec:	3b41      	subs	r3, #65	; 0x41
 800eeee:	fa00 f203 	lsl.w	r2, r0, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	430a      	orrs	r2, r1
 800eef8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800eefa:	4b22      	ldr	r3, [pc, #136]	; (800ef84 <HAL_ADC_ConfigChannel+0x234>)
 800eefc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4a21      	ldr	r2, [pc, #132]	; (800ef88 <HAL_ADC_ConfigChannel+0x238>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d109      	bne.n	800ef1c <HAL_ADC_ConfigChannel+0x1cc>
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b12      	cmp	r3, #18
 800ef0e:	d105      	bne.n	800ef1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a19      	ldr	r2, [pc, #100]	; (800ef88 <HAL_ADC_ConfigChannel+0x238>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d123      	bne.n	800ef6e <HAL_ADC_ConfigChannel+0x21e>
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b10      	cmp	r3, #16
 800ef2c:	d003      	beq.n	800ef36 <HAL_ADC_ConfigChannel+0x1e6>
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b11      	cmp	r3, #17
 800ef34:	d11b      	bne.n	800ef6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b10      	cmp	r3, #16
 800ef48:	d111      	bne.n	800ef6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ef4a:	4b10      	ldr	r3, [pc, #64]	; (800ef8c <HAL_ADC_ConfigChannel+0x23c>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a10      	ldr	r2, [pc, #64]	; (800ef90 <HAL_ADC_ConfigChannel+0x240>)
 800ef50:	fba2 2303 	umull	r2, r3, r2, r3
 800ef54:	0c9a      	lsrs	r2, r3, #18
 800ef56:	4613      	mov	r3, r2
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	4413      	add	r3, r2
 800ef5c:	005b      	lsls	r3, r3, #1
 800ef5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ef60:	e002      	b.n	800ef68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	3b01      	subs	r3, #1
 800ef66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1f9      	bne.n	800ef62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ef76:	2300      	movs	r3, #0
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3714      	adds	r7, #20
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	40012300 	.word	0x40012300
 800ef88:	40012000 	.word	0x40012000
 800ef8c:	20000018 	.word	0x20000018
 800ef90:	431bde83 	.word	0x431bde83

0800ef94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b085      	sub	sp, #20
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ef9c:	4b79      	ldr	r3, [pc, #484]	; (800f184 <ADC_Init+0x1f0>)
 800ef9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	685a      	ldr	r2, [r3, #4]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	431a      	orrs	r2, r3
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	685a      	ldr	r2, [r3, #4]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800efc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	6859      	ldr	r1, [r3, #4]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	691b      	ldr	r3, [r3, #16]
 800efd4:	021a      	lsls	r2, r3, #8
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	430a      	orrs	r2, r1
 800efdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	685a      	ldr	r2, [r3, #4]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800efec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	6859      	ldr	r1, [r3, #4]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	689a      	ldr	r2, [r3, #8]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	430a      	orrs	r2, r1
 800effe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	689a      	ldr	r2, [r3, #8]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f00e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	6899      	ldr	r1, [r3, #8]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	68da      	ldr	r2, [r3, #12]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	430a      	orrs	r2, r1
 800f020:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f026:	4a58      	ldr	r2, [pc, #352]	; (800f188 <ADC_Init+0x1f4>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d022      	beq.n	800f072 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	689a      	ldr	r2, [r3, #8]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f03a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	6899      	ldr	r1, [r3, #8]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	430a      	orrs	r2, r1
 800f04c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	689a      	ldr	r2, [r3, #8]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f05c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	6899      	ldr	r1, [r3, #8]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	430a      	orrs	r2, r1
 800f06e:	609a      	str	r2, [r3, #8]
 800f070:	e00f      	b.n	800f092 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	689a      	ldr	r2, [r3, #8]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	689a      	ldr	r2, [r3, #8]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f090:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	689a      	ldr	r2, [r3, #8]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f022 0202 	bic.w	r2, r2, #2
 800f0a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6899      	ldr	r1, [r3, #8]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	7e1b      	ldrb	r3, [r3, #24]
 800f0ac:	005a      	lsls	r2, r3, #1
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	430a      	orrs	r2, r1
 800f0b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d01b      	beq.n	800f0f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	685a      	ldr	r2, [r3, #4]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	685a      	ldr	r2, [r3, #4]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f0de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	6859      	ldr	r1, [r3, #4]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	035a      	lsls	r2, r3, #13
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	430a      	orrs	r2, r1
 800f0f4:	605a      	str	r2, [r3, #4]
 800f0f6:	e007      	b.n	800f108 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f106:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800f116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	69db      	ldr	r3, [r3, #28]
 800f122:	3b01      	subs	r3, #1
 800f124:	051a      	lsls	r2, r3, #20
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	430a      	orrs	r2, r1
 800f12c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	689a      	ldr	r2, [r3, #8]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f13c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	6899      	ldr	r1, [r3, #8]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f14a:	025a      	lsls	r2, r3, #9
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	430a      	orrs	r2, r1
 800f152:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	689a      	ldr	r2, [r3, #8]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6899      	ldr	r1, [r3, #8]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	695b      	ldr	r3, [r3, #20]
 800f16e:	029a      	lsls	r2, r3, #10
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	430a      	orrs	r2, r1
 800f176:	609a      	str	r2, [r3, #8]
}
 800f178:	bf00      	nop
 800f17a:	3714      	adds	r7, #20
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr
 800f184:	40012300 	.word	0x40012300
 800f188:	0f000001 	.word	0x0f000001

0800f18c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f198:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f19e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d13c      	bne.n	800f220 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d12b      	bne.n	800f218 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d127      	bne.n	800f218 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d006      	beq.n	800f1e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d119      	bne.n	800f218 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	685a      	ldr	r2, [r3, #4]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f022 0220 	bic.w	r2, r2, #32
 800f1f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d105      	bne.n	800f218 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f210:	f043 0201 	orr.w	r2, r3, #1
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	f7ff fd71 	bl	800ed00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800f21e:	e00e      	b.n	800f23e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f224:	f003 0310 	and.w	r3, r3, #16
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d003      	beq.n	800f234 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f7ff fd85 	bl	800ed3c <HAL_ADC_ErrorCallback>
}
 800f232:	e004      	b.n	800f23e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	4798      	blx	r3
}
 800f23e:	bf00      	nop
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f252:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f7ff fd5d 	bl	800ed14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f25a:	bf00      	nop
 800f25c:	3710      	adds	r7, #16
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b084      	sub	sp, #16
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f26e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2240      	movs	r2, #64	; 0x40
 800f274:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f27a:	f043 0204 	orr.w	r2, r3, #4
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7ff fd5a 	bl	800ed3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f288:	bf00      	nop
 800f28a:	3710      	adds	r7, #16
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800f298:	bf00      	nop
 800f29a:	370c      	adds	r7, #12
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr

0800f2a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f003 0307 	and.w	r3, r3, #7
 800f2b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f2b4:	4b0c      	ldr	r3, [pc, #48]	; (800f2e8 <__NVIC_SetPriorityGrouping+0x44>)
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f2cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f2d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f2d6:	4a04      	ldr	r2, [pc, #16]	; (800f2e8 <__NVIC_SetPriorityGrouping+0x44>)
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	60d3      	str	r3, [r2, #12]
}
 800f2dc:	bf00      	nop
 800f2de:	3714      	adds	r7, #20
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	e000ed00 	.word	0xe000ed00

0800f2ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f2f0:	4b04      	ldr	r3, [pc, #16]	; (800f304 <__NVIC_GetPriorityGrouping+0x18>)
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	0a1b      	lsrs	r3, r3, #8
 800f2f6:	f003 0307 	and.w	r3, r3, #7
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr
 800f304:	e000ed00 	.word	0xe000ed00

0800f308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f316:	2b00      	cmp	r3, #0
 800f318:	db0b      	blt.n	800f332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f31a:	79fb      	ldrb	r3, [r7, #7]
 800f31c:	f003 021f 	and.w	r2, r3, #31
 800f320:	4907      	ldr	r1, [pc, #28]	; (800f340 <__NVIC_EnableIRQ+0x38>)
 800f322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f326:	095b      	lsrs	r3, r3, #5
 800f328:	2001      	movs	r0, #1
 800f32a:	fa00 f202 	lsl.w	r2, r0, r2
 800f32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f332:	bf00      	nop
 800f334:	370c      	adds	r7, #12
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	e000e100 	.word	0xe000e100

0800f344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	4603      	mov	r3, r0
 800f34c:	6039      	str	r1, [r7, #0]
 800f34e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f354:	2b00      	cmp	r3, #0
 800f356:	db0a      	blt.n	800f36e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	490c      	ldr	r1, [pc, #48]	; (800f390 <__NVIC_SetPriority+0x4c>)
 800f35e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f362:	0112      	lsls	r2, r2, #4
 800f364:	b2d2      	uxtb	r2, r2
 800f366:	440b      	add	r3, r1
 800f368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f36c:	e00a      	b.n	800f384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	b2da      	uxtb	r2, r3
 800f372:	4908      	ldr	r1, [pc, #32]	; (800f394 <__NVIC_SetPriority+0x50>)
 800f374:	79fb      	ldrb	r3, [r7, #7]
 800f376:	f003 030f 	and.w	r3, r3, #15
 800f37a:	3b04      	subs	r3, #4
 800f37c:	0112      	lsls	r2, r2, #4
 800f37e:	b2d2      	uxtb	r2, r2
 800f380:	440b      	add	r3, r1
 800f382:	761a      	strb	r2, [r3, #24]
}
 800f384:	bf00      	nop
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	e000e100 	.word	0xe000e100
 800f394:	e000ed00 	.word	0xe000ed00

0800f398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f398:	b480      	push	{r7}
 800f39a:	b089      	sub	sp, #36	; 0x24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f003 0307 	and.w	r3, r3, #7
 800f3aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	f1c3 0307 	rsb	r3, r3, #7
 800f3b2:	2b04      	cmp	r3, #4
 800f3b4:	bf28      	it	cs
 800f3b6:	2304      	movcs	r3, #4
 800f3b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	3304      	adds	r3, #4
 800f3be:	2b06      	cmp	r3, #6
 800f3c0:	d902      	bls.n	800f3c8 <NVIC_EncodePriority+0x30>
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	3b03      	subs	r3, #3
 800f3c6:	e000      	b.n	800f3ca <NVIC_EncodePriority+0x32>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f3d6:	43da      	mvns	r2, r3
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	401a      	ands	r2, r3
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f3e0:	f04f 31ff 	mov.w	r1, #4294967295
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ea:	43d9      	mvns	r1, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f3f0:	4313      	orrs	r3, r2
         );
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3724      	adds	r7, #36	; 0x24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr
	...

0800f400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	3b01      	subs	r3, #1
 800f40c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f410:	d301      	bcc.n	800f416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f412:	2301      	movs	r3, #1
 800f414:	e00f      	b.n	800f436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f416:	4a0a      	ldr	r2, [pc, #40]	; (800f440 <SysTick_Config+0x40>)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f41e:	210f      	movs	r1, #15
 800f420:	f04f 30ff 	mov.w	r0, #4294967295
 800f424:	f7ff ff8e 	bl	800f344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f428:	4b05      	ldr	r3, [pc, #20]	; (800f440 <SysTick_Config+0x40>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f42e:	4b04      	ldr	r3, [pc, #16]	; (800f440 <SysTick_Config+0x40>)
 800f430:	2207      	movs	r2, #7
 800f432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	e000e010 	.word	0xe000e010

0800f444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7ff ff29 	bl	800f2a4 <__NVIC_SetPriorityGrouping>
}
 800f452:	bf00      	nop
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b086      	sub	sp, #24
 800f45e:	af00      	add	r7, sp, #0
 800f460:	4603      	mov	r3, r0
 800f462:	60b9      	str	r1, [r7, #8]
 800f464:	607a      	str	r2, [r7, #4]
 800f466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f468:	2300      	movs	r3, #0
 800f46a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f46c:	f7ff ff3e 	bl	800f2ec <__NVIC_GetPriorityGrouping>
 800f470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	68b9      	ldr	r1, [r7, #8]
 800f476:	6978      	ldr	r0, [r7, #20]
 800f478:	f7ff ff8e 	bl	800f398 <NVIC_EncodePriority>
 800f47c:	4602      	mov	r2, r0
 800f47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f482:	4611      	mov	r1, r2
 800f484:	4618      	mov	r0, r3
 800f486:	f7ff ff5d 	bl	800f344 <__NVIC_SetPriority>
}
 800f48a:	bf00      	nop
 800f48c:	3718      	adds	r7, #24
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b082      	sub	sp, #8
 800f496:	af00      	add	r7, sp, #0
 800f498:	4603      	mov	r3, r0
 800f49a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f49c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff ff31 	bl	800f308 <__NVIC_EnableIRQ>
}
 800f4a6:	bf00      	nop
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b082      	sub	sp, #8
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff ffa2 	bl	800f400 <SysTick_Config>
 800f4bc:	4603      	mov	r3, r0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
	...

0800f4c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f4d4:	f7ff f926 	bl	800e724 <HAL_GetTick>
 800f4d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d101      	bne.n	800f4e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	e099      	b.n	800f618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2202      	movs	r2, #2
 800f4f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f022 0201 	bic.w	r2, r2, #1
 800f502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f504:	e00f      	b.n	800f526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f506:	f7ff f90d 	bl	800e724 <HAL_GetTick>
 800f50a:	4602      	mov	r2, r0
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	1ad3      	subs	r3, r2, r3
 800f510:	2b05      	cmp	r3, #5
 800f512:	d908      	bls.n	800f526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2220      	movs	r2, #32
 800f518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2203      	movs	r2, #3
 800f51e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f522:	2303      	movs	r3, #3
 800f524:	e078      	b.n	800f618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1e8      	bne.n	800f506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f53c:	697a      	ldr	r2, [r7, #20]
 800f53e:	4b38      	ldr	r3, [pc, #224]	; (800f620 <HAL_DMA_Init+0x158>)
 800f540:	4013      	ands	r3, r2
 800f542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	685a      	ldr	r2, [r3, #4]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	691b      	ldr	r3, [r3, #16]
 800f558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f55e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	699b      	ldr	r3, [r3, #24]
 800f564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f56a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a1b      	ldr	r3, [r3, #32]
 800f570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	4313      	orrs	r3, r2
 800f576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f57c:	2b04      	cmp	r3, #4
 800f57e:	d107      	bne.n	800f590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f588:	4313      	orrs	r3, r2
 800f58a:	697a      	ldr	r2, [r7, #20]
 800f58c:	4313      	orrs	r3, r2
 800f58e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	697a      	ldr	r2, [r7, #20]
 800f596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	695b      	ldr	r3, [r3, #20]
 800f59e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	f023 0307 	bic.w	r3, r3, #7
 800f5a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ac:	697a      	ldr	r2, [r7, #20]
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b6:	2b04      	cmp	r3, #4
 800f5b8:	d117      	bne.n	800f5ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5be:	697a      	ldr	r2, [r7, #20]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00e      	beq.n	800f5ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 fb01 	bl	800fbd4 <DMA_CheckFifoParam>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d008      	beq.n	800f5ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2240      	movs	r2, #64	; 0x40
 800f5dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e016      	b.n	800f618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	697a      	ldr	r2, [r7, #20]
 800f5f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 fab8 	bl	800fb68 <DMA_CalcBaseAndBitshift>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f600:	223f      	movs	r2, #63	; 0x3f
 800f602:	409a      	lsls	r2, r3
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2201      	movs	r2, #1
 800f612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f616:	2300      	movs	r3, #0
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	f010803f 	.word	0xf010803f

0800f624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b086      	sub	sp, #24
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f632:	2300      	movs	r3, #0
 800f634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f63a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f642:	2b01      	cmp	r3, #1
 800f644:	d101      	bne.n	800f64a <HAL_DMA_Start_IT+0x26>
 800f646:	2302      	movs	r3, #2
 800f648:	e040      	b.n	800f6cc <HAL_DMA_Start_IT+0xa8>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2201      	movs	r2, #1
 800f64e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d12f      	bne.n	800f6be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2202      	movs	r2, #2
 800f662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2200      	movs	r2, #0
 800f66a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	68b9      	ldr	r1, [r7, #8]
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f000 fa4a 	bl	800fb0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f67c:	223f      	movs	r2, #63	; 0x3f
 800f67e:	409a      	lsls	r2, r3
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f042 0216 	orr.w	r2, r2, #22
 800f692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d007      	beq.n	800f6ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f042 0208 	orr.w	r2, r2, #8
 800f6aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f042 0201 	orr.w	r2, r2, #1
 800f6ba:	601a      	str	r2, [r3, #0]
 800f6bc:	e005      	b.n	800f6ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3718      	adds	r7, #24
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800f6e2:	f7ff f81f 	bl	800e724 <HAL_GetTick>
 800f6e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d008      	beq.n	800f706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2280      	movs	r2, #128	; 0x80
 800f6f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800f702:	2301      	movs	r3, #1
 800f704:	e052      	b.n	800f7ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f022 0216 	bic.w	r2, r2, #22
 800f714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	695a      	ldr	r2, [r3, #20]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d103      	bne.n	800f736 <HAL_DMA_Abort+0x62>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f732:	2b00      	cmp	r3, #0
 800f734:	d007      	beq.n	800f746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f022 0208 	bic.w	r2, r2, #8
 800f744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f022 0201 	bic.w	r2, r2, #1
 800f754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f756:	e013      	b.n	800f780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f758:	f7fe ffe4 	bl	800e724 <HAL_GetTick>
 800f75c:	4602      	mov	r2, r0
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	1ad3      	subs	r3, r2, r3
 800f762:	2b05      	cmp	r3, #5
 800f764:	d90c      	bls.n	800f780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2220      	movs	r2, #32
 800f76a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2200      	movs	r2, #0
 800f770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2203      	movs	r2, #3
 800f778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800f77c:	2303      	movs	r3, #3
 800f77e:	e015      	b.n	800f7ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f003 0301 	and.w	r3, r3, #1
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d1e4      	bne.n	800f758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f792:	223f      	movs	r2, #63	; 0x3f
 800f794:	409a      	lsls	r2, r3
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2200      	movs	r2, #0
 800f79e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800f7aa:	2300      	movs	r3, #0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3710      	adds	r7, #16
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d004      	beq.n	800f7d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2280      	movs	r2, #128	; 0x80
 800f7cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e00c      	b.n	800f7ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2205      	movs	r2, #5
 800f7d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f022 0201 	bic.w	r2, r2, #1
 800f7e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	370c      	adds	r7, #12
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b086      	sub	sp, #24
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f800:	2300      	movs	r3, #0
 800f802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f804:	4b92      	ldr	r3, [pc, #584]	; (800fa50 <HAL_DMA_IRQHandler+0x258>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a92      	ldr	r2, [pc, #584]	; (800fa54 <HAL_DMA_IRQHandler+0x25c>)
 800f80a:	fba2 2303 	umull	r2, r3, r2, r3
 800f80e:	0a9b      	lsrs	r3, r3, #10
 800f810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f822:	2208      	movs	r2, #8
 800f824:	409a      	lsls	r2, r3
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	4013      	ands	r3, r2
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d01a      	beq.n	800f864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f003 0304 	and.w	r3, r3, #4
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d013      	beq.n	800f864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f022 0204 	bic.w	r2, r2, #4
 800f84a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f850:	2208      	movs	r2, #8
 800f852:	409a      	lsls	r2, r3
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f85c:	f043 0201 	orr.w	r2, r3, #1
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f868:	2201      	movs	r2, #1
 800f86a:	409a      	lsls	r2, r3
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	4013      	ands	r3, r2
 800f870:	2b00      	cmp	r3, #0
 800f872:	d012      	beq.n	800f89a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	695b      	ldr	r3, [r3, #20]
 800f87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d00b      	beq.n	800f89a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f886:	2201      	movs	r2, #1
 800f888:	409a      	lsls	r2, r3
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f892:	f043 0202 	orr.w	r2, r3, #2
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f89e:	2204      	movs	r2, #4
 800f8a0:	409a      	lsls	r2, r3
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d012      	beq.n	800f8d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f003 0302 	and.w	r3, r3, #2
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00b      	beq.n	800f8d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8bc:	2204      	movs	r2, #4
 800f8be:	409a      	lsls	r2, r3
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8c8:	f043 0204 	orr.w	r2, r3, #4
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8d4:	2210      	movs	r2, #16
 800f8d6:	409a      	lsls	r2, r3
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	4013      	ands	r3, r2
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d043      	beq.n	800f968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f003 0308 	and.w	r3, r3, #8
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d03c      	beq.n	800f968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8f2:	2210      	movs	r2, #16
 800f8f4:	409a      	lsls	r2, r3
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f904:	2b00      	cmp	r3, #0
 800f906:	d018      	beq.n	800f93a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f912:	2b00      	cmp	r3, #0
 800f914:	d108      	bne.n	800f928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d024      	beq.n	800f968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	4798      	blx	r3
 800f926:	e01f      	b.n	800f968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d01b      	beq.n	800f968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	4798      	blx	r3
 800f938:	e016      	b.n	800f968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f944:	2b00      	cmp	r3, #0
 800f946:	d107      	bne.n	800f958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f022 0208 	bic.w	r2, r2, #8
 800f956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d003      	beq.n	800f968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f96c:	2220      	movs	r2, #32
 800f96e:	409a      	lsls	r2, r3
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	4013      	ands	r3, r2
 800f974:	2b00      	cmp	r3, #0
 800f976:	f000 808e 	beq.w	800fa96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f003 0310 	and.w	r3, r3, #16
 800f984:	2b00      	cmp	r3, #0
 800f986:	f000 8086 	beq.w	800fa96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f98e:	2220      	movs	r2, #32
 800f990:	409a      	lsls	r2, r3
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	2b05      	cmp	r3, #5
 800f9a0:	d136      	bne.n	800fa10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f022 0216 	bic.w	r2, r2, #22
 800f9b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	695a      	ldr	r2, [r3, #20]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f9c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d103      	bne.n	800f9d2 <HAL_DMA_IRQHandler+0x1da>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d007      	beq.n	800f9e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f022 0208 	bic.w	r2, r2, #8
 800f9e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9e6:	223f      	movs	r2, #63	; 0x3f
 800f9e8:	409a      	lsls	r2, r3
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d07d      	beq.n	800fb02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	4798      	blx	r3
        }
        return;
 800fa0e:	e078      	b.n	800fb02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d01c      	beq.n	800fa58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d108      	bne.n	800fa3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d030      	beq.n	800fa96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	4798      	blx	r3
 800fa3c:	e02b      	b.n	800fa96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d027      	beq.n	800fa96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	4798      	blx	r3
 800fa4e:	e022      	b.n	800fa96 <HAL_DMA_IRQHandler+0x29e>
 800fa50:	20000018 	.word	0x20000018
 800fa54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d10f      	bne.n	800fa86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f022 0210 	bic.w	r2, r2, #16
 800fa74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2201      	movs	r2, #1
 800fa82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d032      	beq.n	800fb04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faa2:	f003 0301 	and.w	r3, r3, #1
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d022      	beq.n	800faf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2205      	movs	r2, #5
 800faae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f022 0201 	bic.w	r2, r2, #1
 800fac0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	3301      	adds	r3, #1
 800fac6:	60bb      	str	r3, [r7, #8]
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	429a      	cmp	r2, r3
 800facc:	d307      	bcc.n	800fade <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f003 0301 	and.w	r3, r3, #1
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1f2      	bne.n	800fac2 <HAL_DMA_IRQHandler+0x2ca>
 800fadc:	e000      	b.n	800fae0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800fade:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2201      	movs	r2, #1
 800faec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d005      	beq.n	800fb04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	4798      	blx	r3
 800fb00:	e000      	b.n	800fb04 <HAL_DMA_IRQHandler+0x30c>
        return;
 800fb02:	bf00      	nop
    }
  }
}
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop

0800fb0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
 800fb18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fb28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	689b      	ldr	r3, [r3, #8]
 800fb36:	2b40      	cmp	r3, #64	; 0x40
 800fb38:	d108      	bne.n	800fb4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	68ba      	ldr	r2, [r7, #8]
 800fb48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fb4a:	e007      	b.n	800fb5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	60da      	str	r2, [r3, #12]
}
 800fb5c:	bf00      	nop
 800fb5e:	3714      	adds	r7, #20
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	3b10      	subs	r3, #16
 800fb78:	4a14      	ldr	r2, [pc, #80]	; (800fbcc <DMA_CalcBaseAndBitshift+0x64>)
 800fb7a:	fba2 2303 	umull	r2, r3, r2, r3
 800fb7e:	091b      	lsrs	r3, r3, #4
 800fb80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fb82:	4a13      	ldr	r2, [pc, #76]	; (800fbd0 <DMA_CalcBaseAndBitshift+0x68>)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	4413      	add	r3, r2
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2b03      	cmp	r3, #3
 800fb94:	d909      	bls.n	800fbaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fb9e:	f023 0303 	bic.w	r3, r3, #3
 800fba2:	1d1a      	adds	r2, r3, #4
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	659a      	str	r2, [r3, #88]	; 0x58
 800fba8:	e007      	b.n	800fbba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fbb2:	f023 0303 	bic.w	r3, r3, #3
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3714      	adds	r7, #20
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	aaaaaaab 	.word	0xaaaaaaab
 800fbd0:	080191a4 	.word	0x080191a4

0800fbd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	699b      	ldr	r3, [r3, #24]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d11f      	bne.n	800fc2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	2b03      	cmp	r3, #3
 800fbf2:	d855      	bhi.n	800fca0 <DMA_CheckFifoParam+0xcc>
 800fbf4:	a201      	add	r2, pc, #4	; (adr r2, 800fbfc <DMA_CheckFifoParam+0x28>)
 800fbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbfa:	bf00      	nop
 800fbfc:	0800fc0d 	.word	0x0800fc0d
 800fc00:	0800fc1f 	.word	0x0800fc1f
 800fc04:	0800fc0d 	.word	0x0800fc0d
 800fc08:	0800fca1 	.word	0x0800fca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d045      	beq.n	800fca4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800fc18:	2301      	movs	r3, #1
 800fc1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc1c:	e042      	b.n	800fca4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fc26:	d13f      	bne.n	800fca8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800fc28:	2301      	movs	r3, #1
 800fc2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc2c:	e03c      	b.n	800fca8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	699b      	ldr	r3, [r3, #24]
 800fc32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc36:	d121      	bne.n	800fc7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	2b03      	cmp	r3, #3
 800fc3c:	d836      	bhi.n	800fcac <DMA_CheckFifoParam+0xd8>
 800fc3e:	a201      	add	r2, pc, #4	; (adr r2, 800fc44 <DMA_CheckFifoParam+0x70>)
 800fc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc44:	0800fc55 	.word	0x0800fc55
 800fc48:	0800fc5b 	.word	0x0800fc5b
 800fc4c:	0800fc55 	.word	0x0800fc55
 800fc50:	0800fc6d 	.word	0x0800fc6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fc54:	2301      	movs	r3, #1
 800fc56:	73fb      	strb	r3, [r7, #15]
      break;
 800fc58:	e02f      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d024      	beq.n	800fcb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc6a:	e021      	b.n	800fcb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fc74:	d11e      	bne.n	800fcb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800fc76:	2301      	movs	r3, #1
 800fc78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fc7a:	e01b      	b.n	800fcb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	2b02      	cmp	r3, #2
 800fc80:	d902      	bls.n	800fc88 <DMA_CheckFifoParam+0xb4>
 800fc82:	2b03      	cmp	r3, #3
 800fc84:	d003      	beq.n	800fc8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fc86:	e018      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	73fb      	strb	r3, [r7, #15]
      break;
 800fc8c:	e015      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00e      	beq.n	800fcb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	73fb      	strb	r3, [r7, #15]
      break;
 800fc9e:	e00b      	b.n	800fcb8 <DMA_CheckFifoParam+0xe4>
      break;
 800fca0:	bf00      	nop
 800fca2:	e00a      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
      break;
 800fca4:	bf00      	nop
 800fca6:	e008      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
      break;
 800fca8:	bf00      	nop
 800fcaa:	e006      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
      break;
 800fcac:	bf00      	nop
 800fcae:	e004      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
      break;
 800fcb0:	bf00      	nop
 800fcb2:	e002      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
      break;   
 800fcb4:	bf00      	nop
 800fcb6:	e000      	b.n	800fcba <DMA_CheckFifoParam+0xe6>
      break;
 800fcb8:	bf00      	nop
    }
  } 
  
  return status; 
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3714      	adds	r7, #20
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800fcd2:	4b4b      	ldr	r3, [pc, #300]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d020      	beq.n	800fd20 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800fcde:	4b49      	ldr	r3, [pc, #292]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d107      	bne.n	800fcf8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800fce8:	4b46      	ldr	r3, [pc, #280]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800fcee:	4b45      	ldr	r3, [pc, #276]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800fcf4:	60da      	str	r2, [r3, #12]
 800fcf6:	e00b      	b.n	800fd10 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800fcf8:	4b42      	ldr	r3, [pc, #264]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b02      	cmp	r3, #2
 800fd00:	d103      	bne.n	800fd0a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800fd02:	4b40      	ldr	r3, [pc, #256]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	607b      	str	r3, [r7, #4]
 800fd08:	e002      	b.n	800fd10 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800fd0a:	4b3e      	ldr	r3, [pc, #248]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800fd10:	f000 f900 	bl	800ff14 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 f881 	bl	800fe1c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800fd1a:	4b3a      	ldr	r3, [pc, #232]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800fd20:	4b37      	ldr	r3, [pc, #220]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d04a      	beq.n	800fdc2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fd2c:	4b34      	ldr	r3, [pc, #208]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fd2e:	2201      	movs	r2, #1
 800fd30:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800fd32:	4b34      	ldr	r3, [pc, #208]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d12d      	bne.n	800fd98 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800fd3c:	4b31      	ldr	r3, [pc, #196]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	3b01      	subs	r3, #1
 800fd42:	4a30      	ldr	r2, [pc, #192]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd44:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800fd46:	4b2f      	ldr	r3, [pc, #188]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d015      	beq.n	800fd7a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800fd4e:	4b2d      	ldr	r3, [pc, #180]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 f857 	bl	800fe08 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800fd5a:	4b2a      	ldr	r3, [pc, #168]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	4a28      	ldr	r2, [pc, #160]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd62:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800fd64:	4b27      	ldr	r3, [pc, #156]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800fd6a:	4b26      	ldr	r3, [pc, #152]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd6c:	7a1b      	ldrb	r3, [r3, #8]
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	4619      	mov	r1, r3
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f000 f9b8 	bl	80100e8 <FLASH_Erase_Sector>
 800fd78:	e023      	b.n	800fdc2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800fd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd7e:	607b      	str	r3, [r7, #4]
 800fd80:	4a20      	ldr	r2, [pc, #128]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800fd86:	4b1f      	ldr	r3, [pc, #124]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd88:	2200      	movs	r2, #0
 800fd8a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800fd8c:	f000 f9f4 	bl	8010178 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 f839 	bl	800fe08 <HAL_FLASH_EndOfOperationCallback>
 800fd96:	e014      	b.n	800fdc2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800fd98:	4b1a      	ldr	r3, [pc, #104]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	2b02      	cmp	r3, #2
 800fda0:	d107      	bne.n	800fdb2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800fda2:	f000 f9e9 	bl	8010178 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800fda6:	4b17      	ldr	r3, [pc, #92]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fda8:	691b      	ldr	r3, [r3, #16]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 f82c 	bl	800fe08 <HAL_FLASH_EndOfOperationCallback>
 800fdb0:	e004      	b.n	800fdbc <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800fdb2:	4b14      	ldr	r3, [pc, #80]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f000 f826 	bl	800fe08 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800fdbc:	4b11      	ldr	r3, [pc, #68]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800fdc2:	4b10      	ldr	r3, [pc, #64]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d114      	bne.n	800fdf6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800fdcc:	4b0c      	ldr	r3, [pc, #48]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fdce:	691b      	ldr	r3, [r3, #16]
 800fdd0:	4a0b      	ldr	r2, [pc, #44]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fdd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fdd6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800fdd8:	4b09      	ldr	r3, [pc, #36]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fdda:	691b      	ldr	r3, [r3, #16]
 800fddc:	4a08      	ldr	r2, [pc, #32]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fdde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fde2:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800fde4:	4b06      	ldr	r3, [pc, #24]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fde6:	691b      	ldr	r3, [r3, #16]
 800fde8:	4a05      	ldr	r2, [pc, #20]	; (800fe00 <HAL_FLASH_IRQHandler+0x138>)
 800fdea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fdee:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800fdf0:	4b04      	ldr	r3, [pc, #16]	; (800fe04 <HAL_FLASH_IRQHandler+0x13c>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	761a      	strb	r2, [r3, #24]
  }
}
 800fdf6:	bf00      	nop
 800fdf8:	3708      	adds	r7, #8
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	40023c00 	.word	0x40023c00
 800fe04:	20000a3c 	.word	0x20000a3c

0800fe08 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800fe10:	bf00      	nop
 800fe12:	370c      	adds	r7, #12
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800fe24:	bf00      	nop
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800fe36:	2300      	movs	r3, #0
 800fe38:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fe3a:	4b0b      	ldr	r3, [pc, #44]	; (800fe68 <HAL_FLASH_Unlock+0x38>)
 800fe3c:	691b      	ldr	r3, [r3, #16]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	da0b      	bge.n	800fe5a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fe42:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <HAL_FLASH_Unlock+0x38>)
 800fe44:	4a09      	ldr	r2, [pc, #36]	; (800fe6c <HAL_FLASH_Unlock+0x3c>)
 800fe46:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fe48:	4b07      	ldr	r3, [pc, #28]	; (800fe68 <HAL_FLASH_Unlock+0x38>)
 800fe4a:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <HAL_FLASH_Unlock+0x40>)
 800fe4c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fe4e:	4b06      	ldr	r3, [pc, #24]	; (800fe68 <HAL_FLASH_Unlock+0x38>)
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	da01      	bge.n	800fe5a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800fe56:	2301      	movs	r3, #1
 800fe58:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800fe5a:	79fb      	ldrb	r3, [r7, #7]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr
 800fe68:	40023c00 	.word	0x40023c00
 800fe6c:	45670123 	.word	0x45670123
 800fe70:	cdef89ab 	.word	0xcdef89ab

0800fe74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800fe74:	b480      	push	{r7}
 800fe76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800fe78:	4b05      	ldr	r3, [pc, #20]	; (800fe90 <HAL_FLASH_Lock+0x1c>)
 800fe7a:	691b      	ldr	r3, [r3, #16]
 800fe7c:	4a04      	ldr	r2, [pc, #16]	; (800fe90 <HAL_FLASH_Lock+0x1c>)
 800fe7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fe82:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr
 800fe90:	40023c00 	.word	0x40023c00

0800fe94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fea0:	4b1a      	ldr	r3, [pc, #104]	; (800ff0c <FLASH_WaitForLastOperation+0x78>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800fea6:	f7fe fc3d 	bl	800e724 <HAL_GetTick>
 800feaa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800feac:	e010      	b.n	800fed0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feb4:	d00c      	beq.n	800fed0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d007      	beq.n	800fecc <FLASH_WaitForLastOperation+0x38>
 800febc:	f7fe fc32 	bl	800e724 <HAL_GetTick>
 800fec0:	4602      	mov	r2, r0
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	1ad3      	subs	r3, r2, r3
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d201      	bcs.n	800fed0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800fecc:	2303      	movs	r3, #3
 800fece:	e019      	b.n	800ff04 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fed0:	4b0f      	ldr	r3, [pc, #60]	; (800ff10 <FLASH_WaitForLastOperation+0x7c>)
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1e8      	bne.n	800feae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800fedc:	4b0c      	ldr	r3, [pc, #48]	; (800ff10 <FLASH_WaitForLastOperation+0x7c>)
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	f003 0301 	and.w	r3, r3, #1
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d002      	beq.n	800feee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fee8:	4b09      	ldr	r3, [pc, #36]	; (800ff10 <FLASH_WaitForLastOperation+0x7c>)
 800feea:	2201      	movs	r2, #1
 800feec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800feee:	4b08      	ldr	r3, [pc, #32]	; (800ff10 <FLASH_WaitForLastOperation+0x7c>)
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d003      	beq.n	800ff02 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800fefa:	f000 f80b 	bl	800ff14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	e000      	b.n	800ff04 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800ff02:	2300      	movs	r3, #0
  
}  
 800ff04:	4618      	mov	r0, r3
 800ff06:	3710      	adds	r7, #16
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	20000a3c 	.word	0x20000a3c
 800ff10:	40023c00 	.word	0x40023c00

0800ff14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ff14:	b480      	push	{r7}
 800ff16:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ff18:	4b27      	ldr	r3, [pc, #156]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	f003 0310 	and.w	r3, r3, #16
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d008      	beq.n	800ff36 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ff24:	4b25      	ldr	r3, [pc, #148]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff26:	69db      	ldr	r3, [r3, #28]
 800ff28:	f043 0310 	orr.w	r3, r3, #16
 800ff2c:	4a23      	ldr	r2, [pc, #140]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff2e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ff30:	4b21      	ldr	r3, [pc, #132]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff32:	2210      	movs	r2, #16
 800ff34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ff36:	4b20      	ldr	r3, [pc, #128]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	f003 0320 	and.w	r3, r3, #32
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d008      	beq.n	800ff54 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ff42:	4b1e      	ldr	r3, [pc, #120]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff44:	69db      	ldr	r3, [r3, #28]
 800ff46:	f043 0308 	orr.w	r3, r3, #8
 800ff4a:	4a1c      	ldr	r2, [pc, #112]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff4c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ff4e:	4b1a      	ldr	r3, [pc, #104]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff50:	2220      	movs	r2, #32
 800ff52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ff54:	4b18      	ldr	r3, [pc, #96]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d008      	beq.n	800ff72 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ff60:	4b16      	ldr	r3, [pc, #88]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff62:	69db      	ldr	r3, [r3, #28]
 800ff64:	f043 0304 	orr.w	r3, r3, #4
 800ff68:	4a14      	ldr	r2, [pc, #80]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ff6c:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff6e:	2240      	movs	r2, #64	; 0x40
 800ff70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ff72:	4b11      	ldr	r3, [pc, #68]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d008      	beq.n	800ff90 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ff7e:	4b0f      	ldr	r3, [pc, #60]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff80:	69db      	ldr	r3, [r3, #28]
 800ff82:	f043 0302 	orr.w	r3, r3, #2
 800ff86:	4a0d      	ldr	r2, [pc, #52]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff88:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ff8a:	4b0b      	ldr	r3, [pc, #44]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff8c:	2280      	movs	r2, #128	; 0x80
 800ff8e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ff90:	4b09      	ldr	r3, [pc, #36]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	f003 0302 	and.w	r3, r3, #2
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d008      	beq.n	800ffae <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ff9c:	4b07      	ldr	r3, [pc, #28]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ff9e:	69db      	ldr	r3, [r3, #28]
 800ffa0:	f043 0320 	orr.w	r3, r3, #32
 800ffa4:	4a05      	ldr	r2, [pc, #20]	; (800ffbc <FLASH_SetErrorCode+0xa8>)
 800ffa6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ffa8:	4b03      	ldr	r3, [pc, #12]	; (800ffb8 <FLASH_SetErrorCode+0xa4>)
 800ffaa:	2202      	movs	r2, #2
 800ffac:	60da      	str	r2, [r3, #12]
  }
}
 800ffae:	bf00      	nop
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr
 800ffb8:	40023c00 	.word	0x40023c00
 800ffbc:	20000a3c 	.word	0x20000a3c

0800ffc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ffd2:	4b31      	ldr	r3, [pc, #196]	; (8010098 <HAL_FLASHEx_Erase+0xd8>)
 800ffd4:	7e1b      	ldrb	r3, [r3, #24]
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d101      	bne.n	800ffde <HAL_FLASHEx_Erase+0x1e>
 800ffda:	2302      	movs	r3, #2
 800ffdc:	e058      	b.n	8010090 <HAL_FLASHEx_Erase+0xd0>
 800ffde:	4b2e      	ldr	r3, [pc, #184]	; (8010098 <HAL_FLASHEx_Erase+0xd8>)
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ffe4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ffe8:	f7ff ff54 	bl	800fe94 <FLASH_WaitForLastOperation>
 800ffec:	4603      	mov	r3, r0
 800ffee:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d148      	bne.n	8010088 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	f04f 32ff 	mov.w	r2, #4294967295
 800fffc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b01      	cmp	r3, #1
 8010004:	d115      	bne.n	8010032 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	b2da      	uxtb	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	4619      	mov	r1, r3
 8010012:	4610      	mov	r0, r2
 8010014:	f000 f844 	bl	80100a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010018:	f24c 3050 	movw	r0, #50000	; 0xc350
 801001c:	f7ff ff3a 	bl	800fe94 <FLASH_WaitForLastOperation>
 8010020:	4603      	mov	r3, r0
 8010022:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8010024:	4b1d      	ldr	r3, [pc, #116]	; (801009c <HAL_FLASHEx_Erase+0xdc>)
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	4a1c      	ldr	r2, [pc, #112]	; (801009c <HAL_FLASHEx_Erase+0xdc>)
 801002a:	f023 0304 	bic.w	r3, r3, #4
 801002e:	6113      	str	r3, [r2, #16]
 8010030:	e028      	b.n	8010084 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	60bb      	str	r3, [r7, #8]
 8010038:	e01c      	b.n	8010074 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	691b      	ldr	r3, [r3, #16]
 801003e:	b2db      	uxtb	r3, r3
 8010040:	4619      	mov	r1, r3
 8010042:	68b8      	ldr	r0, [r7, #8]
 8010044:	f000 f850 	bl	80100e8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010048:	f24c 3050 	movw	r0, #50000	; 0xc350
 801004c:	f7ff ff22 	bl	800fe94 <FLASH_WaitForLastOperation>
 8010050:	4603      	mov	r3, r0
 8010052:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010054:	4b11      	ldr	r3, [pc, #68]	; (801009c <HAL_FLASHEx_Erase+0xdc>)
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	4a10      	ldr	r2, [pc, #64]	; (801009c <HAL_FLASHEx_Erase+0xdc>)
 801005a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801005e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8010060:	7bfb      	ldrb	r3, [r7, #15]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d003      	beq.n	801006e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	601a      	str	r2, [r3, #0]
          break;
 801006c:	e00a      	b.n	8010084 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	3301      	adds	r3, #1
 8010072:	60bb      	str	r3, [r7, #8]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	68da      	ldr	r2, [r3, #12]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	689b      	ldr	r3, [r3, #8]
 801007c:	4413      	add	r3, r2
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	429a      	cmp	r2, r3
 8010082:	d3da      	bcc.n	801003a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8010084:	f000 f878 	bl	8010178 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010088:	4b03      	ldr	r3, [pc, #12]	; (8010098 <HAL_FLASHEx_Erase+0xd8>)
 801008a:	2200      	movs	r2, #0
 801008c:	761a      	strb	r2, [r3, #24]

  return status;
 801008e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010090:	4618      	mov	r0, r3
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	20000a3c 	.word	0x20000a3c
 801009c:	40023c00 	.word	0x40023c00

080100a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	4603      	mov	r3, r0
 80100a8:	6039      	str	r1, [r7, #0]
 80100aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80100ac:	4b0d      	ldr	r3, [pc, #52]	; (80100e4 <FLASH_MassErase+0x44>)
 80100ae:	691b      	ldr	r3, [r3, #16]
 80100b0:	4a0c      	ldr	r2, [pc, #48]	; (80100e4 <FLASH_MassErase+0x44>)
 80100b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80100b8:	4b0a      	ldr	r3, [pc, #40]	; (80100e4 <FLASH_MassErase+0x44>)
 80100ba:	691b      	ldr	r3, [r3, #16]
 80100bc:	4a09      	ldr	r2, [pc, #36]	; (80100e4 <FLASH_MassErase+0x44>)
 80100be:	f043 0304 	orr.w	r3, r3, #4
 80100c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80100c4:	4b07      	ldr	r3, [pc, #28]	; (80100e4 <FLASH_MassErase+0x44>)
 80100c6:	691a      	ldr	r2, [r3, #16]
 80100c8:	79fb      	ldrb	r3, [r7, #7]
 80100ca:	021b      	lsls	r3, r3, #8
 80100cc:	4313      	orrs	r3, r2
 80100ce:	4a05      	ldr	r2, [pc, #20]	; (80100e4 <FLASH_MassErase+0x44>)
 80100d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80100d4:	6113      	str	r3, [r2, #16]
}
 80100d6:	bf00      	nop
 80100d8:	370c      	adds	r7, #12
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	40023c00 	.word	0x40023c00

080100e8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80100f4:	2300      	movs	r3, #0
 80100f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80100f8:	78fb      	ldrb	r3, [r7, #3]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d102      	bne.n	8010104 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80100fe:	2300      	movs	r3, #0
 8010100:	60fb      	str	r3, [r7, #12]
 8010102:	e010      	b.n	8010126 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	2b01      	cmp	r3, #1
 8010108:	d103      	bne.n	8010112 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801010a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801010e:	60fb      	str	r3, [r7, #12]
 8010110:	e009      	b.n	8010126 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8010112:	78fb      	ldrb	r3, [r7, #3]
 8010114:	2b02      	cmp	r3, #2
 8010116:	d103      	bne.n	8010120 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8010118:	f44f 7300 	mov.w	r3, #512	; 0x200
 801011c:	60fb      	str	r3, [r7, #12]
 801011e:	e002      	b.n	8010126 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8010120:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010124:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010126:	4b13      	ldr	r3, [pc, #76]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 8010128:	691b      	ldr	r3, [r3, #16]
 801012a:	4a12      	ldr	r2, [pc, #72]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 801012c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010130:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8010132:	4b10      	ldr	r3, [pc, #64]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 8010134:	691a      	ldr	r2, [r3, #16]
 8010136:	490f      	ldr	r1, [pc, #60]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	4313      	orrs	r3, r2
 801013c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801013e:	4b0d      	ldr	r3, [pc, #52]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	4a0c      	ldr	r2, [pc, #48]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 8010144:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010148:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801014a:	4b0a      	ldr	r3, [pc, #40]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 801014c:	691a      	ldr	r2, [r3, #16]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	00db      	lsls	r3, r3, #3
 8010152:	4313      	orrs	r3, r2
 8010154:	4a07      	ldr	r2, [pc, #28]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 8010156:	f043 0302 	orr.w	r3, r3, #2
 801015a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801015c:	4b05      	ldr	r3, [pc, #20]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	4a04      	ldr	r2, [pc, #16]	; (8010174 <FLASH_Erase_Sector+0x8c>)
 8010162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010166:	6113      	str	r3, [r2, #16]
}
 8010168:	bf00      	nop
 801016a:	3714      	adds	r7, #20
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr
 8010174:	40023c00 	.word	0x40023c00

08010178 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8010178:	b480      	push	{r7}
 801017a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 801017c:	4b20      	ldr	r3, [pc, #128]	; (8010200 <FLASH_FlushCaches+0x88>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010184:	2b00      	cmp	r3, #0
 8010186:	d017      	beq.n	80101b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010188:	4b1d      	ldr	r3, [pc, #116]	; (8010200 <FLASH_FlushCaches+0x88>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a1c      	ldr	r2, [pc, #112]	; (8010200 <FLASH_FlushCaches+0x88>)
 801018e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010192:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8010194:	4b1a      	ldr	r3, [pc, #104]	; (8010200 <FLASH_FlushCaches+0x88>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a19      	ldr	r2, [pc, #100]	; (8010200 <FLASH_FlushCaches+0x88>)
 801019a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801019e:	6013      	str	r3, [r2, #0]
 80101a0:	4b17      	ldr	r3, [pc, #92]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a16      	ldr	r2, [pc, #88]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80101aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80101ac:	4b14      	ldr	r3, [pc, #80]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a13      	ldr	r2, [pc, #76]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80101b6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80101b8:	4b11      	ldr	r3, [pc, #68]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d017      	beq.n	80101f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80101c4:	4b0e      	ldr	r3, [pc, #56]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4a0d      	ldr	r2, [pc, #52]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80101ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80101d0:	4b0b      	ldr	r3, [pc, #44]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4a0a      	ldr	r2, [pc, #40]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80101da:	6013      	str	r3, [r2, #0]
 80101dc:	4b08      	ldr	r3, [pc, #32]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a07      	ldr	r2, [pc, #28]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80101e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80101e8:	4b05      	ldr	r3, [pc, #20]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4a04      	ldr	r2, [pc, #16]	; (8010200 <FLASH_FlushCaches+0x88>)
 80101ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80101f2:	6013      	str	r3, [r2, #0]
  }
}
 80101f4:	bf00      	nop
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	40023c00 	.word	0x40023c00

08010204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010204:	b480      	push	{r7}
 8010206:	b089      	sub	sp, #36	; 0x24
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801020e:	2300      	movs	r3, #0
 8010210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010212:	2300      	movs	r3, #0
 8010214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010216:	2300      	movs	r3, #0
 8010218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801021a:	2300      	movs	r3, #0
 801021c:	61fb      	str	r3, [r7, #28]
 801021e:	e16b      	b.n	80104f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010220:	2201      	movs	r2, #1
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	fa02 f303 	lsl.w	r3, r2, r3
 8010228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	697a      	ldr	r2, [r7, #20]
 8010230:	4013      	ands	r3, r2
 8010232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010234:	693a      	ldr	r2, [r7, #16]
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	429a      	cmp	r2, r3
 801023a:	f040 815a 	bne.w	80104f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d00b      	beq.n	801025e <HAL_GPIO_Init+0x5a>
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	2b02      	cmp	r3, #2
 801024c:	d007      	beq.n	801025e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010252:	2b11      	cmp	r3, #17
 8010254:	d003      	beq.n	801025e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	2b12      	cmp	r3, #18
 801025c:	d130      	bne.n	80102c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	689b      	ldr	r3, [r3, #8]
 8010262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	005b      	lsls	r3, r3, #1
 8010268:	2203      	movs	r2, #3
 801026a:	fa02 f303 	lsl.w	r3, r2, r3
 801026e:	43db      	mvns	r3, r3
 8010270:	69ba      	ldr	r2, [r7, #24]
 8010272:	4013      	ands	r3, r2
 8010274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	68da      	ldr	r2, [r3, #12]
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	fa02 f303 	lsl.w	r3, r2, r3
 8010282:	69ba      	ldr	r2, [r7, #24]
 8010284:	4313      	orrs	r3, r2
 8010286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	69ba      	ldr	r2, [r7, #24]
 801028c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010294:	2201      	movs	r2, #1
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	fa02 f303 	lsl.w	r3, r2, r3
 801029c:	43db      	mvns	r3, r3
 801029e:	69ba      	ldr	r2, [r7, #24]
 80102a0:	4013      	ands	r3, r2
 80102a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	091b      	lsrs	r3, r3, #4
 80102aa:	f003 0201 	and.w	r2, r3, #1
 80102ae:	69fb      	ldr	r3, [r7, #28]
 80102b0:	fa02 f303 	lsl.w	r3, r2, r3
 80102b4:	69ba      	ldr	r2, [r7, #24]
 80102b6:	4313      	orrs	r3, r2
 80102b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	69ba      	ldr	r2, [r7, #24]
 80102be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	2203      	movs	r2, #3
 80102cc:	fa02 f303 	lsl.w	r3, r2, r3
 80102d0:	43db      	mvns	r3, r3
 80102d2:	69ba      	ldr	r2, [r7, #24]
 80102d4:	4013      	ands	r3, r2
 80102d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	689a      	ldr	r2, [r3, #8]
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	005b      	lsls	r3, r3, #1
 80102e0:	fa02 f303 	lsl.w	r3, r2, r3
 80102e4:	69ba      	ldr	r2, [r7, #24]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	69ba      	ldr	r2, [r7, #24]
 80102ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	2b02      	cmp	r3, #2
 80102f6:	d003      	beq.n	8010300 <HAL_GPIO_Init+0xfc>
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	2b12      	cmp	r3, #18
 80102fe:	d123      	bne.n	8010348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	08da      	lsrs	r2, r3, #3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	3208      	adds	r2, #8
 8010308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801030c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	f003 0307 	and.w	r3, r3, #7
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	220f      	movs	r2, #15
 8010318:	fa02 f303 	lsl.w	r3, r2, r3
 801031c:	43db      	mvns	r3, r3
 801031e:	69ba      	ldr	r2, [r7, #24]
 8010320:	4013      	ands	r3, r2
 8010322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	691a      	ldr	r2, [r3, #16]
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	f003 0307 	and.w	r3, r3, #7
 801032e:	009b      	lsls	r3, r3, #2
 8010330:	fa02 f303 	lsl.w	r3, r2, r3
 8010334:	69ba      	ldr	r2, [r7, #24]
 8010336:	4313      	orrs	r3, r2
 8010338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	08da      	lsrs	r2, r3, #3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	3208      	adds	r2, #8
 8010342:	69b9      	ldr	r1, [r7, #24]
 8010344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	005b      	lsls	r3, r3, #1
 8010352:	2203      	movs	r2, #3
 8010354:	fa02 f303 	lsl.w	r3, r2, r3
 8010358:	43db      	mvns	r3, r3
 801035a:	69ba      	ldr	r2, [r7, #24]
 801035c:	4013      	ands	r3, r2
 801035e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	f003 0203 	and.w	r2, r3, #3
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	fa02 f303 	lsl.w	r3, r2, r3
 8010370:	69ba      	ldr	r2, [r7, #24]
 8010372:	4313      	orrs	r3, r2
 8010374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	69ba      	ldr	r2, [r7, #24]
 801037a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010384:	2b00      	cmp	r3, #0
 8010386:	f000 80b4 	beq.w	80104f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801038a:	2300      	movs	r3, #0
 801038c:	60fb      	str	r3, [r7, #12]
 801038e:	4b5f      	ldr	r3, [pc, #380]	; (801050c <HAL_GPIO_Init+0x308>)
 8010390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010392:	4a5e      	ldr	r2, [pc, #376]	; (801050c <HAL_GPIO_Init+0x308>)
 8010394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010398:	6453      	str	r3, [r2, #68]	; 0x44
 801039a:	4b5c      	ldr	r3, [pc, #368]	; (801050c <HAL_GPIO_Init+0x308>)
 801039c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801039e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103a2:	60fb      	str	r3, [r7, #12]
 80103a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80103a6:	4a5a      	ldr	r2, [pc, #360]	; (8010510 <HAL_GPIO_Init+0x30c>)
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	089b      	lsrs	r3, r3, #2
 80103ac:	3302      	adds	r3, #2
 80103ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	f003 0303 	and.w	r3, r3, #3
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	220f      	movs	r2, #15
 80103be:	fa02 f303 	lsl.w	r3, r2, r3
 80103c2:	43db      	mvns	r3, r3
 80103c4:	69ba      	ldr	r2, [r7, #24]
 80103c6:	4013      	ands	r3, r2
 80103c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4a51      	ldr	r2, [pc, #324]	; (8010514 <HAL_GPIO_Init+0x310>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d02b      	beq.n	801042a <HAL_GPIO_Init+0x226>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	4a50      	ldr	r2, [pc, #320]	; (8010518 <HAL_GPIO_Init+0x314>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d025      	beq.n	8010426 <HAL_GPIO_Init+0x222>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4a4f      	ldr	r2, [pc, #316]	; (801051c <HAL_GPIO_Init+0x318>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d01f      	beq.n	8010422 <HAL_GPIO_Init+0x21e>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4a4e      	ldr	r2, [pc, #312]	; (8010520 <HAL_GPIO_Init+0x31c>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d019      	beq.n	801041e <HAL_GPIO_Init+0x21a>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4a4d      	ldr	r2, [pc, #308]	; (8010524 <HAL_GPIO_Init+0x320>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d013      	beq.n	801041a <HAL_GPIO_Init+0x216>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	4a4c      	ldr	r2, [pc, #304]	; (8010528 <HAL_GPIO_Init+0x324>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d00d      	beq.n	8010416 <HAL_GPIO_Init+0x212>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4a4b      	ldr	r2, [pc, #300]	; (801052c <HAL_GPIO_Init+0x328>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d007      	beq.n	8010412 <HAL_GPIO_Init+0x20e>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4a4a      	ldr	r2, [pc, #296]	; (8010530 <HAL_GPIO_Init+0x32c>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d101      	bne.n	801040e <HAL_GPIO_Init+0x20a>
 801040a:	2307      	movs	r3, #7
 801040c:	e00e      	b.n	801042c <HAL_GPIO_Init+0x228>
 801040e:	2308      	movs	r3, #8
 8010410:	e00c      	b.n	801042c <HAL_GPIO_Init+0x228>
 8010412:	2306      	movs	r3, #6
 8010414:	e00a      	b.n	801042c <HAL_GPIO_Init+0x228>
 8010416:	2305      	movs	r3, #5
 8010418:	e008      	b.n	801042c <HAL_GPIO_Init+0x228>
 801041a:	2304      	movs	r3, #4
 801041c:	e006      	b.n	801042c <HAL_GPIO_Init+0x228>
 801041e:	2303      	movs	r3, #3
 8010420:	e004      	b.n	801042c <HAL_GPIO_Init+0x228>
 8010422:	2302      	movs	r3, #2
 8010424:	e002      	b.n	801042c <HAL_GPIO_Init+0x228>
 8010426:	2301      	movs	r3, #1
 8010428:	e000      	b.n	801042c <HAL_GPIO_Init+0x228>
 801042a:	2300      	movs	r3, #0
 801042c:	69fa      	ldr	r2, [r7, #28]
 801042e:	f002 0203 	and.w	r2, r2, #3
 8010432:	0092      	lsls	r2, r2, #2
 8010434:	4093      	lsls	r3, r2
 8010436:	69ba      	ldr	r2, [r7, #24]
 8010438:	4313      	orrs	r3, r2
 801043a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801043c:	4934      	ldr	r1, [pc, #208]	; (8010510 <HAL_GPIO_Init+0x30c>)
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	089b      	lsrs	r3, r3, #2
 8010442:	3302      	adds	r3, #2
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801044a:	4b3a      	ldr	r3, [pc, #232]	; (8010534 <HAL_GPIO_Init+0x330>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	43db      	mvns	r3, r3
 8010454:	69ba      	ldr	r2, [r7, #24]
 8010456:	4013      	ands	r3, r2
 8010458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010462:	2b00      	cmp	r3, #0
 8010464:	d003      	beq.n	801046e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010466:	69ba      	ldr	r2, [r7, #24]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	4313      	orrs	r3, r2
 801046c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801046e:	4a31      	ldr	r2, [pc, #196]	; (8010534 <HAL_GPIO_Init+0x330>)
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010474:	4b2f      	ldr	r3, [pc, #188]	; (8010534 <HAL_GPIO_Init+0x330>)
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	43db      	mvns	r3, r3
 801047e:	69ba      	ldr	r2, [r7, #24]
 8010480:	4013      	ands	r3, r2
 8010482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801048c:	2b00      	cmp	r3, #0
 801048e:	d003      	beq.n	8010498 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010490:	69ba      	ldr	r2, [r7, #24]
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	4313      	orrs	r3, r2
 8010496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010498:	4a26      	ldr	r2, [pc, #152]	; (8010534 <HAL_GPIO_Init+0x330>)
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801049e:	4b25      	ldr	r3, [pc, #148]	; (8010534 <HAL_GPIO_Init+0x330>)
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	43db      	mvns	r3, r3
 80104a8:	69ba      	ldr	r2, [r7, #24]
 80104aa:	4013      	ands	r3, r2
 80104ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d003      	beq.n	80104c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80104ba:	69ba      	ldr	r2, [r7, #24]
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	4313      	orrs	r3, r2
 80104c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80104c2:	4a1c      	ldr	r2, [pc, #112]	; (8010534 <HAL_GPIO_Init+0x330>)
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80104c8:	4b1a      	ldr	r3, [pc, #104]	; (8010534 <HAL_GPIO_Init+0x330>)
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	43db      	mvns	r3, r3
 80104d2:	69ba      	ldr	r2, [r7, #24]
 80104d4:	4013      	ands	r3, r2
 80104d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d003      	beq.n	80104ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80104e4:	69ba      	ldr	r2, [r7, #24]
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	4313      	orrs	r3, r2
 80104ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80104ec:	4a11      	ldr	r2, [pc, #68]	; (8010534 <HAL_GPIO_Init+0x330>)
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80104f2:	69fb      	ldr	r3, [r7, #28]
 80104f4:	3301      	adds	r3, #1
 80104f6:	61fb      	str	r3, [r7, #28]
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	2b0f      	cmp	r3, #15
 80104fc:	f67f ae90 	bls.w	8010220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010500:	bf00      	nop
 8010502:	3724      	adds	r7, #36	; 0x24
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	40023800 	.word	0x40023800
 8010510:	40013800 	.word	0x40013800
 8010514:	40020000 	.word	0x40020000
 8010518:	40020400 	.word	0x40020400
 801051c:	40020800 	.word	0x40020800
 8010520:	40020c00 	.word	0x40020c00
 8010524:	40021000 	.word	0x40021000
 8010528:	40021400 	.word	0x40021400
 801052c:	40021800 	.word	0x40021800
 8010530:	40021c00 	.word	0x40021c00
 8010534:	40013c00 	.word	0x40013c00

08010538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	460b      	mov	r3, r1
 8010542:	807b      	strh	r3, [r7, #2]
 8010544:	4613      	mov	r3, r2
 8010546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010548:	787b      	ldrb	r3, [r7, #1]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d003      	beq.n	8010556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801054e:	887a      	ldrh	r2, [r7, #2]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010554:	e003      	b.n	801055e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010556:	887b      	ldrh	r3, [r7, #2]
 8010558:	041a      	lsls	r2, r3, #16
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	619a      	str	r2, [r3, #24]
}
 801055e:	bf00      	nop
 8010560:	370c      	adds	r7, #12
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr
	...

0801056c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b086      	sub	sp, #24
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d101      	bne.n	801057e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801057a:	2301      	movs	r3, #1
 801057c:	e25b      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	2b00      	cmp	r3, #0
 8010588:	d075      	beq.n	8010676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801058a:	4ba3      	ldr	r3, [pc, #652]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	f003 030c 	and.w	r3, r3, #12
 8010592:	2b04      	cmp	r3, #4
 8010594:	d00c      	beq.n	80105b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010596:	4ba0      	ldr	r3, [pc, #640]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010598:	689b      	ldr	r3, [r3, #8]
 801059a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801059e:	2b08      	cmp	r3, #8
 80105a0:	d112      	bne.n	80105c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80105a2:	4b9d      	ldr	r3, [pc, #628]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80105aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80105ae:	d10b      	bne.n	80105c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80105b0:	4b99      	ldr	r3, [pc, #612]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d05b      	beq.n	8010674 <HAL_RCC_OscConfig+0x108>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d157      	bne.n	8010674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80105c4:	2301      	movs	r3, #1
 80105c6:	e236      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105d0:	d106      	bne.n	80105e0 <HAL_RCC_OscConfig+0x74>
 80105d2:	4b91      	ldr	r3, [pc, #580]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4a90      	ldr	r2, [pc, #576]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80105d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105dc:	6013      	str	r3, [r2, #0]
 80105de:	e01d      	b.n	801061c <HAL_RCC_OscConfig+0xb0>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80105e8:	d10c      	bne.n	8010604 <HAL_RCC_OscConfig+0x98>
 80105ea:	4b8b      	ldr	r3, [pc, #556]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	4a8a      	ldr	r2, [pc, #552]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80105f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80105f4:	6013      	str	r3, [r2, #0]
 80105f6:	4b88      	ldr	r3, [pc, #544]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4a87      	ldr	r2, [pc, #540]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80105fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010600:	6013      	str	r3, [r2, #0]
 8010602:	e00b      	b.n	801061c <HAL_RCC_OscConfig+0xb0>
 8010604:	4b84      	ldr	r3, [pc, #528]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a83      	ldr	r2, [pc, #524]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 801060a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801060e:	6013      	str	r3, [r2, #0]
 8010610:	4b81      	ldr	r3, [pc, #516]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4a80      	ldr	r2, [pc, #512]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801061a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d013      	beq.n	801064c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010624:	f7fe f87e 	bl	800e724 <HAL_GetTick>
 8010628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801062a:	e008      	b.n	801063e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801062c:	f7fe f87a 	bl	800e724 <HAL_GetTick>
 8010630:	4602      	mov	r2, r0
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	1ad3      	subs	r3, r2, r3
 8010636:	2b64      	cmp	r3, #100	; 0x64
 8010638:	d901      	bls.n	801063e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801063a:	2303      	movs	r3, #3
 801063c:	e1fb      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801063e:	4b76      	ldr	r3, [pc, #472]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010646:	2b00      	cmp	r3, #0
 8010648:	d0f0      	beq.n	801062c <HAL_RCC_OscConfig+0xc0>
 801064a:	e014      	b.n	8010676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801064c:	f7fe f86a 	bl	800e724 <HAL_GetTick>
 8010650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010652:	e008      	b.n	8010666 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010654:	f7fe f866 	bl	800e724 <HAL_GetTick>
 8010658:	4602      	mov	r2, r0
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	2b64      	cmp	r3, #100	; 0x64
 8010660:	d901      	bls.n	8010666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010662:	2303      	movs	r3, #3
 8010664:	e1e7      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010666:	4b6c      	ldr	r3, [pc, #432]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1f0      	bne.n	8010654 <HAL_RCC_OscConfig+0xe8>
 8010672:	e000      	b.n	8010676 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f003 0302 	and.w	r3, r3, #2
 801067e:	2b00      	cmp	r3, #0
 8010680:	d063      	beq.n	801074a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010682:	4b65      	ldr	r3, [pc, #404]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	f003 030c 	and.w	r3, r3, #12
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00b      	beq.n	80106a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801068e:	4b62      	ldr	r3, [pc, #392]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010696:	2b08      	cmp	r3, #8
 8010698:	d11c      	bne.n	80106d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801069a:	4b5f      	ldr	r3, [pc, #380]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d116      	bne.n	80106d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80106a6:	4b5c      	ldr	r3, [pc, #368]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f003 0302 	and.w	r3, r3, #2
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d005      	beq.n	80106be <HAL_RCC_OscConfig+0x152>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d001      	beq.n	80106be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80106ba:	2301      	movs	r3, #1
 80106bc:	e1bb      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80106be:	4b56      	ldr	r3, [pc, #344]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	691b      	ldr	r3, [r3, #16]
 80106ca:	00db      	lsls	r3, r3, #3
 80106cc:	4952      	ldr	r1, [pc, #328]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80106ce:	4313      	orrs	r3, r2
 80106d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80106d2:	e03a      	b.n	801074a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d020      	beq.n	801071e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80106dc:	4b4f      	ldr	r3, [pc, #316]	; (801081c <HAL_RCC_OscConfig+0x2b0>)
 80106de:	2201      	movs	r2, #1
 80106e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106e2:	f7fe f81f 	bl	800e724 <HAL_GetTick>
 80106e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80106e8:	e008      	b.n	80106fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80106ea:	f7fe f81b 	bl	800e724 <HAL_GetTick>
 80106ee:	4602      	mov	r2, r0
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	1ad3      	subs	r3, r2, r3
 80106f4:	2b02      	cmp	r3, #2
 80106f6:	d901      	bls.n	80106fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80106f8:	2303      	movs	r3, #3
 80106fa:	e19c      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80106fc:	4b46      	ldr	r3, [pc, #280]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f003 0302 	and.w	r3, r3, #2
 8010704:	2b00      	cmp	r3, #0
 8010706:	d0f0      	beq.n	80106ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010708:	4b43      	ldr	r3, [pc, #268]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	691b      	ldr	r3, [r3, #16]
 8010714:	00db      	lsls	r3, r3, #3
 8010716:	4940      	ldr	r1, [pc, #256]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010718:	4313      	orrs	r3, r2
 801071a:	600b      	str	r3, [r1, #0]
 801071c:	e015      	b.n	801074a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801071e:	4b3f      	ldr	r3, [pc, #252]	; (801081c <HAL_RCC_OscConfig+0x2b0>)
 8010720:	2200      	movs	r2, #0
 8010722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010724:	f7fd fffe 	bl	800e724 <HAL_GetTick>
 8010728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801072a:	e008      	b.n	801073e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801072c:	f7fd fffa 	bl	800e724 <HAL_GetTick>
 8010730:	4602      	mov	r2, r0
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	2b02      	cmp	r3, #2
 8010738:	d901      	bls.n	801073e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801073a:	2303      	movs	r3, #3
 801073c:	e17b      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801073e:	4b36      	ldr	r3, [pc, #216]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f003 0302 	and.w	r3, r3, #2
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1f0      	bne.n	801072c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f003 0308 	and.w	r3, r3, #8
 8010752:	2b00      	cmp	r3, #0
 8010754:	d030      	beq.n	80107b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	695b      	ldr	r3, [r3, #20]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d016      	beq.n	801078c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801075e:	4b30      	ldr	r3, [pc, #192]	; (8010820 <HAL_RCC_OscConfig+0x2b4>)
 8010760:	2201      	movs	r2, #1
 8010762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010764:	f7fd ffde 	bl	800e724 <HAL_GetTick>
 8010768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801076a:	e008      	b.n	801077e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801076c:	f7fd ffda 	bl	800e724 <HAL_GetTick>
 8010770:	4602      	mov	r2, r0
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	1ad3      	subs	r3, r2, r3
 8010776:	2b02      	cmp	r3, #2
 8010778:	d901      	bls.n	801077e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801077a:	2303      	movs	r3, #3
 801077c:	e15b      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801077e:	4b26      	ldr	r3, [pc, #152]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 8010780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010782:	f003 0302 	and.w	r3, r3, #2
 8010786:	2b00      	cmp	r3, #0
 8010788:	d0f0      	beq.n	801076c <HAL_RCC_OscConfig+0x200>
 801078a:	e015      	b.n	80107b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801078c:	4b24      	ldr	r3, [pc, #144]	; (8010820 <HAL_RCC_OscConfig+0x2b4>)
 801078e:	2200      	movs	r2, #0
 8010790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010792:	f7fd ffc7 	bl	800e724 <HAL_GetTick>
 8010796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010798:	e008      	b.n	80107ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801079a:	f7fd ffc3 	bl	800e724 <HAL_GetTick>
 801079e:	4602      	mov	r2, r0
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	2b02      	cmp	r3, #2
 80107a6:	d901      	bls.n	80107ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80107a8:	2303      	movs	r3, #3
 80107aa:	e144      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80107ac:	4b1a      	ldr	r3, [pc, #104]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80107ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107b0:	f003 0302 	and.w	r3, r3, #2
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d1f0      	bne.n	801079a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f003 0304 	and.w	r3, r3, #4
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f000 80a0 	beq.w	8010906 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80107c6:	2300      	movs	r3, #0
 80107c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80107ca:	4b13      	ldr	r3, [pc, #76]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80107cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d10f      	bne.n	80107f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80107d6:	2300      	movs	r3, #0
 80107d8:	60bb      	str	r3, [r7, #8]
 80107da:	4b0f      	ldr	r3, [pc, #60]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80107dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107de:	4a0e      	ldr	r2, [pc, #56]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80107e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107e4:	6413      	str	r3, [r2, #64]	; 0x40
 80107e6:	4b0c      	ldr	r3, [pc, #48]	; (8010818 <HAL_RCC_OscConfig+0x2ac>)
 80107e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107ee:	60bb      	str	r3, [r7, #8]
 80107f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80107f2:	2301      	movs	r3, #1
 80107f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80107f6:	4b0b      	ldr	r3, [pc, #44]	; (8010824 <HAL_RCC_OscConfig+0x2b8>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d121      	bne.n	8010846 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010802:	4b08      	ldr	r3, [pc, #32]	; (8010824 <HAL_RCC_OscConfig+0x2b8>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4a07      	ldr	r2, [pc, #28]	; (8010824 <HAL_RCC_OscConfig+0x2b8>)
 8010808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801080c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801080e:	f7fd ff89 	bl	800e724 <HAL_GetTick>
 8010812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010814:	e011      	b.n	801083a <HAL_RCC_OscConfig+0x2ce>
 8010816:	bf00      	nop
 8010818:	40023800 	.word	0x40023800
 801081c:	42470000 	.word	0x42470000
 8010820:	42470e80 	.word	0x42470e80
 8010824:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010828:	f7fd ff7c 	bl	800e724 <HAL_GetTick>
 801082c:	4602      	mov	r2, r0
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	2b02      	cmp	r3, #2
 8010834:	d901      	bls.n	801083a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8010836:	2303      	movs	r3, #3
 8010838:	e0fd      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801083a:	4b81      	ldr	r3, [pc, #516]	; (8010a40 <HAL_RCC_OscConfig+0x4d4>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010842:	2b00      	cmp	r3, #0
 8010844:	d0f0      	beq.n	8010828 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	2b01      	cmp	r3, #1
 801084c:	d106      	bne.n	801085c <HAL_RCC_OscConfig+0x2f0>
 801084e:	4b7d      	ldr	r3, [pc, #500]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010852:	4a7c      	ldr	r2, [pc, #496]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010854:	f043 0301 	orr.w	r3, r3, #1
 8010858:	6713      	str	r3, [r2, #112]	; 0x70
 801085a:	e01c      	b.n	8010896 <HAL_RCC_OscConfig+0x32a>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	2b05      	cmp	r3, #5
 8010862:	d10c      	bne.n	801087e <HAL_RCC_OscConfig+0x312>
 8010864:	4b77      	ldr	r3, [pc, #476]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010868:	4a76      	ldr	r2, [pc, #472]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 801086a:	f043 0304 	orr.w	r3, r3, #4
 801086e:	6713      	str	r3, [r2, #112]	; 0x70
 8010870:	4b74      	ldr	r3, [pc, #464]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010874:	4a73      	ldr	r2, [pc, #460]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010876:	f043 0301 	orr.w	r3, r3, #1
 801087a:	6713      	str	r3, [r2, #112]	; 0x70
 801087c:	e00b      	b.n	8010896 <HAL_RCC_OscConfig+0x32a>
 801087e:	4b71      	ldr	r3, [pc, #452]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010882:	4a70      	ldr	r2, [pc, #448]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010884:	f023 0301 	bic.w	r3, r3, #1
 8010888:	6713      	str	r3, [r2, #112]	; 0x70
 801088a:	4b6e      	ldr	r3, [pc, #440]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 801088c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801088e:	4a6d      	ldr	r2, [pc, #436]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010890:	f023 0304 	bic.w	r3, r3, #4
 8010894:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	689b      	ldr	r3, [r3, #8]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d015      	beq.n	80108ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801089e:	f7fd ff41 	bl	800e724 <HAL_GetTick>
 80108a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80108a4:	e00a      	b.n	80108bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80108a6:	f7fd ff3d 	bl	800e724 <HAL_GetTick>
 80108aa:	4602      	mov	r2, r0
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d901      	bls.n	80108bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80108b8:	2303      	movs	r3, #3
 80108ba:	e0bc      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80108bc:	4b61      	ldr	r3, [pc, #388]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 80108be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108c0:	f003 0302 	and.w	r3, r3, #2
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d0ee      	beq.n	80108a6 <HAL_RCC_OscConfig+0x33a>
 80108c8:	e014      	b.n	80108f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80108ca:	f7fd ff2b 	bl	800e724 <HAL_GetTick>
 80108ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80108d0:	e00a      	b.n	80108e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80108d2:	f7fd ff27 	bl	800e724 <HAL_GetTick>
 80108d6:	4602      	mov	r2, r0
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d901      	bls.n	80108e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80108e4:	2303      	movs	r3, #3
 80108e6:	e0a6      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80108e8:	4b56      	ldr	r3, [pc, #344]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 80108ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108ec:	f003 0302 	and.w	r3, r3, #2
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d1ee      	bne.n	80108d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80108f4:	7dfb      	ldrb	r3, [r7, #23]
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d105      	bne.n	8010906 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80108fa:	4b52      	ldr	r3, [pc, #328]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 80108fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108fe:	4a51      	ldr	r2, [pc, #324]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010904:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	699b      	ldr	r3, [r3, #24]
 801090a:	2b00      	cmp	r3, #0
 801090c:	f000 8092 	beq.w	8010a34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010910:	4b4c      	ldr	r3, [pc, #304]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010912:	689b      	ldr	r3, [r3, #8]
 8010914:	f003 030c 	and.w	r3, r3, #12
 8010918:	2b08      	cmp	r3, #8
 801091a:	d05c      	beq.n	80109d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	699b      	ldr	r3, [r3, #24]
 8010920:	2b02      	cmp	r3, #2
 8010922:	d141      	bne.n	80109a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010924:	4b48      	ldr	r3, [pc, #288]	; (8010a48 <HAL_RCC_OscConfig+0x4dc>)
 8010926:	2200      	movs	r2, #0
 8010928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801092a:	f7fd fefb 	bl	800e724 <HAL_GetTick>
 801092e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010930:	e008      	b.n	8010944 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010932:	f7fd fef7 	bl	800e724 <HAL_GetTick>
 8010936:	4602      	mov	r2, r0
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	1ad3      	subs	r3, r2, r3
 801093c:	2b02      	cmp	r3, #2
 801093e:	d901      	bls.n	8010944 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8010940:	2303      	movs	r3, #3
 8010942:	e078      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010944:	4b3f      	ldr	r3, [pc, #252]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d1f0      	bne.n	8010932 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	69da      	ldr	r2, [r3, #28]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6a1b      	ldr	r3, [r3, #32]
 8010958:	431a      	orrs	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095e:	019b      	lsls	r3, r3, #6
 8010960:	431a      	orrs	r2, r3
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010966:	085b      	lsrs	r3, r3, #1
 8010968:	3b01      	subs	r3, #1
 801096a:	041b      	lsls	r3, r3, #16
 801096c:	431a      	orrs	r2, r3
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010972:	061b      	lsls	r3, r3, #24
 8010974:	4933      	ldr	r1, [pc, #204]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 8010976:	4313      	orrs	r3, r2
 8010978:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801097a:	4b33      	ldr	r3, [pc, #204]	; (8010a48 <HAL_RCC_OscConfig+0x4dc>)
 801097c:	2201      	movs	r2, #1
 801097e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010980:	f7fd fed0 	bl	800e724 <HAL_GetTick>
 8010984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010986:	e008      	b.n	801099a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010988:	f7fd fecc 	bl	800e724 <HAL_GetTick>
 801098c:	4602      	mov	r2, r0
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	2b02      	cmp	r3, #2
 8010994:	d901      	bls.n	801099a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010996:	2303      	movs	r3, #3
 8010998:	e04d      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801099a:	4b2a      	ldr	r3, [pc, #168]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d0f0      	beq.n	8010988 <HAL_RCC_OscConfig+0x41c>
 80109a6:	e045      	b.n	8010a34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80109a8:	4b27      	ldr	r3, [pc, #156]	; (8010a48 <HAL_RCC_OscConfig+0x4dc>)
 80109aa:	2200      	movs	r2, #0
 80109ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80109ae:	f7fd feb9 	bl	800e724 <HAL_GetTick>
 80109b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109b4:	e008      	b.n	80109c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80109b6:	f7fd feb5 	bl	800e724 <HAL_GetTick>
 80109ba:	4602      	mov	r2, r0
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	1ad3      	subs	r3, r2, r3
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d901      	bls.n	80109c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80109c4:	2303      	movs	r3, #3
 80109c6:	e036      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109c8:	4b1e      	ldr	r3, [pc, #120]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d1f0      	bne.n	80109b6 <HAL_RCC_OscConfig+0x44a>
 80109d4:	e02e      	b.n	8010a34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	699b      	ldr	r3, [r3, #24]
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d101      	bne.n	80109e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
 80109e0:	e029      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80109e2:	4b18      	ldr	r3, [pc, #96]	; (8010a44 <HAL_RCC_OscConfig+0x4d8>)
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	69db      	ldr	r3, [r3, #28]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d11c      	bne.n	8010a30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d115      	bne.n	8010a30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010a0a:	4013      	ands	r3, r2
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d10d      	bne.n	8010a30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d106      	bne.n	8010a30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d001      	beq.n	8010a34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8010a30:	2301      	movs	r3, #1
 8010a32:	e000      	b.n	8010a36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3718      	adds	r7, #24
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	40007000 	.word	0x40007000
 8010a44:	40023800 	.word	0x40023800
 8010a48:	42470060 	.word	0x42470060

08010a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d101      	bne.n	8010a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	e0cc      	b.n	8010bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010a60:	4b68      	ldr	r3, [pc, #416]	; (8010c04 <HAL_RCC_ClockConfig+0x1b8>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f003 030f 	and.w	r3, r3, #15
 8010a68:	683a      	ldr	r2, [r7, #0]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d90c      	bls.n	8010a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010a6e:	4b65      	ldr	r3, [pc, #404]	; (8010c04 <HAL_RCC_ClockConfig+0x1b8>)
 8010a70:	683a      	ldr	r2, [r7, #0]
 8010a72:	b2d2      	uxtb	r2, r2
 8010a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010a76:	4b63      	ldr	r3, [pc, #396]	; (8010c04 <HAL_RCC_ClockConfig+0x1b8>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f003 030f 	and.w	r3, r3, #15
 8010a7e:	683a      	ldr	r2, [r7, #0]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d001      	beq.n	8010a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010a84:	2301      	movs	r3, #1
 8010a86:	e0b8      	b.n	8010bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f003 0302 	and.w	r3, r3, #2
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d020      	beq.n	8010ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f003 0304 	and.w	r3, r3, #4
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d005      	beq.n	8010aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010aa0:	4b59      	ldr	r3, [pc, #356]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010aa2:	689b      	ldr	r3, [r3, #8]
 8010aa4:	4a58      	ldr	r2, [pc, #352]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f003 0308 	and.w	r3, r3, #8
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d005      	beq.n	8010ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010ab8:	4b53      	ldr	r3, [pc, #332]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	4a52      	ldr	r2, [pc, #328]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010ac4:	4b50      	ldr	r3, [pc, #320]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010ac6:	689b      	ldr	r3, [r3, #8]
 8010ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	689b      	ldr	r3, [r3, #8]
 8010ad0:	494d      	ldr	r1, [pc, #308]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f003 0301 	and.w	r3, r3, #1
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d044      	beq.n	8010b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	685b      	ldr	r3, [r3, #4]
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d107      	bne.n	8010afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010aea:	4b47      	ldr	r3, [pc, #284]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d119      	bne.n	8010b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010af6:	2301      	movs	r3, #1
 8010af8:	e07f      	b.n	8010bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	2b02      	cmp	r3, #2
 8010b00:	d003      	beq.n	8010b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010b06:	2b03      	cmp	r3, #3
 8010b08:	d107      	bne.n	8010b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010b0a:	4b3f      	ldr	r3, [pc, #252]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d109      	bne.n	8010b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010b16:	2301      	movs	r3, #1
 8010b18:	e06f      	b.n	8010bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010b1a:	4b3b      	ldr	r3, [pc, #236]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f003 0302 	and.w	r3, r3, #2
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d101      	bne.n	8010b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010b26:	2301      	movs	r3, #1
 8010b28:	e067      	b.n	8010bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010b2a:	4b37      	ldr	r3, [pc, #220]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	f023 0203 	bic.w	r2, r3, #3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	4934      	ldr	r1, [pc, #208]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010b3c:	f7fd fdf2 	bl	800e724 <HAL_GetTick>
 8010b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010b42:	e00a      	b.n	8010b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010b44:	f7fd fdee 	bl	800e724 <HAL_GetTick>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	1ad3      	subs	r3, r2, r3
 8010b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d901      	bls.n	8010b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010b56:	2303      	movs	r3, #3
 8010b58:	e04f      	b.n	8010bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010b5a:	4b2b      	ldr	r3, [pc, #172]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010b5c:	689b      	ldr	r3, [r3, #8]
 8010b5e:	f003 020c 	and.w	r2, r3, #12
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d1eb      	bne.n	8010b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010b6c:	4b25      	ldr	r3, [pc, #148]	; (8010c04 <HAL_RCC_ClockConfig+0x1b8>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f003 030f 	and.w	r3, r3, #15
 8010b74:	683a      	ldr	r2, [r7, #0]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d20c      	bcs.n	8010b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b7a:	4b22      	ldr	r3, [pc, #136]	; (8010c04 <HAL_RCC_ClockConfig+0x1b8>)
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	b2d2      	uxtb	r2, r2
 8010b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010b82:	4b20      	ldr	r3, [pc, #128]	; (8010c04 <HAL_RCC_ClockConfig+0x1b8>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f003 030f 	and.w	r3, r3, #15
 8010b8a:	683a      	ldr	r2, [r7, #0]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d001      	beq.n	8010b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010b90:	2301      	movs	r3, #1
 8010b92:	e032      	b.n	8010bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f003 0304 	and.w	r3, r3, #4
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d008      	beq.n	8010bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010ba0:	4b19      	ldr	r3, [pc, #100]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	4916      	ldr	r1, [pc, #88]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f003 0308 	and.w	r3, r3, #8
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d009      	beq.n	8010bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010bbe:	4b12      	ldr	r3, [pc, #72]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	691b      	ldr	r3, [r3, #16]
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	490e      	ldr	r1, [pc, #56]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010bd2:	f000 f821 	bl	8010c18 <HAL_RCC_GetSysClockFreq>
 8010bd6:	4601      	mov	r1, r0
 8010bd8:	4b0b      	ldr	r3, [pc, #44]	; (8010c08 <HAL_RCC_ClockConfig+0x1bc>)
 8010bda:	689b      	ldr	r3, [r3, #8]
 8010bdc:	091b      	lsrs	r3, r3, #4
 8010bde:	f003 030f 	and.w	r3, r3, #15
 8010be2:	4a0a      	ldr	r2, [pc, #40]	; (8010c0c <HAL_RCC_ClockConfig+0x1c0>)
 8010be4:	5cd3      	ldrb	r3, [r2, r3]
 8010be6:	fa21 f303 	lsr.w	r3, r1, r3
 8010bea:	4a09      	ldr	r2, [pc, #36]	; (8010c10 <HAL_RCC_ClockConfig+0x1c4>)
 8010bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010bee:	4b09      	ldr	r3, [pc, #36]	; (8010c14 <HAL_RCC_ClockConfig+0x1c8>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fd fd52 	bl	800e69c <HAL_InitTick>

  return HAL_OK;
 8010bf8:	2300      	movs	r3, #0
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	40023c00 	.word	0x40023c00
 8010c08:	40023800 	.word	0x40023800
 8010c0c:	08019188 	.word	0x08019188
 8010c10:	20000018 	.word	0x20000018
 8010c14:	2000001c 	.word	0x2000001c

08010c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	607b      	str	r3, [r7, #4]
 8010c22:	2300      	movs	r3, #0
 8010c24:	60fb      	str	r3, [r7, #12]
 8010c26:	2300      	movs	r3, #0
 8010c28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010c2e:	4b63      	ldr	r3, [pc, #396]	; (8010dbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	f003 030c 	and.w	r3, r3, #12
 8010c36:	2b04      	cmp	r3, #4
 8010c38:	d007      	beq.n	8010c4a <HAL_RCC_GetSysClockFreq+0x32>
 8010c3a:	2b08      	cmp	r3, #8
 8010c3c:	d008      	beq.n	8010c50 <HAL_RCC_GetSysClockFreq+0x38>
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f040 80b4 	bne.w	8010dac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010c44:	4b5e      	ldr	r3, [pc, #376]	; (8010dc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010c46:	60bb      	str	r3, [r7, #8]
       break;
 8010c48:	e0b3      	b.n	8010db2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010c4a:	4b5e      	ldr	r3, [pc, #376]	; (8010dc4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8010c4c:	60bb      	str	r3, [r7, #8]
      break;
 8010c4e:	e0b0      	b.n	8010db2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010c50:	4b5a      	ldr	r3, [pc, #360]	; (8010dbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010c5a:	4b58      	ldr	r3, [pc, #352]	; (8010dbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d04a      	beq.n	8010cfc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010c66:	4b55      	ldr	r3, [pc, #340]	; (8010dbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	099b      	lsrs	r3, r3, #6
 8010c6c:	f04f 0400 	mov.w	r4, #0
 8010c70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010c74:	f04f 0200 	mov.w	r2, #0
 8010c78:	ea03 0501 	and.w	r5, r3, r1
 8010c7c:	ea04 0602 	and.w	r6, r4, r2
 8010c80:	4629      	mov	r1, r5
 8010c82:	4632      	mov	r2, r6
 8010c84:	f04f 0300 	mov.w	r3, #0
 8010c88:	f04f 0400 	mov.w	r4, #0
 8010c8c:	0154      	lsls	r4, r2, #5
 8010c8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010c92:	014b      	lsls	r3, r1, #5
 8010c94:	4619      	mov	r1, r3
 8010c96:	4622      	mov	r2, r4
 8010c98:	1b49      	subs	r1, r1, r5
 8010c9a:	eb62 0206 	sbc.w	r2, r2, r6
 8010c9e:	f04f 0300 	mov.w	r3, #0
 8010ca2:	f04f 0400 	mov.w	r4, #0
 8010ca6:	0194      	lsls	r4, r2, #6
 8010ca8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010cac:	018b      	lsls	r3, r1, #6
 8010cae:	1a5b      	subs	r3, r3, r1
 8010cb0:	eb64 0402 	sbc.w	r4, r4, r2
 8010cb4:	f04f 0100 	mov.w	r1, #0
 8010cb8:	f04f 0200 	mov.w	r2, #0
 8010cbc:	00e2      	lsls	r2, r4, #3
 8010cbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010cc2:	00d9      	lsls	r1, r3, #3
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	4614      	mov	r4, r2
 8010cc8:	195b      	adds	r3, r3, r5
 8010cca:	eb44 0406 	adc.w	r4, r4, r6
 8010cce:	f04f 0100 	mov.w	r1, #0
 8010cd2:	f04f 0200 	mov.w	r2, #0
 8010cd6:	0262      	lsls	r2, r4, #9
 8010cd8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8010cdc:	0259      	lsls	r1, r3, #9
 8010cde:	460b      	mov	r3, r1
 8010ce0:	4614      	mov	r4, r2
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	4621      	mov	r1, r4
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f04f 0400 	mov.w	r4, #0
 8010cec:	461a      	mov	r2, r3
 8010cee:	4623      	mov	r3, r4
 8010cf0:	f7f7 ff02 	bl	8008af8 <__aeabi_uldivmod>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	460c      	mov	r4, r1
 8010cf8:	60fb      	str	r3, [r7, #12]
 8010cfa:	e049      	b.n	8010d90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010cfc:	4b2f      	ldr	r3, [pc, #188]	; (8010dbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	099b      	lsrs	r3, r3, #6
 8010d02:	f04f 0400 	mov.w	r4, #0
 8010d06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010d0a:	f04f 0200 	mov.w	r2, #0
 8010d0e:	ea03 0501 	and.w	r5, r3, r1
 8010d12:	ea04 0602 	and.w	r6, r4, r2
 8010d16:	4629      	mov	r1, r5
 8010d18:	4632      	mov	r2, r6
 8010d1a:	f04f 0300 	mov.w	r3, #0
 8010d1e:	f04f 0400 	mov.w	r4, #0
 8010d22:	0154      	lsls	r4, r2, #5
 8010d24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010d28:	014b      	lsls	r3, r1, #5
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	4622      	mov	r2, r4
 8010d2e:	1b49      	subs	r1, r1, r5
 8010d30:	eb62 0206 	sbc.w	r2, r2, r6
 8010d34:	f04f 0300 	mov.w	r3, #0
 8010d38:	f04f 0400 	mov.w	r4, #0
 8010d3c:	0194      	lsls	r4, r2, #6
 8010d3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010d42:	018b      	lsls	r3, r1, #6
 8010d44:	1a5b      	subs	r3, r3, r1
 8010d46:	eb64 0402 	sbc.w	r4, r4, r2
 8010d4a:	f04f 0100 	mov.w	r1, #0
 8010d4e:	f04f 0200 	mov.w	r2, #0
 8010d52:	00e2      	lsls	r2, r4, #3
 8010d54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010d58:	00d9      	lsls	r1, r3, #3
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	4614      	mov	r4, r2
 8010d5e:	195b      	adds	r3, r3, r5
 8010d60:	eb44 0406 	adc.w	r4, r4, r6
 8010d64:	f04f 0100 	mov.w	r1, #0
 8010d68:	f04f 0200 	mov.w	r2, #0
 8010d6c:	02a2      	lsls	r2, r4, #10
 8010d6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8010d72:	0299      	lsls	r1, r3, #10
 8010d74:	460b      	mov	r3, r1
 8010d76:	4614      	mov	r4, r2
 8010d78:	4618      	mov	r0, r3
 8010d7a:	4621      	mov	r1, r4
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f04f 0400 	mov.w	r4, #0
 8010d82:	461a      	mov	r2, r3
 8010d84:	4623      	mov	r3, r4
 8010d86:	f7f7 feb7 	bl	8008af8 <__aeabi_uldivmod>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	460c      	mov	r4, r1
 8010d8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010d90:	4b0a      	ldr	r3, [pc, #40]	; (8010dbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	0c1b      	lsrs	r3, r3, #16
 8010d96:	f003 0303 	and.w	r3, r3, #3
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	005b      	lsls	r3, r3, #1
 8010d9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8010da0:	68fa      	ldr	r2, [r7, #12]
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010da8:	60bb      	str	r3, [r7, #8]
      break;
 8010daa:	e002      	b.n	8010db2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010dac:	4b04      	ldr	r3, [pc, #16]	; (8010dc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010dae:	60bb      	str	r3, [r7, #8]
      break;
 8010db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010db2:	68bb      	ldr	r3, [r7, #8]
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3714      	adds	r7, #20
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dbc:	40023800 	.word	0x40023800
 8010dc0:	00f42400 	.word	0x00f42400
 8010dc4:	007a1200 	.word	0x007a1200

08010dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010dcc:	4b03      	ldr	r3, [pc, #12]	; (8010ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8010dce:	681b      	ldr	r3, [r3, #0]
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr
 8010dda:	bf00      	nop
 8010ddc:	20000018 	.word	0x20000018

08010de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010de4:	f7ff fff0 	bl	8010dc8 <HAL_RCC_GetHCLKFreq>
 8010de8:	4601      	mov	r1, r0
 8010dea:	4b05      	ldr	r3, [pc, #20]	; (8010e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010dec:	689b      	ldr	r3, [r3, #8]
 8010dee:	0a9b      	lsrs	r3, r3, #10
 8010df0:	f003 0307 	and.w	r3, r3, #7
 8010df4:	4a03      	ldr	r2, [pc, #12]	; (8010e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010df6:	5cd3      	ldrb	r3, [r2, r3]
 8010df8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	40023800 	.word	0x40023800
 8010e04:	08019198 	.word	0x08019198

08010e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010e0c:	f7ff ffdc 	bl	8010dc8 <HAL_RCC_GetHCLKFreq>
 8010e10:	4601      	mov	r1, r0
 8010e12:	4b05      	ldr	r3, [pc, #20]	; (8010e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	0b5b      	lsrs	r3, r3, #13
 8010e18:	f003 0307 	and.w	r3, r3, #7
 8010e1c:	4a03      	ldr	r2, [pc, #12]	; (8010e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010e1e:	5cd3      	ldrb	r3, [r2, r3]
 8010e20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	40023800 	.word	0x40023800
 8010e2c:	08019198 	.word	0x08019198

08010e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d101      	bne.n	8010e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	e056      	b.n	8010ef0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d106      	bne.n	8010e62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2200      	movs	r2, #0
 8010e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7fc fced 	bl	800d83c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2202      	movs	r2, #2
 8010e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	685a      	ldr	r2, [r3, #4]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	689b      	ldr	r3, [r3, #8]
 8010e82:	431a      	orrs	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	431a      	orrs	r2, r3
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	691b      	ldr	r3, [r3, #16]
 8010e8e:	431a      	orrs	r2, r3
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	695b      	ldr	r3, [r3, #20]
 8010e94:	431a      	orrs	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	699b      	ldr	r3, [r3, #24]
 8010e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e9e:	431a      	orrs	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	69db      	ldr	r3, [r3, #28]
 8010ea4:	431a      	orrs	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6a1b      	ldr	r3, [r3, #32]
 8010eaa:	ea42 0103 	orr.w	r1, r2, r3
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	430a      	orrs	r2, r1
 8010eb8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	699b      	ldr	r3, [r3, #24]
 8010ebe:	0c1b      	lsrs	r3, r3, #16
 8010ec0:	f003 0104 	and.w	r1, r3, #4
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	430a      	orrs	r2, r1
 8010ece:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	69da      	ldr	r2, [r3, #28]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010ede:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b088      	sub	sp, #32
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	603b      	str	r3, [r7, #0]
 8010f04:	4613      	mov	r3, r2
 8010f06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d101      	bne.n	8010f1a <HAL_SPI_Transmit+0x22>
 8010f16:	2302      	movs	r3, #2
 8010f18:	e11e      	b.n	8011158 <HAL_SPI_Transmit+0x260>
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010f22:	f7fd fbff 	bl	800e724 <HAL_GetTick>
 8010f26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010f28:	88fb      	ldrh	r3, [r7, #6]
 8010f2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d002      	beq.n	8010f3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010f38:	2302      	movs	r3, #2
 8010f3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010f3c:	e103      	b.n	8011146 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d002      	beq.n	8010f4a <HAL_SPI_Transmit+0x52>
 8010f44:	88fb      	ldrh	r3, [r7, #6]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d102      	bne.n	8010f50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010f4e:	e0fa      	b.n	8011146 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2203      	movs	r2, #3
 8010f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	68ba      	ldr	r2, [r7, #8]
 8010f62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	88fa      	ldrh	r2, [r7, #6]
 8010f68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	88fa      	ldrh	r2, [r7, #6]
 8010f6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2200      	movs	r2, #0
 8010f74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2200      	movs	r2, #0
 8010f86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f96:	d107      	bne.n	8010fa8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010fa6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fb2:	2b40      	cmp	r3, #64	; 0x40
 8010fb4:	d007      	beq.n	8010fc6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010fc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010fce:	d14b      	bne.n	8011068 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d002      	beq.n	8010fde <HAL_SPI_Transmit+0xe6>
 8010fd8:	8afb      	ldrh	r3, [r7, #22]
 8010fda:	2b01      	cmp	r3, #1
 8010fdc:	d13e      	bne.n	801105c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fe2:	881a      	ldrh	r2, [r3, #0]
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fee:	1c9a      	adds	r2, r3, #2
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	3b01      	subs	r3, #1
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011002:	e02b      	b.n	801105c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	689b      	ldr	r3, [r3, #8]
 801100a:	f003 0302 	and.w	r3, r3, #2
 801100e:	2b02      	cmp	r3, #2
 8011010:	d112      	bne.n	8011038 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011016:	881a      	ldrh	r2, [r3, #0]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011022:	1c9a      	adds	r2, r3, #2
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801102c:	b29b      	uxth	r3, r3
 801102e:	3b01      	subs	r3, #1
 8011030:	b29a      	uxth	r2, r3
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	86da      	strh	r2, [r3, #54]	; 0x36
 8011036:	e011      	b.n	801105c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011038:	f7fd fb74 	bl	800e724 <HAL_GetTick>
 801103c:	4602      	mov	r2, r0
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	683a      	ldr	r2, [r7, #0]
 8011044:	429a      	cmp	r2, r3
 8011046:	d803      	bhi.n	8011050 <HAL_SPI_Transmit+0x158>
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801104e:	d102      	bne.n	8011056 <HAL_SPI_Transmit+0x15e>
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d102      	bne.n	801105c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8011056:	2303      	movs	r3, #3
 8011058:	77fb      	strb	r3, [r7, #31]
          goto error;
 801105a:	e074      	b.n	8011146 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011060:	b29b      	uxth	r3, r3
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1ce      	bne.n	8011004 <HAL_SPI_Transmit+0x10c>
 8011066:	e04c      	b.n	8011102 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d002      	beq.n	8011076 <HAL_SPI_Transmit+0x17e>
 8011070:	8afb      	ldrh	r3, [r7, #22]
 8011072:	2b01      	cmp	r3, #1
 8011074:	d140      	bne.n	80110f8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	330c      	adds	r3, #12
 8011080:	7812      	ldrb	r2, [r2, #0]
 8011082:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011088:	1c5a      	adds	r2, r3, #1
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011092:	b29b      	uxth	r3, r3
 8011094:	3b01      	subs	r3, #1
 8011096:	b29a      	uxth	r2, r3
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801109c:	e02c      	b.n	80110f8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	689b      	ldr	r3, [r3, #8]
 80110a4:	f003 0302 	and.w	r3, r3, #2
 80110a8:	2b02      	cmp	r3, #2
 80110aa:	d113      	bne.n	80110d4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	330c      	adds	r3, #12
 80110b6:	7812      	ldrb	r2, [r2, #0]
 80110b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110be:	1c5a      	adds	r2, r3, #1
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	3b01      	subs	r3, #1
 80110cc:	b29a      	uxth	r2, r3
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80110d2:	e011      	b.n	80110f8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80110d4:	f7fd fb26 	bl	800e724 <HAL_GetTick>
 80110d8:	4602      	mov	r2, r0
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	1ad3      	subs	r3, r2, r3
 80110de:	683a      	ldr	r2, [r7, #0]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d803      	bhi.n	80110ec <HAL_SPI_Transmit+0x1f4>
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ea:	d102      	bne.n	80110f2 <HAL_SPI_Transmit+0x1fa>
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d102      	bne.n	80110f8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80110f2:	2303      	movs	r3, #3
 80110f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80110f6:	e026      	b.n	8011146 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d1cd      	bne.n	801109e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011102:	69ba      	ldr	r2, [r7, #24]
 8011104:	6839      	ldr	r1, [r7, #0]
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f000 fcc4 	bl	8011a94 <SPI_EndRxTxTransaction>
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d002      	beq.n	8011118 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2220      	movs	r2, #32
 8011116:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	689b      	ldr	r3, [r3, #8]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10a      	bne.n	8011136 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011120:	2300      	movs	r3, #0
 8011122:	613b      	str	r3, [r7, #16]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	68db      	ldr	r3, [r3, #12]
 801112a:	613b      	str	r3, [r7, #16]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	689b      	ldr	r3, [r3, #8]
 8011132:	613b      	str	r3, [r7, #16]
 8011134:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801113a:	2b00      	cmp	r3, #0
 801113c:	d002      	beq.n	8011144 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801113e:	2301      	movs	r3, #1
 8011140:	77fb      	strb	r3, [r7, #31]
 8011142:	e000      	b.n	8011146 <HAL_SPI_Transmit+0x24e>
  }

error:
 8011144:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2201      	movs	r2, #1
 801114a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2200      	movs	r2, #0
 8011152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011156:	7ffb      	ldrb	r3, [r7, #31]
}
 8011158:	4618      	mov	r0, r3
 801115a:	3720      	adds	r7, #32
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b088      	sub	sp, #32
 8011164:	af02      	add	r7, sp, #8
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	603b      	str	r3, [r7, #0]
 801116c:	4613      	mov	r3, r2
 801116e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011170:	2300      	movs	r3, #0
 8011172:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801117c:	d112      	bne.n	80111a4 <HAL_SPI_Receive+0x44>
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	689b      	ldr	r3, [r3, #8]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d10e      	bne.n	80111a4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2204      	movs	r2, #4
 801118a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801118e:	88fa      	ldrh	r2, [r7, #6]
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	4613      	mov	r3, r2
 8011196:	68ba      	ldr	r2, [r7, #8]
 8011198:	68b9      	ldr	r1, [r7, #8]
 801119a:	68f8      	ldr	r0, [r7, #12]
 801119c:	f000 f8e9 	bl	8011372 <HAL_SPI_TransmitReceive>
 80111a0:	4603      	mov	r3, r0
 80111a2:	e0e2      	b.n	801136a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d101      	bne.n	80111b2 <HAL_SPI_Receive+0x52>
 80111ae:	2302      	movs	r3, #2
 80111b0:	e0db      	b.n	801136a <HAL_SPI_Receive+0x20a>
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2201      	movs	r2, #1
 80111b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80111ba:	f7fd fab3 	bl	800e724 <HAL_GetTick>
 80111be:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d002      	beq.n	80111d2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80111cc:	2302      	movs	r3, #2
 80111ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80111d0:	e0c2      	b.n	8011358 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d002      	beq.n	80111de <HAL_SPI_Receive+0x7e>
 80111d8:	88fb      	ldrh	r3, [r7, #6]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d102      	bne.n	80111e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80111de:	2301      	movs	r3, #1
 80111e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80111e2:	e0b9      	b.n	8011358 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2204      	movs	r2, #4
 80111e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2200      	movs	r2, #0
 80111f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	68ba      	ldr	r2, [r7, #8]
 80111f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	88fa      	ldrh	r2, [r7, #6]
 80111fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	88fa      	ldrh	r2, [r7, #6]
 8011202:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2200      	movs	r2, #0
 801120e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2200      	movs	r2, #0
 8011214:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2200      	movs	r2, #0
 801121a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2200      	movs	r2, #0
 8011220:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	689b      	ldr	r3, [r3, #8]
 8011226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801122a:	d107      	bne.n	801123c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	681a      	ldr	r2, [r3, #0]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801123a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011246:	2b40      	cmp	r3, #64	; 0x40
 8011248:	d007      	beq.n	801125a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011258:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d162      	bne.n	8011328 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011262:	e02e      	b.n	80112c2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	f003 0301 	and.w	r3, r3, #1
 801126e:	2b01      	cmp	r3, #1
 8011270:	d115      	bne.n	801129e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f103 020c 	add.w	r2, r3, #12
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801127e:	7812      	ldrb	r2, [r2, #0]
 8011280:	b2d2      	uxtb	r2, r2
 8011282:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011288:	1c5a      	adds	r2, r3, #1
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011292:	b29b      	uxth	r3, r3
 8011294:	3b01      	subs	r3, #1
 8011296:	b29a      	uxth	r2, r3
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801129c:	e011      	b.n	80112c2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801129e:	f7fd fa41 	bl	800e724 <HAL_GetTick>
 80112a2:	4602      	mov	r2, r0
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	683a      	ldr	r2, [r7, #0]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d803      	bhi.n	80112b6 <HAL_SPI_Receive+0x156>
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b4:	d102      	bne.n	80112bc <HAL_SPI_Receive+0x15c>
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d102      	bne.n	80112c2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80112bc:	2303      	movs	r3, #3
 80112be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80112c0:	e04a      	b.n	8011358 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d1cb      	bne.n	8011264 <HAL_SPI_Receive+0x104>
 80112cc:	e031      	b.n	8011332 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	f003 0301 	and.w	r3, r3, #1
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d113      	bne.n	8011304 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	68da      	ldr	r2, [r3, #12]
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112e6:	b292      	uxth	r2, r2
 80112e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ee:	1c9a      	adds	r2, r3, #2
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	3b01      	subs	r3, #1
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011302:	e011      	b.n	8011328 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011304:	f7fd fa0e 	bl	800e724 <HAL_GetTick>
 8011308:	4602      	mov	r2, r0
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	1ad3      	subs	r3, r2, r3
 801130e:	683a      	ldr	r2, [r7, #0]
 8011310:	429a      	cmp	r2, r3
 8011312:	d803      	bhi.n	801131c <HAL_SPI_Receive+0x1bc>
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801131a:	d102      	bne.n	8011322 <HAL_SPI_Receive+0x1c2>
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d102      	bne.n	8011328 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8011322:	2303      	movs	r3, #3
 8011324:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011326:	e017      	b.n	8011358 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801132c:	b29b      	uxth	r3, r3
 801132e:	2b00      	cmp	r3, #0
 8011330:	d1cd      	bne.n	80112ce <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011332:	693a      	ldr	r2, [r7, #16]
 8011334:	6839      	ldr	r1, [r7, #0]
 8011336:	68f8      	ldr	r0, [r7, #12]
 8011338:	f000 fb46 	bl	80119c8 <SPI_EndRxTransaction>
 801133c:	4603      	mov	r3, r0
 801133e:	2b00      	cmp	r3, #0
 8011340:	d002      	beq.n	8011348 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2220      	movs	r2, #32
 8011346:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8011350:	2301      	movs	r3, #1
 8011352:	75fb      	strb	r3, [r7, #23]
 8011354:	e000      	b.n	8011358 <HAL_SPI_Receive+0x1f8>
  }

error :
 8011356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2201      	movs	r2, #1
 801135c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2200      	movs	r2, #0
 8011364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011368:	7dfb      	ldrb	r3, [r7, #23]
}
 801136a:	4618      	mov	r0, r3
 801136c:	3718      	adds	r7, #24
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011372:	b580      	push	{r7, lr}
 8011374:	b08c      	sub	sp, #48	; 0x30
 8011376:	af00      	add	r7, sp, #0
 8011378:	60f8      	str	r0, [r7, #12]
 801137a:	60b9      	str	r1, [r7, #8]
 801137c:	607a      	str	r2, [r7, #4]
 801137e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011380:	2301      	movs	r3, #1
 8011382:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011390:	2b01      	cmp	r3, #1
 8011392:	d101      	bne.n	8011398 <HAL_SPI_TransmitReceive+0x26>
 8011394:	2302      	movs	r3, #2
 8011396:	e18a      	b.n	80116ae <HAL_SPI_TransmitReceive+0x33c>
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2201      	movs	r2, #1
 801139c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80113a0:	f7fd f9c0 	bl	800e724 <HAL_GetTick>
 80113a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80113b6:	887b      	ldrh	r3, [r7, #2]
 80113b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80113ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80113be:	2b01      	cmp	r3, #1
 80113c0:	d00f      	beq.n	80113e2 <HAL_SPI_TransmitReceive+0x70>
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80113c8:	d107      	bne.n	80113da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d103      	bne.n	80113da <HAL_SPI_TransmitReceive+0x68>
 80113d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80113d6:	2b04      	cmp	r3, #4
 80113d8:	d003      	beq.n	80113e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80113da:	2302      	movs	r3, #2
 80113dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80113e0:	e15b      	b.n	801169a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d005      	beq.n	80113f4 <HAL_SPI_TransmitReceive+0x82>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d002      	beq.n	80113f4 <HAL_SPI_TransmitReceive+0x82>
 80113ee:	887b      	ldrh	r3, [r7, #2]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d103      	bne.n	80113fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80113f4:	2301      	movs	r3, #1
 80113f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80113fa:	e14e      	b.n	801169a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011402:	b2db      	uxtb	r3, r3
 8011404:	2b04      	cmp	r3, #4
 8011406:	d003      	beq.n	8011410 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2205      	movs	r2, #5
 801140c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2200      	movs	r2, #0
 8011414:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	887a      	ldrh	r2, [r7, #2]
 8011420:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	887a      	ldrh	r2, [r7, #2]
 8011426:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	68ba      	ldr	r2, [r7, #8]
 801142c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	887a      	ldrh	r2, [r7, #2]
 8011432:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	887a      	ldrh	r2, [r7, #2]
 8011438:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2200      	movs	r2, #0
 801143e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2200      	movs	r2, #0
 8011444:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011450:	2b40      	cmp	r3, #64	; 0x40
 8011452:	d007      	beq.n	8011464 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011462:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801146c:	d178      	bne.n	8011560 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d002      	beq.n	801147c <HAL_SPI_TransmitReceive+0x10a>
 8011476:	8b7b      	ldrh	r3, [r7, #26]
 8011478:	2b01      	cmp	r3, #1
 801147a:	d166      	bne.n	801154a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011480:	881a      	ldrh	r2, [r3, #0]
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801148c:	1c9a      	adds	r2, r3, #2
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011496:	b29b      	uxth	r3, r3
 8011498:	3b01      	subs	r3, #1
 801149a:	b29a      	uxth	r2, r3
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80114a0:	e053      	b.n	801154a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	f003 0302 	and.w	r3, r3, #2
 80114ac:	2b02      	cmp	r3, #2
 80114ae:	d11b      	bne.n	80114e8 <HAL_SPI_TransmitReceive+0x176>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d016      	beq.n	80114e8 <HAL_SPI_TransmitReceive+0x176>
 80114ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d113      	bne.n	80114e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114c4:	881a      	ldrh	r2, [r3, #0]
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d0:	1c9a      	adds	r2, r3, #2
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114da:	b29b      	uxth	r3, r3
 80114dc:	3b01      	subs	r3, #1
 80114de:	b29a      	uxth	r2, r3
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80114e4:	2300      	movs	r3, #0
 80114e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	689b      	ldr	r3, [r3, #8]
 80114ee:	f003 0301 	and.w	r3, r3, #1
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d119      	bne.n	801152a <HAL_SPI_TransmitReceive+0x1b8>
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d014      	beq.n	801152a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	68da      	ldr	r2, [r3, #12]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801150a:	b292      	uxth	r2, r2
 801150c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011512:	1c9a      	adds	r2, r3, #2
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801151c:	b29b      	uxth	r3, r3
 801151e:	3b01      	subs	r3, #1
 8011520:	b29a      	uxth	r2, r3
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011526:	2301      	movs	r3, #1
 8011528:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801152a:	f7fd f8fb 	bl	800e724 <HAL_GetTick>
 801152e:	4602      	mov	r2, r0
 8011530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011536:	429a      	cmp	r2, r3
 8011538:	d807      	bhi.n	801154a <HAL_SPI_TransmitReceive+0x1d8>
 801153a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011540:	d003      	beq.n	801154a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8011542:	2303      	movs	r3, #3
 8011544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011548:	e0a7      	b.n	801169a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801154e:	b29b      	uxth	r3, r3
 8011550:	2b00      	cmp	r3, #0
 8011552:	d1a6      	bne.n	80114a2 <HAL_SPI_TransmitReceive+0x130>
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011558:	b29b      	uxth	r3, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	d1a1      	bne.n	80114a2 <HAL_SPI_TransmitReceive+0x130>
 801155e:	e07c      	b.n	801165a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <HAL_SPI_TransmitReceive+0x1fc>
 8011568:	8b7b      	ldrh	r3, [r7, #26]
 801156a:	2b01      	cmp	r3, #1
 801156c:	d16b      	bne.n	8011646 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	330c      	adds	r3, #12
 8011578:	7812      	ldrb	r2, [r2, #0]
 801157a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011580:	1c5a      	adds	r2, r3, #1
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801158a:	b29b      	uxth	r3, r3
 801158c:	3b01      	subs	r3, #1
 801158e:	b29a      	uxth	r2, r3
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011594:	e057      	b.n	8011646 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	f003 0302 	and.w	r3, r3, #2
 80115a0:	2b02      	cmp	r3, #2
 80115a2:	d11c      	bne.n	80115de <HAL_SPI_TransmitReceive+0x26c>
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d017      	beq.n	80115de <HAL_SPI_TransmitReceive+0x26c>
 80115ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	d114      	bne.n	80115de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	330c      	adds	r3, #12
 80115be:	7812      	ldrb	r2, [r2, #0]
 80115c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c6:	1c5a      	adds	r2, r3, #1
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	3b01      	subs	r3, #1
 80115d4:	b29a      	uxth	r2, r3
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80115da:	2300      	movs	r3, #0
 80115dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	689b      	ldr	r3, [r3, #8]
 80115e4:	f003 0301 	and.w	r3, r3, #1
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d119      	bne.n	8011620 <HAL_SPI_TransmitReceive+0x2ae>
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d014      	beq.n	8011620 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	68da      	ldr	r2, [r3, #12]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011600:	b2d2      	uxtb	r2, r2
 8011602:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011608:	1c5a      	adds	r2, r3, #1
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011612:	b29b      	uxth	r3, r3
 8011614:	3b01      	subs	r3, #1
 8011616:	b29a      	uxth	r2, r3
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801161c:	2301      	movs	r3, #1
 801161e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011620:	f7fd f880 	bl	800e724 <HAL_GetTick>
 8011624:	4602      	mov	r2, r0
 8011626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801162c:	429a      	cmp	r2, r3
 801162e:	d803      	bhi.n	8011638 <HAL_SPI_TransmitReceive+0x2c6>
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011636:	d102      	bne.n	801163e <HAL_SPI_TransmitReceive+0x2cc>
 8011638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163a:	2b00      	cmp	r3, #0
 801163c:	d103      	bne.n	8011646 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801163e:	2303      	movs	r3, #3
 8011640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011644:	e029      	b.n	801169a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801164a:	b29b      	uxth	r3, r3
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1a2      	bne.n	8011596 <HAL_SPI_TransmitReceive+0x224>
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011654:	b29b      	uxth	r3, r3
 8011656:	2b00      	cmp	r3, #0
 8011658:	d19d      	bne.n	8011596 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801165c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	f000 fa18 	bl	8011a94 <SPI_EndRxTxTransaction>
 8011664:	4603      	mov	r3, r0
 8011666:	2b00      	cmp	r3, #0
 8011668:	d006      	beq.n	8011678 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801166a:	2301      	movs	r3, #1
 801166c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2220      	movs	r2, #32
 8011674:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011676:	e010      	b.n	801169a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d10b      	bne.n	8011698 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011680:	2300      	movs	r3, #0
 8011682:	617b      	str	r3, [r7, #20]
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	617b      	str	r3, [r7, #20]
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	617b      	str	r3, [r7, #20]
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	e000      	b.n	801169a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011698:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2201      	movs	r2, #1
 801169e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2200      	movs	r2, #0
 80116a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80116aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3730      	adds	r7, #48	; 0x30
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
	...

080116b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b088      	sub	sp, #32
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	685b      	ldr	r3, [r3, #4]
 80116c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	099b      	lsrs	r3, r3, #6
 80116d4:	f003 0301 	and.w	r3, r3, #1
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d10f      	bne.n	80116fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00a      	beq.n	80116fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	099b      	lsrs	r3, r3, #6
 80116ea:	f003 0301 	and.w	r3, r3, #1
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d004      	beq.n	80116fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	4798      	blx	r3
    return;
 80116fa:	e0d8      	b.n	80118ae <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	085b      	lsrs	r3, r3, #1
 8011700:	f003 0301 	and.w	r3, r3, #1
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00a      	beq.n	801171e <HAL_SPI_IRQHandler+0x66>
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	09db      	lsrs	r3, r3, #7
 801170c:	f003 0301 	and.w	r3, r3, #1
 8011710:	2b00      	cmp	r3, #0
 8011712:	d004      	beq.n	801171e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	4798      	blx	r3
    return;
 801171c:	e0c7      	b.n	80118ae <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801171e:	69bb      	ldr	r3, [r7, #24]
 8011720:	095b      	lsrs	r3, r3, #5
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	2b00      	cmp	r3, #0
 8011728:	d10c      	bne.n	8011744 <HAL_SPI_IRQHandler+0x8c>
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	099b      	lsrs	r3, r3, #6
 801172e:	f003 0301 	and.w	r3, r3, #1
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	0a1b      	lsrs	r3, r3, #8
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	2b00      	cmp	r3, #0
 8011740:	f000 80b5 	beq.w	80118ae <HAL_SPI_IRQHandler+0x1f6>
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	095b      	lsrs	r3, r3, #5
 8011748:	f003 0301 	and.w	r3, r3, #1
 801174c:	2b00      	cmp	r3, #0
 801174e:	f000 80ae 	beq.w	80118ae <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	099b      	lsrs	r3, r3, #6
 8011756:	f003 0301 	and.w	r3, r3, #1
 801175a:	2b00      	cmp	r3, #0
 801175c:	d023      	beq.n	80117a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011764:	b2db      	uxtb	r3, r3
 8011766:	2b03      	cmp	r3, #3
 8011768:	d011      	beq.n	801178e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801176e:	f043 0204 	orr.w	r2, r3, #4
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011776:	2300      	movs	r3, #0
 8011778:	617b      	str	r3, [r7, #20]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	617b      	str	r3, [r7, #20]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	617b      	str	r3, [r7, #20]
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	e00b      	b.n	80117a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801178e:	2300      	movs	r3, #0
 8011790:	613b      	str	r3, [r7, #16]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	613b      	str	r3, [r7, #16]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	689b      	ldr	r3, [r3, #8]
 80117a0:	613b      	str	r3, [r7, #16]
 80117a2:	693b      	ldr	r3, [r7, #16]
        return;
 80117a4:	e083      	b.n	80118ae <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	095b      	lsrs	r3, r3, #5
 80117aa:	f003 0301 	and.w	r3, r3, #1
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d014      	beq.n	80117dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117b6:	f043 0201 	orr.w	r2, r3, #1
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80117be:	2300      	movs	r3, #0
 80117c0:	60fb      	str	r3, [r7, #12]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	60fb      	str	r3, [r7, #12]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	0a1b      	lsrs	r3, r3, #8
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00c      	beq.n	8011802 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117ec:	f043 0208 	orr.w	r2, r3, #8
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80117f4:	2300      	movs	r3, #0
 80117f6:	60bb      	str	r3, [r7, #8]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	689b      	ldr	r3, [r3, #8]
 80117fe:	60bb      	str	r3, [r7, #8]
 8011800:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011806:	2b00      	cmp	r3, #0
 8011808:	d050      	beq.n	80118ac <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	685a      	ldr	r2, [r3, #4]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011818:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2201      	movs	r2, #1
 801181e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	f003 0302 	and.w	r3, r3, #2
 8011828:	2b00      	cmp	r3, #0
 801182a:	d104      	bne.n	8011836 <HAL_SPI_IRQHandler+0x17e>
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	f003 0301 	and.w	r3, r3, #1
 8011832:	2b00      	cmp	r3, #0
 8011834:	d034      	beq.n	80118a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	685a      	ldr	r2, [r3, #4]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	f022 0203 	bic.w	r2, r2, #3
 8011844:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801184a:	2b00      	cmp	r3, #0
 801184c:	d011      	beq.n	8011872 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011852:	4a18      	ldr	r2, [pc, #96]	; (80118b4 <HAL_SPI_IRQHandler+0x1fc>)
 8011854:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801185a:	4618      	mov	r0, r3
 801185c:	f7fd ffaa 	bl	800f7b4 <HAL_DMA_Abort_IT>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d005      	beq.n	8011872 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801186a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011876:	2b00      	cmp	r3, #0
 8011878:	d016      	beq.n	80118a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801187e:	4a0d      	ldr	r2, [pc, #52]	; (80118b4 <HAL_SPI_IRQHandler+0x1fc>)
 8011880:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011886:	4618      	mov	r0, r3
 8011888:	f7fd ff94 	bl	800f7b4 <HAL_DMA_Abort_IT>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00a      	beq.n	80118a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801189e:	e003      	b.n	80118a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f000 f809 	bl	80118b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80118a6:	e000      	b.n	80118aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80118a8:	bf00      	nop
    return;
 80118aa:	bf00      	nop
 80118ac:	bf00      	nop
  }
}
 80118ae:	3720      	adds	r7, #32
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	080118cd 	.word	0x080118cd

080118b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	2200      	movs	r2, #0
 80118de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2200      	movs	r2, #0
 80118e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	f7ff ffe6 	bl	80118b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80118ec:	bf00      	nop
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	603b      	str	r3, [r7, #0]
 8011900:	4613      	mov	r3, r2
 8011902:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011904:	e04c      	b.n	80119a0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801190c:	d048      	beq.n	80119a0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801190e:	f7fc ff09 	bl	800e724 <HAL_GetTick>
 8011912:	4602      	mov	r2, r0
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	1ad3      	subs	r3, r2, r3
 8011918:	683a      	ldr	r2, [r7, #0]
 801191a:	429a      	cmp	r2, r3
 801191c:	d902      	bls.n	8011924 <SPI_WaitFlagStateUntilTimeout+0x30>
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d13d      	bne.n	80119a0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	685a      	ldr	r2, [r3, #4]
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801193c:	d111      	bne.n	8011962 <SPI_WaitFlagStateUntilTimeout+0x6e>
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	689b      	ldr	r3, [r3, #8]
 8011942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011946:	d004      	beq.n	8011952 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	689b      	ldr	r3, [r3, #8]
 801194c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011950:	d107      	bne.n	8011962 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011960:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801196a:	d10f      	bne.n	801198c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801197a:	601a      	str	r2, [r3, #0]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801198a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2201      	movs	r2, #1
 8011990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	2200      	movs	r2, #0
 8011998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801199c:	2303      	movs	r3, #3
 801199e:	e00f      	b.n	80119c0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	689a      	ldr	r2, [r3, #8]
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	4013      	ands	r3, r2
 80119aa:	68ba      	ldr	r2, [r7, #8]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	bf0c      	ite	eq
 80119b0:	2301      	moveq	r3, #1
 80119b2:	2300      	movne	r3, #0
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	461a      	mov	r2, r3
 80119b8:	79fb      	ldrb	r3, [r7, #7]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d1a3      	bne.n	8011906 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80119be:	2300      	movs	r3, #0
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3710      	adds	r7, #16
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b086      	sub	sp, #24
 80119cc:	af02      	add	r7, sp, #8
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80119dc:	d111      	bne.n	8011a02 <SPI_EndRxTransaction+0x3a>
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	689b      	ldr	r3, [r3, #8]
 80119e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119e6:	d004      	beq.n	80119f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	689b      	ldr	r3, [r3, #8]
 80119ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119f0:	d107      	bne.n	8011a02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011a0a:	d12a      	bne.n	8011a62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a14:	d012      	beq.n	8011a3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	9300      	str	r3, [sp, #0]
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	2180      	movs	r1, #128	; 0x80
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f7ff ff67 	bl	80118f4 <SPI_WaitFlagStateUntilTimeout>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d02d      	beq.n	8011a88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a30:	f043 0220 	orr.w	r2, r3, #32
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011a38:	2303      	movs	r3, #3
 8011a3a:	e026      	b.n	8011a8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	9300      	str	r3, [sp, #0]
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	2200      	movs	r2, #0
 8011a44:	2101      	movs	r1, #1
 8011a46:	68f8      	ldr	r0, [r7, #12]
 8011a48:	f7ff ff54 	bl	80118f4 <SPI_WaitFlagStateUntilTimeout>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d01a      	beq.n	8011a88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a56:	f043 0220 	orr.w	r2, r3, #32
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011a5e:	2303      	movs	r3, #3
 8011a60:	e013      	b.n	8011a8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	9300      	str	r3, [sp, #0]
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	2101      	movs	r1, #1
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f7ff ff41 	bl	80118f4 <SPI_WaitFlagStateUntilTimeout>
 8011a72:	4603      	mov	r3, r0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d007      	beq.n	8011a88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a7c:	f043 0220 	orr.w	r2, r3, #32
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011a84:	2303      	movs	r3, #3
 8011a86:	e000      	b.n	8011a8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011a88:	2300      	movs	r3, #0
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
	...

08011a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b088      	sub	sp, #32
 8011a98:	af02      	add	r7, sp, #8
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011aa0:	4b1b      	ldr	r3, [pc, #108]	; (8011b10 <SPI_EndRxTxTransaction+0x7c>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4a1b      	ldr	r2, [pc, #108]	; (8011b14 <SPI_EndRxTxTransaction+0x80>)
 8011aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8011aaa:	0d5b      	lsrs	r3, r3, #21
 8011aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011ab0:	fb02 f303 	mul.w	r3, r2, r3
 8011ab4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011abe:	d112      	bne.n	8011ae6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	9300      	str	r3, [sp, #0]
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	2180      	movs	r1, #128	; 0x80
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f7ff ff12 	bl	80118f4 <SPI_WaitFlagStateUntilTimeout>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d016      	beq.n	8011b04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ada:	f043 0220 	orr.w	r2, r3, #32
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011ae2:	2303      	movs	r3, #3
 8011ae4:	e00f      	b.n	8011b06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00a      	beq.n	8011b02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	3b01      	subs	r3, #1
 8011af0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	689b      	ldr	r3, [r3, #8]
 8011af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011afc:	2b80      	cmp	r3, #128	; 0x80
 8011afe:	d0f2      	beq.n	8011ae6 <SPI_EndRxTxTransaction+0x52>
 8011b00:	e000      	b.n	8011b04 <SPI_EndRxTxTransaction+0x70>
        break;
 8011b02:	bf00      	nop
  }

  return HAL_OK;
 8011b04:	2300      	movs	r3, #0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3718      	adds	r7, #24
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	20000018 	.word	0x20000018
 8011b14:	165e9f81 	.word	0x165e9f81

08011b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d101      	bne.n	8011b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011b26:	2301      	movs	r3, #1
 8011b28:	e01d      	b.n	8011b66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b30:	b2db      	uxtb	r3, r3
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d106      	bne.n	8011b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f7fb fecc 	bl	800d8dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2202      	movs	r2, #2
 8011b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	3304      	adds	r3, #4
 8011b54:	4619      	mov	r1, r3
 8011b56:	4610      	mov	r0, r2
 8011b58:	f000 fe96 	bl	8012888 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3708      	adds	r7, #8
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}

08011b6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b085      	sub	sp, #20
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	68da      	ldr	r2, [r3, #12]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f042 0201 	orr.w	r2, r2, #1
 8011b84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	f003 0307 	and.w	r3, r3, #7
 8011b90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2b06      	cmp	r3, #6
 8011b96:	d007      	beq.n	8011ba8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f042 0201 	orr.w	r2, r2, #1
 8011ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011ba8:	2300      	movs	r3, #0
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr

08011bb6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8011bb6:	b480      	push	{r7}
 8011bb8:	b083      	sub	sp, #12
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	68da      	ldr	r2, [r3, #12]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f022 0201 	bic.w	r2, r2, #1
 8011bcc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	6a1a      	ldr	r2, [r3, #32]
 8011bd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8011bd8:	4013      	ands	r3, r2
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d10f      	bne.n	8011bfe <HAL_TIM_Base_Stop_IT+0x48>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	6a1a      	ldr	r2, [r3, #32]
 8011be4:	f240 4344 	movw	r3, #1092	; 0x444
 8011be8:	4013      	ands	r3, r2
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d107      	bne.n	8011bfe <HAL_TIM_Base_Stop_IT+0x48>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	681a      	ldr	r2, [r3, #0]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f022 0201 	bic.w	r2, r2, #1
 8011bfc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011bfe:	2300      	movs	r3, #0
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	370c      	adds	r7, #12
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr

08011c0c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d101      	bne.n	8011c1e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e01d      	b.n	8011c5a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f000 f815 	bl	8011c62 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2202      	movs	r2, #2
 8011c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	3304      	adds	r3, #4
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	f000 fe1c 	bl	8012888 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2201      	movs	r2, #1
 8011c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3708      	adds	r7, #8
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}

08011c62 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8011c62:	b480      	push	{r7}
 8011c64:	b083      	sub	sp, #12
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8011c6a:	bf00      	nop
 8011c6c:	370c      	adds	r7, #12
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c74:	4770      	bx	lr
	...

08011c78 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	2b0c      	cmp	r3, #12
 8011c86:	d841      	bhi.n	8011d0c <HAL_TIM_OC_Start_IT+0x94>
 8011c88:	a201      	add	r2, pc, #4	; (adr r2, 8011c90 <HAL_TIM_OC_Start_IT+0x18>)
 8011c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c8e:	bf00      	nop
 8011c90:	08011cc5 	.word	0x08011cc5
 8011c94:	08011d0d 	.word	0x08011d0d
 8011c98:	08011d0d 	.word	0x08011d0d
 8011c9c:	08011d0d 	.word	0x08011d0d
 8011ca0:	08011cd7 	.word	0x08011cd7
 8011ca4:	08011d0d 	.word	0x08011d0d
 8011ca8:	08011d0d 	.word	0x08011d0d
 8011cac:	08011d0d 	.word	0x08011d0d
 8011cb0:	08011ce9 	.word	0x08011ce9
 8011cb4:	08011d0d 	.word	0x08011d0d
 8011cb8:	08011d0d 	.word	0x08011d0d
 8011cbc:	08011d0d 	.word	0x08011d0d
 8011cc0:	08011cfb 	.word	0x08011cfb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68da      	ldr	r2, [r3, #12]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f042 0202 	orr.w	r2, r2, #2
 8011cd2:	60da      	str	r2, [r3, #12]
      break;
 8011cd4:	e01b      	b.n	8011d0e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	68da      	ldr	r2, [r3, #12]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f042 0204 	orr.w	r2, r2, #4
 8011ce4:	60da      	str	r2, [r3, #12]
      break;
 8011ce6:	e012      	b.n	8011d0e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	68da      	ldr	r2, [r3, #12]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	f042 0208 	orr.w	r2, r2, #8
 8011cf6:	60da      	str	r2, [r3, #12]
      break;
 8011cf8:	e009      	b.n	8011d0e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	68da      	ldr	r2, [r3, #12]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f042 0210 	orr.w	r2, r2, #16
 8011d08:	60da      	str	r2, [r3, #12]
      break;
 8011d0a:	e000      	b.n	8011d0e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8011d0c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2201      	movs	r2, #1
 8011d14:	6839      	ldr	r1, [r7, #0]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f001 f8a0 	bl	8012e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4a15      	ldr	r2, [pc, #84]	; (8011d78 <HAL_TIM_OC_Start_IT+0x100>)
 8011d22:	4293      	cmp	r3, r2
 8011d24:	d004      	beq.n	8011d30 <HAL_TIM_OC_Start_IT+0xb8>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	4a14      	ldr	r2, [pc, #80]	; (8011d7c <HAL_TIM_OC_Start_IT+0x104>)
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	d101      	bne.n	8011d34 <HAL_TIM_OC_Start_IT+0xbc>
 8011d30:	2301      	movs	r3, #1
 8011d32:	e000      	b.n	8011d36 <HAL_TIM_OC_Start_IT+0xbe>
 8011d34:	2300      	movs	r3, #0
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d007      	beq.n	8011d4a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011d48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	689b      	ldr	r3, [r3, #8]
 8011d50:	f003 0307 	and.w	r3, r3, #7
 8011d54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b06      	cmp	r3, #6
 8011d5a:	d007      	beq.n	8011d6c <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f042 0201 	orr.w	r2, r2, #1
 8011d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	40010000 	.word	0x40010000
 8011d7c:	40010400 	.word	0x40010400

08011d80 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	2b0c      	cmp	r3, #12
 8011d8e:	d841      	bhi.n	8011e14 <HAL_TIM_OC_Stop_IT+0x94>
 8011d90:	a201      	add	r2, pc, #4	; (adr r2, 8011d98 <HAL_TIM_OC_Stop_IT+0x18>)
 8011d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d96:	bf00      	nop
 8011d98:	08011dcd 	.word	0x08011dcd
 8011d9c:	08011e15 	.word	0x08011e15
 8011da0:	08011e15 	.word	0x08011e15
 8011da4:	08011e15 	.word	0x08011e15
 8011da8:	08011ddf 	.word	0x08011ddf
 8011dac:	08011e15 	.word	0x08011e15
 8011db0:	08011e15 	.word	0x08011e15
 8011db4:	08011e15 	.word	0x08011e15
 8011db8:	08011df1 	.word	0x08011df1
 8011dbc:	08011e15 	.word	0x08011e15
 8011dc0:	08011e15 	.word	0x08011e15
 8011dc4:	08011e15 	.word	0x08011e15
 8011dc8:	08011e03 	.word	0x08011e03
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	68da      	ldr	r2, [r3, #12]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f022 0202 	bic.w	r2, r2, #2
 8011dda:	60da      	str	r2, [r3, #12]
      break;
 8011ddc:	e01b      	b.n	8011e16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	68da      	ldr	r2, [r3, #12]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f022 0204 	bic.w	r2, r2, #4
 8011dec:	60da      	str	r2, [r3, #12]
      break;
 8011dee:	e012      	b.n	8011e16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68da      	ldr	r2, [r3, #12]
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	f022 0208 	bic.w	r2, r2, #8
 8011dfe:	60da      	str	r2, [r3, #12]
      break;
 8011e00:	e009      	b.n	8011e16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	68da      	ldr	r2, [r3, #12]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f022 0210 	bic.w	r2, r2, #16
 8011e10:	60da      	str	r2, [r3, #12]
      break;
 8011e12:	e000      	b.n	8011e16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8011e14:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	6839      	ldr	r1, [r7, #0]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f001 f81c 	bl	8012e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	4a20      	ldr	r2, [pc, #128]	; (8011eac <HAL_TIM_OC_Stop_IT+0x12c>)
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	d004      	beq.n	8011e38 <HAL_TIM_OC_Stop_IT+0xb8>
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	4a1f      	ldr	r2, [pc, #124]	; (8011eb0 <HAL_TIM_OC_Stop_IT+0x130>)
 8011e34:	4293      	cmp	r3, r2
 8011e36:	d101      	bne.n	8011e3c <HAL_TIM_OC_Stop_IT+0xbc>
 8011e38:	2301      	movs	r3, #1
 8011e3a:	e000      	b.n	8011e3e <HAL_TIM_OC_Stop_IT+0xbe>
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d017      	beq.n	8011e72 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	6a1a      	ldr	r2, [r3, #32]
 8011e48:	f241 1311 	movw	r3, #4369	; 0x1111
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d10f      	bne.n	8011e72 <HAL_TIM_OC_Stop_IT+0xf2>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	6a1a      	ldr	r2, [r3, #32]
 8011e58:	f240 4344 	movw	r3, #1092	; 0x444
 8011e5c:	4013      	ands	r3, r2
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d107      	bne.n	8011e72 <HAL_TIM_OC_Stop_IT+0xf2>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	6a1a      	ldr	r2, [r3, #32]
 8011e78:	f241 1311 	movw	r3, #4369	; 0x1111
 8011e7c:	4013      	ands	r3, r2
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d10f      	bne.n	8011ea2 <HAL_TIM_OC_Stop_IT+0x122>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	6a1a      	ldr	r2, [r3, #32]
 8011e88:	f240 4344 	movw	r3, #1092	; 0x444
 8011e8c:	4013      	ands	r3, r2
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d107      	bne.n	8011ea2 <HAL_TIM_OC_Stop_IT+0x122>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	f022 0201 	bic.w	r2, r2, #1
 8011ea0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011ea2:	2300      	movs	r3, #0
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3708      	adds	r7, #8
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	40010000 	.word	0x40010000
 8011eb0:	40010400 	.word	0x40010400

08011eb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d101      	bne.n	8011ec6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	e01d      	b.n	8011f02 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f000 f815 	bl	8011f0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2202      	movs	r2, #2
 8011ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	3304      	adds	r3, #4
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	4610      	mov	r0, r2
 8011ef4:	f000 fcc8 	bl	8012888 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2201      	movs	r2, #1
 8011efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3708      	adds	r7, #8
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}

08011f0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011f0a:	b480      	push	{r7}
 8011f0c:	b083      	sub	sp, #12
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011f12:	bf00      	nop
 8011f14:	370c      	adds	r7, #12
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
	...

08011f20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2201      	movs	r2, #1
 8011f30:	6839      	ldr	r1, [r7, #0]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f000 ff92 	bl	8012e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	4a15      	ldr	r2, [pc, #84]	; (8011f94 <HAL_TIM_PWM_Start+0x74>)
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d004      	beq.n	8011f4c <HAL_TIM_PWM_Start+0x2c>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	4a14      	ldr	r2, [pc, #80]	; (8011f98 <HAL_TIM_PWM_Start+0x78>)
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	d101      	bne.n	8011f50 <HAL_TIM_PWM_Start+0x30>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	e000      	b.n	8011f52 <HAL_TIM_PWM_Start+0x32>
 8011f50:	2300      	movs	r3, #0
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d007      	beq.n	8011f66 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011f64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	f003 0307 	and.w	r3, r3, #7
 8011f70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b06      	cmp	r3, #6
 8011f76:	d007      	beq.n	8011f88 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f042 0201 	orr.w	r2, r2, #1
 8011f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	40010000 	.word	0x40010000
 8011f98:	40010400 	.word	0x40010400

08011f9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2200      	movs	r2, #0
 8011fac:	6839      	ldr	r1, [r7, #0]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f000 ff54 	bl	8012e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a22      	ldr	r2, [pc, #136]	; (8012044 <HAL_TIM_PWM_Stop+0xa8>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d004      	beq.n	8011fc8 <HAL_TIM_PWM_Stop+0x2c>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a21      	ldr	r2, [pc, #132]	; (8012048 <HAL_TIM_PWM_Stop+0xac>)
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d101      	bne.n	8011fcc <HAL_TIM_PWM_Stop+0x30>
 8011fc8:	2301      	movs	r3, #1
 8011fca:	e000      	b.n	8011fce <HAL_TIM_PWM_Stop+0x32>
 8011fcc:	2300      	movs	r3, #0
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d017      	beq.n	8012002 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	6a1a      	ldr	r2, [r3, #32]
 8011fd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8011fdc:	4013      	ands	r3, r2
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d10f      	bne.n	8012002 <HAL_TIM_PWM_Stop+0x66>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	6a1a      	ldr	r2, [r3, #32]
 8011fe8:	f240 4344 	movw	r3, #1092	; 0x444
 8011fec:	4013      	ands	r3, r2
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d107      	bne.n	8012002 <HAL_TIM_PWM_Stop+0x66>
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	6a1a      	ldr	r2, [r3, #32]
 8012008:	f241 1311 	movw	r3, #4369	; 0x1111
 801200c:	4013      	ands	r3, r2
 801200e:	2b00      	cmp	r3, #0
 8012010:	d10f      	bne.n	8012032 <HAL_TIM_PWM_Stop+0x96>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	6a1a      	ldr	r2, [r3, #32]
 8012018:	f240 4344 	movw	r3, #1092	; 0x444
 801201c:	4013      	ands	r3, r2
 801201e:	2b00      	cmp	r3, #0
 8012020:	d107      	bne.n	8012032 <HAL_TIM_PWM_Stop+0x96>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	681a      	ldr	r2, [r3, #0]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f022 0201 	bic.w	r2, r2, #1
 8012030:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2201      	movs	r2, #1
 8012036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	40010000 	.word	0x40010000
 8012048:	40010400 	.word	0x40010400

0801204c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b086      	sub	sp, #24
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d101      	bne.n	8012060 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801205c:	2301      	movs	r3, #1
 801205e:	e083      	b.n	8012168 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012066:	b2db      	uxtb	r3, r3
 8012068:	2b00      	cmp	r3, #0
 801206a:	d106      	bne.n	801207a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2200      	movs	r2, #0
 8012070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7fb fcc9 	bl	800da0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2202      	movs	r2, #2
 801207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	689b      	ldr	r3, [r3, #8]
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	6812      	ldr	r2, [r2, #0]
 801208c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012090:	f023 0307 	bic.w	r3, r3, #7
 8012094:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681a      	ldr	r2, [r3, #0]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	3304      	adds	r3, #4
 801209e:	4619      	mov	r1, r3
 80120a0:	4610      	mov	r0, r2
 80120a2:	f000 fbf1 	bl	8012888 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	699b      	ldr	r3, [r3, #24]
 80120b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	6a1b      	ldr	r3, [r3, #32]
 80120bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	697a      	ldr	r2, [r7, #20]
 80120c4:	4313      	orrs	r3, r2
 80120c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80120ce:	f023 0303 	bic.w	r3, r3, #3
 80120d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	689a      	ldr	r2, [r3, #8]
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	699b      	ldr	r3, [r3, #24]
 80120dc:	021b      	lsls	r3, r3, #8
 80120de:	4313      	orrs	r3, r2
 80120e0:	693a      	ldr	r2, [r7, #16]
 80120e2:	4313      	orrs	r3, r2
 80120e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80120ec:	f023 030c 	bic.w	r3, r3, #12
 80120f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80120f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80120fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	68da      	ldr	r2, [r3, #12]
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	69db      	ldr	r3, [r3, #28]
 8012106:	021b      	lsls	r3, r3, #8
 8012108:	4313      	orrs	r3, r2
 801210a:	693a      	ldr	r2, [r7, #16]
 801210c:	4313      	orrs	r3, r2
 801210e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	691b      	ldr	r3, [r3, #16]
 8012114:	011a      	lsls	r2, r3, #4
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	6a1b      	ldr	r3, [r3, #32]
 801211a:	031b      	lsls	r3, r3, #12
 801211c:	4313      	orrs	r3, r2
 801211e:	693a      	ldr	r2, [r7, #16]
 8012120:	4313      	orrs	r3, r2
 8012122:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801212a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8012132:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	685a      	ldr	r2, [r3, #4]
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	695b      	ldr	r3, [r3, #20]
 801213c:	011b      	lsls	r3, r3, #4
 801213e:	4313      	orrs	r3, r2
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	4313      	orrs	r3, r2
 8012144:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	693a      	ldr	r2, [r7, #16]
 8012154:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	68fa      	ldr	r2, [r7, #12]
 801215c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2201      	movs	r2, #1
 8012162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012166:	2300      	movs	r3, #0
}
 8012168:	4618      	mov	r0, r3
 801216a:	3718      	adds	r7, #24
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d002      	beq.n	8012186 <HAL_TIM_Encoder_Start+0x16>
 8012180:	2b04      	cmp	r3, #4
 8012182:	d008      	beq.n	8012196 <HAL_TIM_Encoder_Start+0x26>
 8012184:	e00f      	b.n	80121a6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	2201      	movs	r2, #1
 801218c:	2100      	movs	r1, #0
 801218e:	4618      	mov	r0, r3
 8012190:	f000 fe64 	bl	8012e5c <TIM_CCxChannelCmd>
      break;
 8012194:	e016      	b.n	80121c4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	2201      	movs	r2, #1
 801219c:	2104      	movs	r1, #4
 801219e:	4618      	mov	r0, r3
 80121a0:	f000 fe5c 	bl	8012e5c <TIM_CCxChannelCmd>
      break;
 80121a4:	e00e      	b.n	80121c4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	2201      	movs	r2, #1
 80121ac:	2100      	movs	r1, #0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f000 fe54 	bl	8012e5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2201      	movs	r2, #1
 80121ba:	2104      	movs	r1, #4
 80121bc:	4618      	mov	r0, r3
 80121be:	f000 fe4d 	bl	8012e5c <TIM_CCxChannelCmd>
      break;
 80121c2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f042 0201 	orr.w	r2, r2, #1
 80121d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80121de:	b580      	push	{r7, lr}
 80121e0:	b082      	sub	sp, #8
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
 80121e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d002      	beq.n	80121f4 <HAL_TIM_Encoder_Stop+0x16>
 80121ee:	2b04      	cmp	r3, #4
 80121f0:	d008      	beq.n	8012204 <HAL_TIM_Encoder_Stop+0x26>
 80121f2:	e00f      	b.n	8012214 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	2200      	movs	r2, #0
 80121fa:	2100      	movs	r1, #0
 80121fc:	4618      	mov	r0, r3
 80121fe:	f000 fe2d 	bl	8012e5c <TIM_CCxChannelCmd>
      break;
 8012202:	e016      	b.n	8012232 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2200      	movs	r2, #0
 801220a:	2104      	movs	r1, #4
 801220c:	4618      	mov	r0, r3
 801220e:	f000 fe25 	bl	8012e5c <TIM_CCxChannelCmd>
      break;
 8012212:	e00e      	b.n	8012232 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2200      	movs	r2, #0
 801221a:	2100      	movs	r1, #0
 801221c:	4618      	mov	r0, r3
 801221e:	f000 fe1d 	bl	8012e5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2200      	movs	r2, #0
 8012228:	2104      	movs	r1, #4
 801222a:	4618      	mov	r0, r3
 801222c:	f000 fe16 	bl	8012e5c <TIM_CCxChannelCmd>
      break;
 8012230:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	6a1a      	ldr	r2, [r3, #32]
 8012238:	f241 1311 	movw	r3, #4369	; 0x1111
 801223c:	4013      	ands	r3, r2
 801223e:	2b00      	cmp	r3, #0
 8012240:	d10f      	bne.n	8012262 <HAL_TIM_Encoder_Stop+0x84>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6a1a      	ldr	r2, [r3, #32]
 8012248:	f240 4344 	movw	r3, #1092	; 0x444
 801224c:	4013      	ands	r3, r2
 801224e:	2b00      	cmp	r3, #0
 8012250:	d107      	bne.n	8012262 <HAL_TIM_Encoder_Stop+0x84>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	681a      	ldr	r2, [r3, #0]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f022 0201 	bic.w	r2, r2, #1
 8012260:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012262:	2300      	movs	r3, #0
}
 8012264:	4618      	mov	r0, r3
 8012266:	3708      	adds	r7, #8
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	f003 0302 	and.w	r3, r3, #2
 801227e:	2b02      	cmp	r3, #2
 8012280:	d122      	bne.n	80122c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	68db      	ldr	r3, [r3, #12]
 8012288:	f003 0302 	and.w	r3, r3, #2
 801228c:	2b02      	cmp	r3, #2
 801228e:	d11b      	bne.n	80122c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	f06f 0202 	mvn.w	r2, #2
 8012298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2201      	movs	r2, #1
 801229e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	699b      	ldr	r3, [r3, #24]
 80122a6:	f003 0303 	and.w	r3, r3, #3
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d003      	beq.n	80122b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 facb 	bl	801284a <HAL_TIM_IC_CaptureCallback>
 80122b4:	e005      	b.n	80122c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f000 fabd 	bl	8012836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 face 	bl	801285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2200      	movs	r2, #0
 80122c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	691b      	ldr	r3, [r3, #16]
 80122ce:	f003 0304 	and.w	r3, r3, #4
 80122d2:	2b04      	cmp	r3, #4
 80122d4:	d122      	bne.n	801231c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	f003 0304 	and.w	r3, r3, #4
 80122e0:	2b04      	cmp	r3, #4
 80122e2:	d11b      	bne.n	801231c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f06f 0204 	mvn.w	r2, #4
 80122ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2202      	movs	r2, #2
 80122f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	699b      	ldr	r3, [r3, #24]
 80122fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d003      	beq.n	801230a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 faa1 	bl	801284a <HAL_TIM_IC_CaptureCallback>
 8012308:	e005      	b.n	8012316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 fa93 	bl	8012836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f000 faa4 	bl	801285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2200      	movs	r2, #0
 801231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	691b      	ldr	r3, [r3, #16]
 8012322:	f003 0308 	and.w	r3, r3, #8
 8012326:	2b08      	cmp	r3, #8
 8012328:	d122      	bne.n	8012370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	f003 0308 	and.w	r3, r3, #8
 8012334:	2b08      	cmp	r3, #8
 8012336:	d11b      	bne.n	8012370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	f06f 0208 	mvn.w	r2, #8
 8012340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2204      	movs	r2, #4
 8012346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	69db      	ldr	r3, [r3, #28]
 801234e:	f003 0303 	and.w	r3, r3, #3
 8012352:	2b00      	cmp	r3, #0
 8012354:	d003      	beq.n	801235e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 fa77 	bl	801284a <HAL_TIM_IC_CaptureCallback>
 801235c:	e005      	b.n	801236a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 fa69 	bl	8012836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 fa7a 	bl	801285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2200      	movs	r2, #0
 801236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	691b      	ldr	r3, [r3, #16]
 8012376:	f003 0310 	and.w	r3, r3, #16
 801237a:	2b10      	cmp	r3, #16
 801237c:	d122      	bne.n	80123c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	f003 0310 	and.w	r3, r3, #16
 8012388:	2b10      	cmp	r3, #16
 801238a:	d11b      	bne.n	80123c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f06f 0210 	mvn.w	r2, #16
 8012394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2208      	movs	r2, #8
 801239a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	69db      	ldr	r3, [r3, #28]
 80123a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d003      	beq.n	80123b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123aa:	6878      	ldr	r0, [r7, #4]
 80123ac:	f000 fa4d 	bl	801284a <HAL_TIM_IC_CaptureCallback>
 80123b0:	e005      	b.n	80123be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f000 fa3f 	bl	8012836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f000 fa50 	bl	801285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	691b      	ldr	r3, [r3, #16]
 80123ca:	f003 0301 	and.w	r3, r3, #1
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d10e      	bne.n	80123f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	f003 0301 	and.w	r3, r3, #1
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d107      	bne.n	80123f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f06f 0201 	mvn.w	r2, #1
 80123e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f7f9 f960 	bl	800b6b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	691b      	ldr	r3, [r3, #16]
 80123f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123fa:	2b80      	cmp	r3, #128	; 0x80
 80123fc:	d10e      	bne.n	801241c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012408:	2b80      	cmp	r3, #128	; 0x80
 801240a:	d107      	bne.n	801241c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 fee8 	bl	80131ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012426:	2b40      	cmp	r3, #64	; 0x40
 8012428:	d10e      	bne.n	8012448 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	68db      	ldr	r3, [r3, #12]
 8012430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012434:	2b40      	cmp	r3, #64	; 0x40
 8012436:	d107      	bne.n	8012448 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f000 fa15 	bl	8012872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	691b      	ldr	r3, [r3, #16]
 801244e:	f003 0320 	and.w	r3, r3, #32
 8012452:	2b20      	cmp	r3, #32
 8012454:	d10e      	bne.n	8012474 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	f003 0320 	and.w	r3, r3, #32
 8012460:	2b20      	cmp	r3, #32
 8012462:	d107      	bne.n	8012474 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f06f 0220 	mvn.w	r2, #32
 801246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 feb2 	bl	80131d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012474:	bf00      	nop
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	60b9      	str	r1, [r7, #8]
 8012486:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801248e:	2b01      	cmp	r3, #1
 8012490:	d101      	bne.n	8012496 <HAL_TIM_OC_ConfigChannel+0x1a>
 8012492:	2302      	movs	r3, #2
 8012494:	e04e      	b.n	8012534 <HAL_TIM_OC_ConfigChannel+0xb8>
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2201      	movs	r2, #1
 801249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2202      	movs	r2, #2
 80124a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2b0c      	cmp	r3, #12
 80124aa:	d839      	bhi.n	8012520 <HAL_TIM_OC_ConfigChannel+0xa4>
 80124ac:	a201      	add	r2, pc, #4	; (adr r2, 80124b4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80124ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124b2:	bf00      	nop
 80124b4:	080124e9 	.word	0x080124e9
 80124b8:	08012521 	.word	0x08012521
 80124bc:	08012521 	.word	0x08012521
 80124c0:	08012521 	.word	0x08012521
 80124c4:	080124f7 	.word	0x080124f7
 80124c8:	08012521 	.word	0x08012521
 80124cc:	08012521 	.word	0x08012521
 80124d0:	08012521 	.word	0x08012521
 80124d4:	08012505 	.word	0x08012505
 80124d8:	08012521 	.word	0x08012521
 80124dc:	08012521 	.word	0x08012521
 80124e0:	08012521 	.word	0x08012521
 80124e4:	08012513 	.word	0x08012513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	68b9      	ldr	r1, [r7, #8]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f000 fa6a 	bl	80129c8 <TIM_OC1_SetConfig>
      break;
 80124f4:	e015      	b.n	8012522 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	68b9      	ldr	r1, [r7, #8]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f000 fad3 	bl	8012aa8 <TIM_OC2_SetConfig>
      break;
 8012502:	e00e      	b.n	8012522 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	68b9      	ldr	r1, [r7, #8]
 801250a:	4618      	mov	r0, r3
 801250c:	f000 fb42 	bl	8012b94 <TIM_OC3_SetConfig>
      break;
 8012510:	e007      	b.n	8012522 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	68b9      	ldr	r1, [r7, #8]
 8012518:	4618      	mov	r0, r3
 801251a:	f000 fbaf 	bl	8012c7c <TIM_OC4_SetConfig>
      break;
 801251e:	e000      	b.n	8012522 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8012520:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2201      	movs	r2, #1
 8012526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2200      	movs	r2, #0
 801252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012532:	2300      	movs	r3, #0
}
 8012534:	4618      	mov	r0, r3
 8012536:	3710      	adds	r7, #16
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	60b9      	str	r1, [r7, #8]
 8012546:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801254e:	2b01      	cmp	r3, #1
 8012550:	d101      	bne.n	8012556 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8012552:	2302      	movs	r3, #2
 8012554:	e0b4      	b.n	80126c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2201      	movs	r2, #1
 801255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2202      	movs	r2, #2
 8012562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2b0c      	cmp	r3, #12
 801256a:	f200 809f 	bhi.w	80126ac <HAL_TIM_PWM_ConfigChannel+0x170>
 801256e:	a201      	add	r2, pc, #4	; (adr r2, 8012574 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8012570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012574:	080125a9 	.word	0x080125a9
 8012578:	080126ad 	.word	0x080126ad
 801257c:	080126ad 	.word	0x080126ad
 8012580:	080126ad 	.word	0x080126ad
 8012584:	080125e9 	.word	0x080125e9
 8012588:	080126ad 	.word	0x080126ad
 801258c:	080126ad 	.word	0x080126ad
 8012590:	080126ad 	.word	0x080126ad
 8012594:	0801262b 	.word	0x0801262b
 8012598:	080126ad 	.word	0x080126ad
 801259c:	080126ad 	.word	0x080126ad
 80125a0:	080126ad 	.word	0x080126ad
 80125a4:	0801266b 	.word	0x0801266b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	68b9      	ldr	r1, [r7, #8]
 80125ae:	4618      	mov	r0, r3
 80125b0:	f000 fa0a 	bl	80129c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	699a      	ldr	r2, [r3, #24]
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f042 0208 	orr.w	r2, r2, #8
 80125c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	699a      	ldr	r2, [r3, #24]
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f022 0204 	bic.w	r2, r2, #4
 80125d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	6999      	ldr	r1, [r3, #24]
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	691a      	ldr	r2, [r3, #16]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	430a      	orrs	r2, r1
 80125e4:	619a      	str	r2, [r3, #24]
      break;
 80125e6:	e062      	b.n	80126ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	68b9      	ldr	r1, [r7, #8]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f000 fa5a 	bl	8012aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	699a      	ldr	r2, [r3, #24]
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	699a      	ldr	r2, [r3, #24]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	6999      	ldr	r1, [r3, #24]
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	691b      	ldr	r3, [r3, #16]
 801261e:	021a      	lsls	r2, r3, #8
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	430a      	orrs	r2, r1
 8012626:	619a      	str	r2, [r3, #24]
      break;
 8012628:	e041      	b.n	80126ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	68b9      	ldr	r1, [r7, #8]
 8012630:	4618      	mov	r0, r3
 8012632:	f000 faaf 	bl	8012b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	69da      	ldr	r2, [r3, #28]
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f042 0208 	orr.w	r2, r2, #8
 8012644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	69da      	ldr	r2, [r3, #28]
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	f022 0204 	bic.w	r2, r2, #4
 8012654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	69d9      	ldr	r1, [r3, #28]
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	691a      	ldr	r2, [r3, #16]
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	430a      	orrs	r2, r1
 8012666:	61da      	str	r2, [r3, #28]
      break;
 8012668:	e021      	b.n	80126ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	68b9      	ldr	r1, [r7, #8]
 8012670:	4618      	mov	r0, r3
 8012672:	f000 fb03 	bl	8012c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	69da      	ldr	r2, [r3, #28]
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	69da      	ldr	r2, [r3, #28]
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	69d9      	ldr	r1, [r3, #28]
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	691b      	ldr	r3, [r3, #16]
 80126a0:	021a      	lsls	r2, r3, #8
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	430a      	orrs	r2, r1
 80126a8:	61da      	str	r2, [r3, #28]
      break;
 80126aa:	e000      	b.n	80126ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80126ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2201      	movs	r2, #1
 80126b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2200      	movs	r2, #0
 80126ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80126be:	2300      	movs	r3, #0
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3710      	adds	r7, #16
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d101      	bne.n	80126e0 <HAL_TIM_ConfigClockSource+0x18>
 80126dc:	2302      	movs	r3, #2
 80126de:	e0a6      	b.n	801282e <HAL_TIM_ConfigClockSource+0x166>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2201      	movs	r2, #1
 80126e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2202      	movs	r2, #2
 80126ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	689b      	ldr	r3, [r3, #8]
 80126f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80126fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012706:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	68fa      	ldr	r2, [r7, #12]
 801270e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b40      	cmp	r3, #64	; 0x40
 8012716:	d067      	beq.n	80127e8 <HAL_TIM_ConfigClockSource+0x120>
 8012718:	2b40      	cmp	r3, #64	; 0x40
 801271a:	d80b      	bhi.n	8012734 <HAL_TIM_ConfigClockSource+0x6c>
 801271c:	2b10      	cmp	r3, #16
 801271e:	d073      	beq.n	8012808 <HAL_TIM_ConfigClockSource+0x140>
 8012720:	2b10      	cmp	r3, #16
 8012722:	d802      	bhi.n	801272a <HAL_TIM_ConfigClockSource+0x62>
 8012724:	2b00      	cmp	r3, #0
 8012726:	d06f      	beq.n	8012808 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8012728:	e078      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801272a:	2b20      	cmp	r3, #32
 801272c:	d06c      	beq.n	8012808 <HAL_TIM_ConfigClockSource+0x140>
 801272e:	2b30      	cmp	r3, #48	; 0x30
 8012730:	d06a      	beq.n	8012808 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8012732:	e073      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012734:	2b70      	cmp	r3, #112	; 0x70
 8012736:	d00d      	beq.n	8012754 <HAL_TIM_ConfigClockSource+0x8c>
 8012738:	2b70      	cmp	r3, #112	; 0x70
 801273a:	d804      	bhi.n	8012746 <HAL_TIM_ConfigClockSource+0x7e>
 801273c:	2b50      	cmp	r3, #80	; 0x50
 801273e:	d033      	beq.n	80127a8 <HAL_TIM_ConfigClockSource+0xe0>
 8012740:	2b60      	cmp	r3, #96	; 0x60
 8012742:	d041      	beq.n	80127c8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8012744:	e06a      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801274a:	d066      	beq.n	801281a <HAL_TIM_ConfigClockSource+0x152>
 801274c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012750:	d017      	beq.n	8012782 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8012752:	e063      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6818      	ldr	r0, [r3, #0]
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	6899      	ldr	r1, [r3, #8]
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	685a      	ldr	r2, [r3, #4]
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	68db      	ldr	r3, [r3, #12]
 8012764:	f000 fb5a 	bl	8012e1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012776:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	609a      	str	r2, [r3, #8]
      break;
 8012780:	e04c      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6818      	ldr	r0, [r3, #0]
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	6899      	ldr	r1, [r3, #8]
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	685a      	ldr	r2, [r3, #4]
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	68db      	ldr	r3, [r3, #12]
 8012792:	f000 fb43 	bl	8012e1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	689a      	ldr	r2, [r3, #8]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80127a4:	609a      	str	r2, [r3, #8]
      break;
 80127a6:	e039      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6818      	ldr	r0, [r3, #0]
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	6859      	ldr	r1, [r3, #4]
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	68db      	ldr	r3, [r3, #12]
 80127b4:	461a      	mov	r2, r3
 80127b6:	f000 fab7 	bl	8012d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	2150      	movs	r1, #80	; 0x50
 80127c0:	4618      	mov	r0, r3
 80127c2:	f000 fb10 	bl	8012de6 <TIM_ITRx_SetConfig>
      break;
 80127c6:	e029      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6818      	ldr	r0, [r3, #0]
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	6859      	ldr	r1, [r3, #4]
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	461a      	mov	r2, r3
 80127d6:	f000 fad6 	bl	8012d86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2160      	movs	r1, #96	; 0x60
 80127e0:	4618      	mov	r0, r3
 80127e2:	f000 fb00 	bl	8012de6 <TIM_ITRx_SetConfig>
      break;
 80127e6:	e019      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6818      	ldr	r0, [r3, #0]
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	6859      	ldr	r1, [r3, #4]
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	461a      	mov	r2, r3
 80127f6:	f000 fa97 	bl	8012d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2140      	movs	r1, #64	; 0x40
 8012800:	4618      	mov	r0, r3
 8012802:	f000 faf0 	bl	8012de6 <TIM_ITRx_SetConfig>
      break;
 8012806:	e009      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4619      	mov	r1, r3
 8012812:	4610      	mov	r0, r2
 8012814:	f000 fae7 	bl	8012de6 <TIM_ITRx_SetConfig>
      break;
 8012818:	e000      	b.n	801281c <HAL_TIM_ConfigClockSource+0x154>
      break;
 801281a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2201      	movs	r2, #1
 8012820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2200      	movs	r2, #0
 8012828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801282c:	2300      	movs	r3, #0
}
 801282e:	4618      	mov	r0, r3
 8012830:	3710      	adds	r7, #16
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012836:	b480      	push	{r7}
 8012838:	b083      	sub	sp, #12
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801283e:	bf00      	nop
 8012840:	370c      	adds	r7, #12
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr

0801284a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801284a:	b480      	push	{r7}
 801284c:	b083      	sub	sp, #12
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012852:	bf00      	nop
 8012854:	370c      	adds	r7, #12
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr

0801285e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801285e:	b480      	push	{r7}
 8012860:	b083      	sub	sp, #12
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012866:	bf00      	nop
 8012868:	370c      	adds	r7, #12
 801286a:	46bd      	mov	sp, r7
 801286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012870:	4770      	bx	lr

08012872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012872:	b480      	push	{r7}
 8012874:	b083      	sub	sp, #12
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801287a:	bf00      	nop
 801287c:	370c      	adds	r7, #12
 801287e:	46bd      	mov	sp, r7
 8012880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012884:	4770      	bx	lr
	...

08012888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012888:	b480      	push	{r7}
 801288a:	b085      	sub	sp, #20
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4a40      	ldr	r2, [pc, #256]	; (801299c <TIM_Base_SetConfig+0x114>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d013      	beq.n	80128c8 <TIM_Base_SetConfig+0x40>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128a6:	d00f      	beq.n	80128c8 <TIM_Base_SetConfig+0x40>
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4a3d      	ldr	r2, [pc, #244]	; (80129a0 <TIM_Base_SetConfig+0x118>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d00b      	beq.n	80128c8 <TIM_Base_SetConfig+0x40>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4a3c      	ldr	r2, [pc, #240]	; (80129a4 <TIM_Base_SetConfig+0x11c>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d007      	beq.n	80128c8 <TIM_Base_SetConfig+0x40>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4a3b      	ldr	r2, [pc, #236]	; (80129a8 <TIM_Base_SetConfig+0x120>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d003      	beq.n	80128c8 <TIM_Base_SetConfig+0x40>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4a3a      	ldr	r2, [pc, #232]	; (80129ac <TIM_Base_SetConfig+0x124>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d108      	bne.n	80128da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	68fa      	ldr	r2, [r7, #12]
 80128d6:	4313      	orrs	r3, r2
 80128d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4a2f      	ldr	r2, [pc, #188]	; (801299c <TIM_Base_SetConfig+0x114>)
 80128de:	4293      	cmp	r3, r2
 80128e0:	d02b      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128e8:	d027      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	4a2c      	ldr	r2, [pc, #176]	; (80129a0 <TIM_Base_SetConfig+0x118>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d023      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4a2b      	ldr	r2, [pc, #172]	; (80129a4 <TIM_Base_SetConfig+0x11c>)
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d01f      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4a2a      	ldr	r2, [pc, #168]	; (80129a8 <TIM_Base_SetConfig+0x120>)
 80128fe:	4293      	cmp	r3, r2
 8012900:	d01b      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	4a29      	ldr	r2, [pc, #164]	; (80129ac <TIM_Base_SetConfig+0x124>)
 8012906:	4293      	cmp	r3, r2
 8012908:	d017      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	4a28      	ldr	r2, [pc, #160]	; (80129b0 <TIM_Base_SetConfig+0x128>)
 801290e:	4293      	cmp	r3, r2
 8012910:	d013      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4a27      	ldr	r2, [pc, #156]	; (80129b4 <TIM_Base_SetConfig+0x12c>)
 8012916:	4293      	cmp	r3, r2
 8012918:	d00f      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	4a26      	ldr	r2, [pc, #152]	; (80129b8 <TIM_Base_SetConfig+0x130>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d00b      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4a25      	ldr	r2, [pc, #148]	; (80129bc <TIM_Base_SetConfig+0x134>)
 8012926:	4293      	cmp	r3, r2
 8012928:	d007      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4a24      	ldr	r2, [pc, #144]	; (80129c0 <TIM_Base_SetConfig+0x138>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d003      	beq.n	801293a <TIM_Base_SetConfig+0xb2>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	4a23      	ldr	r2, [pc, #140]	; (80129c4 <TIM_Base_SetConfig+0x13c>)
 8012936:	4293      	cmp	r3, r2
 8012938:	d108      	bne.n	801294c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	68db      	ldr	r3, [r3, #12]
 8012946:	68fa      	ldr	r2, [r7, #12]
 8012948:	4313      	orrs	r3, r2
 801294a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	695b      	ldr	r3, [r3, #20]
 8012956:	4313      	orrs	r3, r2
 8012958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	68fa      	ldr	r2, [r7, #12]
 801295e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	689a      	ldr	r2, [r3, #8]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	4a0a      	ldr	r2, [pc, #40]	; (801299c <TIM_Base_SetConfig+0x114>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d003      	beq.n	8012980 <TIM_Base_SetConfig+0xf8>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	4a0c      	ldr	r2, [pc, #48]	; (80129ac <TIM_Base_SetConfig+0x124>)
 801297c:	4293      	cmp	r3, r2
 801297e:	d103      	bne.n	8012988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	691a      	ldr	r2, [r3, #16]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2201      	movs	r2, #1
 801298c:	615a      	str	r2, [r3, #20]
}
 801298e:	bf00      	nop
 8012990:	3714      	adds	r7, #20
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr
 801299a:	bf00      	nop
 801299c:	40010000 	.word	0x40010000
 80129a0:	40000400 	.word	0x40000400
 80129a4:	40000800 	.word	0x40000800
 80129a8:	40000c00 	.word	0x40000c00
 80129ac:	40010400 	.word	0x40010400
 80129b0:	40014000 	.word	0x40014000
 80129b4:	40014400 	.word	0x40014400
 80129b8:	40014800 	.word	0x40014800
 80129bc:	40001800 	.word	0x40001800
 80129c0:	40001c00 	.word	0x40001c00
 80129c4:	40002000 	.word	0x40002000

080129c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b087      	sub	sp, #28
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6a1b      	ldr	r3, [r3, #32]
 80129d6:	f023 0201 	bic.w	r2, r3, #1
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6a1b      	ldr	r3, [r3, #32]
 80129e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	699b      	ldr	r3, [r3, #24]
 80129ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f023 0303 	bic.w	r3, r3, #3
 80129fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	68fa      	ldr	r2, [r7, #12]
 8012a06:	4313      	orrs	r3, r2
 8012a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	f023 0302 	bic.w	r3, r3, #2
 8012a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	689b      	ldr	r3, [r3, #8]
 8012a16:	697a      	ldr	r2, [r7, #20]
 8012a18:	4313      	orrs	r3, r2
 8012a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	4a20      	ldr	r2, [pc, #128]	; (8012aa0 <TIM_OC1_SetConfig+0xd8>)
 8012a20:	4293      	cmp	r3, r2
 8012a22:	d003      	beq.n	8012a2c <TIM_OC1_SetConfig+0x64>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	4a1f      	ldr	r2, [pc, #124]	; (8012aa4 <TIM_OC1_SetConfig+0xdc>)
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d10c      	bne.n	8012a46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	f023 0308 	bic.w	r3, r3, #8
 8012a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	697a      	ldr	r2, [r7, #20]
 8012a3a:	4313      	orrs	r3, r2
 8012a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	f023 0304 	bic.w	r3, r3, #4
 8012a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	4a15      	ldr	r2, [pc, #84]	; (8012aa0 <TIM_OC1_SetConfig+0xd8>)
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d003      	beq.n	8012a56 <TIM_OC1_SetConfig+0x8e>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	4a14      	ldr	r2, [pc, #80]	; (8012aa4 <TIM_OC1_SetConfig+0xdc>)
 8012a52:	4293      	cmp	r3, r2
 8012a54:	d111      	bne.n	8012a7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	695b      	ldr	r3, [r3, #20]
 8012a6a:	693a      	ldr	r2, [r7, #16]
 8012a6c:	4313      	orrs	r3, r2
 8012a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	699b      	ldr	r3, [r3, #24]
 8012a74:	693a      	ldr	r2, [r7, #16]
 8012a76:	4313      	orrs	r3, r2
 8012a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	693a      	ldr	r2, [r7, #16]
 8012a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	68fa      	ldr	r2, [r7, #12]
 8012a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	685a      	ldr	r2, [r3, #4]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	697a      	ldr	r2, [r7, #20]
 8012a92:	621a      	str	r2, [r3, #32]
}
 8012a94:	bf00      	nop
 8012a96:	371c      	adds	r7, #28
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr
 8012aa0:	40010000 	.word	0x40010000
 8012aa4:	40010400 	.word	0x40010400

08012aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b087      	sub	sp, #28
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6a1b      	ldr	r3, [r3, #32]
 8012ab6:	f023 0210 	bic.w	r2, r3, #16
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6a1b      	ldr	r3, [r3, #32]
 8012ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	699b      	ldr	r3, [r3, #24]
 8012ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	021b      	lsls	r3, r3, #8
 8012ae6:	68fa      	ldr	r2, [r7, #12]
 8012ae8:	4313      	orrs	r3, r2
 8012aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	f023 0320 	bic.w	r3, r3, #32
 8012af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	011b      	lsls	r3, r3, #4
 8012afa:	697a      	ldr	r2, [r7, #20]
 8012afc:	4313      	orrs	r3, r2
 8012afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4a22      	ldr	r2, [pc, #136]	; (8012b8c <TIM_OC2_SetConfig+0xe4>)
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d003      	beq.n	8012b10 <TIM_OC2_SetConfig+0x68>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4a21      	ldr	r2, [pc, #132]	; (8012b90 <TIM_OC2_SetConfig+0xe8>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d10d      	bne.n	8012b2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	011b      	lsls	r3, r3, #4
 8012b1e:	697a      	ldr	r2, [r7, #20]
 8012b20:	4313      	orrs	r3, r2
 8012b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	4a17      	ldr	r2, [pc, #92]	; (8012b8c <TIM_OC2_SetConfig+0xe4>)
 8012b30:	4293      	cmp	r3, r2
 8012b32:	d003      	beq.n	8012b3c <TIM_OC2_SetConfig+0x94>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	4a16      	ldr	r2, [pc, #88]	; (8012b90 <TIM_OC2_SetConfig+0xe8>)
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d113      	bne.n	8012b64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	695b      	ldr	r3, [r3, #20]
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	693a      	ldr	r2, [r7, #16]
 8012b54:	4313      	orrs	r3, r2
 8012b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	699b      	ldr	r3, [r3, #24]
 8012b5c:	009b      	lsls	r3, r3, #2
 8012b5e:	693a      	ldr	r2, [r7, #16]
 8012b60:	4313      	orrs	r3, r2
 8012b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	693a      	ldr	r2, [r7, #16]
 8012b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	685a      	ldr	r2, [r3, #4]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	697a      	ldr	r2, [r7, #20]
 8012b7c:	621a      	str	r2, [r3, #32]
}
 8012b7e:	bf00      	nop
 8012b80:	371c      	adds	r7, #28
 8012b82:	46bd      	mov	sp, r7
 8012b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b88:	4770      	bx	lr
 8012b8a:	bf00      	nop
 8012b8c:	40010000 	.word	0x40010000
 8012b90:	40010400 	.word	0x40010400

08012b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012b94:	b480      	push	{r7}
 8012b96:	b087      	sub	sp, #28
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6a1b      	ldr	r3, [r3, #32]
 8012ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6a1b      	ldr	r3, [r3, #32]
 8012bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	69db      	ldr	r3, [r3, #28]
 8012bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f023 0303 	bic.w	r3, r3, #3
 8012bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	68fa      	ldr	r2, [r7, #12]
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	689b      	ldr	r3, [r3, #8]
 8012be2:	021b      	lsls	r3, r3, #8
 8012be4:	697a      	ldr	r2, [r7, #20]
 8012be6:	4313      	orrs	r3, r2
 8012be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	4a21      	ldr	r2, [pc, #132]	; (8012c74 <TIM_OC3_SetConfig+0xe0>)
 8012bee:	4293      	cmp	r3, r2
 8012bf0:	d003      	beq.n	8012bfa <TIM_OC3_SetConfig+0x66>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	4a20      	ldr	r2, [pc, #128]	; (8012c78 <TIM_OC3_SetConfig+0xe4>)
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d10d      	bne.n	8012c16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	021b      	lsls	r3, r3, #8
 8012c08:	697a      	ldr	r2, [r7, #20]
 8012c0a:	4313      	orrs	r3, r2
 8012c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	4a16      	ldr	r2, [pc, #88]	; (8012c74 <TIM_OC3_SetConfig+0xe0>)
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d003      	beq.n	8012c26 <TIM_OC3_SetConfig+0x92>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	4a15      	ldr	r2, [pc, #84]	; (8012c78 <TIM_OC3_SetConfig+0xe4>)
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d113      	bne.n	8012c4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	695b      	ldr	r3, [r3, #20]
 8012c3a:	011b      	lsls	r3, r3, #4
 8012c3c:	693a      	ldr	r2, [r7, #16]
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	699b      	ldr	r3, [r3, #24]
 8012c46:	011b      	lsls	r3, r3, #4
 8012c48:	693a      	ldr	r2, [r7, #16]
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	693a      	ldr	r2, [r7, #16]
 8012c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	68fa      	ldr	r2, [r7, #12]
 8012c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	685a      	ldr	r2, [r3, #4]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	621a      	str	r2, [r3, #32]
}
 8012c68:	bf00      	nop
 8012c6a:	371c      	adds	r7, #28
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr
 8012c74:	40010000 	.word	0x40010000
 8012c78:	40010400 	.word	0x40010400

08012c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b087      	sub	sp, #28
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6a1b      	ldr	r3, [r3, #32]
 8012c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6a1b      	ldr	r3, [r3, #32]
 8012c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	69db      	ldr	r3, [r3, #28]
 8012ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	021b      	lsls	r3, r3, #8
 8012cba:	68fa      	ldr	r2, [r7, #12]
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	689b      	ldr	r3, [r3, #8]
 8012ccc:	031b      	lsls	r3, r3, #12
 8012cce:	693a      	ldr	r2, [r7, #16]
 8012cd0:	4313      	orrs	r3, r2
 8012cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	4a12      	ldr	r2, [pc, #72]	; (8012d20 <TIM_OC4_SetConfig+0xa4>)
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d003      	beq.n	8012ce4 <TIM_OC4_SetConfig+0x68>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	4a11      	ldr	r2, [pc, #68]	; (8012d24 <TIM_OC4_SetConfig+0xa8>)
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d109      	bne.n	8012cf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	695b      	ldr	r3, [r3, #20]
 8012cf0:	019b      	lsls	r3, r3, #6
 8012cf2:	697a      	ldr	r2, [r7, #20]
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	697a      	ldr	r2, [r7, #20]
 8012cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	685a      	ldr	r2, [r3, #4]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	693a      	ldr	r2, [r7, #16]
 8012d10:	621a      	str	r2, [r3, #32]
}
 8012d12:	bf00      	nop
 8012d14:	371c      	adds	r7, #28
 8012d16:	46bd      	mov	sp, r7
 8012d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop
 8012d20:	40010000 	.word	0x40010000
 8012d24:	40010400 	.word	0x40010400

08012d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012d28:	b480      	push	{r7}
 8012d2a:	b087      	sub	sp, #28
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	6a1b      	ldr	r3, [r3, #32]
 8012d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	6a1b      	ldr	r3, [r3, #32]
 8012d3e:	f023 0201 	bic.w	r2, r3, #1
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	699b      	ldr	r3, [r3, #24]
 8012d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012d4c:	693b      	ldr	r3, [r7, #16]
 8012d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	011b      	lsls	r3, r3, #4
 8012d58:	693a      	ldr	r2, [r7, #16]
 8012d5a:	4313      	orrs	r3, r2
 8012d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	f023 030a 	bic.w	r3, r3, #10
 8012d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012d66:	697a      	ldr	r2, [r7, #20]
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	4313      	orrs	r3, r2
 8012d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	693a      	ldr	r2, [r7, #16]
 8012d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	697a      	ldr	r2, [r7, #20]
 8012d78:	621a      	str	r2, [r3, #32]
}
 8012d7a:	bf00      	nop
 8012d7c:	371c      	adds	r7, #28
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr

08012d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012d86:	b480      	push	{r7}
 8012d88:	b087      	sub	sp, #28
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	60f8      	str	r0, [r7, #12]
 8012d8e:	60b9      	str	r1, [r7, #8]
 8012d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	6a1b      	ldr	r3, [r3, #32]
 8012d96:	f023 0210 	bic.w	r2, r3, #16
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	699b      	ldr	r3, [r3, #24]
 8012da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	6a1b      	ldr	r3, [r3, #32]
 8012da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	031b      	lsls	r3, r3, #12
 8012db6:	697a      	ldr	r2, [r7, #20]
 8012db8:	4313      	orrs	r3, r2
 8012dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	011b      	lsls	r3, r3, #4
 8012dc8:	693a      	ldr	r2, [r7, #16]
 8012dca:	4313      	orrs	r3, r2
 8012dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	697a      	ldr	r2, [r7, #20]
 8012dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	693a      	ldr	r2, [r7, #16]
 8012dd8:	621a      	str	r2, [r3, #32]
}
 8012dda:	bf00      	nop
 8012ddc:	371c      	adds	r7, #28
 8012dde:	46bd      	mov	sp, r7
 8012de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de4:	4770      	bx	lr

08012de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012de6:	b480      	push	{r7}
 8012de8:	b085      	sub	sp, #20
 8012dea:	af00      	add	r7, sp, #0
 8012dec:	6078      	str	r0, [r7, #4]
 8012dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	689b      	ldr	r3, [r3, #8]
 8012df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012dfe:	683a      	ldr	r2, [r7, #0]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	4313      	orrs	r3, r2
 8012e04:	f043 0307 	orr.w	r3, r3, #7
 8012e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	609a      	str	r2, [r3, #8]
}
 8012e10:	bf00      	nop
 8012e12:	3714      	adds	r7, #20
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr

08012e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b087      	sub	sp, #28
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	60f8      	str	r0, [r7, #12]
 8012e24:	60b9      	str	r1, [r7, #8]
 8012e26:	607a      	str	r2, [r7, #4]
 8012e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	689b      	ldr	r3, [r3, #8]
 8012e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	021a      	lsls	r2, r3, #8
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	431a      	orrs	r2, r3
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	4313      	orrs	r3, r2
 8012e44:	697a      	ldr	r2, [r7, #20]
 8012e46:	4313      	orrs	r3, r2
 8012e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	697a      	ldr	r2, [r7, #20]
 8012e4e:	609a      	str	r2, [r3, #8]
}
 8012e50:	bf00      	nop
 8012e52:	371c      	adds	r7, #28
 8012e54:	46bd      	mov	sp, r7
 8012e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5a:	4770      	bx	lr

08012e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012e5c:	b480      	push	{r7}
 8012e5e:	b087      	sub	sp, #28
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	f003 031f 	and.w	r3, r3, #31
 8012e6e:	2201      	movs	r2, #1
 8012e70:	fa02 f303 	lsl.w	r3, r2, r3
 8012e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	6a1a      	ldr	r2, [r3, #32]
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	43db      	mvns	r3, r3
 8012e7e:	401a      	ands	r2, r3
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	6a1a      	ldr	r2, [r3, #32]
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	f003 031f 	and.w	r3, r3, #31
 8012e8e:	6879      	ldr	r1, [r7, #4]
 8012e90:	fa01 f303 	lsl.w	r3, r1, r3
 8012e94:	431a      	orrs	r2, r3
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	621a      	str	r2, [r3, #32]
}
 8012e9a:	bf00      	nop
 8012e9c:	371c      	adds	r7, #28
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr

08012ea6 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ea6:	b580      	push	{r7, lr}
 8012ea8:	b084      	sub	sp, #16
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	6078      	str	r0, [r7, #4]
 8012eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	2b04      	cmp	r3, #4
 8012eb4:	d00d      	beq.n	8012ed2 <HAL_TIMEx_OCN_Start_IT+0x2c>
 8012eb6:	2b08      	cmp	r3, #8
 8012eb8:	d014      	beq.n	8012ee4 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d000      	beq.n	8012ec0 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8012ebe:	e01a      	b.n	8012ef6 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	68da      	ldr	r2, [r3, #12]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	f042 0202 	orr.w	r2, r2, #2
 8012ece:	60da      	str	r2, [r3, #12]
      break;
 8012ed0:	e011      	b.n	8012ef6 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	68da      	ldr	r2, [r3, #12]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f042 0204 	orr.w	r2, r2, #4
 8012ee0:	60da      	str	r2, [r3, #12]
      break;
 8012ee2:	e008      	b.n	8012ef6 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68da      	ldr	r2, [r3, #12]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f042 0208 	orr.w	r2, r2, #8
 8012ef2:	60da      	str	r2, [r3, #12]
      break;
 8012ef4:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	68da      	ldr	r2, [r3, #12]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012f04:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	2204      	movs	r2, #4
 8012f0c:	6839      	ldr	r1, [r7, #0]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f000 f976 	bl	8013200 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012f22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	689b      	ldr	r3, [r3, #8]
 8012f2a:	f003 0307 	and.w	r3, r3, #7
 8012f2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	2b06      	cmp	r3, #6
 8012f34:	d007      	beq.n	8012f46 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f042 0201 	orr.w	r2, r2, #1
 8012f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012f46:	2300      	movs	r3, #0
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3710      	adds	r7, #16
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}

08012f50 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	2b04      	cmp	r3, #4
 8012f5e:	d00d      	beq.n	8012f7c <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8012f60:	2b08      	cmp	r3, #8
 8012f62:	d014      	beq.n	8012f8e <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d000      	beq.n	8012f6a <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8012f68:	e01a      	b.n	8012fa0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	68da      	ldr	r2, [r3, #12]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f022 0202 	bic.w	r2, r2, #2
 8012f78:	60da      	str	r2, [r3, #12]
      break;
 8012f7a:	e011      	b.n	8012fa0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	68da      	ldr	r2, [r3, #12]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	f022 0204 	bic.w	r2, r2, #4
 8012f8a:	60da      	str	r2, [r3, #12]
      break;
 8012f8c:	e008      	b.n	8012fa0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	68da      	ldr	r2, [r3, #12]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	f022 0208 	bic.w	r2, r2, #8
 8012f9c:	60da      	str	r2, [r3, #12]
      break;
 8012f9e:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	6839      	ldr	r1, [r7, #0]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f000 f929 	bl	8013200 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	6a1b      	ldr	r3, [r3, #32]
 8012fb4:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	f240 4344 	movw	r3, #1092	; 0x444
 8012fbc:	4013      	ands	r3, r2
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d107      	bne.n	8012fd2 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	68da      	ldr	r2, [r3, #12]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fd0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	6a1a      	ldr	r2, [r3, #32]
 8012fd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8012fdc:	4013      	ands	r3, r2
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d10f      	bne.n	8013002 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	6a1a      	ldr	r2, [r3, #32]
 8012fe8:	f240 4344 	movw	r3, #1092	; 0x444
 8012fec:	4013      	ands	r3, r2
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d107      	bne.n	8013002 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013000:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	6a1a      	ldr	r2, [r3, #32]
 8013008:	f241 1311 	movw	r3, #4369	; 0x1111
 801300c:	4013      	ands	r3, r2
 801300e:	2b00      	cmp	r3, #0
 8013010:	d10f      	bne.n	8013032 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	6a1a      	ldr	r2, [r3, #32]
 8013018:	f240 4344 	movw	r3, #1092	; 0x444
 801301c:	4013      	ands	r3, r2
 801301e:	2b00      	cmp	r3, #0
 8013020:	d107      	bne.n	8013032 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	f022 0201 	bic.w	r2, r2, #1
 8013030:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3710      	adds	r7, #16
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}

0801303c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801304c:	2b01      	cmp	r3, #1
 801304e:	d101      	bne.n	8013054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013050:	2302      	movs	r3, #2
 8013052:	e05a      	b.n	801310a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2201      	movs	r2, #1
 8013058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2202      	movs	r2, #2
 8013060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	689b      	ldr	r3, [r3, #8]
 8013072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801307a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	68fa      	ldr	r2, [r7, #12]
 8013082:	4313      	orrs	r3, r2
 8013084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4a21      	ldr	r2, [pc, #132]	; (8013118 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013094:	4293      	cmp	r3, r2
 8013096:	d022      	beq.n	80130de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130a0:	d01d      	beq.n	80130de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4a1d      	ldr	r2, [pc, #116]	; (801311c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d018      	beq.n	80130de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	4a1b      	ldr	r2, [pc, #108]	; (8013120 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d013      	beq.n	80130de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a1a      	ldr	r2, [pc, #104]	; (8013124 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80130bc:	4293      	cmp	r3, r2
 80130be:	d00e      	beq.n	80130de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	4a18      	ldr	r2, [pc, #96]	; (8013128 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d009      	beq.n	80130de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	4a17      	ldr	r2, [pc, #92]	; (801312c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80130d0:	4293      	cmp	r3, r2
 80130d2:	d004      	beq.n	80130de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4a15      	ldr	r2, [pc, #84]	; (8013130 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80130da:	4293      	cmp	r3, r2
 80130dc:	d10c      	bne.n	80130f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80130e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	68ba      	ldr	r2, [r7, #8]
 80130ec:	4313      	orrs	r3, r2
 80130ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	68ba      	ldr	r2, [r7, #8]
 80130f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2201      	movs	r2, #1
 80130fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2200      	movs	r2, #0
 8013104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013108:	2300      	movs	r3, #0
}
 801310a:	4618      	mov	r0, r3
 801310c:	3714      	adds	r7, #20
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	40010000 	.word	0x40010000
 801311c:	40000400 	.word	0x40000400
 8013120:	40000800 	.word	0x40000800
 8013124:	40000c00 	.word	0x40000c00
 8013128:	40010400 	.word	0x40010400
 801312c:	40014000 	.word	0x40014000
 8013130:	40001800 	.word	0x40001800

08013134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013134:	b480      	push	{r7}
 8013136:	b085      	sub	sp, #20
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801313e:	2300      	movs	r3, #0
 8013140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013148:	2b01      	cmp	r3, #1
 801314a:	d101      	bne.n	8013150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801314c:	2302      	movs	r3, #2
 801314e:	e03d      	b.n	80131cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2201      	movs	r2, #1
 8013154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	4313      	orrs	r3, r2
 8013164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	689b      	ldr	r3, [r3, #8]
 8013170:	4313      	orrs	r3, r2
 8013172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	4313      	orrs	r3, r2
 8013180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4313      	orrs	r3, r2
 801318e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	691b      	ldr	r3, [r3, #16]
 801319a:	4313      	orrs	r3, r2
 801319c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	695b      	ldr	r3, [r3, #20]
 80131a8:	4313      	orrs	r3, r2
 80131aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	69db      	ldr	r3, [r3, #28]
 80131b6:	4313      	orrs	r3, r2
 80131b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	68fa      	ldr	r2, [r7, #12]
 80131c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2200      	movs	r2, #0
 80131c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80131ca:	2300      	movs	r3, #0
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3714      	adds	r7, #20
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr

080131d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80131e0:	bf00      	nop
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr

080131ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80131f4:	bf00      	nop
 80131f6:	370c      	adds	r7, #12
 80131f8:	46bd      	mov	sp, r7
 80131fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fe:	4770      	bx	lr

08013200 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8013200:	b480      	push	{r7}
 8013202:	b087      	sub	sp, #28
 8013204:	af00      	add	r7, sp, #0
 8013206:	60f8      	str	r0, [r7, #12]
 8013208:	60b9      	str	r1, [r7, #8]
 801320a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	f003 031f 	and.w	r3, r3, #31
 8013212:	2204      	movs	r2, #4
 8013214:	fa02 f303 	lsl.w	r3, r2, r3
 8013218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	6a1a      	ldr	r2, [r3, #32]
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	43db      	mvns	r3, r3
 8013222:	401a      	ands	r2, r3
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	6a1a      	ldr	r2, [r3, #32]
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	f003 031f 	and.w	r3, r3, #31
 8013232:	6879      	ldr	r1, [r7, #4]
 8013234:	fa01 f303 	lsl.w	r3, r1, r3
 8013238:	431a      	orrs	r2, r3
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	621a      	str	r2, [r3, #32]
}
 801323e:	bf00      	nop
 8013240:	371c      	adds	r7, #28
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr

0801324a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801324a:	b580      	push	{r7, lr}
 801324c:	b082      	sub	sp, #8
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d101      	bne.n	801325c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013258:	2301      	movs	r3, #1
 801325a:	e03f      	b.n	80132dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013262:	b2db      	uxtb	r3, r3
 8013264:	2b00      	cmp	r3, #0
 8013266:	d106      	bne.n	8013276 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2200      	movs	r2, #0
 801326c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f7fa fcfd 	bl	800dc70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2224      	movs	r2, #36	; 0x24
 801327a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	68da      	ldr	r2, [r3, #12]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801328c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f000 f9b2 	bl	80135f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	691a      	ldr	r2, [r3, #16]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80132a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	695a      	ldr	r2, [r3, #20]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80132b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	68da      	ldr	r2, [r3, #12]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80132c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2200      	movs	r2, #0
 80132c8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2220      	movs	r2, #32
 80132ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2220      	movs	r2, #32
 80132d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80132da:	2300      	movs	r3, #0
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b088      	sub	sp, #32
 80132e8:	af02      	add	r7, sp, #8
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	603b      	str	r3, [r7, #0]
 80132f0:	4613      	mov	r3, r2
 80132f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80132f4:	2300      	movs	r3, #0
 80132f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80132fe:	b2db      	uxtb	r3, r3
 8013300:	2b20      	cmp	r3, #32
 8013302:	f040 8083 	bne.w	801340c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d002      	beq.n	8013312 <HAL_UART_Transmit+0x2e>
 801330c:	88fb      	ldrh	r3, [r7, #6]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d101      	bne.n	8013316 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8013312:	2301      	movs	r3, #1
 8013314:	e07b      	b.n	801340e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801331c:	2b01      	cmp	r3, #1
 801331e:	d101      	bne.n	8013324 <HAL_UART_Transmit+0x40>
 8013320:	2302      	movs	r3, #2
 8013322:	e074      	b.n	801340e <HAL_UART_Transmit+0x12a>
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	2201      	movs	r2, #1
 8013328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	2200      	movs	r2, #0
 8013330:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	2221      	movs	r2, #33	; 0x21
 8013336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801333a:	f7fb f9f3 	bl	800e724 <HAL_GetTick>
 801333e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	88fa      	ldrh	r2, [r7, #6]
 8013344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	88fa      	ldrh	r2, [r7, #6]
 801334a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2200      	movs	r2, #0
 8013350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8013354:	e042      	b.n	80133dc <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801335a:	b29b      	uxth	r3, r3
 801335c:	3b01      	subs	r3, #1
 801335e:	b29a      	uxth	r2, r3
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	689b      	ldr	r3, [r3, #8]
 8013368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801336c:	d122      	bne.n	80133b4 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	9300      	str	r3, [sp, #0]
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	2200      	movs	r2, #0
 8013376:	2180      	movs	r1, #128	; 0x80
 8013378:	68f8      	ldr	r0, [r7, #12]
 801337a:	f000 f8f2 	bl	8013562 <UART_WaitOnFlagUntilTimeout>
 801337e:	4603      	mov	r3, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d001      	beq.n	8013388 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8013384:	2303      	movs	r3, #3
 8013386:	e042      	b.n	801340e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	881b      	ldrh	r3, [r3, #0]
 8013390:	461a      	mov	r2, r3
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801339a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	691b      	ldr	r3, [r3, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d103      	bne.n	80133ac <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	3302      	adds	r3, #2
 80133a8:	60bb      	str	r3, [r7, #8]
 80133aa:	e017      	b.n	80133dc <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	3301      	adds	r3, #1
 80133b0:	60bb      	str	r3, [r7, #8]
 80133b2:	e013      	b.n	80133dc <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	9300      	str	r3, [sp, #0]
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	2200      	movs	r2, #0
 80133bc:	2180      	movs	r1, #128	; 0x80
 80133be:	68f8      	ldr	r0, [r7, #12]
 80133c0:	f000 f8cf 	bl	8013562 <UART_WaitOnFlagUntilTimeout>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d001      	beq.n	80133ce <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80133ca:	2303      	movs	r3, #3
 80133cc:	e01f      	b.n	801340e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	1c5a      	adds	r2, r3, #1
 80133d2:	60ba      	str	r2, [r7, #8]
 80133d4:	781a      	ldrb	r2, [r3, #0]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d1b7      	bne.n	8013356 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	9300      	str	r3, [sp, #0]
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	2200      	movs	r2, #0
 80133ee:	2140      	movs	r1, #64	; 0x40
 80133f0:	68f8      	ldr	r0, [r7, #12]
 80133f2:	f000 f8b6 	bl	8013562 <UART_WaitOnFlagUntilTimeout>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d001      	beq.n	8013400 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80133fc:	2303      	movs	r3, #3
 80133fe:	e006      	b.n	801340e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2220      	movs	r2, #32
 8013404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8013408:	2300      	movs	r3, #0
 801340a:	e000      	b.n	801340e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801340c:	2302      	movs	r3, #2
  }
}
 801340e:	4618      	mov	r0, r3
 8013410:	3718      	adds	r7, #24
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}

08013416 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013416:	b580      	push	{r7, lr}
 8013418:	b088      	sub	sp, #32
 801341a:	af02      	add	r7, sp, #8
 801341c:	60f8      	str	r0, [r7, #12]
 801341e:	60b9      	str	r1, [r7, #8]
 8013420:	603b      	str	r3, [r7, #0]
 8013422:	4613      	mov	r3, r2
 8013424:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8013426:	2300      	movs	r3, #0
 8013428:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013430:	b2db      	uxtb	r3, r3
 8013432:	2b20      	cmp	r3, #32
 8013434:	f040 8090 	bne.w	8013558 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d002      	beq.n	8013444 <HAL_UART_Receive+0x2e>
 801343e:	88fb      	ldrh	r3, [r7, #6]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d101      	bne.n	8013448 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8013444:	2301      	movs	r3, #1
 8013446:	e088      	b.n	801355a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801344e:	2b01      	cmp	r3, #1
 8013450:	d101      	bne.n	8013456 <HAL_UART_Receive+0x40>
 8013452:	2302      	movs	r3, #2
 8013454:	e081      	b.n	801355a <HAL_UART_Receive+0x144>
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	2201      	movs	r2, #1
 801345a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2200      	movs	r2, #0
 8013462:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	2222      	movs	r2, #34	; 0x22
 8013468:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801346c:	f7fb f95a 	bl	800e724 <HAL_GetTick>
 8013470:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	88fa      	ldrh	r2, [r7, #6]
 8013476:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	88fa      	ldrh	r2, [r7, #6]
 801347c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2200      	movs	r2, #0
 8013482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8013486:	e05c      	b.n	8013542 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801348c:	b29b      	uxth	r3, r3
 801348e:	3b01      	subs	r3, #1
 8013490:	b29a      	uxth	r2, r3
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	689b      	ldr	r3, [r3, #8]
 801349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801349e:	d12b      	bne.n	80134f8 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	9300      	str	r3, [sp, #0]
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	2200      	movs	r2, #0
 80134a8:	2120      	movs	r1, #32
 80134aa:	68f8      	ldr	r0, [r7, #12]
 80134ac:	f000 f859 	bl	8013562 <UART_WaitOnFlagUntilTimeout>
 80134b0:	4603      	mov	r3, r0
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d001      	beq.n	80134ba <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80134b6:	2303      	movs	r3, #3
 80134b8:	e04f      	b.n	801355a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	691b      	ldr	r3, [r3, #16]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d10c      	bne.n	80134e0 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	685b      	ldr	r3, [r3, #4]
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	3302      	adds	r3, #2
 80134dc:	60bb      	str	r3, [r7, #8]
 80134de:	e030      	b.n	8013542 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	b2db      	uxtb	r3, r3
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	3301      	adds	r3, #1
 80134f4:	60bb      	str	r3, [r7, #8]
 80134f6:	e024      	b.n	8013542 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	2200      	movs	r2, #0
 8013500:	2120      	movs	r1, #32
 8013502:	68f8      	ldr	r0, [r7, #12]
 8013504:	f000 f82d 	bl	8013562 <UART_WaitOnFlagUntilTimeout>
 8013508:	4603      	mov	r3, r0
 801350a:	2b00      	cmp	r3, #0
 801350c:	d001      	beq.n	8013512 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 801350e:	2303      	movs	r3, #3
 8013510:	e023      	b.n	801355a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	691b      	ldr	r3, [r3, #16]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d108      	bne.n	801352c <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	6859      	ldr	r1, [r3, #4]
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	1c5a      	adds	r2, r3, #1
 8013524:	60ba      	str	r2, [r7, #8]
 8013526:	b2ca      	uxtb	r2, r1
 8013528:	701a      	strb	r2, [r3, #0]
 801352a:	e00a      	b.n	8013542 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	b2da      	uxtb	r2, r3
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	1c59      	adds	r1, r3, #1
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801353e:	b2d2      	uxtb	r2, r2
 8013540:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013546:	b29b      	uxth	r3, r3
 8013548:	2b00      	cmp	r3, #0
 801354a:	d19d      	bne.n	8013488 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	2220      	movs	r2, #32
 8013550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8013554:	2300      	movs	r3, #0
 8013556:	e000      	b.n	801355a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8013558:	2302      	movs	r3, #2
  }
}
 801355a:	4618      	mov	r0, r3
 801355c:	3718      	adds	r7, #24
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	b084      	sub	sp, #16
 8013566:	af00      	add	r7, sp, #0
 8013568:	60f8      	str	r0, [r7, #12]
 801356a:	60b9      	str	r1, [r7, #8]
 801356c:	603b      	str	r3, [r7, #0]
 801356e:	4613      	mov	r3, r2
 8013570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013572:	e02c      	b.n	80135ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013574:	69bb      	ldr	r3, [r7, #24]
 8013576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801357a:	d028      	beq.n	80135ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801357c:	69bb      	ldr	r3, [r7, #24]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d007      	beq.n	8013592 <UART_WaitOnFlagUntilTimeout+0x30>
 8013582:	f7fb f8cf 	bl	800e724 <HAL_GetTick>
 8013586:	4602      	mov	r2, r0
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	1ad3      	subs	r3, r2, r3
 801358c:	69ba      	ldr	r2, [r7, #24]
 801358e:	429a      	cmp	r2, r3
 8013590:	d21d      	bcs.n	80135ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	68da      	ldr	r2, [r3, #12]
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80135a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	695a      	ldr	r2, [r3, #20]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	f022 0201 	bic.w	r2, r2, #1
 80135b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2220      	movs	r2, #32
 80135b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	2220      	movs	r2, #32
 80135be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2200      	movs	r2, #0
 80135c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80135ca:	2303      	movs	r3, #3
 80135cc:	e00f      	b.n	80135ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	681a      	ldr	r2, [r3, #0]
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	4013      	ands	r3, r2
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	429a      	cmp	r2, r3
 80135dc:	bf0c      	ite	eq
 80135de:	2301      	moveq	r3, #1
 80135e0:	2300      	movne	r3, #0
 80135e2:	b2db      	uxtb	r3, r3
 80135e4:	461a      	mov	r2, r3
 80135e6:	79fb      	ldrb	r3, [r7, #7]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d0c3      	beq.n	8013574 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80135ec:	2300      	movs	r3, #0
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3710      	adds	r7, #16
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
	...

080135f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80135f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135fc:	b085      	sub	sp, #20
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	68da      	ldr	r2, [r3, #12]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	430a      	orrs	r2, r1
 8013616:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	689a      	ldr	r2, [r3, #8]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	691b      	ldr	r3, [r3, #16]
 8013620:	431a      	orrs	r2, r3
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	695b      	ldr	r3, [r3, #20]
 8013626:	431a      	orrs	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	69db      	ldr	r3, [r3, #28]
 801362c:	4313      	orrs	r3, r2
 801362e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	68db      	ldr	r3, [r3, #12]
 8013636:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801363a:	f023 030c 	bic.w	r3, r3, #12
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	6812      	ldr	r2, [r2, #0]
 8013642:	68f9      	ldr	r1, [r7, #12]
 8013644:	430b      	orrs	r3, r1
 8013646:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	695b      	ldr	r3, [r3, #20]
 801364e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	699a      	ldr	r2, [r3, #24]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	430a      	orrs	r2, r1
 801365c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	69db      	ldr	r3, [r3, #28]
 8013662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013666:	f040 818b 	bne.w	8013980 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4ac1      	ldr	r2, [pc, #772]	; (8013974 <UART_SetConfig+0x37c>)
 8013670:	4293      	cmp	r3, r2
 8013672:	d005      	beq.n	8013680 <UART_SetConfig+0x88>
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4abf      	ldr	r2, [pc, #764]	; (8013978 <UART_SetConfig+0x380>)
 801367a:	4293      	cmp	r3, r2
 801367c:	f040 80bd 	bne.w	80137fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013680:	f7fd fbc2 	bl	8010e08 <HAL_RCC_GetPCLK2Freq>
 8013684:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	461d      	mov	r5, r3
 801368a:	f04f 0600 	mov.w	r6, #0
 801368e:	46a8      	mov	r8, r5
 8013690:	46b1      	mov	r9, r6
 8013692:	eb18 0308 	adds.w	r3, r8, r8
 8013696:	eb49 0409 	adc.w	r4, r9, r9
 801369a:	4698      	mov	r8, r3
 801369c:	46a1      	mov	r9, r4
 801369e:	eb18 0805 	adds.w	r8, r8, r5
 80136a2:	eb49 0906 	adc.w	r9, r9, r6
 80136a6:	f04f 0100 	mov.w	r1, #0
 80136aa:	f04f 0200 	mov.w	r2, #0
 80136ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80136b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80136b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80136ba:	4688      	mov	r8, r1
 80136bc:	4691      	mov	r9, r2
 80136be:	eb18 0005 	adds.w	r0, r8, r5
 80136c2:	eb49 0106 	adc.w	r1, r9, r6
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	461d      	mov	r5, r3
 80136cc:	f04f 0600 	mov.w	r6, #0
 80136d0:	196b      	adds	r3, r5, r5
 80136d2:	eb46 0406 	adc.w	r4, r6, r6
 80136d6:	461a      	mov	r2, r3
 80136d8:	4623      	mov	r3, r4
 80136da:	f7f5 fa0d 	bl	8008af8 <__aeabi_uldivmod>
 80136de:	4603      	mov	r3, r0
 80136e0:	460c      	mov	r4, r1
 80136e2:	461a      	mov	r2, r3
 80136e4:	4ba5      	ldr	r3, [pc, #660]	; (801397c <UART_SetConfig+0x384>)
 80136e6:	fba3 2302 	umull	r2, r3, r3, r2
 80136ea:	095b      	lsrs	r3, r3, #5
 80136ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	461d      	mov	r5, r3
 80136f4:	f04f 0600 	mov.w	r6, #0
 80136f8:	46a9      	mov	r9, r5
 80136fa:	46b2      	mov	sl, r6
 80136fc:	eb19 0309 	adds.w	r3, r9, r9
 8013700:	eb4a 040a 	adc.w	r4, sl, sl
 8013704:	4699      	mov	r9, r3
 8013706:	46a2      	mov	sl, r4
 8013708:	eb19 0905 	adds.w	r9, r9, r5
 801370c:	eb4a 0a06 	adc.w	sl, sl, r6
 8013710:	f04f 0100 	mov.w	r1, #0
 8013714:	f04f 0200 	mov.w	r2, #0
 8013718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801371c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013720:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013724:	4689      	mov	r9, r1
 8013726:	4692      	mov	sl, r2
 8013728:	eb19 0005 	adds.w	r0, r9, r5
 801372c:	eb4a 0106 	adc.w	r1, sl, r6
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	461d      	mov	r5, r3
 8013736:	f04f 0600 	mov.w	r6, #0
 801373a:	196b      	adds	r3, r5, r5
 801373c:	eb46 0406 	adc.w	r4, r6, r6
 8013740:	461a      	mov	r2, r3
 8013742:	4623      	mov	r3, r4
 8013744:	f7f5 f9d8 	bl	8008af8 <__aeabi_uldivmod>
 8013748:	4603      	mov	r3, r0
 801374a:	460c      	mov	r4, r1
 801374c:	461a      	mov	r2, r3
 801374e:	4b8b      	ldr	r3, [pc, #556]	; (801397c <UART_SetConfig+0x384>)
 8013750:	fba3 1302 	umull	r1, r3, r3, r2
 8013754:	095b      	lsrs	r3, r3, #5
 8013756:	2164      	movs	r1, #100	; 0x64
 8013758:	fb01 f303 	mul.w	r3, r1, r3
 801375c:	1ad3      	subs	r3, r2, r3
 801375e:	00db      	lsls	r3, r3, #3
 8013760:	3332      	adds	r3, #50	; 0x32
 8013762:	4a86      	ldr	r2, [pc, #536]	; (801397c <UART_SetConfig+0x384>)
 8013764:	fba2 2303 	umull	r2, r3, r2, r3
 8013768:	095b      	lsrs	r3, r3, #5
 801376a:	005b      	lsls	r3, r3, #1
 801376c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013770:	4498      	add	r8, r3
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	461d      	mov	r5, r3
 8013776:	f04f 0600 	mov.w	r6, #0
 801377a:	46a9      	mov	r9, r5
 801377c:	46b2      	mov	sl, r6
 801377e:	eb19 0309 	adds.w	r3, r9, r9
 8013782:	eb4a 040a 	adc.w	r4, sl, sl
 8013786:	4699      	mov	r9, r3
 8013788:	46a2      	mov	sl, r4
 801378a:	eb19 0905 	adds.w	r9, r9, r5
 801378e:	eb4a 0a06 	adc.w	sl, sl, r6
 8013792:	f04f 0100 	mov.w	r1, #0
 8013796:	f04f 0200 	mov.w	r2, #0
 801379a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801379e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80137a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80137a6:	4689      	mov	r9, r1
 80137a8:	4692      	mov	sl, r2
 80137aa:	eb19 0005 	adds.w	r0, r9, r5
 80137ae:	eb4a 0106 	adc.w	r1, sl, r6
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	461d      	mov	r5, r3
 80137b8:	f04f 0600 	mov.w	r6, #0
 80137bc:	196b      	adds	r3, r5, r5
 80137be:	eb46 0406 	adc.w	r4, r6, r6
 80137c2:	461a      	mov	r2, r3
 80137c4:	4623      	mov	r3, r4
 80137c6:	f7f5 f997 	bl	8008af8 <__aeabi_uldivmod>
 80137ca:	4603      	mov	r3, r0
 80137cc:	460c      	mov	r4, r1
 80137ce:	461a      	mov	r2, r3
 80137d0:	4b6a      	ldr	r3, [pc, #424]	; (801397c <UART_SetConfig+0x384>)
 80137d2:	fba3 1302 	umull	r1, r3, r3, r2
 80137d6:	095b      	lsrs	r3, r3, #5
 80137d8:	2164      	movs	r1, #100	; 0x64
 80137da:	fb01 f303 	mul.w	r3, r1, r3
 80137de:	1ad3      	subs	r3, r2, r3
 80137e0:	00db      	lsls	r3, r3, #3
 80137e2:	3332      	adds	r3, #50	; 0x32
 80137e4:	4a65      	ldr	r2, [pc, #404]	; (801397c <UART_SetConfig+0x384>)
 80137e6:	fba2 2303 	umull	r2, r3, r2, r3
 80137ea:	095b      	lsrs	r3, r3, #5
 80137ec:	f003 0207 	and.w	r2, r3, #7
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	4442      	add	r2, r8
 80137f6:	609a      	str	r2, [r3, #8]
 80137f8:	e26f      	b.n	8013cda <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80137fa:	f7fd faf1 	bl	8010de0 <HAL_RCC_GetPCLK1Freq>
 80137fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	461d      	mov	r5, r3
 8013804:	f04f 0600 	mov.w	r6, #0
 8013808:	46a8      	mov	r8, r5
 801380a:	46b1      	mov	r9, r6
 801380c:	eb18 0308 	adds.w	r3, r8, r8
 8013810:	eb49 0409 	adc.w	r4, r9, r9
 8013814:	4698      	mov	r8, r3
 8013816:	46a1      	mov	r9, r4
 8013818:	eb18 0805 	adds.w	r8, r8, r5
 801381c:	eb49 0906 	adc.w	r9, r9, r6
 8013820:	f04f 0100 	mov.w	r1, #0
 8013824:	f04f 0200 	mov.w	r2, #0
 8013828:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801382c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013830:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013834:	4688      	mov	r8, r1
 8013836:	4691      	mov	r9, r2
 8013838:	eb18 0005 	adds.w	r0, r8, r5
 801383c:	eb49 0106 	adc.w	r1, r9, r6
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	461d      	mov	r5, r3
 8013846:	f04f 0600 	mov.w	r6, #0
 801384a:	196b      	adds	r3, r5, r5
 801384c:	eb46 0406 	adc.w	r4, r6, r6
 8013850:	461a      	mov	r2, r3
 8013852:	4623      	mov	r3, r4
 8013854:	f7f5 f950 	bl	8008af8 <__aeabi_uldivmod>
 8013858:	4603      	mov	r3, r0
 801385a:	460c      	mov	r4, r1
 801385c:	461a      	mov	r2, r3
 801385e:	4b47      	ldr	r3, [pc, #284]	; (801397c <UART_SetConfig+0x384>)
 8013860:	fba3 2302 	umull	r2, r3, r3, r2
 8013864:	095b      	lsrs	r3, r3, #5
 8013866:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	461d      	mov	r5, r3
 801386e:	f04f 0600 	mov.w	r6, #0
 8013872:	46a9      	mov	r9, r5
 8013874:	46b2      	mov	sl, r6
 8013876:	eb19 0309 	adds.w	r3, r9, r9
 801387a:	eb4a 040a 	adc.w	r4, sl, sl
 801387e:	4699      	mov	r9, r3
 8013880:	46a2      	mov	sl, r4
 8013882:	eb19 0905 	adds.w	r9, r9, r5
 8013886:	eb4a 0a06 	adc.w	sl, sl, r6
 801388a:	f04f 0100 	mov.w	r1, #0
 801388e:	f04f 0200 	mov.w	r2, #0
 8013892:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013896:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801389a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801389e:	4689      	mov	r9, r1
 80138a0:	4692      	mov	sl, r2
 80138a2:	eb19 0005 	adds.w	r0, r9, r5
 80138a6:	eb4a 0106 	adc.w	r1, sl, r6
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	461d      	mov	r5, r3
 80138b0:	f04f 0600 	mov.w	r6, #0
 80138b4:	196b      	adds	r3, r5, r5
 80138b6:	eb46 0406 	adc.w	r4, r6, r6
 80138ba:	461a      	mov	r2, r3
 80138bc:	4623      	mov	r3, r4
 80138be:	f7f5 f91b 	bl	8008af8 <__aeabi_uldivmod>
 80138c2:	4603      	mov	r3, r0
 80138c4:	460c      	mov	r4, r1
 80138c6:	461a      	mov	r2, r3
 80138c8:	4b2c      	ldr	r3, [pc, #176]	; (801397c <UART_SetConfig+0x384>)
 80138ca:	fba3 1302 	umull	r1, r3, r3, r2
 80138ce:	095b      	lsrs	r3, r3, #5
 80138d0:	2164      	movs	r1, #100	; 0x64
 80138d2:	fb01 f303 	mul.w	r3, r1, r3
 80138d6:	1ad3      	subs	r3, r2, r3
 80138d8:	00db      	lsls	r3, r3, #3
 80138da:	3332      	adds	r3, #50	; 0x32
 80138dc:	4a27      	ldr	r2, [pc, #156]	; (801397c <UART_SetConfig+0x384>)
 80138de:	fba2 2303 	umull	r2, r3, r2, r3
 80138e2:	095b      	lsrs	r3, r3, #5
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80138ea:	4498      	add	r8, r3
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	461d      	mov	r5, r3
 80138f0:	f04f 0600 	mov.w	r6, #0
 80138f4:	46a9      	mov	r9, r5
 80138f6:	46b2      	mov	sl, r6
 80138f8:	eb19 0309 	adds.w	r3, r9, r9
 80138fc:	eb4a 040a 	adc.w	r4, sl, sl
 8013900:	4699      	mov	r9, r3
 8013902:	46a2      	mov	sl, r4
 8013904:	eb19 0905 	adds.w	r9, r9, r5
 8013908:	eb4a 0a06 	adc.w	sl, sl, r6
 801390c:	f04f 0100 	mov.w	r1, #0
 8013910:	f04f 0200 	mov.w	r2, #0
 8013914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801391c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013920:	4689      	mov	r9, r1
 8013922:	4692      	mov	sl, r2
 8013924:	eb19 0005 	adds.w	r0, r9, r5
 8013928:	eb4a 0106 	adc.w	r1, sl, r6
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	461d      	mov	r5, r3
 8013932:	f04f 0600 	mov.w	r6, #0
 8013936:	196b      	adds	r3, r5, r5
 8013938:	eb46 0406 	adc.w	r4, r6, r6
 801393c:	461a      	mov	r2, r3
 801393e:	4623      	mov	r3, r4
 8013940:	f7f5 f8da 	bl	8008af8 <__aeabi_uldivmod>
 8013944:	4603      	mov	r3, r0
 8013946:	460c      	mov	r4, r1
 8013948:	461a      	mov	r2, r3
 801394a:	4b0c      	ldr	r3, [pc, #48]	; (801397c <UART_SetConfig+0x384>)
 801394c:	fba3 1302 	umull	r1, r3, r3, r2
 8013950:	095b      	lsrs	r3, r3, #5
 8013952:	2164      	movs	r1, #100	; 0x64
 8013954:	fb01 f303 	mul.w	r3, r1, r3
 8013958:	1ad3      	subs	r3, r2, r3
 801395a:	00db      	lsls	r3, r3, #3
 801395c:	3332      	adds	r3, #50	; 0x32
 801395e:	4a07      	ldr	r2, [pc, #28]	; (801397c <UART_SetConfig+0x384>)
 8013960:	fba2 2303 	umull	r2, r3, r2, r3
 8013964:	095b      	lsrs	r3, r3, #5
 8013966:	f003 0207 	and.w	r2, r3, #7
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	4442      	add	r2, r8
 8013970:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8013972:	e1b2      	b.n	8013cda <UART_SetConfig+0x6e2>
 8013974:	40011000 	.word	0x40011000
 8013978:	40011400 	.word	0x40011400
 801397c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	4ad7      	ldr	r2, [pc, #860]	; (8013ce4 <UART_SetConfig+0x6ec>)
 8013986:	4293      	cmp	r3, r2
 8013988:	d005      	beq.n	8013996 <UART_SetConfig+0x39e>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	4ad6      	ldr	r2, [pc, #856]	; (8013ce8 <UART_SetConfig+0x6f0>)
 8013990:	4293      	cmp	r3, r2
 8013992:	f040 80d1 	bne.w	8013b38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8013996:	f7fd fa37 	bl	8010e08 <HAL_RCC_GetPCLK2Freq>
 801399a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	469a      	mov	sl, r3
 80139a0:	f04f 0b00 	mov.w	fp, #0
 80139a4:	46d0      	mov	r8, sl
 80139a6:	46d9      	mov	r9, fp
 80139a8:	eb18 0308 	adds.w	r3, r8, r8
 80139ac:	eb49 0409 	adc.w	r4, r9, r9
 80139b0:	4698      	mov	r8, r3
 80139b2:	46a1      	mov	r9, r4
 80139b4:	eb18 080a 	adds.w	r8, r8, sl
 80139b8:	eb49 090b 	adc.w	r9, r9, fp
 80139bc:	f04f 0100 	mov.w	r1, #0
 80139c0:	f04f 0200 	mov.w	r2, #0
 80139c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80139c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80139cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80139d0:	4688      	mov	r8, r1
 80139d2:	4691      	mov	r9, r2
 80139d4:	eb1a 0508 	adds.w	r5, sl, r8
 80139d8:	eb4b 0609 	adc.w	r6, fp, r9
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	685b      	ldr	r3, [r3, #4]
 80139e0:	4619      	mov	r1, r3
 80139e2:	f04f 0200 	mov.w	r2, #0
 80139e6:	f04f 0300 	mov.w	r3, #0
 80139ea:	f04f 0400 	mov.w	r4, #0
 80139ee:	0094      	lsls	r4, r2, #2
 80139f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80139f4:	008b      	lsls	r3, r1, #2
 80139f6:	461a      	mov	r2, r3
 80139f8:	4623      	mov	r3, r4
 80139fa:	4628      	mov	r0, r5
 80139fc:	4631      	mov	r1, r6
 80139fe:	f7f5 f87b 	bl	8008af8 <__aeabi_uldivmod>
 8013a02:	4603      	mov	r3, r0
 8013a04:	460c      	mov	r4, r1
 8013a06:	461a      	mov	r2, r3
 8013a08:	4bb8      	ldr	r3, [pc, #736]	; (8013cec <UART_SetConfig+0x6f4>)
 8013a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8013a0e:	095b      	lsrs	r3, r3, #5
 8013a10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	469b      	mov	fp, r3
 8013a18:	f04f 0c00 	mov.w	ip, #0
 8013a1c:	46d9      	mov	r9, fp
 8013a1e:	46e2      	mov	sl, ip
 8013a20:	eb19 0309 	adds.w	r3, r9, r9
 8013a24:	eb4a 040a 	adc.w	r4, sl, sl
 8013a28:	4699      	mov	r9, r3
 8013a2a:	46a2      	mov	sl, r4
 8013a2c:	eb19 090b 	adds.w	r9, r9, fp
 8013a30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013a34:	f04f 0100 	mov.w	r1, #0
 8013a38:	f04f 0200 	mov.w	r2, #0
 8013a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013a40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013a44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013a48:	4689      	mov	r9, r1
 8013a4a:	4692      	mov	sl, r2
 8013a4c:	eb1b 0509 	adds.w	r5, fp, r9
 8013a50:	eb4c 060a 	adc.w	r6, ip, sl
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	4619      	mov	r1, r3
 8013a5a:	f04f 0200 	mov.w	r2, #0
 8013a5e:	f04f 0300 	mov.w	r3, #0
 8013a62:	f04f 0400 	mov.w	r4, #0
 8013a66:	0094      	lsls	r4, r2, #2
 8013a68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013a6c:	008b      	lsls	r3, r1, #2
 8013a6e:	461a      	mov	r2, r3
 8013a70:	4623      	mov	r3, r4
 8013a72:	4628      	mov	r0, r5
 8013a74:	4631      	mov	r1, r6
 8013a76:	f7f5 f83f 	bl	8008af8 <__aeabi_uldivmod>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	460c      	mov	r4, r1
 8013a7e:	461a      	mov	r2, r3
 8013a80:	4b9a      	ldr	r3, [pc, #616]	; (8013cec <UART_SetConfig+0x6f4>)
 8013a82:	fba3 1302 	umull	r1, r3, r3, r2
 8013a86:	095b      	lsrs	r3, r3, #5
 8013a88:	2164      	movs	r1, #100	; 0x64
 8013a8a:	fb01 f303 	mul.w	r3, r1, r3
 8013a8e:	1ad3      	subs	r3, r2, r3
 8013a90:	011b      	lsls	r3, r3, #4
 8013a92:	3332      	adds	r3, #50	; 0x32
 8013a94:	4a95      	ldr	r2, [pc, #596]	; (8013cec <UART_SetConfig+0x6f4>)
 8013a96:	fba2 2303 	umull	r2, r3, r2, r3
 8013a9a:	095b      	lsrs	r3, r3, #5
 8013a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013aa0:	4498      	add	r8, r3
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	469b      	mov	fp, r3
 8013aa6:	f04f 0c00 	mov.w	ip, #0
 8013aaa:	46d9      	mov	r9, fp
 8013aac:	46e2      	mov	sl, ip
 8013aae:	eb19 0309 	adds.w	r3, r9, r9
 8013ab2:	eb4a 040a 	adc.w	r4, sl, sl
 8013ab6:	4699      	mov	r9, r3
 8013ab8:	46a2      	mov	sl, r4
 8013aba:	eb19 090b 	adds.w	r9, r9, fp
 8013abe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013ac2:	f04f 0100 	mov.w	r1, #0
 8013ac6:	f04f 0200 	mov.w	r2, #0
 8013aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013ace:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013ad2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013ad6:	4689      	mov	r9, r1
 8013ad8:	4692      	mov	sl, r2
 8013ada:	eb1b 0509 	adds.w	r5, fp, r9
 8013ade:	eb4c 060a 	adc.w	r6, ip, sl
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	f04f 0200 	mov.w	r2, #0
 8013aec:	f04f 0300 	mov.w	r3, #0
 8013af0:	f04f 0400 	mov.w	r4, #0
 8013af4:	0094      	lsls	r4, r2, #2
 8013af6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013afa:	008b      	lsls	r3, r1, #2
 8013afc:	461a      	mov	r2, r3
 8013afe:	4623      	mov	r3, r4
 8013b00:	4628      	mov	r0, r5
 8013b02:	4631      	mov	r1, r6
 8013b04:	f7f4 fff8 	bl	8008af8 <__aeabi_uldivmod>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	460c      	mov	r4, r1
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	4b77      	ldr	r3, [pc, #476]	; (8013cec <UART_SetConfig+0x6f4>)
 8013b10:	fba3 1302 	umull	r1, r3, r3, r2
 8013b14:	095b      	lsrs	r3, r3, #5
 8013b16:	2164      	movs	r1, #100	; 0x64
 8013b18:	fb01 f303 	mul.w	r3, r1, r3
 8013b1c:	1ad3      	subs	r3, r2, r3
 8013b1e:	011b      	lsls	r3, r3, #4
 8013b20:	3332      	adds	r3, #50	; 0x32
 8013b22:	4a72      	ldr	r2, [pc, #456]	; (8013cec <UART_SetConfig+0x6f4>)
 8013b24:	fba2 2303 	umull	r2, r3, r2, r3
 8013b28:	095b      	lsrs	r3, r3, #5
 8013b2a:	f003 020f 	and.w	r2, r3, #15
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	4442      	add	r2, r8
 8013b34:	609a      	str	r2, [r3, #8]
 8013b36:	e0d0      	b.n	8013cda <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8013b38:	f7fd f952 	bl	8010de0 <HAL_RCC_GetPCLK1Freq>
 8013b3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	469a      	mov	sl, r3
 8013b42:	f04f 0b00 	mov.w	fp, #0
 8013b46:	46d0      	mov	r8, sl
 8013b48:	46d9      	mov	r9, fp
 8013b4a:	eb18 0308 	adds.w	r3, r8, r8
 8013b4e:	eb49 0409 	adc.w	r4, r9, r9
 8013b52:	4698      	mov	r8, r3
 8013b54:	46a1      	mov	r9, r4
 8013b56:	eb18 080a 	adds.w	r8, r8, sl
 8013b5a:	eb49 090b 	adc.w	r9, r9, fp
 8013b5e:	f04f 0100 	mov.w	r1, #0
 8013b62:	f04f 0200 	mov.w	r2, #0
 8013b66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013b6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013b6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013b72:	4688      	mov	r8, r1
 8013b74:	4691      	mov	r9, r2
 8013b76:	eb1a 0508 	adds.w	r5, sl, r8
 8013b7a:	eb4b 0609 	adc.w	r6, fp, r9
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	4619      	mov	r1, r3
 8013b84:	f04f 0200 	mov.w	r2, #0
 8013b88:	f04f 0300 	mov.w	r3, #0
 8013b8c:	f04f 0400 	mov.w	r4, #0
 8013b90:	0094      	lsls	r4, r2, #2
 8013b92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013b96:	008b      	lsls	r3, r1, #2
 8013b98:	461a      	mov	r2, r3
 8013b9a:	4623      	mov	r3, r4
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	4631      	mov	r1, r6
 8013ba0:	f7f4 ffaa 	bl	8008af8 <__aeabi_uldivmod>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	460c      	mov	r4, r1
 8013ba8:	461a      	mov	r2, r3
 8013baa:	4b50      	ldr	r3, [pc, #320]	; (8013cec <UART_SetConfig+0x6f4>)
 8013bac:	fba3 2302 	umull	r2, r3, r3, r2
 8013bb0:	095b      	lsrs	r3, r3, #5
 8013bb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013bb6:	68bb      	ldr	r3, [r7, #8]
 8013bb8:	469b      	mov	fp, r3
 8013bba:	f04f 0c00 	mov.w	ip, #0
 8013bbe:	46d9      	mov	r9, fp
 8013bc0:	46e2      	mov	sl, ip
 8013bc2:	eb19 0309 	adds.w	r3, r9, r9
 8013bc6:	eb4a 040a 	adc.w	r4, sl, sl
 8013bca:	4699      	mov	r9, r3
 8013bcc:	46a2      	mov	sl, r4
 8013bce:	eb19 090b 	adds.w	r9, r9, fp
 8013bd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013bd6:	f04f 0100 	mov.w	r1, #0
 8013bda:	f04f 0200 	mov.w	r2, #0
 8013bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013be2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013be6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013bea:	4689      	mov	r9, r1
 8013bec:	4692      	mov	sl, r2
 8013bee:	eb1b 0509 	adds.w	r5, fp, r9
 8013bf2:	eb4c 060a 	adc.w	r6, ip, sl
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	f04f 0200 	mov.w	r2, #0
 8013c00:	f04f 0300 	mov.w	r3, #0
 8013c04:	f04f 0400 	mov.w	r4, #0
 8013c08:	0094      	lsls	r4, r2, #2
 8013c0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013c0e:	008b      	lsls	r3, r1, #2
 8013c10:	461a      	mov	r2, r3
 8013c12:	4623      	mov	r3, r4
 8013c14:	4628      	mov	r0, r5
 8013c16:	4631      	mov	r1, r6
 8013c18:	f7f4 ff6e 	bl	8008af8 <__aeabi_uldivmod>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	460c      	mov	r4, r1
 8013c20:	461a      	mov	r2, r3
 8013c22:	4b32      	ldr	r3, [pc, #200]	; (8013cec <UART_SetConfig+0x6f4>)
 8013c24:	fba3 1302 	umull	r1, r3, r3, r2
 8013c28:	095b      	lsrs	r3, r3, #5
 8013c2a:	2164      	movs	r1, #100	; 0x64
 8013c2c:	fb01 f303 	mul.w	r3, r1, r3
 8013c30:	1ad3      	subs	r3, r2, r3
 8013c32:	011b      	lsls	r3, r3, #4
 8013c34:	3332      	adds	r3, #50	; 0x32
 8013c36:	4a2d      	ldr	r2, [pc, #180]	; (8013cec <UART_SetConfig+0x6f4>)
 8013c38:	fba2 2303 	umull	r2, r3, r2, r3
 8013c3c:	095b      	lsrs	r3, r3, #5
 8013c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c42:	4498      	add	r8, r3
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	469b      	mov	fp, r3
 8013c48:	f04f 0c00 	mov.w	ip, #0
 8013c4c:	46d9      	mov	r9, fp
 8013c4e:	46e2      	mov	sl, ip
 8013c50:	eb19 0309 	adds.w	r3, r9, r9
 8013c54:	eb4a 040a 	adc.w	r4, sl, sl
 8013c58:	4699      	mov	r9, r3
 8013c5a:	46a2      	mov	sl, r4
 8013c5c:	eb19 090b 	adds.w	r9, r9, fp
 8013c60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013c64:	f04f 0100 	mov.w	r1, #0
 8013c68:	f04f 0200 	mov.w	r2, #0
 8013c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013c78:	4689      	mov	r9, r1
 8013c7a:	4692      	mov	sl, r2
 8013c7c:	eb1b 0509 	adds.w	r5, fp, r9
 8013c80:	eb4c 060a 	adc.w	r6, ip, sl
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	4619      	mov	r1, r3
 8013c8a:	f04f 0200 	mov.w	r2, #0
 8013c8e:	f04f 0300 	mov.w	r3, #0
 8013c92:	f04f 0400 	mov.w	r4, #0
 8013c96:	0094      	lsls	r4, r2, #2
 8013c98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013c9c:	008b      	lsls	r3, r1, #2
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	4623      	mov	r3, r4
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	4631      	mov	r1, r6
 8013ca6:	f7f4 ff27 	bl	8008af8 <__aeabi_uldivmod>
 8013caa:	4603      	mov	r3, r0
 8013cac:	460c      	mov	r4, r1
 8013cae:	461a      	mov	r2, r3
 8013cb0:	4b0e      	ldr	r3, [pc, #56]	; (8013cec <UART_SetConfig+0x6f4>)
 8013cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8013cb6:	095b      	lsrs	r3, r3, #5
 8013cb8:	2164      	movs	r1, #100	; 0x64
 8013cba:	fb01 f303 	mul.w	r3, r1, r3
 8013cbe:	1ad3      	subs	r3, r2, r3
 8013cc0:	011b      	lsls	r3, r3, #4
 8013cc2:	3332      	adds	r3, #50	; 0x32
 8013cc4:	4a09      	ldr	r2, [pc, #36]	; (8013cec <UART_SetConfig+0x6f4>)
 8013cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8013cca:	095b      	lsrs	r3, r3, #5
 8013ccc:	f003 020f 	and.w	r2, r3, #15
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	4442      	add	r2, r8
 8013cd6:	609a      	str	r2, [r3, #8]
}
 8013cd8:	e7ff      	b.n	8013cda <UART_SetConfig+0x6e2>
 8013cda:	bf00      	nop
 8013cdc:	3714      	adds	r7, #20
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce4:	40011000 	.word	0x40011000
 8013ce8:	40011400 	.word	0x40011400
 8013cec:	51eb851f 	.word	0x51eb851f

08013cf0 <round>:
 8013cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cf2:	ec57 6b10 	vmov	r6, r7, d0
 8013cf6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8013cfa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8013cfe:	2c13      	cmp	r4, #19
 8013d00:	463b      	mov	r3, r7
 8013d02:	463d      	mov	r5, r7
 8013d04:	dc17      	bgt.n	8013d36 <round+0x46>
 8013d06:	2c00      	cmp	r4, #0
 8013d08:	da09      	bge.n	8013d1e <round+0x2e>
 8013d0a:	3401      	adds	r4, #1
 8013d0c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8013d10:	d103      	bne.n	8013d1a <round+0x2a>
 8013d12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013d16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	e02c      	b.n	8013d78 <round+0x88>
 8013d1e:	4a18      	ldr	r2, [pc, #96]	; (8013d80 <round+0x90>)
 8013d20:	4122      	asrs	r2, r4
 8013d22:	4217      	tst	r7, r2
 8013d24:	d100      	bne.n	8013d28 <round+0x38>
 8013d26:	b19e      	cbz	r6, 8013d50 <round+0x60>
 8013d28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013d2c:	4123      	asrs	r3, r4
 8013d2e:	442b      	add	r3, r5
 8013d30:	ea23 0302 	bic.w	r3, r3, r2
 8013d34:	e7f1      	b.n	8013d1a <round+0x2a>
 8013d36:	2c33      	cmp	r4, #51	; 0x33
 8013d38:	dd0d      	ble.n	8013d56 <round+0x66>
 8013d3a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8013d3e:	d107      	bne.n	8013d50 <round+0x60>
 8013d40:	4630      	mov	r0, r6
 8013d42:	4639      	mov	r1, r7
 8013d44:	ee10 2a10 	vmov	r2, s0
 8013d48:	f7f4 f9d8 	bl	80080fc <__adddf3>
 8013d4c:	4606      	mov	r6, r0
 8013d4e:	460f      	mov	r7, r1
 8013d50:	ec47 6b10 	vmov	d0, r6, r7
 8013d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d56:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8013d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d5e:	40d0      	lsrs	r0, r2
 8013d60:	4206      	tst	r6, r0
 8013d62:	d0f5      	beq.n	8013d50 <round+0x60>
 8013d64:	2201      	movs	r2, #1
 8013d66:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8013d6a:	fa02 f404 	lsl.w	r4, r2, r4
 8013d6e:	1931      	adds	r1, r6, r4
 8013d70:	bf28      	it	cs
 8013d72:	189b      	addcs	r3, r3, r2
 8013d74:	ea21 0100 	bic.w	r1, r1, r0
 8013d78:	461f      	mov	r7, r3
 8013d7a:	460e      	mov	r6, r1
 8013d7c:	e7e8      	b.n	8013d50 <round+0x60>
 8013d7e:	bf00      	nop
 8013d80:	000fffff 	.word	0x000fffff

08013d84 <__errno>:
 8013d84:	4b01      	ldr	r3, [pc, #4]	; (8013d8c <__errno+0x8>)
 8013d86:	6818      	ldr	r0, [r3, #0]
 8013d88:	4770      	bx	lr
 8013d8a:	bf00      	nop
 8013d8c:	20000024 	.word	0x20000024

08013d90 <__libc_init_array>:
 8013d90:	b570      	push	{r4, r5, r6, lr}
 8013d92:	4e0d      	ldr	r6, [pc, #52]	; (8013dc8 <__libc_init_array+0x38>)
 8013d94:	4c0d      	ldr	r4, [pc, #52]	; (8013dcc <__libc_init_array+0x3c>)
 8013d96:	1ba4      	subs	r4, r4, r6
 8013d98:	10a4      	asrs	r4, r4, #2
 8013d9a:	2500      	movs	r5, #0
 8013d9c:	42a5      	cmp	r5, r4
 8013d9e:	d109      	bne.n	8013db4 <__libc_init_array+0x24>
 8013da0:	4e0b      	ldr	r6, [pc, #44]	; (8013dd0 <__libc_init_array+0x40>)
 8013da2:	4c0c      	ldr	r4, [pc, #48]	; (8013dd4 <__libc_init_array+0x44>)
 8013da4:	f005 f83c 	bl	8018e20 <_init>
 8013da8:	1ba4      	subs	r4, r4, r6
 8013daa:	10a4      	asrs	r4, r4, #2
 8013dac:	2500      	movs	r5, #0
 8013dae:	42a5      	cmp	r5, r4
 8013db0:	d105      	bne.n	8013dbe <__libc_init_array+0x2e>
 8013db2:	bd70      	pop	{r4, r5, r6, pc}
 8013db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013db8:	4798      	blx	r3
 8013dba:	3501      	adds	r5, #1
 8013dbc:	e7ee      	b.n	8013d9c <__libc_init_array+0xc>
 8013dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013dc2:	4798      	blx	r3
 8013dc4:	3501      	adds	r5, #1
 8013dc6:	e7f2      	b.n	8013dae <__libc_init_array+0x1e>
 8013dc8:	080194ec 	.word	0x080194ec
 8013dcc:	080194ec 	.word	0x080194ec
 8013dd0:	080194ec 	.word	0x080194ec
 8013dd4:	080194f0 	.word	0x080194f0

08013dd8 <memcpy>:
 8013dd8:	b510      	push	{r4, lr}
 8013dda:	1e43      	subs	r3, r0, #1
 8013ddc:	440a      	add	r2, r1
 8013dde:	4291      	cmp	r1, r2
 8013de0:	d100      	bne.n	8013de4 <memcpy+0xc>
 8013de2:	bd10      	pop	{r4, pc}
 8013de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013dec:	e7f7      	b.n	8013dde <memcpy+0x6>

08013dee <memset>:
 8013dee:	4402      	add	r2, r0
 8013df0:	4603      	mov	r3, r0
 8013df2:	4293      	cmp	r3, r2
 8013df4:	d100      	bne.n	8013df8 <memset+0xa>
 8013df6:	4770      	bx	lr
 8013df8:	f803 1b01 	strb.w	r1, [r3], #1
 8013dfc:	e7f9      	b.n	8013df2 <memset+0x4>

08013dfe <__cvt>:
 8013dfe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e02:	ec55 4b10 	vmov	r4, r5, d0
 8013e06:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013e08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013e0c:	2d00      	cmp	r5, #0
 8013e0e:	460e      	mov	r6, r1
 8013e10:	4691      	mov	r9, r2
 8013e12:	4619      	mov	r1, r3
 8013e14:	bfb8      	it	lt
 8013e16:	4622      	movlt	r2, r4
 8013e18:	462b      	mov	r3, r5
 8013e1a:	f027 0720 	bic.w	r7, r7, #32
 8013e1e:	bfbb      	ittet	lt
 8013e20:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013e24:	461d      	movlt	r5, r3
 8013e26:	2300      	movge	r3, #0
 8013e28:	232d      	movlt	r3, #45	; 0x2d
 8013e2a:	bfb8      	it	lt
 8013e2c:	4614      	movlt	r4, r2
 8013e2e:	2f46      	cmp	r7, #70	; 0x46
 8013e30:	700b      	strb	r3, [r1, #0]
 8013e32:	d004      	beq.n	8013e3e <__cvt+0x40>
 8013e34:	2f45      	cmp	r7, #69	; 0x45
 8013e36:	d100      	bne.n	8013e3a <__cvt+0x3c>
 8013e38:	3601      	adds	r6, #1
 8013e3a:	2102      	movs	r1, #2
 8013e3c:	e000      	b.n	8013e40 <__cvt+0x42>
 8013e3e:	2103      	movs	r1, #3
 8013e40:	ab03      	add	r3, sp, #12
 8013e42:	9301      	str	r3, [sp, #4]
 8013e44:	ab02      	add	r3, sp, #8
 8013e46:	9300      	str	r3, [sp, #0]
 8013e48:	4632      	mov	r2, r6
 8013e4a:	4653      	mov	r3, sl
 8013e4c:	ec45 4b10 	vmov	d0, r4, r5
 8013e50:	f001 ff82 	bl	8015d58 <_dtoa_r>
 8013e54:	2f47      	cmp	r7, #71	; 0x47
 8013e56:	4680      	mov	r8, r0
 8013e58:	d102      	bne.n	8013e60 <__cvt+0x62>
 8013e5a:	f019 0f01 	tst.w	r9, #1
 8013e5e:	d026      	beq.n	8013eae <__cvt+0xb0>
 8013e60:	2f46      	cmp	r7, #70	; 0x46
 8013e62:	eb08 0906 	add.w	r9, r8, r6
 8013e66:	d111      	bne.n	8013e8c <__cvt+0x8e>
 8013e68:	f898 3000 	ldrb.w	r3, [r8]
 8013e6c:	2b30      	cmp	r3, #48	; 0x30
 8013e6e:	d10a      	bne.n	8013e86 <__cvt+0x88>
 8013e70:	2200      	movs	r2, #0
 8013e72:	2300      	movs	r3, #0
 8013e74:	4620      	mov	r0, r4
 8013e76:	4629      	mov	r1, r5
 8013e78:	f7f4 fd5e 	bl	8008938 <__aeabi_dcmpeq>
 8013e7c:	b918      	cbnz	r0, 8013e86 <__cvt+0x88>
 8013e7e:	f1c6 0601 	rsb	r6, r6, #1
 8013e82:	f8ca 6000 	str.w	r6, [sl]
 8013e86:	f8da 3000 	ldr.w	r3, [sl]
 8013e8a:	4499      	add	r9, r3
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2300      	movs	r3, #0
 8013e90:	4620      	mov	r0, r4
 8013e92:	4629      	mov	r1, r5
 8013e94:	f7f4 fd50 	bl	8008938 <__aeabi_dcmpeq>
 8013e98:	b938      	cbnz	r0, 8013eaa <__cvt+0xac>
 8013e9a:	2230      	movs	r2, #48	; 0x30
 8013e9c:	9b03      	ldr	r3, [sp, #12]
 8013e9e:	454b      	cmp	r3, r9
 8013ea0:	d205      	bcs.n	8013eae <__cvt+0xb0>
 8013ea2:	1c59      	adds	r1, r3, #1
 8013ea4:	9103      	str	r1, [sp, #12]
 8013ea6:	701a      	strb	r2, [r3, #0]
 8013ea8:	e7f8      	b.n	8013e9c <__cvt+0x9e>
 8013eaa:	f8cd 900c 	str.w	r9, [sp, #12]
 8013eae:	9b03      	ldr	r3, [sp, #12]
 8013eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013eb2:	eba3 0308 	sub.w	r3, r3, r8
 8013eb6:	4640      	mov	r0, r8
 8013eb8:	6013      	str	r3, [r2, #0]
 8013eba:	b004      	add	sp, #16
 8013ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ec0 <__exponent>:
 8013ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ec2:	2900      	cmp	r1, #0
 8013ec4:	4604      	mov	r4, r0
 8013ec6:	bfba      	itte	lt
 8013ec8:	4249      	neglt	r1, r1
 8013eca:	232d      	movlt	r3, #45	; 0x2d
 8013ecc:	232b      	movge	r3, #43	; 0x2b
 8013ece:	2909      	cmp	r1, #9
 8013ed0:	f804 2b02 	strb.w	r2, [r4], #2
 8013ed4:	7043      	strb	r3, [r0, #1]
 8013ed6:	dd20      	ble.n	8013f1a <__exponent+0x5a>
 8013ed8:	f10d 0307 	add.w	r3, sp, #7
 8013edc:	461f      	mov	r7, r3
 8013ede:	260a      	movs	r6, #10
 8013ee0:	fb91 f5f6 	sdiv	r5, r1, r6
 8013ee4:	fb06 1115 	mls	r1, r6, r5, r1
 8013ee8:	3130      	adds	r1, #48	; 0x30
 8013eea:	2d09      	cmp	r5, #9
 8013eec:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013ef0:	f103 32ff 	add.w	r2, r3, #4294967295
 8013ef4:	4629      	mov	r1, r5
 8013ef6:	dc09      	bgt.n	8013f0c <__exponent+0x4c>
 8013ef8:	3130      	adds	r1, #48	; 0x30
 8013efa:	3b02      	subs	r3, #2
 8013efc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013f00:	42bb      	cmp	r3, r7
 8013f02:	4622      	mov	r2, r4
 8013f04:	d304      	bcc.n	8013f10 <__exponent+0x50>
 8013f06:	1a10      	subs	r0, r2, r0
 8013f08:	b003      	add	sp, #12
 8013f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f0c:	4613      	mov	r3, r2
 8013f0e:	e7e7      	b.n	8013ee0 <__exponent+0x20>
 8013f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f14:	f804 2b01 	strb.w	r2, [r4], #1
 8013f18:	e7f2      	b.n	8013f00 <__exponent+0x40>
 8013f1a:	2330      	movs	r3, #48	; 0x30
 8013f1c:	4419      	add	r1, r3
 8013f1e:	7083      	strb	r3, [r0, #2]
 8013f20:	1d02      	adds	r2, r0, #4
 8013f22:	70c1      	strb	r1, [r0, #3]
 8013f24:	e7ef      	b.n	8013f06 <__exponent+0x46>
	...

08013f28 <_printf_float>:
 8013f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f2c:	b08d      	sub	sp, #52	; 0x34
 8013f2e:	460c      	mov	r4, r1
 8013f30:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013f34:	4616      	mov	r6, r2
 8013f36:	461f      	mov	r7, r3
 8013f38:	4605      	mov	r5, r0
 8013f3a:	f003 f9a7 	bl	801728c <_localeconv_r>
 8013f3e:	6803      	ldr	r3, [r0, #0]
 8013f40:	9304      	str	r3, [sp, #16]
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7f4 f87c 	bl	8008040 <strlen>
 8013f48:	2300      	movs	r3, #0
 8013f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8013f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8013f50:	9005      	str	r0, [sp, #20]
 8013f52:	3307      	adds	r3, #7
 8013f54:	f023 0307 	bic.w	r3, r3, #7
 8013f58:	f103 0208 	add.w	r2, r3, #8
 8013f5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013f60:	f8d4 b000 	ldr.w	fp, [r4]
 8013f64:	f8c8 2000 	str.w	r2, [r8]
 8013f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013f70:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013f74:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013f78:	9307      	str	r3, [sp, #28]
 8013f7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8013f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f82:	4ba7      	ldr	r3, [pc, #668]	; (8014220 <_printf_float+0x2f8>)
 8013f84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f88:	f7f4 fd08 	bl	800899c <__aeabi_dcmpun>
 8013f8c:	bb70      	cbnz	r0, 8013fec <_printf_float+0xc4>
 8013f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f92:	4ba3      	ldr	r3, [pc, #652]	; (8014220 <_printf_float+0x2f8>)
 8013f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f98:	f7f4 fce2 	bl	8008960 <__aeabi_dcmple>
 8013f9c:	bb30      	cbnz	r0, 8013fec <_printf_float+0xc4>
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	4640      	mov	r0, r8
 8013fa4:	4649      	mov	r1, r9
 8013fa6:	f7f4 fcd1 	bl	800894c <__aeabi_dcmplt>
 8013faa:	b110      	cbz	r0, 8013fb2 <_printf_float+0x8a>
 8013fac:	232d      	movs	r3, #45	; 0x2d
 8013fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fb2:	4a9c      	ldr	r2, [pc, #624]	; (8014224 <_printf_float+0x2fc>)
 8013fb4:	4b9c      	ldr	r3, [pc, #624]	; (8014228 <_printf_float+0x300>)
 8013fb6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013fba:	bf8c      	ite	hi
 8013fbc:	4690      	movhi	r8, r2
 8013fbe:	4698      	movls	r8, r3
 8013fc0:	2303      	movs	r3, #3
 8013fc2:	f02b 0204 	bic.w	r2, fp, #4
 8013fc6:	6123      	str	r3, [r4, #16]
 8013fc8:	6022      	str	r2, [r4, #0]
 8013fca:	f04f 0900 	mov.w	r9, #0
 8013fce:	9700      	str	r7, [sp, #0]
 8013fd0:	4633      	mov	r3, r6
 8013fd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8013fd4:	4621      	mov	r1, r4
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	f000 f9e6 	bl	80143a8 <_printf_common>
 8013fdc:	3001      	adds	r0, #1
 8013fde:	f040 808d 	bne.w	80140fc <_printf_float+0x1d4>
 8013fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe6:	b00d      	add	sp, #52	; 0x34
 8013fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fec:	4642      	mov	r2, r8
 8013fee:	464b      	mov	r3, r9
 8013ff0:	4640      	mov	r0, r8
 8013ff2:	4649      	mov	r1, r9
 8013ff4:	f7f4 fcd2 	bl	800899c <__aeabi_dcmpun>
 8013ff8:	b110      	cbz	r0, 8014000 <_printf_float+0xd8>
 8013ffa:	4a8c      	ldr	r2, [pc, #560]	; (801422c <_printf_float+0x304>)
 8013ffc:	4b8c      	ldr	r3, [pc, #560]	; (8014230 <_printf_float+0x308>)
 8013ffe:	e7da      	b.n	8013fb6 <_printf_float+0x8e>
 8014000:	6861      	ldr	r1, [r4, #4]
 8014002:	1c4b      	adds	r3, r1, #1
 8014004:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014008:	a80a      	add	r0, sp, #40	; 0x28
 801400a:	d13e      	bne.n	801408a <_printf_float+0x162>
 801400c:	2306      	movs	r3, #6
 801400e:	6063      	str	r3, [r4, #4]
 8014010:	2300      	movs	r3, #0
 8014012:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014016:	ab09      	add	r3, sp, #36	; 0x24
 8014018:	9300      	str	r3, [sp, #0]
 801401a:	ec49 8b10 	vmov	d0, r8, r9
 801401e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014022:	6022      	str	r2, [r4, #0]
 8014024:	f8cd a004 	str.w	sl, [sp, #4]
 8014028:	6861      	ldr	r1, [r4, #4]
 801402a:	4628      	mov	r0, r5
 801402c:	f7ff fee7 	bl	8013dfe <__cvt>
 8014030:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014034:	2b47      	cmp	r3, #71	; 0x47
 8014036:	4680      	mov	r8, r0
 8014038:	d109      	bne.n	801404e <_printf_float+0x126>
 801403a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801403c:	1cd8      	adds	r0, r3, #3
 801403e:	db02      	blt.n	8014046 <_printf_float+0x11e>
 8014040:	6862      	ldr	r2, [r4, #4]
 8014042:	4293      	cmp	r3, r2
 8014044:	dd47      	ble.n	80140d6 <_printf_float+0x1ae>
 8014046:	f1aa 0a02 	sub.w	sl, sl, #2
 801404a:	fa5f fa8a 	uxtb.w	sl, sl
 801404e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014052:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014054:	d824      	bhi.n	80140a0 <_printf_float+0x178>
 8014056:	3901      	subs	r1, #1
 8014058:	4652      	mov	r2, sl
 801405a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801405e:	9109      	str	r1, [sp, #36]	; 0x24
 8014060:	f7ff ff2e 	bl	8013ec0 <__exponent>
 8014064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014066:	1813      	adds	r3, r2, r0
 8014068:	2a01      	cmp	r2, #1
 801406a:	4681      	mov	r9, r0
 801406c:	6123      	str	r3, [r4, #16]
 801406e:	dc02      	bgt.n	8014076 <_printf_float+0x14e>
 8014070:	6822      	ldr	r2, [r4, #0]
 8014072:	07d1      	lsls	r1, r2, #31
 8014074:	d501      	bpl.n	801407a <_printf_float+0x152>
 8014076:	3301      	adds	r3, #1
 8014078:	6123      	str	r3, [r4, #16]
 801407a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801407e:	2b00      	cmp	r3, #0
 8014080:	d0a5      	beq.n	8013fce <_printf_float+0xa6>
 8014082:	232d      	movs	r3, #45	; 0x2d
 8014084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014088:	e7a1      	b.n	8013fce <_printf_float+0xa6>
 801408a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801408e:	f000 8177 	beq.w	8014380 <_printf_float+0x458>
 8014092:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014096:	d1bb      	bne.n	8014010 <_printf_float+0xe8>
 8014098:	2900      	cmp	r1, #0
 801409a:	d1b9      	bne.n	8014010 <_printf_float+0xe8>
 801409c:	2301      	movs	r3, #1
 801409e:	e7b6      	b.n	801400e <_printf_float+0xe6>
 80140a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80140a4:	d119      	bne.n	80140da <_printf_float+0x1b2>
 80140a6:	2900      	cmp	r1, #0
 80140a8:	6863      	ldr	r3, [r4, #4]
 80140aa:	dd0c      	ble.n	80140c6 <_printf_float+0x19e>
 80140ac:	6121      	str	r1, [r4, #16]
 80140ae:	b913      	cbnz	r3, 80140b6 <_printf_float+0x18e>
 80140b0:	6822      	ldr	r2, [r4, #0]
 80140b2:	07d2      	lsls	r2, r2, #31
 80140b4:	d502      	bpl.n	80140bc <_printf_float+0x194>
 80140b6:	3301      	adds	r3, #1
 80140b8:	440b      	add	r3, r1
 80140ba:	6123      	str	r3, [r4, #16]
 80140bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140be:	65a3      	str	r3, [r4, #88]	; 0x58
 80140c0:	f04f 0900 	mov.w	r9, #0
 80140c4:	e7d9      	b.n	801407a <_printf_float+0x152>
 80140c6:	b913      	cbnz	r3, 80140ce <_printf_float+0x1a6>
 80140c8:	6822      	ldr	r2, [r4, #0]
 80140ca:	07d0      	lsls	r0, r2, #31
 80140cc:	d501      	bpl.n	80140d2 <_printf_float+0x1aa>
 80140ce:	3302      	adds	r3, #2
 80140d0:	e7f3      	b.n	80140ba <_printf_float+0x192>
 80140d2:	2301      	movs	r3, #1
 80140d4:	e7f1      	b.n	80140ba <_printf_float+0x192>
 80140d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80140da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80140de:	4293      	cmp	r3, r2
 80140e0:	db05      	blt.n	80140ee <_printf_float+0x1c6>
 80140e2:	6822      	ldr	r2, [r4, #0]
 80140e4:	6123      	str	r3, [r4, #16]
 80140e6:	07d1      	lsls	r1, r2, #31
 80140e8:	d5e8      	bpl.n	80140bc <_printf_float+0x194>
 80140ea:	3301      	adds	r3, #1
 80140ec:	e7e5      	b.n	80140ba <_printf_float+0x192>
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	bfd4      	ite	le
 80140f2:	f1c3 0302 	rsble	r3, r3, #2
 80140f6:	2301      	movgt	r3, #1
 80140f8:	4413      	add	r3, r2
 80140fa:	e7de      	b.n	80140ba <_printf_float+0x192>
 80140fc:	6823      	ldr	r3, [r4, #0]
 80140fe:	055a      	lsls	r2, r3, #21
 8014100:	d407      	bmi.n	8014112 <_printf_float+0x1ea>
 8014102:	6923      	ldr	r3, [r4, #16]
 8014104:	4642      	mov	r2, r8
 8014106:	4631      	mov	r1, r6
 8014108:	4628      	mov	r0, r5
 801410a:	47b8      	blx	r7
 801410c:	3001      	adds	r0, #1
 801410e:	d12b      	bne.n	8014168 <_printf_float+0x240>
 8014110:	e767      	b.n	8013fe2 <_printf_float+0xba>
 8014112:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014116:	f240 80dc 	bls.w	80142d2 <_printf_float+0x3aa>
 801411a:	2200      	movs	r2, #0
 801411c:	2300      	movs	r3, #0
 801411e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014122:	f7f4 fc09 	bl	8008938 <__aeabi_dcmpeq>
 8014126:	2800      	cmp	r0, #0
 8014128:	d033      	beq.n	8014192 <_printf_float+0x26a>
 801412a:	2301      	movs	r3, #1
 801412c:	4a41      	ldr	r2, [pc, #260]	; (8014234 <_printf_float+0x30c>)
 801412e:	4631      	mov	r1, r6
 8014130:	4628      	mov	r0, r5
 8014132:	47b8      	blx	r7
 8014134:	3001      	adds	r0, #1
 8014136:	f43f af54 	beq.w	8013fe2 <_printf_float+0xba>
 801413a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801413e:	429a      	cmp	r2, r3
 8014140:	db02      	blt.n	8014148 <_printf_float+0x220>
 8014142:	6823      	ldr	r3, [r4, #0]
 8014144:	07d8      	lsls	r0, r3, #31
 8014146:	d50f      	bpl.n	8014168 <_printf_float+0x240>
 8014148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801414c:	4631      	mov	r1, r6
 801414e:	4628      	mov	r0, r5
 8014150:	47b8      	blx	r7
 8014152:	3001      	adds	r0, #1
 8014154:	f43f af45 	beq.w	8013fe2 <_printf_float+0xba>
 8014158:	f04f 0800 	mov.w	r8, #0
 801415c:	f104 091a 	add.w	r9, r4, #26
 8014160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014162:	3b01      	subs	r3, #1
 8014164:	4543      	cmp	r3, r8
 8014166:	dc09      	bgt.n	801417c <_printf_float+0x254>
 8014168:	6823      	ldr	r3, [r4, #0]
 801416a:	079b      	lsls	r3, r3, #30
 801416c:	f100 8103 	bmi.w	8014376 <_printf_float+0x44e>
 8014170:	68e0      	ldr	r0, [r4, #12]
 8014172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014174:	4298      	cmp	r0, r3
 8014176:	bfb8      	it	lt
 8014178:	4618      	movlt	r0, r3
 801417a:	e734      	b.n	8013fe6 <_printf_float+0xbe>
 801417c:	2301      	movs	r3, #1
 801417e:	464a      	mov	r2, r9
 8014180:	4631      	mov	r1, r6
 8014182:	4628      	mov	r0, r5
 8014184:	47b8      	blx	r7
 8014186:	3001      	adds	r0, #1
 8014188:	f43f af2b 	beq.w	8013fe2 <_printf_float+0xba>
 801418c:	f108 0801 	add.w	r8, r8, #1
 8014190:	e7e6      	b.n	8014160 <_printf_float+0x238>
 8014192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014194:	2b00      	cmp	r3, #0
 8014196:	dc2b      	bgt.n	80141f0 <_printf_float+0x2c8>
 8014198:	2301      	movs	r3, #1
 801419a:	4a26      	ldr	r2, [pc, #152]	; (8014234 <_printf_float+0x30c>)
 801419c:	4631      	mov	r1, r6
 801419e:	4628      	mov	r0, r5
 80141a0:	47b8      	blx	r7
 80141a2:	3001      	adds	r0, #1
 80141a4:	f43f af1d 	beq.w	8013fe2 <_printf_float+0xba>
 80141a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141aa:	b923      	cbnz	r3, 80141b6 <_printf_float+0x28e>
 80141ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141ae:	b913      	cbnz	r3, 80141b6 <_printf_float+0x28e>
 80141b0:	6823      	ldr	r3, [r4, #0]
 80141b2:	07d9      	lsls	r1, r3, #31
 80141b4:	d5d8      	bpl.n	8014168 <_printf_float+0x240>
 80141b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141ba:	4631      	mov	r1, r6
 80141bc:	4628      	mov	r0, r5
 80141be:	47b8      	blx	r7
 80141c0:	3001      	adds	r0, #1
 80141c2:	f43f af0e 	beq.w	8013fe2 <_printf_float+0xba>
 80141c6:	f04f 0900 	mov.w	r9, #0
 80141ca:	f104 0a1a 	add.w	sl, r4, #26
 80141ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141d0:	425b      	negs	r3, r3
 80141d2:	454b      	cmp	r3, r9
 80141d4:	dc01      	bgt.n	80141da <_printf_float+0x2b2>
 80141d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141d8:	e794      	b.n	8014104 <_printf_float+0x1dc>
 80141da:	2301      	movs	r3, #1
 80141dc:	4652      	mov	r2, sl
 80141de:	4631      	mov	r1, r6
 80141e0:	4628      	mov	r0, r5
 80141e2:	47b8      	blx	r7
 80141e4:	3001      	adds	r0, #1
 80141e6:	f43f aefc 	beq.w	8013fe2 <_printf_float+0xba>
 80141ea:	f109 0901 	add.w	r9, r9, #1
 80141ee:	e7ee      	b.n	80141ce <_printf_float+0x2a6>
 80141f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80141f4:	429a      	cmp	r2, r3
 80141f6:	bfa8      	it	ge
 80141f8:	461a      	movge	r2, r3
 80141fa:	2a00      	cmp	r2, #0
 80141fc:	4691      	mov	r9, r2
 80141fe:	dd07      	ble.n	8014210 <_printf_float+0x2e8>
 8014200:	4613      	mov	r3, r2
 8014202:	4631      	mov	r1, r6
 8014204:	4642      	mov	r2, r8
 8014206:	4628      	mov	r0, r5
 8014208:	47b8      	blx	r7
 801420a:	3001      	adds	r0, #1
 801420c:	f43f aee9 	beq.w	8013fe2 <_printf_float+0xba>
 8014210:	f104 031a 	add.w	r3, r4, #26
 8014214:	f04f 0b00 	mov.w	fp, #0
 8014218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801421c:	9306      	str	r3, [sp, #24]
 801421e:	e015      	b.n	801424c <_printf_float+0x324>
 8014220:	7fefffff 	.word	0x7fefffff
 8014224:	080191b4 	.word	0x080191b4
 8014228:	080191b0 	.word	0x080191b0
 801422c:	080191bc 	.word	0x080191bc
 8014230:	080191b8 	.word	0x080191b8
 8014234:	080193db 	.word	0x080193db
 8014238:	2301      	movs	r3, #1
 801423a:	9a06      	ldr	r2, [sp, #24]
 801423c:	4631      	mov	r1, r6
 801423e:	4628      	mov	r0, r5
 8014240:	47b8      	blx	r7
 8014242:	3001      	adds	r0, #1
 8014244:	f43f aecd 	beq.w	8013fe2 <_printf_float+0xba>
 8014248:	f10b 0b01 	add.w	fp, fp, #1
 801424c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014250:	ebaa 0309 	sub.w	r3, sl, r9
 8014254:	455b      	cmp	r3, fp
 8014256:	dcef      	bgt.n	8014238 <_printf_float+0x310>
 8014258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801425c:	429a      	cmp	r2, r3
 801425e:	44d0      	add	r8, sl
 8014260:	db15      	blt.n	801428e <_printf_float+0x366>
 8014262:	6823      	ldr	r3, [r4, #0]
 8014264:	07da      	lsls	r2, r3, #31
 8014266:	d412      	bmi.n	801428e <_printf_float+0x366>
 8014268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801426a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801426c:	eba3 020a 	sub.w	r2, r3, sl
 8014270:	eba3 0a01 	sub.w	sl, r3, r1
 8014274:	4592      	cmp	sl, r2
 8014276:	bfa8      	it	ge
 8014278:	4692      	movge	sl, r2
 801427a:	f1ba 0f00 	cmp.w	sl, #0
 801427e:	dc0e      	bgt.n	801429e <_printf_float+0x376>
 8014280:	f04f 0800 	mov.w	r8, #0
 8014284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014288:	f104 091a 	add.w	r9, r4, #26
 801428c:	e019      	b.n	80142c2 <_printf_float+0x39a>
 801428e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014292:	4631      	mov	r1, r6
 8014294:	4628      	mov	r0, r5
 8014296:	47b8      	blx	r7
 8014298:	3001      	adds	r0, #1
 801429a:	d1e5      	bne.n	8014268 <_printf_float+0x340>
 801429c:	e6a1      	b.n	8013fe2 <_printf_float+0xba>
 801429e:	4653      	mov	r3, sl
 80142a0:	4642      	mov	r2, r8
 80142a2:	4631      	mov	r1, r6
 80142a4:	4628      	mov	r0, r5
 80142a6:	47b8      	blx	r7
 80142a8:	3001      	adds	r0, #1
 80142aa:	d1e9      	bne.n	8014280 <_printf_float+0x358>
 80142ac:	e699      	b.n	8013fe2 <_printf_float+0xba>
 80142ae:	2301      	movs	r3, #1
 80142b0:	464a      	mov	r2, r9
 80142b2:	4631      	mov	r1, r6
 80142b4:	4628      	mov	r0, r5
 80142b6:	47b8      	blx	r7
 80142b8:	3001      	adds	r0, #1
 80142ba:	f43f ae92 	beq.w	8013fe2 <_printf_float+0xba>
 80142be:	f108 0801 	add.w	r8, r8, #1
 80142c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142c6:	1a9b      	subs	r3, r3, r2
 80142c8:	eba3 030a 	sub.w	r3, r3, sl
 80142cc:	4543      	cmp	r3, r8
 80142ce:	dcee      	bgt.n	80142ae <_printf_float+0x386>
 80142d0:	e74a      	b.n	8014168 <_printf_float+0x240>
 80142d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142d4:	2a01      	cmp	r2, #1
 80142d6:	dc01      	bgt.n	80142dc <_printf_float+0x3b4>
 80142d8:	07db      	lsls	r3, r3, #31
 80142da:	d53a      	bpl.n	8014352 <_printf_float+0x42a>
 80142dc:	2301      	movs	r3, #1
 80142de:	4642      	mov	r2, r8
 80142e0:	4631      	mov	r1, r6
 80142e2:	4628      	mov	r0, r5
 80142e4:	47b8      	blx	r7
 80142e6:	3001      	adds	r0, #1
 80142e8:	f43f ae7b 	beq.w	8013fe2 <_printf_float+0xba>
 80142ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142f0:	4631      	mov	r1, r6
 80142f2:	4628      	mov	r0, r5
 80142f4:	47b8      	blx	r7
 80142f6:	3001      	adds	r0, #1
 80142f8:	f108 0801 	add.w	r8, r8, #1
 80142fc:	f43f ae71 	beq.w	8013fe2 <_printf_float+0xba>
 8014300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014302:	2200      	movs	r2, #0
 8014304:	f103 3aff 	add.w	sl, r3, #4294967295
 8014308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801430c:	2300      	movs	r3, #0
 801430e:	f7f4 fb13 	bl	8008938 <__aeabi_dcmpeq>
 8014312:	b9c8      	cbnz	r0, 8014348 <_printf_float+0x420>
 8014314:	4653      	mov	r3, sl
 8014316:	4642      	mov	r2, r8
 8014318:	4631      	mov	r1, r6
 801431a:	4628      	mov	r0, r5
 801431c:	47b8      	blx	r7
 801431e:	3001      	adds	r0, #1
 8014320:	d10e      	bne.n	8014340 <_printf_float+0x418>
 8014322:	e65e      	b.n	8013fe2 <_printf_float+0xba>
 8014324:	2301      	movs	r3, #1
 8014326:	4652      	mov	r2, sl
 8014328:	4631      	mov	r1, r6
 801432a:	4628      	mov	r0, r5
 801432c:	47b8      	blx	r7
 801432e:	3001      	adds	r0, #1
 8014330:	f43f ae57 	beq.w	8013fe2 <_printf_float+0xba>
 8014334:	f108 0801 	add.w	r8, r8, #1
 8014338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801433a:	3b01      	subs	r3, #1
 801433c:	4543      	cmp	r3, r8
 801433e:	dcf1      	bgt.n	8014324 <_printf_float+0x3fc>
 8014340:	464b      	mov	r3, r9
 8014342:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014346:	e6de      	b.n	8014106 <_printf_float+0x1de>
 8014348:	f04f 0800 	mov.w	r8, #0
 801434c:	f104 0a1a 	add.w	sl, r4, #26
 8014350:	e7f2      	b.n	8014338 <_printf_float+0x410>
 8014352:	2301      	movs	r3, #1
 8014354:	e7df      	b.n	8014316 <_printf_float+0x3ee>
 8014356:	2301      	movs	r3, #1
 8014358:	464a      	mov	r2, r9
 801435a:	4631      	mov	r1, r6
 801435c:	4628      	mov	r0, r5
 801435e:	47b8      	blx	r7
 8014360:	3001      	adds	r0, #1
 8014362:	f43f ae3e 	beq.w	8013fe2 <_printf_float+0xba>
 8014366:	f108 0801 	add.w	r8, r8, #1
 801436a:	68e3      	ldr	r3, [r4, #12]
 801436c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801436e:	1a9b      	subs	r3, r3, r2
 8014370:	4543      	cmp	r3, r8
 8014372:	dcf0      	bgt.n	8014356 <_printf_float+0x42e>
 8014374:	e6fc      	b.n	8014170 <_printf_float+0x248>
 8014376:	f04f 0800 	mov.w	r8, #0
 801437a:	f104 0919 	add.w	r9, r4, #25
 801437e:	e7f4      	b.n	801436a <_printf_float+0x442>
 8014380:	2900      	cmp	r1, #0
 8014382:	f43f ae8b 	beq.w	801409c <_printf_float+0x174>
 8014386:	2300      	movs	r3, #0
 8014388:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801438c:	ab09      	add	r3, sp, #36	; 0x24
 801438e:	9300      	str	r3, [sp, #0]
 8014390:	ec49 8b10 	vmov	d0, r8, r9
 8014394:	6022      	str	r2, [r4, #0]
 8014396:	f8cd a004 	str.w	sl, [sp, #4]
 801439a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801439e:	4628      	mov	r0, r5
 80143a0:	f7ff fd2d 	bl	8013dfe <__cvt>
 80143a4:	4680      	mov	r8, r0
 80143a6:	e648      	b.n	801403a <_printf_float+0x112>

080143a8 <_printf_common>:
 80143a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143ac:	4691      	mov	r9, r2
 80143ae:	461f      	mov	r7, r3
 80143b0:	688a      	ldr	r2, [r1, #8]
 80143b2:	690b      	ldr	r3, [r1, #16]
 80143b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143b8:	4293      	cmp	r3, r2
 80143ba:	bfb8      	it	lt
 80143bc:	4613      	movlt	r3, r2
 80143be:	f8c9 3000 	str.w	r3, [r9]
 80143c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143c6:	4606      	mov	r6, r0
 80143c8:	460c      	mov	r4, r1
 80143ca:	b112      	cbz	r2, 80143d2 <_printf_common+0x2a>
 80143cc:	3301      	adds	r3, #1
 80143ce:	f8c9 3000 	str.w	r3, [r9]
 80143d2:	6823      	ldr	r3, [r4, #0]
 80143d4:	0699      	lsls	r1, r3, #26
 80143d6:	bf42      	ittt	mi
 80143d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80143dc:	3302      	addmi	r3, #2
 80143de:	f8c9 3000 	strmi.w	r3, [r9]
 80143e2:	6825      	ldr	r5, [r4, #0]
 80143e4:	f015 0506 	ands.w	r5, r5, #6
 80143e8:	d107      	bne.n	80143fa <_printf_common+0x52>
 80143ea:	f104 0a19 	add.w	sl, r4, #25
 80143ee:	68e3      	ldr	r3, [r4, #12]
 80143f0:	f8d9 2000 	ldr.w	r2, [r9]
 80143f4:	1a9b      	subs	r3, r3, r2
 80143f6:	42ab      	cmp	r3, r5
 80143f8:	dc28      	bgt.n	801444c <_printf_common+0xa4>
 80143fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80143fe:	6822      	ldr	r2, [r4, #0]
 8014400:	3300      	adds	r3, #0
 8014402:	bf18      	it	ne
 8014404:	2301      	movne	r3, #1
 8014406:	0692      	lsls	r2, r2, #26
 8014408:	d42d      	bmi.n	8014466 <_printf_common+0xbe>
 801440a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801440e:	4639      	mov	r1, r7
 8014410:	4630      	mov	r0, r6
 8014412:	47c0      	blx	r8
 8014414:	3001      	adds	r0, #1
 8014416:	d020      	beq.n	801445a <_printf_common+0xb2>
 8014418:	6823      	ldr	r3, [r4, #0]
 801441a:	68e5      	ldr	r5, [r4, #12]
 801441c:	f8d9 2000 	ldr.w	r2, [r9]
 8014420:	f003 0306 	and.w	r3, r3, #6
 8014424:	2b04      	cmp	r3, #4
 8014426:	bf08      	it	eq
 8014428:	1aad      	subeq	r5, r5, r2
 801442a:	68a3      	ldr	r3, [r4, #8]
 801442c:	6922      	ldr	r2, [r4, #16]
 801442e:	bf0c      	ite	eq
 8014430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014434:	2500      	movne	r5, #0
 8014436:	4293      	cmp	r3, r2
 8014438:	bfc4      	itt	gt
 801443a:	1a9b      	subgt	r3, r3, r2
 801443c:	18ed      	addgt	r5, r5, r3
 801443e:	f04f 0900 	mov.w	r9, #0
 8014442:	341a      	adds	r4, #26
 8014444:	454d      	cmp	r5, r9
 8014446:	d11a      	bne.n	801447e <_printf_common+0xd6>
 8014448:	2000      	movs	r0, #0
 801444a:	e008      	b.n	801445e <_printf_common+0xb6>
 801444c:	2301      	movs	r3, #1
 801444e:	4652      	mov	r2, sl
 8014450:	4639      	mov	r1, r7
 8014452:	4630      	mov	r0, r6
 8014454:	47c0      	blx	r8
 8014456:	3001      	adds	r0, #1
 8014458:	d103      	bne.n	8014462 <_printf_common+0xba>
 801445a:	f04f 30ff 	mov.w	r0, #4294967295
 801445e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014462:	3501      	adds	r5, #1
 8014464:	e7c3      	b.n	80143ee <_printf_common+0x46>
 8014466:	18e1      	adds	r1, r4, r3
 8014468:	1c5a      	adds	r2, r3, #1
 801446a:	2030      	movs	r0, #48	; 0x30
 801446c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014470:	4422      	add	r2, r4
 8014472:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014476:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801447a:	3302      	adds	r3, #2
 801447c:	e7c5      	b.n	801440a <_printf_common+0x62>
 801447e:	2301      	movs	r3, #1
 8014480:	4622      	mov	r2, r4
 8014482:	4639      	mov	r1, r7
 8014484:	4630      	mov	r0, r6
 8014486:	47c0      	blx	r8
 8014488:	3001      	adds	r0, #1
 801448a:	d0e6      	beq.n	801445a <_printf_common+0xb2>
 801448c:	f109 0901 	add.w	r9, r9, #1
 8014490:	e7d8      	b.n	8014444 <_printf_common+0x9c>
	...

08014494 <_printf_i>:
 8014494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014498:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801449c:	460c      	mov	r4, r1
 801449e:	7e09      	ldrb	r1, [r1, #24]
 80144a0:	b085      	sub	sp, #20
 80144a2:	296e      	cmp	r1, #110	; 0x6e
 80144a4:	4617      	mov	r7, r2
 80144a6:	4606      	mov	r6, r0
 80144a8:	4698      	mov	r8, r3
 80144aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144ac:	f000 80b3 	beq.w	8014616 <_printf_i+0x182>
 80144b0:	d822      	bhi.n	80144f8 <_printf_i+0x64>
 80144b2:	2963      	cmp	r1, #99	; 0x63
 80144b4:	d036      	beq.n	8014524 <_printf_i+0x90>
 80144b6:	d80a      	bhi.n	80144ce <_printf_i+0x3a>
 80144b8:	2900      	cmp	r1, #0
 80144ba:	f000 80b9 	beq.w	8014630 <_printf_i+0x19c>
 80144be:	2958      	cmp	r1, #88	; 0x58
 80144c0:	f000 8083 	beq.w	80145ca <_printf_i+0x136>
 80144c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80144cc:	e032      	b.n	8014534 <_printf_i+0xa0>
 80144ce:	2964      	cmp	r1, #100	; 0x64
 80144d0:	d001      	beq.n	80144d6 <_printf_i+0x42>
 80144d2:	2969      	cmp	r1, #105	; 0x69
 80144d4:	d1f6      	bne.n	80144c4 <_printf_i+0x30>
 80144d6:	6820      	ldr	r0, [r4, #0]
 80144d8:	6813      	ldr	r3, [r2, #0]
 80144da:	0605      	lsls	r5, r0, #24
 80144dc:	f103 0104 	add.w	r1, r3, #4
 80144e0:	d52a      	bpl.n	8014538 <_printf_i+0xa4>
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	6011      	str	r1, [r2, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	da03      	bge.n	80144f2 <_printf_i+0x5e>
 80144ea:	222d      	movs	r2, #45	; 0x2d
 80144ec:	425b      	negs	r3, r3
 80144ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80144f2:	486f      	ldr	r0, [pc, #444]	; (80146b0 <_printf_i+0x21c>)
 80144f4:	220a      	movs	r2, #10
 80144f6:	e039      	b.n	801456c <_printf_i+0xd8>
 80144f8:	2973      	cmp	r1, #115	; 0x73
 80144fa:	f000 809d 	beq.w	8014638 <_printf_i+0x1a4>
 80144fe:	d808      	bhi.n	8014512 <_printf_i+0x7e>
 8014500:	296f      	cmp	r1, #111	; 0x6f
 8014502:	d020      	beq.n	8014546 <_printf_i+0xb2>
 8014504:	2970      	cmp	r1, #112	; 0x70
 8014506:	d1dd      	bne.n	80144c4 <_printf_i+0x30>
 8014508:	6823      	ldr	r3, [r4, #0]
 801450a:	f043 0320 	orr.w	r3, r3, #32
 801450e:	6023      	str	r3, [r4, #0]
 8014510:	e003      	b.n	801451a <_printf_i+0x86>
 8014512:	2975      	cmp	r1, #117	; 0x75
 8014514:	d017      	beq.n	8014546 <_printf_i+0xb2>
 8014516:	2978      	cmp	r1, #120	; 0x78
 8014518:	d1d4      	bne.n	80144c4 <_printf_i+0x30>
 801451a:	2378      	movs	r3, #120	; 0x78
 801451c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014520:	4864      	ldr	r0, [pc, #400]	; (80146b4 <_printf_i+0x220>)
 8014522:	e055      	b.n	80145d0 <_printf_i+0x13c>
 8014524:	6813      	ldr	r3, [r2, #0]
 8014526:	1d19      	adds	r1, r3, #4
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	6011      	str	r1, [r2, #0]
 801452c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014534:	2301      	movs	r3, #1
 8014536:	e08c      	b.n	8014652 <_printf_i+0x1be>
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	6011      	str	r1, [r2, #0]
 801453c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014540:	bf18      	it	ne
 8014542:	b21b      	sxthne	r3, r3
 8014544:	e7cf      	b.n	80144e6 <_printf_i+0x52>
 8014546:	6813      	ldr	r3, [r2, #0]
 8014548:	6825      	ldr	r5, [r4, #0]
 801454a:	1d18      	adds	r0, r3, #4
 801454c:	6010      	str	r0, [r2, #0]
 801454e:	0628      	lsls	r0, r5, #24
 8014550:	d501      	bpl.n	8014556 <_printf_i+0xc2>
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	e002      	b.n	801455c <_printf_i+0xc8>
 8014556:	0668      	lsls	r0, r5, #25
 8014558:	d5fb      	bpl.n	8014552 <_printf_i+0xbe>
 801455a:	881b      	ldrh	r3, [r3, #0]
 801455c:	4854      	ldr	r0, [pc, #336]	; (80146b0 <_printf_i+0x21c>)
 801455e:	296f      	cmp	r1, #111	; 0x6f
 8014560:	bf14      	ite	ne
 8014562:	220a      	movne	r2, #10
 8014564:	2208      	moveq	r2, #8
 8014566:	2100      	movs	r1, #0
 8014568:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801456c:	6865      	ldr	r5, [r4, #4]
 801456e:	60a5      	str	r5, [r4, #8]
 8014570:	2d00      	cmp	r5, #0
 8014572:	f2c0 8095 	blt.w	80146a0 <_printf_i+0x20c>
 8014576:	6821      	ldr	r1, [r4, #0]
 8014578:	f021 0104 	bic.w	r1, r1, #4
 801457c:	6021      	str	r1, [r4, #0]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d13d      	bne.n	80145fe <_printf_i+0x16a>
 8014582:	2d00      	cmp	r5, #0
 8014584:	f040 808e 	bne.w	80146a4 <_printf_i+0x210>
 8014588:	4665      	mov	r5, ip
 801458a:	2a08      	cmp	r2, #8
 801458c:	d10b      	bne.n	80145a6 <_printf_i+0x112>
 801458e:	6823      	ldr	r3, [r4, #0]
 8014590:	07db      	lsls	r3, r3, #31
 8014592:	d508      	bpl.n	80145a6 <_printf_i+0x112>
 8014594:	6923      	ldr	r3, [r4, #16]
 8014596:	6862      	ldr	r2, [r4, #4]
 8014598:	429a      	cmp	r2, r3
 801459a:	bfde      	ittt	le
 801459c:	2330      	movle	r3, #48	; 0x30
 801459e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80145a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80145a6:	ebac 0305 	sub.w	r3, ip, r5
 80145aa:	6123      	str	r3, [r4, #16]
 80145ac:	f8cd 8000 	str.w	r8, [sp]
 80145b0:	463b      	mov	r3, r7
 80145b2:	aa03      	add	r2, sp, #12
 80145b4:	4621      	mov	r1, r4
 80145b6:	4630      	mov	r0, r6
 80145b8:	f7ff fef6 	bl	80143a8 <_printf_common>
 80145bc:	3001      	adds	r0, #1
 80145be:	d14d      	bne.n	801465c <_printf_i+0x1c8>
 80145c0:	f04f 30ff 	mov.w	r0, #4294967295
 80145c4:	b005      	add	sp, #20
 80145c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145ca:	4839      	ldr	r0, [pc, #228]	; (80146b0 <_printf_i+0x21c>)
 80145cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80145d0:	6813      	ldr	r3, [r2, #0]
 80145d2:	6821      	ldr	r1, [r4, #0]
 80145d4:	1d1d      	adds	r5, r3, #4
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	6015      	str	r5, [r2, #0]
 80145da:	060a      	lsls	r2, r1, #24
 80145dc:	d50b      	bpl.n	80145f6 <_printf_i+0x162>
 80145de:	07ca      	lsls	r2, r1, #31
 80145e0:	bf44      	itt	mi
 80145e2:	f041 0120 	orrmi.w	r1, r1, #32
 80145e6:	6021      	strmi	r1, [r4, #0]
 80145e8:	b91b      	cbnz	r3, 80145f2 <_printf_i+0x15e>
 80145ea:	6822      	ldr	r2, [r4, #0]
 80145ec:	f022 0220 	bic.w	r2, r2, #32
 80145f0:	6022      	str	r2, [r4, #0]
 80145f2:	2210      	movs	r2, #16
 80145f4:	e7b7      	b.n	8014566 <_printf_i+0xd2>
 80145f6:	064d      	lsls	r5, r1, #25
 80145f8:	bf48      	it	mi
 80145fa:	b29b      	uxthmi	r3, r3
 80145fc:	e7ef      	b.n	80145de <_printf_i+0x14a>
 80145fe:	4665      	mov	r5, ip
 8014600:	fbb3 f1f2 	udiv	r1, r3, r2
 8014604:	fb02 3311 	mls	r3, r2, r1, r3
 8014608:	5cc3      	ldrb	r3, [r0, r3]
 801460a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801460e:	460b      	mov	r3, r1
 8014610:	2900      	cmp	r1, #0
 8014612:	d1f5      	bne.n	8014600 <_printf_i+0x16c>
 8014614:	e7b9      	b.n	801458a <_printf_i+0xf6>
 8014616:	6813      	ldr	r3, [r2, #0]
 8014618:	6825      	ldr	r5, [r4, #0]
 801461a:	6961      	ldr	r1, [r4, #20]
 801461c:	1d18      	adds	r0, r3, #4
 801461e:	6010      	str	r0, [r2, #0]
 8014620:	0628      	lsls	r0, r5, #24
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	d501      	bpl.n	801462a <_printf_i+0x196>
 8014626:	6019      	str	r1, [r3, #0]
 8014628:	e002      	b.n	8014630 <_printf_i+0x19c>
 801462a:	066a      	lsls	r2, r5, #25
 801462c:	d5fb      	bpl.n	8014626 <_printf_i+0x192>
 801462e:	8019      	strh	r1, [r3, #0]
 8014630:	2300      	movs	r3, #0
 8014632:	6123      	str	r3, [r4, #16]
 8014634:	4665      	mov	r5, ip
 8014636:	e7b9      	b.n	80145ac <_printf_i+0x118>
 8014638:	6813      	ldr	r3, [r2, #0]
 801463a:	1d19      	adds	r1, r3, #4
 801463c:	6011      	str	r1, [r2, #0]
 801463e:	681d      	ldr	r5, [r3, #0]
 8014640:	6862      	ldr	r2, [r4, #4]
 8014642:	2100      	movs	r1, #0
 8014644:	4628      	mov	r0, r5
 8014646:	f7f3 fd03 	bl	8008050 <memchr>
 801464a:	b108      	cbz	r0, 8014650 <_printf_i+0x1bc>
 801464c:	1b40      	subs	r0, r0, r5
 801464e:	6060      	str	r0, [r4, #4]
 8014650:	6863      	ldr	r3, [r4, #4]
 8014652:	6123      	str	r3, [r4, #16]
 8014654:	2300      	movs	r3, #0
 8014656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801465a:	e7a7      	b.n	80145ac <_printf_i+0x118>
 801465c:	6923      	ldr	r3, [r4, #16]
 801465e:	462a      	mov	r2, r5
 8014660:	4639      	mov	r1, r7
 8014662:	4630      	mov	r0, r6
 8014664:	47c0      	blx	r8
 8014666:	3001      	adds	r0, #1
 8014668:	d0aa      	beq.n	80145c0 <_printf_i+0x12c>
 801466a:	6823      	ldr	r3, [r4, #0]
 801466c:	079b      	lsls	r3, r3, #30
 801466e:	d413      	bmi.n	8014698 <_printf_i+0x204>
 8014670:	68e0      	ldr	r0, [r4, #12]
 8014672:	9b03      	ldr	r3, [sp, #12]
 8014674:	4298      	cmp	r0, r3
 8014676:	bfb8      	it	lt
 8014678:	4618      	movlt	r0, r3
 801467a:	e7a3      	b.n	80145c4 <_printf_i+0x130>
 801467c:	2301      	movs	r3, #1
 801467e:	464a      	mov	r2, r9
 8014680:	4639      	mov	r1, r7
 8014682:	4630      	mov	r0, r6
 8014684:	47c0      	blx	r8
 8014686:	3001      	adds	r0, #1
 8014688:	d09a      	beq.n	80145c0 <_printf_i+0x12c>
 801468a:	3501      	adds	r5, #1
 801468c:	68e3      	ldr	r3, [r4, #12]
 801468e:	9a03      	ldr	r2, [sp, #12]
 8014690:	1a9b      	subs	r3, r3, r2
 8014692:	42ab      	cmp	r3, r5
 8014694:	dcf2      	bgt.n	801467c <_printf_i+0x1e8>
 8014696:	e7eb      	b.n	8014670 <_printf_i+0x1dc>
 8014698:	2500      	movs	r5, #0
 801469a:	f104 0919 	add.w	r9, r4, #25
 801469e:	e7f5      	b.n	801468c <_printf_i+0x1f8>
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d1ac      	bne.n	80145fe <_printf_i+0x16a>
 80146a4:	7803      	ldrb	r3, [r0, #0]
 80146a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80146aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146ae:	e76c      	b.n	801458a <_printf_i+0xf6>
 80146b0:	080191c0 	.word	0x080191c0
 80146b4:	080191d1 	.word	0x080191d1

080146b8 <_scanf_float>:
 80146b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146bc:	469a      	mov	sl, r3
 80146be:	688b      	ldr	r3, [r1, #8]
 80146c0:	4616      	mov	r6, r2
 80146c2:	1e5a      	subs	r2, r3, #1
 80146c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80146c8:	b087      	sub	sp, #28
 80146ca:	bf83      	ittte	hi
 80146cc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80146d0:	189b      	addhi	r3, r3, r2
 80146d2:	9301      	strhi	r3, [sp, #4]
 80146d4:	2300      	movls	r3, #0
 80146d6:	bf86      	itte	hi
 80146d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80146dc:	608b      	strhi	r3, [r1, #8]
 80146de:	9301      	strls	r3, [sp, #4]
 80146e0:	680b      	ldr	r3, [r1, #0]
 80146e2:	4688      	mov	r8, r1
 80146e4:	f04f 0b00 	mov.w	fp, #0
 80146e8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80146ec:	f848 3b1c 	str.w	r3, [r8], #28
 80146f0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80146f4:	4607      	mov	r7, r0
 80146f6:	460c      	mov	r4, r1
 80146f8:	4645      	mov	r5, r8
 80146fa:	465a      	mov	r2, fp
 80146fc:	46d9      	mov	r9, fp
 80146fe:	f8cd b008 	str.w	fp, [sp, #8]
 8014702:	68a1      	ldr	r1, [r4, #8]
 8014704:	b181      	cbz	r1, 8014728 <_scanf_float+0x70>
 8014706:	6833      	ldr	r3, [r6, #0]
 8014708:	781b      	ldrb	r3, [r3, #0]
 801470a:	2b49      	cmp	r3, #73	; 0x49
 801470c:	d071      	beq.n	80147f2 <_scanf_float+0x13a>
 801470e:	d84d      	bhi.n	80147ac <_scanf_float+0xf4>
 8014710:	2b39      	cmp	r3, #57	; 0x39
 8014712:	d840      	bhi.n	8014796 <_scanf_float+0xde>
 8014714:	2b31      	cmp	r3, #49	; 0x31
 8014716:	f080 8088 	bcs.w	801482a <_scanf_float+0x172>
 801471a:	2b2d      	cmp	r3, #45	; 0x2d
 801471c:	f000 8090 	beq.w	8014840 <_scanf_float+0x188>
 8014720:	d815      	bhi.n	801474e <_scanf_float+0x96>
 8014722:	2b2b      	cmp	r3, #43	; 0x2b
 8014724:	f000 808c 	beq.w	8014840 <_scanf_float+0x188>
 8014728:	f1b9 0f00 	cmp.w	r9, #0
 801472c:	d003      	beq.n	8014736 <_scanf_float+0x7e>
 801472e:	6823      	ldr	r3, [r4, #0]
 8014730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014734:	6023      	str	r3, [r4, #0]
 8014736:	3a01      	subs	r2, #1
 8014738:	2a01      	cmp	r2, #1
 801473a:	f200 80ea 	bhi.w	8014912 <_scanf_float+0x25a>
 801473e:	4545      	cmp	r5, r8
 8014740:	f200 80dc 	bhi.w	80148fc <_scanf_float+0x244>
 8014744:	2601      	movs	r6, #1
 8014746:	4630      	mov	r0, r6
 8014748:	b007      	add	sp, #28
 801474a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801474e:	2b2e      	cmp	r3, #46	; 0x2e
 8014750:	f000 809f 	beq.w	8014892 <_scanf_float+0x1da>
 8014754:	2b30      	cmp	r3, #48	; 0x30
 8014756:	d1e7      	bne.n	8014728 <_scanf_float+0x70>
 8014758:	6820      	ldr	r0, [r4, #0]
 801475a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801475e:	d064      	beq.n	801482a <_scanf_float+0x172>
 8014760:	9b01      	ldr	r3, [sp, #4]
 8014762:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014766:	6020      	str	r0, [r4, #0]
 8014768:	f109 0901 	add.w	r9, r9, #1
 801476c:	b11b      	cbz	r3, 8014776 <_scanf_float+0xbe>
 801476e:	3b01      	subs	r3, #1
 8014770:	3101      	adds	r1, #1
 8014772:	9301      	str	r3, [sp, #4]
 8014774:	60a1      	str	r1, [r4, #8]
 8014776:	68a3      	ldr	r3, [r4, #8]
 8014778:	3b01      	subs	r3, #1
 801477a:	60a3      	str	r3, [r4, #8]
 801477c:	6923      	ldr	r3, [r4, #16]
 801477e:	3301      	adds	r3, #1
 8014780:	6123      	str	r3, [r4, #16]
 8014782:	6873      	ldr	r3, [r6, #4]
 8014784:	3b01      	subs	r3, #1
 8014786:	2b00      	cmp	r3, #0
 8014788:	6073      	str	r3, [r6, #4]
 801478a:	f340 80ac 	ble.w	80148e6 <_scanf_float+0x22e>
 801478e:	6833      	ldr	r3, [r6, #0]
 8014790:	3301      	adds	r3, #1
 8014792:	6033      	str	r3, [r6, #0]
 8014794:	e7b5      	b.n	8014702 <_scanf_float+0x4a>
 8014796:	2b45      	cmp	r3, #69	; 0x45
 8014798:	f000 8085 	beq.w	80148a6 <_scanf_float+0x1ee>
 801479c:	2b46      	cmp	r3, #70	; 0x46
 801479e:	d06a      	beq.n	8014876 <_scanf_float+0x1be>
 80147a0:	2b41      	cmp	r3, #65	; 0x41
 80147a2:	d1c1      	bne.n	8014728 <_scanf_float+0x70>
 80147a4:	2a01      	cmp	r2, #1
 80147a6:	d1bf      	bne.n	8014728 <_scanf_float+0x70>
 80147a8:	2202      	movs	r2, #2
 80147aa:	e046      	b.n	801483a <_scanf_float+0x182>
 80147ac:	2b65      	cmp	r3, #101	; 0x65
 80147ae:	d07a      	beq.n	80148a6 <_scanf_float+0x1ee>
 80147b0:	d818      	bhi.n	80147e4 <_scanf_float+0x12c>
 80147b2:	2b54      	cmp	r3, #84	; 0x54
 80147b4:	d066      	beq.n	8014884 <_scanf_float+0x1cc>
 80147b6:	d811      	bhi.n	80147dc <_scanf_float+0x124>
 80147b8:	2b4e      	cmp	r3, #78	; 0x4e
 80147ba:	d1b5      	bne.n	8014728 <_scanf_float+0x70>
 80147bc:	2a00      	cmp	r2, #0
 80147be:	d146      	bne.n	801484e <_scanf_float+0x196>
 80147c0:	f1b9 0f00 	cmp.w	r9, #0
 80147c4:	d145      	bne.n	8014852 <_scanf_float+0x19a>
 80147c6:	6821      	ldr	r1, [r4, #0]
 80147c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80147cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80147d0:	d13f      	bne.n	8014852 <_scanf_float+0x19a>
 80147d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80147d6:	6021      	str	r1, [r4, #0]
 80147d8:	2201      	movs	r2, #1
 80147da:	e02e      	b.n	801483a <_scanf_float+0x182>
 80147dc:	2b59      	cmp	r3, #89	; 0x59
 80147de:	d01e      	beq.n	801481e <_scanf_float+0x166>
 80147e0:	2b61      	cmp	r3, #97	; 0x61
 80147e2:	e7de      	b.n	80147a2 <_scanf_float+0xea>
 80147e4:	2b6e      	cmp	r3, #110	; 0x6e
 80147e6:	d0e9      	beq.n	80147bc <_scanf_float+0x104>
 80147e8:	d815      	bhi.n	8014816 <_scanf_float+0x15e>
 80147ea:	2b66      	cmp	r3, #102	; 0x66
 80147ec:	d043      	beq.n	8014876 <_scanf_float+0x1be>
 80147ee:	2b69      	cmp	r3, #105	; 0x69
 80147f0:	d19a      	bne.n	8014728 <_scanf_float+0x70>
 80147f2:	f1bb 0f00 	cmp.w	fp, #0
 80147f6:	d138      	bne.n	801486a <_scanf_float+0x1b2>
 80147f8:	f1b9 0f00 	cmp.w	r9, #0
 80147fc:	d197      	bne.n	801472e <_scanf_float+0x76>
 80147fe:	6821      	ldr	r1, [r4, #0]
 8014800:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014804:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014808:	d195      	bne.n	8014736 <_scanf_float+0x7e>
 801480a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801480e:	6021      	str	r1, [r4, #0]
 8014810:	f04f 0b01 	mov.w	fp, #1
 8014814:	e011      	b.n	801483a <_scanf_float+0x182>
 8014816:	2b74      	cmp	r3, #116	; 0x74
 8014818:	d034      	beq.n	8014884 <_scanf_float+0x1cc>
 801481a:	2b79      	cmp	r3, #121	; 0x79
 801481c:	d184      	bne.n	8014728 <_scanf_float+0x70>
 801481e:	f1bb 0f07 	cmp.w	fp, #7
 8014822:	d181      	bne.n	8014728 <_scanf_float+0x70>
 8014824:	f04f 0b08 	mov.w	fp, #8
 8014828:	e007      	b.n	801483a <_scanf_float+0x182>
 801482a:	eb12 0f0b 	cmn.w	r2, fp
 801482e:	f47f af7b 	bne.w	8014728 <_scanf_float+0x70>
 8014832:	6821      	ldr	r1, [r4, #0]
 8014834:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014838:	6021      	str	r1, [r4, #0]
 801483a:	702b      	strb	r3, [r5, #0]
 801483c:	3501      	adds	r5, #1
 801483e:	e79a      	b.n	8014776 <_scanf_float+0xbe>
 8014840:	6821      	ldr	r1, [r4, #0]
 8014842:	0608      	lsls	r0, r1, #24
 8014844:	f57f af70 	bpl.w	8014728 <_scanf_float+0x70>
 8014848:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801484c:	e7f4      	b.n	8014838 <_scanf_float+0x180>
 801484e:	2a02      	cmp	r2, #2
 8014850:	d047      	beq.n	80148e2 <_scanf_float+0x22a>
 8014852:	f1bb 0f01 	cmp.w	fp, #1
 8014856:	d003      	beq.n	8014860 <_scanf_float+0x1a8>
 8014858:	f1bb 0f04 	cmp.w	fp, #4
 801485c:	f47f af64 	bne.w	8014728 <_scanf_float+0x70>
 8014860:	f10b 0b01 	add.w	fp, fp, #1
 8014864:	fa5f fb8b 	uxtb.w	fp, fp
 8014868:	e7e7      	b.n	801483a <_scanf_float+0x182>
 801486a:	f1bb 0f03 	cmp.w	fp, #3
 801486e:	d0f7      	beq.n	8014860 <_scanf_float+0x1a8>
 8014870:	f1bb 0f05 	cmp.w	fp, #5
 8014874:	e7f2      	b.n	801485c <_scanf_float+0x1a4>
 8014876:	f1bb 0f02 	cmp.w	fp, #2
 801487a:	f47f af55 	bne.w	8014728 <_scanf_float+0x70>
 801487e:	f04f 0b03 	mov.w	fp, #3
 8014882:	e7da      	b.n	801483a <_scanf_float+0x182>
 8014884:	f1bb 0f06 	cmp.w	fp, #6
 8014888:	f47f af4e 	bne.w	8014728 <_scanf_float+0x70>
 801488c:	f04f 0b07 	mov.w	fp, #7
 8014890:	e7d3      	b.n	801483a <_scanf_float+0x182>
 8014892:	6821      	ldr	r1, [r4, #0]
 8014894:	0588      	lsls	r0, r1, #22
 8014896:	f57f af47 	bpl.w	8014728 <_scanf_float+0x70>
 801489a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801489e:	6021      	str	r1, [r4, #0]
 80148a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80148a4:	e7c9      	b.n	801483a <_scanf_float+0x182>
 80148a6:	6821      	ldr	r1, [r4, #0]
 80148a8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80148ac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80148b0:	d006      	beq.n	80148c0 <_scanf_float+0x208>
 80148b2:	0548      	lsls	r0, r1, #21
 80148b4:	f57f af38 	bpl.w	8014728 <_scanf_float+0x70>
 80148b8:	f1b9 0f00 	cmp.w	r9, #0
 80148bc:	f43f af3b 	beq.w	8014736 <_scanf_float+0x7e>
 80148c0:	0588      	lsls	r0, r1, #22
 80148c2:	bf58      	it	pl
 80148c4:	9802      	ldrpl	r0, [sp, #8]
 80148c6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80148ca:	bf58      	it	pl
 80148cc:	eba9 0000 	subpl.w	r0, r9, r0
 80148d0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80148d4:	bf58      	it	pl
 80148d6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80148da:	6021      	str	r1, [r4, #0]
 80148dc:	f04f 0900 	mov.w	r9, #0
 80148e0:	e7ab      	b.n	801483a <_scanf_float+0x182>
 80148e2:	2203      	movs	r2, #3
 80148e4:	e7a9      	b.n	801483a <_scanf_float+0x182>
 80148e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80148ea:	9205      	str	r2, [sp, #20]
 80148ec:	4631      	mov	r1, r6
 80148ee:	4638      	mov	r0, r7
 80148f0:	4798      	blx	r3
 80148f2:	9a05      	ldr	r2, [sp, #20]
 80148f4:	2800      	cmp	r0, #0
 80148f6:	f43f af04 	beq.w	8014702 <_scanf_float+0x4a>
 80148fa:	e715      	b.n	8014728 <_scanf_float+0x70>
 80148fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014900:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014904:	4632      	mov	r2, r6
 8014906:	4638      	mov	r0, r7
 8014908:	4798      	blx	r3
 801490a:	6923      	ldr	r3, [r4, #16]
 801490c:	3b01      	subs	r3, #1
 801490e:	6123      	str	r3, [r4, #16]
 8014910:	e715      	b.n	801473e <_scanf_float+0x86>
 8014912:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014916:	2b06      	cmp	r3, #6
 8014918:	d80a      	bhi.n	8014930 <_scanf_float+0x278>
 801491a:	f1bb 0f02 	cmp.w	fp, #2
 801491e:	d968      	bls.n	80149f2 <_scanf_float+0x33a>
 8014920:	f1ab 0b03 	sub.w	fp, fp, #3
 8014924:	fa5f fb8b 	uxtb.w	fp, fp
 8014928:	eba5 0b0b 	sub.w	fp, r5, fp
 801492c:	455d      	cmp	r5, fp
 801492e:	d14b      	bne.n	80149c8 <_scanf_float+0x310>
 8014930:	6823      	ldr	r3, [r4, #0]
 8014932:	05da      	lsls	r2, r3, #23
 8014934:	d51f      	bpl.n	8014976 <_scanf_float+0x2be>
 8014936:	055b      	lsls	r3, r3, #21
 8014938:	d468      	bmi.n	8014a0c <_scanf_float+0x354>
 801493a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801493e:	6923      	ldr	r3, [r4, #16]
 8014940:	2965      	cmp	r1, #101	; 0x65
 8014942:	f103 33ff 	add.w	r3, r3, #4294967295
 8014946:	f105 3bff 	add.w	fp, r5, #4294967295
 801494a:	6123      	str	r3, [r4, #16]
 801494c:	d00d      	beq.n	801496a <_scanf_float+0x2b2>
 801494e:	2945      	cmp	r1, #69	; 0x45
 8014950:	d00b      	beq.n	801496a <_scanf_float+0x2b2>
 8014952:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014956:	4632      	mov	r2, r6
 8014958:	4638      	mov	r0, r7
 801495a:	4798      	blx	r3
 801495c:	6923      	ldr	r3, [r4, #16]
 801495e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8014962:	3b01      	subs	r3, #1
 8014964:	f1a5 0b02 	sub.w	fp, r5, #2
 8014968:	6123      	str	r3, [r4, #16]
 801496a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801496e:	4632      	mov	r2, r6
 8014970:	4638      	mov	r0, r7
 8014972:	4798      	blx	r3
 8014974:	465d      	mov	r5, fp
 8014976:	6826      	ldr	r6, [r4, #0]
 8014978:	f016 0610 	ands.w	r6, r6, #16
 801497c:	d17a      	bne.n	8014a74 <_scanf_float+0x3bc>
 801497e:	702e      	strb	r6, [r5, #0]
 8014980:	6823      	ldr	r3, [r4, #0]
 8014982:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801498a:	d142      	bne.n	8014a12 <_scanf_float+0x35a>
 801498c:	9b02      	ldr	r3, [sp, #8]
 801498e:	eba9 0303 	sub.w	r3, r9, r3
 8014992:	425a      	negs	r2, r3
 8014994:	2b00      	cmp	r3, #0
 8014996:	d149      	bne.n	8014a2c <_scanf_float+0x374>
 8014998:	2200      	movs	r2, #0
 801499a:	4641      	mov	r1, r8
 801499c:	4638      	mov	r0, r7
 801499e:	f000 ffef 	bl	8015980 <_strtod_r>
 80149a2:	6825      	ldr	r5, [r4, #0]
 80149a4:	f8da 3000 	ldr.w	r3, [sl]
 80149a8:	f015 0f02 	tst.w	r5, #2
 80149ac:	f103 0204 	add.w	r2, r3, #4
 80149b0:	ec59 8b10 	vmov	r8, r9, d0
 80149b4:	f8ca 2000 	str.w	r2, [sl]
 80149b8:	d043      	beq.n	8014a42 <_scanf_float+0x38a>
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	e9c3 8900 	strd	r8, r9, [r3]
 80149c0:	68e3      	ldr	r3, [r4, #12]
 80149c2:	3301      	adds	r3, #1
 80149c4:	60e3      	str	r3, [r4, #12]
 80149c6:	e6be      	b.n	8014746 <_scanf_float+0x8e>
 80149c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80149d0:	4632      	mov	r2, r6
 80149d2:	4638      	mov	r0, r7
 80149d4:	4798      	blx	r3
 80149d6:	6923      	ldr	r3, [r4, #16]
 80149d8:	3b01      	subs	r3, #1
 80149da:	6123      	str	r3, [r4, #16]
 80149dc:	e7a6      	b.n	801492c <_scanf_float+0x274>
 80149de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149e2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80149e6:	4632      	mov	r2, r6
 80149e8:	4638      	mov	r0, r7
 80149ea:	4798      	blx	r3
 80149ec:	6923      	ldr	r3, [r4, #16]
 80149ee:	3b01      	subs	r3, #1
 80149f0:	6123      	str	r3, [r4, #16]
 80149f2:	4545      	cmp	r5, r8
 80149f4:	d8f3      	bhi.n	80149de <_scanf_float+0x326>
 80149f6:	e6a5      	b.n	8014744 <_scanf_float+0x8c>
 80149f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014a00:	4632      	mov	r2, r6
 8014a02:	4638      	mov	r0, r7
 8014a04:	4798      	blx	r3
 8014a06:	6923      	ldr	r3, [r4, #16]
 8014a08:	3b01      	subs	r3, #1
 8014a0a:	6123      	str	r3, [r4, #16]
 8014a0c:	4545      	cmp	r5, r8
 8014a0e:	d8f3      	bhi.n	80149f8 <_scanf_float+0x340>
 8014a10:	e698      	b.n	8014744 <_scanf_float+0x8c>
 8014a12:	9b03      	ldr	r3, [sp, #12]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d0bf      	beq.n	8014998 <_scanf_float+0x2e0>
 8014a18:	9904      	ldr	r1, [sp, #16]
 8014a1a:	230a      	movs	r3, #10
 8014a1c:	4632      	mov	r2, r6
 8014a1e:	3101      	adds	r1, #1
 8014a20:	4638      	mov	r0, r7
 8014a22:	f001 f839 	bl	8015a98 <_strtol_r>
 8014a26:	9b03      	ldr	r3, [sp, #12]
 8014a28:	9d04      	ldr	r5, [sp, #16]
 8014a2a:	1ac2      	subs	r2, r0, r3
 8014a2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014a30:	429d      	cmp	r5, r3
 8014a32:	bf28      	it	cs
 8014a34:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014a38:	490f      	ldr	r1, [pc, #60]	; (8014a78 <_scanf_float+0x3c0>)
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	f000 f96e 	bl	8014d1c <siprintf>
 8014a40:	e7aa      	b.n	8014998 <_scanf_float+0x2e0>
 8014a42:	f015 0504 	ands.w	r5, r5, #4
 8014a46:	d1b8      	bne.n	80149ba <_scanf_float+0x302>
 8014a48:	681f      	ldr	r7, [r3, #0]
 8014a4a:	ee10 2a10 	vmov	r2, s0
 8014a4e:	464b      	mov	r3, r9
 8014a50:	ee10 0a10 	vmov	r0, s0
 8014a54:	4649      	mov	r1, r9
 8014a56:	f7f3 ffa1 	bl	800899c <__aeabi_dcmpun>
 8014a5a:	b128      	cbz	r0, 8014a68 <_scanf_float+0x3b0>
 8014a5c:	4628      	mov	r0, r5
 8014a5e:	f000 f957 	bl	8014d10 <nanf>
 8014a62:	ed87 0a00 	vstr	s0, [r7]
 8014a66:	e7ab      	b.n	80149c0 <_scanf_float+0x308>
 8014a68:	4640      	mov	r0, r8
 8014a6a:	4649      	mov	r1, r9
 8014a6c:	f7f3 fff4 	bl	8008a58 <__aeabi_d2f>
 8014a70:	6038      	str	r0, [r7, #0]
 8014a72:	e7a5      	b.n	80149c0 <_scanf_float+0x308>
 8014a74:	2600      	movs	r6, #0
 8014a76:	e666      	b.n	8014746 <_scanf_float+0x8e>
 8014a78:	080191e2 	.word	0x080191e2

08014a7c <iprintf>:
 8014a7c:	b40f      	push	{r0, r1, r2, r3}
 8014a7e:	4b0a      	ldr	r3, [pc, #40]	; (8014aa8 <iprintf+0x2c>)
 8014a80:	b513      	push	{r0, r1, r4, lr}
 8014a82:	681c      	ldr	r4, [r3, #0]
 8014a84:	b124      	cbz	r4, 8014a90 <iprintf+0x14>
 8014a86:	69a3      	ldr	r3, [r4, #24]
 8014a88:	b913      	cbnz	r3, 8014a90 <iprintf+0x14>
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	f002 f81e 	bl	8016acc <__sinit>
 8014a90:	ab05      	add	r3, sp, #20
 8014a92:	9a04      	ldr	r2, [sp, #16]
 8014a94:	68a1      	ldr	r1, [r4, #8]
 8014a96:	9301      	str	r3, [sp, #4]
 8014a98:	4620      	mov	r0, r4
 8014a9a:	f003 fab5 	bl	8018008 <_vfiprintf_r>
 8014a9e:	b002      	add	sp, #8
 8014aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aa4:	b004      	add	sp, #16
 8014aa6:	4770      	bx	lr
 8014aa8:	20000024 	.word	0x20000024

08014aac <_puts_r>:
 8014aac:	b570      	push	{r4, r5, r6, lr}
 8014aae:	460e      	mov	r6, r1
 8014ab0:	4605      	mov	r5, r0
 8014ab2:	b118      	cbz	r0, 8014abc <_puts_r+0x10>
 8014ab4:	6983      	ldr	r3, [r0, #24]
 8014ab6:	b90b      	cbnz	r3, 8014abc <_puts_r+0x10>
 8014ab8:	f002 f808 	bl	8016acc <__sinit>
 8014abc:	69ab      	ldr	r3, [r5, #24]
 8014abe:	68ac      	ldr	r4, [r5, #8]
 8014ac0:	b913      	cbnz	r3, 8014ac8 <_puts_r+0x1c>
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f002 f802 	bl	8016acc <__sinit>
 8014ac8:	4b23      	ldr	r3, [pc, #140]	; (8014b58 <_puts_r+0xac>)
 8014aca:	429c      	cmp	r4, r3
 8014acc:	d117      	bne.n	8014afe <_puts_r+0x52>
 8014ace:	686c      	ldr	r4, [r5, #4]
 8014ad0:	89a3      	ldrh	r3, [r4, #12]
 8014ad2:	071b      	lsls	r3, r3, #28
 8014ad4:	d51d      	bpl.n	8014b12 <_puts_r+0x66>
 8014ad6:	6923      	ldr	r3, [r4, #16]
 8014ad8:	b1db      	cbz	r3, 8014b12 <_puts_r+0x66>
 8014ada:	3e01      	subs	r6, #1
 8014adc:	68a3      	ldr	r3, [r4, #8]
 8014ade:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014ae2:	3b01      	subs	r3, #1
 8014ae4:	60a3      	str	r3, [r4, #8]
 8014ae6:	b9e9      	cbnz	r1, 8014b24 <_puts_r+0x78>
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	da2e      	bge.n	8014b4a <_puts_r+0x9e>
 8014aec:	4622      	mov	r2, r4
 8014aee:	210a      	movs	r1, #10
 8014af0:	4628      	mov	r0, r5
 8014af2:	f000 ffe3 	bl	8015abc <__swbuf_r>
 8014af6:	3001      	adds	r0, #1
 8014af8:	d011      	beq.n	8014b1e <_puts_r+0x72>
 8014afa:	200a      	movs	r0, #10
 8014afc:	e011      	b.n	8014b22 <_puts_r+0x76>
 8014afe:	4b17      	ldr	r3, [pc, #92]	; (8014b5c <_puts_r+0xb0>)
 8014b00:	429c      	cmp	r4, r3
 8014b02:	d101      	bne.n	8014b08 <_puts_r+0x5c>
 8014b04:	68ac      	ldr	r4, [r5, #8]
 8014b06:	e7e3      	b.n	8014ad0 <_puts_r+0x24>
 8014b08:	4b15      	ldr	r3, [pc, #84]	; (8014b60 <_puts_r+0xb4>)
 8014b0a:	429c      	cmp	r4, r3
 8014b0c:	bf08      	it	eq
 8014b0e:	68ec      	ldreq	r4, [r5, #12]
 8014b10:	e7de      	b.n	8014ad0 <_puts_r+0x24>
 8014b12:	4621      	mov	r1, r4
 8014b14:	4628      	mov	r0, r5
 8014b16:	f001 f823 	bl	8015b60 <__swsetup_r>
 8014b1a:	2800      	cmp	r0, #0
 8014b1c:	d0dd      	beq.n	8014ada <_puts_r+0x2e>
 8014b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b22:	bd70      	pop	{r4, r5, r6, pc}
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	da04      	bge.n	8014b32 <_puts_r+0x86>
 8014b28:	69a2      	ldr	r2, [r4, #24]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	dc06      	bgt.n	8014b3c <_puts_r+0x90>
 8014b2e:	290a      	cmp	r1, #10
 8014b30:	d004      	beq.n	8014b3c <_puts_r+0x90>
 8014b32:	6823      	ldr	r3, [r4, #0]
 8014b34:	1c5a      	adds	r2, r3, #1
 8014b36:	6022      	str	r2, [r4, #0]
 8014b38:	7019      	strb	r1, [r3, #0]
 8014b3a:	e7cf      	b.n	8014adc <_puts_r+0x30>
 8014b3c:	4622      	mov	r2, r4
 8014b3e:	4628      	mov	r0, r5
 8014b40:	f000 ffbc 	bl	8015abc <__swbuf_r>
 8014b44:	3001      	adds	r0, #1
 8014b46:	d1c9      	bne.n	8014adc <_puts_r+0x30>
 8014b48:	e7e9      	b.n	8014b1e <_puts_r+0x72>
 8014b4a:	6823      	ldr	r3, [r4, #0]
 8014b4c:	200a      	movs	r0, #10
 8014b4e:	1c5a      	adds	r2, r3, #1
 8014b50:	6022      	str	r2, [r4, #0]
 8014b52:	7018      	strb	r0, [r3, #0]
 8014b54:	e7e5      	b.n	8014b22 <_puts_r+0x76>
 8014b56:	bf00      	nop
 8014b58:	08019268 	.word	0x08019268
 8014b5c:	08019288 	.word	0x08019288
 8014b60:	08019248 	.word	0x08019248

08014b64 <puts>:
 8014b64:	4b02      	ldr	r3, [pc, #8]	; (8014b70 <puts+0xc>)
 8014b66:	4601      	mov	r1, r0
 8014b68:	6818      	ldr	r0, [r3, #0]
 8014b6a:	f7ff bf9f 	b.w	8014aac <_puts_r>
 8014b6e:	bf00      	nop
 8014b70:	20000024 	.word	0x20000024

08014b74 <iscanf>:
 8014b74:	b40f      	push	{r0, r1, r2, r3}
 8014b76:	4b0a      	ldr	r3, [pc, #40]	; (8014ba0 <iscanf+0x2c>)
 8014b78:	b513      	push	{r0, r1, r4, lr}
 8014b7a:	681c      	ldr	r4, [r3, #0]
 8014b7c:	b124      	cbz	r4, 8014b88 <iscanf+0x14>
 8014b7e:	69a3      	ldr	r3, [r4, #24]
 8014b80:	b913      	cbnz	r3, 8014b88 <iscanf+0x14>
 8014b82:	4620      	mov	r0, r4
 8014b84:	f001 ffa2 	bl	8016acc <__sinit>
 8014b88:	ab05      	add	r3, sp, #20
 8014b8a:	9a04      	ldr	r2, [sp, #16]
 8014b8c:	6861      	ldr	r1, [r4, #4]
 8014b8e:	9301      	str	r3, [sp, #4]
 8014b90:	4620      	mov	r0, r4
 8014b92:	f003 fc9f 	bl	80184d4 <_vfiscanf_r>
 8014b96:	b002      	add	sp, #8
 8014b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b9c:	b004      	add	sp, #16
 8014b9e:	4770      	bx	lr
 8014ba0:	20000024 	.word	0x20000024

08014ba4 <setbuf>:
 8014ba4:	2900      	cmp	r1, #0
 8014ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014baa:	bf0c      	ite	eq
 8014bac:	2202      	moveq	r2, #2
 8014bae:	2200      	movne	r2, #0
 8014bb0:	f000 b800 	b.w	8014bb4 <setvbuf>

08014bb4 <setvbuf>:
 8014bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014bb8:	461d      	mov	r5, r3
 8014bba:	4b51      	ldr	r3, [pc, #324]	; (8014d00 <setvbuf+0x14c>)
 8014bbc:	681e      	ldr	r6, [r3, #0]
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	460f      	mov	r7, r1
 8014bc2:	4690      	mov	r8, r2
 8014bc4:	b126      	cbz	r6, 8014bd0 <setvbuf+0x1c>
 8014bc6:	69b3      	ldr	r3, [r6, #24]
 8014bc8:	b913      	cbnz	r3, 8014bd0 <setvbuf+0x1c>
 8014bca:	4630      	mov	r0, r6
 8014bcc:	f001 ff7e 	bl	8016acc <__sinit>
 8014bd0:	4b4c      	ldr	r3, [pc, #304]	; (8014d04 <setvbuf+0x150>)
 8014bd2:	429c      	cmp	r4, r3
 8014bd4:	d152      	bne.n	8014c7c <setvbuf+0xc8>
 8014bd6:	6874      	ldr	r4, [r6, #4]
 8014bd8:	f1b8 0f02 	cmp.w	r8, #2
 8014bdc:	d006      	beq.n	8014bec <setvbuf+0x38>
 8014bde:	f1b8 0f01 	cmp.w	r8, #1
 8014be2:	f200 8089 	bhi.w	8014cf8 <setvbuf+0x144>
 8014be6:	2d00      	cmp	r5, #0
 8014be8:	f2c0 8086 	blt.w	8014cf8 <setvbuf+0x144>
 8014bec:	4621      	mov	r1, r4
 8014bee:	4630      	mov	r0, r6
 8014bf0:	f001 fef0 	bl	80169d4 <_fflush_r>
 8014bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bf6:	b141      	cbz	r1, 8014c0a <setvbuf+0x56>
 8014bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bfc:	4299      	cmp	r1, r3
 8014bfe:	d002      	beq.n	8014c06 <setvbuf+0x52>
 8014c00:	4630      	mov	r0, r6
 8014c02:	f002 ffdd 	bl	8017bc0 <_free_r>
 8014c06:	2300      	movs	r3, #0
 8014c08:	6363      	str	r3, [r4, #52]	; 0x34
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	61a3      	str	r3, [r4, #24]
 8014c0e:	6063      	str	r3, [r4, #4]
 8014c10:	89a3      	ldrh	r3, [r4, #12]
 8014c12:	061b      	lsls	r3, r3, #24
 8014c14:	d503      	bpl.n	8014c1e <setvbuf+0x6a>
 8014c16:	6921      	ldr	r1, [r4, #16]
 8014c18:	4630      	mov	r0, r6
 8014c1a:	f002 ffd1 	bl	8017bc0 <_free_r>
 8014c1e:	89a3      	ldrh	r3, [r4, #12]
 8014c20:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8014c24:	f023 0303 	bic.w	r3, r3, #3
 8014c28:	f1b8 0f02 	cmp.w	r8, #2
 8014c2c:	81a3      	strh	r3, [r4, #12]
 8014c2e:	d05d      	beq.n	8014cec <setvbuf+0x138>
 8014c30:	ab01      	add	r3, sp, #4
 8014c32:	466a      	mov	r2, sp
 8014c34:	4621      	mov	r1, r4
 8014c36:	4630      	mov	r0, r6
 8014c38:	f002 fb36 	bl	80172a8 <__swhatbuf_r>
 8014c3c:	89a3      	ldrh	r3, [r4, #12]
 8014c3e:	4318      	orrs	r0, r3
 8014c40:	81a0      	strh	r0, [r4, #12]
 8014c42:	bb2d      	cbnz	r5, 8014c90 <setvbuf+0xdc>
 8014c44:	9d00      	ldr	r5, [sp, #0]
 8014c46:	4628      	mov	r0, r5
 8014c48:	f002 fb92 	bl	8017370 <malloc>
 8014c4c:	4607      	mov	r7, r0
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	d14e      	bne.n	8014cf0 <setvbuf+0x13c>
 8014c52:	f8dd 9000 	ldr.w	r9, [sp]
 8014c56:	45a9      	cmp	r9, r5
 8014c58:	d13c      	bne.n	8014cd4 <setvbuf+0x120>
 8014c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c5e:	89a3      	ldrh	r3, [r4, #12]
 8014c60:	f043 0302 	orr.w	r3, r3, #2
 8014c64:	81a3      	strh	r3, [r4, #12]
 8014c66:	2300      	movs	r3, #0
 8014c68:	60a3      	str	r3, [r4, #8]
 8014c6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014c6e:	6023      	str	r3, [r4, #0]
 8014c70:	6123      	str	r3, [r4, #16]
 8014c72:	2301      	movs	r3, #1
 8014c74:	6163      	str	r3, [r4, #20]
 8014c76:	b003      	add	sp, #12
 8014c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c7c:	4b22      	ldr	r3, [pc, #136]	; (8014d08 <setvbuf+0x154>)
 8014c7e:	429c      	cmp	r4, r3
 8014c80:	d101      	bne.n	8014c86 <setvbuf+0xd2>
 8014c82:	68b4      	ldr	r4, [r6, #8]
 8014c84:	e7a8      	b.n	8014bd8 <setvbuf+0x24>
 8014c86:	4b21      	ldr	r3, [pc, #132]	; (8014d0c <setvbuf+0x158>)
 8014c88:	429c      	cmp	r4, r3
 8014c8a:	bf08      	it	eq
 8014c8c:	68f4      	ldreq	r4, [r6, #12]
 8014c8e:	e7a3      	b.n	8014bd8 <setvbuf+0x24>
 8014c90:	2f00      	cmp	r7, #0
 8014c92:	d0d8      	beq.n	8014c46 <setvbuf+0x92>
 8014c94:	69b3      	ldr	r3, [r6, #24]
 8014c96:	b913      	cbnz	r3, 8014c9e <setvbuf+0xea>
 8014c98:	4630      	mov	r0, r6
 8014c9a:	f001 ff17 	bl	8016acc <__sinit>
 8014c9e:	f1b8 0f01 	cmp.w	r8, #1
 8014ca2:	bf08      	it	eq
 8014ca4:	89a3      	ldrheq	r3, [r4, #12]
 8014ca6:	6027      	str	r7, [r4, #0]
 8014ca8:	bf04      	itt	eq
 8014caa:	f043 0301 	orreq.w	r3, r3, #1
 8014cae:	81a3      	strheq	r3, [r4, #12]
 8014cb0:	89a3      	ldrh	r3, [r4, #12]
 8014cb2:	f013 0008 	ands.w	r0, r3, #8
 8014cb6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8014cba:	d01b      	beq.n	8014cf4 <setvbuf+0x140>
 8014cbc:	f013 0001 	ands.w	r0, r3, #1
 8014cc0:	bf18      	it	ne
 8014cc2:	426d      	negne	r5, r5
 8014cc4:	f04f 0300 	mov.w	r3, #0
 8014cc8:	bf1d      	ittte	ne
 8014cca:	60a3      	strne	r3, [r4, #8]
 8014ccc:	61a5      	strne	r5, [r4, #24]
 8014cce:	4618      	movne	r0, r3
 8014cd0:	60a5      	streq	r5, [r4, #8]
 8014cd2:	e7d0      	b.n	8014c76 <setvbuf+0xc2>
 8014cd4:	4648      	mov	r0, r9
 8014cd6:	f002 fb4b 	bl	8017370 <malloc>
 8014cda:	4607      	mov	r7, r0
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d0bc      	beq.n	8014c5a <setvbuf+0xa6>
 8014ce0:	89a3      	ldrh	r3, [r4, #12]
 8014ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ce6:	81a3      	strh	r3, [r4, #12]
 8014ce8:	464d      	mov	r5, r9
 8014cea:	e7d3      	b.n	8014c94 <setvbuf+0xe0>
 8014cec:	2000      	movs	r0, #0
 8014cee:	e7b6      	b.n	8014c5e <setvbuf+0xaa>
 8014cf0:	46a9      	mov	r9, r5
 8014cf2:	e7f5      	b.n	8014ce0 <setvbuf+0x12c>
 8014cf4:	60a0      	str	r0, [r4, #8]
 8014cf6:	e7be      	b.n	8014c76 <setvbuf+0xc2>
 8014cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8014cfc:	e7bb      	b.n	8014c76 <setvbuf+0xc2>
 8014cfe:	bf00      	nop
 8014d00:	20000024 	.word	0x20000024
 8014d04:	08019268 	.word	0x08019268
 8014d08:	08019288 	.word	0x08019288
 8014d0c:	08019248 	.word	0x08019248

08014d10 <nanf>:
 8014d10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014d18 <nanf+0x8>
 8014d14:	4770      	bx	lr
 8014d16:	bf00      	nop
 8014d18:	7fc00000 	.word	0x7fc00000

08014d1c <siprintf>:
 8014d1c:	b40e      	push	{r1, r2, r3}
 8014d1e:	b500      	push	{lr}
 8014d20:	b09c      	sub	sp, #112	; 0x70
 8014d22:	ab1d      	add	r3, sp, #116	; 0x74
 8014d24:	9002      	str	r0, [sp, #8]
 8014d26:	9006      	str	r0, [sp, #24]
 8014d28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014d2c:	4809      	ldr	r0, [pc, #36]	; (8014d54 <siprintf+0x38>)
 8014d2e:	9107      	str	r1, [sp, #28]
 8014d30:	9104      	str	r1, [sp, #16]
 8014d32:	4909      	ldr	r1, [pc, #36]	; (8014d58 <siprintf+0x3c>)
 8014d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d38:	9105      	str	r1, [sp, #20]
 8014d3a:	6800      	ldr	r0, [r0, #0]
 8014d3c:	9301      	str	r3, [sp, #4]
 8014d3e:	a902      	add	r1, sp, #8
 8014d40:	f003 f840 	bl	8017dc4 <_svfiprintf_r>
 8014d44:	9b02      	ldr	r3, [sp, #8]
 8014d46:	2200      	movs	r2, #0
 8014d48:	701a      	strb	r2, [r3, #0]
 8014d4a:	b01c      	add	sp, #112	; 0x70
 8014d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d50:	b003      	add	sp, #12
 8014d52:	4770      	bx	lr
 8014d54:	20000024 	.word	0x20000024
 8014d58:	ffff0208 	.word	0xffff0208

08014d5c <sulp>:
 8014d5c:	b570      	push	{r4, r5, r6, lr}
 8014d5e:	4604      	mov	r4, r0
 8014d60:	460d      	mov	r5, r1
 8014d62:	ec45 4b10 	vmov	d0, r4, r5
 8014d66:	4616      	mov	r6, r2
 8014d68:	f002 fde8 	bl	801793c <__ulp>
 8014d6c:	ec51 0b10 	vmov	r0, r1, d0
 8014d70:	b17e      	cbz	r6, 8014d92 <sulp+0x36>
 8014d72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014d76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	dd09      	ble.n	8014d92 <sulp+0x36>
 8014d7e:	051b      	lsls	r3, r3, #20
 8014d80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014d84:	2400      	movs	r4, #0
 8014d86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014d8a:	4622      	mov	r2, r4
 8014d8c:	462b      	mov	r3, r5
 8014d8e:	f7f3 fb6b 	bl	8008468 <__aeabi_dmul>
 8014d92:	bd70      	pop	{r4, r5, r6, pc}
 8014d94:	0000      	movs	r0, r0
	...

08014d98 <_strtod_l>:
 8014d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9c:	461f      	mov	r7, r3
 8014d9e:	b0a1      	sub	sp, #132	; 0x84
 8014da0:	2300      	movs	r3, #0
 8014da2:	4681      	mov	r9, r0
 8014da4:	4638      	mov	r0, r7
 8014da6:	460e      	mov	r6, r1
 8014da8:	9217      	str	r2, [sp, #92]	; 0x5c
 8014daa:	931c      	str	r3, [sp, #112]	; 0x70
 8014dac:	f002 fa6c 	bl	8017288 <__localeconv_l>
 8014db0:	4680      	mov	r8, r0
 8014db2:	6800      	ldr	r0, [r0, #0]
 8014db4:	f7f3 f944 	bl	8008040 <strlen>
 8014db8:	f04f 0a00 	mov.w	sl, #0
 8014dbc:	4604      	mov	r4, r0
 8014dbe:	f04f 0b00 	mov.w	fp, #0
 8014dc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8014dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014dc6:	781a      	ldrb	r2, [r3, #0]
 8014dc8:	2a0d      	cmp	r2, #13
 8014dca:	d832      	bhi.n	8014e32 <_strtod_l+0x9a>
 8014dcc:	2a09      	cmp	r2, #9
 8014dce:	d236      	bcs.n	8014e3e <_strtod_l+0xa6>
 8014dd0:	2a00      	cmp	r2, #0
 8014dd2:	d03e      	beq.n	8014e52 <_strtod_l+0xba>
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8014dd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014dda:	782b      	ldrb	r3, [r5, #0]
 8014ddc:	2b30      	cmp	r3, #48	; 0x30
 8014dde:	f040 80ac 	bne.w	8014f3a <_strtod_l+0x1a2>
 8014de2:	786b      	ldrb	r3, [r5, #1]
 8014de4:	2b58      	cmp	r3, #88	; 0x58
 8014de6:	d001      	beq.n	8014dec <_strtod_l+0x54>
 8014de8:	2b78      	cmp	r3, #120	; 0x78
 8014dea:	d167      	bne.n	8014ebc <_strtod_l+0x124>
 8014dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dee:	9301      	str	r3, [sp, #4]
 8014df0:	ab1c      	add	r3, sp, #112	; 0x70
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	9702      	str	r7, [sp, #8]
 8014df6:	ab1d      	add	r3, sp, #116	; 0x74
 8014df8:	4a88      	ldr	r2, [pc, #544]	; (801501c <_strtod_l+0x284>)
 8014dfa:	a91b      	add	r1, sp, #108	; 0x6c
 8014dfc:	4648      	mov	r0, r9
 8014dfe:	f001 ff5a 	bl	8016cb6 <__gethex>
 8014e02:	f010 0407 	ands.w	r4, r0, #7
 8014e06:	4606      	mov	r6, r0
 8014e08:	d005      	beq.n	8014e16 <_strtod_l+0x7e>
 8014e0a:	2c06      	cmp	r4, #6
 8014e0c:	d12b      	bne.n	8014e66 <_strtod_l+0xce>
 8014e0e:	3501      	adds	r5, #1
 8014e10:	2300      	movs	r3, #0
 8014e12:	951b      	str	r5, [sp, #108]	; 0x6c
 8014e14:	930d      	str	r3, [sp, #52]	; 0x34
 8014e16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	f040 859a 	bne.w	8015952 <_strtod_l+0xbba>
 8014e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e20:	b1e3      	cbz	r3, 8014e5c <_strtod_l+0xc4>
 8014e22:	4652      	mov	r2, sl
 8014e24:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014e28:	ec43 2b10 	vmov	d0, r2, r3
 8014e2c:	b021      	add	sp, #132	; 0x84
 8014e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e32:	2a2b      	cmp	r2, #43	; 0x2b
 8014e34:	d015      	beq.n	8014e62 <_strtod_l+0xca>
 8014e36:	2a2d      	cmp	r2, #45	; 0x2d
 8014e38:	d004      	beq.n	8014e44 <_strtod_l+0xac>
 8014e3a:	2a20      	cmp	r2, #32
 8014e3c:	d1ca      	bne.n	8014dd4 <_strtod_l+0x3c>
 8014e3e:	3301      	adds	r3, #1
 8014e40:	931b      	str	r3, [sp, #108]	; 0x6c
 8014e42:	e7bf      	b.n	8014dc4 <_strtod_l+0x2c>
 8014e44:	2201      	movs	r2, #1
 8014e46:	920d      	str	r2, [sp, #52]	; 0x34
 8014e48:	1c5a      	adds	r2, r3, #1
 8014e4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8014e4c:	785b      	ldrb	r3, [r3, #1]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d1c2      	bne.n	8014dd8 <_strtod_l+0x40>
 8014e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e54:	961b      	str	r6, [sp, #108]	; 0x6c
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	f040 8579 	bne.w	801594e <_strtod_l+0xbb6>
 8014e5c:	4652      	mov	r2, sl
 8014e5e:	465b      	mov	r3, fp
 8014e60:	e7e2      	b.n	8014e28 <_strtod_l+0x90>
 8014e62:	2200      	movs	r2, #0
 8014e64:	e7ef      	b.n	8014e46 <_strtod_l+0xae>
 8014e66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014e68:	b13a      	cbz	r2, 8014e7a <_strtod_l+0xe2>
 8014e6a:	2135      	movs	r1, #53	; 0x35
 8014e6c:	a81e      	add	r0, sp, #120	; 0x78
 8014e6e:	f002 fe5d 	bl	8017b2c <__copybits>
 8014e72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014e74:	4648      	mov	r0, r9
 8014e76:	f002 fac9 	bl	801740c <_Bfree>
 8014e7a:	3c01      	subs	r4, #1
 8014e7c:	2c04      	cmp	r4, #4
 8014e7e:	d806      	bhi.n	8014e8e <_strtod_l+0xf6>
 8014e80:	e8df f004 	tbb	[pc, r4]
 8014e84:	1714030a 	.word	0x1714030a
 8014e88:	0a          	.byte	0x0a
 8014e89:	00          	.byte	0x00
 8014e8a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8014e8e:	0730      	lsls	r0, r6, #28
 8014e90:	d5c1      	bpl.n	8014e16 <_strtod_l+0x7e>
 8014e92:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014e96:	e7be      	b.n	8014e16 <_strtod_l+0x7e>
 8014e98:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8014e9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014e9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014ea2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014ea6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014eaa:	e7f0      	b.n	8014e8e <_strtod_l+0xf6>
 8014eac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015020 <_strtod_l+0x288>
 8014eb0:	e7ed      	b.n	8014e8e <_strtod_l+0xf6>
 8014eb2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014eb6:	f04f 3aff 	mov.w	sl, #4294967295
 8014eba:	e7e8      	b.n	8014e8e <_strtod_l+0xf6>
 8014ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ebe:	1c5a      	adds	r2, r3, #1
 8014ec0:	921b      	str	r2, [sp, #108]	; 0x6c
 8014ec2:	785b      	ldrb	r3, [r3, #1]
 8014ec4:	2b30      	cmp	r3, #48	; 0x30
 8014ec6:	d0f9      	beq.n	8014ebc <_strtod_l+0x124>
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d0a4      	beq.n	8014e16 <_strtod_l+0x7e>
 8014ecc:	2301      	movs	r3, #1
 8014ece:	2500      	movs	r5, #0
 8014ed0:	9306      	str	r3, [sp, #24]
 8014ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ed4:	9308      	str	r3, [sp, #32]
 8014ed6:	9507      	str	r5, [sp, #28]
 8014ed8:	9505      	str	r5, [sp, #20]
 8014eda:	220a      	movs	r2, #10
 8014edc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014ede:	7807      	ldrb	r7, [r0, #0]
 8014ee0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014ee4:	b2d9      	uxtb	r1, r3
 8014ee6:	2909      	cmp	r1, #9
 8014ee8:	d929      	bls.n	8014f3e <_strtod_l+0x1a6>
 8014eea:	4622      	mov	r2, r4
 8014eec:	f8d8 1000 	ldr.w	r1, [r8]
 8014ef0:	f003 fd8b 	bl	8018a0a <strncmp>
 8014ef4:	2800      	cmp	r0, #0
 8014ef6:	d031      	beq.n	8014f5c <_strtod_l+0x1c4>
 8014ef8:	2000      	movs	r0, #0
 8014efa:	9c05      	ldr	r4, [sp, #20]
 8014efc:	9004      	str	r0, [sp, #16]
 8014efe:	463b      	mov	r3, r7
 8014f00:	4602      	mov	r2, r0
 8014f02:	2b65      	cmp	r3, #101	; 0x65
 8014f04:	d001      	beq.n	8014f0a <_strtod_l+0x172>
 8014f06:	2b45      	cmp	r3, #69	; 0x45
 8014f08:	d114      	bne.n	8014f34 <_strtod_l+0x19c>
 8014f0a:	b924      	cbnz	r4, 8014f16 <_strtod_l+0x17e>
 8014f0c:	b910      	cbnz	r0, 8014f14 <_strtod_l+0x17c>
 8014f0e:	9b06      	ldr	r3, [sp, #24]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d09e      	beq.n	8014e52 <_strtod_l+0xba>
 8014f14:	2400      	movs	r4, #0
 8014f16:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014f18:	1c73      	adds	r3, r6, #1
 8014f1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f1c:	7873      	ldrb	r3, [r6, #1]
 8014f1e:	2b2b      	cmp	r3, #43	; 0x2b
 8014f20:	d078      	beq.n	8015014 <_strtod_l+0x27c>
 8014f22:	2b2d      	cmp	r3, #45	; 0x2d
 8014f24:	d070      	beq.n	8015008 <_strtod_l+0x270>
 8014f26:	f04f 0c00 	mov.w	ip, #0
 8014f2a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8014f2e:	2f09      	cmp	r7, #9
 8014f30:	d97c      	bls.n	801502c <_strtod_l+0x294>
 8014f32:	961b      	str	r6, [sp, #108]	; 0x6c
 8014f34:	f04f 0e00 	mov.w	lr, #0
 8014f38:	e09a      	b.n	8015070 <_strtod_l+0x2d8>
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	e7c7      	b.n	8014ece <_strtod_l+0x136>
 8014f3e:	9905      	ldr	r1, [sp, #20]
 8014f40:	2908      	cmp	r1, #8
 8014f42:	bfdd      	ittte	le
 8014f44:	9907      	ldrle	r1, [sp, #28]
 8014f46:	fb02 3301 	mlale	r3, r2, r1, r3
 8014f4a:	9307      	strle	r3, [sp, #28]
 8014f4c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014f50:	9b05      	ldr	r3, [sp, #20]
 8014f52:	3001      	adds	r0, #1
 8014f54:	3301      	adds	r3, #1
 8014f56:	9305      	str	r3, [sp, #20]
 8014f58:	901b      	str	r0, [sp, #108]	; 0x6c
 8014f5a:	e7bf      	b.n	8014edc <_strtod_l+0x144>
 8014f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f5e:	191a      	adds	r2, r3, r4
 8014f60:	921b      	str	r2, [sp, #108]	; 0x6c
 8014f62:	9a05      	ldr	r2, [sp, #20]
 8014f64:	5d1b      	ldrb	r3, [r3, r4]
 8014f66:	2a00      	cmp	r2, #0
 8014f68:	d037      	beq.n	8014fda <_strtod_l+0x242>
 8014f6a:	9c05      	ldr	r4, [sp, #20]
 8014f6c:	4602      	mov	r2, r0
 8014f6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014f72:	2909      	cmp	r1, #9
 8014f74:	d913      	bls.n	8014f9e <_strtod_l+0x206>
 8014f76:	2101      	movs	r1, #1
 8014f78:	9104      	str	r1, [sp, #16]
 8014f7a:	e7c2      	b.n	8014f02 <_strtod_l+0x16a>
 8014f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f7e:	1c5a      	adds	r2, r3, #1
 8014f80:	921b      	str	r2, [sp, #108]	; 0x6c
 8014f82:	785b      	ldrb	r3, [r3, #1]
 8014f84:	3001      	adds	r0, #1
 8014f86:	2b30      	cmp	r3, #48	; 0x30
 8014f88:	d0f8      	beq.n	8014f7c <_strtod_l+0x1e4>
 8014f8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014f8e:	2a08      	cmp	r2, #8
 8014f90:	f200 84e4 	bhi.w	801595c <_strtod_l+0xbc4>
 8014f94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014f96:	9208      	str	r2, [sp, #32]
 8014f98:	4602      	mov	r2, r0
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014fa2:	f100 0101 	add.w	r1, r0, #1
 8014fa6:	d012      	beq.n	8014fce <_strtod_l+0x236>
 8014fa8:	440a      	add	r2, r1
 8014faa:	eb00 0c04 	add.w	ip, r0, r4
 8014fae:	4621      	mov	r1, r4
 8014fb0:	270a      	movs	r7, #10
 8014fb2:	458c      	cmp	ip, r1
 8014fb4:	d113      	bne.n	8014fde <_strtod_l+0x246>
 8014fb6:	1821      	adds	r1, r4, r0
 8014fb8:	2908      	cmp	r1, #8
 8014fba:	f104 0401 	add.w	r4, r4, #1
 8014fbe:	4404      	add	r4, r0
 8014fc0:	dc19      	bgt.n	8014ff6 <_strtod_l+0x25e>
 8014fc2:	9b07      	ldr	r3, [sp, #28]
 8014fc4:	210a      	movs	r1, #10
 8014fc6:	fb01 e303 	mla	r3, r1, r3, lr
 8014fca:	9307      	str	r3, [sp, #28]
 8014fcc:	2100      	movs	r1, #0
 8014fce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014fd0:	1c58      	adds	r0, r3, #1
 8014fd2:	901b      	str	r0, [sp, #108]	; 0x6c
 8014fd4:	785b      	ldrb	r3, [r3, #1]
 8014fd6:	4608      	mov	r0, r1
 8014fd8:	e7c9      	b.n	8014f6e <_strtod_l+0x1d6>
 8014fda:	9805      	ldr	r0, [sp, #20]
 8014fdc:	e7d3      	b.n	8014f86 <_strtod_l+0x1ee>
 8014fde:	2908      	cmp	r1, #8
 8014fe0:	f101 0101 	add.w	r1, r1, #1
 8014fe4:	dc03      	bgt.n	8014fee <_strtod_l+0x256>
 8014fe6:	9b07      	ldr	r3, [sp, #28]
 8014fe8:	437b      	muls	r3, r7
 8014fea:	9307      	str	r3, [sp, #28]
 8014fec:	e7e1      	b.n	8014fb2 <_strtod_l+0x21a>
 8014fee:	2910      	cmp	r1, #16
 8014ff0:	bfd8      	it	le
 8014ff2:	437d      	mulle	r5, r7
 8014ff4:	e7dd      	b.n	8014fb2 <_strtod_l+0x21a>
 8014ff6:	2c10      	cmp	r4, #16
 8014ff8:	bfdc      	itt	le
 8014ffa:	210a      	movle	r1, #10
 8014ffc:	fb01 e505 	mlale	r5, r1, r5, lr
 8015000:	e7e4      	b.n	8014fcc <_strtod_l+0x234>
 8015002:	2301      	movs	r3, #1
 8015004:	9304      	str	r3, [sp, #16]
 8015006:	e781      	b.n	8014f0c <_strtod_l+0x174>
 8015008:	f04f 0c01 	mov.w	ip, #1
 801500c:	1cb3      	adds	r3, r6, #2
 801500e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015010:	78b3      	ldrb	r3, [r6, #2]
 8015012:	e78a      	b.n	8014f2a <_strtod_l+0x192>
 8015014:	f04f 0c00 	mov.w	ip, #0
 8015018:	e7f8      	b.n	801500c <_strtod_l+0x274>
 801501a:	bf00      	nop
 801501c:	080191e8 	.word	0x080191e8
 8015020:	7ff00000 	.word	0x7ff00000
 8015024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015026:	1c5f      	adds	r7, r3, #1
 8015028:	971b      	str	r7, [sp, #108]	; 0x6c
 801502a:	785b      	ldrb	r3, [r3, #1]
 801502c:	2b30      	cmp	r3, #48	; 0x30
 801502e:	d0f9      	beq.n	8015024 <_strtod_l+0x28c>
 8015030:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015034:	2f08      	cmp	r7, #8
 8015036:	f63f af7d 	bhi.w	8014f34 <_strtod_l+0x19c>
 801503a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801503e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015040:	930a      	str	r3, [sp, #40]	; 0x28
 8015042:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015044:	1c5f      	adds	r7, r3, #1
 8015046:	971b      	str	r7, [sp, #108]	; 0x6c
 8015048:	785b      	ldrb	r3, [r3, #1]
 801504a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801504e:	f1b8 0f09 	cmp.w	r8, #9
 8015052:	d937      	bls.n	80150c4 <_strtod_l+0x32c>
 8015054:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015056:	1a7f      	subs	r7, r7, r1
 8015058:	2f08      	cmp	r7, #8
 801505a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801505e:	dc37      	bgt.n	80150d0 <_strtod_l+0x338>
 8015060:	45be      	cmp	lr, r7
 8015062:	bfa8      	it	ge
 8015064:	46be      	movge	lr, r7
 8015066:	f1bc 0f00 	cmp.w	ip, #0
 801506a:	d001      	beq.n	8015070 <_strtod_l+0x2d8>
 801506c:	f1ce 0e00 	rsb	lr, lr, #0
 8015070:	2c00      	cmp	r4, #0
 8015072:	d151      	bne.n	8015118 <_strtod_l+0x380>
 8015074:	2800      	cmp	r0, #0
 8015076:	f47f aece 	bne.w	8014e16 <_strtod_l+0x7e>
 801507a:	9a06      	ldr	r2, [sp, #24]
 801507c:	2a00      	cmp	r2, #0
 801507e:	f47f aeca 	bne.w	8014e16 <_strtod_l+0x7e>
 8015082:	9a04      	ldr	r2, [sp, #16]
 8015084:	2a00      	cmp	r2, #0
 8015086:	f47f aee4 	bne.w	8014e52 <_strtod_l+0xba>
 801508a:	2b4e      	cmp	r3, #78	; 0x4e
 801508c:	d027      	beq.n	80150de <_strtod_l+0x346>
 801508e:	dc21      	bgt.n	80150d4 <_strtod_l+0x33c>
 8015090:	2b49      	cmp	r3, #73	; 0x49
 8015092:	f47f aede 	bne.w	8014e52 <_strtod_l+0xba>
 8015096:	49a0      	ldr	r1, [pc, #640]	; (8015318 <_strtod_l+0x580>)
 8015098:	a81b      	add	r0, sp, #108	; 0x6c
 801509a:	f002 f83f 	bl	801711c <__match>
 801509e:	2800      	cmp	r0, #0
 80150a0:	f43f aed7 	beq.w	8014e52 <_strtod_l+0xba>
 80150a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80150a6:	499d      	ldr	r1, [pc, #628]	; (801531c <_strtod_l+0x584>)
 80150a8:	3b01      	subs	r3, #1
 80150aa:	a81b      	add	r0, sp, #108	; 0x6c
 80150ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80150ae:	f002 f835 	bl	801711c <__match>
 80150b2:	b910      	cbnz	r0, 80150ba <_strtod_l+0x322>
 80150b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80150b6:	3301      	adds	r3, #1
 80150b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80150ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015330 <_strtod_l+0x598>
 80150be:	f04f 0a00 	mov.w	sl, #0
 80150c2:	e6a8      	b.n	8014e16 <_strtod_l+0x7e>
 80150c4:	210a      	movs	r1, #10
 80150c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80150ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80150ce:	e7b8      	b.n	8015042 <_strtod_l+0x2aa>
 80150d0:	46be      	mov	lr, r7
 80150d2:	e7c8      	b.n	8015066 <_strtod_l+0x2ce>
 80150d4:	2b69      	cmp	r3, #105	; 0x69
 80150d6:	d0de      	beq.n	8015096 <_strtod_l+0x2fe>
 80150d8:	2b6e      	cmp	r3, #110	; 0x6e
 80150da:	f47f aeba 	bne.w	8014e52 <_strtod_l+0xba>
 80150de:	4990      	ldr	r1, [pc, #576]	; (8015320 <_strtod_l+0x588>)
 80150e0:	a81b      	add	r0, sp, #108	; 0x6c
 80150e2:	f002 f81b 	bl	801711c <__match>
 80150e6:	2800      	cmp	r0, #0
 80150e8:	f43f aeb3 	beq.w	8014e52 <_strtod_l+0xba>
 80150ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	2b28      	cmp	r3, #40	; 0x28
 80150f2:	d10e      	bne.n	8015112 <_strtod_l+0x37a>
 80150f4:	aa1e      	add	r2, sp, #120	; 0x78
 80150f6:	498b      	ldr	r1, [pc, #556]	; (8015324 <_strtod_l+0x58c>)
 80150f8:	a81b      	add	r0, sp, #108	; 0x6c
 80150fa:	f002 f823 	bl	8017144 <__hexnan>
 80150fe:	2805      	cmp	r0, #5
 8015100:	d107      	bne.n	8015112 <_strtod_l+0x37a>
 8015102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015104:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015108:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801510c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015110:	e681      	b.n	8014e16 <_strtod_l+0x7e>
 8015112:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015338 <_strtod_l+0x5a0>
 8015116:	e7d2      	b.n	80150be <_strtod_l+0x326>
 8015118:	ebae 0302 	sub.w	r3, lr, r2
 801511c:	9306      	str	r3, [sp, #24]
 801511e:	9b05      	ldr	r3, [sp, #20]
 8015120:	9807      	ldr	r0, [sp, #28]
 8015122:	2b00      	cmp	r3, #0
 8015124:	bf08      	it	eq
 8015126:	4623      	moveq	r3, r4
 8015128:	2c10      	cmp	r4, #16
 801512a:	9305      	str	r3, [sp, #20]
 801512c:	46a0      	mov	r8, r4
 801512e:	bfa8      	it	ge
 8015130:	f04f 0810 	movge.w	r8, #16
 8015134:	f7f3 f91e 	bl	8008374 <__aeabi_ui2d>
 8015138:	2c09      	cmp	r4, #9
 801513a:	4682      	mov	sl, r0
 801513c:	468b      	mov	fp, r1
 801513e:	dc13      	bgt.n	8015168 <_strtod_l+0x3d0>
 8015140:	9b06      	ldr	r3, [sp, #24]
 8015142:	2b00      	cmp	r3, #0
 8015144:	f43f ae67 	beq.w	8014e16 <_strtod_l+0x7e>
 8015148:	9b06      	ldr	r3, [sp, #24]
 801514a:	dd7a      	ble.n	8015242 <_strtod_l+0x4aa>
 801514c:	2b16      	cmp	r3, #22
 801514e:	dc61      	bgt.n	8015214 <_strtod_l+0x47c>
 8015150:	4a75      	ldr	r2, [pc, #468]	; (8015328 <_strtod_l+0x590>)
 8015152:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015156:	e9de 0100 	ldrd	r0, r1, [lr]
 801515a:	4652      	mov	r2, sl
 801515c:	465b      	mov	r3, fp
 801515e:	f7f3 f983 	bl	8008468 <__aeabi_dmul>
 8015162:	4682      	mov	sl, r0
 8015164:	468b      	mov	fp, r1
 8015166:	e656      	b.n	8014e16 <_strtod_l+0x7e>
 8015168:	4b6f      	ldr	r3, [pc, #444]	; (8015328 <_strtod_l+0x590>)
 801516a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801516e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015172:	f7f3 f979 	bl	8008468 <__aeabi_dmul>
 8015176:	4606      	mov	r6, r0
 8015178:	4628      	mov	r0, r5
 801517a:	460f      	mov	r7, r1
 801517c:	f7f3 f8fa 	bl	8008374 <__aeabi_ui2d>
 8015180:	4602      	mov	r2, r0
 8015182:	460b      	mov	r3, r1
 8015184:	4630      	mov	r0, r6
 8015186:	4639      	mov	r1, r7
 8015188:	f7f2 ffb8 	bl	80080fc <__adddf3>
 801518c:	2c0f      	cmp	r4, #15
 801518e:	4682      	mov	sl, r0
 8015190:	468b      	mov	fp, r1
 8015192:	ddd5      	ble.n	8015140 <_strtod_l+0x3a8>
 8015194:	9b06      	ldr	r3, [sp, #24]
 8015196:	eba4 0808 	sub.w	r8, r4, r8
 801519a:	4498      	add	r8, r3
 801519c:	f1b8 0f00 	cmp.w	r8, #0
 80151a0:	f340 8096 	ble.w	80152d0 <_strtod_l+0x538>
 80151a4:	f018 030f 	ands.w	r3, r8, #15
 80151a8:	d00a      	beq.n	80151c0 <_strtod_l+0x428>
 80151aa:	495f      	ldr	r1, [pc, #380]	; (8015328 <_strtod_l+0x590>)
 80151ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80151b0:	4652      	mov	r2, sl
 80151b2:	465b      	mov	r3, fp
 80151b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151b8:	f7f3 f956 	bl	8008468 <__aeabi_dmul>
 80151bc:	4682      	mov	sl, r0
 80151be:	468b      	mov	fp, r1
 80151c0:	f038 080f 	bics.w	r8, r8, #15
 80151c4:	d073      	beq.n	80152ae <_strtod_l+0x516>
 80151c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80151ca:	dd47      	ble.n	801525c <_strtod_l+0x4c4>
 80151cc:	2400      	movs	r4, #0
 80151ce:	46a0      	mov	r8, r4
 80151d0:	9407      	str	r4, [sp, #28]
 80151d2:	9405      	str	r4, [sp, #20]
 80151d4:	2322      	movs	r3, #34	; 0x22
 80151d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015330 <_strtod_l+0x598>
 80151da:	f8c9 3000 	str.w	r3, [r9]
 80151de:	f04f 0a00 	mov.w	sl, #0
 80151e2:	9b07      	ldr	r3, [sp, #28]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f43f ae16 	beq.w	8014e16 <_strtod_l+0x7e>
 80151ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80151ec:	4648      	mov	r0, r9
 80151ee:	f002 f90d 	bl	801740c <_Bfree>
 80151f2:	9905      	ldr	r1, [sp, #20]
 80151f4:	4648      	mov	r0, r9
 80151f6:	f002 f909 	bl	801740c <_Bfree>
 80151fa:	4641      	mov	r1, r8
 80151fc:	4648      	mov	r0, r9
 80151fe:	f002 f905 	bl	801740c <_Bfree>
 8015202:	9907      	ldr	r1, [sp, #28]
 8015204:	4648      	mov	r0, r9
 8015206:	f002 f901 	bl	801740c <_Bfree>
 801520a:	4621      	mov	r1, r4
 801520c:	4648      	mov	r0, r9
 801520e:	f002 f8fd 	bl	801740c <_Bfree>
 8015212:	e600      	b.n	8014e16 <_strtod_l+0x7e>
 8015214:	9a06      	ldr	r2, [sp, #24]
 8015216:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801521a:	4293      	cmp	r3, r2
 801521c:	dbba      	blt.n	8015194 <_strtod_l+0x3fc>
 801521e:	4d42      	ldr	r5, [pc, #264]	; (8015328 <_strtod_l+0x590>)
 8015220:	f1c4 040f 	rsb	r4, r4, #15
 8015224:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015228:	4652      	mov	r2, sl
 801522a:	465b      	mov	r3, fp
 801522c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015230:	f7f3 f91a 	bl	8008468 <__aeabi_dmul>
 8015234:	9b06      	ldr	r3, [sp, #24]
 8015236:	1b1c      	subs	r4, r3, r4
 8015238:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801523c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015240:	e78d      	b.n	801515e <_strtod_l+0x3c6>
 8015242:	f113 0f16 	cmn.w	r3, #22
 8015246:	dba5      	blt.n	8015194 <_strtod_l+0x3fc>
 8015248:	4a37      	ldr	r2, [pc, #220]	; (8015328 <_strtod_l+0x590>)
 801524a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801524e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015252:	4650      	mov	r0, sl
 8015254:	4659      	mov	r1, fp
 8015256:	f7f3 fa31 	bl	80086bc <__aeabi_ddiv>
 801525a:	e782      	b.n	8015162 <_strtod_l+0x3ca>
 801525c:	2300      	movs	r3, #0
 801525e:	4e33      	ldr	r6, [pc, #204]	; (801532c <_strtod_l+0x594>)
 8015260:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015264:	4650      	mov	r0, sl
 8015266:	4659      	mov	r1, fp
 8015268:	461d      	mov	r5, r3
 801526a:	f1b8 0f01 	cmp.w	r8, #1
 801526e:	dc21      	bgt.n	80152b4 <_strtod_l+0x51c>
 8015270:	b10b      	cbz	r3, 8015276 <_strtod_l+0x4de>
 8015272:	4682      	mov	sl, r0
 8015274:	468b      	mov	fp, r1
 8015276:	4b2d      	ldr	r3, [pc, #180]	; (801532c <_strtod_l+0x594>)
 8015278:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801527c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015280:	4652      	mov	r2, sl
 8015282:	465b      	mov	r3, fp
 8015284:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015288:	f7f3 f8ee 	bl	8008468 <__aeabi_dmul>
 801528c:	4b28      	ldr	r3, [pc, #160]	; (8015330 <_strtod_l+0x598>)
 801528e:	460a      	mov	r2, r1
 8015290:	400b      	ands	r3, r1
 8015292:	4928      	ldr	r1, [pc, #160]	; (8015334 <_strtod_l+0x59c>)
 8015294:	428b      	cmp	r3, r1
 8015296:	4682      	mov	sl, r0
 8015298:	d898      	bhi.n	80151cc <_strtod_l+0x434>
 801529a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801529e:	428b      	cmp	r3, r1
 80152a0:	bf86      	itte	hi
 80152a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801533c <_strtod_l+0x5a4>
 80152a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80152aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80152ae:	2300      	movs	r3, #0
 80152b0:	9304      	str	r3, [sp, #16]
 80152b2:	e077      	b.n	80153a4 <_strtod_l+0x60c>
 80152b4:	f018 0f01 	tst.w	r8, #1
 80152b8:	d006      	beq.n	80152c8 <_strtod_l+0x530>
 80152ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80152be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152c2:	f7f3 f8d1 	bl	8008468 <__aeabi_dmul>
 80152c6:	2301      	movs	r3, #1
 80152c8:	3501      	adds	r5, #1
 80152ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80152ce:	e7cc      	b.n	801526a <_strtod_l+0x4d2>
 80152d0:	d0ed      	beq.n	80152ae <_strtod_l+0x516>
 80152d2:	f1c8 0800 	rsb	r8, r8, #0
 80152d6:	f018 020f 	ands.w	r2, r8, #15
 80152da:	d00a      	beq.n	80152f2 <_strtod_l+0x55a>
 80152dc:	4b12      	ldr	r3, [pc, #72]	; (8015328 <_strtod_l+0x590>)
 80152de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80152e2:	4650      	mov	r0, sl
 80152e4:	4659      	mov	r1, fp
 80152e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ea:	f7f3 f9e7 	bl	80086bc <__aeabi_ddiv>
 80152ee:	4682      	mov	sl, r0
 80152f0:	468b      	mov	fp, r1
 80152f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80152f6:	d0da      	beq.n	80152ae <_strtod_l+0x516>
 80152f8:	f1b8 0f1f 	cmp.w	r8, #31
 80152fc:	dd20      	ble.n	8015340 <_strtod_l+0x5a8>
 80152fe:	2400      	movs	r4, #0
 8015300:	46a0      	mov	r8, r4
 8015302:	9407      	str	r4, [sp, #28]
 8015304:	9405      	str	r4, [sp, #20]
 8015306:	2322      	movs	r3, #34	; 0x22
 8015308:	f04f 0a00 	mov.w	sl, #0
 801530c:	f04f 0b00 	mov.w	fp, #0
 8015310:	f8c9 3000 	str.w	r3, [r9]
 8015314:	e765      	b.n	80151e2 <_strtod_l+0x44a>
 8015316:	bf00      	nop
 8015318:	080191b5 	.word	0x080191b5
 801531c:	0801923b 	.word	0x0801923b
 8015320:	080191bd 	.word	0x080191bd
 8015324:	080191fc 	.word	0x080191fc
 8015328:	080192e0 	.word	0x080192e0
 801532c:	080192b8 	.word	0x080192b8
 8015330:	7ff00000 	.word	0x7ff00000
 8015334:	7ca00000 	.word	0x7ca00000
 8015338:	fff80000 	.word	0xfff80000
 801533c:	7fefffff 	.word	0x7fefffff
 8015340:	f018 0310 	ands.w	r3, r8, #16
 8015344:	bf18      	it	ne
 8015346:	236a      	movne	r3, #106	; 0x6a
 8015348:	4da0      	ldr	r5, [pc, #640]	; (80155cc <_strtod_l+0x834>)
 801534a:	9304      	str	r3, [sp, #16]
 801534c:	4650      	mov	r0, sl
 801534e:	4659      	mov	r1, fp
 8015350:	2300      	movs	r3, #0
 8015352:	f1b8 0f00 	cmp.w	r8, #0
 8015356:	f300 810a 	bgt.w	801556e <_strtod_l+0x7d6>
 801535a:	b10b      	cbz	r3, 8015360 <_strtod_l+0x5c8>
 801535c:	4682      	mov	sl, r0
 801535e:	468b      	mov	fp, r1
 8015360:	9b04      	ldr	r3, [sp, #16]
 8015362:	b1bb      	cbz	r3, 8015394 <_strtod_l+0x5fc>
 8015364:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015368:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801536c:	2b00      	cmp	r3, #0
 801536e:	4659      	mov	r1, fp
 8015370:	dd10      	ble.n	8015394 <_strtod_l+0x5fc>
 8015372:	2b1f      	cmp	r3, #31
 8015374:	f340 8107 	ble.w	8015586 <_strtod_l+0x7ee>
 8015378:	2b34      	cmp	r3, #52	; 0x34
 801537a:	bfde      	ittt	le
 801537c:	3b20      	suble	r3, #32
 801537e:	f04f 32ff 	movle.w	r2, #4294967295
 8015382:	fa02 f303 	lslle.w	r3, r2, r3
 8015386:	f04f 0a00 	mov.w	sl, #0
 801538a:	bfcc      	ite	gt
 801538c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015390:	ea03 0b01 	andle.w	fp, r3, r1
 8015394:	2200      	movs	r2, #0
 8015396:	2300      	movs	r3, #0
 8015398:	4650      	mov	r0, sl
 801539a:	4659      	mov	r1, fp
 801539c:	f7f3 facc 	bl	8008938 <__aeabi_dcmpeq>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	d1ac      	bne.n	80152fe <_strtod_l+0x566>
 80153a4:	9b07      	ldr	r3, [sp, #28]
 80153a6:	9300      	str	r3, [sp, #0]
 80153a8:	9a05      	ldr	r2, [sp, #20]
 80153aa:	9908      	ldr	r1, [sp, #32]
 80153ac:	4623      	mov	r3, r4
 80153ae:	4648      	mov	r0, r9
 80153b0:	f002 f87e 	bl	80174b0 <__s2b>
 80153b4:	9007      	str	r0, [sp, #28]
 80153b6:	2800      	cmp	r0, #0
 80153b8:	f43f af08 	beq.w	80151cc <_strtod_l+0x434>
 80153bc:	9a06      	ldr	r2, [sp, #24]
 80153be:	9b06      	ldr	r3, [sp, #24]
 80153c0:	2a00      	cmp	r2, #0
 80153c2:	f1c3 0300 	rsb	r3, r3, #0
 80153c6:	bfa8      	it	ge
 80153c8:	2300      	movge	r3, #0
 80153ca:	930e      	str	r3, [sp, #56]	; 0x38
 80153cc:	2400      	movs	r4, #0
 80153ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80153d2:	9316      	str	r3, [sp, #88]	; 0x58
 80153d4:	46a0      	mov	r8, r4
 80153d6:	9b07      	ldr	r3, [sp, #28]
 80153d8:	4648      	mov	r0, r9
 80153da:	6859      	ldr	r1, [r3, #4]
 80153dc:	f001 ffe2 	bl	80173a4 <_Balloc>
 80153e0:	9005      	str	r0, [sp, #20]
 80153e2:	2800      	cmp	r0, #0
 80153e4:	f43f aef6 	beq.w	80151d4 <_strtod_l+0x43c>
 80153e8:	9b07      	ldr	r3, [sp, #28]
 80153ea:	691a      	ldr	r2, [r3, #16]
 80153ec:	3202      	adds	r2, #2
 80153ee:	f103 010c 	add.w	r1, r3, #12
 80153f2:	0092      	lsls	r2, r2, #2
 80153f4:	300c      	adds	r0, #12
 80153f6:	f7fe fcef 	bl	8013dd8 <memcpy>
 80153fa:	aa1e      	add	r2, sp, #120	; 0x78
 80153fc:	a91d      	add	r1, sp, #116	; 0x74
 80153fe:	ec4b ab10 	vmov	d0, sl, fp
 8015402:	4648      	mov	r0, r9
 8015404:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015408:	f002 fb0e 	bl	8017a28 <__d2b>
 801540c:	901c      	str	r0, [sp, #112]	; 0x70
 801540e:	2800      	cmp	r0, #0
 8015410:	f43f aee0 	beq.w	80151d4 <_strtod_l+0x43c>
 8015414:	2101      	movs	r1, #1
 8015416:	4648      	mov	r0, r9
 8015418:	f002 f8d6 	bl	80175c8 <__i2b>
 801541c:	4680      	mov	r8, r0
 801541e:	2800      	cmp	r0, #0
 8015420:	f43f aed8 	beq.w	80151d4 <_strtod_l+0x43c>
 8015424:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015426:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015428:	2e00      	cmp	r6, #0
 801542a:	bfab      	itete	ge
 801542c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801542e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015430:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015432:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015434:	bfac      	ite	ge
 8015436:	18f7      	addge	r7, r6, r3
 8015438:	1b9d      	sublt	r5, r3, r6
 801543a:	9b04      	ldr	r3, [sp, #16]
 801543c:	1af6      	subs	r6, r6, r3
 801543e:	4416      	add	r6, r2
 8015440:	4b63      	ldr	r3, [pc, #396]	; (80155d0 <_strtod_l+0x838>)
 8015442:	3e01      	subs	r6, #1
 8015444:	429e      	cmp	r6, r3
 8015446:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801544a:	f280 80af 	bge.w	80155ac <_strtod_l+0x814>
 801544e:	1b9b      	subs	r3, r3, r6
 8015450:	2b1f      	cmp	r3, #31
 8015452:	eba2 0203 	sub.w	r2, r2, r3
 8015456:	f04f 0101 	mov.w	r1, #1
 801545a:	f300 809b 	bgt.w	8015594 <_strtod_l+0x7fc>
 801545e:	fa01 f303 	lsl.w	r3, r1, r3
 8015462:	930f      	str	r3, [sp, #60]	; 0x3c
 8015464:	2300      	movs	r3, #0
 8015466:	930a      	str	r3, [sp, #40]	; 0x28
 8015468:	18be      	adds	r6, r7, r2
 801546a:	9b04      	ldr	r3, [sp, #16]
 801546c:	42b7      	cmp	r7, r6
 801546e:	4415      	add	r5, r2
 8015470:	441d      	add	r5, r3
 8015472:	463b      	mov	r3, r7
 8015474:	bfa8      	it	ge
 8015476:	4633      	movge	r3, r6
 8015478:	42ab      	cmp	r3, r5
 801547a:	bfa8      	it	ge
 801547c:	462b      	movge	r3, r5
 801547e:	2b00      	cmp	r3, #0
 8015480:	bfc2      	ittt	gt
 8015482:	1af6      	subgt	r6, r6, r3
 8015484:	1aed      	subgt	r5, r5, r3
 8015486:	1aff      	subgt	r7, r7, r3
 8015488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801548a:	b1bb      	cbz	r3, 80154bc <_strtod_l+0x724>
 801548c:	4641      	mov	r1, r8
 801548e:	461a      	mov	r2, r3
 8015490:	4648      	mov	r0, r9
 8015492:	f002 f939 	bl	8017708 <__pow5mult>
 8015496:	4680      	mov	r8, r0
 8015498:	2800      	cmp	r0, #0
 801549a:	f43f ae9b 	beq.w	80151d4 <_strtod_l+0x43c>
 801549e:	4601      	mov	r1, r0
 80154a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80154a2:	4648      	mov	r0, r9
 80154a4:	f002 f899 	bl	80175da <__multiply>
 80154a8:	900c      	str	r0, [sp, #48]	; 0x30
 80154aa:	2800      	cmp	r0, #0
 80154ac:	f43f ae92 	beq.w	80151d4 <_strtod_l+0x43c>
 80154b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80154b2:	4648      	mov	r0, r9
 80154b4:	f001 ffaa 	bl	801740c <_Bfree>
 80154b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154ba:	931c      	str	r3, [sp, #112]	; 0x70
 80154bc:	2e00      	cmp	r6, #0
 80154be:	dc7a      	bgt.n	80155b6 <_strtod_l+0x81e>
 80154c0:	9b06      	ldr	r3, [sp, #24]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	dd08      	ble.n	80154d8 <_strtod_l+0x740>
 80154c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80154c8:	9905      	ldr	r1, [sp, #20]
 80154ca:	4648      	mov	r0, r9
 80154cc:	f002 f91c 	bl	8017708 <__pow5mult>
 80154d0:	9005      	str	r0, [sp, #20]
 80154d2:	2800      	cmp	r0, #0
 80154d4:	f43f ae7e 	beq.w	80151d4 <_strtod_l+0x43c>
 80154d8:	2d00      	cmp	r5, #0
 80154da:	dd08      	ble.n	80154ee <_strtod_l+0x756>
 80154dc:	462a      	mov	r2, r5
 80154de:	9905      	ldr	r1, [sp, #20]
 80154e0:	4648      	mov	r0, r9
 80154e2:	f002 f95f 	bl	80177a4 <__lshift>
 80154e6:	9005      	str	r0, [sp, #20]
 80154e8:	2800      	cmp	r0, #0
 80154ea:	f43f ae73 	beq.w	80151d4 <_strtod_l+0x43c>
 80154ee:	2f00      	cmp	r7, #0
 80154f0:	dd08      	ble.n	8015504 <_strtod_l+0x76c>
 80154f2:	4641      	mov	r1, r8
 80154f4:	463a      	mov	r2, r7
 80154f6:	4648      	mov	r0, r9
 80154f8:	f002 f954 	bl	80177a4 <__lshift>
 80154fc:	4680      	mov	r8, r0
 80154fe:	2800      	cmp	r0, #0
 8015500:	f43f ae68 	beq.w	80151d4 <_strtod_l+0x43c>
 8015504:	9a05      	ldr	r2, [sp, #20]
 8015506:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015508:	4648      	mov	r0, r9
 801550a:	f002 f9b9 	bl	8017880 <__mdiff>
 801550e:	4604      	mov	r4, r0
 8015510:	2800      	cmp	r0, #0
 8015512:	f43f ae5f 	beq.w	80151d4 <_strtod_l+0x43c>
 8015516:	68c3      	ldr	r3, [r0, #12]
 8015518:	930c      	str	r3, [sp, #48]	; 0x30
 801551a:	2300      	movs	r3, #0
 801551c:	60c3      	str	r3, [r0, #12]
 801551e:	4641      	mov	r1, r8
 8015520:	f002 f994 	bl	801784c <__mcmp>
 8015524:	2800      	cmp	r0, #0
 8015526:	da55      	bge.n	80155d4 <_strtod_l+0x83c>
 8015528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801552a:	b9e3      	cbnz	r3, 8015566 <_strtod_l+0x7ce>
 801552c:	f1ba 0f00 	cmp.w	sl, #0
 8015530:	d119      	bne.n	8015566 <_strtod_l+0x7ce>
 8015532:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015536:	b9b3      	cbnz	r3, 8015566 <_strtod_l+0x7ce>
 8015538:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801553c:	0d1b      	lsrs	r3, r3, #20
 801553e:	051b      	lsls	r3, r3, #20
 8015540:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015544:	d90f      	bls.n	8015566 <_strtod_l+0x7ce>
 8015546:	6963      	ldr	r3, [r4, #20]
 8015548:	b913      	cbnz	r3, 8015550 <_strtod_l+0x7b8>
 801554a:	6923      	ldr	r3, [r4, #16]
 801554c:	2b01      	cmp	r3, #1
 801554e:	dd0a      	ble.n	8015566 <_strtod_l+0x7ce>
 8015550:	4621      	mov	r1, r4
 8015552:	2201      	movs	r2, #1
 8015554:	4648      	mov	r0, r9
 8015556:	f002 f925 	bl	80177a4 <__lshift>
 801555a:	4641      	mov	r1, r8
 801555c:	4604      	mov	r4, r0
 801555e:	f002 f975 	bl	801784c <__mcmp>
 8015562:	2800      	cmp	r0, #0
 8015564:	dc67      	bgt.n	8015636 <_strtod_l+0x89e>
 8015566:	9b04      	ldr	r3, [sp, #16]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d171      	bne.n	8015650 <_strtod_l+0x8b8>
 801556c:	e63d      	b.n	80151ea <_strtod_l+0x452>
 801556e:	f018 0f01 	tst.w	r8, #1
 8015572:	d004      	beq.n	801557e <_strtod_l+0x7e6>
 8015574:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015578:	f7f2 ff76 	bl	8008468 <__aeabi_dmul>
 801557c:	2301      	movs	r3, #1
 801557e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015582:	3508      	adds	r5, #8
 8015584:	e6e5      	b.n	8015352 <_strtod_l+0x5ba>
 8015586:	f04f 32ff 	mov.w	r2, #4294967295
 801558a:	fa02 f303 	lsl.w	r3, r2, r3
 801558e:	ea03 0a0a 	and.w	sl, r3, sl
 8015592:	e6ff      	b.n	8015394 <_strtod_l+0x5fc>
 8015594:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015598:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801559c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80155a0:	36e2      	adds	r6, #226	; 0xe2
 80155a2:	fa01 f306 	lsl.w	r3, r1, r6
 80155a6:	930a      	str	r3, [sp, #40]	; 0x28
 80155a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80155aa:	e75d      	b.n	8015468 <_strtod_l+0x6d0>
 80155ac:	2300      	movs	r3, #0
 80155ae:	930a      	str	r3, [sp, #40]	; 0x28
 80155b0:	2301      	movs	r3, #1
 80155b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80155b4:	e758      	b.n	8015468 <_strtod_l+0x6d0>
 80155b6:	4632      	mov	r2, r6
 80155b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80155ba:	4648      	mov	r0, r9
 80155bc:	f002 f8f2 	bl	80177a4 <__lshift>
 80155c0:	901c      	str	r0, [sp, #112]	; 0x70
 80155c2:	2800      	cmp	r0, #0
 80155c4:	f47f af7c 	bne.w	80154c0 <_strtod_l+0x728>
 80155c8:	e604      	b.n	80151d4 <_strtod_l+0x43c>
 80155ca:	bf00      	nop
 80155cc:	08019210 	.word	0x08019210
 80155d0:	fffffc02 	.word	0xfffffc02
 80155d4:	465d      	mov	r5, fp
 80155d6:	f040 8086 	bne.w	80156e6 <_strtod_l+0x94e>
 80155da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80155dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155e0:	b32a      	cbz	r2, 801562e <_strtod_l+0x896>
 80155e2:	4aaf      	ldr	r2, [pc, #700]	; (80158a0 <_strtod_l+0xb08>)
 80155e4:	4293      	cmp	r3, r2
 80155e6:	d153      	bne.n	8015690 <_strtod_l+0x8f8>
 80155e8:	9b04      	ldr	r3, [sp, #16]
 80155ea:	4650      	mov	r0, sl
 80155ec:	b1d3      	cbz	r3, 8015624 <_strtod_l+0x88c>
 80155ee:	4aad      	ldr	r2, [pc, #692]	; (80158a4 <_strtod_l+0xb0c>)
 80155f0:	402a      	ands	r2, r5
 80155f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80155f6:	f04f 31ff 	mov.w	r1, #4294967295
 80155fa:	d816      	bhi.n	801562a <_strtod_l+0x892>
 80155fc:	0d12      	lsrs	r2, r2, #20
 80155fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015602:	fa01 f303 	lsl.w	r3, r1, r3
 8015606:	4298      	cmp	r0, r3
 8015608:	d142      	bne.n	8015690 <_strtod_l+0x8f8>
 801560a:	4ba7      	ldr	r3, [pc, #668]	; (80158a8 <_strtod_l+0xb10>)
 801560c:	429d      	cmp	r5, r3
 801560e:	d102      	bne.n	8015616 <_strtod_l+0x87e>
 8015610:	3001      	adds	r0, #1
 8015612:	f43f addf 	beq.w	80151d4 <_strtod_l+0x43c>
 8015616:	4ba3      	ldr	r3, [pc, #652]	; (80158a4 <_strtod_l+0xb0c>)
 8015618:	402b      	ands	r3, r5
 801561a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801561e:	f04f 0a00 	mov.w	sl, #0
 8015622:	e7a0      	b.n	8015566 <_strtod_l+0x7ce>
 8015624:	f04f 33ff 	mov.w	r3, #4294967295
 8015628:	e7ed      	b.n	8015606 <_strtod_l+0x86e>
 801562a:	460b      	mov	r3, r1
 801562c:	e7eb      	b.n	8015606 <_strtod_l+0x86e>
 801562e:	bb7b      	cbnz	r3, 8015690 <_strtod_l+0x8f8>
 8015630:	f1ba 0f00 	cmp.w	sl, #0
 8015634:	d12c      	bne.n	8015690 <_strtod_l+0x8f8>
 8015636:	9904      	ldr	r1, [sp, #16]
 8015638:	4a9a      	ldr	r2, [pc, #616]	; (80158a4 <_strtod_l+0xb0c>)
 801563a:	465b      	mov	r3, fp
 801563c:	b1f1      	cbz	r1, 801567c <_strtod_l+0x8e4>
 801563e:	ea02 010b 	and.w	r1, r2, fp
 8015642:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015646:	dc19      	bgt.n	801567c <_strtod_l+0x8e4>
 8015648:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801564c:	f77f ae5b 	ble.w	8015306 <_strtod_l+0x56e>
 8015650:	4a96      	ldr	r2, [pc, #600]	; (80158ac <_strtod_l+0xb14>)
 8015652:	2300      	movs	r3, #0
 8015654:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015658:	4650      	mov	r0, sl
 801565a:	4659      	mov	r1, fp
 801565c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015660:	f7f2 ff02 	bl	8008468 <__aeabi_dmul>
 8015664:	4682      	mov	sl, r0
 8015666:	468b      	mov	fp, r1
 8015668:	2900      	cmp	r1, #0
 801566a:	f47f adbe 	bne.w	80151ea <_strtod_l+0x452>
 801566e:	2800      	cmp	r0, #0
 8015670:	f47f adbb 	bne.w	80151ea <_strtod_l+0x452>
 8015674:	2322      	movs	r3, #34	; 0x22
 8015676:	f8c9 3000 	str.w	r3, [r9]
 801567a:	e5b6      	b.n	80151ea <_strtod_l+0x452>
 801567c:	4013      	ands	r3, r2
 801567e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015682:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015686:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801568a:	f04f 3aff 	mov.w	sl, #4294967295
 801568e:	e76a      	b.n	8015566 <_strtod_l+0x7ce>
 8015690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015692:	b193      	cbz	r3, 80156ba <_strtod_l+0x922>
 8015694:	422b      	tst	r3, r5
 8015696:	f43f af66 	beq.w	8015566 <_strtod_l+0x7ce>
 801569a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801569c:	9a04      	ldr	r2, [sp, #16]
 801569e:	4650      	mov	r0, sl
 80156a0:	4659      	mov	r1, fp
 80156a2:	b173      	cbz	r3, 80156c2 <_strtod_l+0x92a>
 80156a4:	f7ff fb5a 	bl	8014d5c <sulp>
 80156a8:	4602      	mov	r2, r0
 80156aa:	460b      	mov	r3, r1
 80156ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80156b0:	f7f2 fd24 	bl	80080fc <__adddf3>
 80156b4:	4682      	mov	sl, r0
 80156b6:	468b      	mov	fp, r1
 80156b8:	e755      	b.n	8015566 <_strtod_l+0x7ce>
 80156ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156bc:	ea13 0f0a 	tst.w	r3, sl
 80156c0:	e7e9      	b.n	8015696 <_strtod_l+0x8fe>
 80156c2:	f7ff fb4b 	bl	8014d5c <sulp>
 80156c6:	4602      	mov	r2, r0
 80156c8:	460b      	mov	r3, r1
 80156ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80156ce:	f7f2 fd13 	bl	80080f8 <__aeabi_dsub>
 80156d2:	2200      	movs	r2, #0
 80156d4:	2300      	movs	r3, #0
 80156d6:	4682      	mov	sl, r0
 80156d8:	468b      	mov	fp, r1
 80156da:	f7f3 f92d 	bl	8008938 <__aeabi_dcmpeq>
 80156de:	2800      	cmp	r0, #0
 80156e0:	f47f ae11 	bne.w	8015306 <_strtod_l+0x56e>
 80156e4:	e73f      	b.n	8015566 <_strtod_l+0x7ce>
 80156e6:	4641      	mov	r1, r8
 80156e8:	4620      	mov	r0, r4
 80156ea:	f002 f9ec 	bl	8017ac6 <__ratio>
 80156ee:	ec57 6b10 	vmov	r6, r7, d0
 80156f2:	2200      	movs	r2, #0
 80156f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80156f8:	ee10 0a10 	vmov	r0, s0
 80156fc:	4639      	mov	r1, r7
 80156fe:	f7f3 f92f 	bl	8008960 <__aeabi_dcmple>
 8015702:	2800      	cmp	r0, #0
 8015704:	d077      	beq.n	80157f6 <_strtod_l+0xa5e>
 8015706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015708:	2b00      	cmp	r3, #0
 801570a:	d04a      	beq.n	80157a2 <_strtod_l+0xa0a>
 801570c:	4b68      	ldr	r3, [pc, #416]	; (80158b0 <_strtod_l+0xb18>)
 801570e:	2200      	movs	r2, #0
 8015710:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015714:	4f66      	ldr	r7, [pc, #408]	; (80158b0 <_strtod_l+0xb18>)
 8015716:	2600      	movs	r6, #0
 8015718:	4b62      	ldr	r3, [pc, #392]	; (80158a4 <_strtod_l+0xb0c>)
 801571a:	402b      	ands	r3, r5
 801571c:	930f      	str	r3, [sp, #60]	; 0x3c
 801571e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015720:	4b64      	ldr	r3, [pc, #400]	; (80158b4 <_strtod_l+0xb1c>)
 8015722:	429a      	cmp	r2, r3
 8015724:	f040 80ce 	bne.w	80158c4 <_strtod_l+0xb2c>
 8015728:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801572c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015730:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015734:	ec4b ab10 	vmov	d0, sl, fp
 8015738:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801573c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015740:	f002 f8fc 	bl	801793c <__ulp>
 8015744:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015748:	ec53 2b10 	vmov	r2, r3, d0
 801574c:	f7f2 fe8c 	bl	8008468 <__aeabi_dmul>
 8015750:	4652      	mov	r2, sl
 8015752:	465b      	mov	r3, fp
 8015754:	f7f2 fcd2 	bl	80080fc <__adddf3>
 8015758:	460b      	mov	r3, r1
 801575a:	4952      	ldr	r1, [pc, #328]	; (80158a4 <_strtod_l+0xb0c>)
 801575c:	4a56      	ldr	r2, [pc, #344]	; (80158b8 <_strtod_l+0xb20>)
 801575e:	4019      	ands	r1, r3
 8015760:	4291      	cmp	r1, r2
 8015762:	4682      	mov	sl, r0
 8015764:	d95b      	bls.n	801581e <_strtod_l+0xa86>
 8015766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015768:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801576c:	4293      	cmp	r3, r2
 801576e:	d103      	bne.n	8015778 <_strtod_l+0x9e0>
 8015770:	9b08      	ldr	r3, [sp, #32]
 8015772:	3301      	adds	r3, #1
 8015774:	f43f ad2e 	beq.w	80151d4 <_strtod_l+0x43c>
 8015778:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80158a8 <_strtod_l+0xb10>
 801577c:	f04f 3aff 	mov.w	sl, #4294967295
 8015780:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015782:	4648      	mov	r0, r9
 8015784:	f001 fe42 	bl	801740c <_Bfree>
 8015788:	9905      	ldr	r1, [sp, #20]
 801578a:	4648      	mov	r0, r9
 801578c:	f001 fe3e 	bl	801740c <_Bfree>
 8015790:	4641      	mov	r1, r8
 8015792:	4648      	mov	r0, r9
 8015794:	f001 fe3a 	bl	801740c <_Bfree>
 8015798:	4621      	mov	r1, r4
 801579a:	4648      	mov	r0, r9
 801579c:	f001 fe36 	bl	801740c <_Bfree>
 80157a0:	e619      	b.n	80153d6 <_strtod_l+0x63e>
 80157a2:	f1ba 0f00 	cmp.w	sl, #0
 80157a6:	d11a      	bne.n	80157de <_strtod_l+0xa46>
 80157a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80157ac:	b9eb      	cbnz	r3, 80157ea <_strtod_l+0xa52>
 80157ae:	2200      	movs	r2, #0
 80157b0:	4b3f      	ldr	r3, [pc, #252]	; (80158b0 <_strtod_l+0xb18>)
 80157b2:	4630      	mov	r0, r6
 80157b4:	4639      	mov	r1, r7
 80157b6:	f7f3 f8c9 	bl	800894c <__aeabi_dcmplt>
 80157ba:	b9c8      	cbnz	r0, 80157f0 <_strtod_l+0xa58>
 80157bc:	4630      	mov	r0, r6
 80157be:	4639      	mov	r1, r7
 80157c0:	2200      	movs	r2, #0
 80157c2:	4b3e      	ldr	r3, [pc, #248]	; (80158bc <_strtod_l+0xb24>)
 80157c4:	f7f2 fe50 	bl	8008468 <__aeabi_dmul>
 80157c8:	4606      	mov	r6, r0
 80157ca:	460f      	mov	r7, r1
 80157cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80157d0:	9618      	str	r6, [sp, #96]	; 0x60
 80157d2:	9319      	str	r3, [sp, #100]	; 0x64
 80157d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80157d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80157dc:	e79c      	b.n	8015718 <_strtod_l+0x980>
 80157de:	f1ba 0f01 	cmp.w	sl, #1
 80157e2:	d102      	bne.n	80157ea <_strtod_l+0xa52>
 80157e4:	2d00      	cmp	r5, #0
 80157e6:	f43f ad8e 	beq.w	8015306 <_strtod_l+0x56e>
 80157ea:	2200      	movs	r2, #0
 80157ec:	4b34      	ldr	r3, [pc, #208]	; (80158c0 <_strtod_l+0xb28>)
 80157ee:	e78f      	b.n	8015710 <_strtod_l+0x978>
 80157f0:	2600      	movs	r6, #0
 80157f2:	4f32      	ldr	r7, [pc, #200]	; (80158bc <_strtod_l+0xb24>)
 80157f4:	e7ea      	b.n	80157cc <_strtod_l+0xa34>
 80157f6:	4b31      	ldr	r3, [pc, #196]	; (80158bc <_strtod_l+0xb24>)
 80157f8:	4630      	mov	r0, r6
 80157fa:	4639      	mov	r1, r7
 80157fc:	2200      	movs	r2, #0
 80157fe:	f7f2 fe33 	bl	8008468 <__aeabi_dmul>
 8015802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015804:	4606      	mov	r6, r0
 8015806:	460f      	mov	r7, r1
 8015808:	b933      	cbnz	r3, 8015818 <_strtod_l+0xa80>
 801580a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801580e:	9010      	str	r0, [sp, #64]	; 0x40
 8015810:	9311      	str	r3, [sp, #68]	; 0x44
 8015812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015816:	e7df      	b.n	80157d8 <_strtod_l+0xa40>
 8015818:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801581c:	e7f9      	b.n	8015812 <_strtod_l+0xa7a>
 801581e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015822:	9b04      	ldr	r3, [sp, #16]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d1ab      	bne.n	8015780 <_strtod_l+0x9e8>
 8015828:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801582c:	0d1b      	lsrs	r3, r3, #20
 801582e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015830:	051b      	lsls	r3, r3, #20
 8015832:	429a      	cmp	r2, r3
 8015834:	465d      	mov	r5, fp
 8015836:	d1a3      	bne.n	8015780 <_strtod_l+0x9e8>
 8015838:	4639      	mov	r1, r7
 801583a:	4630      	mov	r0, r6
 801583c:	f7f3 f8c4 	bl	80089c8 <__aeabi_d2iz>
 8015840:	f7f2 fda8 	bl	8008394 <__aeabi_i2d>
 8015844:	460b      	mov	r3, r1
 8015846:	4602      	mov	r2, r0
 8015848:	4639      	mov	r1, r7
 801584a:	4630      	mov	r0, r6
 801584c:	f7f2 fc54 	bl	80080f8 <__aeabi_dsub>
 8015850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015852:	4606      	mov	r6, r0
 8015854:	460f      	mov	r7, r1
 8015856:	b933      	cbnz	r3, 8015866 <_strtod_l+0xace>
 8015858:	f1ba 0f00 	cmp.w	sl, #0
 801585c:	d103      	bne.n	8015866 <_strtod_l+0xace>
 801585e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015862:	2d00      	cmp	r5, #0
 8015864:	d06d      	beq.n	8015942 <_strtod_l+0xbaa>
 8015866:	a30a      	add	r3, pc, #40	; (adr r3, 8015890 <_strtod_l+0xaf8>)
 8015868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801586c:	4630      	mov	r0, r6
 801586e:	4639      	mov	r1, r7
 8015870:	f7f3 f86c 	bl	800894c <__aeabi_dcmplt>
 8015874:	2800      	cmp	r0, #0
 8015876:	f47f acb8 	bne.w	80151ea <_strtod_l+0x452>
 801587a:	a307      	add	r3, pc, #28	; (adr r3, 8015898 <_strtod_l+0xb00>)
 801587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015880:	4630      	mov	r0, r6
 8015882:	4639      	mov	r1, r7
 8015884:	f7f3 f880 	bl	8008988 <__aeabi_dcmpgt>
 8015888:	2800      	cmp	r0, #0
 801588a:	f43f af79 	beq.w	8015780 <_strtod_l+0x9e8>
 801588e:	e4ac      	b.n	80151ea <_strtod_l+0x452>
 8015890:	94a03595 	.word	0x94a03595
 8015894:	3fdfffff 	.word	0x3fdfffff
 8015898:	35afe535 	.word	0x35afe535
 801589c:	3fe00000 	.word	0x3fe00000
 80158a0:	000fffff 	.word	0x000fffff
 80158a4:	7ff00000 	.word	0x7ff00000
 80158a8:	7fefffff 	.word	0x7fefffff
 80158ac:	39500000 	.word	0x39500000
 80158b0:	3ff00000 	.word	0x3ff00000
 80158b4:	7fe00000 	.word	0x7fe00000
 80158b8:	7c9fffff 	.word	0x7c9fffff
 80158bc:	3fe00000 	.word	0x3fe00000
 80158c0:	bff00000 	.word	0xbff00000
 80158c4:	9b04      	ldr	r3, [sp, #16]
 80158c6:	b333      	cbz	r3, 8015916 <_strtod_l+0xb7e>
 80158c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80158ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80158ce:	d822      	bhi.n	8015916 <_strtod_l+0xb7e>
 80158d0:	a327      	add	r3, pc, #156	; (adr r3, 8015970 <_strtod_l+0xbd8>)
 80158d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158d6:	4630      	mov	r0, r6
 80158d8:	4639      	mov	r1, r7
 80158da:	f7f3 f841 	bl	8008960 <__aeabi_dcmple>
 80158de:	b1a0      	cbz	r0, 801590a <_strtod_l+0xb72>
 80158e0:	4639      	mov	r1, r7
 80158e2:	4630      	mov	r0, r6
 80158e4:	f7f3 f898 	bl	8008a18 <__aeabi_d2uiz>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	bf08      	it	eq
 80158ec:	2001      	moveq	r0, #1
 80158ee:	f7f2 fd41 	bl	8008374 <__aeabi_ui2d>
 80158f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158f4:	4606      	mov	r6, r0
 80158f6:	460f      	mov	r7, r1
 80158f8:	bb03      	cbnz	r3, 801593c <_strtod_l+0xba4>
 80158fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80158fe:	9012      	str	r0, [sp, #72]	; 0x48
 8015900:	9313      	str	r3, [sp, #76]	; 0x4c
 8015902:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015906:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801590a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801590c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801590e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015912:	1a9b      	subs	r3, r3, r2
 8015914:	930b      	str	r3, [sp, #44]	; 0x2c
 8015916:	ed9d 0b08 	vldr	d0, [sp, #32]
 801591a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801591e:	f002 f80d 	bl	801793c <__ulp>
 8015922:	4650      	mov	r0, sl
 8015924:	ec53 2b10 	vmov	r2, r3, d0
 8015928:	4659      	mov	r1, fp
 801592a:	f7f2 fd9d 	bl	8008468 <__aeabi_dmul>
 801592e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015932:	f7f2 fbe3 	bl	80080fc <__adddf3>
 8015936:	4682      	mov	sl, r0
 8015938:	468b      	mov	fp, r1
 801593a:	e772      	b.n	8015822 <_strtod_l+0xa8a>
 801593c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015940:	e7df      	b.n	8015902 <_strtod_l+0xb6a>
 8015942:	a30d      	add	r3, pc, #52	; (adr r3, 8015978 <_strtod_l+0xbe0>)
 8015944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015948:	f7f3 f800 	bl	800894c <__aeabi_dcmplt>
 801594c:	e79c      	b.n	8015888 <_strtod_l+0xaf0>
 801594e:	2300      	movs	r3, #0
 8015950:	930d      	str	r3, [sp, #52]	; 0x34
 8015952:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015956:	6013      	str	r3, [r2, #0]
 8015958:	f7ff ba61 	b.w	8014e1e <_strtod_l+0x86>
 801595c:	2b65      	cmp	r3, #101	; 0x65
 801595e:	f04f 0200 	mov.w	r2, #0
 8015962:	f43f ab4e 	beq.w	8015002 <_strtod_l+0x26a>
 8015966:	2101      	movs	r1, #1
 8015968:	4614      	mov	r4, r2
 801596a:	9104      	str	r1, [sp, #16]
 801596c:	f7ff bacb 	b.w	8014f06 <_strtod_l+0x16e>
 8015970:	ffc00000 	.word	0xffc00000
 8015974:	41dfffff 	.word	0x41dfffff
 8015978:	94a03595 	.word	0x94a03595
 801597c:	3fcfffff 	.word	0x3fcfffff

08015980 <_strtod_r>:
 8015980:	4b05      	ldr	r3, [pc, #20]	; (8015998 <_strtod_r+0x18>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	b410      	push	{r4}
 8015986:	6a1b      	ldr	r3, [r3, #32]
 8015988:	4c04      	ldr	r4, [pc, #16]	; (801599c <_strtod_r+0x1c>)
 801598a:	2b00      	cmp	r3, #0
 801598c:	bf08      	it	eq
 801598e:	4623      	moveq	r3, r4
 8015990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015994:	f7ff ba00 	b.w	8014d98 <_strtod_l>
 8015998:	20000024 	.word	0x20000024
 801599c:	20000088 	.word	0x20000088

080159a0 <_strtol_l.isra.0>:
 80159a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159a4:	4680      	mov	r8, r0
 80159a6:	4689      	mov	r9, r1
 80159a8:	4692      	mov	sl, r2
 80159aa:	461e      	mov	r6, r3
 80159ac:	460f      	mov	r7, r1
 80159ae:	463d      	mov	r5, r7
 80159b0:	9808      	ldr	r0, [sp, #32]
 80159b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80159b6:	f001 fc55 	bl	8017264 <__locale_ctype_ptr_l>
 80159ba:	4420      	add	r0, r4
 80159bc:	7843      	ldrb	r3, [r0, #1]
 80159be:	f013 0308 	ands.w	r3, r3, #8
 80159c2:	d132      	bne.n	8015a2a <_strtol_l.isra.0+0x8a>
 80159c4:	2c2d      	cmp	r4, #45	; 0x2d
 80159c6:	d132      	bne.n	8015a2e <_strtol_l.isra.0+0x8e>
 80159c8:	787c      	ldrb	r4, [r7, #1]
 80159ca:	1cbd      	adds	r5, r7, #2
 80159cc:	2201      	movs	r2, #1
 80159ce:	2e00      	cmp	r6, #0
 80159d0:	d05d      	beq.n	8015a8e <_strtol_l.isra.0+0xee>
 80159d2:	2e10      	cmp	r6, #16
 80159d4:	d109      	bne.n	80159ea <_strtol_l.isra.0+0x4a>
 80159d6:	2c30      	cmp	r4, #48	; 0x30
 80159d8:	d107      	bne.n	80159ea <_strtol_l.isra.0+0x4a>
 80159da:	782b      	ldrb	r3, [r5, #0]
 80159dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80159e0:	2b58      	cmp	r3, #88	; 0x58
 80159e2:	d14f      	bne.n	8015a84 <_strtol_l.isra.0+0xe4>
 80159e4:	786c      	ldrb	r4, [r5, #1]
 80159e6:	2610      	movs	r6, #16
 80159e8:	3502      	adds	r5, #2
 80159ea:	2a00      	cmp	r2, #0
 80159ec:	bf14      	ite	ne
 80159ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80159f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80159f6:	2700      	movs	r7, #0
 80159f8:	fbb1 fcf6 	udiv	ip, r1, r6
 80159fc:	4638      	mov	r0, r7
 80159fe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015a02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015a06:	2b09      	cmp	r3, #9
 8015a08:	d817      	bhi.n	8015a3a <_strtol_l.isra.0+0x9a>
 8015a0a:	461c      	mov	r4, r3
 8015a0c:	42a6      	cmp	r6, r4
 8015a0e:	dd23      	ble.n	8015a58 <_strtol_l.isra.0+0xb8>
 8015a10:	1c7b      	adds	r3, r7, #1
 8015a12:	d007      	beq.n	8015a24 <_strtol_l.isra.0+0x84>
 8015a14:	4584      	cmp	ip, r0
 8015a16:	d31c      	bcc.n	8015a52 <_strtol_l.isra.0+0xb2>
 8015a18:	d101      	bne.n	8015a1e <_strtol_l.isra.0+0x7e>
 8015a1a:	45a6      	cmp	lr, r4
 8015a1c:	db19      	blt.n	8015a52 <_strtol_l.isra.0+0xb2>
 8015a1e:	fb00 4006 	mla	r0, r0, r6, r4
 8015a22:	2701      	movs	r7, #1
 8015a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a28:	e7eb      	b.n	8015a02 <_strtol_l.isra.0+0x62>
 8015a2a:	462f      	mov	r7, r5
 8015a2c:	e7bf      	b.n	80159ae <_strtol_l.isra.0+0xe>
 8015a2e:	2c2b      	cmp	r4, #43	; 0x2b
 8015a30:	bf04      	itt	eq
 8015a32:	1cbd      	addeq	r5, r7, #2
 8015a34:	787c      	ldrbeq	r4, [r7, #1]
 8015a36:	461a      	mov	r2, r3
 8015a38:	e7c9      	b.n	80159ce <_strtol_l.isra.0+0x2e>
 8015a3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015a3e:	2b19      	cmp	r3, #25
 8015a40:	d801      	bhi.n	8015a46 <_strtol_l.isra.0+0xa6>
 8015a42:	3c37      	subs	r4, #55	; 0x37
 8015a44:	e7e2      	b.n	8015a0c <_strtol_l.isra.0+0x6c>
 8015a46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015a4a:	2b19      	cmp	r3, #25
 8015a4c:	d804      	bhi.n	8015a58 <_strtol_l.isra.0+0xb8>
 8015a4e:	3c57      	subs	r4, #87	; 0x57
 8015a50:	e7dc      	b.n	8015a0c <_strtol_l.isra.0+0x6c>
 8015a52:	f04f 37ff 	mov.w	r7, #4294967295
 8015a56:	e7e5      	b.n	8015a24 <_strtol_l.isra.0+0x84>
 8015a58:	1c7b      	adds	r3, r7, #1
 8015a5a:	d108      	bne.n	8015a6e <_strtol_l.isra.0+0xce>
 8015a5c:	2322      	movs	r3, #34	; 0x22
 8015a5e:	f8c8 3000 	str.w	r3, [r8]
 8015a62:	4608      	mov	r0, r1
 8015a64:	f1ba 0f00 	cmp.w	sl, #0
 8015a68:	d107      	bne.n	8015a7a <_strtol_l.isra.0+0xda>
 8015a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a6e:	b102      	cbz	r2, 8015a72 <_strtol_l.isra.0+0xd2>
 8015a70:	4240      	negs	r0, r0
 8015a72:	f1ba 0f00 	cmp.w	sl, #0
 8015a76:	d0f8      	beq.n	8015a6a <_strtol_l.isra.0+0xca>
 8015a78:	b10f      	cbz	r7, 8015a7e <_strtol_l.isra.0+0xde>
 8015a7a:	f105 39ff 	add.w	r9, r5, #4294967295
 8015a7e:	f8ca 9000 	str.w	r9, [sl]
 8015a82:	e7f2      	b.n	8015a6a <_strtol_l.isra.0+0xca>
 8015a84:	2430      	movs	r4, #48	; 0x30
 8015a86:	2e00      	cmp	r6, #0
 8015a88:	d1af      	bne.n	80159ea <_strtol_l.isra.0+0x4a>
 8015a8a:	2608      	movs	r6, #8
 8015a8c:	e7ad      	b.n	80159ea <_strtol_l.isra.0+0x4a>
 8015a8e:	2c30      	cmp	r4, #48	; 0x30
 8015a90:	d0a3      	beq.n	80159da <_strtol_l.isra.0+0x3a>
 8015a92:	260a      	movs	r6, #10
 8015a94:	e7a9      	b.n	80159ea <_strtol_l.isra.0+0x4a>
	...

08015a98 <_strtol_r>:
 8015a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a9a:	4c06      	ldr	r4, [pc, #24]	; (8015ab4 <_strtol_r+0x1c>)
 8015a9c:	4d06      	ldr	r5, [pc, #24]	; (8015ab8 <_strtol_r+0x20>)
 8015a9e:	6824      	ldr	r4, [r4, #0]
 8015aa0:	6a24      	ldr	r4, [r4, #32]
 8015aa2:	2c00      	cmp	r4, #0
 8015aa4:	bf08      	it	eq
 8015aa6:	462c      	moveq	r4, r5
 8015aa8:	9400      	str	r4, [sp, #0]
 8015aaa:	f7ff ff79 	bl	80159a0 <_strtol_l.isra.0>
 8015aae:	b003      	add	sp, #12
 8015ab0:	bd30      	pop	{r4, r5, pc}
 8015ab2:	bf00      	nop
 8015ab4:	20000024 	.word	0x20000024
 8015ab8:	20000088 	.word	0x20000088

08015abc <__swbuf_r>:
 8015abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015abe:	460e      	mov	r6, r1
 8015ac0:	4614      	mov	r4, r2
 8015ac2:	4605      	mov	r5, r0
 8015ac4:	b118      	cbz	r0, 8015ace <__swbuf_r+0x12>
 8015ac6:	6983      	ldr	r3, [r0, #24]
 8015ac8:	b90b      	cbnz	r3, 8015ace <__swbuf_r+0x12>
 8015aca:	f000 ffff 	bl	8016acc <__sinit>
 8015ace:	4b21      	ldr	r3, [pc, #132]	; (8015b54 <__swbuf_r+0x98>)
 8015ad0:	429c      	cmp	r4, r3
 8015ad2:	d12a      	bne.n	8015b2a <__swbuf_r+0x6e>
 8015ad4:	686c      	ldr	r4, [r5, #4]
 8015ad6:	69a3      	ldr	r3, [r4, #24]
 8015ad8:	60a3      	str	r3, [r4, #8]
 8015ada:	89a3      	ldrh	r3, [r4, #12]
 8015adc:	071a      	lsls	r2, r3, #28
 8015ade:	d52e      	bpl.n	8015b3e <__swbuf_r+0x82>
 8015ae0:	6923      	ldr	r3, [r4, #16]
 8015ae2:	b363      	cbz	r3, 8015b3e <__swbuf_r+0x82>
 8015ae4:	6923      	ldr	r3, [r4, #16]
 8015ae6:	6820      	ldr	r0, [r4, #0]
 8015ae8:	1ac0      	subs	r0, r0, r3
 8015aea:	6963      	ldr	r3, [r4, #20]
 8015aec:	b2f6      	uxtb	r6, r6
 8015aee:	4283      	cmp	r3, r0
 8015af0:	4637      	mov	r7, r6
 8015af2:	dc04      	bgt.n	8015afe <__swbuf_r+0x42>
 8015af4:	4621      	mov	r1, r4
 8015af6:	4628      	mov	r0, r5
 8015af8:	f000 ff6c 	bl	80169d4 <_fflush_r>
 8015afc:	bb28      	cbnz	r0, 8015b4a <__swbuf_r+0x8e>
 8015afe:	68a3      	ldr	r3, [r4, #8]
 8015b00:	3b01      	subs	r3, #1
 8015b02:	60a3      	str	r3, [r4, #8]
 8015b04:	6823      	ldr	r3, [r4, #0]
 8015b06:	1c5a      	adds	r2, r3, #1
 8015b08:	6022      	str	r2, [r4, #0]
 8015b0a:	701e      	strb	r6, [r3, #0]
 8015b0c:	6963      	ldr	r3, [r4, #20]
 8015b0e:	3001      	adds	r0, #1
 8015b10:	4283      	cmp	r3, r0
 8015b12:	d004      	beq.n	8015b1e <__swbuf_r+0x62>
 8015b14:	89a3      	ldrh	r3, [r4, #12]
 8015b16:	07db      	lsls	r3, r3, #31
 8015b18:	d519      	bpl.n	8015b4e <__swbuf_r+0x92>
 8015b1a:	2e0a      	cmp	r6, #10
 8015b1c:	d117      	bne.n	8015b4e <__swbuf_r+0x92>
 8015b1e:	4621      	mov	r1, r4
 8015b20:	4628      	mov	r0, r5
 8015b22:	f000 ff57 	bl	80169d4 <_fflush_r>
 8015b26:	b190      	cbz	r0, 8015b4e <__swbuf_r+0x92>
 8015b28:	e00f      	b.n	8015b4a <__swbuf_r+0x8e>
 8015b2a:	4b0b      	ldr	r3, [pc, #44]	; (8015b58 <__swbuf_r+0x9c>)
 8015b2c:	429c      	cmp	r4, r3
 8015b2e:	d101      	bne.n	8015b34 <__swbuf_r+0x78>
 8015b30:	68ac      	ldr	r4, [r5, #8]
 8015b32:	e7d0      	b.n	8015ad6 <__swbuf_r+0x1a>
 8015b34:	4b09      	ldr	r3, [pc, #36]	; (8015b5c <__swbuf_r+0xa0>)
 8015b36:	429c      	cmp	r4, r3
 8015b38:	bf08      	it	eq
 8015b3a:	68ec      	ldreq	r4, [r5, #12]
 8015b3c:	e7cb      	b.n	8015ad6 <__swbuf_r+0x1a>
 8015b3e:	4621      	mov	r1, r4
 8015b40:	4628      	mov	r0, r5
 8015b42:	f000 f80d 	bl	8015b60 <__swsetup_r>
 8015b46:	2800      	cmp	r0, #0
 8015b48:	d0cc      	beq.n	8015ae4 <__swbuf_r+0x28>
 8015b4a:	f04f 37ff 	mov.w	r7, #4294967295
 8015b4e:	4638      	mov	r0, r7
 8015b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b52:	bf00      	nop
 8015b54:	08019268 	.word	0x08019268
 8015b58:	08019288 	.word	0x08019288
 8015b5c:	08019248 	.word	0x08019248

08015b60 <__swsetup_r>:
 8015b60:	4b32      	ldr	r3, [pc, #200]	; (8015c2c <__swsetup_r+0xcc>)
 8015b62:	b570      	push	{r4, r5, r6, lr}
 8015b64:	681d      	ldr	r5, [r3, #0]
 8015b66:	4606      	mov	r6, r0
 8015b68:	460c      	mov	r4, r1
 8015b6a:	b125      	cbz	r5, 8015b76 <__swsetup_r+0x16>
 8015b6c:	69ab      	ldr	r3, [r5, #24]
 8015b6e:	b913      	cbnz	r3, 8015b76 <__swsetup_r+0x16>
 8015b70:	4628      	mov	r0, r5
 8015b72:	f000 ffab 	bl	8016acc <__sinit>
 8015b76:	4b2e      	ldr	r3, [pc, #184]	; (8015c30 <__swsetup_r+0xd0>)
 8015b78:	429c      	cmp	r4, r3
 8015b7a:	d10f      	bne.n	8015b9c <__swsetup_r+0x3c>
 8015b7c:	686c      	ldr	r4, [r5, #4]
 8015b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b82:	b29a      	uxth	r2, r3
 8015b84:	0715      	lsls	r5, r2, #28
 8015b86:	d42c      	bmi.n	8015be2 <__swsetup_r+0x82>
 8015b88:	06d0      	lsls	r0, r2, #27
 8015b8a:	d411      	bmi.n	8015bb0 <__swsetup_r+0x50>
 8015b8c:	2209      	movs	r2, #9
 8015b8e:	6032      	str	r2, [r6, #0]
 8015b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b94:	81a3      	strh	r3, [r4, #12]
 8015b96:	f04f 30ff 	mov.w	r0, #4294967295
 8015b9a:	e03e      	b.n	8015c1a <__swsetup_r+0xba>
 8015b9c:	4b25      	ldr	r3, [pc, #148]	; (8015c34 <__swsetup_r+0xd4>)
 8015b9e:	429c      	cmp	r4, r3
 8015ba0:	d101      	bne.n	8015ba6 <__swsetup_r+0x46>
 8015ba2:	68ac      	ldr	r4, [r5, #8]
 8015ba4:	e7eb      	b.n	8015b7e <__swsetup_r+0x1e>
 8015ba6:	4b24      	ldr	r3, [pc, #144]	; (8015c38 <__swsetup_r+0xd8>)
 8015ba8:	429c      	cmp	r4, r3
 8015baa:	bf08      	it	eq
 8015bac:	68ec      	ldreq	r4, [r5, #12]
 8015bae:	e7e6      	b.n	8015b7e <__swsetup_r+0x1e>
 8015bb0:	0751      	lsls	r1, r2, #29
 8015bb2:	d512      	bpl.n	8015bda <__swsetup_r+0x7a>
 8015bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015bb6:	b141      	cbz	r1, 8015bca <__swsetup_r+0x6a>
 8015bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015bbc:	4299      	cmp	r1, r3
 8015bbe:	d002      	beq.n	8015bc6 <__swsetup_r+0x66>
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	f001 fffd 	bl	8017bc0 <_free_r>
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8015bca:	89a3      	ldrh	r3, [r4, #12]
 8015bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015bd0:	81a3      	strh	r3, [r4, #12]
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	6063      	str	r3, [r4, #4]
 8015bd6:	6923      	ldr	r3, [r4, #16]
 8015bd8:	6023      	str	r3, [r4, #0]
 8015bda:	89a3      	ldrh	r3, [r4, #12]
 8015bdc:	f043 0308 	orr.w	r3, r3, #8
 8015be0:	81a3      	strh	r3, [r4, #12]
 8015be2:	6923      	ldr	r3, [r4, #16]
 8015be4:	b94b      	cbnz	r3, 8015bfa <__swsetup_r+0x9a>
 8015be6:	89a3      	ldrh	r3, [r4, #12]
 8015be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015bf0:	d003      	beq.n	8015bfa <__swsetup_r+0x9a>
 8015bf2:	4621      	mov	r1, r4
 8015bf4:	4630      	mov	r0, r6
 8015bf6:	f001 fb7b 	bl	80172f0 <__smakebuf_r>
 8015bfa:	89a2      	ldrh	r2, [r4, #12]
 8015bfc:	f012 0301 	ands.w	r3, r2, #1
 8015c00:	d00c      	beq.n	8015c1c <__swsetup_r+0xbc>
 8015c02:	2300      	movs	r3, #0
 8015c04:	60a3      	str	r3, [r4, #8]
 8015c06:	6963      	ldr	r3, [r4, #20]
 8015c08:	425b      	negs	r3, r3
 8015c0a:	61a3      	str	r3, [r4, #24]
 8015c0c:	6923      	ldr	r3, [r4, #16]
 8015c0e:	b953      	cbnz	r3, 8015c26 <__swsetup_r+0xc6>
 8015c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015c18:	d1ba      	bne.n	8015b90 <__swsetup_r+0x30>
 8015c1a:	bd70      	pop	{r4, r5, r6, pc}
 8015c1c:	0792      	lsls	r2, r2, #30
 8015c1e:	bf58      	it	pl
 8015c20:	6963      	ldrpl	r3, [r4, #20]
 8015c22:	60a3      	str	r3, [r4, #8]
 8015c24:	e7f2      	b.n	8015c0c <__swsetup_r+0xac>
 8015c26:	2000      	movs	r0, #0
 8015c28:	e7f7      	b.n	8015c1a <__swsetup_r+0xba>
 8015c2a:	bf00      	nop
 8015c2c:	20000024 	.word	0x20000024
 8015c30:	08019268 	.word	0x08019268
 8015c34:	08019288 	.word	0x08019288
 8015c38:	08019248 	.word	0x08019248

08015c3c <quorem>:
 8015c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c40:	6903      	ldr	r3, [r0, #16]
 8015c42:	690c      	ldr	r4, [r1, #16]
 8015c44:	42a3      	cmp	r3, r4
 8015c46:	4680      	mov	r8, r0
 8015c48:	f2c0 8082 	blt.w	8015d50 <quorem+0x114>
 8015c4c:	3c01      	subs	r4, #1
 8015c4e:	f101 0714 	add.w	r7, r1, #20
 8015c52:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015c56:	f100 0614 	add.w	r6, r0, #20
 8015c5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015c5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015c62:	eb06 030c 	add.w	r3, r6, ip
 8015c66:	3501      	adds	r5, #1
 8015c68:	eb07 090c 	add.w	r9, r7, ip
 8015c6c:	9301      	str	r3, [sp, #4]
 8015c6e:	fbb0 f5f5 	udiv	r5, r0, r5
 8015c72:	b395      	cbz	r5, 8015cda <quorem+0x9e>
 8015c74:	f04f 0a00 	mov.w	sl, #0
 8015c78:	4638      	mov	r0, r7
 8015c7a:	46b6      	mov	lr, r6
 8015c7c:	46d3      	mov	fp, sl
 8015c7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8015c82:	b293      	uxth	r3, r2
 8015c84:	fb05 a303 	mla	r3, r5, r3, sl
 8015c88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	ebab 0303 	sub.w	r3, fp, r3
 8015c92:	0c12      	lsrs	r2, r2, #16
 8015c94:	f8de b000 	ldr.w	fp, [lr]
 8015c98:	fb05 a202 	mla	r2, r5, r2, sl
 8015c9c:	fa13 f38b 	uxtah	r3, r3, fp
 8015ca0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015ca4:	fa1f fb82 	uxth.w	fp, r2
 8015ca8:	f8de 2000 	ldr.w	r2, [lr]
 8015cac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015cb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015cb4:	b29b      	uxth	r3, r3
 8015cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015cba:	4581      	cmp	r9, r0
 8015cbc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015cc0:	f84e 3b04 	str.w	r3, [lr], #4
 8015cc4:	d2db      	bcs.n	8015c7e <quorem+0x42>
 8015cc6:	f856 300c 	ldr.w	r3, [r6, ip]
 8015cca:	b933      	cbnz	r3, 8015cda <quorem+0x9e>
 8015ccc:	9b01      	ldr	r3, [sp, #4]
 8015cce:	3b04      	subs	r3, #4
 8015cd0:	429e      	cmp	r6, r3
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	d330      	bcc.n	8015d38 <quorem+0xfc>
 8015cd6:	f8c8 4010 	str.w	r4, [r8, #16]
 8015cda:	4640      	mov	r0, r8
 8015cdc:	f001 fdb6 	bl	801784c <__mcmp>
 8015ce0:	2800      	cmp	r0, #0
 8015ce2:	db25      	blt.n	8015d30 <quorem+0xf4>
 8015ce4:	3501      	adds	r5, #1
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	f04f 0c00 	mov.w	ip, #0
 8015cec:	f857 2b04 	ldr.w	r2, [r7], #4
 8015cf0:	f8d0 e000 	ldr.w	lr, [r0]
 8015cf4:	b293      	uxth	r3, r2
 8015cf6:	ebac 0303 	sub.w	r3, ip, r3
 8015cfa:	0c12      	lsrs	r2, r2, #16
 8015cfc:	fa13 f38e 	uxtah	r3, r3, lr
 8015d00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015d08:	b29b      	uxth	r3, r3
 8015d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d0e:	45b9      	cmp	r9, r7
 8015d10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015d14:	f840 3b04 	str.w	r3, [r0], #4
 8015d18:	d2e8      	bcs.n	8015cec <quorem+0xb0>
 8015d1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015d1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015d22:	b92a      	cbnz	r2, 8015d30 <quorem+0xf4>
 8015d24:	3b04      	subs	r3, #4
 8015d26:	429e      	cmp	r6, r3
 8015d28:	461a      	mov	r2, r3
 8015d2a:	d30b      	bcc.n	8015d44 <quorem+0x108>
 8015d2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8015d30:	4628      	mov	r0, r5
 8015d32:	b003      	add	sp, #12
 8015d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d38:	6812      	ldr	r2, [r2, #0]
 8015d3a:	3b04      	subs	r3, #4
 8015d3c:	2a00      	cmp	r2, #0
 8015d3e:	d1ca      	bne.n	8015cd6 <quorem+0x9a>
 8015d40:	3c01      	subs	r4, #1
 8015d42:	e7c5      	b.n	8015cd0 <quorem+0x94>
 8015d44:	6812      	ldr	r2, [r2, #0]
 8015d46:	3b04      	subs	r3, #4
 8015d48:	2a00      	cmp	r2, #0
 8015d4a:	d1ef      	bne.n	8015d2c <quorem+0xf0>
 8015d4c:	3c01      	subs	r4, #1
 8015d4e:	e7ea      	b.n	8015d26 <quorem+0xea>
 8015d50:	2000      	movs	r0, #0
 8015d52:	e7ee      	b.n	8015d32 <quorem+0xf6>
 8015d54:	0000      	movs	r0, r0
	...

08015d58 <_dtoa_r>:
 8015d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d5c:	ec57 6b10 	vmov	r6, r7, d0
 8015d60:	b097      	sub	sp, #92	; 0x5c
 8015d62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015d64:	9106      	str	r1, [sp, #24]
 8015d66:	4604      	mov	r4, r0
 8015d68:	920b      	str	r2, [sp, #44]	; 0x2c
 8015d6a:	9312      	str	r3, [sp, #72]	; 0x48
 8015d6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015d70:	e9cd 6700 	strd	r6, r7, [sp]
 8015d74:	b93d      	cbnz	r5, 8015d86 <_dtoa_r+0x2e>
 8015d76:	2010      	movs	r0, #16
 8015d78:	f001 fafa 	bl	8017370 <malloc>
 8015d7c:	6260      	str	r0, [r4, #36]	; 0x24
 8015d7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015d82:	6005      	str	r5, [r0, #0]
 8015d84:	60c5      	str	r5, [r0, #12]
 8015d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d88:	6819      	ldr	r1, [r3, #0]
 8015d8a:	b151      	cbz	r1, 8015da2 <_dtoa_r+0x4a>
 8015d8c:	685a      	ldr	r2, [r3, #4]
 8015d8e:	604a      	str	r2, [r1, #4]
 8015d90:	2301      	movs	r3, #1
 8015d92:	4093      	lsls	r3, r2
 8015d94:	608b      	str	r3, [r1, #8]
 8015d96:	4620      	mov	r0, r4
 8015d98:	f001 fb38 	bl	801740c <_Bfree>
 8015d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d9e:	2200      	movs	r2, #0
 8015da0:	601a      	str	r2, [r3, #0]
 8015da2:	1e3b      	subs	r3, r7, #0
 8015da4:	bfbb      	ittet	lt
 8015da6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015daa:	9301      	strlt	r3, [sp, #4]
 8015dac:	2300      	movge	r3, #0
 8015dae:	2201      	movlt	r2, #1
 8015db0:	bfac      	ite	ge
 8015db2:	f8c8 3000 	strge.w	r3, [r8]
 8015db6:	f8c8 2000 	strlt.w	r2, [r8]
 8015dba:	4baf      	ldr	r3, [pc, #700]	; (8016078 <_dtoa_r+0x320>)
 8015dbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015dc0:	ea33 0308 	bics.w	r3, r3, r8
 8015dc4:	d114      	bne.n	8015df0 <_dtoa_r+0x98>
 8015dc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8015dcc:	6013      	str	r3, [r2, #0]
 8015dce:	9b00      	ldr	r3, [sp, #0]
 8015dd0:	b923      	cbnz	r3, 8015ddc <_dtoa_r+0x84>
 8015dd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015dd6:	2800      	cmp	r0, #0
 8015dd8:	f000 8542 	beq.w	8016860 <_dtoa_r+0xb08>
 8015ddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015dde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801608c <_dtoa_r+0x334>
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	f000 8544 	beq.w	8016870 <_dtoa_r+0xb18>
 8015de8:	f10b 0303 	add.w	r3, fp, #3
 8015dec:	f000 bd3e 	b.w	801686c <_dtoa_r+0xb14>
 8015df0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015df4:	2200      	movs	r2, #0
 8015df6:	2300      	movs	r3, #0
 8015df8:	4630      	mov	r0, r6
 8015dfa:	4639      	mov	r1, r7
 8015dfc:	f7f2 fd9c 	bl	8008938 <__aeabi_dcmpeq>
 8015e00:	4681      	mov	r9, r0
 8015e02:	b168      	cbz	r0, 8015e20 <_dtoa_r+0xc8>
 8015e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015e06:	2301      	movs	r3, #1
 8015e08:	6013      	str	r3, [r2, #0]
 8015e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	f000 8524 	beq.w	801685a <_dtoa_r+0xb02>
 8015e12:	4b9a      	ldr	r3, [pc, #616]	; (801607c <_dtoa_r+0x324>)
 8015e14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015e16:	f103 3bff 	add.w	fp, r3, #4294967295
 8015e1a:	6013      	str	r3, [r2, #0]
 8015e1c:	f000 bd28 	b.w	8016870 <_dtoa_r+0xb18>
 8015e20:	aa14      	add	r2, sp, #80	; 0x50
 8015e22:	a915      	add	r1, sp, #84	; 0x54
 8015e24:	ec47 6b10 	vmov	d0, r6, r7
 8015e28:	4620      	mov	r0, r4
 8015e2a:	f001 fdfd 	bl	8017a28 <__d2b>
 8015e2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015e32:	9004      	str	r0, [sp, #16]
 8015e34:	2d00      	cmp	r5, #0
 8015e36:	d07c      	beq.n	8015f32 <_dtoa_r+0x1da>
 8015e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015e3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015e40:	46b2      	mov	sl, r6
 8015e42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015e46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015e4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8015e4e:	2200      	movs	r2, #0
 8015e50:	4b8b      	ldr	r3, [pc, #556]	; (8016080 <_dtoa_r+0x328>)
 8015e52:	4650      	mov	r0, sl
 8015e54:	4659      	mov	r1, fp
 8015e56:	f7f2 f94f 	bl	80080f8 <__aeabi_dsub>
 8015e5a:	a381      	add	r3, pc, #516	; (adr r3, 8016060 <_dtoa_r+0x308>)
 8015e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e60:	f7f2 fb02 	bl	8008468 <__aeabi_dmul>
 8015e64:	a380      	add	r3, pc, #512	; (adr r3, 8016068 <_dtoa_r+0x310>)
 8015e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e6a:	f7f2 f947 	bl	80080fc <__adddf3>
 8015e6e:	4606      	mov	r6, r0
 8015e70:	4628      	mov	r0, r5
 8015e72:	460f      	mov	r7, r1
 8015e74:	f7f2 fa8e 	bl	8008394 <__aeabi_i2d>
 8015e78:	a37d      	add	r3, pc, #500	; (adr r3, 8016070 <_dtoa_r+0x318>)
 8015e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7e:	f7f2 faf3 	bl	8008468 <__aeabi_dmul>
 8015e82:	4602      	mov	r2, r0
 8015e84:	460b      	mov	r3, r1
 8015e86:	4630      	mov	r0, r6
 8015e88:	4639      	mov	r1, r7
 8015e8a:	f7f2 f937 	bl	80080fc <__adddf3>
 8015e8e:	4606      	mov	r6, r0
 8015e90:	460f      	mov	r7, r1
 8015e92:	f7f2 fd99 	bl	80089c8 <__aeabi_d2iz>
 8015e96:	2200      	movs	r2, #0
 8015e98:	4682      	mov	sl, r0
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	4630      	mov	r0, r6
 8015e9e:	4639      	mov	r1, r7
 8015ea0:	f7f2 fd54 	bl	800894c <__aeabi_dcmplt>
 8015ea4:	b148      	cbz	r0, 8015eba <_dtoa_r+0x162>
 8015ea6:	4650      	mov	r0, sl
 8015ea8:	f7f2 fa74 	bl	8008394 <__aeabi_i2d>
 8015eac:	4632      	mov	r2, r6
 8015eae:	463b      	mov	r3, r7
 8015eb0:	f7f2 fd42 	bl	8008938 <__aeabi_dcmpeq>
 8015eb4:	b908      	cbnz	r0, 8015eba <_dtoa_r+0x162>
 8015eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015eba:	f1ba 0f16 	cmp.w	sl, #22
 8015ebe:	d859      	bhi.n	8015f74 <_dtoa_r+0x21c>
 8015ec0:	4970      	ldr	r1, [pc, #448]	; (8016084 <_dtoa_r+0x32c>)
 8015ec2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ece:	f7f2 fd5b 	bl	8008988 <__aeabi_dcmpgt>
 8015ed2:	2800      	cmp	r0, #0
 8015ed4:	d050      	beq.n	8015f78 <_dtoa_r+0x220>
 8015ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015eda:	2300      	movs	r3, #0
 8015edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015ee0:	1b5d      	subs	r5, r3, r5
 8015ee2:	f1b5 0801 	subs.w	r8, r5, #1
 8015ee6:	bf49      	itett	mi
 8015ee8:	f1c5 0301 	rsbmi	r3, r5, #1
 8015eec:	2300      	movpl	r3, #0
 8015eee:	9305      	strmi	r3, [sp, #20]
 8015ef0:	f04f 0800 	movmi.w	r8, #0
 8015ef4:	bf58      	it	pl
 8015ef6:	9305      	strpl	r3, [sp, #20]
 8015ef8:	f1ba 0f00 	cmp.w	sl, #0
 8015efc:	db3e      	blt.n	8015f7c <_dtoa_r+0x224>
 8015efe:	2300      	movs	r3, #0
 8015f00:	44d0      	add	r8, sl
 8015f02:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015f06:	9307      	str	r3, [sp, #28]
 8015f08:	9b06      	ldr	r3, [sp, #24]
 8015f0a:	2b09      	cmp	r3, #9
 8015f0c:	f200 8090 	bhi.w	8016030 <_dtoa_r+0x2d8>
 8015f10:	2b05      	cmp	r3, #5
 8015f12:	bfc4      	itt	gt
 8015f14:	3b04      	subgt	r3, #4
 8015f16:	9306      	strgt	r3, [sp, #24]
 8015f18:	9b06      	ldr	r3, [sp, #24]
 8015f1a:	f1a3 0302 	sub.w	r3, r3, #2
 8015f1e:	bfcc      	ite	gt
 8015f20:	2500      	movgt	r5, #0
 8015f22:	2501      	movle	r5, #1
 8015f24:	2b03      	cmp	r3, #3
 8015f26:	f200 808f 	bhi.w	8016048 <_dtoa_r+0x2f0>
 8015f2a:	e8df f003 	tbb	[pc, r3]
 8015f2e:	7f7d      	.short	0x7f7d
 8015f30:	7131      	.short	0x7131
 8015f32:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015f36:	441d      	add	r5, r3
 8015f38:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015f3c:	2820      	cmp	r0, #32
 8015f3e:	dd13      	ble.n	8015f68 <_dtoa_r+0x210>
 8015f40:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015f44:	9b00      	ldr	r3, [sp, #0]
 8015f46:	fa08 f800 	lsl.w	r8, r8, r0
 8015f4a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015f4e:	fa23 f000 	lsr.w	r0, r3, r0
 8015f52:	ea48 0000 	orr.w	r0, r8, r0
 8015f56:	f7f2 fa0d 	bl	8008374 <__aeabi_ui2d>
 8015f5a:	2301      	movs	r3, #1
 8015f5c:	4682      	mov	sl, r0
 8015f5e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015f62:	3d01      	subs	r5, #1
 8015f64:	9313      	str	r3, [sp, #76]	; 0x4c
 8015f66:	e772      	b.n	8015e4e <_dtoa_r+0xf6>
 8015f68:	9b00      	ldr	r3, [sp, #0]
 8015f6a:	f1c0 0020 	rsb	r0, r0, #32
 8015f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8015f72:	e7f0      	b.n	8015f56 <_dtoa_r+0x1fe>
 8015f74:	2301      	movs	r3, #1
 8015f76:	e7b1      	b.n	8015edc <_dtoa_r+0x184>
 8015f78:	900f      	str	r0, [sp, #60]	; 0x3c
 8015f7a:	e7b0      	b.n	8015ede <_dtoa_r+0x186>
 8015f7c:	9b05      	ldr	r3, [sp, #20]
 8015f7e:	eba3 030a 	sub.w	r3, r3, sl
 8015f82:	9305      	str	r3, [sp, #20]
 8015f84:	f1ca 0300 	rsb	r3, sl, #0
 8015f88:	9307      	str	r3, [sp, #28]
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8015f8e:	e7bb      	b.n	8015f08 <_dtoa_r+0x1b0>
 8015f90:	2301      	movs	r3, #1
 8015f92:	930a      	str	r3, [sp, #40]	; 0x28
 8015f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	dd59      	ble.n	801604e <_dtoa_r+0x2f6>
 8015f9a:	9302      	str	r3, [sp, #8]
 8015f9c:	4699      	mov	r9, r3
 8015f9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	6072      	str	r2, [r6, #4]
 8015fa4:	2204      	movs	r2, #4
 8015fa6:	f102 0014 	add.w	r0, r2, #20
 8015faa:	4298      	cmp	r0, r3
 8015fac:	6871      	ldr	r1, [r6, #4]
 8015fae:	d953      	bls.n	8016058 <_dtoa_r+0x300>
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	f001 f9f7 	bl	80173a4 <_Balloc>
 8015fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fb8:	6030      	str	r0, [r6, #0]
 8015fba:	f1b9 0f0e 	cmp.w	r9, #14
 8015fbe:	f8d3 b000 	ldr.w	fp, [r3]
 8015fc2:	f200 80e6 	bhi.w	8016192 <_dtoa_r+0x43a>
 8015fc6:	2d00      	cmp	r5, #0
 8015fc8:	f000 80e3 	beq.w	8016192 <_dtoa_r+0x43a>
 8015fcc:	ed9d 7b00 	vldr	d7, [sp]
 8015fd0:	f1ba 0f00 	cmp.w	sl, #0
 8015fd4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015fd8:	dd74      	ble.n	80160c4 <_dtoa_r+0x36c>
 8015fda:	4a2a      	ldr	r2, [pc, #168]	; (8016084 <_dtoa_r+0x32c>)
 8015fdc:	f00a 030f 	and.w	r3, sl, #15
 8015fe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015fe4:	ed93 7b00 	vldr	d7, [r3]
 8015fe8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8015fec:	06f0      	lsls	r0, r6, #27
 8015fee:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015ff2:	d565      	bpl.n	80160c0 <_dtoa_r+0x368>
 8015ff4:	4b24      	ldr	r3, [pc, #144]	; (8016088 <_dtoa_r+0x330>)
 8015ff6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015ffa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015ffe:	f7f2 fb5d 	bl	80086bc <__aeabi_ddiv>
 8016002:	e9cd 0100 	strd	r0, r1, [sp]
 8016006:	f006 060f 	and.w	r6, r6, #15
 801600a:	2503      	movs	r5, #3
 801600c:	4f1e      	ldr	r7, [pc, #120]	; (8016088 <_dtoa_r+0x330>)
 801600e:	e04c      	b.n	80160aa <_dtoa_r+0x352>
 8016010:	2301      	movs	r3, #1
 8016012:	930a      	str	r3, [sp, #40]	; 0x28
 8016014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016016:	4453      	add	r3, sl
 8016018:	f103 0901 	add.w	r9, r3, #1
 801601c:	9302      	str	r3, [sp, #8]
 801601e:	464b      	mov	r3, r9
 8016020:	2b01      	cmp	r3, #1
 8016022:	bfb8      	it	lt
 8016024:	2301      	movlt	r3, #1
 8016026:	e7ba      	b.n	8015f9e <_dtoa_r+0x246>
 8016028:	2300      	movs	r3, #0
 801602a:	e7b2      	b.n	8015f92 <_dtoa_r+0x23a>
 801602c:	2300      	movs	r3, #0
 801602e:	e7f0      	b.n	8016012 <_dtoa_r+0x2ba>
 8016030:	2501      	movs	r5, #1
 8016032:	2300      	movs	r3, #0
 8016034:	9306      	str	r3, [sp, #24]
 8016036:	950a      	str	r5, [sp, #40]	; 0x28
 8016038:	f04f 33ff 	mov.w	r3, #4294967295
 801603c:	9302      	str	r3, [sp, #8]
 801603e:	4699      	mov	r9, r3
 8016040:	2200      	movs	r2, #0
 8016042:	2312      	movs	r3, #18
 8016044:	920b      	str	r2, [sp, #44]	; 0x2c
 8016046:	e7aa      	b.n	8015f9e <_dtoa_r+0x246>
 8016048:	2301      	movs	r3, #1
 801604a:	930a      	str	r3, [sp, #40]	; 0x28
 801604c:	e7f4      	b.n	8016038 <_dtoa_r+0x2e0>
 801604e:	2301      	movs	r3, #1
 8016050:	9302      	str	r3, [sp, #8]
 8016052:	4699      	mov	r9, r3
 8016054:	461a      	mov	r2, r3
 8016056:	e7f5      	b.n	8016044 <_dtoa_r+0x2ec>
 8016058:	3101      	adds	r1, #1
 801605a:	6071      	str	r1, [r6, #4]
 801605c:	0052      	lsls	r2, r2, #1
 801605e:	e7a2      	b.n	8015fa6 <_dtoa_r+0x24e>
 8016060:	636f4361 	.word	0x636f4361
 8016064:	3fd287a7 	.word	0x3fd287a7
 8016068:	8b60c8b3 	.word	0x8b60c8b3
 801606c:	3fc68a28 	.word	0x3fc68a28
 8016070:	509f79fb 	.word	0x509f79fb
 8016074:	3fd34413 	.word	0x3fd34413
 8016078:	7ff00000 	.word	0x7ff00000
 801607c:	080193dc 	.word	0x080193dc
 8016080:	3ff80000 	.word	0x3ff80000
 8016084:	080192e0 	.word	0x080192e0
 8016088:	080192b8 	.word	0x080192b8
 801608c:	08019241 	.word	0x08019241
 8016090:	07f1      	lsls	r1, r6, #31
 8016092:	d508      	bpl.n	80160a6 <_dtoa_r+0x34e>
 8016094:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016098:	e9d7 2300 	ldrd	r2, r3, [r7]
 801609c:	f7f2 f9e4 	bl	8008468 <__aeabi_dmul>
 80160a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80160a4:	3501      	adds	r5, #1
 80160a6:	1076      	asrs	r6, r6, #1
 80160a8:	3708      	adds	r7, #8
 80160aa:	2e00      	cmp	r6, #0
 80160ac:	d1f0      	bne.n	8016090 <_dtoa_r+0x338>
 80160ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80160b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80160b6:	f7f2 fb01 	bl	80086bc <__aeabi_ddiv>
 80160ba:	e9cd 0100 	strd	r0, r1, [sp]
 80160be:	e01a      	b.n	80160f6 <_dtoa_r+0x39e>
 80160c0:	2502      	movs	r5, #2
 80160c2:	e7a3      	b.n	801600c <_dtoa_r+0x2b4>
 80160c4:	f000 80a0 	beq.w	8016208 <_dtoa_r+0x4b0>
 80160c8:	f1ca 0600 	rsb	r6, sl, #0
 80160cc:	4b9f      	ldr	r3, [pc, #636]	; (801634c <_dtoa_r+0x5f4>)
 80160ce:	4fa0      	ldr	r7, [pc, #640]	; (8016350 <_dtoa_r+0x5f8>)
 80160d0:	f006 020f 	and.w	r2, r6, #15
 80160d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80160d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80160e0:	f7f2 f9c2 	bl	8008468 <__aeabi_dmul>
 80160e4:	e9cd 0100 	strd	r0, r1, [sp]
 80160e8:	1136      	asrs	r6, r6, #4
 80160ea:	2300      	movs	r3, #0
 80160ec:	2502      	movs	r5, #2
 80160ee:	2e00      	cmp	r6, #0
 80160f0:	d17f      	bne.n	80161f2 <_dtoa_r+0x49a>
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d1e1      	bne.n	80160ba <_dtoa_r+0x362>
 80160f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	f000 8087 	beq.w	801620c <_dtoa_r+0x4b4>
 80160fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016102:	2200      	movs	r2, #0
 8016104:	4b93      	ldr	r3, [pc, #588]	; (8016354 <_dtoa_r+0x5fc>)
 8016106:	4630      	mov	r0, r6
 8016108:	4639      	mov	r1, r7
 801610a:	f7f2 fc1f 	bl	800894c <__aeabi_dcmplt>
 801610e:	2800      	cmp	r0, #0
 8016110:	d07c      	beq.n	801620c <_dtoa_r+0x4b4>
 8016112:	f1b9 0f00 	cmp.w	r9, #0
 8016116:	d079      	beq.n	801620c <_dtoa_r+0x4b4>
 8016118:	9b02      	ldr	r3, [sp, #8]
 801611a:	2b00      	cmp	r3, #0
 801611c:	dd35      	ble.n	801618a <_dtoa_r+0x432>
 801611e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016122:	9308      	str	r3, [sp, #32]
 8016124:	4639      	mov	r1, r7
 8016126:	2200      	movs	r2, #0
 8016128:	4b8b      	ldr	r3, [pc, #556]	; (8016358 <_dtoa_r+0x600>)
 801612a:	4630      	mov	r0, r6
 801612c:	f7f2 f99c 	bl	8008468 <__aeabi_dmul>
 8016130:	e9cd 0100 	strd	r0, r1, [sp]
 8016134:	9f02      	ldr	r7, [sp, #8]
 8016136:	3501      	adds	r5, #1
 8016138:	4628      	mov	r0, r5
 801613a:	f7f2 f92b 	bl	8008394 <__aeabi_i2d>
 801613e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016142:	f7f2 f991 	bl	8008468 <__aeabi_dmul>
 8016146:	2200      	movs	r2, #0
 8016148:	4b84      	ldr	r3, [pc, #528]	; (801635c <_dtoa_r+0x604>)
 801614a:	f7f1 ffd7 	bl	80080fc <__adddf3>
 801614e:	4605      	mov	r5, r0
 8016150:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016154:	2f00      	cmp	r7, #0
 8016156:	d15d      	bne.n	8016214 <_dtoa_r+0x4bc>
 8016158:	2200      	movs	r2, #0
 801615a:	4b81      	ldr	r3, [pc, #516]	; (8016360 <_dtoa_r+0x608>)
 801615c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016160:	f7f1 ffca 	bl	80080f8 <__aeabi_dsub>
 8016164:	462a      	mov	r2, r5
 8016166:	4633      	mov	r3, r6
 8016168:	e9cd 0100 	strd	r0, r1, [sp]
 801616c:	f7f2 fc0c 	bl	8008988 <__aeabi_dcmpgt>
 8016170:	2800      	cmp	r0, #0
 8016172:	f040 8288 	bne.w	8016686 <_dtoa_r+0x92e>
 8016176:	462a      	mov	r2, r5
 8016178:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801617c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016180:	f7f2 fbe4 	bl	800894c <__aeabi_dcmplt>
 8016184:	2800      	cmp	r0, #0
 8016186:	f040 827c 	bne.w	8016682 <_dtoa_r+0x92a>
 801618a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801618e:	e9cd 2300 	strd	r2, r3, [sp]
 8016192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016194:	2b00      	cmp	r3, #0
 8016196:	f2c0 8150 	blt.w	801643a <_dtoa_r+0x6e2>
 801619a:	f1ba 0f0e 	cmp.w	sl, #14
 801619e:	f300 814c 	bgt.w	801643a <_dtoa_r+0x6e2>
 80161a2:	4b6a      	ldr	r3, [pc, #424]	; (801634c <_dtoa_r+0x5f4>)
 80161a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80161a8:	ed93 7b00 	vldr	d7, [r3]
 80161ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80161b4:	f280 80d8 	bge.w	8016368 <_dtoa_r+0x610>
 80161b8:	f1b9 0f00 	cmp.w	r9, #0
 80161bc:	f300 80d4 	bgt.w	8016368 <_dtoa_r+0x610>
 80161c0:	f040 825e 	bne.w	8016680 <_dtoa_r+0x928>
 80161c4:	2200      	movs	r2, #0
 80161c6:	4b66      	ldr	r3, [pc, #408]	; (8016360 <_dtoa_r+0x608>)
 80161c8:	ec51 0b17 	vmov	r0, r1, d7
 80161cc:	f7f2 f94c 	bl	8008468 <__aeabi_dmul>
 80161d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161d4:	f7f2 fbce 	bl	8008974 <__aeabi_dcmpge>
 80161d8:	464f      	mov	r7, r9
 80161da:	464e      	mov	r6, r9
 80161dc:	2800      	cmp	r0, #0
 80161de:	f040 8234 	bne.w	801664a <_dtoa_r+0x8f2>
 80161e2:	2331      	movs	r3, #49	; 0x31
 80161e4:	f10b 0501 	add.w	r5, fp, #1
 80161e8:	f88b 3000 	strb.w	r3, [fp]
 80161ec:	f10a 0a01 	add.w	sl, sl, #1
 80161f0:	e22f      	b.n	8016652 <_dtoa_r+0x8fa>
 80161f2:	07f2      	lsls	r2, r6, #31
 80161f4:	d505      	bpl.n	8016202 <_dtoa_r+0x4aa>
 80161f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80161fa:	f7f2 f935 	bl	8008468 <__aeabi_dmul>
 80161fe:	3501      	adds	r5, #1
 8016200:	2301      	movs	r3, #1
 8016202:	1076      	asrs	r6, r6, #1
 8016204:	3708      	adds	r7, #8
 8016206:	e772      	b.n	80160ee <_dtoa_r+0x396>
 8016208:	2502      	movs	r5, #2
 801620a:	e774      	b.n	80160f6 <_dtoa_r+0x39e>
 801620c:	f8cd a020 	str.w	sl, [sp, #32]
 8016210:	464f      	mov	r7, r9
 8016212:	e791      	b.n	8016138 <_dtoa_r+0x3e0>
 8016214:	4b4d      	ldr	r3, [pc, #308]	; (801634c <_dtoa_r+0x5f4>)
 8016216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801621a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016220:	2b00      	cmp	r3, #0
 8016222:	d047      	beq.n	80162b4 <_dtoa_r+0x55c>
 8016224:	4602      	mov	r2, r0
 8016226:	460b      	mov	r3, r1
 8016228:	2000      	movs	r0, #0
 801622a:	494e      	ldr	r1, [pc, #312]	; (8016364 <_dtoa_r+0x60c>)
 801622c:	f7f2 fa46 	bl	80086bc <__aeabi_ddiv>
 8016230:	462a      	mov	r2, r5
 8016232:	4633      	mov	r3, r6
 8016234:	f7f1 ff60 	bl	80080f8 <__aeabi_dsub>
 8016238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801623c:	465d      	mov	r5, fp
 801623e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016242:	f7f2 fbc1 	bl	80089c8 <__aeabi_d2iz>
 8016246:	4606      	mov	r6, r0
 8016248:	f7f2 f8a4 	bl	8008394 <__aeabi_i2d>
 801624c:	4602      	mov	r2, r0
 801624e:	460b      	mov	r3, r1
 8016250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016254:	f7f1 ff50 	bl	80080f8 <__aeabi_dsub>
 8016258:	3630      	adds	r6, #48	; 0x30
 801625a:	f805 6b01 	strb.w	r6, [r5], #1
 801625e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016262:	e9cd 0100 	strd	r0, r1, [sp]
 8016266:	f7f2 fb71 	bl	800894c <__aeabi_dcmplt>
 801626a:	2800      	cmp	r0, #0
 801626c:	d163      	bne.n	8016336 <_dtoa_r+0x5de>
 801626e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016272:	2000      	movs	r0, #0
 8016274:	4937      	ldr	r1, [pc, #220]	; (8016354 <_dtoa_r+0x5fc>)
 8016276:	f7f1 ff3f 	bl	80080f8 <__aeabi_dsub>
 801627a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801627e:	f7f2 fb65 	bl	800894c <__aeabi_dcmplt>
 8016282:	2800      	cmp	r0, #0
 8016284:	f040 80b7 	bne.w	80163f6 <_dtoa_r+0x69e>
 8016288:	eba5 030b 	sub.w	r3, r5, fp
 801628c:	429f      	cmp	r7, r3
 801628e:	f77f af7c 	ble.w	801618a <_dtoa_r+0x432>
 8016292:	2200      	movs	r2, #0
 8016294:	4b30      	ldr	r3, [pc, #192]	; (8016358 <_dtoa_r+0x600>)
 8016296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801629a:	f7f2 f8e5 	bl	8008468 <__aeabi_dmul>
 801629e:	2200      	movs	r2, #0
 80162a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80162a4:	4b2c      	ldr	r3, [pc, #176]	; (8016358 <_dtoa_r+0x600>)
 80162a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162aa:	f7f2 f8dd 	bl	8008468 <__aeabi_dmul>
 80162ae:	e9cd 0100 	strd	r0, r1, [sp]
 80162b2:	e7c4      	b.n	801623e <_dtoa_r+0x4e6>
 80162b4:	462a      	mov	r2, r5
 80162b6:	4633      	mov	r3, r6
 80162b8:	f7f2 f8d6 	bl	8008468 <__aeabi_dmul>
 80162bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80162c0:	eb0b 0507 	add.w	r5, fp, r7
 80162c4:	465e      	mov	r6, fp
 80162c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162ca:	f7f2 fb7d 	bl	80089c8 <__aeabi_d2iz>
 80162ce:	4607      	mov	r7, r0
 80162d0:	f7f2 f860 	bl	8008394 <__aeabi_i2d>
 80162d4:	3730      	adds	r7, #48	; 0x30
 80162d6:	4602      	mov	r2, r0
 80162d8:	460b      	mov	r3, r1
 80162da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162de:	f7f1 ff0b 	bl	80080f8 <__aeabi_dsub>
 80162e2:	f806 7b01 	strb.w	r7, [r6], #1
 80162e6:	42ae      	cmp	r6, r5
 80162e8:	e9cd 0100 	strd	r0, r1, [sp]
 80162ec:	f04f 0200 	mov.w	r2, #0
 80162f0:	d126      	bne.n	8016340 <_dtoa_r+0x5e8>
 80162f2:	4b1c      	ldr	r3, [pc, #112]	; (8016364 <_dtoa_r+0x60c>)
 80162f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80162f8:	f7f1 ff00 	bl	80080fc <__adddf3>
 80162fc:	4602      	mov	r2, r0
 80162fe:	460b      	mov	r3, r1
 8016300:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016304:	f7f2 fb40 	bl	8008988 <__aeabi_dcmpgt>
 8016308:	2800      	cmp	r0, #0
 801630a:	d174      	bne.n	80163f6 <_dtoa_r+0x69e>
 801630c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016310:	2000      	movs	r0, #0
 8016312:	4914      	ldr	r1, [pc, #80]	; (8016364 <_dtoa_r+0x60c>)
 8016314:	f7f1 fef0 	bl	80080f8 <__aeabi_dsub>
 8016318:	4602      	mov	r2, r0
 801631a:	460b      	mov	r3, r1
 801631c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016320:	f7f2 fb14 	bl	800894c <__aeabi_dcmplt>
 8016324:	2800      	cmp	r0, #0
 8016326:	f43f af30 	beq.w	801618a <_dtoa_r+0x432>
 801632a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801632e:	2b30      	cmp	r3, #48	; 0x30
 8016330:	f105 32ff 	add.w	r2, r5, #4294967295
 8016334:	d002      	beq.n	801633c <_dtoa_r+0x5e4>
 8016336:	f8dd a020 	ldr.w	sl, [sp, #32]
 801633a:	e04a      	b.n	80163d2 <_dtoa_r+0x67a>
 801633c:	4615      	mov	r5, r2
 801633e:	e7f4      	b.n	801632a <_dtoa_r+0x5d2>
 8016340:	4b05      	ldr	r3, [pc, #20]	; (8016358 <_dtoa_r+0x600>)
 8016342:	f7f2 f891 	bl	8008468 <__aeabi_dmul>
 8016346:	e9cd 0100 	strd	r0, r1, [sp]
 801634a:	e7bc      	b.n	80162c6 <_dtoa_r+0x56e>
 801634c:	080192e0 	.word	0x080192e0
 8016350:	080192b8 	.word	0x080192b8
 8016354:	3ff00000 	.word	0x3ff00000
 8016358:	40240000 	.word	0x40240000
 801635c:	401c0000 	.word	0x401c0000
 8016360:	40140000 	.word	0x40140000
 8016364:	3fe00000 	.word	0x3fe00000
 8016368:	e9dd 6700 	ldrd	r6, r7, [sp]
 801636c:	465d      	mov	r5, fp
 801636e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016372:	4630      	mov	r0, r6
 8016374:	4639      	mov	r1, r7
 8016376:	f7f2 f9a1 	bl	80086bc <__aeabi_ddiv>
 801637a:	f7f2 fb25 	bl	80089c8 <__aeabi_d2iz>
 801637e:	4680      	mov	r8, r0
 8016380:	f7f2 f808 	bl	8008394 <__aeabi_i2d>
 8016384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016388:	f7f2 f86e 	bl	8008468 <__aeabi_dmul>
 801638c:	4602      	mov	r2, r0
 801638e:	460b      	mov	r3, r1
 8016390:	4630      	mov	r0, r6
 8016392:	4639      	mov	r1, r7
 8016394:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016398:	f7f1 feae 	bl	80080f8 <__aeabi_dsub>
 801639c:	f805 6b01 	strb.w	r6, [r5], #1
 80163a0:	eba5 060b 	sub.w	r6, r5, fp
 80163a4:	45b1      	cmp	r9, r6
 80163a6:	4602      	mov	r2, r0
 80163a8:	460b      	mov	r3, r1
 80163aa:	d139      	bne.n	8016420 <_dtoa_r+0x6c8>
 80163ac:	f7f1 fea6 	bl	80080fc <__adddf3>
 80163b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80163b4:	4606      	mov	r6, r0
 80163b6:	460f      	mov	r7, r1
 80163b8:	f7f2 fae6 	bl	8008988 <__aeabi_dcmpgt>
 80163bc:	b9c8      	cbnz	r0, 80163f2 <_dtoa_r+0x69a>
 80163be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80163c2:	4630      	mov	r0, r6
 80163c4:	4639      	mov	r1, r7
 80163c6:	f7f2 fab7 	bl	8008938 <__aeabi_dcmpeq>
 80163ca:	b110      	cbz	r0, 80163d2 <_dtoa_r+0x67a>
 80163cc:	f018 0f01 	tst.w	r8, #1
 80163d0:	d10f      	bne.n	80163f2 <_dtoa_r+0x69a>
 80163d2:	9904      	ldr	r1, [sp, #16]
 80163d4:	4620      	mov	r0, r4
 80163d6:	f001 f819 	bl	801740c <_Bfree>
 80163da:	2300      	movs	r3, #0
 80163dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80163de:	702b      	strb	r3, [r5, #0]
 80163e0:	f10a 0301 	add.w	r3, sl, #1
 80163e4:	6013      	str	r3, [r2, #0]
 80163e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	f000 8241 	beq.w	8016870 <_dtoa_r+0xb18>
 80163ee:	601d      	str	r5, [r3, #0]
 80163f0:	e23e      	b.n	8016870 <_dtoa_r+0xb18>
 80163f2:	f8cd a020 	str.w	sl, [sp, #32]
 80163f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80163fa:	2a39      	cmp	r2, #57	; 0x39
 80163fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8016400:	d108      	bne.n	8016414 <_dtoa_r+0x6bc>
 8016402:	459b      	cmp	fp, r3
 8016404:	d10a      	bne.n	801641c <_dtoa_r+0x6c4>
 8016406:	9b08      	ldr	r3, [sp, #32]
 8016408:	3301      	adds	r3, #1
 801640a:	9308      	str	r3, [sp, #32]
 801640c:	2330      	movs	r3, #48	; 0x30
 801640e:	f88b 3000 	strb.w	r3, [fp]
 8016412:	465b      	mov	r3, fp
 8016414:	781a      	ldrb	r2, [r3, #0]
 8016416:	3201      	adds	r2, #1
 8016418:	701a      	strb	r2, [r3, #0]
 801641a:	e78c      	b.n	8016336 <_dtoa_r+0x5de>
 801641c:	461d      	mov	r5, r3
 801641e:	e7ea      	b.n	80163f6 <_dtoa_r+0x69e>
 8016420:	2200      	movs	r2, #0
 8016422:	4b9b      	ldr	r3, [pc, #620]	; (8016690 <_dtoa_r+0x938>)
 8016424:	f7f2 f820 	bl	8008468 <__aeabi_dmul>
 8016428:	2200      	movs	r2, #0
 801642a:	2300      	movs	r3, #0
 801642c:	4606      	mov	r6, r0
 801642e:	460f      	mov	r7, r1
 8016430:	f7f2 fa82 	bl	8008938 <__aeabi_dcmpeq>
 8016434:	2800      	cmp	r0, #0
 8016436:	d09a      	beq.n	801636e <_dtoa_r+0x616>
 8016438:	e7cb      	b.n	80163d2 <_dtoa_r+0x67a>
 801643a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801643c:	2a00      	cmp	r2, #0
 801643e:	f000 808b 	beq.w	8016558 <_dtoa_r+0x800>
 8016442:	9a06      	ldr	r2, [sp, #24]
 8016444:	2a01      	cmp	r2, #1
 8016446:	dc6e      	bgt.n	8016526 <_dtoa_r+0x7ce>
 8016448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801644a:	2a00      	cmp	r2, #0
 801644c:	d067      	beq.n	801651e <_dtoa_r+0x7c6>
 801644e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016452:	9f07      	ldr	r7, [sp, #28]
 8016454:	9d05      	ldr	r5, [sp, #20]
 8016456:	9a05      	ldr	r2, [sp, #20]
 8016458:	2101      	movs	r1, #1
 801645a:	441a      	add	r2, r3
 801645c:	4620      	mov	r0, r4
 801645e:	9205      	str	r2, [sp, #20]
 8016460:	4498      	add	r8, r3
 8016462:	f001 f8b1 	bl	80175c8 <__i2b>
 8016466:	4606      	mov	r6, r0
 8016468:	2d00      	cmp	r5, #0
 801646a:	dd0c      	ble.n	8016486 <_dtoa_r+0x72e>
 801646c:	f1b8 0f00 	cmp.w	r8, #0
 8016470:	dd09      	ble.n	8016486 <_dtoa_r+0x72e>
 8016472:	4545      	cmp	r5, r8
 8016474:	9a05      	ldr	r2, [sp, #20]
 8016476:	462b      	mov	r3, r5
 8016478:	bfa8      	it	ge
 801647a:	4643      	movge	r3, r8
 801647c:	1ad2      	subs	r2, r2, r3
 801647e:	9205      	str	r2, [sp, #20]
 8016480:	1aed      	subs	r5, r5, r3
 8016482:	eba8 0803 	sub.w	r8, r8, r3
 8016486:	9b07      	ldr	r3, [sp, #28]
 8016488:	b1eb      	cbz	r3, 80164c6 <_dtoa_r+0x76e>
 801648a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801648c:	2b00      	cmp	r3, #0
 801648e:	d067      	beq.n	8016560 <_dtoa_r+0x808>
 8016490:	b18f      	cbz	r7, 80164b6 <_dtoa_r+0x75e>
 8016492:	4631      	mov	r1, r6
 8016494:	463a      	mov	r2, r7
 8016496:	4620      	mov	r0, r4
 8016498:	f001 f936 	bl	8017708 <__pow5mult>
 801649c:	9a04      	ldr	r2, [sp, #16]
 801649e:	4601      	mov	r1, r0
 80164a0:	4606      	mov	r6, r0
 80164a2:	4620      	mov	r0, r4
 80164a4:	f001 f899 	bl	80175da <__multiply>
 80164a8:	9904      	ldr	r1, [sp, #16]
 80164aa:	9008      	str	r0, [sp, #32]
 80164ac:	4620      	mov	r0, r4
 80164ae:	f000 ffad 	bl	801740c <_Bfree>
 80164b2:	9b08      	ldr	r3, [sp, #32]
 80164b4:	9304      	str	r3, [sp, #16]
 80164b6:	9b07      	ldr	r3, [sp, #28]
 80164b8:	1bda      	subs	r2, r3, r7
 80164ba:	d004      	beq.n	80164c6 <_dtoa_r+0x76e>
 80164bc:	9904      	ldr	r1, [sp, #16]
 80164be:	4620      	mov	r0, r4
 80164c0:	f001 f922 	bl	8017708 <__pow5mult>
 80164c4:	9004      	str	r0, [sp, #16]
 80164c6:	2101      	movs	r1, #1
 80164c8:	4620      	mov	r0, r4
 80164ca:	f001 f87d 	bl	80175c8 <__i2b>
 80164ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164d0:	4607      	mov	r7, r0
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	f000 81d0 	beq.w	8016878 <_dtoa_r+0xb20>
 80164d8:	461a      	mov	r2, r3
 80164da:	4601      	mov	r1, r0
 80164dc:	4620      	mov	r0, r4
 80164de:	f001 f913 	bl	8017708 <__pow5mult>
 80164e2:	9b06      	ldr	r3, [sp, #24]
 80164e4:	2b01      	cmp	r3, #1
 80164e6:	4607      	mov	r7, r0
 80164e8:	dc40      	bgt.n	801656c <_dtoa_r+0x814>
 80164ea:	9b00      	ldr	r3, [sp, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d139      	bne.n	8016564 <_dtoa_r+0x80c>
 80164f0:	9b01      	ldr	r3, [sp, #4]
 80164f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d136      	bne.n	8016568 <_dtoa_r+0x810>
 80164fa:	9b01      	ldr	r3, [sp, #4]
 80164fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016500:	0d1b      	lsrs	r3, r3, #20
 8016502:	051b      	lsls	r3, r3, #20
 8016504:	b12b      	cbz	r3, 8016512 <_dtoa_r+0x7ba>
 8016506:	9b05      	ldr	r3, [sp, #20]
 8016508:	3301      	adds	r3, #1
 801650a:	9305      	str	r3, [sp, #20]
 801650c:	f108 0801 	add.w	r8, r8, #1
 8016510:	2301      	movs	r3, #1
 8016512:	9307      	str	r3, [sp, #28]
 8016514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016516:	2b00      	cmp	r3, #0
 8016518:	d12a      	bne.n	8016570 <_dtoa_r+0x818>
 801651a:	2001      	movs	r0, #1
 801651c:	e030      	b.n	8016580 <_dtoa_r+0x828>
 801651e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016520:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016524:	e795      	b.n	8016452 <_dtoa_r+0x6fa>
 8016526:	9b07      	ldr	r3, [sp, #28]
 8016528:	f109 37ff 	add.w	r7, r9, #4294967295
 801652c:	42bb      	cmp	r3, r7
 801652e:	bfbf      	itttt	lt
 8016530:	9b07      	ldrlt	r3, [sp, #28]
 8016532:	9707      	strlt	r7, [sp, #28]
 8016534:	1afa      	sublt	r2, r7, r3
 8016536:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016538:	bfbb      	ittet	lt
 801653a:	189b      	addlt	r3, r3, r2
 801653c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801653e:	1bdf      	subge	r7, r3, r7
 8016540:	2700      	movlt	r7, #0
 8016542:	f1b9 0f00 	cmp.w	r9, #0
 8016546:	bfb5      	itete	lt
 8016548:	9b05      	ldrlt	r3, [sp, #20]
 801654a:	9d05      	ldrge	r5, [sp, #20]
 801654c:	eba3 0509 	sublt.w	r5, r3, r9
 8016550:	464b      	movge	r3, r9
 8016552:	bfb8      	it	lt
 8016554:	2300      	movlt	r3, #0
 8016556:	e77e      	b.n	8016456 <_dtoa_r+0x6fe>
 8016558:	9f07      	ldr	r7, [sp, #28]
 801655a:	9d05      	ldr	r5, [sp, #20]
 801655c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801655e:	e783      	b.n	8016468 <_dtoa_r+0x710>
 8016560:	9a07      	ldr	r2, [sp, #28]
 8016562:	e7ab      	b.n	80164bc <_dtoa_r+0x764>
 8016564:	2300      	movs	r3, #0
 8016566:	e7d4      	b.n	8016512 <_dtoa_r+0x7ba>
 8016568:	9b00      	ldr	r3, [sp, #0]
 801656a:	e7d2      	b.n	8016512 <_dtoa_r+0x7ba>
 801656c:	2300      	movs	r3, #0
 801656e:	9307      	str	r3, [sp, #28]
 8016570:	693b      	ldr	r3, [r7, #16]
 8016572:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016576:	6918      	ldr	r0, [r3, #16]
 8016578:	f000 ffd8 	bl	801752c <__hi0bits>
 801657c:	f1c0 0020 	rsb	r0, r0, #32
 8016580:	4440      	add	r0, r8
 8016582:	f010 001f 	ands.w	r0, r0, #31
 8016586:	d047      	beq.n	8016618 <_dtoa_r+0x8c0>
 8016588:	f1c0 0320 	rsb	r3, r0, #32
 801658c:	2b04      	cmp	r3, #4
 801658e:	dd3b      	ble.n	8016608 <_dtoa_r+0x8b0>
 8016590:	9b05      	ldr	r3, [sp, #20]
 8016592:	f1c0 001c 	rsb	r0, r0, #28
 8016596:	4403      	add	r3, r0
 8016598:	9305      	str	r3, [sp, #20]
 801659a:	4405      	add	r5, r0
 801659c:	4480      	add	r8, r0
 801659e:	9b05      	ldr	r3, [sp, #20]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	dd05      	ble.n	80165b0 <_dtoa_r+0x858>
 80165a4:	461a      	mov	r2, r3
 80165a6:	9904      	ldr	r1, [sp, #16]
 80165a8:	4620      	mov	r0, r4
 80165aa:	f001 f8fb 	bl	80177a4 <__lshift>
 80165ae:	9004      	str	r0, [sp, #16]
 80165b0:	f1b8 0f00 	cmp.w	r8, #0
 80165b4:	dd05      	ble.n	80165c2 <_dtoa_r+0x86a>
 80165b6:	4639      	mov	r1, r7
 80165b8:	4642      	mov	r2, r8
 80165ba:	4620      	mov	r0, r4
 80165bc:	f001 f8f2 	bl	80177a4 <__lshift>
 80165c0:	4607      	mov	r7, r0
 80165c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165c4:	b353      	cbz	r3, 801661c <_dtoa_r+0x8c4>
 80165c6:	4639      	mov	r1, r7
 80165c8:	9804      	ldr	r0, [sp, #16]
 80165ca:	f001 f93f 	bl	801784c <__mcmp>
 80165ce:	2800      	cmp	r0, #0
 80165d0:	da24      	bge.n	801661c <_dtoa_r+0x8c4>
 80165d2:	2300      	movs	r3, #0
 80165d4:	220a      	movs	r2, #10
 80165d6:	9904      	ldr	r1, [sp, #16]
 80165d8:	4620      	mov	r0, r4
 80165da:	f000 ff2e 	bl	801743a <__multadd>
 80165de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165e0:	9004      	str	r0, [sp, #16]
 80165e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	f000 814d 	beq.w	8016886 <_dtoa_r+0xb2e>
 80165ec:	2300      	movs	r3, #0
 80165ee:	4631      	mov	r1, r6
 80165f0:	220a      	movs	r2, #10
 80165f2:	4620      	mov	r0, r4
 80165f4:	f000 ff21 	bl	801743a <__multadd>
 80165f8:	9b02      	ldr	r3, [sp, #8]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	4606      	mov	r6, r0
 80165fe:	dc4f      	bgt.n	80166a0 <_dtoa_r+0x948>
 8016600:	9b06      	ldr	r3, [sp, #24]
 8016602:	2b02      	cmp	r3, #2
 8016604:	dd4c      	ble.n	80166a0 <_dtoa_r+0x948>
 8016606:	e011      	b.n	801662c <_dtoa_r+0x8d4>
 8016608:	d0c9      	beq.n	801659e <_dtoa_r+0x846>
 801660a:	9a05      	ldr	r2, [sp, #20]
 801660c:	331c      	adds	r3, #28
 801660e:	441a      	add	r2, r3
 8016610:	9205      	str	r2, [sp, #20]
 8016612:	441d      	add	r5, r3
 8016614:	4498      	add	r8, r3
 8016616:	e7c2      	b.n	801659e <_dtoa_r+0x846>
 8016618:	4603      	mov	r3, r0
 801661a:	e7f6      	b.n	801660a <_dtoa_r+0x8b2>
 801661c:	f1b9 0f00 	cmp.w	r9, #0
 8016620:	dc38      	bgt.n	8016694 <_dtoa_r+0x93c>
 8016622:	9b06      	ldr	r3, [sp, #24]
 8016624:	2b02      	cmp	r3, #2
 8016626:	dd35      	ble.n	8016694 <_dtoa_r+0x93c>
 8016628:	f8cd 9008 	str.w	r9, [sp, #8]
 801662c:	9b02      	ldr	r3, [sp, #8]
 801662e:	b963      	cbnz	r3, 801664a <_dtoa_r+0x8f2>
 8016630:	4639      	mov	r1, r7
 8016632:	2205      	movs	r2, #5
 8016634:	4620      	mov	r0, r4
 8016636:	f000 ff00 	bl	801743a <__multadd>
 801663a:	4601      	mov	r1, r0
 801663c:	4607      	mov	r7, r0
 801663e:	9804      	ldr	r0, [sp, #16]
 8016640:	f001 f904 	bl	801784c <__mcmp>
 8016644:	2800      	cmp	r0, #0
 8016646:	f73f adcc 	bgt.w	80161e2 <_dtoa_r+0x48a>
 801664a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801664c:	465d      	mov	r5, fp
 801664e:	ea6f 0a03 	mvn.w	sl, r3
 8016652:	f04f 0900 	mov.w	r9, #0
 8016656:	4639      	mov	r1, r7
 8016658:	4620      	mov	r0, r4
 801665a:	f000 fed7 	bl	801740c <_Bfree>
 801665e:	2e00      	cmp	r6, #0
 8016660:	f43f aeb7 	beq.w	80163d2 <_dtoa_r+0x67a>
 8016664:	f1b9 0f00 	cmp.w	r9, #0
 8016668:	d005      	beq.n	8016676 <_dtoa_r+0x91e>
 801666a:	45b1      	cmp	r9, r6
 801666c:	d003      	beq.n	8016676 <_dtoa_r+0x91e>
 801666e:	4649      	mov	r1, r9
 8016670:	4620      	mov	r0, r4
 8016672:	f000 fecb 	bl	801740c <_Bfree>
 8016676:	4631      	mov	r1, r6
 8016678:	4620      	mov	r0, r4
 801667a:	f000 fec7 	bl	801740c <_Bfree>
 801667e:	e6a8      	b.n	80163d2 <_dtoa_r+0x67a>
 8016680:	2700      	movs	r7, #0
 8016682:	463e      	mov	r6, r7
 8016684:	e7e1      	b.n	801664a <_dtoa_r+0x8f2>
 8016686:	f8dd a020 	ldr.w	sl, [sp, #32]
 801668a:	463e      	mov	r6, r7
 801668c:	e5a9      	b.n	80161e2 <_dtoa_r+0x48a>
 801668e:	bf00      	nop
 8016690:	40240000 	.word	0x40240000
 8016694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016696:	f8cd 9008 	str.w	r9, [sp, #8]
 801669a:	2b00      	cmp	r3, #0
 801669c:	f000 80fa 	beq.w	8016894 <_dtoa_r+0xb3c>
 80166a0:	2d00      	cmp	r5, #0
 80166a2:	dd05      	ble.n	80166b0 <_dtoa_r+0x958>
 80166a4:	4631      	mov	r1, r6
 80166a6:	462a      	mov	r2, r5
 80166a8:	4620      	mov	r0, r4
 80166aa:	f001 f87b 	bl	80177a4 <__lshift>
 80166ae:	4606      	mov	r6, r0
 80166b0:	9b07      	ldr	r3, [sp, #28]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d04c      	beq.n	8016750 <_dtoa_r+0x9f8>
 80166b6:	6871      	ldr	r1, [r6, #4]
 80166b8:	4620      	mov	r0, r4
 80166ba:	f000 fe73 	bl	80173a4 <_Balloc>
 80166be:	6932      	ldr	r2, [r6, #16]
 80166c0:	3202      	adds	r2, #2
 80166c2:	4605      	mov	r5, r0
 80166c4:	0092      	lsls	r2, r2, #2
 80166c6:	f106 010c 	add.w	r1, r6, #12
 80166ca:	300c      	adds	r0, #12
 80166cc:	f7fd fb84 	bl	8013dd8 <memcpy>
 80166d0:	2201      	movs	r2, #1
 80166d2:	4629      	mov	r1, r5
 80166d4:	4620      	mov	r0, r4
 80166d6:	f001 f865 	bl	80177a4 <__lshift>
 80166da:	9b00      	ldr	r3, [sp, #0]
 80166dc:	f8cd b014 	str.w	fp, [sp, #20]
 80166e0:	f003 0301 	and.w	r3, r3, #1
 80166e4:	46b1      	mov	r9, r6
 80166e6:	9307      	str	r3, [sp, #28]
 80166e8:	4606      	mov	r6, r0
 80166ea:	4639      	mov	r1, r7
 80166ec:	9804      	ldr	r0, [sp, #16]
 80166ee:	f7ff faa5 	bl	8015c3c <quorem>
 80166f2:	4649      	mov	r1, r9
 80166f4:	4605      	mov	r5, r0
 80166f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80166fa:	9804      	ldr	r0, [sp, #16]
 80166fc:	f001 f8a6 	bl	801784c <__mcmp>
 8016700:	4632      	mov	r2, r6
 8016702:	9000      	str	r0, [sp, #0]
 8016704:	4639      	mov	r1, r7
 8016706:	4620      	mov	r0, r4
 8016708:	f001 f8ba 	bl	8017880 <__mdiff>
 801670c:	68c3      	ldr	r3, [r0, #12]
 801670e:	4602      	mov	r2, r0
 8016710:	bb03      	cbnz	r3, 8016754 <_dtoa_r+0x9fc>
 8016712:	4601      	mov	r1, r0
 8016714:	9008      	str	r0, [sp, #32]
 8016716:	9804      	ldr	r0, [sp, #16]
 8016718:	f001 f898 	bl	801784c <__mcmp>
 801671c:	9a08      	ldr	r2, [sp, #32]
 801671e:	4603      	mov	r3, r0
 8016720:	4611      	mov	r1, r2
 8016722:	4620      	mov	r0, r4
 8016724:	9308      	str	r3, [sp, #32]
 8016726:	f000 fe71 	bl	801740c <_Bfree>
 801672a:	9b08      	ldr	r3, [sp, #32]
 801672c:	b9a3      	cbnz	r3, 8016758 <_dtoa_r+0xa00>
 801672e:	9a06      	ldr	r2, [sp, #24]
 8016730:	b992      	cbnz	r2, 8016758 <_dtoa_r+0xa00>
 8016732:	9a07      	ldr	r2, [sp, #28]
 8016734:	b982      	cbnz	r2, 8016758 <_dtoa_r+0xa00>
 8016736:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801673a:	d029      	beq.n	8016790 <_dtoa_r+0xa38>
 801673c:	9b00      	ldr	r3, [sp, #0]
 801673e:	2b00      	cmp	r3, #0
 8016740:	dd01      	ble.n	8016746 <_dtoa_r+0x9ee>
 8016742:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016746:	9b05      	ldr	r3, [sp, #20]
 8016748:	1c5d      	adds	r5, r3, #1
 801674a:	f883 8000 	strb.w	r8, [r3]
 801674e:	e782      	b.n	8016656 <_dtoa_r+0x8fe>
 8016750:	4630      	mov	r0, r6
 8016752:	e7c2      	b.n	80166da <_dtoa_r+0x982>
 8016754:	2301      	movs	r3, #1
 8016756:	e7e3      	b.n	8016720 <_dtoa_r+0x9c8>
 8016758:	9a00      	ldr	r2, [sp, #0]
 801675a:	2a00      	cmp	r2, #0
 801675c:	db04      	blt.n	8016768 <_dtoa_r+0xa10>
 801675e:	d125      	bne.n	80167ac <_dtoa_r+0xa54>
 8016760:	9a06      	ldr	r2, [sp, #24]
 8016762:	bb1a      	cbnz	r2, 80167ac <_dtoa_r+0xa54>
 8016764:	9a07      	ldr	r2, [sp, #28]
 8016766:	bb0a      	cbnz	r2, 80167ac <_dtoa_r+0xa54>
 8016768:	2b00      	cmp	r3, #0
 801676a:	ddec      	ble.n	8016746 <_dtoa_r+0x9ee>
 801676c:	2201      	movs	r2, #1
 801676e:	9904      	ldr	r1, [sp, #16]
 8016770:	4620      	mov	r0, r4
 8016772:	f001 f817 	bl	80177a4 <__lshift>
 8016776:	4639      	mov	r1, r7
 8016778:	9004      	str	r0, [sp, #16]
 801677a:	f001 f867 	bl	801784c <__mcmp>
 801677e:	2800      	cmp	r0, #0
 8016780:	dc03      	bgt.n	801678a <_dtoa_r+0xa32>
 8016782:	d1e0      	bne.n	8016746 <_dtoa_r+0x9ee>
 8016784:	f018 0f01 	tst.w	r8, #1
 8016788:	d0dd      	beq.n	8016746 <_dtoa_r+0x9ee>
 801678a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801678e:	d1d8      	bne.n	8016742 <_dtoa_r+0x9ea>
 8016790:	9b05      	ldr	r3, [sp, #20]
 8016792:	9a05      	ldr	r2, [sp, #20]
 8016794:	1c5d      	adds	r5, r3, #1
 8016796:	2339      	movs	r3, #57	; 0x39
 8016798:	7013      	strb	r3, [r2, #0]
 801679a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801679e:	2b39      	cmp	r3, #57	; 0x39
 80167a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80167a4:	d04f      	beq.n	8016846 <_dtoa_r+0xaee>
 80167a6:	3301      	adds	r3, #1
 80167a8:	7013      	strb	r3, [r2, #0]
 80167aa:	e754      	b.n	8016656 <_dtoa_r+0x8fe>
 80167ac:	9a05      	ldr	r2, [sp, #20]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	f102 0501 	add.w	r5, r2, #1
 80167b4:	dd06      	ble.n	80167c4 <_dtoa_r+0xa6c>
 80167b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80167ba:	d0e9      	beq.n	8016790 <_dtoa_r+0xa38>
 80167bc:	f108 0801 	add.w	r8, r8, #1
 80167c0:	9b05      	ldr	r3, [sp, #20]
 80167c2:	e7c2      	b.n	801674a <_dtoa_r+0x9f2>
 80167c4:	9a02      	ldr	r2, [sp, #8]
 80167c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80167ca:	eba5 030b 	sub.w	r3, r5, fp
 80167ce:	4293      	cmp	r3, r2
 80167d0:	d021      	beq.n	8016816 <_dtoa_r+0xabe>
 80167d2:	2300      	movs	r3, #0
 80167d4:	220a      	movs	r2, #10
 80167d6:	9904      	ldr	r1, [sp, #16]
 80167d8:	4620      	mov	r0, r4
 80167da:	f000 fe2e 	bl	801743a <__multadd>
 80167de:	45b1      	cmp	r9, r6
 80167e0:	9004      	str	r0, [sp, #16]
 80167e2:	f04f 0300 	mov.w	r3, #0
 80167e6:	f04f 020a 	mov.w	r2, #10
 80167ea:	4649      	mov	r1, r9
 80167ec:	4620      	mov	r0, r4
 80167ee:	d105      	bne.n	80167fc <_dtoa_r+0xaa4>
 80167f0:	f000 fe23 	bl	801743a <__multadd>
 80167f4:	4681      	mov	r9, r0
 80167f6:	4606      	mov	r6, r0
 80167f8:	9505      	str	r5, [sp, #20]
 80167fa:	e776      	b.n	80166ea <_dtoa_r+0x992>
 80167fc:	f000 fe1d 	bl	801743a <__multadd>
 8016800:	4631      	mov	r1, r6
 8016802:	4681      	mov	r9, r0
 8016804:	2300      	movs	r3, #0
 8016806:	220a      	movs	r2, #10
 8016808:	4620      	mov	r0, r4
 801680a:	f000 fe16 	bl	801743a <__multadd>
 801680e:	4606      	mov	r6, r0
 8016810:	e7f2      	b.n	80167f8 <_dtoa_r+0xaa0>
 8016812:	f04f 0900 	mov.w	r9, #0
 8016816:	2201      	movs	r2, #1
 8016818:	9904      	ldr	r1, [sp, #16]
 801681a:	4620      	mov	r0, r4
 801681c:	f000 ffc2 	bl	80177a4 <__lshift>
 8016820:	4639      	mov	r1, r7
 8016822:	9004      	str	r0, [sp, #16]
 8016824:	f001 f812 	bl	801784c <__mcmp>
 8016828:	2800      	cmp	r0, #0
 801682a:	dcb6      	bgt.n	801679a <_dtoa_r+0xa42>
 801682c:	d102      	bne.n	8016834 <_dtoa_r+0xadc>
 801682e:	f018 0f01 	tst.w	r8, #1
 8016832:	d1b2      	bne.n	801679a <_dtoa_r+0xa42>
 8016834:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016838:	2b30      	cmp	r3, #48	; 0x30
 801683a:	f105 32ff 	add.w	r2, r5, #4294967295
 801683e:	f47f af0a 	bne.w	8016656 <_dtoa_r+0x8fe>
 8016842:	4615      	mov	r5, r2
 8016844:	e7f6      	b.n	8016834 <_dtoa_r+0xadc>
 8016846:	4593      	cmp	fp, r2
 8016848:	d105      	bne.n	8016856 <_dtoa_r+0xafe>
 801684a:	2331      	movs	r3, #49	; 0x31
 801684c:	f10a 0a01 	add.w	sl, sl, #1
 8016850:	f88b 3000 	strb.w	r3, [fp]
 8016854:	e6ff      	b.n	8016656 <_dtoa_r+0x8fe>
 8016856:	4615      	mov	r5, r2
 8016858:	e79f      	b.n	801679a <_dtoa_r+0xa42>
 801685a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80168c0 <_dtoa_r+0xb68>
 801685e:	e007      	b.n	8016870 <_dtoa_r+0xb18>
 8016860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016862:	f8df b060 	ldr.w	fp, [pc, #96]	; 80168c4 <_dtoa_r+0xb6c>
 8016866:	b11b      	cbz	r3, 8016870 <_dtoa_r+0xb18>
 8016868:	f10b 0308 	add.w	r3, fp, #8
 801686c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801686e:	6013      	str	r3, [r2, #0]
 8016870:	4658      	mov	r0, fp
 8016872:	b017      	add	sp, #92	; 0x5c
 8016874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016878:	9b06      	ldr	r3, [sp, #24]
 801687a:	2b01      	cmp	r3, #1
 801687c:	f77f ae35 	ble.w	80164ea <_dtoa_r+0x792>
 8016880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016882:	9307      	str	r3, [sp, #28]
 8016884:	e649      	b.n	801651a <_dtoa_r+0x7c2>
 8016886:	9b02      	ldr	r3, [sp, #8]
 8016888:	2b00      	cmp	r3, #0
 801688a:	dc03      	bgt.n	8016894 <_dtoa_r+0xb3c>
 801688c:	9b06      	ldr	r3, [sp, #24]
 801688e:	2b02      	cmp	r3, #2
 8016890:	f73f aecc 	bgt.w	801662c <_dtoa_r+0x8d4>
 8016894:	465d      	mov	r5, fp
 8016896:	4639      	mov	r1, r7
 8016898:	9804      	ldr	r0, [sp, #16]
 801689a:	f7ff f9cf 	bl	8015c3c <quorem>
 801689e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80168a2:	f805 8b01 	strb.w	r8, [r5], #1
 80168a6:	9a02      	ldr	r2, [sp, #8]
 80168a8:	eba5 030b 	sub.w	r3, r5, fp
 80168ac:	429a      	cmp	r2, r3
 80168ae:	ddb0      	ble.n	8016812 <_dtoa_r+0xaba>
 80168b0:	2300      	movs	r3, #0
 80168b2:	220a      	movs	r2, #10
 80168b4:	9904      	ldr	r1, [sp, #16]
 80168b6:	4620      	mov	r0, r4
 80168b8:	f000 fdbf 	bl	801743a <__multadd>
 80168bc:	9004      	str	r0, [sp, #16]
 80168be:	e7ea      	b.n	8016896 <_dtoa_r+0xb3e>
 80168c0:	080193db 	.word	0x080193db
 80168c4:	08019238 	.word	0x08019238

080168c8 <__sflush_r>:
 80168c8:	898a      	ldrh	r2, [r1, #12]
 80168ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168ce:	4605      	mov	r5, r0
 80168d0:	0710      	lsls	r0, r2, #28
 80168d2:	460c      	mov	r4, r1
 80168d4:	d458      	bmi.n	8016988 <__sflush_r+0xc0>
 80168d6:	684b      	ldr	r3, [r1, #4]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	dc05      	bgt.n	80168e8 <__sflush_r+0x20>
 80168dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80168de:	2b00      	cmp	r3, #0
 80168e0:	dc02      	bgt.n	80168e8 <__sflush_r+0x20>
 80168e2:	2000      	movs	r0, #0
 80168e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168ea:	2e00      	cmp	r6, #0
 80168ec:	d0f9      	beq.n	80168e2 <__sflush_r+0x1a>
 80168ee:	2300      	movs	r3, #0
 80168f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80168f4:	682f      	ldr	r7, [r5, #0]
 80168f6:	6a21      	ldr	r1, [r4, #32]
 80168f8:	602b      	str	r3, [r5, #0]
 80168fa:	d032      	beq.n	8016962 <__sflush_r+0x9a>
 80168fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80168fe:	89a3      	ldrh	r3, [r4, #12]
 8016900:	075a      	lsls	r2, r3, #29
 8016902:	d505      	bpl.n	8016910 <__sflush_r+0x48>
 8016904:	6863      	ldr	r3, [r4, #4]
 8016906:	1ac0      	subs	r0, r0, r3
 8016908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801690a:	b10b      	cbz	r3, 8016910 <__sflush_r+0x48>
 801690c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801690e:	1ac0      	subs	r0, r0, r3
 8016910:	2300      	movs	r3, #0
 8016912:	4602      	mov	r2, r0
 8016914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016916:	6a21      	ldr	r1, [r4, #32]
 8016918:	4628      	mov	r0, r5
 801691a:	47b0      	blx	r6
 801691c:	1c43      	adds	r3, r0, #1
 801691e:	89a3      	ldrh	r3, [r4, #12]
 8016920:	d106      	bne.n	8016930 <__sflush_r+0x68>
 8016922:	6829      	ldr	r1, [r5, #0]
 8016924:	291d      	cmp	r1, #29
 8016926:	d848      	bhi.n	80169ba <__sflush_r+0xf2>
 8016928:	4a29      	ldr	r2, [pc, #164]	; (80169d0 <__sflush_r+0x108>)
 801692a:	40ca      	lsrs	r2, r1
 801692c:	07d6      	lsls	r6, r2, #31
 801692e:	d544      	bpl.n	80169ba <__sflush_r+0xf2>
 8016930:	2200      	movs	r2, #0
 8016932:	6062      	str	r2, [r4, #4]
 8016934:	04d9      	lsls	r1, r3, #19
 8016936:	6922      	ldr	r2, [r4, #16]
 8016938:	6022      	str	r2, [r4, #0]
 801693a:	d504      	bpl.n	8016946 <__sflush_r+0x7e>
 801693c:	1c42      	adds	r2, r0, #1
 801693e:	d101      	bne.n	8016944 <__sflush_r+0x7c>
 8016940:	682b      	ldr	r3, [r5, #0]
 8016942:	b903      	cbnz	r3, 8016946 <__sflush_r+0x7e>
 8016944:	6560      	str	r0, [r4, #84]	; 0x54
 8016946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016948:	602f      	str	r7, [r5, #0]
 801694a:	2900      	cmp	r1, #0
 801694c:	d0c9      	beq.n	80168e2 <__sflush_r+0x1a>
 801694e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016952:	4299      	cmp	r1, r3
 8016954:	d002      	beq.n	801695c <__sflush_r+0x94>
 8016956:	4628      	mov	r0, r5
 8016958:	f001 f932 	bl	8017bc0 <_free_r>
 801695c:	2000      	movs	r0, #0
 801695e:	6360      	str	r0, [r4, #52]	; 0x34
 8016960:	e7c0      	b.n	80168e4 <__sflush_r+0x1c>
 8016962:	2301      	movs	r3, #1
 8016964:	4628      	mov	r0, r5
 8016966:	47b0      	blx	r6
 8016968:	1c41      	adds	r1, r0, #1
 801696a:	d1c8      	bne.n	80168fe <__sflush_r+0x36>
 801696c:	682b      	ldr	r3, [r5, #0]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d0c5      	beq.n	80168fe <__sflush_r+0x36>
 8016972:	2b1d      	cmp	r3, #29
 8016974:	d001      	beq.n	801697a <__sflush_r+0xb2>
 8016976:	2b16      	cmp	r3, #22
 8016978:	d101      	bne.n	801697e <__sflush_r+0xb6>
 801697a:	602f      	str	r7, [r5, #0]
 801697c:	e7b1      	b.n	80168e2 <__sflush_r+0x1a>
 801697e:	89a3      	ldrh	r3, [r4, #12]
 8016980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016984:	81a3      	strh	r3, [r4, #12]
 8016986:	e7ad      	b.n	80168e4 <__sflush_r+0x1c>
 8016988:	690f      	ldr	r7, [r1, #16]
 801698a:	2f00      	cmp	r7, #0
 801698c:	d0a9      	beq.n	80168e2 <__sflush_r+0x1a>
 801698e:	0793      	lsls	r3, r2, #30
 8016990:	680e      	ldr	r6, [r1, #0]
 8016992:	bf08      	it	eq
 8016994:	694b      	ldreq	r3, [r1, #20]
 8016996:	600f      	str	r7, [r1, #0]
 8016998:	bf18      	it	ne
 801699a:	2300      	movne	r3, #0
 801699c:	eba6 0807 	sub.w	r8, r6, r7
 80169a0:	608b      	str	r3, [r1, #8]
 80169a2:	f1b8 0f00 	cmp.w	r8, #0
 80169a6:	dd9c      	ble.n	80168e2 <__sflush_r+0x1a>
 80169a8:	4643      	mov	r3, r8
 80169aa:	463a      	mov	r2, r7
 80169ac:	6a21      	ldr	r1, [r4, #32]
 80169ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80169b0:	4628      	mov	r0, r5
 80169b2:	47b0      	blx	r6
 80169b4:	2800      	cmp	r0, #0
 80169b6:	dc06      	bgt.n	80169c6 <__sflush_r+0xfe>
 80169b8:	89a3      	ldrh	r3, [r4, #12]
 80169ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169be:	81a3      	strh	r3, [r4, #12]
 80169c0:	f04f 30ff 	mov.w	r0, #4294967295
 80169c4:	e78e      	b.n	80168e4 <__sflush_r+0x1c>
 80169c6:	4407      	add	r7, r0
 80169c8:	eba8 0800 	sub.w	r8, r8, r0
 80169cc:	e7e9      	b.n	80169a2 <__sflush_r+0xda>
 80169ce:	bf00      	nop
 80169d0:	20400001 	.word	0x20400001

080169d4 <_fflush_r>:
 80169d4:	b538      	push	{r3, r4, r5, lr}
 80169d6:	690b      	ldr	r3, [r1, #16]
 80169d8:	4605      	mov	r5, r0
 80169da:	460c      	mov	r4, r1
 80169dc:	b1db      	cbz	r3, 8016a16 <_fflush_r+0x42>
 80169de:	b118      	cbz	r0, 80169e8 <_fflush_r+0x14>
 80169e0:	6983      	ldr	r3, [r0, #24]
 80169e2:	b90b      	cbnz	r3, 80169e8 <_fflush_r+0x14>
 80169e4:	f000 f872 	bl	8016acc <__sinit>
 80169e8:	4b0c      	ldr	r3, [pc, #48]	; (8016a1c <_fflush_r+0x48>)
 80169ea:	429c      	cmp	r4, r3
 80169ec:	d109      	bne.n	8016a02 <_fflush_r+0x2e>
 80169ee:	686c      	ldr	r4, [r5, #4]
 80169f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169f4:	b17b      	cbz	r3, 8016a16 <_fflush_r+0x42>
 80169f6:	4621      	mov	r1, r4
 80169f8:	4628      	mov	r0, r5
 80169fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169fe:	f7ff bf63 	b.w	80168c8 <__sflush_r>
 8016a02:	4b07      	ldr	r3, [pc, #28]	; (8016a20 <_fflush_r+0x4c>)
 8016a04:	429c      	cmp	r4, r3
 8016a06:	d101      	bne.n	8016a0c <_fflush_r+0x38>
 8016a08:	68ac      	ldr	r4, [r5, #8]
 8016a0a:	e7f1      	b.n	80169f0 <_fflush_r+0x1c>
 8016a0c:	4b05      	ldr	r3, [pc, #20]	; (8016a24 <_fflush_r+0x50>)
 8016a0e:	429c      	cmp	r4, r3
 8016a10:	bf08      	it	eq
 8016a12:	68ec      	ldreq	r4, [r5, #12]
 8016a14:	e7ec      	b.n	80169f0 <_fflush_r+0x1c>
 8016a16:	2000      	movs	r0, #0
 8016a18:	bd38      	pop	{r3, r4, r5, pc}
 8016a1a:	bf00      	nop
 8016a1c:	08019268 	.word	0x08019268
 8016a20:	08019288 	.word	0x08019288
 8016a24:	08019248 	.word	0x08019248

08016a28 <fflush>:
 8016a28:	4601      	mov	r1, r0
 8016a2a:	b920      	cbnz	r0, 8016a36 <fflush+0xe>
 8016a2c:	4b04      	ldr	r3, [pc, #16]	; (8016a40 <fflush+0x18>)
 8016a2e:	4905      	ldr	r1, [pc, #20]	; (8016a44 <fflush+0x1c>)
 8016a30:	6818      	ldr	r0, [r3, #0]
 8016a32:	f000 b8d3 	b.w	8016bdc <_fwalk_reent>
 8016a36:	4b04      	ldr	r3, [pc, #16]	; (8016a48 <fflush+0x20>)
 8016a38:	6818      	ldr	r0, [r3, #0]
 8016a3a:	f7ff bfcb 	b.w	80169d4 <_fflush_r>
 8016a3e:	bf00      	nop
 8016a40:	080191ac 	.word	0x080191ac
 8016a44:	080169d5 	.word	0x080169d5
 8016a48:	20000024 	.word	0x20000024

08016a4c <std>:
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	b510      	push	{r4, lr}
 8016a50:	4604      	mov	r4, r0
 8016a52:	e9c0 3300 	strd	r3, r3, [r0]
 8016a56:	6083      	str	r3, [r0, #8]
 8016a58:	8181      	strh	r1, [r0, #12]
 8016a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8016a5c:	81c2      	strh	r2, [r0, #14]
 8016a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a62:	6183      	str	r3, [r0, #24]
 8016a64:	4619      	mov	r1, r3
 8016a66:	2208      	movs	r2, #8
 8016a68:	305c      	adds	r0, #92	; 0x5c
 8016a6a:	f7fd f9c0 	bl	8013dee <memset>
 8016a6e:	4b05      	ldr	r3, [pc, #20]	; (8016a84 <std+0x38>)
 8016a70:	6263      	str	r3, [r4, #36]	; 0x24
 8016a72:	4b05      	ldr	r3, [pc, #20]	; (8016a88 <std+0x3c>)
 8016a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a76:	4b05      	ldr	r3, [pc, #20]	; (8016a8c <std+0x40>)
 8016a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a7a:	4b05      	ldr	r3, [pc, #20]	; (8016a90 <std+0x44>)
 8016a7c:	6224      	str	r4, [r4, #32]
 8016a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8016a80:	bd10      	pop	{r4, pc}
 8016a82:	bf00      	nop
 8016a84:	08018985 	.word	0x08018985
 8016a88:	080189a7 	.word	0x080189a7
 8016a8c:	080189df 	.word	0x080189df
 8016a90:	08018a03 	.word	0x08018a03

08016a94 <_cleanup_r>:
 8016a94:	4901      	ldr	r1, [pc, #4]	; (8016a9c <_cleanup_r+0x8>)
 8016a96:	f000 b8a1 	b.w	8016bdc <_fwalk_reent>
 8016a9a:	bf00      	nop
 8016a9c:	080169d5 	.word	0x080169d5

08016aa0 <__sfmoreglue>:
 8016aa0:	b570      	push	{r4, r5, r6, lr}
 8016aa2:	1e4a      	subs	r2, r1, #1
 8016aa4:	2568      	movs	r5, #104	; 0x68
 8016aa6:	4355      	muls	r5, r2
 8016aa8:	460e      	mov	r6, r1
 8016aaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016aae:	f001 f8d5 	bl	8017c5c <_malloc_r>
 8016ab2:	4604      	mov	r4, r0
 8016ab4:	b140      	cbz	r0, 8016ac8 <__sfmoreglue+0x28>
 8016ab6:	2100      	movs	r1, #0
 8016ab8:	e9c0 1600 	strd	r1, r6, [r0]
 8016abc:	300c      	adds	r0, #12
 8016abe:	60a0      	str	r0, [r4, #8]
 8016ac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016ac4:	f7fd f993 	bl	8013dee <memset>
 8016ac8:	4620      	mov	r0, r4
 8016aca:	bd70      	pop	{r4, r5, r6, pc}

08016acc <__sinit>:
 8016acc:	6983      	ldr	r3, [r0, #24]
 8016ace:	b510      	push	{r4, lr}
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	bb33      	cbnz	r3, 8016b22 <__sinit+0x56>
 8016ad4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016ad8:	6503      	str	r3, [r0, #80]	; 0x50
 8016ada:	4b12      	ldr	r3, [pc, #72]	; (8016b24 <__sinit+0x58>)
 8016adc:	4a12      	ldr	r2, [pc, #72]	; (8016b28 <__sinit+0x5c>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	6282      	str	r2, [r0, #40]	; 0x28
 8016ae2:	4298      	cmp	r0, r3
 8016ae4:	bf04      	itt	eq
 8016ae6:	2301      	moveq	r3, #1
 8016ae8:	6183      	streq	r3, [r0, #24]
 8016aea:	f000 f81f 	bl	8016b2c <__sfp>
 8016aee:	6060      	str	r0, [r4, #4]
 8016af0:	4620      	mov	r0, r4
 8016af2:	f000 f81b 	bl	8016b2c <__sfp>
 8016af6:	60a0      	str	r0, [r4, #8]
 8016af8:	4620      	mov	r0, r4
 8016afa:	f000 f817 	bl	8016b2c <__sfp>
 8016afe:	2200      	movs	r2, #0
 8016b00:	60e0      	str	r0, [r4, #12]
 8016b02:	2104      	movs	r1, #4
 8016b04:	6860      	ldr	r0, [r4, #4]
 8016b06:	f7ff ffa1 	bl	8016a4c <std>
 8016b0a:	2201      	movs	r2, #1
 8016b0c:	2109      	movs	r1, #9
 8016b0e:	68a0      	ldr	r0, [r4, #8]
 8016b10:	f7ff ff9c 	bl	8016a4c <std>
 8016b14:	2202      	movs	r2, #2
 8016b16:	2112      	movs	r1, #18
 8016b18:	68e0      	ldr	r0, [r4, #12]
 8016b1a:	f7ff ff97 	bl	8016a4c <std>
 8016b1e:	2301      	movs	r3, #1
 8016b20:	61a3      	str	r3, [r4, #24]
 8016b22:	bd10      	pop	{r4, pc}
 8016b24:	080191ac 	.word	0x080191ac
 8016b28:	08016a95 	.word	0x08016a95

08016b2c <__sfp>:
 8016b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b2e:	4b1b      	ldr	r3, [pc, #108]	; (8016b9c <__sfp+0x70>)
 8016b30:	681e      	ldr	r6, [r3, #0]
 8016b32:	69b3      	ldr	r3, [r6, #24]
 8016b34:	4607      	mov	r7, r0
 8016b36:	b913      	cbnz	r3, 8016b3e <__sfp+0x12>
 8016b38:	4630      	mov	r0, r6
 8016b3a:	f7ff ffc7 	bl	8016acc <__sinit>
 8016b3e:	3648      	adds	r6, #72	; 0x48
 8016b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016b44:	3b01      	subs	r3, #1
 8016b46:	d503      	bpl.n	8016b50 <__sfp+0x24>
 8016b48:	6833      	ldr	r3, [r6, #0]
 8016b4a:	b133      	cbz	r3, 8016b5a <__sfp+0x2e>
 8016b4c:	6836      	ldr	r6, [r6, #0]
 8016b4e:	e7f7      	b.n	8016b40 <__sfp+0x14>
 8016b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016b54:	b16d      	cbz	r5, 8016b72 <__sfp+0x46>
 8016b56:	3468      	adds	r4, #104	; 0x68
 8016b58:	e7f4      	b.n	8016b44 <__sfp+0x18>
 8016b5a:	2104      	movs	r1, #4
 8016b5c:	4638      	mov	r0, r7
 8016b5e:	f7ff ff9f 	bl	8016aa0 <__sfmoreglue>
 8016b62:	6030      	str	r0, [r6, #0]
 8016b64:	2800      	cmp	r0, #0
 8016b66:	d1f1      	bne.n	8016b4c <__sfp+0x20>
 8016b68:	230c      	movs	r3, #12
 8016b6a:	603b      	str	r3, [r7, #0]
 8016b6c:	4604      	mov	r4, r0
 8016b6e:	4620      	mov	r0, r4
 8016b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b72:	4b0b      	ldr	r3, [pc, #44]	; (8016ba0 <__sfp+0x74>)
 8016b74:	6665      	str	r5, [r4, #100]	; 0x64
 8016b76:	e9c4 5500 	strd	r5, r5, [r4]
 8016b7a:	60a5      	str	r5, [r4, #8]
 8016b7c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016b80:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016b84:	2208      	movs	r2, #8
 8016b86:	4629      	mov	r1, r5
 8016b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016b8c:	f7fd f92f 	bl	8013dee <memset>
 8016b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016b98:	e7e9      	b.n	8016b6e <__sfp+0x42>
 8016b9a:	bf00      	nop
 8016b9c:	080191ac 	.word	0x080191ac
 8016ba0:	ffff0001 	.word	0xffff0001

08016ba4 <_fwalk>:
 8016ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba8:	4688      	mov	r8, r1
 8016baa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016bae:	2600      	movs	r6, #0
 8016bb0:	b914      	cbnz	r4, 8016bb8 <_fwalk+0x14>
 8016bb2:	4630      	mov	r0, r6
 8016bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bb8:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016bbc:	3f01      	subs	r7, #1
 8016bbe:	d501      	bpl.n	8016bc4 <_fwalk+0x20>
 8016bc0:	6824      	ldr	r4, [r4, #0]
 8016bc2:	e7f5      	b.n	8016bb0 <_fwalk+0xc>
 8016bc4:	89ab      	ldrh	r3, [r5, #12]
 8016bc6:	2b01      	cmp	r3, #1
 8016bc8:	d906      	bls.n	8016bd8 <_fwalk+0x34>
 8016bca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bce:	3301      	adds	r3, #1
 8016bd0:	d002      	beq.n	8016bd8 <_fwalk+0x34>
 8016bd2:	4628      	mov	r0, r5
 8016bd4:	47c0      	blx	r8
 8016bd6:	4306      	orrs	r6, r0
 8016bd8:	3568      	adds	r5, #104	; 0x68
 8016bda:	e7ef      	b.n	8016bbc <_fwalk+0x18>

08016bdc <_fwalk_reent>:
 8016bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016be0:	4680      	mov	r8, r0
 8016be2:	4689      	mov	r9, r1
 8016be4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016be8:	2600      	movs	r6, #0
 8016bea:	b914      	cbnz	r4, 8016bf2 <_fwalk_reent+0x16>
 8016bec:	4630      	mov	r0, r6
 8016bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bf2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016bf6:	3f01      	subs	r7, #1
 8016bf8:	d501      	bpl.n	8016bfe <_fwalk_reent+0x22>
 8016bfa:	6824      	ldr	r4, [r4, #0]
 8016bfc:	e7f5      	b.n	8016bea <_fwalk_reent+0xe>
 8016bfe:	89ab      	ldrh	r3, [r5, #12]
 8016c00:	2b01      	cmp	r3, #1
 8016c02:	d907      	bls.n	8016c14 <_fwalk_reent+0x38>
 8016c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016c08:	3301      	adds	r3, #1
 8016c0a:	d003      	beq.n	8016c14 <_fwalk_reent+0x38>
 8016c0c:	4629      	mov	r1, r5
 8016c0e:	4640      	mov	r0, r8
 8016c10:	47c8      	blx	r9
 8016c12:	4306      	orrs	r6, r0
 8016c14:	3568      	adds	r5, #104	; 0x68
 8016c16:	e7ee      	b.n	8016bf6 <_fwalk_reent+0x1a>

08016c18 <rshift>:
 8016c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c1a:	6906      	ldr	r6, [r0, #16]
 8016c1c:	114b      	asrs	r3, r1, #5
 8016c1e:	429e      	cmp	r6, r3
 8016c20:	f100 0414 	add.w	r4, r0, #20
 8016c24:	dd30      	ble.n	8016c88 <rshift+0x70>
 8016c26:	f011 011f 	ands.w	r1, r1, #31
 8016c2a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016c2e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016c32:	d108      	bne.n	8016c46 <rshift+0x2e>
 8016c34:	4621      	mov	r1, r4
 8016c36:	42b2      	cmp	r2, r6
 8016c38:	460b      	mov	r3, r1
 8016c3a:	d211      	bcs.n	8016c60 <rshift+0x48>
 8016c3c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016c40:	f841 3b04 	str.w	r3, [r1], #4
 8016c44:	e7f7      	b.n	8016c36 <rshift+0x1e>
 8016c46:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016c4a:	f1c1 0c20 	rsb	ip, r1, #32
 8016c4e:	40cd      	lsrs	r5, r1
 8016c50:	3204      	adds	r2, #4
 8016c52:	4623      	mov	r3, r4
 8016c54:	42b2      	cmp	r2, r6
 8016c56:	4617      	mov	r7, r2
 8016c58:	d30c      	bcc.n	8016c74 <rshift+0x5c>
 8016c5a:	601d      	str	r5, [r3, #0]
 8016c5c:	b105      	cbz	r5, 8016c60 <rshift+0x48>
 8016c5e:	3304      	adds	r3, #4
 8016c60:	1b1a      	subs	r2, r3, r4
 8016c62:	42a3      	cmp	r3, r4
 8016c64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016c68:	bf08      	it	eq
 8016c6a:	2300      	moveq	r3, #0
 8016c6c:	6102      	str	r2, [r0, #16]
 8016c6e:	bf08      	it	eq
 8016c70:	6143      	streq	r3, [r0, #20]
 8016c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c74:	683f      	ldr	r7, [r7, #0]
 8016c76:	fa07 f70c 	lsl.w	r7, r7, ip
 8016c7a:	433d      	orrs	r5, r7
 8016c7c:	f843 5b04 	str.w	r5, [r3], #4
 8016c80:	f852 5b04 	ldr.w	r5, [r2], #4
 8016c84:	40cd      	lsrs	r5, r1
 8016c86:	e7e5      	b.n	8016c54 <rshift+0x3c>
 8016c88:	4623      	mov	r3, r4
 8016c8a:	e7e9      	b.n	8016c60 <rshift+0x48>

08016c8c <__hexdig_fun>:
 8016c8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016c90:	2b09      	cmp	r3, #9
 8016c92:	d802      	bhi.n	8016c9a <__hexdig_fun+0xe>
 8016c94:	3820      	subs	r0, #32
 8016c96:	b2c0      	uxtb	r0, r0
 8016c98:	4770      	bx	lr
 8016c9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016c9e:	2b05      	cmp	r3, #5
 8016ca0:	d801      	bhi.n	8016ca6 <__hexdig_fun+0x1a>
 8016ca2:	3847      	subs	r0, #71	; 0x47
 8016ca4:	e7f7      	b.n	8016c96 <__hexdig_fun+0xa>
 8016ca6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016caa:	2b05      	cmp	r3, #5
 8016cac:	d801      	bhi.n	8016cb2 <__hexdig_fun+0x26>
 8016cae:	3827      	subs	r0, #39	; 0x27
 8016cb0:	e7f1      	b.n	8016c96 <__hexdig_fun+0xa>
 8016cb2:	2000      	movs	r0, #0
 8016cb4:	4770      	bx	lr

08016cb6 <__gethex>:
 8016cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cba:	b08b      	sub	sp, #44	; 0x2c
 8016cbc:	468a      	mov	sl, r1
 8016cbe:	9002      	str	r0, [sp, #8]
 8016cc0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016cc2:	9306      	str	r3, [sp, #24]
 8016cc4:	4690      	mov	r8, r2
 8016cc6:	f000 fadf 	bl	8017288 <__localeconv_l>
 8016cca:	6803      	ldr	r3, [r0, #0]
 8016ccc:	9303      	str	r3, [sp, #12]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7f1 f9b6 	bl	8008040 <strlen>
 8016cd4:	9b03      	ldr	r3, [sp, #12]
 8016cd6:	9001      	str	r0, [sp, #4]
 8016cd8:	4403      	add	r3, r0
 8016cda:	f04f 0b00 	mov.w	fp, #0
 8016cde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016ce2:	9307      	str	r3, [sp, #28]
 8016ce4:	f8da 3000 	ldr.w	r3, [sl]
 8016ce8:	3302      	adds	r3, #2
 8016cea:	461f      	mov	r7, r3
 8016cec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016cf0:	2830      	cmp	r0, #48	; 0x30
 8016cf2:	d06c      	beq.n	8016dce <__gethex+0x118>
 8016cf4:	f7ff ffca 	bl	8016c8c <__hexdig_fun>
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	d16a      	bne.n	8016dd4 <__gethex+0x11e>
 8016cfe:	9a01      	ldr	r2, [sp, #4]
 8016d00:	9903      	ldr	r1, [sp, #12]
 8016d02:	4638      	mov	r0, r7
 8016d04:	f001 fe81 	bl	8018a0a <strncmp>
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	d166      	bne.n	8016dda <__gethex+0x124>
 8016d0c:	9b01      	ldr	r3, [sp, #4]
 8016d0e:	5cf8      	ldrb	r0, [r7, r3]
 8016d10:	18fe      	adds	r6, r7, r3
 8016d12:	f7ff ffbb 	bl	8016c8c <__hexdig_fun>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d062      	beq.n	8016de0 <__gethex+0x12a>
 8016d1a:	4633      	mov	r3, r6
 8016d1c:	7818      	ldrb	r0, [r3, #0]
 8016d1e:	2830      	cmp	r0, #48	; 0x30
 8016d20:	461f      	mov	r7, r3
 8016d22:	f103 0301 	add.w	r3, r3, #1
 8016d26:	d0f9      	beq.n	8016d1c <__gethex+0x66>
 8016d28:	f7ff ffb0 	bl	8016c8c <__hexdig_fun>
 8016d2c:	fab0 f580 	clz	r5, r0
 8016d30:	096d      	lsrs	r5, r5, #5
 8016d32:	4634      	mov	r4, r6
 8016d34:	f04f 0b01 	mov.w	fp, #1
 8016d38:	463a      	mov	r2, r7
 8016d3a:	4616      	mov	r6, r2
 8016d3c:	3201      	adds	r2, #1
 8016d3e:	7830      	ldrb	r0, [r6, #0]
 8016d40:	f7ff ffa4 	bl	8016c8c <__hexdig_fun>
 8016d44:	2800      	cmp	r0, #0
 8016d46:	d1f8      	bne.n	8016d3a <__gethex+0x84>
 8016d48:	9a01      	ldr	r2, [sp, #4]
 8016d4a:	9903      	ldr	r1, [sp, #12]
 8016d4c:	4630      	mov	r0, r6
 8016d4e:	f001 fe5c 	bl	8018a0a <strncmp>
 8016d52:	b950      	cbnz	r0, 8016d6a <__gethex+0xb4>
 8016d54:	b954      	cbnz	r4, 8016d6c <__gethex+0xb6>
 8016d56:	9b01      	ldr	r3, [sp, #4]
 8016d58:	18f4      	adds	r4, r6, r3
 8016d5a:	4622      	mov	r2, r4
 8016d5c:	4616      	mov	r6, r2
 8016d5e:	3201      	adds	r2, #1
 8016d60:	7830      	ldrb	r0, [r6, #0]
 8016d62:	f7ff ff93 	bl	8016c8c <__hexdig_fun>
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d1f8      	bne.n	8016d5c <__gethex+0xa6>
 8016d6a:	b10c      	cbz	r4, 8016d70 <__gethex+0xba>
 8016d6c:	1ba4      	subs	r4, r4, r6
 8016d6e:	00a4      	lsls	r4, r4, #2
 8016d70:	7833      	ldrb	r3, [r6, #0]
 8016d72:	2b50      	cmp	r3, #80	; 0x50
 8016d74:	d001      	beq.n	8016d7a <__gethex+0xc4>
 8016d76:	2b70      	cmp	r3, #112	; 0x70
 8016d78:	d140      	bne.n	8016dfc <__gethex+0x146>
 8016d7a:	7873      	ldrb	r3, [r6, #1]
 8016d7c:	2b2b      	cmp	r3, #43	; 0x2b
 8016d7e:	d031      	beq.n	8016de4 <__gethex+0x12e>
 8016d80:	2b2d      	cmp	r3, #45	; 0x2d
 8016d82:	d033      	beq.n	8016dec <__gethex+0x136>
 8016d84:	1c71      	adds	r1, r6, #1
 8016d86:	f04f 0900 	mov.w	r9, #0
 8016d8a:	7808      	ldrb	r0, [r1, #0]
 8016d8c:	f7ff ff7e 	bl	8016c8c <__hexdig_fun>
 8016d90:	1e43      	subs	r3, r0, #1
 8016d92:	b2db      	uxtb	r3, r3
 8016d94:	2b18      	cmp	r3, #24
 8016d96:	d831      	bhi.n	8016dfc <__gethex+0x146>
 8016d98:	f1a0 0210 	sub.w	r2, r0, #16
 8016d9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016da0:	f7ff ff74 	bl	8016c8c <__hexdig_fun>
 8016da4:	1e43      	subs	r3, r0, #1
 8016da6:	b2db      	uxtb	r3, r3
 8016da8:	2b18      	cmp	r3, #24
 8016daa:	d922      	bls.n	8016df2 <__gethex+0x13c>
 8016dac:	f1b9 0f00 	cmp.w	r9, #0
 8016db0:	d000      	beq.n	8016db4 <__gethex+0xfe>
 8016db2:	4252      	negs	r2, r2
 8016db4:	4414      	add	r4, r2
 8016db6:	f8ca 1000 	str.w	r1, [sl]
 8016dba:	b30d      	cbz	r5, 8016e00 <__gethex+0x14a>
 8016dbc:	f1bb 0f00 	cmp.w	fp, #0
 8016dc0:	bf0c      	ite	eq
 8016dc2:	2706      	moveq	r7, #6
 8016dc4:	2700      	movne	r7, #0
 8016dc6:	4638      	mov	r0, r7
 8016dc8:	b00b      	add	sp, #44	; 0x2c
 8016dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dce:	f10b 0b01 	add.w	fp, fp, #1
 8016dd2:	e78a      	b.n	8016cea <__gethex+0x34>
 8016dd4:	2500      	movs	r5, #0
 8016dd6:	462c      	mov	r4, r5
 8016dd8:	e7ae      	b.n	8016d38 <__gethex+0x82>
 8016dda:	463e      	mov	r6, r7
 8016ddc:	2501      	movs	r5, #1
 8016dde:	e7c7      	b.n	8016d70 <__gethex+0xba>
 8016de0:	4604      	mov	r4, r0
 8016de2:	e7fb      	b.n	8016ddc <__gethex+0x126>
 8016de4:	f04f 0900 	mov.w	r9, #0
 8016de8:	1cb1      	adds	r1, r6, #2
 8016dea:	e7ce      	b.n	8016d8a <__gethex+0xd4>
 8016dec:	f04f 0901 	mov.w	r9, #1
 8016df0:	e7fa      	b.n	8016de8 <__gethex+0x132>
 8016df2:	230a      	movs	r3, #10
 8016df4:	fb03 0202 	mla	r2, r3, r2, r0
 8016df8:	3a10      	subs	r2, #16
 8016dfa:	e7cf      	b.n	8016d9c <__gethex+0xe6>
 8016dfc:	4631      	mov	r1, r6
 8016dfe:	e7da      	b.n	8016db6 <__gethex+0x100>
 8016e00:	1bf3      	subs	r3, r6, r7
 8016e02:	3b01      	subs	r3, #1
 8016e04:	4629      	mov	r1, r5
 8016e06:	2b07      	cmp	r3, #7
 8016e08:	dc49      	bgt.n	8016e9e <__gethex+0x1e8>
 8016e0a:	9802      	ldr	r0, [sp, #8]
 8016e0c:	f000 faca 	bl	80173a4 <_Balloc>
 8016e10:	9b01      	ldr	r3, [sp, #4]
 8016e12:	f100 0914 	add.w	r9, r0, #20
 8016e16:	f04f 0b00 	mov.w	fp, #0
 8016e1a:	f1c3 0301 	rsb	r3, r3, #1
 8016e1e:	4605      	mov	r5, r0
 8016e20:	f8cd 9010 	str.w	r9, [sp, #16]
 8016e24:	46da      	mov	sl, fp
 8016e26:	9308      	str	r3, [sp, #32]
 8016e28:	42b7      	cmp	r7, r6
 8016e2a:	d33b      	bcc.n	8016ea4 <__gethex+0x1ee>
 8016e2c:	9804      	ldr	r0, [sp, #16]
 8016e2e:	f840 ab04 	str.w	sl, [r0], #4
 8016e32:	eba0 0009 	sub.w	r0, r0, r9
 8016e36:	1080      	asrs	r0, r0, #2
 8016e38:	6128      	str	r0, [r5, #16]
 8016e3a:	0147      	lsls	r7, r0, #5
 8016e3c:	4650      	mov	r0, sl
 8016e3e:	f000 fb75 	bl	801752c <__hi0bits>
 8016e42:	f8d8 6000 	ldr.w	r6, [r8]
 8016e46:	1a3f      	subs	r7, r7, r0
 8016e48:	42b7      	cmp	r7, r6
 8016e4a:	dd64      	ble.n	8016f16 <__gethex+0x260>
 8016e4c:	1bbf      	subs	r7, r7, r6
 8016e4e:	4639      	mov	r1, r7
 8016e50:	4628      	mov	r0, r5
 8016e52:	f000 fe85 	bl	8017b60 <__any_on>
 8016e56:	4682      	mov	sl, r0
 8016e58:	b178      	cbz	r0, 8016e7a <__gethex+0x1c4>
 8016e5a:	1e7b      	subs	r3, r7, #1
 8016e5c:	1159      	asrs	r1, r3, #5
 8016e5e:	f003 021f 	and.w	r2, r3, #31
 8016e62:	f04f 0a01 	mov.w	sl, #1
 8016e66:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016e6a:	fa0a f202 	lsl.w	r2, sl, r2
 8016e6e:	420a      	tst	r2, r1
 8016e70:	d003      	beq.n	8016e7a <__gethex+0x1c4>
 8016e72:	4553      	cmp	r3, sl
 8016e74:	dc46      	bgt.n	8016f04 <__gethex+0x24e>
 8016e76:	f04f 0a02 	mov.w	sl, #2
 8016e7a:	4639      	mov	r1, r7
 8016e7c:	4628      	mov	r0, r5
 8016e7e:	f7ff fecb 	bl	8016c18 <rshift>
 8016e82:	443c      	add	r4, r7
 8016e84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016e88:	42a3      	cmp	r3, r4
 8016e8a:	da52      	bge.n	8016f32 <__gethex+0x27c>
 8016e8c:	4629      	mov	r1, r5
 8016e8e:	9802      	ldr	r0, [sp, #8]
 8016e90:	f000 fabc 	bl	801740c <_Bfree>
 8016e94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e96:	2300      	movs	r3, #0
 8016e98:	6013      	str	r3, [r2, #0]
 8016e9a:	27a3      	movs	r7, #163	; 0xa3
 8016e9c:	e793      	b.n	8016dc6 <__gethex+0x110>
 8016e9e:	3101      	adds	r1, #1
 8016ea0:	105b      	asrs	r3, r3, #1
 8016ea2:	e7b0      	b.n	8016e06 <__gethex+0x150>
 8016ea4:	1e73      	subs	r3, r6, #1
 8016ea6:	9305      	str	r3, [sp, #20]
 8016ea8:	9a07      	ldr	r2, [sp, #28]
 8016eaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016eae:	4293      	cmp	r3, r2
 8016eb0:	d018      	beq.n	8016ee4 <__gethex+0x22e>
 8016eb2:	f1bb 0f20 	cmp.w	fp, #32
 8016eb6:	d107      	bne.n	8016ec8 <__gethex+0x212>
 8016eb8:	9b04      	ldr	r3, [sp, #16]
 8016eba:	f8c3 a000 	str.w	sl, [r3]
 8016ebe:	3304      	adds	r3, #4
 8016ec0:	f04f 0a00 	mov.w	sl, #0
 8016ec4:	9304      	str	r3, [sp, #16]
 8016ec6:	46d3      	mov	fp, sl
 8016ec8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016ecc:	f7ff fede 	bl	8016c8c <__hexdig_fun>
 8016ed0:	f000 000f 	and.w	r0, r0, #15
 8016ed4:	fa00 f00b 	lsl.w	r0, r0, fp
 8016ed8:	ea4a 0a00 	orr.w	sl, sl, r0
 8016edc:	f10b 0b04 	add.w	fp, fp, #4
 8016ee0:	9b05      	ldr	r3, [sp, #20]
 8016ee2:	e00d      	b.n	8016f00 <__gethex+0x24a>
 8016ee4:	9b05      	ldr	r3, [sp, #20]
 8016ee6:	9a08      	ldr	r2, [sp, #32]
 8016ee8:	4413      	add	r3, r2
 8016eea:	42bb      	cmp	r3, r7
 8016eec:	d3e1      	bcc.n	8016eb2 <__gethex+0x1fc>
 8016eee:	4618      	mov	r0, r3
 8016ef0:	9a01      	ldr	r2, [sp, #4]
 8016ef2:	9903      	ldr	r1, [sp, #12]
 8016ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ef6:	f001 fd88 	bl	8018a0a <strncmp>
 8016efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016efc:	2800      	cmp	r0, #0
 8016efe:	d1d8      	bne.n	8016eb2 <__gethex+0x1fc>
 8016f00:	461e      	mov	r6, r3
 8016f02:	e791      	b.n	8016e28 <__gethex+0x172>
 8016f04:	1eb9      	subs	r1, r7, #2
 8016f06:	4628      	mov	r0, r5
 8016f08:	f000 fe2a 	bl	8017b60 <__any_on>
 8016f0c:	2800      	cmp	r0, #0
 8016f0e:	d0b2      	beq.n	8016e76 <__gethex+0x1c0>
 8016f10:	f04f 0a03 	mov.w	sl, #3
 8016f14:	e7b1      	b.n	8016e7a <__gethex+0x1c4>
 8016f16:	da09      	bge.n	8016f2c <__gethex+0x276>
 8016f18:	1bf7      	subs	r7, r6, r7
 8016f1a:	4629      	mov	r1, r5
 8016f1c:	463a      	mov	r2, r7
 8016f1e:	9802      	ldr	r0, [sp, #8]
 8016f20:	f000 fc40 	bl	80177a4 <__lshift>
 8016f24:	1be4      	subs	r4, r4, r7
 8016f26:	4605      	mov	r5, r0
 8016f28:	f100 0914 	add.w	r9, r0, #20
 8016f2c:	f04f 0a00 	mov.w	sl, #0
 8016f30:	e7a8      	b.n	8016e84 <__gethex+0x1ce>
 8016f32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016f36:	42a0      	cmp	r0, r4
 8016f38:	dd6a      	ble.n	8017010 <__gethex+0x35a>
 8016f3a:	1b04      	subs	r4, r0, r4
 8016f3c:	42a6      	cmp	r6, r4
 8016f3e:	dc2e      	bgt.n	8016f9e <__gethex+0x2e8>
 8016f40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016f44:	2b02      	cmp	r3, #2
 8016f46:	d022      	beq.n	8016f8e <__gethex+0x2d8>
 8016f48:	2b03      	cmp	r3, #3
 8016f4a:	d024      	beq.n	8016f96 <__gethex+0x2e0>
 8016f4c:	2b01      	cmp	r3, #1
 8016f4e:	d115      	bne.n	8016f7c <__gethex+0x2c6>
 8016f50:	42a6      	cmp	r6, r4
 8016f52:	d113      	bne.n	8016f7c <__gethex+0x2c6>
 8016f54:	2e01      	cmp	r6, #1
 8016f56:	dc0b      	bgt.n	8016f70 <__gethex+0x2ba>
 8016f58:	9a06      	ldr	r2, [sp, #24]
 8016f5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016f5e:	6013      	str	r3, [r2, #0]
 8016f60:	2301      	movs	r3, #1
 8016f62:	612b      	str	r3, [r5, #16]
 8016f64:	f8c9 3000 	str.w	r3, [r9]
 8016f68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f6a:	2762      	movs	r7, #98	; 0x62
 8016f6c:	601d      	str	r5, [r3, #0]
 8016f6e:	e72a      	b.n	8016dc6 <__gethex+0x110>
 8016f70:	1e71      	subs	r1, r6, #1
 8016f72:	4628      	mov	r0, r5
 8016f74:	f000 fdf4 	bl	8017b60 <__any_on>
 8016f78:	2800      	cmp	r0, #0
 8016f7a:	d1ed      	bne.n	8016f58 <__gethex+0x2a2>
 8016f7c:	4629      	mov	r1, r5
 8016f7e:	9802      	ldr	r0, [sp, #8]
 8016f80:	f000 fa44 	bl	801740c <_Bfree>
 8016f84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016f86:	2300      	movs	r3, #0
 8016f88:	6013      	str	r3, [r2, #0]
 8016f8a:	2750      	movs	r7, #80	; 0x50
 8016f8c:	e71b      	b.n	8016dc6 <__gethex+0x110>
 8016f8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d0e1      	beq.n	8016f58 <__gethex+0x2a2>
 8016f94:	e7f2      	b.n	8016f7c <__gethex+0x2c6>
 8016f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d1dd      	bne.n	8016f58 <__gethex+0x2a2>
 8016f9c:	e7ee      	b.n	8016f7c <__gethex+0x2c6>
 8016f9e:	1e67      	subs	r7, r4, #1
 8016fa0:	f1ba 0f00 	cmp.w	sl, #0
 8016fa4:	d131      	bne.n	801700a <__gethex+0x354>
 8016fa6:	b127      	cbz	r7, 8016fb2 <__gethex+0x2fc>
 8016fa8:	4639      	mov	r1, r7
 8016faa:	4628      	mov	r0, r5
 8016fac:	f000 fdd8 	bl	8017b60 <__any_on>
 8016fb0:	4682      	mov	sl, r0
 8016fb2:	117a      	asrs	r2, r7, #5
 8016fb4:	2301      	movs	r3, #1
 8016fb6:	f007 071f 	and.w	r7, r7, #31
 8016fba:	fa03 f707 	lsl.w	r7, r3, r7
 8016fbe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016fc2:	4621      	mov	r1, r4
 8016fc4:	421f      	tst	r7, r3
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	bf18      	it	ne
 8016fca:	f04a 0a02 	orrne.w	sl, sl, #2
 8016fce:	1b36      	subs	r6, r6, r4
 8016fd0:	f7ff fe22 	bl	8016c18 <rshift>
 8016fd4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016fd8:	2702      	movs	r7, #2
 8016fda:	f1ba 0f00 	cmp.w	sl, #0
 8016fde:	d048      	beq.n	8017072 <__gethex+0x3bc>
 8016fe0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016fe4:	2b02      	cmp	r3, #2
 8016fe6:	d015      	beq.n	8017014 <__gethex+0x35e>
 8016fe8:	2b03      	cmp	r3, #3
 8016fea:	d017      	beq.n	801701c <__gethex+0x366>
 8016fec:	2b01      	cmp	r3, #1
 8016fee:	d109      	bne.n	8017004 <__gethex+0x34e>
 8016ff0:	f01a 0f02 	tst.w	sl, #2
 8016ff4:	d006      	beq.n	8017004 <__gethex+0x34e>
 8016ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8016ffa:	ea4a 0a03 	orr.w	sl, sl, r3
 8016ffe:	f01a 0f01 	tst.w	sl, #1
 8017002:	d10e      	bne.n	8017022 <__gethex+0x36c>
 8017004:	f047 0710 	orr.w	r7, r7, #16
 8017008:	e033      	b.n	8017072 <__gethex+0x3bc>
 801700a:	f04f 0a01 	mov.w	sl, #1
 801700e:	e7d0      	b.n	8016fb2 <__gethex+0x2fc>
 8017010:	2701      	movs	r7, #1
 8017012:	e7e2      	b.n	8016fda <__gethex+0x324>
 8017014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017016:	f1c3 0301 	rsb	r3, r3, #1
 801701a:	9315      	str	r3, [sp, #84]	; 0x54
 801701c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801701e:	2b00      	cmp	r3, #0
 8017020:	d0f0      	beq.n	8017004 <__gethex+0x34e>
 8017022:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017026:	f105 0314 	add.w	r3, r5, #20
 801702a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801702e:	eb03 010a 	add.w	r1, r3, sl
 8017032:	f04f 0c00 	mov.w	ip, #0
 8017036:	4618      	mov	r0, r3
 8017038:	f853 2b04 	ldr.w	r2, [r3], #4
 801703c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017040:	d01c      	beq.n	801707c <__gethex+0x3c6>
 8017042:	3201      	adds	r2, #1
 8017044:	6002      	str	r2, [r0, #0]
 8017046:	2f02      	cmp	r7, #2
 8017048:	f105 0314 	add.w	r3, r5, #20
 801704c:	d138      	bne.n	80170c0 <__gethex+0x40a>
 801704e:	f8d8 2000 	ldr.w	r2, [r8]
 8017052:	3a01      	subs	r2, #1
 8017054:	42b2      	cmp	r2, r6
 8017056:	d10a      	bne.n	801706e <__gethex+0x3b8>
 8017058:	1171      	asrs	r1, r6, #5
 801705a:	2201      	movs	r2, #1
 801705c:	f006 061f 	and.w	r6, r6, #31
 8017060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017064:	fa02 f606 	lsl.w	r6, r2, r6
 8017068:	421e      	tst	r6, r3
 801706a:	bf18      	it	ne
 801706c:	4617      	movne	r7, r2
 801706e:	f047 0720 	orr.w	r7, r7, #32
 8017072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017074:	601d      	str	r5, [r3, #0]
 8017076:	9b06      	ldr	r3, [sp, #24]
 8017078:	601c      	str	r4, [r3, #0]
 801707a:	e6a4      	b.n	8016dc6 <__gethex+0x110>
 801707c:	4299      	cmp	r1, r3
 801707e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017082:	d8d8      	bhi.n	8017036 <__gethex+0x380>
 8017084:	68ab      	ldr	r3, [r5, #8]
 8017086:	4599      	cmp	r9, r3
 8017088:	db12      	blt.n	80170b0 <__gethex+0x3fa>
 801708a:	6869      	ldr	r1, [r5, #4]
 801708c:	9802      	ldr	r0, [sp, #8]
 801708e:	3101      	adds	r1, #1
 8017090:	f000 f988 	bl	80173a4 <_Balloc>
 8017094:	692a      	ldr	r2, [r5, #16]
 8017096:	3202      	adds	r2, #2
 8017098:	f105 010c 	add.w	r1, r5, #12
 801709c:	4683      	mov	fp, r0
 801709e:	0092      	lsls	r2, r2, #2
 80170a0:	300c      	adds	r0, #12
 80170a2:	f7fc fe99 	bl	8013dd8 <memcpy>
 80170a6:	4629      	mov	r1, r5
 80170a8:	9802      	ldr	r0, [sp, #8]
 80170aa:	f000 f9af 	bl	801740c <_Bfree>
 80170ae:	465d      	mov	r5, fp
 80170b0:	692b      	ldr	r3, [r5, #16]
 80170b2:	1c5a      	adds	r2, r3, #1
 80170b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80170b8:	612a      	str	r2, [r5, #16]
 80170ba:	2201      	movs	r2, #1
 80170bc:	615a      	str	r2, [r3, #20]
 80170be:	e7c2      	b.n	8017046 <__gethex+0x390>
 80170c0:	692a      	ldr	r2, [r5, #16]
 80170c2:	454a      	cmp	r2, r9
 80170c4:	dd0b      	ble.n	80170de <__gethex+0x428>
 80170c6:	2101      	movs	r1, #1
 80170c8:	4628      	mov	r0, r5
 80170ca:	f7ff fda5 	bl	8016c18 <rshift>
 80170ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80170d2:	3401      	adds	r4, #1
 80170d4:	42a3      	cmp	r3, r4
 80170d6:	f6ff aed9 	blt.w	8016e8c <__gethex+0x1d6>
 80170da:	2701      	movs	r7, #1
 80170dc:	e7c7      	b.n	801706e <__gethex+0x3b8>
 80170de:	f016 061f 	ands.w	r6, r6, #31
 80170e2:	d0fa      	beq.n	80170da <__gethex+0x424>
 80170e4:	449a      	add	sl, r3
 80170e6:	f1c6 0620 	rsb	r6, r6, #32
 80170ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80170ee:	f000 fa1d 	bl	801752c <__hi0bits>
 80170f2:	42b0      	cmp	r0, r6
 80170f4:	dbe7      	blt.n	80170c6 <__gethex+0x410>
 80170f6:	e7f0      	b.n	80170da <__gethex+0x424>

080170f8 <L_shift>:
 80170f8:	f1c2 0208 	rsb	r2, r2, #8
 80170fc:	0092      	lsls	r2, r2, #2
 80170fe:	b570      	push	{r4, r5, r6, lr}
 8017100:	f1c2 0620 	rsb	r6, r2, #32
 8017104:	6843      	ldr	r3, [r0, #4]
 8017106:	6804      	ldr	r4, [r0, #0]
 8017108:	fa03 f506 	lsl.w	r5, r3, r6
 801710c:	432c      	orrs	r4, r5
 801710e:	40d3      	lsrs	r3, r2
 8017110:	6004      	str	r4, [r0, #0]
 8017112:	f840 3f04 	str.w	r3, [r0, #4]!
 8017116:	4288      	cmp	r0, r1
 8017118:	d3f4      	bcc.n	8017104 <L_shift+0xc>
 801711a:	bd70      	pop	{r4, r5, r6, pc}

0801711c <__match>:
 801711c:	b530      	push	{r4, r5, lr}
 801711e:	6803      	ldr	r3, [r0, #0]
 8017120:	3301      	adds	r3, #1
 8017122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017126:	b914      	cbnz	r4, 801712e <__match+0x12>
 8017128:	6003      	str	r3, [r0, #0]
 801712a:	2001      	movs	r0, #1
 801712c:	bd30      	pop	{r4, r5, pc}
 801712e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017132:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017136:	2d19      	cmp	r5, #25
 8017138:	bf98      	it	ls
 801713a:	3220      	addls	r2, #32
 801713c:	42a2      	cmp	r2, r4
 801713e:	d0f0      	beq.n	8017122 <__match+0x6>
 8017140:	2000      	movs	r0, #0
 8017142:	e7f3      	b.n	801712c <__match+0x10>

08017144 <__hexnan>:
 8017144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017148:	680b      	ldr	r3, [r1, #0]
 801714a:	6801      	ldr	r1, [r0, #0]
 801714c:	115f      	asrs	r7, r3, #5
 801714e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017152:	f013 031f 	ands.w	r3, r3, #31
 8017156:	b087      	sub	sp, #28
 8017158:	bf18      	it	ne
 801715a:	3704      	addne	r7, #4
 801715c:	2500      	movs	r5, #0
 801715e:	1f3e      	subs	r6, r7, #4
 8017160:	4682      	mov	sl, r0
 8017162:	4690      	mov	r8, r2
 8017164:	9301      	str	r3, [sp, #4]
 8017166:	f847 5c04 	str.w	r5, [r7, #-4]
 801716a:	46b1      	mov	r9, r6
 801716c:	4634      	mov	r4, r6
 801716e:	9502      	str	r5, [sp, #8]
 8017170:	46ab      	mov	fp, r5
 8017172:	784a      	ldrb	r2, [r1, #1]
 8017174:	1c4b      	adds	r3, r1, #1
 8017176:	9303      	str	r3, [sp, #12]
 8017178:	b342      	cbz	r2, 80171cc <__hexnan+0x88>
 801717a:	4610      	mov	r0, r2
 801717c:	9105      	str	r1, [sp, #20]
 801717e:	9204      	str	r2, [sp, #16]
 8017180:	f7ff fd84 	bl	8016c8c <__hexdig_fun>
 8017184:	2800      	cmp	r0, #0
 8017186:	d143      	bne.n	8017210 <__hexnan+0xcc>
 8017188:	9a04      	ldr	r2, [sp, #16]
 801718a:	9905      	ldr	r1, [sp, #20]
 801718c:	2a20      	cmp	r2, #32
 801718e:	d818      	bhi.n	80171c2 <__hexnan+0x7e>
 8017190:	9b02      	ldr	r3, [sp, #8]
 8017192:	459b      	cmp	fp, r3
 8017194:	dd13      	ble.n	80171be <__hexnan+0x7a>
 8017196:	454c      	cmp	r4, r9
 8017198:	d206      	bcs.n	80171a8 <__hexnan+0x64>
 801719a:	2d07      	cmp	r5, #7
 801719c:	dc04      	bgt.n	80171a8 <__hexnan+0x64>
 801719e:	462a      	mov	r2, r5
 80171a0:	4649      	mov	r1, r9
 80171a2:	4620      	mov	r0, r4
 80171a4:	f7ff ffa8 	bl	80170f8 <L_shift>
 80171a8:	4544      	cmp	r4, r8
 80171aa:	d944      	bls.n	8017236 <__hexnan+0xf2>
 80171ac:	2300      	movs	r3, #0
 80171ae:	f1a4 0904 	sub.w	r9, r4, #4
 80171b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80171b6:	f8cd b008 	str.w	fp, [sp, #8]
 80171ba:	464c      	mov	r4, r9
 80171bc:	461d      	mov	r5, r3
 80171be:	9903      	ldr	r1, [sp, #12]
 80171c0:	e7d7      	b.n	8017172 <__hexnan+0x2e>
 80171c2:	2a29      	cmp	r2, #41	; 0x29
 80171c4:	d14a      	bne.n	801725c <__hexnan+0x118>
 80171c6:	3102      	adds	r1, #2
 80171c8:	f8ca 1000 	str.w	r1, [sl]
 80171cc:	f1bb 0f00 	cmp.w	fp, #0
 80171d0:	d044      	beq.n	801725c <__hexnan+0x118>
 80171d2:	454c      	cmp	r4, r9
 80171d4:	d206      	bcs.n	80171e4 <__hexnan+0xa0>
 80171d6:	2d07      	cmp	r5, #7
 80171d8:	dc04      	bgt.n	80171e4 <__hexnan+0xa0>
 80171da:	462a      	mov	r2, r5
 80171dc:	4649      	mov	r1, r9
 80171de:	4620      	mov	r0, r4
 80171e0:	f7ff ff8a 	bl	80170f8 <L_shift>
 80171e4:	4544      	cmp	r4, r8
 80171e6:	d928      	bls.n	801723a <__hexnan+0xf6>
 80171e8:	4643      	mov	r3, r8
 80171ea:	f854 2b04 	ldr.w	r2, [r4], #4
 80171ee:	f843 2b04 	str.w	r2, [r3], #4
 80171f2:	42a6      	cmp	r6, r4
 80171f4:	d2f9      	bcs.n	80171ea <__hexnan+0xa6>
 80171f6:	2200      	movs	r2, #0
 80171f8:	f843 2b04 	str.w	r2, [r3], #4
 80171fc:	429e      	cmp	r6, r3
 80171fe:	d2fb      	bcs.n	80171f8 <__hexnan+0xb4>
 8017200:	6833      	ldr	r3, [r6, #0]
 8017202:	b91b      	cbnz	r3, 801720c <__hexnan+0xc8>
 8017204:	4546      	cmp	r6, r8
 8017206:	d127      	bne.n	8017258 <__hexnan+0x114>
 8017208:	2301      	movs	r3, #1
 801720a:	6033      	str	r3, [r6, #0]
 801720c:	2005      	movs	r0, #5
 801720e:	e026      	b.n	801725e <__hexnan+0x11a>
 8017210:	3501      	adds	r5, #1
 8017212:	2d08      	cmp	r5, #8
 8017214:	f10b 0b01 	add.w	fp, fp, #1
 8017218:	dd06      	ble.n	8017228 <__hexnan+0xe4>
 801721a:	4544      	cmp	r4, r8
 801721c:	d9cf      	bls.n	80171be <__hexnan+0x7a>
 801721e:	2300      	movs	r3, #0
 8017220:	f844 3c04 	str.w	r3, [r4, #-4]
 8017224:	2501      	movs	r5, #1
 8017226:	3c04      	subs	r4, #4
 8017228:	6822      	ldr	r2, [r4, #0]
 801722a:	f000 000f 	and.w	r0, r0, #15
 801722e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017232:	6020      	str	r0, [r4, #0]
 8017234:	e7c3      	b.n	80171be <__hexnan+0x7a>
 8017236:	2508      	movs	r5, #8
 8017238:	e7c1      	b.n	80171be <__hexnan+0x7a>
 801723a:	9b01      	ldr	r3, [sp, #4]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d0df      	beq.n	8017200 <__hexnan+0xbc>
 8017240:	f04f 32ff 	mov.w	r2, #4294967295
 8017244:	f1c3 0320 	rsb	r3, r3, #32
 8017248:	fa22 f303 	lsr.w	r3, r2, r3
 801724c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017250:	401a      	ands	r2, r3
 8017252:	f847 2c04 	str.w	r2, [r7, #-4]
 8017256:	e7d3      	b.n	8017200 <__hexnan+0xbc>
 8017258:	3e04      	subs	r6, #4
 801725a:	e7d1      	b.n	8017200 <__hexnan+0xbc>
 801725c:	2004      	movs	r0, #4
 801725e:	b007      	add	sp, #28
 8017260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017264 <__locale_ctype_ptr_l>:
 8017264:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017268:	4770      	bx	lr
	...

0801726c <__locale_ctype_ptr>:
 801726c:	4b04      	ldr	r3, [pc, #16]	; (8017280 <__locale_ctype_ptr+0x14>)
 801726e:	4a05      	ldr	r2, [pc, #20]	; (8017284 <__locale_ctype_ptr+0x18>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	6a1b      	ldr	r3, [r3, #32]
 8017274:	2b00      	cmp	r3, #0
 8017276:	bf08      	it	eq
 8017278:	4613      	moveq	r3, r2
 801727a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801727e:	4770      	bx	lr
 8017280:	20000024 	.word	0x20000024
 8017284:	20000088 	.word	0x20000088

08017288 <__localeconv_l>:
 8017288:	30f0      	adds	r0, #240	; 0xf0
 801728a:	4770      	bx	lr

0801728c <_localeconv_r>:
 801728c:	4b04      	ldr	r3, [pc, #16]	; (80172a0 <_localeconv_r+0x14>)
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	6a18      	ldr	r0, [r3, #32]
 8017292:	4b04      	ldr	r3, [pc, #16]	; (80172a4 <_localeconv_r+0x18>)
 8017294:	2800      	cmp	r0, #0
 8017296:	bf08      	it	eq
 8017298:	4618      	moveq	r0, r3
 801729a:	30f0      	adds	r0, #240	; 0xf0
 801729c:	4770      	bx	lr
 801729e:	bf00      	nop
 80172a0:	20000024 	.word	0x20000024
 80172a4:	20000088 	.word	0x20000088

080172a8 <__swhatbuf_r>:
 80172a8:	b570      	push	{r4, r5, r6, lr}
 80172aa:	460e      	mov	r6, r1
 80172ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172b0:	2900      	cmp	r1, #0
 80172b2:	b096      	sub	sp, #88	; 0x58
 80172b4:	4614      	mov	r4, r2
 80172b6:	461d      	mov	r5, r3
 80172b8:	da07      	bge.n	80172ca <__swhatbuf_r+0x22>
 80172ba:	2300      	movs	r3, #0
 80172bc:	602b      	str	r3, [r5, #0]
 80172be:	89b3      	ldrh	r3, [r6, #12]
 80172c0:	061a      	lsls	r2, r3, #24
 80172c2:	d410      	bmi.n	80172e6 <__swhatbuf_r+0x3e>
 80172c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80172c8:	e00e      	b.n	80172e8 <__swhatbuf_r+0x40>
 80172ca:	466a      	mov	r2, sp
 80172cc:	f001 fd18 	bl	8018d00 <_fstat_r>
 80172d0:	2800      	cmp	r0, #0
 80172d2:	dbf2      	blt.n	80172ba <__swhatbuf_r+0x12>
 80172d4:	9a01      	ldr	r2, [sp, #4]
 80172d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80172da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80172de:	425a      	negs	r2, r3
 80172e0:	415a      	adcs	r2, r3
 80172e2:	602a      	str	r2, [r5, #0]
 80172e4:	e7ee      	b.n	80172c4 <__swhatbuf_r+0x1c>
 80172e6:	2340      	movs	r3, #64	; 0x40
 80172e8:	2000      	movs	r0, #0
 80172ea:	6023      	str	r3, [r4, #0]
 80172ec:	b016      	add	sp, #88	; 0x58
 80172ee:	bd70      	pop	{r4, r5, r6, pc}

080172f0 <__smakebuf_r>:
 80172f0:	898b      	ldrh	r3, [r1, #12]
 80172f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80172f4:	079d      	lsls	r5, r3, #30
 80172f6:	4606      	mov	r6, r0
 80172f8:	460c      	mov	r4, r1
 80172fa:	d507      	bpl.n	801730c <__smakebuf_r+0x1c>
 80172fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017300:	6023      	str	r3, [r4, #0]
 8017302:	6123      	str	r3, [r4, #16]
 8017304:	2301      	movs	r3, #1
 8017306:	6163      	str	r3, [r4, #20]
 8017308:	b002      	add	sp, #8
 801730a:	bd70      	pop	{r4, r5, r6, pc}
 801730c:	ab01      	add	r3, sp, #4
 801730e:	466a      	mov	r2, sp
 8017310:	f7ff ffca 	bl	80172a8 <__swhatbuf_r>
 8017314:	9900      	ldr	r1, [sp, #0]
 8017316:	4605      	mov	r5, r0
 8017318:	4630      	mov	r0, r6
 801731a:	f000 fc9f 	bl	8017c5c <_malloc_r>
 801731e:	b948      	cbnz	r0, 8017334 <__smakebuf_r+0x44>
 8017320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017324:	059a      	lsls	r2, r3, #22
 8017326:	d4ef      	bmi.n	8017308 <__smakebuf_r+0x18>
 8017328:	f023 0303 	bic.w	r3, r3, #3
 801732c:	f043 0302 	orr.w	r3, r3, #2
 8017330:	81a3      	strh	r3, [r4, #12]
 8017332:	e7e3      	b.n	80172fc <__smakebuf_r+0xc>
 8017334:	4b0d      	ldr	r3, [pc, #52]	; (801736c <__smakebuf_r+0x7c>)
 8017336:	62b3      	str	r3, [r6, #40]	; 0x28
 8017338:	89a3      	ldrh	r3, [r4, #12]
 801733a:	6020      	str	r0, [r4, #0]
 801733c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017340:	81a3      	strh	r3, [r4, #12]
 8017342:	9b00      	ldr	r3, [sp, #0]
 8017344:	6163      	str	r3, [r4, #20]
 8017346:	9b01      	ldr	r3, [sp, #4]
 8017348:	6120      	str	r0, [r4, #16]
 801734a:	b15b      	cbz	r3, 8017364 <__smakebuf_r+0x74>
 801734c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017350:	4630      	mov	r0, r6
 8017352:	f001 fce7 	bl	8018d24 <_isatty_r>
 8017356:	b128      	cbz	r0, 8017364 <__smakebuf_r+0x74>
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	f023 0303 	bic.w	r3, r3, #3
 801735e:	f043 0301 	orr.w	r3, r3, #1
 8017362:	81a3      	strh	r3, [r4, #12]
 8017364:	89a3      	ldrh	r3, [r4, #12]
 8017366:	431d      	orrs	r5, r3
 8017368:	81a5      	strh	r5, [r4, #12]
 801736a:	e7cd      	b.n	8017308 <__smakebuf_r+0x18>
 801736c:	08016a95 	.word	0x08016a95

08017370 <malloc>:
 8017370:	4b02      	ldr	r3, [pc, #8]	; (801737c <malloc+0xc>)
 8017372:	4601      	mov	r1, r0
 8017374:	6818      	ldr	r0, [r3, #0]
 8017376:	f000 bc71 	b.w	8017c5c <_malloc_r>
 801737a:	bf00      	nop
 801737c:	20000024 	.word	0x20000024

08017380 <__ascii_mbtowc>:
 8017380:	b082      	sub	sp, #8
 8017382:	b901      	cbnz	r1, 8017386 <__ascii_mbtowc+0x6>
 8017384:	a901      	add	r1, sp, #4
 8017386:	b142      	cbz	r2, 801739a <__ascii_mbtowc+0x1a>
 8017388:	b14b      	cbz	r3, 801739e <__ascii_mbtowc+0x1e>
 801738a:	7813      	ldrb	r3, [r2, #0]
 801738c:	600b      	str	r3, [r1, #0]
 801738e:	7812      	ldrb	r2, [r2, #0]
 8017390:	1c10      	adds	r0, r2, #0
 8017392:	bf18      	it	ne
 8017394:	2001      	movne	r0, #1
 8017396:	b002      	add	sp, #8
 8017398:	4770      	bx	lr
 801739a:	4610      	mov	r0, r2
 801739c:	e7fb      	b.n	8017396 <__ascii_mbtowc+0x16>
 801739e:	f06f 0001 	mvn.w	r0, #1
 80173a2:	e7f8      	b.n	8017396 <__ascii_mbtowc+0x16>

080173a4 <_Balloc>:
 80173a4:	b570      	push	{r4, r5, r6, lr}
 80173a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80173a8:	4604      	mov	r4, r0
 80173aa:	460e      	mov	r6, r1
 80173ac:	b93d      	cbnz	r5, 80173be <_Balloc+0x1a>
 80173ae:	2010      	movs	r0, #16
 80173b0:	f7ff ffde 	bl	8017370 <malloc>
 80173b4:	6260      	str	r0, [r4, #36]	; 0x24
 80173b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80173ba:	6005      	str	r5, [r0, #0]
 80173bc:	60c5      	str	r5, [r0, #12]
 80173be:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80173c0:	68eb      	ldr	r3, [r5, #12]
 80173c2:	b183      	cbz	r3, 80173e6 <_Balloc+0x42>
 80173c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80173c6:	68db      	ldr	r3, [r3, #12]
 80173c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80173cc:	b9b8      	cbnz	r0, 80173fe <_Balloc+0x5a>
 80173ce:	2101      	movs	r1, #1
 80173d0:	fa01 f506 	lsl.w	r5, r1, r6
 80173d4:	1d6a      	adds	r2, r5, #5
 80173d6:	0092      	lsls	r2, r2, #2
 80173d8:	4620      	mov	r0, r4
 80173da:	f000 fbe2 	bl	8017ba2 <_calloc_r>
 80173de:	b160      	cbz	r0, 80173fa <_Balloc+0x56>
 80173e0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80173e4:	e00e      	b.n	8017404 <_Balloc+0x60>
 80173e6:	2221      	movs	r2, #33	; 0x21
 80173e8:	2104      	movs	r1, #4
 80173ea:	4620      	mov	r0, r4
 80173ec:	f000 fbd9 	bl	8017ba2 <_calloc_r>
 80173f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80173f2:	60e8      	str	r0, [r5, #12]
 80173f4:	68db      	ldr	r3, [r3, #12]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d1e4      	bne.n	80173c4 <_Balloc+0x20>
 80173fa:	2000      	movs	r0, #0
 80173fc:	bd70      	pop	{r4, r5, r6, pc}
 80173fe:	6802      	ldr	r2, [r0, #0]
 8017400:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017404:	2300      	movs	r3, #0
 8017406:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801740a:	e7f7      	b.n	80173fc <_Balloc+0x58>

0801740c <_Bfree>:
 801740c:	b570      	push	{r4, r5, r6, lr}
 801740e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017410:	4606      	mov	r6, r0
 8017412:	460d      	mov	r5, r1
 8017414:	b93c      	cbnz	r4, 8017426 <_Bfree+0x1a>
 8017416:	2010      	movs	r0, #16
 8017418:	f7ff ffaa 	bl	8017370 <malloc>
 801741c:	6270      	str	r0, [r6, #36]	; 0x24
 801741e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017422:	6004      	str	r4, [r0, #0]
 8017424:	60c4      	str	r4, [r0, #12]
 8017426:	b13d      	cbz	r5, 8017438 <_Bfree+0x2c>
 8017428:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801742a:	686a      	ldr	r2, [r5, #4]
 801742c:	68db      	ldr	r3, [r3, #12]
 801742e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017432:	6029      	str	r1, [r5, #0]
 8017434:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017438:	bd70      	pop	{r4, r5, r6, pc}

0801743a <__multadd>:
 801743a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801743e:	690d      	ldr	r5, [r1, #16]
 8017440:	461f      	mov	r7, r3
 8017442:	4606      	mov	r6, r0
 8017444:	460c      	mov	r4, r1
 8017446:	f101 0c14 	add.w	ip, r1, #20
 801744a:	2300      	movs	r3, #0
 801744c:	f8dc 0000 	ldr.w	r0, [ip]
 8017450:	b281      	uxth	r1, r0
 8017452:	fb02 7101 	mla	r1, r2, r1, r7
 8017456:	0c0f      	lsrs	r7, r1, #16
 8017458:	0c00      	lsrs	r0, r0, #16
 801745a:	fb02 7000 	mla	r0, r2, r0, r7
 801745e:	b289      	uxth	r1, r1
 8017460:	3301      	adds	r3, #1
 8017462:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017466:	429d      	cmp	r5, r3
 8017468:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801746c:	f84c 1b04 	str.w	r1, [ip], #4
 8017470:	dcec      	bgt.n	801744c <__multadd+0x12>
 8017472:	b1d7      	cbz	r7, 80174aa <__multadd+0x70>
 8017474:	68a3      	ldr	r3, [r4, #8]
 8017476:	42ab      	cmp	r3, r5
 8017478:	dc12      	bgt.n	80174a0 <__multadd+0x66>
 801747a:	6861      	ldr	r1, [r4, #4]
 801747c:	4630      	mov	r0, r6
 801747e:	3101      	adds	r1, #1
 8017480:	f7ff ff90 	bl	80173a4 <_Balloc>
 8017484:	6922      	ldr	r2, [r4, #16]
 8017486:	3202      	adds	r2, #2
 8017488:	f104 010c 	add.w	r1, r4, #12
 801748c:	4680      	mov	r8, r0
 801748e:	0092      	lsls	r2, r2, #2
 8017490:	300c      	adds	r0, #12
 8017492:	f7fc fca1 	bl	8013dd8 <memcpy>
 8017496:	4621      	mov	r1, r4
 8017498:	4630      	mov	r0, r6
 801749a:	f7ff ffb7 	bl	801740c <_Bfree>
 801749e:	4644      	mov	r4, r8
 80174a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80174a4:	3501      	adds	r5, #1
 80174a6:	615f      	str	r7, [r3, #20]
 80174a8:	6125      	str	r5, [r4, #16]
 80174aa:	4620      	mov	r0, r4
 80174ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174b0 <__s2b>:
 80174b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174b4:	460c      	mov	r4, r1
 80174b6:	4615      	mov	r5, r2
 80174b8:	461f      	mov	r7, r3
 80174ba:	2209      	movs	r2, #9
 80174bc:	3308      	adds	r3, #8
 80174be:	4606      	mov	r6, r0
 80174c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80174c4:	2100      	movs	r1, #0
 80174c6:	2201      	movs	r2, #1
 80174c8:	429a      	cmp	r2, r3
 80174ca:	db20      	blt.n	801750e <__s2b+0x5e>
 80174cc:	4630      	mov	r0, r6
 80174ce:	f7ff ff69 	bl	80173a4 <_Balloc>
 80174d2:	9b08      	ldr	r3, [sp, #32]
 80174d4:	6143      	str	r3, [r0, #20]
 80174d6:	2d09      	cmp	r5, #9
 80174d8:	f04f 0301 	mov.w	r3, #1
 80174dc:	6103      	str	r3, [r0, #16]
 80174de:	dd19      	ble.n	8017514 <__s2b+0x64>
 80174e0:	f104 0809 	add.w	r8, r4, #9
 80174e4:	46c1      	mov	r9, r8
 80174e6:	442c      	add	r4, r5
 80174e8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80174ec:	4601      	mov	r1, r0
 80174ee:	3b30      	subs	r3, #48	; 0x30
 80174f0:	220a      	movs	r2, #10
 80174f2:	4630      	mov	r0, r6
 80174f4:	f7ff ffa1 	bl	801743a <__multadd>
 80174f8:	45a1      	cmp	r9, r4
 80174fa:	d1f5      	bne.n	80174e8 <__s2b+0x38>
 80174fc:	eb08 0405 	add.w	r4, r8, r5
 8017500:	3c08      	subs	r4, #8
 8017502:	1b2d      	subs	r5, r5, r4
 8017504:	1963      	adds	r3, r4, r5
 8017506:	42bb      	cmp	r3, r7
 8017508:	db07      	blt.n	801751a <__s2b+0x6a>
 801750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801750e:	0052      	lsls	r2, r2, #1
 8017510:	3101      	adds	r1, #1
 8017512:	e7d9      	b.n	80174c8 <__s2b+0x18>
 8017514:	340a      	adds	r4, #10
 8017516:	2509      	movs	r5, #9
 8017518:	e7f3      	b.n	8017502 <__s2b+0x52>
 801751a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801751e:	4601      	mov	r1, r0
 8017520:	3b30      	subs	r3, #48	; 0x30
 8017522:	220a      	movs	r2, #10
 8017524:	4630      	mov	r0, r6
 8017526:	f7ff ff88 	bl	801743a <__multadd>
 801752a:	e7eb      	b.n	8017504 <__s2b+0x54>

0801752c <__hi0bits>:
 801752c:	0c02      	lsrs	r2, r0, #16
 801752e:	0412      	lsls	r2, r2, #16
 8017530:	4603      	mov	r3, r0
 8017532:	b9b2      	cbnz	r2, 8017562 <__hi0bits+0x36>
 8017534:	0403      	lsls	r3, r0, #16
 8017536:	2010      	movs	r0, #16
 8017538:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801753c:	bf04      	itt	eq
 801753e:	021b      	lsleq	r3, r3, #8
 8017540:	3008      	addeq	r0, #8
 8017542:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017546:	bf04      	itt	eq
 8017548:	011b      	lsleq	r3, r3, #4
 801754a:	3004      	addeq	r0, #4
 801754c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017550:	bf04      	itt	eq
 8017552:	009b      	lsleq	r3, r3, #2
 8017554:	3002      	addeq	r0, #2
 8017556:	2b00      	cmp	r3, #0
 8017558:	db06      	blt.n	8017568 <__hi0bits+0x3c>
 801755a:	005b      	lsls	r3, r3, #1
 801755c:	d503      	bpl.n	8017566 <__hi0bits+0x3a>
 801755e:	3001      	adds	r0, #1
 8017560:	4770      	bx	lr
 8017562:	2000      	movs	r0, #0
 8017564:	e7e8      	b.n	8017538 <__hi0bits+0xc>
 8017566:	2020      	movs	r0, #32
 8017568:	4770      	bx	lr

0801756a <__lo0bits>:
 801756a:	6803      	ldr	r3, [r0, #0]
 801756c:	f013 0207 	ands.w	r2, r3, #7
 8017570:	4601      	mov	r1, r0
 8017572:	d00b      	beq.n	801758c <__lo0bits+0x22>
 8017574:	07da      	lsls	r2, r3, #31
 8017576:	d423      	bmi.n	80175c0 <__lo0bits+0x56>
 8017578:	0798      	lsls	r0, r3, #30
 801757a:	bf49      	itett	mi
 801757c:	085b      	lsrmi	r3, r3, #1
 801757e:	089b      	lsrpl	r3, r3, #2
 8017580:	2001      	movmi	r0, #1
 8017582:	600b      	strmi	r3, [r1, #0]
 8017584:	bf5c      	itt	pl
 8017586:	600b      	strpl	r3, [r1, #0]
 8017588:	2002      	movpl	r0, #2
 801758a:	4770      	bx	lr
 801758c:	b298      	uxth	r0, r3
 801758e:	b9a8      	cbnz	r0, 80175bc <__lo0bits+0x52>
 8017590:	0c1b      	lsrs	r3, r3, #16
 8017592:	2010      	movs	r0, #16
 8017594:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017598:	bf04      	itt	eq
 801759a:	0a1b      	lsreq	r3, r3, #8
 801759c:	3008      	addeq	r0, #8
 801759e:	071a      	lsls	r2, r3, #28
 80175a0:	bf04      	itt	eq
 80175a2:	091b      	lsreq	r3, r3, #4
 80175a4:	3004      	addeq	r0, #4
 80175a6:	079a      	lsls	r2, r3, #30
 80175a8:	bf04      	itt	eq
 80175aa:	089b      	lsreq	r3, r3, #2
 80175ac:	3002      	addeq	r0, #2
 80175ae:	07da      	lsls	r2, r3, #31
 80175b0:	d402      	bmi.n	80175b8 <__lo0bits+0x4e>
 80175b2:	085b      	lsrs	r3, r3, #1
 80175b4:	d006      	beq.n	80175c4 <__lo0bits+0x5a>
 80175b6:	3001      	adds	r0, #1
 80175b8:	600b      	str	r3, [r1, #0]
 80175ba:	4770      	bx	lr
 80175bc:	4610      	mov	r0, r2
 80175be:	e7e9      	b.n	8017594 <__lo0bits+0x2a>
 80175c0:	2000      	movs	r0, #0
 80175c2:	4770      	bx	lr
 80175c4:	2020      	movs	r0, #32
 80175c6:	4770      	bx	lr

080175c8 <__i2b>:
 80175c8:	b510      	push	{r4, lr}
 80175ca:	460c      	mov	r4, r1
 80175cc:	2101      	movs	r1, #1
 80175ce:	f7ff fee9 	bl	80173a4 <_Balloc>
 80175d2:	2201      	movs	r2, #1
 80175d4:	6144      	str	r4, [r0, #20]
 80175d6:	6102      	str	r2, [r0, #16]
 80175d8:	bd10      	pop	{r4, pc}

080175da <__multiply>:
 80175da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175de:	4614      	mov	r4, r2
 80175e0:	690a      	ldr	r2, [r1, #16]
 80175e2:	6923      	ldr	r3, [r4, #16]
 80175e4:	429a      	cmp	r2, r3
 80175e6:	bfb8      	it	lt
 80175e8:	460b      	movlt	r3, r1
 80175ea:	4688      	mov	r8, r1
 80175ec:	bfbc      	itt	lt
 80175ee:	46a0      	movlt	r8, r4
 80175f0:	461c      	movlt	r4, r3
 80175f2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80175f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80175fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80175fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017602:	eb07 0609 	add.w	r6, r7, r9
 8017606:	42b3      	cmp	r3, r6
 8017608:	bfb8      	it	lt
 801760a:	3101      	addlt	r1, #1
 801760c:	f7ff feca 	bl	80173a4 <_Balloc>
 8017610:	f100 0514 	add.w	r5, r0, #20
 8017614:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017618:	462b      	mov	r3, r5
 801761a:	2200      	movs	r2, #0
 801761c:	4573      	cmp	r3, lr
 801761e:	d316      	bcc.n	801764e <__multiply+0x74>
 8017620:	f104 0214 	add.w	r2, r4, #20
 8017624:	f108 0114 	add.w	r1, r8, #20
 8017628:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801762c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017630:	9300      	str	r3, [sp, #0]
 8017632:	9b00      	ldr	r3, [sp, #0]
 8017634:	9201      	str	r2, [sp, #4]
 8017636:	4293      	cmp	r3, r2
 8017638:	d80c      	bhi.n	8017654 <__multiply+0x7a>
 801763a:	2e00      	cmp	r6, #0
 801763c:	dd03      	ble.n	8017646 <__multiply+0x6c>
 801763e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017642:	2b00      	cmp	r3, #0
 8017644:	d05d      	beq.n	8017702 <__multiply+0x128>
 8017646:	6106      	str	r6, [r0, #16]
 8017648:	b003      	add	sp, #12
 801764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801764e:	f843 2b04 	str.w	r2, [r3], #4
 8017652:	e7e3      	b.n	801761c <__multiply+0x42>
 8017654:	f8b2 b000 	ldrh.w	fp, [r2]
 8017658:	f1bb 0f00 	cmp.w	fp, #0
 801765c:	d023      	beq.n	80176a6 <__multiply+0xcc>
 801765e:	4689      	mov	r9, r1
 8017660:	46ac      	mov	ip, r5
 8017662:	f04f 0800 	mov.w	r8, #0
 8017666:	f859 4b04 	ldr.w	r4, [r9], #4
 801766a:	f8dc a000 	ldr.w	sl, [ip]
 801766e:	b2a3      	uxth	r3, r4
 8017670:	fa1f fa8a 	uxth.w	sl, sl
 8017674:	fb0b a303 	mla	r3, fp, r3, sl
 8017678:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801767c:	f8dc 4000 	ldr.w	r4, [ip]
 8017680:	4443      	add	r3, r8
 8017682:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017686:	fb0b 840a 	mla	r4, fp, sl, r8
 801768a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801768e:	46e2      	mov	sl, ip
 8017690:	b29b      	uxth	r3, r3
 8017692:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017696:	454f      	cmp	r7, r9
 8017698:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801769c:	f84a 3b04 	str.w	r3, [sl], #4
 80176a0:	d82b      	bhi.n	80176fa <__multiply+0x120>
 80176a2:	f8cc 8004 	str.w	r8, [ip, #4]
 80176a6:	9b01      	ldr	r3, [sp, #4]
 80176a8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80176ac:	3204      	adds	r2, #4
 80176ae:	f1ba 0f00 	cmp.w	sl, #0
 80176b2:	d020      	beq.n	80176f6 <__multiply+0x11c>
 80176b4:	682b      	ldr	r3, [r5, #0]
 80176b6:	4689      	mov	r9, r1
 80176b8:	46a8      	mov	r8, r5
 80176ba:	f04f 0b00 	mov.w	fp, #0
 80176be:	f8b9 c000 	ldrh.w	ip, [r9]
 80176c2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80176c6:	fb0a 440c 	mla	r4, sl, ip, r4
 80176ca:	445c      	add	r4, fp
 80176cc:	46c4      	mov	ip, r8
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80176d4:	f84c 3b04 	str.w	r3, [ip], #4
 80176d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80176dc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80176e0:	0c1b      	lsrs	r3, r3, #16
 80176e2:	fb0a b303 	mla	r3, sl, r3, fp
 80176e6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80176ea:	454f      	cmp	r7, r9
 80176ec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80176f0:	d805      	bhi.n	80176fe <__multiply+0x124>
 80176f2:	f8c8 3004 	str.w	r3, [r8, #4]
 80176f6:	3504      	adds	r5, #4
 80176f8:	e79b      	b.n	8017632 <__multiply+0x58>
 80176fa:	46d4      	mov	ip, sl
 80176fc:	e7b3      	b.n	8017666 <__multiply+0x8c>
 80176fe:	46e0      	mov	r8, ip
 8017700:	e7dd      	b.n	80176be <__multiply+0xe4>
 8017702:	3e01      	subs	r6, #1
 8017704:	e799      	b.n	801763a <__multiply+0x60>
	...

08017708 <__pow5mult>:
 8017708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801770c:	4615      	mov	r5, r2
 801770e:	f012 0203 	ands.w	r2, r2, #3
 8017712:	4606      	mov	r6, r0
 8017714:	460f      	mov	r7, r1
 8017716:	d007      	beq.n	8017728 <__pow5mult+0x20>
 8017718:	3a01      	subs	r2, #1
 801771a:	4c21      	ldr	r4, [pc, #132]	; (80177a0 <__pow5mult+0x98>)
 801771c:	2300      	movs	r3, #0
 801771e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017722:	f7ff fe8a 	bl	801743a <__multadd>
 8017726:	4607      	mov	r7, r0
 8017728:	10ad      	asrs	r5, r5, #2
 801772a:	d035      	beq.n	8017798 <__pow5mult+0x90>
 801772c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801772e:	b93c      	cbnz	r4, 8017740 <__pow5mult+0x38>
 8017730:	2010      	movs	r0, #16
 8017732:	f7ff fe1d 	bl	8017370 <malloc>
 8017736:	6270      	str	r0, [r6, #36]	; 0x24
 8017738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801773c:	6004      	str	r4, [r0, #0]
 801773e:	60c4      	str	r4, [r0, #12]
 8017740:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017748:	b94c      	cbnz	r4, 801775e <__pow5mult+0x56>
 801774a:	f240 2171 	movw	r1, #625	; 0x271
 801774e:	4630      	mov	r0, r6
 8017750:	f7ff ff3a 	bl	80175c8 <__i2b>
 8017754:	2300      	movs	r3, #0
 8017756:	f8c8 0008 	str.w	r0, [r8, #8]
 801775a:	4604      	mov	r4, r0
 801775c:	6003      	str	r3, [r0, #0]
 801775e:	f04f 0800 	mov.w	r8, #0
 8017762:	07eb      	lsls	r3, r5, #31
 8017764:	d50a      	bpl.n	801777c <__pow5mult+0x74>
 8017766:	4639      	mov	r1, r7
 8017768:	4622      	mov	r2, r4
 801776a:	4630      	mov	r0, r6
 801776c:	f7ff ff35 	bl	80175da <__multiply>
 8017770:	4639      	mov	r1, r7
 8017772:	4681      	mov	r9, r0
 8017774:	4630      	mov	r0, r6
 8017776:	f7ff fe49 	bl	801740c <_Bfree>
 801777a:	464f      	mov	r7, r9
 801777c:	106d      	asrs	r5, r5, #1
 801777e:	d00b      	beq.n	8017798 <__pow5mult+0x90>
 8017780:	6820      	ldr	r0, [r4, #0]
 8017782:	b938      	cbnz	r0, 8017794 <__pow5mult+0x8c>
 8017784:	4622      	mov	r2, r4
 8017786:	4621      	mov	r1, r4
 8017788:	4630      	mov	r0, r6
 801778a:	f7ff ff26 	bl	80175da <__multiply>
 801778e:	6020      	str	r0, [r4, #0]
 8017790:	f8c0 8000 	str.w	r8, [r0]
 8017794:	4604      	mov	r4, r0
 8017796:	e7e4      	b.n	8017762 <__pow5mult+0x5a>
 8017798:	4638      	mov	r0, r7
 801779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801779e:	bf00      	nop
 80177a0:	080193a8 	.word	0x080193a8

080177a4 <__lshift>:
 80177a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177a8:	460c      	mov	r4, r1
 80177aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80177ae:	6923      	ldr	r3, [r4, #16]
 80177b0:	6849      	ldr	r1, [r1, #4]
 80177b2:	eb0a 0903 	add.w	r9, sl, r3
 80177b6:	68a3      	ldr	r3, [r4, #8]
 80177b8:	4607      	mov	r7, r0
 80177ba:	4616      	mov	r6, r2
 80177bc:	f109 0501 	add.w	r5, r9, #1
 80177c0:	42ab      	cmp	r3, r5
 80177c2:	db32      	blt.n	801782a <__lshift+0x86>
 80177c4:	4638      	mov	r0, r7
 80177c6:	f7ff fded 	bl	80173a4 <_Balloc>
 80177ca:	2300      	movs	r3, #0
 80177cc:	4680      	mov	r8, r0
 80177ce:	f100 0114 	add.w	r1, r0, #20
 80177d2:	461a      	mov	r2, r3
 80177d4:	4553      	cmp	r3, sl
 80177d6:	db2b      	blt.n	8017830 <__lshift+0x8c>
 80177d8:	6920      	ldr	r0, [r4, #16]
 80177da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80177de:	f104 0314 	add.w	r3, r4, #20
 80177e2:	f016 021f 	ands.w	r2, r6, #31
 80177e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80177ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80177ee:	d025      	beq.n	801783c <__lshift+0x98>
 80177f0:	f1c2 0e20 	rsb	lr, r2, #32
 80177f4:	2000      	movs	r0, #0
 80177f6:	681e      	ldr	r6, [r3, #0]
 80177f8:	468a      	mov	sl, r1
 80177fa:	4096      	lsls	r6, r2
 80177fc:	4330      	orrs	r0, r6
 80177fe:	f84a 0b04 	str.w	r0, [sl], #4
 8017802:	f853 0b04 	ldr.w	r0, [r3], #4
 8017806:	459c      	cmp	ip, r3
 8017808:	fa20 f00e 	lsr.w	r0, r0, lr
 801780c:	d814      	bhi.n	8017838 <__lshift+0x94>
 801780e:	6048      	str	r0, [r1, #4]
 8017810:	b108      	cbz	r0, 8017816 <__lshift+0x72>
 8017812:	f109 0502 	add.w	r5, r9, #2
 8017816:	3d01      	subs	r5, #1
 8017818:	4638      	mov	r0, r7
 801781a:	f8c8 5010 	str.w	r5, [r8, #16]
 801781e:	4621      	mov	r1, r4
 8017820:	f7ff fdf4 	bl	801740c <_Bfree>
 8017824:	4640      	mov	r0, r8
 8017826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801782a:	3101      	adds	r1, #1
 801782c:	005b      	lsls	r3, r3, #1
 801782e:	e7c7      	b.n	80177c0 <__lshift+0x1c>
 8017830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017834:	3301      	adds	r3, #1
 8017836:	e7cd      	b.n	80177d4 <__lshift+0x30>
 8017838:	4651      	mov	r1, sl
 801783a:	e7dc      	b.n	80177f6 <__lshift+0x52>
 801783c:	3904      	subs	r1, #4
 801783e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017842:	f841 2f04 	str.w	r2, [r1, #4]!
 8017846:	459c      	cmp	ip, r3
 8017848:	d8f9      	bhi.n	801783e <__lshift+0x9a>
 801784a:	e7e4      	b.n	8017816 <__lshift+0x72>

0801784c <__mcmp>:
 801784c:	6903      	ldr	r3, [r0, #16]
 801784e:	690a      	ldr	r2, [r1, #16]
 8017850:	1a9b      	subs	r3, r3, r2
 8017852:	b530      	push	{r4, r5, lr}
 8017854:	d10c      	bne.n	8017870 <__mcmp+0x24>
 8017856:	0092      	lsls	r2, r2, #2
 8017858:	3014      	adds	r0, #20
 801785a:	3114      	adds	r1, #20
 801785c:	1884      	adds	r4, r0, r2
 801785e:	4411      	add	r1, r2
 8017860:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017864:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017868:	4295      	cmp	r5, r2
 801786a:	d003      	beq.n	8017874 <__mcmp+0x28>
 801786c:	d305      	bcc.n	801787a <__mcmp+0x2e>
 801786e:	2301      	movs	r3, #1
 8017870:	4618      	mov	r0, r3
 8017872:	bd30      	pop	{r4, r5, pc}
 8017874:	42a0      	cmp	r0, r4
 8017876:	d3f3      	bcc.n	8017860 <__mcmp+0x14>
 8017878:	e7fa      	b.n	8017870 <__mcmp+0x24>
 801787a:	f04f 33ff 	mov.w	r3, #4294967295
 801787e:	e7f7      	b.n	8017870 <__mcmp+0x24>

08017880 <__mdiff>:
 8017880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017884:	460d      	mov	r5, r1
 8017886:	4607      	mov	r7, r0
 8017888:	4611      	mov	r1, r2
 801788a:	4628      	mov	r0, r5
 801788c:	4614      	mov	r4, r2
 801788e:	f7ff ffdd 	bl	801784c <__mcmp>
 8017892:	1e06      	subs	r6, r0, #0
 8017894:	d108      	bne.n	80178a8 <__mdiff+0x28>
 8017896:	4631      	mov	r1, r6
 8017898:	4638      	mov	r0, r7
 801789a:	f7ff fd83 	bl	80173a4 <_Balloc>
 801789e:	2301      	movs	r3, #1
 80178a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80178a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178a8:	bfa4      	itt	ge
 80178aa:	4623      	movge	r3, r4
 80178ac:	462c      	movge	r4, r5
 80178ae:	4638      	mov	r0, r7
 80178b0:	6861      	ldr	r1, [r4, #4]
 80178b2:	bfa6      	itte	ge
 80178b4:	461d      	movge	r5, r3
 80178b6:	2600      	movge	r6, #0
 80178b8:	2601      	movlt	r6, #1
 80178ba:	f7ff fd73 	bl	80173a4 <_Balloc>
 80178be:	692b      	ldr	r3, [r5, #16]
 80178c0:	60c6      	str	r6, [r0, #12]
 80178c2:	6926      	ldr	r6, [r4, #16]
 80178c4:	f105 0914 	add.w	r9, r5, #20
 80178c8:	f104 0214 	add.w	r2, r4, #20
 80178cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80178d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80178d4:	f100 0514 	add.w	r5, r0, #20
 80178d8:	f04f 0e00 	mov.w	lr, #0
 80178dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80178e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80178e4:	fa1e f18a 	uxtah	r1, lr, sl
 80178e8:	b2a3      	uxth	r3, r4
 80178ea:	1ac9      	subs	r1, r1, r3
 80178ec:	0c23      	lsrs	r3, r4, #16
 80178ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80178f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80178f6:	b289      	uxth	r1, r1
 80178f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80178fc:	45c8      	cmp	r8, r9
 80178fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017902:	4694      	mov	ip, r2
 8017904:	f845 3b04 	str.w	r3, [r5], #4
 8017908:	d8e8      	bhi.n	80178dc <__mdiff+0x5c>
 801790a:	45bc      	cmp	ip, r7
 801790c:	d304      	bcc.n	8017918 <__mdiff+0x98>
 801790e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017912:	b183      	cbz	r3, 8017936 <__mdiff+0xb6>
 8017914:	6106      	str	r6, [r0, #16]
 8017916:	e7c5      	b.n	80178a4 <__mdiff+0x24>
 8017918:	f85c 1b04 	ldr.w	r1, [ip], #4
 801791c:	fa1e f381 	uxtah	r3, lr, r1
 8017920:	141a      	asrs	r2, r3, #16
 8017922:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017926:	b29b      	uxth	r3, r3
 8017928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801792c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017930:	f845 3b04 	str.w	r3, [r5], #4
 8017934:	e7e9      	b.n	801790a <__mdiff+0x8a>
 8017936:	3e01      	subs	r6, #1
 8017938:	e7e9      	b.n	801790e <__mdiff+0x8e>
	...

0801793c <__ulp>:
 801793c:	4b12      	ldr	r3, [pc, #72]	; (8017988 <__ulp+0x4c>)
 801793e:	ee10 2a90 	vmov	r2, s1
 8017942:	401a      	ands	r2, r3
 8017944:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017948:	2b00      	cmp	r3, #0
 801794a:	dd04      	ble.n	8017956 <__ulp+0x1a>
 801794c:	2000      	movs	r0, #0
 801794e:	4619      	mov	r1, r3
 8017950:	ec41 0b10 	vmov	d0, r0, r1
 8017954:	4770      	bx	lr
 8017956:	425b      	negs	r3, r3
 8017958:	151b      	asrs	r3, r3, #20
 801795a:	2b13      	cmp	r3, #19
 801795c:	f04f 0000 	mov.w	r0, #0
 8017960:	f04f 0100 	mov.w	r1, #0
 8017964:	dc04      	bgt.n	8017970 <__ulp+0x34>
 8017966:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801796a:	fa42 f103 	asr.w	r1, r2, r3
 801796e:	e7ef      	b.n	8017950 <__ulp+0x14>
 8017970:	3b14      	subs	r3, #20
 8017972:	2b1e      	cmp	r3, #30
 8017974:	f04f 0201 	mov.w	r2, #1
 8017978:	bfda      	itte	le
 801797a:	f1c3 031f 	rsble	r3, r3, #31
 801797e:	fa02 f303 	lslle.w	r3, r2, r3
 8017982:	4613      	movgt	r3, r2
 8017984:	4618      	mov	r0, r3
 8017986:	e7e3      	b.n	8017950 <__ulp+0x14>
 8017988:	7ff00000 	.word	0x7ff00000

0801798c <__b2d>:
 801798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801798e:	6905      	ldr	r5, [r0, #16]
 8017990:	f100 0714 	add.w	r7, r0, #20
 8017994:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017998:	1f2e      	subs	r6, r5, #4
 801799a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801799e:	4620      	mov	r0, r4
 80179a0:	f7ff fdc4 	bl	801752c <__hi0bits>
 80179a4:	f1c0 0320 	rsb	r3, r0, #32
 80179a8:	280a      	cmp	r0, #10
 80179aa:	600b      	str	r3, [r1, #0]
 80179ac:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017a24 <__b2d+0x98>
 80179b0:	dc14      	bgt.n	80179dc <__b2d+0x50>
 80179b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80179b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80179ba:	42b7      	cmp	r7, r6
 80179bc:	ea41 030c 	orr.w	r3, r1, ip
 80179c0:	bf34      	ite	cc
 80179c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80179c6:	2100      	movcs	r1, #0
 80179c8:	3015      	adds	r0, #21
 80179ca:	fa04 f000 	lsl.w	r0, r4, r0
 80179ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80179d2:	ea40 0201 	orr.w	r2, r0, r1
 80179d6:	ec43 2b10 	vmov	d0, r2, r3
 80179da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179dc:	42b7      	cmp	r7, r6
 80179de:	bf3a      	itte	cc
 80179e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80179e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80179e8:	2100      	movcs	r1, #0
 80179ea:	380b      	subs	r0, #11
 80179ec:	d015      	beq.n	8017a1a <__b2d+0x8e>
 80179ee:	4084      	lsls	r4, r0
 80179f0:	f1c0 0520 	rsb	r5, r0, #32
 80179f4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80179f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80179fc:	42be      	cmp	r6, r7
 80179fe:	fa21 fc05 	lsr.w	ip, r1, r5
 8017a02:	ea44 030c 	orr.w	r3, r4, ip
 8017a06:	bf8c      	ite	hi
 8017a08:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017a0c:	2400      	movls	r4, #0
 8017a0e:	fa01 f000 	lsl.w	r0, r1, r0
 8017a12:	40ec      	lsrs	r4, r5
 8017a14:	ea40 0204 	orr.w	r2, r0, r4
 8017a18:	e7dd      	b.n	80179d6 <__b2d+0x4a>
 8017a1a:	ea44 030c 	orr.w	r3, r4, ip
 8017a1e:	460a      	mov	r2, r1
 8017a20:	e7d9      	b.n	80179d6 <__b2d+0x4a>
 8017a22:	bf00      	nop
 8017a24:	3ff00000 	.word	0x3ff00000

08017a28 <__d2b>:
 8017a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017a2c:	460e      	mov	r6, r1
 8017a2e:	2101      	movs	r1, #1
 8017a30:	ec59 8b10 	vmov	r8, r9, d0
 8017a34:	4615      	mov	r5, r2
 8017a36:	f7ff fcb5 	bl	80173a4 <_Balloc>
 8017a3a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017a3e:	4607      	mov	r7, r0
 8017a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017a44:	bb34      	cbnz	r4, 8017a94 <__d2b+0x6c>
 8017a46:	9301      	str	r3, [sp, #4]
 8017a48:	f1b8 0300 	subs.w	r3, r8, #0
 8017a4c:	d027      	beq.n	8017a9e <__d2b+0x76>
 8017a4e:	a802      	add	r0, sp, #8
 8017a50:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017a54:	f7ff fd89 	bl	801756a <__lo0bits>
 8017a58:	9900      	ldr	r1, [sp, #0]
 8017a5a:	b1f0      	cbz	r0, 8017a9a <__d2b+0x72>
 8017a5c:	9a01      	ldr	r2, [sp, #4]
 8017a5e:	f1c0 0320 	rsb	r3, r0, #32
 8017a62:	fa02 f303 	lsl.w	r3, r2, r3
 8017a66:	430b      	orrs	r3, r1
 8017a68:	40c2      	lsrs	r2, r0
 8017a6a:	617b      	str	r3, [r7, #20]
 8017a6c:	9201      	str	r2, [sp, #4]
 8017a6e:	9b01      	ldr	r3, [sp, #4]
 8017a70:	61bb      	str	r3, [r7, #24]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	bf14      	ite	ne
 8017a76:	2102      	movne	r1, #2
 8017a78:	2101      	moveq	r1, #1
 8017a7a:	6139      	str	r1, [r7, #16]
 8017a7c:	b1c4      	cbz	r4, 8017ab0 <__d2b+0x88>
 8017a7e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017a82:	4404      	add	r4, r0
 8017a84:	6034      	str	r4, [r6, #0]
 8017a86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017a8a:	6028      	str	r0, [r5, #0]
 8017a8c:	4638      	mov	r0, r7
 8017a8e:	b003      	add	sp, #12
 8017a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017a98:	e7d5      	b.n	8017a46 <__d2b+0x1e>
 8017a9a:	6179      	str	r1, [r7, #20]
 8017a9c:	e7e7      	b.n	8017a6e <__d2b+0x46>
 8017a9e:	a801      	add	r0, sp, #4
 8017aa0:	f7ff fd63 	bl	801756a <__lo0bits>
 8017aa4:	9b01      	ldr	r3, [sp, #4]
 8017aa6:	617b      	str	r3, [r7, #20]
 8017aa8:	2101      	movs	r1, #1
 8017aaa:	6139      	str	r1, [r7, #16]
 8017aac:	3020      	adds	r0, #32
 8017aae:	e7e5      	b.n	8017a7c <__d2b+0x54>
 8017ab0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017ab4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017ab8:	6030      	str	r0, [r6, #0]
 8017aba:	6918      	ldr	r0, [r3, #16]
 8017abc:	f7ff fd36 	bl	801752c <__hi0bits>
 8017ac0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017ac4:	e7e1      	b.n	8017a8a <__d2b+0x62>

08017ac6 <__ratio>:
 8017ac6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aca:	4688      	mov	r8, r1
 8017acc:	4669      	mov	r1, sp
 8017ace:	4681      	mov	r9, r0
 8017ad0:	f7ff ff5c 	bl	801798c <__b2d>
 8017ad4:	a901      	add	r1, sp, #4
 8017ad6:	4640      	mov	r0, r8
 8017ad8:	ec57 6b10 	vmov	r6, r7, d0
 8017adc:	f7ff ff56 	bl	801798c <__b2d>
 8017ae0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017ae4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017ae8:	eba3 0c02 	sub.w	ip, r3, r2
 8017aec:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017af0:	1a9b      	subs	r3, r3, r2
 8017af2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017af6:	ec5b ab10 	vmov	sl, fp, d0
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	bfce      	itee	gt
 8017afe:	463a      	movgt	r2, r7
 8017b00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017b04:	465a      	movle	r2, fp
 8017b06:	4659      	mov	r1, fp
 8017b08:	463d      	mov	r5, r7
 8017b0a:	bfd4      	ite	le
 8017b0c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017b10:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017b14:	4630      	mov	r0, r6
 8017b16:	ee10 2a10 	vmov	r2, s0
 8017b1a:	460b      	mov	r3, r1
 8017b1c:	4629      	mov	r1, r5
 8017b1e:	f7f0 fdcd 	bl	80086bc <__aeabi_ddiv>
 8017b22:	ec41 0b10 	vmov	d0, r0, r1
 8017b26:	b003      	add	sp, #12
 8017b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b2c <__copybits>:
 8017b2c:	3901      	subs	r1, #1
 8017b2e:	b510      	push	{r4, lr}
 8017b30:	1149      	asrs	r1, r1, #5
 8017b32:	6914      	ldr	r4, [r2, #16]
 8017b34:	3101      	adds	r1, #1
 8017b36:	f102 0314 	add.w	r3, r2, #20
 8017b3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017b3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017b42:	42a3      	cmp	r3, r4
 8017b44:	4602      	mov	r2, r0
 8017b46:	d303      	bcc.n	8017b50 <__copybits+0x24>
 8017b48:	2300      	movs	r3, #0
 8017b4a:	428a      	cmp	r2, r1
 8017b4c:	d305      	bcc.n	8017b5a <__copybits+0x2e>
 8017b4e:	bd10      	pop	{r4, pc}
 8017b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b54:	f840 2b04 	str.w	r2, [r0], #4
 8017b58:	e7f3      	b.n	8017b42 <__copybits+0x16>
 8017b5a:	f842 3b04 	str.w	r3, [r2], #4
 8017b5e:	e7f4      	b.n	8017b4a <__copybits+0x1e>

08017b60 <__any_on>:
 8017b60:	f100 0214 	add.w	r2, r0, #20
 8017b64:	6900      	ldr	r0, [r0, #16]
 8017b66:	114b      	asrs	r3, r1, #5
 8017b68:	4298      	cmp	r0, r3
 8017b6a:	b510      	push	{r4, lr}
 8017b6c:	db11      	blt.n	8017b92 <__any_on+0x32>
 8017b6e:	dd0a      	ble.n	8017b86 <__any_on+0x26>
 8017b70:	f011 011f 	ands.w	r1, r1, #31
 8017b74:	d007      	beq.n	8017b86 <__any_on+0x26>
 8017b76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017b7a:	fa24 f001 	lsr.w	r0, r4, r1
 8017b7e:	fa00 f101 	lsl.w	r1, r0, r1
 8017b82:	428c      	cmp	r4, r1
 8017b84:	d10b      	bne.n	8017b9e <__any_on+0x3e>
 8017b86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017b8a:	4293      	cmp	r3, r2
 8017b8c:	d803      	bhi.n	8017b96 <__any_on+0x36>
 8017b8e:	2000      	movs	r0, #0
 8017b90:	bd10      	pop	{r4, pc}
 8017b92:	4603      	mov	r3, r0
 8017b94:	e7f7      	b.n	8017b86 <__any_on+0x26>
 8017b96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017b9a:	2900      	cmp	r1, #0
 8017b9c:	d0f5      	beq.n	8017b8a <__any_on+0x2a>
 8017b9e:	2001      	movs	r0, #1
 8017ba0:	e7f6      	b.n	8017b90 <__any_on+0x30>

08017ba2 <_calloc_r>:
 8017ba2:	b538      	push	{r3, r4, r5, lr}
 8017ba4:	fb02 f401 	mul.w	r4, r2, r1
 8017ba8:	4621      	mov	r1, r4
 8017baa:	f000 f857 	bl	8017c5c <_malloc_r>
 8017bae:	4605      	mov	r5, r0
 8017bb0:	b118      	cbz	r0, 8017bba <_calloc_r+0x18>
 8017bb2:	4622      	mov	r2, r4
 8017bb4:	2100      	movs	r1, #0
 8017bb6:	f7fc f91a 	bl	8013dee <memset>
 8017bba:	4628      	mov	r0, r5
 8017bbc:	bd38      	pop	{r3, r4, r5, pc}
	...

08017bc0 <_free_r>:
 8017bc0:	b538      	push	{r3, r4, r5, lr}
 8017bc2:	4605      	mov	r5, r0
 8017bc4:	2900      	cmp	r1, #0
 8017bc6:	d045      	beq.n	8017c54 <_free_r+0x94>
 8017bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bcc:	1f0c      	subs	r4, r1, #4
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	bfb8      	it	lt
 8017bd2:	18e4      	addlt	r4, r4, r3
 8017bd4:	f001 f8e1 	bl	8018d9a <__malloc_lock>
 8017bd8:	4a1f      	ldr	r2, [pc, #124]	; (8017c58 <_free_r+0x98>)
 8017bda:	6813      	ldr	r3, [r2, #0]
 8017bdc:	4610      	mov	r0, r2
 8017bde:	b933      	cbnz	r3, 8017bee <_free_r+0x2e>
 8017be0:	6063      	str	r3, [r4, #4]
 8017be2:	6014      	str	r4, [r2, #0]
 8017be4:	4628      	mov	r0, r5
 8017be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bea:	f001 b8d7 	b.w	8018d9c <__malloc_unlock>
 8017bee:	42a3      	cmp	r3, r4
 8017bf0:	d90c      	bls.n	8017c0c <_free_r+0x4c>
 8017bf2:	6821      	ldr	r1, [r4, #0]
 8017bf4:	1862      	adds	r2, r4, r1
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	bf04      	itt	eq
 8017bfa:	681a      	ldreq	r2, [r3, #0]
 8017bfc:	685b      	ldreq	r3, [r3, #4]
 8017bfe:	6063      	str	r3, [r4, #4]
 8017c00:	bf04      	itt	eq
 8017c02:	1852      	addeq	r2, r2, r1
 8017c04:	6022      	streq	r2, [r4, #0]
 8017c06:	6004      	str	r4, [r0, #0]
 8017c08:	e7ec      	b.n	8017be4 <_free_r+0x24>
 8017c0a:	4613      	mov	r3, r2
 8017c0c:	685a      	ldr	r2, [r3, #4]
 8017c0e:	b10a      	cbz	r2, 8017c14 <_free_r+0x54>
 8017c10:	42a2      	cmp	r2, r4
 8017c12:	d9fa      	bls.n	8017c0a <_free_r+0x4a>
 8017c14:	6819      	ldr	r1, [r3, #0]
 8017c16:	1858      	adds	r0, r3, r1
 8017c18:	42a0      	cmp	r0, r4
 8017c1a:	d10b      	bne.n	8017c34 <_free_r+0x74>
 8017c1c:	6820      	ldr	r0, [r4, #0]
 8017c1e:	4401      	add	r1, r0
 8017c20:	1858      	adds	r0, r3, r1
 8017c22:	4282      	cmp	r2, r0
 8017c24:	6019      	str	r1, [r3, #0]
 8017c26:	d1dd      	bne.n	8017be4 <_free_r+0x24>
 8017c28:	6810      	ldr	r0, [r2, #0]
 8017c2a:	6852      	ldr	r2, [r2, #4]
 8017c2c:	605a      	str	r2, [r3, #4]
 8017c2e:	4401      	add	r1, r0
 8017c30:	6019      	str	r1, [r3, #0]
 8017c32:	e7d7      	b.n	8017be4 <_free_r+0x24>
 8017c34:	d902      	bls.n	8017c3c <_free_r+0x7c>
 8017c36:	230c      	movs	r3, #12
 8017c38:	602b      	str	r3, [r5, #0]
 8017c3a:	e7d3      	b.n	8017be4 <_free_r+0x24>
 8017c3c:	6820      	ldr	r0, [r4, #0]
 8017c3e:	1821      	adds	r1, r4, r0
 8017c40:	428a      	cmp	r2, r1
 8017c42:	bf04      	itt	eq
 8017c44:	6811      	ldreq	r1, [r2, #0]
 8017c46:	6852      	ldreq	r2, [r2, #4]
 8017c48:	6062      	str	r2, [r4, #4]
 8017c4a:	bf04      	itt	eq
 8017c4c:	1809      	addeq	r1, r1, r0
 8017c4e:	6021      	streq	r1, [r4, #0]
 8017c50:	605c      	str	r4, [r3, #4]
 8017c52:	e7c7      	b.n	8017be4 <_free_r+0x24>
 8017c54:	bd38      	pop	{r3, r4, r5, pc}
 8017c56:	bf00      	nop
 8017c58:	200003d4 	.word	0x200003d4

08017c5c <_malloc_r>:
 8017c5c:	b570      	push	{r4, r5, r6, lr}
 8017c5e:	1ccd      	adds	r5, r1, #3
 8017c60:	f025 0503 	bic.w	r5, r5, #3
 8017c64:	3508      	adds	r5, #8
 8017c66:	2d0c      	cmp	r5, #12
 8017c68:	bf38      	it	cc
 8017c6a:	250c      	movcc	r5, #12
 8017c6c:	2d00      	cmp	r5, #0
 8017c6e:	4606      	mov	r6, r0
 8017c70:	db01      	blt.n	8017c76 <_malloc_r+0x1a>
 8017c72:	42a9      	cmp	r1, r5
 8017c74:	d903      	bls.n	8017c7e <_malloc_r+0x22>
 8017c76:	230c      	movs	r3, #12
 8017c78:	6033      	str	r3, [r6, #0]
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	bd70      	pop	{r4, r5, r6, pc}
 8017c7e:	f001 f88c 	bl	8018d9a <__malloc_lock>
 8017c82:	4a21      	ldr	r2, [pc, #132]	; (8017d08 <_malloc_r+0xac>)
 8017c84:	6814      	ldr	r4, [r2, #0]
 8017c86:	4621      	mov	r1, r4
 8017c88:	b991      	cbnz	r1, 8017cb0 <_malloc_r+0x54>
 8017c8a:	4c20      	ldr	r4, [pc, #128]	; (8017d0c <_malloc_r+0xb0>)
 8017c8c:	6823      	ldr	r3, [r4, #0]
 8017c8e:	b91b      	cbnz	r3, 8017c98 <_malloc_r+0x3c>
 8017c90:	4630      	mov	r0, r6
 8017c92:	f000 fe35 	bl	8018900 <_sbrk_r>
 8017c96:	6020      	str	r0, [r4, #0]
 8017c98:	4629      	mov	r1, r5
 8017c9a:	4630      	mov	r0, r6
 8017c9c:	f000 fe30 	bl	8018900 <_sbrk_r>
 8017ca0:	1c43      	adds	r3, r0, #1
 8017ca2:	d124      	bne.n	8017cee <_malloc_r+0x92>
 8017ca4:	230c      	movs	r3, #12
 8017ca6:	6033      	str	r3, [r6, #0]
 8017ca8:	4630      	mov	r0, r6
 8017caa:	f001 f877 	bl	8018d9c <__malloc_unlock>
 8017cae:	e7e4      	b.n	8017c7a <_malloc_r+0x1e>
 8017cb0:	680b      	ldr	r3, [r1, #0]
 8017cb2:	1b5b      	subs	r3, r3, r5
 8017cb4:	d418      	bmi.n	8017ce8 <_malloc_r+0x8c>
 8017cb6:	2b0b      	cmp	r3, #11
 8017cb8:	d90f      	bls.n	8017cda <_malloc_r+0x7e>
 8017cba:	600b      	str	r3, [r1, #0]
 8017cbc:	50cd      	str	r5, [r1, r3]
 8017cbe:	18cc      	adds	r4, r1, r3
 8017cc0:	4630      	mov	r0, r6
 8017cc2:	f001 f86b 	bl	8018d9c <__malloc_unlock>
 8017cc6:	f104 000b 	add.w	r0, r4, #11
 8017cca:	1d23      	adds	r3, r4, #4
 8017ccc:	f020 0007 	bic.w	r0, r0, #7
 8017cd0:	1ac3      	subs	r3, r0, r3
 8017cd2:	d0d3      	beq.n	8017c7c <_malloc_r+0x20>
 8017cd4:	425a      	negs	r2, r3
 8017cd6:	50e2      	str	r2, [r4, r3]
 8017cd8:	e7d0      	b.n	8017c7c <_malloc_r+0x20>
 8017cda:	428c      	cmp	r4, r1
 8017cdc:	684b      	ldr	r3, [r1, #4]
 8017cde:	bf16      	itet	ne
 8017ce0:	6063      	strne	r3, [r4, #4]
 8017ce2:	6013      	streq	r3, [r2, #0]
 8017ce4:	460c      	movne	r4, r1
 8017ce6:	e7eb      	b.n	8017cc0 <_malloc_r+0x64>
 8017ce8:	460c      	mov	r4, r1
 8017cea:	6849      	ldr	r1, [r1, #4]
 8017cec:	e7cc      	b.n	8017c88 <_malloc_r+0x2c>
 8017cee:	1cc4      	adds	r4, r0, #3
 8017cf0:	f024 0403 	bic.w	r4, r4, #3
 8017cf4:	42a0      	cmp	r0, r4
 8017cf6:	d005      	beq.n	8017d04 <_malloc_r+0xa8>
 8017cf8:	1a21      	subs	r1, r4, r0
 8017cfa:	4630      	mov	r0, r6
 8017cfc:	f000 fe00 	bl	8018900 <_sbrk_r>
 8017d00:	3001      	adds	r0, #1
 8017d02:	d0cf      	beq.n	8017ca4 <_malloc_r+0x48>
 8017d04:	6025      	str	r5, [r4, #0]
 8017d06:	e7db      	b.n	8017cc0 <_malloc_r+0x64>
 8017d08:	200003d4 	.word	0x200003d4
 8017d0c:	200003d8 	.word	0x200003d8

08017d10 <__ssputs_r>:
 8017d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d14:	688e      	ldr	r6, [r1, #8]
 8017d16:	429e      	cmp	r6, r3
 8017d18:	4682      	mov	sl, r0
 8017d1a:	460c      	mov	r4, r1
 8017d1c:	4690      	mov	r8, r2
 8017d1e:	4699      	mov	r9, r3
 8017d20:	d837      	bhi.n	8017d92 <__ssputs_r+0x82>
 8017d22:	898a      	ldrh	r2, [r1, #12]
 8017d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017d28:	d031      	beq.n	8017d8e <__ssputs_r+0x7e>
 8017d2a:	6825      	ldr	r5, [r4, #0]
 8017d2c:	6909      	ldr	r1, [r1, #16]
 8017d2e:	1a6f      	subs	r7, r5, r1
 8017d30:	6965      	ldr	r5, [r4, #20]
 8017d32:	2302      	movs	r3, #2
 8017d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d38:	fb95 f5f3 	sdiv	r5, r5, r3
 8017d3c:	f109 0301 	add.w	r3, r9, #1
 8017d40:	443b      	add	r3, r7
 8017d42:	429d      	cmp	r5, r3
 8017d44:	bf38      	it	cc
 8017d46:	461d      	movcc	r5, r3
 8017d48:	0553      	lsls	r3, r2, #21
 8017d4a:	d530      	bpl.n	8017dae <__ssputs_r+0x9e>
 8017d4c:	4629      	mov	r1, r5
 8017d4e:	f7ff ff85 	bl	8017c5c <_malloc_r>
 8017d52:	4606      	mov	r6, r0
 8017d54:	b950      	cbnz	r0, 8017d6c <__ssputs_r+0x5c>
 8017d56:	230c      	movs	r3, #12
 8017d58:	f8ca 3000 	str.w	r3, [sl]
 8017d5c:	89a3      	ldrh	r3, [r4, #12]
 8017d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d62:	81a3      	strh	r3, [r4, #12]
 8017d64:	f04f 30ff 	mov.w	r0, #4294967295
 8017d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d6c:	463a      	mov	r2, r7
 8017d6e:	6921      	ldr	r1, [r4, #16]
 8017d70:	f7fc f832 	bl	8013dd8 <memcpy>
 8017d74:	89a3      	ldrh	r3, [r4, #12]
 8017d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d7e:	81a3      	strh	r3, [r4, #12]
 8017d80:	6126      	str	r6, [r4, #16]
 8017d82:	6165      	str	r5, [r4, #20]
 8017d84:	443e      	add	r6, r7
 8017d86:	1bed      	subs	r5, r5, r7
 8017d88:	6026      	str	r6, [r4, #0]
 8017d8a:	60a5      	str	r5, [r4, #8]
 8017d8c:	464e      	mov	r6, r9
 8017d8e:	454e      	cmp	r6, r9
 8017d90:	d900      	bls.n	8017d94 <__ssputs_r+0x84>
 8017d92:	464e      	mov	r6, r9
 8017d94:	4632      	mov	r2, r6
 8017d96:	4641      	mov	r1, r8
 8017d98:	6820      	ldr	r0, [r4, #0]
 8017d9a:	f000 ffe5 	bl	8018d68 <memmove>
 8017d9e:	68a3      	ldr	r3, [r4, #8]
 8017da0:	1b9b      	subs	r3, r3, r6
 8017da2:	60a3      	str	r3, [r4, #8]
 8017da4:	6823      	ldr	r3, [r4, #0]
 8017da6:	441e      	add	r6, r3
 8017da8:	6026      	str	r6, [r4, #0]
 8017daa:	2000      	movs	r0, #0
 8017dac:	e7dc      	b.n	8017d68 <__ssputs_r+0x58>
 8017dae:	462a      	mov	r2, r5
 8017db0:	f000 fff5 	bl	8018d9e <_realloc_r>
 8017db4:	4606      	mov	r6, r0
 8017db6:	2800      	cmp	r0, #0
 8017db8:	d1e2      	bne.n	8017d80 <__ssputs_r+0x70>
 8017dba:	6921      	ldr	r1, [r4, #16]
 8017dbc:	4650      	mov	r0, sl
 8017dbe:	f7ff feff 	bl	8017bc0 <_free_r>
 8017dc2:	e7c8      	b.n	8017d56 <__ssputs_r+0x46>

08017dc4 <_svfiprintf_r>:
 8017dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dc8:	461d      	mov	r5, r3
 8017dca:	898b      	ldrh	r3, [r1, #12]
 8017dcc:	061f      	lsls	r7, r3, #24
 8017dce:	b09d      	sub	sp, #116	; 0x74
 8017dd0:	4680      	mov	r8, r0
 8017dd2:	460c      	mov	r4, r1
 8017dd4:	4616      	mov	r6, r2
 8017dd6:	d50f      	bpl.n	8017df8 <_svfiprintf_r+0x34>
 8017dd8:	690b      	ldr	r3, [r1, #16]
 8017dda:	b96b      	cbnz	r3, 8017df8 <_svfiprintf_r+0x34>
 8017ddc:	2140      	movs	r1, #64	; 0x40
 8017dde:	f7ff ff3d 	bl	8017c5c <_malloc_r>
 8017de2:	6020      	str	r0, [r4, #0]
 8017de4:	6120      	str	r0, [r4, #16]
 8017de6:	b928      	cbnz	r0, 8017df4 <_svfiprintf_r+0x30>
 8017de8:	230c      	movs	r3, #12
 8017dea:	f8c8 3000 	str.w	r3, [r8]
 8017dee:	f04f 30ff 	mov.w	r0, #4294967295
 8017df2:	e0c8      	b.n	8017f86 <_svfiprintf_r+0x1c2>
 8017df4:	2340      	movs	r3, #64	; 0x40
 8017df6:	6163      	str	r3, [r4, #20]
 8017df8:	2300      	movs	r3, #0
 8017dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8017dfc:	2320      	movs	r3, #32
 8017dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e02:	2330      	movs	r3, #48	; 0x30
 8017e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e08:	9503      	str	r5, [sp, #12]
 8017e0a:	f04f 0b01 	mov.w	fp, #1
 8017e0e:	4637      	mov	r7, r6
 8017e10:	463d      	mov	r5, r7
 8017e12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017e16:	b10b      	cbz	r3, 8017e1c <_svfiprintf_r+0x58>
 8017e18:	2b25      	cmp	r3, #37	; 0x25
 8017e1a:	d13e      	bne.n	8017e9a <_svfiprintf_r+0xd6>
 8017e1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017e20:	d00b      	beq.n	8017e3a <_svfiprintf_r+0x76>
 8017e22:	4653      	mov	r3, sl
 8017e24:	4632      	mov	r2, r6
 8017e26:	4621      	mov	r1, r4
 8017e28:	4640      	mov	r0, r8
 8017e2a:	f7ff ff71 	bl	8017d10 <__ssputs_r>
 8017e2e:	3001      	adds	r0, #1
 8017e30:	f000 80a4 	beq.w	8017f7c <_svfiprintf_r+0x1b8>
 8017e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e36:	4453      	add	r3, sl
 8017e38:	9309      	str	r3, [sp, #36]	; 0x24
 8017e3a:	783b      	ldrb	r3, [r7, #0]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f000 809d 	beq.w	8017f7c <_svfiprintf_r+0x1b8>
 8017e42:	2300      	movs	r3, #0
 8017e44:	f04f 32ff 	mov.w	r2, #4294967295
 8017e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e4c:	9304      	str	r3, [sp, #16]
 8017e4e:	9307      	str	r3, [sp, #28]
 8017e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e54:	931a      	str	r3, [sp, #104]	; 0x68
 8017e56:	462f      	mov	r7, r5
 8017e58:	2205      	movs	r2, #5
 8017e5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017e5e:	4850      	ldr	r0, [pc, #320]	; (8017fa0 <_svfiprintf_r+0x1dc>)
 8017e60:	f7f0 f8f6 	bl	8008050 <memchr>
 8017e64:	9b04      	ldr	r3, [sp, #16]
 8017e66:	b9d0      	cbnz	r0, 8017e9e <_svfiprintf_r+0xda>
 8017e68:	06d9      	lsls	r1, r3, #27
 8017e6a:	bf44      	itt	mi
 8017e6c:	2220      	movmi	r2, #32
 8017e6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017e72:	071a      	lsls	r2, r3, #28
 8017e74:	bf44      	itt	mi
 8017e76:	222b      	movmi	r2, #43	; 0x2b
 8017e78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017e7c:	782a      	ldrb	r2, [r5, #0]
 8017e7e:	2a2a      	cmp	r2, #42	; 0x2a
 8017e80:	d015      	beq.n	8017eae <_svfiprintf_r+0xea>
 8017e82:	9a07      	ldr	r2, [sp, #28]
 8017e84:	462f      	mov	r7, r5
 8017e86:	2000      	movs	r0, #0
 8017e88:	250a      	movs	r5, #10
 8017e8a:	4639      	mov	r1, r7
 8017e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e90:	3b30      	subs	r3, #48	; 0x30
 8017e92:	2b09      	cmp	r3, #9
 8017e94:	d94d      	bls.n	8017f32 <_svfiprintf_r+0x16e>
 8017e96:	b1b8      	cbz	r0, 8017ec8 <_svfiprintf_r+0x104>
 8017e98:	e00f      	b.n	8017eba <_svfiprintf_r+0xf6>
 8017e9a:	462f      	mov	r7, r5
 8017e9c:	e7b8      	b.n	8017e10 <_svfiprintf_r+0x4c>
 8017e9e:	4a40      	ldr	r2, [pc, #256]	; (8017fa0 <_svfiprintf_r+0x1dc>)
 8017ea0:	1a80      	subs	r0, r0, r2
 8017ea2:	fa0b f000 	lsl.w	r0, fp, r0
 8017ea6:	4318      	orrs	r0, r3
 8017ea8:	9004      	str	r0, [sp, #16]
 8017eaa:	463d      	mov	r5, r7
 8017eac:	e7d3      	b.n	8017e56 <_svfiprintf_r+0x92>
 8017eae:	9a03      	ldr	r2, [sp, #12]
 8017eb0:	1d11      	adds	r1, r2, #4
 8017eb2:	6812      	ldr	r2, [r2, #0]
 8017eb4:	9103      	str	r1, [sp, #12]
 8017eb6:	2a00      	cmp	r2, #0
 8017eb8:	db01      	blt.n	8017ebe <_svfiprintf_r+0xfa>
 8017eba:	9207      	str	r2, [sp, #28]
 8017ebc:	e004      	b.n	8017ec8 <_svfiprintf_r+0x104>
 8017ebe:	4252      	negs	r2, r2
 8017ec0:	f043 0302 	orr.w	r3, r3, #2
 8017ec4:	9207      	str	r2, [sp, #28]
 8017ec6:	9304      	str	r3, [sp, #16]
 8017ec8:	783b      	ldrb	r3, [r7, #0]
 8017eca:	2b2e      	cmp	r3, #46	; 0x2e
 8017ecc:	d10c      	bne.n	8017ee8 <_svfiprintf_r+0x124>
 8017ece:	787b      	ldrb	r3, [r7, #1]
 8017ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8017ed2:	d133      	bne.n	8017f3c <_svfiprintf_r+0x178>
 8017ed4:	9b03      	ldr	r3, [sp, #12]
 8017ed6:	1d1a      	adds	r2, r3, #4
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	9203      	str	r2, [sp, #12]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	bfb8      	it	lt
 8017ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ee4:	3702      	adds	r7, #2
 8017ee6:	9305      	str	r3, [sp, #20]
 8017ee8:	4d2e      	ldr	r5, [pc, #184]	; (8017fa4 <_svfiprintf_r+0x1e0>)
 8017eea:	7839      	ldrb	r1, [r7, #0]
 8017eec:	2203      	movs	r2, #3
 8017eee:	4628      	mov	r0, r5
 8017ef0:	f7f0 f8ae 	bl	8008050 <memchr>
 8017ef4:	b138      	cbz	r0, 8017f06 <_svfiprintf_r+0x142>
 8017ef6:	2340      	movs	r3, #64	; 0x40
 8017ef8:	1b40      	subs	r0, r0, r5
 8017efa:	fa03 f000 	lsl.w	r0, r3, r0
 8017efe:	9b04      	ldr	r3, [sp, #16]
 8017f00:	4303      	orrs	r3, r0
 8017f02:	3701      	adds	r7, #1
 8017f04:	9304      	str	r3, [sp, #16]
 8017f06:	7839      	ldrb	r1, [r7, #0]
 8017f08:	4827      	ldr	r0, [pc, #156]	; (8017fa8 <_svfiprintf_r+0x1e4>)
 8017f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f0e:	2206      	movs	r2, #6
 8017f10:	1c7e      	adds	r6, r7, #1
 8017f12:	f7f0 f89d 	bl	8008050 <memchr>
 8017f16:	2800      	cmp	r0, #0
 8017f18:	d038      	beq.n	8017f8c <_svfiprintf_r+0x1c8>
 8017f1a:	4b24      	ldr	r3, [pc, #144]	; (8017fac <_svfiprintf_r+0x1e8>)
 8017f1c:	bb13      	cbnz	r3, 8017f64 <_svfiprintf_r+0x1a0>
 8017f1e:	9b03      	ldr	r3, [sp, #12]
 8017f20:	3307      	adds	r3, #7
 8017f22:	f023 0307 	bic.w	r3, r3, #7
 8017f26:	3308      	adds	r3, #8
 8017f28:	9303      	str	r3, [sp, #12]
 8017f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f2c:	444b      	add	r3, r9
 8017f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8017f30:	e76d      	b.n	8017e0e <_svfiprintf_r+0x4a>
 8017f32:	fb05 3202 	mla	r2, r5, r2, r3
 8017f36:	2001      	movs	r0, #1
 8017f38:	460f      	mov	r7, r1
 8017f3a:	e7a6      	b.n	8017e8a <_svfiprintf_r+0xc6>
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	3701      	adds	r7, #1
 8017f40:	9305      	str	r3, [sp, #20]
 8017f42:	4619      	mov	r1, r3
 8017f44:	250a      	movs	r5, #10
 8017f46:	4638      	mov	r0, r7
 8017f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f4c:	3a30      	subs	r2, #48	; 0x30
 8017f4e:	2a09      	cmp	r2, #9
 8017f50:	d903      	bls.n	8017f5a <_svfiprintf_r+0x196>
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d0c8      	beq.n	8017ee8 <_svfiprintf_r+0x124>
 8017f56:	9105      	str	r1, [sp, #20]
 8017f58:	e7c6      	b.n	8017ee8 <_svfiprintf_r+0x124>
 8017f5a:	fb05 2101 	mla	r1, r5, r1, r2
 8017f5e:	2301      	movs	r3, #1
 8017f60:	4607      	mov	r7, r0
 8017f62:	e7f0      	b.n	8017f46 <_svfiprintf_r+0x182>
 8017f64:	ab03      	add	r3, sp, #12
 8017f66:	9300      	str	r3, [sp, #0]
 8017f68:	4622      	mov	r2, r4
 8017f6a:	4b11      	ldr	r3, [pc, #68]	; (8017fb0 <_svfiprintf_r+0x1ec>)
 8017f6c:	a904      	add	r1, sp, #16
 8017f6e:	4640      	mov	r0, r8
 8017f70:	f7fb ffda 	bl	8013f28 <_printf_float>
 8017f74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017f78:	4681      	mov	r9, r0
 8017f7a:	d1d6      	bne.n	8017f2a <_svfiprintf_r+0x166>
 8017f7c:	89a3      	ldrh	r3, [r4, #12]
 8017f7e:	065b      	lsls	r3, r3, #25
 8017f80:	f53f af35 	bmi.w	8017dee <_svfiprintf_r+0x2a>
 8017f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f86:	b01d      	add	sp, #116	; 0x74
 8017f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f8c:	ab03      	add	r3, sp, #12
 8017f8e:	9300      	str	r3, [sp, #0]
 8017f90:	4622      	mov	r2, r4
 8017f92:	4b07      	ldr	r3, [pc, #28]	; (8017fb0 <_svfiprintf_r+0x1ec>)
 8017f94:	a904      	add	r1, sp, #16
 8017f96:	4640      	mov	r0, r8
 8017f98:	f7fc fa7c 	bl	8014494 <_printf_i>
 8017f9c:	e7ea      	b.n	8017f74 <_svfiprintf_r+0x1b0>
 8017f9e:	bf00      	nop
 8017fa0:	080193b4 	.word	0x080193b4
 8017fa4:	080193ba 	.word	0x080193ba
 8017fa8:	080193be 	.word	0x080193be
 8017fac:	08013f29 	.word	0x08013f29
 8017fb0:	08017d11 	.word	0x08017d11

08017fb4 <__sfputc_r>:
 8017fb4:	6893      	ldr	r3, [r2, #8]
 8017fb6:	3b01      	subs	r3, #1
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	b410      	push	{r4}
 8017fbc:	6093      	str	r3, [r2, #8]
 8017fbe:	da08      	bge.n	8017fd2 <__sfputc_r+0x1e>
 8017fc0:	6994      	ldr	r4, [r2, #24]
 8017fc2:	42a3      	cmp	r3, r4
 8017fc4:	db01      	blt.n	8017fca <__sfputc_r+0x16>
 8017fc6:	290a      	cmp	r1, #10
 8017fc8:	d103      	bne.n	8017fd2 <__sfputc_r+0x1e>
 8017fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fce:	f7fd bd75 	b.w	8015abc <__swbuf_r>
 8017fd2:	6813      	ldr	r3, [r2, #0]
 8017fd4:	1c58      	adds	r0, r3, #1
 8017fd6:	6010      	str	r0, [r2, #0]
 8017fd8:	7019      	strb	r1, [r3, #0]
 8017fda:	4608      	mov	r0, r1
 8017fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fe0:	4770      	bx	lr

08017fe2 <__sfputs_r>:
 8017fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fe4:	4606      	mov	r6, r0
 8017fe6:	460f      	mov	r7, r1
 8017fe8:	4614      	mov	r4, r2
 8017fea:	18d5      	adds	r5, r2, r3
 8017fec:	42ac      	cmp	r4, r5
 8017fee:	d101      	bne.n	8017ff4 <__sfputs_r+0x12>
 8017ff0:	2000      	movs	r0, #0
 8017ff2:	e007      	b.n	8018004 <__sfputs_r+0x22>
 8017ff4:	463a      	mov	r2, r7
 8017ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ffa:	4630      	mov	r0, r6
 8017ffc:	f7ff ffda 	bl	8017fb4 <__sfputc_r>
 8018000:	1c43      	adds	r3, r0, #1
 8018002:	d1f3      	bne.n	8017fec <__sfputs_r+0xa>
 8018004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018008 <_vfiprintf_r>:
 8018008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801800c:	460c      	mov	r4, r1
 801800e:	b09d      	sub	sp, #116	; 0x74
 8018010:	4617      	mov	r7, r2
 8018012:	461d      	mov	r5, r3
 8018014:	4606      	mov	r6, r0
 8018016:	b118      	cbz	r0, 8018020 <_vfiprintf_r+0x18>
 8018018:	6983      	ldr	r3, [r0, #24]
 801801a:	b90b      	cbnz	r3, 8018020 <_vfiprintf_r+0x18>
 801801c:	f7fe fd56 	bl	8016acc <__sinit>
 8018020:	4b7c      	ldr	r3, [pc, #496]	; (8018214 <_vfiprintf_r+0x20c>)
 8018022:	429c      	cmp	r4, r3
 8018024:	d158      	bne.n	80180d8 <_vfiprintf_r+0xd0>
 8018026:	6874      	ldr	r4, [r6, #4]
 8018028:	89a3      	ldrh	r3, [r4, #12]
 801802a:	0718      	lsls	r0, r3, #28
 801802c:	d55e      	bpl.n	80180ec <_vfiprintf_r+0xe4>
 801802e:	6923      	ldr	r3, [r4, #16]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d05b      	beq.n	80180ec <_vfiprintf_r+0xe4>
 8018034:	2300      	movs	r3, #0
 8018036:	9309      	str	r3, [sp, #36]	; 0x24
 8018038:	2320      	movs	r3, #32
 801803a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801803e:	2330      	movs	r3, #48	; 0x30
 8018040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018044:	9503      	str	r5, [sp, #12]
 8018046:	f04f 0b01 	mov.w	fp, #1
 801804a:	46b8      	mov	r8, r7
 801804c:	4645      	mov	r5, r8
 801804e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018052:	b10b      	cbz	r3, 8018058 <_vfiprintf_r+0x50>
 8018054:	2b25      	cmp	r3, #37	; 0x25
 8018056:	d154      	bne.n	8018102 <_vfiprintf_r+0xfa>
 8018058:	ebb8 0a07 	subs.w	sl, r8, r7
 801805c:	d00b      	beq.n	8018076 <_vfiprintf_r+0x6e>
 801805e:	4653      	mov	r3, sl
 8018060:	463a      	mov	r2, r7
 8018062:	4621      	mov	r1, r4
 8018064:	4630      	mov	r0, r6
 8018066:	f7ff ffbc 	bl	8017fe2 <__sfputs_r>
 801806a:	3001      	adds	r0, #1
 801806c:	f000 80c2 	beq.w	80181f4 <_vfiprintf_r+0x1ec>
 8018070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018072:	4453      	add	r3, sl
 8018074:	9309      	str	r3, [sp, #36]	; 0x24
 8018076:	f898 3000 	ldrb.w	r3, [r8]
 801807a:	2b00      	cmp	r3, #0
 801807c:	f000 80ba 	beq.w	80181f4 <_vfiprintf_r+0x1ec>
 8018080:	2300      	movs	r3, #0
 8018082:	f04f 32ff 	mov.w	r2, #4294967295
 8018086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801808a:	9304      	str	r3, [sp, #16]
 801808c:	9307      	str	r3, [sp, #28]
 801808e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018092:	931a      	str	r3, [sp, #104]	; 0x68
 8018094:	46a8      	mov	r8, r5
 8018096:	2205      	movs	r2, #5
 8018098:	f818 1b01 	ldrb.w	r1, [r8], #1
 801809c:	485e      	ldr	r0, [pc, #376]	; (8018218 <_vfiprintf_r+0x210>)
 801809e:	f7ef ffd7 	bl	8008050 <memchr>
 80180a2:	9b04      	ldr	r3, [sp, #16]
 80180a4:	bb78      	cbnz	r0, 8018106 <_vfiprintf_r+0xfe>
 80180a6:	06d9      	lsls	r1, r3, #27
 80180a8:	bf44      	itt	mi
 80180aa:	2220      	movmi	r2, #32
 80180ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80180b0:	071a      	lsls	r2, r3, #28
 80180b2:	bf44      	itt	mi
 80180b4:	222b      	movmi	r2, #43	; 0x2b
 80180b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80180ba:	782a      	ldrb	r2, [r5, #0]
 80180bc:	2a2a      	cmp	r2, #42	; 0x2a
 80180be:	d02a      	beq.n	8018116 <_vfiprintf_r+0x10e>
 80180c0:	9a07      	ldr	r2, [sp, #28]
 80180c2:	46a8      	mov	r8, r5
 80180c4:	2000      	movs	r0, #0
 80180c6:	250a      	movs	r5, #10
 80180c8:	4641      	mov	r1, r8
 80180ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180ce:	3b30      	subs	r3, #48	; 0x30
 80180d0:	2b09      	cmp	r3, #9
 80180d2:	d969      	bls.n	80181a8 <_vfiprintf_r+0x1a0>
 80180d4:	b360      	cbz	r0, 8018130 <_vfiprintf_r+0x128>
 80180d6:	e024      	b.n	8018122 <_vfiprintf_r+0x11a>
 80180d8:	4b50      	ldr	r3, [pc, #320]	; (801821c <_vfiprintf_r+0x214>)
 80180da:	429c      	cmp	r4, r3
 80180dc:	d101      	bne.n	80180e2 <_vfiprintf_r+0xda>
 80180de:	68b4      	ldr	r4, [r6, #8]
 80180e0:	e7a2      	b.n	8018028 <_vfiprintf_r+0x20>
 80180e2:	4b4f      	ldr	r3, [pc, #316]	; (8018220 <_vfiprintf_r+0x218>)
 80180e4:	429c      	cmp	r4, r3
 80180e6:	bf08      	it	eq
 80180e8:	68f4      	ldreq	r4, [r6, #12]
 80180ea:	e79d      	b.n	8018028 <_vfiprintf_r+0x20>
 80180ec:	4621      	mov	r1, r4
 80180ee:	4630      	mov	r0, r6
 80180f0:	f7fd fd36 	bl	8015b60 <__swsetup_r>
 80180f4:	2800      	cmp	r0, #0
 80180f6:	d09d      	beq.n	8018034 <_vfiprintf_r+0x2c>
 80180f8:	f04f 30ff 	mov.w	r0, #4294967295
 80180fc:	b01d      	add	sp, #116	; 0x74
 80180fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018102:	46a8      	mov	r8, r5
 8018104:	e7a2      	b.n	801804c <_vfiprintf_r+0x44>
 8018106:	4a44      	ldr	r2, [pc, #272]	; (8018218 <_vfiprintf_r+0x210>)
 8018108:	1a80      	subs	r0, r0, r2
 801810a:	fa0b f000 	lsl.w	r0, fp, r0
 801810e:	4318      	orrs	r0, r3
 8018110:	9004      	str	r0, [sp, #16]
 8018112:	4645      	mov	r5, r8
 8018114:	e7be      	b.n	8018094 <_vfiprintf_r+0x8c>
 8018116:	9a03      	ldr	r2, [sp, #12]
 8018118:	1d11      	adds	r1, r2, #4
 801811a:	6812      	ldr	r2, [r2, #0]
 801811c:	9103      	str	r1, [sp, #12]
 801811e:	2a00      	cmp	r2, #0
 8018120:	db01      	blt.n	8018126 <_vfiprintf_r+0x11e>
 8018122:	9207      	str	r2, [sp, #28]
 8018124:	e004      	b.n	8018130 <_vfiprintf_r+0x128>
 8018126:	4252      	negs	r2, r2
 8018128:	f043 0302 	orr.w	r3, r3, #2
 801812c:	9207      	str	r2, [sp, #28]
 801812e:	9304      	str	r3, [sp, #16]
 8018130:	f898 3000 	ldrb.w	r3, [r8]
 8018134:	2b2e      	cmp	r3, #46	; 0x2e
 8018136:	d10e      	bne.n	8018156 <_vfiprintf_r+0x14e>
 8018138:	f898 3001 	ldrb.w	r3, [r8, #1]
 801813c:	2b2a      	cmp	r3, #42	; 0x2a
 801813e:	d138      	bne.n	80181b2 <_vfiprintf_r+0x1aa>
 8018140:	9b03      	ldr	r3, [sp, #12]
 8018142:	1d1a      	adds	r2, r3, #4
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	9203      	str	r2, [sp, #12]
 8018148:	2b00      	cmp	r3, #0
 801814a:	bfb8      	it	lt
 801814c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018150:	f108 0802 	add.w	r8, r8, #2
 8018154:	9305      	str	r3, [sp, #20]
 8018156:	4d33      	ldr	r5, [pc, #204]	; (8018224 <_vfiprintf_r+0x21c>)
 8018158:	f898 1000 	ldrb.w	r1, [r8]
 801815c:	2203      	movs	r2, #3
 801815e:	4628      	mov	r0, r5
 8018160:	f7ef ff76 	bl	8008050 <memchr>
 8018164:	b140      	cbz	r0, 8018178 <_vfiprintf_r+0x170>
 8018166:	2340      	movs	r3, #64	; 0x40
 8018168:	1b40      	subs	r0, r0, r5
 801816a:	fa03 f000 	lsl.w	r0, r3, r0
 801816e:	9b04      	ldr	r3, [sp, #16]
 8018170:	4303      	orrs	r3, r0
 8018172:	f108 0801 	add.w	r8, r8, #1
 8018176:	9304      	str	r3, [sp, #16]
 8018178:	f898 1000 	ldrb.w	r1, [r8]
 801817c:	482a      	ldr	r0, [pc, #168]	; (8018228 <_vfiprintf_r+0x220>)
 801817e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018182:	2206      	movs	r2, #6
 8018184:	f108 0701 	add.w	r7, r8, #1
 8018188:	f7ef ff62 	bl	8008050 <memchr>
 801818c:	2800      	cmp	r0, #0
 801818e:	d037      	beq.n	8018200 <_vfiprintf_r+0x1f8>
 8018190:	4b26      	ldr	r3, [pc, #152]	; (801822c <_vfiprintf_r+0x224>)
 8018192:	bb1b      	cbnz	r3, 80181dc <_vfiprintf_r+0x1d4>
 8018194:	9b03      	ldr	r3, [sp, #12]
 8018196:	3307      	adds	r3, #7
 8018198:	f023 0307 	bic.w	r3, r3, #7
 801819c:	3308      	adds	r3, #8
 801819e:	9303      	str	r3, [sp, #12]
 80181a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181a2:	444b      	add	r3, r9
 80181a4:	9309      	str	r3, [sp, #36]	; 0x24
 80181a6:	e750      	b.n	801804a <_vfiprintf_r+0x42>
 80181a8:	fb05 3202 	mla	r2, r5, r2, r3
 80181ac:	2001      	movs	r0, #1
 80181ae:	4688      	mov	r8, r1
 80181b0:	e78a      	b.n	80180c8 <_vfiprintf_r+0xc0>
 80181b2:	2300      	movs	r3, #0
 80181b4:	f108 0801 	add.w	r8, r8, #1
 80181b8:	9305      	str	r3, [sp, #20]
 80181ba:	4619      	mov	r1, r3
 80181bc:	250a      	movs	r5, #10
 80181be:	4640      	mov	r0, r8
 80181c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181c4:	3a30      	subs	r2, #48	; 0x30
 80181c6:	2a09      	cmp	r2, #9
 80181c8:	d903      	bls.n	80181d2 <_vfiprintf_r+0x1ca>
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d0c3      	beq.n	8018156 <_vfiprintf_r+0x14e>
 80181ce:	9105      	str	r1, [sp, #20]
 80181d0:	e7c1      	b.n	8018156 <_vfiprintf_r+0x14e>
 80181d2:	fb05 2101 	mla	r1, r5, r1, r2
 80181d6:	2301      	movs	r3, #1
 80181d8:	4680      	mov	r8, r0
 80181da:	e7f0      	b.n	80181be <_vfiprintf_r+0x1b6>
 80181dc:	ab03      	add	r3, sp, #12
 80181de:	9300      	str	r3, [sp, #0]
 80181e0:	4622      	mov	r2, r4
 80181e2:	4b13      	ldr	r3, [pc, #76]	; (8018230 <_vfiprintf_r+0x228>)
 80181e4:	a904      	add	r1, sp, #16
 80181e6:	4630      	mov	r0, r6
 80181e8:	f7fb fe9e 	bl	8013f28 <_printf_float>
 80181ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80181f0:	4681      	mov	r9, r0
 80181f2:	d1d5      	bne.n	80181a0 <_vfiprintf_r+0x198>
 80181f4:	89a3      	ldrh	r3, [r4, #12]
 80181f6:	065b      	lsls	r3, r3, #25
 80181f8:	f53f af7e 	bmi.w	80180f8 <_vfiprintf_r+0xf0>
 80181fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181fe:	e77d      	b.n	80180fc <_vfiprintf_r+0xf4>
 8018200:	ab03      	add	r3, sp, #12
 8018202:	9300      	str	r3, [sp, #0]
 8018204:	4622      	mov	r2, r4
 8018206:	4b0a      	ldr	r3, [pc, #40]	; (8018230 <_vfiprintf_r+0x228>)
 8018208:	a904      	add	r1, sp, #16
 801820a:	4630      	mov	r0, r6
 801820c:	f7fc f942 	bl	8014494 <_printf_i>
 8018210:	e7ec      	b.n	80181ec <_vfiprintf_r+0x1e4>
 8018212:	bf00      	nop
 8018214:	08019268 	.word	0x08019268
 8018218:	080193b4 	.word	0x080193b4
 801821c:	08019288 	.word	0x08019288
 8018220:	08019248 	.word	0x08019248
 8018224:	080193ba 	.word	0x080193ba
 8018228:	080193be 	.word	0x080193be
 801822c:	08013f29 	.word	0x08013f29
 8018230:	08017fe3 	.word	0x08017fe3

08018234 <__svfiscanf_r>:
 8018234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018238:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801823c:	460c      	mov	r4, r1
 801823e:	2100      	movs	r1, #0
 8018240:	9144      	str	r1, [sp, #272]	; 0x110
 8018242:	9145      	str	r1, [sp, #276]	; 0x114
 8018244:	499f      	ldr	r1, [pc, #636]	; (80184c4 <__svfiscanf_r+0x290>)
 8018246:	91a0      	str	r1, [sp, #640]	; 0x280
 8018248:	f10d 0804 	add.w	r8, sp, #4
 801824c:	499e      	ldr	r1, [pc, #632]	; (80184c8 <__svfiscanf_r+0x294>)
 801824e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80184cc <__svfiscanf_r+0x298>
 8018252:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018256:	4606      	mov	r6, r0
 8018258:	4692      	mov	sl, r2
 801825a:	91a1      	str	r1, [sp, #644]	; 0x284
 801825c:	9300      	str	r3, [sp, #0]
 801825e:	270a      	movs	r7, #10
 8018260:	f89a 3000 	ldrb.w	r3, [sl]
 8018264:	2b00      	cmp	r3, #0
 8018266:	f000 812a 	beq.w	80184be <__svfiscanf_r+0x28a>
 801826a:	4655      	mov	r5, sl
 801826c:	f7fe fffe 	bl	801726c <__locale_ctype_ptr>
 8018270:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018274:	4458      	add	r0, fp
 8018276:	7843      	ldrb	r3, [r0, #1]
 8018278:	f013 0308 	ands.w	r3, r3, #8
 801827c:	d01c      	beq.n	80182b8 <__svfiscanf_r+0x84>
 801827e:	6863      	ldr	r3, [r4, #4]
 8018280:	2b00      	cmp	r3, #0
 8018282:	dd12      	ble.n	80182aa <__svfiscanf_r+0x76>
 8018284:	f7fe fff2 	bl	801726c <__locale_ctype_ptr>
 8018288:	6823      	ldr	r3, [r4, #0]
 801828a:	781a      	ldrb	r2, [r3, #0]
 801828c:	4410      	add	r0, r2
 801828e:	7842      	ldrb	r2, [r0, #1]
 8018290:	0712      	lsls	r2, r2, #28
 8018292:	d401      	bmi.n	8018298 <__svfiscanf_r+0x64>
 8018294:	46aa      	mov	sl, r5
 8018296:	e7e3      	b.n	8018260 <__svfiscanf_r+0x2c>
 8018298:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801829a:	3201      	adds	r2, #1
 801829c:	9245      	str	r2, [sp, #276]	; 0x114
 801829e:	6862      	ldr	r2, [r4, #4]
 80182a0:	3301      	adds	r3, #1
 80182a2:	3a01      	subs	r2, #1
 80182a4:	6062      	str	r2, [r4, #4]
 80182a6:	6023      	str	r3, [r4, #0]
 80182a8:	e7e9      	b.n	801827e <__svfiscanf_r+0x4a>
 80182aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80182ac:	4621      	mov	r1, r4
 80182ae:	4630      	mov	r0, r6
 80182b0:	4798      	blx	r3
 80182b2:	2800      	cmp	r0, #0
 80182b4:	d0e6      	beq.n	8018284 <__svfiscanf_r+0x50>
 80182b6:	e7ed      	b.n	8018294 <__svfiscanf_r+0x60>
 80182b8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80182bc:	f040 8082 	bne.w	80183c4 <__svfiscanf_r+0x190>
 80182c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80182c2:	9341      	str	r3, [sp, #260]	; 0x104
 80182c4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80182c8:	2b2a      	cmp	r3, #42	; 0x2a
 80182ca:	d103      	bne.n	80182d4 <__svfiscanf_r+0xa0>
 80182cc:	2310      	movs	r3, #16
 80182ce:	9341      	str	r3, [sp, #260]	; 0x104
 80182d0:	f10a 0502 	add.w	r5, sl, #2
 80182d4:	46aa      	mov	sl, r5
 80182d6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80182da:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80182de:	2a09      	cmp	r2, #9
 80182e0:	d922      	bls.n	8018328 <__svfiscanf_r+0xf4>
 80182e2:	2203      	movs	r2, #3
 80182e4:	4879      	ldr	r0, [pc, #484]	; (80184cc <__svfiscanf_r+0x298>)
 80182e6:	f7ef feb3 	bl	8008050 <memchr>
 80182ea:	b138      	cbz	r0, 80182fc <__svfiscanf_r+0xc8>
 80182ec:	eba0 0309 	sub.w	r3, r0, r9
 80182f0:	2001      	movs	r0, #1
 80182f2:	4098      	lsls	r0, r3
 80182f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80182f6:	4318      	orrs	r0, r3
 80182f8:	9041      	str	r0, [sp, #260]	; 0x104
 80182fa:	46aa      	mov	sl, r5
 80182fc:	f89a 3000 	ldrb.w	r3, [sl]
 8018300:	2b67      	cmp	r3, #103	; 0x67
 8018302:	f10a 0501 	add.w	r5, sl, #1
 8018306:	d82b      	bhi.n	8018360 <__svfiscanf_r+0x12c>
 8018308:	2b65      	cmp	r3, #101	; 0x65
 801830a:	f080 809f 	bcs.w	801844c <__svfiscanf_r+0x218>
 801830e:	2b47      	cmp	r3, #71	; 0x47
 8018310:	d810      	bhi.n	8018334 <__svfiscanf_r+0x100>
 8018312:	2b45      	cmp	r3, #69	; 0x45
 8018314:	f080 809a 	bcs.w	801844c <__svfiscanf_r+0x218>
 8018318:	2b00      	cmp	r3, #0
 801831a:	d06c      	beq.n	80183f6 <__svfiscanf_r+0x1c2>
 801831c:	2b25      	cmp	r3, #37	; 0x25
 801831e:	d051      	beq.n	80183c4 <__svfiscanf_r+0x190>
 8018320:	2303      	movs	r3, #3
 8018322:	9347      	str	r3, [sp, #284]	; 0x11c
 8018324:	9742      	str	r7, [sp, #264]	; 0x108
 8018326:	e027      	b.n	8018378 <__svfiscanf_r+0x144>
 8018328:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801832a:	fb07 1303 	mla	r3, r7, r3, r1
 801832e:	3b30      	subs	r3, #48	; 0x30
 8018330:	9343      	str	r3, [sp, #268]	; 0x10c
 8018332:	e7cf      	b.n	80182d4 <__svfiscanf_r+0xa0>
 8018334:	2b5b      	cmp	r3, #91	; 0x5b
 8018336:	d06a      	beq.n	801840e <__svfiscanf_r+0x1da>
 8018338:	d80c      	bhi.n	8018354 <__svfiscanf_r+0x120>
 801833a:	2b58      	cmp	r3, #88	; 0x58
 801833c:	d1f0      	bne.n	8018320 <__svfiscanf_r+0xec>
 801833e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018344:	9241      	str	r2, [sp, #260]	; 0x104
 8018346:	2210      	movs	r2, #16
 8018348:	9242      	str	r2, [sp, #264]	; 0x108
 801834a:	2b6e      	cmp	r3, #110	; 0x6e
 801834c:	bf8c      	ite	hi
 801834e:	2304      	movhi	r3, #4
 8018350:	2303      	movls	r3, #3
 8018352:	e010      	b.n	8018376 <__svfiscanf_r+0x142>
 8018354:	2b63      	cmp	r3, #99	; 0x63
 8018356:	d065      	beq.n	8018424 <__svfiscanf_r+0x1f0>
 8018358:	2b64      	cmp	r3, #100	; 0x64
 801835a:	d1e1      	bne.n	8018320 <__svfiscanf_r+0xec>
 801835c:	9742      	str	r7, [sp, #264]	; 0x108
 801835e:	e7f4      	b.n	801834a <__svfiscanf_r+0x116>
 8018360:	2b70      	cmp	r3, #112	; 0x70
 8018362:	d04b      	beq.n	80183fc <__svfiscanf_r+0x1c8>
 8018364:	d826      	bhi.n	80183b4 <__svfiscanf_r+0x180>
 8018366:	2b6e      	cmp	r3, #110	; 0x6e
 8018368:	d062      	beq.n	8018430 <__svfiscanf_r+0x1fc>
 801836a:	d84c      	bhi.n	8018406 <__svfiscanf_r+0x1d2>
 801836c:	2b69      	cmp	r3, #105	; 0x69
 801836e:	d1d7      	bne.n	8018320 <__svfiscanf_r+0xec>
 8018370:	2300      	movs	r3, #0
 8018372:	9342      	str	r3, [sp, #264]	; 0x108
 8018374:	2303      	movs	r3, #3
 8018376:	9347      	str	r3, [sp, #284]	; 0x11c
 8018378:	6863      	ldr	r3, [r4, #4]
 801837a:	2b00      	cmp	r3, #0
 801837c:	dd68      	ble.n	8018450 <__svfiscanf_r+0x21c>
 801837e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018380:	0659      	lsls	r1, r3, #25
 8018382:	d407      	bmi.n	8018394 <__svfiscanf_r+0x160>
 8018384:	f7fe ff72 	bl	801726c <__locale_ctype_ptr>
 8018388:	6823      	ldr	r3, [r4, #0]
 801838a:	781a      	ldrb	r2, [r3, #0]
 801838c:	4410      	add	r0, r2
 801838e:	7842      	ldrb	r2, [r0, #1]
 8018390:	0712      	lsls	r2, r2, #28
 8018392:	d464      	bmi.n	801845e <__svfiscanf_r+0x22a>
 8018394:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018396:	2b02      	cmp	r3, #2
 8018398:	dc73      	bgt.n	8018482 <__svfiscanf_r+0x24e>
 801839a:	466b      	mov	r3, sp
 801839c:	4622      	mov	r2, r4
 801839e:	a941      	add	r1, sp, #260	; 0x104
 80183a0:	4630      	mov	r0, r6
 80183a2:	f000 f8bf 	bl	8018524 <_scanf_chars>
 80183a6:	2801      	cmp	r0, #1
 80183a8:	f000 8089 	beq.w	80184be <__svfiscanf_r+0x28a>
 80183ac:	2802      	cmp	r0, #2
 80183ae:	f47f af71 	bne.w	8018294 <__svfiscanf_r+0x60>
 80183b2:	e01d      	b.n	80183f0 <__svfiscanf_r+0x1bc>
 80183b4:	2b75      	cmp	r3, #117	; 0x75
 80183b6:	d0d1      	beq.n	801835c <__svfiscanf_r+0x128>
 80183b8:	2b78      	cmp	r3, #120	; 0x78
 80183ba:	d0c0      	beq.n	801833e <__svfiscanf_r+0x10a>
 80183bc:	2b73      	cmp	r3, #115	; 0x73
 80183be:	d1af      	bne.n	8018320 <__svfiscanf_r+0xec>
 80183c0:	2302      	movs	r3, #2
 80183c2:	e7d8      	b.n	8018376 <__svfiscanf_r+0x142>
 80183c4:	6863      	ldr	r3, [r4, #4]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	dd0c      	ble.n	80183e4 <__svfiscanf_r+0x1b0>
 80183ca:	6823      	ldr	r3, [r4, #0]
 80183cc:	781a      	ldrb	r2, [r3, #0]
 80183ce:	455a      	cmp	r2, fp
 80183d0:	d175      	bne.n	80184be <__svfiscanf_r+0x28a>
 80183d2:	3301      	adds	r3, #1
 80183d4:	6862      	ldr	r2, [r4, #4]
 80183d6:	6023      	str	r3, [r4, #0]
 80183d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80183da:	3a01      	subs	r2, #1
 80183dc:	3301      	adds	r3, #1
 80183de:	6062      	str	r2, [r4, #4]
 80183e0:	9345      	str	r3, [sp, #276]	; 0x114
 80183e2:	e757      	b.n	8018294 <__svfiscanf_r+0x60>
 80183e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80183e6:	4621      	mov	r1, r4
 80183e8:	4630      	mov	r0, r6
 80183ea:	4798      	blx	r3
 80183ec:	2800      	cmp	r0, #0
 80183ee:	d0ec      	beq.n	80183ca <__svfiscanf_r+0x196>
 80183f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80183f2:	2800      	cmp	r0, #0
 80183f4:	d159      	bne.n	80184aa <__svfiscanf_r+0x276>
 80183f6:	f04f 30ff 	mov.w	r0, #4294967295
 80183fa:	e05c      	b.n	80184b6 <__svfiscanf_r+0x282>
 80183fc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80183fe:	f042 0220 	orr.w	r2, r2, #32
 8018402:	9241      	str	r2, [sp, #260]	; 0x104
 8018404:	e79b      	b.n	801833e <__svfiscanf_r+0x10a>
 8018406:	2308      	movs	r3, #8
 8018408:	9342      	str	r3, [sp, #264]	; 0x108
 801840a:	2304      	movs	r3, #4
 801840c:	e7b3      	b.n	8018376 <__svfiscanf_r+0x142>
 801840e:	4629      	mov	r1, r5
 8018410:	4640      	mov	r0, r8
 8018412:	f000 fa85 	bl	8018920 <__sccl>
 8018416:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801841c:	9341      	str	r3, [sp, #260]	; 0x104
 801841e:	4605      	mov	r5, r0
 8018420:	2301      	movs	r3, #1
 8018422:	e7a8      	b.n	8018376 <__svfiscanf_r+0x142>
 8018424:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801842a:	9341      	str	r3, [sp, #260]	; 0x104
 801842c:	2300      	movs	r3, #0
 801842e:	e7a2      	b.n	8018376 <__svfiscanf_r+0x142>
 8018430:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018432:	06c3      	lsls	r3, r0, #27
 8018434:	f53f af2e 	bmi.w	8018294 <__svfiscanf_r+0x60>
 8018438:	9b00      	ldr	r3, [sp, #0]
 801843a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801843c:	1d19      	adds	r1, r3, #4
 801843e:	9100      	str	r1, [sp, #0]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	07c0      	lsls	r0, r0, #31
 8018444:	bf4c      	ite	mi
 8018446:	801a      	strhmi	r2, [r3, #0]
 8018448:	601a      	strpl	r2, [r3, #0]
 801844a:	e723      	b.n	8018294 <__svfiscanf_r+0x60>
 801844c:	2305      	movs	r3, #5
 801844e:	e792      	b.n	8018376 <__svfiscanf_r+0x142>
 8018450:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018452:	4621      	mov	r1, r4
 8018454:	4630      	mov	r0, r6
 8018456:	4798      	blx	r3
 8018458:	2800      	cmp	r0, #0
 801845a:	d090      	beq.n	801837e <__svfiscanf_r+0x14a>
 801845c:	e7c8      	b.n	80183f0 <__svfiscanf_r+0x1bc>
 801845e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018460:	3201      	adds	r2, #1
 8018462:	9245      	str	r2, [sp, #276]	; 0x114
 8018464:	6862      	ldr	r2, [r4, #4]
 8018466:	3a01      	subs	r2, #1
 8018468:	2a00      	cmp	r2, #0
 801846a:	6062      	str	r2, [r4, #4]
 801846c:	dd02      	ble.n	8018474 <__svfiscanf_r+0x240>
 801846e:	3301      	adds	r3, #1
 8018470:	6023      	str	r3, [r4, #0]
 8018472:	e787      	b.n	8018384 <__svfiscanf_r+0x150>
 8018474:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018476:	4621      	mov	r1, r4
 8018478:	4630      	mov	r0, r6
 801847a:	4798      	blx	r3
 801847c:	2800      	cmp	r0, #0
 801847e:	d081      	beq.n	8018384 <__svfiscanf_r+0x150>
 8018480:	e7b6      	b.n	80183f0 <__svfiscanf_r+0x1bc>
 8018482:	2b04      	cmp	r3, #4
 8018484:	dc06      	bgt.n	8018494 <__svfiscanf_r+0x260>
 8018486:	466b      	mov	r3, sp
 8018488:	4622      	mov	r2, r4
 801848a:	a941      	add	r1, sp, #260	; 0x104
 801848c:	4630      	mov	r0, r6
 801848e:	f000 f8ad 	bl	80185ec <_scanf_i>
 8018492:	e788      	b.n	80183a6 <__svfiscanf_r+0x172>
 8018494:	4b0e      	ldr	r3, [pc, #56]	; (80184d0 <__svfiscanf_r+0x29c>)
 8018496:	2b00      	cmp	r3, #0
 8018498:	f43f aefc 	beq.w	8018294 <__svfiscanf_r+0x60>
 801849c:	466b      	mov	r3, sp
 801849e:	4622      	mov	r2, r4
 80184a0:	a941      	add	r1, sp, #260	; 0x104
 80184a2:	4630      	mov	r0, r6
 80184a4:	f7fc f908 	bl	80146b8 <_scanf_float>
 80184a8:	e77d      	b.n	80183a6 <__svfiscanf_r+0x172>
 80184aa:	89a3      	ldrh	r3, [r4, #12]
 80184ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80184b0:	bf18      	it	ne
 80184b2:	f04f 30ff 	movne.w	r0, #4294967295
 80184b6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80184ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80184c0:	e7f9      	b.n	80184b6 <__svfiscanf_r+0x282>
 80184c2:	bf00      	nop
 80184c4:	08018bbd 	.word	0x08018bbd
 80184c8:	080187e9 	.word	0x080187e9
 80184cc:	080193ba 	.word	0x080193ba
 80184d0:	080146b9 	.word	0x080146b9

080184d4 <_vfiscanf_r>:
 80184d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184d8:	460c      	mov	r4, r1
 80184da:	4616      	mov	r6, r2
 80184dc:	461f      	mov	r7, r3
 80184de:	4605      	mov	r5, r0
 80184e0:	b118      	cbz	r0, 80184ea <_vfiscanf_r+0x16>
 80184e2:	6983      	ldr	r3, [r0, #24]
 80184e4:	b90b      	cbnz	r3, 80184ea <_vfiscanf_r+0x16>
 80184e6:	f7fe faf1 	bl	8016acc <__sinit>
 80184ea:	4b0b      	ldr	r3, [pc, #44]	; (8018518 <_vfiscanf_r+0x44>)
 80184ec:	429c      	cmp	r4, r3
 80184ee:	d108      	bne.n	8018502 <_vfiscanf_r+0x2e>
 80184f0:	686c      	ldr	r4, [r5, #4]
 80184f2:	463b      	mov	r3, r7
 80184f4:	4632      	mov	r2, r6
 80184f6:	4621      	mov	r1, r4
 80184f8:	4628      	mov	r0, r5
 80184fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184fe:	f7ff be99 	b.w	8018234 <__svfiscanf_r>
 8018502:	4b06      	ldr	r3, [pc, #24]	; (801851c <_vfiscanf_r+0x48>)
 8018504:	429c      	cmp	r4, r3
 8018506:	d101      	bne.n	801850c <_vfiscanf_r+0x38>
 8018508:	68ac      	ldr	r4, [r5, #8]
 801850a:	e7f2      	b.n	80184f2 <_vfiscanf_r+0x1e>
 801850c:	4b04      	ldr	r3, [pc, #16]	; (8018520 <_vfiscanf_r+0x4c>)
 801850e:	429c      	cmp	r4, r3
 8018510:	bf08      	it	eq
 8018512:	68ec      	ldreq	r4, [r5, #12]
 8018514:	e7ed      	b.n	80184f2 <_vfiscanf_r+0x1e>
 8018516:	bf00      	nop
 8018518:	08019268 	.word	0x08019268
 801851c:	08019288 	.word	0x08019288
 8018520:	08019248 	.word	0x08019248

08018524 <_scanf_chars>:
 8018524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018528:	4615      	mov	r5, r2
 801852a:	688a      	ldr	r2, [r1, #8]
 801852c:	4680      	mov	r8, r0
 801852e:	460c      	mov	r4, r1
 8018530:	b932      	cbnz	r2, 8018540 <_scanf_chars+0x1c>
 8018532:	698a      	ldr	r2, [r1, #24]
 8018534:	2a00      	cmp	r2, #0
 8018536:	bf14      	ite	ne
 8018538:	f04f 32ff 	movne.w	r2, #4294967295
 801853c:	2201      	moveq	r2, #1
 801853e:	608a      	str	r2, [r1, #8]
 8018540:	6822      	ldr	r2, [r4, #0]
 8018542:	06d1      	lsls	r1, r2, #27
 8018544:	bf5f      	itttt	pl
 8018546:	681a      	ldrpl	r2, [r3, #0]
 8018548:	1d11      	addpl	r1, r2, #4
 801854a:	6019      	strpl	r1, [r3, #0]
 801854c:	6817      	ldrpl	r7, [r2, #0]
 801854e:	2600      	movs	r6, #0
 8018550:	69a3      	ldr	r3, [r4, #24]
 8018552:	b1db      	cbz	r3, 801858c <_scanf_chars+0x68>
 8018554:	2b01      	cmp	r3, #1
 8018556:	d107      	bne.n	8018568 <_scanf_chars+0x44>
 8018558:	682b      	ldr	r3, [r5, #0]
 801855a:	6962      	ldr	r2, [r4, #20]
 801855c:	781b      	ldrb	r3, [r3, #0]
 801855e:	5cd3      	ldrb	r3, [r2, r3]
 8018560:	b9a3      	cbnz	r3, 801858c <_scanf_chars+0x68>
 8018562:	2e00      	cmp	r6, #0
 8018564:	d132      	bne.n	80185cc <_scanf_chars+0xa8>
 8018566:	e006      	b.n	8018576 <_scanf_chars+0x52>
 8018568:	2b02      	cmp	r3, #2
 801856a:	d007      	beq.n	801857c <_scanf_chars+0x58>
 801856c:	2e00      	cmp	r6, #0
 801856e:	d12d      	bne.n	80185cc <_scanf_chars+0xa8>
 8018570:	69a3      	ldr	r3, [r4, #24]
 8018572:	2b01      	cmp	r3, #1
 8018574:	d12a      	bne.n	80185cc <_scanf_chars+0xa8>
 8018576:	2001      	movs	r0, #1
 8018578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801857c:	f7fe fe76 	bl	801726c <__locale_ctype_ptr>
 8018580:	682b      	ldr	r3, [r5, #0]
 8018582:	781b      	ldrb	r3, [r3, #0]
 8018584:	4418      	add	r0, r3
 8018586:	7843      	ldrb	r3, [r0, #1]
 8018588:	071b      	lsls	r3, r3, #28
 801858a:	d4ef      	bmi.n	801856c <_scanf_chars+0x48>
 801858c:	6823      	ldr	r3, [r4, #0]
 801858e:	06da      	lsls	r2, r3, #27
 8018590:	bf5e      	ittt	pl
 8018592:	682b      	ldrpl	r3, [r5, #0]
 8018594:	781b      	ldrbpl	r3, [r3, #0]
 8018596:	703b      	strbpl	r3, [r7, #0]
 8018598:	682a      	ldr	r2, [r5, #0]
 801859a:	686b      	ldr	r3, [r5, #4]
 801859c:	f102 0201 	add.w	r2, r2, #1
 80185a0:	602a      	str	r2, [r5, #0]
 80185a2:	68a2      	ldr	r2, [r4, #8]
 80185a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80185a8:	f102 32ff 	add.w	r2, r2, #4294967295
 80185ac:	606b      	str	r3, [r5, #4]
 80185ae:	f106 0601 	add.w	r6, r6, #1
 80185b2:	bf58      	it	pl
 80185b4:	3701      	addpl	r7, #1
 80185b6:	60a2      	str	r2, [r4, #8]
 80185b8:	b142      	cbz	r2, 80185cc <_scanf_chars+0xa8>
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	dcc8      	bgt.n	8018550 <_scanf_chars+0x2c>
 80185be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80185c2:	4629      	mov	r1, r5
 80185c4:	4640      	mov	r0, r8
 80185c6:	4798      	blx	r3
 80185c8:	2800      	cmp	r0, #0
 80185ca:	d0c1      	beq.n	8018550 <_scanf_chars+0x2c>
 80185cc:	6823      	ldr	r3, [r4, #0]
 80185ce:	f013 0310 	ands.w	r3, r3, #16
 80185d2:	d105      	bne.n	80185e0 <_scanf_chars+0xbc>
 80185d4:	68e2      	ldr	r2, [r4, #12]
 80185d6:	3201      	adds	r2, #1
 80185d8:	60e2      	str	r2, [r4, #12]
 80185da:	69a2      	ldr	r2, [r4, #24]
 80185dc:	b102      	cbz	r2, 80185e0 <_scanf_chars+0xbc>
 80185de:	703b      	strb	r3, [r7, #0]
 80185e0:	6923      	ldr	r3, [r4, #16]
 80185e2:	441e      	add	r6, r3
 80185e4:	6126      	str	r6, [r4, #16]
 80185e6:	2000      	movs	r0, #0
 80185e8:	e7c6      	b.n	8018578 <_scanf_chars+0x54>
	...

080185ec <_scanf_i>:
 80185ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f0:	469a      	mov	sl, r3
 80185f2:	4b74      	ldr	r3, [pc, #464]	; (80187c4 <_scanf_i+0x1d8>)
 80185f4:	460c      	mov	r4, r1
 80185f6:	4683      	mov	fp, r0
 80185f8:	4616      	mov	r6, r2
 80185fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80185fe:	b087      	sub	sp, #28
 8018600:	ab03      	add	r3, sp, #12
 8018602:	68a7      	ldr	r7, [r4, #8]
 8018604:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018608:	4b6f      	ldr	r3, [pc, #444]	; (80187c8 <_scanf_i+0x1dc>)
 801860a:	69a1      	ldr	r1, [r4, #24]
 801860c:	4a6f      	ldr	r2, [pc, #444]	; (80187cc <_scanf_i+0x1e0>)
 801860e:	2903      	cmp	r1, #3
 8018610:	bf08      	it	eq
 8018612:	461a      	moveq	r2, r3
 8018614:	1e7b      	subs	r3, r7, #1
 8018616:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801861a:	bf84      	itt	hi
 801861c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018620:	60a3      	strhi	r3, [r4, #8]
 8018622:	6823      	ldr	r3, [r4, #0]
 8018624:	9200      	str	r2, [sp, #0]
 8018626:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801862a:	bf88      	it	hi
 801862c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018630:	f104 091c 	add.w	r9, r4, #28
 8018634:	6023      	str	r3, [r4, #0]
 8018636:	bf8c      	ite	hi
 8018638:	197f      	addhi	r7, r7, r5
 801863a:	2700      	movls	r7, #0
 801863c:	464b      	mov	r3, r9
 801863e:	f04f 0800 	mov.w	r8, #0
 8018642:	9301      	str	r3, [sp, #4]
 8018644:	6831      	ldr	r1, [r6, #0]
 8018646:	ab03      	add	r3, sp, #12
 8018648:	2202      	movs	r2, #2
 801864a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801864e:	7809      	ldrb	r1, [r1, #0]
 8018650:	f7ef fcfe 	bl	8008050 <memchr>
 8018654:	9b01      	ldr	r3, [sp, #4]
 8018656:	b330      	cbz	r0, 80186a6 <_scanf_i+0xba>
 8018658:	f1b8 0f01 	cmp.w	r8, #1
 801865c:	d15a      	bne.n	8018714 <_scanf_i+0x128>
 801865e:	6862      	ldr	r2, [r4, #4]
 8018660:	b92a      	cbnz	r2, 801866e <_scanf_i+0x82>
 8018662:	6822      	ldr	r2, [r4, #0]
 8018664:	2108      	movs	r1, #8
 8018666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801866a:	6061      	str	r1, [r4, #4]
 801866c:	6022      	str	r2, [r4, #0]
 801866e:	6822      	ldr	r2, [r4, #0]
 8018670:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018674:	6022      	str	r2, [r4, #0]
 8018676:	68a2      	ldr	r2, [r4, #8]
 8018678:	1e51      	subs	r1, r2, #1
 801867a:	60a1      	str	r1, [r4, #8]
 801867c:	b19a      	cbz	r2, 80186a6 <_scanf_i+0xba>
 801867e:	6832      	ldr	r2, [r6, #0]
 8018680:	1c51      	adds	r1, r2, #1
 8018682:	6031      	str	r1, [r6, #0]
 8018684:	7812      	ldrb	r2, [r2, #0]
 8018686:	701a      	strb	r2, [r3, #0]
 8018688:	1c5d      	adds	r5, r3, #1
 801868a:	6873      	ldr	r3, [r6, #4]
 801868c:	3b01      	subs	r3, #1
 801868e:	2b00      	cmp	r3, #0
 8018690:	6073      	str	r3, [r6, #4]
 8018692:	dc07      	bgt.n	80186a4 <_scanf_i+0xb8>
 8018694:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018698:	4631      	mov	r1, r6
 801869a:	4658      	mov	r0, fp
 801869c:	4798      	blx	r3
 801869e:	2800      	cmp	r0, #0
 80186a0:	f040 8086 	bne.w	80187b0 <_scanf_i+0x1c4>
 80186a4:	462b      	mov	r3, r5
 80186a6:	f108 0801 	add.w	r8, r8, #1
 80186aa:	f1b8 0f03 	cmp.w	r8, #3
 80186ae:	d1c8      	bne.n	8018642 <_scanf_i+0x56>
 80186b0:	6862      	ldr	r2, [r4, #4]
 80186b2:	b90a      	cbnz	r2, 80186b8 <_scanf_i+0xcc>
 80186b4:	220a      	movs	r2, #10
 80186b6:	6062      	str	r2, [r4, #4]
 80186b8:	6862      	ldr	r2, [r4, #4]
 80186ba:	4945      	ldr	r1, [pc, #276]	; (80187d0 <_scanf_i+0x1e4>)
 80186bc:	6960      	ldr	r0, [r4, #20]
 80186be:	9301      	str	r3, [sp, #4]
 80186c0:	1a89      	subs	r1, r1, r2
 80186c2:	f000 f92d 	bl	8018920 <__sccl>
 80186c6:	9b01      	ldr	r3, [sp, #4]
 80186c8:	f04f 0800 	mov.w	r8, #0
 80186cc:	461d      	mov	r5, r3
 80186ce:	68a3      	ldr	r3, [r4, #8]
 80186d0:	6822      	ldr	r2, [r4, #0]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d03a      	beq.n	801874c <_scanf_i+0x160>
 80186d6:	6831      	ldr	r1, [r6, #0]
 80186d8:	6960      	ldr	r0, [r4, #20]
 80186da:	f891 c000 	ldrb.w	ip, [r1]
 80186de:	f810 000c 	ldrb.w	r0, [r0, ip]
 80186e2:	2800      	cmp	r0, #0
 80186e4:	d032      	beq.n	801874c <_scanf_i+0x160>
 80186e6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80186ea:	d121      	bne.n	8018730 <_scanf_i+0x144>
 80186ec:	0510      	lsls	r0, r2, #20
 80186ee:	d51f      	bpl.n	8018730 <_scanf_i+0x144>
 80186f0:	f108 0801 	add.w	r8, r8, #1
 80186f4:	b117      	cbz	r7, 80186fc <_scanf_i+0x110>
 80186f6:	3301      	adds	r3, #1
 80186f8:	3f01      	subs	r7, #1
 80186fa:	60a3      	str	r3, [r4, #8]
 80186fc:	6873      	ldr	r3, [r6, #4]
 80186fe:	3b01      	subs	r3, #1
 8018700:	2b00      	cmp	r3, #0
 8018702:	6073      	str	r3, [r6, #4]
 8018704:	dd1b      	ble.n	801873e <_scanf_i+0x152>
 8018706:	6833      	ldr	r3, [r6, #0]
 8018708:	3301      	adds	r3, #1
 801870a:	6033      	str	r3, [r6, #0]
 801870c:	68a3      	ldr	r3, [r4, #8]
 801870e:	3b01      	subs	r3, #1
 8018710:	60a3      	str	r3, [r4, #8]
 8018712:	e7dc      	b.n	80186ce <_scanf_i+0xe2>
 8018714:	f1b8 0f02 	cmp.w	r8, #2
 8018718:	d1ad      	bne.n	8018676 <_scanf_i+0x8a>
 801871a:	6822      	ldr	r2, [r4, #0]
 801871c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018720:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018724:	d1bf      	bne.n	80186a6 <_scanf_i+0xba>
 8018726:	2110      	movs	r1, #16
 8018728:	6061      	str	r1, [r4, #4]
 801872a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801872e:	e7a1      	b.n	8018674 <_scanf_i+0x88>
 8018730:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018734:	6022      	str	r2, [r4, #0]
 8018736:	780b      	ldrb	r3, [r1, #0]
 8018738:	702b      	strb	r3, [r5, #0]
 801873a:	3501      	adds	r5, #1
 801873c:	e7de      	b.n	80186fc <_scanf_i+0x110>
 801873e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018742:	4631      	mov	r1, r6
 8018744:	4658      	mov	r0, fp
 8018746:	4798      	blx	r3
 8018748:	2800      	cmp	r0, #0
 801874a:	d0df      	beq.n	801870c <_scanf_i+0x120>
 801874c:	6823      	ldr	r3, [r4, #0]
 801874e:	05d9      	lsls	r1, r3, #23
 8018750:	d50c      	bpl.n	801876c <_scanf_i+0x180>
 8018752:	454d      	cmp	r5, r9
 8018754:	d908      	bls.n	8018768 <_scanf_i+0x17c>
 8018756:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801875a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801875e:	4632      	mov	r2, r6
 8018760:	4658      	mov	r0, fp
 8018762:	4798      	blx	r3
 8018764:	1e6f      	subs	r7, r5, #1
 8018766:	463d      	mov	r5, r7
 8018768:	454d      	cmp	r5, r9
 801876a:	d029      	beq.n	80187c0 <_scanf_i+0x1d4>
 801876c:	6822      	ldr	r2, [r4, #0]
 801876e:	f012 0210 	ands.w	r2, r2, #16
 8018772:	d113      	bne.n	801879c <_scanf_i+0x1b0>
 8018774:	702a      	strb	r2, [r5, #0]
 8018776:	6863      	ldr	r3, [r4, #4]
 8018778:	9e00      	ldr	r6, [sp, #0]
 801877a:	4649      	mov	r1, r9
 801877c:	4658      	mov	r0, fp
 801877e:	47b0      	blx	r6
 8018780:	f8da 3000 	ldr.w	r3, [sl]
 8018784:	6821      	ldr	r1, [r4, #0]
 8018786:	1d1a      	adds	r2, r3, #4
 8018788:	f8ca 2000 	str.w	r2, [sl]
 801878c:	f011 0f20 	tst.w	r1, #32
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	d010      	beq.n	80187b6 <_scanf_i+0x1ca>
 8018794:	6018      	str	r0, [r3, #0]
 8018796:	68e3      	ldr	r3, [r4, #12]
 8018798:	3301      	adds	r3, #1
 801879a:	60e3      	str	r3, [r4, #12]
 801879c:	eba5 0509 	sub.w	r5, r5, r9
 80187a0:	44a8      	add	r8, r5
 80187a2:	6925      	ldr	r5, [r4, #16]
 80187a4:	4445      	add	r5, r8
 80187a6:	6125      	str	r5, [r4, #16]
 80187a8:	2000      	movs	r0, #0
 80187aa:	b007      	add	sp, #28
 80187ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187b0:	f04f 0800 	mov.w	r8, #0
 80187b4:	e7ca      	b.n	801874c <_scanf_i+0x160>
 80187b6:	07ca      	lsls	r2, r1, #31
 80187b8:	bf4c      	ite	mi
 80187ba:	8018      	strhmi	r0, [r3, #0]
 80187bc:	6018      	strpl	r0, [r3, #0]
 80187be:	e7ea      	b.n	8018796 <_scanf_i+0x1aa>
 80187c0:	2001      	movs	r0, #1
 80187c2:	e7f2      	b.n	80187aa <_scanf_i+0x1be>
 80187c4:	0801917c 	.word	0x0801917c
 80187c8:	08015a99 	.word	0x08015a99
 80187cc:	08018b25 	.word	0x08018b25
 80187d0:	080193d5 	.word	0x080193d5

080187d4 <lflush>:
 80187d4:	8983      	ldrh	r3, [r0, #12]
 80187d6:	f003 0309 	and.w	r3, r3, #9
 80187da:	2b09      	cmp	r3, #9
 80187dc:	d101      	bne.n	80187e2 <lflush+0xe>
 80187de:	f7fe b923 	b.w	8016a28 <fflush>
 80187e2:	2000      	movs	r0, #0
 80187e4:	4770      	bx	lr
	...

080187e8 <__srefill_r>:
 80187e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ea:	460c      	mov	r4, r1
 80187ec:	4605      	mov	r5, r0
 80187ee:	b118      	cbz	r0, 80187f8 <__srefill_r+0x10>
 80187f0:	6983      	ldr	r3, [r0, #24]
 80187f2:	b90b      	cbnz	r3, 80187f8 <__srefill_r+0x10>
 80187f4:	f7fe f96a 	bl	8016acc <__sinit>
 80187f8:	4b3c      	ldr	r3, [pc, #240]	; (80188ec <__srefill_r+0x104>)
 80187fa:	429c      	cmp	r4, r3
 80187fc:	d10a      	bne.n	8018814 <__srefill_r+0x2c>
 80187fe:	686c      	ldr	r4, [r5, #4]
 8018800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018804:	2300      	movs	r3, #0
 8018806:	6063      	str	r3, [r4, #4]
 8018808:	b293      	uxth	r3, r2
 801880a:	069e      	lsls	r6, r3, #26
 801880c:	d50c      	bpl.n	8018828 <__srefill_r+0x40>
 801880e:	f04f 30ff 	mov.w	r0, #4294967295
 8018812:	e067      	b.n	80188e4 <__srefill_r+0xfc>
 8018814:	4b36      	ldr	r3, [pc, #216]	; (80188f0 <__srefill_r+0x108>)
 8018816:	429c      	cmp	r4, r3
 8018818:	d101      	bne.n	801881e <__srefill_r+0x36>
 801881a:	68ac      	ldr	r4, [r5, #8]
 801881c:	e7f0      	b.n	8018800 <__srefill_r+0x18>
 801881e:	4b35      	ldr	r3, [pc, #212]	; (80188f4 <__srefill_r+0x10c>)
 8018820:	429c      	cmp	r4, r3
 8018822:	bf08      	it	eq
 8018824:	68ec      	ldreq	r4, [r5, #12]
 8018826:	e7eb      	b.n	8018800 <__srefill_r+0x18>
 8018828:	0758      	lsls	r0, r3, #29
 801882a:	d449      	bmi.n	80188c0 <__srefill_r+0xd8>
 801882c:	06d9      	lsls	r1, r3, #27
 801882e:	d405      	bmi.n	801883c <__srefill_r+0x54>
 8018830:	2309      	movs	r3, #9
 8018832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018836:	602b      	str	r3, [r5, #0]
 8018838:	81a2      	strh	r2, [r4, #12]
 801883a:	e7e8      	b.n	801880e <__srefill_r+0x26>
 801883c:	071a      	lsls	r2, r3, #28
 801883e:	d50b      	bpl.n	8018858 <__srefill_r+0x70>
 8018840:	4621      	mov	r1, r4
 8018842:	4628      	mov	r0, r5
 8018844:	f7fe f8c6 	bl	80169d4 <_fflush_r>
 8018848:	2800      	cmp	r0, #0
 801884a:	d1e0      	bne.n	801880e <__srefill_r+0x26>
 801884c:	89a3      	ldrh	r3, [r4, #12]
 801884e:	60a0      	str	r0, [r4, #8]
 8018850:	f023 0308 	bic.w	r3, r3, #8
 8018854:	81a3      	strh	r3, [r4, #12]
 8018856:	61a0      	str	r0, [r4, #24]
 8018858:	89a3      	ldrh	r3, [r4, #12]
 801885a:	f043 0304 	orr.w	r3, r3, #4
 801885e:	81a3      	strh	r3, [r4, #12]
 8018860:	6923      	ldr	r3, [r4, #16]
 8018862:	b91b      	cbnz	r3, 801886c <__srefill_r+0x84>
 8018864:	4621      	mov	r1, r4
 8018866:	4628      	mov	r0, r5
 8018868:	f7fe fd42 	bl	80172f0 <__smakebuf_r>
 801886c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8018870:	b2be      	uxth	r6, r7
 8018872:	07b3      	lsls	r3, r6, #30
 8018874:	d00f      	beq.n	8018896 <__srefill_r+0xae>
 8018876:	2301      	movs	r3, #1
 8018878:	81a3      	strh	r3, [r4, #12]
 801887a:	4b1f      	ldr	r3, [pc, #124]	; (80188f8 <__srefill_r+0x110>)
 801887c:	491f      	ldr	r1, [pc, #124]	; (80188fc <__srefill_r+0x114>)
 801887e:	6818      	ldr	r0, [r3, #0]
 8018880:	f006 0609 	and.w	r6, r6, #9
 8018884:	f7fe f98e 	bl	8016ba4 <_fwalk>
 8018888:	2e09      	cmp	r6, #9
 801888a:	81a7      	strh	r7, [r4, #12]
 801888c:	d103      	bne.n	8018896 <__srefill_r+0xae>
 801888e:	4621      	mov	r1, r4
 8018890:	4628      	mov	r0, r5
 8018892:	f7fe f819 	bl	80168c8 <__sflush_r>
 8018896:	6922      	ldr	r2, [r4, #16]
 8018898:	6022      	str	r2, [r4, #0]
 801889a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801889c:	6963      	ldr	r3, [r4, #20]
 801889e:	6a21      	ldr	r1, [r4, #32]
 80188a0:	4628      	mov	r0, r5
 80188a2:	47b0      	blx	r6
 80188a4:	2800      	cmp	r0, #0
 80188a6:	6060      	str	r0, [r4, #4]
 80188a8:	dc1d      	bgt.n	80188e6 <__srefill_r+0xfe>
 80188aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188ae:	bf17      	itett	ne
 80188b0:	2200      	movne	r2, #0
 80188b2:	f043 0320 	orreq.w	r3, r3, #32
 80188b6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80188ba:	6062      	strne	r2, [r4, #4]
 80188bc:	81a3      	strh	r3, [r4, #12]
 80188be:	e7a6      	b.n	801880e <__srefill_r+0x26>
 80188c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80188c2:	2900      	cmp	r1, #0
 80188c4:	d0cc      	beq.n	8018860 <__srefill_r+0x78>
 80188c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80188ca:	4299      	cmp	r1, r3
 80188cc:	d002      	beq.n	80188d4 <__srefill_r+0xec>
 80188ce:	4628      	mov	r0, r5
 80188d0:	f7ff f976 	bl	8017bc0 <_free_r>
 80188d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80188d6:	6063      	str	r3, [r4, #4]
 80188d8:	2000      	movs	r0, #0
 80188da:	6360      	str	r0, [r4, #52]	; 0x34
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d0bf      	beq.n	8018860 <__srefill_r+0x78>
 80188e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80188e2:	6023      	str	r3, [r4, #0]
 80188e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188e6:	2000      	movs	r0, #0
 80188e8:	e7fc      	b.n	80188e4 <__srefill_r+0xfc>
 80188ea:	bf00      	nop
 80188ec:	08019268 	.word	0x08019268
 80188f0:	08019288 	.word	0x08019288
 80188f4:	08019248 	.word	0x08019248
 80188f8:	080191ac 	.word	0x080191ac
 80188fc:	080187d5 	.word	0x080187d5

08018900 <_sbrk_r>:
 8018900:	b538      	push	{r3, r4, r5, lr}
 8018902:	4c06      	ldr	r4, [pc, #24]	; (801891c <_sbrk_r+0x1c>)
 8018904:	2300      	movs	r3, #0
 8018906:	4605      	mov	r5, r0
 8018908:	4608      	mov	r0, r1
 801890a:	6023      	str	r3, [r4, #0]
 801890c:	f7f5 fb32 	bl	800df74 <_sbrk>
 8018910:	1c43      	adds	r3, r0, #1
 8018912:	d102      	bne.n	801891a <_sbrk_r+0x1a>
 8018914:	6823      	ldr	r3, [r4, #0]
 8018916:	b103      	cbz	r3, 801891a <_sbrk_r+0x1a>
 8018918:	602b      	str	r3, [r5, #0]
 801891a:	bd38      	pop	{r3, r4, r5, pc}
 801891c:	20000a5c 	.word	0x20000a5c

08018920 <__sccl>:
 8018920:	b570      	push	{r4, r5, r6, lr}
 8018922:	780b      	ldrb	r3, [r1, #0]
 8018924:	2b5e      	cmp	r3, #94	; 0x5e
 8018926:	bf13      	iteet	ne
 8018928:	1c4a      	addne	r2, r1, #1
 801892a:	1c8a      	addeq	r2, r1, #2
 801892c:	784b      	ldrbeq	r3, [r1, #1]
 801892e:	2100      	movne	r1, #0
 8018930:	bf08      	it	eq
 8018932:	2101      	moveq	r1, #1
 8018934:	1e44      	subs	r4, r0, #1
 8018936:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801893a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801893e:	42ac      	cmp	r4, r5
 8018940:	d1fb      	bne.n	801893a <__sccl+0x1a>
 8018942:	b913      	cbnz	r3, 801894a <__sccl+0x2a>
 8018944:	3a01      	subs	r2, #1
 8018946:	4610      	mov	r0, r2
 8018948:	bd70      	pop	{r4, r5, r6, pc}
 801894a:	f081 0401 	eor.w	r4, r1, #1
 801894e:	54c4      	strb	r4, [r0, r3]
 8018950:	1c51      	adds	r1, r2, #1
 8018952:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018956:	2d2d      	cmp	r5, #45	; 0x2d
 8018958:	f101 36ff 	add.w	r6, r1, #4294967295
 801895c:	460a      	mov	r2, r1
 801895e:	d006      	beq.n	801896e <__sccl+0x4e>
 8018960:	2d5d      	cmp	r5, #93	; 0x5d
 8018962:	d0f0      	beq.n	8018946 <__sccl+0x26>
 8018964:	b90d      	cbnz	r5, 801896a <__sccl+0x4a>
 8018966:	4632      	mov	r2, r6
 8018968:	e7ed      	b.n	8018946 <__sccl+0x26>
 801896a:	462b      	mov	r3, r5
 801896c:	e7ef      	b.n	801894e <__sccl+0x2e>
 801896e:	780e      	ldrb	r6, [r1, #0]
 8018970:	2e5d      	cmp	r6, #93	; 0x5d
 8018972:	d0fa      	beq.n	801896a <__sccl+0x4a>
 8018974:	42b3      	cmp	r3, r6
 8018976:	dcf8      	bgt.n	801896a <__sccl+0x4a>
 8018978:	3301      	adds	r3, #1
 801897a:	429e      	cmp	r6, r3
 801897c:	54c4      	strb	r4, [r0, r3]
 801897e:	dcfb      	bgt.n	8018978 <__sccl+0x58>
 8018980:	3102      	adds	r1, #2
 8018982:	e7e6      	b.n	8018952 <__sccl+0x32>

08018984 <__sread>:
 8018984:	b510      	push	{r4, lr}
 8018986:	460c      	mov	r4, r1
 8018988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801898c:	f000 fa2e 	bl	8018dec <_read_r>
 8018990:	2800      	cmp	r0, #0
 8018992:	bfab      	itete	ge
 8018994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018996:	89a3      	ldrhlt	r3, [r4, #12]
 8018998:	181b      	addge	r3, r3, r0
 801899a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801899e:	bfac      	ite	ge
 80189a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80189a2:	81a3      	strhlt	r3, [r4, #12]
 80189a4:	bd10      	pop	{r4, pc}

080189a6 <__swrite>:
 80189a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189aa:	461f      	mov	r7, r3
 80189ac:	898b      	ldrh	r3, [r1, #12]
 80189ae:	05db      	lsls	r3, r3, #23
 80189b0:	4605      	mov	r5, r0
 80189b2:	460c      	mov	r4, r1
 80189b4:	4616      	mov	r6, r2
 80189b6:	d505      	bpl.n	80189c4 <__swrite+0x1e>
 80189b8:	2302      	movs	r3, #2
 80189ba:	2200      	movs	r2, #0
 80189bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189c0:	f000 f9c0 	bl	8018d44 <_lseek_r>
 80189c4:	89a3      	ldrh	r3, [r4, #12]
 80189c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80189ce:	81a3      	strh	r3, [r4, #12]
 80189d0:	4632      	mov	r2, r6
 80189d2:	463b      	mov	r3, r7
 80189d4:	4628      	mov	r0, r5
 80189d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189da:	f000 b96f 	b.w	8018cbc <_write_r>

080189de <__sseek>:
 80189de:	b510      	push	{r4, lr}
 80189e0:	460c      	mov	r4, r1
 80189e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189e6:	f000 f9ad 	bl	8018d44 <_lseek_r>
 80189ea:	1c43      	adds	r3, r0, #1
 80189ec:	89a3      	ldrh	r3, [r4, #12]
 80189ee:	bf15      	itete	ne
 80189f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80189f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80189f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80189fa:	81a3      	strheq	r3, [r4, #12]
 80189fc:	bf18      	it	ne
 80189fe:	81a3      	strhne	r3, [r4, #12]
 8018a00:	bd10      	pop	{r4, pc}

08018a02 <__sclose>:
 8018a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a06:	f000 b96b 	b.w	8018ce0 <_close_r>

08018a0a <strncmp>:
 8018a0a:	b510      	push	{r4, lr}
 8018a0c:	b16a      	cbz	r2, 8018a2a <strncmp+0x20>
 8018a0e:	3901      	subs	r1, #1
 8018a10:	1884      	adds	r4, r0, r2
 8018a12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018a1a:	4293      	cmp	r3, r2
 8018a1c:	d103      	bne.n	8018a26 <strncmp+0x1c>
 8018a1e:	42a0      	cmp	r0, r4
 8018a20:	d001      	beq.n	8018a26 <strncmp+0x1c>
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d1f5      	bne.n	8018a12 <strncmp+0x8>
 8018a26:	1a98      	subs	r0, r3, r2
 8018a28:	bd10      	pop	{r4, pc}
 8018a2a:	4610      	mov	r0, r2
 8018a2c:	e7fc      	b.n	8018a28 <strncmp+0x1e>

08018a2e <_strtoul_l.isra.0>:
 8018a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a32:	4680      	mov	r8, r0
 8018a34:	4689      	mov	r9, r1
 8018a36:	4692      	mov	sl, r2
 8018a38:	461e      	mov	r6, r3
 8018a3a:	460f      	mov	r7, r1
 8018a3c:	463d      	mov	r5, r7
 8018a3e:	9808      	ldr	r0, [sp, #32]
 8018a40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a44:	f7fe fc0e 	bl	8017264 <__locale_ctype_ptr_l>
 8018a48:	4420      	add	r0, r4
 8018a4a:	7843      	ldrb	r3, [r0, #1]
 8018a4c:	f013 0308 	ands.w	r3, r3, #8
 8018a50:	d130      	bne.n	8018ab4 <_strtoul_l.isra.0+0x86>
 8018a52:	2c2d      	cmp	r4, #45	; 0x2d
 8018a54:	d130      	bne.n	8018ab8 <_strtoul_l.isra.0+0x8a>
 8018a56:	787c      	ldrb	r4, [r7, #1]
 8018a58:	1cbd      	adds	r5, r7, #2
 8018a5a:	2101      	movs	r1, #1
 8018a5c:	2e00      	cmp	r6, #0
 8018a5e:	d05c      	beq.n	8018b1a <_strtoul_l.isra.0+0xec>
 8018a60:	2e10      	cmp	r6, #16
 8018a62:	d109      	bne.n	8018a78 <_strtoul_l.isra.0+0x4a>
 8018a64:	2c30      	cmp	r4, #48	; 0x30
 8018a66:	d107      	bne.n	8018a78 <_strtoul_l.isra.0+0x4a>
 8018a68:	782b      	ldrb	r3, [r5, #0]
 8018a6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018a6e:	2b58      	cmp	r3, #88	; 0x58
 8018a70:	d14e      	bne.n	8018b10 <_strtoul_l.isra.0+0xe2>
 8018a72:	786c      	ldrb	r4, [r5, #1]
 8018a74:	2610      	movs	r6, #16
 8018a76:	3502      	adds	r5, #2
 8018a78:	f04f 32ff 	mov.w	r2, #4294967295
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	fbb2 f2f6 	udiv	r2, r2, r6
 8018a82:	fb06 fc02 	mul.w	ip, r6, r2
 8018a86:	ea6f 0c0c 	mvn.w	ip, ip
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018a90:	2f09      	cmp	r7, #9
 8018a92:	d817      	bhi.n	8018ac4 <_strtoul_l.isra.0+0x96>
 8018a94:	463c      	mov	r4, r7
 8018a96:	42a6      	cmp	r6, r4
 8018a98:	dd23      	ble.n	8018ae2 <_strtoul_l.isra.0+0xb4>
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	db1e      	blt.n	8018adc <_strtoul_l.isra.0+0xae>
 8018a9e:	4282      	cmp	r2, r0
 8018aa0:	d31c      	bcc.n	8018adc <_strtoul_l.isra.0+0xae>
 8018aa2:	d101      	bne.n	8018aa8 <_strtoul_l.isra.0+0x7a>
 8018aa4:	45a4      	cmp	ip, r4
 8018aa6:	db19      	blt.n	8018adc <_strtoul_l.isra.0+0xae>
 8018aa8:	fb00 4006 	mla	r0, r0, r6, r4
 8018aac:	2301      	movs	r3, #1
 8018aae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ab2:	e7eb      	b.n	8018a8c <_strtoul_l.isra.0+0x5e>
 8018ab4:	462f      	mov	r7, r5
 8018ab6:	e7c1      	b.n	8018a3c <_strtoul_l.isra.0+0xe>
 8018ab8:	2c2b      	cmp	r4, #43	; 0x2b
 8018aba:	bf04      	itt	eq
 8018abc:	1cbd      	addeq	r5, r7, #2
 8018abe:	787c      	ldrbeq	r4, [r7, #1]
 8018ac0:	4619      	mov	r1, r3
 8018ac2:	e7cb      	b.n	8018a5c <_strtoul_l.isra.0+0x2e>
 8018ac4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018ac8:	2f19      	cmp	r7, #25
 8018aca:	d801      	bhi.n	8018ad0 <_strtoul_l.isra.0+0xa2>
 8018acc:	3c37      	subs	r4, #55	; 0x37
 8018ace:	e7e2      	b.n	8018a96 <_strtoul_l.isra.0+0x68>
 8018ad0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018ad4:	2f19      	cmp	r7, #25
 8018ad6:	d804      	bhi.n	8018ae2 <_strtoul_l.isra.0+0xb4>
 8018ad8:	3c57      	subs	r4, #87	; 0x57
 8018ada:	e7dc      	b.n	8018a96 <_strtoul_l.isra.0+0x68>
 8018adc:	f04f 33ff 	mov.w	r3, #4294967295
 8018ae0:	e7e5      	b.n	8018aae <_strtoul_l.isra.0+0x80>
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	da09      	bge.n	8018afa <_strtoul_l.isra.0+0xcc>
 8018ae6:	2322      	movs	r3, #34	; 0x22
 8018ae8:	f8c8 3000 	str.w	r3, [r8]
 8018aec:	f04f 30ff 	mov.w	r0, #4294967295
 8018af0:	f1ba 0f00 	cmp.w	sl, #0
 8018af4:	d107      	bne.n	8018b06 <_strtoul_l.isra.0+0xd8>
 8018af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018afa:	b101      	cbz	r1, 8018afe <_strtoul_l.isra.0+0xd0>
 8018afc:	4240      	negs	r0, r0
 8018afe:	f1ba 0f00 	cmp.w	sl, #0
 8018b02:	d0f8      	beq.n	8018af6 <_strtoul_l.isra.0+0xc8>
 8018b04:	b10b      	cbz	r3, 8018b0a <_strtoul_l.isra.0+0xdc>
 8018b06:	f105 39ff 	add.w	r9, r5, #4294967295
 8018b0a:	f8ca 9000 	str.w	r9, [sl]
 8018b0e:	e7f2      	b.n	8018af6 <_strtoul_l.isra.0+0xc8>
 8018b10:	2430      	movs	r4, #48	; 0x30
 8018b12:	2e00      	cmp	r6, #0
 8018b14:	d1b0      	bne.n	8018a78 <_strtoul_l.isra.0+0x4a>
 8018b16:	2608      	movs	r6, #8
 8018b18:	e7ae      	b.n	8018a78 <_strtoul_l.isra.0+0x4a>
 8018b1a:	2c30      	cmp	r4, #48	; 0x30
 8018b1c:	d0a4      	beq.n	8018a68 <_strtoul_l.isra.0+0x3a>
 8018b1e:	260a      	movs	r6, #10
 8018b20:	e7aa      	b.n	8018a78 <_strtoul_l.isra.0+0x4a>
	...

08018b24 <_strtoul_r>:
 8018b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b26:	4c06      	ldr	r4, [pc, #24]	; (8018b40 <_strtoul_r+0x1c>)
 8018b28:	4d06      	ldr	r5, [pc, #24]	; (8018b44 <_strtoul_r+0x20>)
 8018b2a:	6824      	ldr	r4, [r4, #0]
 8018b2c:	6a24      	ldr	r4, [r4, #32]
 8018b2e:	2c00      	cmp	r4, #0
 8018b30:	bf08      	it	eq
 8018b32:	462c      	moveq	r4, r5
 8018b34:	9400      	str	r4, [sp, #0]
 8018b36:	f7ff ff7a 	bl	8018a2e <_strtoul_l.isra.0>
 8018b3a:	b003      	add	sp, #12
 8018b3c:	bd30      	pop	{r4, r5, pc}
 8018b3e:	bf00      	nop
 8018b40:	20000024 	.word	0x20000024
 8018b44:	20000088 	.word	0x20000088

08018b48 <__submore>:
 8018b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b4c:	460c      	mov	r4, r1
 8018b4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b54:	4299      	cmp	r1, r3
 8018b56:	d11d      	bne.n	8018b94 <__submore+0x4c>
 8018b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018b5c:	f7ff f87e 	bl	8017c5c <_malloc_r>
 8018b60:	b918      	cbnz	r0, 8018b6a <__submore+0x22>
 8018b62:	f04f 30ff 	mov.w	r0, #4294967295
 8018b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b6e:	63a3      	str	r3, [r4, #56]	; 0x38
 8018b70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018b74:	6360      	str	r0, [r4, #52]	; 0x34
 8018b76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018b7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018b7e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018b82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018b86:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018b8a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018b8e:	6020      	str	r0, [r4, #0]
 8018b90:	2000      	movs	r0, #0
 8018b92:	e7e8      	b.n	8018b66 <__submore+0x1e>
 8018b94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018b96:	0077      	lsls	r7, r6, #1
 8018b98:	463a      	mov	r2, r7
 8018b9a:	f000 f900 	bl	8018d9e <_realloc_r>
 8018b9e:	4605      	mov	r5, r0
 8018ba0:	2800      	cmp	r0, #0
 8018ba2:	d0de      	beq.n	8018b62 <__submore+0x1a>
 8018ba4:	eb00 0806 	add.w	r8, r0, r6
 8018ba8:	4601      	mov	r1, r0
 8018baa:	4632      	mov	r2, r6
 8018bac:	4640      	mov	r0, r8
 8018bae:	f7fb f913 	bl	8013dd8 <memcpy>
 8018bb2:	f8c4 8000 	str.w	r8, [r4]
 8018bb6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018bba:	e7e9      	b.n	8018b90 <__submore+0x48>

08018bbc <_ungetc_r>:
 8018bbc:	1c4b      	adds	r3, r1, #1
 8018bbe:	b570      	push	{r4, r5, r6, lr}
 8018bc0:	4606      	mov	r6, r0
 8018bc2:	460d      	mov	r5, r1
 8018bc4:	4614      	mov	r4, r2
 8018bc6:	d103      	bne.n	8018bd0 <_ungetc_r+0x14>
 8018bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8018bcc:	4628      	mov	r0, r5
 8018bce:	bd70      	pop	{r4, r5, r6, pc}
 8018bd0:	b118      	cbz	r0, 8018bda <_ungetc_r+0x1e>
 8018bd2:	6983      	ldr	r3, [r0, #24]
 8018bd4:	b90b      	cbnz	r3, 8018bda <_ungetc_r+0x1e>
 8018bd6:	f7fd ff79 	bl	8016acc <__sinit>
 8018bda:	4b2e      	ldr	r3, [pc, #184]	; (8018c94 <_ungetc_r+0xd8>)
 8018bdc:	429c      	cmp	r4, r3
 8018bde:	d12c      	bne.n	8018c3a <_ungetc_r+0x7e>
 8018be0:	6874      	ldr	r4, [r6, #4]
 8018be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018be6:	f023 0320 	bic.w	r3, r3, #32
 8018bea:	81a3      	strh	r3, [r4, #12]
 8018bec:	b29b      	uxth	r3, r3
 8018bee:	0759      	lsls	r1, r3, #29
 8018bf0:	d413      	bmi.n	8018c1a <_ungetc_r+0x5e>
 8018bf2:	06da      	lsls	r2, r3, #27
 8018bf4:	d5e8      	bpl.n	8018bc8 <_ungetc_r+0xc>
 8018bf6:	071b      	lsls	r3, r3, #28
 8018bf8:	d50b      	bpl.n	8018c12 <_ungetc_r+0x56>
 8018bfa:	4621      	mov	r1, r4
 8018bfc:	4630      	mov	r0, r6
 8018bfe:	f7fd fee9 	bl	80169d4 <_fflush_r>
 8018c02:	2800      	cmp	r0, #0
 8018c04:	d1e0      	bne.n	8018bc8 <_ungetc_r+0xc>
 8018c06:	89a3      	ldrh	r3, [r4, #12]
 8018c08:	60a0      	str	r0, [r4, #8]
 8018c0a:	f023 0308 	bic.w	r3, r3, #8
 8018c0e:	81a3      	strh	r3, [r4, #12]
 8018c10:	61a0      	str	r0, [r4, #24]
 8018c12:	89a3      	ldrh	r3, [r4, #12]
 8018c14:	f043 0304 	orr.w	r3, r3, #4
 8018c18:	81a3      	strh	r3, [r4, #12]
 8018c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c1c:	6862      	ldr	r2, [r4, #4]
 8018c1e:	b2ed      	uxtb	r5, r5
 8018c20:	b1e3      	cbz	r3, 8018c5c <_ungetc_r+0xa0>
 8018c22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018c24:	4293      	cmp	r3, r2
 8018c26:	dd12      	ble.n	8018c4e <_ungetc_r+0x92>
 8018c28:	6823      	ldr	r3, [r4, #0]
 8018c2a:	1e5a      	subs	r2, r3, #1
 8018c2c:	6022      	str	r2, [r4, #0]
 8018c2e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018c32:	6863      	ldr	r3, [r4, #4]
 8018c34:	3301      	adds	r3, #1
 8018c36:	6063      	str	r3, [r4, #4]
 8018c38:	e7c8      	b.n	8018bcc <_ungetc_r+0x10>
 8018c3a:	4b17      	ldr	r3, [pc, #92]	; (8018c98 <_ungetc_r+0xdc>)
 8018c3c:	429c      	cmp	r4, r3
 8018c3e:	d101      	bne.n	8018c44 <_ungetc_r+0x88>
 8018c40:	68b4      	ldr	r4, [r6, #8]
 8018c42:	e7ce      	b.n	8018be2 <_ungetc_r+0x26>
 8018c44:	4b15      	ldr	r3, [pc, #84]	; (8018c9c <_ungetc_r+0xe0>)
 8018c46:	429c      	cmp	r4, r3
 8018c48:	bf08      	it	eq
 8018c4a:	68f4      	ldreq	r4, [r6, #12]
 8018c4c:	e7c9      	b.n	8018be2 <_ungetc_r+0x26>
 8018c4e:	4621      	mov	r1, r4
 8018c50:	4630      	mov	r0, r6
 8018c52:	f7ff ff79 	bl	8018b48 <__submore>
 8018c56:	2800      	cmp	r0, #0
 8018c58:	d0e6      	beq.n	8018c28 <_ungetc_r+0x6c>
 8018c5a:	e7b5      	b.n	8018bc8 <_ungetc_r+0xc>
 8018c5c:	6921      	ldr	r1, [r4, #16]
 8018c5e:	6823      	ldr	r3, [r4, #0]
 8018c60:	b151      	cbz	r1, 8018c78 <_ungetc_r+0xbc>
 8018c62:	4299      	cmp	r1, r3
 8018c64:	d208      	bcs.n	8018c78 <_ungetc_r+0xbc>
 8018c66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018c6a:	42a9      	cmp	r1, r5
 8018c6c:	d104      	bne.n	8018c78 <_ungetc_r+0xbc>
 8018c6e:	3b01      	subs	r3, #1
 8018c70:	3201      	adds	r2, #1
 8018c72:	6023      	str	r3, [r4, #0]
 8018c74:	6062      	str	r2, [r4, #4]
 8018c76:	e7a9      	b.n	8018bcc <_ungetc_r+0x10>
 8018c78:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c80:	6363      	str	r3, [r4, #52]	; 0x34
 8018c82:	2303      	movs	r3, #3
 8018c84:	63a3      	str	r3, [r4, #56]	; 0x38
 8018c86:	4623      	mov	r3, r4
 8018c88:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018c8c:	6023      	str	r3, [r4, #0]
 8018c8e:	2301      	movs	r3, #1
 8018c90:	e7d1      	b.n	8018c36 <_ungetc_r+0x7a>
 8018c92:	bf00      	nop
 8018c94:	08019268 	.word	0x08019268
 8018c98:	08019288 	.word	0x08019288
 8018c9c:	08019248 	.word	0x08019248

08018ca0 <__ascii_wctomb>:
 8018ca0:	b149      	cbz	r1, 8018cb6 <__ascii_wctomb+0x16>
 8018ca2:	2aff      	cmp	r2, #255	; 0xff
 8018ca4:	bf85      	ittet	hi
 8018ca6:	238a      	movhi	r3, #138	; 0x8a
 8018ca8:	6003      	strhi	r3, [r0, #0]
 8018caa:	700a      	strbls	r2, [r1, #0]
 8018cac:	f04f 30ff 	movhi.w	r0, #4294967295
 8018cb0:	bf98      	it	ls
 8018cb2:	2001      	movls	r0, #1
 8018cb4:	4770      	bx	lr
 8018cb6:	4608      	mov	r0, r1
 8018cb8:	4770      	bx	lr
	...

08018cbc <_write_r>:
 8018cbc:	b538      	push	{r3, r4, r5, lr}
 8018cbe:	4c07      	ldr	r4, [pc, #28]	; (8018cdc <_write_r+0x20>)
 8018cc0:	4605      	mov	r5, r0
 8018cc2:	4608      	mov	r0, r1
 8018cc4:	4611      	mov	r1, r2
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	6022      	str	r2, [r4, #0]
 8018cca:	461a      	mov	r2, r3
 8018ccc:	f7f5 f901 	bl	800ded2 <_write>
 8018cd0:	1c43      	adds	r3, r0, #1
 8018cd2:	d102      	bne.n	8018cda <_write_r+0x1e>
 8018cd4:	6823      	ldr	r3, [r4, #0]
 8018cd6:	b103      	cbz	r3, 8018cda <_write_r+0x1e>
 8018cd8:	602b      	str	r3, [r5, #0]
 8018cda:	bd38      	pop	{r3, r4, r5, pc}
 8018cdc:	20000a5c 	.word	0x20000a5c

08018ce0 <_close_r>:
 8018ce0:	b538      	push	{r3, r4, r5, lr}
 8018ce2:	4c06      	ldr	r4, [pc, #24]	; (8018cfc <_close_r+0x1c>)
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	4605      	mov	r5, r0
 8018ce8:	4608      	mov	r0, r1
 8018cea:	6023      	str	r3, [r4, #0]
 8018cec:	f7f5 f90d 	bl	800df0a <_close>
 8018cf0:	1c43      	adds	r3, r0, #1
 8018cf2:	d102      	bne.n	8018cfa <_close_r+0x1a>
 8018cf4:	6823      	ldr	r3, [r4, #0]
 8018cf6:	b103      	cbz	r3, 8018cfa <_close_r+0x1a>
 8018cf8:	602b      	str	r3, [r5, #0]
 8018cfa:	bd38      	pop	{r3, r4, r5, pc}
 8018cfc:	20000a5c 	.word	0x20000a5c

08018d00 <_fstat_r>:
 8018d00:	b538      	push	{r3, r4, r5, lr}
 8018d02:	4c07      	ldr	r4, [pc, #28]	; (8018d20 <_fstat_r+0x20>)
 8018d04:	2300      	movs	r3, #0
 8018d06:	4605      	mov	r5, r0
 8018d08:	4608      	mov	r0, r1
 8018d0a:	4611      	mov	r1, r2
 8018d0c:	6023      	str	r3, [r4, #0]
 8018d0e:	f7f5 f908 	bl	800df22 <_fstat>
 8018d12:	1c43      	adds	r3, r0, #1
 8018d14:	d102      	bne.n	8018d1c <_fstat_r+0x1c>
 8018d16:	6823      	ldr	r3, [r4, #0]
 8018d18:	b103      	cbz	r3, 8018d1c <_fstat_r+0x1c>
 8018d1a:	602b      	str	r3, [r5, #0]
 8018d1c:	bd38      	pop	{r3, r4, r5, pc}
 8018d1e:	bf00      	nop
 8018d20:	20000a5c 	.word	0x20000a5c

08018d24 <_isatty_r>:
 8018d24:	b538      	push	{r3, r4, r5, lr}
 8018d26:	4c06      	ldr	r4, [pc, #24]	; (8018d40 <_isatty_r+0x1c>)
 8018d28:	2300      	movs	r3, #0
 8018d2a:	4605      	mov	r5, r0
 8018d2c:	4608      	mov	r0, r1
 8018d2e:	6023      	str	r3, [r4, #0]
 8018d30:	f7f5 f907 	bl	800df42 <_isatty>
 8018d34:	1c43      	adds	r3, r0, #1
 8018d36:	d102      	bne.n	8018d3e <_isatty_r+0x1a>
 8018d38:	6823      	ldr	r3, [r4, #0]
 8018d3a:	b103      	cbz	r3, 8018d3e <_isatty_r+0x1a>
 8018d3c:	602b      	str	r3, [r5, #0]
 8018d3e:	bd38      	pop	{r3, r4, r5, pc}
 8018d40:	20000a5c 	.word	0x20000a5c

08018d44 <_lseek_r>:
 8018d44:	b538      	push	{r3, r4, r5, lr}
 8018d46:	4c07      	ldr	r4, [pc, #28]	; (8018d64 <_lseek_r+0x20>)
 8018d48:	4605      	mov	r5, r0
 8018d4a:	4608      	mov	r0, r1
 8018d4c:	4611      	mov	r1, r2
 8018d4e:	2200      	movs	r2, #0
 8018d50:	6022      	str	r2, [r4, #0]
 8018d52:	461a      	mov	r2, r3
 8018d54:	f7f5 f900 	bl	800df58 <_lseek>
 8018d58:	1c43      	adds	r3, r0, #1
 8018d5a:	d102      	bne.n	8018d62 <_lseek_r+0x1e>
 8018d5c:	6823      	ldr	r3, [r4, #0]
 8018d5e:	b103      	cbz	r3, 8018d62 <_lseek_r+0x1e>
 8018d60:	602b      	str	r3, [r5, #0]
 8018d62:	bd38      	pop	{r3, r4, r5, pc}
 8018d64:	20000a5c 	.word	0x20000a5c

08018d68 <memmove>:
 8018d68:	4288      	cmp	r0, r1
 8018d6a:	b510      	push	{r4, lr}
 8018d6c:	eb01 0302 	add.w	r3, r1, r2
 8018d70:	d807      	bhi.n	8018d82 <memmove+0x1a>
 8018d72:	1e42      	subs	r2, r0, #1
 8018d74:	4299      	cmp	r1, r3
 8018d76:	d00a      	beq.n	8018d8e <memmove+0x26>
 8018d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018d80:	e7f8      	b.n	8018d74 <memmove+0xc>
 8018d82:	4283      	cmp	r3, r0
 8018d84:	d9f5      	bls.n	8018d72 <memmove+0xa>
 8018d86:	1881      	adds	r1, r0, r2
 8018d88:	1ad2      	subs	r2, r2, r3
 8018d8a:	42d3      	cmn	r3, r2
 8018d8c:	d100      	bne.n	8018d90 <memmove+0x28>
 8018d8e:	bd10      	pop	{r4, pc}
 8018d90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018d94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018d98:	e7f7      	b.n	8018d8a <memmove+0x22>

08018d9a <__malloc_lock>:
 8018d9a:	4770      	bx	lr

08018d9c <__malloc_unlock>:
 8018d9c:	4770      	bx	lr

08018d9e <_realloc_r>:
 8018d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018da0:	4607      	mov	r7, r0
 8018da2:	4614      	mov	r4, r2
 8018da4:	460e      	mov	r6, r1
 8018da6:	b921      	cbnz	r1, 8018db2 <_realloc_r+0x14>
 8018da8:	4611      	mov	r1, r2
 8018daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018dae:	f7fe bf55 	b.w	8017c5c <_malloc_r>
 8018db2:	b922      	cbnz	r2, 8018dbe <_realloc_r+0x20>
 8018db4:	f7fe ff04 	bl	8017bc0 <_free_r>
 8018db8:	4625      	mov	r5, r4
 8018dba:	4628      	mov	r0, r5
 8018dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dbe:	f000 f827 	bl	8018e10 <_malloc_usable_size_r>
 8018dc2:	42a0      	cmp	r0, r4
 8018dc4:	d20f      	bcs.n	8018de6 <_realloc_r+0x48>
 8018dc6:	4621      	mov	r1, r4
 8018dc8:	4638      	mov	r0, r7
 8018dca:	f7fe ff47 	bl	8017c5c <_malloc_r>
 8018dce:	4605      	mov	r5, r0
 8018dd0:	2800      	cmp	r0, #0
 8018dd2:	d0f2      	beq.n	8018dba <_realloc_r+0x1c>
 8018dd4:	4631      	mov	r1, r6
 8018dd6:	4622      	mov	r2, r4
 8018dd8:	f7fa fffe 	bl	8013dd8 <memcpy>
 8018ddc:	4631      	mov	r1, r6
 8018dde:	4638      	mov	r0, r7
 8018de0:	f7fe feee 	bl	8017bc0 <_free_r>
 8018de4:	e7e9      	b.n	8018dba <_realloc_r+0x1c>
 8018de6:	4635      	mov	r5, r6
 8018de8:	e7e7      	b.n	8018dba <_realloc_r+0x1c>
	...

08018dec <_read_r>:
 8018dec:	b538      	push	{r3, r4, r5, lr}
 8018dee:	4c07      	ldr	r4, [pc, #28]	; (8018e0c <_read_r+0x20>)
 8018df0:	4605      	mov	r5, r0
 8018df2:	4608      	mov	r0, r1
 8018df4:	4611      	mov	r1, r2
 8018df6:	2200      	movs	r2, #0
 8018df8:	6022      	str	r2, [r4, #0]
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	f7f5 f84c 	bl	800de98 <_read>
 8018e00:	1c43      	adds	r3, r0, #1
 8018e02:	d102      	bne.n	8018e0a <_read_r+0x1e>
 8018e04:	6823      	ldr	r3, [r4, #0]
 8018e06:	b103      	cbz	r3, 8018e0a <_read_r+0x1e>
 8018e08:	602b      	str	r3, [r5, #0]
 8018e0a:	bd38      	pop	{r3, r4, r5, pc}
 8018e0c:	20000a5c 	.word	0x20000a5c

08018e10 <_malloc_usable_size_r>:
 8018e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018e14:	1f18      	subs	r0, r3, #4
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	bfbc      	itt	lt
 8018e1a:	580b      	ldrlt	r3, [r1, r0]
 8018e1c:	18c0      	addlt	r0, r0, r3
 8018e1e:	4770      	bx	lr

08018e20 <_init>:
 8018e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e22:	bf00      	nop
 8018e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e26:	bc08      	pop	{r3}
 8018e28:	469e      	mov	lr, r3
 8018e2a:	4770      	bx	lr

08018e2c <_fini>:
 8018e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e2e:	bf00      	nop
 8018e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e32:	bc08      	pop	{r3}
 8018e34:	469e      	mov	lr, r3
 8018e36:	4770      	bx	lr
