
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000bff8  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000398  08013ff8  08013ff8  00023ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08014390  08014390  000301e0  2**0
                  CONTENTS
  6 .ARM          00000008  08014390  08014390  00024390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08014398  08014398  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08014398  08014398  00024398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801439c  0801439c  0002439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e0  20000000  080143a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000744  200001e0  08014580  000301e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000924  08014580  00030924  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dc75  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000043fc  00000000  00000000  0004de85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000015c0  00000000  00000000  00052288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013a0  00000000  00000000  00053848  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024033  00000000  00000000  00054be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014b4a  00000000  00000000  00078c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c8c3c  00000000  00000000  0008d765  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001563a1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006580  00000000  00000000  0015641c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e0 	.word	0x200001e0
 800801c:	00000000 	.word	0x00000000
 8008020:	08013fe0 	.word	0x08013fe0

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e4 	.word	0x200001e4
 800803c:	08013fe0 	.word	0x08013fe0

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <RotateAccel>:
	keep_counter[LEFT] = INITIAL_PULSE;
	keep_counter[RIGHT] = INITIAL_PULSE;
}

void RotateAccel(float deg, float rotate_ang_v)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008dc2:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
	additional_ang_v = rotate_ang_v;//rotate_ang_v - angular_v;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	617b      	str	r3, [r7, #20]
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)

		//周期、角速度、距離


	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008dd4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008f50 <RotateAccel+0x198>
 8008dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ddc:	ee16 0a90 	vmov	r0, s13
 8008de0:	f7ff faea 	bl	80083b8 <__aeabi_f2d>
 8008de4:	a354      	add	r3, pc, #336	; (adr r3, 8008f38 <RotateAccel+0x180>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7ff fb3d 	bl	8008468 <__aeabi_dmul>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4618      	mov	r0, r3
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff fde7 	bl	80089c8 <__aeabi_d2iz>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	613b      	str	r3, [r7, #16]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8008dfe:	4b55      	ldr	r3, [pc, #340]	; (8008f54 <RotateAccel+0x19c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 8008e02:	60bb      	str	r3, [r7, #8]
			total_pulse[RIGHT]
 8008e04:	4b53      	ldr	r3, [pc, #332]	; (8008f54 <RotateAccel+0x19c>)
 8008e06:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8008e08:	60fb      	str	r3, [r7, #12]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 8008e0a:	edd7 7a00 	vldr	s15, [r7]
 8008e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	dd3f      	ble.n	8008e98 <RotateAccel+0xe0>
	{
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8008e18:	e02f      	b.n	8008e7a <RotateAccel+0xc2>
		{
			angular_acceleration = 64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff facc 	bl	80083b8 <__aeabi_f2d>
 8008e20:	a347      	add	r3, pc, #284	; (adr r3, 8008f40 <RotateAccel+0x188>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7ff fb1f 	bl	8008468 <__aeabi_dmul>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	4625      	mov	r5, r4
 8008e30:	461c      	mov	r4, r3
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f7ff fac0 	bl	80083b8 <__aeabi_f2d>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7ff fb12 	bl	8008468 <__aeabi_dmul>
 8008e44:	4603      	mov	r3, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	4625      	mov	r5, r4
 8008e4a:	461c      	mov	r4, r3
 8008e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e54:	ee17 0a90 	vmov	r0, s15
 8008e58:	f7ff faae 	bl	80083b8 <__aeabi_f2d>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4620      	mov	r0, r4
 8008e62:	4629      	mov	r1, r5
 8008e64:	f7ff fc2a 	bl	80086bc <__aeabi_ddiv>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	4621      	mov	r1, r4
 8008e70:	f7ff fdd2 	bl	8008a18 <__aeabi_d2f>
 8008e74:	4602      	mov	r2, r0
 8008e76:	4b38      	ldr	r3, [pc, #224]	; (8008f58 <RotateAccel+0x1a0>)
 8008e78:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	441a      	add	r2, r3
 8008e80:	4b34      	ldr	r3, [pc, #208]	; (8008f54 <RotateAccel+0x19c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	dd4d      	ble.n	8008f24 <RotateAccel+0x16c>
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad2      	subs	r2, r2, r3
 8008e8e:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <RotateAccel+0x19c>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	dbc1      	blt.n	8008e1a <RotateAccel+0x62>
 8008e96:	e045      	b.n	8008f24 <RotateAccel+0x16c>
		}

	}
	else if( rotate_ang_v < 0)
 8008e98:	edd7 7a00 	vldr	s15, [r7]
 8008e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea4:	d53e      	bpl.n	8008f24 <RotateAccel+0x16c>
	{
		//printf("加速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8008ea6:	e02f      	b.n	8008f08 <RotateAccel+0x150>
		{
			angular_acceleration = -1*64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8008ea8:	6978      	ldr	r0, [r7, #20]
 8008eaa:	f7ff fa85 	bl	80083b8 <__aeabi_f2d>
 8008eae:	a326      	add	r3, pc, #152	; (adr r3, 8008f48 <RotateAccel+0x190>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f7ff fad8 	bl	8008468 <__aeabi_dmul>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4625      	mov	r5, r4
 8008ebe:	461c      	mov	r4, r3
 8008ec0:	6978      	ldr	r0, [r7, #20]
 8008ec2:	f7ff fa79 	bl	80083b8 <__aeabi_f2d>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7ff facb 	bl	8008468 <__aeabi_dmul>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4625      	mov	r5, r4
 8008ed8:	461c      	mov	r4, r3
 8008eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ede:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008ee2:	ee17 0a90 	vmov	r0, s15
 8008ee6:	f7ff fa67 	bl	80083b8 <__aeabi_f2d>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7ff fbe3 	bl	80086bc <__aeabi_ddiv>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	4618      	mov	r0, r3
 8008efc:	4621      	mov	r1, r4
 8008efe:	f7ff fd8b 	bl	8008a18 <__aeabi_d2f>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <RotateAccel+0x1a0>)
 8008f06:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad2      	subs	r2, r2, r3
 8008f0e:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <RotateAccel+0x19c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	da06      	bge.n	8008f24 <RotateAccel+0x16c>
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <RotateAccel+0x19c>)
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	dcc1      	bgt.n	8008ea8 <RotateAccel+0xf0>
		}

	}
	angular_acceleration = 0;
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <RotateAccel+0x1a0>)
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
	//target_angular_v = 0;
}
 8008f2c:	bf00      	nop
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bdb0      	pop	{r4, r5, r7, pc}
 8008f34:	f3af 8000 	nop.w
 8008f38:	9c95204e 	.word	0x9c95204e
 8008f3c:	40fc4597 	.word	0x40fc4597
 8008f40:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f44:	3fb0624d 	.word	0x3fb0624d
 8008f48:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f4c:	bfb0624d 	.word	0xbfb0624d
 8008f50:	43b40000 	.word	0x43b40000
 8008f54:	2000027c 	.word	0x2000027c
 8008f58:	200002a8 	.word	0x200002a8
 8008f5c:	00000000 	.word	0x00000000

08008f60 <RotateConst>:
void RotateConst(float deg, float rotate_ang_v)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f6a:	edc7 0a00 	vstr	s1, [r7]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	//int add_distance = (int)( (deg/360) * ROTATE_PULSE) * MM_PER_PULSE;

	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f72:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009030 <RotateConst+0xd0>
 8008f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f7a:	ee16 0a90 	vmov	r0, s13
 8008f7e:	f7ff fa1b 	bl	80083b8 <__aeabi_f2d>
 8008f82:	a329      	add	r3, pc, #164	; (adr r3, 8009028 <RotateConst+0xc8>)
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	f7ff fa6e 	bl	8008468 <__aeabi_dmul>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	4618      	mov	r0, r3
 8008f92:	4621      	mov	r1, r4
 8008f94:	f7ff fd18 	bl	80089c8 <__aeabi_d2iz>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	617b      	str	r3, [r7, #20]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8008f9c:	4b25      	ldr	r3, [pc, #148]	; (8009034 <RotateConst+0xd4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 8008fa0:	60fb      	str	r3, [r7, #12]
			total_pulse[RIGHT]
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <RotateConst+0xd4>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8008fa6:	613b      	str	r3, [r7, #16]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if (rotate_ang_v > 0)
 8008fa8:	edd7 7a00 	vldr	s15, [r7]
 8008fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb4:	dd13      	ble.n	8008fde <RotateConst+0x7e>
	{
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8008fb6:	e003      	b.n	8008fc0 <RotateConst+0x60>
		{
			//target_angular_v = rotate_ang_v;
			angular_acceleration = 0;
 8008fb8:	4b1f      	ldr	r3, [pc, #124]	; (8009038 <RotateConst+0xd8>)
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	4b1b      	ldr	r3, [pc, #108]	; (8009034 <RotateConst+0xd4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	dd21      	ble.n	8009012 <RotateConst+0xb2>
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	4b17      	ldr	r3, [pc, #92]	; (8009034 <RotateConst+0xd4>)
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	dbed      	blt.n	8008fb8 <RotateConst+0x58>
 8008fdc:	e019      	b.n	8009012 <RotateConst+0xb2>
		}

	}
	else if (rotate_ang_v < 0)
 8008fde:	edd7 7a00 	vldr	s15, [r7]
 8008fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	d512      	bpl.n	8009012 <RotateConst+0xb2>
	{
		//printf("定速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8008fec:	e003      	b.n	8008ff6 <RotateConst+0x96>
		{
			//target_angular_v = rotate_ang_v;
			angular_acceleration = 0;
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <RotateConst+0xd8>)
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <RotateConst+0xd4>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	da06      	bge.n	8009012 <RotateConst+0xb2>
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	441a      	add	r2, r3
 800900a:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <RotateConst+0xd4>)
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	429a      	cmp	r2, r3
 8009010:	dced      	bgt.n	8008fee <RotateConst+0x8e>
		}

	}
	angular_acceleration = 0;
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <RotateConst+0xd8>)
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
	//target_angular_v = 0;
}
 800901a:	bf00      	nop
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}
 8009022:	bf00      	nop
 8009024:	f3af 8000 	nop.w
 8009028:	9c95204e 	.word	0x9c95204e
 800902c:	40fc4597 	.word	0x40fc4597
 8009030:	43b40000 	.word	0x43b40000
 8009034:	2000027c 	.word	0x2000027c
 8009038:	200002a8 	.word	0x200002a8
 800903c:	00000000 	.word	0x00000000

08009040 <RotateDecel>:
void RotateDecel(float deg, float rotate_ang_v)
{
 8009040:	b5b0      	push	{r4, r5, r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	ed87 0a01 	vstr	s0, [r7, #4]
 800904a:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
	additional_ang_v = rotate_ang_v;// - angular_v;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	617b      	str	r3, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	//int add_distance = (int)( (deg/360) * ROTATE_PULSE) * MM_PER_PULSE;
		//周期、角速度、距離

	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009058:	edd7 7a01 	vldr	s15, [r7, #4]
 800905c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8009220 <RotateDecel+0x1e0>
 8009060:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009064:	ee16 0a90 	vmov	r0, s13
 8009068:	f7ff f9a6 	bl	80083b8 <__aeabi_f2d>
 800906c:	a368      	add	r3, pc, #416	; (adr r3, 8009210 <RotateDecel+0x1d0>)
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f7ff f9f9 	bl	8008468 <__aeabi_dmul>
 8009076:	4603      	mov	r3, r0
 8009078:	460c      	mov	r4, r1
 800907a:	4618      	mov	r0, r3
 800907c:	4621      	mov	r1, r4
 800907e:	f7ff fca3 	bl	80089c8 <__aeabi_d2iz>
 8009082:	4603      	mov	r3, r0
 8009084:	613b      	str	r3, [r7, #16]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8009086:	4b67      	ldr	r3, [pc, #412]	; (8009224 <RotateDecel+0x1e4>)
 8009088:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 800908a:	60bb      	str	r3, [r7, #8]
			total_pulse[RIGHT]
 800908c:	4b65      	ldr	r3, [pc, #404]	; (8009224 <RotateDecel+0x1e4>)
 800908e:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8009090:	60fb      	str	r3, [r7, #12]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 8009092:	edd7 7a00 	vldr	s15, [r7]
 8009096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	dd50      	ble.n	8009142 <RotateDecel+0x102>
	{

		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 80090a0:	e040      	b.n	8009124 <RotateDecel+0xe4>
		{
			angular_acceleration = -1*64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 80090a2:	6978      	ldr	r0, [r7, #20]
 80090a4:	f7ff f988 	bl	80083b8 <__aeabi_f2d>
 80090a8:	a35b      	add	r3, pc, #364	; (adr r3, 8009218 <RotateDecel+0x1d8>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f7ff f9db 	bl	8008468 <__aeabi_dmul>
 80090b2:	4603      	mov	r3, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	4625      	mov	r5, r4
 80090b8:	461c      	mov	r4, r3
 80090ba:	6978      	ldr	r0, [r7, #20]
 80090bc:	f7ff f97c 	bl	80083b8 <__aeabi_f2d>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7ff f9ce 	bl	8008468 <__aeabi_dmul>
 80090cc:	4603      	mov	r3, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	4625      	mov	r5, r4
 80090d2:	461c      	mov	r4, r3
 80090d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80090d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090dc:	ee17 0a90 	vmov	r0, s15
 80090e0:	f7ff f96a 	bl	80083b8 <__aeabi_f2d>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4620      	mov	r0, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	f7ff fae6 	bl	80086bc <__aeabi_ddiv>
 80090f0:	4603      	mov	r3, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	4618      	mov	r0, r3
 80090f6:	4621      	mov	r1, r4
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	4b4a      	ldr	r3, [pc, #296]	; (8009228 <RotateDecel+0x1e8>)
 80090fe:	f7ff f9b3 	bl	8008468 <__aeabi_dmul>
 8009102:	4603      	mov	r3, r0
 8009104:	460c      	mov	r4, r1
 8009106:	4618      	mov	r0, r3
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff fc85 	bl	8008a18 <__aeabi_d2f>
 800910e:	4602      	mov	r2, r0
 8009110:	4b46      	ldr	r3, [pc, #280]	; (800922c <RotateDecel+0x1ec>)
 8009112:	601a      	str	r2, [r3, #0]
			if( angular_v <= 0)
 8009114:	4b46      	ldr	r3, [pc, #280]	; (8009230 <RotateDecel+0x1f0>)
 8009116:	edd3 7a00 	vldr	s15, [r3]
 800911a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	d966      	bls.n	80091f2 <RotateDecel+0x1b2>
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	441a      	add	r2, r3
 800912a:	4b3e      	ldr	r3, [pc, #248]	; (8009224 <RotateDecel+0x1e4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	dd62      	ble.n	80091f8 <RotateDecel+0x1b8>
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad2      	subs	r2, r2, r3
 8009138:	4b3a      	ldr	r3, [pc, #232]	; (8009224 <RotateDecel+0x1e4>)
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	dbb0      	blt.n	80090a2 <RotateDecel+0x62>
 8009140:	e05a      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
		}

	}
	else if( rotate_ang_v < 0)
 8009142:	edd7 7a00 	vldr	s15, [r7]
 8009146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800914a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914e:	d553      	bpl.n	80091f8 <RotateDecel+0x1b8>
	{
		//printf("減速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8009150:	e040      	b.n	80091d4 <RotateDecel+0x194>
		{
			angular_acceleration = 64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 8009152:	6978      	ldr	r0, [r7, #20]
 8009154:	f7ff f930 	bl	80083b8 <__aeabi_f2d>
 8009158:	a32f      	add	r3, pc, #188	; (adr r3, 8009218 <RotateDecel+0x1d8>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7ff f983 	bl	8008468 <__aeabi_dmul>
 8009162:	4603      	mov	r3, r0
 8009164:	460c      	mov	r4, r1
 8009166:	4625      	mov	r5, r4
 8009168:	461c      	mov	r4, r3
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	f7ff f924 	bl	80083b8 <__aeabi_f2d>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4620      	mov	r0, r4
 8009176:	4629      	mov	r1, r5
 8009178:	f7ff f976 	bl	8008468 <__aeabi_dmul>
 800917c:	4603      	mov	r3, r0
 800917e:	460c      	mov	r4, r1
 8009180:	4625      	mov	r5, r4
 8009182:	461c      	mov	r4, r3
 8009184:	edd7 7a01 	vldr	s15, [r7, #4]
 8009188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800918c:	ee17 0a90 	vmov	r0, s15
 8009190:	f7ff f912 	bl	80083b8 <__aeabi_f2d>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7ff fa8e 	bl	80086bc <__aeabi_ddiv>
 80091a0:	4603      	mov	r3, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	4618      	mov	r0, r3
 80091a6:	4621      	mov	r1, r4
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	4b21      	ldr	r3, [pc, #132]	; (8009234 <RotateDecel+0x1f4>)
 80091ae:	f7ff f95b 	bl	8008468 <__aeabi_dmul>
 80091b2:	4603      	mov	r3, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	4618      	mov	r0, r3
 80091b8:	4621      	mov	r1, r4
 80091ba:	f7ff fc2d 	bl	8008a18 <__aeabi_d2f>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b1a      	ldr	r3, [pc, #104]	; (800922c <RotateDecel+0x1ec>)
 80091c2:	601a      	str	r2, [r3, #0]
			if( angular_v >= 0)
 80091c4:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <RotateDecel+0x1f0>)
 80091c6:	edd3 7a00 	vldr	s15, [r3]
 80091ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d2:	da10      	bge.n	80091f6 <RotateDecel+0x1b6>
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1ad2      	subs	r2, r2, r3
 80091da:	4b12      	ldr	r3, [pc, #72]	; (8009224 <RotateDecel+0x1e4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	da0a      	bge.n	80091f8 <RotateDecel+0x1b8>
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	441a      	add	r2, r3
 80091e8:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <RotateDecel+0x1e4>)
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	dcb0      	bgt.n	8009152 <RotateDecel+0x112>
 80091f0:	e002      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
 80091f2:	bf00      	nop
 80091f4:	e000      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
 80091f6:	bf00      	nop
		}

	}
	angular_acceleration = 0;
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <RotateDecel+0x1ec>)
 80091fa:	f04f 0200 	mov.w	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
	target_angular_v = 0;
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <RotateDecel+0x1f8>)
 8009202:	f04f 0200 	mov.w	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
}
 8009208:	bf00      	nop
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bdb0      	pop	{r4, r5, r7, pc}
 8009210:	9c95204e 	.word	0x9c95204e
 8009214:	40fc4597 	.word	0x40fc4597
 8009218:	d2f1a9fc 	.word	0xd2f1a9fc
 800921c:	3f50624d 	.word	0x3f50624d
 8009220:	43b40000 	.word	0x43b40000
 8009224:	2000027c 	.word	0x2000027c
 8009228:	c0500000 	.word	0xc0500000
 800922c:	200002a8 	.word	0x200002a8
 8009230:	20000288 	.word	0x20000288
 8009234:	40500000 	.word	0x40500000
 8009238:	200002a4 	.word	0x200002a4

0800923c <Rotate>:
void Rotate(float deg, float ang_accel)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	ed87 0a01 	vstr	s0, [r7, #4]
 8009246:	edc7 0a00 	vstr	s1, [r7]
//	}
//	InitPulse((int*)(&(TIM3->CNT)), INITIAL_PULSE);
//	InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//	ResetCounter();

	RotateAccel(deg*15/90, ang_accel);
 800924a:	edd7 7a01 	vldr	s15, [r7, #4]
 800924e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8009252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009256:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80092c0 <Rotate+0x84>
 800925a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800925e:	edd7 0a00 	vldr	s1, [r7]
 8009262:	eeb0 0a66 	vmov.f32	s0, s13
 8009266:	f7ff fda7 	bl	8008db8 <RotateAccel>
	//printf("加速後の角速度 : %f\r\n",angular_v);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",angular_acceleration);
	RotateConst(deg*25/90, ang_accel);
 800926a:	edd7 7a01 	vldr	s15, [r7, #4]
 800926e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8009272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009276:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80092c0 <Rotate+0x84>
 800927a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800927e:	edd7 0a00 	vldr	s1, [r7]
 8009282:	eeb0 0a66 	vmov.f32	s0, s13
 8009286:	f7ff fe6b 	bl	8008f60 <RotateConst>
	RotateDecel(deg*50/90, ang_accel);
 800928a:	edd7 7a01 	vldr	s15, [r7, #4]
 800928e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80092c4 <Rotate+0x88>
 8009292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009296:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80092c0 <Rotate+0x84>
 800929a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800929e:	edd7 0a00 	vldr	s1, [r7]
 80092a2:	eeb0 0a66 	vmov.f32	s0, s13
 80092a6:	f7ff fecb 	bl	8009040 <RotateDecel>
//			target_angular_v = ang_accel;
//			printf("deg:負, angle, angular_v : %f, %f\r\n",angle, angular_v );
//		}
//
//	}
	target_angular_v = 0;
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <Rotate+0x8c>)
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
	printf("回転終了\r\n");
 80092b2:	4806      	ldr	r0, [pc, #24]	; (80092cc <Rotate+0x90>)
 80092b4:	f008 ffe2 	bl	801227c <puts>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	42b40000 	.word	0x42b40000
 80092c4:	42480000 	.word	0x42480000
 80092c8:	200002a4 	.word	0x200002a4
 80092cc:	08013ff8 	.word	0x08013ff8

080092d0 <Calib>:
{

}

void Calib()
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
	//壁使ってセンサ補正か、背中あて補正。状況に応じて補正パターンを変える

	//フラグと変数の状態に応じてフラグを変更し、動作を変える

}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80092e0:	b5b0      	push	{r4, r5, r7, lr}
 80092e2:	b08a      	sub	sp, #40	; 0x28
 80092e4:	af00      	add	r7, sp, #0
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float pre = 5;         //スラローム前距離
 80092e6:	4b76      	ldr	r3, [pc, #472]	; (80094c0 <SlalomRight+0x1e0>)
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
	float fol = 5;         //スラローム後距離
 80092ea:	4b75      	ldr	r3, [pc, #468]	; (80094c0 <SlalomRight+0x1e0>)
 80092ec:	623b      	str	r3, [r7, #32]
	float v_turn = explore_velocity;       //スラローム時の重心速度
 80092ee:	4b75      	ldr	r3, [pc, #468]	; (80094c4 <SlalomRight+0x1e4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	61fb      	str	r3, [r7, #28]
	float alpha_turn = 0.01;//0.015*13;  //スラローム時の角加速度
 80092f4:	4b74      	ldr	r3, [pc, #464]	; (80094c8 <SlalomRight+0x1e8>)
 80092f6:	61bb      	str	r3, [r7, #24]

	//angle = 0;         //アングルの初期化
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 80092f8:	4b74      	ldr	r3, [pc, #464]	; (80094cc <SlalomRight+0x1ec>)
 80092fa:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 80092fc:	4b74      	ldr	r3, [pc, #464]	; (80094d0 <SlalomRight+0x1f0>)
 80092fe:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009300:	4b74      	ldr	r3, [pc, #464]	; (80094d4 <SlalomRight+0x1f4>)
 8009302:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];	//汎用的に書いておく
 8009304:	4b74      	ldr	r3, [pc, #464]	; (80094d8 <SlalomRight+0x1f8>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4b73      	ldr	r3, [pc, #460]	; (80094d8 <SlalomRight+0x1f8>)
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	4413      	add	r3, r2
 800930e:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 8009310:	e00a      	b.n	8009328 <SlalomRight+0x48>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009312:	4b72      	ldr	r3, [pc, #456]	; (80094dc <SlalomRight+0x1fc>)
 8009314:	f04f 0200 	mov.w	r2, #0
 8009318:	601a      	str	r2, [r3, #0]
			angular_acceleration = 0;
 800931a:	4b71      	ldr	r3, [pc, #452]	; (80094e0 <SlalomRight+0x200>)
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009322:	4a70      	ldr	r2, [pc, #448]	; (80094e4 <SlalomRight+0x204>)
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f7ff f833 	bl	8008394 <__aeabi_i2d>
 800932e:	4604      	mov	r4, r0
 8009330:	460d      	mov	r5, r1
 8009332:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009336:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800933a:	ee17 0a90 	vmov	r0, s15
 800933e:	f7ff f83b 	bl	80083b8 <__aeabi_f2d>
 8009342:	a35d      	add	r3, pc, #372	; (adr r3, 80094b8 <SlalomRight+0x1d8>)
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f7ff f9b8 	bl	80086bc <__aeabi_ddiv>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4620      	mov	r0, r4
 8009352:	4629      	mov	r1, r5
 8009354:	f7fe fed2 	bl	80080fc <__adddf3>
 8009358:	4603      	mov	r3, r0
 800935a:	460c      	mov	r4, r1
 800935c:	4625      	mov	r5, r4
 800935e:	461c      	mov	r4, r3
 8009360:	4b5d      	ldr	r3, [pc, #372]	; (80094d8 <SlalomRight+0x1f8>)
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4b5c      	ldr	r3, [pc, #368]	; (80094d8 <SlalomRight+0x1f8>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	4413      	add	r3, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff f812 	bl	8008394 <__aeabi_i2d>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7ff fb06 	bl	8008988 <__aeabi_dcmpgt>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1c7      	bne.n	8009312 <SlalomRight+0x32>

			////printf("直進1\r\n");
	}


	float start_angle = angle;
 8009382:	4b59      	ldr	r3, [pc, #356]	; (80094e8 <SlalomRight+0x208>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	607b      	str	r3, [r7, #4]
	while(start_angle + ang1 > angle)
 8009388:	e005      	b.n	8009396 <SlalomRight+0xb6>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			angular_acceleration = alpha_turn;
 800938a:	4a55      	ldr	r2, [pc, #340]	; (80094e0 <SlalomRight+0x200>)
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 8009390:	4a54      	ldr	r2, [pc, #336]	; (80094e4 <SlalomRight+0x204>)
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > angle)
 8009396:	ed97 7a01 	vldr	s14, [r7, #4]
 800939a:	edd7 7a05 	vldr	s15, [r7, #20]
 800939e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093a2:	4b51      	ldr	r3, [pc, #324]	; (80094e8 <SlalomRight+0x208>)
 80093a4:	edd3 7a00 	vldr	s15, [r3]
 80093a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b0:	dceb      	bgt.n	800938a <SlalomRight+0xaa>

			//printf("クロソイド1\r\n");
	}
	angular_acceleration = 0;
 80093b2:	4b4b      	ldr	r3, [pc, #300]	; (80094e0 <SlalomRight+0x200>)
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle + ang2 > angle)
 80093ba:	e006      	b.n	80093ca <SlalomRight+0xea>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = target_angular_v;
 80093bc:	4b47      	ldr	r3, [pc, #284]	; (80094dc <SlalomRight+0x1fc>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a46      	ldr	r2, [pc, #280]	; (80094dc <SlalomRight+0x1fc>)
 80093c2:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 80093c4:	4a47      	ldr	r2, [pc, #284]	; (80094e4 <SlalomRight+0x204>)
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > angle)
 80093ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80093ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80093d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093d6:	4b44      	ldr	r3, [pc, #272]	; (80094e8 <SlalomRight+0x208>)
 80093d8:	edd3 7a00 	vldr	s15, [r3]
 80093dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e4:	dcea      	bgt.n	80093bc <SlalomRight+0xdc>
			////printf("円弧\r\n");
	}

	while( start_angle + ang3 > angle)
 80093e6:	e016      	b.n	8009416 <SlalomRight+0x136>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			angular_acceleration = -alpha_turn;
 80093e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80093ec:	eef1 7a67 	vneg.f32	s15, s15
 80093f0:	4b3b      	ldr	r3, [pc, #236]	; (80094e0 <SlalomRight+0x200>)
 80093f2:	edc3 7a00 	vstr	s15, [r3]
			if(target_angular_v < 0)
 80093f6:	4b39      	ldr	r3, [pc, #228]	; (80094dc <SlalomRight+0x1fc>)
 80093f8:	edd3 7a00 	vldr	s15, [r3]
 80093fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009404:	d504      	bpl.n	8009410 <SlalomRight+0x130>
			{
				target_angular_v = 0;
 8009406:	4b35      	ldr	r3, [pc, #212]	; (80094dc <SlalomRight+0x1fc>)
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	601a      	str	r2, [r3, #0]
				break;
 800940e:	e010      	b.n	8009432 <SlalomRight+0x152>
			}
			target_velocity[BODY] = v_turn;
 8009410:	4a34      	ldr	r2, [pc, #208]	; (80094e4 <SlalomRight+0x204>)
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > angle)
 8009416:	ed97 7a01 	vldr	s14, [r7, #4]
 800941a:	edd7 7a03 	vldr	s15, [r7, #12]
 800941e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009422:	4b31      	ldr	r3, [pc, #196]	; (80094e8 <SlalomRight+0x208>)
 8009424:	edd3 7a00 	vldr	s15, [r3]
 8009428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009430:	dcda      	bgt.n	80093e8 <SlalomRight+0x108>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	angular_acceleration = 0;
 8009432:	4b2b      	ldr	r3, [pc, #172]	; (80094e0 <SlalomRight+0x200>)
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];
 800943a:	4b27      	ldr	r3, [pc, #156]	; (80094d8 <SlalomRight+0x1f8>)
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	4b26      	ldr	r3, [pc, #152]	; (80094d8 <SlalomRight+0x1f8>)
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4413      	add	r3, r2
 8009444:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009446:	e006      	b.n	8009456 <SlalomRight+0x176>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009448:	4b24      	ldr	r3, [pc, #144]	; (80094dc <SlalomRight+0x1fc>)
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009450:	4a24      	ldr	r2, [pc, #144]	; (80094e4 <SlalomRight+0x204>)
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009456:	68b8      	ldr	r0, [r7, #8]
 8009458:	f7fe ff9c 	bl	8008394 <__aeabi_i2d>
 800945c:	4604      	mov	r4, r0
 800945e:	460d      	mov	r5, r1
 8009460:	edd7 7a08 	vldr	s15, [r7, #32]
 8009464:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009468:	ee17 0a90 	vmov	r0, s15
 800946c:	f7fe ffa4 	bl	80083b8 <__aeabi_f2d>
 8009470:	a311      	add	r3, pc, #68	; (adr r3, 80094b8 <SlalomRight+0x1d8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7ff f921 	bl	80086bc <__aeabi_ddiv>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7fe fe3b 	bl	80080fc <__adddf3>
 8009486:	4603      	mov	r3, r0
 8009488:	460c      	mov	r4, r1
 800948a:	4625      	mov	r5, r4
 800948c:	461c      	mov	r4, r3
 800948e:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <SlalomRight+0x1f8>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <SlalomRight+0x1f8>)
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	4413      	add	r3, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe ff7b 	bl	8008394 <__aeabi_i2d>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4620      	mov	r0, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	f7ff fa6f 	bl	8008988 <__aeabi_dcmpgt>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1cb      	bne.n	8009448 <SlalomRight+0x168>
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 80094b0:	bf00      	nop
 80094b2:	3728      	adds	r7, #40	; 0x28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bdb0      	pop	{r4, r5, r7, pc}
 80094b8:	317249d5 	.word	0x317249d5
 80094bc:	3f502de0 	.word	0x3f502de0
 80094c0:	40a00000 	.word	0x40a00000
 80094c4:	20000000 	.word	0x20000000
 80094c8:	3c23d70a 	.word	0x3c23d70a
 80094cc:	3f060a92 	.word	0x3f060a92
 80094d0:	3f860a92 	.word	0x3f860a92
 80094d4:	3fc90fdb 	.word	0x3fc90fdb
 80094d8:	2000027c 	.word	0x2000027c
 80094dc:	200002a4 	.word	0x200002a4
 80094e0:	200002a8 	.word	0x200002a8
 80094e4:	20000290 	.word	0x20000290
 80094e8:	2000028c 	.word	0x2000028c
 80094ec:	00000000 	.word	0x00000000

080094f0 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80094f0:	b5b0      	push	{r4, r5, r7, lr}
 80094f2:	b08a      	sub	sp, #40	; 0x28
 80094f4:	af00      	add	r7, sp, #0
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float pre = 5;         //スラローム前距離
 80094f6:	4b76      	ldr	r3, [pc, #472]	; (80096d0 <SlalomLeft+0x1e0>)
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
	float fol = 5;         //スラローム後距離
 80094fa:	4b75      	ldr	r3, [pc, #468]	; (80096d0 <SlalomLeft+0x1e0>)
 80094fc:	623b      	str	r3, [r7, #32]
	float v_turn = explore_velocity;       //スラローム時の重心速度
 80094fe:	4b75      	ldr	r3, [pc, #468]	; (80096d4 <SlalomLeft+0x1e4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -0.01;//-0.015*13;  //スラローム時の角加速度
 8009504:	4b74      	ldr	r3, [pc, #464]	; (80096d8 <SlalomLeft+0x1e8>)
 8009506:	61bb      	str	r3, [r7, #24]

	//angle = 0;         //アングルの初期化
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 8009508:	4b74      	ldr	r3, [pc, #464]	; (80096dc <SlalomLeft+0x1ec>)
 800950a:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 800950c:	4b74      	ldr	r3, [pc, #464]	; (80096e0 <SlalomLeft+0x1f0>)
 800950e:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009510:	4b74      	ldr	r3, [pc, #464]	; (80096e4 <SlalomLeft+0x1f4>)
 8009512:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];	//汎用的に書いておく
 8009514:	4b74      	ldr	r3, [pc, #464]	; (80096e8 <SlalomLeft+0x1f8>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	4b73      	ldr	r3, [pc, #460]	; (80096e8 <SlalomLeft+0x1f8>)
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	4413      	add	r3, r2
 800951e:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 8009520:	e00a      	b.n	8009538 <SlalomLeft+0x48>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009522:	4b72      	ldr	r3, [pc, #456]	; (80096ec <SlalomLeft+0x1fc>)
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
			angular_acceleration = 0;
 800952a:	4b71      	ldr	r3, [pc, #452]	; (80096f0 <SlalomLeft+0x200>)
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009532:	4a70      	ldr	r2, [pc, #448]	; (80096f4 <SlalomLeft+0x204>)
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 8009538:	68b8      	ldr	r0, [r7, #8]
 800953a:	f7fe ff2b 	bl	8008394 <__aeabi_i2d>
 800953e:	4604      	mov	r4, r0
 8009540:	460d      	mov	r5, r1
 8009542:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009546:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800954a:	ee17 0a90 	vmov	r0, s15
 800954e:	f7fe ff33 	bl	80083b8 <__aeabi_f2d>
 8009552:	a35d      	add	r3, pc, #372	; (adr r3, 80096c8 <SlalomLeft+0x1d8>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7ff f8b0 	bl	80086bc <__aeabi_ddiv>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7fe fdca 	bl	80080fc <__adddf3>
 8009568:	4603      	mov	r3, r0
 800956a:	460c      	mov	r4, r1
 800956c:	4625      	mov	r5, r4
 800956e:	461c      	mov	r4, r3
 8009570:	4b5d      	ldr	r3, [pc, #372]	; (80096e8 <SlalomLeft+0x1f8>)
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	4b5c      	ldr	r3, [pc, #368]	; (80096e8 <SlalomLeft+0x1f8>)
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4413      	add	r3, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe ff0a 	bl	8008394 <__aeabi_i2d>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4620      	mov	r0, r4
 8009586:	4629      	mov	r1, r5
 8009588:	f7ff f9fe 	bl	8008988 <__aeabi_dcmpgt>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1c7      	bne.n	8009522 <SlalomLeft+0x32>

			////printf("直進1\r\n");
	}


	float start_angle = angle;
 8009592:	4b59      	ldr	r3, [pc, #356]	; (80096f8 <SlalomLeft+0x208>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < angle)
 8009598:	e005      	b.n	80095a6 <SlalomLeft+0xb6>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			angular_acceleration = alpha_turn;
 800959a:	4a55      	ldr	r2, [pc, #340]	; (80096f0 <SlalomLeft+0x200>)
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 80095a0:	4a54      	ldr	r2, [pc, #336]	; (80096f4 <SlalomLeft+0x204>)
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < angle)
 80095a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80095aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80095ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095b2:	4b51      	ldr	r3, [pc, #324]	; (80096f8 <SlalomLeft+0x208>)
 80095b4:	edd3 7a00 	vldr	s15, [r3]
 80095b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c0:	d4eb      	bmi.n	800959a <SlalomLeft+0xaa>

			//printf("クロソイド1\r\n");
	}
	angular_acceleration = 0;
 80095c2:	4b4b      	ldr	r3, [pc, #300]	; (80096f0 <SlalomLeft+0x200>)
 80095c4:	f04f 0200 	mov.w	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < angle)
 80095ca:	e006      	b.n	80095da <SlalomLeft+0xea>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = target_angular_v;
 80095cc:	4b47      	ldr	r3, [pc, #284]	; (80096ec <SlalomLeft+0x1fc>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a46      	ldr	r2, [pc, #280]	; (80096ec <SlalomLeft+0x1fc>)
 80095d2:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 80095d4:	4a47      	ldr	r2, [pc, #284]	; (80096f4 <SlalomLeft+0x204>)
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < angle)
 80095da:	ed97 7a01 	vldr	s14, [r7, #4]
 80095de:	edd7 7a04 	vldr	s15, [r7, #16]
 80095e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095e6:	4b44      	ldr	r3, [pc, #272]	; (80096f8 <SlalomLeft+0x208>)
 80095e8:	edd3 7a00 	vldr	s15, [r3]
 80095ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f4:	d4ea      	bmi.n	80095cc <SlalomLeft+0xdc>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < angle)
 80095f6:	e016      	b.n	8009626 <SlalomLeft+0x136>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			angular_acceleration = -alpha_turn;
 80095f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80095fc:	eef1 7a67 	vneg.f32	s15, s15
 8009600:	4b3b      	ldr	r3, [pc, #236]	; (80096f0 <SlalomLeft+0x200>)
 8009602:	edc3 7a00 	vstr	s15, [r3]
			if(target_angular_v > 0)
 8009606:	4b39      	ldr	r3, [pc, #228]	; (80096ec <SlalomLeft+0x1fc>)
 8009608:	edd3 7a00 	vldr	s15, [r3]
 800960c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009614:	dd04      	ble.n	8009620 <SlalomLeft+0x130>
			{
				target_angular_v = 0;
 8009616:	4b35      	ldr	r3, [pc, #212]	; (80096ec <SlalomLeft+0x1fc>)
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
				break;
 800961e:	e010      	b.n	8009642 <SlalomLeft+0x152>
			}
			target_velocity[BODY] = v_turn;
 8009620:	4a34      	ldr	r2, [pc, #208]	; (80096f4 <SlalomLeft+0x204>)
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < angle)
 8009626:	ed97 7a01 	vldr	s14, [r7, #4]
 800962a:	edd7 7a03 	vldr	s15, [r7, #12]
 800962e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009632:	4b31      	ldr	r3, [pc, #196]	; (80096f8 <SlalomLeft+0x208>)
 8009634:	edd3 7a00 	vldr	s15, [r3]
 8009638:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009640:	d4da      	bmi.n	80095f8 <SlalomLeft+0x108>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	angular_acceleration = 0;
 8009642:	4b2b      	ldr	r3, [pc, #172]	; (80096f0 <SlalomLeft+0x200>)
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];
 800964a:	4b27      	ldr	r3, [pc, #156]	; (80096e8 <SlalomLeft+0x1f8>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b26      	ldr	r3, [pc, #152]	; (80096e8 <SlalomLeft+0x1f8>)
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	4413      	add	r3, r2
 8009654:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009656:	e006      	b.n	8009666 <SlalomLeft+0x176>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009658:	4b24      	ldr	r3, [pc, #144]	; (80096ec <SlalomLeft+0x1fc>)
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009660:	4a24      	ldr	r2, [pc, #144]	; (80096f4 <SlalomLeft+0x204>)
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009666:	68b8      	ldr	r0, [r7, #8]
 8009668:	f7fe fe94 	bl	8008394 <__aeabi_i2d>
 800966c:	4604      	mov	r4, r0
 800966e:	460d      	mov	r5, r1
 8009670:	edd7 7a08 	vldr	s15, [r7, #32]
 8009674:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009678:	ee17 0a90 	vmov	r0, s15
 800967c:	f7fe fe9c 	bl	80083b8 <__aeabi_f2d>
 8009680:	a311      	add	r3, pc, #68	; (adr r3, 80096c8 <SlalomLeft+0x1d8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7ff f819 	bl	80086bc <__aeabi_ddiv>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	4620      	mov	r0, r4
 8009690:	4629      	mov	r1, r5
 8009692:	f7fe fd33 	bl	80080fc <__adddf3>
 8009696:	4603      	mov	r3, r0
 8009698:	460c      	mov	r4, r1
 800969a:	4625      	mov	r5, r4
 800969c:	461c      	mov	r4, r3
 800969e:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <SlalomLeft+0x1f8>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <SlalomLeft+0x1f8>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	4413      	add	r3, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe fe73 	bl	8008394 <__aeabi_i2d>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4620      	mov	r0, r4
 80096b4:	4629      	mov	r1, r5
 80096b6:	f7ff f967 	bl	8008988 <__aeabi_dcmpgt>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1cb      	bne.n	8009658 <SlalomLeft+0x168>
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 80096c0:	bf00      	nop
 80096c2:	3728      	adds	r7, #40	; 0x28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bdb0      	pop	{r4, r5, r7, pc}
 80096c8:	317249d5 	.word	0x317249d5
 80096cc:	3f502de0 	.word	0x3f502de0
 80096d0:	40a00000 	.word	0x40a00000
 80096d4:	20000000 	.word	0x20000000
 80096d8:	bc23d70a 	.word	0xbc23d70a
 80096dc:	3f060a92 	.word	0x3f060a92
 80096e0:	3f860a92 	.word	0x3f860a92
 80096e4:	3fc90fdb 	.word	0x3fc90fdb
 80096e8:	2000027c 	.word	0x2000027c
 80096ec:	200002a4 	.word	0x200002a4
 80096f0:	200002a8 	.word	0x200002a8
 80096f4:	20000290 	.word	0x20000290
 80096f8:	2000028c 	.word	0x2000028c
 80096fc:	00000000 	.word	0x00000000

08009700 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 8009700:	b5b0      	push	{r4, r5, r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	ed87 0a01 	vstr	s0, [r7, #4]
 800970a:	edc7 0a00 	vstr	s1, [r7]
	float additional_speed=0;
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	617b      	str	r3, [r7, #20]
	additional_speed = explore_speed - target_velocity[BODY];
 8009714:	4b34      	ldr	r3, [pc, #208]	; (80097e8 <Accel+0xe8>)
 8009716:	edd3 7a02 	vldr	s15, [r3, #8]
 800971a:	ed97 7a00 	vldr	s14, [r7]
 800971e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009722:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009726:	6978      	ldr	r0, [r7, #20]
 8009728:	f7fe fe46 	bl	80083b8 <__aeabi_f2d>
 800972c:	a32a      	add	r3, pc, #168	; (adr r3, 80097d8 <Accel+0xd8>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7fe fe99 	bl	8008468 <__aeabi_dmul>
 8009736:	4603      	mov	r3, r0
 8009738:	460c      	mov	r4, r1
 800973a:	4625      	mov	r5, r4
 800973c:	461c      	mov	r4, r3
 800973e:	6978      	ldr	r0, [r7, #20]
 8009740:	f7fe fe3a 	bl	80083b8 <__aeabi_f2d>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7fe fe8c 	bl	8008468 <__aeabi_dmul>
 8009750:	4603      	mov	r3, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4625      	mov	r5, r4
 8009756:	461c      	mov	r4, r3
 8009758:	edd7 7a01 	vldr	s15, [r7, #4]
 800975c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009760:	ee17 0a90 	vmov	r0, s15
 8009764:	f7fe fe28 	bl	80083b8 <__aeabi_f2d>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4620      	mov	r0, r4
 800976e:	4629      	mov	r1, r5
 8009770:	f7fe ffa4 	bl	80086bc <__aeabi_ddiv>
 8009774:	4603      	mov	r3, r0
 8009776:	460c      	mov	r4, r1
 8009778:	4618      	mov	r0, r3
 800977a:	4621      	mov	r1, r4
 800977c:	f7ff f94c 	bl	8008a18 <__aeabi_d2f>
 8009780:	4602      	mov	r2, r0
 8009782:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <Accel+0xec>)
 8009784:	601a      	str	r2, [r3, #0]

	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009786:	edd7 7a01 	vldr	s15, [r7, #4]
 800978a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800978e:	ee17 0a90 	vmov	r0, s15
 8009792:	f7fe fe11 	bl	80083b8 <__aeabi_f2d>
 8009796:	a312      	add	r3, pc, #72	; (adr r3, 80097e0 <Accel+0xe0>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7fe ff8e 	bl	80086bc <__aeabi_ddiv>
 80097a0:	4603      	mov	r3, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4618      	mov	r0, r3
 80097a6:	4621      	mov	r1, r4
 80097a8:	f7ff f90e 	bl	80089c8 <__aeabi_d2iz>
 80097ac:	4603      	mov	r3, r0
 80097ae:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 80097b0:	4b0f      	ldr	r3, [pc, #60]	; (80097f0 <Accel+0xf0>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4413      	add	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	while( ( keep_pulse ) > ( total_pulse[BODY] ) )
 80097ba:	bf00      	nop
 80097bc:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <Accel+0xf0>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	dcfa      	bgt.n	80097bc <Accel+0xbc>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			keep_counter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	acceleration = 0;
 80097c6:	4b09      	ldr	r3, [pc, #36]	; (80097ec <Accel+0xec>)
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 80097ce:	bf00      	nop
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bdb0      	pop	{r4, r5, r7, pc}
 80097d6:	bf00      	nop
 80097d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80097dc:	3f50624d 	.word	0x3f50624d
 80097e0:	317249d5 	.word	0x317249d5
 80097e4:	3f502de0 	.word	0x3f502de0
 80097e8:	20000290 	.word	0x20000290
 80097ec:	200002a0 	.word	0x200002a0
 80097f0:	2000027c 	.word	0x2000027c
 80097f4:	00000000 	.word	0x00000000

080097f8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 80097f8:	b5b0      	push	{r4, r5, r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8009802:	edc7 0a00 	vstr	s1, [r7]
	float down_speed=0;
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
	down_speed = target_velocity[BODY] - end_speed;
 800980c:	4b3e      	ldr	r3, [pc, #248]	; (8009908 <Decel+0x110>)
 800980e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009812:	edd7 7a00 	vldr	s15, [r7]
 8009816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800981a:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800981e:	6978      	ldr	r0, [r7, #20]
 8009820:	f7fe fdca 	bl	80083b8 <__aeabi_f2d>
 8009824:	a334      	add	r3, pc, #208	; (adr r3, 80098f8 <Decel+0x100>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f7fe fe1d 	bl	8008468 <__aeabi_dmul>
 800982e:	4603      	mov	r3, r0
 8009830:	460c      	mov	r4, r1
 8009832:	4625      	mov	r5, r4
 8009834:	461c      	mov	r4, r3
 8009836:	6978      	ldr	r0, [r7, #20]
 8009838:	f7fe fdbe 	bl	80083b8 <__aeabi_f2d>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4620      	mov	r0, r4
 8009842:	4629      	mov	r1, r5
 8009844:	f7fe fe10 	bl	8008468 <__aeabi_dmul>
 8009848:	4603      	mov	r3, r0
 800984a:	460c      	mov	r4, r1
 800984c:	4625      	mov	r5, r4
 800984e:	461c      	mov	r4, r3
 8009850:	edd7 7a01 	vldr	s15, [r7, #4]
 8009854:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009858:	ee17 0a90 	vmov	r0, s15
 800985c:	f7fe fdac 	bl	80083b8 <__aeabi_f2d>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7fe ff28 	bl	80086bc <__aeabi_ddiv>
 800986c:	4603      	mov	r3, r0
 800986e:	460c      	mov	r4, r1
 8009870:	4618      	mov	r0, r3
 8009872:	4621      	mov	r1, r4
 8009874:	f7ff f8d0 	bl	8008a18 <__aeabi_d2f>
 8009878:	4603      	mov	r3, r0
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef1 7a67 	vneg.f32	s15, s15
 8009882:	4b22      	ldr	r3, [pc, #136]	; (800990c <Decel+0x114>)
 8009884:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009888:	edd7 7a01 	vldr	s15, [r7, #4]
 800988c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009890:	ee17 0a90 	vmov	r0, s15
 8009894:	f7fe fd90 	bl	80083b8 <__aeabi_f2d>
 8009898:	a319      	add	r3, pc, #100	; (adr r3, 8009900 <Decel+0x108>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7fe ff0d 	bl	80086bc <__aeabi_ddiv>
 80098a2:	4603      	mov	r3, r0
 80098a4:	460c      	mov	r4, r1
 80098a6:	4618      	mov	r0, r3
 80098a8:	4621      	mov	r1, r4
 80098aa:	f7ff f88d 	bl	80089c8 <__aeabi_d2iz>
 80098ae:	4603      	mov	r3, r0
 80098b0:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 80098b2:	4b17      	ldr	r3, [pc, #92]	; (8009910 <Decel+0x118>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4413      	add	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]

	while( ( keep_pulse ) > ( total_pulse[BODY]) )
 80098bc:	e007      	b.n	80098ce <Decel+0xd6>
//		if( (abs(TIM4->CNT - INITIAL_PULSE) >= 29000) )
//		{
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			keep_counter[RIGHT] = INITIAL_PULSE;
//		}
		if(target_velocity[BODY] <= 0)
 80098be:	4b12      	ldr	r3, [pc, #72]	; (8009908 <Decel+0x110>)
 80098c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80098c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	d905      	bls.n	80098da <Decel+0xe2>
	while( ( keep_pulse ) > ( total_pulse[BODY]) )
 80098ce:	4b10      	ldr	r3, [pc, #64]	; (8009910 <Decel+0x118>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	dcf2      	bgt.n	80098be <Decel+0xc6>
 80098d8:	e000      	b.n	80098dc <Decel+0xe4>
			break;
 80098da:	bf00      	nop
	}
	target_velocity[BODY] = 0;
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <Decel+0x110>)
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	609a      	str	r2, [r3, #8]
	acceleration = 0;
 80098e4:	4b09      	ldr	r3, [pc, #36]	; (800990c <Decel+0x114>)
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]
}
 80098ec:	bf00      	nop
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bdb0      	pop	{r4, r5, r7, pc}
 80098f4:	f3af 8000 	nop.w
 80098f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80098fc:	3f50624d 	.word	0x3f50624d
 8009900:	317249d5 	.word	0x317249d5
 8009904:	3f502de0 	.word	0x3f502de0
 8009908:	20000290 	.word	0x20000290
 800990c:	200002a0 	.word	0x200002a0
 8009910:	2000027c 	.word	0x2000027c
 8009914:	00000000 	.word	0x00000000

08009918 <GoStraight>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。

void GoStraight(float move_distance,  float explore_speed, float accel)
{
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009922:	edc7 0a02 	vstr	s1, [r7, #8]
 8009926:	ed87 1a01 	vstr	s2, [r7, #4]
	//v = v0 + at
	//x = v0t + 0.5*at^2
		//target_velocity[BODY] = explore_speed;
	//加速なら
//	if(accel == TRUE)	//目標移動量と到達速度から加速度を計算する。
	explore_speed += accel;
 800992a:	ed97 7a02 	vldr	s14, [r7, #8]
 800992e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009936:	edc7 7a02 	vstr	s15, [r7, #8]

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	Accel( 90/2 , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800993a:	edd7 0a02 	vldr	s1, [r7, #8]
 800993e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80099b8 <GoStraight+0xa0>
 8009942:	f7ff fedd 	bl	8009700 <Accel>
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	int target_pulse = (int)(2*(move_distance-45)/MM_PER_PULSE);
 8009946:	edd7 7a03 	vldr	s15, [r7, #12]
 800994a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80099b8 <GoStraight+0xa0>
 800994e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009952:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009956:	ee17 0a90 	vmov	r0, s15
 800995a:	f7fe fd2d 	bl	80083b8 <__aeabi_f2d>
 800995e:	a314      	add	r3, pc, #80	; (adr r3, 80099b0 <GoStraight+0x98>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7fe feaa 	bl	80086bc <__aeabi_ddiv>
 8009968:	4603      	mov	r3, r0
 800996a:	460c      	mov	r4, r1
 800996c:	4618      	mov	r0, r3
 800996e:	4621      	mov	r1, r4
 8009970:	f7ff f82a 	bl	80089c8 <__aeabi_d2iz>
 8009974:	4603      	mov	r3, r0
 8009976:	617b      	str	r3, [r7, #20]
	int keep_pulse = total_pulse[BODY];
 8009978:	4b10      	ldr	r3, [pc, #64]	; (80099bc <GoStraight+0xa4>)
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	613b      	str	r3, [r7, #16]

	while( ( keep_pulse +target_pulse) > ( total_pulse[BODY]) )
 800997e:	e00b      	b.n	8009998 <GoStraight+0x80>
	{
		//最初の45mmで加速をストップ

		//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
		if( ( keep_pulse + (int)(2*45/MM_PER_PULSE) )  <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8009986:	3303      	adds	r3, #3
 8009988:	4a0c      	ldr	r2, [pc, #48]	; (80099bc <GoStraight+0xa4>)
 800998a:	6892      	ldr	r2, [r2, #8]
 800998c:	4293      	cmp	r3, r2
 800998e:	dc03      	bgt.n	8009998 <GoStraight+0x80>
		{
			acceleration = 0;
 8009990:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <GoStraight+0xa8>)
 8009992:	f04f 0200 	mov.w	r2, #0
 8009996:	601a      	str	r2, [r3, #0]
	while( ( keep_pulse +target_pulse) > ( total_pulse[BODY]) )
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	441a      	add	r2, r3
 800999e:	4b07      	ldr	r3, [pc, #28]	; (80099bc <GoStraight+0xa4>)
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	dcec      	bgt.n	8009980 <GoStraight+0x68>

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 80099a6:	bf00      	nop
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd90      	pop	{r4, r7, pc}
 80099ae:	bf00      	nop
 80099b0:	317249d5 	.word	0x317249d5
 80099b4:	3f502de0 	.word	0x3f502de0
 80099b8:	42340000 	.word	0x42340000
 80099bc:	2000027c 	.word	0x2000027c
 80099c0:	200002a0 	.word	0x200002a0

080099c4 <TurnRight>:
void TurnRight(char mode)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	2b53      	cmp	r3, #83	; 0x53
 80099d2:	d020      	beq.n	8009a16 <TurnRight+0x52>
 80099d4:	2b54      	cmp	r3, #84	; 0x54
 80099d6:	d000      	beq.n	80099da <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 80099d8:	e020      	b.n	8009a1c <TurnRight+0x58>
		Decel(40, 0);
 80099da:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009a24 <TurnRight+0x60>
 80099de:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009a28 <TurnRight+0x64>
 80099e2:	f7ff ff09 	bl	80097f8 <Decel>
		HAL_Delay(500);
 80099e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80099ea:	f003 fc4b 	bl	800d284 <HAL_Delay>
		Rotate( 90 , M_PI);
 80099ee:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8009a2c <TurnRight+0x68>
 80099f2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8009a30 <TurnRight+0x6c>
 80099f6:	f7ff fc21 	bl	800923c <Rotate>
		HAL_Delay(500);
 80099fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80099fe:	f003 fc41 	bl	800d284 <HAL_Delay>
		Accel(40, explore_velocity);
 8009a02:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <TurnRight+0x70>)
 8009a04:	edd3 7a00 	vldr	s15, [r3]
 8009a08:	eef0 0a67 	vmov.f32	s1, s15
 8009a0c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009a28 <TurnRight+0x64>
 8009a10:	f7ff fe76 	bl	8009700 <Accel>
		break;
 8009a14:	e002      	b.n	8009a1c <TurnRight+0x58>
		SlalomRight();
 8009a16:	f7ff fc63 	bl	80092e0 <SlalomRight>
		break;
 8009a1a:	bf00      	nop
	}


}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	00000000 	.word	0x00000000
 8009a28:	42200000 	.word	0x42200000
 8009a2c:	40490fdb 	.word	0x40490fdb
 8009a30:	42b40000 	.word	0x42b40000
 8009a34:	20000000 	.word	0x20000000

08009a38 <TurnLeft>:
void TurnLeft(char mode)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	2b53      	cmp	r3, #83	; 0x53
 8009a46:	d020      	beq.n	8009a8a <TurnLeft+0x52>
 8009a48:	2b54      	cmp	r3, #84	; 0x54
 8009a4a:	d000      	beq.n	8009a4e <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 8009a4c:	e020      	b.n	8009a90 <TurnLeft+0x58>
		Decel(40, 0);
 8009a4e:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009a98 <TurnLeft+0x60>
 8009a52:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009a9c <TurnLeft+0x64>
 8009a56:	f7ff fecf 	bl	80097f8 <Decel>
		HAL_Delay(500);
 8009a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a5e:	f003 fc11 	bl	800d284 <HAL_Delay>
		Rotate( 90 , -M_PI);
 8009a62:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8009aa0 <TurnLeft+0x68>
 8009a66:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8009aa4 <TurnLeft+0x6c>
 8009a6a:	f7ff fbe7 	bl	800923c <Rotate>
		HAL_Delay(500);
 8009a6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a72:	f003 fc07 	bl	800d284 <HAL_Delay>
		Accel(40, explore_velocity);
 8009a76:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <TurnLeft+0x70>)
 8009a78:	edd3 7a00 	vldr	s15, [r3]
 8009a7c:	eef0 0a67 	vmov.f32	s1, s15
 8009a80:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009a9c <TurnLeft+0x64>
 8009a84:	f7ff fe3c 	bl	8009700 <Accel>
		break;
 8009a88:	e002      	b.n	8009a90 <TurnLeft+0x58>
		SlalomLeft();
 8009a8a:	f7ff fd31 	bl	80094f0 <SlalomLeft>
		break;
 8009a8e:	bf00      	nop
	}

}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	00000000 	.word	0x00000000
 8009a9c:	42200000 	.word	0x42200000
 8009aa0:	c0490fdb 	.word	0xc0490fdb
 8009aa4:	42b40000 	.word	0x42b40000
 8009aa8:	20000000 	.word	0x20000000

08009aac <GoBack>:
void GoBack()
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 8009ab0:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009b0c <GoBack+0x60>
 8009ab4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009b10 <GoBack+0x64>
 8009ab8:	f7ff fe9e 	bl	80097f8 <Decel>
	HAL_Delay(500);
 8009abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ac0:	f003 fbe0 	bl	800d284 <HAL_Delay>
	//補正して
	Calib();
 8009ac4:	f7ff fc04 	bl	80092d0 <Calib>
	//回転して
	Rotate(90, M_PI);//もしくは二回とも左
 8009ac8:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009b14 <GoBack+0x68>
 8009acc:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009b18 <GoBack+0x6c>
 8009ad0:	f7ff fbb4 	bl	800923c <Rotate>
	HAL_Delay(500);
 8009ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ad8:	f003 fbd4 	bl	800d284 <HAL_Delay>
	//補正して
	Calib();
 8009adc:	f7ff fbf8 	bl	80092d0 <Calib>
	//回転して
	Rotate(90, M_PI);
 8009ae0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8009b14 <GoBack+0x68>
 8009ae4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009b18 <GoBack+0x6c>
 8009ae8:	f7ff fba8 	bl	800923c <Rotate>
	HAL_Delay(500);
 8009aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009af0:	f003 fbc8 	bl	800d284 <HAL_Delay>
	//加速する
	Accel(45, explore_velocity);
 8009af4:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <GoBack+0x70>)
 8009af6:	edd3 7a00 	vldr	s15, [r3]
 8009afa:	eef0 0a67 	vmov.f32	s1, s15
 8009afe:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8009b10 <GoBack+0x64>
 8009b02:	f7ff fdfd 	bl	8009700 <Accel>
	//ここまでで目標走行距離を完了する

}
 8009b06:	bf00      	nop
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	00000000 	.word	0x00000000
 8009b10:	42340000 	.word	0x42340000
 8009b14:	40490fdb 	.word	0x40490fdb
 8009b18:	42b40000 	.word	0x42b40000
 8009b1c:	20000000 	.word	0x20000000

08009b20 <SelectAction>:



//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
void SelectAction(char direction)	//前後左右であらわす
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(direction)
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	3b42      	subs	r3, #66	; 0x42
 8009b2e:	2b11      	cmp	r3, #17
 8009b30:	d840      	bhi.n	8009bb4 <SelectAction+0x94>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <SelectAction+0x18>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009baf 	.word	0x08009baf
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009bb5 	.word	0x08009bb5
 8009b44:	08009bb5 	.word	0x08009bb5
 8009b48:	08009bb5 	.word	0x08009bb5
 8009b4c:	08009bb5 	.word	0x08009bb5
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009bb5 	.word	0x08009bb5
 8009b58:	08009bb5 	.word	0x08009bb5
 8009b5c:	08009bb5 	.word	0x08009bb5
 8009b60:	08009ba7 	.word	0x08009ba7
 8009b64:	08009bb5 	.word	0x08009bb5
 8009b68:	08009bb5 	.word	0x08009bb5
 8009b6c:	08009bb5 	.word	0x08009bb5
 8009b70:	08009bb5 	.word	0x08009bb5
 8009b74:	08009bb5 	.word	0x08009bb5
 8009b78:	08009b9f 	.word	0x08009b9f
 8009b7c:	08009b81 	.word	0x08009b81
	{
	//直進
	case 'S':
		GoStraight(90, explore_velocity, add_velocity);
 8009b80:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <SelectAction+0xa0>)
 8009b82:	edd3 7a00 	vldr	s15, [r3]
 8009b86:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <SelectAction+0xa4>)
 8009b88:	ed93 7a00 	vldr	s14, [r3]
 8009b8c:	eeb0 1a47 	vmov.f32	s2, s14
 8009b90:	eef0 0a67 	vmov.f32	s1, s15
 8009b94:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009bc8 <SelectAction+0xa8>
 8009b98:	f7ff febe 	bl	8009918 <GoStraight>
		break;
 8009b9c:	e00b      	b.n	8009bb6 <SelectAction+0x96>
	//右方向
	case 'R':	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight('S');
 8009b9e:	2053      	movs	r0, #83	; 0x53
 8009ba0:	f7ff ff10 	bl	80099c4 <TurnRight>
		break;
 8009ba4:	e007      	b.n	8009bb6 <SelectAction+0x96>
	//左方向
	case 'L':
		TurnLeft('S');
 8009ba6:	2053      	movs	r0, #83	; 0x53
 8009ba8:	f7ff ff46 	bl	8009a38 <TurnLeft>
		break;
 8009bac:	e003      	b.n	8009bb6 <SelectAction+0x96>
	case 'B':
		GoBack();	//Uターン
 8009bae:	f7ff ff7d 	bl	8009aac <GoBack>
		break;
 8009bb2:	e000      	b.n	8009bb6 <SelectAction+0x96>


	default :
		break;
 8009bb4:	bf00      	nop

	}
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000000 	.word	0x20000000
 8009bc4:	2000029c 	.word	0x2000029c
 8009bc8:	42b40000 	.word	0x42b40000

08009bcc <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <GetPulseDisplacement>:
//目的 : エンコーダパルスの初期値との差分を取得する(割り込み内)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : パルスの変位
//-------------------------//
int GetPulseDisplacement(int *timer_counter,  int initial_pulse)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	//割り込みで呼び出す想定
	//カウンタをリセットするのは別のところ
	int current_pulse = *timer_counter;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
	int pulse_displacement = -1* (current_pulse - initial_pulse);
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	60bb      	str	r3, [r7, #8]
	//前回値として保存

//	//次回の呼び出しのためにすぐ初期化。
	InitPulse( timer_counter, initial_pulse);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff ffe2 	bl	8009bcc <InitPulse>

	return pulse_displacement;
 8009c08:	68bb      	ldr	r3, [r7, #8]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8009c24:	4a2c      	ldr	r2, [pc, #176]	; (8009cd8 <GetWallDataAverage+0xc4>)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfb8      	it	lt
 8009c34:	425b      	neglt	r3, r3
 8009c36:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 8009c38:	4927      	ldr	r1, [pc, #156]	; (8009cd8 <GetWallDataAverage+0xc4>)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 8009c42:	4a26      	ldr	r2, [pc, #152]	; (8009cdc <GetWallDataAverage+0xc8>)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	441a      	add	r2, r3
 8009c4e:	4923      	ldr	r1, [pc, #140]	; (8009cdc <GetWallDataAverage+0xc8>)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 8009c56:	4a22      	ldr	r2, [pc, #136]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	491f      	ldr	r1, [pc, #124]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 8009c68:	4a1d      	ldr	r2, [pc, #116]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d121      	bne.n	8009cba <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 8009c76:	4a19      	ldr	r2, [pc, #100]	; (8009cdc <GetWallDataAverage+0xc8>)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009c86:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9a:	4a12      	ldr	r2, [pc, #72]	; (8009ce4 <GetWallDataAverage+0xd0>)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 8009ca6:	4a0d      	ldr	r2, [pc, #52]	; (8009cdc <GetWallDataAverage+0xc8>)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2100      	movs	r1, #0
 8009cac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 8009cb0:	4a0b      	ldr	r2, [pc, #44]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 8009cba:	4a0a      	ldr	r2, [pc, #40]	; (8009ce4 <GetWallDataAverage+0xd0>)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	ee07 3a90 	vmov	s15, r3
}
 8009cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	200001fc 	.word	0x200001fc
 8009cdc:	2000020c 	.word	0x2000020c
 8009ce0:	2000021c 	.word	0x2000021c
 8009ce4:	2000022c 	.word	0x2000022c

08009ce8 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	ed87 0a02 	vstr	s0, [r7, #8]
 8009cf4:	edc7 0a01 	vstr	s1, [r7, #4]
 8009cf8:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 8009cfc:	f04f 0300 	mov.w	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d18:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009d1c:	ed97 7a00 	vldr	s14, [r7]
 8009d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d24:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	ee07 3a90 	vmov	s15, r3
}
 8009d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 8009d46:	2301      	movs	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60bb      	str	r3, [r7, #8]
 8009d4e:	e007      	b.n	8009d60 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	fb02 f303 	mul.w	r3, r2, r3
 8009d58:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	60bb      	str	r3, [r7, #8]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	dbf3      	blt.n	8009d50 <IntegerPower+0x14>
	}
	return pattern_num;
 8009d68:	68fb      	ldr	r3, [r7, #12]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 8009d76:	b480      	push	{r7}
 8009d78:	b08b      	sub	sp, #44	; 0x2c
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	ed87 0a03 	vstr	s0, [r7, #12]
 8009d80:	edc7 0a02 	vstr	s1, [r7, #8]
 8009d84:	ed87 1a01 	vstr	s2, [r7, #4]
 8009d88:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 8009d8a:	edd7 6a03 	vldr	s13, [r7, #12]
 8009d8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d96:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 8009d9a:	edd7 6a02 	vldr	s13, [r7, #8]
 8009d9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da6:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 8009daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8009db2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dc4:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	623b      	str	r3, [r7, #32]
 8009dd0:	e018      	b.n	8009e04 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	ee07 3a90 	vmov	s15, r3
 8009dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009de4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dec:	ed97 7a07 	vldr	s14, [r7, #28]
 8009df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df8:	db01      	blt.n	8009dfe <GetBatteryLevel+0x88>
		{
			pattern = i;
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	3301      	adds	r3, #1
 8009e02:	623b      	str	r3, [r7, #32]
 8009e04:	6a3a      	ldr	r2, [r7, #32]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	dbe2      	blt.n	8009dd2 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	372c      	adds	r7, #44	; 0x2c
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <TimeMonitor>:

int timer=0, t=0;
//以下割り込みで呼ぶ関数
//このあたりの関数は、構造体変数を扱うファイルにまとめたほうがいいかもしれない。(メインのアルゴリズム、アクション)
void TimeMonitor()
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	af00      	add	r7, sp, #0
	//いろいろな時間を測って監視する。

}
 8009e1e:	bf00      	nop
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <UpdatePhisicalDataFromEnc>:


void UpdatePhisicalDataFromEnc()
{
 8009e28:	b5b0      	push	{r4, r5, r7, lr}
 8009e2a:	af00      	add	r7, sp, #0

	//エンコーダパルスをどう扱うか。今のままだと1msでの変位が大きいと目標パルス量を大きく通り越してしまう。→速度の取得時にはリセットをしないで、前回のパルスからの差を取ればいいかも。
	//TIM3->CNT - INITIAL_PULSE <= target_pulse の間は直進。みたいなプログラムにして、breakした瞬間にパルスリセット。
	pulse_displacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE/*&keep_counter[LEFT]*/);
 8009e2c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009e30:	4857      	ldr	r0, [pc, #348]	; (8009f90 <UpdatePhisicalDataFromEnc+0x168>)
 8009e32:	f7ff fed9 	bl	8009be8 <GetPulseDisplacement>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b56      	ldr	r3, [pc, #344]	; (8009f94 <UpdatePhisicalDataFromEnc+0x16c>)
 8009e3a:	601a      	str	r2, [r3, #0]
	pulse_displacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE/*&keep_counter[RIGHT]*/);
 8009e3c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009e40:	4855      	ldr	r0, [pc, #340]	; (8009f98 <UpdatePhisicalDataFromEnc+0x170>)
 8009e42:	f7ff fed1 	bl	8009be8 <GetPulseDisplacement>
 8009e46:	4602      	mov	r2, r0
 8009e48:	4b52      	ldr	r3, [pc, #328]	; (8009f94 <UpdatePhisicalDataFromEnc+0x16c>)
 8009e4a:	605a      	str	r2, [r3, #4]

	//速度 mm/s
	current_velocity[LEFT] = ( (float)pulse_displacement[LEFT] * MM_PER_PULSE ) / T1;
 8009e4c:	4b51      	ldr	r3, [pc, #324]	; (8009f94 <UpdatePhisicalDataFromEnc+0x16c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	ee07 3a90 	vmov	s15, r3
 8009e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e58:	ee17 0a90 	vmov	r0, s15
 8009e5c:	f7fe faac 	bl	80083b8 <__aeabi_f2d>
 8009e60:	a345      	add	r3, pc, #276	; (adr r3, 8009f78 <UpdatePhisicalDataFromEnc+0x150>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7fe faff 	bl	8008468 <__aeabi_dmul>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	4618      	mov	r0, r3
 8009e70:	4621      	mov	r1, r4
 8009e72:	a343      	add	r3, pc, #268	; (adr r3, 8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7fe fc20 	bl	80086bc <__aeabi_ddiv>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	4618      	mov	r0, r3
 8009e82:	4621      	mov	r1, r4
 8009e84:	f7fe fdc8 	bl	8008a18 <__aeabi_d2f>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	4b44      	ldr	r3, [pc, #272]	; (8009f9c <UpdatePhisicalDataFromEnc+0x174>)
 8009e8c:	601a      	str	r2, [r3, #0]
	current_velocity[RIGHT] = ( (float)pulse_displacement[RIGHT] * MM_PER_PULSE ) / T1;
 8009e8e:	4b41      	ldr	r3, [pc, #260]	; (8009f94 <UpdatePhisicalDataFromEnc+0x16c>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e9a:	ee17 0a90 	vmov	r0, s15
 8009e9e:	f7fe fa8b 	bl	80083b8 <__aeabi_f2d>
 8009ea2:	a335      	add	r3, pc, #212	; (adr r3, 8009f78 <UpdatePhisicalDataFromEnc+0x150>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f7fe fade 	bl	8008468 <__aeabi_dmul>
 8009eac:	4603      	mov	r3, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	a332      	add	r3, pc, #200	; (adr r3, 8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f7fe fbff 	bl	80086bc <__aeabi_ddiv>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	f7fe fda7 	bl	8008a18 <__aeabi_d2f>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	4b33      	ldr	r3, [pc, #204]	; (8009f9c <UpdatePhisicalDataFromEnc+0x174>)
 8009ece:	605a      	str	r2, [r3, #4]

	//移動量 mm/msを積算
	total_pulse[LEFT] += pulse_displacement[LEFT];
 8009ed0:	4b33      	ldr	r3, [pc, #204]	; (8009fa0 <UpdatePhisicalDataFromEnc+0x178>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4b2f      	ldr	r3, [pc, #188]	; (8009f94 <UpdatePhisicalDataFromEnc+0x16c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4413      	add	r3, r2
 8009eda:	4a31      	ldr	r2, [pc, #196]	; (8009fa0 <UpdatePhisicalDataFromEnc+0x178>)
 8009edc:	6013      	str	r3, [r2, #0]
	total_pulse[RIGHT] += pulse_displacement[RIGHT];
 8009ede:	4b30      	ldr	r3, [pc, #192]	; (8009fa0 <UpdatePhisicalDataFromEnc+0x178>)
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	4b2c      	ldr	r3, [pc, #176]	; (8009f94 <UpdatePhisicalDataFromEnc+0x16c>)
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	4a2d      	ldr	r2, [pc, #180]	; (8009fa0 <UpdatePhisicalDataFromEnc+0x178>)
 8009eea:	6053      	str	r3, [r2, #4]
	total_pulse[BODY] = total_pulse[LEFT]+total_pulse[RIGHT];
 8009eec:	4b2c      	ldr	r3, [pc, #176]	; (8009fa0 <UpdatePhisicalDataFromEnc+0x178>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	4b2b      	ldr	r3, [pc, #172]	; (8009fa0 <UpdatePhisicalDataFromEnc+0x178>)
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	4a2a      	ldr	r2, [pc, #168]	; (8009fa0 <UpdatePhisicalDataFromEnc+0x178>)
 8009ef8:	6093      	str	r3, [r2, #8]
	//角速度 rad/s
	angular_v = ( current_velocity[LEFT] - current_velocity[RIGHT] ) / TREAD_WIDTH;
 8009efa:	4b28      	ldr	r3, [pc, #160]	; (8009f9c <UpdatePhisicalDataFromEnc+0x174>)
 8009efc:	ed93 7a00 	vldr	s14, [r3]
 8009f00:	4b26      	ldr	r3, [pc, #152]	; (8009f9c <UpdatePhisicalDataFromEnc+0x174>)
 8009f02:	edd3 7a01 	vldr	s15, [r3, #4]
 8009f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f0a:	ee17 0a90 	vmov	r0, s15
 8009f0e:	f7fe fa53 	bl	80083b8 <__aeabi_f2d>
 8009f12:	a31d      	add	r3, pc, #116	; (adr r3, 8009f88 <UpdatePhisicalDataFromEnc+0x160>)
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f7fe fbd0 	bl	80086bc <__aeabi_ddiv>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	460c      	mov	r4, r1
 8009f20:	4618      	mov	r0, r3
 8009f22:	4621      	mov	r1, r4
 8009f24:	f7fe fd78 	bl	8008a18 <__aeabi_d2f>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	4b1e      	ldr	r3, [pc, #120]	; (8009fa4 <UpdatePhisicalDataFromEnc+0x17c>)
 8009f2c:	601a      	str	r2, [r3, #0]

	//角度 rad/msを積算
	angle += angular_v * T1;
 8009f2e:	4b1e      	ldr	r3, [pc, #120]	; (8009fa8 <UpdatePhisicalDataFromEnc+0x180>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fa40 	bl	80083b8 <__aeabi_f2d>
 8009f38:	4604      	mov	r4, r0
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	4b19      	ldr	r3, [pc, #100]	; (8009fa4 <UpdatePhisicalDataFromEnc+0x17c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe fa39 	bl	80083b8 <__aeabi_f2d>
 8009f46:	a30e      	add	r3, pc, #56	; (adr r3, 8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	f7fe fa8c 	bl	8008468 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7fe f8d0 	bl	80080fc <__adddf3>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	4618      	mov	r0, r3
 8009f62:	4621      	mov	r1, r4
 8009f64:	f7fe fd58 	bl	8008a18 <__aeabi_d2f>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <UpdatePhisicalDataFromEnc+0x180>)
 8009f6c:	601a      	str	r2, [r3, #0]
	//ここまでがエンコーダからのUpdate
}
 8009f6e:	bf00      	nop
 8009f70:	bdb0      	pop	{r4, r5, r7, pc}
 8009f72:	bf00      	nop
 8009f74:	f3af 8000 	nop.w
 8009f78:	317249d5 	.word	0x317249d5
 8009f7c:	3f502de0 	.word	0x3f502de0
 8009f80:	d2f1a9fc 	.word	0xd2f1a9fc
 8009f84:	3f50624d 	.word	0x3f50624d
 8009f88:	33333333 	.word	0x33333333
 8009f8c:	40423333 	.word	0x40423333
 8009f90:	40000424 	.word	0x40000424
 8009f94:	20000268 	.word	0x20000268
 8009f98:	40000824 	.word	0x40000824
 8009f9c:	20000270 	.word	0x20000270
 8009fa0:	2000027c 	.word	0x2000027c
 8009fa4:	20000288 	.word	0x20000288
 8009fa8:	2000028c 	.word	0x2000028c
 8009fac:	00000000 	.word	0x00000000

08009fb0 <ControlMotor>:
void ControlMotor()
{
 8009fb0:	b5b0      	push	{r4, r5, r7, lr}
 8009fb2:	af00      	add	r7, sp, #0
	//ここで更新する変数をグローバルに、もしくは構造体で書ければ、あとはメインのアルゴリズムを記述するだけ？

	UpdatePhisicalDataFromEnc();
 8009fb4:	f7ff ff38 	bl	8009e28 <UpdatePhisicalDataFromEnc>
	//ここからは目標値と現在値を用いた制御。

	//タイヤ目標値計算
	//減速させすぎると、目標パルスに達する前にマイナスに振れてしまう

	target_velocity[BODY] += acceleration;
 8009fb8:	4b61      	ldr	r3, [pc, #388]	; (800a140 <ControlMotor+0x190>)
 8009fba:	ed93 7a02 	vldr	s14, [r3, #8]
 8009fbe:	4b61      	ldr	r3, [pc, #388]	; (800a144 <ControlMotor+0x194>)
 8009fc0:	edd3 7a00 	vldr	s15, [r3]
 8009fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fc8:	4b5d      	ldr	r3, [pc, #372]	; (800a140 <ControlMotor+0x190>)
 8009fca:	edc3 7a02 	vstr	s15, [r3, #8]
	target_angular_v += angular_acceleration;
 8009fce:	4b5e      	ldr	r3, [pc, #376]	; (800a148 <ControlMotor+0x198>)
 8009fd0:	ed93 7a00 	vldr	s14, [r3]
 8009fd4:	4b5d      	ldr	r3, [pc, #372]	; (800a14c <ControlMotor+0x19c>)
 8009fd6:	edd3 7a00 	vldr	s15, [r3]
 8009fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fde:	4b5a      	ldr	r3, [pc, #360]	; (800a148 <ControlMotor+0x198>)
 8009fe0:	edc3 7a00 	vstr	s15, [r3]


	target_velocity[RIGHT] = ( target_velocity[BODY]*2 - target_angular_v * TREAD_WIDTH )/2;
 8009fe4:	4b56      	ldr	r3, [pc, #344]	; (800a140 <ControlMotor+0x190>)
 8009fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8009fea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009fee:	ee17 0a90 	vmov	r0, s15
 8009ff2:	f7fe f9e1 	bl	80083b8 <__aeabi_f2d>
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	4b53      	ldr	r3, [pc, #332]	; (800a148 <ControlMotor+0x198>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe f9da 	bl	80083b8 <__aeabi_f2d>
 800a004:	a34c      	add	r3, pc, #304	; (adr r3, 800a138 <ControlMotor+0x188>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	f7fe fa2d 	bl	8008468 <__aeabi_dmul>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	f7fe f86f 	bl	80080f8 <__aeabi_dsub>
 800a01a:	4603      	mov	r3, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	4618      	mov	r0, r3
 800a020:	4621      	mov	r1, r4
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a02a:	f7fe fb47 	bl	80086bc <__aeabi_ddiv>
 800a02e:	4603      	mov	r3, r0
 800a030:	460c      	mov	r4, r1
 800a032:	4618      	mov	r0, r3
 800a034:	4621      	mov	r1, r4
 800a036:	f7fe fcef 	bl	8008a18 <__aeabi_d2f>
 800a03a:	4602      	mov	r2, r0
 800a03c:	4b40      	ldr	r3, [pc, #256]	; (800a140 <ControlMotor+0x190>)
 800a03e:	605a      	str	r2, [r3, #4]
	target_velocity[LEFT] = ( target_angular_v *TREAD_WIDTH ) + target_velocity[RIGHT];
 800a040:	4b41      	ldr	r3, [pc, #260]	; (800a148 <ControlMotor+0x198>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe f9b7 	bl	80083b8 <__aeabi_f2d>
 800a04a:	a33b      	add	r3, pc, #236	; (adr r3, 800a138 <ControlMotor+0x188>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f7fe fa0a 	bl	8008468 <__aeabi_dmul>
 800a054:	4603      	mov	r3, r0
 800a056:	460c      	mov	r4, r1
 800a058:	4625      	mov	r5, r4
 800a05a:	461c      	mov	r4, r3
 800a05c:	4b38      	ldr	r3, [pc, #224]	; (800a140 <ControlMotor+0x190>)
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4618      	mov	r0, r3
 800a062:	f7fe f9a9 	bl	80083b8 <__aeabi_f2d>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4620      	mov	r0, r4
 800a06c:	4629      	mov	r1, r5
 800a06e:	f7fe f845 	bl	80080fc <__adddf3>
 800a072:	4603      	mov	r3, r0
 800a074:	460c      	mov	r4, r1
 800a076:	4618      	mov	r0, r3
 800a078:	4621      	mov	r1, r4
 800a07a:	f7fe fccd 	bl	8008a18 <__aeabi_d2f>
 800a07e:	4602      	mov	r2, r0
 800a080:	4b2f      	ldr	r3, [pc, #188]	; (800a140 <ControlMotor+0x190>)
 800a082:	601a      	str	r2, [r3, #0]

	//制御出力値生成
	//PIDControl(int n, int T, float target, float current, int *output);
	velocity_left_out = PIDControl( L_VELO, T1, target_velocity[LEFT], current_velocity[LEFT]);
 800a084:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <ControlMotor+0x190>)
 800a086:	edd3 7a00 	vldr	s15, [r3]
 800a08a:	4b31      	ldr	r3, [pc, #196]	; (800a150 <ControlMotor+0x1a0>)
 800a08c:	ed93 7a00 	vldr	s14, [r3]
 800a090:	eeb0 1a47 	vmov.f32	s2, s14
 800a094:	eef0 0a67 	vmov.f32	s1, s15
 800a098:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800a154 <ControlMotor+0x1a4>
 800a09c:	2000      	movs	r0, #0
 800a09e:	f001 fab7 	bl	800b610 <PIDControl>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	4b2c      	ldr	r3, [pc, #176]	; (800a158 <ControlMotor+0x1a8>)
 800a0a6:	601a      	str	r2, [r3, #0]
	velocity_right_out = PIDControl( R_VELO, T1, target_velocity[RIGHT], current_velocity[RIGHT]);
 800a0a8:	4b25      	ldr	r3, [pc, #148]	; (800a140 <ControlMotor+0x190>)
 800a0aa:	edd3 7a01 	vldr	s15, [r3, #4]
 800a0ae:	4b28      	ldr	r3, [pc, #160]	; (800a150 <ControlMotor+0x1a0>)
 800a0b0:	ed93 7a01 	vldr	s14, [r3, #4]
 800a0b4:	eeb0 1a47 	vmov.f32	s2, s14
 800a0b8:	eef0 0a67 	vmov.f32	s1, s15
 800a0bc:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800a154 <ControlMotor+0x1a4>
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f001 faa5 	bl	800b610 <PIDControl>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	4b24      	ldr	r3, [pc, #144]	; (800a15c <ControlMotor+0x1ac>)
 800a0ca:	601a      	str	r2, [r3, #0]
	//PIDControl( B_VELO, T1, target, current, &left);
	wall_left_out = PIDControl( D_WALL, T1, photo[SL], photo[SR]+photo_diff);
 800a0cc:	4b24      	ldr	r3, [pc, #144]	; (800a160 <ControlMotor+0x1b0>)
 800a0ce:	edd3 6a02 	vldr	s13, [r3, #8]
 800a0d2:	4b23      	ldr	r3, [pc, #140]	; (800a160 <ControlMotor+0x1b0>)
 800a0d4:	ed93 7a01 	vldr	s14, [r3, #4]
 800a0d8:	4b22      	ldr	r3, [pc, #136]	; (800a164 <ControlMotor+0x1b4>)
 800a0da:	edd3 7a00 	vldr	s15, [r3]
 800a0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0e2:	eeb0 1a67 	vmov.f32	s2, s15
 800a0e6:	eef0 0a66 	vmov.f32	s1, s13
 800a0ea:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a154 <ControlMotor+0x1a4>
 800a0ee:	2003      	movs	r0, #3
 800a0f0:	f001 fa8e 	bl	800b610 <PIDControl>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	4b1c      	ldr	r3, [pc, #112]	; (800a168 <ControlMotor+0x1b8>)
 800a0f8:	601a      	str	r2, [r3, #0]

	wall_right_out = -wall_left_out;
 800a0fa:	4b1b      	ldr	r3, [pc, #108]	; (800a168 <ControlMotor+0x1b8>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	425b      	negs	r3, r3
 800a100:	4a1a      	ldr	r2, [pc, #104]	; (800a16c <ControlMotor+0x1bc>)
 800a102:	6013      	str	r3, [r2, #0]

	L_motor = wall_left_out + velocity_left_out;
 800a104:	4b18      	ldr	r3, [pc, #96]	; (800a168 <ControlMotor+0x1b8>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b13      	ldr	r3, [pc, #76]	; (800a158 <ControlMotor+0x1a8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4413      	add	r3, r2
 800a10e:	4a18      	ldr	r2, [pc, #96]	; (800a170 <ControlMotor+0x1c0>)
 800a110:	6013      	str	r3, [r2, #0]
	R_motor = wall_right_out + velocity_right_out;
 800a112:	4b16      	ldr	r3, [pc, #88]	; (800a16c <ControlMotor+0x1bc>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	4b11      	ldr	r3, [pc, #68]	; (800a15c <ControlMotor+0x1ac>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4413      	add	r3, r2
 800a11c:	4a15      	ldr	r2, [pc, #84]	; (800a174 <ControlMotor+0x1c4>)
 800a11e:	6013      	str	r3, [r2, #0]

	//モータに出力
	Motor_Switch( L_motor, R_motor );
 800a120:	4b13      	ldr	r3, [pc, #76]	; (800a170 <ControlMotor+0x1c0>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	4b13      	ldr	r3, [pc, #76]	; (800a174 <ControlMotor+0x1c4>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4619      	mov	r1, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	f002 ffac 	bl	800d088 <Motor_Switch>
//	int left = 300, right = 300;
//	Motor_Switch( left, right );

}
 800a130:	bf00      	nop
 800a132:	bdb0      	pop	{r4, r5, r7, pc}
 800a134:	f3af 8000 	nop.w
 800a138:	33333333 	.word	0x33333333
 800a13c:	40423333 	.word	0x40423333
 800a140:	20000290 	.word	0x20000290
 800a144:	200002a0 	.word	0x200002a0
 800a148:	200002a4 	.word	0x200002a4
 800a14c:	200002a8 	.word	0x200002a8
 800a150:	20000270 	.word	0x20000270
 800a154:	3a83126f 	.word	0x3a83126f
 800a158:	200002ac 	.word	0x200002ac
 800a15c:	200002b0 	.word	0x200002b0
 800a160:	20000244 	.word	0x20000244
 800a164:	20000264 	.word	0x20000264
 800a168:	200002b8 	.word	0x200002b8
 800a16c:	200002b4 	.word	0x200002b4
 800a170:	200002bc 	.word	0x200002bc
 800a174:	200002c0 	.word	0x200002c0

0800a178 <UpdatePhotoData>:

void UpdatePhotoData()
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
	photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a17c:	4b18      	ldr	r3, [pc, #96]	; (800a1e0 <UpdatePhotoData+0x68>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2200      	movs	r2, #0
 800a182:	4619      	mov	r1, r3
 800a184:	200a      	movs	r0, #10
 800a186:	f7ff fd45 	bl	8009c14 <GetWallDataAverage>
 800a18a:	eef0 7a40 	vmov.f32	s15, s0
 800a18e:	4b15      	ldr	r3, [pc, #84]	; (800a1e4 <UpdatePhotoData+0x6c>)
 800a190:	edc3 7a00 	vstr	s15, [r3]
	photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a194:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <UpdatePhotoData+0x68>)
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	4619      	mov	r1, r3
 800a19c:	200a      	movs	r0, #10
 800a19e:	f7ff fd39 	bl	8009c14 <GetWallDataAverage>
 800a1a2:	eef0 7a40 	vmov.f32	s15, s0
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <UpdatePhotoData+0x6c>)
 800a1a8:	edc3 7a01 	vstr	s15, [r3, #4]
	photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a1ac:	4b0e      	ldr	r3, [pc, #56]	; (800a1e8 <UpdatePhotoData+0x70>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	200a      	movs	r0, #10
 800a1b6:	f7ff fd2d 	bl	8009c14 <GetWallDataAverage>
 800a1ba:	eef0 7a40 	vmov.f32	s15, s0
 800a1be:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <UpdatePhotoData+0x6c>)
 800a1c0:	edc3 7a02 	vstr	s15, [r3, #8]
	photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a1c4:	4b08      	ldr	r3, [pc, #32]	; (800a1e8 <UpdatePhotoData+0x70>)
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2203      	movs	r2, #3
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	200a      	movs	r0, #10
 800a1ce:	f7ff fd21 	bl	8009c14 <GetWallDataAverage>
 800a1d2:	eef0 7a40 	vmov.f32	s15, s0
 800a1d6:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <UpdatePhotoData+0x6c>)
 800a1d8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800a1dc:	bf00      	nop
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	2000042c 	.word	0x2000042c
 800a1e4:	20000244 	.word	0x20000244
 800a1e8:	20000438 	.word	0x20000438

0800a1ec <HAL_TIM_PeriodElapsedCallback>:


//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a0c      	ldr	r2, [pc, #48]	; (800a228 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d103      	bne.n	800a204 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TimeMonitor();
 800a1fc:	f7ff fe0d 	bl	8009e1a <TimeMonitor>
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		//出力値をモータ出力用関数に渡す
		ControlMotor();
 800a200:	f7ff fed6 	bl	8009fb0 <ControlMotor>
	}

	if( htim == &htim8)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a09      	ldr	r2, [pc, #36]	; (800a22c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d108      	bne.n	800a21e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		timer += t;
 800a20c:	4b08      	ldr	r3, [pc, #32]	; (800a230 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	4b08      	ldr	r3, [pc, #32]	; (800a234 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4413      	add	r3, r2
 800a216:	4a06      	ldr	r2, [pc, #24]	; (800a230 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800a218:	6013      	str	r3, [r2, #0]
		//壁センサデータの更新だけ
		UpdatePhotoData();
 800a21a:	f7ff ffad 	bl	800a178 <UpdatePhotoData>

	}
}
 800a21e:	bf00      	nop
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000818 	.word	0x20000818
 800a22c:	20000590 	.word	0x20000590
 800a230:	2000023c 	.word	0x2000023c
 800a234:	20000240 	.word	0x20000240

0800a238 <wall_store_running>:
	flash_store_init();

}
//壁データの書き込み(走行中)。修復用も作る。座標指定と書き込みデータ
void wall_store_running(uint8_t x, uint8_t y)
{
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	460a      	mov	r2, r1
 800a242:	71fb      	strb	r3, [r7, #7]
 800a244:	4613      	mov	r3, r2
 800a246:	71bb      	strb	r3, [r7, #6]
	//xの数×4×区画数byte分アドレスオフセット
	//yの数×4byte分アドレスオフセット
	uint32_t address = start_adress_sector1;
 800a248:	4b2c      	ldr	r3, [pc, #176]	; (800a2fc <wall_store_running+0xc4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	60fb      	str	r3, [r7, #12]
	//1区画につき、4byte×4=16byte。xを1増やすと16byte先になる。yを1増やすと16byte×区画数分先になる。
	address += ( x*16) + (y*16*(NUMBER_OF_SQUARES) );//4×4区画とすると、(0,0)でスタートアドレス。1,
 800a24e:	79f9      	ldrb	r1, [r7, #7]
 800a250:	79ba      	ldrb	r2, [r7, #6]
 800a252:	4613      	mov	r3, r2
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	4413      	add	r3, r2
 800a258:	440b      	add	r3, r1
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	461a      	mov	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4413      	add	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]

	//デフォが北(0)。時計回り
	FLASH_Write_Word(address+0, Wall[x][y].north);
 800a264:	79fa      	ldrb	r2, [r7, #7]
 800a266:	79b9      	ldrb	r1, [r7, #6]
 800a268:	4825      	ldr	r0, [pc, #148]	; (800a300 <wall_store_running+0xc8>)
 800a26a:	4613      	mov	r3, r2
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	4413      	add	r3, r2
 800a270:	440b      	add	r3, r1
 800a272:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a276:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	4619      	mov	r1, r3
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f002 fdc6 	bl	800ce10 <FLASH_Write_Word>
	FLASH_Write_Word(address+4, Wall[x][y].east);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	1d1c      	adds	r4, r3, #4
 800a288:	79fa      	ldrb	r2, [r7, #7]
 800a28a:	79b9      	ldrb	r1, [r7, #6]
 800a28c:	481c      	ldr	r0, [pc, #112]	; (800a300 <wall_store_running+0xc8>)
 800a28e:	4613      	mov	r3, r2
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	4413      	add	r3, r2
 800a294:	440b      	add	r3, r1
 800a296:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a29a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f002 fdb4 	bl	800ce10 <FLASH_Write_Word>
	FLASH_Write_Word(address+8, Wall[x][y].south);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f103 0408 	add.w	r4, r3, #8
 800a2ae:	79fa      	ldrb	r2, [r7, #7]
 800a2b0:	79b9      	ldrb	r1, [r7, #6]
 800a2b2:	4813      	ldr	r0, [pc, #76]	; (800a300 <wall_store_running+0xc8>)
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	440b      	add	r3, r1
 800a2bc:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a2c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f002 fda1 	bl	800ce10 <FLASH_Write_Word>
	FLASH_Write_Word(address+12, Wall[x][y].west);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f103 040c 	add.w	r4, r3, #12
 800a2d4:	79fa      	ldrb	r2, [r7, #7]
 800a2d6:	79b9      	ldrb	r1, [r7, #6]
 800a2d8:	4809      	ldr	r0, [pc, #36]	; (800a300 <wall_store_running+0xc8>)
 800a2da:	4613      	mov	r3, r2
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	4413      	add	r3, r2
 800a2e0:	440b      	add	r3, r1
 800a2e2:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a2e6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f002 fd8e 	bl	800ce10 <FLASH_Write_Word>

}
 800a2f4:	bf00      	nop
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd90      	pop	{r4, r7, pc}
 800a2fc:	080140c0 	.word	0x080140c0
 800a300:	200004ec 	.word	0x200004ec

0800a304 <wall_set>:
//壁の更新xyグローバル
void wall_set(uint8_t x, uint8_t y, float side_left, float side_right, float front_left, float front_right){
 800a304:	b590      	push	{r4, r7, lr}
 800a306:	b089      	sub	sp, #36	; 0x24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	460a      	mov	r2, r1
 800a30e:	ed87 0a04 	vstr	s0, [r7, #16]
 800a312:	edc7 0a03 	vstr	s1, [r7, #12]
 800a316:	ed87 1a02 	vstr	s2, [r7, #8]
 800a31a:	edc7 1a01 	vstr	s3, [r7, #4]
 800a31e:	75fb      	strb	r3, [r7, #23]
 800a320:	4613      	mov	r3, r2
 800a322:	75bb      	strb	r3, [r7, #22]
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[my_direction] = (front_left + front_right)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800a324:	ed97 7a02 	vldr	s14, [r7, #8]
 800a328:	edd7 7a01 	vldr	s15, [r7, #4]
 800a32c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a330:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a338:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800a33c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a344:	bfcc      	ite	gt
 800a346:	2301      	movgt	r3, #1
 800a348:	2300      	movle	r3, #0
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	4bbc      	ldr	r3, [pc, #752]	; (800a640 <wall_set+0x33c>)
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	f107 0120 	add.w	r1, r7, #32
 800a354:	440b      	add	r3, r1
 800a356:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 1)%4] = side_right > RIGHT_WALL  ?  WALL :  NOWALL;
 800a35a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a35e:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800a644 <wall_set+0x340>
 800a362:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36a:	bfcc      	ite	gt
 800a36c:	2301      	movgt	r3, #1
 800a36e:	2300      	movle	r3, #0
 800a370:	b2d9      	uxtb	r1, r3
 800a372:	4bb3      	ldr	r3, [pc, #716]	; (800a640 <wall_set+0x33c>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	3301      	adds	r3, #1
 800a378:	425a      	negs	r2, r3
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	f002 0203 	and.w	r2, r2, #3
 800a382:	bf58      	it	pl
 800a384:	4253      	negpl	r3, r2
 800a386:	460a      	mov	r2, r1
 800a388:	f107 0120 	add.w	r1, r7, #32
 800a38c:	440b      	add	r3, r1
 800a38e:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 2)%4] = NOWALL;
 800a392:	4bab      	ldr	r3, [pc, #684]	; (800a640 <wall_set+0x33c>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	3302      	adds	r3, #2
 800a398:	425a      	negs	r2, r3
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	f002 0203 	and.w	r2, r2, #3
 800a3a2:	bf58      	it	pl
 800a3a4:	4253      	negpl	r3, r2
 800a3a6:	f107 0220 	add.w	r2, r7, #32
 800a3aa:	4413      	add	r3, r2
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 3)%4] = side_left > LEFT_WALL ?  WALL :  NOWALL;
 800a3b2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a3b6:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800a648 <wall_set+0x344>
 800a3ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c2:	bfcc      	ite	gt
 800a3c4:	2301      	movgt	r3, #1
 800a3c6:	2300      	movle	r3, #0
 800a3c8:	b2d9      	uxtb	r1, r3
 800a3ca:	4b9d      	ldr	r3, [pc, #628]	; (800a640 <wall_set+0x33c>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	3303      	adds	r3, #3
 800a3d0:	425a      	negs	r2, r3
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	f002 0203 	and.w	r2, r2, #3
 800a3da:	bf58      	it	pl
 800a3dc:	4253      	negpl	r3, r2
 800a3de:	460a      	mov	r2, r1
 800a3e0:	f107 0120 	add.w	r1, r7, #32
 800a3e4:	440b      	add	r3, r1
 800a3e6:	f803 2c08 	strb.w	r2, [r3, #-8]

	  //各方角の壁に壁の有無を代入
	  Wall[x][y].north = wall_dir[0];
 800a3ea:	7e3b      	ldrb	r3, [r7, #24]
 800a3ec:	7dfa      	ldrb	r2, [r7, #23]
 800a3ee:	7dbc      	ldrb	r4, [r7, #22]
 800a3f0:	f003 0303 	and.w	r3, r3, #3
 800a3f4:	b2d8      	uxtb	r0, r3
 800a3f6:	4995      	ldr	r1, [pc, #596]	; (800a64c <wall_set+0x348>)
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	4413      	add	r3, r2
 800a3fe:	191a      	adds	r2, r3, r4
 800a400:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a404:	f360 0301 	bfi	r3, r0, #0, #2
 800a408:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].east = wall_dir[1];
 800a40c:	7e7b      	ldrb	r3, [r7, #25]
 800a40e:	7dfa      	ldrb	r2, [r7, #23]
 800a410:	7dbc      	ldrb	r4, [r7, #22]
 800a412:	f003 0303 	and.w	r3, r3, #3
 800a416:	b2d8      	uxtb	r0, r3
 800a418:	498c      	ldr	r1, [pc, #560]	; (800a64c <wall_set+0x348>)
 800a41a:	4613      	mov	r3, r2
 800a41c:	00db      	lsls	r3, r3, #3
 800a41e:	4413      	add	r3, r2
 800a420:	191a      	adds	r2, r3, r4
 800a422:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a426:	f360 0383 	bfi	r3, r0, #2, #2
 800a42a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].south = wall_dir[2];
 800a42e:	7ebb      	ldrb	r3, [r7, #26]
 800a430:	7dfa      	ldrb	r2, [r7, #23]
 800a432:	7dbc      	ldrb	r4, [r7, #22]
 800a434:	f003 0303 	and.w	r3, r3, #3
 800a438:	b2d8      	uxtb	r0, r3
 800a43a:	4984      	ldr	r1, [pc, #528]	; (800a64c <wall_set+0x348>)
 800a43c:	4613      	mov	r3, r2
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	4413      	add	r3, r2
 800a442:	191a      	adds	r2, r3, r4
 800a444:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a448:	f360 1305 	bfi	r3, r0, #4, #2
 800a44c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].west = wall_dir[3];
 800a450:	7efb      	ldrb	r3, [r7, #27]
 800a452:	7dfa      	ldrb	r2, [r7, #23]
 800a454:	7dbc      	ldrb	r4, [r7, #22]
 800a456:	f003 0303 	and.w	r3, r3, #3
 800a45a:	b2d8      	uxtb	r0, r3
 800a45c:	497b      	ldr	r1, [pc, #492]	; (800a64c <wall_set+0x348>)
 800a45e:	4613      	mov	r3, r2
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	4413      	add	r3, r2
 800a464:	191a      	adds	r2, r3, r4
 800a466:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a46a:	f360 1387 	bfi	r3, r0, #6, #2
 800a46e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  uint32_t address;
	  if(y < (NUMBER_OF_SQUARES-1) )
 800a472:	7dbb      	ldrb	r3, [r7, #22]
 800a474:	2b07      	cmp	r3, #7
 800a476:	d834      	bhi.n	800a4e2 <wall_set+0x1de>
	  {
		  Wall[x][y+1].south = wall_dir[0];//北端でなければ
 800a478:	7e39      	ldrb	r1, [r7, #24]
 800a47a:	7dfa      	ldrb	r2, [r7, #23]
 800a47c:	7dbb      	ldrb	r3, [r7, #22]
 800a47e:	1c5c      	adds	r4, r3, #1
 800a480:	460b      	mov	r3, r1
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	b2d8      	uxtb	r0, r3
 800a488:	4970      	ldr	r1, [pc, #448]	; (800a64c <wall_set+0x348>)
 800a48a:	4613      	mov	r3, r2
 800a48c:	00db      	lsls	r3, r3, #3
 800a48e:	4413      	add	r3, r2
 800a490:	191a      	adds	r2, r3, r4
 800a492:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a496:	f360 1305 	bfi	r3, r0, #4, #2
 800a49a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( x*16) + ( (y+1)*16*(NUMBER_OF_SQUARES) );
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	011b      	lsls	r3, r3, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	7dbb      	ldrb	r3, [r7, #22]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	011b      	lsls	r3, r3, #4
 800a4b0:	18ca      	adds	r2, r1, r3
 800a4b2:	4b67      	ldr	r3, [pc, #412]	; (800a650 <wall_set+0x34c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+8, Wall[x][y+1].south);
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f103 0408 	add.w	r4, r3, #8
 800a4c0:	7dfa      	ldrb	r2, [r7, #23]
 800a4c2:	7dbb      	ldrb	r3, [r7, #22]
 800a4c4:	1c59      	adds	r1, r3, #1
 800a4c6:	4861      	ldr	r0, [pc, #388]	; (800a64c <wall_set+0x348>)
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	00db      	lsls	r3, r3, #3
 800a4cc:	4413      	add	r3, r2
 800a4ce:	440b      	add	r3, r1
 800a4d0:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a4d4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f002 fc97 	bl	800ce10 <FLASH_Write_Word>
	  }
	  if(x < (NUMBER_OF_SQUARES-1) )
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
 800a4e4:	2b07      	cmp	r3, #7
 800a4e6:	d834      	bhi.n	800a552 <wall_set+0x24e>
	  {
		  Wall[x+1][y].west = wall_dir[1];//東端でなければ
 800a4e8:	7e79      	ldrb	r1, [r7, #25]
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	7dbc      	ldrb	r4, [r7, #22]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	f003 0303 	and.w	r3, r3, #3
 800a4f6:	b2d8      	uxtb	r0, r3
 800a4f8:	4954      	ldr	r1, [pc, #336]	; (800a64c <wall_set+0x348>)
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	4413      	add	r3, r2
 800a500:	191a      	adds	r2, r3, r4
 800a502:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a506:	f360 1387 	bfi	r3, r0, #6, #2
 800a50a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( (x+1)*16) + ( (y)*16*(NUMBER_OF_SQUARES) );
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	3301      	adds	r3, #1
 800a512:	011b      	lsls	r3, r3, #4
 800a514:	4619      	mov	r1, r3
 800a516:	7dba      	ldrb	r2, [r7, #22]
 800a518:	4613      	mov	r3, r2
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	4413      	add	r3, r2
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	18ca      	adds	r2, r1, r3
 800a522:	4b4b      	ldr	r3, [pc, #300]	; (800a650 <wall_set+0x34c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4413      	add	r3, r2
 800a528:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+12, Wall[x+1][y].west);
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	f103 040c 	add.w	r4, r3, #12
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	7db9      	ldrb	r1, [r7, #22]
 800a536:	4845      	ldr	r0, [pc, #276]	; (800a64c <wall_set+0x348>)
 800a538:	4613      	mov	r3, r2
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	4413      	add	r3, r2
 800a53e:	440b      	add	r3, r1
 800a540:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a544:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	4619      	mov	r1, r3
 800a54c:	4620      	mov	r0, r4
 800a54e:	f002 fc5f 	bl	800ce10 <FLASH_Write_Word>
	  }
	  if(y > 0 )
 800a552:	7dbb      	ldrb	r3, [r7, #22]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d031      	beq.n	800a5bc <wall_set+0x2b8>
	  {
		  Wall[x][y-1].north = wall_dir[2];//南端でなければ
 800a558:	7eb9      	ldrb	r1, [r7, #26]
 800a55a:	7dfa      	ldrb	r2, [r7, #23]
 800a55c:	7dbb      	ldrb	r3, [r7, #22]
 800a55e:	1e5c      	subs	r4, r3, #1
 800a560:	460b      	mov	r3, r1
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	b2d8      	uxtb	r0, r3
 800a568:	4938      	ldr	r1, [pc, #224]	; (800a64c <wall_set+0x348>)
 800a56a:	4613      	mov	r3, r2
 800a56c:	00db      	lsls	r3, r3, #3
 800a56e:	4413      	add	r3, r2
 800a570:	191a      	adds	r2, r3, r4
 800a572:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a576:	f360 0301 	bfi	r3, r0, #0, #2
 800a57a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( x*16) + ( (y-1)*16*(NUMBER_OF_SQUARES) );
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	011b      	lsls	r3, r3, #4
 800a582:	4619      	mov	r1, r3
 800a584:	7dbb      	ldrb	r3, [r7, #22]
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	4613      	mov	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	4413      	add	r3, r2
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	18ca      	adds	r2, r1, r3
 800a592:	4b2f      	ldr	r3, [pc, #188]	; (800a650 <wall_set+0x34c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4413      	add	r3, r2
 800a598:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+0, Wall[x][y-1].north);
 800a59a:	7dfa      	ldrb	r2, [r7, #23]
 800a59c:	7dbb      	ldrb	r3, [r7, #22]
 800a59e:	1e59      	subs	r1, r3, #1
 800a5a0:	482a      	ldr	r0, [pc, #168]	; (800a64c <wall_set+0x348>)
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	00db      	lsls	r3, r3, #3
 800a5a6:	4413      	add	r3, r2
 800a5a8:	440b      	add	r3, r1
 800a5aa:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a5ae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	69f8      	ldr	r0, [r7, #28]
 800a5b8:	f002 fc2a 	bl	800ce10 <FLASH_Write_Word>
	  }
	  if(x > 0 )
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d033      	beq.n	800a62a <wall_set+0x326>
	  {
		  Wall[x-1][y].east = wall_dir[3];//西端でなければ
 800a5c2:	7ef9      	ldrb	r1, [r7, #27]
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	1e5a      	subs	r2, r3, #1
 800a5c8:	7dbc      	ldrb	r4, [r7, #22]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	f003 0303 	and.w	r3, r3, #3
 800a5d0:	b2d8      	uxtb	r0, r3
 800a5d2:	491e      	ldr	r1, [pc, #120]	; (800a64c <wall_set+0x348>)
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	00db      	lsls	r3, r3, #3
 800a5d8:	4413      	add	r3, r2
 800a5da:	191a      	adds	r2, r3, r4
 800a5dc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a5e0:	f360 0383 	bfi	r3, r0, #2, #2
 800a5e4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( (x-1)*16) + ( y*16*(NUMBER_OF_SQUARES) );
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	7dba      	ldrb	r2, [r7, #22]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	011b      	lsls	r3, r3, #4
 800a5fa:	18ca      	adds	r2, r1, r3
 800a5fc:	4b14      	ldr	r3, [pc, #80]	; (800a650 <wall_set+0x34c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4413      	add	r3, r2
 800a602:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+4, Wall[x-1][y].east);
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	1d1c      	adds	r4, r3, #4
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	1e5a      	subs	r2, r3, #1
 800a60c:	7db9      	ldrb	r1, [r7, #22]
 800a60e:	480f      	ldr	r0, [pc, #60]	; (800a64c <wall_set+0x348>)
 800a610:	4613      	mov	r3, r2
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	4413      	add	r3, r2
 800a616:	440b      	add	r3, r1
 800a618:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a61c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a620:	b2db      	uxtb	r3, r3
 800a622:	4619      	mov	r1, r3
 800a624:	4620      	mov	r0, r4
 800a626:	f002 fbf3 	bl	800ce10 <FLASH_Write_Word>
	  }

	  //flashに書き込む
	  wall_store_running(x,y);
 800a62a:	7dba      	ldrb	r2, [r7, #22]
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
 800a62e:	4611      	mov	r1, r2
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff fe01 	bl	800a238 <wall_store_running>
}
 800a636:	bf00      	nop
 800a638:	3724      	adds	r7, #36	; 0x24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd90      	pop	{r4, r7, pc}
 800a63e:	bf00      	nop
 800a640:	200002c4 	.word	0x200002c4
 800a644:	42c80000 	.word	0x42c80000
 800a648:	430c0000 	.word	0x430c0000
 800a64c:	200004ec 	.word	0x200004ec
 800a650:	080140c0 	.word	0x080140c0

0800a654 <UpdateWalkMap>:
	}

}
//評価値マップ生成。
uint16_t walk_map[NUMBER_OF_SQUARES][NUMBER_OF_SQUARES];
void UpdateWalkMap(){
 800a654:	b490      	push	{r4, r7}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	2300      	movs	r3, #0
 800a660:	60bb      	str	r3, [r7, #8]
 800a662:	2300      	movs	r3, #0
 800a664:	607b      	str	r3, [r7, #4]
 800a666:	2300      	movs	r3, #0
 800a668:	603b      	str	r3, [r7, #0]

	//区画数に応じて"?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?大歩数 + ゴールのマス?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?-1"に初期?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
 800a66e:	e015      	b.n	800a69c <UpdateWalkMap+0x48>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a670:	2300      	movs	r3, #0
 800a672:	60bb      	str	r3, [r7, #8]
 800a674:	e00c      	b.n	800a690 <UpdateWalkMap+0x3c>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800a676:	49aa      	ldr	r1, [pc, #680]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	4613      	mov	r3, r2
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	4413      	add	r3, r2
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	4413      	add	r3, r2
 800a684:	2250      	movs	r2, #80	; 0x50
 800a686:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	3301      	adds	r3, #1
 800a68e:	60bb      	str	r3, [r7, #8]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b08      	cmp	r3, #8
 800a694:	ddef      	ble.n	800a676 <UpdateWalkMap+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	dde6      	ble.n	800a670 <UpdateWalkMap+0x1c>
		}
	}

	//ゴール区画?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?0に初期?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800a6a2:	2307      	movs	r3, #7
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	e015      	b.n	800a6d4 <UpdateWalkMap+0x80>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800a6a8:	2307      	movs	r3, #7
 800a6aa:	60bb      	str	r3, [r7, #8]
 800a6ac:	e00c      	b.n	800a6c8 <UpdateWalkMap+0x74>
			walk_map[i][j] = 0;
 800a6ae:	499c      	ldr	r1, [pc, #624]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	4413      	add	r3, r2
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	60bb      	str	r3, [r7, #8]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b07      	cmp	r3, #7
 800a6cc:	ddef      	ble.n	800a6ae <UpdateWalkMap+0x5a>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b07      	cmp	r3, #7
 800a6d8:	dde6      	ble.n	800a6a8 <UpdateWalkMap+0x54>
		}
	}

	//壁が無?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?として????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��区画に歩数を割り当てる�??
	do{
		flag = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	e10c      	b.n	800a8fe <UpdateWalkMap+0x2aa>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	60bb      	str	r3, [r7, #8]
 800a6e8:	e102      	b.n	800a8f0 <UpdateWalkMap+0x29c>
				  //map?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?"?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?大歩数 + ゴールのマス?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?-1"でなければ値を代入?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800a6ea:	498d      	ldr	r1, [pc, #564]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	4413      	add	r3, r2
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	4293      	cmp	r3, r2
 800a702:	f040 80f2 	bne.w	800a8ea <UpdateWalkMap+0x296>

					  if(Wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800a706:	4987      	ldr	r1, [pc, #540]	; (800a924 <UpdateWalkMap+0x2d0>)
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4613      	mov	r3, r2
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	4413      	add	r3, r2
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	4413      	add	r3, r2
 800a714:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800a718:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d02d      	beq.n	800a77e <UpdateWalkMap+0x12a>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	1c59      	adds	r1, r3, #1
 800a726:	487e      	ldr	r0, [pc, #504]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	4613      	mov	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	4413      	add	r3, r2
 800a730:	440b      	add	r3, r1
 800a732:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 800a736:	487a      	ldr	r0, [pc, #488]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	4613      	mov	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	4413      	add	r3, r2
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	4413      	add	r3, r2
 800a744:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a748:	4299      	cmp	r1, r3
 800a74a:	d918      	bls.n	800a77e <UpdateWalkMap+0x12a>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2b07      	cmp	r3, #7
 800a750:	dc15      	bgt.n	800a77e <UpdateWalkMap+0x12a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800a752:	4973      	ldr	r1, [pc, #460]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4613      	mov	r3, r2
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	4413      	add	r3, r2
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	4413      	add	r3, r2
 800a760:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	1c51      	adds	r1, r2, #1
 800a768:	3301      	adds	r3, #1
 800a76a:	b29c      	uxth	r4, r3
 800a76c:	486c      	ldr	r0, [pc, #432]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	4613      	mov	r3, r2
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	4413      	add	r3, r2
 800a776:	440b      	add	r3, r1
 800a778:	4622      	mov	r2, r4
 800a77a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					  }
					  if(Wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800a77e:	4969      	ldr	r1, [pc, #420]	; (800a924 <UpdateWalkMap+0x2d0>)
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	4613      	mov	r3, r2
 800a784:	00db      	lsls	r3, r3, #3
 800a786:	4413      	add	r3, r2
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	4413      	add	r3, r2
 800a78c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800a790:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b01      	cmp	r3, #1
 800a798:	d02d      	beq.n	800a7f6 <UpdateWalkMap+0x1a2>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	4960      	ldr	r1, [pc, #384]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	4413      	add	r3, r2
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800a7ae:	485c      	ldr	r0, [pc, #368]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	4413      	add	r3, r2
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a7c0:	4299      	cmp	r1, r3
 800a7c2:	d918      	bls.n	800a7f6 <UpdateWalkMap+0x1a2>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b07      	cmp	r3, #7
 800a7c8:	dc15      	bgt.n	800a7f6 <UpdateWalkMap+0x1a2>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800a7ca:	4955      	ldr	r1, [pc, #340]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	4413      	add	r3, r2
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	3201      	adds	r2, #1
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	b298      	uxth	r0, r3
 800a7e4:	494e      	ldr	r1, [pc, #312]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	00db      	lsls	r3, r3, #3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					  }
					  if(Wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800a7f6:	494b      	ldr	r1, [pc, #300]	; (800a924 <UpdateWalkMap+0x2d0>)
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	4413      	add	r3, r2
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	4413      	add	r3, r2
 800a804:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800a808:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d02d      	beq.n	800a86e <UpdateWalkMap+0x21a>
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	1e59      	subs	r1, r3, #1
 800a816:	4842      	ldr	r0, [pc, #264]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4613      	mov	r3, r2
 800a81c:	00db      	lsls	r3, r3, #3
 800a81e:	4413      	add	r3, r2
 800a820:	440b      	add	r3, r1
 800a822:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 800a826:	483e      	ldr	r0, [pc, #248]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	4613      	mov	r3, r2
 800a82c:	00db      	lsls	r3, r3, #3
 800a82e:	4413      	add	r3, r2
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	4413      	add	r3, r2
 800a834:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a838:	4299      	cmp	r1, r3
 800a83a:	d918      	bls.n	800a86e <UpdateWalkMap+0x21a>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dd15      	ble.n	800a86e <UpdateWalkMap+0x21a>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800a842:	4937      	ldr	r1, [pc, #220]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4613      	mov	r3, r2
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	4413      	add	r3, r2
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	4413      	add	r3, r2
 800a850:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	1e51      	subs	r1, r2, #1
 800a858:	3301      	adds	r3, #1
 800a85a:	b29c      	uxth	r4, r3
 800a85c:	4830      	ldr	r0, [pc, #192]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4613      	mov	r3, r2
 800a862:	00db      	lsls	r3, r3, #3
 800a864:	4413      	add	r3, r2
 800a866:	440b      	add	r3, r1
 800a868:	4622      	mov	r2, r4
 800a86a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					  }
					  if(Wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800a86e:	492d      	ldr	r1, [pc, #180]	; (800a924 <UpdateWalkMap+0x2d0>)
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4613      	mov	r3, r2
 800a874:	00db      	lsls	r3, r3, #3
 800a876:	4413      	add	r3, r2
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	4413      	add	r3, r2
 800a87c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800a880:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b01      	cmp	r3, #1
 800a888:	d02d      	beq.n	800a8e6 <UpdateWalkMap+0x292>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	1e5a      	subs	r2, r3, #1
 800a88e:	4924      	ldr	r1, [pc, #144]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a890:	4613      	mov	r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	4413      	add	r3, r2
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	4413      	add	r3, r2
 800a89a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800a89e:	4820      	ldr	r0, [pc, #128]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a8b0:	4299      	cmp	r1, r3
 800a8b2:	d918      	bls.n	800a8e6 <UpdateWalkMap+0x292>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	dd15      	ble.n	800a8e6 <UpdateWalkMap+0x292>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800a8ba:	4919      	ldr	r1, [pc, #100]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	4413      	add	r3, r2
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	3a01      	subs	r2, #1
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	b298      	uxth	r0, r3
 800a8d4:	4912      	ldr	r1, [pc, #72]	; (800a920 <UpdateWalkMap+0x2cc>)
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	00db      	lsls	r3, r3, #3
 800a8da:	4413      	add	r3, r2
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	4413      	add	r3, r2
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					  }

					  flag = 1;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	60bb      	str	r3, [r7, #8]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b08      	cmp	r3, #8
 800a8f4:	f77f aef9 	ble.w	800a6ea <UpdateWalkMap+0x96>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b08      	cmp	r3, #8
 800a902:	f77f aeef 	ble.w	800a6e4 <UpdateWalkMap+0x90>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
		  hosu++;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	3301      	adds	r3, #1
 800a90a:	603b      	str	r3, [r7, #0]
	}while(flag);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f47f aee3 	bne.w	800a6da <UpdateWalkMap+0x86>

}
 800a914:	bf00      	nop
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bc90      	pop	{r4, r7}
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20000448 	.word	0x20000448
 800a924:	200004ec 	.word	0x200004ec

0800a928 <LeftHandJudge>:
//ノード
//左手法での方向決定
void LeftHandJudge(uint8_t *x, uint8_t *y, direction *dir, char *action_type){
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
	/*--旋回モード選?��?--*/

	/*-=1-=1*/
    	  switch(*dir){
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	f200 81b7 	bhi.w	800acae <LeftHandJudge+0x386>
 800a940:	a201      	add	r2, pc, #4	; (adr r2, 800a948 <LeftHandJudge+0x20>)
 800a942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a946:	bf00      	nop
 800a948:	0800a959 	.word	0x0800a959
 800a94c:	0800aa2d 	.word	0x0800aa2d
 800a950:	0800ab01 	.word	0x0800ab01
 800a954:	0800abd5 	.word	0x0800abd5
    	  case north:

    		  if(Wall[*x][*y].west == NOWALL){
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	4619      	mov	r1, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	4618      	mov	r0, r3
 800a964:	4aab      	ldr	r2, [pc, #684]	; (800ac14 <LeftHandJudge+0x2ec>)
 800a966:	460b      	mov	r3, r1
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	440b      	add	r3, r1
 800a96c:	4403      	add	r3, r0
 800a96e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a972:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10c      	bne.n	800a996 <LeftHandJudge+0x6e>
    			  SelectAction( 'L');
 800a97c:	204c      	movs	r0, #76	; 0x4c
 800a97e:	f7ff f8cf 	bl	8009b20 <SelectAction>
    			  *dir = west;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2203      	movs	r2, #3
 800a986:	701a      	strb	r2, [r3, #0]
    		      *x-=1;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
    		  }



    		  break;
 800a994:	e18c      	b.n	800acb0 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].north == NOWALL){
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	4619      	mov	r1, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	4a9c      	ldr	r2, [pc, #624]	; (800ac14 <LeftHandJudge+0x2ec>)
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	00db      	lsls	r3, r3, #3
 800a9a8:	440b      	add	r3, r1
 800a9aa:	4403      	add	r3, r0
 800a9ac:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a9b0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10c      	bne.n	800a9d4 <LeftHandJudge+0xac>
    			  SelectAction('S');
 800a9ba:	2053      	movs	r0, #83	; 0x53
 800a9bc:	f7ff f8b0 	bl	8009b20 <SelectAction>
    			  *dir = north;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	701a      	strb	r2, [r3, #0]
    			  *y+=1;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	701a      	strb	r2, [r3, #0]
    		  break;
 800a9d2:	e16d      	b.n	800acb0 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].east == NOWALL){
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	4a8c      	ldr	r2, [pc, #560]	; (800ac14 <LeftHandJudge+0x2ec>)
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	440b      	add	r3, r1
 800a9e8:	4403      	add	r3, r0
 800a9ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a9ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10c      	bne.n	800aa12 <LeftHandJudge+0xea>
    			  SelectAction('R');
 800a9f8:	2052      	movs	r0, #82	; 0x52
 800a9fa:	f7ff f891 	bl	8009b20 <SelectAction>
    	          *dir = east;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	701a      	strb	r2, [r3, #0]
    		  break;
 800aa10:	e14e      	b.n	800acb0 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800aa12:	2042      	movs	r0, #66	; 0x42
 800aa14:	f7ff f884 	bl	8009b20 <SelectAction>
    	       	  *dir = south;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	701a      	strb	r2, [r3, #0]
    		  break;
 800aa2a:	e141      	b.n	800acb0 <LeftHandJudge+0x388>
    	  case east:
    		  if(Wall[*x][*y].north== NOWALL){
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	4619      	mov	r1, r3
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	4a76      	ldr	r2, [pc, #472]	; (800ac14 <LeftHandJudge+0x2ec>)
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	440b      	add	r3, r1
 800aa40:	4403      	add	r3, r0
 800aa42:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800aa46:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10c      	bne.n	800aa6a <LeftHandJudge+0x142>
    			  SelectAction('L');
 800aa50:	204c      	movs	r0, #76	; 0x4c
 800aa52:	f7ff f865 	bl	8009b20 <SelectAction>
    			  *dir = north;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	701a      	strb	r2, [r3, #0]
    			  *y+=1;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
      			  *dir = west;
      		      *x-=1;
    		  }

    		  break;
 800aa68:	e122      	b.n	800acb0 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].east == NOWALL){
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	4618      	mov	r0, r3
 800aa76:	4a67      	ldr	r2, [pc, #412]	; (800ac14 <LeftHandJudge+0x2ec>)
 800aa78:	460b      	mov	r3, r1
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	440b      	add	r3, r1
 800aa7e:	4403      	add	r3, r0
 800aa80:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800aa84:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10c      	bne.n	800aaa8 <LeftHandJudge+0x180>
    			  SelectAction('S');
 800aa8e:	2053      	movs	r0, #83	; 0x53
 800aa90:	f7ff f846 	bl	8009b20 <SelectAction>
    	          *dir = east;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	701a      	strb	r2, [r3, #0]
    		  break;
 800aaa6:	e103      	b.n	800acb0 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].south == NOWALL){
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	4619      	mov	r1, r3
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	4618      	mov	r0, r3
 800aab4:	4a57      	ldr	r2, [pc, #348]	; (800ac14 <LeftHandJudge+0x2ec>)
 800aab6:	460b      	mov	r3, r1
 800aab8:	00db      	lsls	r3, r3, #3
 800aaba:	440b      	add	r3, r1
 800aabc:	4403      	add	r3, r0
 800aabe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800aac2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10c      	bne.n	800aae6 <LeftHandJudge+0x1be>
    			  SelectAction('R');
 800aacc:	2052      	movs	r0, #82	; 0x52
 800aace:	f7ff f827 	bl	8009b20 <SelectAction>
    	       	  *dir = south;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2202      	movs	r2, #2
 800aad6:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	3b01      	subs	r3, #1
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	701a      	strb	r2, [r3, #0]
    		  break;
 800aae4:	e0e4      	b.n	800acb0 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800aae6:	2042      	movs	r0, #66	; 0x42
 800aae8:	f7ff f81a 	bl	8009b20 <SelectAction>
      			  *dir = west;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2203      	movs	r2, #3
 800aaf0:	701a      	strb	r2, [r3, #0]
      		      *x-=1;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	701a      	strb	r2, [r3, #0]
    		  break;
 800aafe:	e0d7      	b.n	800acb0 <LeftHandJudge+0x388>
    	  case south:
    		  if(Wall[*x][*y].east == NOWALL){
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	4619      	mov	r1, r3
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	4a41      	ldr	r2, [pc, #260]	; (800ac14 <LeftHandJudge+0x2ec>)
 800ab0e:	460b      	mov	r3, r1
 800ab10:	00db      	lsls	r3, r3, #3
 800ab12:	440b      	add	r3, r1
 800ab14:	4403      	add	r3, r0
 800ab16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ab1a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10c      	bne.n	800ab3e <LeftHandJudge+0x216>
    			  SelectAction('L');
 800ab24:	204c      	movs	r0, #76	; 0x4c
 800ab26:	f7fe fffb 	bl	8009b20 <SelectAction>
    	          *dir = east;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	3301      	adds	r3, #1
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
      			  *dir = north;
      			  *y+=1;
    		  }

    		  break;
 800ab3c:	e0b8      	b.n	800acb0 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].south == NOWALL){
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	4619      	mov	r1, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	4a32      	ldr	r2, [pc, #200]	; (800ac14 <LeftHandJudge+0x2ec>)
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	440b      	add	r3, r1
 800ab52:	4403      	add	r3, r0
 800ab54:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ab58:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10c      	bne.n	800ab7c <LeftHandJudge+0x254>
    			  SelectAction('S');
 800ab62:	2053      	movs	r0, #83	; 0x53
 800ab64:	f7fe ffdc 	bl	8009b20 <SelectAction>
    	       	  *dir = south;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	701a      	strb	r2, [r3, #0]
    		  break;
 800ab7a:	e099      	b.n	800acb0 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].west == NOWALL){
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	4619      	mov	r1, r3
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	4618      	mov	r0, r3
 800ab88:	4a22      	ldr	r2, [pc, #136]	; (800ac14 <LeftHandJudge+0x2ec>)
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	00db      	lsls	r3, r3, #3
 800ab8e:	440b      	add	r3, r1
 800ab90:	4403      	add	r3, r0
 800ab92:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ab96:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10c      	bne.n	800abba <LeftHandJudge+0x292>
    			  SelectAction('R');
 800aba0:	2052      	movs	r0, #82	; 0x52
 800aba2:	f7fe ffbd 	bl	8009b20 <SelectAction>
      			  *dir = west;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2203      	movs	r2, #3
 800abaa:	701a      	strb	r2, [r3, #0]
      		      *x-=1;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	701a      	strb	r2, [r3, #0]
    		  break;
 800abb8:	e07a      	b.n	800acb0 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800abba:	2042      	movs	r0, #66	; 0x42
 800abbc:	f7fe ffb0 	bl	8009b20 <SelectAction>
      			  *dir = north;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
      			  *y+=1;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	3301      	adds	r3, #1
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	701a      	strb	r2, [r3, #0]
    		  break;
 800abd2:	e06d      	b.n	800acb0 <LeftHandJudge+0x388>
    	  case west:
    		  if(Wall[*x][*y].south == NOWALL){
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	4619      	mov	r1, r3
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	4618      	mov	r0, r3
 800abe0:	4a0c      	ldr	r2, [pc, #48]	; (800ac14 <LeftHandJudge+0x2ec>)
 800abe2:	460b      	mov	r3, r1
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	440b      	add	r3, r1
 800abe8:	4403      	add	r3, r0
 800abea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800abee:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10f      	bne.n	800ac18 <LeftHandJudge+0x2f0>
    			  SelectAction('L');
 800abf8:	204c      	movs	r0, #76	; 0x4c
 800abfa:	f7fe ff91 	bl	8009b20 <SelectAction>
    	       	  *dir = south;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2202      	movs	r2, #2
 800ac02:	701a      	strb	r2, [r3, #0]
    	       	  *y -= 1;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
    	          *dir = east;
    	          *x+=1;
    		  }

    		  break;
 800ac10:	e04e      	b.n	800acb0 <LeftHandJudge+0x388>
 800ac12:	bf00      	nop
 800ac14:	200004ec 	.word	0x200004ec
    		  else if(Wall[*x][*y].west == NOWALL){
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	4618      	mov	r0, r3
 800ac24:	4a24      	ldr	r2, [pc, #144]	; (800acb8 <LeftHandJudge+0x390>)
 800ac26:	460b      	mov	r3, r1
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	440b      	add	r3, r1
 800ac2c:	4403      	add	r3, r0
 800ac2e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ac32:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10c      	bne.n	800ac56 <LeftHandJudge+0x32e>
    			  SelectAction('S');
 800ac3c:	2053      	movs	r0, #83	; 0x53
 800ac3e:	f7fe ff6f 	bl	8009b20 <SelectAction>
    			  *dir = west;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2203      	movs	r2, #3
 800ac46:	701a      	strb	r2, [r3, #0]
    		      *x-=1;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	701a      	strb	r2, [r3, #0]
    		  break;
 800ac54:	e02c      	b.n	800acb0 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].north == NOWALL){
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	4618      	mov	r0, r3
 800ac62:	4a15      	ldr	r2, [pc, #84]	; (800acb8 <LeftHandJudge+0x390>)
 800ac64:	460b      	mov	r3, r1
 800ac66:	00db      	lsls	r3, r3, #3
 800ac68:	440b      	add	r3, r1
 800ac6a:	4403      	add	r3, r0
 800ac6c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ac70:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10c      	bne.n	800ac94 <LeftHandJudge+0x36c>
    			  SelectAction('R');
 800ac7a:	2052      	movs	r0, #82	; 0x52
 800ac7c:	f7fe ff50 	bl	8009b20 <SelectAction>
      			  *dir = north;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	701a      	strb	r2, [r3, #0]
      			  *y+=1;
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	701a      	strb	r2, [r3, #0]
    		  break;
 800ac92:	e00d      	b.n	800acb0 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800ac94:	2042      	movs	r0, #66	; 0x42
 800ac96:	f7fe ff43 	bl	8009b20 <SelectAction>
    	          *dir = east;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	701a      	strb	r2, [r3, #0]
    		  break;
 800acac:	e000      	b.n	800acb0 <LeftHandJudge+0x388>
    	  default:
    		  break;
 800acae:	bf00      	nop
    	  }//swtich end
}
 800acb0:	bf00      	nop
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	200004ec 	.word	0x200004ec

0800acbc <WritingFree>:
#include "UI.h"
#include "Action.h"
#include "Map.h"

void WritingFree()
{
 800acbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acc0:	b0ba      	sub	sp, #232	; 0xe8
 800acc2:	af0c      	add	r7, sp, #48	; 0x30

	//好きなようにいじるモード。テスト場。


	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800acc4:	f002 f9c6 	bl	800d054 <Motor_PWM_Start>
	EncoderStart();
 800acc8:	f002 f8ca 	bl	800ce60 <EncoderStart>
	EmitterON();
 800accc:	f002 f8e8 	bl	800cea0 <EmitterON>
	ADCStart();
 800acd0:	f002 f832 	bl	800cd38 <ADCStart>

	PIDReset(L_VELO);
 800acd4:	2000      	movs	r0, #0
 800acd6:	f000 fb69 	bl	800b3ac <PIDReset>
	PIDReset(R_VELO);
 800acda:	2001      	movs	r0, #1
 800acdc:	f000 fb66 	bl	800b3ac <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 800ace0:	2101      	movs	r1, #1
 800ace2:	2000      	movs	r0, #0
 800ace4:	f000 fb4c 	bl	800b380 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 800ace8:	2101      	movs	r1, #1
 800acea:	2001      	movs	r0, #1
 800acec:	f000 fb48 	bl	800b380 <PIDChangeFlag>
	PIDChangeFlag(D_WALL, 0);
 800acf0:	2100      	movs	r1, #0
 800acf2:	2003      	movs	r0, #3
 800acf4:	f000 fb44 	bl	800b380 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 800acf8:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800af68 <WritingFree+0x2ac>
 800acfc:	eddf 0a9b 	vldr	s1, [pc, #620]	; 800af6c <WritingFree+0x2b0>
 800ad00:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 800af70 <WritingFree+0x2b4>
 800ad04:	2000      	movs	r0, #0
 800ad06:	f000 fb0f 	bl	800b328 <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 800ad0a:	ed9f 1a97 	vldr	s2, [pc, #604]	; 800af68 <WritingFree+0x2ac>
 800ad0e:	eddf 0a97 	vldr	s1, [pc, #604]	; 800af6c <WritingFree+0x2b0>
 800ad12:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800af70 <WritingFree+0x2b4>
 800ad16:	2001      	movs	r0, #1
 800ad18:	f000 fb06 	bl	800b328 <PIDSetGain>
	PIDSetGain(D_WALL, 2, 0.1, 0.00004);
 800ad1c:	ed9f 1a95 	vldr	s2, [pc, #596]	; 800af74 <WritingFree+0x2b8>
 800ad20:	eddf 0a95 	vldr	s1, [pc, #596]	; 800af78 <WritingFree+0x2bc>
 800ad24:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ad28:	2003      	movs	r0, #3
 800ad2a:	f000 fafd 	bl	800b328 <PIDSetGain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800ad2e:	f247 512f 	movw	r1, #29999	; 0x752f
 800ad32:	4892      	ldr	r0, [pc, #584]	; (800af7c <WritingFree+0x2c0>)
 800ad34:	f7fe ff4a 	bl	8009bcc <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800ad38:	f247 512f 	movw	r1, #29999	; 0x752f
 800ad3c:	4890      	ldr	r0, [pc, #576]	; (800af80 <WritingFree+0x2c4>)
 800ad3e:	f7fe ff45 	bl	8009bcc <InitPulse>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800ad42:	4890      	ldr	r0, [pc, #576]	; (800af84 <WritingFree+0x2c8>)
 800ad44:	f004 fd7f 	bl	800f846 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800ad48:	488f      	ldr	r0, [pc, #572]	; (800af88 <WritingFree+0x2cc>)
 800ad4a:	f004 fd7c 	bl	800f846 <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 800ad4e:	4b8f      	ldr	r3, [pc, #572]	; (800af8c <WritingFree+0x2d0>)
 800ad50:	f04f 0200 	mov.w	r2, #0
 800ad54:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 800ad56:	4b8e      	ldr	r3, [pc, #568]	; (800af90 <WritingFree+0x2d4>)
 800ad58:	f04f 0200 	mov.w	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 800ad5e:	4b8d      	ldr	r3, [pc, #564]	; (800af94 <WritingFree+0x2d8>)
 800ad60:	f04f 0200 	mov.w	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 800ad66:	4b8c      	ldr	r3, [pc, #560]	; (800af98 <WritingFree+0x2dc>)
 800ad68:	f04f 0200 	mov.w	r2, #0
 800ad6c:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 800ad6e:	4b8b      	ldr	r3, [pc, #556]	; (800af9c <WritingFree+0x2e0>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 800ad74:	4b89      	ldr	r3, [pc, #548]	; (800af9c <WritingFree+0x2e0>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 800ad7a:	4b88      	ldr	r3, [pc, #544]	; (800af9c <WritingFree+0x2e0>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	target_photo[SL] = photo[SL];
 800ad80:	4b87      	ldr	r3, [pc, #540]	; (800afa0 <WritingFree+0x2e4>)
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	4a87      	ldr	r2, [pc, #540]	; (800afa4 <WritingFree+0x2e8>)
 800ad86:	6093      	str	r3, [r2, #8]
	target_photo[SR] = photo[SR];
 800ad88:	4b85      	ldr	r3, [pc, #532]	; (800afa0 <WritingFree+0x2e4>)
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	4a85      	ldr	r2, [pc, #532]	; (800afa4 <WritingFree+0x2e8>)
 800ad8e:	6053      	str	r3, [r2, #4]
	photo_diff = target_photo[SL] - target_photo[SR];
 800ad90:	4b84      	ldr	r3, [pc, #528]	; (800afa4 <WritingFree+0x2e8>)
 800ad92:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad96:	4b83      	ldr	r3, [pc, #524]	; (800afa4 <WritingFree+0x2e8>)
 800ad98:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ada0:	4b81      	ldr	r3, [pc, #516]	; (800afa8 <WritingFree+0x2ec>)
 800ada2:	edc3 7a00 	vstr	s15, [r3]
	//加速開始時にがちっと音がするのを今の内に直しておく。
	PIDReset(L_VELO);
 800ada6:	2000      	movs	r0, #0
 800ada8:	f000 fb00 	bl	800b3ac <PIDReset>
	PIDReset(R_VELO);
 800adac:	2001      	movs	r0, #1
 800adae:	f000 fafd 	bl	800b3ac <PIDReset>
	PIDReset(D_WALL);
 800adb2:	2003      	movs	r0, #3
 800adb4:	f000 fafa 	bl	800b3ac <PIDReset>

	HAL_Delay(500);
 800adb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800adbc:	f002 fa62 	bl	800d284 <HAL_Delay>
	//壁制御と速度制御の相性が悪い
	//打ち消しあわないかつ操作しやすい制御にする。→壁の左右差から角度差を計算して角速度制御させる。
	//角度がθのとき、壁左右値がいくつであるか、という関数を同定し、外部入力から左右値を取得し角度を得る。
	//壁補正は入れるタイミングを決めるのが面倒なので最初はあてにしない。
	//IMUで角速度を入れて、そっちで角度算出するほうを頑張るほうが望みがある。
	float wall_log_L[10]={0},wall_log_R[10]={0},out_log_L[10]={0},out_log_R[10]={0};
 800adc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800adc4:	2228      	movs	r2, #40	; 0x28
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f006 fd7e 	bl	80118ca <memset>
 800adce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800add2:	2228      	movs	r2, #40	; 0x28
 800add4:	2100      	movs	r1, #0
 800add6:	4618      	mov	r0, r3
 800add8:	f006 fd77 	bl	80118ca <memset>
 800addc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ade0:	2228      	movs	r2, #40	; 0x28
 800ade2:	2100      	movs	r1, #0
 800ade4:	4618      	mov	r0, r3
 800ade6:	f006 fd70 	bl	80118ca <memset>
 800adea:	f107 0314 	add.w	r3, r7, #20
 800adee:	2228      	movs	r2, #40	; 0x28
 800adf0:	2100      	movs	r1, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f006 fd69 	bl	80118ca <memset>
	Accel(61.5, explore_velocity);
 800adf8:	4b6c      	ldr	r3, [pc, #432]	; (800afac <WritingFree+0x2f0>)
 800adfa:	edd3 7a00 	vldr	s15, [r3]
 800adfe:	eef0 0a67 	vmov.f32	s1, s15
 800ae02:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800afb0 <WritingFree+0x2f4>
 800ae06:	f7fe fc7b 	bl	8009700 <Accel>

	SelectAction('S');
 800ae0a:	2053      	movs	r0, #83	; 0x53
 800ae0c:	f7fe fe88 	bl	8009b20 <SelectAction>
	wall_log_L[0] = photo[SL];
 800ae10:	4b63      	ldr	r3, [pc, #396]	; (800afa0 <WritingFree+0x2e4>)
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	wall_log_R[0] = photo[SR];
 800ae18:	4b61      	ldr	r3, [pc, #388]	; (800afa0 <WritingFree+0x2e4>)
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	667b      	str	r3, [r7, #100]	; 0x64
	out_log_L[0] = wall_left_out;;
 800ae1e:	4b65      	ldr	r3, [pc, #404]	; (800afb4 <WritingFree+0x2f8>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae2a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	out_log_R[0] = wall_right_out;
 800ae2e:	4b62      	ldr	r3, [pc, #392]	; (800afb8 <WritingFree+0x2fc>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	ee07 3a90 	vmov	s15, r3
 800ae36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae3a:	edc7 7a05 	vstr	s15, [r7, #20]
	SelectAction('S');
 800ae3e:	2053      	movs	r0, #83	; 0x53
 800ae40:	f7fe fe6e 	bl	8009b20 <SelectAction>
	PIDChangeFlag(D_WALL, 0);
 800ae44:	2100      	movs	r1, #0
 800ae46:	2003      	movs	r0, #3
 800ae48:	f000 fa9a 	bl	800b380 <PIDChangeFlag>
	wall_log_L[1] = photo[SL];
 800ae4c:	4b54      	ldr	r3, [pc, #336]	; (800afa0 <WritingFree+0x2e4>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	wall_log_R[1] = photo[SR];
 800ae54:	4b52      	ldr	r3, [pc, #328]	; (800afa0 <WritingFree+0x2e4>)
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	66bb      	str	r3, [r7, #104]	; 0x68
	out_log_L[1] = wall_left_out;
 800ae5a:	4b56      	ldr	r3, [pc, #344]	; (800afb4 <WritingFree+0x2f8>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae66:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	out_log_R[1] = wall_right_out;
 800ae6a:	4b53      	ldr	r3, [pc, #332]	; (800afb8 <WritingFree+0x2fc>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	ee07 3a90 	vmov	s15, r3
 800ae72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae76:	edc7 7a06 	vstr	s15, [r7, #24]
	SelectAction('B');
 800ae7a:	2042      	movs	r0, #66	; 0x42
 800ae7c:	f7fe fe50 	bl	8009b20 <SelectAction>
	wall_log_L[2] = photo[SL];
 800ae80:	4b47      	ldr	r3, [pc, #284]	; (800afa0 <WritingFree+0x2e4>)
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	wall_log_R[2] = photo[SR];
 800ae88:	4b45      	ldr	r3, [pc, #276]	; (800afa0 <WritingFree+0x2e4>)
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	66fb      	str	r3, [r7, #108]	; 0x6c
	out_log_L[2] = wall_left_out;
 800ae8e:	4b49      	ldr	r3, [pc, #292]	; (800afb4 <WritingFree+0x2f8>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae9a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	out_log_R[2] = wall_right_out;
 800ae9e:	4b46      	ldr	r3, [pc, #280]	; (800afb8 <WritingFree+0x2fc>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeaa:	edc7 7a07 	vstr	s15, [r7, #28]
	add_velocity = 100;
 800aeae:	4b43      	ldr	r3, [pc, #268]	; (800afbc <WritingFree+0x300>)
 800aeb0:	4a43      	ldr	r2, [pc, #268]	; (800afc0 <WritingFree+0x304>)
 800aeb2:	601a      	str	r2, [r3, #0]
	PIDChangeFlag(D_WALL, 1);
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	2003      	movs	r0, #3
 800aeb8:	f000 fa62 	bl	800b380 <PIDChangeFlag>
	SelectAction('S');
 800aebc:	2053      	movs	r0, #83	; 0x53
 800aebe:	f7fe fe2f 	bl	8009b20 <SelectAction>
	wall_log_L[3] = photo[SL];
 800aec2:	4b37      	ldr	r3, [pc, #220]	; (800afa0 <WritingFree+0x2e4>)
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	wall_log_R[3] = photo[SR];
 800aeca:	4b35      	ldr	r3, [pc, #212]	; (800afa0 <WritingFree+0x2e4>)
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	673b      	str	r3, [r7, #112]	; 0x70
	out_log_L[3] = wall_left_out;
 800aed0:	4b38      	ldr	r3, [pc, #224]	; (800afb4 <WritingFree+0x2f8>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	ee07 3a90 	vmov	s15, r3
 800aed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aedc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	out_log_R[3] = wall_right_out;
 800aee0:	4b35      	ldr	r3, [pc, #212]	; (800afb8 <WritingFree+0x2fc>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeec:	edc7 7a08 	vstr	s15, [r7, #32]
	SelectAction('S');
 800aef0:	2053      	movs	r0, #83	; 0x53
 800aef2:	f7fe fe15 	bl	8009b20 <SelectAction>
	wall_log_L[4] = photo[SL];
 800aef6:	4b2a      	ldr	r3, [pc, #168]	; (800afa0 <WritingFree+0x2e4>)
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	wall_log_R[4] = photo[SR];
 800aefe:	4b28      	ldr	r3, [pc, #160]	; (800afa0 <WritingFree+0x2e4>)
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	677b      	str	r3, [r7, #116]	; 0x74
	out_log_L[4] = wall_left_out;
 800af04:	4b2b      	ldr	r3, [pc, #172]	; (800afb4 <WritingFree+0x2f8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af10:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	out_log_R[4] = wall_right_out;
 800af14:	4b28      	ldr	r3, [pc, #160]	; (800afb8 <WritingFree+0x2fc>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	//GoStraight( 90,explore_velocity, 0);
	Decel(45, 0);
 800af24:	eddf 0a27 	vldr	s1, [pc, #156]	; 800afc4 <WritingFree+0x308>
 800af28:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800afc8 <WritingFree+0x30c>
 800af2c:	f7fe fc64 	bl	80097f8 <Decel>
	wall_log_L[5] = photo[SL];
 800af30:	4b1b      	ldr	r3, [pc, #108]	; (800afa0 <WritingFree+0x2e4>)
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	wall_log_R[5] = photo[SR];
 800af38:	4b19      	ldr	r3, [pc, #100]	; (800afa0 <WritingFree+0x2e4>)
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	67bb      	str	r3, [r7, #120]	; 0x78
	out_log_L[5] = wall_left_out;
 800af3e:	4b1d      	ldr	r3, [pc, #116]	; (800afb4 <WritingFree+0x2f8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af4a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	out_log_R[5] = wall_right_out;
 800af4e:	4b1a      	ldr	r3, [pc, #104]	; (800afb8 <WritingFree+0x2fc>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af5a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	while(1)
	{
	for(int i=0; i < 6; i++)
 800af5e:	2300      	movs	r3, #0
 800af60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af64:	e094      	b.n	800b090 <WritingFree+0x3d4>
 800af66:	bf00      	nop
 800af68:	3bc45a38 	.word	0x3bc45a38
 800af6c:	420617c2 	.word	0x420617c2
 800af70:	3f98d845 	.word	0x3f98d845
 800af74:	3827c5ac 	.word	0x3827c5ac
 800af78:	3dcccccd 	.word	0x3dcccccd
 800af7c:	40000424 	.word	0x40000424
 800af80:	40000824 	.word	0x40000824
 800af84:	20000818 	.word	0x20000818
 800af88:	20000590 	.word	0x20000590
 800af8c:	20000290 	.word	0x20000290
 800af90:	200002a4 	.word	0x200002a4
 800af94:	200002a0 	.word	0x200002a0
 800af98:	200002a8 	.word	0x200002a8
 800af9c:	2000027c 	.word	0x2000027c
 800afa0:	20000244 	.word	0x20000244
 800afa4:	20000254 	.word	0x20000254
 800afa8:	20000264 	.word	0x20000264
 800afac:	20000000 	.word	0x20000000
 800afb0:	42760000 	.word	0x42760000
 800afb4:	200002b8 	.word	0x200002b8
 800afb8:	200002b4 	.word	0x200002b4
 800afbc:	2000029c 	.word	0x2000029c
 800afc0:	42c80000 	.word	0x42c80000
 800afc4:	00000000 	.word	0x00000000
 800afc8:	42340000 	.word	0x42340000
	{
		printf("起動時の壁左右値 : %f,%f, %d : 壁左, 壁右, 出力左, 出力右 :　%f, %f, %f, %f\r\n", target_photo[SL], target_photo[SR],i,wall_log_L[i],wall_log_R[i]+photo_diff, out_log_L[i],out_log_R[i]);
 800afcc:	4b33      	ldr	r3, [pc, #204]	; (800b09c <WritingFree+0x3e0>)
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fd f9f1 	bl	80083b8 <__aeabi_f2d>
 800afd6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800afda:	4b30      	ldr	r3, [pc, #192]	; (800b09c <WritingFree+0x3e0>)
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fd f9ea 	bl	80083b8 <__aeabi_f2d>
 800afe4:	4604      	mov	r4, r0
 800afe6:	460d      	mov	r5, r1
 800afe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800aff2:	440b      	add	r3, r1
 800aff4:	3b2c      	subs	r3, #44	; 0x2c
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fd f9dd 	bl	80083b8 <__aeabi_f2d>
 800affe:	4680      	mov	r8, r0
 800b000:	4689      	mov	r9, r1
 800b002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800b00c:	440b      	add	r3, r1
 800b00e:	3b54      	subs	r3, #84	; 0x54
 800b010:	ed93 7a00 	vldr	s14, [r3]
 800b014:	4b22      	ldr	r3, [pc, #136]	; (800b0a0 <WritingFree+0x3e4>)
 800b016:	edd3 7a00 	vldr	s15, [r3]
 800b01a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b01e:	ee17 0a90 	vmov	r0, s15
 800b022:	f7fd f9c9 	bl	80083b8 <__aeabi_f2d>
 800b026:	4682      	mov	sl, r0
 800b028:	468b      	mov	fp, r1
 800b02a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800b034:	440b      	add	r3, r1
 800b036:	3b7c      	subs	r3, #124	; 0x7c
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fd f9bc 	bl	80083b8 <__aeabi_f2d>
 800b040:	e9c7 0100 	strd	r0, r1, [r7]
 800b044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800b04e:	440b      	add	r3, r1
 800b050:	3ba4      	subs	r3, #164	; 0xa4
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4618      	mov	r0, r3
 800b056:	f7fd f9af 	bl	80083b8 <__aeabi_f2d>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b062:	ed97 7b00 	vldr	d7, [r7]
 800b066:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b06a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800b06e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800b072:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b076:	9302      	str	r3, [sp, #8]
 800b078:	e9cd 4500 	strd	r4, r5, [sp]
 800b07c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b080:	4808      	ldr	r0, [pc, #32]	; (800b0a4 <WritingFree+0x3e8>)
 800b082:	f007 f887 	bl	8012194 <iprintf>
	for(int i=0; i < 6; i++)
 800b086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b08a:	3301      	adds	r3, #1
 800b08c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b094:	2b05      	cmp	r3, #5
 800b096:	dd99      	ble.n	800afcc <WritingFree+0x310>
 800b098:	e761      	b.n	800af5e <WritingFree+0x2a2>
 800b09a:	bf00      	nop
 800b09c:	20000254 	.word	0x20000254
 800b0a0:	20000264 	.word	0x20000264
 800b0a4:	08014008 	.word	0x08014008

0800b0a8 <Explore>:


}

void Explore()
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800b0ae:	f001 ffd1 	bl	800d054 <Motor_PWM_Start>
	EncoderStart();
 800b0b2:	f001 fed5 	bl	800ce60 <EncoderStart>
	EmitterON();
 800b0b6:	f001 fef3 	bl	800cea0 <EmitterON>
	ADCStart();
 800b0ba:	f001 fe3d 	bl	800cd38 <ADCStart>

	PIDReset(L_VELO);
 800b0be:	2000      	movs	r0, #0
 800b0c0:	f000 f974 	bl	800b3ac <PIDReset>
	PIDReset(R_VELO);
 800b0c4:	2001      	movs	r0, #1
 800b0c6:	f000 f971 	bl	800b3ac <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f000 f957 	bl	800b380 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	f000 f953 	bl	800b380 <PIDChangeFlag>
	PIDChangeFlag(D_WALL, 0);
 800b0da:	2100      	movs	r1, #0
 800b0dc:	2003      	movs	r0, #3
 800b0de:	f000 f94f 	bl	800b380 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 800b0e2:	ed9f 1a79 	vldr	s2, [pc, #484]	; 800b2c8 <Explore+0x220>
 800b0e6:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b2cc <Explore+0x224>
 800b0ea:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800b2d0 <Explore+0x228>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	f000 f91a 	bl	800b328 <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 800b0f4:	ed9f 1a74 	vldr	s2, [pc, #464]	; 800b2c8 <Explore+0x220>
 800b0f8:	eddf 0a74 	vldr	s1, [pc, #464]	; 800b2cc <Explore+0x224>
 800b0fc:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800b2d0 <Explore+0x228>
 800b100:	2001      	movs	r0, #1
 800b102:	f000 f911 	bl	800b328 <PIDSetGain>
	PIDSetGain(D_WALL, 2, 0.1, 0.00004);
 800b106:	ed9f 1a73 	vldr	s2, [pc, #460]	; 800b2d4 <Explore+0x22c>
 800b10a:	eddf 0a73 	vldr	s1, [pc, #460]	; 800b2d8 <Explore+0x230>
 800b10e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b112:	2003      	movs	r0, #3
 800b114:	f000 f908 	bl	800b328 <PIDSetGain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b118:	f247 512f 	movw	r1, #29999	; 0x752f
 800b11c:	486f      	ldr	r0, [pc, #444]	; (800b2dc <Explore+0x234>)
 800b11e:	f7fe fd55 	bl	8009bcc <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b122:	f247 512f 	movw	r1, #29999	; 0x752f
 800b126:	486e      	ldr	r0, [pc, #440]	; (800b2e0 <Explore+0x238>)
 800b128:	f7fe fd50 	bl	8009bcc <InitPulse>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800b12c:	486d      	ldr	r0, [pc, #436]	; (800b2e4 <Explore+0x23c>)
 800b12e:	f004 fb8a 	bl	800f846 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b132:	486d      	ldr	r0, [pc, #436]	; (800b2e8 <Explore+0x240>)
 800b134:	f004 fb87 	bl	800f846 <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 800b138:	4b6c      	ldr	r3, [pc, #432]	; (800b2ec <Explore+0x244>)
 800b13a:	f04f 0200 	mov.w	r2, #0
 800b13e:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 800b140:	4b6b      	ldr	r3, [pc, #428]	; (800b2f0 <Explore+0x248>)
 800b142:	f04f 0200 	mov.w	r2, #0
 800b146:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 800b148:	4b6a      	ldr	r3, [pc, #424]	; (800b2f4 <Explore+0x24c>)
 800b14a:	f04f 0200 	mov.w	r2, #0
 800b14e:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 800b150:	4b69      	ldr	r3, [pc, #420]	; (800b2f8 <Explore+0x250>)
 800b152:	f04f 0200 	mov.w	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 800b158:	4b68      	ldr	r3, [pc, #416]	; (800b2fc <Explore+0x254>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 800b15e:	4b67      	ldr	r3, [pc, #412]	; (800b2fc <Explore+0x254>)
 800b160:	2200      	movs	r2, #0
 800b162:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 800b164:	4b65      	ldr	r3, [pc, #404]	; (800b2fc <Explore+0x254>)
 800b166:	2200      	movs	r2, #0
 800b168:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	target_photo[SL] = photo[SL];
 800b16a:	4b65      	ldr	r3, [pc, #404]	; (800b300 <Explore+0x258>)
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	4a65      	ldr	r2, [pc, #404]	; (800b304 <Explore+0x25c>)
 800b170:	6093      	str	r3, [r2, #8]
	target_photo[SR] = photo[SR];
 800b172:	4b63      	ldr	r3, [pc, #396]	; (800b300 <Explore+0x258>)
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	4a63      	ldr	r2, [pc, #396]	; (800b304 <Explore+0x25c>)
 800b178:	6053      	str	r3, [r2, #4]
	photo_diff = target_photo[SL] - target_photo[SR];
 800b17a:	4b62      	ldr	r3, [pc, #392]	; (800b304 <Explore+0x25c>)
 800b17c:	ed93 7a02 	vldr	s14, [r3, #8]
 800b180:	4b60      	ldr	r3, [pc, #384]	; (800b304 <Explore+0x25c>)
 800b182:	edd3 7a01 	vldr	s15, [r3, #4]
 800b186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b18a:	4b5f      	ldr	r3, [pc, #380]	; (800b308 <Explore+0x260>)
 800b18c:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO);
 800b190:	2000      	movs	r0, #0
 800b192:	f000 f90b 	bl	800b3ac <PIDReset>
	PIDReset(R_VELO);
 800b196:	2001      	movs	r0, #1
 800b198:	f000 f908 	bl	800b3ac <PIDReset>
	PIDReset(D_WALL);
 800b19c:	2003      	movs	r0, #3
 800b19e:	f000 f905 	bl	800b3ac <PIDReset>

	HAL_Delay(500);
 800b1a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b1a6:	f002 f86d 	bl	800d284 <HAL_Delay>


	//迷路とステータスの準備
	//方角と座標の初期化。
	uint8_t x, y;
	my_direction = north;
 800b1aa:	4b58      	ldr	r3, [pc, #352]	; (800b30c <Explore+0x264>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	701a      	strb	r2, [r3, #0]
	x=0,y=0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	77fb      	strb	r3, [r7, #31]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	77bb      	strb	r3, [r7, #30]
	//時間用の処理の初期化。
	int timer = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	623b      	str	r3, [r7, #32]
	//エンコーダ移動量の初期化。
	total_pulse[0] = 0;
 800b1bc:	4b4f      	ldr	r3, [pc, #316]	; (800b2fc <Explore+0x254>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
	total_pulse[1] = 0;
 800b1c2:	4b4e      	ldr	r3, [pc, #312]	; (800b2fc <Explore+0x254>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	605a      	str	r2, [r3, #4]
	total_pulse[2] = 0;
 800b1c8:	4b4c      	ldr	r3, [pc, #304]	; (800b2fc <Explore+0x254>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	609a      	str	r2, [r3, #8]
	//スタート時のアクションに設定
	char action_type = 'S';
 800b1ce:	2353      	movs	r3, #83	; 0x53
 800b1d0:	777b      	strb	r3, [r7, #29]
//		break;
//	default:
//		break;
//	}
//}
	explore_velocity=90;//300;
 800b1d2:	4b4f      	ldr	r3, [pc, #316]	; (800b310 <Explore+0x268>)
 800b1d4:	4a4f      	ldr	r2, [pc, #316]	; (800b314 <Explore+0x26c>)
 800b1d6:	601a      	str	r2, [r3, #0]
	Accel(61.5, explore_velocity);
 800b1d8:	4b4d      	ldr	r3, [pc, #308]	; (800b310 <Explore+0x268>)
 800b1da:	edd3 7a00 	vldr	s15, [r3]
 800b1de:	eef0 0a67 	vmov.f32	s1, s15
 800b1e2:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800b318 <Explore+0x270>
 800b1e6:	f7fe fa8b 	bl	8009700 <Accel>
	y++;
 800b1ea:	7fbb      	ldrb	r3, [r7, #30]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	77bb      	strb	r3, [r7, #30]
	uint8_t xlog[10]={0},ylog[10]={0};
 800b1f2:	f107 0310 	add.w	r3, r7, #16
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	605a      	str	r2, [r3, #4]
 800b1fc:	811a      	strh	r2, [r3, #8]
 800b1fe:	1d3b      	adds	r3, r7, #4
 800b200:	2200      	movs	r2, #0
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	605a      	str	r2, [r3, #4]
 800b206:	811a      	strh	r2, [r3, #8]
	int i=0;
 800b208:	2300      	movs	r3, #0
 800b20a:	627b      	str	r3, [r7, #36]	; 0x24
	while( (x != 3) || (y != 3))
 800b20c:	e033      	b.n	800b276 <Explore+0x1ce>
	{

		xlog[i]=x;
 800b20e:	7ff9      	ldrb	r1, [r7, #31]
 800b210:	f107 0210 	add.w	r2, r7, #16
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	4413      	add	r3, r2
 800b218:	460a      	mov	r2, r1
 800b21a:	701a      	strb	r2, [r3, #0]
		ylog[i]=y;
 800b21c:	7fb9      	ldrb	r1, [r7, #30]
 800b21e:	1d3a      	adds	r2, r7, #4
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	4413      	add	r3, r2
 800b224:	460a      	mov	r2, r1
 800b226:	701a      	strb	r2, [r3, #0]
		//移動しきったあとに状態を更新するか、アクションが決まった時点で更新するか。後者にすれば、移動しきる前に、壁の状態を検知して、次のマップ更新ができる。次のアクションを用意しておく。
		//今の座標と進行方向から次の方角がわかり座標を更新できる。
		//現在の方角と座標を更新

		//移動後の座標と方角で新たに壁情報を取得
		wall_set(x,y,photo[SL], photo[SR], photo[FL], photo[FR]);
 800b228:	7ffa      	ldrb	r2, [r7, #31]
 800b22a:	7fb9      	ldrb	r1, [r7, #30]
 800b22c:	4b34      	ldr	r3, [pc, #208]	; (800b300 <Explore+0x258>)
 800b22e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b232:	4b33      	ldr	r3, [pc, #204]	; (800b300 <Explore+0x258>)
 800b234:	ed93 7a01 	vldr	s14, [r3, #4]
 800b238:	4b31      	ldr	r3, [pc, #196]	; (800b300 <Explore+0x258>)
 800b23a:	edd3 6a00 	vldr	s13, [r3]
 800b23e:	4b30      	ldr	r3, [pc, #192]	; (800b300 <Explore+0x258>)
 800b240:	ed93 6a03 	vldr	s12, [r3, #12]
 800b244:	eef0 1a46 	vmov.f32	s3, s12
 800b248:	eeb0 1a66 	vmov.f32	s2, s13
 800b24c:	eef0 0a47 	vmov.f32	s1, s14
 800b250:	eeb0 0a67 	vmov.f32	s0, s15
 800b254:	4610      	mov	r0, r2
 800b256:	f7ff f855 	bl	800a304 <wall_set>

		UpdateWalkMap();
 800b25a:	f7ff f9fb 	bl	800a654 <UpdateWalkMap>

		//方向決定と、座標方角の更新。
		LeftHandJudge(&x, &y, &my_direction, &action_type);
 800b25e:	f107 031d 	add.w	r3, r7, #29
 800b262:	f107 011e 	add.w	r1, r7, #30
 800b266:	f107 001f 	add.w	r0, r7, #31
 800b26a:	4a28      	ldr	r2, [pc, #160]	; (800b30c <Explore+0x264>)
 800b26c:	f7ff fb5c 	bl	800a928 <LeftHandJudge>

		i++;
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	3301      	adds	r3, #1
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
	while( (x != 3) || (y != 3))
 800b276:	7ffb      	ldrb	r3, [r7, #31]
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d1c8      	bne.n	800b20e <Explore+0x166>
 800b27c:	7fbb      	ldrb	r3, [r7, #30]
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d1c5      	bne.n	800b20e <Explore+0x166>
		UpdateMap();
		//進行方向決定 (最短経路導出から決定するか、評価値比較か、単純な左手か)
		my_direction = DetermineDirection();
#endif
	}
	Decel(45, 0);
 800b282:	eddf 0a26 	vldr	s1, [pc, #152]	; 800b31c <Explore+0x274>
 800b286:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800b320 <Explore+0x278>
 800b28a:	f7fe fab5 	bl	80097f8 <Decel>
	//flashに保存

	Signal(7);
 800b28e:	2007      	movs	r0, #7
 800b290:	f000 f9f0 	bl	800b674 <Signal>
	while(1)
	{
		for(i=0;i < 10; i++)
 800b294:	2300      	movs	r3, #0
 800b296:	627b      	str	r3, [r7, #36]	; 0x24
 800b298:	e011      	b.n	800b2be <Explore+0x216>
		{
			printf("%d: %d,%d\r\n",i,xlog[i],ylog[i]);
 800b29a:	f107 0210 	add.w	r2, r7, #16
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	4413      	add	r3, r2
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	1d3a      	adds	r2, r7, #4
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	4413      	add	r3, r2
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	460a      	mov	r2, r1
 800b2b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2b2:	481c      	ldr	r0, [pc, #112]	; (800b324 <Explore+0x27c>)
 800b2b4:	f006 ff6e 	bl	8012194 <iprintf>
		for(i=0;i < 10; i++)
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	2b09      	cmp	r3, #9
 800b2c2:	ddea      	ble.n	800b29a <Explore+0x1f2>
 800b2c4:	e7e6      	b.n	800b294 <Explore+0x1ec>
 800b2c6:	bf00      	nop
 800b2c8:	3bc45a38 	.word	0x3bc45a38
 800b2cc:	420617c2 	.word	0x420617c2
 800b2d0:	3f98d845 	.word	0x3f98d845
 800b2d4:	3827c5ac 	.word	0x3827c5ac
 800b2d8:	3dcccccd 	.word	0x3dcccccd
 800b2dc:	40000424 	.word	0x40000424
 800b2e0:	40000824 	.word	0x40000824
 800b2e4:	20000818 	.word	0x20000818
 800b2e8:	20000590 	.word	0x20000590
 800b2ec:	20000290 	.word	0x20000290
 800b2f0:	200002a4 	.word	0x200002a4
 800b2f4:	200002a0 	.word	0x200002a0
 800b2f8:	200002a8 	.word	0x200002a8
 800b2fc:	2000027c 	.word	0x2000027c
 800b300:	20000244 	.word	0x20000244
 800b304:	20000254 	.word	0x20000254
 800b308:	20000264 	.word	0x20000264
 800b30c:	200002c4 	.word	0x200002c4
 800b310:	20000000 	.word	0x20000000
 800b314:	42b40000 	.word	0x42b40000
 800b318:	42760000 	.word	0x42760000
 800b31c:	00000000 	.word	0x00000000
 800b320:	42340000 	.word	0x42340000
 800b324:	0801406c 	.word	0x0801406c

0800b328 <PIDSetGain>:
//motor_control *p;
//control angular_velocity[1] = {0};
//control distance_wall[ WALL_SENSOR_NUM] = {0};

void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	ed87 0a02 	vstr	s0, [r7, #8]
 800b334:	edc7 0a01 	vstr	s1, [r7, #4]
 800b338:	ed87 1a00 	vstr	s2, [r7]
	pid[n].KP = kp;
 800b33c:	4a0f      	ldr	r2, [pc, #60]	; (800b37c <PIDSetGain+0x54>)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	212c      	movs	r1, #44	; 0x2c
 800b342:	fb01 f303 	mul.w	r3, r1, r3
 800b346:	4413      	add	r3, r2
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	601a      	str	r2, [r3, #0]
	pid[n].KI = ki;
 800b34c:	4a0b      	ldr	r2, [pc, #44]	; (800b37c <PIDSetGain+0x54>)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	212c      	movs	r1, #44	; 0x2c
 800b352:	fb01 f303 	mul.w	r3, r1, r3
 800b356:	4413      	add	r3, r2
 800b358:	3304      	adds	r3, #4
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	601a      	str	r2, [r3, #0]
	pid[n].KD = kd;
 800b35e:	4a07      	ldr	r2, [pc, #28]	; (800b37c <PIDSetGain+0x54>)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	212c      	movs	r1, #44	; 0x2c
 800b364:	fb01 f303 	mul.w	r3, r1, r3
 800b368:	4413      	add	r3, r2
 800b36a:	3308      	adds	r3, #8
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	601a      	str	r2, [r3, #0]
//
//	p = *pid[n];
//	p->KP;
}
 800b370:	bf00      	nop
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	200002c8 	.word	0x200002c8

0800b380 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
	pid[n].flag = on_or_off;
 800b38a:	4a07      	ldr	r2, [pc, #28]	; (800b3a8 <PIDChangeFlag+0x28>)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	212c      	movs	r1, #44	; 0x2c
 800b390:	fb01 f303 	mul.w	r3, r1, r3
 800b394:	4413      	add	r3, r2
 800b396:	3328      	adds	r3, #40	; 0x28
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	601a      	str	r2, [r3, #0]
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	200002c8 	.word	0x200002c8

0800b3ac <PIDReset>:
int PIDGetFlag(int n)
{
	return pid[n].flag;
}
void PIDReset(int n)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	pid[n].e = 0;
 800b3b4:	4a1b      	ldr	r2, [pc, #108]	; (800b424 <PIDReset+0x78>)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	212c      	movs	r1, #44	; 0x2c
 800b3ba:	fb01 f303 	mul.w	r3, r1, r3
 800b3be:	4413      	add	r3, r2
 800b3c0:	330c      	adds	r3, #12
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]
	pid[n].ei = 0;
 800b3c8:	4a16      	ldr	r2, [pc, #88]	; (800b424 <PIDReset+0x78>)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	212c      	movs	r1, #44	; 0x2c
 800b3ce:	fb01 f303 	mul.w	r3, r1, r3
 800b3d2:	4413      	add	r3, r2
 800b3d4:	3310      	adds	r3, #16
 800b3d6:	f04f 0200 	mov.w	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
	pid[n].ed = 0;
 800b3dc:	4a11      	ldr	r2, [pc, #68]	; (800b424 <PIDReset+0x78>)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	212c      	movs	r1, #44	; 0x2c
 800b3e2:	fb01 f303 	mul.w	r3, r1, r3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	3314      	adds	r3, #20
 800b3ea:	f04f 0200 	mov.w	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
	pid[n].elast = 0;
 800b3f0:	4a0c      	ldr	r2, [pc, #48]	; (800b424 <PIDReset+0x78>)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	212c      	movs	r1, #44	; 0x2c
 800b3f6:	fb01 f303 	mul.w	r3, r1, r3
 800b3fa:	4413      	add	r3, r2
 800b3fc:	3318      	adds	r3, #24
 800b3fe:	f04f 0200 	mov.w	r2, #0
 800b402:	601a      	str	r2, [r3, #0]
	pid[n].out = 0;
 800b404:	4a07      	ldr	r2, [pc, #28]	; (800b424 <PIDReset+0x78>)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	212c      	movs	r1, #44	; 0x2c
 800b40a:	fb01 f303 	mul.w	r3, r1, r3
 800b40e:	4413      	add	r3, r2
 800b410:	3324      	adds	r3, #36	; 0x24
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	200002c8 	.word	0x200002c8

0800b428 <PIDCalculate>:

void PIDCalculate(int n, float T)//, float target, float current, int flag
{
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	ed87 0a00 	vstr	s0, [r7]
	pid[n].e = pid[n].target - pid[n].current;
 800b434:	4a64      	ldr	r2, [pc, #400]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	212c      	movs	r1, #44	; 0x2c
 800b43a:	fb01 f303 	mul.w	r3, r1, r3
 800b43e:	4413      	add	r3, r2
 800b440:	3320      	adds	r3, #32
 800b442:	ed93 7a00 	vldr	s14, [r3]
 800b446:	4a60      	ldr	r2, [pc, #384]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	212c      	movs	r1, #44	; 0x2c
 800b44c:	fb01 f303 	mul.w	r3, r1, r3
 800b450:	4413      	add	r3, r2
 800b452:	331c      	adds	r3, #28
 800b454:	edd3 7a00 	vldr	s15, [r3]
 800b458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b45c:	4a5a      	ldr	r2, [pc, #360]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	212c      	movs	r1, #44	; 0x2c
 800b462:	fb01 f303 	mul.w	r3, r1, r3
 800b466:	4413      	add	r3, r2
 800b468:	330c      	adds	r3, #12
 800b46a:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ei += pid[n].e * T;
 800b46e:	4a56      	ldr	r2, [pc, #344]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	212c      	movs	r1, #44	; 0x2c
 800b474:	fb01 f303 	mul.w	r3, r1, r3
 800b478:	4413      	add	r3, r2
 800b47a:	3310      	adds	r3, #16
 800b47c:	ed93 7a00 	vldr	s14, [r3]
 800b480:	4a51      	ldr	r2, [pc, #324]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	212c      	movs	r1, #44	; 0x2c
 800b486:	fb01 f303 	mul.w	r3, r1, r3
 800b48a:	4413      	add	r3, r2
 800b48c:	330c      	adds	r3, #12
 800b48e:	edd3 6a00 	vldr	s13, [r3]
 800b492:	edd7 7a00 	vldr	s15, [r7]
 800b496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b49a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b49e:	4a4a      	ldr	r2, [pc, #296]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	212c      	movs	r1, #44	; 0x2c
 800b4a4:	fb01 f303 	mul.w	r3, r1, r3
 800b4a8:	4413      	add	r3, r2
 800b4aa:	3310      	adds	r3, #16
 800b4ac:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ed = ( pid[n].e - pid[n].elast ) / T;
 800b4b0:	4a45      	ldr	r2, [pc, #276]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	212c      	movs	r1, #44	; 0x2c
 800b4b6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ba:	4413      	add	r3, r2
 800b4bc:	330c      	adds	r3, #12
 800b4be:	ed93 7a00 	vldr	s14, [r3]
 800b4c2:	4a41      	ldr	r2, [pc, #260]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	212c      	movs	r1, #44	; 0x2c
 800b4c8:	fb01 f303 	mul.w	r3, r1, r3
 800b4cc:	4413      	add	r3, r2
 800b4ce:	3318      	adds	r3, #24
 800b4d0:	edd3 7a00 	vldr	s15, [r3]
 800b4d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b4d8:	ed97 7a00 	vldr	s14, [r7]
 800b4dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e0:	4a39      	ldr	r2, [pc, #228]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	212c      	movs	r1, #44	; 0x2c
 800b4e6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ea:	4413      	add	r3, r2
 800b4ec:	3314      	adds	r3, #20
 800b4ee:	edc3 7a00 	vstr	s15, [r3]
	pid[n].elast = pid[n].e;
 800b4f2:	4a35      	ldr	r2, [pc, #212]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	212c      	movs	r1, #44	; 0x2c
 800b4f8:	fb01 f303 	mul.w	r3, r1, r3
 800b4fc:	4413      	add	r3, r2
 800b4fe:	330c      	adds	r3, #12
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	4931      	ldr	r1, [pc, #196]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	202c      	movs	r0, #44	; 0x2c
 800b508:	fb00 f303 	mul.w	r3, r0, r3
 800b50c:	440b      	add	r3, r1
 800b50e:	3318      	adds	r3, #24
 800b510:	601a      	str	r2, [r3, #0]
	pid[n].out = round(pid[n].KP*pid[n].e + pid[n].KI*pid[n].ei + pid[n].KD*pid[n].ed);
 800b512:	4a2d      	ldr	r2, [pc, #180]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	212c      	movs	r1, #44	; 0x2c
 800b518:	fb01 f303 	mul.w	r3, r1, r3
 800b51c:	4413      	add	r3, r2
 800b51e:	ed93 7a00 	vldr	s14, [r3]
 800b522:	4a29      	ldr	r2, [pc, #164]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	212c      	movs	r1, #44	; 0x2c
 800b528:	fb01 f303 	mul.w	r3, r1, r3
 800b52c:	4413      	add	r3, r2
 800b52e:	330c      	adds	r3, #12
 800b530:	edd3 7a00 	vldr	s15, [r3]
 800b534:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b538:	4a23      	ldr	r2, [pc, #140]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	212c      	movs	r1, #44	; 0x2c
 800b53e:	fb01 f303 	mul.w	r3, r1, r3
 800b542:	4413      	add	r3, r2
 800b544:	3304      	adds	r3, #4
 800b546:	edd3 6a00 	vldr	s13, [r3]
 800b54a:	4a1f      	ldr	r2, [pc, #124]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	212c      	movs	r1, #44	; 0x2c
 800b550:	fb01 f303 	mul.w	r3, r1, r3
 800b554:	4413      	add	r3, r2
 800b556:	3310      	adds	r3, #16
 800b558:	edd3 7a00 	vldr	s15, [r3]
 800b55c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b560:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b564:	4a18      	ldr	r2, [pc, #96]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	212c      	movs	r1, #44	; 0x2c
 800b56a:	fb01 f303 	mul.w	r3, r1, r3
 800b56e:	4413      	add	r3, r2
 800b570:	3308      	adds	r3, #8
 800b572:	edd3 6a00 	vldr	s13, [r3]
 800b576:	4a14      	ldr	r2, [pc, #80]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	212c      	movs	r1, #44	; 0x2c
 800b57c:	fb01 f303 	mul.w	r3, r1, r3
 800b580:	4413      	add	r3, r2
 800b582:	3314      	adds	r3, #20
 800b584:	edd3 7a00 	vldr	s15, [r3]
 800b588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b58c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b590:	ee17 0a90 	vmov	r0, s15
 800b594:	f7fc ff10 	bl	80083b8 <__aeabi_f2d>
 800b598:	4603      	mov	r3, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	ec44 3b10 	vmov	d0, r3, r4
 800b5a0:	f006 f914 	bl	80117cc <round>
 800b5a4:	ec54 3b10 	vmov	r3, r4, d0
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	f7fd fa0c 	bl	80089c8 <__aeabi_d2iz>
 800b5b0:	4a05      	ldr	r2, [pc, #20]	; (800b5c8 <PIDCalculate+0x1a0>)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	212c      	movs	r1, #44	; 0x2c
 800b5b6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3324      	adds	r3, #36	; 0x24
 800b5be:	6018      	str	r0, [r3, #0]
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd90      	pop	{r4, r7, pc}
 800b5c8:	200002c8 	.word	0x200002c8

0800b5cc <PIDInput>:
	*output = pid[n].out;
}
//pid制御は現在値と目標値から、出力するべき値を計算するもの。前回の値の保存と積算用の変数が必要なので、独立させるかポインタかフラグで初期化

void PIDInput(int n, float target, float current)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b5d8:	edc7 0a01 	vstr	s1, [r7, #4]
	pid[n].target = target;
 800b5dc:	4a0b      	ldr	r2, [pc, #44]	; (800b60c <PIDInput+0x40>)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	212c      	movs	r1, #44	; 0x2c
 800b5e2:	fb01 f303 	mul.w	r3, r1, r3
 800b5e6:	4413      	add	r3, r2
 800b5e8:	3320      	adds	r3, #32
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	601a      	str	r2, [r3, #0]
	pid[n].current = current;
 800b5ee:	4a07      	ldr	r2, [pc, #28]	; (800b60c <PIDInput+0x40>)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	212c      	movs	r1, #44	; 0x2c
 800b5f4:	fb01 f303 	mul.w	r3, r1, r3
 800b5f8:	4413      	add	r3, r2
 800b5fa:	331c      	adds	r3, #28
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	601a      	str	r2, [r3, #0]
}
 800b600:	bf00      	nop
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	200002c8 	.word	0x200002c8

0800b610 <PIDControl>:
int PIDControl(int n, float T, float target, float current)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	ed87 0a02 	vstr	s0, [r7, #8]
 800b61c:	edc7 0a01 	vstr	s1, [r7, #4]
 800b620:	ed87 1a00 	vstr	s2, [r7]
	PIDInput( n, target, current);
 800b624:	edd7 0a00 	vldr	s1, [r7]
 800b628:	ed97 0a01 	vldr	s0, [r7, #4]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff ffcd 	bl	800b5cc <PIDInput>
	PIDCalculate( n, T );
 800b632:	ed97 0a02 	vldr	s0, [r7, #8]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f7ff fef6 	bl	800b428 <PIDCalculate>
	//出力の前に全部0にする処理をフラグで
	if(pid[n].flag == 0)
 800b63c:	4a0c      	ldr	r2, [pc, #48]	; (800b670 <PIDControl+0x60>)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	212c      	movs	r1, #44	; 0x2c
 800b642:	fb01 f303 	mul.w	r3, r1, r3
 800b646:	4413      	add	r3, r2
 800b648:	3328      	adds	r3, #40	; 0x28
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <PIDControl+0x46>
	{
		PIDReset(n);
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7ff feab 	bl	800b3ac <PIDReset>
	}
	//*output = pid[n].out;
	//PIDOutput( n, output );
	return pid[n].out;
 800b656:	4a06      	ldr	r2, [pc, #24]	; (800b670 <PIDControl+0x60>)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	212c      	movs	r1, #44	; 0x2c
 800b65c:	fb01 f303 	mul.w	r3, r1, r3
 800b660:	4413      	add	r3, r2
 800b662:	3324      	adds	r3, #36	; 0x24
 800b664:	681b      	ldr	r3, [r3, #0]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	200002c8 	.word	0x200002c8

0800b674 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
float photo[4];

//led_driver
void Signal(int mode)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800b67c:	2300      	movs	r3, #0
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	e00e      	b.n	800b6a0 <Signal+0x2c>
	{
		ChangeLED(mode);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f001 fc28 	bl	800ced8 <ChangeLED>
		HAL_Delay(100);
 800b688:	2064      	movs	r0, #100	; 0x64
 800b68a:	f001 fdfb 	bl	800d284 <HAL_Delay>
		ChangeLED(0);
 800b68e:	2000      	movs	r0, #0
 800b690:	f001 fc22 	bl	800ced8 <ChangeLED>
		HAL_Delay(100);
 800b694:	2064      	movs	r0, #100	; 0x64
 800b696:	f001 fdf5 	bl	800d284 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3301      	adds	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	dded      	ble.n	800b682 <Signal+0xe>
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
	...

0800b6b0 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800b6b8:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800b704 <BatteryCheck+0x54>
 800b6bc:	eddf 0a12 	vldr	s1, [pc, #72]	; 800b708 <BatteryCheck+0x58>
 800b6c0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7fe fb0f 	bl	8009ce8 <ADCToBatteryVoltage>
 800b6ca:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800b6ce:	2103      	movs	r1, #3
 800b6d0:	2002      	movs	r0, #2
 800b6d2:	f7fe fb33 	bl	8009d3c <IntegerPower>
 800b6d6:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800b6d8:	6938      	ldr	r0, [r7, #16]
 800b6da:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800b70c <BatteryCheck+0x5c>
 800b6de:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800b710 <BatteryCheck+0x60>
 800b6e2:	ed97 0a05 	vldr	s0, [r7, #20]
 800b6e6:	f7fe fb46 	bl	8009d76 <GetBatteryLevel>
 800b6ea:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800b6ec:	68f9      	ldr	r1, [r7, #12]
 800b6ee:	4809      	ldr	r0, [pc, #36]	; (800b714 <BatteryCheck+0x64>)
 800b6f0:	f006 fd50 	bl	8012194 <iprintf>
	Signal( battery_level );
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f7ff ffbd 	bl	800b674 <Signal>
}
 800b6fa:	bf00      	nop
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	45800000 	.word	0x45800000
 800b708:	40533333 	.word	0x40533333
 800b70c:	41066666 	.word	0x41066666
 800b710:	40e66666 	.word	0x40e66666
 800b714:	08014078 	.word	0x08014078

0800b718 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800b718:	b590      	push	{r4, r7, lr}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	603a      	str	r2, [r7, #0]
 800b722:	71fb      	strb	r3, [r7, #7]
 800b724:	460b      	mov	r3, r1
 800b726:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800b728:	f001 fbba 	bl	800cea0 <EmitterON>
	ADCStart();
 800b72c:	f001 fb04 	bl	800cd38 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800b730:	4840      	ldr	r0, [pc, #256]	; (800b834 <ModeSelect+0x11c>)
 800b732:	f004 f888 	bl	800f846 <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800b736:	f001 fb93 	bl	800ce60 <EncoderStart>

	//while中で選択
	*pMode=min;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	79fa      	ldrb	r2, [r7, #7]
 800b73e:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 800b740:	f247 512f 	movw	r1, #29999	; 0x752f
 800b744:	483c      	ldr	r0, [pc, #240]	; (800b838 <ModeSelect+0x120>)
 800b746:	f7fe fa41 	bl	8009bcc <InitPulse>

	int ENC3_LEFT;
	while(photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800b74a:	e05c      	b.n	800b806 <ModeSelect+0xee>
	{
		printf("photo[FR] : %f\r\n", photo[FR]);
 800b74c:	4b3b      	ldr	r3, [pc, #236]	; (800b83c <ModeSelect+0x124>)
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	4618      	mov	r0, r3
 800b752:	f7fc fe31 	bl	80083b8 <__aeabi_f2d>
 800b756:	4603      	mov	r3, r0
 800b758:	460c      	mov	r4, r1
 800b75a:	461a      	mov	r2, r3
 800b75c:	4623      	mov	r3, r4
 800b75e:	4838      	ldr	r0, [pc, #224]	; (800b840 <ModeSelect+0x128>)
 800b760:	f006 fd18 	bl	8012194 <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800b764:	4b37      	ldr	r3, [pc, #220]	; (800b844 <ModeSelect+0x12c>)
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	60fb      	str	r3, [r7, #12]

		  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f24b 522e 	movw	r2, #46382	; 0xb52e
 800b770:	4293      	cmp	r3, r2
 800b772:	dd21      	ble.n	800b7b8 <ModeSelect+0xa0>
		  {
		  	  *pMode += 1;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	f993 3000 	ldrsb.w	r3, [r3]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	3301      	adds	r3, #1
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	b25a      	sxtb	r2, r3
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	f993 3000 	ldrsb.w	r3, [r3]
 800b78c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800b790:	429a      	cmp	r2, r3
 800b792:	da02      	bge.n	800b79a <ModeSelect+0x82>
		  	  {
		  		  *pMode = min;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	79fa      	ldrb	r2, [r7, #7]
 800b798:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	f993 3000 	ldrsb.w	r3, [r3]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f001 fb99 	bl	800ced8 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 800b7a6:	f247 512f 	movw	r1, #29999	; 0x752f
 800b7aa:	4823      	ldr	r0, [pc, #140]	; (800b838 <ModeSelect+0x120>)
 800b7ac:	f7fe fa0e 	bl	8009bcc <InitPulse>
		  	  HAL_Delay(500);
 800b7b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b7b4:	f001 fd66 	bl	800d284 <HAL_Delay>

		  }
		  if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f243 522f 	movw	r2, #13615	; 0x352f
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	dc21      	bgt.n	800b806 <ModeSelect+0xee>
		  {
		  	  *pMode -= 1;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	f993 3000 	ldrsb.w	r3, [r3]
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	b25a      	sxtb	r2, r3
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	f993 3000 	ldrsb.w	r3, [r3]
 800b7da:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	dd02      	ble.n	800b7e8 <ModeSelect+0xd0>
		  	  {
		  	  		  *pMode = max;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	79ba      	ldrb	r2, [r7, #6]
 800b7e6:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	f993 3000 	ldrsb.w	r3, [r3]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f001 fb72 	bl	800ced8 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE_L);
 800b7f4:	f247 512f 	movw	r1, #29999	; 0x752f
 800b7f8:	480f      	ldr	r0, [pc, #60]	; (800b838 <ModeSelect+0x120>)
 800b7fa:	f7fe f9e7 	bl	8009bcc <InitPulse>
		  	  HAL_Delay(500);
 800b7fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b802:	f001 fd3f 	bl	800d284 <HAL_Delay>
	while(photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800b806:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <ModeSelect+0x124>)
 800b808:	edd3 7a03 	vldr	s15, [r3, #12]
 800b80c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800b848 <ModeSelect+0x130>
 800b810:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b818:	d498      	bmi.n	800b74c <ModeSelect+0x34>
		  }
	}

	EmitterOFF();
 800b81a:	f001 fb4f 	bl	800cebc <EmitterOFF>
	ADCStop();
 800b81e:	f001 faab 	bl	800cd78 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 800b822:	4804      	ldr	r0, [pc, #16]	; (800b834 <ModeSelect+0x11c>)
 800b824:	f004 f833 	bl	800f88e <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 800b828:	f001 fb2a 	bl	800ce80 <EncoderStop>

	//モード選択後どうするか
}
 800b82c:	bf00      	nop
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	bd90      	pop	{r4, r7, pc}
 800b834:	20000590 	.word	0x20000590
 800b838:	40000424 	.word	0x40000424
 800b83c:	20000244 	.word	0x20000244
 800b840:	08014080 	.word	0x08014080
 800b844:	40000400 	.word	0x40000400
 800b848:	437a0000 	.word	0x437a0000

0800b84c <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800b854:	1d39      	adds	r1, r7, #4
 800b856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b85a:	2201      	movs	r2, #1
 800b85c:	4803      	ldr	r0, [pc, #12]	; (800b86c <__io_putchar+0x20>)
 800b85e:	f005 fb55 	bl	8010f0c <HAL_UART_Transmit>
	return ch;
 800b862:	687b      	ldr	r3, [r7, #4]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	20000778 	.word	0x20000778

0800b870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b876:	f001 fc93 	bl	800d1a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b87a:	f000 f85f 	bl	800b93c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b87e:	f000 fca9 	bl	800c1d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800b882:	f000 fc7f 	bl	800c184 <MX_DMA_Init>
  MX_ADC1_Init();
 800b886:	f000 f8c3 	bl	800ba10 <MX_ADC1_Init>
  MX_ADC2_Init();
 800b88a:	f000 f92f 	bl	800baec <MX_ADC2_Init>
  MX_TIM3_Init();
 800b88e:	f000 fa89 	bl	800bda4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800b892:	f000 fa11 	bl	800bcb8 <MX_TIM2_Init>
  MX_SPI3_Init();
 800b896:	f000 f989 	bl	800bbac <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800b89a:	f000 fc49 	bl	800c130 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800b89e:	f000 fb29 	bl	800bef4 <MX_TIM5_Init>
  MX_TIM4_Init();
 800b8a2:	f000 fad3 	bl	800be4c <MX_TIM4_Init>
  MX_TIM8_Init();
 800b8a6:	f000 fb9b 	bl	800bfe0 <MX_TIM8_Init>
  MX_TIM1_Init();
 800b8aa:	f000 f9b5 	bl	800bc18 <MX_TIM1_Init>
//
//  while(1)
//  {
//
//  }
  ADCStart();
 800b8ae:	f001 fa43 	bl	800cd38 <ADCStart>
  HAL_Delay(500);
 800b8b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b8b6:	f001 fce5 	bl	800d284 <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800b8ba:	4b1d      	ldr	r3, [pc, #116]	; (800b930 <main+0xc0>)
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff fef6 	bl	800b6b0 <BatteryCheck>

  int8_t mode=0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	71fb      	strb	r3, [r7, #7]
  	  printf("mode : %d\r\n", mode);
 800b8c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4819      	ldr	r0, [pc, #100]	; (800b934 <main+0xc4>)
 800b8d0:	f006 fc60 	bl	8012194 <iprintf>
  ModeSelect( 0, 7, &mode);
 800b8d4:	1dfb      	adds	r3, r7, #7
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	2107      	movs	r1, #7
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f7ff ff1c 	bl	800b718 <ModeSelect>
  Signal( mode );
 800b8e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fec5 	bl	800b674 <Signal>
  	  printf("ドン\r\n");
 800b8ea:	4813      	ldr	r0, [pc, #76]	; (800b938 <main+0xc8>)
 800b8ec:	f006 fcc6 	bl	801227c <puts>

  while (1)
  {

	  switch( mode )
 800b8f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8f4:	2b07      	cmp	r3, #7
 800b8f6:	d819      	bhi.n	800b92c <main+0xbc>
 800b8f8:	a201      	add	r2, pc, #4	; (adr r2, 800b900 <main+0x90>)
 800b8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fe:	bf00      	nop
 800b900:	0800b92d 	.word	0x0800b92d
 800b904:	0800b92d 	.word	0x0800b92d
 800b908:	0800b92d 	.word	0x0800b92d
 800b90c:	0800b92d 	.word	0x0800b92d
 800b910:	0800b92d 	.word	0x0800b92d
 800b914:	0800b92d 	.word	0x0800b92d
 800b918:	0800b921 	.word	0x0800b921
 800b91c:	0800b927 	.word	0x0800b927
	  case 4:
		  break;
	  case 5:
		  break;
	  case 6:
		  Explore();
 800b920:	f7ff fbc2 	bl	800b0a8 <Explore>
		  break;
 800b924:	e003      	b.n	800b92e <main+0xbe>
	  case 7:
		  WritingFree();
 800b926:	f7ff f9c9 	bl	800acbc <WritingFree>
		  break;
 800b92a:	e000      	b.n	800b92e <main+0xbe>
	  default :
		  break;
 800b92c:	bf00      	nop
	  switch( mode )
 800b92e:	e7df      	b.n	800b8f0 <main+0x80>
 800b930:	2000042c 	.word	0x2000042c
 800b934:	08014094 	.word	0x08014094
 800b938:	080140a0 	.word	0x080140a0

0800b93c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b094      	sub	sp, #80	; 0x50
 800b940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b942:	f107 0320 	add.w	r3, r7, #32
 800b946:	2230      	movs	r2, #48	; 0x30
 800b948:	2100      	movs	r1, #0
 800b94a:	4618      	mov	r0, r3
 800b94c:	f005 ffbd 	bl	80118ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]
 800b958:	605a      	str	r2, [r3, #4]
 800b95a:	609a      	str	r2, [r3, #8]
 800b95c:	60da      	str	r2, [r3, #12]
 800b95e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b960:	2300      	movs	r3, #0
 800b962:	60bb      	str	r3, [r7, #8]
 800b964:	4b28      	ldr	r3, [pc, #160]	; (800ba08 <SystemClock_Config+0xcc>)
 800b966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b968:	4a27      	ldr	r2, [pc, #156]	; (800ba08 <SystemClock_Config+0xcc>)
 800b96a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b96e:	6413      	str	r3, [r2, #64]	; 0x40
 800b970:	4b25      	ldr	r3, [pc, #148]	; (800ba08 <SystemClock_Config+0xcc>)
 800b972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b978:	60bb      	str	r3, [r7, #8]
 800b97a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b97c:	2300      	movs	r3, #0
 800b97e:	607b      	str	r3, [r7, #4]
 800b980:	4b22      	ldr	r3, [pc, #136]	; (800ba0c <SystemClock_Config+0xd0>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a21      	ldr	r2, [pc, #132]	; (800ba0c <SystemClock_Config+0xd0>)
 800b986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	4b1f      	ldr	r3, [pc, #124]	; (800ba0c <SystemClock_Config+0xd0>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b994:	607b      	str	r3, [r7, #4]
 800b996:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b998:	2301      	movs	r3, #1
 800b99a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b99c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b9a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b9ac:	2304      	movs	r3, #4
 800b9ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800b9b0:	23a8      	movs	r3, #168	; 0xa8
 800b9b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b9b8:	2304      	movs	r3, #4
 800b9ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b9bc:	f107 0320 	add.w	r3, r7, #32
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f003 fa4f 	bl	800ee64 <HAL_RCC_OscConfig>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800b9cc:	f000 fccc 	bl	800c368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b9d0:	230f      	movs	r3, #15
 800b9d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b9dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b9e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b9e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b9e8:	f107 030c 	add.w	r3, r7, #12
 800b9ec:	2105      	movs	r1, #5
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f003 fca8 	bl	800f344 <HAL_RCC_ClockConfig>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800b9fa:	f000 fcb5 	bl	800c368 <Error_Handler>
  }
}
 800b9fe:	bf00      	nop
 800ba00:	3750      	adds	r7, #80	; 0x50
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	40023800 	.word	0x40023800
 800ba0c:	40007000 	.word	0x40007000

0800ba10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ba16:	463b      	mov	r3, r7
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	605a      	str	r2, [r3, #4]
 800ba1e:	609a      	str	r2, [r3, #8]
 800ba20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ba22:	4b2f      	ldr	r3, [pc, #188]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba24:	4a2f      	ldr	r2, [pc, #188]	; (800bae4 <MX_ADC1_Init+0xd4>)
 800ba26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ba28:	4b2d      	ldr	r3, [pc, #180]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ba2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ba30:	4b2b      	ldr	r3, [pc, #172]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ba36:	4b2a      	ldr	r3, [pc, #168]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba38:	2201      	movs	r2, #1
 800ba3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ba3c:	4b28      	ldr	r3, [pc, #160]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba3e:	2201      	movs	r2, #1
 800ba40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ba42:	4b27      	ldr	r3, [pc, #156]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ba4a:	4b25      	ldr	r3, [pc, #148]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ba50:	4b23      	ldr	r3, [pc, #140]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba52:	4a25      	ldr	r2, [pc, #148]	; (800bae8 <MX_ADC1_Init+0xd8>)
 800ba54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ba56:	4b22      	ldr	r3, [pc, #136]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800ba5c:	4b20      	ldr	r3, [pc, #128]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba5e:	2203      	movs	r2, #3
 800ba60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ba62:	4b1f      	ldr	r3, [pc, #124]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ba6a:	4b1d      	ldr	r3, [pc, #116]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ba70:	481b      	ldr	r0, [pc, #108]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba72:	f001 fc29 	bl	800d2c8 <HAL_ADC_Init>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ba7c:	f000 fc74 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800ba80:	230a      	movs	r3, #10
 800ba82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ba84:	2301      	movs	r3, #1
 800ba86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ba8c:	463b      	mov	r3, r7
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4813      	ldr	r0, [pc, #76]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800ba92:	f001 ff01 	bl	800d898 <HAL_ADC_ConfigChannel>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ba9c:	f000 fc64 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800baa0:	230e      	movs	r3, #14
 800baa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800baa4:	2302      	movs	r3, #2
 800baa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800baa8:	463b      	mov	r3, r7
 800baaa:	4619      	mov	r1, r3
 800baac:	480c      	ldr	r0, [pc, #48]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800baae:	f001 fef3 	bl	800d898 <HAL_ADC_ConfigChannel>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800bab8:	f000 fc56 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800babc:	2309      	movs	r3, #9
 800babe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800bac0:	2303      	movs	r3, #3
 800bac2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bac4:	463b      	mov	r3, r7
 800bac6:	4619      	mov	r1, r3
 800bac8:	4805      	ldr	r0, [pc, #20]	; (800bae0 <MX_ADC1_Init+0xd0>)
 800baca:	f001 fee5 	bl	800d898 <HAL_ADC_ConfigChannel>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800bad4:	f000 fc48 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	20000730 	.word	0x20000730
 800bae4:	40012000 	.word	0x40012000
 800bae8:	0f000001 	.word	0x0f000001

0800baec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800baf2:	463b      	mov	r3, r7
 800baf4:	2200      	movs	r2, #0
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	605a      	str	r2, [r3, #4]
 800bafa:	609a      	str	r2, [r3, #8]
 800bafc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800bafe:	4b28      	ldr	r3, [pc, #160]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb00:	4a28      	ldr	r2, [pc, #160]	; (800bba4 <MX_ADC2_Init+0xb8>)
 800bb02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800bb04:	4b26      	ldr	r3, [pc, #152]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bb0a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800bb0c:	4b24      	ldr	r3, [pc, #144]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800bb12:	4b23      	ldr	r3, [pc, #140]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb14:	2201      	movs	r2, #1
 800bb16:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800bb18:	4b21      	ldr	r3, [pc, #132]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800bb1e:	4b20      	ldr	r3, [pc, #128]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bb26:	4b1e      	ldr	r3, [pc, #120]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bb2c:	4b1c      	ldr	r3, [pc, #112]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb2e:	4a1e      	ldr	r2, [pc, #120]	; (800bba8 <MX_ADC2_Init+0xbc>)
 800bb30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bb32:	4b1b      	ldr	r3, [pc, #108]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800bb38:	4b19      	ldr	r3, [pc, #100]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800bb3e:	4b18      	ldr	r3, [pc, #96]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb40:	2201      	movs	r2, #1
 800bb42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bb46:	4b16      	ldr	r3, [pc, #88]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb48:	2201      	movs	r2, #1
 800bb4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800bb4c:	4814      	ldr	r0, [pc, #80]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb4e:	f001 fbbb 	bl	800d2c8 <HAL_ADC_Init>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800bb58:	f000 fc06 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800bb5c:	230b      	movs	r3, #11
 800bb5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800bb60:	2301      	movs	r3, #1
 800bb62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800bb64:	2303      	movs	r3, #3
 800bb66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bb68:	463b      	mov	r3, r7
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	480c      	ldr	r0, [pc, #48]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb6e:	f001 fe93 	bl	800d898 <HAL_ADC_ConfigChannel>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800bb78:	f000 fbf6 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800bb7c:	230f      	movs	r3, #15
 800bb7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800bb80:	2302      	movs	r3, #2
 800bb82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bb84:	463b      	mov	r3, r7
 800bb86:	4619      	mov	r1, r3
 800bb88:	4805      	ldr	r0, [pc, #20]	; (800bba0 <MX_ADC2_Init+0xb4>)
 800bb8a:	f001 fe85 	bl	800d898 <HAL_ADC_ConfigChannel>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800bb94:	f000 fbe8 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800bb98:	bf00      	nop
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20000610 	.word	0x20000610
 800bba4:	40012100 	.word	0x40012100
 800bba8:	0f000001 	.word	0x0f000001

0800bbac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800bbb0:	4b17      	ldr	r3, [pc, #92]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbb2:	4a18      	ldr	r2, [pc, #96]	; (800bc14 <MX_SPI3_Init+0x68>)
 800bbb4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800bbb6:	4b16      	ldr	r3, [pc, #88]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bbbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800bbbe:	4b14      	ldr	r3, [pc, #80]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800bbc4:	4b12      	ldr	r3, [pc, #72]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800bbca:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbcc:	2202      	movs	r2, #2
 800bbce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800bbd0:	4b0f      	ldr	r3, [pc, #60]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800bbd6:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbdc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800bbde:	4b0c      	ldr	r3, [pc, #48]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbe0:	2228      	movs	r2, #40	; 0x28
 800bbe2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bbe4:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800bbea:	4b09      	ldr	r3, [pc, #36]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbec:	2200      	movs	r2, #0
 800bbee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbf0:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800bbf6:	4b06      	ldr	r3, [pc, #24]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbf8:	220a      	movs	r2, #10
 800bbfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800bbfc:	4804      	ldr	r0, [pc, #16]	; (800bc10 <MX_SPI3_Init+0x64>)
 800bbfe:	f003 fd93 	bl	800f728 <HAL_SPI_Init>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800bc08:	f000 fbae 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800bc0c:	bf00      	nop
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	200006d8 	.word	0x200006d8
 800bc14:	40003c00 	.word	0x40003c00

0800bc18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bc1e:	f107 0308 	add.w	r3, r7, #8
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	605a      	str	r2, [r3, #4]
 800bc28:	609a      	str	r2, [r3, #8]
 800bc2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bc2c:	463b      	mov	r3, r7
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800bc34:	4b1e      	ldr	r3, [pc, #120]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc36:	4a1f      	ldr	r2, [pc, #124]	; (800bcb4 <MX_TIM1_Init+0x9c>)
 800bc38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800bc3a:	4b1d      	ldr	r3, [pc, #116]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc3c:	22a7      	movs	r2, #167	; 0xa7
 800bc3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc40:	4b1b      	ldr	r3, [pc, #108]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800bc46:	4b1a      	ldr	r3, [pc, #104]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc48:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bc4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bc4e:	4b18      	ldr	r3, [pc, #96]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800bc54:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bc5a:	4b15      	ldr	r3, [pc, #84]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800bc60:	4813      	ldr	r0, [pc, #76]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc62:	f003 fdc5 	bl	800f7f0 <HAL_TIM_Base_Init>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800bc6c:	f000 fb7c 	bl	800c368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bc70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800bc76:	f107 0308 	add.w	r3, r7, #8
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	480c      	ldr	r0, [pc, #48]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc7e:	f004 fb37 	bl	80102f0 <HAL_TIM_ConfigClockSource>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800bc88:	f000 fb6e 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800bc94:	463b      	mov	r3, r7
 800bc96:	4619      	mov	r1, r3
 800bc98:	4805      	ldr	r0, [pc, #20]	; (800bcb0 <MX_TIM1_Init+0x98>)
 800bc9a:	f004 ffe3 	bl	8010c64 <HAL_TIMEx_MasterConfigSynchronization>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800bca4:	f000 fb60 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800bca8:	bf00      	nop
 800bcaa:	3718      	adds	r7, #24
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	20000818 	.word	0x20000818
 800bcb4:	40010000 	.word	0x40010000

0800bcb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08e      	sub	sp, #56	; 0x38
 800bcbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bcbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	605a      	str	r2, [r3, #4]
 800bcc8:	609a      	str	r2, [r3, #8]
 800bcca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bccc:	f107 0320 	add.w	r3, r7, #32
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bcd6:	1d3b      	adds	r3, r7, #4
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	605a      	str	r2, [r3, #4]
 800bcde:	609a      	str	r2, [r3, #8]
 800bce0:	60da      	str	r2, [r3, #12]
 800bce2:	611a      	str	r2, [r3, #16]
 800bce4:	615a      	str	r2, [r3, #20]
 800bce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800bce8:	4b2d      	ldr	r3, [pc, #180]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bcea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bcee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800bcf0:	4b2b      	ldr	r3, [pc, #172]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bcf6:	4b2a      	ldr	r3, [pc, #168]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800bcfc:	4b28      	ldr	r3, [pc, #160]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bcfe:	f241 0267 	movw	r2, #4199	; 0x1067
 800bd02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bd04:	4b26      	ldr	r3, [pc, #152]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bd0a:	4b25      	ldr	r3, [pc, #148]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800bd10:	4823      	ldr	r0, [pc, #140]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bd12:	f003 fd6d 	bl	800f7f0 <HAL_TIM_Base_Init>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800bd1c:	f000 fb24 	bl	800c368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bd20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800bd26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	481c      	ldr	r0, [pc, #112]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bd2e:	f004 fadf 	bl	80102f0 <HAL_TIM_ConfigClockSource>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800bd38:	f000 fb16 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800bd3c:	4818      	ldr	r0, [pc, #96]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bd3e:	f003 ff25 	bl	800fb8c <HAL_TIM_PWM_Init>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800bd48:	f000 fb0e 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bd50:	2300      	movs	r3, #0
 800bd52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bd54:	f107 0320 	add.w	r3, r7, #32
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4811      	ldr	r0, [pc, #68]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bd5c:	f004 ff82 	bl	8010c64 <HAL_TIMEx_MasterConfigSynchronization>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800bd66:	f000 faff 	bl	800c368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bd6a:	2360      	movs	r3, #96	; 0x60
 800bd6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800bd7a:	1d3b      	adds	r3, r7, #4
 800bd7c:	220c      	movs	r2, #12
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4807      	ldr	r0, [pc, #28]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bd82:	f004 f9ef 	bl	8010164 <HAL_TIM_PWM_ConfigChannel>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800bd8c:	f000 faec 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800bd90:	4803      	ldr	r0, [pc, #12]	; (800bda0 <MX_TIM2_Init+0xe8>)
 800bd92:	f000 fd89 	bl	800c8a8 <HAL_TIM_MspPostInit>

}
 800bd96:	bf00      	nop
 800bd98:	3738      	adds	r7, #56	; 0x38
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20000858 	.word	0x20000858

0800bda4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08c      	sub	sp, #48	; 0x30
 800bda8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800bdaa:	f107 030c 	add.w	r3, r7, #12
 800bdae:	2224      	movs	r2, #36	; 0x24
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f005 fd89 	bl	80118ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bdb8:	1d3b      	adds	r3, r7, #4
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]
 800bdbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800bdc0:	4b20      	ldr	r3, [pc, #128]	; (800be44 <MX_TIM3_Init+0xa0>)
 800bdc2:	4a21      	ldr	r2, [pc, #132]	; (800be48 <MX_TIM3_Init+0xa4>)
 800bdc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800bdc6:	4b1f      	ldr	r3, [pc, #124]	; (800be44 <MX_TIM3_Init+0xa0>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bdcc:	4b1d      	ldr	r3, [pc, #116]	; (800be44 <MX_TIM3_Init+0xa0>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800bdd2:	4b1c      	ldr	r3, [pc, #112]	; (800be44 <MX_TIM3_Init+0xa0>)
 800bdd4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800bdd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bdda:	4b1a      	ldr	r3, [pc, #104]	; (800be44 <MX_TIM3_Init+0xa0>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bde0:	4b18      	ldr	r3, [pc, #96]	; (800be44 <MX_TIM3_Init+0xa0>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800bde6:	2303      	movs	r3, #3
 800bde8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800bdea:	2300      	movs	r3, #0
 800bdec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800bdfe:	2301      	movs	r3, #1
 800be00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800be02:	2300      	movs	r3, #0
 800be04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800be0a:	f107 030c 	add.w	r3, r7, #12
 800be0e:	4619      	mov	r1, r3
 800be10:	480c      	ldr	r0, [pc, #48]	; (800be44 <MX_TIM3_Init+0xa0>)
 800be12:	f003 ff2f 	bl	800fc74 <HAL_TIM_Encoder_Init>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800be1c:	f000 faa4 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800be20:	2300      	movs	r3, #0
 800be22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800be24:	2300      	movs	r3, #0
 800be26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800be28:	1d3b      	adds	r3, r7, #4
 800be2a:	4619      	mov	r1, r3
 800be2c:	4805      	ldr	r0, [pc, #20]	; (800be44 <MX_TIM3_Init+0xa0>)
 800be2e:	f004 ff19 	bl	8010c64 <HAL_TIMEx_MasterConfigSynchronization>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800be38:	f000 fa96 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800be3c:	bf00      	nop
 800be3e:	3730      	adds	r7, #48	; 0x30
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	20000698 	.word	0x20000698
 800be48:	40000400 	.word	0x40000400

0800be4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08c      	sub	sp, #48	; 0x30
 800be50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800be52:	f107 030c 	add.w	r3, r7, #12
 800be56:	2224      	movs	r2, #36	; 0x24
 800be58:	2100      	movs	r1, #0
 800be5a:	4618      	mov	r0, r3
 800be5c:	f005 fd35 	bl	80118ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800be60:	1d3b      	adds	r3, r7, #4
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800be68:	4b20      	ldr	r3, [pc, #128]	; (800beec <MX_TIM4_Init+0xa0>)
 800be6a:	4a21      	ldr	r2, [pc, #132]	; (800bef0 <MX_TIM4_Init+0xa4>)
 800be6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800be6e:	4b1f      	ldr	r3, [pc, #124]	; (800beec <MX_TIM4_Init+0xa0>)
 800be70:	2200      	movs	r2, #0
 800be72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be74:	4b1d      	ldr	r3, [pc, #116]	; (800beec <MX_TIM4_Init+0xa0>)
 800be76:	2200      	movs	r2, #0
 800be78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800be7a:	4b1c      	ldr	r3, [pc, #112]	; (800beec <MX_TIM4_Init+0xa0>)
 800be7c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800be80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800be82:	4b1a      	ldr	r3, [pc, #104]	; (800beec <MX_TIM4_Init+0xa0>)
 800be84:	2200      	movs	r2, #0
 800be86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be88:	4b18      	ldr	r3, [pc, #96]	; (800beec <MX_TIM4_Init+0xa0>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800be8e:	2303      	movs	r3, #3
 800be90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800be92:	2300      	movs	r3, #0
 800be94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800be96:	2301      	movs	r3, #1
 800be98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800be9a:	2300      	movs	r3, #0
 800be9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800be9e:	2300      	movs	r3, #0
 800bea0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800bea2:	2300      	movs	r3, #0
 800bea4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800bea6:	2301      	movs	r3, #1
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800beaa:	2300      	movs	r3, #0
 800beac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800beb2:	f107 030c 	add.w	r3, r7, #12
 800beb6:	4619      	mov	r1, r3
 800beb8:	480c      	ldr	r0, [pc, #48]	; (800beec <MX_TIM4_Init+0xa0>)
 800beba:	f003 fedb 	bl	800fc74 <HAL_TIM_Encoder_Init>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800bec4:	f000 fa50 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bec8:	2300      	movs	r3, #0
 800beca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800becc:	2300      	movs	r3, #0
 800bece:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800bed0:	1d3b      	adds	r3, r7, #4
 800bed2:	4619      	mov	r1, r3
 800bed4:	4805      	ldr	r0, [pc, #20]	; (800beec <MX_TIM4_Init+0xa0>)
 800bed6:	f004 fec5 	bl	8010c64 <HAL_TIMEx_MasterConfigSynchronization>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800bee0:	f000 fa42 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800bee4:	bf00      	nop
 800bee6:	3730      	adds	r7, #48	; 0x30
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	200005d0 	.word	0x200005d0
 800bef0:	40000800 	.word	0x40000800

0800bef4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08e      	sub	sp, #56	; 0x38
 800bef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800befa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	605a      	str	r2, [r3, #4]
 800bf04:	609a      	str	r2, [r3, #8]
 800bf06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf08:	f107 0320 	add.w	r3, r7, #32
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bf12:	1d3b      	adds	r3, r7, #4
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	605a      	str	r2, [r3, #4]
 800bf1a:	609a      	str	r2, [r3, #8]
 800bf1c:	60da      	str	r2, [r3, #12]
 800bf1e:	611a      	str	r2, [r3, #16]
 800bf20:	615a      	str	r2, [r3, #20]
 800bf22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800bf24:	4b2c      	ldr	r3, [pc, #176]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf26:	4a2d      	ldr	r2, [pc, #180]	; (800bfdc <MX_TIM5_Init+0xe8>)
 800bf28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800bf2a:	4b2b      	ldr	r3, [pc, #172]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf30:	4b29      	ldr	r3, [pc, #164]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800bf36:	4b28      	ldr	r3, [pc, #160]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf38:	f241 0267 	movw	r2, #4199	; 0x1067
 800bf3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf3e:	4b26      	ldr	r3, [pc, #152]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bf44:	4b24      	ldr	r3, [pc, #144]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800bf4a:	4823      	ldr	r0, [pc, #140]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf4c:	f003 fc50 	bl	800f7f0 <HAL_TIM_Base_Init>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800bf56:	f000 fa07 	bl	800c368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bf5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800bf60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf64:	4619      	mov	r1, r3
 800bf66:	481c      	ldr	r0, [pc, #112]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf68:	f004 f9c2 	bl	80102f0 <HAL_TIM_ConfigClockSource>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d001      	beq.n	800bf76 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800bf72:	f000 f9f9 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800bf76:	4818      	ldr	r0, [pc, #96]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf78:	f003 fe08 	bl	800fb8c <HAL_TIM_PWM_Init>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800bf82:	f000 f9f1 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bf86:	2300      	movs	r3, #0
 800bf88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800bf8e:	f107 0320 	add.w	r3, r7, #32
 800bf92:	4619      	mov	r1, r3
 800bf94:	4810      	ldr	r0, [pc, #64]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bf96:	f004 fe65 	bl	8010c64 <HAL_TIMEx_MasterConfigSynchronization>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800bfa0:	f000 f9e2 	bl	800c368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bfa4:	2360      	movs	r3, #96	; 0x60
 800bfa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bfb4:	1d3b      	adds	r3, r7, #4
 800bfb6:	2204      	movs	r2, #4
 800bfb8:	4619      	mov	r1, r3
 800bfba:	4807      	ldr	r0, [pc, #28]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bfbc:	f004 f8d2 	bl	8010164 <HAL_TIM_PWM_ConfigChannel>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800bfc6:	f000 f9cf 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800bfca:	4803      	ldr	r0, [pc, #12]	; (800bfd8 <MX_TIM5_Init+0xe4>)
 800bfcc:	f000 fc6c 	bl	800c8a8 <HAL_TIM_MspPostInit>

}
 800bfd0:	bf00      	nop
 800bfd2:	3738      	adds	r7, #56	; 0x38
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	20000658 	.word	0x20000658
 800bfdc:	40000c00 	.word	0x40000c00

0800bfe0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b096      	sub	sp, #88	; 0x58
 800bfe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bfe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	605a      	str	r2, [r3, #4]
 800bff0:	609a      	str	r2, [r3, #8]
 800bff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bff4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	605a      	str	r2, [r3, #4]
 800c008:	609a      	str	r2, [r3, #8]
 800c00a:	60da      	str	r2, [r3, #12]
 800c00c:	611a      	str	r2, [r3, #16]
 800c00e:	615a      	str	r2, [r3, #20]
 800c010:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c012:	1d3b      	adds	r3, r7, #4
 800c014:	2220      	movs	r2, #32
 800c016:	2100      	movs	r1, #0
 800c018:	4618      	mov	r0, r3
 800c01a:	f005 fc56 	bl	80118ca <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800c01e:	4b42      	ldr	r3, [pc, #264]	; (800c128 <MX_TIM8_Init+0x148>)
 800c020:	4a42      	ldr	r2, [pc, #264]	; (800c12c <MX_TIM8_Init+0x14c>)
 800c022:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800c024:	4b40      	ldr	r3, [pc, #256]	; (800c128 <MX_TIM8_Init+0x148>)
 800c026:	22a7      	movs	r2, #167	; 0xa7
 800c028:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c02a:	4b3f      	ldr	r3, [pc, #252]	; (800c128 <MX_TIM8_Init+0x148>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800c030:	4b3d      	ldr	r3, [pc, #244]	; (800c128 <MX_TIM8_Init+0x148>)
 800c032:	2231      	movs	r2, #49	; 0x31
 800c034:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c036:	4b3c      	ldr	r3, [pc, #240]	; (800c128 <MX_TIM8_Init+0x148>)
 800c038:	2200      	movs	r2, #0
 800c03a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800c03c:	4b3a      	ldr	r3, [pc, #232]	; (800c128 <MX_TIM8_Init+0x148>)
 800c03e:	2200      	movs	r2, #0
 800c040:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c042:	4b39      	ldr	r3, [pc, #228]	; (800c128 <MX_TIM8_Init+0x148>)
 800c044:	2280      	movs	r2, #128	; 0x80
 800c046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c048:	4837      	ldr	r0, [pc, #220]	; (800c128 <MX_TIM8_Init+0x148>)
 800c04a:	f003 fbd1 	bl	800f7f0 <HAL_TIM_Base_Init>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800c054:	f000 f988 	bl	800c368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c05c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c05e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c062:	4619      	mov	r1, r3
 800c064:	4830      	ldr	r0, [pc, #192]	; (800c128 <MX_TIM8_Init+0x148>)
 800c066:	f004 f943 	bl	80102f0 <HAL_TIM_ConfigClockSource>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d001      	beq.n	800c074 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800c070:	f000 f97a 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c074:	482c      	ldr	r0, [pc, #176]	; (800c128 <MX_TIM8_Init+0x148>)
 800c076:	f003 fc35 	bl	800f8e4 <HAL_TIM_OC_Init>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d001      	beq.n	800c084 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800c080:	f000 f972 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c084:	2300      	movs	r3, #0
 800c086:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c088:	2300      	movs	r3, #0
 800c08a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c08c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c090:	4619      	mov	r1, r3
 800c092:	4825      	ldr	r0, [pc, #148]	; (800c128 <MX_TIM8_Init+0x148>)
 800c094:	f004 fde6 	bl	8010c64 <HAL_TIMEx_MasterConfigSynchronization>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800c09e:	f000 f963 	bl	800c368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c0a2:	2330      	movs	r3, #48	; 0x30
 800c0a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800c0a6:	2318      	movs	r3, #24
 800c0a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c0be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4818      	ldr	r0, [pc, #96]	; (800c128 <MX_TIM8_Init+0x148>)
 800c0c8:	f003 ffec 	bl	80100a4 <HAL_TIM_OC_ConfigChannel>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800c0d2:	f000 f949 	bl	800c368 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800c0d6:	4b14      	ldr	r3, [pc, #80]	; (800c128 <MX_TIM8_Init+0x148>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	699a      	ldr	r2, [r3, #24]
 800c0dc:	4b12      	ldr	r3, [pc, #72]	; (800c128 <MX_TIM8_Init+0x148>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f042 0208 	orr.w	r2, r2, #8
 800c0e4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c0fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c100:	2300      	movs	r3, #0
 800c102:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c104:	1d3b      	adds	r3, r7, #4
 800c106:	4619      	mov	r1, r3
 800c108:	4807      	ldr	r0, [pc, #28]	; (800c128 <MX_TIM8_Init+0x148>)
 800c10a:	f004 fe27 	bl	8010d5c <HAL_TIMEx_ConfigBreakDeadTime>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800c114:	f000 f928 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800c118:	4803      	ldr	r0, [pc, #12]	; (800c128 <MX_TIM8_Init+0x148>)
 800c11a:	f000 fbc5 	bl	800c8a8 <HAL_TIM_MspPostInit>

}
 800c11e:	bf00      	nop
 800c120:	3758      	adds	r7, #88	; 0x58
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	20000590 	.word	0x20000590
 800c12c:	40010400 	.word	0x40010400

0800c130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c134:	4b11      	ldr	r3, [pc, #68]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c136:	4a12      	ldr	r2, [pc, #72]	; (800c180 <MX_USART1_UART_Init+0x50>)
 800c138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c13a:	4b10      	ldr	r3, [pc, #64]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c13c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c142:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c144:	2200      	movs	r2, #0
 800c146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c148:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c14e:	4b0b      	ldr	r3, [pc, #44]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c150:	2200      	movs	r2, #0
 800c152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c154:	4b09      	ldr	r3, [pc, #36]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c156:	220c      	movs	r2, #12
 800c158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c15a:	4b08      	ldr	r3, [pc, #32]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c160:	4b06      	ldr	r3, [pc, #24]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c162:	2200      	movs	r2, #0
 800c164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c166:	4805      	ldr	r0, [pc, #20]	; (800c17c <MX_USART1_UART_Init+0x4c>)
 800c168:	f004 fe83 	bl	8010e72 <HAL_UART_Init>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d001      	beq.n	800c176 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c172:	f000 f8f9 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c176:	bf00      	nop
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	20000778 	.word	0x20000778
 800c180:	40011000 	.word	0x40011000

0800c184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c18a:	2300      	movs	r3, #0
 800c18c:	607b      	str	r3, [r7, #4]
 800c18e:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <MX_DMA_Init+0x4c>)
 800c190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c192:	4a0f      	ldr	r2, [pc, #60]	; (800c1d0 <MX_DMA_Init+0x4c>)
 800c194:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c198:	6313      	str	r3, [r2, #48]	; 0x30
 800c19a:	4b0d      	ldr	r3, [pc, #52]	; (800c1d0 <MX_DMA_Init+0x4c>)
 800c19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c19e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1a2:	607b      	str	r3, [r7, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	2038      	movs	r0, #56	; 0x38
 800c1ac:	f001 fef9 	bl	800dfa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c1b0:	2038      	movs	r0, #56	; 0x38
 800c1b2:	f001 ff12 	bl	800dfda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	203a      	movs	r0, #58	; 0x3a
 800c1bc:	f001 fef1 	bl	800dfa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c1c0:	203a      	movs	r0, #58	; 0x3a
 800c1c2:	f001 ff0a 	bl	800dfda <HAL_NVIC_EnableIRQ>

}
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	40023800 	.word	0x40023800

0800c1d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08a      	sub	sp, #40	; 0x28
 800c1d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1da:	f107 0314 	add.w	r3, r7, #20
 800c1de:	2200      	movs	r2, #0
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	605a      	str	r2, [r3, #4]
 800c1e4:	609a      	str	r2, [r3, #8]
 800c1e6:	60da      	str	r2, [r3, #12]
 800c1e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	613b      	str	r3, [r7, #16]
 800c1ee:	4b59      	ldr	r3, [pc, #356]	; (800c354 <MX_GPIO_Init+0x180>)
 800c1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f2:	4a58      	ldr	r2, [pc, #352]	; (800c354 <MX_GPIO_Init+0x180>)
 800c1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1f8:	6313      	str	r3, [r2, #48]	; 0x30
 800c1fa:	4b56      	ldr	r3, [pc, #344]	; (800c354 <MX_GPIO_Init+0x180>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c202:	613b      	str	r3, [r7, #16]
 800c204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c206:	2300      	movs	r3, #0
 800c208:	60fb      	str	r3, [r7, #12]
 800c20a:	4b52      	ldr	r3, [pc, #328]	; (800c354 <MX_GPIO_Init+0x180>)
 800c20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20e:	4a51      	ldr	r2, [pc, #324]	; (800c354 <MX_GPIO_Init+0x180>)
 800c210:	f043 0304 	orr.w	r3, r3, #4
 800c214:	6313      	str	r3, [r2, #48]	; 0x30
 800c216:	4b4f      	ldr	r3, [pc, #316]	; (800c354 <MX_GPIO_Init+0x180>)
 800c218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21a:	f003 0304 	and.w	r3, r3, #4
 800c21e:	60fb      	str	r3, [r7, #12]
 800c220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c222:	2300      	movs	r3, #0
 800c224:	60bb      	str	r3, [r7, #8]
 800c226:	4b4b      	ldr	r3, [pc, #300]	; (800c354 <MX_GPIO_Init+0x180>)
 800c228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22a:	4a4a      	ldr	r2, [pc, #296]	; (800c354 <MX_GPIO_Init+0x180>)
 800c22c:	f043 0301 	orr.w	r3, r3, #1
 800c230:	6313      	str	r3, [r2, #48]	; 0x30
 800c232:	4b48      	ldr	r3, [pc, #288]	; (800c354 <MX_GPIO_Init+0x180>)
 800c234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c236:	f003 0301 	and.w	r3, r3, #1
 800c23a:	60bb      	str	r3, [r7, #8]
 800c23c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c23e:	2300      	movs	r3, #0
 800c240:	607b      	str	r3, [r7, #4]
 800c242:	4b44      	ldr	r3, [pc, #272]	; (800c354 <MX_GPIO_Init+0x180>)
 800c244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c246:	4a43      	ldr	r2, [pc, #268]	; (800c354 <MX_GPIO_Init+0x180>)
 800c248:	f043 0302 	orr.w	r3, r3, #2
 800c24c:	6313      	str	r3, [r2, #48]	; 0x30
 800c24e:	4b41      	ldr	r3, [pc, #260]	; (800c354 <MX_GPIO_Init+0x180>)
 800c250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c252:	f003 0302 	and.w	r3, r3, #2
 800c256:	607b      	str	r3, [r7, #4]
 800c258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c25a:	2300      	movs	r3, #0
 800c25c:	603b      	str	r3, [r7, #0]
 800c25e:	4b3d      	ldr	r3, [pc, #244]	; (800c354 <MX_GPIO_Init+0x180>)
 800c260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c262:	4a3c      	ldr	r2, [pc, #240]	; (800c354 <MX_GPIO_Init+0x180>)
 800c264:	f043 0308 	orr.w	r3, r3, #8
 800c268:	6313      	str	r3, [r2, #48]	; 0x30
 800c26a:	4b3a      	ldr	r3, [pc, #232]	; (800c354 <MX_GPIO_Init+0x180>)
 800c26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26e:	f003 0308 	and.w	r3, r3, #8
 800c272:	603b      	str	r3, [r7, #0]
 800c274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c276:	2200      	movs	r2, #0
 800c278:	f44f 7141 	mov.w	r1, #772	; 0x304
 800c27c:	4836      	ldr	r0, [pc, #216]	; (800c358 <MX_GPIO_Init+0x184>)
 800c27e:	f002 fdd7 	bl	800ee30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c282:	2200      	movs	r2, #0
 800c284:	2105      	movs	r1, #5
 800c286:	4835      	ldr	r0, [pc, #212]	; (800c35c <MX_GPIO_Init+0x188>)
 800c288:	f002 fdd2 	bl	800ee30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c28c:	2200      	movs	r2, #0
 800c28e:	2104      	movs	r1, #4
 800c290:	4833      	ldr	r0, [pc, #204]	; (800c360 <MX_GPIO_Init+0x18c>)
 800c292:	f002 fdcd 	bl	800ee30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c296:	2200      	movs	r2, #0
 800c298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c29c:	4831      	ldr	r0, [pc, #196]	; (800c364 <MX_GPIO_Init+0x190>)
 800c29e:	f002 fdc7 	bl	800ee30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800c2a2:	f44f 7341 	mov.w	r3, #772	; 0x304
 800c2a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c2b4:	f107 0314 	add.w	r3, r7, #20
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4827      	ldr	r0, [pc, #156]	; (800c358 <MX_GPIO_Init+0x184>)
 800c2bc:	f002 fc1e 	bl	800eafc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c2c0:	2305      	movs	r3, #5
 800c2c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2d0:	f107 0314 	add.w	r3, r7, #20
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4821      	ldr	r0, [pc, #132]	; (800c35c <MX_GPIO_Init+0x188>)
 800c2d8:	f002 fc10 	bl	800eafc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800c2dc:	f241 0304 	movw	r3, #4100	; 0x1004
 800c2e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c2ea:	f107 0314 	add.w	r3, r7, #20
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	481c      	ldr	r0, [pc, #112]	; (800c364 <MX_GPIO_Init+0x190>)
 800c2f2:	f002 fc03 	bl	800eafc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800c2f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c2fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c300:	2300      	movs	r3, #0
 800c302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c304:	f107 0314 	add.w	r3, r7, #20
 800c308:	4619      	mov	r1, r3
 800c30a:	4814      	ldr	r0, [pc, #80]	; (800c35c <MX_GPIO_Init+0x188>)
 800c30c:	f002 fbf6 	bl	800eafc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c310:	2304      	movs	r3, #4
 800c312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c314:	2301      	movs	r3, #1
 800c316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c318:	2300      	movs	r3, #0
 800c31a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c31c:	2300      	movs	r3, #0
 800c31e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c320:	f107 0314 	add.w	r3, r7, #20
 800c324:	4619      	mov	r1, r3
 800c326:	480e      	ldr	r0, [pc, #56]	; (800c360 <MX_GPIO_Init+0x18c>)
 800c328:	f002 fbe8 	bl	800eafc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c32c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c332:	2301      	movs	r3, #1
 800c334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c336:	2300      	movs	r3, #0
 800c338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c33a:	2300      	movs	r3, #0
 800c33c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c33e:	f107 0314 	add.w	r3, r7, #20
 800c342:	4619      	mov	r1, r3
 800c344:	4807      	ldr	r0, [pc, #28]	; (800c364 <MX_GPIO_Init+0x190>)
 800c346:	f002 fbd9 	bl	800eafc <HAL_GPIO_Init>

}
 800c34a:	bf00      	nop
 800c34c:	3728      	adds	r7, #40	; 0x28
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	40023800 	.word	0x40023800
 800c358:	40020800 	.word	0x40020800
 800c35c:	40020000 	.word	0x40020000
 800c360:	40020c00 	.word	0x40020c00
 800c364:	40020400 	.word	0x40020400

0800c368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c368:	b480      	push	{r7}
 800c36a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c36c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c36e:	e7fe      	b.n	800c36e <Error_Handler+0x6>

0800c370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c376:	2300      	movs	r3, #0
 800c378:	607b      	str	r3, [r7, #4]
 800c37a:	4b13      	ldr	r3, [pc, #76]	; (800c3c8 <HAL_MspInit+0x58>)
 800c37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c37e:	4a12      	ldr	r2, [pc, #72]	; (800c3c8 <HAL_MspInit+0x58>)
 800c380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c384:	6453      	str	r3, [r2, #68]	; 0x44
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <HAL_MspInit+0x58>)
 800c388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c38a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c38e:	607b      	str	r3, [r7, #4]
 800c390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c392:	2300      	movs	r3, #0
 800c394:	603b      	str	r3, [r7, #0]
 800c396:	4b0c      	ldr	r3, [pc, #48]	; (800c3c8 <HAL_MspInit+0x58>)
 800c398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39a:	4a0b      	ldr	r2, [pc, #44]	; (800c3c8 <HAL_MspInit+0x58>)
 800c39c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3a0:	6413      	str	r3, [r2, #64]	; 0x40
 800c3a2:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <HAL_MspInit+0x58>)
 800c3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3aa:	603b      	str	r3, [r7, #0]
 800c3ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	2004      	movs	r0, #4
 800c3b4:	f001 fdf5 	bl	800dfa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800c3b8:	2004      	movs	r0, #4
 800c3ba:	f001 fe0e 	bl	800dfda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	40023800 	.word	0x40023800

0800c3cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08c      	sub	sp, #48	; 0x30
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3d4:	f107 031c 	add.w	r3, r7, #28
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	605a      	str	r2, [r3, #4]
 800c3de:	609a      	str	r2, [r3, #8]
 800c3e0:	60da      	str	r2, [r3, #12]
 800c3e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a73      	ldr	r2, [pc, #460]	; (800c5b8 <HAL_ADC_MspInit+0x1ec>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d17a      	bne.n	800c4e4 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	61bb      	str	r3, [r7, #24]
 800c3f2:	4b72      	ldr	r3, [pc, #456]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f6:	4a71      	ldr	r2, [pc, #452]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c3f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3fc:	6453      	str	r3, [r2, #68]	; 0x44
 800c3fe:	4b6f      	ldr	r3, [pc, #444]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c406:	61bb      	str	r3, [r7, #24]
 800c408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c40a:	2300      	movs	r3, #0
 800c40c:	617b      	str	r3, [r7, #20]
 800c40e:	4b6b      	ldr	r3, [pc, #428]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c412:	4a6a      	ldr	r2, [pc, #424]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c414:	f043 0304 	orr.w	r3, r3, #4
 800c418:	6313      	str	r3, [r2, #48]	; 0x30
 800c41a:	4b68      	ldr	r3, [pc, #416]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41e:	f003 0304 	and.w	r3, r3, #4
 800c422:	617b      	str	r3, [r7, #20]
 800c424:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c426:	2300      	movs	r3, #0
 800c428:	613b      	str	r3, [r7, #16]
 800c42a:	4b64      	ldr	r3, [pc, #400]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42e:	4a63      	ldr	r2, [pc, #396]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c430:	f043 0302 	orr.w	r3, r3, #2
 800c434:	6313      	str	r3, [r2, #48]	; 0x30
 800c436:	4b61      	ldr	r3, [pc, #388]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	613b      	str	r3, [r7, #16]
 800c440:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800c442:	2311      	movs	r3, #17
 800c444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c446:	2303      	movs	r3, #3
 800c448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c44e:	f107 031c 	add.w	r3, r7, #28
 800c452:	4619      	mov	r1, r3
 800c454:	485a      	ldr	r0, [pc, #360]	; (800c5c0 <HAL_ADC_MspInit+0x1f4>)
 800c456:	f002 fb51 	bl	800eafc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c45a:	2302      	movs	r3, #2
 800c45c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c45e:	2303      	movs	r3, #3
 800c460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c462:	2300      	movs	r3, #0
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c466:	f107 031c 	add.w	r3, r7, #28
 800c46a:	4619      	mov	r1, r3
 800c46c:	4855      	ldr	r0, [pc, #340]	; (800c5c4 <HAL_ADC_MspInit+0x1f8>)
 800c46e:	f002 fb45 	bl	800eafc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c472:	4b55      	ldr	r3, [pc, #340]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c474:	4a55      	ldr	r2, [pc, #340]	; (800c5cc <HAL_ADC_MspInit+0x200>)
 800c476:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c478:	4b53      	ldr	r3, [pc, #332]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c47e:	4b52      	ldr	r3, [pc, #328]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c480:	2200      	movs	r2, #0
 800c482:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c484:	4b50      	ldr	r3, [pc, #320]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c486:	2200      	movs	r2, #0
 800c488:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c48a:	4b4f      	ldr	r3, [pc, #316]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c48c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c490:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c492:	4b4d      	ldr	r3, [pc, #308]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c498:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c49a:	4b4b      	ldr	r3, [pc, #300]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c49c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c4a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c4a2:	4b49      	ldr	r3, [pc, #292]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c4a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800c4aa:	4b47      	ldr	r3, [pc, #284]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c4b0:	4b45      	ldr	r3, [pc, #276]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c4b6:	4844      	ldr	r0, [pc, #272]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c4b8:	f001 fdaa 	bl	800e010 <HAL_DMA_Init>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800c4c2:	f7ff ff51 	bl	800c368 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a3f      	ldr	r2, [pc, #252]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c4ca:	639a      	str	r2, [r3, #56]	; 0x38
 800c4cc:	4a3e      	ldr	r2, [pc, #248]	; (800c5c8 <HAL_ADC_MspInit+0x1fc>)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	2012      	movs	r0, #18
 800c4d8:	f001 fd63 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c4dc:	2012      	movs	r0, #18
 800c4de:	f001 fd7c 	bl	800dfda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800c4e2:	e065      	b.n	800c5b0 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a39      	ldr	r2, [pc, #228]	; (800c5d0 <HAL_ADC_MspInit+0x204>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d160      	bne.n	800c5b0 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	4b32      	ldr	r3, [pc, #200]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4f6:	4a31      	ldr	r2, [pc, #196]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c4f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4fc:	6453      	str	r3, [r2, #68]	; 0x44
 800c4fe:	4b2f      	ldr	r3, [pc, #188]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c506:	60fb      	str	r3, [r7, #12]
 800c508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c50a:	2300      	movs	r3, #0
 800c50c:	60bb      	str	r3, [r7, #8]
 800c50e:	4b2b      	ldr	r3, [pc, #172]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c512:	4a2a      	ldr	r2, [pc, #168]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c514:	f043 0304 	orr.w	r3, r3, #4
 800c518:	6313      	str	r3, [r2, #48]	; 0x30
 800c51a:	4b28      	ldr	r3, [pc, #160]	; (800c5bc <HAL_ADC_MspInit+0x1f0>)
 800c51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51e:	f003 0304 	and.w	r3, r3, #4
 800c522:	60bb      	str	r3, [r7, #8]
 800c524:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800c526:	2322      	movs	r3, #34	; 0x22
 800c528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c52a:	2303      	movs	r3, #3
 800c52c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c532:	f107 031c 	add.w	r3, r7, #28
 800c536:	4619      	mov	r1, r3
 800c538:	4821      	ldr	r0, [pc, #132]	; (800c5c0 <HAL_ADC_MspInit+0x1f4>)
 800c53a:	f002 fadf 	bl	800eafc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c53e:	4b25      	ldr	r3, [pc, #148]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c540:	4a25      	ldr	r2, [pc, #148]	; (800c5d8 <HAL_ADC_MspInit+0x20c>)
 800c542:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c544:	4b23      	ldr	r3, [pc, #140]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c54a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c54c:	4b21      	ldr	r3, [pc, #132]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c54e:	2200      	movs	r2, #0
 800c550:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c552:	4b20      	ldr	r3, [pc, #128]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c554:	2200      	movs	r2, #0
 800c556:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c558:	4b1e      	ldr	r3, [pc, #120]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c55a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c55e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c560:	4b1c      	ldr	r3, [pc, #112]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c566:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c568:	4b1a      	ldr	r3, [pc, #104]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c56a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c56e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c570:	4b18      	ldr	r3, [pc, #96]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c572:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c576:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800c578:	4b16      	ldr	r3, [pc, #88]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c57e:	4b15      	ldr	r3, [pc, #84]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c580:	2200      	movs	r2, #0
 800c582:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c584:	4813      	ldr	r0, [pc, #76]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c586:	f001 fd43 	bl	800e010 <HAL_DMA_Init>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800c590:	f7ff feea 	bl	800c368 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a0f      	ldr	r2, [pc, #60]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c598:	639a      	str	r2, [r3, #56]	; 0x38
 800c59a:	4a0e      	ldr	r2, [pc, #56]	; (800c5d4 <HAL_ADC_MspInit+0x208>)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	2012      	movs	r0, #18
 800c5a6:	f001 fcfc 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c5aa:	2012      	movs	r0, #18
 800c5ac:	f001 fd15 	bl	800dfda <HAL_NVIC_EnableIRQ>
}
 800c5b0:	bf00      	nop
 800c5b2:	3730      	adds	r7, #48	; 0x30
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	40012000 	.word	0x40012000
 800c5bc:	40023800 	.word	0x40023800
 800c5c0:	40020800 	.word	0x40020800
 800c5c4:	40020400 	.word	0x40020400
 800c5c8:	200007b8 	.word	0x200007b8
 800c5cc:	40026410 	.word	0x40026410
 800c5d0:	40012100 	.word	0x40012100
 800c5d4:	20000898 	.word	0x20000898
 800c5d8:	40026440 	.word	0x40026440

0800c5dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08a      	sub	sp, #40	; 0x28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5e4:	f107 0314 	add.w	r3, r7, #20
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	605a      	str	r2, [r3, #4]
 800c5ee:	609a      	str	r2, [r3, #8]
 800c5f0:	60da      	str	r2, [r3, #12]
 800c5f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a19      	ldr	r2, [pc, #100]	; (800c660 <HAL_SPI_MspInit+0x84>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d12c      	bne.n	800c658 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c5fe:	2300      	movs	r3, #0
 800c600:	613b      	str	r3, [r7, #16]
 800c602:	4b18      	ldr	r3, [pc, #96]	; (800c664 <HAL_SPI_MspInit+0x88>)
 800c604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c606:	4a17      	ldr	r2, [pc, #92]	; (800c664 <HAL_SPI_MspInit+0x88>)
 800c608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c60c:	6413      	str	r3, [r2, #64]	; 0x40
 800c60e:	4b15      	ldr	r3, [pc, #84]	; (800c664 <HAL_SPI_MspInit+0x88>)
 800c610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c61a:	2300      	movs	r3, #0
 800c61c:	60fb      	str	r3, [r7, #12]
 800c61e:	4b11      	ldr	r3, [pc, #68]	; (800c664 <HAL_SPI_MspInit+0x88>)
 800c620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c622:	4a10      	ldr	r2, [pc, #64]	; (800c664 <HAL_SPI_MspInit+0x88>)
 800c624:	f043 0304 	orr.w	r3, r3, #4
 800c628:	6313      	str	r3, [r2, #48]	; 0x30
 800c62a:	4b0e      	ldr	r3, [pc, #56]	; (800c664 <HAL_SPI_MspInit+0x88>)
 800c62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c62e:	f003 0304 	and.w	r3, r3, #4
 800c632:	60fb      	str	r3, [r7, #12]
 800c634:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800c636:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c63a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c63c:	2302      	movs	r3, #2
 800c63e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c644:	2303      	movs	r3, #3
 800c646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c648:	2306      	movs	r3, #6
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c64c:	f107 0314 	add.w	r3, r7, #20
 800c650:	4619      	mov	r1, r3
 800c652:	4805      	ldr	r0, [pc, #20]	; (800c668 <HAL_SPI_MspInit+0x8c>)
 800c654:	f002 fa52 	bl	800eafc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800c658:	bf00      	nop
 800c65a:	3728      	adds	r7, #40	; 0x28
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	40003c00 	.word	0x40003c00
 800c664:	40023800 	.word	0x40023800
 800c668:	40020800 	.word	0x40020800

0800c66c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a40      	ldr	r2, [pc, #256]	; (800c77c <HAL_TIM_Base_MspInit+0x110>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d116      	bne.n	800c6ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c67e:	2300      	movs	r3, #0
 800c680:	617b      	str	r3, [r7, #20]
 800c682:	4b3f      	ldr	r3, [pc, #252]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c686:	4a3e      	ldr	r2, [pc, #248]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c688:	f043 0301 	orr.w	r3, r3, #1
 800c68c:	6453      	str	r3, [r2, #68]	; 0x44
 800c68e:	4b3c      	ldr	r3, [pc, #240]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c692:	f003 0301 	and.w	r3, r3, #1
 800c696:	617b      	str	r3, [r7, #20]
 800c698:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800c69a:	2200      	movs	r2, #0
 800c69c:	2101      	movs	r1, #1
 800c69e:	2019      	movs	r0, #25
 800c6a0:	f001 fc7f 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c6a4:	2019      	movs	r0, #25
 800c6a6:	f001 fc98 	bl	800dfda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800c6aa:	e062      	b.n	800c772 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6b4:	d116      	bne.n	800c6e4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	613b      	str	r3, [r7, #16]
 800c6ba:	4b31      	ldr	r3, [pc, #196]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6be:	4a30      	ldr	r2, [pc, #192]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c6c0:	f043 0301 	orr.w	r3, r3, #1
 800c6c4:	6413      	str	r3, [r2, #64]	; 0x40
 800c6c6:	4b2e      	ldr	r3, [pc, #184]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	613b      	str	r3, [r7, #16]
 800c6d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	201c      	movs	r0, #28
 800c6d8:	f001 fc63 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c6dc:	201c      	movs	r0, #28
 800c6de:	f001 fc7c 	bl	800dfda <HAL_NVIC_EnableIRQ>
}
 800c6e2:	e046      	b.n	800c772 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a26      	ldr	r2, [pc, #152]	; (800c784 <HAL_TIM_Base_MspInit+0x118>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d116      	bne.n	800c71c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60fb      	str	r3, [r7, #12]
 800c6f2:	4b23      	ldr	r3, [pc, #140]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f6:	4a22      	ldr	r2, [pc, #136]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c6f8:	f043 0308 	orr.w	r3, r3, #8
 800c6fc:	6413      	str	r3, [r2, #64]	; 0x40
 800c6fe:	4b20      	ldr	r3, [pc, #128]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800c70a:	2200      	movs	r2, #0
 800c70c:	2100      	movs	r1, #0
 800c70e:	2032      	movs	r0, #50	; 0x32
 800c710:	f001 fc47 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800c714:	2032      	movs	r0, #50	; 0x32
 800c716:	f001 fc60 	bl	800dfda <HAL_NVIC_EnableIRQ>
}
 800c71a:	e02a      	b.n	800c772 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a19      	ldr	r2, [pc, #100]	; (800c788 <HAL_TIM_Base_MspInit+0x11c>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d125      	bne.n	800c772 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c726:	2300      	movs	r3, #0
 800c728:	60bb      	str	r3, [r7, #8]
 800c72a:	4b15      	ldr	r3, [pc, #84]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c72e:	4a14      	ldr	r2, [pc, #80]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c730:	f043 0302 	orr.w	r3, r3, #2
 800c734:	6453      	str	r3, [r2, #68]	; 0x44
 800c736:	4b12      	ldr	r3, [pc, #72]	; (800c780 <HAL_TIM_Base_MspInit+0x114>)
 800c738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c73a:	f003 0302 	and.w	r3, r3, #2
 800c73e:	60bb      	str	r3, [r7, #8]
 800c740:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800c742:	2200      	movs	r2, #0
 800c744:	2102      	movs	r1, #2
 800c746:	202c      	movs	r0, #44	; 0x2c
 800c748:	f001 fc2b 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800c74c:	202c      	movs	r0, #44	; 0x2c
 800c74e:	f001 fc44 	bl	800dfda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800c752:	2200      	movs	r2, #0
 800c754:	2100      	movs	r1, #0
 800c756:	202d      	movs	r0, #45	; 0x2d
 800c758:	f001 fc23 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800c75c:	202d      	movs	r0, #45	; 0x2d
 800c75e:	f001 fc3c 	bl	800dfda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800c762:	2200      	movs	r2, #0
 800c764:	2100      	movs	r1, #0
 800c766:	202e      	movs	r0, #46	; 0x2e
 800c768:	f001 fc1b 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800c76c:	202e      	movs	r0, #46	; 0x2e
 800c76e:	f001 fc34 	bl	800dfda <HAL_NVIC_EnableIRQ>
}
 800c772:	bf00      	nop
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	40010000 	.word	0x40010000
 800c780:	40023800 	.word	0x40023800
 800c784:	40000c00 	.word	0x40000c00
 800c788:	40010400 	.word	0x40010400

0800c78c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08c      	sub	sp, #48	; 0x30
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c794:	f107 031c 	add.w	r3, r7, #28
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]
 800c79c:	605a      	str	r2, [r3, #4]
 800c79e:	609a      	str	r2, [r3, #8]
 800c7a0:	60da      	str	r2, [r3, #12]
 800c7a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a3a      	ldr	r2, [pc, #232]	; (800c894 <HAL_TIM_Encoder_MspInit+0x108>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d134      	bne.n	800c818 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	61bb      	str	r3, [r7, #24]
 800c7b2:	4b39      	ldr	r3, [pc, #228]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b6:	4a38      	ldr	r2, [pc, #224]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7b8:	f043 0302 	orr.w	r3, r3, #2
 800c7bc:	6413      	str	r3, [r2, #64]	; 0x40
 800c7be:	4b36      	ldr	r3, [pc, #216]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	61bb      	str	r3, [r7, #24]
 800c7c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	617b      	str	r3, [r7, #20]
 800c7ce:	4b32      	ldr	r3, [pc, #200]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d2:	4a31      	ldr	r2, [pc, #196]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7d4:	f043 0301 	orr.w	r3, r3, #1
 800c7d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c7da:	4b2f      	ldr	r3, [pc, #188]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7de:	f003 0301 	and.w	r3, r3, #1
 800c7e2:	617b      	str	r3, [r7, #20]
 800c7e4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c7e6:	23c0      	movs	r3, #192	; 0xc0
 800c7e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7ea:	2302      	movs	r3, #2
 800c7ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c7f6:	2302      	movs	r3, #2
 800c7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7fa:	f107 031c 	add.w	r3, r7, #28
 800c7fe:	4619      	mov	r1, r3
 800c800:	4826      	ldr	r0, [pc, #152]	; (800c89c <HAL_TIM_Encoder_MspInit+0x110>)
 800c802:	f002 f97b 	bl	800eafc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c806:	2200      	movs	r2, #0
 800c808:	2100      	movs	r1, #0
 800c80a:	201d      	movs	r0, #29
 800c80c:	f001 fbc9 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c810:	201d      	movs	r0, #29
 800c812:	f001 fbe2 	bl	800dfda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800c816:	e038      	b.n	800c88a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a20      	ldr	r2, [pc, #128]	; (800c8a0 <HAL_TIM_Encoder_MspInit+0x114>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d133      	bne.n	800c88a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c822:	2300      	movs	r3, #0
 800c824:	613b      	str	r3, [r7, #16]
 800c826:	4b1c      	ldr	r3, [pc, #112]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82a:	4a1b      	ldr	r2, [pc, #108]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c82c:	f043 0304 	orr.w	r3, r3, #4
 800c830:	6413      	str	r3, [r2, #64]	; 0x40
 800c832:	4b19      	ldr	r3, [pc, #100]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c836:	f003 0304 	and.w	r3, r3, #4
 800c83a:	613b      	str	r3, [r7, #16]
 800c83c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c83e:	2300      	movs	r3, #0
 800c840:	60fb      	str	r3, [r7, #12]
 800c842:	4b15      	ldr	r3, [pc, #84]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c846:	4a14      	ldr	r2, [pc, #80]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c848:	f043 0302 	orr.w	r3, r3, #2
 800c84c:	6313      	str	r3, [r2, #48]	; 0x30
 800c84e:	4b12      	ldr	r3, [pc, #72]	; (800c898 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c852:	f003 0302 	and.w	r3, r3, #2
 800c856:	60fb      	str	r3, [r7, #12]
 800c858:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c85a:	23c0      	movs	r3, #192	; 0xc0
 800c85c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c85e:	2302      	movs	r3, #2
 800c860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c862:	2300      	movs	r3, #0
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c866:	2300      	movs	r3, #0
 800c868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c86a:	2302      	movs	r3, #2
 800c86c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c86e:	f107 031c 	add.w	r3, r7, #28
 800c872:	4619      	mov	r1, r3
 800c874:	480b      	ldr	r0, [pc, #44]	; (800c8a4 <HAL_TIM_Encoder_MspInit+0x118>)
 800c876:	f002 f941 	bl	800eafc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800c87a:	2200      	movs	r2, #0
 800c87c:	2100      	movs	r1, #0
 800c87e:	201e      	movs	r0, #30
 800c880:	f001 fb8f 	bl	800dfa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800c884:	201e      	movs	r0, #30
 800c886:	f001 fba8 	bl	800dfda <HAL_NVIC_EnableIRQ>
}
 800c88a:	bf00      	nop
 800c88c:	3730      	adds	r7, #48	; 0x30
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	40000400 	.word	0x40000400
 800c898:	40023800 	.word	0x40023800
 800c89c:	40020000 	.word	0x40020000
 800c8a0:	40000800 	.word	0x40000800
 800c8a4:	40020400 	.word	0x40020400

0800c8a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b08c      	sub	sp, #48	; 0x30
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8b0:	f107 031c 	add.w	r3, r7, #28
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	605a      	str	r2, [r3, #4]
 800c8ba:	609a      	str	r2, [r3, #8]
 800c8bc:	60da      	str	r2, [r3, #12]
 800c8be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8c8:	d11e      	bne.n	800c908 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	61bb      	str	r3, [r7, #24]
 800c8ce:	4b43      	ldr	r3, [pc, #268]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d2:	4a42      	ldr	r2, [pc, #264]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c8d4:	f043 0301 	orr.w	r3, r3, #1
 800c8d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c8da:	4b40      	ldr	r3, [pc, #256]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	61bb      	str	r3, [r7, #24]
 800c8e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c8e6:	2308      	movs	r3, #8
 800c8e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8fa:	f107 031c 	add.w	r3, r7, #28
 800c8fe:	4619      	mov	r1, r3
 800c900:	4837      	ldr	r0, [pc, #220]	; (800c9e0 <HAL_TIM_MspPostInit+0x138>)
 800c902:	f002 f8fb 	bl	800eafc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800c906:	e064      	b.n	800c9d2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a35      	ldr	r2, [pc, #212]	; (800c9e4 <HAL_TIM_MspPostInit+0x13c>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d11e      	bne.n	800c950 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c912:	2300      	movs	r3, #0
 800c914:	617b      	str	r3, [r7, #20]
 800c916:	4b31      	ldr	r3, [pc, #196]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91a:	4a30      	ldr	r2, [pc, #192]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c91c:	f043 0301 	orr.w	r3, r3, #1
 800c920:	6313      	str	r3, [r2, #48]	; 0x30
 800c922:	4b2e      	ldr	r3, [pc, #184]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	617b      	str	r3, [r7, #20]
 800c92c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c92e:	2302      	movs	r3, #2
 800c930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c932:	2302      	movs	r3, #2
 800c934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c936:	2300      	movs	r3, #0
 800c938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c93a:	2300      	movs	r3, #0
 800c93c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800c93e:	2302      	movs	r3, #2
 800c940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c942:	f107 031c 	add.w	r3, r7, #28
 800c946:	4619      	mov	r1, r3
 800c948:	4825      	ldr	r0, [pc, #148]	; (800c9e0 <HAL_TIM_MspPostInit+0x138>)
 800c94a:	f002 f8d7 	bl	800eafc <HAL_GPIO_Init>
}
 800c94e:	e040      	b.n	800c9d2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a24      	ldr	r2, [pc, #144]	; (800c9e8 <HAL_TIM_MspPostInit+0x140>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d13b      	bne.n	800c9d2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c95a:	2300      	movs	r3, #0
 800c95c:	613b      	str	r3, [r7, #16]
 800c95e:	4b1f      	ldr	r3, [pc, #124]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c962:	4a1e      	ldr	r2, [pc, #120]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c964:	f043 0301 	orr.w	r3, r3, #1
 800c968:	6313      	str	r3, [r2, #48]	; 0x30
 800c96a:	4b1c      	ldr	r3, [pc, #112]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	613b      	str	r3, [r7, #16]
 800c974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c976:	2300      	movs	r3, #0
 800c978:	60fb      	str	r3, [r7, #12]
 800c97a:	4b18      	ldr	r3, [pc, #96]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	4a17      	ldr	r2, [pc, #92]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c980:	f043 0304 	orr.w	r3, r3, #4
 800c984:	6313      	str	r3, [r2, #48]	; 0x30
 800c986:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <HAL_TIM_MspPostInit+0x134>)
 800c988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c98a:	f003 0304 	and.w	r3, r3, #4
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c992:	2320      	movs	r3, #32
 800c994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c996:	2302      	movs	r3, #2
 800c998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9a6:	f107 031c 	add.w	r3, r7, #28
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	480c      	ldr	r0, [pc, #48]	; (800c9e0 <HAL_TIM_MspPostInit+0x138>)
 800c9ae:	f002 f8a5 	bl	800eafc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c9b2:	2340      	movs	r3, #64	; 0x40
 800c9b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9b6:	2302      	movs	r3, #2
 800c9b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c9c6:	f107 031c 	add.w	r3, r7, #28
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4807      	ldr	r0, [pc, #28]	; (800c9ec <HAL_TIM_MspPostInit+0x144>)
 800c9ce:	f002 f895 	bl	800eafc <HAL_GPIO_Init>
}
 800c9d2:	bf00      	nop
 800c9d4:	3730      	adds	r7, #48	; 0x30
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	40023800 	.word	0x40023800
 800c9e0:	40020000 	.word	0x40020000
 800c9e4:	40000c00 	.word	0x40000c00
 800c9e8:	40010400 	.word	0x40010400
 800c9ec:	40020800 	.word	0x40020800

0800c9f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08a      	sub	sp, #40	; 0x28
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	605a      	str	r2, [r3, #4]
 800ca02:	609a      	str	r2, [r3, #8]
 800ca04:	60da      	str	r2, [r3, #12]
 800ca06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a19      	ldr	r2, [pc, #100]	; (800ca74 <HAL_UART_MspInit+0x84>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d12c      	bne.n	800ca6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ca12:	2300      	movs	r3, #0
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <HAL_UART_MspInit+0x88>)
 800ca18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca1a:	4a17      	ldr	r2, [pc, #92]	; (800ca78 <HAL_UART_MspInit+0x88>)
 800ca1c:	f043 0310 	orr.w	r3, r3, #16
 800ca20:	6453      	str	r3, [r2, #68]	; 0x44
 800ca22:	4b15      	ldr	r3, [pc, #84]	; (800ca78 <HAL_UART_MspInit+0x88>)
 800ca24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca26:	f003 0310 	and.w	r3, r3, #16
 800ca2a:	613b      	str	r3, [r7, #16]
 800ca2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	4b11      	ldr	r3, [pc, #68]	; (800ca78 <HAL_UART_MspInit+0x88>)
 800ca34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca36:	4a10      	ldr	r2, [pc, #64]	; (800ca78 <HAL_UART_MspInit+0x88>)
 800ca38:	f043 0301 	orr.w	r3, r3, #1
 800ca3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ca3e:	4b0e      	ldr	r3, [pc, #56]	; (800ca78 <HAL_UART_MspInit+0x88>)
 800ca40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca42:	f003 0301 	and.w	r3, r3, #1
 800ca46:	60fb      	str	r3, [r7, #12]
 800ca48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ca4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ca4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca50:	2302      	movs	r3, #2
 800ca52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca54:	2300      	movs	r3, #0
 800ca56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ca5c:	2307      	movs	r3, #7
 800ca5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca60:	f107 0314 	add.w	r3, r7, #20
 800ca64:	4619      	mov	r1, r3
 800ca66:	4805      	ldr	r0, [pc, #20]	; (800ca7c <HAL_UART_MspInit+0x8c>)
 800ca68:	f002 f848 	bl	800eafc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ca6c:	bf00      	nop
 800ca6e:	3728      	adds	r7, #40	; 0x28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	40011000 	.word	0x40011000
 800ca78:	40023800 	.word	0x40023800
 800ca7c:	40020000 	.word	0x40020000

0800ca80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ca80:	b480      	push	{r7}
 800ca82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ca84:	e7fe      	b.n	800ca84 <NMI_Handler+0x4>

0800ca86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ca86:	b480      	push	{r7}
 800ca88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ca8a:	e7fe      	b.n	800ca8a <HardFault_Handler+0x4>

0800ca8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ca90:	e7fe      	b.n	800ca90 <MemManage_Handler+0x4>

0800ca92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ca92:	b480      	push	{r7}
 800ca94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ca96:	e7fe      	b.n	800ca96 <BusFault_Handler+0x4>

0800ca98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ca9c:	e7fe      	b.n	800ca9c <UsageFault_Handler+0x4>

0800ca9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ca9e:	b480      	push	{r7}
 800caa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800caa2:	bf00      	nop
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800caac:	b480      	push	{r7}
 800caae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cab0:	bf00      	nop
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800caba:	b480      	push	{r7}
 800cabc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cabe:	bf00      	nop
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cacc:	f000 fbba 	bl	800d244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cad0:	bf00      	nop
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800cad8:	f001 fe78 	bl	800e7cc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800cadc:	bf00      	nop
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800cae4:	4803      	ldr	r0, [pc, #12]	; (800caf4 <ADC_IRQHandler+0x14>)
 800cae6:	f000 fc32 	bl	800d34e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800caea:	4803      	ldr	r0, [pc, #12]	; (800caf8 <ADC_IRQHandler+0x18>)
 800caec:	f000 fc2f 	bl	800d34e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800caf0:	bf00      	nop
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	20000730 	.word	0x20000730
 800caf8:	20000610 	.word	0x20000610

0800cafc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cb00:	4802      	ldr	r0, [pc, #8]	; (800cb0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800cb02:	f003 f9c7 	bl	800fe94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800cb06:	bf00      	nop
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	20000818 	.word	0x20000818

0800cb10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800cb14:	4802      	ldr	r0, [pc, #8]	; (800cb20 <TIM2_IRQHandler+0x10>)
 800cb16:	f003 f9bd 	bl	800fe94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800cb1a:	bf00      	nop
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	20000858 	.word	0x20000858

0800cb24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800cb28:	4802      	ldr	r0, [pc, #8]	; (800cb34 <TIM3_IRQHandler+0x10>)
 800cb2a:	f003 f9b3 	bl	800fe94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800cb2e:	bf00      	nop
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	20000698 	.word	0x20000698

0800cb38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800cb3c:	4802      	ldr	r0, [pc, #8]	; (800cb48 <TIM4_IRQHandler+0x10>)
 800cb3e:	f003 f9a9 	bl	800fe94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800cb42:	bf00      	nop
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	200005d0 	.word	0x200005d0

0800cb4c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cb50:	4802      	ldr	r0, [pc, #8]	; (800cb5c <TIM8_UP_TIM13_IRQHandler+0x10>)
 800cb52:	f003 f99f 	bl	800fe94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800cb56:	bf00      	nop
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	20000590 	.word	0x20000590

0800cb60 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cb64:	4802      	ldr	r0, [pc, #8]	; (800cb70 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800cb66:	f003 f995 	bl	800fe94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800cb6a:	bf00      	nop
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20000590 	.word	0x20000590

0800cb74 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cb78:	4802      	ldr	r0, [pc, #8]	; (800cb84 <TIM8_CC_IRQHandler+0x10>)
 800cb7a:	f003 f98b 	bl	800fe94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800cb7e:	bf00      	nop
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	20000590 	.word	0x20000590

0800cb88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800cb8c:	4802      	ldr	r0, [pc, #8]	; (800cb98 <TIM5_IRQHandler+0x10>)
 800cb8e:	f003 f981 	bl	800fe94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800cb92:	bf00      	nop
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20000658 	.word	0x20000658

0800cb9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800cba0:	4802      	ldr	r0, [pc, #8]	; (800cbac <DMA2_Stream0_IRQHandler+0x10>)
 800cba2:	f001 fbab 	bl	800e2fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800cba6:	bf00      	nop
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	200007b8 	.word	0x200007b8

0800cbb0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800cbb4:	4802      	ldr	r0, [pc, #8]	; (800cbc0 <DMA2_Stream2_IRQHandler+0x10>)
 800cbb6:	f001 fba1 	bl	800e2fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800cbba:	bf00      	nop
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	20000898 	.word	0x20000898

0800cbc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cbc8:	4b08      	ldr	r3, [pc, #32]	; (800cbec <SystemInit+0x28>)
 800cbca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbce:	4a07      	ldr	r2, [pc, #28]	; (800cbec <SystemInit+0x28>)
 800cbd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cbd8:	4b04      	ldr	r3, [pc, #16]	; (800cbec <SystemInit+0x28>)
 800cbda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cbde:	609a      	str	r2, [r3, #8]
#endif
}
 800cbe0:	bf00      	nop
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	e000ed00 	.word	0xe000ed00

0800cbf0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	e00a      	b.n	800cc18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800cc02:	f3af 8000 	nop.w
 800cc06:	4601      	mov	r1, r0
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	60ba      	str	r2, [r7, #8]
 800cc0e:	b2ca      	uxtb	r2, r1
 800cc10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	3301      	adds	r3, #1
 800cc16:	617b      	str	r3, [r7, #20]
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	dbf0      	blt.n	800cc02 <_read+0x12>
	}

return len;
 800cc20:	687b      	ldr	r3, [r7, #4]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3718      	adds	r7, #24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b086      	sub	sp, #24
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	60f8      	str	r0, [r7, #12]
 800cc32:	60b9      	str	r1, [r7, #8]
 800cc34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cc36:	2300      	movs	r3, #0
 800cc38:	617b      	str	r3, [r7, #20]
 800cc3a:	e009      	b.n	800cc50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	1c5a      	adds	r2, r3, #1
 800cc40:	60ba      	str	r2, [r7, #8]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7fe fe01 	bl	800b84c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	617b      	str	r3, [r7, #20]
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	dbf1      	blt.n	800cc3c <_write+0x12>
	}
	return len;
 800cc58:	687b      	ldr	r3, [r7, #4]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <_close>:

int _close(int file)
{
 800cc62:	b480      	push	{r7}
 800cc64:	b083      	sub	sp, #12
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
	return -1;
 800cc6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b083      	sub	sp, #12
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cc8a:	605a      	str	r2, [r3, #4]
	return 0;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	370c      	adds	r7, #12
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <_isatty>:

int _isatty(int file)
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b083      	sub	sp, #12
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
	return 1;
 800cca2:	2301      	movs	r3, #1
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
	return 0;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3714      	adds	r7, #20
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
	...

0800cccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ccd4:	4a14      	ldr	r2, [pc, #80]	; (800cd28 <_sbrk+0x5c>)
 800ccd6:	4b15      	ldr	r3, [pc, #84]	; (800cd2c <_sbrk+0x60>)
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cce0:	4b13      	ldr	r3, [pc, #76]	; (800cd30 <_sbrk+0x64>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d102      	bne.n	800ccee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cce8:	4b11      	ldr	r3, [pc, #68]	; (800cd30 <_sbrk+0x64>)
 800ccea:	4a12      	ldr	r2, [pc, #72]	; (800cd34 <_sbrk+0x68>)
 800ccec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ccee:	4b10      	ldr	r3, [pc, #64]	; (800cd30 <_sbrk+0x64>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d207      	bcs.n	800cd0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ccfc:	f004 fdb0 	bl	8011860 <__errno>
 800cd00:	4602      	mov	r2, r0
 800cd02:	230c      	movs	r3, #12
 800cd04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800cd06:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0a:	e009      	b.n	800cd20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cd0c:	4b08      	ldr	r3, [pc, #32]	; (800cd30 <_sbrk+0x64>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cd12:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <_sbrk+0x64>)
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4413      	add	r3, r2
 800cd1a:	4a05      	ldr	r2, [pc, #20]	; (800cd30 <_sbrk+0x64>)
 800cd1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20020000 	.word	0x20020000
 800cd2c:	00000400 	.word	0x00000400
 800cd30:	20000428 	.word	0x20000428
 800cd34:	20000928 	.word	0x20000928

0800cd38 <ADCStart>:

uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800cd3c:	2203      	movs	r2, #3
 800cd3e:	490a      	ldr	r1, [pc, #40]	; (800cd68 <ADCStart+0x30>)
 800cd40:	480a      	ldr	r0, [pc, #40]	; (800cd6c <ADCStart+0x34>)
 800cd42:	f000 fc45 	bl	800d5d0 <HAL_ADC_Start_DMA>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <ADCStart+0x18>
	{
		Error_Handler();
 800cd4c:	f7ff fb0c 	bl	800c368 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800cd50:	2202      	movs	r2, #2
 800cd52:	4907      	ldr	r1, [pc, #28]	; (800cd70 <ADCStart+0x38>)
 800cd54:	4807      	ldr	r0, [pc, #28]	; (800cd74 <ADCStart+0x3c>)
 800cd56:	f000 fc3b 	bl	800d5d0 <HAL_ADC_Start_DMA>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <ADCStart+0x2c>
	{
		Error_Handler();
 800cd60:	f7ff fb02 	bl	800c368 <Error_Handler>
	}

}
 800cd64:	bf00      	nop
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	2000042c 	.word	0x2000042c
 800cd6c:	20000730 	.word	0x20000730
 800cd70:	20000438 	.word	0x20000438
 800cd74:	20000610 	.word	0x20000610

0800cd78 <ADCStop>:
void ADCStop()
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800cd7c:	4808      	ldr	r0, [pc, #32]	; (800cda0 <ADCStop+0x28>)
 800cd7e:	f000 fd19 	bl	800d7b4 <HAL_ADC_Stop_DMA>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <ADCStop+0x14>
	{
		Error_Handler();
 800cd88:	f7ff faee 	bl	800c368 <Error_Handler>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800cd8c:	4805      	ldr	r0, [pc, #20]	; (800cda4 <ADCStop+0x2c>)
 800cd8e:	f000 fd11 	bl	800d7b4 <HAL_ADC_Stop_DMA>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d001      	beq.n	800cd9c <ADCStop+0x24>
	{
		Error_Handler();
 800cd98:	f7ff fae6 	bl	800c368 <Error_Handler>
	}
}
 800cd9c:	bf00      	nop
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	20000730 	.word	0x20000730
 800cda4:	20000610 	.word	0x20000610

0800cda8 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800cdac:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <FLASH_Unlock+0x1c>)
 800cdae:	4a06      	ldr	r2, [pc, #24]	; (800cdc8 <FLASH_Unlock+0x20>)
 800cdb0:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800cdb2:	4b04      	ldr	r3, [pc, #16]	; (800cdc4 <FLASH_Unlock+0x1c>)
 800cdb4:	4a05      	ldr	r2, [pc, #20]	; (800cdcc <FLASH_Unlock+0x24>)
 800cdb6:	605a      	str	r2, [r3, #4]
}
 800cdb8:	bf00      	nop
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	40023c00 	.word	0x40023c00
 800cdc8:	45670123 	.word	0x45670123
 800cdcc:	cdef89ab 	.word	0xcdef89ab

0800cdd0 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800cdd4:	4b05      	ldr	r3, [pc, #20]	; (800cdec <FLASH_Lock+0x1c>)
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	4a04      	ldr	r2, [pc, #16]	; (800cdec <FLASH_Lock+0x1c>)
 800cdda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdde:	6113      	str	r3, [r2, #16]

}
 800cde0:	bf00      	nop
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	40023c00 	.word	0x40023c00

0800cdf0 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800cdf4:	bf00      	nop
 800cdf6:	4b05      	ldr	r3, [pc, #20]	; (800ce0c <FLASH_WaitBusy+0x1c>)
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1f9      	bne.n	800cdf6 <FLASH_WaitBusy+0x6>
}
 800ce02:	bf00      	nop
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	40023c00 	.word	0x40023c00

0800ce10 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ce1a:	f7ff ffc5 	bl	800cda8 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ce1e:	f7ff ffe7 	bl	800cdf0 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ce22:	4b0e      	ldr	r3, [pc, #56]	; (800ce5c <FLASH_Write_Word+0x4c>)
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	4a0d      	ldr	r2, [pc, #52]	; (800ce5c <FLASH_Write_Word+0x4c>)
 800ce28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce2c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <FLASH_Write_Word+0x4c>)
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	4a0a      	ldr	r2, [pc, #40]	; (800ce5c <FLASH_Write_Word+0x4c>)
 800ce34:	f043 0301 	orr.w	r3, r3, #1
 800ce38:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ce40:	f7ff ffd6 	bl	800cdf0 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ce44:	4b05      	ldr	r3, [pc, #20]	; (800ce5c <FLASH_Write_Word+0x4c>)
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	4a04      	ldr	r2, [pc, #16]	; (800ce5c <FLASH_Write_Word+0x4c>)
 800ce4a:	f023 0301 	bic.w	r3, r3, #1
 800ce4e:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ce50:	f7ff ffbe 	bl	800cdd0 <FLASH_Lock>
}
 800ce54:	bf00      	nop
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	40023c00 	.word	0x40023c00

0800ce60 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800ce64:	213c      	movs	r1, #60	; 0x3c
 800ce66:	4804      	ldr	r0, [pc, #16]	; (800ce78 <EncoderStart+0x18>)
 800ce68:	f002 ff96 	bl	800fd98 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800ce6c:	213c      	movs	r1, #60	; 0x3c
 800ce6e:	4803      	ldr	r0, [pc, #12]	; (800ce7c <EncoderStart+0x1c>)
 800ce70:	f002 ff92 	bl	800fd98 <HAL_TIM_Encoder_Start>
}
 800ce74:	bf00      	nop
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	20000698 	.word	0x20000698
 800ce7c:	200005d0 	.word	0x200005d0

0800ce80 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800ce84:	213c      	movs	r1, #60	; 0x3c
 800ce86:	4804      	ldr	r0, [pc, #16]	; (800ce98 <EncoderStop+0x18>)
 800ce88:	f002 ffbd 	bl	800fe06 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800ce8c:	213c      	movs	r1, #60	; 0x3c
 800ce8e:	4803      	ldr	r0, [pc, #12]	; (800ce9c <EncoderStop+0x1c>)
 800ce90:	f002 ffb9 	bl	800fe06 <HAL_TIM_Encoder_Stop>
}
 800ce94:	bf00      	nop
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	20000698 	.word	0x20000698
 800ce9c:	200005d0 	.word	0x200005d0

0800cea0 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800cea4:	2100      	movs	r1, #0
 800cea6:	4804      	ldr	r0, [pc, #16]	; (800ceb8 <EmitterON+0x18>)
 800cea8:	f002 fd52 	bl	800f950 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800ceac:	2100      	movs	r1, #0
 800ceae:	4802      	ldr	r0, [pc, #8]	; (800ceb8 <EmitterON+0x18>)
 800ceb0:	f003 fe0d 	bl	8010ace <HAL_TIMEx_OCN_Start_IT>

}
 800ceb4:	bf00      	nop
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	20000590 	.word	0x20000590

0800cebc <EmitterOFF>:
void EmitterOFF()
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800cec0:	2100      	movs	r1, #0
 800cec2:	4804      	ldr	r0, [pc, #16]	; (800ced4 <EmitterOFF+0x18>)
 800cec4:	f002 fdc8 	bl	800fa58 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800cec8:	2100      	movs	r1, #0
 800ceca:	4802      	ldr	r0, [pc, #8]	; (800ced4 <EmitterOFF+0x18>)
 800cecc:	f003 fe54 	bl	8010b78 <HAL_TIMEx_OCN_Stop_IT>

}
 800ced0:	bf00      	nop
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	20000590 	.word	0x20000590

0800ced8 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b07      	cmp	r3, #7
 800cee4:	f200 80ac 	bhi.w	800d040 <ChangeLED+0x168>
 800cee8:	a201      	add	r2, pc, #4	; (adr r2, 800cef0 <ChangeLED+0x18>)
 800ceea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceee:	bf00      	nop
 800cef0:	0800cf11 	.word	0x0800cf11
 800cef4:	0800cf37 	.word	0x0800cf37
 800cef8:	0800cf5d 	.word	0x0800cf5d
 800cefc:	0800cf83 	.word	0x0800cf83
 800cf00:	0800cfa9 	.word	0x0800cfa9
 800cf04:	0800cfcf 	.word	0x0800cfcf
 800cf08:	0800cff5 	.word	0x0800cff5
 800cf0c:	0800d01b 	.word	0x0800d01b
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf10:	2200      	movs	r2, #0
 800cf12:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf16:	484d      	ldr	r0, [pc, #308]	; (800d04c <ChangeLED+0x174>)
 800cf18:	f001 ff8a 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf22:	484a      	ldr	r0, [pc, #296]	; (800d04c <ChangeLED+0x174>)
 800cf24:	f001 ff84 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf2e:	4848      	ldr	r0, [pc, #288]	; (800d050 <ChangeLED+0x178>)
 800cf30:	f001 ff7e 	bl	800ee30 <HAL_GPIO_WritePin>
		break;
 800cf34:	e085      	b.n	800d042 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800cf36:	2201      	movs	r2, #1
 800cf38:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf3c:	4843      	ldr	r0, [pc, #268]	; (800d04c <ChangeLED+0x174>)
 800cf3e:	f001 ff77 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800cf42:	2200      	movs	r2, #0
 800cf44:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf48:	4840      	ldr	r0, [pc, #256]	; (800d04c <ChangeLED+0x174>)
 800cf4a:	f001 ff71 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf54:	483e      	ldr	r0, [pc, #248]	; (800d050 <ChangeLED+0x178>)
 800cf56:	f001 ff6b 	bl	800ee30 <HAL_GPIO_WritePin>
		break;
 800cf5a:	e072      	b.n	800d042 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf62:	483a      	ldr	r0, [pc, #232]	; (800d04c <ChangeLED+0x174>)
 800cf64:	f001 ff64 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf6e:	4837      	ldr	r0, [pc, #220]	; (800d04c <ChangeLED+0x174>)
 800cf70:	f001 ff5e 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf74:	2200      	movs	r2, #0
 800cf76:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf7a:	4835      	ldr	r0, [pc, #212]	; (800d050 <ChangeLED+0x178>)
 800cf7c:	f001 ff58 	bl	800ee30 <HAL_GPIO_WritePin>

		break;
 800cf80:	e05f      	b.n	800d042 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800cf82:	2201      	movs	r2, #1
 800cf84:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf88:	4830      	ldr	r0, [pc, #192]	; (800d04c <ChangeLED+0x174>)
 800cf8a:	f001 ff51 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf94:	482d      	ldr	r0, [pc, #180]	; (800d04c <ChangeLED+0x174>)
 800cf96:	f001 ff4b 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfa0:	482b      	ldr	r0, [pc, #172]	; (800d050 <ChangeLED+0x178>)
 800cfa2:	f001 ff45 	bl	800ee30 <HAL_GPIO_WritePin>
		break;
 800cfa6:	e04c      	b.n	800d042 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfae:	4827      	ldr	r0, [pc, #156]	; (800d04c <ChangeLED+0x174>)
 800cfb0:	f001 ff3e 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfba:	4824      	ldr	r0, [pc, #144]	; (800d04c <ChangeLED+0x174>)
 800cfbc:	f001 ff38 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfc6:	4822      	ldr	r0, [pc, #136]	; (800d050 <ChangeLED+0x178>)
 800cfc8:	f001 ff32 	bl	800ee30 <HAL_GPIO_WritePin>
		break;
 800cfcc:	e039      	b.n	800d042 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfd4:	481d      	ldr	r0, [pc, #116]	; (800d04c <ChangeLED+0x174>)
 800cfd6:	f001 ff2b 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfe0:	481a      	ldr	r0, [pc, #104]	; (800d04c <ChangeLED+0x174>)
 800cfe2:	f001 ff25 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfec:	4818      	ldr	r0, [pc, #96]	; (800d050 <ChangeLED+0x178>)
 800cfee:	f001 ff1f 	bl	800ee30 <HAL_GPIO_WritePin>
		break;
 800cff2:	e026      	b.n	800d042 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cff4:	2200      	movs	r2, #0
 800cff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cffa:	4814      	ldr	r0, [pc, #80]	; (800d04c <ChangeLED+0x174>)
 800cffc:	f001 ff18 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d000:	2201      	movs	r2, #1
 800d002:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d006:	4811      	ldr	r0, [pc, #68]	; (800d04c <ChangeLED+0x174>)
 800d008:	f001 ff12 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d00c:	2201      	movs	r2, #1
 800d00e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d012:	480f      	ldr	r0, [pc, #60]	; (800d050 <ChangeLED+0x178>)
 800d014:	f001 ff0c 	bl	800ee30 <HAL_GPIO_WritePin>

		break;
 800d018:	e013      	b.n	800d042 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d01a:	2201      	movs	r2, #1
 800d01c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d020:	480a      	ldr	r0, [pc, #40]	; (800d04c <ChangeLED+0x174>)
 800d022:	f001 ff05 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d026:	2201      	movs	r2, #1
 800d028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d02c:	4807      	ldr	r0, [pc, #28]	; (800d04c <ChangeLED+0x174>)
 800d02e:	f001 feff 	bl	800ee30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d032:	2201      	movs	r2, #1
 800d034:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d038:	4805      	ldr	r0, [pc, #20]	; (800d050 <ChangeLED+0x178>)
 800d03a:	f001 fef9 	bl	800ee30 <HAL_GPIO_WritePin>

		break;
 800d03e:	e000      	b.n	800d042 <ChangeLED+0x16a>
	default: break;
 800d040:	bf00      	nop

	}
}
 800d042:	bf00      	nop
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	40020800 	.word	0x40020800
 800d050:	40020400 	.word	0x40020400

0800d054 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800d058:	210c      	movs	r1, #12
 800d05a:	4809      	ldr	r0, [pc, #36]	; (800d080 <Motor_PWM_Start+0x2c>)
 800d05c:	f002 fdcc 	bl	800fbf8 <HAL_TIM_PWM_Start>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800d066:	f7ff f97f 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800d06a:	2104      	movs	r1, #4
 800d06c:	4805      	ldr	r0, [pc, #20]	; (800d084 <Motor_PWM_Start+0x30>)
 800d06e:	f002 fdc3 	bl	800fbf8 <HAL_TIM_PWM_Start>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800d078:	f7ff f976 	bl	800c368 <Error_Handler>
  }
#endif
}
 800d07c:	bf00      	nop
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	20000858 	.word	0x20000858
 800d084:	20000658 	.word	0x20000658

0800d088 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
void Motor_Switch(int left, int right){
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	dd05      	ble.n	800d0a4 <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800d098:	2201      	movs	r2, #1
 800d09a:	2104      	movs	r1, #4
 800d09c:	4828      	ldr	r0, [pc, #160]	; (800d140 <Motor_Switch+0xb8>)
 800d09e:	f001 fec7 	bl	800ee30 <HAL_GPIO_WritePin>
 800d0a2:	e00a      	b.n	800d0ba <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	da07      	bge.n	800d0ba <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2104      	movs	r1, #4
 800d0ae:	4824      	ldr	r0, [pc, #144]	; (800d140 <Motor_Switch+0xb8>)
 800d0b0:	f001 febe 	bl	800ee30 <HAL_GPIO_WritePin>
		left = -left;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	425b      	negs	r3, r3
 800d0b8:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	dd05      	ble.n	800d0cc <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	2101      	movs	r1, #1
 800d0c4:	481e      	ldr	r0, [pc, #120]	; (800d140 <Motor_Switch+0xb8>)
 800d0c6:	f001 feb3 	bl	800ee30 <HAL_GPIO_WritePin>
 800d0ca:	e00a      	b.n	800d0e2 <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	da07      	bge.n	800d0e2 <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	2101      	movs	r1, #1
 800d0d6:	481a      	ldr	r0, [pc, #104]	; (800d140 <Motor_Switch+0xb8>)
 800d0d8:	f001 feaa 	bl	800ee30 <HAL_GPIO_WritePin>
	  	right = -right;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	425b      	negs	r3, r3
 800d0e0:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7fb f956 	bl	8008394 <__aeabi_i2d>
 800d0e8:	a313      	add	r3, pc, #76	; (adr r3, 800d138 <Motor_Switch+0xb0>)
 800d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ee:	f7fb fc4b 	bl	8008988 <__aeabi_dcmpgt>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <Motor_Switch+0x76>
 800d0f8:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800d0fc:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800d0fe:	6838      	ldr	r0, [r7, #0]
 800d100:	f7fb f948 	bl	8008394 <__aeabi_i2d>
 800d104:	a30c      	add	r3, pc, #48	; (adr r3, 800d138 <Motor_Switch+0xb0>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	f7fb fc3d 	bl	8008988 <__aeabi_dcmpgt>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <Motor_Switch+0x92>
 800d114:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800d118:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800d11a:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <Motor_Switch+0xbc>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800d122:	4b09      	ldr	r3, [pc, #36]	; (800d148 <Motor_Switch+0xc0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	683a      	ldr	r2, [r7, #0]
 800d128:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	f3af 8000 	nop.w
 800d138:	00000000 	.word	0x00000000
 800d13c:	40a3b000 	.word	0x40a3b000
 800d140:	40020000 	.word	0x40020000
 800d144:	20000858 	.word	0x20000858
 800d148:	20000658 	.word	0x20000658

0800d14c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d14c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d150:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d152:	e003      	b.n	800d15c <LoopCopyDataInit>

0800d154 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d154:	4b0c      	ldr	r3, [pc, #48]	; (800d188 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d156:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d158:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d15a:	3104      	adds	r1, #4

0800d15c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d15c:	480b      	ldr	r0, [pc, #44]	; (800d18c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d15e:	4b0c      	ldr	r3, [pc, #48]	; (800d190 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d160:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d162:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d164:	d3f6      	bcc.n	800d154 <CopyDataInit>
  ldr  r2, =_sbss
 800d166:	4a0b      	ldr	r2, [pc, #44]	; (800d194 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d168:	e002      	b.n	800d170 <LoopFillZerobss>

0800d16a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d16a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d16c:	f842 3b04 	str.w	r3, [r2], #4

0800d170 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d170:	4b09      	ldr	r3, [pc, #36]	; (800d198 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d172:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d174:	d3f9      	bcc.n	800d16a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d176:	f7ff fd25 	bl	800cbc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d17a:	f004 fb77 	bl	801186c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d17e:	f7fe fb77 	bl	800b870 <main>
  bx  lr    
 800d182:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d184:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d188:	080143a0 	.word	0x080143a0
  ldr  r0, =_sdata
 800d18c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d190:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800d194:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800d198:	20000924 	.word	0x20000924

0800d19c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d19c:	e7fe      	b.n	800d19c <CAN1_RX0_IRQHandler>
	...

0800d1a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d1a4:	4b0e      	ldr	r3, [pc, #56]	; (800d1e0 <HAL_Init+0x40>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a0d      	ldr	r2, [pc, #52]	; (800d1e0 <HAL_Init+0x40>)
 800d1aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d1ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d1b0:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <HAL_Init+0x40>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a0a      	ldr	r2, [pc, #40]	; (800d1e0 <HAL_Init+0x40>)
 800d1b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d1ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d1bc:	4b08      	ldr	r3, [pc, #32]	; (800d1e0 <HAL_Init+0x40>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a07      	ldr	r2, [pc, #28]	; (800d1e0 <HAL_Init+0x40>)
 800d1c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d1c8:	2003      	movs	r0, #3
 800d1ca:	f000 fedf 	bl	800df8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	f000 f808 	bl	800d1e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d1d4:	f7ff f8cc 	bl	800c370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	40023c00 	.word	0x40023c00

0800d1e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d1ec:	4b12      	ldr	r3, [pc, #72]	; (800d238 <HAL_InitTick+0x54>)
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	4b12      	ldr	r3, [pc, #72]	; (800d23c <HAL_InitTick+0x58>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d1fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d202:	4618      	mov	r0, r3
 800d204:	f000 fef7 	bl	800dff6 <HAL_SYSTICK_Config>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d20e:	2301      	movs	r3, #1
 800d210:	e00e      	b.n	800d230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2b0f      	cmp	r3, #15
 800d216:	d80a      	bhi.n	800d22e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d218:	2200      	movs	r2, #0
 800d21a:	6879      	ldr	r1, [r7, #4]
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	f000 febf 	bl	800dfa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d224:	4a06      	ldr	r2, [pc, #24]	; (800d240 <HAL_InitTick+0x5c>)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	e000      	b.n	800d230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
}
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	20000004 	.word	0x20000004
 800d23c:	2000000c 	.word	0x2000000c
 800d240:	20000008 	.word	0x20000008

0800d244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d244:	b480      	push	{r7}
 800d246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d248:	4b06      	ldr	r3, [pc, #24]	; (800d264 <HAL_IncTick+0x20>)
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	461a      	mov	r2, r3
 800d24e:	4b06      	ldr	r3, [pc, #24]	; (800d268 <HAL_IncTick+0x24>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4413      	add	r3, r2
 800d254:	4a04      	ldr	r2, [pc, #16]	; (800d268 <HAL_IncTick+0x24>)
 800d256:	6013      	str	r3, [r2, #0]
}
 800d258:	bf00      	nop
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	2000000c 	.word	0x2000000c
 800d268:	200008fc 	.word	0x200008fc

0800d26c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d26c:	b480      	push	{r7}
 800d26e:	af00      	add	r7, sp, #0
  return uwTick;
 800d270:	4b03      	ldr	r3, [pc, #12]	; (800d280 <HAL_GetTick+0x14>)
 800d272:	681b      	ldr	r3, [r3, #0]
}
 800d274:	4618      	mov	r0, r3
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	200008fc 	.word	0x200008fc

0800d284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d28c:	f7ff ffee 	bl	800d26c <HAL_GetTick>
 800d290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29c:	d005      	beq.n	800d2aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d29e:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <HAL_Delay+0x40>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d2aa:	bf00      	nop
 800d2ac:	f7ff ffde 	bl	800d26c <HAL_GetTick>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d8f7      	bhi.n	800d2ac <HAL_Delay+0x28>
  {
  }
}
 800d2bc:	bf00      	nop
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	2000000c 	.word	0x2000000c

0800d2c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e033      	b.n	800d346 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d109      	bne.n	800d2fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7ff f870 	bl	800c3cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fe:	f003 0310 	and.w	r3, r3, #16
 800d302:	2b00      	cmp	r3, #0
 800d304:	d118      	bne.n	800d338 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d30e:	f023 0302 	bic.w	r3, r3, #2
 800d312:	f043 0202 	orr.w	r2, r3, #2
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fbde 	bl	800dadc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32a:	f023 0303 	bic.w	r3, r3, #3
 800d32e:	f043 0201 	orr.w	r2, r3, #1
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	641a      	str	r2, [r3, #64]	; 0x40
 800d336:	e001      	b.n	800d33c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d344:	7bfb      	ldrb	r3, [r7, #15]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800d356:	2300      	movs	r3, #0
 800d358:	60fb      	str	r3, [r7, #12]
 800d35a:	2300      	movs	r3, #0
 800d35c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 0302 	and.w	r3, r3, #2
 800d368:	2b02      	cmp	r3, #2
 800d36a:	bf0c      	ite	eq
 800d36c:	2301      	moveq	r3, #1
 800d36e:	2300      	movne	r3, #0
 800d370:	b2db      	uxtb	r3, r3
 800d372:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	f003 0320 	and.w	r3, r3, #32
 800d37e:	2b20      	cmp	r3, #32
 800d380:	bf0c      	ite	eq
 800d382:	2301      	moveq	r3, #1
 800d384:	2300      	movne	r3, #0
 800d386:	b2db      	uxtb	r3, r3
 800d388:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d049      	beq.n	800d424 <HAL_ADC_IRQHandler+0xd6>
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d046      	beq.n	800d424 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39a:	f003 0310 	and.w	r3, r3, #16
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d105      	bne.n	800d3ae <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d12b      	bne.n	800d414 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d127      	bne.n	800d414 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d006      	beq.n	800d3e0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d119      	bne.n	800d414 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	685a      	ldr	r2, [r3, #4]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f022 0220 	bic.w	r2, r2, #32
 800d3ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d105      	bne.n	800d414 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40c:	f043 0201 	orr.w	r2, r3, #1
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 fa17 	bl	800d848 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f06f 0212 	mvn.w	r2, #18
 800d422:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f003 0304 	and.w	r3, r3, #4
 800d42e:	2b04      	cmp	r3, #4
 800d430:	bf0c      	ite	eq
 800d432:	2301      	moveq	r3, #1
 800d434:	2300      	movne	r3, #0
 800d436:	b2db      	uxtb	r3, r3
 800d438:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d444:	2b80      	cmp	r3, #128	; 0x80
 800d446:	bf0c      	ite	eq
 800d448:	2301      	moveq	r3, #1
 800d44a:	2300      	movne	r3, #0
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d057      	beq.n	800d506 <HAL_ADC_IRQHandler+0x1b8>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d054      	beq.n	800d506 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d460:	f003 0310 	and.w	r3, r3, #16
 800d464:	2b00      	cmp	r3, #0
 800d466:	d105      	bne.n	800d474 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d139      	bne.n	800d4f6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d488:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d006      	beq.n	800d49e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d12b      	bne.n	800d4f6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d124      	bne.n	800d4f6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d11d      	bne.n	800d4f6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d119      	bne.n	800d4f6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	685a      	ldr	r2, [r3, #4]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4d0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d105      	bne.n	800d4f6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ee:	f043 0201 	orr.w	r2, r3, #1
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fc6e 	bl	800ddd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f06f 020c 	mvn.w	r2, #12
 800d504:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b01      	cmp	r3, #1
 800d512:	bf0c      	ite	eq
 800d514:	2301      	moveq	r3, #1
 800d516:	2300      	movne	r3, #0
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d526:	2b40      	cmp	r3, #64	; 0x40
 800d528:	bf0c      	ite	eq
 800d52a:	2301      	moveq	r3, #1
 800d52c:	2300      	movne	r3, #0
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d017      	beq.n	800d568 <HAL_ADC_IRQHandler+0x21a>
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d014      	beq.n	800d568 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d10d      	bne.n	800d568 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d550:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 f989 	bl	800d870 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f06f 0201 	mvn.w	r2, #1
 800d566:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f003 0320 	and.w	r3, r3, #32
 800d572:	2b20      	cmp	r3, #32
 800d574:	bf0c      	ite	eq
 800d576:	2301      	moveq	r3, #1
 800d578:	2300      	movne	r3, #0
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d58c:	bf0c      	ite	eq
 800d58e:	2301      	moveq	r3, #1
 800d590:	2300      	movne	r3, #0
 800d592:	b2db      	uxtb	r3, r3
 800d594:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d015      	beq.n	800d5c8 <HAL_ADC_IRQHandler+0x27a>
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d012      	beq.n	800d5c8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5a6:	f043 0202 	orr.w	r2, r3, #2
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f06f 0220 	mvn.w	r2, #32
 800d5b6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f963 	bl	800d884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f06f 0220 	mvn.w	r2, #32
 800d5c6:	601a      	str	r2, [r3, #0]
  }
}
 800d5c8:	bf00      	nop
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d101      	bne.n	800d5ee <HAL_ADC_Start_DMA+0x1e>
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	e0cc      	b.n	800d788 <HAL_ADC_Start_DMA+0x1b8>
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b01      	cmp	r3, #1
 800d602:	d018      	beq.n	800d636 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	689a      	ldr	r2, [r3, #8]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f042 0201 	orr.w	r2, r2, #1
 800d612:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800d614:	4b5e      	ldr	r3, [pc, #376]	; (800d790 <HAL_ADC_Start_DMA+0x1c0>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a5e      	ldr	r2, [pc, #376]	; (800d794 <HAL_ADC_Start_DMA+0x1c4>)
 800d61a:	fba2 2303 	umull	r2, r3, r2, r3
 800d61e:	0c9a      	lsrs	r2, r3, #18
 800d620:	4613      	mov	r3, r2
 800d622:	005b      	lsls	r3, r3, #1
 800d624:	4413      	add	r3, r2
 800d626:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800d628:	e002      	b.n	800d630 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	3b01      	subs	r3, #1
 800d62e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1f9      	bne.n	800d62a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	2b01      	cmp	r3, #1
 800d642:	f040 80a0 	bne.w	800d786 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d64e:	f023 0301 	bic.w	r3, r3, #1
 800d652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d664:	2b00      	cmp	r3, #0
 800d666:	d007      	beq.n	800d678 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d670:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d684:	d106      	bne.n	800d694 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d68a:	f023 0206 	bic.w	r2, r3, #6
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	645a      	str	r2, [r3, #68]	; 0x44
 800d692:	e002      	b.n	800d69a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d6a2:	4b3d      	ldr	r3, [pc, #244]	; (800d798 <HAL_ADC_Start_DMA+0x1c8>)
 800d6a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6aa:	4a3c      	ldr	r2, [pc, #240]	; (800d79c <HAL_ADC_Start_DMA+0x1cc>)
 800d6ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b2:	4a3b      	ldr	r2, [pc, #236]	; (800d7a0 <HAL_ADC_Start_DMA+0x1d0>)
 800d6b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ba:	4a3a      	ldr	r2, [pc, #232]	; (800d7a4 <HAL_ADC_Start_DMA+0x1d4>)
 800d6bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800d6c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d6d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	689a      	ldr	r2, [r3, #8]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	334c      	adds	r3, #76	; 0x4c
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f000 fd38 	bl	800e16c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	f003 031f 	and.w	r3, r3, #31
 800d704:	2b00      	cmp	r3, #0
 800d706:	d12a      	bne.n	800d75e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a26      	ldr	r2, [pc, #152]	; (800d7a8 <HAL_ADC_Start_DMA+0x1d8>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d015      	beq.n	800d73e <HAL_ADC_Start_DMA+0x16e>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a25      	ldr	r2, [pc, #148]	; (800d7ac <HAL_ADC_Start_DMA+0x1dc>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d105      	bne.n	800d728 <HAL_ADC_Start_DMA+0x158>
 800d71c:	4b1e      	ldr	r3, [pc, #120]	; (800d798 <HAL_ADC_Start_DMA+0x1c8>)
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	f003 031f 	and.w	r3, r3, #31
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00a      	beq.n	800d73e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a20      	ldr	r2, [pc, #128]	; (800d7b0 <HAL_ADC_Start_DMA+0x1e0>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d129      	bne.n	800d786 <HAL_ADC_Start_DMA+0x1b6>
 800d732:	4b19      	ldr	r3, [pc, #100]	; (800d798 <HAL_ADC_Start_DMA+0x1c8>)
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	f003 031f 	and.w	r3, r3, #31
 800d73a:	2b0f      	cmp	r3, #15
 800d73c:	d823      	bhi.n	800d786 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d11c      	bne.n	800d786 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	689a      	ldr	r2, [r3, #8]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d75a:	609a      	str	r2, [r3, #8]
 800d75c:	e013      	b.n	800d786 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a11      	ldr	r2, [pc, #68]	; (800d7a8 <HAL_ADC_Start_DMA+0x1d8>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d10e      	bne.n	800d786 <HAL_ADC_Start_DMA+0x1b6>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d772:	2b00      	cmp	r3, #0
 800d774:	d107      	bne.n	800d786 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	689a      	ldr	r2, [r3, #8]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d784:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3718      	adds	r7, #24
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	20000004 	.word	0x20000004
 800d794:	431bde83 	.word	0x431bde83
 800d798:	40012300 	.word	0x40012300
 800d79c:	0800dcd5 	.word	0x0800dcd5
 800d7a0:	0800dd8f 	.word	0x0800dd8f
 800d7a4:	0800ddab 	.word	0x0800ddab
 800d7a8:	40012000 	.word	0x40012000
 800d7ac:	40012100 	.word	0x40012100
 800d7b0:	40012200 	.word	0x40012200

0800d7b4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d101      	bne.n	800d7ce <HAL_ADC_Stop_DMA+0x1a>
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	e038      	b.n	800d840 <HAL_ADC_Stop_DMA+0x8c>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	689a      	ldr	r2, [r3, #8]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f022 0201 	bic.w	r2, r2, #1
 800d7e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	f003 0301 	and.w	r3, r3, #1
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d120      	bne.n	800d836 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	689a      	ldr	r2, [r3, #8]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d802:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 fd07 	bl	800e21c <HAL_DMA_Abort>
 800d80e:	4603      	mov	r3, r0
 800d810:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800d820:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d826:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d82a:	f023 0301 	bic.w	r3, r3, #1
 800d82e:	f043 0201 	orr.w	r2, r3, #1
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800d864:	bf00      	nop
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d101      	bne.n	800d8b4 <HAL_ADC_ConfigChannel+0x1c>
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	e105      	b.n	800dac0 <HAL_ADC_ConfigChannel+0x228>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b09      	cmp	r3, #9
 800d8c2:	d925      	bls.n	800d910 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	68d9      	ldr	r1, [r3, #12]
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	4413      	add	r3, r2
 800d8d8:	3b1e      	subs	r3, #30
 800d8da:	2207      	movs	r2, #7
 800d8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d8e0:	43da      	mvns	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	400a      	ands	r2, r1
 800d8e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	68d9      	ldr	r1, [r3, #12]
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	689a      	ldr	r2, [r3, #8]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	005b      	lsls	r3, r3, #1
 800d900:	4403      	add	r3, r0
 800d902:	3b1e      	subs	r3, #30
 800d904:	409a      	lsls	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	430a      	orrs	r2, r1
 800d90c:	60da      	str	r2, [r3, #12]
 800d90e:	e022      	b.n	800d956 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6919      	ldr	r1, [r3, #16]
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	461a      	mov	r2, r3
 800d91e:	4613      	mov	r3, r2
 800d920:	005b      	lsls	r3, r3, #1
 800d922:	4413      	add	r3, r2
 800d924:	2207      	movs	r2, #7
 800d926:	fa02 f303 	lsl.w	r3, r2, r3
 800d92a:	43da      	mvns	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	400a      	ands	r2, r1
 800d932:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6919      	ldr	r1, [r3, #16]
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	689a      	ldr	r2, [r3, #8]
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	b29b      	uxth	r3, r3
 800d944:	4618      	mov	r0, r3
 800d946:	4603      	mov	r3, r0
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	4403      	add	r3, r0
 800d94c:	409a      	lsls	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	430a      	orrs	r2, r1
 800d954:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	2b06      	cmp	r3, #6
 800d95c:	d824      	bhi.n	800d9a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	4613      	mov	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	3b05      	subs	r3, #5
 800d970:	221f      	movs	r2, #31
 800d972:	fa02 f303 	lsl.w	r3, r2, r3
 800d976:	43da      	mvns	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	400a      	ands	r2, r1
 800d97e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	4618      	mov	r0, r3
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	685a      	ldr	r2, [r3, #4]
 800d992:	4613      	mov	r3, r2
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	3b05      	subs	r3, #5
 800d99a:	fa00 f203 	lsl.w	r2, r0, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	635a      	str	r2, [r3, #52]	; 0x34
 800d9a6:	e04c      	b.n	800da42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	2b0c      	cmp	r3, #12
 800d9ae:	d824      	bhi.n	800d9fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	4413      	add	r3, r2
 800d9c0:	3b23      	subs	r3, #35	; 0x23
 800d9c2:	221f      	movs	r2, #31
 800d9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c8:	43da      	mvns	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	400a      	ands	r2, r1
 800d9d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	4618      	mov	r0, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4413      	add	r3, r2
 800d9ea:	3b23      	subs	r3, #35	; 0x23
 800d9ec:	fa00 f203 	lsl.w	r2, r0, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	430a      	orrs	r2, r1
 800d9f6:	631a      	str	r2, [r3, #48]	; 0x30
 800d9f8:	e023      	b.n	800da42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	685a      	ldr	r2, [r3, #4]
 800da04:	4613      	mov	r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4413      	add	r3, r2
 800da0a:	3b41      	subs	r3, #65	; 0x41
 800da0c:	221f      	movs	r2, #31
 800da0e:	fa02 f303 	lsl.w	r3, r2, r3
 800da12:	43da      	mvns	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	400a      	ands	r2, r1
 800da1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	b29b      	uxth	r3, r3
 800da28:	4618      	mov	r0, r3
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	685a      	ldr	r2, [r3, #4]
 800da2e:	4613      	mov	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4413      	add	r3, r2
 800da34:	3b41      	subs	r3, #65	; 0x41
 800da36:	fa00 f203 	lsl.w	r2, r0, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	430a      	orrs	r2, r1
 800da40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800da42:	4b22      	ldr	r3, [pc, #136]	; (800dacc <HAL_ADC_ConfigChannel+0x234>)
 800da44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a21      	ldr	r2, [pc, #132]	; (800dad0 <HAL_ADC_ConfigChannel+0x238>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d109      	bne.n	800da64 <HAL_ADC_ConfigChannel+0x1cc>
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b12      	cmp	r3, #18
 800da56:	d105      	bne.n	800da64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a19      	ldr	r2, [pc, #100]	; (800dad0 <HAL_ADC_ConfigChannel+0x238>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d123      	bne.n	800dab6 <HAL_ADC_ConfigChannel+0x21e>
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b10      	cmp	r3, #16
 800da74:	d003      	beq.n	800da7e <HAL_ADC_ConfigChannel+0x1e6>
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b11      	cmp	r3, #17
 800da7c:	d11b      	bne.n	800dab6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b10      	cmp	r3, #16
 800da90:	d111      	bne.n	800dab6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800da92:	4b10      	ldr	r3, [pc, #64]	; (800dad4 <HAL_ADC_ConfigChannel+0x23c>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a10      	ldr	r2, [pc, #64]	; (800dad8 <HAL_ADC_ConfigChannel+0x240>)
 800da98:	fba2 2303 	umull	r2, r3, r2, r3
 800da9c:	0c9a      	lsrs	r2, r3, #18
 800da9e:	4613      	mov	r3, r2
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	4413      	add	r3, r2
 800daa4:	005b      	lsls	r3, r3, #1
 800daa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800daa8:	e002      	b.n	800dab0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	3b01      	subs	r3, #1
 800daae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1f9      	bne.n	800daaa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3714      	adds	r7, #20
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	40012300 	.word	0x40012300
 800dad0:	40012000 	.word	0x40012000
 800dad4:	20000004 	.word	0x20000004
 800dad8:	431bde83 	.word	0x431bde83

0800dadc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dae4:	4b79      	ldr	r3, [pc, #484]	; (800dccc <ADC_Init+0x1f0>)
 800dae6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	685a      	ldr	r2, [r3, #4]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	431a      	orrs	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6859      	ldr	r1, [r3, #4]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	691b      	ldr	r3, [r3, #16]
 800db1c:	021a      	lsls	r2, r3, #8
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	430a      	orrs	r2, r1
 800db24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800db34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	6859      	ldr	r1, [r3, #4]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	689a      	ldr	r2, [r3, #8]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	430a      	orrs	r2, r1
 800db46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	689a      	ldr	r2, [r3, #8]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6899      	ldr	r1, [r3, #8]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68da      	ldr	r2, [r3, #12]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	430a      	orrs	r2, r1
 800db68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6e:	4a58      	ldr	r2, [pc, #352]	; (800dcd0 <ADC_Init+0x1f4>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d022      	beq.n	800dbba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	689a      	ldr	r2, [r3, #8]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800db82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6899      	ldr	r1, [r3, #8]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	430a      	orrs	r2, r1
 800db94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	689a      	ldr	r2, [r3, #8]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800dba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	6899      	ldr	r1, [r3, #8]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	430a      	orrs	r2, r1
 800dbb6:	609a      	str	r2, [r3, #8]
 800dbb8:	e00f      	b.n	800dbda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	689a      	ldr	r2, [r3, #8]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dbc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	689a      	ldr	r2, [r3, #8]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800dbd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	689a      	ldr	r2, [r3, #8]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f022 0202 	bic.w	r2, r2, #2
 800dbe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6899      	ldr	r1, [r3, #8]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	7e1b      	ldrb	r3, [r3, #24]
 800dbf4:	005a      	lsls	r2, r3, #1
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	430a      	orrs	r2, r1
 800dbfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d01b      	beq.n	800dc40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	685a      	ldr	r2, [r3, #4]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	685a      	ldr	r2, [r3, #4]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800dc26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6859      	ldr	r1, [r3, #4]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc32:	3b01      	subs	r3, #1
 800dc34:	035a      	lsls	r2, r3, #13
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	605a      	str	r2, [r3, #4]
 800dc3e:	e007      	b.n	800dc50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	685a      	ldr	r2, [r3, #4]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800dc5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	051a      	lsls	r2, r3, #20
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	430a      	orrs	r2, r1
 800dc74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	689a      	ldr	r2, [r3, #8]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800dc84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6899      	ldr	r1, [r3, #8]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc92:	025a      	lsls	r2, r3, #9
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	430a      	orrs	r2, r1
 800dc9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	689a      	ldr	r2, [r3, #8]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dcaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6899      	ldr	r1, [r3, #8]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	695b      	ldr	r3, [r3, #20]
 800dcb6:	029a      	lsls	r2, r3, #10
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	430a      	orrs	r2, r1
 800dcbe:	609a      	str	r2, [r3, #8]
}
 800dcc0:	bf00      	nop
 800dcc2:	3714      	adds	r7, #20
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	40012300 	.word	0x40012300
 800dcd0:	0f000001 	.word	0x0f000001

0800dcd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d13c      	bne.n	800dd68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d12b      	bne.n	800dd60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d127      	bne.n	800dd60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d119      	bne.n	800dd60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f022 0220 	bic.w	r2, r2, #32
 800dd3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d105      	bne.n	800dd60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd58:	f043 0201 	orr.w	r2, r3, #1
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f7ff fd71 	bl	800d848 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800dd66:	e00e      	b.n	800dd86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd6c:	f003 0310 	and.w	r3, r3, #16
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d003      	beq.n	800dd7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f7ff fd85 	bl	800d884 <HAL_ADC_ErrorCallback>
}
 800dd7a:	e004      	b.n	800dd86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	4798      	blx	r3
}
 800dd86:	bf00      	nop
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b084      	sub	sp, #16
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f7ff fd5d 	bl	800d85c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dda2:	bf00      	nop
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b084      	sub	sp, #16
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2240      	movs	r2, #64	; 0x40
 800ddbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddc2:	f043 0204 	orr.w	r2, r3, #4
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f7ff fd5a 	bl	800d884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ddd0:	bf00      	nop
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f003 0307 	and.w	r3, r3, #7
 800ddfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ddfc:	4b0c      	ldr	r3, [pc, #48]	; (800de30 <__NVIC_SetPriorityGrouping+0x44>)
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800de02:	68ba      	ldr	r2, [r7, #8]
 800de04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800de08:	4013      	ands	r3, r2
 800de0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800de14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800de18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800de1e:	4a04      	ldr	r2, [pc, #16]	; (800de30 <__NVIC_SetPriorityGrouping+0x44>)
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	60d3      	str	r3, [r2, #12]
}
 800de24:	bf00      	nop
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	e000ed00 	.word	0xe000ed00

0800de34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800de34:	b480      	push	{r7}
 800de36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800de38:	4b04      	ldr	r3, [pc, #16]	; (800de4c <__NVIC_GetPriorityGrouping+0x18>)
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	0a1b      	lsrs	r3, r3, #8
 800de3e:	f003 0307 	and.w	r3, r3, #7
}
 800de42:	4618      	mov	r0, r3
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	e000ed00 	.word	0xe000ed00

0800de50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	4603      	mov	r3, r0
 800de58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800de5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	db0b      	blt.n	800de7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	f003 021f 	and.w	r2, r3, #31
 800de68:	4907      	ldr	r1, [pc, #28]	; (800de88 <__NVIC_EnableIRQ+0x38>)
 800de6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de6e:	095b      	lsrs	r3, r3, #5
 800de70:	2001      	movs	r0, #1
 800de72:	fa00 f202 	lsl.w	r2, r0, r2
 800de76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800de7a:	bf00      	nop
 800de7c:	370c      	adds	r7, #12
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	e000e100 	.word	0xe000e100

0800de8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	4603      	mov	r3, r0
 800de94:	6039      	str	r1, [r7, #0]
 800de96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800de98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	db0a      	blt.n	800deb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	490c      	ldr	r1, [pc, #48]	; (800ded8 <__NVIC_SetPriority+0x4c>)
 800dea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800deaa:	0112      	lsls	r2, r2, #4
 800deac:	b2d2      	uxtb	r2, r2
 800deae:	440b      	add	r3, r1
 800deb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800deb4:	e00a      	b.n	800decc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	4908      	ldr	r1, [pc, #32]	; (800dedc <__NVIC_SetPriority+0x50>)
 800debc:	79fb      	ldrb	r3, [r7, #7]
 800debe:	f003 030f 	and.w	r3, r3, #15
 800dec2:	3b04      	subs	r3, #4
 800dec4:	0112      	lsls	r2, r2, #4
 800dec6:	b2d2      	uxtb	r2, r2
 800dec8:	440b      	add	r3, r1
 800deca:	761a      	strb	r2, [r3, #24]
}
 800decc:	bf00      	nop
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	e000e100 	.word	0xe000e100
 800dedc:	e000ed00 	.word	0xe000ed00

0800dee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b089      	sub	sp, #36	; 0x24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	f1c3 0307 	rsb	r3, r3, #7
 800defa:	2b04      	cmp	r3, #4
 800defc:	bf28      	it	cs
 800defe:	2304      	movcs	r3, #4
 800df00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	3304      	adds	r3, #4
 800df06:	2b06      	cmp	r3, #6
 800df08:	d902      	bls.n	800df10 <NVIC_EncodePriority+0x30>
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	3b03      	subs	r3, #3
 800df0e:	e000      	b.n	800df12 <NVIC_EncodePriority+0x32>
 800df10:	2300      	movs	r3, #0
 800df12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800df14:	f04f 32ff 	mov.w	r2, #4294967295
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	fa02 f303 	lsl.w	r3, r2, r3
 800df1e:	43da      	mvns	r2, r3
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	401a      	ands	r2, r3
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800df28:	f04f 31ff 	mov.w	r1, #4294967295
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	fa01 f303 	lsl.w	r3, r1, r3
 800df32:	43d9      	mvns	r1, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800df38:	4313      	orrs	r3, r2
         );
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3724      	adds	r7, #36	; 0x24
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr
	...

0800df48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	3b01      	subs	r3, #1
 800df54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800df58:	d301      	bcc.n	800df5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800df5a:	2301      	movs	r3, #1
 800df5c:	e00f      	b.n	800df7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800df5e:	4a0a      	ldr	r2, [pc, #40]	; (800df88 <SysTick_Config+0x40>)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	3b01      	subs	r3, #1
 800df64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800df66:	210f      	movs	r1, #15
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	f7ff ff8e 	bl	800de8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800df70:	4b05      	ldr	r3, [pc, #20]	; (800df88 <SysTick_Config+0x40>)
 800df72:	2200      	movs	r2, #0
 800df74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800df76:	4b04      	ldr	r3, [pc, #16]	; (800df88 <SysTick_Config+0x40>)
 800df78:	2207      	movs	r2, #7
 800df7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	e000e010 	.word	0xe000e010

0800df8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7ff ff29 	bl	800ddec <__NVIC_SetPriorityGrouping>
}
 800df9a:	bf00      	nop
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b086      	sub	sp, #24
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	60b9      	str	r1, [r7, #8]
 800dfac:	607a      	str	r2, [r7, #4]
 800dfae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dfb4:	f7ff ff3e 	bl	800de34 <__NVIC_GetPriorityGrouping>
 800dfb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	68b9      	ldr	r1, [r7, #8]
 800dfbe:	6978      	ldr	r0, [r7, #20]
 800dfc0:	f7ff ff8e 	bl	800dee0 <NVIC_EncodePriority>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfca:	4611      	mov	r1, r2
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff ff5d 	bl	800de8c <__NVIC_SetPriority>
}
 800dfd2:	bf00      	nop
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b082      	sub	sp, #8
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dfe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7ff ff31 	bl	800de50 <__NVIC_EnableIRQ>
}
 800dfee:	bf00      	nop
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b082      	sub	sp, #8
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7ff ffa2 	bl	800df48 <SysTick_Config>
 800e004:	4603      	mov	r3, r0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3708      	adds	r7, #8
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
	...

0800e010 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e018:	2300      	movs	r3, #0
 800e01a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800e01c:	f7ff f926 	bl	800d26c <HAL_GetTick>
 800e020:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d101      	bne.n	800e02c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800e028:	2301      	movs	r3, #1
 800e02a:	e099      	b.n	800e160 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2202      	movs	r2, #2
 800e038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f022 0201 	bic.w	r2, r2, #1
 800e04a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e04c:	e00f      	b.n	800e06e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e04e:	f7ff f90d 	bl	800d26c <HAL_GetTick>
 800e052:	4602      	mov	r2, r0
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	2b05      	cmp	r3, #5
 800e05a:	d908      	bls.n	800e06e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2220      	movs	r2, #32
 800e060:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2203      	movs	r2, #3
 800e066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e06a:	2303      	movs	r3, #3
 800e06c:	e078      	b.n	800e160 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1e8      	bne.n	800e04e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	4b38      	ldr	r3, [pc, #224]	; (800e168 <HAL_DMA_Init+0x158>)
 800e088:	4013      	ands	r3, r2
 800e08a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685a      	ldr	r2, [r3, #4]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e09a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e0a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e0b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a1b      	ldr	r3, [r3, #32]
 800e0b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e0ba:	697a      	ldr	r2, [r7, #20]
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c4:	2b04      	cmp	r3, #4
 800e0c6:	d107      	bne.n	800e0d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	f023 0307 	bic.w	r3, r3, #7
 800e0ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2b04      	cmp	r3, #4
 800e100:	d117      	bne.n	800e132 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	4313      	orrs	r3, r2
 800e10a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00e      	beq.n	800e132 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fadf 	bl	800e6d8 <DMA_CheckFifoParam>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d008      	beq.n	800e132 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2240      	movs	r2, #64	; 0x40
 800e124:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e12e:	2301      	movs	r3, #1
 800e130:	e016      	b.n	800e160 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	697a      	ldr	r2, [r7, #20]
 800e138:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fa96 	bl	800e66c <DMA_CalcBaseAndBitshift>
 800e140:	4603      	mov	r3, r0
 800e142:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e148:	223f      	movs	r2, #63	; 0x3f
 800e14a:	409a      	lsls	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	f010803f 	.word	0xf010803f

0800e16c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
 800e178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e182:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d101      	bne.n	800e192 <HAL_DMA_Start_IT+0x26>
 800e18e:	2302      	movs	r3, #2
 800e190:	e040      	b.n	800e214 <HAL_DMA_Start_IT+0xa8>
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2201      	movs	r2, #1
 800e196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d12f      	bne.n	800e206 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	68b9      	ldr	r1, [r7, #8]
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f000 fa28 	bl	800e610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1c4:	223f      	movs	r2, #63	; 0x3f
 800e1c6:	409a      	lsls	r2, r3
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f042 0216 	orr.w	r2, r2, #22
 800e1da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d007      	beq.n	800e1f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f042 0208 	orr.w	r2, r2, #8
 800e1f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f042 0201 	orr.w	r2, r2, #1
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	e005      	b.n	800e212 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e20e:	2302      	movs	r3, #2
 800e210:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e212:	7dfb      	ldrb	r3, [r7, #23]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3718      	adds	r7, #24
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e228:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e22a:	f7ff f81f 	bl	800d26c <HAL_GetTick>
 800e22e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e236:	b2db      	uxtb	r3, r3
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d008      	beq.n	800e24e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2280      	movs	r2, #128	; 0x80
 800e240:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e052      	b.n	800e2f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f022 0216 	bic.w	r2, r2, #22
 800e25c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	695a      	ldr	r2, [r3, #20]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e26c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e272:	2b00      	cmp	r3, #0
 800e274:	d103      	bne.n	800e27e <HAL_DMA_Abort+0x62>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d007      	beq.n	800e28e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f022 0208 	bic.w	r2, r2, #8
 800e28c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f022 0201 	bic.w	r2, r2, #1
 800e29c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e29e:	e013      	b.n	800e2c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e2a0:	f7fe ffe4 	bl	800d26c <HAL_GetTick>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	2b05      	cmp	r3, #5
 800e2ac:	d90c      	bls.n	800e2c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2220      	movs	r2, #32
 800e2b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2203      	movs	r2, #3
 800e2c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800e2c4:	2303      	movs	r3, #3
 800e2c6:	e015      	b.n	800e2f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f003 0301 	and.w	r3, r3, #1
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1e4      	bne.n	800e2a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2da:	223f      	movs	r2, #63	; 0x3f
 800e2dc:	409a      	lsls	r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e308:	4b92      	ldr	r3, [pc, #584]	; (800e554 <HAL_DMA_IRQHandler+0x258>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a92      	ldr	r2, [pc, #584]	; (800e558 <HAL_DMA_IRQHandler+0x25c>)
 800e30e:	fba2 2303 	umull	r2, r3, r2, r3
 800e312:	0a9b      	lsrs	r3, r3, #10
 800e314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e31a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e326:	2208      	movs	r2, #8
 800e328:	409a      	lsls	r2, r3
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	4013      	ands	r3, r2
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d01a      	beq.n	800e368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f003 0304 	and.w	r3, r3, #4
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d013      	beq.n	800e368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f022 0204 	bic.w	r2, r2, #4
 800e34e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e354:	2208      	movs	r2, #8
 800e356:	409a      	lsls	r2, r3
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e360:	f043 0201 	orr.w	r2, r3, #1
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e36c:	2201      	movs	r2, #1
 800e36e:	409a      	lsls	r2, r3
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	4013      	ands	r3, r2
 800e374:	2b00      	cmp	r3, #0
 800e376:	d012      	beq.n	800e39e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	695b      	ldr	r3, [r3, #20]
 800e37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00b      	beq.n	800e39e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e38a:	2201      	movs	r2, #1
 800e38c:	409a      	lsls	r2, r3
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e396:	f043 0202 	orr.w	r2, r3, #2
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3a2:	2204      	movs	r2, #4
 800e3a4:	409a      	lsls	r2, r3
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d012      	beq.n	800e3d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f003 0302 	and.w	r3, r3, #2
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00b      	beq.n	800e3d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3c0:	2204      	movs	r2, #4
 800e3c2:	409a      	lsls	r2, r3
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3cc:	f043 0204 	orr.w	r2, r3, #4
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3d8:	2210      	movs	r2, #16
 800e3da:	409a      	lsls	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	4013      	ands	r3, r2
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d043      	beq.n	800e46c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f003 0308 	and.w	r3, r3, #8
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d03c      	beq.n	800e46c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3f6:	2210      	movs	r2, #16
 800e3f8:	409a      	lsls	r2, r3
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d018      	beq.n	800e43e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e416:	2b00      	cmp	r3, #0
 800e418:	d108      	bne.n	800e42c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d024      	beq.n	800e46c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	4798      	blx	r3
 800e42a:	e01f      	b.n	800e46c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e430:	2b00      	cmp	r3, #0
 800e432:	d01b      	beq.n	800e46c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	4798      	blx	r3
 800e43c:	e016      	b.n	800e46c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d107      	bne.n	800e45c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f022 0208 	bic.w	r2, r2, #8
 800e45a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e460:	2b00      	cmp	r3, #0
 800e462:	d003      	beq.n	800e46c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e470:	2220      	movs	r2, #32
 800e472:	409a      	lsls	r2, r3
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	4013      	ands	r3, r2
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f000 808e 	beq.w	800e59a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f003 0310 	and.w	r3, r3, #16
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 8086 	beq.w	800e59a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e492:	2220      	movs	r2, #32
 800e494:	409a      	lsls	r2, r3
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	2b05      	cmp	r3, #5
 800e4a4:	d136      	bne.n	800e514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f022 0216 	bic.w	r2, r2, #22
 800e4b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	695a      	ldr	r2, [r3, #20]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e4c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d103      	bne.n	800e4d6 <HAL_DMA_IRQHandler+0x1da>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d007      	beq.n	800e4e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f022 0208 	bic.w	r2, r2, #8
 800e4e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ea:	223f      	movs	r2, #63	; 0x3f
 800e4ec:	409a      	lsls	r2, r3
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e506:	2b00      	cmp	r3, #0
 800e508:	d07d      	beq.n	800e606 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	4798      	blx	r3
        }
        return;
 800e512:	e078      	b.n	800e606 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d01c      	beq.n	800e55c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d108      	bne.n	800e542 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e534:	2b00      	cmp	r3, #0
 800e536:	d030      	beq.n	800e59a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	4798      	blx	r3
 800e540:	e02b      	b.n	800e59a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e546:	2b00      	cmp	r3, #0
 800e548:	d027      	beq.n	800e59a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	4798      	blx	r3
 800e552:	e022      	b.n	800e59a <HAL_DMA_IRQHandler+0x29e>
 800e554:	20000004 	.word	0x20000004
 800e558:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10f      	bne.n	800e58a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f022 0210 	bic.w	r2, r2, #16
 800e578:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2201      	movs	r2, #1
 800e586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d003      	beq.n	800e59a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d032      	beq.n	800e608 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d022      	beq.n	800e5f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2205      	movs	r2, #5
 800e5b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f022 0201 	bic.w	r2, r2, #1
 800e5c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	60bb      	str	r3, [r7, #8]
 800e5cc:	697a      	ldr	r2, [r7, #20]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d307      	bcc.n	800e5e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f003 0301 	and.w	r3, r3, #1
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1f2      	bne.n	800e5c6 <HAL_DMA_IRQHandler+0x2ca>
 800e5e0:	e000      	b.n	800e5e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800e5e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d005      	beq.n	800e608 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	4798      	blx	r3
 800e604:	e000      	b.n	800e608 <HAL_DMA_IRQHandler+0x30c>
        return;
 800e606:	bf00      	nop
    }
  }
}
 800e608:	3718      	adds	r7, #24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop

0800e610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e62c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	2b40      	cmp	r3, #64	; 0x40
 800e63c:	d108      	bne.n	800e650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800e64e:	e007      	b.n	800e660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	60da      	str	r2, [r3, #12]
}
 800e660:	bf00      	nop
 800e662:	3714      	adds	r7, #20
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	3b10      	subs	r3, #16
 800e67c:	4a14      	ldr	r2, [pc, #80]	; (800e6d0 <DMA_CalcBaseAndBitshift+0x64>)
 800e67e:	fba2 2303 	umull	r2, r3, r2, r3
 800e682:	091b      	lsrs	r3, r3, #4
 800e684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e686:	4a13      	ldr	r2, [pc, #76]	; (800e6d4 <DMA_CalcBaseAndBitshift+0x68>)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	4413      	add	r3, r2
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	461a      	mov	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b03      	cmp	r3, #3
 800e698:	d909      	bls.n	800e6ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e6a2:	f023 0303 	bic.w	r3, r3, #3
 800e6a6:	1d1a      	adds	r2, r3, #4
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	659a      	str	r2, [r3, #88]	; 0x58
 800e6ac:	e007      	b.n	800e6be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e6b6:	f023 0303 	bic.w	r3, r3, #3
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3714      	adds	r7, #20
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	aaaaaaab 	.word	0xaaaaaaab
 800e6d4:	080140c4 	.word	0x080140c4

0800e6d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	699b      	ldr	r3, [r3, #24]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d11f      	bne.n	800e732 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	2b03      	cmp	r3, #3
 800e6f6:	d855      	bhi.n	800e7a4 <DMA_CheckFifoParam+0xcc>
 800e6f8:	a201      	add	r2, pc, #4	; (adr r2, 800e700 <DMA_CheckFifoParam+0x28>)
 800e6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6fe:	bf00      	nop
 800e700:	0800e711 	.word	0x0800e711
 800e704:	0800e723 	.word	0x0800e723
 800e708:	0800e711 	.word	0x0800e711
 800e70c:	0800e7a5 	.word	0x0800e7a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d045      	beq.n	800e7a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800e71c:	2301      	movs	r3, #1
 800e71e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e720:	e042      	b.n	800e7a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e72a:	d13f      	bne.n	800e7ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800e72c:	2301      	movs	r3, #1
 800e72e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e730:	e03c      	b.n	800e7ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	699b      	ldr	r3, [r3, #24]
 800e736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e73a:	d121      	bne.n	800e780 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b03      	cmp	r3, #3
 800e740:	d836      	bhi.n	800e7b0 <DMA_CheckFifoParam+0xd8>
 800e742:	a201      	add	r2, pc, #4	; (adr r2, 800e748 <DMA_CheckFifoParam+0x70>)
 800e744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e748:	0800e759 	.word	0x0800e759
 800e74c:	0800e75f 	.word	0x0800e75f
 800e750:	0800e759 	.word	0x0800e759
 800e754:	0800e771 	.word	0x0800e771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e758:	2301      	movs	r3, #1
 800e75a:	73fb      	strb	r3, [r7, #15]
      break;
 800e75c:	e02f      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e766:	2b00      	cmp	r3, #0
 800e768:	d024      	beq.n	800e7b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e76e:	e021      	b.n	800e7b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e778:	d11e      	bne.n	800e7b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800e77a:	2301      	movs	r3, #1
 800e77c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e77e:	e01b      	b.n	800e7b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	2b02      	cmp	r3, #2
 800e784:	d902      	bls.n	800e78c <DMA_CheckFifoParam+0xb4>
 800e786:	2b03      	cmp	r3, #3
 800e788:	d003      	beq.n	800e792 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e78a:	e018      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	73fb      	strb	r3, [r7, #15]
      break;
 800e790:	e015      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00e      	beq.n	800e7bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a2:	e00b      	b.n	800e7bc <DMA_CheckFifoParam+0xe4>
      break;
 800e7a4:	bf00      	nop
 800e7a6:	e00a      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
      break;
 800e7a8:	bf00      	nop
 800e7aa:	e008      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
      break;
 800e7ac:	bf00      	nop
 800e7ae:	e006      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
      break;
 800e7b0:	bf00      	nop
 800e7b2:	e004      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
      break;
 800e7b4:	bf00      	nop
 800e7b6:	e002      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
      break;   
 800e7b8:	bf00      	nop
 800e7ba:	e000      	b.n	800e7be <DMA_CheckFifoParam+0xe6>
      break;
 800e7bc:	bf00      	nop
    }
  } 
  
  return status; 
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800e7d6:	4b4b      	ldr	r3, [pc, #300]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d020      	beq.n	800e824 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800e7e2:	4b49      	ldr	r3, [pc, #292]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d107      	bne.n	800e7fc <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800e7ec:	4b46      	ldr	r3, [pc, #280]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800e7f2:	4b45      	ldr	r3, [pc, #276]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f8:	60da      	str	r2, [r3, #12]
 800e7fa:	e00b      	b.n	800e814 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800e7fc:	4b42      	ldr	r3, [pc, #264]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b02      	cmp	r3, #2
 800e804:	d103      	bne.n	800e80e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800e806:	4b40      	ldr	r3, [pc, #256]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e808:	691b      	ldr	r3, [r3, #16]
 800e80a:	607b      	str	r3, [r7, #4]
 800e80c:	e002      	b.n	800e814 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800e80e:	4b3e      	ldr	r3, [pc, #248]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e810:	695b      	ldr	r3, [r3, #20]
 800e812:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800e814:	f000 f88e 	bl	800e934 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 f881 	bl	800e920 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800e81e:	4b3a      	ldr	r3, [pc, #232]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e820:	2200      	movs	r2, #0
 800e822:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800e824:	4b37      	ldr	r3, [pc, #220]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	f003 0301 	and.w	r3, r3, #1
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d04a      	beq.n	800e8c6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e830:	4b34      	ldr	r3, [pc, #208]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e832:	2201      	movs	r2, #1
 800e834:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800e836:	4b34      	ldr	r3, [pc, #208]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d12d      	bne.n	800e89c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800e840:	4b31      	ldr	r3, [pc, #196]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	3b01      	subs	r3, #1
 800e846:	4a30      	ldr	r2, [pc, #192]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e848:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800e84a:	4b2f      	ldr	r3, [pc, #188]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d015      	beq.n	800e87e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800e852:	4b2d      	ldr	r3, [pc, #180]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f000 f857 	bl	800e90c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800e85e:	4b2a      	ldr	r3, [pc, #168]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	3301      	adds	r3, #1
 800e864:	4a28      	ldr	r2, [pc, #160]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e866:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800e868:	4b27      	ldr	r3, [pc, #156]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800e86e:	4b26      	ldr	r3, [pc, #152]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e870:	7a1b      	ldrb	r3, [r3, #8]
 800e872:	b2db      	uxtb	r3, r3
 800e874:	4619      	mov	r1, r3
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f8b2 	bl	800e9e0 <FLASH_Erase_Sector>
 800e87c:	e023      	b.n	800e8c6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800e87e:	f04f 33ff 	mov.w	r3, #4294967295
 800e882:	607b      	str	r3, [r7, #4]
 800e884:	4a20      	ldr	r2, [pc, #128]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800e88a:	4b1f      	ldr	r3, [pc, #124]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800e890:	f000 f8ee 	bl	800ea70 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f839 	bl	800e90c <HAL_FLASH_EndOfOperationCallback>
 800e89a:	e014      	b.n	800e8c6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800e89c:	4b1a      	ldr	r3, [pc, #104]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b02      	cmp	r3, #2
 800e8a4:	d107      	bne.n	800e8b6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800e8a6:	f000 f8e3 	bl	800ea70 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800e8aa:	4b17      	ldr	r3, [pc, #92]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f000 f82c 	bl	800e90c <HAL_FLASH_EndOfOperationCallback>
 800e8b4:	e004      	b.n	800e8c0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800e8b6:	4b14      	ldr	r3, [pc, #80]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 f826 	bl	800e90c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800e8c0:	4b11      	ldr	r3, [pc, #68]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800e8c6:	4b10      	ldr	r3, [pc, #64]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d114      	bne.n	800e8fa <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800e8d0:	4b0c      	ldr	r3, [pc, #48]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	4a0b      	ldr	r2, [pc, #44]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e8d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e8da:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800e8dc:	4b09      	ldr	r3, [pc, #36]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	4a08      	ldr	r2, [pc, #32]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e8e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e8e6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800e8e8:	4b06      	ldr	r3, [pc, #24]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e8ea:	691b      	ldr	r3, [r3, #16]
 800e8ec:	4a05      	ldr	r2, [pc, #20]	; (800e904 <HAL_FLASH_IRQHandler+0x138>)
 800e8ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e8f2:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800e8f4:	4b04      	ldr	r3, [pc, #16]	; (800e908 <HAL_FLASH_IRQHandler+0x13c>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	761a      	strb	r2, [r3, #24]
  }
}
 800e8fa:	bf00      	nop
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	40023c00 	.word	0x40023c00
 800e908:	20000900 	.word	0x20000900

0800e90c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800e914:	bf00      	nop
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800e920:	b480      	push	{r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800e934:	b480      	push	{r7}
 800e936:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800e938:	4b27      	ldr	r3, [pc, #156]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	f003 0310 	and.w	r3, r3, #16
 800e940:	2b00      	cmp	r3, #0
 800e942:	d008      	beq.n	800e956 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e944:	4b25      	ldr	r3, [pc, #148]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e946:	69db      	ldr	r3, [r3, #28]
 800e948:	f043 0310 	orr.w	r3, r3, #16
 800e94c:	4a23      	ldr	r2, [pc, #140]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e94e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e950:	4b21      	ldr	r3, [pc, #132]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e952:	2210      	movs	r2, #16
 800e954:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e956:	4b20      	ldr	r3, [pc, #128]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	f003 0320 	and.w	r3, r3, #32
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d008      	beq.n	800e974 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e962:	4b1e      	ldr	r3, [pc, #120]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e964:	69db      	ldr	r3, [r3, #28]
 800e966:	f043 0308 	orr.w	r3, r3, #8
 800e96a:	4a1c      	ldr	r2, [pc, #112]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e96c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e96e:	4b1a      	ldr	r3, [pc, #104]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e970:	2220      	movs	r2, #32
 800e972:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e974:	4b18      	ldr	r3, [pc, #96]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d008      	beq.n	800e992 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e980:	4b16      	ldr	r3, [pc, #88]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	f043 0304 	orr.w	r3, r3, #4
 800e988:	4a14      	ldr	r2, [pc, #80]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e98a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e98c:	4b12      	ldr	r3, [pc, #72]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e98e:	2240      	movs	r2, #64	; 0x40
 800e990:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e992:	4b11      	ldr	r3, [pc, #68]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d008      	beq.n	800e9b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e99e:	4b0f      	ldr	r3, [pc, #60]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e9a0:	69db      	ldr	r3, [r3, #28]
 800e9a2:	f043 0302 	orr.w	r3, r3, #2
 800e9a6:	4a0d      	ldr	r2, [pc, #52]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e9a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e9aa:	4b0b      	ldr	r3, [pc, #44]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e9ac:	2280      	movs	r2, #128	; 0x80
 800e9ae:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e9b0:	4b09      	ldr	r3, [pc, #36]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	f003 0302 	and.w	r3, r3, #2
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d008      	beq.n	800e9ce <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e9bc:	4b07      	ldr	r3, [pc, #28]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e9be:	69db      	ldr	r3, [r3, #28]
 800e9c0:	f043 0320 	orr.w	r3, r3, #32
 800e9c4:	4a05      	ldr	r2, [pc, #20]	; (800e9dc <FLASH_SetErrorCode+0xa8>)
 800e9c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e9c8:	4b03      	ldr	r3, [pc, #12]	; (800e9d8 <FLASH_SetErrorCode+0xa4>)
 800e9ca:	2202      	movs	r2, #2
 800e9cc:	60da      	str	r2, [r3, #12]
  }
}
 800e9ce:	bf00      	nop
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr
 800e9d8:	40023c00 	.word	0x40023c00
 800e9dc:	20000900 	.word	0x20000900

0800e9e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800e9f0:	78fb      	ldrb	r3, [r7, #3]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d102      	bne.n	800e9fc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	60fb      	str	r3, [r7, #12]
 800e9fa:	e010      	b.n	800ea1e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800e9fc:	78fb      	ldrb	r3, [r7, #3]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d103      	bne.n	800ea0a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ea02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea06:	60fb      	str	r3, [r7, #12]
 800ea08:	e009      	b.n	800ea1e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ea0a:	78fb      	ldrb	r3, [r7, #3]
 800ea0c:	2b02      	cmp	r3, #2
 800ea0e:	d103      	bne.n	800ea18 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ea10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e002      	b.n	800ea1e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ea18:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ea1c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ea1e:	4b13      	ldr	r3, [pc, #76]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea20:	691b      	ldr	r3, [r3, #16]
 800ea22:	4a12      	ldr	r2, [pc, #72]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ea2a:	4b10      	ldr	r3, [pc, #64]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea2c:	691a      	ldr	r2, [r3, #16]
 800ea2e:	490f      	ldr	r1, [pc, #60]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4313      	orrs	r3, r2
 800ea34:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ea36:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	4a0c      	ldr	r2, [pc, #48]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ea40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800ea42:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea44:	691a      	ldr	r2, [r3, #16]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	00db      	lsls	r3, r3, #3
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	4a07      	ldr	r2, [pc, #28]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea4e:	f043 0302 	orr.w	r3, r3, #2
 800ea52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ea54:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea56:	691b      	ldr	r3, [r3, #16]
 800ea58:	4a04      	ldr	r2, [pc, #16]	; (800ea6c <FLASH_Erase_Sector+0x8c>)
 800ea5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea5e:	6113      	str	r3, [r2, #16]
}
 800ea60:	bf00      	nop
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	40023c00 	.word	0x40023c00

0800ea70 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800ea70:	b480      	push	{r7}
 800ea72:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800ea74:	4b20      	ldr	r3, [pc, #128]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d017      	beq.n	800eab0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ea80:	4b1d      	ldr	r3, [pc, #116]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a1c      	ldr	r2, [pc, #112]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800ea86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea8a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ea8c:	4b1a      	ldr	r3, [pc, #104]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a19      	ldr	r2, [pc, #100]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800ea92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ea96:	6013      	str	r3, [r2, #0]
 800ea98:	4b17      	ldr	r3, [pc, #92]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a16      	ldr	r2, [pc, #88]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800ea9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eaa2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800eaa4:	4b14      	ldr	r3, [pc, #80]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a13      	ldr	r2, [pc, #76]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eaaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eaae:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800eab0:	4b11      	ldr	r3, [pc, #68]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d017      	beq.n	800eaec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800eabc:	4b0e      	ldr	r3, [pc, #56]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a0d      	ldr	r2, [pc, #52]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eac6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800eac8:	4b0b      	ldr	r3, [pc, #44]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a0a      	ldr	r2, [pc, #40]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ead2:	6013      	str	r3, [r2, #0]
 800ead4:	4b08      	ldr	r3, [pc, #32]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a07      	ldr	r2, [pc, #28]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eade:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800eae0:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a04      	ldr	r2, [pc, #16]	; (800eaf8 <FLASH_FlushCaches+0x88>)
 800eae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eaea:	6013      	str	r3, [r2, #0]
  }
}
 800eaec:	bf00      	nop
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	40023c00 	.word	0x40023c00

0800eafc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b089      	sub	sp, #36	; 0x24
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800eb06:	2300      	movs	r3, #0
 800eb08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800eb12:	2300      	movs	r3, #0
 800eb14:	61fb      	str	r3, [r7, #28]
 800eb16:	e16b      	b.n	800edf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800eb18:	2201      	movs	r2, #1
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	697a      	ldr	r2, [r7, #20]
 800eb28:	4013      	ands	r3, r2
 800eb2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	f040 815a 	bne.w	800edea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d00b      	beq.n	800eb56 <HAL_GPIO_Init+0x5a>
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d007      	beq.n	800eb56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800eb4a:	2b11      	cmp	r3, #17
 800eb4c:	d003      	beq.n	800eb56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	2b12      	cmp	r3, #18
 800eb54:	d130      	bne.n	800ebb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	2203      	movs	r2, #3
 800eb62:	fa02 f303 	lsl.w	r3, r2, r3
 800eb66:	43db      	mvns	r3, r3
 800eb68:	69ba      	ldr	r2, [r7, #24]
 800eb6a:	4013      	ands	r3, r2
 800eb6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	68da      	ldr	r2, [r3, #12]
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	fa02 f303 	lsl.w	r3, r2, r3
 800eb7a:	69ba      	ldr	r2, [r7, #24]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	69ba      	ldr	r2, [r7, #24]
 800eb84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	fa02 f303 	lsl.w	r3, r2, r3
 800eb94:	43db      	mvns	r3, r3
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	4013      	ands	r3, r2
 800eb9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	091b      	lsrs	r3, r3, #4
 800eba2:	f003 0201 	and.w	r2, r3, #1
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebac:	69ba      	ldr	r2, [r7, #24]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	69ba      	ldr	r2, [r7, #24]
 800ebb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	2203      	movs	r2, #3
 800ebc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ebc8:	43db      	mvns	r3, r3
 800ebca:	69ba      	ldr	r2, [r7, #24]
 800ebcc:	4013      	ands	r3, r2
 800ebce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	689a      	ldr	r2, [r3, #8]
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	005b      	lsls	r3, r3, #1
 800ebd8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebdc:	69ba      	ldr	r2, [r7, #24]
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	69ba      	ldr	r2, [r7, #24]
 800ebe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d003      	beq.n	800ebf8 <HAL_GPIO_Init+0xfc>
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	2b12      	cmp	r3, #18
 800ebf6:	d123      	bne.n	800ec40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	08da      	lsrs	r2, r3, #3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	3208      	adds	r2, #8
 800ec00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	f003 0307 	and.w	r3, r3, #7
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	220f      	movs	r2, #15
 800ec10:	fa02 f303 	lsl.w	r3, r2, r3
 800ec14:	43db      	mvns	r3, r3
 800ec16:	69ba      	ldr	r2, [r7, #24]
 800ec18:	4013      	ands	r3, r2
 800ec1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	691a      	ldr	r2, [r3, #16]
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	fa02 f303 	lsl.w	r3, r2, r3
 800ec2c:	69ba      	ldr	r2, [r7, #24]
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	08da      	lsrs	r2, r3, #3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	3208      	adds	r2, #8
 800ec3a:	69b9      	ldr	r1, [r7, #24]
 800ec3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	005b      	lsls	r3, r3, #1
 800ec4a:	2203      	movs	r2, #3
 800ec4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec50:	43db      	mvns	r3, r3
 800ec52:	69ba      	ldr	r2, [r7, #24]
 800ec54:	4013      	ands	r3, r2
 800ec56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	f003 0203 	and.w	r2, r3, #3
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	fa02 f303 	lsl.w	r3, r2, r3
 800ec68:	69ba      	ldr	r2, [r7, #24]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	69ba      	ldr	r2, [r7, #24]
 800ec72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f000 80b4 	beq.w	800edea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ec82:	2300      	movs	r3, #0
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	4b5f      	ldr	r3, [pc, #380]	; (800ee04 <HAL_GPIO_Init+0x308>)
 800ec88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec8a:	4a5e      	ldr	r2, [pc, #376]	; (800ee04 <HAL_GPIO_Init+0x308>)
 800ec8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec90:	6453      	str	r3, [r2, #68]	; 0x44
 800ec92:	4b5c      	ldr	r3, [pc, #368]	; (800ee04 <HAL_GPIO_Init+0x308>)
 800ec94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ec9e:	4a5a      	ldr	r2, [pc, #360]	; (800ee08 <HAL_GPIO_Init+0x30c>)
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	089b      	lsrs	r3, r3, #2
 800eca4:	3302      	adds	r3, #2
 800eca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	f003 0303 	and.w	r3, r3, #3
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	220f      	movs	r2, #15
 800ecb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ecba:	43db      	mvns	r3, r3
 800ecbc:	69ba      	ldr	r2, [r7, #24]
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	4a51      	ldr	r2, [pc, #324]	; (800ee0c <HAL_GPIO_Init+0x310>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d02b      	beq.n	800ed22 <HAL_GPIO_Init+0x226>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4a50      	ldr	r2, [pc, #320]	; (800ee10 <HAL_GPIO_Init+0x314>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d025      	beq.n	800ed1e <HAL_GPIO_Init+0x222>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	4a4f      	ldr	r2, [pc, #316]	; (800ee14 <HAL_GPIO_Init+0x318>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d01f      	beq.n	800ed1a <HAL_GPIO_Init+0x21e>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4a4e      	ldr	r2, [pc, #312]	; (800ee18 <HAL_GPIO_Init+0x31c>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d019      	beq.n	800ed16 <HAL_GPIO_Init+0x21a>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	4a4d      	ldr	r2, [pc, #308]	; (800ee1c <HAL_GPIO_Init+0x320>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d013      	beq.n	800ed12 <HAL_GPIO_Init+0x216>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	4a4c      	ldr	r2, [pc, #304]	; (800ee20 <HAL_GPIO_Init+0x324>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d00d      	beq.n	800ed0e <HAL_GPIO_Init+0x212>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4a4b      	ldr	r2, [pc, #300]	; (800ee24 <HAL_GPIO_Init+0x328>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d007      	beq.n	800ed0a <HAL_GPIO_Init+0x20e>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4a4a      	ldr	r2, [pc, #296]	; (800ee28 <HAL_GPIO_Init+0x32c>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d101      	bne.n	800ed06 <HAL_GPIO_Init+0x20a>
 800ed02:	2307      	movs	r3, #7
 800ed04:	e00e      	b.n	800ed24 <HAL_GPIO_Init+0x228>
 800ed06:	2308      	movs	r3, #8
 800ed08:	e00c      	b.n	800ed24 <HAL_GPIO_Init+0x228>
 800ed0a:	2306      	movs	r3, #6
 800ed0c:	e00a      	b.n	800ed24 <HAL_GPIO_Init+0x228>
 800ed0e:	2305      	movs	r3, #5
 800ed10:	e008      	b.n	800ed24 <HAL_GPIO_Init+0x228>
 800ed12:	2304      	movs	r3, #4
 800ed14:	e006      	b.n	800ed24 <HAL_GPIO_Init+0x228>
 800ed16:	2303      	movs	r3, #3
 800ed18:	e004      	b.n	800ed24 <HAL_GPIO_Init+0x228>
 800ed1a:	2302      	movs	r3, #2
 800ed1c:	e002      	b.n	800ed24 <HAL_GPIO_Init+0x228>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e000      	b.n	800ed24 <HAL_GPIO_Init+0x228>
 800ed22:	2300      	movs	r3, #0
 800ed24:	69fa      	ldr	r2, [r7, #28]
 800ed26:	f002 0203 	and.w	r2, r2, #3
 800ed2a:	0092      	lsls	r2, r2, #2
 800ed2c:	4093      	lsls	r3, r2
 800ed2e:	69ba      	ldr	r2, [r7, #24]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ed34:	4934      	ldr	r1, [pc, #208]	; (800ee08 <HAL_GPIO_Init+0x30c>)
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	089b      	lsrs	r3, r3, #2
 800ed3a:	3302      	adds	r3, #2
 800ed3c:	69ba      	ldr	r2, [r7, #24]
 800ed3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ed42:	4b3a      	ldr	r3, [pc, #232]	; (800ee2c <HAL_GPIO_Init+0x330>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	43db      	mvns	r3, r3
 800ed4c:	69ba      	ldr	r2, [r7, #24]
 800ed4e:	4013      	ands	r3, r2
 800ed50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d003      	beq.n	800ed66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ed5e:	69ba      	ldr	r2, [r7, #24]
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	4313      	orrs	r3, r2
 800ed64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ed66:	4a31      	ldr	r2, [pc, #196]	; (800ee2c <HAL_GPIO_Init+0x330>)
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ed6c:	4b2f      	ldr	r3, [pc, #188]	; (800ee2c <HAL_GPIO_Init+0x330>)
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	43db      	mvns	r3, r3
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	4013      	ands	r3, r2
 800ed7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d003      	beq.n	800ed90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ed88:	69ba      	ldr	r2, [r7, #24]
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ed90:	4a26      	ldr	r2, [pc, #152]	; (800ee2c <HAL_GPIO_Init+0x330>)
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ed96:	4b25      	ldr	r3, [pc, #148]	; (800ee2c <HAL_GPIO_Init+0x330>)
 800ed98:	689b      	ldr	r3, [r3, #8]
 800ed9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	43db      	mvns	r3, r3
 800eda0:	69ba      	ldr	r2, [r7, #24]
 800eda2:	4013      	ands	r3, r2
 800eda4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d003      	beq.n	800edba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800edb2:	69ba      	ldr	r2, [r7, #24]
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800edba:	4a1c      	ldr	r2, [pc, #112]	; (800ee2c <HAL_GPIO_Init+0x330>)
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800edc0:	4b1a      	ldr	r3, [pc, #104]	; (800ee2c <HAL_GPIO_Init+0x330>)
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	43db      	mvns	r3, r3
 800edca:	69ba      	ldr	r2, [r7, #24]
 800edcc:	4013      	ands	r3, r2
 800edce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d003      	beq.n	800ede4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800eddc:	69ba      	ldr	r2, [r7, #24]
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	4313      	orrs	r3, r2
 800ede2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ede4:	4a11      	ldr	r2, [pc, #68]	; (800ee2c <HAL_GPIO_Init+0x330>)
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800edea:	69fb      	ldr	r3, [r7, #28]
 800edec:	3301      	adds	r3, #1
 800edee:	61fb      	str	r3, [r7, #28]
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	2b0f      	cmp	r3, #15
 800edf4:	f67f ae90 	bls.w	800eb18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800edf8:	bf00      	nop
 800edfa:	3724      	adds	r7, #36	; 0x24
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr
 800ee04:	40023800 	.word	0x40023800
 800ee08:	40013800 	.word	0x40013800
 800ee0c:	40020000 	.word	0x40020000
 800ee10:	40020400 	.word	0x40020400
 800ee14:	40020800 	.word	0x40020800
 800ee18:	40020c00 	.word	0x40020c00
 800ee1c:	40021000 	.word	0x40021000
 800ee20:	40021400 	.word	0x40021400
 800ee24:	40021800 	.word	0x40021800
 800ee28:	40021c00 	.word	0x40021c00
 800ee2c:	40013c00 	.word	0x40013c00

0800ee30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	807b      	strh	r3, [r7, #2]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ee40:	787b      	ldrb	r3, [r7, #1]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d003      	beq.n	800ee4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ee46:	887a      	ldrh	r2, [r7, #2]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ee4c:	e003      	b.n	800ee56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ee4e:	887b      	ldrh	r3, [r7, #2]
 800ee50:	041a      	lsls	r2, r3, #16
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	619a      	str	r2, [r3, #24]
}
 800ee56:	bf00      	nop
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
	...

0800ee64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b086      	sub	sp, #24
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d101      	bne.n	800ee76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e25b      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f003 0301 	and.w	r3, r3, #1
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d075      	beq.n	800ef6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee82:	4ba3      	ldr	r3, [pc, #652]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	f003 030c 	and.w	r3, r3, #12
 800ee8a:	2b04      	cmp	r3, #4
 800ee8c:	d00c      	beq.n	800eea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee8e:	4ba0      	ldr	r3, [pc, #640]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee96:	2b08      	cmp	r3, #8
 800ee98:	d112      	bne.n	800eec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee9a:	4b9d      	ldr	r3, [pc, #628]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eea6:	d10b      	bne.n	800eec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eea8:	4b99      	ldr	r3, [pc, #612]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d05b      	beq.n	800ef6c <HAL_RCC_OscConfig+0x108>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d157      	bne.n	800ef6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800eebc:	2301      	movs	r3, #1
 800eebe:	e236      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eec8:	d106      	bne.n	800eed8 <HAL_RCC_OscConfig+0x74>
 800eeca:	4b91      	ldr	r3, [pc, #580]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a90      	ldr	r2, [pc, #576]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eed4:	6013      	str	r3, [r2, #0]
 800eed6:	e01d      	b.n	800ef14 <HAL_RCC_OscConfig+0xb0>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eee0:	d10c      	bne.n	800eefc <HAL_RCC_OscConfig+0x98>
 800eee2:	4b8b      	ldr	r3, [pc, #556]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a8a      	ldr	r2, [pc, #552]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eeec:	6013      	str	r3, [r2, #0]
 800eeee:	4b88      	ldr	r3, [pc, #544]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a87      	ldr	r2, [pc, #540]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eef8:	6013      	str	r3, [r2, #0]
 800eefa:	e00b      	b.n	800ef14 <HAL_RCC_OscConfig+0xb0>
 800eefc:	4b84      	ldr	r3, [pc, #528]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a83      	ldr	r2, [pc, #524]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ef02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	4b81      	ldr	r3, [pc, #516]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a80      	ldr	r2, [pc, #512]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ef0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d013      	beq.n	800ef44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef1c:	f7fe f9a6 	bl	800d26c <HAL_GetTick>
 800ef20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef22:	e008      	b.n	800ef36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ef24:	f7fe f9a2 	bl	800d26c <HAL_GetTick>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	2b64      	cmp	r3, #100	; 0x64
 800ef30:	d901      	bls.n	800ef36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ef32:	2303      	movs	r3, #3
 800ef34:	e1fb      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef36:	4b76      	ldr	r3, [pc, #472]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d0f0      	beq.n	800ef24 <HAL_RCC_OscConfig+0xc0>
 800ef42:	e014      	b.n	800ef6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef44:	f7fe f992 	bl	800d26c <HAL_GetTick>
 800ef48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef4a:	e008      	b.n	800ef5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ef4c:	f7fe f98e 	bl	800d26c <HAL_GetTick>
 800ef50:	4602      	mov	r2, r0
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	2b64      	cmp	r3, #100	; 0x64
 800ef58:	d901      	bls.n	800ef5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	e1e7      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef5e:	4b6c      	ldr	r3, [pc, #432]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1f0      	bne.n	800ef4c <HAL_RCC_OscConfig+0xe8>
 800ef6a:	e000      	b.n	800ef6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f003 0302 	and.w	r3, r3, #2
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d063      	beq.n	800f042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ef7a:	4b65      	ldr	r3, [pc, #404]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ef7c:	689b      	ldr	r3, [r3, #8]
 800ef7e:	f003 030c 	and.w	r3, r3, #12
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d00b      	beq.n	800ef9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef86:	4b62      	ldr	r3, [pc, #392]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ef88:	689b      	ldr	r3, [r3, #8]
 800ef8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ef8e:	2b08      	cmp	r3, #8
 800ef90:	d11c      	bne.n	800efcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef92:	4b5f      	ldr	r3, [pc, #380]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d116      	bne.n	800efcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef9e:	4b5c      	ldr	r3, [pc, #368]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f003 0302 	and.w	r3, r3, #2
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d005      	beq.n	800efb6 <HAL_RCC_OscConfig+0x152>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d001      	beq.n	800efb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800efb2:	2301      	movs	r3, #1
 800efb4:	e1bb      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800efb6:	4b56      	ldr	r3, [pc, #344]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	691b      	ldr	r3, [r3, #16]
 800efc2:	00db      	lsls	r3, r3, #3
 800efc4:	4952      	ldr	r1, [pc, #328]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800efc6:	4313      	orrs	r3, r2
 800efc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800efca:	e03a      	b.n	800f042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d020      	beq.n	800f016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800efd4:	4b4f      	ldr	r3, [pc, #316]	; (800f114 <HAL_RCC_OscConfig+0x2b0>)
 800efd6:	2201      	movs	r2, #1
 800efd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800efda:	f7fe f947 	bl	800d26c <HAL_GetTick>
 800efde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800efe0:	e008      	b.n	800eff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800efe2:	f7fe f943 	bl	800d26c <HAL_GetTick>
 800efe6:	4602      	mov	r2, r0
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	1ad3      	subs	r3, r2, r3
 800efec:	2b02      	cmp	r3, #2
 800efee:	d901      	bls.n	800eff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800eff0:	2303      	movs	r3, #3
 800eff2:	e19c      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eff4:	4b46      	ldr	r3, [pc, #280]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f003 0302 	and.w	r3, r3, #2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d0f0      	beq.n	800efe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f000:	4b43      	ldr	r3, [pc, #268]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	691b      	ldr	r3, [r3, #16]
 800f00c:	00db      	lsls	r3, r3, #3
 800f00e:	4940      	ldr	r1, [pc, #256]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f010:	4313      	orrs	r3, r2
 800f012:	600b      	str	r3, [r1, #0]
 800f014:	e015      	b.n	800f042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f016:	4b3f      	ldr	r3, [pc, #252]	; (800f114 <HAL_RCC_OscConfig+0x2b0>)
 800f018:	2200      	movs	r2, #0
 800f01a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f01c:	f7fe f926 	bl	800d26c <HAL_GetTick>
 800f020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f022:	e008      	b.n	800f036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f024:	f7fe f922 	bl	800d26c <HAL_GetTick>
 800f028:	4602      	mov	r2, r0
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	2b02      	cmp	r3, #2
 800f030:	d901      	bls.n	800f036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f032:	2303      	movs	r3, #3
 800f034:	e17b      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f036:	4b36      	ldr	r3, [pc, #216]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f003 0302 	and.w	r3, r3, #2
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1f0      	bne.n	800f024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f003 0308 	and.w	r3, r3, #8
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d030      	beq.n	800f0b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d016      	beq.n	800f084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f056:	4b30      	ldr	r3, [pc, #192]	; (800f118 <HAL_RCC_OscConfig+0x2b4>)
 800f058:	2201      	movs	r2, #1
 800f05a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f05c:	f7fe f906 	bl	800d26c <HAL_GetTick>
 800f060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f062:	e008      	b.n	800f076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f064:	f7fe f902 	bl	800d26c <HAL_GetTick>
 800f068:	4602      	mov	r2, r0
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	2b02      	cmp	r3, #2
 800f070:	d901      	bls.n	800f076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f072:	2303      	movs	r3, #3
 800f074:	e15b      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f076:	4b26      	ldr	r3, [pc, #152]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f07a:	f003 0302 	and.w	r3, r3, #2
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d0f0      	beq.n	800f064 <HAL_RCC_OscConfig+0x200>
 800f082:	e015      	b.n	800f0b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f084:	4b24      	ldr	r3, [pc, #144]	; (800f118 <HAL_RCC_OscConfig+0x2b4>)
 800f086:	2200      	movs	r2, #0
 800f088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f08a:	f7fe f8ef 	bl	800d26c <HAL_GetTick>
 800f08e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f090:	e008      	b.n	800f0a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f092:	f7fe f8eb 	bl	800d26c <HAL_GetTick>
 800f096:	4602      	mov	r2, r0
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	1ad3      	subs	r3, r2, r3
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	d901      	bls.n	800f0a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f0a0:	2303      	movs	r3, #3
 800f0a2:	e144      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0a4:	4b1a      	ldr	r3, [pc, #104]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f0a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0a8:	f003 0302 	and.w	r3, r3, #2
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d1f0      	bne.n	800f092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f003 0304 	and.w	r3, r3, #4
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f000 80a0 	beq.w	800f1fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f0c2:	4b13      	ldr	r3, [pc, #76]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d10f      	bne.n	800f0ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60bb      	str	r3, [r7, #8]
 800f0d2:	4b0f      	ldr	r3, [pc, #60]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d6:	4a0e      	ldr	r2, [pc, #56]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f0d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0dc:	6413      	str	r3, [r2, #64]	; 0x40
 800f0de:	4b0c      	ldr	r3, [pc, #48]	; (800f110 <HAL_RCC_OscConfig+0x2ac>)
 800f0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0e6:	60bb      	str	r3, [r7, #8]
 800f0e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0ee:	4b0b      	ldr	r3, [pc, #44]	; (800f11c <HAL_RCC_OscConfig+0x2b8>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d121      	bne.n	800f13e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f0fa:	4b08      	ldr	r3, [pc, #32]	; (800f11c <HAL_RCC_OscConfig+0x2b8>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a07      	ldr	r2, [pc, #28]	; (800f11c <HAL_RCC_OscConfig+0x2b8>)
 800f100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f106:	f7fe f8b1 	bl	800d26c <HAL_GetTick>
 800f10a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f10c:	e011      	b.n	800f132 <HAL_RCC_OscConfig+0x2ce>
 800f10e:	bf00      	nop
 800f110:	40023800 	.word	0x40023800
 800f114:	42470000 	.word	0x42470000
 800f118:	42470e80 	.word	0x42470e80
 800f11c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f120:	f7fe f8a4 	bl	800d26c <HAL_GetTick>
 800f124:	4602      	mov	r2, r0
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	1ad3      	subs	r3, r2, r3
 800f12a:	2b02      	cmp	r3, #2
 800f12c:	d901      	bls.n	800f132 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f12e:	2303      	movs	r3, #3
 800f130:	e0fd      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f132:	4b81      	ldr	r3, [pc, #516]	; (800f338 <HAL_RCC_OscConfig+0x4d4>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d0f0      	beq.n	800f120 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	2b01      	cmp	r3, #1
 800f144:	d106      	bne.n	800f154 <HAL_RCC_OscConfig+0x2f0>
 800f146:	4b7d      	ldr	r3, [pc, #500]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f14a:	4a7c      	ldr	r2, [pc, #496]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f14c:	f043 0301 	orr.w	r3, r3, #1
 800f150:	6713      	str	r3, [r2, #112]	; 0x70
 800f152:	e01c      	b.n	800f18e <HAL_RCC_OscConfig+0x32a>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	2b05      	cmp	r3, #5
 800f15a:	d10c      	bne.n	800f176 <HAL_RCC_OscConfig+0x312>
 800f15c:	4b77      	ldr	r3, [pc, #476]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f15e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f160:	4a76      	ldr	r2, [pc, #472]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f162:	f043 0304 	orr.w	r3, r3, #4
 800f166:	6713      	str	r3, [r2, #112]	; 0x70
 800f168:	4b74      	ldr	r3, [pc, #464]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f16c:	4a73      	ldr	r2, [pc, #460]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f16e:	f043 0301 	orr.w	r3, r3, #1
 800f172:	6713      	str	r3, [r2, #112]	; 0x70
 800f174:	e00b      	b.n	800f18e <HAL_RCC_OscConfig+0x32a>
 800f176:	4b71      	ldr	r3, [pc, #452]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f17a:	4a70      	ldr	r2, [pc, #448]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f17c:	f023 0301 	bic.w	r3, r3, #1
 800f180:	6713      	str	r3, [r2, #112]	; 0x70
 800f182:	4b6e      	ldr	r3, [pc, #440]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f186:	4a6d      	ldr	r2, [pc, #436]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f188:	f023 0304 	bic.w	r3, r3, #4
 800f18c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d015      	beq.n	800f1c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f196:	f7fe f869 	bl	800d26c <HAL_GetTick>
 800f19a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f19c:	e00a      	b.n	800f1b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f19e:	f7fe f865 	bl	800d26c <HAL_GetTick>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d901      	bls.n	800f1b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f1b0:	2303      	movs	r3, #3
 800f1b2:	e0bc      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f1b4:	4b61      	ldr	r3, [pc, #388]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1b8:	f003 0302 	and.w	r3, r3, #2
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d0ee      	beq.n	800f19e <HAL_RCC_OscConfig+0x33a>
 800f1c0:	e014      	b.n	800f1ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f1c2:	f7fe f853 	bl	800d26c <HAL_GetTick>
 800f1c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f1c8:	e00a      	b.n	800f1e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f1ca:	f7fe f84f 	bl	800d26c <HAL_GetTick>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	1ad3      	subs	r3, r2, r3
 800f1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d901      	bls.n	800f1e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e0a6      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f1e0:	4b56      	ldr	r3, [pc, #344]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e4:	f003 0302 	and.w	r3, r3, #2
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d1ee      	bne.n	800f1ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f1ec:	7dfb      	ldrb	r3, [r7, #23]
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d105      	bne.n	800f1fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f1f2:	4b52      	ldr	r3, [pc, #328]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f6:	4a51      	ldr	r2, [pc, #324]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f1f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 8092 	beq.w	800f32c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f208:	4b4c      	ldr	r3, [pc, #304]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	f003 030c 	and.w	r3, r3, #12
 800f210:	2b08      	cmp	r3, #8
 800f212:	d05c      	beq.n	800f2ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d141      	bne.n	800f2a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f21c:	4b48      	ldr	r3, [pc, #288]	; (800f340 <HAL_RCC_OscConfig+0x4dc>)
 800f21e:	2200      	movs	r2, #0
 800f220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f222:	f7fe f823 	bl	800d26c <HAL_GetTick>
 800f226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f228:	e008      	b.n	800f23c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f22a:	f7fe f81f 	bl	800d26c <HAL_GetTick>
 800f22e:	4602      	mov	r2, r0
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	1ad3      	subs	r3, r2, r3
 800f234:	2b02      	cmp	r3, #2
 800f236:	d901      	bls.n	800f23c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f238:	2303      	movs	r3, #3
 800f23a:	e078      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f23c:	4b3f      	ldr	r3, [pc, #252]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1f0      	bne.n	800f22a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	69da      	ldr	r2, [r3, #28]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a1b      	ldr	r3, [r3, #32]
 800f250:	431a      	orrs	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f256:	019b      	lsls	r3, r3, #6
 800f258:	431a      	orrs	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25e:	085b      	lsrs	r3, r3, #1
 800f260:	3b01      	subs	r3, #1
 800f262:	041b      	lsls	r3, r3, #16
 800f264:	431a      	orrs	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f26a:	061b      	lsls	r3, r3, #24
 800f26c:	4933      	ldr	r1, [pc, #204]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f26e:	4313      	orrs	r3, r2
 800f270:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f272:	4b33      	ldr	r3, [pc, #204]	; (800f340 <HAL_RCC_OscConfig+0x4dc>)
 800f274:	2201      	movs	r2, #1
 800f276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f278:	f7fd fff8 	bl	800d26c <HAL_GetTick>
 800f27c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f27e:	e008      	b.n	800f292 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f280:	f7fd fff4 	bl	800d26c <HAL_GetTick>
 800f284:	4602      	mov	r2, r0
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	2b02      	cmp	r3, #2
 800f28c:	d901      	bls.n	800f292 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f28e:	2303      	movs	r3, #3
 800f290:	e04d      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f292:	4b2a      	ldr	r3, [pc, #168]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d0f0      	beq.n	800f280 <HAL_RCC_OscConfig+0x41c>
 800f29e:	e045      	b.n	800f32c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f2a0:	4b27      	ldr	r3, [pc, #156]	; (800f340 <HAL_RCC_OscConfig+0x4dc>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f2a6:	f7fd ffe1 	bl	800d26c <HAL_GetTick>
 800f2aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f2ac:	e008      	b.n	800f2c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f2ae:	f7fd ffdd 	bl	800d26c <HAL_GetTick>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	1ad3      	subs	r3, r2, r3
 800f2b8:	2b02      	cmp	r3, #2
 800f2ba:	d901      	bls.n	800f2c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	e036      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f2c0:	4b1e      	ldr	r3, [pc, #120]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1f0      	bne.n	800f2ae <HAL_RCC_OscConfig+0x44a>
 800f2cc:	e02e      	b.n	800f32c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	699b      	ldr	r3, [r3, #24]
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d101      	bne.n	800f2da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e029      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f2da:	4b18      	ldr	r3, [pc, #96]	; (800f33c <HAL_RCC_OscConfig+0x4d8>)
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	69db      	ldr	r3, [r3, #28]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d11c      	bne.n	800f328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d115      	bne.n	800f328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f302:	4013      	ands	r3, r2
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f308:	4293      	cmp	r3, r2
 800f30a:	d10d      	bne.n	800f328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f316:	429a      	cmp	r2, r3
 800f318:	d106      	bne.n	800f328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f324:	429a      	cmp	r2, r3
 800f326:	d001      	beq.n	800f32c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800f328:	2301      	movs	r3, #1
 800f32a:	e000      	b.n	800f32e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3718      	adds	r7, #24
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	40007000 	.word	0x40007000
 800f33c:	40023800 	.word	0x40023800
 800f340:	42470060 	.word	0x42470060

0800f344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d101      	bne.n	800f358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	e0cc      	b.n	800f4f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f358:	4b68      	ldr	r3, [pc, #416]	; (800f4fc <HAL_RCC_ClockConfig+0x1b8>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f003 030f 	and.w	r3, r3, #15
 800f360:	683a      	ldr	r2, [r7, #0]
 800f362:	429a      	cmp	r2, r3
 800f364:	d90c      	bls.n	800f380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f366:	4b65      	ldr	r3, [pc, #404]	; (800f4fc <HAL_RCC_ClockConfig+0x1b8>)
 800f368:	683a      	ldr	r2, [r7, #0]
 800f36a:	b2d2      	uxtb	r2, r2
 800f36c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f36e:	4b63      	ldr	r3, [pc, #396]	; (800f4fc <HAL_RCC_ClockConfig+0x1b8>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f003 030f 	and.w	r3, r3, #15
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d001      	beq.n	800f380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	e0b8      	b.n	800f4f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f003 0302 	and.w	r3, r3, #2
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d020      	beq.n	800f3ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f003 0304 	and.w	r3, r3, #4
 800f394:	2b00      	cmp	r3, #0
 800f396:	d005      	beq.n	800f3a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f398:	4b59      	ldr	r3, [pc, #356]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f39a:	689b      	ldr	r3, [r3, #8]
 800f39c:	4a58      	ldr	r2, [pc, #352]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f39e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f3a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f003 0308 	and.w	r3, r3, #8
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d005      	beq.n	800f3bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f3b0:	4b53      	ldr	r3, [pc, #332]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	4a52      	ldr	r2, [pc, #328]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f3b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f3ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f3bc:	4b50      	ldr	r3, [pc, #320]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	494d      	ldr	r1, [pc, #308]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f003 0301 	and.w	r3, r3, #1
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d044      	beq.n	800f464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d107      	bne.n	800f3f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3e2:	4b47      	ldr	r3, [pc, #284]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d119      	bne.n	800f422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e07f      	b.n	800f4f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	2b02      	cmp	r3, #2
 800f3f8:	d003      	beq.n	800f402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f3fe:	2b03      	cmp	r3, #3
 800f400:	d107      	bne.n	800f412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f402:	4b3f      	ldr	r3, [pc, #252]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d109      	bne.n	800f422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f40e:	2301      	movs	r3, #1
 800f410:	e06f      	b.n	800f4f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f412:	4b3b      	ldr	r3, [pc, #236]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f003 0302 	and.w	r3, r3, #2
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d101      	bne.n	800f422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f41e:	2301      	movs	r3, #1
 800f420:	e067      	b.n	800f4f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f422:	4b37      	ldr	r3, [pc, #220]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	f023 0203 	bic.w	r2, r3, #3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	4934      	ldr	r1, [pc, #208]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f430:	4313      	orrs	r3, r2
 800f432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f434:	f7fd ff1a 	bl	800d26c <HAL_GetTick>
 800f438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f43a:	e00a      	b.n	800f452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f43c:	f7fd ff16 	bl	800d26c <HAL_GetTick>
 800f440:	4602      	mov	r2, r0
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	f241 3288 	movw	r2, #5000	; 0x1388
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d901      	bls.n	800f452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f44e:	2303      	movs	r3, #3
 800f450:	e04f      	b.n	800f4f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f452:	4b2b      	ldr	r3, [pc, #172]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	f003 020c 	and.w	r2, r3, #12
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	429a      	cmp	r2, r3
 800f462:	d1eb      	bne.n	800f43c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f464:	4b25      	ldr	r3, [pc, #148]	; (800f4fc <HAL_RCC_ClockConfig+0x1b8>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f003 030f 	and.w	r3, r3, #15
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d20c      	bcs.n	800f48c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f472:	4b22      	ldr	r3, [pc, #136]	; (800f4fc <HAL_RCC_ClockConfig+0x1b8>)
 800f474:	683a      	ldr	r2, [r7, #0]
 800f476:	b2d2      	uxtb	r2, r2
 800f478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f47a:	4b20      	ldr	r3, [pc, #128]	; (800f4fc <HAL_RCC_ClockConfig+0x1b8>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f003 030f 	and.w	r3, r3, #15
 800f482:	683a      	ldr	r2, [r7, #0]
 800f484:	429a      	cmp	r2, r3
 800f486:	d001      	beq.n	800f48c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f488:	2301      	movs	r3, #1
 800f48a:	e032      	b.n	800f4f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f003 0304 	and.w	r3, r3, #4
 800f494:	2b00      	cmp	r3, #0
 800f496:	d008      	beq.n	800f4aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f498:	4b19      	ldr	r3, [pc, #100]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	4916      	ldr	r1, [pc, #88]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f003 0308 	and.w	r3, r3, #8
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d009      	beq.n	800f4ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f4b6:	4b12      	ldr	r3, [pc, #72]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	691b      	ldr	r3, [r3, #16]
 800f4c2:	00db      	lsls	r3, r3, #3
 800f4c4:	490e      	ldr	r1, [pc, #56]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f4ca:	f000 f821 	bl	800f510 <HAL_RCC_GetSysClockFreq>
 800f4ce:	4601      	mov	r1, r0
 800f4d0:	4b0b      	ldr	r3, [pc, #44]	; (800f500 <HAL_RCC_ClockConfig+0x1bc>)
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	091b      	lsrs	r3, r3, #4
 800f4d6:	f003 030f 	and.w	r3, r3, #15
 800f4da:	4a0a      	ldr	r2, [pc, #40]	; (800f504 <HAL_RCC_ClockConfig+0x1c0>)
 800f4dc:	5cd3      	ldrb	r3, [r2, r3]
 800f4de:	fa21 f303 	lsr.w	r3, r1, r3
 800f4e2:	4a09      	ldr	r2, [pc, #36]	; (800f508 <HAL_RCC_ClockConfig+0x1c4>)
 800f4e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f4e6:	4b09      	ldr	r3, [pc, #36]	; (800f50c <HAL_RCC_ClockConfig+0x1c8>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fd fe7a 	bl	800d1e4 <HAL_InitTick>

  return HAL_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	40023c00 	.word	0x40023c00
 800f500:	40023800 	.word	0x40023800
 800f504:	080140a8 	.word	0x080140a8
 800f508:	20000004 	.word	0x20000004
 800f50c:	20000008 	.word	0x20000008

0800f510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f516:	2300      	movs	r3, #0
 800f518:	607b      	str	r3, [r7, #4]
 800f51a:	2300      	movs	r3, #0
 800f51c:	60fb      	str	r3, [r7, #12]
 800f51e:	2300      	movs	r3, #0
 800f520:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f522:	2300      	movs	r3, #0
 800f524:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f526:	4b63      	ldr	r3, [pc, #396]	; (800f6b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f528:	689b      	ldr	r3, [r3, #8]
 800f52a:	f003 030c 	and.w	r3, r3, #12
 800f52e:	2b04      	cmp	r3, #4
 800f530:	d007      	beq.n	800f542 <HAL_RCC_GetSysClockFreq+0x32>
 800f532:	2b08      	cmp	r3, #8
 800f534:	d008      	beq.n	800f548 <HAL_RCC_GetSysClockFreq+0x38>
 800f536:	2b00      	cmp	r3, #0
 800f538:	f040 80b4 	bne.w	800f6a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f53c:	4b5e      	ldr	r3, [pc, #376]	; (800f6b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800f53e:	60bb      	str	r3, [r7, #8]
       break;
 800f540:	e0b3      	b.n	800f6aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f542:	4b5e      	ldr	r3, [pc, #376]	; (800f6bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 800f544:	60bb      	str	r3, [r7, #8]
      break;
 800f546:	e0b0      	b.n	800f6aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f548:	4b5a      	ldr	r3, [pc, #360]	; (800f6b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f550:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f552:	4b58      	ldr	r3, [pc, #352]	; (800f6b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d04a      	beq.n	800f5f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f55e:	4b55      	ldr	r3, [pc, #340]	; (800f6b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	099b      	lsrs	r3, r3, #6
 800f564:	f04f 0400 	mov.w	r4, #0
 800f568:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f56c:	f04f 0200 	mov.w	r2, #0
 800f570:	ea03 0501 	and.w	r5, r3, r1
 800f574:	ea04 0602 	and.w	r6, r4, r2
 800f578:	4629      	mov	r1, r5
 800f57a:	4632      	mov	r2, r6
 800f57c:	f04f 0300 	mov.w	r3, #0
 800f580:	f04f 0400 	mov.w	r4, #0
 800f584:	0154      	lsls	r4, r2, #5
 800f586:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f58a:	014b      	lsls	r3, r1, #5
 800f58c:	4619      	mov	r1, r3
 800f58e:	4622      	mov	r2, r4
 800f590:	1b49      	subs	r1, r1, r5
 800f592:	eb62 0206 	sbc.w	r2, r2, r6
 800f596:	f04f 0300 	mov.w	r3, #0
 800f59a:	f04f 0400 	mov.w	r4, #0
 800f59e:	0194      	lsls	r4, r2, #6
 800f5a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800f5a4:	018b      	lsls	r3, r1, #6
 800f5a6:	1a5b      	subs	r3, r3, r1
 800f5a8:	eb64 0402 	sbc.w	r4, r4, r2
 800f5ac:	f04f 0100 	mov.w	r1, #0
 800f5b0:	f04f 0200 	mov.w	r2, #0
 800f5b4:	00e2      	lsls	r2, r4, #3
 800f5b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800f5ba:	00d9      	lsls	r1, r3, #3
 800f5bc:	460b      	mov	r3, r1
 800f5be:	4614      	mov	r4, r2
 800f5c0:	195b      	adds	r3, r3, r5
 800f5c2:	eb44 0406 	adc.w	r4, r4, r6
 800f5c6:	f04f 0100 	mov.w	r1, #0
 800f5ca:	f04f 0200 	mov.w	r2, #0
 800f5ce:	0262      	lsls	r2, r4, #9
 800f5d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800f5d4:	0259      	lsls	r1, r3, #9
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	4614      	mov	r4, r2
 800f5da:	4618      	mov	r0, r3
 800f5dc:	4621      	mov	r1, r4
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f04f 0400 	mov.w	r4, #0
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	4623      	mov	r3, r4
 800f5e8:	f7f9 fa66 	bl	8008ab8 <__aeabi_uldivmod>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	460c      	mov	r4, r1
 800f5f0:	60fb      	str	r3, [r7, #12]
 800f5f2:	e049      	b.n	800f688 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5f4:	4b2f      	ldr	r3, [pc, #188]	; (800f6b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	099b      	lsrs	r3, r3, #6
 800f5fa:	f04f 0400 	mov.w	r4, #0
 800f5fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f602:	f04f 0200 	mov.w	r2, #0
 800f606:	ea03 0501 	and.w	r5, r3, r1
 800f60a:	ea04 0602 	and.w	r6, r4, r2
 800f60e:	4629      	mov	r1, r5
 800f610:	4632      	mov	r2, r6
 800f612:	f04f 0300 	mov.w	r3, #0
 800f616:	f04f 0400 	mov.w	r4, #0
 800f61a:	0154      	lsls	r4, r2, #5
 800f61c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f620:	014b      	lsls	r3, r1, #5
 800f622:	4619      	mov	r1, r3
 800f624:	4622      	mov	r2, r4
 800f626:	1b49      	subs	r1, r1, r5
 800f628:	eb62 0206 	sbc.w	r2, r2, r6
 800f62c:	f04f 0300 	mov.w	r3, #0
 800f630:	f04f 0400 	mov.w	r4, #0
 800f634:	0194      	lsls	r4, r2, #6
 800f636:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800f63a:	018b      	lsls	r3, r1, #6
 800f63c:	1a5b      	subs	r3, r3, r1
 800f63e:	eb64 0402 	sbc.w	r4, r4, r2
 800f642:	f04f 0100 	mov.w	r1, #0
 800f646:	f04f 0200 	mov.w	r2, #0
 800f64a:	00e2      	lsls	r2, r4, #3
 800f64c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800f650:	00d9      	lsls	r1, r3, #3
 800f652:	460b      	mov	r3, r1
 800f654:	4614      	mov	r4, r2
 800f656:	195b      	adds	r3, r3, r5
 800f658:	eb44 0406 	adc.w	r4, r4, r6
 800f65c:	f04f 0100 	mov.w	r1, #0
 800f660:	f04f 0200 	mov.w	r2, #0
 800f664:	02a2      	lsls	r2, r4, #10
 800f666:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800f66a:	0299      	lsls	r1, r3, #10
 800f66c:	460b      	mov	r3, r1
 800f66e:	4614      	mov	r4, r2
 800f670:	4618      	mov	r0, r3
 800f672:	4621      	mov	r1, r4
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f04f 0400 	mov.w	r4, #0
 800f67a:	461a      	mov	r2, r3
 800f67c:	4623      	mov	r3, r4
 800f67e:	f7f9 fa1b 	bl	8008ab8 <__aeabi_uldivmod>
 800f682:	4603      	mov	r3, r0
 800f684:	460c      	mov	r4, r1
 800f686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f688:	4b0a      	ldr	r3, [pc, #40]	; (800f6b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	0c1b      	lsrs	r3, r3, #16
 800f68e:	f003 0303 	and.w	r3, r3, #3
 800f692:	3301      	adds	r3, #1
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6a0:	60bb      	str	r3, [r7, #8]
      break;
 800f6a2:	e002      	b.n	800f6aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f6a4:	4b04      	ldr	r3, [pc, #16]	; (800f6b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800f6a6:	60bb      	str	r3, [r7, #8]
      break;
 800f6a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3714      	adds	r7, #20
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b4:	40023800 	.word	0x40023800
 800f6b8:	00f42400 	.word	0x00f42400
 800f6bc:	007a1200 	.word	0x007a1200

0800f6c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f6c4:	4b03      	ldr	r3, [pc, #12]	; (800f6d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	20000004 	.word	0x20000004

0800f6d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f6dc:	f7ff fff0 	bl	800f6c0 <HAL_RCC_GetHCLKFreq>
 800f6e0:	4601      	mov	r1, r0
 800f6e2:	4b05      	ldr	r3, [pc, #20]	; (800f6f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	0a9b      	lsrs	r3, r3, #10
 800f6e8:	f003 0307 	and.w	r3, r3, #7
 800f6ec:	4a03      	ldr	r2, [pc, #12]	; (800f6fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f6ee:	5cd3      	ldrb	r3, [r2, r3]
 800f6f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	40023800 	.word	0x40023800
 800f6fc:	080140b8 	.word	0x080140b8

0800f700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f704:	f7ff ffdc 	bl	800f6c0 <HAL_RCC_GetHCLKFreq>
 800f708:	4601      	mov	r1, r0
 800f70a:	4b05      	ldr	r3, [pc, #20]	; (800f720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	0b5b      	lsrs	r3, r3, #13
 800f710:	f003 0307 	and.w	r3, r3, #7
 800f714:	4a03      	ldr	r2, [pc, #12]	; (800f724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f716:	5cd3      	ldrb	r3, [r2, r3]
 800f718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	40023800 	.word	0x40023800
 800f724:	080140b8 	.word	0x080140b8

0800f728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d101      	bne.n	800f73a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	e056      	b.n	800f7e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d106      	bne.n	800f75a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7fc ff41 	bl	800c5dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2202      	movs	r2, #2
 800f75e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f770:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	685a      	ldr	r2, [r3, #4]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	431a      	orrs	r2, r3
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	431a      	orrs	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	431a      	orrs	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	695b      	ldr	r3, [r3, #20]
 800f78c:	431a      	orrs	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	699b      	ldr	r3, [r3, #24]
 800f792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f796:	431a      	orrs	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	69db      	ldr	r3, [r3, #28]
 800f79c:	431a      	orrs	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6a1b      	ldr	r3, [r3, #32]
 800f7a2:	ea42 0103 	orr.w	r1, r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	430a      	orrs	r2, r1
 800f7b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	699b      	ldr	r3, [r3, #24]
 800f7b6:	0c1b      	lsrs	r3, r3, #16
 800f7b8:	f003 0104 	and.w	r1, r3, #4
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	430a      	orrs	r2, r1
 800f7c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	69da      	ldr	r2, [r3, #28]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f7d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f7e6:	2300      	movs	r3, #0
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b082      	sub	sp, #8
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d101      	bne.n	800f802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f7fe:	2301      	movs	r3, #1
 800f800:	e01d      	b.n	800f83e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d106      	bne.n	800f81c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7fc ff28 	bl	800c66c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2202      	movs	r2, #2
 800f820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	3304      	adds	r3, #4
 800f82c:	4619      	mov	r1, r3
 800f82e:	4610      	mov	r0, r2
 800f830:	f000 fe3e 	bl	80104b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3708      	adds	r7, #8
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f846:	b480      	push	{r7}
 800f848:	b085      	sub	sp, #20
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	68da      	ldr	r2, [r3, #12]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f042 0201 	orr.w	r2, r2, #1
 800f85c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	f003 0307 	and.w	r3, r3, #7
 800f868:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2b06      	cmp	r3, #6
 800f86e:	d007      	beq.n	800f880 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f042 0201 	orr.w	r2, r2, #1
 800f87e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3714      	adds	r7, #20
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr

0800f88e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f88e:	b480      	push	{r7}
 800f890:	b083      	sub	sp, #12
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	68da      	ldr	r2, [r3, #12]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f022 0201 	bic.w	r2, r2, #1
 800f8a4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	6a1a      	ldr	r2, [r3, #32]
 800f8ac:	f241 1311 	movw	r3, #4369	; 0x1111
 800f8b0:	4013      	ands	r3, r2
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d10f      	bne.n	800f8d6 <HAL_TIM_Base_Stop_IT+0x48>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	6a1a      	ldr	r2, [r3, #32]
 800f8bc:	f240 4344 	movw	r3, #1092	; 0x444
 800f8c0:	4013      	ands	r3, r2
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d107      	bne.n	800f8d6 <HAL_TIM_Base_Stop_IT+0x48>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f022 0201 	bic.w	r2, r2, #1
 800f8d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	370c      	adds	r7, #12
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr

0800f8e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d101      	bne.n	800f8f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e01d      	b.n	800f932 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d106      	bne.n	800f910 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 f815 	bl	800f93a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2202      	movs	r2, #2
 800f914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	3304      	adds	r3, #4
 800f920:	4619      	mov	r1, r3
 800f922:	4610      	mov	r0, r2
 800f924:	f000 fdc4 	bl	80104b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2201      	movs	r2, #1
 800f92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f930:	2300      	movs	r3, #0
}
 800f932:	4618      	mov	r0, r3
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f93a:	b480      	push	{r7}
 800f93c:	b083      	sub	sp, #12
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f942:	bf00      	nop
 800f944:	370c      	adds	r7, #12
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
	...

0800f950 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	2b0c      	cmp	r3, #12
 800f95e:	d841      	bhi.n	800f9e4 <HAL_TIM_OC_Start_IT+0x94>
 800f960:	a201      	add	r2, pc, #4	; (adr r2, 800f968 <HAL_TIM_OC_Start_IT+0x18>)
 800f962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f966:	bf00      	nop
 800f968:	0800f99d 	.word	0x0800f99d
 800f96c:	0800f9e5 	.word	0x0800f9e5
 800f970:	0800f9e5 	.word	0x0800f9e5
 800f974:	0800f9e5 	.word	0x0800f9e5
 800f978:	0800f9af 	.word	0x0800f9af
 800f97c:	0800f9e5 	.word	0x0800f9e5
 800f980:	0800f9e5 	.word	0x0800f9e5
 800f984:	0800f9e5 	.word	0x0800f9e5
 800f988:	0800f9c1 	.word	0x0800f9c1
 800f98c:	0800f9e5 	.word	0x0800f9e5
 800f990:	0800f9e5 	.word	0x0800f9e5
 800f994:	0800f9e5 	.word	0x0800f9e5
 800f998:	0800f9d3 	.word	0x0800f9d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	68da      	ldr	r2, [r3, #12]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f042 0202 	orr.w	r2, r2, #2
 800f9aa:	60da      	str	r2, [r3, #12]
      break;
 800f9ac:	e01b      	b.n	800f9e6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68da      	ldr	r2, [r3, #12]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f042 0204 	orr.w	r2, r2, #4
 800f9bc:	60da      	str	r2, [r3, #12]
      break;
 800f9be:	e012      	b.n	800f9e6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	68da      	ldr	r2, [r3, #12]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f042 0208 	orr.w	r2, r2, #8
 800f9ce:	60da      	str	r2, [r3, #12]
      break;
 800f9d0:	e009      	b.n	800f9e6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68da      	ldr	r2, [r3, #12]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f042 0210 	orr.w	r2, r2, #16
 800f9e0:	60da      	str	r2, [r3, #12]
      break;
 800f9e2:	e000      	b.n	800f9e6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800f9e4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	6839      	ldr	r1, [r7, #0]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f001 f848 	bl	8010a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a15      	ldr	r2, [pc, #84]	; (800fa50 <HAL_TIM_OC_Start_IT+0x100>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d004      	beq.n	800fa08 <HAL_TIM_OC_Start_IT+0xb8>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	4a14      	ldr	r2, [pc, #80]	; (800fa54 <HAL_TIM_OC_Start_IT+0x104>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d101      	bne.n	800fa0c <HAL_TIM_OC_Start_IT+0xbc>
 800fa08:	2301      	movs	r3, #1
 800fa0a:	e000      	b.n	800fa0e <HAL_TIM_OC_Start_IT+0xbe>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d007      	beq.n	800fa22 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	f003 0307 	and.w	r3, r3, #7
 800fa2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2b06      	cmp	r3, #6
 800fa32:	d007      	beq.n	800fa44 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f042 0201 	orr.w	r2, r2, #1
 800fa42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3710      	adds	r7, #16
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	40010000 	.word	0x40010000
 800fa54:	40010400 	.word	0x40010400

0800fa58 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	2b0c      	cmp	r3, #12
 800fa66:	d841      	bhi.n	800faec <HAL_TIM_OC_Stop_IT+0x94>
 800fa68:	a201      	add	r2, pc, #4	; (adr r2, 800fa70 <HAL_TIM_OC_Stop_IT+0x18>)
 800fa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6e:	bf00      	nop
 800fa70:	0800faa5 	.word	0x0800faa5
 800fa74:	0800faed 	.word	0x0800faed
 800fa78:	0800faed 	.word	0x0800faed
 800fa7c:	0800faed 	.word	0x0800faed
 800fa80:	0800fab7 	.word	0x0800fab7
 800fa84:	0800faed 	.word	0x0800faed
 800fa88:	0800faed 	.word	0x0800faed
 800fa8c:	0800faed 	.word	0x0800faed
 800fa90:	0800fac9 	.word	0x0800fac9
 800fa94:	0800faed 	.word	0x0800faed
 800fa98:	0800faed 	.word	0x0800faed
 800fa9c:	0800faed 	.word	0x0800faed
 800faa0:	0800fadb 	.word	0x0800fadb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	68da      	ldr	r2, [r3, #12]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f022 0202 	bic.w	r2, r2, #2
 800fab2:	60da      	str	r2, [r3, #12]
      break;
 800fab4:	e01b      	b.n	800faee <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	68da      	ldr	r2, [r3, #12]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f022 0204 	bic.w	r2, r2, #4
 800fac4:	60da      	str	r2, [r3, #12]
      break;
 800fac6:	e012      	b.n	800faee <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	68da      	ldr	r2, [r3, #12]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f022 0208 	bic.w	r2, r2, #8
 800fad6:	60da      	str	r2, [r3, #12]
      break;
 800fad8:	e009      	b.n	800faee <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68da      	ldr	r2, [r3, #12]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f022 0210 	bic.w	r2, r2, #16
 800fae8:	60da      	str	r2, [r3, #12]
      break;
 800faea:	e000      	b.n	800faee <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800faec:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2200      	movs	r2, #0
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f000 ffc4 	bl	8010a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4a20      	ldr	r2, [pc, #128]	; (800fb84 <HAL_TIM_OC_Stop_IT+0x12c>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d004      	beq.n	800fb10 <HAL_TIM_OC_Stop_IT+0xb8>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4a1f      	ldr	r2, [pc, #124]	; (800fb88 <HAL_TIM_OC_Stop_IT+0x130>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d101      	bne.n	800fb14 <HAL_TIM_OC_Stop_IT+0xbc>
 800fb10:	2301      	movs	r3, #1
 800fb12:	e000      	b.n	800fb16 <HAL_TIM_OC_Stop_IT+0xbe>
 800fb14:	2300      	movs	r3, #0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d017      	beq.n	800fb4a <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	6a1a      	ldr	r2, [r3, #32]
 800fb20:	f241 1311 	movw	r3, #4369	; 0x1111
 800fb24:	4013      	ands	r3, r2
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d10f      	bne.n	800fb4a <HAL_TIM_OC_Stop_IT+0xf2>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	6a1a      	ldr	r2, [r3, #32]
 800fb30:	f240 4344 	movw	r3, #1092	; 0x444
 800fb34:	4013      	ands	r3, r2
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d107      	bne.n	800fb4a <HAL_TIM_OC_Stop_IT+0xf2>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fb48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6a1a      	ldr	r2, [r3, #32]
 800fb50:	f241 1311 	movw	r3, #4369	; 0x1111
 800fb54:	4013      	ands	r3, r2
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10f      	bne.n	800fb7a <HAL_TIM_OC_Stop_IT+0x122>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	6a1a      	ldr	r2, [r3, #32]
 800fb60:	f240 4344 	movw	r3, #1092	; 0x444
 800fb64:	4013      	ands	r3, r2
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d107      	bne.n	800fb7a <HAL_TIM_OC_Stop_IT+0x122>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f022 0201 	bic.w	r2, r2, #1
 800fb78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	40010000 	.word	0x40010000
 800fb88:	40010400 	.word	0x40010400

0800fb8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d101      	bne.n	800fb9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e01d      	b.n	800fbda <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d106      	bne.n	800fbb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f815 	bl	800fbe2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2202      	movs	r2, #2
 800fbbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	3304      	adds	r3, #4
 800fbc8:	4619      	mov	r1, r3
 800fbca:	4610      	mov	r0, r2
 800fbcc:	f000 fc70 	bl	80104b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800fbe2:	b480      	push	{r7}
 800fbe4:	b083      	sub	sp, #12
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800fbea:	bf00      	nop
 800fbec:	370c      	adds	r7, #12
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr
	...

0800fbf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2201      	movs	r2, #1
 800fc08:	6839      	ldr	r1, [r7, #0]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f000 ff3a 	bl	8010a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a15      	ldr	r2, [pc, #84]	; (800fc6c <HAL_TIM_PWM_Start+0x74>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d004      	beq.n	800fc24 <HAL_TIM_PWM_Start+0x2c>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a14      	ldr	r2, [pc, #80]	; (800fc70 <HAL_TIM_PWM_Start+0x78>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d101      	bne.n	800fc28 <HAL_TIM_PWM_Start+0x30>
 800fc24:	2301      	movs	r3, #1
 800fc26:	e000      	b.n	800fc2a <HAL_TIM_PWM_Start+0x32>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d007      	beq.n	800fc3e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fc3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	f003 0307 	and.w	r3, r3, #7
 800fc48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2b06      	cmp	r3, #6
 800fc4e:	d007      	beq.n	800fc60 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f042 0201 	orr.w	r2, r2, #1
 800fc5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fc60:	2300      	movs	r3, #0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	40010000 	.word	0x40010000
 800fc70:	40010400 	.word	0x40010400

0800fc74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d101      	bne.n	800fc88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800fc84:	2301      	movs	r3, #1
 800fc86:	e083      	b.n	800fd90 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d106      	bne.n	800fca2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7fc fd75 	bl	800c78c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2202      	movs	r2, #2
 800fca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	6812      	ldr	r2, [r2, #0]
 800fcb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcb8:	f023 0307 	bic.w	r3, r3, #7
 800fcbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	4610      	mov	r0, r2
 800fcca:	f000 fbf1 	bl	80104b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	689b      	ldr	r3, [r3, #8]
 800fcd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	699b      	ldr	r3, [r3, #24]
 800fcdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6a1b      	ldr	r3, [r3, #32]
 800fce4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	697a      	ldr	r2, [r7, #20]
 800fcec:	4313      	orrs	r3, r2
 800fcee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcf6:	f023 0303 	bic.w	r3, r3, #3
 800fcfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	689a      	ldr	r2, [r3, #8]
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	699b      	ldr	r3, [r3, #24]
 800fd04:	021b      	lsls	r3, r3, #8
 800fd06:	4313      	orrs	r3, r2
 800fd08:	693a      	ldr	r2, [r7, #16]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800fd14:	f023 030c 	bic.w	r3, r3, #12
 800fd18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	68da      	ldr	r2, [r3, #12]
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	69db      	ldr	r3, [r3, #28]
 800fd2e:	021b      	lsls	r3, r3, #8
 800fd30:	4313      	orrs	r3, r2
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	4313      	orrs	r3, r2
 800fd36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	691b      	ldr	r3, [r3, #16]
 800fd3c:	011a      	lsls	r2, r3, #4
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	6a1b      	ldr	r3, [r3, #32]
 800fd42:	031b      	lsls	r3, r3, #12
 800fd44:	4313      	orrs	r3, r2
 800fd46:	693a      	ldr	r2, [r7, #16]
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800fd52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800fd5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	685a      	ldr	r2, [r3, #4]
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	695b      	ldr	r3, [r3, #20]
 800fd64:	011b      	lsls	r3, r3, #4
 800fd66:	4313      	orrs	r3, r2
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	697a      	ldr	r2, [r7, #20]
 800fd74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	693a      	ldr	r2, [r7, #16]
 800fd7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd8e:	2300      	movs	r3, #0
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3718      	adds	r7, #24
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d002      	beq.n	800fdae <HAL_TIM_Encoder_Start+0x16>
 800fda8:	2b04      	cmp	r3, #4
 800fdaa:	d008      	beq.n	800fdbe <HAL_TIM_Encoder_Start+0x26>
 800fdac:	e00f      	b.n	800fdce <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f000 fe64 	bl	8010a84 <TIM_CCxChannelCmd>
      break;
 800fdbc:	e016      	b.n	800fdec <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	2104      	movs	r1, #4
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f000 fe5c 	bl	8010a84 <TIM_CCxChannelCmd>
      break;
 800fdcc:	e00e      	b.n	800fdec <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f000 fe54 	bl	8010a84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2201      	movs	r2, #1
 800fde2:	2104      	movs	r1, #4
 800fde4:	4618      	mov	r0, r3
 800fde6:	f000 fe4d 	bl	8010a84 <TIM_CCxChannelCmd>
      break;
 800fdea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f042 0201 	orr.w	r2, r2, #1
 800fdfa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b082      	sub	sp, #8
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d002      	beq.n	800fe1c <HAL_TIM_Encoder_Stop+0x16>
 800fe16:	2b04      	cmp	r3, #4
 800fe18:	d008      	beq.n	800fe2c <HAL_TIM_Encoder_Stop+0x26>
 800fe1a:	e00f      	b.n	800fe3c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2200      	movs	r2, #0
 800fe22:	2100      	movs	r1, #0
 800fe24:	4618      	mov	r0, r3
 800fe26:	f000 fe2d 	bl	8010a84 <TIM_CCxChannelCmd>
      break;
 800fe2a:	e016      	b.n	800fe5a <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2200      	movs	r2, #0
 800fe32:	2104      	movs	r1, #4
 800fe34:	4618      	mov	r0, r3
 800fe36:	f000 fe25 	bl	8010a84 <TIM_CCxChannelCmd>
      break;
 800fe3a:	e00e      	b.n	800fe5a <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2200      	movs	r2, #0
 800fe42:	2100      	movs	r1, #0
 800fe44:	4618      	mov	r0, r3
 800fe46:	f000 fe1d 	bl	8010a84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2104      	movs	r1, #4
 800fe52:	4618      	mov	r0, r3
 800fe54:	f000 fe16 	bl	8010a84 <TIM_CCxChannelCmd>
      break;
 800fe58:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	6a1a      	ldr	r2, [r3, #32]
 800fe60:	f241 1311 	movw	r3, #4369	; 0x1111
 800fe64:	4013      	ands	r3, r2
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10f      	bne.n	800fe8a <HAL_TIM_Encoder_Stop+0x84>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	6a1a      	ldr	r2, [r3, #32]
 800fe70:	f240 4344 	movw	r3, #1092	; 0x444
 800fe74:	4013      	ands	r3, r2
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d107      	bne.n	800fe8a <HAL_TIM_Encoder_Stop+0x84>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f022 0201 	bic.w	r2, r2, #1
 800fe88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	691b      	ldr	r3, [r3, #16]
 800fea2:	f003 0302 	and.w	r3, r3, #2
 800fea6:	2b02      	cmp	r3, #2
 800fea8:	d122      	bne.n	800fef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68db      	ldr	r3, [r3, #12]
 800feb0:	f003 0302 	and.w	r3, r3, #2
 800feb4:	2b02      	cmp	r3, #2
 800feb6:	d11b      	bne.n	800fef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f06f 0202 	mvn.w	r2, #2
 800fec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2201      	movs	r2, #1
 800fec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	699b      	ldr	r3, [r3, #24]
 800fece:	f003 0303 	and.w	r3, r3, #3
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d003      	beq.n	800fede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 facb 	bl	8010472 <HAL_TIM_IC_CaptureCallback>
 800fedc:	e005      	b.n	800feea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 fabd 	bl	801045e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 face 	bl	8010486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2200      	movs	r2, #0
 800feee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	691b      	ldr	r3, [r3, #16]
 800fef6:	f003 0304 	and.w	r3, r3, #4
 800fefa:	2b04      	cmp	r3, #4
 800fefc:	d122      	bne.n	800ff44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	f003 0304 	and.w	r3, r3, #4
 800ff08:	2b04      	cmp	r3, #4
 800ff0a:	d11b      	bne.n	800ff44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f06f 0204 	mvn.w	r2, #4
 800ff14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2202      	movs	r2, #2
 800ff1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	699b      	ldr	r3, [r3, #24]
 800ff22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d003      	beq.n	800ff32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 faa1 	bl	8010472 <HAL_TIM_IC_CaptureCallback>
 800ff30:	e005      	b.n	800ff3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 fa93 	bl	801045e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 faa4 	bl	8010486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	691b      	ldr	r3, [r3, #16]
 800ff4a:	f003 0308 	and.w	r3, r3, #8
 800ff4e:	2b08      	cmp	r3, #8
 800ff50:	d122      	bne.n	800ff98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	f003 0308 	and.w	r3, r3, #8
 800ff5c:	2b08      	cmp	r3, #8
 800ff5e:	d11b      	bne.n	800ff98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f06f 0208 	mvn.w	r2, #8
 800ff68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2204      	movs	r2, #4
 800ff6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	69db      	ldr	r3, [r3, #28]
 800ff76:	f003 0303 	and.w	r3, r3, #3
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d003      	beq.n	800ff86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 fa77 	bl	8010472 <HAL_TIM_IC_CaptureCallback>
 800ff84:	e005      	b.n	800ff92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 fa69 	bl	801045e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fa7a 	bl	8010486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2200      	movs	r2, #0
 800ff96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	691b      	ldr	r3, [r3, #16]
 800ff9e:	f003 0310 	and.w	r3, r3, #16
 800ffa2:	2b10      	cmp	r3, #16
 800ffa4:	d122      	bne.n	800ffec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	f003 0310 	and.w	r3, r3, #16
 800ffb0:	2b10      	cmp	r3, #16
 800ffb2:	d11b      	bne.n	800ffec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f06f 0210 	mvn.w	r2, #16
 800ffbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2208      	movs	r2, #8
 800ffc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	69db      	ldr	r3, [r3, #28]
 800ffca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d003      	beq.n	800ffda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 fa4d 	bl	8010472 <HAL_TIM_IC_CaptureCallback>
 800ffd8:	e005      	b.n	800ffe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 fa3f 	bl	801045e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 fa50 	bl	8010486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	691b      	ldr	r3, [r3, #16]
 800fff2:	f003 0301 	and.w	r3, r3, #1
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d10e      	bne.n	8010018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	f003 0301 	and.w	r3, r3, #1
 8010004:	2b01      	cmp	r3, #1
 8010006:	d107      	bne.n	8010018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f06f 0201 	mvn.w	r2, #1
 8010010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7fa f8ea 	bl	800a1ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010022:	2b80      	cmp	r3, #128	; 0x80
 8010024:	d10e      	bne.n	8010044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010030:	2b80      	cmp	r3, #128	; 0x80
 8010032:	d107      	bne.n	8010044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801003c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 fee8 	bl	8010e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	691b      	ldr	r3, [r3, #16]
 801004a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801004e:	2b40      	cmp	r3, #64	; 0x40
 8010050:	d10e      	bne.n	8010070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801005c:	2b40      	cmp	r3, #64	; 0x40
 801005e:	d107      	bne.n	8010070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 fa15 	bl	801049a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	691b      	ldr	r3, [r3, #16]
 8010076:	f003 0320 	and.w	r3, r3, #32
 801007a:	2b20      	cmp	r3, #32
 801007c:	d10e      	bne.n	801009c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	f003 0320 	and.w	r3, r3, #32
 8010088:	2b20      	cmp	r3, #32
 801008a:	d107      	bne.n	801009c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f06f 0220 	mvn.w	r2, #32
 8010094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 feb2 	bl	8010e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801009c:	bf00      	nop
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100b6:	2b01      	cmp	r3, #1
 80100b8:	d101      	bne.n	80100be <HAL_TIM_OC_ConfigChannel+0x1a>
 80100ba:	2302      	movs	r3, #2
 80100bc:	e04e      	b.n	801015c <HAL_TIM_OC_ConfigChannel+0xb8>
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2201      	movs	r2, #1
 80100c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2202      	movs	r2, #2
 80100ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2b0c      	cmp	r3, #12
 80100d2:	d839      	bhi.n	8010148 <HAL_TIM_OC_ConfigChannel+0xa4>
 80100d4:	a201      	add	r2, pc, #4	; (adr r2, 80100dc <HAL_TIM_OC_ConfigChannel+0x38>)
 80100d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100da:	bf00      	nop
 80100dc:	08010111 	.word	0x08010111
 80100e0:	08010149 	.word	0x08010149
 80100e4:	08010149 	.word	0x08010149
 80100e8:	08010149 	.word	0x08010149
 80100ec:	0801011f 	.word	0x0801011f
 80100f0:	08010149 	.word	0x08010149
 80100f4:	08010149 	.word	0x08010149
 80100f8:	08010149 	.word	0x08010149
 80100fc:	0801012d 	.word	0x0801012d
 8010100:	08010149 	.word	0x08010149
 8010104:	08010149 	.word	0x08010149
 8010108:	08010149 	.word	0x08010149
 801010c:	0801013b 	.word	0x0801013b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	68b9      	ldr	r1, [r7, #8]
 8010116:	4618      	mov	r0, r3
 8010118:	f000 fa6a 	bl	80105f0 <TIM_OC1_SetConfig>
      break;
 801011c:	e015      	b.n	801014a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	68b9      	ldr	r1, [r7, #8]
 8010124:	4618      	mov	r0, r3
 8010126:	f000 fad3 	bl	80106d0 <TIM_OC2_SetConfig>
      break;
 801012a:	e00e      	b.n	801014a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	68b9      	ldr	r1, [r7, #8]
 8010132:	4618      	mov	r0, r3
 8010134:	f000 fb42 	bl	80107bc <TIM_OC3_SetConfig>
      break;
 8010138:	e007      	b.n	801014a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68b9      	ldr	r1, [r7, #8]
 8010140:	4618      	mov	r0, r3
 8010142:	f000 fbaf 	bl	80108a4 <TIM_OC4_SetConfig>
      break;
 8010146:	e000      	b.n	801014a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8010148:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2201      	movs	r2, #1
 801014e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801015a:	2300      	movs	r3, #0
}
 801015c:	4618      	mov	r0, r3
 801015e:	3710      	adds	r7, #16
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	60b9      	str	r1, [r7, #8]
 801016e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010176:	2b01      	cmp	r3, #1
 8010178:	d101      	bne.n	801017e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801017a:	2302      	movs	r3, #2
 801017c:	e0b4      	b.n	80102e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2201      	movs	r2, #1
 8010182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2202      	movs	r2, #2
 801018a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2b0c      	cmp	r3, #12
 8010192:	f200 809f 	bhi.w	80102d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8010196:	a201      	add	r2, pc, #4	; (adr r2, 801019c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019c:	080101d1 	.word	0x080101d1
 80101a0:	080102d5 	.word	0x080102d5
 80101a4:	080102d5 	.word	0x080102d5
 80101a8:	080102d5 	.word	0x080102d5
 80101ac:	08010211 	.word	0x08010211
 80101b0:	080102d5 	.word	0x080102d5
 80101b4:	080102d5 	.word	0x080102d5
 80101b8:	080102d5 	.word	0x080102d5
 80101bc:	08010253 	.word	0x08010253
 80101c0:	080102d5 	.word	0x080102d5
 80101c4:	080102d5 	.word	0x080102d5
 80101c8:	080102d5 	.word	0x080102d5
 80101cc:	08010293 	.word	0x08010293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	68b9      	ldr	r1, [r7, #8]
 80101d6:	4618      	mov	r0, r3
 80101d8:	f000 fa0a 	bl	80105f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	699a      	ldr	r2, [r3, #24]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f042 0208 	orr.w	r2, r2, #8
 80101ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	699a      	ldr	r2, [r3, #24]
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f022 0204 	bic.w	r2, r2, #4
 80101fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	6999      	ldr	r1, [r3, #24]
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	691a      	ldr	r2, [r3, #16]
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	430a      	orrs	r2, r1
 801020c:	619a      	str	r2, [r3, #24]
      break;
 801020e:	e062      	b.n	80102d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	68b9      	ldr	r1, [r7, #8]
 8010216:	4618      	mov	r0, r3
 8010218:	f000 fa5a 	bl	80106d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	699a      	ldr	r2, [r3, #24]
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801022a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	699a      	ldr	r2, [r3, #24]
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801023a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	6999      	ldr	r1, [r3, #24]
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	691b      	ldr	r3, [r3, #16]
 8010246:	021a      	lsls	r2, r3, #8
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	430a      	orrs	r2, r1
 801024e:	619a      	str	r2, [r3, #24]
      break;
 8010250:	e041      	b.n	80102d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	68b9      	ldr	r1, [r7, #8]
 8010258:	4618      	mov	r0, r3
 801025a:	f000 faaf 	bl	80107bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	69da      	ldr	r2, [r3, #28]
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f042 0208 	orr.w	r2, r2, #8
 801026c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	69da      	ldr	r2, [r3, #28]
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f022 0204 	bic.w	r2, r2, #4
 801027c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	69d9      	ldr	r1, [r3, #28]
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	691a      	ldr	r2, [r3, #16]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	430a      	orrs	r2, r1
 801028e:	61da      	str	r2, [r3, #28]
      break;
 8010290:	e021      	b.n	80102d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	68b9      	ldr	r1, [r7, #8]
 8010298:	4618      	mov	r0, r3
 801029a:	f000 fb03 	bl	80108a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	69da      	ldr	r2, [r3, #28]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80102ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	69da      	ldr	r2, [r3, #28]
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80102bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	69d9      	ldr	r1, [r3, #28]
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	021a      	lsls	r2, r3, #8
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	430a      	orrs	r2, r1
 80102d0:	61da      	str	r2, [r3, #28]
      break;
 80102d2:	e000      	b.n	80102d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80102d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2201      	movs	r2, #1
 80102da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2200      	movs	r2, #0
 80102e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010300:	2b01      	cmp	r3, #1
 8010302:	d101      	bne.n	8010308 <HAL_TIM_ConfigClockSource+0x18>
 8010304:	2302      	movs	r3, #2
 8010306:	e0a6      	b.n	8010456 <HAL_TIM_ConfigClockSource+0x166>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2201      	movs	r2, #1
 801030c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2202      	movs	r2, #2
 8010314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010326:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801032e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	68fa      	ldr	r2, [r7, #12]
 8010336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b40      	cmp	r3, #64	; 0x40
 801033e:	d067      	beq.n	8010410 <HAL_TIM_ConfigClockSource+0x120>
 8010340:	2b40      	cmp	r3, #64	; 0x40
 8010342:	d80b      	bhi.n	801035c <HAL_TIM_ConfigClockSource+0x6c>
 8010344:	2b10      	cmp	r3, #16
 8010346:	d073      	beq.n	8010430 <HAL_TIM_ConfigClockSource+0x140>
 8010348:	2b10      	cmp	r3, #16
 801034a:	d802      	bhi.n	8010352 <HAL_TIM_ConfigClockSource+0x62>
 801034c:	2b00      	cmp	r3, #0
 801034e:	d06f      	beq.n	8010430 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8010350:	e078      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010352:	2b20      	cmp	r3, #32
 8010354:	d06c      	beq.n	8010430 <HAL_TIM_ConfigClockSource+0x140>
 8010356:	2b30      	cmp	r3, #48	; 0x30
 8010358:	d06a      	beq.n	8010430 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801035a:	e073      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801035c:	2b70      	cmp	r3, #112	; 0x70
 801035e:	d00d      	beq.n	801037c <HAL_TIM_ConfigClockSource+0x8c>
 8010360:	2b70      	cmp	r3, #112	; 0x70
 8010362:	d804      	bhi.n	801036e <HAL_TIM_ConfigClockSource+0x7e>
 8010364:	2b50      	cmp	r3, #80	; 0x50
 8010366:	d033      	beq.n	80103d0 <HAL_TIM_ConfigClockSource+0xe0>
 8010368:	2b60      	cmp	r3, #96	; 0x60
 801036a:	d041      	beq.n	80103f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801036c:	e06a      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801036e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010372:	d066      	beq.n	8010442 <HAL_TIM_ConfigClockSource+0x152>
 8010374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010378:	d017      	beq.n	80103aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 801037a:	e063      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6818      	ldr	r0, [r3, #0]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	6899      	ldr	r1, [r3, #8]
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	685a      	ldr	r2, [r3, #4]
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	f000 fb5a 	bl	8010a44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	689b      	ldr	r3, [r3, #8]
 8010396:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801039e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	609a      	str	r2, [r3, #8]
      break;
 80103a8:	e04c      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6818      	ldr	r0, [r3, #0]
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	6899      	ldr	r1, [r3, #8]
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	685a      	ldr	r2, [r3, #4]
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	68db      	ldr	r3, [r3, #12]
 80103ba:	f000 fb43 	bl	8010a44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	689a      	ldr	r2, [r3, #8]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80103cc:	609a      	str	r2, [r3, #8]
      break;
 80103ce:	e039      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6818      	ldr	r0, [r3, #0]
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	6859      	ldr	r1, [r3, #4]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	461a      	mov	r2, r3
 80103de:	f000 fab7 	bl	8010950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2150      	movs	r1, #80	; 0x50
 80103e8:	4618      	mov	r0, r3
 80103ea:	f000 fb10 	bl	8010a0e <TIM_ITRx_SetConfig>
      break;
 80103ee:	e029      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6818      	ldr	r0, [r3, #0]
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	6859      	ldr	r1, [r3, #4]
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	461a      	mov	r2, r3
 80103fe:	f000 fad6 	bl	80109ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2160      	movs	r1, #96	; 0x60
 8010408:	4618      	mov	r0, r3
 801040a:	f000 fb00 	bl	8010a0e <TIM_ITRx_SetConfig>
      break;
 801040e:	e019      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6818      	ldr	r0, [r3, #0]
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	6859      	ldr	r1, [r3, #4]
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	461a      	mov	r2, r3
 801041e:	f000 fa97 	bl	8010950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2140      	movs	r1, #64	; 0x40
 8010428:	4618      	mov	r0, r3
 801042a:	f000 faf0 	bl	8010a0e <TIM_ITRx_SetConfig>
      break;
 801042e:	e009      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	4619      	mov	r1, r3
 801043a:	4610      	mov	r0, r2
 801043c:	f000 fae7 	bl	8010a0e <TIM_ITRx_SetConfig>
      break;
 8010440:	e000      	b.n	8010444 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8010442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801045e:	b480      	push	{r7}
 8010460:	b083      	sub	sp, #12
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010466:	bf00      	nop
 8010468:	370c      	adds	r7, #12
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr

08010472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010472:	b480      	push	{r7}
 8010474:	b083      	sub	sp, #12
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801047a:	bf00      	nop
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010486:	b480      	push	{r7}
 8010488:	b083      	sub	sp, #12
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801048e:	bf00      	nop
 8010490:	370c      	adds	r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr

0801049a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801049a:	b480      	push	{r7}
 801049c:	b083      	sub	sp, #12
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80104a2:	bf00      	nop
 80104a4:	370c      	adds	r7, #12
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
	...

080104b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b085      	sub	sp, #20
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4a40      	ldr	r2, [pc, #256]	; (80105c4 <TIM_Base_SetConfig+0x114>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d013      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104ce:	d00f      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	4a3d      	ldr	r2, [pc, #244]	; (80105c8 <TIM_Base_SetConfig+0x118>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d00b      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a3c      	ldr	r2, [pc, #240]	; (80105cc <TIM_Base_SetConfig+0x11c>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d007      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a3b      	ldr	r2, [pc, #236]	; (80105d0 <TIM_Base_SetConfig+0x120>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d003      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a3a      	ldr	r2, [pc, #232]	; (80105d4 <TIM_Base_SetConfig+0x124>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d108      	bne.n	8010502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	4313      	orrs	r3, r2
 8010500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4a2f      	ldr	r2, [pc, #188]	; (80105c4 <TIM_Base_SetConfig+0x114>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d02b      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010510:	d027      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a2c      	ldr	r2, [pc, #176]	; (80105c8 <TIM_Base_SetConfig+0x118>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d023      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4a2b      	ldr	r2, [pc, #172]	; (80105cc <TIM_Base_SetConfig+0x11c>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d01f      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4a2a      	ldr	r2, [pc, #168]	; (80105d0 <TIM_Base_SetConfig+0x120>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d01b      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4a29      	ldr	r2, [pc, #164]	; (80105d4 <TIM_Base_SetConfig+0x124>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d017      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4a28      	ldr	r2, [pc, #160]	; (80105d8 <TIM_Base_SetConfig+0x128>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d013      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4a27      	ldr	r2, [pc, #156]	; (80105dc <TIM_Base_SetConfig+0x12c>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d00f      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	4a26      	ldr	r2, [pc, #152]	; (80105e0 <TIM_Base_SetConfig+0x130>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d00b      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4a25      	ldr	r2, [pc, #148]	; (80105e4 <TIM_Base_SetConfig+0x134>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d007      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4a24      	ldr	r2, [pc, #144]	; (80105e8 <TIM_Base_SetConfig+0x138>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d003      	beq.n	8010562 <TIM_Base_SetConfig+0xb2>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4a23      	ldr	r2, [pc, #140]	; (80105ec <TIM_Base_SetConfig+0x13c>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d108      	bne.n	8010574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	4313      	orrs	r3, r2
 8010572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	695b      	ldr	r3, [r3, #20]
 801057e:	4313      	orrs	r3, r2
 8010580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	689a      	ldr	r2, [r3, #8]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	4a0a      	ldr	r2, [pc, #40]	; (80105c4 <TIM_Base_SetConfig+0x114>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d003      	beq.n	80105a8 <TIM_Base_SetConfig+0xf8>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4a0c      	ldr	r2, [pc, #48]	; (80105d4 <TIM_Base_SetConfig+0x124>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d103      	bne.n	80105b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	691a      	ldr	r2, [r3, #16]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2201      	movs	r2, #1
 80105b4:	615a      	str	r2, [r3, #20]
}
 80105b6:	bf00      	nop
 80105b8:	3714      	adds	r7, #20
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop
 80105c4:	40010000 	.word	0x40010000
 80105c8:	40000400 	.word	0x40000400
 80105cc:	40000800 	.word	0x40000800
 80105d0:	40000c00 	.word	0x40000c00
 80105d4:	40010400 	.word	0x40010400
 80105d8:	40014000 	.word	0x40014000
 80105dc:	40014400 	.word	0x40014400
 80105e0:	40014800 	.word	0x40014800
 80105e4:	40001800 	.word	0x40001800
 80105e8:	40001c00 	.word	0x40001c00
 80105ec:	40002000 	.word	0x40002000

080105f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b087      	sub	sp, #28
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6a1b      	ldr	r3, [r3, #32]
 80105fe:	f023 0201 	bic.w	r2, r3, #1
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a1b      	ldr	r3, [r3, #32]
 801060a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	699b      	ldr	r3, [r3, #24]
 8010616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801061e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f023 0303 	bic.w	r3, r3, #3
 8010626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	4313      	orrs	r3, r2
 8010630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	f023 0302 	bic.w	r3, r3, #2
 8010638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	697a      	ldr	r2, [r7, #20]
 8010640:	4313      	orrs	r3, r2
 8010642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4a20      	ldr	r2, [pc, #128]	; (80106c8 <TIM_OC1_SetConfig+0xd8>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d003      	beq.n	8010654 <TIM_OC1_SetConfig+0x64>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	4a1f      	ldr	r2, [pc, #124]	; (80106cc <TIM_OC1_SetConfig+0xdc>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d10c      	bne.n	801066e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	f023 0308 	bic.w	r3, r3, #8
 801065a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	697a      	ldr	r2, [r7, #20]
 8010662:	4313      	orrs	r3, r2
 8010664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	f023 0304 	bic.w	r3, r3, #4
 801066c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4a15      	ldr	r2, [pc, #84]	; (80106c8 <TIM_OC1_SetConfig+0xd8>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d003      	beq.n	801067e <TIM_OC1_SetConfig+0x8e>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4a14      	ldr	r2, [pc, #80]	; (80106cc <TIM_OC1_SetConfig+0xdc>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d111      	bne.n	80106a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801068c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	695b      	ldr	r3, [r3, #20]
 8010692:	693a      	ldr	r2, [r7, #16]
 8010694:	4313      	orrs	r3, r2
 8010696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	699b      	ldr	r3, [r3, #24]
 801069c:	693a      	ldr	r2, [r7, #16]
 801069e:	4313      	orrs	r3, r2
 80106a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	693a      	ldr	r2, [r7, #16]
 80106a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	685a      	ldr	r2, [r3, #4]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	621a      	str	r2, [r3, #32]
}
 80106bc:	bf00      	nop
 80106be:	371c      	adds	r7, #28
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr
 80106c8:	40010000 	.word	0x40010000
 80106cc:	40010400 	.word	0x40010400

080106d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b087      	sub	sp, #28
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6a1b      	ldr	r3, [r3, #32]
 80106de:	f023 0210 	bic.w	r2, r3, #16
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6a1b      	ldr	r3, [r3, #32]
 80106ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	699b      	ldr	r3, [r3, #24]
 80106f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	021b      	lsls	r3, r3, #8
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	4313      	orrs	r3, r2
 8010712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	f023 0320 	bic.w	r3, r3, #32
 801071a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	689b      	ldr	r3, [r3, #8]
 8010720:	011b      	lsls	r3, r3, #4
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	4313      	orrs	r3, r2
 8010726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	4a22      	ldr	r2, [pc, #136]	; (80107b4 <TIM_OC2_SetConfig+0xe4>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d003      	beq.n	8010738 <TIM_OC2_SetConfig+0x68>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	4a21      	ldr	r2, [pc, #132]	; (80107b8 <TIM_OC2_SetConfig+0xe8>)
 8010734:	4293      	cmp	r3, r2
 8010736:	d10d      	bne.n	8010754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801073e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	011b      	lsls	r3, r3, #4
 8010746:	697a      	ldr	r2, [r7, #20]
 8010748:	4313      	orrs	r3, r2
 801074a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	4a17      	ldr	r2, [pc, #92]	; (80107b4 <TIM_OC2_SetConfig+0xe4>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d003      	beq.n	8010764 <TIM_OC2_SetConfig+0x94>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4a16      	ldr	r2, [pc, #88]	; (80107b8 <TIM_OC2_SetConfig+0xe8>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d113      	bne.n	801078c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801076a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	695b      	ldr	r3, [r3, #20]
 8010778:	009b      	lsls	r3, r3, #2
 801077a:	693a      	ldr	r2, [r7, #16]
 801077c:	4313      	orrs	r3, r2
 801077e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	699b      	ldr	r3, [r3, #24]
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	693a      	ldr	r2, [r7, #16]
 8010788:	4313      	orrs	r3, r2
 801078a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	693a      	ldr	r2, [r7, #16]
 8010790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	621a      	str	r2, [r3, #32]
}
 80107a6:	bf00      	nop
 80107a8:	371c      	adds	r7, #28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	40010000 	.word	0x40010000
 80107b8:	40010400 	.word	0x40010400

080107bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80107bc:	b480      	push	{r7}
 80107be:	b087      	sub	sp, #28
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a1b      	ldr	r3, [r3, #32]
 80107ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6a1b      	ldr	r3, [r3, #32]
 80107d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f023 0303 	bic.w	r3, r3, #3
 80107f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	68fa      	ldr	r2, [r7, #12]
 80107fa:	4313      	orrs	r3, r2
 80107fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	021b      	lsls	r3, r3, #8
 801080c:	697a      	ldr	r2, [r7, #20]
 801080e:	4313      	orrs	r3, r2
 8010810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4a21      	ldr	r2, [pc, #132]	; (801089c <TIM_OC3_SetConfig+0xe0>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d003      	beq.n	8010822 <TIM_OC3_SetConfig+0x66>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4a20      	ldr	r2, [pc, #128]	; (80108a0 <TIM_OC3_SetConfig+0xe4>)
 801081e:	4293      	cmp	r3, r2
 8010820:	d10d      	bne.n	801083e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	021b      	lsls	r3, r3, #8
 8010830:	697a      	ldr	r2, [r7, #20]
 8010832:	4313      	orrs	r3, r2
 8010834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801083c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4a16      	ldr	r2, [pc, #88]	; (801089c <TIM_OC3_SetConfig+0xe0>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d003      	beq.n	801084e <TIM_OC3_SetConfig+0x92>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4a15      	ldr	r2, [pc, #84]	; (80108a0 <TIM_OC3_SetConfig+0xe4>)
 801084a:	4293      	cmp	r3, r2
 801084c:	d113      	bne.n	8010876 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801085c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	695b      	ldr	r3, [r3, #20]
 8010862:	011b      	lsls	r3, r3, #4
 8010864:	693a      	ldr	r2, [r7, #16]
 8010866:	4313      	orrs	r3, r2
 8010868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	699b      	ldr	r3, [r3, #24]
 801086e:	011b      	lsls	r3, r3, #4
 8010870:	693a      	ldr	r2, [r7, #16]
 8010872:	4313      	orrs	r3, r2
 8010874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	693a      	ldr	r2, [r7, #16]
 801087a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	685a      	ldr	r2, [r3, #4]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	697a      	ldr	r2, [r7, #20]
 801088e:	621a      	str	r2, [r3, #32]
}
 8010890:	bf00      	nop
 8010892:	371c      	adds	r7, #28
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr
 801089c:	40010000 	.word	0x40010000
 80108a0:	40010400 	.word	0x40010400

080108a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b087      	sub	sp, #28
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6a1b      	ldr	r3, [r3, #32]
 80108b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a1b      	ldr	r3, [r3, #32]
 80108be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	69db      	ldr	r3, [r3, #28]
 80108ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80108da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	021b      	lsls	r3, r3, #8
 80108e2:	68fa      	ldr	r2, [r7, #12]
 80108e4:	4313      	orrs	r3, r2
 80108e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80108ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	031b      	lsls	r3, r3, #12
 80108f6:	693a      	ldr	r2, [r7, #16]
 80108f8:	4313      	orrs	r3, r2
 80108fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4a12      	ldr	r2, [pc, #72]	; (8010948 <TIM_OC4_SetConfig+0xa4>)
 8010900:	4293      	cmp	r3, r2
 8010902:	d003      	beq.n	801090c <TIM_OC4_SetConfig+0x68>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4a11      	ldr	r2, [pc, #68]	; (801094c <TIM_OC4_SetConfig+0xa8>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d109      	bne.n	8010920 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	695b      	ldr	r3, [r3, #20]
 8010918:	019b      	lsls	r3, r3, #6
 801091a:	697a      	ldr	r2, [r7, #20]
 801091c:	4313      	orrs	r3, r2
 801091e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	685a      	ldr	r2, [r3, #4]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	693a      	ldr	r2, [r7, #16]
 8010938:	621a      	str	r2, [r3, #32]
}
 801093a:	bf00      	nop
 801093c:	371c      	adds	r7, #28
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	40010000 	.word	0x40010000
 801094c:	40010400 	.word	0x40010400

08010950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010950:	b480      	push	{r7}
 8010952:	b087      	sub	sp, #28
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6a1b      	ldr	r3, [r3, #32]
 8010960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6a1b      	ldr	r3, [r3, #32]
 8010966:	f023 0201 	bic.w	r2, r3, #1
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	699b      	ldr	r3, [r3, #24]
 8010972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801097a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	011b      	lsls	r3, r3, #4
 8010980:	693a      	ldr	r2, [r7, #16]
 8010982:	4313      	orrs	r3, r2
 8010984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	f023 030a 	bic.w	r3, r3, #10
 801098c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801098e:	697a      	ldr	r2, [r7, #20]
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	4313      	orrs	r3, r2
 8010994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	693a      	ldr	r2, [r7, #16]
 801099a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	697a      	ldr	r2, [r7, #20]
 80109a0:	621a      	str	r2, [r3, #32]
}
 80109a2:	bf00      	nop
 80109a4:	371c      	adds	r7, #28
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80109ae:	b480      	push	{r7}
 80109b0:	b087      	sub	sp, #28
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	60f8      	str	r0, [r7, #12]
 80109b6:	60b9      	str	r1, [r7, #8]
 80109b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6a1b      	ldr	r3, [r3, #32]
 80109be:	f023 0210 	bic.w	r2, r3, #16
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	699b      	ldr	r3, [r3, #24]
 80109ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6a1b      	ldr	r3, [r3, #32]
 80109d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80109d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	031b      	lsls	r3, r3, #12
 80109de:	697a      	ldr	r2, [r7, #20]
 80109e0:	4313      	orrs	r3, r2
 80109e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80109ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	011b      	lsls	r3, r3, #4
 80109f0:	693a      	ldr	r2, [r7, #16]
 80109f2:	4313      	orrs	r3, r2
 80109f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	697a      	ldr	r2, [r7, #20]
 80109fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	621a      	str	r2, [r3, #32]
}
 8010a02:	bf00      	nop
 8010a04:	371c      	adds	r7, #28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010a0e:	b480      	push	{r7}
 8010a10:	b085      	sub	sp, #20
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a26:	683a      	ldr	r2, [r7, #0]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	f043 0307 	orr.w	r3, r3, #7
 8010a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	609a      	str	r2, [r3, #8]
}
 8010a38:	bf00      	nop
 8010a3a:	3714      	adds	r7, #20
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b087      	sub	sp, #28
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	60f8      	str	r0, [r7, #12]
 8010a4c:	60b9      	str	r1, [r7, #8]
 8010a4e:	607a      	str	r2, [r7, #4]
 8010a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	021a      	lsls	r2, r3, #8
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	431a      	orrs	r2, r3
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	697a      	ldr	r2, [r7, #20]
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	697a      	ldr	r2, [r7, #20]
 8010a76:	609a      	str	r2, [r3, #8]
}
 8010a78:	bf00      	nop
 8010a7a:	371c      	adds	r7, #28
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b087      	sub	sp, #28
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	f003 031f 	and.w	r3, r3, #31
 8010a96:	2201      	movs	r2, #1
 8010a98:	fa02 f303 	lsl.w	r3, r2, r3
 8010a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6a1a      	ldr	r2, [r3, #32]
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	43db      	mvns	r3, r3
 8010aa6:	401a      	ands	r2, r3
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	6a1a      	ldr	r2, [r3, #32]
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	f003 031f 	and.w	r3, r3, #31
 8010ab6:	6879      	ldr	r1, [r7, #4]
 8010ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8010abc:	431a      	orrs	r2, r3
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	621a      	str	r2, [r3, #32]
}
 8010ac2:	bf00      	nop
 8010ac4:	371c      	adds	r7, #28
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr

08010ace <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b084      	sub	sp, #16
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
 8010ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	2b04      	cmp	r3, #4
 8010adc:	d00d      	beq.n	8010afa <HAL_TIMEx_OCN_Start_IT+0x2c>
 8010ade:	2b08      	cmp	r3, #8
 8010ae0:	d014      	beq.n	8010b0c <HAL_TIMEx_OCN_Start_IT+0x3e>
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d000      	beq.n	8010ae8 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8010ae6:	e01a      	b.n	8010b1e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68da      	ldr	r2, [r3, #12]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f042 0202 	orr.w	r2, r2, #2
 8010af6:	60da      	str	r2, [r3, #12]
      break;
 8010af8:	e011      	b.n	8010b1e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	68da      	ldr	r2, [r3, #12]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f042 0204 	orr.w	r2, r2, #4
 8010b08:	60da      	str	r2, [r3, #12]
      break;
 8010b0a:	e008      	b.n	8010b1e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	68da      	ldr	r2, [r3, #12]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f042 0208 	orr.w	r2, r2, #8
 8010b1a:	60da      	str	r2, [r3, #12]
      break;
 8010b1c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	68da      	ldr	r2, [r3, #12]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010b2c:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2204      	movs	r2, #4
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	4618      	mov	r0, r3
 8010b38:	f000 f976 	bl	8010e28 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	f003 0307 	and.w	r3, r3, #7
 8010b56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2b06      	cmp	r3, #6
 8010b5c:	d007      	beq.n	8010b6e <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f042 0201 	orr.w	r2, r2, #1
 8010b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010b6e:	2300      	movs	r3, #0
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	2b04      	cmp	r3, #4
 8010b86:	d00d      	beq.n	8010ba4 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8010b88:	2b08      	cmp	r3, #8
 8010b8a:	d014      	beq.n	8010bb6 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d000      	beq.n	8010b92 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8010b90:	e01a      	b.n	8010bc8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	68da      	ldr	r2, [r3, #12]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f022 0202 	bic.w	r2, r2, #2
 8010ba0:	60da      	str	r2, [r3, #12]
      break;
 8010ba2:	e011      	b.n	8010bc8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	68da      	ldr	r2, [r3, #12]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f022 0204 	bic.w	r2, r2, #4
 8010bb2:	60da      	str	r2, [r3, #12]
      break;
 8010bb4:	e008      	b.n	8010bc8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	68da      	ldr	r2, [r3, #12]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f022 0208 	bic.w	r2, r2, #8
 8010bc4:	60da      	str	r2, [r3, #12]
      break;
 8010bc6:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	6839      	ldr	r1, [r7, #0]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f000 f929 	bl	8010e28 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	6a1b      	ldr	r3, [r3, #32]
 8010bdc:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8010bde:	68fa      	ldr	r2, [r7, #12]
 8010be0:	f240 4344 	movw	r3, #1092	; 0x444
 8010be4:	4013      	ands	r3, r2
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d107      	bne.n	8010bfa <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	68da      	ldr	r2, [r3, #12]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010bf8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	6a1a      	ldr	r2, [r3, #32]
 8010c00:	f241 1311 	movw	r3, #4369	; 0x1111
 8010c04:	4013      	ands	r3, r2
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10f      	bne.n	8010c2a <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6a1a      	ldr	r2, [r3, #32]
 8010c10:	f240 4344 	movw	r3, #1092	; 0x444
 8010c14:	4013      	ands	r3, r2
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d107      	bne.n	8010c2a <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010c28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	6a1a      	ldr	r2, [r3, #32]
 8010c30:	f241 1311 	movw	r3, #4369	; 0x1111
 8010c34:	4013      	ands	r3, r2
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d10f      	bne.n	8010c5a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	6a1a      	ldr	r2, [r3, #32]
 8010c40:	f240 4344 	movw	r3, #1092	; 0x444
 8010c44:	4013      	ands	r3, r2
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d107      	bne.n	8010c5a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f022 0201 	bic.w	r2, r2, #1
 8010c58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010c5a:	2300      	movs	r3, #0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d101      	bne.n	8010c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010c78:	2302      	movs	r3, #2
 8010c7a:	e05a      	b.n	8010d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2202      	movs	r2, #2
 8010c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	689b      	ldr	r3, [r3, #8]
 8010c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	68fa      	ldr	r2, [r7, #12]
 8010caa:	4313      	orrs	r3, r2
 8010cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	4a21      	ldr	r2, [pc, #132]	; (8010d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d022      	beq.n	8010d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010cc8:	d01d      	beq.n	8010d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4a1d      	ldr	r2, [pc, #116]	; (8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d018      	beq.n	8010d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4a1b      	ldr	r2, [pc, #108]	; (8010d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d013      	beq.n	8010d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	4a1a      	ldr	r2, [pc, #104]	; (8010d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d00e      	beq.n	8010d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a18      	ldr	r2, [pc, #96]	; (8010d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d009      	beq.n	8010d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a17      	ldr	r2, [pc, #92]	; (8010d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d004      	beq.n	8010d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a15      	ldr	r2, [pc, #84]	; (8010d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d10c      	bne.n	8010d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	68ba      	ldr	r2, [r7, #8]
 8010d14:	4313      	orrs	r3, r2
 8010d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	68ba      	ldr	r2, [r7, #8]
 8010d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2201      	movs	r2, #1
 8010d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010d30:	2300      	movs	r3, #0
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3714      	adds	r7, #20
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	40010000 	.word	0x40010000
 8010d44:	40000400 	.word	0x40000400
 8010d48:	40000800 	.word	0x40000800
 8010d4c:	40000c00 	.word	0x40000c00
 8010d50:	40010400 	.word	0x40010400
 8010d54:	40014000 	.word	0x40014000
 8010d58:	40001800 	.word	0x40001800

08010d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	b085      	sub	sp, #20
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010d66:	2300      	movs	r3, #0
 8010d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d101      	bne.n	8010d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010d74:	2302      	movs	r3, #2
 8010d76:	e03d      	b.n	8010df4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	689b      	ldr	r3, [r3, #8]
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	4313      	orrs	r3, r2
 8010da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4313      	orrs	r3, r2
 8010db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	691b      	ldr	r3, [r3, #16]
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	695b      	ldr	r3, [r3, #20]
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	69db      	ldr	r3, [r3, #28]
 8010dde:	4313      	orrs	r3, r2
 8010de0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2200      	movs	r2, #0
 8010dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3714      	adds	r7, #20
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr

08010e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b087      	sub	sp, #28
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	f003 031f 	and.w	r3, r3, #31
 8010e3a:	2204      	movs	r2, #4
 8010e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	6a1a      	ldr	r2, [r3, #32]
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	43db      	mvns	r3, r3
 8010e4a:	401a      	ands	r2, r3
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	6a1a      	ldr	r2, [r3, #32]
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	f003 031f 	and.w	r3, r3, #31
 8010e5a:	6879      	ldr	r1, [r7, #4]
 8010e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8010e60:	431a      	orrs	r2, r3
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	621a      	str	r2, [r3, #32]
}
 8010e66:	bf00      	nop
 8010e68:	371c      	adds	r7, #28
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr

08010e72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b082      	sub	sp, #8
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d101      	bne.n	8010e84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e80:	2301      	movs	r3, #1
 8010e82:	e03f      	b.n	8010f04 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d106      	bne.n	8010e9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7fb fda9 	bl	800c9f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2224      	movs	r2, #36	; 0x24
 8010ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	68da      	ldr	r2, [r3, #12]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010eb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 f90c 	bl	80110d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	691a      	ldr	r2, [r3, #16]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010eca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	695a      	ldr	r2, [r3, #20]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010eda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	68da      	ldr	r2, [r3, #12]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010eea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2220      	movs	r2, #32
 8010ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2220      	movs	r2, #32
 8010efe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010f02:	2300      	movs	r3, #0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b088      	sub	sp, #32
 8010f10:	af02      	add	r7, sp, #8
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	60b9      	str	r1, [r7, #8]
 8010f16:	603b      	str	r3, [r7, #0]
 8010f18:	4613      	mov	r3, r2
 8010f1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b20      	cmp	r3, #32
 8010f2a:	f040 8083 	bne.w	8011034 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d002      	beq.n	8010f3a <HAL_UART_Transmit+0x2e>
 8010f34:	88fb      	ldrh	r3, [r7, #6]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d101      	bne.n	8010f3e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	e07b      	b.n	8011036 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d101      	bne.n	8010f4c <HAL_UART_Transmit+0x40>
 8010f48:	2302      	movs	r3, #2
 8010f4a:	e074      	b.n	8011036 <HAL_UART_Transmit+0x12a>
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2200      	movs	r2, #0
 8010f58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2221      	movs	r2, #33	; 0x21
 8010f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010f62:	f7fc f983 	bl	800d26c <HAL_GetTick>
 8010f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	88fa      	ldrh	r2, [r7, #6]
 8010f6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	88fa      	ldrh	r2, [r7, #6]
 8010f72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2200      	movs	r2, #0
 8010f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010f7c:	e042      	b.n	8011004 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	3b01      	subs	r3, #1
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	689b      	ldr	r3, [r3, #8]
 8010f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f94:	d122      	bne.n	8010fdc <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	9300      	str	r3, [sp, #0]
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	2180      	movs	r1, #128	; 0x80
 8010fa0:	68f8      	ldr	r0, [r7, #12]
 8010fa2:	f000 f84c 	bl	801103e <UART_WaitOnFlagUntilTimeout>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d001      	beq.n	8010fb0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8010fac:	2303      	movs	r3, #3
 8010fae:	e042      	b.n	8011036 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	881b      	ldrh	r3, [r3, #0]
 8010fb8:	461a      	mov	r2, r3
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010fc2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	691b      	ldr	r3, [r3, #16]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d103      	bne.n	8010fd4 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	3302      	adds	r3, #2
 8010fd0:	60bb      	str	r3, [r7, #8]
 8010fd2:	e017      	b.n	8011004 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	60bb      	str	r3, [r7, #8]
 8010fda:	e013      	b.n	8011004 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	9300      	str	r3, [sp, #0]
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	2180      	movs	r1, #128	; 0x80
 8010fe6:	68f8      	ldr	r0, [r7, #12]
 8010fe8:	f000 f829 	bl	801103e <UART_WaitOnFlagUntilTimeout>
 8010fec:	4603      	mov	r3, r0
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010ff2:	2303      	movs	r3, #3
 8010ff4:	e01f      	b.n	8011036 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	1c5a      	adds	r2, r3, #1
 8010ffa:	60ba      	str	r2, [r7, #8]
 8010ffc:	781a      	ldrb	r2, [r3, #0]
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011008:	b29b      	uxth	r3, r3
 801100a:	2b00      	cmp	r3, #0
 801100c:	d1b7      	bne.n	8010f7e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	9300      	str	r3, [sp, #0]
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	2200      	movs	r2, #0
 8011016:	2140      	movs	r1, #64	; 0x40
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	f000 f810 	bl	801103e <UART_WaitOnFlagUntilTimeout>
 801101e:	4603      	mov	r3, r0
 8011020:	2b00      	cmp	r3, #0
 8011022:	d001      	beq.n	8011028 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8011024:	2303      	movs	r3, #3
 8011026:	e006      	b.n	8011036 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2220      	movs	r2, #32
 801102c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8011030:	2300      	movs	r3, #0
 8011032:	e000      	b.n	8011036 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8011034:	2302      	movs	r3, #2
  }
}
 8011036:	4618      	mov	r0, r3
 8011038:	3718      	adds	r7, #24
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	60f8      	str	r0, [r7, #12]
 8011046:	60b9      	str	r1, [r7, #8]
 8011048:	603b      	str	r3, [r7, #0]
 801104a:	4613      	mov	r3, r2
 801104c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801104e:	e02c      	b.n	80110aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011050:	69bb      	ldr	r3, [r7, #24]
 8011052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011056:	d028      	beq.n	80110aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011058:	69bb      	ldr	r3, [r7, #24]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d007      	beq.n	801106e <UART_WaitOnFlagUntilTimeout+0x30>
 801105e:	f7fc f905 	bl	800d26c <HAL_GetTick>
 8011062:	4602      	mov	r2, r0
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	1ad3      	subs	r3, r2, r3
 8011068:	69ba      	ldr	r2, [r7, #24]
 801106a:	429a      	cmp	r2, r3
 801106c:	d21d      	bcs.n	80110aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	68da      	ldr	r2, [r3, #12]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801107c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	695a      	ldr	r2, [r3, #20]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f022 0201 	bic.w	r2, r2, #1
 801108c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2220      	movs	r2, #32
 8011092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2220      	movs	r2, #32
 801109a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2200      	movs	r2, #0
 80110a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80110a6:	2303      	movs	r3, #3
 80110a8:	e00f      	b.n	80110ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	4013      	ands	r3, r2
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	bf0c      	ite	eq
 80110ba:	2301      	moveq	r3, #1
 80110bc:	2300      	movne	r3, #0
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	461a      	mov	r2, r3
 80110c2:	79fb      	ldrb	r3, [r7, #7]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d0c3      	beq.n	8011050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
	...

080110d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d8:	b085      	sub	sp, #20
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	691b      	ldr	r3, [r3, #16]
 80110e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68da      	ldr	r2, [r3, #12]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	430a      	orrs	r2, r1
 80110f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	689a      	ldr	r2, [r3, #8]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	431a      	orrs	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	695b      	ldr	r3, [r3, #20]
 8011102:	431a      	orrs	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	69db      	ldr	r3, [r3, #28]
 8011108:	4313      	orrs	r3, r2
 801110a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8011116:	f023 030c 	bic.w	r3, r3, #12
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	6812      	ldr	r2, [r2, #0]
 801111e:	68f9      	ldr	r1, [r7, #12]
 8011120:	430b      	orrs	r3, r1
 8011122:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	695b      	ldr	r3, [r3, #20]
 801112a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	699a      	ldr	r2, [r3, #24]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	430a      	orrs	r2, r1
 8011138:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	69db      	ldr	r3, [r3, #28]
 801113e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011142:	f040 818b 	bne.w	801145c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4ac1      	ldr	r2, [pc, #772]	; (8011450 <UART_SetConfig+0x37c>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d005      	beq.n	801115c <UART_SetConfig+0x88>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4abf      	ldr	r2, [pc, #764]	; (8011454 <UART_SetConfig+0x380>)
 8011156:	4293      	cmp	r3, r2
 8011158:	f040 80bd 	bne.w	80112d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801115c:	f7fe fad0 	bl	800f700 <HAL_RCC_GetPCLK2Freq>
 8011160:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	461d      	mov	r5, r3
 8011166:	f04f 0600 	mov.w	r6, #0
 801116a:	46a8      	mov	r8, r5
 801116c:	46b1      	mov	r9, r6
 801116e:	eb18 0308 	adds.w	r3, r8, r8
 8011172:	eb49 0409 	adc.w	r4, r9, r9
 8011176:	4698      	mov	r8, r3
 8011178:	46a1      	mov	r9, r4
 801117a:	eb18 0805 	adds.w	r8, r8, r5
 801117e:	eb49 0906 	adc.w	r9, r9, r6
 8011182:	f04f 0100 	mov.w	r1, #0
 8011186:	f04f 0200 	mov.w	r2, #0
 801118a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801118e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011192:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011196:	4688      	mov	r8, r1
 8011198:	4691      	mov	r9, r2
 801119a:	eb18 0005 	adds.w	r0, r8, r5
 801119e:	eb49 0106 	adc.w	r1, r9, r6
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	461d      	mov	r5, r3
 80111a8:	f04f 0600 	mov.w	r6, #0
 80111ac:	196b      	adds	r3, r5, r5
 80111ae:	eb46 0406 	adc.w	r4, r6, r6
 80111b2:	461a      	mov	r2, r3
 80111b4:	4623      	mov	r3, r4
 80111b6:	f7f7 fc7f 	bl	8008ab8 <__aeabi_uldivmod>
 80111ba:	4603      	mov	r3, r0
 80111bc:	460c      	mov	r4, r1
 80111be:	461a      	mov	r2, r3
 80111c0:	4ba5      	ldr	r3, [pc, #660]	; (8011458 <UART_SetConfig+0x384>)
 80111c2:	fba3 2302 	umull	r2, r3, r3, r2
 80111c6:	095b      	lsrs	r3, r3, #5
 80111c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	461d      	mov	r5, r3
 80111d0:	f04f 0600 	mov.w	r6, #0
 80111d4:	46a9      	mov	r9, r5
 80111d6:	46b2      	mov	sl, r6
 80111d8:	eb19 0309 	adds.w	r3, r9, r9
 80111dc:	eb4a 040a 	adc.w	r4, sl, sl
 80111e0:	4699      	mov	r9, r3
 80111e2:	46a2      	mov	sl, r4
 80111e4:	eb19 0905 	adds.w	r9, r9, r5
 80111e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80111ec:	f04f 0100 	mov.w	r1, #0
 80111f0:	f04f 0200 	mov.w	r2, #0
 80111f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80111f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80111fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011200:	4689      	mov	r9, r1
 8011202:	4692      	mov	sl, r2
 8011204:	eb19 0005 	adds.w	r0, r9, r5
 8011208:	eb4a 0106 	adc.w	r1, sl, r6
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	461d      	mov	r5, r3
 8011212:	f04f 0600 	mov.w	r6, #0
 8011216:	196b      	adds	r3, r5, r5
 8011218:	eb46 0406 	adc.w	r4, r6, r6
 801121c:	461a      	mov	r2, r3
 801121e:	4623      	mov	r3, r4
 8011220:	f7f7 fc4a 	bl	8008ab8 <__aeabi_uldivmod>
 8011224:	4603      	mov	r3, r0
 8011226:	460c      	mov	r4, r1
 8011228:	461a      	mov	r2, r3
 801122a:	4b8b      	ldr	r3, [pc, #556]	; (8011458 <UART_SetConfig+0x384>)
 801122c:	fba3 1302 	umull	r1, r3, r3, r2
 8011230:	095b      	lsrs	r3, r3, #5
 8011232:	2164      	movs	r1, #100	; 0x64
 8011234:	fb01 f303 	mul.w	r3, r1, r3
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	3332      	adds	r3, #50	; 0x32
 801123e:	4a86      	ldr	r2, [pc, #536]	; (8011458 <UART_SetConfig+0x384>)
 8011240:	fba2 2303 	umull	r2, r3, r2, r3
 8011244:	095b      	lsrs	r3, r3, #5
 8011246:	005b      	lsls	r3, r3, #1
 8011248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801124c:	4498      	add	r8, r3
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	461d      	mov	r5, r3
 8011252:	f04f 0600 	mov.w	r6, #0
 8011256:	46a9      	mov	r9, r5
 8011258:	46b2      	mov	sl, r6
 801125a:	eb19 0309 	adds.w	r3, r9, r9
 801125e:	eb4a 040a 	adc.w	r4, sl, sl
 8011262:	4699      	mov	r9, r3
 8011264:	46a2      	mov	sl, r4
 8011266:	eb19 0905 	adds.w	r9, r9, r5
 801126a:	eb4a 0a06 	adc.w	sl, sl, r6
 801126e:	f04f 0100 	mov.w	r1, #0
 8011272:	f04f 0200 	mov.w	r2, #0
 8011276:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801127a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801127e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011282:	4689      	mov	r9, r1
 8011284:	4692      	mov	sl, r2
 8011286:	eb19 0005 	adds.w	r0, r9, r5
 801128a:	eb4a 0106 	adc.w	r1, sl, r6
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	461d      	mov	r5, r3
 8011294:	f04f 0600 	mov.w	r6, #0
 8011298:	196b      	adds	r3, r5, r5
 801129a:	eb46 0406 	adc.w	r4, r6, r6
 801129e:	461a      	mov	r2, r3
 80112a0:	4623      	mov	r3, r4
 80112a2:	f7f7 fc09 	bl	8008ab8 <__aeabi_uldivmod>
 80112a6:	4603      	mov	r3, r0
 80112a8:	460c      	mov	r4, r1
 80112aa:	461a      	mov	r2, r3
 80112ac:	4b6a      	ldr	r3, [pc, #424]	; (8011458 <UART_SetConfig+0x384>)
 80112ae:	fba3 1302 	umull	r1, r3, r3, r2
 80112b2:	095b      	lsrs	r3, r3, #5
 80112b4:	2164      	movs	r1, #100	; 0x64
 80112b6:	fb01 f303 	mul.w	r3, r1, r3
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	00db      	lsls	r3, r3, #3
 80112be:	3332      	adds	r3, #50	; 0x32
 80112c0:	4a65      	ldr	r2, [pc, #404]	; (8011458 <UART_SetConfig+0x384>)
 80112c2:	fba2 2303 	umull	r2, r3, r2, r3
 80112c6:	095b      	lsrs	r3, r3, #5
 80112c8:	f003 0207 	and.w	r2, r3, #7
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4442      	add	r2, r8
 80112d2:	609a      	str	r2, [r3, #8]
 80112d4:	e26f      	b.n	80117b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80112d6:	f7fe f9ff 	bl	800f6d8 <HAL_RCC_GetPCLK1Freq>
 80112da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	461d      	mov	r5, r3
 80112e0:	f04f 0600 	mov.w	r6, #0
 80112e4:	46a8      	mov	r8, r5
 80112e6:	46b1      	mov	r9, r6
 80112e8:	eb18 0308 	adds.w	r3, r8, r8
 80112ec:	eb49 0409 	adc.w	r4, r9, r9
 80112f0:	4698      	mov	r8, r3
 80112f2:	46a1      	mov	r9, r4
 80112f4:	eb18 0805 	adds.w	r8, r8, r5
 80112f8:	eb49 0906 	adc.w	r9, r9, r6
 80112fc:	f04f 0100 	mov.w	r1, #0
 8011300:	f04f 0200 	mov.w	r2, #0
 8011304:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011308:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801130c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011310:	4688      	mov	r8, r1
 8011312:	4691      	mov	r9, r2
 8011314:	eb18 0005 	adds.w	r0, r8, r5
 8011318:	eb49 0106 	adc.w	r1, r9, r6
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	461d      	mov	r5, r3
 8011322:	f04f 0600 	mov.w	r6, #0
 8011326:	196b      	adds	r3, r5, r5
 8011328:	eb46 0406 	adc.w	r4, r6, r6
 801132c:	461a      	mov	r2, r3
 801132e:	4623      	mov	r3, r4
 8011330:	f7f7 fbc2 	bl	8008ab8 <__aeabi_uldivmod>
 8011334:	4603      	mov	r3, r0
 8011336:	460c      	mov	r4, r1
 8011338:	461a      	mov	r2, r3
 801133a:	4b47      	ldr	r3, [pc, #284]	; (8011458 <UART_SetConfig+0x384>)
 801133c:	fba3 2302 	umull	r2, r3, r3, r2
 8011340:	095b      	lsrs	r3, r3, #5
 8011342:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	461d      	mov	r5, r3
 801134a:	f04f 0600 	mov.w	r6, #0
 801134e:	46a9      	mov	r9, r5
 8011350:	46b2      	mov	sl, r6
 8011352:	eb19 0309 	adds.w	r3, r9, r9
 8011356:	eb4a 040a 	adc.w	r4, sl, sl
 801135a:	4699      	mov	r9, r3
 801135c:	46a2      	mov	sl, r4
 801135e:	eb19 0905 	adds.w	r9, r9, r5
 8011362:	eb4a 0a06 	adc.w	sl, sl, r6
 8011366:	f04f 0100 	mov.w	r1, #0
 801136a:	f04f 0200 	mov.w	r2, #0
 801136e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011372:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011376:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801137a:	4689      	mov	r9, r1
 801137c:	4692      	mov	sl, r2
 801137e:	eb19 0005 	adds.w	r0, r9, r5
 8011382:	eb4a 0106 	adc.w	r1, sl, r6
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	461d      	mov	r5, r3
 801138c:	f04f 0600 	mov.w	r6, #0
 8011390:	196b      	adds	r3, r5, r5
 8011392:	eb46 0406 	adc.w	r4, r6, r6
 8011396:	461a      	mov	r2, r3
 8011398:	4623      	mov	r3, r4
 801139a:	f7f7 fb8d 	bl	8008ab8 <__aeabi_uldivmod>
 801139e:	4603      	mov	r3, r0
 80113a0:	460c      	mov	r4, r1
 80113a2:	461a      	mov	r2, r3
 80113a4:	4b2c      	ldr	r3, [pc, #176]	; (8011458 <UART_SetConfig+0x384>)
 80113a6:	fba3 1302 	umull	r1, r3, r3, r2
 80113aa:	095b      	lsrs	r3, r3, #5
 80113ac:	2164      	movs	r1, #100	; 0x64
 80113ae:	fb01 f303 	mul.w	r3, r1, r3
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	00db      	lsls	r3, r3, #3
 80113b6:	3332      	adds	r3, #50	; 0x32
 80113b8:	4a27      	ldr	r2, [pc, #156]	; (8011458 <UART_SetConfig+0x384>)
 80113ba:	fba2 2303 	umull	r2, r3, r2, r3
 80113be:	095b      	lsrs	r3, r3, #5
 80113c0:	005b      	lsls	r3, r3, #1
 80113c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80113c6:	4498      	add	r8, r3
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	461d      	mov	r5, r3
 80113cc:	f04f 0600 	mov.w	r6, #0
 80113d0:	46a9      	mov	r9, r5
 80113d2:	46b2      	mov	sl, r6
 80113d4:	eb19 0309 	adds.w	r3, r9, r9
 80113d8:	eb4a 040a 	adc.w	r4, sl, sl
 80113dc:	4699      	mov	r9, r3
 80113de:	46a2      	mov	sl, r4
 80113e0:	eb19 0905 	adds.w	r9, r9, r5
 80113e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80113e8:	f04f 0100 	mov.w	r1, #0
 80113ec:	f04f 0200 	mov.w	r2, #0
 80113f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80113f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80113f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80113fc:	4689      	mov	r9, r1
 80113fe:	4692      	mov	sl, r2
 8011400:	eb19 0005 	adds.w	r0, r9, r5
 8011404:	eb4a 0106 	adc.w	r1, sl, r6
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	461d      	mov	r5, r3
 801140e:	f04f 0600 	mov.w	r6, #0
 8011412:	196b      	adds	r3, r5, r5
 8011414:	eb46 0406 	adc.w	r4, r6, r6
 8011418:	461a      	mov	r2, r3
 801141a:	4623      	mov	r3, r4
 801141c:	f7f7 fb4c 	bl	8008ab8 <__aeabi_uldivmod>
 8011420:	4603      	mov	r3, r0
 8011422:	460c      	mov	r4, r1
 8011424:	461a      	mov	r2, r3
 8011426:	4b0c      	ldr	r3, [pc, #48]	; (8011458 <UART_SetConfig+0x384>)
 8011428:	fba3 1302 	umull	r1, r3, r3, r2
 801142c:	095b      	lsrs	r3, r3, #5
 801142e:	2164      	movs	r1, #100	; 0x64
 8011430:	fb01 f303 	mul.w	r3, r1, r3
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	00db      	lsls	r3, r3, #3
 8011438:	3332      	adds	r3, #50	; 0x32
 801143a:	4a07      	ldr	r2, [pc, #28]	; (8011458 <UART_SetConfig+0x384>)
 801143c:	fba2 2303 	umull	r2, r3, r2, r3
 8011440:	095b      	lsrs	r3, r3, #5
 8011442:	f003 0207 	and.w	r2, r3, #7
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4442      	add	r2, r8
 801144c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801144e:	e1b2      	b.n	80117b6 <UART_SetConfig+0x6e2>
 8011450:	40011000 	.word	0x40011000
 8011454:	40011400 	.word	0x40011400
 8011458:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4ad7      	ldr	r2, [pc, #860]	; (80117c0 <UART_SetConfig+0x6ec>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d005      	beq.n	8011472 <UART_SetConfig+0x39e>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4ad6      	ldr	r2, [pc, #856]	; (80117c4 <UART_SetConfig+0x6f0>)
 801146c:	4293      	cmp	r3, r2
 801146e:	f040 80d1 	bne.w	8011614 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011472:	f7fe f945 	bl	800f700 <HAL_RCC_GetPCLK2Freq>
 8011476:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	469a      	mov	sl, r3
 801147c:	f04f 0b00 	mov.w	fp, #0
 8011480:	46d0      	mov	r8, sl
 8011482:	46d9      	mov	r9, fp
 8011484:	eb18 0308 	adds.w	r3, r8, r8
 8011488:	eb49 0409 	adc.w	r4, r9, r9
 801148c:	4698      	mov	r8, r3
 801148e:	46a1      	mov	r9, r4
 8011490:	eb18 080a 	adds.w	r8, r8, sl
 8011494:	eb49 090b 	adc.w	r9, r9, fp
 8011498:	f04f 0100 	mov.w	r1, #0
 801149c:	f04f 0200 	mov.w	r2, #0
 80114a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80114a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80114a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80114ac:	4688      	mov	r8, r1
 80114ae:	4691      	mov	r9, r2
 80114b0:	eb1a 0508 	adds.w	r5, sl, r8
 80114b4:	eb4b 0609 	adc.w	r6, fp, r9
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	4619      	mov	r1, r3
 80114be:	f04f 0200 	mov.w	r2, #0
 80114c2:	f04f 0300 	mov.w	r3, #0
 80114c6:	f04f 0400 	mov.w	r4, #0
 80114ca:	0094      	lsls	r4, r2, #2
 80114cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80114d0:	008b      	lsls	r3, r1, #2
 80114d2:	461a      	mov	r2, r3
 80114d4:	4623      	mov	r3, r4
 80114d6:	4628      	mov	r0, r5
 80114d8:	4631      	mov	r1, r6
 80114da:	f7f7 faed 	bl	8008ab8 <__aeabi_uldivmod>
 80114de:	4603      	mov	r3, r0
 80114e0:	460c      	mov	r4, r1
 80114e2:	461a      	mov	r2, r3
 80114e4:	4bb8      	ldr	r3, [pc, #736]	; (80117c8 <UART_SetConfig+0x6f4>)
 80114e6:	fba3 2302 	umull	r2, r3, r3, r2
 80114ea:	095b      	lsrs	r3, r3, #5
 80114ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	469b      	mov	fp, r3
 80114f4:	f04f 0c00 	mov.w	ip, #0
 80114f8:	46d9      	mov	r9, fp
 80114fa:	46e2      	mov	sl, ip
 80114fc:	eb19 0309 	adds.w	r3, r9, r9
 8011500:	eb4a 040a 	adc.w	r4, sl, sl
 8011504:	4699      	mov	r9, r3
 8011506:	46a2      	mov	sl, r4
 8011508:	eb19 090b 	adds.w	r9, r9, fp
 801150c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011510:	f04f 0100 	mov.w	r1, #0
 8011514:	f04f 0200 	mov.w	r2, #0
 8011518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801151c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011520:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011524:	4689      	mov	r9, r1
 8011526:	4692      	mov	sl, r2
 8011528:	eb1b 0509 	adds.w	r5, fp, r9
 801152c:	eb4c 060a 	adc.w	r6, ip, sl
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	4619      	mov	r1, r3
 8011536:	f04f 0200 	mov.w	r2, #0
 801153a:	f04f 0300 	mov.w	r3, #0
 801153e:	f04f 0400 	mov.w	r4, #0
 8011542:	0094      	lsls	r4, r2, #2
 8011544:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011548:	008b      	lsls	r3, r1, #2
 801154a:	461a      	mov	r2, r3
 801154c:	4623      	mov	r3, r4
 801154e:	4628      	mov	r0, r5
 8011550:	4631      	mov	r1, r6
 8011552:	f7f7 fab1 	bl	8008ab8 <__aeabi_uldivmod>
 8011556:	4603      	mov	r3, r0
 8011558:	460c      	mov	r4, r1
 801155a:	461a      	mov	r2, r3
 801155c:	4b9a      	ldr	r3, [pc, #616]	; (80117c8 <UART_SetConfig+0x6f4>)
 801155e:	fba3 1302 	umull	r1, r3, r3, r2
 8011562:	095b      	lsrs	r3, r3, #5
 8011564:	2164      	movs	r1, #100	; 0x64
 8011566:	fb01 f303 	mul.w	r3, r1, r3
 801156a:	1ad3      	subs	r3, r2, r3
 801156c:	011b      	lsls	r3, r3, #4
 801156e:	3332      	adds	r3, #50	; 0x32
 8011570:	4a95      	ldr	r2, [pc, #596]	; (80117c8 <UART_SetConfig+0x6f4>)
 8011572:	fba2 2303 	umull	r2, r3, r2, r3
 8011576:	095b      	lsrs	r3, r3, #5
 8011578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801157c:	4498      	add	r8, r3
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	469b      	mov	fp, r3
 8011582:	f04f 0c00 	mov.w	ip, #0
 8011586:	46d9      	mov	r9, fp
 8011588:	46e2      	mov	sl, ip
 801158a:	eb19 0309 	adds.w	r3, r9, r9
 801158e:	eb4a 040a 	adc.w	r4, sl, sl
 8011592:	4699      	mov	r9, r3
 8011594:	46a2      	mov	sl, r4
 8011596:	eb19 090b 	adds.w	r9, r9, fp
 801159a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801159e:	f04f 0100 	mov.w	r1, #0
 80115a2:	f04f 0200 	mov.w	r2, #0
 80115a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80115aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80115ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80115b2:	4689      	mov	r9, r1
 80115b4:	4692      	mov	sl, r2
 80115b6:	eb1b 0509 	adds.w	r5, fp, r9
 80115ba:	eb4c 060a 	adc.w	r6, ip, sl
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	4619      	mov	r1, r3
 80115c4:	f04f 0200 	mov.w	r2, #0
 80115c8:	f04f 0300 	mov.w	r3, #0
 80115cc:	f04f 0400 	mov.w	r4, #0
 80115d0:	0094      	lsls	r4, r2, #2
 80115d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80115d6:	008b      	lsls	r3, r1, #2
 80115d8:	461a      	mov	r2, r3
 80115da:	4623      	mov	r3, r4
 80115dc:	4628      	mov	r0, r5
 80115de:	4631      	mov	r1, r6
 80115e0:	f7f7 fa6a 	bl	8008ab8 <__aeabi_uldivmod>
 80115e4:	4603      	mov	r3, r0
 80115e6:	460c      	mov	r4, r1
 80115e8:	461a      	mov	r2, r3
 80115ea:	4b77      	ldr	r3, [pc, #476]	; (80117c8 <UART_SetConfig+0x6f4>)
 80115ec:	fba3 1302 	umull	r1, r3, r3, r2
 80115f0:	095b      	lsrs	r3, r3, #5
 80115f2:	2164      	movs	r1, #100	; 0x64
 80115f4:	fb01 f303 	mul.w	r3, r1, r3
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	011b      	lsls	r3, r3, #4
 80115fc:	3332      	adds	r3, #50	; 0x32
 80115fe:	4a72      	ldr	r2, [pc, #456]	; (80117c8 <UART_SetConfig+0x6f4>)
 8011600:	fba2 2303 	umull	r2, r3, r2, r3
 8011604:	095b      	lsrs	r3, r3, #5
 8011606:	f003 020f 	and.w	r2, r3, #15
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	4442      	add	r2, r8
 8011610:	609a      	str	r2, [r3, #8]
 8011612:	e0d0      	b.n	80117b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011614:	f7fe f860 	bl	800f6d8 <HAL_RCC_GetPCLK1Freq>
 8011618:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	469a      	mov	sl, r3
 801161e:	f04f 0b00 	mov.w	fp, #0
 8011622:	46d0      	mov	r8, sl
 8011624:	46d9      	mov	r9, fp
 8011626:	eb18 0308 	adds.w	r3, r8, r8
 801162a:	eb49 0409 	adc.w	r4, r9, r9
 801162e:	4698      	mov	r8, r3
 8011630:	46a1      	mov	r9, r4
 8011632:	eb18 080a 	adds.w	r8, r8, sl
 8011636:	eb49 090b 	adc.w	r9, r9, fp
 801163a:	f04f 0100 	mov.w	r1, #0
 801163e:	f04f 0200 	mov.w	r2, #0
 8011642:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011646:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801164a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801164e:	4688      	mov	r8, r1
 8011650:	4691      	mov	r9, r2
 8011652:	eb1a 0508 	adds.w	r5, sl, r8
 8011656:	eb4b 0609 	adc.w	r6, fp, r9
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	4619      	mov	r1, r3
 8011660:	f04f 0200 	mov.w	r2, #0
 8011664:	f04f 0300 	mov.w	r3, #0
 8011668:	f04f 0400 	mov.w	r4, #0
 801166c:	0094      	lsls	r4, r2, #2
 801166e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011672:	008b      	lsls	r3, r1, #2
 8011674:	461a      	mov	r2, r3
 8011676:	4623      	mov	r3, r4
 8011678:	4628      	mov	r0, r5
 801167a:	4631      	mov	r1, r6
 801167c:	f7f7 fa1c 	bl	8008ab8 <__aeabi_uldivmod>
 8011680:	4603      	mov	r3, r0
 8011682:	460c      	mov	r4, r1
 8011684:	461a      	mov	r2, r3
 8011686:	4b50      	ldr	r3, [pc, #320]	; (80117c8 <UART_SetConfig+0x6f4>)
 8011688:	fba3 2302 	umull	r2, r3, r3, r2
 801168c:	095b      	lsrs	r3, r3, #5
 801168e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	469b      	mov	fp, r3
 8011696:	f04f 0c00 	mov.w	ip, #0
 801169a:	46d9      	mov	r9, fp
 801169c:	46e2      	mov	sl, ip
 801169e:	eb19 0309 	adds.w	r3, r9, r9
 80116a2:	eb4a 040a 	adc.w	r4, sl, sl
 80116a6:	4699      	mov	r9, r3
 80116a8:	46a2      	mov	sl, r4
 80116aa:	eb19 090b 	adds.w	r9, r9, fp
 80116ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80116b2:	f04f 0100 	mov.w	r1, #0
 80116b6:	f04f 0200 	mov.w	r2, #0
 80116ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80116be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80116c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80116c6:	4689      	mov	r9, r1
 80116c8:	4692      	mov	sl, r2
 80116ca:	eb1b 0509 	adds.w	r5, fp, r9
 80116ce:	eb4c 060a 	adc.w	r6, ip, sl
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	4619      	mov	r1, r3
 80116d8:	f04f 0200 	mov.w	r2, #0
 80116dc:	f04f 0300 	mov.w	r3, #0
 80116e0:	f04f 0400 	mov.w	r4, #0
 80116e4:	0094      	lsls	r4, r2, #2
 80116e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80116ea:	008b      	lsls	r3, r1, #2
 80116ec:	461a      	mov	r2, r3
 80116ee:	4623      	mov	r3, r4
 80116f0:	4628      	mov	r0, r5
 80116f2:	4631      	mov	r1, r6
 80116f4:	f7f7 f9e0 	bl	8008ab8 <__aeabi_uldivmod>
 80116f8:	4603      	mov	r3, r0
 80116fa:	460c      	mov	r4, r1
 80116fc:	461a      	mov	r2, r3
 80116fe:	4b32      	ldr	r3, [pc, #200]	; (80117c8 <UART_SetConfig+0x6f4>)
 8011700:	fba3 1302 	umull	r1, r3, r3, r2
 8011704:	095b      	lsrs	r3, r3, #5
 8011706:	2164      	movs	r1, #100	; 0x64
 8011708:	fb01 f303 	mul.w	r3, r1, r3
 801170c:	1ad3      	subs	r3, r2, r3
 801170e:	011b      	lsls	r3, r3, #4
 8011710:	3332      	adds	r3, #50	; 0x32
 8011712:	4a2d      	ldr	r2, [pc, #180]	; (80117c8 <UART_SetConfig+0x6f4>)
 8011714:	fba2 2303 	umull	r2, r3, r2, r3
 8011718:	095b      	lsrs	r3, r3, #5
 801171a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801171e:	4498      	add	r8, r3
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	469b      	mov	fp, r3
 8011724:	f04f 0c00 	mov.w	ip, #0
 8011728:	46d9      	mov	r9, fp
 801172a:	46e2      	mov	sl, ip
 801172c:	eb19 0309 	adds.w	r3, r9, r9
 8011730:	eb4a 040a 	adc.w	r4, sl, sl
 8011734:	4699      	mov	r9, r3
 8011736:	46a2      	mov	sl, r4
 8011738:	eb19 090b 	adds.w	r9, r9, fp
 801173c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011740:	f04f 0100 	mov.w	r1, #0
 8011744:	f04f 0200 	mov.w	r2, #0
 8011748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801174c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011754:	4689      	mov	r9, r1
 8011756:	4692      	mov	sl, r2
 8011758:	eb1b 0509 	adds.w	r5, fp, r9
 801175c:	eb4c 060a 	adc.w	r6, ip, sl
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	4619      	mov	r1, r3
 8011766:	f04f 0200 	mov.w	r2, #0
 801176a:	f04f 0300 	mov.w	r3, #0
 801176e:	f04f 0400 	mov.w	r4, #0
 8011772:	0094      	lsls	r4, r2, #2
 8011774:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011778:	008b      	lsls	r3, r1, #2
 801177a:	461a      	mov	r2, r3
 801177c:	4623      	mov	r3, r4
 801177e:	4628      	mov	r0, r5
 8011780:	4631      	mov	r1, r6
 8011782:	f7f7 f999 	bl	8008ab8 <__aeabi_uldivmod>
 8011786:	4603      	mov	r3, r0
 8011788:	460c      	mov	r4, r1
 801178a:	461a      	mov	r2, r3
 801178c:	4b0e      	ldr	r3, [pc, #56]	; (80117c8 <UART_SetConfig+0x6f4>)
 801178e:	fba3 1302 	umull	r1, r3, r3, r2
 8011792:	095b      	lsrs	r3, r3, #5
 8011794:	2164      	movs	r1, #100	; 0x64
 8011796:	fb01 f303 	mul.w	r3, r1, r3
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	011b      	lsls	r3, r3, #4
 801179e:	3332      	adds	r3, #50	; 0x32
 80117a0:	4a09      	ldr	r2, [pc, #36]	; (80117c8 <UART_SetConfig+0x6f4>)
 80117a2:	fba2 2303 	umull	r2, r3, r2, r3
 80117a6:	095b      	lsrs	r3, r3, #5
 80117a8:	f003 020f 	and.w	r2, r3, #15
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4442      	add	r2, r8
 80117b2:	609a      	str	r2, [r3, #8]
}
 80117b4:	e7ff      	b.n	80117b6 <UART_SetConfig+0x6e2>
 80117b6:	bf00      	nop
 80117b8:	3714      	adds	r7, #20
 80117ba:	46bd      	mov	sp, r7
 80117bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c0:	40011000 	.word	0x40011000
 80117c4:	40011400 	.word	0x40011400
 80117c8:	51eb851f 	.word	0x51eb851f

080117cc <round>:
 80117cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ce:	ec57 6b10 	vmov	r6, r7, d0
 80117d2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80117d6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80117da:	2c13      	cmp	r4, #19
 80117dc:	463b      	mov	r3, r7
 80117de:	463d      	mov	r5, r7
 80117e0:	dc17      	bgt.n	8011812 <round+0x46>
 80117e2:	2c00      	cmp	r4, #0
 80117e4:	da09      	bge.n	80117fa <round+0x2e>
 80117e6:	3401      	adds	r4, #1
 80117e8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80117ec:	d103      	bne.n	80117f6 <round+0x2a>
 80117ee:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80117f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80117f6:	2100      	movs	r1, #0
 80117f8:	e02c      	b.n	8011854 <round+0x88>
 80117fa:	4a18      	ldr	r2, [pc, #96]	; (801185c <round+0x90>)
 80117fc:	4122      	asrs	r2, r4
 80117fe:	4217      	tst	r7, r2
 8011800:	d100      	bne.n	8011804 <round+0x38>
 8011802:	b19e      	cbz	r6, 801182c <round+0x60>
 8011804:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011808:	4123      	asrs	r3, r4
 801180a:	442b      	add	r3, r5
 801180c:	ea23 0302 	bic.w	r3, r3, r2
 8011810:	e7f1      	b.n	80117f6 <round+0x2a>
 8011812:	2c33      	cmp	r4, #51	; 0x33
 8011814:	dd0d      	ble.n	8011832 <round+0x66>
 8011816:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801181a:	d107      	bne.n	801182c <round+0x60>
 801181c:	4630      	mov	r0, r6
 801181e:	4639      	mov	r1, r7
 8011820:	ee10 2a10 	vmov	r2, s0
 8011824:	f7f6 fc6a 	bl	80080fc <__adddf3>
 8011828:	4606      	mov	r6, r0
 801182a:	460f      	mov	r7, r1
 801182c:	ec47 6b10 	vmov	d0, r6, r7
 8011830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011832:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8011836:	f04f 30ff 	mov.w	r0, #4294967295
 801183a:	40d0      	lsrs	r0, r2
 801183c:	4206      	tst	r6, r0
 801183e:	d0f5      	beq.n	801182c <round+0x60>
 8011840:	2201      	movs	r2, #1
 8011842:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011846:	fa02 f404 	lsl.w	r4, r2, r4
 801184a:	1931      	adds	r1, r6, r4
 801184c:	bf28      	it	cs
 801184e:	189b      	addcs	r3, r3, r2
 8011850:	ea21 0100 	bic.w	r1, r1, r0
 8011854:	461f      	mov	r7, r3
 8011856:	460e      	mov	r6, r1
 8011858:	e7e8      	b.n	801182c <round+0x60>
 801185a:	bf00      	nop
 801185c:	000fffff 	.word	0x000fffff

08011860 <__errno>:
 8011860:	4b01      	ldr	r3, [pc, #4]	; (8011868 <__errno+0x8>)
 8011862:	6818      	ldr	r0, [r3, #0]
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop
 8011868:	20000010 	.word	0x20000010

0801186c <__libc_init_array>:
 801186c:	b570      	push	{r4, r5, r6, lr}
 801186e:	4e0d      	ldr	r6, [pc, #52]	; (80118a4 <__libc_init_array+0x38>)
 8011870:	4c0d      	ldr	r4, [pc, #52]	; (80118a8 <__libc_init_array+0x3c>)
 8011872:	1ba4      	subs	r4, r4, r6
 8011874:	10a4      	asrs	r4, r4, #2
 8011876:	2500      	movs	r5, #0
 8011878:	42a5      	cmp	r5, r4
 801187a:	d109      	bne.n	8011890 <__libc_init_array+0x24>
 801187c:	4e0b      	ldr	r6, [pc, #44]	; (80118ac <__libc_init_array+0x40>)
 801187e:	4c0c      	ldr	r4, [pc, #48]	; (80118b0 <__libc_init_array+0x44>)
 8011880:	f002 fbae 	bl	8013fe0 <_init>
 8011884:	1ba4      	subs	r4, r4, r6
 8011886:	10a4      	asrs	r4, r4, #2
 8011888:	2500      	movs	r5, #0
 801188a:	42a5      	cmp	r5, r4
 801188c:	d105      	bne.n	801189a <__libc_init_array+0x2e>
 801188e:	bd70      	pop	{r4, r5, r6, pc}
 8011890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011894:	4798      	blx	r3
 8011896:	3501      	adds	r5, #1
 8011898:	e7ee      	b.n	8011878 <__libc_init_array+0xc>
 801189a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801189e:	4798      	blx	r3
 80118a0:	3501      	adds	r5, #1
 80118a2:	e7f2      	b.n	801188a <__libc_init_array+0x1e>
 80118a4:	08014398 	.word	0x08014398
 80118a8:	08014398 	.word	0x08014398
 80118ac:	08014398 	.word	0x08014398
 80118b0:	0801439c 	.word	0x0801439c

080118b4 <memcpy>:
 80118b4:	b510      	push	{r4, lr}
 80118b6:	1e43      	subs	r3, r0, #1
 80118b8:	440a      	add	r2, r1
 80118ba:	4291      	cmp	r1, r2
 80118bc:	d100      	bne.n	80118c0 <memcpy+0xc>
 80118be:	bd10      	pop	{r4, pc}
 80118c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118c8:	e7f7      	b.n	80118ba <memcpy+0x6>

080118ca <memset>:
 80118ca:	4402      	add	r2, r0
 80118cc:	4603      	mov	r3, r0
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d100      	bne.n	80118d4 <memset+0xa>
 80118d2:	4770      	bx	lr
 80118d4:	f803 1b01 	strb.w	r1, [r3], #1
 80118d8:	e7f9      	b.n	80118ce <memset+0x4>

080118da <__cvt>:
 80118da:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118de:	ec55 4b10 	vmov	r4, r5, d0
 80118e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80118e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80118e8:	2d00      	cmp	r5, #0
 80118ea:	460e      	mov	r6, r1
 80118ec:	4691      	mov	r9, r2
 80118ee:	4619      	mov	r1, r3
 80118f0:	bfb8      	it	lt
 80118f2:	4622      	movlt	r2, r4
 80118f4:	462b      	mov	r3, r5
 80118f6:	f027 0720 	bic.w	r7, r7, #32
 80118fa:	bfbb      	ittet	lt
 80118fc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011900:	461d      	movlt	r5, r3
 8011902:	2300      	movge	r3, #0
 8011904:	232d      	movlt	r3, #45	; 0x2d
 8011906:	bfb8      	it	lt
 8011908:	4614      	movlt	r4, r2
 801190a:	2f46      	cmp	r7, #70	; 0x46
 801190c:	700b      	strb	r3, [r1, #0]
 801190e:	d004      	beq.n	801191a <__cvt+0x40>
 8011910:	2f45      	cmp	r7, #69	; 0x45
 8011912:	d100      	bne.n	8011916 <__cvt+0x3c>
 8011914:	3601      	adds	r6, #1
 8011916:	2102      	movs	r1, #2
 8011918:	e000      	b.n	801191c <__cvt+0x42>
 801191a:	2103      	movs	r1, #3
 801191c:	ab03      	add	r3, sp, #12
 801191e:	9301      	str	r3, [sp, #4]
 8011920:	ab02      	add	r3, sp, #8
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	4632      	mov	r2, r6
 8011926:	4653      	mov	r3, sl
 8011928:	ec45 4b10 	vmov	d0, r4, r5
 801192c:	f000 fdfc 	bl	8012528 <_dtoa_r>
 8011930:	2f47      	cmp	r7, #71	; 0x47
 8011932:	4680      	mov	r8, r0
 8011934:	d102      	bne.n	801193c <__cvt+0x62>
 8011936:	f019 0f01 	tst.w	r9, #1
 801193a:	d026      	beq.n	801198a <__cvt+0xb0>
 801193c:	2f46      	cmp	r7, #70	; 0x46
 801193e:	eb08 0906 	add.w	r9, r8, r6
 8011942:	d111      	bne.n	8011968 <__cvt+0x8e>
 8011944:	f898 3000 	ldrb.w	r3, [r8]
 8011948:	2b30      	cmp	r3, #48	; 0x30
 801194a:	d10a      	bne.n	8011962 <__cvt+0x88>
 801194c:	2200      	movs	r2, #0
 801194e:	2300      	movs	r3, #0
 8011950:	4620      	mov	r0, r4
 8011952:	4629      	mov	r1, r5
 8011954:	f7f6 fff0 	bl	8008938 <__aeabi_dcmpeq>
 8011958:	b918      	cbnz	r0, 8011962 <__cvt+0x88>
 801195a:	f1c6 0601 	rsb	r6, r6, #1
 801195e:	f8ca 6000 	str.w	r6, [sl]
 8011962:	f8da 3000 	ldr.w	r3, [sl]
 8011966:	4499      	add	r9, r3
 8011968:	2200      	movs	r2, #0
 801196a:	2300      	movs	r3, #0
 801196c:	4620      	mov	r0, r4
 801196e:	4629      	mov	r1, r5
 8011970:	f7f6 ffe2 	bl	8008938 <__aeabi_dcmpeq>
 8011974:	b938      	cbnz	r0, 8011986 <__cvt+0xac>
 8011976:	2230      	movs	r2, #48	; 0x30
 8011978:	9b03      	ldr	r3, [sp, #12]
 801197a:	454b      	cmp	r3, r9
 801197c:	d205      	bcs.n	801198a <__cvt+0xb0>
 801197e:	1c59      	adds	r1, r3, #1
 8011980:	9103      	str	r1, [sp, #12]
 8011982:	701a      	strb	r2, [r3, #0]
 8011984:	e7f8      	b.n	8011978 <__cvt+0x9e>
 8011986:	f8cd 900c 	str.w	r9, [sp, #12]
 801198a:	9b03      	ldr	r3, [sp, #12]
 801198c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801198e:	eba3 0308 	sub.w	r3, r3, r8
 8011992:	4640      	mov	r0, r8
 8011994:	6013      	str	r3, [r2, #0]
 8011996:	b004      	add	sp, #16
 8011998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801199c <__exponent>:
 801199c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801199e:	2900      	cmp	r1, #0
 80119a0:	4604      	mov	r4, r0
 80119a2:	bfba      	itte	lt
 80119a4:	4249      	neglt	r1, r1
 80119a6:	232d      	movlt	r3, #45	; 0x2d
 80119a8:	232b      	movge	r3, #43	; 0x2b
 80119aa:	2909      	cmp	r1, #9
 80119ac:	f804 2b02 	strb.w	r2, [r4], #2
 80119b0:	7043      	strb	r3, [r0, #1]
 80119b2:	dd20      	ble.n	80119f6 <__exponent+0x5a>
 80119b4:	f10d 0307 	add.w	r3, sp, #7
 80119b8:	461f      	mov	r7, r3
 80119ba:	260a      	movs	r6, #10
 80119bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80119c0:	fb06 1115 	mls	r1, r6, r5, r1
 80119c4:	3130      	adds	r1, #48	; 0x30
 80119c6:	2d09      	cmp	r5, #9
 80119c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80119cc:	f103 32ff 	add.w	r2, r3, #4294967295
 80119d0:	4629      	mov	r1, r5
 80119d2:	dc09      	bgt.n	80119e8 <__exponent+0x4c>
 80119d4:	3130      	adds	r1, #48	; 0x30
 80119d6:	3b02      	subs	r3, #2
 80119d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80119dc:	42bb      	cmp	r3, r7
 80119de:	4622      	mov	r2, r4
 80119e0:	d304      	bcc.n	80119ec <__exponent+0x50>
 80119e2:	1a10      	subs	r0, r2, r0
 80119e4:	b003      	add	sp, #12
 80119e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119e8:	4613      	mov	r3, r2
 80119ea:	e7e7      	b.n	80119bc <__exponent+0x20>
 80119ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119f0:	f804 2b01 	strb.w	r2, [r4], #1
 80119f4:	e7f2      	b.n	80119dc <__exponent+0x40>
 80119f6:	2330      	movs	r3, #48	; 0x30
 80119f8:	4419      	add	r1, r3
 80119fa:	7083      	strb	r3, [r0, #2]
 80119fc:	1d02      	adds	r2, r0, #4
 80119fe:	70c1      	strb	r1, [r0, #3]
 8011a00:	e7ef      	b.n	80119e2 <__exponent+0x46>
	...

08011a04 <_printf_float>:
 8011a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a08:	b08d      	sub	sp, #52	; 0x34
 8011a0a:	460c      	mov	r4, r1
 8011a0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011a10:	4616      	mov	r6, r2
 8011a12:	461f      	mov	r7, r3
 8011a14:	4605      	mov	r5, r0
 8011a16:	f001 fcb9 	bl	801338c <_localeconv_r>
 8011a1a:	6803      	ldr	r3, [r0, #0]
 8011a1c:	9304      	str	r3, [sp, #16]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7f6 fb0e 	bl	8008040 <strlen>
 8011a24:	2300      	movs	r3, #0
 8011a26:	930a      	str	r3, [sp, #40]	; 0x28
 8011a28:	f8d8 3000 	ldr.w	r3, [r8]
 8011a2c:	9005      	str	r0, [sp, #20]
 8011a2e:	3307      	adds	r3, #7
 8011a30:	f023 0307 	bic.w	r3, r3, #7
 8011a34:	f103 0208 	add.w	r2, r3, #8
 8011a38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011a3c:	f8d4 b000 	ldr.w	fp, [r4]
 8011a40:	f8c8 2000 	str.w	r2, [r8]
 8011a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011a4c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011a50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a54:	9307      	str	r3, [sp, #28]
 8011a56:	f8cd 8018 	str.w	r8, [sp, #24]
 8011a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5e:	4ba7      	ldr	r3, [pc, #668]	; (8011cfc <_printf_float+0x2f8>)
 8011a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a64:	f7f6 ff9a 	bl	800899c <__aeabi_dcmpun>
 8011a68:	bb70      	cbnz	r0, 8011ac8 <_printf_float+0xc4>
 8011a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6e:	4ba3      	ldr	r3, [pc, #652]	; (8011cfc <_printf_float+0x2f8>)
 8011a70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a74:	f7f6 ff74 	bl	8008960 <__aeabi_dcmple>
 8011a78:	bb30      	cbnz	r0, 8011ac8 <_printf_float+0xc4>
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	4640      	mov	r0, r8
 8011a80:	4649      	mov	r1, r9
 8011a82:	f7f6 ff63 	bl	800894c <__aeabi_dcmplt>
 8011a86:	b110      	cbz	r0, 8011a8e <_printf_float+0x8a>
 8011a88:	232d      	movs	r3, #45	; 0x2d
 8011a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a8e:	4a9c      	ldr	r2, [pc, #624]	; (8011d00 <_printf_float+0x2fc>)
 8011a90:	4b9c      	ldr	r3, [pc, #624]	; (8011d04 <_printf_float+0x300>)
 8011a92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011a96:	bf8c      	ite	hi
 8011a98:	4690      	movhi	r8, r2
 8011a9a:	4698      	movls	r8, r3
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	f02b 0204 	bic.w	r2, fp, #4
 8011aa2:	6123      	str	r3, [r4, #16]
 8011aa4:	6022      	str	r2, [r4, #0]
 8011aa6:	f04f 0900 	mov.w	r9, #0
 8011aaa:	9700      	str	r7, [sp, #0]
 8011aac:	4633      	mov	r3, r6
 8011aae:	aa0b      	add	r2, sp, #44	; 0x2c
 8011ab0:	4621      	mov	r1, r4
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	f000 f9e6 	bl	8011e84 <_printf_common>
 8011ab8:	3001      	adds	r0, #1
 8011aba:	f040 808d 	bne.w	8011bd8 <_printf_float+0x1d4>
 8011abe:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac2:	b00d      	add	sp, #52	; 0x34
 8011ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac8:	4642      	mov	r2, r8
 8011aca:	464b      	mov	r3, r9
 8011acc:	4640      	mov	r0, r8
 8011ace:	4649      	mov	r1, r9
 8011ad0:	f7f6 ff64 	bl	800899c <__aeabi_dcmpun>
 8011ad4:	b110      	cbz	r0, 8011adc <_printf_float+0xd8>
 8011ad6:	4a8c      	ldr	r2, [pc, #560]	; (8011d08 <_printf_float+0x304>)
 8011ad8:	4b8c      	ldr	r3, [pc, #560]	; (8011d0c <_printf_float+0x308>)
 8011ada:	e7da      	b.n	8011a92 <_printf_float+0x8e>
 8011adc:	6861      	ldr	r1, [r4, #4]
 8011ade:	1c4b      	adds	r3, r1, #1
 8011ae0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011ae4:	a80a      	add	r0, sp, #40	; 0x28
 8011ae6:	d13e      	bne.n	8011b66 <_printf_float+0x162>
 8011ae8:	2306      	movs	r3, #6
 8011aea:	6063      	str	r3, [r4, #4]
 8011aec:	2300      	movs	r3, #0
 8011aee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011af2:	ab09      	add	r3, sp, #36	; 0x24
 8011af4:	9300      	str	r3, [sp, #0]
 8011af6:	ec49 8b10 	vmov	d0, r8, r9
 8011afa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011afe:	6022      	str	r2, [r4, #0]
 8011b00:	f8cd a004 	str.w	sl, [sp, #4]
 8011b04:	6861      	ldr	r1, [r4, #4]
 8011b06:	4628      	mov	r0, r5
 8011b08:	f7ff fee7 	bl	80118da <__cvt>
 8011b0c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011b10:	2b47      	cmp	r3, #71	; 0x47
 8011b12:	4680      	mov	r8, r0
 8011b14:	d109      	bne.n	8011b2a <_printf_float+0x126>
 8011b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b18:	1cd8      	adds	r0, r3, #3
 8011b1a:	db02      	blt.n	8011b22 <_printf_float+0x11e>
 8011b1c:	6862      	ldr	r2, [r4, #4]
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	dd47      	ble.n	8011bb2 <_printf_float+0x1ae>
 8011b22:	f1aa 0a02 	sub.w	sl, sl, #2
 8011b26:	fa5f fa8a 	uxtb.w	sl, sl
 8011b2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b30:	d824      	bhi.n	8011b7c <_printf_float+0x178>
 8011b32:	3901      	subs	r1, #1
 8011b34:	4652      	mov	r2, sl
 8011b36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b3a:	9109      	str	r1, [sp, #36]	; 0x24
 8011b3c:	f7ff ff2e 	bl	801199c <__exponent>
 8011b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b42:	1813      	adds	r3, r2, r0
 8011b44:	2a01      	cmp	r2, #1
 8011b46:	4681      	mov	r9, r0
 8011b48:	6123      	str	r3, [r4, #16]
 8011b4a:	dc02      	bgt.n	8011b52 <_printf_float+0x14e>
 8011b4c:	6822      	ldr	r2, [r4, #0]
 8011b4e:	07d1      	lsls	r1, r2, #31
 8011b50:	d501      	bpl.n	8011b56 <_printf_float+0x152>
 8011b52:	3301      	adds	r3, #1
 8011b54:	6123      	str	r3, [r4, #16]
 8011b56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d0a5      	beq.n	8011aaa <_printf_float+0xa6>
 8011b5e:	232d      	movs	r3, #45	; 0x2d
 8011b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b64:	e7a1      	b.n	8011aaa <_printf_float+0xa6>
 8011b66:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011b6a:	f000 8177 	beq.w	8011e5c <_printf_float+0x458>
 8011b6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011b72:	d1bb      	bne.n	8011aec <_printf_float+0xe8>
 8011b74:	2900      	cmp	r1, #0
 8011b76:	d1b9      	bne.n	8011aec <_printf_float+0xe8>
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e7b6      	b.n	8011aea <_printf_float+0xe6>
 8011b7c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011b80:	d119      	bne.n	8011bb6 <_printf_float+0x1b2>
 8011b82:	2900      	cmp	r1, #0
 8011b84:	6863      	ldr	r3, [r4, #4]
 8011b86:	dd0c      	ble.n	8011ba2 <_printf_float+0x19e>
 8011b88:	6121      	str	r1, [r4, #16]
 8011b8a:	b913      	cbnz	r3, 8011b92 <_printf_float+0x18e>
 8011b8c:	6822      	ldr	r2, [r4, #0]
 8011b8e:	07d2      	lsls	r2, r2, #31
 8011b90:	d502      	bpl.n	8011b98 <_printf_float+0x194>
 8011b92:	3301      	adds	r3, #1
 8011b94:	440b      	add	r3, r1
 8011b96:	6123      	str	r3, [r4, #16]
 8011b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8011b9c:	f04f 0900 	mov.w	r9, #0
 8011ba0:	e7d9      	b.n	8011b56 <_printf_float+0x152>
 8011ba2:	b913      	cbnz	r3, 8011baa <_printf_float+0x1a6>
 8011ba4:	6822      	ldr	r2, [r4, #0]
 8011ba6:	07d0      	lsls	r0, r2, #31
 8011ba8:	d501      	bpl.n	8011bae <_printf_float+0x1aa>
 8011baa:	3302      	adds	r3, #2
 8011bac:	e7f3      	b.n	8011b96 <_printf_float+0x192>
 8011bae:	2301      	movs	r3, #1
 8011bb0:	e7f1      	b.n	8011b96 <_printf_float+0x192>
 8011bb2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011bb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	db05      	blt.n	8011bca <_printf_float+0x1c6>
 8011bbe:	6822      	ldr	r2, [r4, #0]
 8011bc0:	6123      	str	r3, [r4, #16]
 8011bc2:	07d1      	lsls	r1, r2, #31
 8011bc4:	d5e8      	bpl.n	8011b98 <_printf_float+0x194>
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	e7e5      	b.n	8011b96 <_printf_float+0x192>
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	bfd4      	ite	le
 8011bce:	f1c3 0302 	rsble	r3, r3, #2
 8011bd2:	2301      	movgt	r3, #1
 8011bd4:	4413      	add	r3, r2
 8011bd6:	e7de      	b.n	8011b96 <_printf_float+0x192>
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	055a      	lsls	r2, r3, #21
 8011bdc:	d407      	bmi.n	8011bee <_printf_float+0x1ea>
 8011bde:	6923      	ldr	r3, [r4, #16]
 8011be0:	4642      	mov	r2, r8
 8011be2:	4631      	mov	r1, r6
 8011be4:	4628      	mov	r0, r5
 8011be6:	47b8      	blx	r7
 8011be8:	3001      	adds	r0, #1
 8011bea:	d12b      	bne.n	8011c44 <_printf_float+0x240>
 8011bec:	e767      	b.n	8011abe <_printf_float+0xba>
 8011bee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011bf2:	f240 80dc 	bls.w	8011dae <_printf_float+0x3aa>
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011bfe:	f7f6 fe9b 	bl	8008938 <__aeabi_dcmpeq>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d033      	beq.n	8011c6e <_printf_float+0x26a>
 8011c06:	2301      	movs	r3, #1
 8011c08:	4a41      	ldr	r2, [pc, #260]	; (8011d10 <_printf_float+0x30c>)
 8011c0a:	4631      	mov	r1, r6
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	47b8      	blx	r7
 8011c10:	3001      	adds	r0, #1
 8011c12:	f43f af54 	beq.w	8011abe <_printf_float+0xba>
 8011c16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	db02      	blt.n	8011c24 <_printf_float+0x220>
 8011c1e:	6823      	ldr	r3, [r4, #0]
 8011c20:	07d8      	lsls	r0, r3, #31
 8011c22:	d50f      	bpl.n	8011c44 <_printf_float+0x240>
 8011c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c28:	4631      	mov	r1, r6
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	47b8      	blx	r7
 8011c2e:	3001      	adds	r0, #1
 8011c30:	f43f af45 	beq.w	8011abe <_printf_float+0xba>
 8011c34:	f04f 0800 	mov.w	r8, #0
 8011c38:	f104 091a 	add.w	r9, r4, #26
 8011c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c3e:	3b01      	subs	r3, #1
 8011c40:	4543      	cmp	r3, r8
 8011c42:	dc09      	bgt.n	8011c58 <_printf_float+0x254>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	079b      	lsls	r3, r3, #30
 8011c48:	f100 8103 	bmi.w	8011e52 <_printf_float+0x44e>
 8011c4c:	68e0      	ldr	r0, [r4, #12]
 8011c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c50:	4298      	cmp	r0, r3
 8011c52:	bfb8      	it	lt
 8011c54:	4618      	movlt	r0, r3
 8011c56:	e734      	b.n	8011ac2 <_printf_float+0xbe>
 8011c58:	2301      	movs	r3, #1
 8011c5a:	464a      	mov	r2, r9
 8011c5c:	4631      	mov	r1, r6
 8011c5e:	4628      	mov	r0, r5
 8011c60:	47b8      	blx	r7
 8011c62:	3001      	adds	r0, #1
 8011c64:	f43f af2b 	beq.w	8011abe <_printf_float+0xba>
 8011c68:	f108 0801 	add.w	r8, r8, #1
 8011c6c:	e7e6      	b.n	8011c3c <_printf_float+0x238>
 8011c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	dc2b      	bgt.n	8011ccc <_printf_float+0x2c8>
 8011c74:	2301      	movs	r3, #1
 8011c76:	4a26      	ldr	r2, [pc, #152]	; (8011d10 <_printf_float+0x30c>)
 8011c78:	4631      	mov	r1, r6
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	47b8      	blx	r7
 8011c7e:	3001      	adds	r0, #1
 8011c80:	f43f af1d 	beq.w	8011abe <_printf_float+0xba>
 8011c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c86:	b923      	cbnz	r3, 8011c92 <_printf_float+0x28e>
 8011c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c8a:	b913      	cbnz	r3, 8011c92 <_printf_float+0x28e>
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	07d9      	lsls	r1, r3, #31
 8011c90:	d5d8      	bpl.n	8011c44 <_printf_float+0x240>
 8011c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c96:	4631      	mov	r1, r6
 8011c98:	4628      	mov	r0, r5
 8011c9a:	47b8      	blx	r7
 8011c9c:	3001      	adds	r0, #1
 8011c9e:	f43f af0e 	beq.w	8011abe <_printf_float+0xba>
 8011ca2:	f04f 0900 	mov.w	r9, #0
 8011ca6:	f104 0a1a 	add.w	sl, r4, #26
 8011caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cac:	425b      	negs	r3, r3
 8011cae:	454b      	cmp	r3, r9
 8011cb0:	dc01      	bgt.n	8011cb6 <_printf_float+0x2b2>
 8011cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cb4:	e794      	b.n	8011be0 <_printf_float+0x1dc>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	4652      	mov	r2, sl
 8011cba:	4631      	mov	r1, r6
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	47b8      	blx	r7
 8011cc0:	3001      	adds	r0, #1
 8011cc2:	f43f aefc 	beq.w	8011abe <_printf_float+0xba>
 8011cc6:	f109 0901 	add.w	r9, r9, #1
 8011cca:	e7ee      	b.n	8011caa <_printf_float+0x2a6>
 8011ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	bfa8      	it	ge
 8011cd4:	461a      	movge	r2, r3
 8011cd6:	2a00      	cmp	r2, #0
 8011cd8:	4691      	mov	r9, r2
 8011cda:	dd07      	ble.n	8011cec <_printf_float+0x2e8>
 8011cdc:	4613      	mov	r3, r2
 8011cde:	4631      	mov	r1, r6
 8011ce0:	4642      	mov	r2, r8
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	47b8      	blx	r7
 8011ce6:	3001      	adds	r0, #1
 8011ce8:	f43f aee9 	beq.w	8011abe <_printf_float+0xba>
 8011cec:	f104 031a 	add.w	r3, r4, #26
 8011cf0:	f04f 0b00 	mov.w	fp, #0
 8011cf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cf8:	9306      	str	r3, [sp, #24]
 8011cfa:	e015      	b.n	8011d28 <_printf_float+0x324>
 8011cfc:	7fefffff 	.word	0x7fefffff
 8011d00:	080140d4 	.word	0x080140d4
 8011d04:	080140d0 	.word	0x080140d0
 8011d08:	080140dc 	.word	0x080140dc
 8011d0c:	080140d8 	.word	0x080140d8
 8011d10:	080140e0 	.word	0x080140e0
 8011d14:	2301      	movs	r3, #1
 8011d16:	9a06      	ldr	r2, [sp, #24]
 8011d18:	4631      	mov	r1, r6
 8011d1a:	4628      	mov	r0, r5
 8011d1c:	47b8      	blx	r7
 8011d1e:	3001      	adds	r0, #1
 8011d20:	f43f aecd 	beq.w	8011abe <_printf_float+0xba>
 8011d24:	f10b 0b01 	add.w	fp, fp, #1
 8011d28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011d2c:	ebaa 0309 	sub.w	r3, sl, r9
 8011d30:	455b      	cmp	r3, fp
 8011d32:	dcef      	bgt.n	8011d14 <_printf_float+0x310>
 8011d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	44d0      	add	r8, sl
 8011d3c:	db15      	blt.n	8011d6a <_printf_float+0x366>
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	07da      	lsls	r2, r3, #31
 8011d42:	d412      	bmi.n	8011d6a <_printf_float+0x366>
 8011d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d48:	eba3 020a 	sub.w	r2, r3, sl
 8011d4c:	eba3 0a01 	sub.w	sl, r3, r1
 8011d50:	4592      	cmp	sl, r2
 8011d52:	bfa8      	it	ge
 8011d54:	4692      	movge	sl, r2
 8011d56:	f1ba 0f00 	cmp.w	sl, #0
 8011d5a:	dc0e      	bgt.n	8011d7a <_printf_float+0x376>
 8011d5c:	f04f 0800 	mov.w	r8, #0
 8011d60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d64:	f104 091a 	add.w	r9, r4, #26
 8011d68:	e019      	b.n	8011d9e <_printf_float+0x39a>
 8011d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d6e:	4631      	mov	r1, r6
 8011d70:	4628      	mov	r0, r5
 8011d72:	47b8      	blx	r7
 8011d74:	3001      	adds	r0, #1
 8011d76:	d1e5      	bne.n	8011d44 <_printf_float+0x340>
 8011d78:	e6a1      	b.n	8011abe <_printf_float+0xba>
 8011d7a:	4653      	mov	r3, sl
 8011d7c:	4642      	mov	r2, r8
 8011d7e:	4631      	mov	r1, r6
 8011d80:	4628      	mov	r0, r5
 8011d82:	47b8      	blx	r7
 8011d84:	3001      	adds	r0, #1
 8011d86:	d1e9      	bne.n	8011d5c <_printf_float+0x358>
 8011d88:	e699      	b.n	8011abe <_printf_float+0xba>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	464a      	mov	r2, r9
 8011d8e:	4631      	mov	r1, r6
 8011d90:	4628      	mov	r0, r5
 8011d92:	47b8      	blx	r7
 8011d94:	3001      	adds	r0, #1
 8011d96:	f43f ae92 	beq.w	8011abe <_printf_float+0xba>
 8011d9a:	f108 0801 	add.w	r8, r8, #1
 8011d9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011da2:	1a9b      	subs	r3, r3, r2
 8011da4:	eba3 030a 	sub.w	r3, r3, sl
 8011da8:	4543      	cmp	r3, r8
 8011daa:	dcee      	bgt.n	8011d8a <_printf_float+0x386>
 8011dac:	e74a      	b.n	8011c44 <_printf_float+0x240>
 8011dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011db0:	2a01      	cmp	r2, #1
 8011db2:	dc01      	bgt.n	8011db8 <_printf_float+0x3b4>
 8011db4:	07db      	lsls	r3, r3, #31
 8011db6:	d53a      	bpl.n	8011e2e <_printf_float+0x42a>
 8011db8:	2301      	movs	r3, #1
 8011dba:	4642      	mov	r2, r8
 8011dbc:	4631      	mov	r1, r6
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	47b8      	blx	r7
 8011dc2:	3001      	adds	r0, #1
 8011dc4:	f43f ae7b 	beq.w	8011abe <_printf_float+0xba>
 8011dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dcc:	4631      	mov	r1, r6
 8011dce:	4628      	mov	r0, r5
 8011dd0:	47b8      	blx	r7
 8011dd2:	3001      	adds	r0, #1
 8011dd4:	f108 0801 	add.w	r8, r8, #1
 8011dd8:	f43f ae71 	beq.w	8011abe <_printf_float+0xba>
 8011ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dde:	2200      	movs	r2, #0
 8011de0:	f103 3aff 	add.w	sl, r3, #4294967295
 8011de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011de8:	2300      	movs	r3, #0
 8011dea:	f7f6 fda5 	bl	8008938 <__aeabi_dcmpeq>
 8011dee:	b9c8      	cbnz	r0, 8011e24 <_printf_float+0x420>
 8011df0:	4653      	mov	r3, sl
 8011df2:	4642      	mov	r2, r8
 8011df4:	4631      	mov	r1, r6
 8011df6:	4628      	mov	r0, r5
 8011df8:	47b8      	blx	r7
 8011dfa:	3001      	adds	r0, #1
 8011dfc:	d10e      	bne.n	8011e1c <_printf_float+0x418>
 8011dfe:	e65e      	b.n	8011abe <_printf_float+0xba>
 8011e00:	2301      	movs	r3, #1
 8011e02:	4652      	mov	r2, sl
 8011e04:	4631      	mov	r1, r6
 8011e06:	4628      	mov	r0, r5
 8011e08:	47b8      	blx	r7
 8011e0a:	3001      	adds	r0, #1
 8011e0c:	f43f ae57 	beq.w	8011abe <_printf_float+0xba>
 8011e10:	f108 0801 	add.w	r8, r8, #1
 8011e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e16:	3b01      	subs	r3, #1
 8011e18:	4543      	cmp	r3, r8
 8011e1a:	dcf1      	bgt.n	8011e00 <_printf_float+0x3fc>
 8011e1c:	464b      	mov	r3, r9
 8011e1e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e22:	e6de      	b.n	8011be2 <_printf_float+0x1de>
 8011e24:	f04f 0800 	mov.w	r8, #0
 8011e28:	f104 0a1a 	add.w	sl, r4, #26
 8011e2c:	e7f2      	b.n	8011e14 <_printf_float+0x410>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e7df      	b.n	8011df2 <_printf_float+0x3ee>
 8011e32:	2301      	movs	r3, #1
 8011e34:	464a      	mov	r2, r9
 8011e36:	4631      	mov	r1, r6
 8011e38:	4628      	mov	r0, r5
 8011e3a:	47b8      	blx	r7
 8011e3c:	3001      	adds	r0, #1
 8011e3e:	f43f ae3e 	beq.w	8011abe <_printf_float+0xba>
 8011e42:	f108 0801 	add.w	r8, r8, #1
 8011e46:	68e3      	ldr	r3, [r4, #12]
 8011e48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e4a:	1a9b      	subs	r3, r3, r2
 8011e4c:	4543      	cmp	r3, r8
 8011e4e:	dcf0      	bgt.n	8011e32 <_printf_float+0x42e>
 8011e50:	e6fc      	b.n	8011c4c <_printf_float+0x248>
 8011e52:	f04f 0800 	mov.w	r8, #0
 8011e56:	f104 0919 	add.w	r9, r4, #25
 8011e5a:	e7f4      	b.n	8011e46 <_printf_float+0x442>
 8011e5c:	2900      	cmp	r1, #0
 8011e5e:	f43f ae8b 	beq.w	8011b78 <_printf_float+0x174>
 8011e62:	2300      	movs	r3, #0
 8011e64:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011e68:	ab09      	add	r3, sp, #36	; 0x24
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	ec49 8b10 	vmov	d0, r8, r9
 8011e70:	6022      	str	r2, [r4, #0]
 8011e72:	f8cd a004 	str.w	sl, [sp, #4]
 8011e76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f7ff fd2d 	bl	80118da <__cvt>
 8011e80:	4680      	mov	r8, r0
 8011e82:	e648      	b.n	8011b16 <_printf_float+0x112>

08011e84 <_printf_common>:
 8011e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e88:	4691      	mov	r9, r2
 8011e8a:	461f      	mov	r7, r3
 8011e8c:	688a      	ldr	r2, [r1, #8]
 8011e8e:	690b      	ldr	r3, [r1, #16]
 8011e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e94:	4293      	cmp	r3, r2
 8011e96:	bfb8      	it	lt
 8011e98:	4613      	movlt	r3, r2
 8011e9a:	f8c9 3000 	str.w	r3, [r9]
 8011e9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ea2:	4606      	mov	r6, r0
 8011ea4:	460c      	mov	r4, r1
 8011ea6:	b112      	cbz	r2, 8011eae <_printf_common+0x2a>
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	f8c9 3000 	str.w	r3, [r9]
 8011eae:	6823      	ldr	r3, [r4, #0]
 8011eb0:	0699      	lsls	r1, r3, #26
 8011eb2:	bf42      	ittt	mi
 8011eb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011eb8:	3302      	addmi	r3, #2
 8011eba:	f8c9 3000 	strmi.w	r3, [r9]
 8011ebe:	6825      	ldr	r5, [r4, #0]
 8011ec0:	f015 0506 	ands.w	r5, r5, #6
 8011ec4:	d107      	bne.n	8011ed6 <_printf_common+0x52>
 8011ec6:	f104 0a19 	add.w	sl, r4, #25
 8011eca:	68e3      	ldr	r3, [r4, #12]
 8011ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8011ed0:	1a9b      	subs	r3, r3, r2
 8011ed2:	42ab      	cmp	r3, r5
 8011ed4:	dc28      	bgt.n	8011f28 <_printf_common+0xa4>
 8011ed6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011eda:	6822      	ldr	r2, [r4, #0]
 8011edc:	3300      	adds	r3, #0
 8011ede:	bf18      	it	ne
 8011ee0:	2301      	movne	r3, #1
 8011ee2:	0692      	lsls	r2, r2, #26
 8011ee4:	d42d      	bmi.n	8011f42 <_printf_common+0xbe>
 8011ee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011eea:	4639      	mov	r1, r7
 8011eec:	4630      	mov	r0, r6
 8011eee:	47c0      	blx	r8
 8011ef0:	3001      	adds	r0, #1
 8011ef2:	d020      	beq.n	8011f36 <_printf_common+0xb2>
 8011ef4:	6823      	ldr	r3, [r4, #0]
 8011ef6:	68e5      	ldr	r5, [r4, #12]
 8011ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8011efc:	f003 0306 	and.w	r3, r3, #6
 8011f00:	2b04      	cmp	r3, #4
 8011f02:	bf08      	it	eq
 8011f04:	1aad      	subeq	r5, r5, r2
 8011f06:	68a3      	ldr	r3, [r4, #8]
 8011f08:	6922      	ldr	r2, [r4, #16]
 8011f0a:	bf0c      	ite	eq
 8011f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f10:	2500      	movne	r5, #0
 8011f12:	4293      	cmp	r3, r2
 8011f14:	bfc4      	itt	gt
 8011f16:	1a9b      	subgt	r3, r3, r2
 8011f18:	18ed      	addgt	r5, r5, r3
 8011f1a:	f04f 0900 	mov.w	r9, #0
 8011f1e:	341a      	adds	r4, #26
 8011f20:	454d      	cmp	r5, r9
 8011f22:	d11a      	bne.n	8011f5a <_printf_common+0xd6>
 8011f24:	2000      	movs	r0, #0
 8011f26:	e008      	b.n	8011f3a <_printf_common+0xb6>
 8011f28:	2301      	movs	r3, #1
 8011f2a:	4652      	mov	r2, sl
 8011f2c:	4639      	mov	r1, r7
 8011f2e:	4630      	mov	r0, r6
 8011f30:	47c0      	blx	r8
 8011f32:	3001      	adds	r0, #1
 8011f34:	d103      	bne.n	8011f3e <_printf_common+0xba>
 8011f36:	f04f 30ff 	mov.w	r0, #4294967295
 8011f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f3e:	3501      	adds	r5, #1
 8011f40:	e7c3      	b.n	8011eca <_printf_common+0x46>
 8011f42:	18e1      	adds	r1, r4, r3
 8011f44:	1c5a      	adds	r2, r3, #1
 8011f46:	2030      	movs	r0, #48	; 0x30
 8011f48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f4c:	4422      	add	r2, r4
 8011f4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f56:	3302      	adds	r3, #2
 8011f58:	e7c5      	b.n	8011ee6 <_printf_common+0x62>
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	4622      	mov	r2, r4
 8011f5e:	4639      	mov	r1, r7
 8011f60:	4630      	mov	r0, r6
 8011f62:	47c0      	blx	r8
 8011f64:	3001      	adds	r0, #1
 8011f66:	d0e6      	beq.n	8011f36 <_printf_common+0xb2>
 8011f68:	f109 0901 	add.w	r9, r9, #1
 8011f6c:	e7d8      	b.n	8011f20 <_printf_common+0x9c>
	...

08011f70 <_printf_i>:
 8011f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011f78:	460c      	mov	r4, r1
 8011f7a:	7e09      	ldrb	r1, [r1, #24]
 8011f7c:	b085      	sub	sp, #20
 8011f7e:	296e      	cmp	r1, #110	; 0x6e
 8011f80:	4617      	mov	r7, r2
 8011f82:	4606      	mov	r6, r0
 8011f84:	4698      	mov	r8, r3
 8011f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f88:	f000 80b3 	beq.w	80120f2 <_printf_i+0x182>
 8011f8c:	d822      	bhi.n	8011fd4 <_printf_i+0x64>
 8011f8e:	2963      	cmp	r1, #99	; 0x63
 8011f90:	d036      	beq.n	8012000 <_printf_i+0x90>
 8011f92:	d80a      	bhi.n	8011faa <_printf_i+0x3a>
 8011f94:	2900      	cmp	r1, #0
 8011f96:	f000 80b9 	beq.w	801210c <_printf_i+0x19c>
 8011f9a:	2958      	cmp	r1, #88	; 0x58
 8011f9c:	f000 8083 	beq.w	80120a6 <_printf_i+0x136>
 8011fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fa4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011fa8:	e032      	b.n	8012010 <_printf_i+0xa0>
 8011faa:	2964      	cmp	r1, #100	; 0x64
 8011fac:	d001      	beq.n	8011fb2 <_printf_i+0x42>
 8011fae:	2969      	cmp	r1, #105	; 0x69
 8011fb0:	d1f6      	bne.n	8011fa0 <_printf_i+0x30>
 8011fb2:	6820      	ldr	r0, [r4, #0]
 8011fb4:	6813      	ldr	r3, [r2, #0]
 8011fb6:	0605      	lsls	r5, r0, #24
 8011fb8:	f103 0104 	add.w	r1, r3, #4
 8011fbc:	d52a      	bpl.n	8012014 <_printf_i+0xa4>
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	6011      	str	r1, [r2, #0]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	da03      	bge.n	8011fce <_printf_i+0x5e>
 8011fc6:	222d      	movs	r2, #45	; 0x2d
 8011fc8:	425b      	negs	r3, r3
 8011fca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011fce:	486f      	ldr	r0, [pc, #444]	; (801218c <_printf_i+0x21c>)
 8011fd0:	220a      	movs	r2, #10
 8011fd2:	e039      	b.n	8012048 <_printf_i+0xd8>
 8011fd4:	2973      	cmp	r1, #115	; 0x73
 8011fd6:	f000 809d 	beq.w	8012114 <_printf_i+0x1a4>
 8011fda:	d808      	bhi.n	8011fee <_printf_i+0x7e>
 8011fdc:	296f      	cmp	r1, #111	; 0x6f
 8011fde:	d020      	beq.n	8012022 <_printf_i+0xb2>
 8011fe0:	2970      	cmp	r1, #112	; 0x70
 8011fe2:	d1dd      	bne.n	8011fa0 <_printf_i+0x30>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	f043 0320 	orr.w	r3, r3, #32
 8011fea:	6023      	str	r3, [r4, #0]
 8011fec:	e003      	b.n	8011ff6 <_printf_i+0x86>
 8011fee:	2975      	cmp	r1, #117	; 0x75
 8011ff0:	d017      	beq.n	8012022 <_printf_i+0xb2>
 8011ff2:	2978      	cmp	r1, #120	; 0x78
 8011ff4:	d1d4      	bne.n	8011fa0 <_printf_i+0x30>
 8011ff6:	2378      	movs	r3, #120	; 0x78
 8011ff8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ffc:	4864      	ldr	r0, [pc, #400]	; (8012190 <_printf_i+0x220>)
 8011ffe:	e055      	b.n	80120ac <_printf_i+0x13c>
 8012000:	6813      	ldr	r3, [r2, #0]
 8012002:	1d19      	adds	r1, r3, #4
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	6011      	str	r1, [r2, #0]
 8012008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801200c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012010:	2301      	movs	r3, #1
 8012012:	e08c      	b.n	801212e <_printf_i+0x1be>
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	6011      	str	r1, [r2, #0]
 8012018:	f010 0f40 	tst.w	r0, #64	; 0x40
 801201c:	bf18      	it	ne
 801201e:	b21b      	sxthne	r3, r3
 8012020:	e7cf      	b.n	8011fc2 <_printf_i+0x52>
 8012022:	6813      	ldr	r3, [r2, #0]
 8012024:	6825      	ldr	r5, [r4, #0]
 8012026:	1d18      	adds	r0, r3, #4
 8012028:	6010      	str	r0, [r2, #0]
 801202a:	0628      	lsls	r0, r5, #24
 801202c:	d501      	bpl.n	8012032 <_printf_i+0xc2>
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	e002      	b.n	8012038 <_printf_i+0xc8>
 8012032:	0668      	lsls	r0, r5, #25
 8012034:	d5fb      	bpl.n	801202e <_printf_i+0xbe>
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	4854      	ldr	r0, [pc, #336]	; (801218c <_printf_i+0x21c>)
 801203a:	296f      	cmp	r1, #111	; 0x6f
 801203c:	bf14      	ite	ne
 801203e:	220a      	movne	r2, #10
 8012040:	2208      	moveq	r2, #8
 8012042:	2100      	movs	r1, #0
 8012044:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012048:	6865      	ldr	r5, [r4, #4]
 801204a:	60a5      	str	r5, [r4, #8]
 801204c:	2d00      	cmp	r5, #0
 801204e:	f2c0 8095 	blt.w	801217c <_printf_i+0x20c>
 8012052:	6821      	ldr	r1, [r4, #0]
 8012054:	f021 0104 	bic.w	r1, r1, #4
 8012058:	6021      	str	r1, [r4, #0]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d13d      	bne.n	80120da <_printf_i+0x16a>
 801205e:	2d00      	cmp	r5, #0
 8012060:	f040 808e 	bne.w	8012180 <_printf_i+0x210>
 8012064:	4665      	mov	r5, ip
 8012066:	2a08      	cmp	r2, #8
 8012068:	d10b      	bne.n	8012082 <_printf_i+0x112>
 801206a:	6823      	ldr	r3, [r4, #0]
 801206c:	07db      	lsls	r3, r3, #31
 801206e:	d508      	bpl.n	8012082 <_printf_i+0x112>
 8012070:	6923      	ldr	r3, [r4, #16]
 8012072:	6862      	ldr	r2, [r4, #4]
 8012074:	429a      	cmp	r2, r3
 8012076:	bfde      	ittt	le
 8012078:	2330      	movle	r3, #48	; 0x30
 801207a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801207e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012082:	ebac 0305 	sub.w	r3, ip, r5
 8012086:	6123      	str	r3, [r4, #16]
 8012088:	f8cd 8000 	str.w	r8, [sp]
 801208c:	463b      	mov	r3, r7
 801208e:	aa03      	add	r2, sp, #12
 8012090:	4621      	mov	r1, r4
 8012092:	4630      	mov	r0, r6
 8012094:	f7ff fef6 	bl	8011e84 <_printf_common>
 8012098:	3001      	adds	r0, #1
 801209a:	d14d      	bne.n	8012138 <_printf_i+0x1c8>
 801209c:	f04f 30ff 	mov.w	r0, #4294967295
 80120a0:	b005      	add	sp, #20
 80120a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120a6:	4839      	ldr	r0, [pc, #228]	; (801218c <_printf_i+0x21c>)
 80120a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80120ac:	6813      	ldr	r3, [r2, #0]
 80120ae:	6821      	ldr	r1, [r4, #0]
 80120b0:	1d1d      	adds	r5, r3, #4
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	6015      	str	r5, [r2, #0]
 80120b6:	060a      	lsls	r2, r1, #24
 80120b8:	d50b      	bpl.n	80120d2 <_printf_i+0x162>
 80120ba:	07ca      	lsls	r2, r1, #31
 80120bc:	bf44      	itt	mi
 80120be:	f041 0120 	orrmi.w	r1, r1, #32
 80120c2:	6021      	strmi	r1, [r4, #0]
 80120c4:	b91b      	cbnz	r3, 80120ce <_printf_i+0x15e>
 80120c6:	6822      	ldr	r2, [r4, #0]
 80120c8:	f022 0220 	bic.w	r2, r2, #32
 80120cc:	6022      	str	r2, [r4, #0]
 80120ce:	2210      	movs	r2, #16
 80120d0:	e7b7      	b.n	8012042 <_printf_i+0xd2>
 80120d2:	064d      	lsls	r5, r1, #25
 80120d4:	bf48      	it	mi
 80120d6:	b29b      	uxthmi	r3, r3
 80120d8:	e7ef      	b.n	80120ba <_printf_i+0x14a>
 80120da:	4665      	mov	r5, ip
 80120dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80120e0:	fb02 3311 	mls	r3, r2, r1, r3
 80120e4:	5cc3      	ldrb	r3, [r0, r3]
 80120e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80120ea:	460b      	mov	r3, r1
 80120ec:	2900      	cmp	r1, #0
 80120ee:	d1f5      	bne.n	80120dc <_printf_i+0x16c>
 80120f0:	e7b9      	b.n	8012066 <_printf_i+0xf6>
 80120f2:	6813      	ldr	r3, [r2, #0]
 80120f4:	6825      	ldr	r5, [r4, #0]
 80120f6:	6961      	ldr	r1, [r4, #20]
 80120f8:	1d18      	adds	r0, r3, #4
 80120fa:	6010      	str	r0, [r2, #0]
 80120fc:	0628      	lsls	r0, r5, #24
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	d501      	bpl.n	8012106 <_printf_i+0x196>
 8012102:	6019      	str	r1, [r3, #0]
 8012104:	e002      	b.n	801210c <_printf_i+0x19c>
 8012106:	066a      	lsls	r2, r5, #25
 8012108:	d5fb      	bpl.n	8012102 <_printf_i+0x192>
 801210a:	8019      	strh	r1, [r3, #0]
 801210c:	2300      	movs	r3, #0
 801210e:	6123      	str	r3, [r4, #16]
 8012110:	4665      	mov	r5, ip
 8012112:	e7b9      	b.n	8012088 <_printf_i+0x118>
 8012114:	6813      	ldr	r3, [r2, #0]
 8012116:	1d19      	adds	r1, r3, #4
 8012118:	6011      	str	r1, [r2, #0]
 801211a:	681d      	ldr	r5, [r3, #0]
 801211c:	6862      	ldr	r2, [r4, #4]
 801211e:	2100      	movs	r1, #0
 8012120:	4628      	mov	r0, r5
 8012122:	f7f5 ff95 	bl	8008050 <memchr>
 8012126:	b108      	cbz	r0, 801212c <_printf_i+0x1bc>
 8012128:	1b40      	subs	r0, r0, r5
 801212a:	6060      	str	r0, [r4, #4]
 801212c:	6863      	ldr	r3, [r4, #4]
 801212e:	6123      	str	r3, [r4, #16]
 8012130:	2300      	movs	r3, #0
 8012132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012136:	e7a7      	b.n	8012088 <_printf_i+0x118>
 8012138:	6923      	ldr	r3, [r4, #16]
 801213a:	462a      	mov	r2, r5
 801213c:	4639      	mov	r1, r7
 801213e:	4630      	mov	r0, r6
 8012140:	47c0      	blx	r8
 8012142:	3001      	adds	r0, #1
 8012144:	d0aa      	beq.n	801209c <_printf_i+0x12c>
 8012146:	6823      	ldr	r3, [r4, #0]
 8012148:	079b      	lsls	r3, r3, #30
 801214a:	d413      	bmi.n	8012174 <_printf_i+0x204>
 801214c:	68e0      	ldr	r0, [r4, #12]
 801214e:	9b03      	ldr	r3, [sp, #12]
 8012150:	4298      	cmp	r0, r3
 8012152:	bfb8      	it	lt
 8012154:	4618      	movlt	r0, r3
 8012156:	e7a3      	b.n	80120a0 <_printf_i+0x130>
 8012158:	2301      	movs	r3, #1
 801215a:	464a      	mov	r2, r9
 801215c:	4639      	mov	r1, r7
 801215e:	4630      	mov	r0, r6
 8012160:	47c0      	blx	r8
 8012162:	3001      	adds	r0, #1
 8012164:	d09a      	beq.n	801209c <_printf_i+0x12c>
 8012166:	3501      	adds	r5, #1
 8012168:	68e3      	ldr	r3, [r4, #12]
 801216a:	9a03      	ldr	r2, [sp, #12]
 801216c:	1a9b      	subs	r3, r3, r2
 801216e:	42ab      	cmp	r3, r5
 8012170:	dcf2      	bgt.n	8012158 <_printf_i+0x1e8>
 8012172:	e7eb      	b.n	801214c <_printf_i+0x1dc>
 8012174:	2500      	movs	r5, #0
 8012176:	f104 0919 	add.w	r9, r4, #25
 801217a:	e7f5      	b.n	8012168 <_printf_i+0x1f8>
 801217c:	2b00      	cmp	r3, #0
 801217e:	d1ac      	bne.n	80120da <_printf_i+0x16a>
 8012180:	7803      	ldrb	r3, [r0, #0]
 8012182:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012186:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801218a:	e76c      	b.n	8012066 <_printf_i+0xf6>
 801218c:	080140e2 	.word	0x080140e2
 8012190:	080140f3 	.word	0x080140f3

08012194 <iprintf>:
 8012194:	b40f      	push	{r0, r1, r2, r3}
 8012196:	4b0a      	ldr	r3, [pc, #40]	; (80121c0 <iprintf+0x2c>)
 8012198:	b513      	push	{r0, r1, r4, lr}
 801219a:	681c      	ldr	r4, [r3, #0]
 801219c:	b124      	cbz	r4, 80121a8 <iprintf+0x14>
 801219e:	69a3      	ldr	r3, [r4, #24]
 80121a0:	b913      	cbnz	r3, 80121a8 <iprintf+0x14>
 80121a2:	4620      	mov	r0, r4
 80121a4:	f001 f868 	bl	8013278 <__sinit>
 80121a8:	ab05      	add	r3, sp, #20
 80121aa:	9a04      	ldr	r2, [sp, #16]
 80121ac:	68a1      	ldr	r1, [r4, #8]
 80121ae:	9301      	str	r3, [sp, #4]
 80121b0:	4620      	mov	r0, r4
 80121b2:	f001 fd21 	bl	8013bf8 <_vfiprintf_r>
 80121b6:	b002      	add	sp, #8
 80121b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121bc:	b004      	add	sp, #16
 80121be:	4770      	bx	lr
 80121c0:	20000010 	.word	0x20000010

080121c4 <_puts_r>:
 80121c4:	b570      	push	{r4, r5, r6, lr}
 80121c6:	460e      	mov	r6, r1
 80121c8:	4605      	mov	r5, r0
 80121ca:	b118      	cbz	r0, 80121d4 <_puts_r+0x10>
 80121cc:	6983      	ldr	r3, [r0, #24]
 80121ce:	b90b      	cbnz	r3, 80121d4 <_puts_r+0x10>
 80121d0:	f001 f852 	bl	8013278 <__sinit>
 80121d4:	69ab      	ldr	r3, [r5, #24]
 80121d6:	68ac      	ldr	r4, [r5, #8]
 80121d8:	b913      	cbnz	r3, 80121e0 <_puts_r+0x1c>
 80121da:	4628      	mov	r0, r5
 80121dc:	f001 f84c 	bl	8013278 <__sinit>
 80121e0:	4b23      	ldr	r3, [pc, #140]	; (8012270 <_puts_r+0xac>)
 80121e2:	429c      	cmp	r4, r3
 80121e4:	d117      	bne.n	8012216 <_puts_r+0x52>
 80121e6:	686c      	ldr	r4, [r5, #4]
 80121e8:	89a3      	ldrh	r3, [r4, #12]
 80121ea:	071b      	lsls	r3, r3, #28
 80121ec:	d51d      	bpl.n	801222a <_puts_r+0x66>
 80121ee:	6923      	ldr	r3, [r4, #16]
 80121f0:	b1db      	cbz	r3, 801222a <_puts_r+0x66>
 80121f2:	3e01      	subs	r6, #1
 80121f4:	68a3      	ldr	r3, [r4, #8]
 80121f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80121fa:	3b01      	subs	r3, #1
 80121fc:	60a3      	str	r3, [r4, #8]
 80121fe:	b9e9      	cbnz	r1, 801223c <_puts_r+0x78>
 8012200:	2b00      	cmp	r3, #0
 8012202:	da2e      	bge.n	8012262 <_puts_r+0x9e>
 8012204:	4622      	mov	r2, r4
 8012206:	210a      	movs	r1, #10
 8012208:	4628      	mov	r0, r5
 801220a:	f000 f83f 	bl	801228c <__swbuf_r>
 801220e:	3001      	adds	r0, #1
 8012210:	d011      	beq.n	8012236 <_puts_r+0x72>
 8012212:	200a      	movs	r0, #10
 8012214:	e011      	b.n	801223a <_puts_r+0x76>
 8012216:	4b17      	ldr	r3, [pc, #92]	; (8012274 <_puts_r+0xb0>)
 8012218:	429c      	cmp	r4, r3
 801221a:	d101      	bne.n	8012220 <_puts_r+0x5c>
 801221c:	68ac      	ldr	r4, [r5, #8]
 801221e:	e7e3      	b.n	80121e8 <_puts_r+0x24>
 8012220:	4b15      	ldr	r3, [pc, #84]	; (8012278 <_puts_r+0xb4>)
 8012222:	429c      	cmp	r4, r3
 8012224:	bf08      	it	eq
 8012226:	68ec      	ldreq	r4, [r5, #12]
 8012228:	e7de      	b.n	80121e8 <_puts_r+0x24>
 801222a:	4621      	mov	r1, r4
 801222c:	4628      	mov	r0, r5
 801222e:	f000 f87f 	bl	8012330 <__swsetup_r>
 8012232:	2800      	cmp	r0, #0
 8012234:	d0dd      	beq.n	80121f2 <_puts_r+0x2e>
 8012236:	f04f 30ff 	mov.w	r0, #4294967295
 801223a:	bd70      	pop	{r4, r5, r6, pc}
 801223c:	2b00      	cmp	r3, #0
 801223e:	da04      	bge.n	801224a <_puts_r+0x86>
 8012240:	69a2      	ldr	r2, [r4, #24]
 8012242:	429a      	cmp	r2, r3
 8012244:	dc06      	bgt.n	8012254 <_puts_r+0x90>
 8012246:	290a      	cmp	r1, #10
 8012248:	d004      	beq.n	8012254 <_puts_r+0x90>
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	1c5a      	adds	r2, r3, #1
 801224e:	6022      	str	r2, [r4, #0]
 8012250:	7019      	strb	r1, [r3, #0]
 8012252:	e7cf      	b.n	80121f4 <_puts_r+0x30>
 8012254:	4622      	mov	r2, r4
 8012256:	4628      	mov	r0, r5
 8012258:	f000 f818 	bl	801228c <__swbuf_r>
 801225c:	3001      	adds	r0, #1
 801225e:	d1c9      	bne.n	80121f4 <_puts_r+0x30>
 8012260:	e7e9      	b.n	8012236 <_puts_r+0x72>
 8012262:	6823      	ldr	r3, [r4, #0]
 8012264:	200a      	movs	r0, #10
 8012266:	1c5a      	adds	r2, r3, #1
 8012268:	6022      	str	r2, [r4, #0]
 801226a:	7018      	strb	r0, [r3, #0]
 801226c:	e7e5      	b.n	801223a <_puts_r+0x76>
 801226e:	bf00      	nop
 8012270:	08014134 	.word	0x08014134
 8012274:	08014154 	.word	0x08014154
 8012278:	08014114 	.word	0x08014114

0801227c <puts>:
 801227c:	4b02      	ldr	r3, [pc, #8]	; (8012288 <puts+0xc>)
 801227e:	4601      	mov	r1, r0
 8012280:	6818      	ldr	r0, [r3, #0]
 8012282:	f7ff bf9f 	b.w	80121c4 <_puts_r>
 8012286:	bf00      	nop
 8012288:	20000010 	.word	0x20000010

0801228c <__swbuf_r>:
 801228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801228e:	460e      	mov	r6, r1
 8012290:	4614      	mov	r4, r2
 8012292:	4605      	mov	r5, r0
 8012294:	b118      	cbz	r0, 801229e <__swbuf_r+0x12>
 8012296:	6983      	ldr	r3, [r0, #24]
 8012298:	b90b      	cbnz	r3, 801229e <__swbuf_r+0x12>
 801229a:	f000 ffed 	bl	8013278 <__sinit>
 801229e:	4b21      	ldr	r3, [pc, #132]	; (8012324 <__swbuf_r+0x98>)
 80122a0:	429c      	cmp	r4, r3
 80122a2:	d12a      	bne.n	80122fa <__swbuf_r+0x6e>
 80122a4:	686c      	ldr	r4, [r5, #4]
 80122a6:	69a3      	ldr	r3, [r4, #24]
 80122a8:	60a3      	str	r3, [r4, #8]
 80122aa:	89a3      	ldrh	r3, [r4, #12]
 80122ac:	071a      	lsls	r2, r3, #28
 80122ae:	d52e      	bpl.n	801230e <__swbuf_r+0x82>
 80122b0:	6923      	ldr	r3, [r4, #16]
 80122b2:	b363      	cbz	r3, 801230e <__swbuf_r+0x82>
 80122b4:	6923      	ldr	r3, [r4, #16]
 80122b6:	6820      	ldr	r0, [r4, #0]
 80122b8:	1ac0      	subs	r0, r0, r3
 80122ba:	6963      	ldr	r3, [r4, #20]
 80122bc:	b2f6      	uxtb	r6, r6
 80122be:	4283      	cmp	r3, r0
 80122c0:	4637      	mov	r7, r6
 80122c2:	dc04      	bgt.n	80122ce <__swbuf_r+0x42>
 80122c4:	4621      	mov	r1, r4
 80122c6:	4628      	mov	r0, r5
 80122c8:	f000 ff6c 	bl	80131a4 <_fflush_r>
 80122cc:	bb28      	cbnz	r0, 801231a <__swbuf_r+0x8e>
 80122ce:	68a3      	ldr	r3, [r4, #8]
 80122d0:	3b01      	subs	r3, #1
 80122d2:	60a3      	str	r3, [r4, #8]
 80122d4:	6823      	ldr	r3, [r4, #0]
 80122d6:	1c5a      	adds	r2, r3, #1
 80122d8:	6022      	str	r2, [r4, #0]
 80122da:	701e      	strb	r6, [r3, #0]
 80122dc:	6963      	ldr	r3, [r4, #20]
 80122de:	3001      	adds	r0, #1
 80122e0:	4283      	cmp	r3, r0
 80122e2:	d004      	beq.n	80122ee <__swbuf_r+0x62>
 80122e4:	89a3      	ldrh	r3, [r4, #12]
 80122e6:	07db      	lsls	r3, r3, #31
 80122e8:	d519      	bpl.n	801231e <__swbuf_r+0x92>
 80122ea:	2e0a      	cmp	r6, #10
 80122ec:	d117      	bne.n	801231e <__swbuf_r+0x92>
 80122ee:	4621      	mov	r1, r4
 80122f0:	4628      	mov	r0, r5
 80122f2:	f000 ff57 	bl	80131a4 <_fflush_r>
 80122f6:	b190      	cbz	r0, 801231e <__swbuf_r+0x92>
 80122f8:	e00f      	b.n	801231a <__swbuf_r+0x8e>
 80122fa:	4b0b      	ldr	r3, [pc, #44]	; (8012328 <__swbuf_r+0x9c>)
 80122fc:	429c      	cmp	r4, r3
 80122fe:	d101      	bne.n	8012304 <__swbuf_r+0x78>
 8012300:	68ac      	ldr	r4, [r5, #8]
 8012302:	e7d0      	b.n	80122a6 <__swbuf_r+0x1a>
 8012304:	4b09      	ldr	r3, [pc, #36]	; (801232c <__swbuf_r+0xa0>)
 8012306:	429c      	cmp	r4, r3
 8012308:	bf08      	it	eq
 801230a:	68ec      	ldreq	r4, [r5, #12]
 801230c:	e7cb      	b.n	80122a6 <__swbuf_r+0x1a>
 801230e:	4621      	mov	r1, r4
 8012310:	4628      	mov	r0, r5
 8012312:	f000 f80d 	bl	8012330 <__swsetup_r>
 8012316:	2800      	cmp	r0, #0
 8012318:	d0cc      	beq.n	80122b4 <__swbuf_r+0x28>
 801231a:	f04f 37ff 	mov.w	r7, #4294967295
 801231e:	4638      	mov	r0, r7
 8012320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012322:	bf00      	nop
 8012324:	08014134 	.word	0x08014134
 8012328:	08014154 	.word	0x08014154
 801232c:	08014114 	.word	0x08014114

08012330 <__swsetup_r>:
 8012330:	4b32      	ldr	r3, [pc, #200]	; (80123fc <__swsetup_r+0xcc>)
 8012332:	b570      	push	{r4, r5, r6, lr}
 8012334:	681d      	ldr	r5, [r3, #0]
 8012336:	4606      	mov	r6, r0
 8012338:	460c      	mov	r4, r1
 801233a:	b125      	cbz	r5, 8012346 <__swsetup_r+0x16>
 801233c:	69ab      	ldr	r3, [r5, #24]
 801233e:	b913      	cbnz	r3, 8012346 <__swsetup_r+0x16>
 8012340:	4628      	mov	r0, r5
 8012342:	f000 ff99 	bl	8013278 <__sinit>
 8012346:	4b2e      	ldr	r3, [pc, #184]	; (8012400 <__swsetup_r+0xd0>)
 8012348:	429c      	cmp	r4, r3
 801234a:	d10f      	bne.n	801236c <__swsetup_r+0x3c>
 801234c:	686c      	ldr	r4, [r5, #4]
 801234e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012352:	b29a      	uxth	r2, r3
 8012354:	0715      	lsls	r5, r2, #28
 8012356:	d42c      	bmi.n	80123b2 <__swsetup_r+0x82>
 8012358:	06d0      	lsls	r0, r2, #27
 801235a:	d411      	bmi.n	8012380 <__swsetup_r+0x50>
 801235c:	2209      	movs	r2, #9
 801235e:	6032      	str	r2, [r6, #0]
 8012360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012364:	81a3      	strh	r3, [r4, #12]
 8012366:	f04f 30ff 	mov.w	r0, #4294967295
 801236a:	e03e      	b.n	80123ea <__swsetup_r+0xba>
 801236c:	4b25      	ldr	r3, [pc, #148]	; (8012404 <__swsetup_r+0xd4>)
 801236e:	429c      	cmp	r4, r3
 8012370:	d101      	bne.n	8012376 <__swsetup_r+0x46>
 8012372:	68ac      	ldr	r4, [r5, #8]
 8012374:	e7eb      	b.n	801234e <__swsetup_r+0x1e>
 8012376:	4b24      	ldr	r3, [pc, #144]	; (8012408 <__swsetup_r+0xd8>)
 8012378:	429c      	cmp	r4, r3
 801237a:	bf08      	it	eq
 801237c:	68ec      	ldreq	r4, [r5, #12]
 801237e:	e7e6      	b.n	801234e <__swsetup_r+0x1e>
 8012380:	0751      	lsls	r1, r2, #29
 8012382:	d512      	bpl.n	80123aa <__swsetup_r+0x7a>
 8012384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012386:	b141      	cbz	r1, 801239a <__swsetup_r+0x6a>
 8012388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801238c:	4299      	cmp	r1, r3
 801238e:	d002      	beq.n	8012396 <__swsetup_r+0x66>
 8012390:	4630      	mov	r0, r6
 8012392:	f001 fb5f 	bl	8013a54 <_free_r>
 8012396:	2300      	movs	r3, #0
 8012398:	6363      	str	r3, [r4, #52]	; 0x34
 801239a:	89a3      	ldrh	r3, [r4, #12]
 801239c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123a0:	81a3      	strh	r3, [r4, #12]
 80123a2:	2300      	movs	r3, #0
 80123a4:	6063      	str	r3, [r4, #4]
 80123a6:	6923      	ldr	r3, [r4, #16]
 80123a8:	6023      	str	r3, [r4, #0]
 80123aa:	89a3      	ldrh	r3, [r4, #12]
 80123ac:	f043 0308 	orr.w	r3, r3, #8
 80123b0:	81a3      	strh	r3, [r4, #12]
 80123b2:	6923      	ldr	r3, [r4, #16]
 80123b4:	b94b      	cbnz	r3, 80123ca <__swsetup_r+0x9a>
 80123b6:	89a3      	ldrh	r3, [r4, #12]
 80123b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123c0:	d003      	beq.n	80123ca <__swsetup_r+0x9a>
 80123c2:	4621      	mov	r1, r4
 80123c4:	4630      	mov	r0, r6
 80123c6:	f001 f813 	bl	80133f0 <__smakebuf_r>
 80123ca:	89a2      	ldrh	r2, [r4, #12]
 80123cc:	f012 0301 	ands.w	r3, r2, #1
 80123d0:	d00c      	beq.n	80123ec <__swsetup_r+0xbc>
 80123d2:	2300      	movs	r3, #0
 80123d4:	60a3      	str	r3, [r4, #8]
 80123d6:	6963      	ldr	r3, [r4, #20]
 80123d8:	425b      	negs	r3, r3
 80123da:	61a3      	str	r3, [r4, #24]
 80123dc:	6923      	ldr	r3, [r4, #16]
 80123de:	b953      	cbnz	r3, 80123f6 <__swsetup_r+0xc6>
 80123e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80123e8:	d1ba      	bne.n	8012360 <__swsetup_r+0x30>
 80123ea:	bd70      	pop	{r4, r5, r6, pc}
 80123ec:	0792      	lsls	r2, r2, #30
 80123ee:	bf58      	it	pl
 80123f0:	6963      	ldrpl	r3, [r4, #20]
 80123f2:	60a3      	str	r3, [r4, #8]
 80123f4:	e7f2      	b.n	80123dc <__swsetup_r+0xac>
 80123f6:	2000      	movs	r0, #0
 80123f8:	e7f7      	b.n	80123ea <__swsetup_r+0xba>
 80123fa:	bf00      	nop
 80123fc:	20000010 	.word	0x20000010
 8012400:	08014134 	.word	0x08014134
 8012404:	08014154 	.word	0x08014154
 8012408:	08014114 	.word	0x08014114

0801240c <quorem>:
 801240c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012410:	6903      	ldr	r3, [r0, #16]
 8012412:	690c      	ldr	r4, [r1, #16]
 8012414:	42a3      	cmp	r3, r4
 8012416:	4680      	mov	r8, r0
 8012418:	f2c0 8082 	blt.w	8012520 <quorem+0x114>
 801241c:	3c01      	subs	r4, #1
 801241e:	f101 0714 	add.w	r7, r1, #20
 8012422:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012426:	f100 0614 	add.w	r6, r0, #20
 801242a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801242e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012432:	eb06 030c 	add.w	r3, r6, ip
 8012436:	3501      	adds	r5, #1
 8012438:	eb07 090c 	add.w	r9, r7, ip
 801243c:	9301      	str	r3, [sp, #4]
 801243e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012442:	b395      	cbz	r5, 80124aa <quorem+0x9e>
 8012444:	f04f 0a00 	mov.w	sl, #0
 8012448:	4638      	mov	r0, r7
 801244a:	46b6      	mov	lr, r6
 801244c:	46d3      	mov	fp, sl
 801244e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012452:	b293      	uxth	r3, r2
 8012454:	fb05 a303 	mla	r3, r5, r3, sl
 8012458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801245c:	b29b      	uxth	r3, r3
 801245e:	ebab 0303 	sub.w	r3, fp, r3
 8012462:	0c12      	lsrs	r2, r2, #16
 8012464:	f8de b000 	ldr.w	fp, [lr]
 8012468:	fb05 a202 	mla	r2, r5, r2, sl
 801246c:	fa13 f38b 	uxtah	r3, r3, fp
 8012470:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012474:	fa1f fb82 	uxth.w	fp, r2
 8012478:	f8de 2000 	ldr.w	r2, [lr]
 801247c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012484:	b29b      	uxth	r3, r3
 8012486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801248a:	4581      	cmp	r9, r0
 801248c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012490:	f84e 3b04 	str.w	r3, [lr], #4
 8012494:	d2db      	bcs.n	801244e <quorem+0x42>
 8012496:	f856 300c 	ldr.w	r3, [r6, ip]
 801249a:	b933      	cbnz	r3, 80124aa <quorem+0x9e>
 801249c:	9b01      	ldr	r3, [sp, #4]
 801249e:	3b04      	subs	r3, #4
 80124a0:	429e      	cmp	r6, r3
 80124a2:	461a      	mov	r2, r3
 80124a4:	d330      	bcc.n	8012508 <quorem+0xfc>
 80124a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80124aa:	4640      	mov	r0, r8
 80124ac:	f001 f9fe 	bl	80138ac <__mcmp>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	db25      	blt.n	8012500 <quorem+0xf4>
 80124b4:	3501      	adds	r5, #1
 80124b6:	4630      	mov	r0, r6
 80124b8:	f04f 0c00 	mov.w	ip, #0
 80124bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80124c0:	f8d0 e000 	ldr.w	lr, [r0]
 80124c4:	b293      	uxth	r3, r2
 80124c6:	ebac 0303 	sub.w	r3, ip, r3
 80124ca:	0c12      	lsrs	r2, r2, #16
 80124cc:	fa13 f38e 	uxtah	r3, r3, lr
 80124d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80124d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124d8:	b29b      	uxth	r3, r3
 80124da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124de:	45b9      	cmp	r9, r7
 80124e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80124e4:	f840 3b04 	str.w	r3, [r0], #4
 80124e8:	d2e8      	bcs.n	80124bc <quorem+0xb0>
 80124ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80124ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80124f2:	b92a      	cbnz	r2, 8012500 <quorem+0xf4>
 80124f4:	3b04      	subs	r3, #4
 80124f6:	429e      	cmp	r6, r3
 80124f8:	461a      	mov	r2, r3
 80124fa:	d30b      	bcc.n	8012514 <quorem+0x108>
 80124fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8012500:	4628      	mov	r0, r5
 8012502:	b003      	add	sp, #12
 8012504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012508:	6812      	ldr	r2, [r2, #0]
 801250a:	3b04      	subs	r3, #4
 801250c:	2a00      	cmp	r2, #0
 801250e:	d1ca      	bne.n	80124a6 <quorem+0x9a>
 8012510:	3c01      	subs	r4, #1
 8012512:	e7c5      	b.n	80124a0 <quorem+0x94>
 8012514:	6812      	ldr	r2, [r2, #0]
 8012516:	3b04      	subs	r3, #4
 8012518:	2a00      	cmp	r2, #0
 801251a:	d1ef      	bne.n	80124fc <quorem+0xf0>
 801251c:	3c01      	subs	r4, #1
 801251e:	e7ea      	b.n	80124f6 <quorem+0xea>
 8012520:	2000      	movs	r0, #0
 8012522:	e7ee      	b.n	8012502 <quorem+0xf6>
 8012524:	0000      	movs	r0, r0
	...

08012528 <_dtoa_r>:
 8012528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252c:	ec57 6b10 	vmov	r6, r7, d0
 8012530:	b097      	sub	sp, #92	; 0x5c
 8012532:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012534:	9106      	str	r1, [sp, #24]
 8012536:	4604      	mov	r4, r0
 8012538:	920b      	str	r2, [sp, #44]	; 0x2c
 801253a:	9312      	str	r3, [sp, #72]	; 0x48
 801253c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012540:	e9cd 6700 	strd	r6, r7, [sp]
 8012544:	b93d      	cbnz	r5, 8012556 <_dtoa_r+0x2e>
 8012546:	2010      	movs	r0, #16
 8012548:	f000 ff92 	bl	8013470 <malloc>
 801254c:	6260      	str	r0, [r4, #36]	; 0x24
 801254e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012552:	6005      	str	r5, [r0, #0]
 8012554:	60c5      	str	r5, [r0, #12]
 8012556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012558:	6819      	ldr	r1, [r3, #0]
 801255a:	b151      	cbz	r1, 8012572 <_dtoa_r+0x4a>
 801255c:	685a      	ldr	r2, [r3, #4]
 801255e:	604a      	str	r2, [r1, #4]
 8012560:	2301      	movs	r3, #1
 8012562:	4093      	lsls	r3, r2
 8012564:	608b      	str	r3, [r1, #8]
 8012566:	4620      	mov	r0, r4
 8012568:	f000 ffbe 	bl	80134e8 <_Bfree>
 801256c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801256e:	2200      	movs	r2, #0
 8012570:	601a      	str	r2, [r3, #0]
 8012572:	1e3b      	subs	r3, r7, #0
 8012574:	bfbb      	ittet	lt
 8012576:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801257a:	9301      	strlt	r3, [sp, #4]
 801257c:	2300      	movge	r3, #0
 801257e:	2201      	movlt	r2, #1
 8012580:	bfac      	ite	ge
 8012582:	f8c8 3000 	strge.w	r3, [r8]
 8012586:	f8c8 2000 	strlt.w	r2, [r8]
 801258a:	4baf      	ldr	r3, [pc, #700]	; (8012848 <_dtoa_r+0x320>)
 801258c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012590:	ea33 0308 	bics.w	r3, r3, r8
 8012594:	d114      	bne.n	80125c0 <_dtoa_r+0x98>
 8012596:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012598:	f242 730f 	movw	r3, #9999	; 0x270f
 801259c:	6013      	str	r3, [r2, #0]
 801259e:	9b00      	ldr	r3, [sp, #0]
 80125a0:	b923      	cbnz	r3, 80125ac <_dtoa_r+0x84>
 80125a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80125a6:	2800      	cmp	r0, #0
 80125a8:	f000 8542 	beq.w	8013030 <_dtoa_r+0xb08>
 80125ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801285c <_dtoa_r+0x334>
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	f000 8544 	beq.w	8013040 <_dtoa_r+0xb18>
 80125b8:	f10b 0303 	add.w	r3, fp, #3
 80125bc:	f000 bd3e 	b.w	801303c <_dtoa_r+0xb14>
 80125c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80125c4:	2200      	movs	r2, #0
 80125c6:	2300      	movs	r3, #0
 80125c8:	4630      	mov	r0, r6
 80125ca:	4639      	mov	r1, r7
 80125cc:	f7f6 f9b4 	bl	8008938 <__aeabi_dcmpeq>
 80125d0:	4681      	mov	r9, r0
 80125d2:	b168      	cbz	r0, 80125f0 <_dtoa_r+0xc8>
 80125d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125d6:	2301      	movs	r3, #1
 80125d8:	6013      	str	r3, [r2, #0]
 80125da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f000 8524 	beq.w	801302a <_dtoa_r+0xb02>
 80125e2:	4b9a      	ldr	r3, [pc, #616]	; (801284c <_dtoa_r+0x324>)
 80125e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80125e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80125ea:	6013      	str	r3, [r2, #0]
 80125ec:	f000 bd28 	b.w	8013040 <_dtoa_r+0xb18>
 80125f0:	aa14      	add	r2, sp, #80	; 0x50
 80125f2:	a915      	add	r1, sp, #84	; 0x54
 80125f4:	ec47 6b10 	vmov	d0, r6, r7
 80125f8:	4620      	mov	r0, r4
 80125fa:	f001 f9ce 	bl	801399a <__d2b>
 80125fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012602:	9004      	str	r0, [sp, #16]
 8012604:	2d00      	cmp	r5, #0
 8012606:	d07c      	beq.n	8012702 <_dtoa_r+0x1da>
 8012608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801260c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012610:	46b2      	mov	sl, r6
 8012612:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801261a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801261e:	2200      	movs	r2, #0
 8012620:	4b8b      	ldr	r3, [pc, #556]	; (8012850 <_dtoa_r+0x328>)
 8012622:	4650      	mov	r0, sl
 8012624:	4659      	mov	r1, fp
 8012626:	f7f5 fd67 	bl	80080f8 <__aeabi_dsub>
 801262a:	a381      	add	r3, pc, #516	; (adr r3, 8012830 <_dtoa_r+0x308>)
 801262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012630:	f7f5 ff1a 	bl	8008468 <__aeabi_dmul>
 8012634:	a380      	add	r3, pc, #512	; (adr r3, 8012838 <_dtoa_r+0x310>)
 8012636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263a:	f7f5 fd5f 	bl	80080fc <__adddf3>
 801263e:	4606      	mov	r6, r0
 8012640:	4628      	mov	r0, r5
 8012642:	460f      	mov	r7, r1
 8012644:	f7f5 fea6 	bl	8008394 <__aeabi_i2d>
 8012648:	a37d      	add	r3, pc, #500	; (adr r3, 8012840 <_dtoa_r+0x318>)
 801264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264e:	f7f5 ff0b 	bl	8008468 <__aeabi_dmul>
 8012652:	4602      	mov	r2, r0
 8012654:	460b      	mov	r3, r1
 8012656:	4630      	mov	r0, r6
 8012658:	4639      	mov	r1, r7
 801265a:	f7f5 fd4f 	bl	80080fc <__adddf3>
 801265e:	4606      	mov	r6, r0
 8012660:	460f      	mov	r7, r1
 8012662:	f7f6 f9b1 	bl	80089c8 <__aeabi_d2iz>
 8012666:	2200      	movs	r2, #0
 8012668:	4682      	mov	sl, r0
 801266a:	2300      	movs	r3, #0
 801266c:	4630      	mov	r0, r6
 801266e:	4639      	mov	r1, r7
 8012670:	f7f6 f96c 	bl	800894c <__aeabi_dcmplt>
 8012674:	b148      	cbz	r0, 801268a <_dtoa_r+0x162>
 8012676:	4650      	mov	r0, sl
 8012678:	f7f5 fe8c 	bl	8008394 <__aeabi_i2d>
 801267c:	4632      	mov	r2, r6
 801267e:	463b      	mov	r3, r7
 8012680:	f7f6 f95a 	bl	8008938 <__aeabi_dcmpeq>
 8012684:	b908      	cbnz	r0, 801268a <_dtoa_r+0x162>
 8012686:	f10a 3aff 	add.w	sl, sl, #4294967295
 801268a:	f1ba 0f16 	cmp.w	sl, #22
 801268e:	d859      	bhi.n	8012744 <_dtoa_r+0x21c>
 8012690:	4970      	ldr	r1, [pc, #448]	; (8012854 <_dtoa_r+0x32c>)
 8012692:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012696:	e9dd 2300 	ldrd	r2, r3, [sp]
 801269a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801269e:	f7f6 f973 	bl	8008988 <__aeabi_dcmpgt>
 80126a2:	2800      	cmp	r0, #0
 80126a4:	d050      	beq.n	8012748 <_dtoa_r+0x220>
 80126a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80126aa:	2300      	movs	r3, #0
 80126ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80126ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126b0:	1b5d      	subs	r5, r3, r5
 80126b2:	f1b5 0801 	subs.w	r8, r5, #1
 80126b6:	bf49      	itett	mi
 80126b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80126bc:	2300      	movpl	r3, #0
 80126be:	9305      	strmi	r3, [sp, #20]
 80126c0:	f04f 0800 	movmi.w	r8, #0
 80126c4:	bf58      	it	pl
 80126c6:	9305      	strpl	r3, [sp, #20]
 80126c8:	f1ba 0f00 	cmp.w	sl, #0
 80126cc:	db3e      	blt.n	801274c <_dtoa_r+0x224>
 80126ce:	2300      	movs	r3, #0
 80126d0:	44d0      	add	r8, sl
 80126d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80126d6:	9307      	str	r3, [sp, #28]
 80126d8:	9b06      	ldr	r3, [sp, #24]
 80126da:	2b09      	cmp	r3, #9
 80126dc:	f200 8090 	bhi.w	8012800 <_dtoa_r+0x2d8>
 80126e0:	2b05      	cmp	r3, #5
 80126e2:	bfc4      	itt	gt
 80126e4:	3b04      	subgt	r3, #4
 80126e6:	9306      	strgt	r3, [sp, #24]
 80126e8:	9b06      	ldr	r3, [sp, #24]
 80126ea:	f1a3 0302 	sub.w	r3, r3, #2
 80126ee:	bfcc      	ite	gt
 80126f0:	2500      	movgt	r5, #0
 80126f2:	2501      	movle	r5, #1
 80126f4:	2b03      	cmp	r3, #3
 80126f6:	f200 808f 	bhi.w	8012818 <_dtoa_r+0x2f0>
 80126fa:	e8df f003 	tbb	[pc, r3]
 80126fe:	7f7d      	.short	0x7f7d
 8012700:	7131      	.short	0x7131
 8012702:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012706:	441d      	add	r5, r3
 8012708:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801270c:	2820      	cmp	r0, #32
 801270e:	dd13      	ble.n	8012738 <_dtoa_r+0x210>
 8012710:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012714:	9b00      	ldr	r3, [sp, #0]
 8012716:	fa08 f800 	lsl.w	r8, r8, r0
 801271a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801271e:	fa23 f000 	lsr.w	r0, r3, r0
 8012722:	ea48 0000 	orr.w	r0, r8, r0
 8012726:	f7f5 fe25 	bl	8008374 <__aeabi_ui2d>
 801272a:	2301      	movs	r3, #1
 801272c:	4682      	mov	sl, r0
 801272e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012732:	3d01      	subs	r5, #1
 8012734:	9313      	str	r3, [sp, #76]	; 0x4c
 8012736:	e772      	b.n	801261e <_dtoa_r+0xf6>
 8012738:	9b00      	ldr	r3, [sp, #0]
 801273a:	f1c0 0020 	rsb	r0, r0, #32
 801273e:	fa03 f000 	lsl.w	r0, r3, r0
 8012742:	e7f0      	b.n	8012726 <_dtoa_r+0x1fe>
 8012744:	2301      	movs	r3, #1
 8012746:	e7b1      	b.n	80126ac <_dtoa_r+0x184>
 8012748:	900f      	str	r0, [sp, #60]	; 0x3c
 801274a:	e7b0      	b.n	80126ae <_dtoa_r+0x186>
 801274c:	9b05      	ldr	r3, [sp, #20]
 801274e:	eba3 030a 	sub.w	r3, r3, sl
 8012752:	9305      	str	r3, [sp, #20]
 8012754:	f1ca 0300 	rsb	r3, sl, #0
 8012758:	9307      	str	r3, [sp, #28]
 801275a:	2300      	movs	r3, #0
 801275c:	930e      	str	r3, [sp, #56]	; 0x38
 801275e:	e7bb      	b.n	80126d8 <_dtoa_r+0x1b0>
 8012760:	2301      	movs	r3, #1
 8012762:	930a      	str	r3, [sp, #40]	; 0x28
 8012764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012766:	2b00      	cmp	r3, #0
 8012768:	dd59      	ble.n	801281e <_dtoa_r+0x2f6>
 801276a:	9302      	str	r3, [sp, #8]
 801276c:	4699      	mov	r9, r3
 801276e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012770:	2200      	movs	r2, #0
 8012772:	6072      	str	r2, [r6, #4]
 8012774:	2204      	movs	r2, #4
 8012776:	f102 0014 	add.w	r0, r2, #20
 801277a:	4298      	cmp	r0, r3
 801277c:	6871      	ldr	r1, [r6, #4]
 801277e:	d953      	bls.n	8012828 <_dtoa_r+0x300>
 8012780:	4620      	mov	r0, r4
 8012782:	f000 fe7d 	bl	8013480 <_Balloc>
 8012786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012788:	6030      	str	r0, [r6, #0]
 801278a:	f1b9 0f0e 	cmp.w	r9, #14
 801278e:	f8d3 b000 	ldr.w	fp, [r3]
 8012792:	f200 80e6 	bhi.w	8012962 <_dtoa_r+0x43a>
 8012796:	2d00      	cmp	r5, #0
 8012798:	f000 80e3 	beq.w	8012962 <_dtoa_r+0x43a>
 801279c:	ed9d 7b00 	vldr	d7, [sp]
 80127a0:	f1ba 0f00 	cmp.w	sl, #0
 80127a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80127a8:	dd74      	ble.n	8012894 <_dtoa_r+0x36c>
 80127aa:	4a2a      	ldr	r2, [pc, #168]	; (8012854 <_dtoa_r+0x32c>)
 80127ac:	f00a 030f 	and.w	r3, sl, #15
 80127b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80127b4:	ed93 7b00 	vldr	d7, [r3]
 80127b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80127bc:	06f0      	lsls	r0, r6, #27
 80127be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80127c2:	d565      	bpl.n	8012890 <_dtoa_r+0x368>
 80127c4:	4b24      	ldr	r3, [pc, #144]	; (8012858 <_dtoa_r+0x330>)
 80127c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80127ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80127ce:	f7f5 ff75 	bl	80086bc <__aeabi_ddiv>
 80127d2:	e9cd 0100 	strd	r0, r1, [sp]
 80127d6:	f006 060f 	and.w	r6, r6, #15
 80127da:	2503      	movs	r5, #3
 80127dc:	4f1e      	ldr	r7, [pc, #120]	; (8012858 <_dtoa_r+0x330>)
 80127de:	e04c      	b.n	801287a <_dtoa_r+0x352>
 80127e0:	2301      	movs	r3, #1
 80127e2:	930a      	str	r3, [sp, #40]	; 0x28
 80127e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127e6:	4453      	add	r3, sl
 80127e8:	f103 0901 	add.w	r9, r3, #1
 80127ec:	9302      	str	r3, [sp, #8]
 80127ee:	464b      	mov	r3, r9
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	bfb8      	it	lt
 80127f4:	2301      	movlt	r3, #1
 80127f6:	e7ba      	b.n	801276e <_dtoa_r+0x246>
 80127f8:	2300      	movs	r3, #0
 80127fa:	e7b2      	b.n	8012762 <_dtoa_r+0x23a>
 80127fc:	2300      	movs	r3, #0
 80127fe:	e7f0      	b.n	80127e2 <_dtoa_r+0x2ba>
 8012800:	2501      	movs	r5, #1
 8012802:	2300      	movs	r3, #0
 8012804:	9306      	str	r3, [sp, #24]
 8012806:	950a      	str	r5, [sp, #40]	; 0x28
 8012808:	f04f 33ff 	mov.w	r3, #4294967295
 801280c:	9302      	str	r3, [sp, #8]
 801280e:	4699      	mov	r9, r3
 8012810:	2200      	movs	r2, #0
 8012812:	2312      	movs	r3, #18
 8012814:	920b      	str	r2, [sp, #44]	; 0x2c
 8012816:	e7aa      	b.n	801276e <_dtoa_r+0x246>
 8012818:	2301      	movs	r3, #1
 801281a:	930a      	str	r3, [sp, #40]	; 0x28
 801281c:	e7f4      	b.n	8012808 <_dtoa_r+0x2e0>
 801281e:	2301      	movs	r3, #1
 8012820:	9302      	str	r3, [sp, #8]
 8012822:	4699      	mov	r9, r3
 8012824:	461a      	mov	r2, r3
 8012826:	e7f5      	b.n	8012814 <_dtoa_r+0x2ec>
 8012828:	3101      	adds	r1, #1
 801282a:	6071      	str	r1, [r6, #4]
 801282c:	0052      	lsls	r2, r2, #1
 801282e:	e7a2      	b.n	8012776 <_dtoa_r+0x24e>
 8012830:	636f4361 	.word	0x636f4361
 8012834:	3fd287a7 	.word	0x3fd287a7
 8012838:	8b60c8b3 	.word	0x8b60c8b3
 801283c:	3fc68a28 	.word	0x3fc68a28
 8012840:	509f79fb 	.word	0x509f79fb
 8012844:	3fd34413 	.word	0x3fd34413
 8012848:	7ff00000 	.word	0x7ff00000
 801284c:	080140e1 	.word	0x080140e1
 8012850:	3ff80000 	.word	0x3ff80000
 8012854:	080141a0 	.word	0x080141a0
 8012858:	08014178 	.word	0x08014178
 801285c:	0801410d 	.word	0x0801410d
 8012860:	07f1      	lsls	r1, r6, #31
 8012862:	d508      	bpl.n	8012876 <_dtoa_r+0x34e>
 8012864:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012868:	e9d7 2300 	ldrd	r2, r3, [r7]
 801286c:	f7f5 fdfc 	bl	8008468 <__aeabi_dmul>
 8012870:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012874:	3501      	adds	r5, #1
 8012876:	1076      	asrs	r6, r6, #1
 8012878:	3708      	adds	r7, #8
 801287a:	2e00      	cmp	r6, #0
 801287c:	d1f0      	bne.n	8012860 <_dtoa_r+0x338>
 801287e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012882:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012886:	f7f5 ff19 	bl	80086bc <__aeabi_ddiv>
 801288a:	e9cd 0100 	strd	r0, r1, [sp]
 801288e:	e01a      	b.n	80128c6 <_dtoa_r+0x39e>
 8012890:	2502      	movs	r5, #2
 8012892:	e7a3      	b.n	80127dc <_dtoa_r+0x2b4>
 8012894:	f000 80a0 	beq.w	80129d8 <_dtoa_r+0x4b0>
 8012898:	f1ca 0600 	rsb	r6, sl, #0
 801289c:	4b9f      	ldr	r3, [pc, #636]	; (8012b1c <_dtoa_r+0x5f4>)
 801289e:	4fa0      	ldr	r7, [pc, #640]	; (8012b20 <_dtoa_r+0x5f8>)
 80128a0:	f006 020f 	and.w	r2, r6, #15
 80128a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80128b0:	f7f5 fdda 	bl	8008468 <__aeabi_dmul>
 80128b4:	e9cd 0100 	strd	r0, r1, [sp]
 80128b8:	1136      	asrs	r6, r6, #4
 80128ba:	2300      	movs	r3, #0
 80128bc:	2502      	movs	r5, #2
 80128be:	2e00      	cmp	r6, #0
 80128c0:	d17f      	bne.n	80129c2 <_dtoa_r+0x49a>
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1e1      	bne.n	801288a <_dtoa_r+0x362>
 80128c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f000 8087 	beq.w	80129dc <_dtoa_r+0x4b4>
 80128ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80128d2:	2200      	movs	r2, #0
 80128d4:	4b93      	ldr	r3, [pc, #588]	; (8012b24 <_dtoa_r+0x5fc>)
 80128d6:	4630      	mov	r0, r6
 80128d8:	4639      	mov	r1, r7
 80128da:	f7f6 f837 	bl	800894c <__aeabi_dcmplt>
 80128de:	2800      	cmp	r0, #0
 80128e0:	d07c      	beq.n	80129dc <_dtoa_r+0x4b4>
 80128e2:	f1b9 0f00 	cmp.w	r9, #0
 80128e6:	d079      	beq.n	80129dc <_dtoa_r+0x4b4>
 80128e8:	9b02      	ldr	r3, [sp, #8]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	dd35      	ble.n	801295a <_dtoa_r+0x432>
 80128ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80128f2:	9308      	str	r3, [sp, #32]
 80128f4:	4639      	mov	r1, r7
 80128f6:	2200      	movs	r2, #0
 80128f8:	4b8b      	ldr	r3, [pc, #556]	; (8012b28 <_dtoa_r+0x600>)
 80128fa:	4630      	mov	r0, r6
 80128fc:	f7f5 fdb4 	bl	8008468 <__aeabi_dmul>
 8012900:	e9cd 0100 	strd	r0, r1, [sp]
 8012904:	9f02      	ldr	r7, [sp, #8]
 8012906:	3501      	adds	r5, #1
 8012908:	4628      	mov	r0, r5
 801290a:	f7f5 fd43 	bl	8008394 <__aeabi_i2d>
 801290e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012912:	f7f5 fda9 	bl	8008468 <__aeabi_dmul>
 8012916:	2200      	movs	r2, #0
 8012918:	4b84      	ldr	r3, [pc, #528]	; (8012b2c <_dtoa_r+0x604>)
 801291a:	f7f5 fbef 	bl	80080fc <__adddf3>
 801291e:	4605      	mov	r5, r0
 8012920:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012924:	2f00      	cmp	r7, #0
 8012926:	d15d      	bne.n	80129e4 <_dtoa_r+0x4bc>
 8012928:	2200      	movs	r2, #0
 801292a:	4b81      	ldr	r3, [pc, #516]	; (8012b30 <_dtoa_r+0x608>)
 801292c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012930:	f7f5 fbe2 	bl	80080f8 <__aeabi_dsub>
 8012934:	462a      	mov	r2, r5
 8012936:	4633      	mov	r3, r6
 8012938:	e9cd 0100 	strd	r0, r1, [sp]
 801293c:	f7f6 f824 	bl	8008988 <__aeabi_dcmpgt>
 8012940:	2800      	cmp	r0, #0
 8012942:	f040 8288 	bne.w	8012e56 <_dtoa_r+0x92e>
 8012946:	462a      	mov	r2, r5
 8012948:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801294c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012950:	f7f5 fffc 	bl	800894c <__aeabi_dcmplt>
 8012954:	2800      	cmp	r0, #0
 8012956:	f040 827c 	bne.w	8012e52 <_dtoa_r+0x92a>
 801295a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801295e:	e9cd 2300 	strd	r2, r3, [sp]
 8012962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012964:	2b00      	cmp	r3, #0
 8012966:	f2c0 8150 	blt.w	8012c0a <_dtoa_r+0x6e2>
 801296a:	f1ba 0f0e 	cmp.w	sl, #14
 801296e:	f300 814c 	bgt.w	8012c0a <_dtoa_r+0x6e2>
 8012972:	4b6a      	ldr	r3, [pc, #424]	; (8012b1c <_dtoa_r+0x5f4>)
 8012974:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012978:	ed93 7b00 	vldr	d7, [r3]
 801297c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801297e:	2b00      	cmp	r3, #0
 8012980:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012984:	f280 80d8 	bge.w	8012b38 <_dtoa_r+0x610>
 8012988:	f1b9 0f00 	cmp.w	r9, #0
 801298c:	f300 80d4 	bgt.w	8012b38 <_dtoa_r+0x610>
 8012990:	f040 825e 	bne.w	8012e50 <_dtoa_r+0x928>
 8012994:	2200      	movs	r2, #0
 8012996:	4b66      	ldr	r3, [pc, #408]	; (8012b30 <_dtoa_r+0x608>)
 8012998:	ec51 0b17 	vmov	r0, r1, d7
 801299c:	f7f5 fd64 	bl	8008468 <__aeabi_dmul>
 80129a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129a4:	f7f5 ffe6 	bl	8008974 <__aeabi_dcmpge>
 80129a8:	464f      	mov	r7, r9
 80129aa:	464e      	mov	r6, r9
 80129ac:	2800      	cmp	r0, #0
 80129ae:	f040 8234 	bne.w	8012e1a <_dtoa_r+0x8f2>
 80129b2:	2331      	movs	r3, #49	; 0x31
 80129b4:	f10b 0501 	add.w	r5, fp, #1
 80129b8:	f88b 3000 	strb.w	r3, [fp]
 80129bc:	f10a 0a01 	add.w	sl, sl, #1
 80129c0:	e22f      	b.n	8012e22 <_dtoa_r+0x8fa>
 80129c2:	07f2      	lsls	r2, r6, #31
 80129c4:	d505      	bpl.n	80129d2 <_dtoa_r+0x4aa>
 80129c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129ca:	f7f5 fd4d 	bl	8008468 <__aeabi_dmul>
 80129ce:	3501      	adds	r5, #1
 80129d0:	2301      	movs	r3, #1
 80129d2:	1076      	asrs	r6, r6, #1
 80129d4:	3708      	adds	r7, #8
 80129d6:	e772      	b.n	80128be <_dtoa_r+0x396>
 80129d8:	2502      	movs	r5, #2
 80129da:	e774      	b.n	80128c6 <_dtoa_r+0x39e>
 80129dc:	f8cd a020 	str.w	sl, [sp, #32]
 80129e0:	464f      	mov	r7, r9
 80129e2:	e791      	b.n	8012908 <_dtoa_r+0x3e0>
 80129e4:	4b4d      	ldr	r3, [pc, #308]	; (8012b1c <_dtoa_r+0x5f4>)
 80129e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80129ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80129ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d047      	beq.n	8012a84 <_dtoa_r+0x55c>
 80129f4:	4602      	mov	r2, r0
 80129f6:	460b      	mov	r3, r1
 80129f8:	2000      	movs	r0, #0
 80129fa:	494e      	ldr	r1, [pc, #312]	; (8012b34 <_dtoa_r+0x60c>)
 80129fc:	f7f5 fe5e 	bl	80086bc <__aeabi_ddiv>
 8012a00:	462a      	mov	r2, r5
 8012a02:	4633      	mov	r3, r6
 8012a04:	f7f5 fb78 	bl	80080f8 <__aeabi_dsub>
 8012a08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a0c:	465d      	mov	r5, fp
 8012a0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a12:	f7f5 ffd9 	bl	80089c8 <__aeabi_d2iz>
 8012a16:	4606      	mov	r6, r0
 8012a18:	f7f5 fcbc 	bl	8008394 <__aeabi_i2d>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	460b      	mov	r3, r1
 8012a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a24:	f7f5 fb68 	bl	80080f8 <__aeabi_dsub>
 8012a28:	3630      	adds	r6, #48	; 0x30
 8012a2a:	f805 6b01 	strb.w	r6, [r5], #1
 8012a2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012a32:	e9cd 0100 	strd	r0, r1, [sp]
 8012a36:	f7f5 ff89 	bl	800894c <__aeabi_dcmplt>
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	d163      	bne.n	8012b06 <_dtoa_r+0x5de>
 8012a3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a42:	2000      	movs	r0, #0
 8012a44:	4937      	ldr	r1, [pc, #220]	; (8012b24 <_dtoa_r+0x5fc>)
 8012a46:	f7f5 fb57 	bl	80080f8 <__aeabi_dsub>
 8012a4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012a4e:	f7f5 ff7d 	bl	800894c <__aeabi_dcmplt>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	f040 80b7 	bne.w	8012bc6 <_dtoa_r+0x69e>
 8012a58:	eba5 030b 	sub.w	r3, r5, fp
 8012a5c:	429f      	cmp	r7, r3
 8012a5e:	f77f af7c 	ble.w	801295a <_dtoa_r+0x432>
 8012a62:	2200      	movs	r2, #0
 8012a64:	4b30      	ldr	r3, [pc, #192]	; (8012b28 <_dtoa_r+0x600>)
 8012a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a6a:	f7f5 fcfd 	bl	8008468 <__aeabi_dmul>
 8012a6e:	2200      	movs	r2, #0
 8012a70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a74:	4b2c      	ldr	r3, [pc, #176]	; (8012b28 <_dtoa_r+0x600>)
 8012a76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a7a:	f7f5 fcf5 	bl	8008468 <__aeabi_dmul>
 8012a7e:	e9cd 0100 	strd	r0, r1, [sp]
 8012a82:	e7c4      	b.n	8012a0e <_dtoa_r+0x4e6>
 8012a84:	462a      	mov	r2, r5
 8012a86:	4633      	mov	r3, r6
 8012a88:	f7f5 fcee 	bl	8008468 <__aeabi_dmul>
 8012a8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a90:	eb0b 0507 	add.w	r5, fp, r7
 8012a94:	465e      	mov	r6, fp
 8012a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a9a:	f7f5 ff95 	bl	80089c8 <__aeabi_d2iz>
 8012a9e:	4607      	mov	r7, r0
 8012aa0:	f7f5 fc78 	bl	8008394 <__aeabi_i2d>
 8012aa4:	3730      	adds	r7, #48	; 0x30
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	460b      	mov	r3, r1
 8012aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012aae:	f7f5 fb23 	bl	80080f8 <__aeabi_dsub>
 8012ab2:	f806 7b01 	strb.w	r7, [r6], #1
 8012ab6:	42ae      	cmp	r6, r5
 8012ab8:	e9cd 0100 	strd	r0, r1, [sp]
 8012abc:	f04f 0200 	mov.w	r2, #0
 8012ac0:	d126      	bne.n	8012b10 <_dtoa_r+0x5e8>
 8012ac2:	4b1c      	ldr	r3, [pc, #112]	; (8012b34 <_dtoa_r+0x60c>)
 8012ac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012ac8:	f7f5 fb18 	bl	80080fc <__adddf3>
 8012acc:	4602      	mov	r2, r0
 8012ace:	460b      	mov	r3, r1
 8012ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ad4:	f7f5 ff58 	bl	8008988 <__aeabi_dcmpgt>
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	d174      	bne.n	8012bc6 <_dtoa_r+0x69e>
 8012adc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012ae0:	2000      	movs	r0, #0
 8012ae2:	4914      	ldr	r1, [pc, #80]	; (8012b34 <_dtoa_r+0x60c>)
 8012ae4:	f7f5 fb08 	bl	80080f8 <__aeabi_dsub>
 8012ae8:	4602      	mov	r2, r0
 8012aea:	460b      	mov	r3, r1
 8012aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012af0:	f7f5 ff2c 	bl	800894c <__aeabi_dcmplt>
 8012af4:	2800      	cmp	r0, #0
 8012af6:	f43f af30 	beq.w	801295a <_dtoa_r+0x432>
 8012afa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012afe:	2b30      	cmp	r3, #48	; 0x30
 8012b00:	f105 32ff 	add.w	r2, r5, #4294967295
 8012b04:	d002      	beq.n	8012b0c <_dtoa_r+0x5e4>
 8012b06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b0a:	e04a      	b.n	8012ba2 <_dtoa_r+0x67a>
 8012b0c:	4615      	mov	r5, r2
 8012b0e:	e7f4      	b.n	8012afa <_dtoa_r+0x5d2>
 8012b10:	4b05      	ldr	r3, [pc, #20]	; (8012b28 <_dtoa_r+0x600>)
 8012b12:	f7f5 fca9 	bl	8008468 <__aeabi_dmul>
 8012b16:	e9cd 0100 	strd	r0, r1, [sp]
 8012b1a:	e7bc      	b.n	8012a96 <_dtoa_r+0x56e>
 8012b1c:	080141a0 	.word	0x080141a0
 8012b20:	08014178 	.word	0x08014178
 8012b24:	3ff00000 	.word	0x3ff00000
 8012b28:	40240000 	.word	0x40240000
 8012b2c:	401c0000 	.word	0x401c0000
 8012b30:	40140000 	.word	0x40140000
 8012b34:	3fe00000 	.word	0x3fe00000
 8012b38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b3c:	465d      	mov	r5, fp
 8012b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b42:	4630      	mov	r0, r6
 8012b44:	4639      	mov	r1, r7
 8012b46:	f7f5 fdb9 	bl	80086bc <__aeabi_ddiv>
 8012b4a:	f7f5 ff3d 	bl	80089c8 <__aeabi_d2iz>
 8012b4e:	4680      	mov	r8, r0
 8012b50:	f7f5 fc20 	bl	8008394 <__aeabi_i2d>
 8012b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b58:	f7f5 fc86 	bl	8008468 <__aeabi_dmul>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	460b      	mov	r3, r1
 8012b60:	4630      	mov	r0, r6
 8012b62:	4639      	mov	r1, r7
 8012b64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012b68:	f7f5 fac6 	bl	80080f8 <__aeabi_dsub>
 8012b6c:	f805 6b01 	strb.w	r6, [r5], #1
 8012b70:	eba5 060b 	sub.w	r6, r5, fp
 8012b74:	45b1      	cmp	r9, r6
 8012b76:	4602      	mov	r2, r0
 8012b78:	460b      	mov	r3, r1
 8012b7a:	d139      	bne.n	8012bf0 <_dtoa_r+0x6c8>
 8012b7c:	f7f5 fabe 	bl	80080fc <__adddf3>
 8012b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b84:	4606      	mov	r6, r0
 8012b86:	460f      	mov	r7, r1
 8012b88:	f7f5 fefe 	bl	8008988 <__aeabi_dcmpgt>
 8012b8c:	b9c8      	cbnz	r0, 8012bc2 <_dtoa_r+0x69a>
 8012b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b92:	4630      	mov	r0, r6
 8012b94:	4639      	mov	r1, r7
 8012b96:	f7f5 fecf 	bl	8008938 <__aeabi_dcmpeq>
 8012b9a:	b110      	cbz	r0, 8012ba2 <_dtoa_r+0x67a>
 8012b9c:	f018 0f01 	tst.w	r8, #1
 8012ba0:	d10f      	bne.n	8012bc2 <_dtoa_r+0x69a>
 8012ba2:	9904      	ldr	r1, [sp, #16]
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f000 fc9f 	bl	80134e8 <_Bfree>
 8012baa:	2300      	movs	r3, #0
 8012bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012bae:	702b      	strb	r3, [r5, #0]
 8012bb0:	f10a 0301 	add.w	r3, sl, #1
 8012bb4:	6013      	str	r3, [r2, #0]
 8012bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f000 8241 	beq.w	8013040 <_dtoa_r+0xb18>
 8012bbe:	601d      	str	r5, [r3, #0]
 8012bc0:	e23e      	b.n	8013040 <_dtoa_r+0xb18>
 8012bc2:	f8cd a020 	str.w	sl, [sp, #32]
 8012bc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012bca:	2a39      	cmp	r2, #57	; 0x39
 8012bcc:	f105 33ff 	add.w	r3, r5, #4294967295
 8012bd0:	d108      	bne.n	8012be4 <_dtoa_r+0x6bc>
 8012bd2:	459b      	cmp	fp, r3
 8012bd4:	d10a      	bne.n	8012bec <_dtoa_r+0x6c4>
 8012bd6:	9b08      	ldr	r3, [sp, #32]
 8012bd8:	3301      	adds	r3, #1
 8012bda:	9308      	str	r3, [sp, #32]
 8012bdc:	2330      	movs	r3, #48	; 0x30
 8012bde:	f88b 3000 	strb.w	r3, [fp]
 8012be2:	465b      	mov	r3, fp
 8012be4:	781a      	ldrb	r2, [r3, #0]
 8012be6:	3201      	adds	r2, #1
 8012be8:	701a      	strb	r2, [r3, #0]
 8012bea:	e78c      	b.n	8012b06 <_dtoa_r+0x5de>
 8012bec:	461d      	mov	r5, r3
 8012bee:	e7ea      	b.n	8012bc6 <_dtoa_r+0x69e>
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	4b9b      	ldr	r3, [pc, #620]	; (8012e60 <_dtoa_r+0x938>)
 8012bf4:	f7f5 fc38 	bl	8008468 <__aeabi_dmul>
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	4606      	mov	r6, r0
 8012bfe:	460f      	mov	r7, r1
 8012c00:	f7f5 fe9a 	bl	8008938 <__aeabi_dcmpeq>
 8012c04:	2800      	cmp	r0, #0
 8012c06:	d09a      	beq.n	8012b3e <_dtoa_r+0x616>
 8012c08:	e7cb      	b.n	8012ba2 <_dtoa_r+0x67a>
 8012c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c0c:	2a00      	cmp	r2, #0
 8012c0e:	f000 808b 	beq.w	8012d28 <_dtoa_r+0x800>
 8012c12:	9a06      	ldr	r2, [sp, #24]
 8012c14:	2a01      	cmp	r2, #1
 8012c16:	dc6e      	bgt.n	8012cf6 <_dtoa_r+0x7ce>
 8012c18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012c1a:	2a00      	cmp	r2, #0
 8012c1c:	d067      	beq.n	8012cee <_dtoa_r+0x7c6>
 8012c1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012c22:	9f07      	ldr	r7, [sp, #28]
 8012c24:	9d05      	ldr	r5, [sp, #20]
 8012c26:	9a05      	ldr	r2, [sp, #20]
 8012c28:	2101      	movs	r1, #1
 8012c2a:	441a      	add	r2, r3
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	9205      	str	r2, [sp, #20]
 8012c30:	4498      	add	r8, r3
 8012c32:	f000 fcf9 	bl	8013628 <__i2b>
 8012c36:	4606      	mov	r6, r0
 8012c38:	2d00      	cmp	r5, #0
 8012c3a:	dd0c      	ble.n	8012c56 <_dtoa_r+0x72e>
 8012c3c:	f1b8 0f00 	cmp.w	r8, #0
 8012c40:	dd09      	ble.n	8012c56 <_dtoa_r+0x72e>
 8012c42:	4545      	cmp	r5, r8
 8012c44:	9a05      	ldr	r2, [sp, #20]
 8012c46:	462b      	mov	r3, r5
 8012c48:	bfa8      	it	ge
 8012c4a:	4643      	movge	r3, r8
 8012c4c:	1ad2      	subs	r2, r2, r3
 8012c4e:	9205      	str	r2, [sp, #20]
 8012c50:	1aed      	subs	r5, r5, r3
 8012c52:	eba8 0803 	sub.w	r8, r8, r3
 8012c56:	9b07      	ldr	r3, [sp, #28]
 8012c58:	b1eb      	cbz	r3, 8012c96 <_dtoa_r+0x76e>
 8012c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d067      	beq.n	8012d30 <_dtoa_r+0x808>
 8012c60:	b18f      	cbz	r7, 8012c86 <_dtoa_r+0x75e>
 8012c62:	4631      	mov	r1, r6
 8012c64:	463a      	mov	r2, r7
 8012c66:	4620      	mov	r0, r4
 8012c68:	f000 fd7e 	bl	8013768 <__pow5mult>
 8012c6c:	9a04      	ldr	r2, [sp, #16]
 8012c6e:	4601      	mov	r1, r0
 8012c70:	4606      	mov	r6, r0
 8012c72:	4620      	mov	r0, r4
 8012c74:	f000 fce1 	bl	801363a <__multiply>
 8012c78:	9904      	ldr	r1, [sp, #16]
 8012c7a:	9008      	str	r0, [sp, #32]
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	f000 fc33 	bl	80134e8 <_Bfree>
 8012c82:	9b08      	ldr	r3, [sp, #32]
 8012c84:	9304      	str	r3, [sp, #16]
 8012c86:	9b07      	ldr	r3, [sp, #28]
 8012c88:	1bda      	subs	r2, r3, r7
 8012c8a:	d004      	beq.n	8012c96 <_dtoa_r+0x76e>
 8012c8c:	9904      	ldr	r1, [sp, #16]
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f000 fd6a 	bl	8013768 <__pow5mult>
 8012c94:	9004      	str	r0, [sp, #16]
 8012c96:	2101      	movs	r1, #1
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f000 fcc5 	bl	8013628 <__i2b>
 8012c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ca0:	4607      	mov	r7, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	f000 81d0 	beq.w	8013048 <_dtoa_r+0xb20>
 8012ca8:	461a      	mov	r2, r3
 8012caa:	4601      	mov	r1, r0
 8012cac:	4620      	mov	r0, r4
 8012cae:	f000 fd5b 	bl	8013768 <__pow5mult>
 8012cb2:	9b06      	ldr	r3, [sp, #24]
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	4607      	mov	r7, r0
 8012cb8:	dc40      	bgt.n	8012d3c <_dtoa_r+0x814>
 8012cba:	9b00      	ldr	r3, [sp, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d139      	bne.n	8012d34 <_dtoa_r+0x80c>
 8012cc0:	9b01      	ldr	r3, [sp, #4]
 8012cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d136      	bne.n	8012d38 <_dtoa_r+0x810>
 8012cca:	9b01      	ldr	r3, [sp, #4]
 8012ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cd0:	0d1b      	lsrs	r3, r3, #20
 8012cd2:	051b      	lsls	r3, r3, #20
 8012cd4:	b12b      	cbz	r3, 8012ce2 <_dtoa_r+0x7ba>
 8012cd6:	9b05      	ldr	r3, [sp, #20]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	9305      	str	r3, [sp, #20]
 8012cdc:	f108 0801 	add.w	r8, r8, #1
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	9307      	str	r3, [sp, #28]
 8012ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d12a      	bne.n	8012d40 <_dtoa_r+0x818>
 8012cea:	2001      	movs	r0, #1
 8012cec:	e030      	b.n	8012d50 <_dtoa_r+0x828>
 8012cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012cf0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012cf4:	e795      	b.n	8012c22 <_dtoa_r+0x6fa>
 8012cf6:	9b07      	ldr	r3, [sp, #28]
 8012cf8:	f109 37ff 	add.w	r7, r9, #4294967295
 8012cfc:	42bb      	cmp	r3, r7
 8012cfe:	bfbf      	itttt	lt
 8012d00:	9b07      	ldrlt	r3, [sp, #28]
 8012d02:	9707      	strlt	r7, [sp, #28]
 8012d04:	1afa      	sublt	r2, r7, r3
 8012d06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012d08:	bfbb      	ittet	lt
 8012d0a:	189b      	addlt	r3, r3, r2
 8012d0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012d0e:	1bdf      	subge	r7, r3, r7
 8012d10:	2700      	movlt	r7, #0
 8012d12:	f1b9 0f00 	cmp.w	r9, #0
 8012d16:	bfb5      	itete	lt
 8012d18:	9b05      	ldrlt	r3, [sp, #20]
 8012d1a:	9d05      	ldrge	r5, [sp, #20]
 8012d1c:	eba3 0509 	sublt.w	r5, r3, r9
 8012d20:	464b      	movge	r3, r9
 8012d22:	bfb8      	it	lt
 8012d24:	2300      	movlt	r3, #0
 8012d26:	e77e      	b.n	8012c26 <_dtoa_r+0x6fe>
 8012d28:	9f07      	ldr	r7, [sp, #28]
 8012d2a:	9d05      	ldr	r5, [sp, #20]
 8012d2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012d2e:	e783      	b.n	8012c38 <_dtoa_r+0x710>
 8012d30:	9a07      	ldr	r2, [sp, #28]
 8012d32:	e7ab      	b.n	8012c8c <_dtoa_r+0x764>
 8012d34:	2300      	movs	r3, #0
 8012d36:	e7d4      	b.n	8012ce2 <_dtoa_r+0x7ba>
 8012d38:	9b00      	ldr	r3, [sp, #0]
 8012d3a:	e7d2      	b.n	8012ce2 <_dtoa_r+0x7ba>
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	9307      	str	r3, [sp, #28]
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012d46:	6918      	ldr	r0, [r3, #16]
 8012d48:	f000 fc20 	bl	801358c <__hi0bits>
 8012d4c:	f1c0 0020 	rsb	r0, r0, #32
 8012d50:	4440      	add	r0, r8
 8012d52:	f010 001f 	ands.w	r0, r0, #31
 8012d56:	d047      	beq.n	8012de8 <_dtoa_r+0x8c0>
 8012d58:	f1c0 0320 	rsb	r3, r0, #32
 8012d5c:	2b04      	cmp	r3, #4
 8012d5e:	dd3b      	ble.n	8012dd8 <_dtoa_r+0x8b0>
 8012d60:	9b05      	ldr	r3, [sp, #20]
 8012d62:	f1c0 001c 	rsb	r0, r0, #28
 8012d66:	4403      	add	r3, r0
 8012d68:	9305      	str	r3, [sp, #20]
 8012d6a:	4405      	add	r5, r0
 8012d6c:	4480      	add	r8, r0
 8012d6e:	9b05      	ldr	r3, [sp, #20]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	dd05      	ble.n	8012d80 <_dtoa_r+0x858>
 8012d74:	461a      	mov	r2, r3
 8012d76:	9904      	ldr	r1, [sp, #16]
 8012d78:	4620      	mov	r0, r4
 8012d7a:	f000 fd43 	bl	8013804 <__lshift>
 8012d7e:	9004      	str	r0, [sp, #16]
 8012d80:	f1b8 0f00 	cmp.w	r8, #0
 8012d84:	dd05      	ble.n	8012d92 <_dtoa_r+0x86a>
 8012d86:	4639      	mov	r1, r7
 8012d88:	4642      	mov	r2, r8
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f000 fd3a 	bl	8013804 <__lshift>
 8012d90:	4607      	mov	r7, r0
 8012d92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d94:	b353      	cbz	r3, 8012dec <_dtoa_r+0x8c4>
 8012d96:	4639      	mov	r1, r7
 8012d98:	9804      	ldr	r0, [sp, #16]
 8012d9a:	f000 fd87 	bl	80138ac <__mcmp>
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	da24      	bge.n	8012dec <_dtoa_r+0x8c4>
 8012da2:	2300      	movs	r3, #0
 8012da4:	220a      	movs	r2, #10
 8012da6:	9904      	ldr	r1, [sp, #16]
 8012da8:	4620      	mov	r0, r4
 8012daa:	f000 fbb4 	bl	8013516 <__multadd>
 8012dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012db0:	9004      	str	r0, [sp, #16]
 8012db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	f000 814d 	beq.w	8013056 <_dtoa_r+0xb2e>
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	4631      	mov	r1, r6
 8012dc0:	220a      	movs	r2, #10
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f000 fba7 	bl	8013516 <__multadd>
 8012dc8:	9b02      	ldr	r3, [sp, #8]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	4606      	mov	r6, r0
 8012dce:	dc4f      	bgt.n	8012e70 <_dtoa_r+0x948>
 8012dd0:	9b06      	ldr	r3, [sp, #24]
 8012dd2:	2b02      	cmp	r3, #2
 8012dd4:	dd4c      	ble.n	8012e70 <_dtoa_r+0x948>
 8012dd6:	e011      	b.n	8012dfc <_dtoa_r+0x8d4>
 8012dd8:	d0c9      	beq.n	8012d6e <_dtoa_r+0x846>
 8012dda:	9a05      	ldr	r2, [sp, #20]
 8012ddc:	331c      	adds	r3, #28
 8012dde:	441a      	add	r2, r3
 8012de0:	9205      	str	r2, [sp, #20]
 8012de2:	441d      	add	r5, r3
 8012de4:	4498      	add	r8, r3
 8012de6:	e7c2      	b.n	8012d6e <_dtoa_r+0x846>
 8012de8:	4603      	mov	r3, r0
 8012dea:	e7f6      	b.n	8012dda <_dtoa_r+0x8b2>
 8012dec:	f1b9 0f00 	cmp.w	r9, #0
 8012df0:	dc38      	bgt.n	8012e64 <_dtoa_r+0x93c>
 8012df2:	9b06      	ldr	r3, [sp, #24]
 8012df4:	2b02      	cmp	r3, #2
 8012df6:	dd35      	ble.n	8012e64 <_dtoa_r+0x93c>
 8012df8:	f8cd 9008 	str.w	r9, [sp, #8]
 8012dfc:	9b02      	ldr	r3, [sp, #8]
 8012dfe:	b963      	cbnz	r3, 8012e1a <_dtoa_r+0x8f2>
 8012e00:	4639      	mov	r1, r7
 8012e02:	2205      	movs	r2, #5
 8012e04:	4620      	mov	r0, r4
 8012e06:	f000 fb86 	bl	8013516 <__multadd>
 8012e0a:	4601      	mov	r1, r0
 8012e0c:	4607      	mov	r7, r0
 8012e0e:	9804      	ldr	r0, [sp, #16]
 8012e10:	f000 fd4c 	bl	80138ac <__mcmp>
 8012e14:	2800      	cmp	r0, #0
 8012e16:	f73f adcc 	bgt.w	80129b2 <_dtoa_r+0x48a>
 8012e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e1c:	465d      	mov	r5, fp
 8012e1e:	ea6f 0a03 	mvn.w	sl, r3
 8012e22:	f04f 0900 	mov.w	r9, #0
 8012e26:	4639      	mov	r1, r7
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f000 fb5d 	bl	80134e8 <_Bfree>
 8012e2e:	2e00      	cmp	r6, #0
 8012e30:	f43f aeb7 	beq.w	8012ba2 <_dtoa_r+0x67a>
 8012e34:	f1b9 0f00 	cmp.w	r9, #0
 8012e38:	d005      	beq.n	8012e46 <_dtoa_r+0x91e>
 8012e3a:	45b1      	cmp	r9, r6
 8012e3c:	d003      	beq.n	8012e46 <_dtoa_r+0x91e>
 8012e3e:	4649      	mov	r1, r9
 8012e40:	4620      	mov	r0, r4
 8012e42:	f000 fb51 	bl	80134e8 <_Bfree>
 8012e46:	4631      	mov	r1, r6
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 fb4d 	bl	80134e8 <_Bfree>
 8012e4e:	e6a8      	b.n	8012ba2 <_dtoa_r+0x67a>
 8012e50:	2700      	movs	r7, #0
 8012e52:	463e      	mov	r6, r7
 8012e54:	e7e1      	b.n	8012e1a <_dtoa_r+0x8f2>
 8012e56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012e5a:	463e      	mov	r6, r7
 8012e5c:	e5a9      	b.n	80129b2 <_dtoa_r+0x48a>
 8012e5e:	bf00      	nop
 8012e60:	40240000 	.word	0x40240000
 8012e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e66:	f8cd 9008 	str.w	r9, [sp, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	f000 80fa 	beq.w	8013064 <_dtoa_r+0xb3c>
 8012e70:	2d00      	cmp	r5, #0
 8012e72:	dd05      	ble.n	8012e80 <_dtoa_r+0x958>
 8012e74:	4631      	mov	r1, r6
 8012e76:	462a      	mov	r2, r5
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f000 fcc3 	bl	8013804 <__lshift>
 8012e7e:	4606      	mov	r6, r0
 8012e80:	9b07      	ldr	r3, [sp, #28]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d04c      	beq.n	8012f20 <_dtoa_r+0x9f8>
 8012e86:	6871      	ldr	r1, [r6, #4]
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f000 faf9 	bl	8013480 <_Balloc>
 8012e8e:	6932      	ldr	r2, [r6, #16]
 8012e90:	3202      	adds	r2, #2
 8012e92:	4605      	mov	r5, r0
 8012e94:	0092      	lsls	r2, r2, #2
 8012e96:	f106 010c 	add.w	r1, r6, #12
 8012e9a:	300c      	adds	r0, #12
 8012e9c:	f7fe fd0a 	bl	80118b4 <memcpy>
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f000 fcad 	bl	8013804 <__lshift>
 8012eaa:	9b00      	ldr	r3, [sp, #0]
 8012eac:	f8cd b014 	str.w	fp, [sp, #20]
 8012eb0:	f003 0301 	and.w	r3, r3, #1
 8012eb4:	46b1      	mov	r9, r6
 8012eb6:	9307      	str	r3, [sp, #28]
 8012eb8:	4606      	mov	r6, r0
 8012eba:	4639      	mov	r1, r7
 8012ebc:	9804      	ldr	r0, [sp, #16]
 8012ebe:	f7ff faa5 	bl	801240c <quorem>
 8012ec2:	4649      	mov	r1, r9
 8012ec4:	4605      	mov	r5, r0
 8012ec6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012eca:	9804      	ldr	r0, [sp, #16]
 8012ecc:	f000 fcee 	bl	80138ac <__mcmp>
 8012ed0:	4632      	mov	r2, r6
 8012ed2:	9000      	str	r0, [sp, #0]
 8012ed4:	4639      	mov	r1, r7
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f000 fd02 	bl	80138e0 <__mdiff>
 8012edc:	68c3      	ldr	r3, [r0, #12]
 8012ede:	4602      	mov	r2, r0
 8012ee0:	bb03      	cbnz	r3, 8012f24 <_dtoa_r+0x9fc>
 8012ee2:	4601      	mov	r1, r0
 8012ee4:	9008      	str	r0, [sp, #32]
 8012ee6:	9804      	ldr	r0, [sp, #16]
 8012ee8:	f000 fce0 	bl	80138ac <__mcmp>
 8012eec:	9a08      	ldr	r2, [sp, #32]
 8012eee:	4603      	mov	r3, r0
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	9308      	str	r3, [sp, #32]
 8012ef6:	f000 faf7 	bl	80134e8 <_Bfree>
 8012efa:	9b08      	ldr	r3, [sp, #32]
 8012efc:	b9a3      	cbnz	r3, 8012f28 <_dtoa_r+0xa00>
 8012efe:	9a06      	ldr	r2, [sp, #24]
 8012f00:	b992      	cbnz	r2, 8012f28 <_dtoa_r+0xa00>
 8012f02:	9a07      	ldr	r2, [sp, #28]
 8012f04:	b982      	cbnz	r2, 8012f28 <_dtoa_r+0xa00>
 8012f06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012f0a:	d029      	beq.n	8012f60 <_dtoa_r+0xa38>
 8012f0c:	9b00      	ldr	r3, [sp, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	dd01      	ble.n	8012f16 <_dtoa_r+0x9ee>
 8012f12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012f16:	9b05      	ldr	r3, [sp, #20]
 8012f18:	1c5d      	adds	r5, r3, #1
 8012f1a:	f883 8000 	strb.w	r8, [r3]
 8012f1e:	e782      	b.n	8012e26 <_dtoa_r+0x8fe>
 8012f20:	4630      	mov	r0, r6
 8012f22:	e7c2      	b.n	8012eaa <_dtoa_r+0x982>
 8012f24:	2301      	movs	r3, #1
 8012f26:	e7e3      	b.n	8012ef0 <_dtoa_r+0x9c8>
 8012f28:	9a00      	ldr	r2, [sp, #0]
 8012f2a:	2a00      	cmp	r2, #0
 8012f2c:	db04      	blt.n	8012f38 <_dtoa_r+0xa10>
 8012f2e:	d125      	bne.n	8012f7c <_dtoa_r+0xa54>
 8012f30:	9a06      	ldr	r2, [sp, #24]
 8012f32:	bb1a      	cbnz	r2, 8012f7c <_dtoa_r+0xa54>
 8012f34:	9a07      	ldr	r2, [sp, #28]
 8012f36:	bb0a      	cbnz	r2, 8012f7c <_dtoa_r+0xa54>
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	ddec      	ble.n	8012f16 <_dtoa_r+0x9ee>
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	9904      	ldr	r1, [sp, #16]
 8012f40:	4620      	mov	r0, r4
 8012f42:	f000 fc5f 	bl	8013804 <__lshift>
 8012f46:	4639      	mov	r1, r7
 8012f48:	9004      	str	r0, [sp, #16]
 8012f4a:	f000 fcaf 	bl	80138ac <__mcmp>
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	dc03      	bgt.n	8012f5a <_dtoa_r+0xa32>
 8012f52:	d1e0      	bne.n	8012f16 <_dtoa_r+0x9ee>
 8012f54:	f018 0f01 	tst.w	r8, #1
 8012f58:	d0dd      	beq.n	8012f16 <_dtoa_r+0x9ee>
 8012f5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012f5e:	d1d8      	bne.n	8012f12 <_dtoa_r+0x9ea>
 8012f60:	9b05      	ldr	r3, [sp, #20]
 8012f62:	9a05      	ldr	r2, [sp, #20]
 8012f64:	1c5d      	adds	r5, r3, #1
 8012f66:	2339      	movs	r3, #57	; 0x39
 8012f68:	7013      	strb	r3, [r2, #0]
 8012f6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f6e:	2b39      	cmp	r3, #57	; 0x39
 8012f70:	f105 32ff 	add.w	r2, r5, #4294967295
 8012f74:	d04f      	beq.n	8013016 <_dtoa_r+0xaee>
 8012f76:	3301      	adds	r3, #1
 8012f78:	7013      	strb	r3, [r2, #0]
 8012f7a:	e754      	b.n	8012e26 <_dtoa_r+0x8fe>
 8012f7c:	9a05      	ldr	r2, [sp, #20]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	f102 0501 	add.w	r5, r2, #1
 8012f84:	dd06      	ble.n	8012f94 <_dtoa_r+0xa6c>
 8012f86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012f8a:	d0e9      	beq.n	8012f60 <_dtoa_r+0xa38>
 8012f8c:	f108 0801 	add.w	r8, r8, #1
 8012f90:	9b05      	ldr	r3, [sp, #20]
 8012f92:	e7c2      	b.n	8012f1a <_dtoa_r+0x9f2>
 8012f94:	9a02      	ldr	r2, [sp, #8]
 8012f96:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012f9a:	eba5 030b 	sub.w	r3, r5, fp
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	d021      	beq.n	8012fe6 <_dtoa_r+0xabe>
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	220a      	movs	r2, #10
 8012fa6:	9904      	ldr	r1, [sp, #16]
 8012fa8:	4620      	mov	r0, r4
 8012faa:	f000 fab4 	bl	8013516 <__multadd>
 8012fae:	45b1      	cmp	r9, r6
 8012fb0:	9004      	str	r0, [sp, #16]
 8012fb2:	f04f 0300 	mov.w	r3, #0
 8012fb6:	f04f 020a 	mov.w	r2, #10
 8012fba:	4649      	mov	r1, r9
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	d105      	bne.n	8012fcc <_dtoa_r+0xaa4>
 8012fc0:	f000 faa9 	bl	8013516 <__multadd>
 8012fc4:	4681      	mov	r9, r0
 8012fc6:	4606      	mov	r6, r0
 8012fc8:	9505      	str	r5, [sp, #20]
 8012fca:	e776      	b.n	8012eba <_dtoa_r+0x992>
 8012fcc:	f000 faa3 	bl	8013516 <__multadd>
 8012fd0:	4631      	mov	r1, r6
 8012fd2:	4681      	mov	r9, r0
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	220a      	movs	r2, #10
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f000 fa9c 	bl	8013516 <__multadd>
 8012fde:	4606      	mov	r6, r0
 8012fe0:	e7f2      	b.n	8012fc8 <_dtoa_r+0xaa0>
 8012fe2:	f04f 0900 	mov.w	r9, #0
 8012fe6:	2201      	movs	r2, #1
 8012fe8:	9904      	ldr	r1, [sp, #16]
 8012fea:	4620      	mov	r0, r4
 8012fec:	f000 fc0a 	bl	8013804 <__lshift>
 8012ff0:	4639      	mov	r1, r7
 8012ff2:	9004      	str	r0, [sp, #16]
 8012ff4:	f000 fc5a 	bl	80138ac <__mcmp>
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	dcb6      	bgt.n	8012f6a <_dtoa_r+0xa42>
 8012ffc:	d102      	bne.n	8013004 <_dtoa_r+0xadc>
 8012ffe:	f018 0f01 	tst.w	r8, #1
 8013002:	d1b2      	bne.n	8012f6a <_dtoa_r+0xa42>
 8013004:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013008:	2b30      	cmp	r3, #48	; 0x30
 801300a:	f105 32ff 	add.w	r2, r5, #4294967295
 801300e:	f47f af0a 	bne.w	8012e26 <_dtoa_r+0x8fe>
 8013012:	4615      	mov	r5, r2
 8013014:	e7f6      	b.n	8013004 <_dtoa_r+0xadc>
 8013016:	4593      	cmp	fp, r2
 8013018:	d105      	bne.n	8013026 <_dtoa_r+0xafe>
 801301a:	2331      	movs	r3, #49	; 0x31
 801301c:	f10a 0a01 	add.w	sl, sl, #1
 8013020:	f88b 3000 	strb.w	r3, [fp]
 8013024:	e6ff      	b.n	8012e26 <_dtoa_r+0x8fe>
 8013026:	4615      	mov	r5, r2
 8013028:	e79f      	b.n	8012f6a <_dtoa_r+0xa42>
 801302a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013090 <_dtoa_r+0xb68>
 801302e:	e007      	b.n	8013040 <_dtoa_r+0xb18>
 8013030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013032:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013094 <_dtoa_r+0xb6c>
 8013036:	b11b      	cbz	r3, 8013040 <_dtoa_r+0xb18>
 8013038:	f10b 0308 	add.w	r3, fp, #8
 801303c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801303e:	6013      	str	r3, [r2, #0]
 8013040:	4658      	mov	r0, fp
 8013042:	b017      	add	sp, #92	; 0x5c
 8013044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013048:	9b06      	ldr	r3, [sp, #24]
 801304a:	2b01      	cmp	r3, #1
 801304c:	f77f ae35 	ble.w	8012cba <_dtoa_r+0x792>
 8013050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013052:	9307      	str	r3, [sp, #28]
 8013054:	e649      	b.n	8012cea <_dtoa_r+0x7c2>
 8013056:	9b02      	ldr	r3, [sp, #8]
 8013058:	2b00      	cmp	r3, #0
 801305a:	dc03      	bgt.n	8013064 <_dtoa_r+0xb3c>
 801305c:	9b06      	ldr	r3, [sp, #24]
 801305e:	2b02      	cmp	r3, #2
 8013060:	f73f aecc 	bgt.w	8012dfc <_dtoa_r+0x8d4>
 8013064:	465d      	mov	r5, fp
 8013066:	4639      	mov	r1, r7
 8013068:	9804      	ldr	r0, [sp, #16]
 801306a:	f7ff f9cf 	bl	801240c <quorem>
 801306e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013072:	f805 8b01 	strb.w	r8, [r5], #1
 8013076:	9a02      	ldr	r2, [sp, #8]
 8013078:	eba5 030b 	sub.w	r3, r5, fp
 801307c:	429a      	cmp	r2, r3
 801307e:	ddb0      	ble.n	8012fe2 <_dtoa_r+0xaba>
 8013080:	2300      	movs	r3, #0
 8013082:	220a      	movs	r2, #10
 8013084:	9904      	ldr	r1, [sp, #16]
 8013086:	4620      	mov	r0, r4
 8013088:	f000 fa45 	bl	8013516 <__multadd>
 801308c:	9004      	str	r0, [sp, #16]
 801308e:	e7ea      	b.n	8013066 <_dtoa_r+0xb3e>
 8013090:	080140e0 	.word	0x080140e0
 8013094:	08014104 	.word	0x08014104

08013098 <__sflush_r>:
 8013098:	898a      	ldrh	r2, [r1, #12]
 801309a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801309e:	4605      	mov	r5, r0
 80130a0:	0710      	lsls	r0, r2, #28
 80130a2:	460c      	mov	r4, r1
 80130a4:	d458      	bmi.n	8013158 <__sflush_r+0xc0>
 80130a6:	684b      	ldr	r3, [r1, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	dc05      	bgt.n	80130b8 <__sflush_r+0x20>
 80130ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	dc02      	bgt.n	80130b8 <__sflush_r+0x20>
 80130b2:	2000      	movs	r0, #0
 80130b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130ba:	2e00      	cmp	r6, #0
 80130bc:	d0f9      	beq.n	80130b2 <__sflush_r+0x1a>
 80130be:	2300      	movs	r3, #0
 80130c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80130c4:	682f      	ldr	r7, [r5, #0]
 80130c6:	6a21      	ldr	r1, [r4, #32]
 80130c8:	602b      	str	r3, [r5, #0]
 80130ca:	d032      	beq.n	8013132 <__sflush_r+0x9a>
 80130cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80130ce:	89a3      	ldrh	r3, [r4, #12]
 80130d0:	075a      	lsls	r2, r3, #29
 80130d2:	d505      	bpl.n	80130e0 <__sflush_r+0x48>
 80130d4:	6863      	ldr	r3, [r4, #4]
 80130d6:	1ac0      	subs	r0, r0, r3
 80130d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80130da:	b10b      	cbz	r3, 80130e0 <__sflush_r+0x48>
 80130dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80130de:	1ac0      	subs	r0, r0, r3
 80130e0:	2300      	movs	r3, #0
 80130e2:	4602      	mov	r2, r0
 80130e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130e6:	6a21      	ldr	r1, [r4, #32]
 80130e8:	4628      	mov	r0, r5
 80130ea:	47b0      	blx	r6
 80130ec:	1c43      	adds	r3, r0, #1
 80130ee:	89a3      	ldrh	r3, [r4, #12]
 80130f0:	d106      	bne.n	8013100 <__sflush_r+0x68>
 80130f2:	6829      	ldr	r1, [r5, #0]
 80130f4:	291d      	cmp	r1, #29
 80130f6:	d848      	bhi.n	801318a <__sflush_r+0xf2>
 80130f8:	4a29      	ldr	r2, [pc, #164]	; (80131a0 <__sflush_r+0x108>)
 80130fa:	40ca      	lsrs	r2, r1
 80130fc:	07d6      	lsls	r6, r2, #31
 80130fe:	d544      	bpl.n	801318a <__sflush_r+0xf2>
 8013100:	2200      	movs	r2, #0
 8013102:	6062      	str	r2, [r4, #4]
 8013104:	04d9      	lsls	r1, r3, #19
 8013106:	6922      	ldr	r2, [r4, #16]
 8013108:	6022      	str	r2, [r4, #0]
 801310a:	d504      	bpl.n	8013116 <__sflush_r+0x7e>
 801310c:	1c42      	adds	r2, r0, #1
 801310e:	d101      	bne.n	8013114 <__sflush_r+0x7c>
 8013110:	682b      	ldr	r3, [r5, #0]
 8013112:	b903      	cbnz	r3, 8013116 <__sflush_r+0x7e>
 8013114:	6560      	str	r0, [r4, #84]	; 0x54
 8013116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013118:	602f      	str	r7, [r5, #0]
 801311a:	2900      	cmp	r1, #0
 801311c:	d0c9      	beq.n	80130b2 <__sflush_r+0x1a>
 801311e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013122:	4299      	cmp	r1, r3
 8013124:	d002      	beq.n	801312c <__sflush_r+0x94>
 8013126:	4628      	mov	r0, r5
 8013128:	f000 fc94 	bl	8013a54 <_free_r>
 801312c:	2000      	movs	r0, #0
 801312e:	6360      	str	r0, [r4, #52]	; 0x34
 8013130:	e7c0      	b.n	80130b4 <__sflush_r+0x1c>
 8013132:	2301      	movs	r3, #1
 8013134:	4628      	mov	r0, r5
 8013136:	47b0      	blx	r6
 8013138:	1c41      	adds	r1, r0, #1
 801313a:	d1c8      	bne.n	80130ce <__sflush_r+0x36>
 801313c:	682b      	ldr	r3, [r5, #0]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d0c5      	beq.n	80130ce <__sflush_r+0x36>
 8013142:	2b1d      	cmp	r3, #29
 8013144:	d001      	beq.n	801314a <__sflush_r+0xb2>
 8013146:	2b16      	cmp	r3, #22
 8013148:	d101      	bne.n	801314e <__sflush_r+0xb6>
 801314a:	602f      	str	r7, [r5, #0]
 801314c:	e7b1      	b.n	80130b2 <__sflush_r+0x1a>
 801314e:	89a3      	ldrh	r3, [r4, #12]
 8013150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013154:	81a3      	strh	r3, [r4, #12]
 8013156:	e7ad      	b.n	80130b4 <__sflush_r+0x1c>
 8013158:	690f      	ldr	r7, [r1, #16]
 801315a:	2f00      	cmp	r7, #0
 801315c:	d0a9      	beq.n	80130b2 <__sflush_r+0x1a>
 801315e:	0793      	lsls	r3, r2, #30
 8013160:	680e      	ldr	r6, [r1, #0]
 8013162:	bf08      	it	eq
 8013164:	694b      	ldreq	r3, [r1, #20]
 8013166:	600f      	str	r7, [r1, #0]
 8013168:	bf18      	it	ne
 801316a:	2300      	movne	r3, #0
 801316c:	eba6 0807 	sub.w	r8, r6, r7
 8013170:	608b      	str	r3, [r1, #8]
 8013172:	f1b8 0f00 	cmp.w	r8, #0
 8013176:	dd9c      	ble.n	80130b2 <__sflush_r+0x1a>
 8013178:	4643      	mov	r3, r8
 801317a:	463a      	mov	r2, r7
 801317c:	6a21      	ldr	r1, [r4, #32]
 801317e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013180:	4628      	mov	r0, r5
 8013182:	47b0      	blx	r6
 8013184:	2800      	cmp	r0, #0
 8013186:	dc06      	bgt.n	8013196 <__sflush_r+0xfe>
 8013188:	89a3      	ldrh	r3, [r4, #12]
 801318a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801318e:	81a3      	strh	r3, [r4, #12]
 8013190:	f04f 30ff 	mov.w	r0, #4294967295
 8013194:	e78e      	b.n	80130b4 <__sflush_r+0x1c>
 8013196:	4407      	add	r7, r0
 8013198:	eba8 0800 	sub.w	r8, r8, r0
 801319c:	e7e9      	b.n	8013172 <__sflush_r+0xda>
 801319e:	bf00      	nop
 80131a0:	20400001 	.word	0x20400001

080131a4 <_fflush_r>:
 80131a4:	b538      	push	{r3, r4, r5, lr}
 80131a6:	690b      	ldr	r3, [r1, #16]
 80131a8:	4605      	mov	r5, r0
 80131aa:	460c      	mov	r4, r1
 80131ac:	b1db      	cbz	r3, 80131e6 <_fflush_r+0x42>
 80131ae:	b118      	cbz	r0, 80131b8 <_fflush_r+0x14>
 80131b0:	6983      	ldr	r3, [r0, #24]
 80131b2:	b90b      	cbnz	r3, 80131b8 <_fflush_r+0x14>
 80131b4:	f000 f860 	bl	8013278 <__sinit>
 80131b8:	4b0c      	ldr	r3, [pc, #48]	; (80131ec <_fflush_r+0x48>)
 80131ba:	429c      	cmp	r4, r3
 80131bc:	d109      	bne.n	80131d2 <_fflush_r+0x2e>
 80131be:	686c      	ldr	r4, [r5, #4]
 80131c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131c4:	b17b      	cbz	r3, 80131e6 <_fflush_r+0x42>
 80131c6:	4621      	mov	r1, r4
 80131c8:	4628      	mov	r0, r5
 80131ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ce:	f7ff bf63 	b.w	8013098 <__sflush_r>
 80131d2:	4b07      	ldr	r3, [pc, #28]	; (80131f0 <_fflush_r+0x4c>)
 80131d4:	429c      	cmp	r4, r3
 80131d6:	d101      	bne.n	80131dc <_fflush_r+0x38>
 80131d8:	68ac      	ldr	r4, [r5, #8]
 80131da:	e7f1      	b.n	80131c0 <_fflush_r+0x1c>
 80131dc:	4b05      	ldr	r3, [pc, #20]	; (80131f4 <_fflush_r+0x50>)
 80131de:	429c      	cmp	r4, r3
 80131e0:	bf08      	it	eq
 80131e2:	68ec      	ldreq	r4, [r5, #12]
 80131e4:	e7ec      	b.n	80131c0 <_fflush_r+0x1c>
 80131e6:	2000      	movs	r0, #0
 80131e8:	bd38      	pop	{r3, r4, r5, pc}
 80131ea:	bf00      	nop
 80131ec:	08014134 	.word	0x08014134
 80131f0:	08014154 	.word	0x08014154
 80131f4:	08014114 	.word	0x08014114

080131f8 <std>:
 80131f8:	2300      	movs	r3, #0
 80131fa:	b510      	push	{r4, lr}
 80131fc:	4604      	mov	r4, r0
 80131fe:	e9c0 3300 	strd	r3, r3, [r0]
 8013202:	6083      	str	r3, [r0, #8]
 8013204:	8181      	strh	r1, [r0, #12]
 8013206:	6643      	str	r3, [r0, #100]	; 0x64
 8013208:	81c2      	strh	r2, [r0, #14]
 801320a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801320e:	6183      	str	r3, [r0, #24]
 8013210:	4619      	mov	r1, r3
 8013212:	2208      	movs	r2, #8
 8013214:	305c      	adds	r0, #92	; 0x5c
 8013216:	f7fe fb58 	bl	80118ca <memset>
 801321a:	4b05      	ldr	r3, [pc, #20]	; (8013230 <std+0x38>)
 801321c:	6263      	str	r3, [r4, #36]	; 0x24
 801321e:	4b05      	ldr	r3, [pc, #20]	; (8013234 <std+0x3c>)
 8013220:	62a3      	str	r3, [r4, #40]	; 0x28
 8013222:	4b05      	ldr	r3, [pc, #20]	; (8013238 <std+0x40>)
 8013224:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013226:	4b05      	ldr	r3, [pc, #20]	; (801323c <std+0x44>)
 8013228:	6224      	str	r4, [r4, #32]
 801322a:	6323      	str	r3, [r4, #48]	; 0x30
 801322c:	bd10      	pop	{r4, pc}
 801322e:	bf00      	nop
 8013230:	08013e45 	.word	0x08013e45
 8013234:	08013e67 	.word	0x08013e67
 8013238:	08013e9f 	.word	0x08013e9f
 801323c:	08013ec3 	.word	0x08013ec3

08013240 <_cleanup_r>:
 8013240:	4901      	ldr	r1, [pc, #4]	; (8013248 <_cleanup_r+0x8>)
 8013242:	f000 b885 	b.w	8013350 <_fwalk_reent>
 8013246:	bf00      	nop
 8013248:	080131a5 	.word	0x080131a5

0801324c <__sfmoreglue>:
 801324c:	b570      	push	{r4, r5, r6, lr}
 801324e:	1e4a      	subs	r2, r1, #1
 8013250:	2568      	movs	r5, #104	; 0x68
 8013252:	4355      	muls	r5, r2
 8013254:	460e      	mov	r6, r1
 8013256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801325a:	f000 fc49 	bl	8013af0 <_malloc_r>
 801325e:	4604      	mov	r4, r0
 8013260:	b140      	cbz	r0, 8013274 <__sfmoreglue+0x28>
 8013262:	2100      	movs	r1, #0
 8013264:	e9c0 1600 	strd	r1, r6, [r0]
 8013268:	300c      	adds	r0, #12
 801326a:	60a0      	str	r0, [r4, #8]
 801326c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013270:	f7fe fb2b 	bl	80118ca <memset>
 8013274:	4620      	mov	r0, r4
 8013276:	bd70      	pop	{r4, r5, r6, pc}

08013278 <__sinit>:
 8013278:	6983      	ldr	r3, [r0, #24]
 801327a:	b510      	push	{r4, lr}
 801327c:	4604      	mov	r4, r0
 801327e:	bb33      	cbnz	r3, 80132ce <__sinit+0x56>
 8013280:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013284:	6503      	str	r3, [r0, #80]	; 0x50
 8013286:	4b12      	ldr	r3, [pc, #72]	; (80132d0 <__sinit+0x58>)
 8013288:	4a12      	ldr	r2, [pc, #72]	; (80132d4 <__sinit+0x5c>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	6282      	str	r2, [r0, #40]	; 0x28
 801328e:	4298      	cmp	r0, r3
 8013290:	bf04      	itt	eq
 8013292:	2301      	moveq	r3, #1
 8013294:	6183      	streq	r3, [r0, #24]
 8013296:	f000 f81f 	bl	80132d8 <__sfp>
 801329a:	6060      	str	r0, [r4, #4]
 801329c:	4620      	mov	r0, r4
 801329e:	f000 f81b 	bl	80132d8 <__sfp>
 80132a2:	60a0      	str	r0, [r4, #8]
 80132a4:	4620      	mov	r0, r4
 80132a6:	f000 f817 	bl	80132d8 <__sfp>
 80132aa:	2200      	movs	r2, #0
 80132ac:	60e0      	str	r0, [r4, #12]
 80132ae:	2104      	movs	r1, #4
 80132b0:	6860      	ldr	r0, [r4, #4]
 80132b2:	f7ff ffa1 	bl	80131f8 <std>
 80132b6:	2201      	movs	r2, #1
 80132b8:	2109      	movs	r1, #9
 80132ba:	68a0      	ldr	r0, [r4, #8]
 80132bc:	f7ff ff9c 	bl	80131f8 <std>
 80132c0:	2202      	movs	r2, #2
 80132c2:	2112      	movs	r1, #18
 80132c4:	68e0      	ldr	r0, [r4, #12]
 80132c6:	f7ff ff97 	bl	80131f8 <std>
 80132ca:	2301      	movs	r3, #1
 80132cc:	61a3      	str	r3, [r4, #24]
 80132ce:	bd10      	pop	{r4, pc}
 80132d0:	080140cc 	.word	0x080140cc
 80132d4:	08013241 	.word	0x08013241

080132d8 <__sfp>:
 80132d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132da:	4b1b      	ldr	r3, [pc, #108]	; (8013348 <__sfp+0x70>)
 80132dc:	681e      	ldr	r6, [r3, #0]
 80132de:	69b3      	ldr	r3, [r6, #24]
 80132e0:	4607      	mov	r7, r0
 80132e2:	b913      	cbnz	r3, 80132ea <__sfp+0x12>
 80132e4:	4630      	mov	r0, r6
 80132e6:	f7ff ffc7 	bl	8013278 <__sinit>
 80132ea:	3648      	adds	r6, #72	; 0x48
 80132ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80132f0:	3b01      	subs	r3, #1
 80132f2:	d503      	bpl.n	80132fc <__sfp+0x24>
 80132f4:	6833      	ldr	r3, [r6, #0]
 80132f6:	b133      	cbz	r3, 8013306 <__sfp+0x2e>
 80132f8:	6836      	ldr	r6, [r6, #0]
 80132fa:	e7f7      	b.n	80132ec <__sfp+0x14>
 80132fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013300:	b16d      	cbz	r5, 801331e <__sfp+0x46>
 8013302:	3468      	adds	r4, #104	; 0x68
 8013304:	e7f4      	b.n	80132f0 <__sfp+0x18>
 8013306:	2104      	movs	r1, #4
 8013308:	4638      	mov	r0, r7
 801330a:	f7ff ff9f 	bl	801324c <__sfmoreglue>
 801330e:	6030      	str	r0, [r6, #0]
 8013310:	2800      	cmp	r0, #0
 8013312:	d1f1      	bne.n	80132f8 <__sfp+0x20>
 8013314:	230c      	movs	r3, #12
 8013316:	603b      	str	r3, [r7, #0]
 8013318:	4604      	mov	r4, r0
 801331a:	4620      	mov	r0, r4
 801331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801331e:	4b0b      	ldr	r3, [pc, #44]	; (801334c <__sfp+0x74>)
 8013320:	6665      	str	r5, [r4, #100]	; 0x64
 8013322:	e9c4 5500 	strd	r5, r5, [r4]
 8013326:	60a5      	str	r5, [r4, #8]
 8013328:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801332c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013330:	2208      	movs	r2, #8
 8013332:	4629      	mov	r1, r5
 8013334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013338:	f7fe fac7 	bl	80118ca <memset>
 801333c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013344:	e7e9      	b.n	801331a <__sfp+0x42>
 8013346:	bf00      	nop
 8013348:	080140cc 	.word	0x080140cc
 801334c:	ffff0001 	.word	0xffff0001

08013350 <_fwalk_reent>:
 8013350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013354:	4680      	mov	r8, r0
 8013356:	4689      	mov	r9, r1
 8013358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801335c:	2600      	movs	r6, #0
 801335e:	b914      	cbnz	r4, 8013366 <_fwalk_reent+0x16>
 8013360:	4630      	mov	r0, r6
 8013362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013366:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801336a:	3f01      	subs	r7, #1
 801336c:	d501      	bpl.n	8013372 <_fwalk_reent+0x22>
 801336e:	6824      	ldr	r4, [r4, #0]
 8013370:	e7f5      	b.n	801335e <_fwalk_reent+0xe>
 8013372:	89ab      	ldrh	r3, [r5, #12]
 8013374:	2b01      	cmp	r3, #1
 8013376:	d907      	bls.n	8013388 <_fwalk_reent+0x38>
 8013378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801337c:	3301      	adds	r3, #1
 801337e:	d003      	beq.n	8013388 <_fwalk_reent+0x38>
 8013380:	4629      	mov	r1, r5
 8013382:	4640      	mov	r0, r8
 8013384:	47c8      	blx	r9
 8013386:	4306      	orrs	r6, r0
 8013388:	3568      	adds	r5, #104	; 0x68
 801338a:	e7ee      	b.n	801336a <_fwalk_reent+0x1a>

0801338c <_localeconv_r>:
 801338c:	4b04      	ldr	r3, [pc, #16]	; (80133a0 <_localeconv_r+0x14>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	6a18      	ldr	r0, [r3, #32]
 8013392:	4b04      	ldr	r3, [pc, #16]	; (80133a4 <_localeconv_r+0x18>)
 8013394:	2800      	cmp	r0, #0
 8013396:	bf08      	it	eq
 8013398:	4618      	moveq	r0, r3
 801339a:	30f0      	adds	r0, #240	; 0xf0
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop
 80133a0:	20000010 	.word	0x20000010
 80133a4:	20000074 	.word	0x20000074

080133a8 <__swhatbuf_r>:
 80133a8:	b570      	push	{r4, r5, r6, lr}
 80133aa:	460e      	mov	r6, r1
 80133ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133b0:	2900      	cmp	r1, #0
 80133b2:	b096      	sub	sp, #88	; 0x58
 80133b4:	4614      	mov	r4, r2
 80133b6:	461d      	mov	r5, r3
 80133b8:	da07      	bge.n	80133ca <__swhatbuf_r+0x22>
 80133ba:	2300      	movs	r3, #0
 80133bc:	602b      	str	r3, [r5, #0]
 80133be:	89b3      	ldrh	r3, [r6, #12]
 80133c0:	061a      	lsls	r2, r3, #24
 80133c2:	d410      	bmi.n	80133e6 <__swhatbuf_r+0x3e>
 80133c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133c8:	e00e      	b.n	80133e8 <__swhatbuf_r+0x40>
 80133ca:	466a      	mov	r2, sp
 80133cc:	f000 fda0 	bl	8013f10 <_fstat_r>
 80133d0:	2800      	cmp	r0, #0
 80133d2:	dbf2      	blt.n	80133ba <__swhatbuf_r+0x12>
 80133d4:	9a01      	ldr	r2, [sp, #4]
 80133d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80133da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80133de:	425a      	negs	r2, r3
 80133e0:	415a      	adcs	r2, r3
 80133e2:	602a      	str	r2, [r5, #0]
 80133e4:	e7ee      	b.n	80133c4 <__swhatbuf_r+0x1c>
 80133e6:	2340      	movs	r3, #64	; 0x40
 80133e8:	2000      	movs	r0, #0
 80133ea:	6023      	str	r3, [r4, #0]
 80133ec:	b016      	add	sp, #88	; 0x58
 80133ee:	bd70      	pop	{r4, r5, r6, pc}

080133f0 <__smakebuf_r>:
 80133f0:	898b      	ldrh	r3, [r1, #12]
 80133f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80133f4:	079d      	lsls	r5, r3, #30
 80133f6:	4606      	mov	r6, r0
 80133f8:	460c      	mov	r4, r1
 80133fa:	d507      	bpl.n	801340c <__smakebuf_r+0x1c>
 80133fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013400:	6023      	str	r3, [r4, #0]
 8013402:	6123      	str	r3, [r4, #16]
 8013404:	2301      	movs	r3, #1
 8013406:	6163      	str	r3, [r4, #20]
 8013408:	b002      	add	sp, #8
 801340a:	bd70      	pop	{r4, r5, r6, pc}
 801340c:	ab01      	add	r3, sp, #4
 801340e:	466a      	mov	r2, sp
 8013410:	f7ff ffca 	bl	80133a8 <__swhatbuf_r>
 8013414:	9900      	ldr	r1, [sp, #0]
 8013416:	4605      	mov	r5, r0
 8013418:	4630      	mov	r0, r6
 801341a:	f000 fb69 	bl	8013af0 <_malloc_r>
 801341e:	b948      	cbnz	r0, 8013434 <__smakebuf_r+0x44>
 8013420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013424:	059a      	lsls	r2, r3, #22
 8013426:	d4ef      	bmi.n	8013408 <__smakebuf_r+0x18>
 8013428:	f023 0303 	bic.w	r3, r3, #3
 801342c:	f043 0302 	orr.w	r3, r3, #2
 8013430:	81a3      	strh	r3, [r4, #12]
 8013432:	e7e3      	b.n	80133fc <__smakebuf_r+0xc>
 8013434:	4b0d      	ldr	r3, [pc, #52]	; (801346c <__smakebuf_r+0x7c>)
 8013436:	62b3      	str	r3, [r6, #40]	; 0x28
 8013438:	89a3      	ldrh	r3, [r4, #12]
 801343a:	6020      	str	r0, [r4, #0]
 801343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013440:	81a3      	strh	r3, [r4, #12]
 8013442:	9b00      	ldr	r3, [sp, #0]
 8013444:	6163      	str	r3, [r4, #20]
 8013446:	9b01      	ldr	r3, [sp, #4]
 8013448:	6120      	str	r0, [r4, #16]
 801344a:	b15b      	cbz	r3, 8013464 <__smakebuf_r+0x74>
 801344c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013450:	4630      	mov	r0, r6
 8013452:	f000 fd6f 	bl	8013f34 <_isatty_r>
 8013456:	b128      	cbz	r0, 8013464 <__smakebuf_r+0x74>
 8013458:	89a3      	ldrh	r3, [r4, #12]
 801345a:	f023 0303 	bic.w	r3, r3, #3
 801345e:	f043 0301 	orr.w	r3, r3, #1
 8013462:	81a3      	strh	r3, [r4, #12]
 8013464:	89a3      	ldrh	r3, [r4, #12]
 8013466:	431d      	orrs	r5, r3
 8013468:	81a5      	strh	r5, [r4, #12]
 801346a:	e7cd      	b.n	8013408 <__smakebuf_r+0x18>
 801346c:	08013241 	.word	0x08013241

08013470 <malloc>:
 8013470:	4b02      	ldr	r3, [pc, #8]	; (801347c <malloc+0xc>)
 8013472:	4601      	mov	r1, r0
 8013474:	6818      	ldr	r0, [r3, #0]
 8013476:	f000 bb3b 	b.w	8013af0 <_malloc_r>
 801347a:	bf00      	nop
 801347c:	20000010 	.word	0x20000010

08013480 <_Balloc>:
 8013480:	b570      	push	{r4, r5, r6, lr}
 8013482:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013484:	4604      	mov	r4, r0
 8013486:	460e      	mov	r6, r1
 8013488:	b93d      	cbnz	r5, 801349a <_Balloc+0x1a>
 801348a:	2010      	movs	r0, #16
 801348c:	f7ff fff0 	bl	8013470 <malloc>
 8013490:	6260      	str	r0, [r4, #36]	; 0x24
 8013492:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013496:	6005      	str	r5, [r0, #0]
 8013498:	60c5      	str	r5, [r0, #12]
 801349a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801349c:	68eb      	ldr	r3, [r5, #12]
 801349e:	b183      	cbz	r3, 80134c2 <_Balloc+0x42>
 80134a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80134a8:	b9b8      	cbnz	r0, 80134da <_Balloc+0x5a>
 80134aa:	2101      	movs	r1, #1
 80134ac:	fa01 f506 	lsl.w	r5, r1, r6
 80134b0:	1d6a      	adds	r2, r5, #5
 80134b2:	0092      	lsls	r2, r2, #2
 80134b4:	4620      	mov	r0, r4
 80134b6:	f000 fabf 	bl	8013a38 <_calloc_r>
 80134ba:	b160      	cbz	r0, 80134d6 <_Balloc+0x56>
 80134bc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80134c0:	e00e      	b.n	80134e0 <_Balloc+0x60>
 80134c2:	2221      	movs	r2, #33	; 0x21
 80134c4:	2104      	movs	r1, #4
 80134c6:	4620      	mov	r0, r4
 80134c8:	f000 fab6 	bl	8013a38 <_calloc_r>
 80134cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134ce:	60e8      	str	r0, [r5, #12]
 80134d0:	68db      	ldr	r3, [r3, #12]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d1e4      	bne.n	80134a0 <_Balloc+0x20>
 80134d6:	2000      	movs	r0, #0
 80134d8:	bd70      	pop	{r4, r5, r6, pc}
 80134da:	6802      	ldr	r2, [r0, #0]
 80134dc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80134e0:	2300      	movs	r3, #0
 80134e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80134e6:	e7f7      	b.n	80134d8 <_Balloc+0x58>

080134e8 <_Bfree>:
 80134e8:	b570      	push	{r4, r5, r6, lr}
 80134ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80134ec:	4606      	mov	r6, r0
 80134ee:	460d      	mov	r5, r1
 80134f0:	b93c      	cbnz	r4, 8013502 <_Bfree+0x1a>
 80134f2:	2010      	movs	r0, #16
 80134f4:	f7ff ffbc 	bl	8013470 <malloc>
 80134f8:	6270      	str	r0, [r6, #36]	; 0x24
 80134fa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80134fe:	6004      	str	r4, [r0, #0]
 8013500:	60c4      	str	r4, [r0, #12]
 8013502:	b13d      	cbz	r5, 8013514 <_Bfree+0x2c>
 8013504:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013506:	686a      	ldr	r2, [r5, #4]
 8013508:	68db      	ldr	r3, [r3, #12]
 801350a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801350e:	6029      	str	r1, [r5, #0]
 8013510:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013514:	bd70      	pop	{r4, r5, r6, pc}

08013516 <__multadd>:
 8013516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801351a:	690d      	ldr	r5, [r1, #16]
 801351c:	461f      	mov	r7, r3
 801351e:	4606      	mov	r6, r0
 8013520:	460c      	mov	r4, r1
 8013522:	f101 0c14 	add.w	ip, r1, #20
 8013526:	2300      	movs	r3, #0
 8013528:	f8dc 0000 	ldr.w	r0, [ip]
 801352c:	b281      	uxth	r1, r0
 801352e:	fb02 7101 	mla	r1, r2, r1, r7
 8013532:	0c0f      	lsrs	r7, r1, #16
 8013534:	0c00      	lsrs	r0, r0, #16
 8013536:	fb02 7000 	mla	r0, r2, r0, r7
 801353a:	b289      	uxth	r1, r1
 801353c:	3301      	adds	r3, #1
 801353e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013542:	429d      	cmp	r5, r3
 8013544:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013548:	f84c 1b04 	str.w	r1, [ip], #4
 801354c:	dcec      	bgt.n	8013528 <__multadd+0x12>
 801354e:	b1d7      	cbz	r7, 8013586 <__multadd+0x70>
 8013550:	68a3      	ldr	r3, [r4, #8]
 8013552:	42ab      	cmp	r3, r5
 8013554:	dc12      	bgt.n	801357c <__multadd+0x66>
 8013556:	6861      	ldr	r1, [r4, #4]
 8013558:	4630      	mov	r0, r6
 801355a:	3101      	adds	r1, #1
 801355c:	f7ff ff90 	bl	8013480 <_Balloc>
 8013560:	6922      	ldr	r2, [r4, #16]
 8013562:	3202      	adds	r2, #2
 8013564:	f104 010c 	add.w	r1, r4, #12
 8013568:	4680      	mov	r8, r0
 801356a:	0092      	lsls	r2, r2, #2
 801356c:	300c      	adds	r0, #12
 801356e:	f7fe f9a1 	bl	80118b4 <memcpy>
 8013572:	4621      	mov	r1, r4
 8013574:	4630      	mov	r0, r6
 8013576:	f7ff ffb7 	bl	80134e8 <_Bfree>
 801357a:	4644      	mov	r4, r8
 801357c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013580:	3501      	adds	r5, #1
 8013582:	615f      	str	r7, [r3, #20]
 8013584:	6125      	str	r5, [r4, #16]
 8013586:	4620      	mov	r0, r4
 8013588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801358c <__hi0bits>:
 801358c:	0c02      	lsrs	r2, r0, #16
 801358e:	0412      	lsls	r2, r2, #16
 8013590:	4603      	mov	r3, r0
 8013592:	b9b2      	cbnz	r2, 80135c2 <__hi0bits+0x36>
 8013594:	0403      	lsls	r3, r0, #16
 8013596:	2010      	movs	r0, #16
 8013598:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801359c:	bf04      	itt	eq
 801359e:	021b      	lsleq	r3, r3, #8
 80135a0:	3008      	addeq	r0, #8
 80135a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80135a6:	bf04      	itt	eq
 80135a8:	011b      	lsleq	r3, r3, #4
 80135aa:	3004      	addeq	r0, #4
 80135ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80135b0:	bf04      	itt	eq
 80135b2:	009b      	lsleq	r3, r3, #2
 80135b4:	3002      	addeq	r0, #2
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	db06      	blt.n	80135c8 <__hi0bits+0x3c>
 80135ba:	005b      	lsls	r3, r3, #1
 80135bc:	d503      	bpl.n	80135c6 <__hi0bits+0x3a>
 80135be:	3001      	adds	r0, #1
 80135c0:	4770      	bx	lr
 80135c2:	2000      	movs	r0, #0
 80135c4:	e7e8      	b.n	8013598 <__hi0bits+0xc>
 80135c6:	2020      	movs	r0, #32
 80135c8:	4770      	bx	lr

080135ca <__lo0bits>:
 80135ca:	6803      	ldr	r3, [r0, #0]
 80135cc:	f013 0207 	ands.w	r2, r3, #7
 80135d0:	4601      	mov	r1, r0
 80135d2:	d00b      	beq.n	80135ec <__lo0bits+0x22>
 80135d4:	07da      	lsls	r2, r3, #31
 80135d6:	d423      	bmi.n	8013620 <__lo0bits+0x56>
 80135d8:	0798      	lsls	r0, r3, #30
 80135da:	bf49      	itett	mi
 80135dc:	085b      	lsrmi	r3, r3, #1
 80135de:	089b      	lsrpl	r3, r3, #2
 80135e0:	2001      	movmi	r0, #1
 80135e2:	600b      	strmi	r3, [r1, #0]
 80135e4:	bf5c      	itt	pl
 80135e6:	600b      	strpl	r3, [r1, #0]
 80135e8:	2002      	movpl	r0, #2
 80135ea:	4770      	bx	lr
 80135ec:	b298      	uxth	r0, r3
 80135ee:	b9a8      	cbnz	r0, 801361c <__lo0bits+0x52>
 80135f0:	0c1b      	lsrs	r3, r3, #16
 80135f2:	2010      	movs	r0, #16
 80135f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80135f8:	bf04      	itt	eq
 80135fa:	0a1b      	lsreq	r3, r3, #8
 80135fc:	3008      	addeq	r0, #8
 80135fe:	071a      	lsls	r2, r3, #28
 8013600:	bf04      	itt	eq
 8013602:	091b      	lsreq	r3, r3, #4
 8013604:	3004      	addeq	r0, #4
 8013606:	079a      	lsls	r2, r3, #30
 8013608:	bf04      	itt	eq
 801360a:	089b      	lsreq	r3, r3, #2
 801360c:	3002      	addeq	r0, #2
 801360e:	07da      	lsls	r2, r3, #31
 8013610:	d402      	bmi.n	8013618 <__lo0bits+0x4e>
 8013612:	085b      	lsrs	r3, r3, #1
 8013614:	d006      	beq.n	8013624 <__lo0bits+0x5a>
 8013616:	3001      	adds	r0, #1
 8013618:	600b      	str	r3, [r1, #0]
 801361a:	4770      	bx	lr
 801361c:	4610      	mov	r0, r2
 801361e:	e7e9      	b.n	80135f4 <__lo0bits+0x2a>
 8013620:	2000      	movs	r0, #0
 8013622:	4770      	bx	lr
 8013624:	2020      	movs	r0, #32
 8013626:	4770      	bx	lr

08013628 <__i2b>:
 8013628:	b510      	push	{r4, lr}
 801362a:	460c      	mov	r4, r1
 801362c:	2101      	movs	r1, #1
 801362e:	f7ff ff27 	bl	8013480 <_Balloc>
 8013632:	2201      	movs	r2, #1
 8013634:	6144      	str	r4, [r0, #20]
 8013636:	6102      	str	r2, [r0, #16]
 8013638:	bd10      	pop	{r4, pc}

0801363a <__multiply>:
 801363a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801363e:	4614      	mov	r4, r2
 8013640:	690a      	ldr	r2, [r1, #16]
 8013642:	6923      	ldr	r3, [r4, #16]
 8013644:	429a      	cmp	r2, r3
 8013646:	bfb8      	it	lt
 8013648:	460b      	movlt	r3, r1
 801364a:	4688      	mov	r8, r1
 801364c:	bfbc      	itt	lt
 801364e:	46a0      	movlt	r8, r4
 8013650:	461c      	movlt	r4, r3
 8013652:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013656:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801365a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801365e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013662:	eb07 0609 	add.w	r6, r7, r9
 8013666:	42b3      	cmp	r3, r6
 8013668:	bfb8      	it	lt
 801366a:	3101      	addlt	r1, #1
 801366c:	f7ff ff08 	bl	8013480 <_Balloc>
 8013670:	f100 0514 	add.w	r5, r0, #20
 8013674:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013678:	462b      	mov	r3, r5
 801367a:	2200      	movs	r2, #0
 801367c:	4573      	cmp	r3, lr
 801367e:	d316      	bcc.n	80136ae <__multiply+0x74>
 8013680:	f104 0214 	add.w	r2, r4, #20
 8013684:	f108 0114 	add.w	r1, r8, #20
 8013688:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801368c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	9b00      	ldr	r3, [sp, #0]
 8013694:	9201      	str	r2, [sp, #4]
 8013696:	4293      	cmp	r3, r2
 8013698:	d80c      	bhi.n	80136b4 <__multiply+0x7a>
 801369a:	2e00      	cmp	r6, #0
 801369c:	dd03      	ble.n	80136a6 <__multiply+0x6c>
 801369e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d05d      	beq.n	8013762 <__multiply+0x128>
 80136a6:	6106      	str	r6, [r0, #16]
 80136a8:	b003      	add	sp, #12
 80136aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ae:	f843 2b04 	str.w	r2, [r3], #4
 80136b2:	e7e3      	b.n	801367c <__multiply+0x42>
 80136b4:	f8b2 b000 	ldrh.w	fp, [r2]
 80136b8:	f1bb 0f00 	cmp.w	fp, #0
 80136bc:	d023      	beq.n	8013706 <__multiply+0xcc>
 80136be:	4689      	mov	r9, r1
 80136c0:	46ac      	mov	ip, r5
 80136c2:	f04f 0800 	mov.w	r8, #0
 80136c6:	f859 4b04 	ldr.w	r4, [r9], #4
 80136ca:	f8dc a000 	ldr.w	sl, [ip]
 80136ce:	b2a3      	uxth	r3, r4
 80136d0:	fa1f fa8a 	uxth.w	sl, sl
 80136d4:	fb0b a303 	mla	r3, fp, r3, sl
 80136d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80136dc:	f8dc 4000 	ldr.w	r4, [ip]
 80136e0:	4443      	add	r3, r8
 80136e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80136e6:	fb0b 840a 	mla	r4, fp, sl, r8
 80136ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80136ee:	46e2      	mov	sl, ip
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80136f6:	454f      	cmp	r7, r9
 80136f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80136fc:	f84a 3b04 	str.w	r3, [sl], #4
 8013700:	d82b      	bhi.n	801375a <__multiply+0x120>
 8013702:	f8cc 8004 	str.w	r8, [ip, #4]
 8013706:	9b01      	ldr	r3, [sp, #4]
 8013708:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801370c:	3204      	adds	r2, #4
 801370e:	f1ba 0f00 	cmp.w	sl, #0
 8013712:	d020      	beq.n	8013756 <__multiply+0x11c>
 8013714:	682b      	ldr	r3, [r5, #0]
 8013716:	4689      	mov	r9, r1
 8013718:	46a8      	mov	r8, r5
 801371a:	f04f 0b00 	mov.w	fp, #0
 801371e:	f8b9 c000 	ldrh.w	ip, [r9]
 8013722:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013726:	fb0a 440c 	mla	r4, sl, ip, r4
 801372a:	445c      	add	r4, fp
 801372c:	46c4      	mov	ip, r8
 801372e:	b29b      	uxth	r3, r3
 8013730:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013734:	f84c 3b04 	str.w	r3, [ip], #4
 8013738:	f859 3b04 	ldr.w	r3, [r9], #4
 801373c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013740:	0c1b      	lsrs	r3, r3, #16
 8013742:	fb0a b303 	mla	r3, sl, r3, fp
 8013746:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801374a:	454f      	cmp	r7, r9
 801374c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013750:	d805      	bhi.n	801375e <__multiply+0x124>
 8013752:	f8c8 3004 	str.w	r3, [r8, #4]
 8013756:	3504      	adds	r5, #4
 8013758:	e79b      	b.n	8013692 <__multiply+0x58>
 801375a:	46d4      	mov	ip, sl
 801375c:	e7b3      	b.n	80136c6 <__multiply+0x8c>
 801375e:	46e0      	mov	r8, ip
 8013760:	e7dd      	b.n	801371e <__multiply+0xe4>
 8013762:	3e01      	subs	r6, #1
 8013764:	e799      	b.n	801369a <__multiply+0x60>
	...

08013768 <__pow5mult>:
 8013768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801376c:	4615      	mov	r5, r2
 801376e:	f012 0203 	ands.w	r2, r2, #3
 8013772:	4606      	mov	r6, r0
 8013774:	460f      	mov	r7, r1
 8013776:	d007      	beq.n	8013788 <__pow5mult+0x20>
 8013778:	3a01      	subs	r2, #1
 801377a:	4c21      	ldr	r4, [pc, #132]	; (8013800 <__pow5mult+0x98>)
 801377c:	2300      	movs	r3, #0
 801377e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013782:	f7ff fec8 	bl	8013516 <__multadd>
 8013786:	4607      	mov	r7, r0
 8013788:	10ad      	asrs	r5, r5, #2
 801378a:	d035      	beq.n	80137f8 <__pow5mult+0x90>
 801378c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801378e:	b93c      	cbnz	r4, 80137a0 <__pow5mult+0x38>
 8013790:	2010      	movs	r0, #16
 8013792:	f7ff fe6d 	bl	8013470 <malloc>
 8013796:	6270      	str	r0, [r6, #36]	; 0x24
 8013798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801379c:	6004      	str	r4, [r0, #0]
 801379e:	60c4      	str	r4, [r0, #12]
 80137a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80137a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80137a8:	b94c      	cbnz	r4, 80137be <__pow5mult+0x56>
 80137aa:	f240 2171 	movw	r1, #625	; 0x271
 80137ae:	4630      	mov	r0, r6
 80137b0:	f7ff ff3a 	bl	8013628 <__i2b>
 80137b4:	2300      	movs	r3, #0
 80137b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80137ba:	4604      	mov	r4, r0
 80137bc:	6003      	str	r3, [r0, #0]
 80137be:	f04f 0800 	mov.w	r8, #0
 80137c2:	07eb      	lsls	r3, r5, #31
 80137c4:	d50a      	bpl.n	80137dc <__pow5mult+0x74>
 80137c6:	4639      	mov	r1, r7
 80137c8:	4622      	mov	r2, r4
 80137ca:	4630      	mov	r0, r6
 80137cc:	f7ff ff35 	bl	801363a <__multiply>
 80137d0:	4639      	mov	r1, r7
 80137d2:	4681      	mov	r9, r0
 80137d4:	4630      	mov	r0, r6
 80137d6:	f7ff fe87 	bl	80134e8 <_Bfree>
 80137da:	464f      	mov	r7, r9
 80137dc:	106d      	asrs	r5, r5, #1
 80137de:	d00b      	beq.n	80137f8 <__pow5mult+0x90>
 80137e0:	6820      	ldr	r0, [r4, #0]
 80137e2:	b938      	cbnz	r0, 80137f4 <__pow5mult+0x8c>
 80137e4:	4622      	mov	r2, r4
 80137e6:	4621      	mov	r1, r4
 80137e8:	4630      	mov	r0, r6
 80137ea:	f7ff ff26 	bl	801363a <__multiply>
 80137ee:	6020      	str	r0, [r4, #0]
 80137f0:	f8c0 8000 	str.w	r8, [r0]
 80137f4:	4604      	mov	r4, r0
 80137f6:	e7e4      	b.n	80137c2 <__pow5mult+0x5a>
 80137f8:	4638      	mov	r0, r7
 80137fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137fe:	bf00      	nop
 8013800:	08014268 	.word	0x08014268

08013804 <__lshift>:
 8013804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013808:	460c      	mov	r4, r1
 801380a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801380e:	6923      	ldr	r3, [r4, #16]
 8013810:	6849      	ldr	r1, [r1, #4]
 8013812:	eb0a 0903 	add.w	r9, sl, r3
 8013816:	68a3      	ldr	r3, [r4, #8]
 8013818:	4607      	mov	r7, r0
 801381a:	4616      	mov	r6, r2
 801381c:	f109 0501 	add.w	r5, r9, #1
 8013820:	42ab      	cmp	r3, r5
 8013822:	db32      	blt.n	801388a <__lshift+0x86>
 8013824:	4638      	mov	r0, r7
 8013826:	f7ff fe2b 	bl	8013480 <_Balloc>
 801382a:	2300      	movs	r3, #0
 801382c:	4680      	mov	r8, r0
 801382e:	f100 0114 	add.w	r1, r0, #20
 8013832:	461a      	mov	r2, r3
 8013834:	4553      	cmp	r3, sl
 8013836:	db2b      	blt.n	8013890 <__lshift+0x8c>
 8013838:	6920      	ldr	r0, [r4, #16]
 801383a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801383e:	f104 0314 	add.w	r3, r4, #20
 8013842:	f016 021f 	ands.w	r2, r6, #31
 8013846:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801384a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801384e:	d025      	beq.n	801389c <__lshift+0x98>
 8013850:	f1c2 0e20 	rsb	lr, r2, #32
 8013854:	2000      	movs	r0, #0
 8013856:	681e      	ldr	r6, [r3, #0]
 8013858:	468a      	mov	sl, r1
 801385a:	4096      	lsls	r6, r2
 801385c:	4330      	orrs	r0, r6
 801385e:	f84a 0b04 	str.w	r0, [sl], #4
 8013862:	f853 0b04 	ldr.w	r0, [r3], #4
 8013866:	459c      	cmp	ip, r3
 8013868:	fa20 f00e 	lsr.w	r0, r0, lr
 801386c:	d814      	bhi.n	8013898 <__lshift+0x94>
 801386e:	6048      	str	r0, [r1, #4]
 8013870:	b108      	cbz	r0, 8013876 <__lshift+0x72>
 8013872:	f109 0502 	add.w	r5, r9, #2
 8013876:	3d01      	subs	r5, #1
 8013878:	4638      	mov	r0, r7
 801387a:	f8c8 5010 	str.w	r5, [r8, #16]
 801387e:	4621      	mov	r1, r4
 8013880:	f7ff fe32 	bl	80134e8 <_Bfree>
 8013884:	4640      	mov	r0, r8
 8013886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801388a:	3101      	adds	r1, #1
 801388c:	005b      	lsls	r3, r3, #1
 801388e:	e7c7      	b.n	8013820 <__lshift+0x1c>
 8013890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013894:	3301      	adds	r3, #1
 8013896:	e7cd      	b.n	8013834 <__lshift+0x30>
 8013898:	4651      	mov	r1, sl
 801389a:	e7dc      	b.n	8013856 <__lshift+0x52>
 801389c:	3904      	subs	r1, #4
 801389e:	f853 2b04 	ldr.w	r2, [r3], #4
 80138a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80138a6:	459c      	cmp	ip, r3
 80138a8:	d8f9      	bhi.n	801389e <__lshift+0x9a>
 80138aa:	e7e4      	b.n	8013876 <__lshift+0x72>

080138ac <__mcmp>:
 80138ac:	6903      	ldr	r3, [r0, #16]
 80138ae:	690a      	ldr	r2, [r1, #16]
 80138b0:	1a9b      	subs	r3, r3, r2
 80138b2:	b530      	push	{r4, r5, lr}
 80138b4:	d10c      	bne.n	80138d0 <__mcmp+0x24>
 80138b6:	0092      	lsls	r2, r2, #2
 80138b8:	3014      	adds	r0, #20
 80138ba:	3114      	adds	r1, #20
 80138bc:	1884      	adds	r4, r0, r2
 80138be:	4411      	add	r1, r2
 80138c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80138c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80138c8:	4295      	cmp	r5, r2
 80138ca:	d003      	beq.n	80138d4 <__mcmp+0x28>
 80138cc:	d305      	bcc.n	80138da <__mcmp+0x2e>
 80138ce:	2301      	movs	r3, #1
 80138d0:	4618      	mov	r0, r3
 80138d2:	bd30      	pop	{r4, r5, pc}
 80138d4:	42a0      	cmp	r0, r4
 80138d6:	d3f3      	bcc.n	80138c0 <__mcmp+0x14>
 80138d8:	e7fa      	b.n	80138d0 <__mcmp+0x24>
 80138da:	f04f 33ff 	mov.w	r3, #4294967295
 80138de:	e7f7      	b.n	80138d0 <__mcmp+0x24>

080138e0 <__mdiff>:
 80138e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138e4:	460d      	mov	r5, r1
 80138e6:	4607      	mov	r7, r0
 80138e8:	4611      	mov	r1, r2
 80138ea:	4628      	mov	r0, r5
 80138ec:	4614      	mov	r4, r2
 80138ee:	f7ff ffdd 	bl	80138ac <__mcmp>
 80138f2:	1e06      	subs	r6, r0, #0
 80138f4:	d108      	bne.n	8013908 <__mdiff+0x28>
 80138f6:	4631      	mov	r1, r6
 80138f8:	4638      	mov	r0, r7
 80138fa:	f7ff fdc1 	bl	8013480 <_Balloc>
 80138fe:	2301      	movs	r3, #1
 8013900:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013908:	bfa4      	itt	ge
 801390a:	4623      	movge	r3, r4
 801390c:	462c      	movge	r4, r5
 801390e:	4638      	mov	r0, r7
 8013910:	6861      	ldr	r1, [r4, #4]
 8013912:	bfa6      	itte	ge
 8013914:	461d      	movge	r5, r3
 8013916:	2600      	movge	r6, #0
 8013918:	2601      	movlt	r6, #1
 801391a:	f7ff fdb1 	bl	8013480 <_Balloc>
 801391e:	692b      	ldr	r3, [r5, #16]
 8013920:	60c6      	str	r6, [r0, #12]
 8013922:	6926      	ldr	r6, [r4, #16]
 8013924:	f105 0914 	add.w	r9, r5, #20
 8013928:	f104 0214 	add.w	r2, r4, #20
 801392c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013930:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013934:	f100 0514 	add.w	r5, r0, #20
 8013938:	f04f 0e00 	mov.w	lr, #0
 801393c:	f852 ab04 	ldr.w	sl, [r2], #4
 8013940:	f859 4b04 	ldr.w	r4, [r9], #4
 8013944:	fa1e f18a 	uxtah	r1, lr, sl
 8013948:	b2a3      	uxth	r3, r4
 801394a:	1ac9      	subs	r1, r1, r3
 801394c:	0c23      	lsrs	r3, r4, #16
 801394e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013952:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013956:	b289      	uxth	r1, r1
 8013958:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801395c:	45c8      	cmp	r8, r9
 801395e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013962:	4694      	mov	ip, r2
 8013964:	f845 3b04 	str.w	r3, [r5], #4
 8013968:	d8e8      	bhi.n	801393c <__mdiff+0x5c>
 801396a:	45bc      	cmp	ip, r7
 801396c:	d304      	bcc.n	8013978 <__mdiff+0x98>
 801396e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013972:	b183      	cbz	r3, 8013996 <__mdiff+0xb6>
 8013974:	6106      	str	r6, [r0, #16]
 8013976:	e7c5      	b.n	8013904 <__mdiff+0x24>
 8013978:	f85c 1b04 	ldr.w	r1, [ip], #4
 801397c:	fa1e f381 	uxtah	r3, lr, r1
 8013980:	141a      	asrs	r2, r3, #16
 8013982:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013986:	b29b      	uxth	r3, r3
 8013988:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801398c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013990:	f845 3b04 	str.w	r3, [r5], #4
 8013994:	e7e9      	b.n	801396a <__mdiff+0x8a>
 8013996:	3e01      	subs	r6, #1
 8013998:	e7e9      	b.n	801396e <__mdiff+0x8e>

0801399a <__d2b>:
 801399a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801399e:	460e      	mov	r6, r1
 80139a0:	2101      	movs	r1, #1
 80139a2:	ec59 8b10 	vmov	r8, r9, d0
 80139a6:	4615      	mov	r5, r2
 80139a8:	f7ff fd6a 	bl	8013480 <_Balloc>
 80139ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80139b0:	4607      	mov	r7, r0
 80139b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80139b6:	bb34      	cbnz	r4, 8013a06 <__d2b+0x6c>
 80139b8:	9301      	str	r3, [sp, #4]
 80139ba:	f1b8 0300 	subs.w	r3, r8, #0
 80139be:	d027      	beq.n	8013a10 <__d2b+0x76>
 80139c0:	a802      	add	r0, sp, #8
 80139c2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80139c6:	f7ff fe00 	bl	80135ca <__lo0bits>
 80139ca:	9900      	ldr	r1, [sp, #0]
 80139cc:	b1f0      	cbz	r0, 8013a0c <__d2b+0x72>
 80139ce:	9a01      	ldr	r2, [sp, #4]
 80139d0:	f1c0 0320 	rsb	r3, r0, #32
 80139d4:	fa02 f303 	lsl.w	r3, r2, r3
 80139d8:	430b      	orrs	r3, r1
 80139da:	40c2      	lsrs	r2, r0
 80139dc:	617b      	str	r3, [r7, #20]
 80139de:	9201      	str	r2, [sp, #4]
 80139e0:	9b01      	ldr	r3, [sp, #4]
 80139e2:	61bb      	str	r3, [r7, #24]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	bf14      	ite	ne
 80139e8:	2102      	movne	r1, #2
 80139ea:	2101      	moveq	r1, #1
 80139ec:	6139      	str	r1, [r7, #16]
 80139ee:	b1c4      	cbz	r4, 8013a22 <__d2b+0x88>
 80139f0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80139f4:	4404      	add	r4, r0
 80139f6:	6034      	str	r4, [r6, #0]
 80139f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80139fc:	6028      	str	r0, [r5, #0]
 80139fe:	4638      	mov	r0, r7
 8013a00:	b003      	add	sp, #12
 8013a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a0a:	e7d5      	b.n	80139b8 <__d2b+0x1e>
 8013a0c:	6179      	str	r1, [r7, #20]
 8013a0e:	e7e7      	b.n	80139e0 <__d2b+0x46>
 8013a10:	a801      	add	r0, sp, #4
 8013a12:	f7ff fdda 	bl	80135ca <__lo0bits>
 8013a16:	9b01      	ldr	r3, [sp, #4]
 8013a18:	617b      	str	r3, [r7, #20]
 8013a1a:	2101      	movs	r1, #1
 8013a1c:	6139      	str	r1, [r7, #16]
 8013a1e:	3020      	adds	r0, #32
 8013a20:	e7e5      	b.n	80139ee <__d2b+0x54>
 8013a22:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013a26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a2a:	6030      	str	r0, [r6, #0]
 8013a2c:	6918      	ldr	r0, [r3, #16]
 8013a2e:	f7ff fdad 	bl	801358c <__hi0bits>
 8013a32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013a36:	e7e1      	b.n	80139fc <__d2b+0x62>

08013a38 <_calloc_r>:
 8013a38:	b538      	push	{r3, r4, r5, lr}
 8013a3a:	fb02 f401 	mul.w	r4, r2, r1
 8013a3e:	4621      	mov	r1, r4
 8013a40:	f000 f856 	bl	8013af0 <_malloc_r>
 8013a44:	4605      	mov	r5, r0
 8013a46:	b118      	cbz	r0, 8013a50 <_calloc_r+0x18>
 8013a48:	4622      	mov	r2, r4
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	f7fd ff3d 	bl	80118ca <memset>
 8013a50:	4628      	mov	r0, r5
 8013a52:	bd38      	pop	{r3, r4, r5, pc}

08013a54 <_free_r>:
 8013a54:	b538      	push	{r3, r4, r5, lr}
 8013a56:	4605      	mov	r5, r0
 8013a58:	2900      	cmp	r1, #0
 8013a5a:	d045      	beq.n	8013ae8 <_free_r+0x94>
 8013a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a60:	1f0c      	subs	r4, r1, #4
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	bfb8      	it	lt
 8013a66:	18e4      	addlt	r4, r4, r3
 8013a68:	f000 fa98 	bl	8013f9c <__malloc_lock>
 8013a6c:	4a1f      	ldr	r2, [pc, #124]	; (8013aec <_free_r+0x98>)
 8013a6e:	6813      	ldr	r3, [r2, #0]
 8013a70:	4610      	mov	r0, r2
 8013a72:	b933      	cbnz	r3, 8013a82 <_free_r+0x2e>
 8013a74:	6063      	str	r3, [r4, #4]
 8013a76:	6014      	str	r4, [r2, #0]
 8013a78:	4628      	mov	r0, r5
 8013a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a7e:	f000 ba8e 	b.w	8013f9e <__malloc_unlock>
 8013a82:	42a3      	cmp	r3, r4
 8013a84:	d90c      	bls.n	8013aa0 <_free_r+0x4c>
 8013a86:	6821      	ldr	r1, [r4, #0]
 8013a88:	1862      	adds	r2, r4, r1
 8013a8a:	4293      	cmp	r3, r2
 8013a8c:	bf04      	itt	eq
 8013a8e:	681a      	ldreq	r2, [r3, #0]
 8013a90:	685b      	ldreq	r3, [r3, #4]
 8013a92:	6063      	str	r3, [r4, #4]
 8013a94:	bf04      	itt	eq
 8013a96:	1852      	addeq	r2, r2, r1
 8013a98:	6022      	streq	r2, [r4, #0]
 8013a9a:	6004      	str	r4, [r0, #0]
 8013a9c:	e7ec      	b.n	8013a78 <_free_r+0x24>
 8013a9e:	4613      	mov	r3, r2
 8013aa0:	685a      	ldr	r2, [r3, #4]
 8013aa2:	b10a      	cbz	r2, 8013aa8 <_free_r+0x54>
 8013aa4:	42a2      	cmp	r2, r4
 8013aa6:	d9fa      	bls.n	8013a9e <_free_r+0x4a>
 8013aa8:	6819      	ldr	r1, [r3, #0]
 8013aaa:	1858      	adds	r0, r3, r1
 8013aac:	42a0      	cmp	r0, r4
 8013aae:	d10b      	bne.n	8013ac8 <_free_r+0x74>
 8013ab0:	6820      	ldr	r0, [r4, #0]
 8013ab2:	4401      	add	r1, r0
 8013ab4:	1858      	adds	r0, r3, r1
 8013ab6:	4282      	cmp	r2, r0
 8013ab8:	6019      	str	r1, [r3, #0]
 8013aba:	d1dd      	bne.n	8013a78 <_free_r+0x24>
 8013abc:	6810      	ldr	r0, [r2, #0]
 8013abe:	6852      	ldr	r2, [r2, #4]
 8013ac0:	605a      	str	r2, [r3, #4]
 8013ac2:	4401      	add	r1, r0
 8013ac4:	6019      	str	r1, [r3, #0]
 8013ac6:	e7d7      	b.n	8013a78 <_free_r+0x24>
 8013ac8:	d902      	bls.n	8013ad0 <_free_r+0x7c>
 8013aca:	230c      	movs	r3, #12
 8013acc:	602b      	str	r3, [r5, #0]
 8013ace:	e7d3      	b.n	8013a78 <_free_r+0x24>
 8013ad0:	6820      	ldr	r0, [r4, #0]
 8013ad2:	1821      	adds	r1, r4, r0
 8013ad4:	428a      	cmp	r2, r1
 8013ad6:	bf04      	itt	eq
 8013ad8:	6811      	ldreq	r1, [r2, #0]
 8013ada:	6852      	ldreq	r2, [r2, #4]
 8013adc:	6062      	str	r2, [r4, #4]
 8013ade:	bf04      	itt	eq
 8013ae0:	1809      	addeq	r1, r1, r0
 8013ae2:	6021      	streq	r1, [r4, #0]
 8013ae4:	605c      	str	r4, [r3, #4]
 8013ae6:	e7c7      	b.n	8013a78 <_free_r+0x24>
 8013ae8:	bd38      	pop	{r3, r4, r5, pc}
 8013aea:	bf00      	nop
 8013aec:	20000440 	.word	0x20000440

08013af0 <_malloc_r>:
 8013af0:	b570      	push	{r4, r5, r6, lr}
 8013af2:	1ccd      	adds	r5, r1, #3
 8013af4:	f025 0503 	bic.w	r5, r5, #3
 8013af8:	3508      	adds	r5, #8
 8013afa:	2d0c      	cmp	r5, #12
 8013afc:	bf38      	it	cc
 8013afe:	250c      	movcc	r5, #12
 8013b00:	2d00      	cmp	r5, #0
 8013b02:	4606      	mov	r6, r0
 8013b04:	db01      	blt.n	8013b0a <_malloc_r+0x1a>
 8013b06:	42a9      	cmp	r1, r5
 8013b08:	d903      	bls.n	8013b12 <_malloc_r+0x22>
 8013b0a:	230c      	movs	r3, #12
 8013b0c:	6033      	str	r3, [r6, #0]
 8013b0e:	2000      	movs	r0, #0
 8013b10:	bd70      	pop	{r4, r5, r6, pc}
 8013b12:	f000 fa43 	bl	8013f9c <__malloc_lock>
 8013b16:	4a21      	ldr	r2, [pc, #132]	; (8013b9c <_malloc_r+0xac>)
 8013b18:	6814      	ldr	r4, [r2, #0]
 8013b1a:	4621      	mov	r1, r4
 8013b1c:	b991      	cbnz	r1, 8013b44 <_malloc_r+0x54>
 8013b1e:	4c20      	ldr	r4, [pc, #128]	; (8013ba0 <_malloc_r+0xb0>)
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	b91b      	cbnz	r3, 8013b2c <_malloc_r+0x3c>
 8013b24:	4630      	mov	r0, r6
 8013b26:	f000 f97d 	bl	8013e24 <_sbrk_r>
 8013b2a:	6020      	str	r0, [r4, #0]
 8013b2c:	4629      	mov	r1, r5
 8013b2e:	4630      	mov	r0, r6
 8013b30:	f000 f978 	bl	8013e24 <_sbrk_r>
 8013b34:	1c43      	adds	r3, r0, #1
 8013b36:	d124      	bne.n	8013b82 <_malloc_r+0x92>
 8013b38:	230c      	movs	r3, #12
 8013b3a:	6033      	str	r3, [r6, #0]
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f000 fa2e 	bl	8013f9e <__malloc_unlock>
 8013b42:	e7e4      	b.n	8013b0e <_malloc_r+0x1e>
 8013b44:	680b      	ldr	r3, [r1, #0]
 8013b46:	1b5b      	subs	r3, r3, r5
 8013b48:	d418      	bmi.n	8013b7c <_malloc_r+0x8c>
 8013b4a:	2b0b      	cmp	r3, #11
 8013b4c:	d90f      	bls.n	8013b6e <_malloc_r+0x7e>
 8013b4e:	600b      	str	r3, [r1, #0]
 8013b50:	50cd      	str	r5, [r1, r3]
 8013b52:	18cc      	adds	r4, r1, r3
 8013b54:	4630      	mov	r0, r6
 8013b56:	f000 fa22 	bl	8013f9e <__malloc_unlock>
 8013b5a:	f104 000b 	add.w	r0, r4, #11
 8013b5e:	1d23      	adds	r3, r4, #4
 8013b60:	f020 0007 	bic.w	r0, r0, #7
 8013b64:	1ac3      	subs	r3, r0, r3
 8013b66:	d0d3      	beq.n	8013b10 <_malloc_r+0x20>
 8013b68:	425a      	negs	r2, r3
 8013b6a:	50e2      	str	r2, [r4, r3]
 8013b6c:	e7d0      	b.n	8013b10 <_malloc_r+0x20>
 8013b6e:	428c      	cmp	r4, r1
 8013b70:	684b      	ldr	r3, [r1, #4]
 8013b72:	bf16      	itet	ne
 8013b74:	6063      	strne	r3, [r4, #4]
 8013b76:	6013      	streq	r3, [r2, #0]
 8013b78:	460c      	movne	r4, r1
 8013b7a:	e7eb      	b.n	8013b54 <_malloc_r+0x64>
 8013b7c:	460c      	mov	r4, r1
 8013b7e:	6849      	ldr	r1, [r1, #4]
 8013b80:	e7cc      	b.n	8013b1c <_malloc_r+0x2c>
 8013b82:	1cc4      	adds	r4, r0, #3
 8013b84:	f024 0403 	bic.w	r4, r4, #3
 8013b88:	42a0      	cmp	r0, r4
 8013b8a:	d005      	beq.n	8013b98 <_malloc_r+0xa8>
 8013b8c:	1a21      	subs	r1, r4, r0
 8013b8e:	4630      	mov	r0, r6
 8013b90:	f000 f948 	bl	8013e24 <_sbrk_r>
 8013b94:	3001      	adds	r0, #1
 8013b96:	d0cf      	beq.n	8013b38 <_malloc_r+0x48>
 8013b98:	6025      	str	r5, [r4, #0]
 8013b9a:	e7db      	b.n	8013b54 <_malloc_r+0x64>
 8013b9c:	20000440 	.word	0x20000440
 8013ba0:	20000444 	.word	0x20000444

08013ba4 <__sfputc_r>:
 8013ba4:	6893      	ldr	r3, [r2, #8]
 8013ba6:	3b01      	subs	r3, #1
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	b410      	push	{r4}
 8013bac:	6093      	str	r3, [r2, #8]
 8013bae:	da08      	bge.n	8013bc2 <__sfputc_r+0x1e>
 8013bb0:	6994      	ldr	r4, [r2, #24]
 8013bb2:	42a3      	cmp	r3, r4
 8013bb4:	db01      	blt.n	8013bba <__sfputc_r+0x16>
 8013bb6:	290a      	cmp	r1, #10
 8013bb8:	d103      	bne.n	8013bc2 <__sfputc_r+0x1e>
 8013bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bbe:	f7fe bb65 	b.w	801228c <__swbuf_r>
 8013bc2:	6813      	ldr	r3, [r2, #0]
 8013bc4:	1c58      	adds	r0, r3, #1
 8013bc6:	6010      	str	r0, [r2, #0]
 8013bc8:	7019      	strb	r1, [r3, #0]
 8013bca:	4608      	mov	r0, r1
 8013bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bd0:	4770      	bx	lr

08013bd2 <__sfputs_r>:
 8013bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bd4:	4606      	mov	r6, r0
 8013bd6:	460f      	mov	r7, r1
 8013bd8:	4614      	mov	r4, r2
 8013bda:	18d5      	adds	r5, r2, r3
 8013bdc:	42ac      	cmp	r4, r5
 8013bde:	d101      	bne.n	8013be4 <__sfputs_r+0x12>
 8013be0:	2000      	movs	r0, #0
 8013be2:	e007      	b.n	8013bf4 <__sfputs_r+0x22>
 8013be4:	463a      	mov	r2, r7
 8013be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bea:	4630      	mov	r0, r6
 8013bec:	f7ff ffda 	bl	8013ba4 <__sfputc_r>
 8013bf0:	1c43      	adds	r3, r0, #1
 8013bf2:	d1f3      	bne.n	8013bdc <__sfputs_r+0xa>
 8013bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013bf8 <_vfiprintf_r>:
 8013bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfc:	460c      	mov	r4, r1
 8013bfe:	b09d      	sub	sp, #116	; 0x74
 8013c00:	4617      	mov	r7, r2
 8013c02:	461d      	mov	r5, r3
 8013c04:	4606      	mov	r6, r0
 8013c06:	b118      	cbz	r0, 8013c10 <_vfiprintf_r+0x18>
 8013c08:	6983      	ldr	r3, [r0, #24]
 8013c0a:	b90b      	cbnz	r3, 8013c10 <_vfiprintf_r+0x18>
 8013c0c:	f7ff fb34 	bl	8013278 <__sinit>
 8013c10:	4b7c      	ldr	r3, [pc, #496]	; (8013e04 <_vfiprintf_r+0x20c>)
 8013c12:	429c      	cmp	r4, r3
 8013c14:	d158      	bne.n	8013cc8 <_vfiprintf_r+0xd0>
 8013c16:	6874      	ldr	r4, [r6, #4]
 8013c18:	89a3      	ldrh	r3, [r4, #12]
 8013c1a:	0718      	lsls	r0, r3, #28
 8013c1c:	d55e      	bpl.n	8013cdc <_vfiprintf_r+0xe4>
 8013c1e:	6923      	ldr	r3, [r4, #16]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d05b      	beq.n	8013cdc <_vfiprintf_r+0xe4>
 8013c24:	2300      	movs	r3, #0
 8013c26:	9309      	str	r3, [sp, #36]	; 0x24
 8013c28:	2320      	movs	r3, #32
 8013c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c2e:	2330      	movs	r3, #48	; 0x30
 8013c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c34:	9503      	str	r5, [sp, #12]
 8013c36:	f04f 0b01 	mov.w	fp, #1
 8013c3a:	46b8      	mov	r8, r7
 8013c3c:	4645      	mov	r5, r8
 8013c3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013c42:	b10b      	cbz	r3, 8013c48 <_vfiprintf_r+0x50>
 8013c44:	2b25      	cmp	r3, #37	; 0x25
 8013c46:	d154      	bne.n	8013cf2 <_vfiprintf_r+0xfa>
 8013c48:	ebb8 0a07 	subs.w	sl, r8, r7
 8013c4c:	d00b      	beq.n	8013c66 <_vfiprintf_r+0x6e>
 8013c4e:	4653      	mov	r3, sl
 8013c50:	463a      	mov	r2, r7
 8013c52:	4621      	mov	r1, r4
 8013c54:	4630      	mov	r0, r6
 8013c56:	f7ff ffbc 	bl	8013bd2 <__sfputs_r>
 8013c5a:	3001      	adds	r0, #1
 8013c5c:	f000 80c2 	beq.w	8013de4 <_vfiprintf_r+0x1ec>
 8013c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c62:	4453      	add	r3, sl
 8013c64:	9309      	str	r3, [sp, #36]	; 0x24
 8013c66:	f898 3000 	ldrb.w	r3, [r8]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	f000 80ba 	beq.w	8013de4 <_vfiprintf_r+0x1ec>
 8013c70:	2300      	movs	r3, #0
 8013c72:	f04f 32ff 	mov.w	r2, #4294967295
 8013c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c7a:	9304      	str	r3, [sp, #16]
 8013c7c:	9307      	str	r3, [sp, #28]
 8013c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c82:	931a      	str	r3, [sp, #104]	; 0x68
 8013c84:	46a8      	mov	r8, r5
 8013c86:	2205      	movs	r2, #5
 8013c88:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013c8c:	485e      	ldr	r0, [pc, #376]	; (8013e08 <_vfiprintf_r+0x210>)
 8013c8e:	f7f4 f9df 	bl	8008050 <memchr>
 8013c92:	9b04      	ldr	r3, [sp, #16]
 8013c94:	bb78      	cbnz	r0, 8013cf6 <_vfiprintf_r+0xfe>
 8013c96:	06d9      	lsls	r1, r3, #27
 8013c98:	bf44      	itt	mi
 8013c9a:	2220      	movmi	r2, #32
 8013c9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013ca0:	071a      	lsls	r2, r3, #28
 8013ca2:	bf44      	itt	mi
 8013ca4:	222b      	movmi	r2, #43	; 0x2b
 8013ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013caa:	782a      	ldrb	r2, [r5, #0]
 8013cac:	2a2a      	cmp	r2, #42	; 0x2a
 8013cae:	d02a      	beq.n	8013d06 <_vfiprintf_r+0x10e>
 8013cb0:	9a07      	ldr	r2, [sp, #28]
 8013cb2:	46a8      	mov	r8, r5
 8013cb4:	2000      	movs	r0, #0
 8013cb6:	250a      	movs	r5, #10
 8013cb8:	4641      	mov	r1, r8
 8013cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013cbe:	3b30      	subs	r3, #48	; 0x30
 8013cc0:	2b09      	cmp	r3, #9
 8013cc2:	d969      	bls.n	8013d98 <_vfiprintf_r+0x1a0>
 8013cc4:	b360      	cbz	r0, 8013d20 <_vfiprintf_r+0x128>
 8013cc6:	e024      	b.n	8013d12 <_vfiprintf_r+0x11a>
 8013cc8:	4b50      	ldr	r3, [pc, #320]	; (8013e0c <_vfiprintf_r+0x214>)
 8013cca:	429c      	cmp	r4, r3
 8013ccc:	d101      	bne.n	8013cd2 <_vfiprintf_r+0xda>
 8013cce:	68b4      	ldr	r4, [r6, #8]
 8013cd0:	e7a2      	b.n	8013c18 <_vfiprintf_r+0x20>
 8013cd2:	4b4f      	ldr	r3, [pc, #316]	; (8013e10 <_vfiprintf_r+0x218>)
 8013cd4:	429c      	cmp	r4, r3
 8013cd6:	bf08      	it	eq
 8013cd8:	68f4      	ldreq	r4, [r6, #12]
 8013cda:	e79d      	b.n	8013c18 <_vfiprintf_r+0x20>
 8013cdc:	4621      	mov	r1, r4
 8013cde:	4630      	mov	r0, r6
 8013ce0:	f7fe fb26 	bl	8012330 <__swsetup_r>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d09d      	beq.n	8013c24 <_vfiprintf_r+0x2c>
 8013ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cec:	b01d      	add	sp, #116	; 0x74
 8013cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf2:	46a8      	mov	r8, r5
 8013cf4:	e7a2      	b.n	8013c3c <_vfiprintf_r+0x44>
 8013cf6:	4a44      	ldr	r2, [pc, #272]	; (8013e08 <_vfiprintf_r+0x210>)
 8013cf8:	1a80      	subs	r0, r0, r2
 8013cfa:	fa0b f000 	lsl.w	r0, fp, r0
 8013cfe:	4318      	orrs	r0, r3
 8013d00:	9004      	str	r0, [sp, #16]
 8013d02:	4645      	mov	r5, r8
 8013d04:	e7be      	b.n	8013c84 <_vfiprintf_r+0x8c>
 8013d06:	9a03      	ldr	r2, [sp, #12]
 8013d08:	1d11      	adds	r1, r2, #4
 8013d0a:	6812      	ldr	r2, [r2, #0]
 8013d0c:	9103      	str	r1, [sp, #12]
 8013d0e:	2a00      	cmp	r2, #0
 8013d10:	db01      	blt.n	8013d16 <_vfiprintf_r+0x11e>
 8013d12:	9207      	str	r2, [sp, #28]
 8013d14:	e004      	b.n	8013d20 <_vfiprintf_r+0x128>
 8013d16:	4252      	negs	r2, r2
 8013d18:	f043 0302 	orr.w	r3, r3, #2
 8013d1c:	9207      	str	r2, [sp, #28]
 8013d1e:	9304      	str	r3, [sp, #16]
 8013d20:	f898 3000 	ldrb.w	r3, [r8]
 8013d24:	2b2e      	cmp	r3, #46	; 0x2e
 8013d26:	d10e      	bne.n	8013d46 <_vfiprintf_r+0x14e>
 8013d28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8013d2e:	d138      	bne.n	8013da2 <_vfiprintf_r+0x1aa>
 8013d30:	9b03      	ldr	r3, [sp, #12]
 8013d32:	1d1a      	adds	r2, r3, #4
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	9203      	str	r2, [sp, #12]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	bfb8      	it	lt
 8013d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d40:	f108 0802 	add.w	r8, r8, #2
 8013d44:	9305      	str	r3, [sp, #20]
 8013d46:	4d33      	ldr	r5, [pc, #204]	; (8013e14 <_vfiprintf_r+0x21c>)
 8013d48:	f898 1000 	ldrb.w	r1, [r8]
 8013d4c:	2203      	movs	r2, #3
 8013d4e:	4628      	mov	r0, r5
 8013d50:	f7f4 f97e 	bl	8008050 <memchr>
 8013d54:	b140      	cbz	r0, 8013d68 <_vfiprintf_r+0x170>
 8013d56:	2340      	movs	r3, #64	; 0x40
 8013d58:	1b40      	subs	r0, r0, r5
 8013d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8013d5e:	9b04      	ldr	r3, [sp, #16]
 8013d60:	4303      	orrs	r3, r0
 8013d62:	f108 0801 	add.w	r8, r8, #1
 8013d66:	9304      	str	r3, [sp, #16]
 8013d68:	f898 1000 	ldrb.w	r1, [r8]
 8013d6c:	482a      	ldr	r0, [pc, #168]	; (8013e18 <_vfiprintf_r+0x220>)
 8013d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d72:	2206      	movs	r2, #6
 8013d74:	f108 0701 	add.w	r7, r8, #1
 8013d78:	f7f4 f96a 	bl	8008050 <memchr>
 8013d7c:	2800      	cmp	r0, #0
 8013d7e:	d037      	beq.n	8013df0 <_vfiprintf_r+0x1f8>
 8013d80:	4b26      	ldr	r3, [pc, #152]	; (8013e1c <_vfiprintf_r+0x224>)
 8013d82:	bb1b      	cbnz	r3, 8013dcc <_vfiprintf_r+0x1d4>
 8013d84:	9b03      	ldr	r3, [sp, #12]
 8013d86:	3307      	adds	r3, #7
 8013d88:	f023 0307 	bic.w	r3, r3, #7
 8013d8c:	3308      	adds	r3, #8
 8013d8e:	9303      	str	r3, [sp, #12]
 8013d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d92:	444b      	add	r3, r9
 8013d94:	9309      	str	r3, [sp, #36]	; 0x24
 8013d96:	e750      	b.n	8013c3a <_vfiprintf_r+0x42>
 8013d98:	fb05 3202 	mla	r2, r5, r2, r3
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	4688      	mov	r8, r1
 8013da0:	e78a      	b.n	8013cb8 <_vfiprintf_r+0xc0>
 8013da2:	2300      	movs	r3, #0
 8013da4:	f108 0801 	add.w	r8, r8, #1
 8013da8:	9305      	str	r3, [sp, #20]
 8013daa:	4619      	mov	r1, r3
 8013dac:	250a      	movs	r5, #10
 8013dae:	4640      	mov	r0, r8
 8013db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013db4:	3a30      	subs	r2, #48	; 0x30
 8013db6:	2a09      	cmp	r2, #9
 8013db8:	d903      	bls.n	8013dc2 <_vfiprintf_r+0x1ca>
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d0c3      	beq.n	8013d46 <_vfiprintf_r+0x14e>
 8013dbe:	9105      	str	r1, [sp, #20]
 8013dc0:	e7c1      	b.n	8013d46 <_vfiprintf_r+0x14e>
 8013dc2:	fb05 2101 	mla	r1, r5, r1, r2
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	4680      	mov	r8, r0
 8013dca:	e7f0      	b.n	8013dae <_vfiprintf_r+0x1b6>
 8013dcc:	ab03      	add	r3, sp, #12
 8013dce:	9300      	str	r3, [sp, #0]
 8013dd0:	4622      	mov	r2, r4
 8013dd2:	4b13      	ldr	r3, [pc, #76]	; (8013e20 <_vfiprintf_r+0x228>)
 8013dd4:	a904      	add	r1, sp, #16
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	f7fd fe14 	bl	8011a04 <_printf_float>
 8013ddc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013de0:	4681      	mov	r9, r0
 8013de2:	d1d5      	bne.n	8013d90 <_vfiprintf_r+0x198>
 8013de4:	89a3      	ldrh	r3, [r4, #12]
 8013de6:	065b      	lsls	r3, r3, #25
 8013de8:	f53f af7e 	bmi.w	8013ce8 <_vfiprintf_r+0xf0>
 8013dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dee:	e77d      	b.n	8013cec <_vfiprintf_r+0xf4>
 8013df0:	ab03      	add	r3, sp, #12
 8013df2:	9300      	str	r3, [sp, #0]
 8013df4:	4622      	mov	r2, r4
 8013df6:	4b0a      	ldr	r3, [pc, #40]	; (8013e20 <_vfiprintf_r+0x228>)
 8013df8:	a904      	add	r1, sp, #16
 8013dfa:	4630      	mov	r0, r6
 8013dfc:	f7fe f8b8 	bl	8011f70 <_printf_i>
 8013e00:	e7ec      	b.n	8013ddc <_vfiprintf_r+0x1e4>
 8013e02:	bf00      	nop
 8013e04:	08014134 	.word	0x08014134
 8013e08:	08014274 	.word	0x08014274
 8013e0c:	08014154 	.word	0x08014154
 8013e10:	08014114 	.word	0x08014114
 8013e14:	0801427a 	.word	0x0801427a
 8013e18:	0801427e 	.word	0x0801427e
 8013e1c:	08011a05 	.word	0x08011a05
 8013e20:	08013bd3 	.word	0x08013bd3

08013e24 <_sbrk_r>:
 8013e24:	b538      	push	{r3, r4, r5, lr}
 8013e26:	4c06      	ldr	r4, [pc, #24]	; (8013e40 <_sbrk_r+0x1c>)
 8013e28:	2300      	movs	r3, #0
 8013e2a:	4605      	mov	r5, r0
 8013e2c:	4608      	mov	r0, r1
 8013e2e:	6023      	str	r3, [r4, #0]
 8013e30:	f7f8 ff4c 	bl	800cccc <_sbrk>
 8013e34:	1c43      	adds	r3, r0, #1
 8013e36:	d102      	bne.n	8013e3e <_sbrk_r+0x1a>
 8013e38:	6823      	ldr	r3, [r4, #0]
 8013e3a:	b103      	cbz	r3, 8013e3e <_sbrk_r+0x1a>
 8013e3c:	602b      	str	r3, [r5, #0]
 8013e3e:	bd38      	pop	{r3, r4, r5, pc}
 8013e40:	20000920 	.word	0x20000920

08013e44 <__sread>:
 8013e44:	b510      	push	{r4, lr}
 8013e46:	460c      	mov	r4, r1
 8013e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e4c:	f000 f8a8 	bl	8013fa0 <_read_r>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	bfab      	itete	ge
 8013e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013e56:	89a3      	ldrhlt	r3, [r4, #12]
 8013e58:	181b      	addge	r3, r3, r0
 8013e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013e5e:	bfac      	ite	ge
 8013e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8013e62:	81a3      	strhlt	r3, [r4, #12]
 8013e64:	bd10      	pop	{r4, pc}

08013e66 <__swrite>:
 8013e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e6a:	461f      	mov	r7, r3
 8013e6c:	898b      	ldrh	r3, [r1, #12]
 8013e6e:	05db      	lsls	r3, r3, #23
 8013e70:	4605      	mov	r5, r0
 8013e72:	460c      	mov	r4, r1
 8013e74:	4616      	mov	r6, r2
 8013e76:	d505      	bpl.n	8013e84 <__swrite+0x1e>
 8013e78:	2302      	movs	r3, #2
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e80:	f000 f868 	bl	8013f54 <_lseek_r>
 8013e84:	89a3      	ldrh	r3, [r4, #12]
 8013e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e8e:	81a3      	strh	r3, [r4, #12]
 8013e90:	4632      	mov	r2, r6
 8013e92:	463b      	mov	r3, r7
 8013e94:	4628      	mov	r0, r5
 8013e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e9a:	f000 b817 	b.w	8013ecc <_write_r>

08013e9e <__sseek>:
 8013e9e:	b510      	push	{r4, lr}
 8013ea0:	460c      	mov	r4, r1
 8013ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ea6:	f000 f855 	bl	8013f54 <_lseek_r>
 8013eaa:	1c43      	adds	r3, r0, #1
 8013eac:	89a3      	ldrh	r3, [r4, #12]
 8013eae:	bf15      	itete	ne
 8013eb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8013eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013eb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013eba:	81a3      	strheq	r3, [r4, #12]
 8013ebc:	bf18      	it	ne
 8013ebe:	81a3      	strhne	r3, [r4, #12]
 8013ec0:	bd10      	pop	{r4, pc}

08013ec2 <__sclose>:
 8013ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ec6:	f000 b813 	b.w	8013ef0 <_close_r>
	...

08013ecc <_write_r>:
 8013ecc:	b538      	push	{r3, r4, r5, lr}
 8013ece:	4c07      	ldr	r4, [pc, #28]	; (8013eec <_write_r+0x20>)
 8013ed0:	4605      	mov	r5, r0
 8013ed2:	4608      	mov	r0, r1
 8013ed4:	4611      	mov	r1, r2
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	6022      	str	r2, [r4, #0]
 8013eda:	461a      	mov	r2, r3
 8013edc:	f7f8 fea5 	bl	800cc2a <_write>
 8013ee0:	1c43      	adds	r3, r0, #1
 8013ee2:	d102      	bne.n	8013eea <_write_r+0x1e>
 8013ee4:	6823      	ldr	r3, [r4, #0]
 8013ee6:	b103      	cbz	r3, 8013eea <_write_r+0x1e>
 8013ee8:	602b      	str	r3, [r5, #0]
 8013eea:	bd38      	pop	{r3, r4, r5, pc}
 8013eec:	20000920 	.word	0x20000920

08013ef0 <_close_r>:
 8013ef0:	b538      	push	{r3, r4, r5, lr}
 8013ef2:	4c06      	ldr	r4, [pc, #24]	; (8013f0c <_close_r+0x1c>)
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	4605      	mov	r5, r0
 8013ef8:	4608      	mov	r0, r1
 8013efa:	6023      	str	r3, [r4, #0]
 8013efc:	f7f8 feb1 	bl	800cc62 <_close>
 8013f00:	1c43      	adds	r3, r0, #1
 8013f02:	d102      	bne.n	8013f0a <_close_r+0x1a>
 8013f04:	6823      	ldr	r3, [r4, #0]
 8013f06:	b103      	cbz	r3, 8013f0a <_close_r+0x1a>
 8013f08:	602b      	str	r3, [r5, #0]
 8013f0a:	bd38      	pop	{r3, r4, r5, pc}
 8013f0c:	20000920 	.word	0x20000920

08013f10 <_fstat_r>:
 8013f10:	b538      	push	{r3, r4, r5, lr}
 8013f12:	4c07      	ldr	r4, [pc, #28]	; (8013f30 <_fstat_r+0x20>)
 8013f14:	2300      	movs	r3, #0
 8013f16:	4605      	mov	r5, r0
 8013f18:	4608      	mov	r0, r1
 8013f1a:	4611      	mov	r1, r2
 8013f1c:	6023      	str	r3, [r4, #0]
 8013f1e:	f7f8 feac 	bl	800cc7a <_fstat>
 8013f22:	1c43      	adds	r3, r0, #1
 8013f24:	d102      	bne.n	8013f2c <_fstat_r+0x1c>
 8013f26:	6823      	ldr	r3, [r4, #0]
 8013f28:	b103      	cbz	r3, 8013f2c <_fstat_r+0x1c>
 8013f2a:	602b      	str	r3, [r5, #0]
 8013f2c:	bd38      	pop	{r3, r4, r5, pc}
 8013f2e:	bf00      	nop
 8013f30:	20000920 	.word	0x20000920

08013f34 <_isatty_r>:
 8013f34:	b538      	push	{r3, r4, r5, lr}
 8013f36:	4c06      	ldr	r4, [pc, #24]	; (8013f50 <_isatty_r+0x1c>)
 8013f38:	2300      	movs	r3, #0
 8013f3a:	4605      	mov	r5, r0
 8013f3c:	4608      	mov	r0, r1
 8013f3e:	6023      	str	r3, [r4, #0]
 8013f40:	f7f8 feab 	bl	800cc9a <_isatty>
 8013f44:	1c43      	adds	r3, r0, #1
 8013f46:	d102      	bne.n	8013f4e <_isatty_r+0x1a>
 8013f48:	6823      	ldr	r3, [r4, #0]
 8013f4a:	b103      	cbz	r3, 8013f4e <_isatty_r+0x1a>
 8013f4c:	602b      	str	r3, [r5, #0]
 8013f4e:	bd38      	pop	{r3, r4, r5, pc}
 8013f50:	20000920 	.word	0x20000920

08013f54 <_lseek_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4c07      	ldr	r4, [pc, #28]	; (8013f74 <_lseek_r+0x20>)
 8013f58:	4605      	mov	r5, r0
 8013f5a:	4608      	mov	r0, r1
 8013f5c:	4611      	mov	r1, r2
 8013f5e:	2200      	movs	r2, #0
 8013f60:	6022      	str	r2, [r4, #0]
 8013f62:	461a      	mov	r2, r3
 8013f64:	f7f8 fea4 	bl	800ccb0 <_lseek>
 8013f68:	1c43      	adds	r3, r0, #1
 8013f6a:	d102      	bne.n	8013f72 <_lseek_r+0x1e>
 8013f6c:	6823      	ldr	r3, [r4, #0]
 8013f6e:	b103      	cbz	r3, 8013f72 <_lseek_r+0x1e>
 8013f70:	602b      	str	r3, [r5, #0]
 8013f72:	bd38      	pop	{r3, r4, r5, pc}
 8013f74:	20000920 	.word	0x20000920

08013f78 <__ascii_mbtowc>:
 8013f78:	b082      	sub	sp, #8
 8013f7a:	b901      	cbnz	r1, 8013f7e <__ascii_mbtowc+0x6>
 8013f7c:	a901      	add	r1, sp, #4
 8013f7e:	b142      	cbz	r2, 8013f92 <__ascii_mbtowc+0x1a>
 8013f80:	b14b      	cbz	r3, 8013f96 <__ascii_mbtowc+0x1e>
 8013f82:	7813      	ldrb	r3, [r2, #0]
 8013f84:	600b      	str	r3, [r1, #0]
 8013f86:	7812      	ldrb	r2, [r2, #0]
 8013f88:	1c10      	adds	r0, r2, #0
 8013f8a:	bf18      	it	ne
 8013f8c:	2001      	movne	r0, #1
 8013f8e:	b002      	add	sp, #8
 8013f90:	4770      	bx	lr
 8013f92:	4610      	mov	r0, r2
 8013f94:	e7fb      	b.n	8013f8e <__ascii_mbtowc+0x16>
 8013f96:	f06f 0001 	mvn.w	r0, #1
 8013f9a:	e7f8      	b.n	8013f8e <__ascii_mbtowc+0x16>

08013f9c <__malloc_lock>:
 8013f9c:	4770      	bx	lr

08013f9e <__malloc_unlock>:
 8013f9e:	4770      	bx	lr

08013fa0 <_read_r>:
 8013fa0:	b538      	push	{r3, r4, r5, lr}
 8013fa2:	4c07      	ldr	r4, [pc, #28]	; (8013fc0 <_read_r+0x20>)
 8013fa4:	4605      	mov	r5, r0
 8013fa6:	4608      	mov	r0, r1
 8013fa8:	4611      	mov	r1, r2
 8013faa:	2200      	movs	r2, #0
 8013fac:	6022      	str	r2, [r4, #0]
 8013fae:	461a      	mov	r2, r3
 8013fb0:	f7f8 fe1e 	bl	800cbf0 <_read>
 8013fb4:	1c43      	adds	r3, r0, #1
 8013fb6:	d102      	bne.n	8013fbe <_read_r+0x1e>
 8013fb8:	6823      	ldr	r3, [r4, #0]
 8013fba:	b103      	cbz	r3, 8013fbe <_read_r+0x1e>
 8013fbc:	602b      	str	r3, [r5, #0]
 8013fbe:	bd38      	pop	{r3, r4, r5, pc}
 8013fc0:	20000920 	.word	0x20000920

08013fc4 <__ascii_wctomb>:
 8013fc4:	b149      	cbz	r1, 8013fda <__ascii_wctomb+0x16>
 8013fc6:	2aff      	cmp	r2, #255	; 0xff
 8013fc8:	bf85      	ittet	hi
 8013fca:	238a      	movhi	r3, #138	; 0x8a
 8013fcc:	6003      	strhi	r3, [r0, #0]
 8013fce:	700a      	strbls	r2, [r1, #0]
 8013fd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8013fd4:	bf98      	it	ls
 8013fd6:	2001      	movls	r0, #1
 8013fd8:	4770      	bx	lr
 8013fda:	4608      	mov	r0, r1
 8013fdc:	4770      	bx	lr
	...

08013fe0 <_init>:
 8013fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fe2:	bf00      	nop
 8013fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fe6:	bc08      	pop	{r3}
 8013fe8:	469e      	mov	lr, r3
 8013fea:	4770      	bx	lr

08013fec <_fini>:
 8013fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fee:	bf00      	nop
 8013ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ff2:	bc08      	pop	{r3}
 8013ff4:	469e      	mov	lr, r3
 8013ff6:	4770      	bx	lr
