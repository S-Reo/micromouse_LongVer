
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         000122c8  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000063c  0801a2c8  0801a2c8  0002a2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801a904  0801a904  000301f8  2**0
                  CONTENTS
  6 .ARM          00000008  0801a904  0801a904  0002a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801a90c  0801a90c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801a90c  0801a90c  0002a90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801a910  0801a910  0002a910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001f8  20000000  0801a914  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000106b8  200001f8  0801ab0c  000301f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200108b0  0801ab0c  000308b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000249ab  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004e50  00000000  00000000  00054bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000016f8  00000000  00000000  00059a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014a8  00000000  00000000  0005b120  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00026cbd  00000000  00000000  0005c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00017243  00000000  00000000  00083285  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c9794  00000000  00000000  0009a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00163c5c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007200  00000000  00000000  00163cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001f8 	.word	0x200001f8
 800801c:	00000000 	.word	0x00000000
 8008020:	0801a2b0 	.word	0x0801a2b0

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001fc 	.word	0x200001fc
 800803c:	0801a2b0 	.word	0x0801a2b0

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
//
//
//
//}
void InitPosition()
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <InitPosition+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <InitPosition+0x34>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <InitPosition+0x34>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	70da      	strb	r2, [r3, #3]
	Pos.Dir = front;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <InitPosition+0x34>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	709a      	strb	r2, [r3, #2]
	Pos.Act = Wait;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <InitPosition+0x34>)
 8008e16:	2204      	movs	r2, #4
 8008e18:	711a      	strb	r2, [r3, #4]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <InitPosition+0x34>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	715a      	strb	r2, [r3, #5]

}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000000 	.word	0x20000000

08008e30 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0

	switch(Pos.Car)
 8008e34:	4b9a      	ldr	r3, [pc, #616]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e36:	78db      	ldrb	r3, [r3, #3]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	f200 812b 	bhi.w	8009094 <GetWallCtrlDirection+0x264>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <GetWallCtrlDirection+0x14>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008ee5 	.word	0x08008ee5
 8008e4c:	08008f75 	.word	0x08008f75
 8008e50:	08009005 	.word	0x08009005
	{
	case north:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008e54:	4b92      	ldr	r3, [pc, #584]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4b91      	ldr	r3, [pc, #580]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4a90      	ldr	r2, [pc, #576]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008e62:	0103      	lsls	r3, r0, #4
 8008e64:	440b      	add	r3, r1
 8008e66:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e6a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d111      	bne.n	8008e98 <GetWallCtrlDirection+0x68>
 8008e74:	4b8a      	ldr	r3, [pc, #552]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	4b89      	ldr	r3, [pc, #548]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4a88      	ldr	r2, [pc, #544]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008e82:	0103      	lsls	r3, r0, #4
 8008e84:	440b      	add	r3, r1
 8008e86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e8a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <GetWallCtrlDirection+0x68>
		{
			return D_WALL_PID;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0fe      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008e98:	4b81      	ldr	r3, [pc, #516]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4b80      	ldr	r3, [pc, #512]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4a7f      	ldr	r2, [pc, #508]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008ea6:	0103      	lsls	r3, r0, #4
 8008ea8:	440b      	add	r3, r1
 8008eaa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008eae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <GetWallCtrlDirection+0x8c>
		{
			return R_WALL_PID;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e0ec      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008ebc:	4b78      	ldr	r3, [pc, #480]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	4b77      	ldr	r3, [pc, #476]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4a76      	ldr	r2, [pc, #472]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008eca:	0103      	lsls	r3, r0, #4
 8008ecc:	440b      	add	r3, r1
 8008ece:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ed2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <GetWallCtrlDirection+0xb0>
		{
			return L_WALL_PID;
 8008edc:	2302      	movs	r3, #2
 8008ede:	e0da      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008ee0:	2306      	movs	r3, #6
 8008ee2:	e0d8      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;

	case east:
		if(Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//south)
 8008ee4:	4b6e      	ldr	r3, [pc, #440]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	4b6d      	ldr	r3, [pc, #436]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4a6c      	ldr	r2, [pc, #432]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008ef2:	0103      	lsls	r3, r0, #4
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008efa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d111      	bne.n	8008f28 <GetWallCtrlDirection+0xf8>
 8008f04:	4b66      	ldr	r3, [pc, #408]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	4b65      	ldr	r3, [pc, #404]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4a64      	ldr	r2, [pc, #400]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f12:	0103      	lsls	r3, r0, #4
 8008f14:	440b      	add	r3, r1
 8008f16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f1a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <GetWallCtrlDirection+0xf8>
		{
			return D_WALL_PID;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0b6      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall)
 8008f28:	4b5d      	ldr	r3, [pc, #372]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	4b5c      	ldr	r3, [pc, #368]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	4619      	mov	r1, r3
 8008f34:	4a5b      	ldr	r2, [pc, #364]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f36:	0103      	lsls	r3, r0, #4
 8008f38:	440b      	add	r3, r1
 8008f3a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f3e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <GetWallCtrlDirection+0x11c>
		{
			return L_WALL_PID;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e0a4      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].south == wall)
 8008f4c:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	4b53      	ldr	r3, [pc, #332]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	4619      	mov	r1, r3
 8008f58:	4a52      	ldr	r2, [pc, #328]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f5a:	0103      	lsls	r3, r0, #4
 8008f5c:	440b      	add	r3, r1
 8008f5e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f62:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <GetWallCtrlDirection+0x140>
		{
			return R_WALL_PID;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e092      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008f70:	2306      	movs	r3, #6
 8008f72:	e090      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;
	case south:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008f74:	4b4a      	ldr	r3, [pc, #296]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4b49      	ldr	r3, [pc, #292]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4a48      	ldr	r2, [pc, #288]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f82:	0103      	lsls	r3, r0, #4
 8008f84:	440b      	add	r3, r1
 8008f86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f8a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d111      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
 8008f94:	4b42      	ldr	r3, [pc, #264]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	4b41      	ldr	r3, [pc, #260]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4a40      	ldr	r2, [pc, #256]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fa2:	0103      	lsls	r3, r0, #4
 8008fa4:	440b      	add	r3, r1
 8008fa6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008faa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
		{
			return D_WALL_PID;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e06e      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008fb8:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	4b38      	ldr	r3, [pc, #224]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4a37      	ldr	r2, [pc, #220]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fc6:	0103      	lsls	r3, r0, #4
 8008fc8:	440b      	add	r3, r1
 8008fca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008fce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <GetWallCtrlDirection+0x1ac>
		{
			return L_WALL_PID;
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e05c      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008fdc:	4b30      	ldr	r3, [pc, #192]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	4b2f      	ldr	r3, [pc, #188]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4a2e      	ldr	r2, [pc, #184]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fea:	0103      	lsls	r3, r0, #4
 8008fec:	440b      	add	r3, r1
 8008fee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ff2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <GetWallCtrlDirection+0x1d0>
		{
			return R_WALL_PID;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e04a      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009000:	2306      	movs	r3, #6
 8009002:	e048      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;
	case west:

		if ( Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8009004:	4b26      	ldr	r3, [pc, #152]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	4619      	mov	r1, r3
 8009010:	4a24      	ldr	r2, [pc, #144]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009012:	0103      	lsls	r3, r0, #4
 8009014:	440b      	add	r3, r1
 8009016:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800901a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d111      	bne.n	8009048 <GetWallCtrlDirection+0x218>
 8009024:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	4619      	mov	r1, r3
 8009030:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009032:	0103      	lsls	r3, r0, #4
 8009034:	440b      	add	r3, r1
 8009036:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800903a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <GetWallCtrlDirection+0x218>
		{
			return D_WALL_PID;
 8009044:	2301      	movs	r3, #1
 8009046:	e026      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall )
 8009048:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	4619      	mov	r1, r3
 8009054:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009056:	0103      	lsls	r3, r0, #4
 8009058:	440b      	add	r3, r1
 800905a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800905e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <GetWallCtrlDirection+0x23c>
		{
			return R_WALL_PID;
 8009068:	2303      	movs	r3, #3
 800906a:	e014      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].south == wall )
 800906c:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	4619      	mov	r1, r3
 8009078:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <GetWallCtrlDirection+0x274>)
 800907a:	0103      	lsls	r3, r0, #4
 800907c:	440b      	add	r3, r1
 800907e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009082:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <GetWallCtrlDirection+0x260>
		{
			return L_WALL_PID;
 800908c:	2302      	movs	r3, #2
 800908e:	e002      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009090:	2306      	movs	r3, #6
 8009092:	e000      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8009094:	2306      	movs	r3, #6
		break;
	}

}
 8009096:	4618      	mov	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	20000000 	.word	0x20000000
 80090a4:	20010398 	.word	0x20010398

080090a8 <ChangeCardinal>:

void ChangeCardinal()
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
	switch(Pos.Dir)
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <ChangeCardinal+0x4c>)
 80090ae:	789b      	ldrb	r3, [r3, #2]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d012      	beq.n	80090da <ChangeCardinal+0x32>
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d009      	beq.n	80090cc <ChangeCardinal+0x24>
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d000      	beq.n	80090be <ChangeCardinal+0x16>
		break;
	case back:
		Pos.Car += 2;
		break;
	default:
		break;
 80090bc:	e014      	b.n	80090e8 <ChangeCardinal+0x40>
		Pos.Car ++;
 80090be:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <ChangeCardinal+0x4c>)
 80090c0:	78db      	ldrb	r3, [r3, #3]
 80090c2:	3301      	adds	r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <ChangeCardinal+0x4c>)
 80090c8:	70da      	strb	r2, [r3, #3]
		break;
 80090ca:	e00d      	b.n	80090e8 <ChangeCardinal+0x40>
		Pos.Car --;
 80090cc:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <ChangeCardinal+0x4c>)
 80090ce:	78db      	ldrb	r3, [r3, #3]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <ChangeCardinal+0x4c>)
 80090d6:	70da      	strb	r2, [r3, #3]
		break;
 80090d8:	e006      	b.n	80090e8 <ChangeCardinal+0x40>
		Pos.Car += 2;
 80090da:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <ChangeCardinal+0x4c>)
 80090dc:	78db      	ldrb	r3, [r3, #3]
 80090de:	3302      	adds	r3, #2
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <ChangeCardinal+0x4c>)
 80090e4:	70da      	strb	r2, [r3, #3]
		break;
 80090e6:	bf00      	nop
	}

}
 80090e8:	bf00      	nop
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000000 	.word	0x20000000

080090f8 <WallSafe>:
	Pos.Car = car;
	Pos.Dir = dir;
	Pos.WallSaf = safe_or_warn;
}
void WallSafe()
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_safe;
 80090fc:	4b03      	ldr	r3, [pc, #12]	; (800910c <WallSafe+0x14>)
 80090fe:	2200      	movs	r2, #0
 8009100:	715a      	strb	r2, [r3, #5]
}
 8009102:	bf00      	nop
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	20000000 	.word	0x20000000

08009110 <WallWarn>:
void WallWarn()
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_warn;
 8009114:	4b03      	ldr	r3, [pc, #12]	; (8009124 <WallWarn+0x14>)
 8009116:	2201      	movs	r2, #1
 8009118:	715a      	strb	r2, [r3, #5]
}
 800911a:	bf00      	nop
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	20000000 	.word	0x20000000

08009128 <ControlWall>:
void ControlWall()
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
	//直進中で
		//端の座標なら確実に型壁制御
	//斜め走行は別でアクションを定義

	//横壁制御
	int wall_ctrl_dir = GetWallCtrlDirection();	//次の座標のも返してみて、できれば連続で制御をする。
 800912e:	f7ff fe7f 	bl	8008e30 <GetWallCtrlDirection>
 8009132:	6078      	str	r0, [r7, #4]
	//割り込み中に呼ぶかアクション中に呼ぶか。アクション中の方が座標と壁の状態が確実。いや、判定が遅れると嫌だからやっぱり割り込み。移動量はflagで。

	//PIDChangeFlagStraight(N_WALL_PID);//直進flagはどれでも無い状態。制御なし。
	PIDChangeFlag(L_WALL_PID, 0);
 8009134:	2100      	movs	r1, #0
 8009136:	2002      	movs	r0, #2
 8009138:	f006 fd56 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800913c:	2100      	movs	r1, #0
 800913e:	2003      	movs	r0, #3
 8009140:	f006 fd52 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 8009144:	2100      	movs	r1, #0
 8009146:	2001      	movs	r0, #1
 8009148:	f006 fd4e 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 800914c:	2100      	movs	r1, #0
 800914e:	2000      	movs	r0, #0
 8009150:	f006 fd4a 	bl	800fbe8 <PIDChangeFlag>
	//アクションごとに壁制御を記述した方がいいかも

	//アクション、方向、壁安全。

	//減速の時、壁の状態
	if(Pos.Dir == front)		//区画の区切りで前方に進むと決めたあと、動作としては加速か、straight。初期状態はwaitから加速へ
 8009154:	4b7c      	ldr	r3, [pc, #496]	; (8009348 <ControlWall+0x220>)
 8009156:	789b      	ldrb	r3, [r3, #2]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d13f      	bne.n	80091dc <ControlWall+0xb4>
	{
		switch(Pos.Act)
 800915c:	4b7a      	ldr	r3, [pc, #488]	; (8009348 <ControlWall+0x220>)
 800915e:	791b      	ldrb	r3, [r3, #4]
 8009160:	2b05      	cmp	r3, #5
 8009162:	f200 80ec 	bhi.w	800933e <ControlWall+0x216>
 8009166:	a201      	add	r2, pc, #4	; (adr r2, 800916c <ControlWall+0x44>)
 8009168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916c:	08009185 	.word	0x08009185
 8009170:	0800933f 	.word	0x0800933f
 8009174:	0800933f 	.word	0x0800933f
 8009178:	0800933f 	.word	0x0800933f
 800917c:	0800933f 	.word	0x0800933f
 8009180:	0800918f 	.word	0x0800918f
		{
		case accel:
			PIDChangeFlag( A_VELO_PID , 1);
 8009184:	2101      	movs	r1, #1
 8009186:	2000      	movs	r0, #0
 8009188:	f006 fd2e 	bl	800fbe8 <PIDChangeFlag>
			//一つ先の区画がわかっていて加速したいときに
			break;
 800918c:	e0d8      	b.n	8009340 <ControlWall+0x218>
		case decel:
			//減速はないけど一応今後のため。
			break;
		case straight:
			//3/3おっけーかも
			if( (wall_ctrl_dir != N_WALL_PID)  && (AddVelocity == 0) )	//左右どちらかに壁があるとき
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b06      	cmp	r3, #6
 8009192:	d01d      	beq.n	80091d0 <ControlWall+0xa8>
 8009194:	4b6d      	ldr	r3, [pc, #436]	; (800934c <ControlWall+0x224>)
 8009196:	edd3 7a00 	vldr	s15, [r3]
 800919a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800919e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a2:	d115      	bne.n	80091d0 <ControlWall+0xa8>
			{
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091a4:	4b68      	ldr	r3, [pc, #416]	; (8009348 <ControlWall+0x220>)
 80091a6:	795b      	ldrb	r3, [r3, #5]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d108      	bne.n	80091be <ControlWall+0x96>
				{
					PIDChangeFlag(wall_ctrl_dir, 1);
 80091ac:	2101      	movs	r1, #1
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f006 fd1a 	bl	800fbe8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 80091b4:	2100      	movs	r1, #0
 80091b6:	2000      	movs	r0, #0
 80091b8:	f006 fd16 	bl	800fbe8 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091bc:	e00d      	b.n	80091da <ControlWall+0xb2>
				}
				else
				{
					PIDChangeFlag(wall_ctrl_dir, 0);
 80091be:	2100      	movs	r1, #0
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f006 fd11 	bl	800fbe8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80091c6:	2101      	movs	r1, #1
 80091c8:	2000      	movs	r0, #0
 80091ca:	f006 fd0d 	bl	800fbe8 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091ce:	e004      	b.n	80091da <ControlWall+0xb2>
				}
			}
			else
			{
				PIDChangeFlag( A_VELO_PID , 1);
 80091d0:	2101      	movs	r1, #1
 80091d2:	2000      	movs	r0, #0
 80091d4:	f006 fd08 	bl	800fbe8 <PIDChangeFlag>
			}
			break;
 80091d8:	e0b2      	b.n	8009340 <ControlWall+0x218>
 80091da:	e0b1      	b.n	8009340 <ControlWall+0x218>
		//移動量がN割りのフラグ。直進は、Uターンの加減速を含まない、ただの一区画直進なので、移動量判定でできる。と思ったら分けてた?
		//Actはstraight


	}
	else if(Pos.Dir == left)	//左に行くとき
 80091dc:	4b5a      	ldr	r3, [pc, #360]	; (8009348 <ControlWall+0x220>)
 80091de:	789b      	ldrb	r3, [r3, #2]
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d140      	bne.n	8009266 <ControlWall+0x13e>
	{
		if(Pos.Act == slalom)
 80091e4:	4b58      	ldr	r3, [pc, #352]	; (8009348 <ControlWall+0x220>)
 80091e6:	791b      	ldrb	r3, [r3, #4]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d108      	bne.n	80091fe <ControlWall+0xd6>
		{
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID, 0);
			TargetAngularV = 0;
 80091ec:	4b58      	ldr	r3, [pc, #352]	; (8009350 <ControlWall+0x228>)
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 80091f4:	4b57      	ldr	r3, [pc, #348]	; (8009354 <ControlWall+0x22c>)
 80091f6:	f04f 0200 	mov.w	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]





}
 80091fc:	e0a0      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80091fe:	4b52      	ldr	r3, [pc, #328]	; (8009348 <ControlWall+0x220>)
 8009200:	791b      	ldrb	r3, [r3, #4]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d11d      	bne.n	8009242 <ControlWall+0x11a>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b06      	cmp	r3, #6
 800920a:	d015      	beq.n	8009238 <ControlWall+0x110>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800920c:	4b4e      	ldr	r3, [pc, #312]	; (8009348 <ControlWall+0x220>)
 800920e:	795b      	ldrb	r3, [r3, #5]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d108      	bne.n	8009226 <ControlWall+0xfe>
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009214:	2101      	movs	r1, #1
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f006 fce6 	bl	800fbe8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800921c:	2100      	movs	r1, #0
 800921e:	2000      	movs	r0, #0
 8009220:	f006 fce2 	bl	800fbe8 <PIDChangeFlag>
}
 8009224:	e08c      	b.n	8009340 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 8009226:	2100      	movs	r1, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f006 fcdd 	bl	800fbe8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 800922e:	2101      	movs	r1, #1
 8009230:	2000      	movs	r0, #0
 8009232:	f006 fcd9 	bl	800fbe8 <PIDChangeFlag>
}
 8009236:	e083      	b.n	8009340 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 8009238:	2101      	movs	r1, #1
 800923a:	2000      	movs	r0, #0
 800923c:	f006 fcd4 	bl	800fbe8 <PIDChangeFlag>
}
 8009240:	e07e      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == accel)
 8009242:	4b41      	ldr	r3, [pc, #260]	; (8009348 <ControlWall+0x220>)
 8009244:	791b      	ldrb	r3, [r3, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <ControlWall+0x12c>
			PIDChangeFlag( A_VELO_PID , 1);
 800924a:	2101      	movs	r1, #1
 800924c:	2000      	movs	r0, #0
 800924e:	f006 fccb 	bl	800fbe8 <PIDChangeFlag>
}
 8009252:	e075      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 8009254:	4b3c      	ldr	r3, [pc, #240]	; (8009348 <ControlWall+0x220>)
 8009256:	791b      	ldrb	r3, [r3, #4]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d171      	bne.n	8009340 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 800925c:	2100      	movs	r1, #0
 800925e:	2000      	movs	r0, #0
 8009260:	f006 fcc2 	bl	800fbe8 <PIDChangeFlag>
}
 8009264:	e06c      	b.n	8009340 <ControlWall+0x218>
	else if(Pos.Dir == right)
 8009266:	4b38      	ldr	r3, [pc, #224]	; (8009348 <ControlWall+0x220>)
 8009268:	789b      	ldrb	r3, [r3, #2]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d140      	bne.n	80092f0 <ControlWall+0x1c8>
		if(Pos.Act == slalom)
 800926e:	4b36      	ldr	r3, [pc, #216]	; (8009348 <ControlWall+0x220>)
 8009270:	791b      	ldrb	r3, [r3, #4]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d108      	bne.n	8009288 <ControlWall+0x160>
			TargetAngularV = 0;
 8009276:	4b36      	ldr	r3, [pc, #216]	; (8009350 <ControlWall+0x228>)
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800927e:	4b35      	ldr	r3, [pc, #212]	; (8009354 <ControlWall+0x22c>)
 8009280:	f04f 0200 	mov.w	r2, #0
 8009284:	601a      	str	r2, [r3, #0]
}
 8009286:	e05b      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 8009288:	4b2f      	ldr	r3, [pc, #188]	; (8009348 <ControlWall+0x220>)
 800928a:	791b      	ldrb	r3, [r3, #4]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d11d      	bne.n	80092cc <ControlWall+0x1a4>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b06      	cmp	r3, #6
 8009294:	d015      	beq.n	80092c2 <ControlWall+0x19a>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 8009296:	4b2c      	ldr	r3, [pc, #176]	; (8009348 <ControlWall+0x220>)
 8009298:	795b      	ldrb	r3, [r3, #5]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d108      	bne.n	80092b0 <ControlWall+0x188>
					PIDChangeFlag(wall_ctrl_dir, 1);
 800929e:	2101      	movs	r1, #1
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f006 fca1 	bl	800fbe8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 80092a6:	2100      	movs	r1, #0
 80092a8:	2000      	movs	r0, #0
 80092aa:	f006 fc9d 	bl	800fbe8 <PIDChangeFlag>
}
 80092ae:	e047      	b.n	8009340 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 80092b0:	2100      	movs	r1, #0
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f006 fc98 	bl	800fbe8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80092b8:	2101      	movs	r1, #1
 80092ba:	2000      	movs	r0, #0
 80092bc:	f006 fc94 	bl	800fbe8 <PIDChangeFlag>
}
 80092c0:	e03e      	b.n	8009340 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 80092c2:	2101      	movs	r1, #1
 80092c4:	2000      	movs	r0, #0
 80092c6:	f006 fc8f 	bl	800fbe8 <PIDChangeFlag>
}
 80092ca:	e039      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == accel)
 80092cc:	4b1e      	ldr	r3, [pc, #120]	; (8009348 <ControlWall+0x220>)
 80092ce:	791b      	ldrb	r3, [r3, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d104      	bne.n	80092de <ControlWall+0x1b6>
			PIDChangeFlag( A_VELO_PID , 1);
 80092d4:	2101      	movs	r1, #1
 80092d6:	2000      	movs	r0, #0
 80092d8:	f006 fc86 	bl	800fbe8 <PIDChangeFlag>
}
 80092dc:	e030      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 80092de:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <ControlWall+0x220>)
 80092e0:	791b      	ldrb	r3, [r3, #4]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d12c      	bne.n	8009340 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 80092e6:	2100      	movs	r1, #0
 80092e8:	2000      	movs	r0, #0
 80092ea:	f006 fc7d 	bl	800fbe8 <PIDChangeFlag>
}
 80092ee:	e027      	b.n	8009340 <ControlWall+0x218>
	else if(Pos.Dir == back)
 80092f0:	4b15      	ldr	r3, [pc, #84]	; (8009348 <ControlWall+0x220>)
 80092f2:	789b      	ldrb	r3, [r3, #2]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d123      	bne.n	8009340 <ControlWall+0x218>
		if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80092f8:	4b13      	ldr	r3, [pc, #76]	; (8009348 <ControlWall+0x220>)
 80092fa:	791b      	ldrb	r3, [r3, #4]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d115      	bne.n	800932c <ControlWall+0x204>
			if(Pos.WallSaf == wall_safe)	//フラグ作る。前に壁が無いパターンの減速は、後半の壁の状態の影響を受けることがある。35*0.5mmが目安か。
 8009300:	4b11      	ldr	r3, [pc, #68]	; (8009348 <ControlWall+0x220>)
 8009302:	795b      	ldrb	r3, [r3, #5]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d108      	bne.n	800931a <ControlWall+0x1f2>
				PIDChangeFlag(wall_ctrl_dir , 1);
 8009308:	2101      	movs	r1, #1
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f006 fc6c 	bl	800fbe8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID, 0);
 8009310:	2100      	movs	r1, #0
 8009312:	2000      	movs	r0, #0
 8009314:	f006 fc68 	bl	800fbe8 <PIDChangeFlag>
}
 8009318:	e012      	b.n	8009340 <ControlWall+0x218>
				PIDChangeFlag(wall_ctrl_dir, 0);
 800931a:	2100      	movs	r1, #0
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f006 fc63 	bl	800fbe8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 8009322:	2101      	movs	r1, #1
 8009324:	2000      	movs	r0, #0
 8009326:	f006 fc5f 	bl	800fbe8 <PIDChangeFlag>
}
 800932a:	e009      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == accel)
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <ControlWall+0x220>)
 800932e:	791b      	ldrb	r3, [r3, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d105      	bne.n	8009340 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 1);
 8009334:	2101      	movs	r1, #1
 8009336:	2000      	movs	r0, #0
 8009338:	f006 fc56 	bl	800fbe8 <PIDChangeFlag>
}
 800933c:	e000      	b.n	8009340 <ControlWall+0x218>
			break;
 800933e:	bf00      	nop
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000000 	.word	0x20000000
 800934c:	2000fef4 	.word	0x2000fef4
 8009350:	2000fef8 	.word	0x2000fef8
 8009354:	2000fc2c 	.word	0x2000fc2c

08009358 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
	Pos.Act = Wait;
 800935c:	4b17      	ldr	r3, [pc, #92]	; (80093bc <WaitStopAndReset+0x64>)
 800935e:	2204      	movs	r2, #4
 8009360:	711a      	strb	r2, [r3, #4]
	ControlWall();//ベイブレード対策
 8009362:	f7ff fee1 	bl	8009128 <ControlWall>
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8009366:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <WaitStopAndReset+0x68>)
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	609a      	str	r2, [r3, #8]
		Acceleration = 0;
 800936e:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <WaitStopAndReset+0x6c>)
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 8009376:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <WaitStopAndReset+0x70>)
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <WaitStopAndReset+0x74>)
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 8009386:	4b12      	ldr	r3, [pc, #72]	; (80093d0 <WaitStopAndReset+0x78>)
 8009388:	edd3 7a00 	vldr	s15, [r3]
 800938c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80093d4 <WaitStopAndReset+0x7c>
 8009390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009398:	dd02      	ble.n	80093a0 <WaitStopAndReset+0x48>
			printf("回転停止中\r\n");
 800939a:	480f      	ldr	r0, [pc, #60]	; (80093d8 <WaitStopAndReset+0x80>)
 800939c:	f00c fe2c 	bl	8015ff8 <puts>

	}while(CurrentVelocity[BODY] != 0);
 80093a0:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <WaitStopAndReset+0x78>)
 80093a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80093a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80093aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ae:	d1da      	bne.n	8009366 <WaitStopAndReset+0xe>
	HAL_Delay(100);
 80093b0:	2064      	movs	r0, #100	; 0x64
 80093b2:	f006 ff3f 	bl	8010234 <HAL_Delay>
}
 80093b6:	bf00      	nop
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000000 	.word	0x20000000
 80093c0:	2000fee8 	.word	0x2000fee8
 80093c4:	2000fc28 	.word	0x2000fc28
 80093c8:	2000fef8 	.word	0x2000fef8
 80093cc:	2000fc2c 	.word	0x2000fc2c
 80093d0:	2000ff24 	.word	0x2000ff24
 80093d4:	43fa0000 	.word	0x43fa0000
 80093d8:	0801a2c8 	.word	0x0801a2c8
 80093dc:	00000000 	.word	0x00000000

080093e0 <Rotate>:
	//向いた方角を変える
	ChangeCardinal();
	//printf("回転終了\r\n");
}
void Rotate(float deg, float ang_v)
{
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	b08d      	sub	sp, #52	; 0x34
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80093ea:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = rotate;
 80093ee:	4bb2      	ldr	r3, [pc, #712]	; (80096b8 <Rotate+0x2d8>)
 80093f0:	2203      	movs	r2, #3
 80093f2:	711a      	strb	r2, [r3, #4]
	WallWarn();
 80093f4:	f7ff fe8c 	bl	8009110 <WallWarn>
	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
 80093f8:	f7ff fe96 	bl	8009128 <ControlWall>
	TargetAngularV = 0;
 80093fc:	4baf      	ldr	r3, [pc, #700]	; (80096bc <Rotate+0x2dc>)
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8009404:	edd7 7a01 	vldr	s15, [r7, #4]
 8009408:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800940c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009410:	eddf 6aab 	vldr	s13, [pc, #684]	; 80096c0 <Rotate+0x2e0>
 8009414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009418:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float const_deg = deg*30/90;
 800941c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009420:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8009424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009428:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80096c0 <Rotate+0x2e0>
 800942c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009430:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float decel_deg = deg*30/90;
 8009434:	edd7 7a01 	vldr	s15, [r7, #4]
 8009438:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800943c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009440:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80096c0 <Rotate+0x2e0>
 8009444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009448:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 800944c:	edd7 7a00 	vldr	s15, [r7]
 8009450:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80096c4 <Rotate+0x2e4>
 8009454:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009458:	edd7 7a00 	vldr	s15, [r7]
 800945c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009460:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009464:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009468:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 800946c:	edc7 7a05 	vstr	s15, [r7, #20]
 8009470:	f04f 0300 	mov.w	r3, #0
 8009474:	61bb      	str	r3, [r7, #24]
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
 8009476:	edd7 7a00 	vldr	s15, [r7]
 800947a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80096c4 <Rotate+0x2e4>
 800947e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009482:	edd7 7a00 	vldr	s15, [r7]
 8009486:	ee67 6a27 	vmul.f32	s13, s14, s15
 800948a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800948e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 8009496:	edc7 7a07 	vstr	s15, [r7, #28]
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 800949a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800949c:	f7fe ff8c 	bl	80083b8 <__aeabi_f2d>
 80094a0:	a383      	add	r3, pc, #524	; (adr r3, 80096b0 <Rotate+0x2d0>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7fe ffdf 	bl	8008468 <__aeabi_dmul>
 80094aa:	4603      	mov	r3, r0
 80094ac:	460c      	mov	r4, r1
 80094ae:	4618      	mov	r0, r3
 80094b0:	4621      	mov	r1, r4
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	4b84      	ldr	r3, [pc, #528]	; (80096c8 <Rotate+0x2e8>)
 80094b8:	f7ff f900 	bl	80086bc <__aeabi_ddiv>
 80094bc:	4603      	mov	r3, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	4618      	mov	r0, r3
 80094c2:	4621      	mov	r1, r4
 80094c4:	f7ff fac8 	bl	8008a58 <__aeabi_d2f>
 80094c8:	4603      	mov	r3, r0
	float move_angle[3] = {
 80094ca:	60bb      	str	r3, [r7, #8]
			const_deg * M_PI/ 180,
 80094cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ce:	f7fe ff73 	bl	80083b8 <__aeabi_f2d>
 80094d2:	a377      	add	r3, pc, #476	; (adr r3, 80096b0 <Rotate+0x2d0>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7fe ffc6 	bl	8008468 <__aeabi_dmul>
 80094dc:	4603      	mov	r3, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	4618      	mov	r0, r3
 80094e2:	4621      	mov	r1, r4
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	4b77      	ldr	r3, [pc, #476]	; (80096c8 <Rotate+0x2e8>)
 80094ea:	f7ff f8e7 	bl	80086bc <__aeabi_ddiv>
 80094ee:	4603      	mov	r3, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	4618      	mov	r0, r3
 80094f4:	4621      	mov	r1, r4
 80094f6:	f7ff faaf 	bl	8008a58 <__aeabi_d2f>
 80094fa:	4603      	mov	r3, r0
	float move_angle[3] = {
 80094fc:	60fb      	str	r3, [r7, #12]
			decel_deg * M_PI/ 180,
 80094fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009500:	f7fe ff5a 	bl	80083b8 <__aeabi_f2d>
 8009504:	a36a      	add	r3, pc, #424	; (adr r3, 80096b0 <Rotate+0x2d0>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7fe ffad 	bl	8008468 <__aeabi_dmul>
 800950e:	4603      	mov	r3, r0
 8009510:	460c      	mov	r4, r1
 8009512:	4618      	mov	r0, r3
 8009514:	4621      	mov	r1, r4
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	4b6b      	ldr	r3, [pc, #428]	; (80096c8 <Rotate+0x2e8>)
 800951c:	f7ff f8ce 	bl	80086bc <__aeabi_ddiv>
 8009520:	4603      	mov	r3, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4618      	mov	r0, r3
 8009526:	4621      	mov	r1, r4
 8009528:	f7ff fa96 	bl	8008a58 <__aeabi_d2f>
 800952c:	4603      	mov	r3, r0
	float move_angle[3] = {
 800952e:	613b      	str	r3, [r7, #16]
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8009530:	edd7 7a00 	vldr	s15, [r7]
 8009534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953c:	dd57      	ble.n	80095ee <Rotate+0x20e>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800953e:	ed97 7a02 	vldr	s14, [r7, #8]
 8009542:	4b62      	ldr	r3, [pc, #392]	; (80096cc <Rotate+0x2ec>)
 8009544:	edd3 7a00 	vldr	s15, [r3]
 8009548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800954c:	4b5f      	ldr	r3, [pc, #380]	; (80096cc <Rotate+0x2ec>)
 800954e:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009552:	e002      	b.n	800955a <Rotate+0x17a>
		{
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	4a5e      	ldr	r2, [pc, #376]	; (80096d0 <Rotate+0x2f0>)
 8009558:	6013      	str	r3, [r2, #0]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800955a:	4b5c      	ldr	r3, [pc, #368]	; (80096cc <Rotate+0x2ec>)
 800955c:	ed93 7a00 	vldr	s14, [r3]
 8009560:	4b5c      	ldr	r3, [pc, #368]	; (80096d4 <Rotate+0x2f4>)
 8009562:	edd3 7a00 	vldr	s15, [r3]
 8009566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800956a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956e:	dcf1      	bgt.n	8009554 <Rotate+0x174>
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009570:	ed97 7a03 	vldr	s14, [r7, #12]
 8009574:	4b55      	ldr	r3, [pc, #340]	; (80096cc <Rotate+0x2ec>)
 8009576:	edd3 7a00 	vldr	s15, [r3]
 800957a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957e:	4b53      	ldr	r3, [pc, #332]	; (80096cc <Rotate+0x2ec>)
 8009580:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 8009584:	e002      	b.n	800958c <Rotate+0x1ac>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	4a51      	ldr	r2, [pc, #324]	; (80096d0 <Rotate+0x2f0>)
 800958a:	6013      	str	r3, [r2, #0]
		while(TargetAngle > Angle)
 800958c:	4b4f      	ldr	r3, [pc, #316]	; (80096cc <Rotate+0x2ec>)
 800958e:	ed93 7a00 	vldr	s14, [r3]
 8009592:	4b50      	ldr	r3, [pc, #320]	; (80096d4 <Rotate+0x2f4>)
 8009594:	edd3 7a00 	vldr	s15, [r3]
 8009598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800959c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a0:	dcf1      	bgt.n	8009586 <Rotate+0x1a6>
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80095a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80095a6:	4b49      	ldr	r3, [pc, #292]	; (80096cc <Rotate+0x2ec>)
 80095a8:	edd3 7a00 	vldr	s15, [r3]
 80095ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095b0:	4b46      	ldr	r3, [pc, #280]	; (80096cc <Rotate+0x2ec>)
 80095b2:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 80095b6:	e00e      	b.n	80095d6 <Rotate+0x1f6>
		{
			 AngularAcceleration = -angular_acceleration[2];
 80095b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80095bc:	eef1 7a67 	vneg.f32	s15, s15
 80095c0:	4b43      	ldr	r3, [pc, #268]	; (80096d0 <Rotate+0x2f0>)
 80095c2:	edc3 7a00 	vstr	s15, [r3]
			 if( AngularV <= 0)
 80095c6:	4b44      	ldr	r3, [pc, #272]	; (80096d8 <Rotate+0x2f8>)
 80095c8:	edd3 7a00 	vldr	s15, [r3]
 80095cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d4:	d96a      	bls.n	80096ac <Rotate+0x2cc>
		while(TargetAngle > Angle)
 80095d6:	4b3d      	ldr	r3, [pc, #244]	; (80096cc <Rotate+0x2ec>)
 80095d8:	ed93 7a00 	vldr	s14, [r3]
 80095dc:	4b3d      	ldr	r3, [pc, #244]	; (80096d4 <Rotate+0x2f4>)
 80095de:	edd3 7a00 	vldr	s15, [r3]
 80095e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ea:	dce5      	bgt.n	80095b8 <Rotate+0x1d8>
 80095ec:	e077      	b.n	80096de <Rotate+0x2fe>
				 break;
			 }
		}

	}
	else if( ang_v < 0)
 80095ee:	edd7 7a00 	vldr	s15, [r7]
 80095f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095fa:	d570      	bpl.n	80096de <Rotate+0x2fe>
	{
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80095fc:	4b33      	ldr	r3, [pc, #204]	; (80096cc <Rotate+0x2ec>)
 80095fe:	ed93 7a00 	vldr	s14, [r3]
 8009602:	edd7 7a02 	vldr	s15, [r7, #8]
 8009606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800960a:	4b30      	ldr	r3, [pc, #192]	; (80096cc <Rotate+0x2ec>)
 800960c:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009610:	e006      	b.n	8009620 <Rotate+0x240>
		{
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 8009612:	edd7 7a05 	vldr	s15, [r7, #20]
 8009616:	eef1 7a67 	vneg.f32	s15, s15
 800961a:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <Rotate+0x2f0>)
 800961c:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009620:	4b2a      	ldr	r3, [pc, #168]	; (80096cc <Rotate+0x2ec>)
 8009622:	ed93 7a00 	vldr	s14, [r3]
 8009626:	4b2b      	ldr	r3, [pc, #172]	; (80096d4 <Rotate+0x2f4>)
 8009628:	edd3 7a00 	vldr	s15, [r3]
 800962c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009634:	d4ed      	bmi.n	8009612 <Rotate+0x232>
		}
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009636:	4b25      	ldr	r3, [pc, #148]	; (80096cc <Rotate+0x2ec>)
 8009638:	ed93 7a00 	vldr	s14, [r3]
 800963c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009644:	4b21      	ldr	r3, [pc, #132]	; (80096cc <Rotate+0x2ec>)
 8009646:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 800964a:	e002      	b.n	8009652 <Rotate+0x272>
		{
			AngularAcceleration = angular_acceleration[1];//0
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	4a20      	ldr	r2, [pc, #128]	; (80096d0 <Rotate+0x2f0>)
 8009650:	6013      	str	r3, [r2, #0]
		while(TargetAngle < Angle)
 8009652:	4b1e      	ldr	r3, [pc, #120]	; (80096cc <Rotate+0x2ec>)
 8009654:	ed93 7a00 	vldr	s14, [r3]
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <Rotate+0x2f4>)
 800965a:	edd3 7a00 	vldr	s15, [r3]
 800965e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009666:	d4f1      	bmi.n	800964c <Rotate+0x26c>
		}
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009668:	4b18      	ldr	r3, [pc, #96]	; (80096cc <Rotate+0x2ec>)
 800966a:	ed93 7a00 	vldr	s14, [r3]
 800966e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009676:	4b15      	ldr	r3, [pc, #84]	; (80096cc <Rotate+0x2ec>)
 8009678:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 800967c:	e00a      	b.n	8009694 <Rotate+0x2b4>
		{
			 AngularAcceleration = angular_acceleration[2];
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	4a13      	ldr	r2, [pc, #76]	; (80096d0 <Rotate+0x2f0>)
 8009682:	6013      	str	r3, [r2, #0]
			 if( AngularV >= 0)
 8009684:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <Rotate+0x2f8>)
 8009686:	edd3 7a00 	vldr	s15, [r3]
 800968a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800968e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009692:	da23      	bge.n	80096dc <Rotate+0x2fc>
		while(TargetAngle < Angle)
 8009694:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <Rotate+0x2ec>)
 8009696:	ed93 7a00 	vldr	s14, [r3]
 800969a:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <Rotate+0x2f4>)
 800969c:	edd3 7a00 	vldr	s15, [r3]
 80096a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a8:	d4e9      	bmi.n	800967e <Rotate+0x29e>
 80096aa:	e018      	b.n	80096de <Rotate+0x2fe>
				 break;
 80096ac:	bf00      	nop
 80096ae:	e016      	b.n	80096de <Rotate+0x2fe>
 80096b0:	54442d18 	.word	0x54442d18
 80096b4:	400921fb 	.word	0x400921fb
 80096b8:	20000000 	.word	0x20000000
 80096bc:	2000fef8 	.word	0x2000fef8
 80096c0:	42b40000 	.word	0x42b40000
 80096c4:	3d83126f 	.word	0x3d83126f
 80096c8:	40668000 	.word	0x40668000
 80096cc:	2000ff14 	.word	0x2000ff14
 80096d0:	2000fc2c 	.word	0x2000fc2c
 80096d4:	2000fc24 	.word	0x2000fc24
 80096d8:	2000fc20 	.word	0x2000fc20
			 {
			 		break;
 80096dc:	bf00      	nop
			 }
		}

	}
	AngularAcceleration = 0;
 80096de:	4b32      	ldr	r3, [pc, #200]	; (80097a8 <Rotate+0x3c8>)
 80096e0:	f04f 0200 	mov.w	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 80096e6:	f7ff fe37 	bl	8009358 <WaitStopAndReset>
	ControlWall();
 80096ea:	f7ff fd1d 	bl	8009128 <ControlWall>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 80096ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80096f2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80097ac <Rotate+0x3cc>
 80096f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096fa:	ee16 0a90 	vmov	r0, s13
 80096fe:	f7fe fe5b 	bl	80083b8 <__aeabi_f2d>
 8009702:	a327      	add	r3, pc, #156	; (adr r3, 80097a0 <Rotate+0x3c0>)
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	f7fe feae 	bl	8008468 <__aeabi_dmul>
 800970c:	4603      	mov	r3, r0
 800970e:	460c      	mov	r4, r1
 8009710:	4618      	mov	r0, r3
 8009712:	4621      	mov	r1, r4
 8009714:	f7ff f958 	bl	80089c8 <__aeabi_d2iz>
 8009718:	4603      	mov	r3, r0
 800971a:	623b      	str	r3, [r7, #32]
	if(ang_v < 0)
 800971c:	edd7 7a00 	vldr	s15, [r7]
 8009720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009728:	d513      	bpl.n	8009752 <Rotate+0x372>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 800972a:	4b21      	ldr	r3, [pc, #132]	; (80097b0 <Rotate+0x3d0>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	0fd9      	lsrs	r1, r3, #31
 8009732:	440b      	add	r3, r1
 8009734:	105b      	asrs	r3, r3, #1
 8009736:	425b      	negs	r3, r3
 8009738:	4413      	add	r3, r2
 800973a:	4a1d      	ldr	r2, [pc, #116]	; (80097b0 <Rotate+0x3d0>)
 800973c:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 800973e:	4b1c      	ldr	r3, [pc, #112]	; (80097b0 <Rotate+0x3d0>)
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	0fd9      	lsrs	r1, r3, #31
 8009746:	440b      	add	r3, r1
 8009748:	105b      	asrs	r3, r3, #1
 800974a:	4413      	add	r3, r2
 800974c:	4a18      	ldr	r2, [pc, #96]	; (80097b0 <Rotate+0x3d0>)
 800974e:	6053      	str	r3, [r2, #4]
 8009750:	e019      	b.n	8009786 <Rotate+0x3a6>
	}
	else 	if(ang_v > 0)
 8009752:	edd7 7a00 	vldr	s15, [r7]
 8009756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975e:	dd12      	ble.n	8009786 <Rotate+0x3a6>
	{
		KeepPulse[LEFT] += target_pulse/2;
 8009760:	4b13      	ldr	r3, [pc, #76]	; (80097b0 <Rotate+0x3d0>)
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	0fd9      	lsrs	r1, r3, #31
 8009768:	440b      	add	r3, r1
 800976a:	105b      	asrs	r3, r3, #1
 800976c:	4413      	add	r3, r2
 800976e:	4a10      	ldr	r2, [pc, #64]	; (80097b0 <Rotate+0x3d0>)
 8009770:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 8009772:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <Rotate+0x3d0>)
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	0fd9      	lsrs	r1, r3, #31
 800977a:	440b      	add	r3, r1
 800977c:	105b      	asrs	r3, r3, #1
 800977e:	425b      	negs	r3, r3
 8009780:	4413      	add	r3, r2
 8009782:	4a0b      	ldr	r2, [pc, #44]	; (80097b0 <Rotate+0x3d0>)
 8009784:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 8009786:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <Rotate+0x3d0>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	4a09      	ldr	r2, [pc, #36]	; (80097b0 <Rotate+0x3d0>)
 800978c:	6093      	str	r3, [r2, #8]

	//向いた方角を変える
	ChangeCardinal();
 800978e:	f7ff fc8b 	bl	80090a8 <ChangeCardinal>
	//printf("回転終了\r\n");
}
 8009792:	bf00      	nop
 8009794:	3734      	adds	r7, #52	; 0x34
 8009796:	46bd      	mov	sp, r7
 8009798:	bd90      	pop	{r4, r7, pc}
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w
 80097a0:	44f192ba 	.word	0x44f192ba
 80097a4:	40fcb390 	.word	0x40fcb390
 80097a8:	2000fc2c 	.word	0x2000fc2c
 80097ac:	43b40000 	.word	0x43b40000
 80097b0:	2000ff4c 	.word	0x2000ff4c

080097b4 <getFrontWall>:
{

}

int getFrontWall()
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0

	switch(Pos.Car)//方角に合わせて、
 80097b8:	4b28      	ldr	r3, [pc, #160]	; (800985c <getFrontWall+0xa8>)
 80097ba:	78db      	ldrb	r3, [r3, #3]
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d847      	bhi.n	8009850 <getFrontWall+0x9c>
 80097c0:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <getFrontWall+0x14>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	080097f7 	.word	0x080097f7
 80097d0:	08009815 	.word	0x08009815
 80097d4:	08009833 	.word	0x08009833
	{

	case north:

	return Wall[Pos.X][Pos.Y].north;
 80097d8:	4b20      	ldr	r3, [pc, #128]	; (800985c <getFrontWall+0xa8>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	4b1f      	ldr	r3, [pc, #124]	; (800985c <getFrontWall+0xa8>)
 80097e0:	785b      	ldrb	r3, [r3, #1]
 80097e2:	4619      	mov	r1, r3
 80097e4:	4a1e      	ldr	r2, [pc, #120]	; (8009860 <getFrontWall+0xac>)
 80097e6:	0103      	lsls	r3, r0, #4
 80097e8:	440b      	add	r3, r1
 80097ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80097ee:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	e02d      	b.n	8009852 <getFrontWall+0x9e>

	break;

	case east:

	return Wall[Pos.X][Pos.Y].east;
 80097f6:	4b19      	ldr	r3, [pc, #100]	; (800985c <getFrontWall+0xa8>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	4b17      	ldr	r3, [pc, #92]	; (800985c <getFrontWall+0xa8>)
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	4619      	mov	r1, r3
 8009802:	4a17      	ldr	r2, [pc, #92]	; (8009860 <getFrontWall+0xac>)
 8009804:	0103      	lsls	r3, r0, #4
 8009806:	440b      	add	r3, r1
 8009808:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800980c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009810:	b2db      	uxtb	r3, r3
 8009812:	e01e      	b.n	8009852 <getFrontWall+0x9e>

	break;

	case south:

	return Wall[Pos.X][Pos.Y].south;
 8009814:	4b11      	ldr	r3, [pc, #68]	; (800985c <getFrontWall+0xa8>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	4618      	mov	r0, r3
 800981a:	4b10      	ldr	r3, [pc, #64]	; (800985c <getFrontWall+0xa8>)
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	4619      	mov	r1, r3
 8009820:	4a0f      	ldr	r2, [pc, #60]	; (8009860 <getFrontWall+0xac>)
 8009822:	0103      	lsls	r3, r0, #4
 8009824:	440b      	add	r3, r1
 8009826:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800982a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800982e:	b2db      	uxtb	r3, r3
 8009830:	e00f      	b.n	8009852 <getFrontWall+0x9e>

	break;

	case west:

	return Wall[Pos.X][Pos.Y].west;
 8009832:	4b0a      	ldr	r3, [pc, #40]	; (800985c <getFrontWall+0xa8>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	4b08      	ldr	r3, [pc, #32]	; (800985c <getFrontWall+0xa8>)
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	4619      	mov	r1, r3
 800983e:	4a08      	ldr	r2, [pc, #32]	; (8009860 <getFrontWall+0xac>)
 8009840:	0103      	lsls	r3, r0, #4
 8009842:	440b      	add	r3, r1
 8009844:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009848:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800984c:	b2db      	uxtb	r3, r3
 800984e:	e000      	b.n	8009852 <getFrontWall+0x9e>

	break;

	default:

	break;
 8009850:	bf00      	nop

	}

}
 8009852:	4618      	mov	r0, r3
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	20000000 	.word	0x20000000
 8009860:	20010398 	.word	0x20010398
 8009864:	00000000 	.word	0x00000000

08009868 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009868:	b5b0      	push	{r4, r5, r7, lr}
 800986a:	b08a      	sub	sp, #40	; 0x28
 800986c:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 800986e:	4baa      	ldr	r3, [pc, #680]	; (8009b18 <SlalomRight+0x2b0>)
 8009870:	2202      	movs	r2, #2
 8009872:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009874:	f7ff fc58 	bl	8009128 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009878:	4ba8      	ldr	r3, [pc, #672]	; (8009b1c <SlalomRight+0x2b4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 800987e:	4ba8      	ldr	r3, [pc, #672]	; (8009b20 <SlalomRight+0x2b8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009884:	4ba6      	ldr	r3, [pc, #664]	; (8009b20 <SlalomRight+0x2b8>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	61fb      	str	r3, [r7, #28]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 800988a:	4ba5      	ldr	r3, [pc, #660]	; (8009b20 <SlalomRight+0x2b8>)
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	61bb      	str	r3, [r7, #24]
	//float alalpha_turn = Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009890:	4ba3      	ldr	r3, [pc, #652]	; (8009b20 <SlalomRight+0x2b8>)
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe fd8f 	bl	80083b8 <__aeabi_f2d>
 800989a:	a39b      	add	r3, pc, #620	; (adr r3, 8009b08 <SlalomRight+0x2a0>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	f7fe fde2 	bl	8008468 <__aeabi_dmul>
 80098a4:	4603      	mov	r3, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	4618      	mov	r0, r3
 80098aa:	4621      	mov	r1, r4
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	4b9c      	ldr	r3, [pc, #624]	; (8009b24 <SlalomRight+0x2bc>)
 80098b2:	f7fe ff03 	bl	80086bc <__aeabi_ddiv>
 80098b6:	4603      	mov	r3, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	4618      	mov	r0, r3
 80098bc:	4621      	mov	r1, r4
 80098be:	f7ff f8cb 	bl	8008a58 <__aeabi_d2f>
 80098c2:	4603      	mov	r3, r0
 80098c4:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80098c6:	4b96      	ldr	r3, [pc, #600]	; (8009b20 <SlalomRight+0x2b8>)
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fd74 	bl	80083b8 <__aeabi_f2d>
 80098d0:	a38d      	add	r3, pc, #564	; (adr r3, 8009b08 <SlalomRight+0x2a0>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7fe fdc7 	bl	8008468 <__aeabi_dmul>
 80098da:	4603      	mov	r3, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	4618      	mov	r0, r3
 80098e0:	4621      	mov	r1, r4
 80098e2:	f04f 0200 	mov.w	r2, #0
 80098e6:	4b8f      	ldr	r3, [pc, #572]	; (8009b24 <SlalomRight+0x2bc>)
 80098e8:	f7fe fee8 	bl	80086bc <__aeabi_ddiv>
 80098ec:	4603      	mov	r3, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	4618      	mov	r0, r3
 80098f2:	4621      	mov	r1, r4
 80098f4:	f7ff f8b0 	bl	8008a58 <__aeabi_d2f>
 80098f8:	4603      	mov	r3, r0
 80098fa:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80098fc:	4b88      	ldr	r3, [pc, #544]	; (8009b20 <SlalomRight+0x2b8>)
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fd59 	bl	80083b8 <__aeabi_f2d>
 8009906:	a380      	add	r3, pc, #512	; (adr r3, 8009b08 <SlalomRight+0x2a0>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7fe fdac 	bl	8008468 <__aeabi_dmul>
 8009910:	4603      	mov	r3, r0
 8009912:	460c      	mov	r4, r1
 8009914:	4618      	mov	r0, r3
 8009916:	4621      	mov	r1, r4
 8009918:	f04f 0200 	mov.w	r2, #0
 800991c:	4b81      	ldr	r3, [pc, #516]	; (8009b24 <SlalomRight+0x2bc>)
 800991e:	f7fe fecd 	bl	80086bc <__aeabi_ddiv>
 8009922:	4603      	mov	r3, r0
 8009924:	460c      	mov	r4, r1
 8009926:	4618      	mov	r0, r3
 8009928:	4621      	mov	r1, r4
 800992a:	f7ff f895 	bl	8008a58 <__aeabi_d2f>
 800992e:	4603      	mov	r3, r0
 8009930:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 8009932:	4b7d      	ldr	r3, [pc, #500]	; (8009b28 <SlalomRight+0x2c0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009938:	4b7c      	ldr	r3, [pc, #496]	; (8009b2c <SlalomRight+0x2c4>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	4b7b      	ldr	r3, [pc, #492]	; (8009b2c <SlalomRight+0x2c4>)
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	4413      	add	r3, r2
 8009942:	607b      	str	r3, [r7, #4]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009944:	f7ff ff36 	bl	80097b4 <getFrontWall>
 8009948:	4603      	mov	r3, r0
 800994a:	2b01      	cmp	r3, #1
 800994c:	d133      	bne.n	80099b6 <SlalomRight+0x14e>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800994e:	e00e      	b.n	800996e <SlalomRight+0x106>
		{
			TargetAngularV = 0;
 8009950:	4b77      	ldr	r3, [pc, #476]	; (8009b30 <SlalomRight+0x2c8>)
 8009952:	f04f 0200 	mov.w	r2, #0
 8009956:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 8009958:	4b76      	ldr	r3, [pc, #472]	; (8009b34 <SlalomRight+0x2cc>)
 800995a:	f04f 0200 	mov.w	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009960:	4b75      	ldr	r3, [pc, #468]	; (8009b38 <SlalomRight+0x2d0>)
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009968:	4a74      	ldr	r2, [pc, #464]	; (8009b3c <SlalomRight+0x2d4>)
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800996e:	4b74      	ldr	r3, [pc, #464]	; (8009b40 <SlalomRight+0x2d8>)
 8009970:	edd3 7a00 	vldr	s15, [r3]
 8009974:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009b44 <SlalomRight+0x2dc>
 8009978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800997c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009980:	d4e6      	bmi.n	8009950 <SlalomRight+0xe8>
 8009982:	4b6f      	ldr	r3, [pc, #444]	; (8009b40 <SlalomRight+0x2d8>)
 8009984:	edd3 7a03 	vldr	s15, [r3, #12]
 8009988:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009b48 <SlalomRight+0x2e0>
 800998c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009994:	d4dc      	bmi.n	8009950 <SlalomRight+0xe8>
 8009996:	e03b      	b.n	8009a10 <SlalomRight+0x1a8>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009998:	4b65      	ldr	r3, [pc, #404]	; (8009b30 <SlalomRight+0x2c8>)
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
				AngularLeapsity = 0;
 80099a0:	4b64      	ldr	r3, [pc, #400]	; (8009b34 <SlalomRight+0x2cc>)
 80099a2:	f04f 0200 	mov.w	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 80099a8:	4b63      	ldr	r3, [pc, #396]	; (8009b38 <SlalomRight+0x2d0>)
 80099aa:	f04f 0200 	mov.w	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 80099b0:	4a62      	ldr	r2, [pc, #392]	; (8009b3c <SlalomRight+0x2d4>)
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7fe fcec 	bl	8008394 <__aeabi_i2d>
 80099bc:	4604      	mov	r4, r0
 80099be:	460d      	mov	r5, r1
 80099c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80099c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80099c8:	ee17 0a90 	vmov	r0, s15
 80099cc:	f7fe fcf4 	bl	80083b8 <__aeabi_f2d>
 80099d0:	a34f      	add	r3, pc, #316	; (adr r3, 8009b10 <SlalomRight+0x2a8>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7fe fe71 	bl	80086bc <__aeabi_ddiv>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7fe fb8b 	bl	80080fc <__adddf3>
 80099e6:	4603      	mov	r3, r0
 80099e8:	460c      	mov	r4, r1
 80099ea:	4625      	mov	r5, r4
 80099ec:	461c      	mov	r4, r3
 80099ee:	4b4f      	ldr	r3, [pc, #316]	; (8009b2c <SlalomRight+0x2c4>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4b4e      	ldr	r3, [pc, #312]	; (8009b2c <SlalomRight+0x2c4>)
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	4413      	add	r3, r2
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fccb 	bl	8008394 <__aeabi_i2d>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7fe ffbf 	bl	8008988 <__aeabi_dcmpgt>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1c3      	bne.n	8009998 <SlalomRight+0x130>

				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;
 8009a10:	4b45      	ldr	r3, [pc, #276]	; (8009b28 <SlalomRight+0x2c0>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 8009a16:	4b4d      	ldr	r3, [pc, #308]	; (8009b4c <SlalomRight+0x2e4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	603b      	str	r3, [r7, #0]

	while(start_angle + ang1 > Angle)
 8009a1c:	e005      	b.n	8009a2a <SlalomRight+0x1c2>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009a1e:	4a46      	ldr	r2, [pc, #280]	; (8009b38 <SlalomRight+0x2d0>)
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009a24:	4a45      	ldr	r2, [pc, #276]	; (8009b3c <SlalomRight+0x2d4>)
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009a2a:	ed97 7a00 	vldr	s14, [r7]
 8009a2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a36:	4b45      	ldr	r3, [pc, #276]	; (8009b4c <SlalomRight+0x2e4>)
 8009a38:	edd3 7a00 	vldr	s15, [r3]
 8009a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a44:	dceb      	bgt.n	8009a1e <SlalomRight+0x1b6>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009a46:	4b3c      	ldr	r3, [pc, #240]	; (8009b38 <SlalomRight+0x2d0>)
 8009a48:	f04f 0200 	mov.w	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009a4e:	4b39      	ldr	r3, [pc, #228]	; (8009b34 <SlalomRight+0x2cc>)
 8009a50:	f04f 0200 	mov.w	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 8009a56:	4b34      	ldr	r3, [pc, #208]	; (8009b28 <SlalomRight+0x2c0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009a5c:	e006      	b.n	8009a6c <SlalomRight+0x204>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009a5e:	4b34      	ldr	r3, [pc, #208]	; (8009b30 <SlalomRight+0x2c8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a33      	ldr	r2, [pc, #204]	; (8009b30 <SlalomRight+0x2c8>)
 8009a64:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009a66:	4a35      	ldr	r2, [pc, #212]	; (8009b3c <SlalomRight+0x2d4>)
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > Angle)
 8009a6c:	ed97 7a00 	vldr	s14, [r7]
 8009a70:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a78:	4b34      	ldr	r3, [pc, #208]	; (8009b4c <SlalomRight+0x2e4>)
 8009a7a:	edd3 7a00 	vldr	s15, [r3]
 8009a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a86:	dcea      	bgt.n	8009a5e <SlalomRight+0x1f6>

			}
#endif
	}

	now_angv = AngularV;
 8009a88:	4b27      	ldr	r3, [pc, #156]	; (8009b28 <SlalomRight+0x2c0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 8009a8e:	e016      	b.n	8009abe <SlalomRight+0x256>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009a90:	edd7 7a06 	vldr	s15, [r7, #24]
 8009a94:	eef1 7a67 	vneg.f32	s15, s15
 8009a98:	4b27      	ldr	r3, [pc, #156]	; (8009b38 <SlalomRight+0x2d0>)
 8009a9a:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 8009a9e:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <SlalomRight+0x2c8>)
 8009aa0:	edd3 7a00 	vldr	s15, [r3]
 8009aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aac:	d504      	bpl.n	8009ab8 <SlalomRight+0x250>
			{
				TargetAngularV = 0;
 8009aae:	4b20      	ldr	r3, [pc, #128]	; (8009b30 <SlalomRight+0x2c8>)
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
				break;
 8009ab6:	e010      	b.n	8009ada <SlalomRight+0x272>
			}
			TargetVelocity[BODY] = v_turn;
 8009ab8:	4a20      	ldr	r2, [pc, #128]	; (8009b3c <SlalomRight+0x2d4>)
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009abe:	ed97 7a00 	vldr	s14, [r7]
 8009ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009aca:	4b20      	ldr	r3, [pc, #128]	; (8009b4c <SlalomRight+0x2e4>)
 8009acc:	edd3 7a00 	vldr	s15, [r3]
 8009ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad8:	dcda      	bgt.n	8009a90 <SlalomRight+0x228>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009ada:	4b17      	ldr	r3, [pc, #92]	; (8009b38 <SlalomRight+0x2d0>)
 8009adc:	f04f 0200 	mov.w	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009ae2:	4b14      	ldr	r3, [pc, #80]	; (8009b34 <SlalomRight+0x2cc>)
 8009ae4:	f04f 0200 	mov.w	r2, #0
 8009ae8:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009aea:	4b11      	ldr	r3, [pc, #68]	; (8009b30 <SlalomRight+0x2c8>)
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009af2:	4b17      	ldr	r3, [pc, #92]	; (8009b50 <SlalomRight+0x2e8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a17      	ldr	r2, [pc, #92]	; (8009b54 <SlalomRight+0x2ec>)
 8009af8:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009afa:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <SlalomRight+0x2c4>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <SlalomRight+0x2c4>)
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009b06:	e03c      	b.n	8009b82 <SlalomRight+0x31a>
 8009b08:	54442d18 	.word	0x54442d18
 8009b0c:	400921fb 	.word	0x400921fb
 8009b10:	23ca2666 	.word	0x23ca2666
 8009b14:	3f509268 	.word	0x3f509268
 8009b18:	20000000 	.word	0x20000000
 8009b1c:	20010168 	.word	0x20010168
 8009b20:	2000ff30 	.word	0x2000ff30
 8009b24:	40668000 	.word	0x40668000
 8009b28:	2000fc20 	.word	0x2000fc20
 8009b2c:	2000ff18 	.word	0x2000ff18
 8009b30:	2000fef8 	.word	0x2000fef8
 8009b34:	2000fc30 	.word	0x2000fc30
 8009b38:	2000fc2c 	.word	0x2000fc2c
 8009b3c:	2000fee8 	.word	0x2000fee8
 8009b40:	2000ff58 	.word	0x2000ff58
 8009b44:	43480000 	.word	0x43480000
 8009b48:	437a0000 	.word	0x437a0000
 8009b4c:	2000fc24 	.word	0x2000fc24
 8009b50:	20010598 	.word	0x20010598
 8009b54:	2001059c 	.word	0x2001059c
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009b58:	4b33      	ldr	r3, [pc, #204]	; (8009c28 <SlalomRight+0x3c0>)
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009b60:	4a32      	ldr	r2, [pc, #200]	; (8009c2c <SlalomRight+0x3c4>)
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 8009b66:	4b32      	ldr	r3, [pc, #200]	; (8009c30 <SlalomRight+0x3c8>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d109      	bne.n	8009b82 <SlalomRight+0x31a>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009b6e:	f001 fcad 	bl	800b4cc <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009b72:	2201      	movs	r2, #1
 8009b74:	2103      	movs	r1, #3
 8009b76:	2005      	movs	r0, #5
 8009b78:	f001 fe1a 	bl	800b7b0 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009b7c:	4b2c      	ldr	r3, [pc, #176]	; (8009c30 <SlalomRight+0x3c8>)
 8009b7e:	2201      	movs	r2, #1
 8009b80:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7fe fc06 	bl	8008394 <__aeabi_i2d>
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009b94:	ee17 0a90 	vmov	r0, s15
 8009b98:	f7fe fc0e 	bl	80083b8 <__aeabi_f2d>
 8009b9c:	a31e      	add	r3, pc, #120	; (adr r3, 8009c18 <SlalomRight+0x3b0>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f7fe fd8b 	bl	80086bc <__aeabi_ddiv>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4620      	mov	r0, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	f7fe faa5 	bl	80080fc <__adddf3>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	4625      	mov	r5, r4
 8009bb8:	461c      	mov	r4, r3
 8009bba:	4b1e      	ldr	r3, [pc, #120]	; (8009c34 <SlalomRight+0x3cc>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <SlalomRight+0x3cc>)
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe fbe5 	bl	8008394 <__aeabi_i2d>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7fe fed9 	bl	8008988 <__aeabi_dcmpgt>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1bd      	bne.n	8009b58 <SlalomRight+0x2f0>
			}
	}
	TargetAngle += 90*M_PI/180;
 8009bdc:	4b16      	ldr	r3, [pc, #88]	; (8009c38 <SlalomRight+0x3d0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fbe9 	bl	80083b8 <__aeabi_f2d>
 8009be6:	a30e      	add	r3, pc, #56	; (adr r3, 8009c20 <SlalomRight+0x3b8>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7fe fa86 	bl	80080fc <__adddf3>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	f7fe ff2e 	bl	8008a58 <__aeabi_d2f>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	; (8009c38 <SlalomRight+0x3d0>)
 8009c00:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009c02:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <SlalomRight+0x3cc>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	4a0d      	ldr	r2, [pc, #52]	; (8009c3c <SlalomRight+0x3d4>)
 8009c08:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009c0a:	bf00      	nop
 8009c0c:	3728      	adds	r7, #40	; 0x28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bdb0      	pop	{r4, r5, r7, pc}
 8009c12:	bf00      	nop
 8009c14:	f3af 8000 	nop.w
 8009c18:	23ca2666 	.word	0x23ca2666
 8009c1c:	3f509268 	.word	0x3f509268
 8009c20:	54442d18 	.word	0x54442d18
 8009c24:	3ff921fb 	.word	0x3ff921fb
 8009c28:	2000fef8 	.word	0x2000fef8
 8009c2c:	2000fee8 	.word	0x2000fee8
 8009c30:	2001059c 	.word	0x2001059c
 8009c34:	2000ff18 	.word	0x2000ff18
 8009c38:	2000ff14 	.word	0x2000ff14
 8009c3c:	2000ff4c 	.word	0x2000ff4c

08009c40 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009c40:	b5b0      	push	{r4, r5, r7, lr}
 8009c42:	b08a      	sub	sp, #40	; 0x28
 8009c44:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009c46:	4ba4      	ldr	r3, [pc, #656]	; (8009ed8 <SlalomLeft+0x298>)
 8009c48:	2202      	movs	r2, #2
 8009c4a:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009c4c:	f7ff fa6c 	bl	8009128 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009c50:	4ba2      	ldr	r3, [pc, #648]	; (8009edc <SlalomLeft+0x29c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009c56:	4ba2      	ldr	r3, [pc, #648]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009c5c:	4ba0      	ldr	r3, [pc, #640]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009c62:	4b9f      	ldr	r3, [pc, #636]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8009c68:	eef1 7a67 	vneg.f32	s15, s15
 8009c6c:	edc7 7a06 	vstr	s15, [r7, #24]
	//float alalpha_turn = -Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009c70:	4b9b      	ldr	r3, [pc, #620]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fb9f 	bl	80083b8 <__aeabi_f2d>
 8009c7a:	a393      	add	r3, pc, #588	; (adr r3, 8009ec8 <SlalomLeft+0x288>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f7fe fbf2 	bl	8008468 <__aeabi_dmul>
 8009c84:	4603      	mov	r3, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	4618      	mov	r0, r3
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	4b94      	ldr	r3, [pc, #592]	; (8009ee4 <SlalomLeft+0x2a4>)
 8009c92:	f7fe fd13 	bl	80086bc <__aeabi_ddiv>
 8009c96:	4603      	mov	r3, r0
 8009c98:	460c      	mov	r4, r1
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	f7fe fedb 	bl	8008a58 <__aeabi_d2f>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009ca6:	4b8e      	ldr	r3, [pc, #568]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fb84 	bl	80083b8 <__aeabi_f2d>
 8009cb0:	a385      	add	r3, pc, #532	; (adr r3, 8009ec8 <SlalomLeft+0x288>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7fe fbd7 	bl	8008468 <__aeabi_dmul>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	f04f 0200 	mov.w	r2, #0
 8009cc6:	4b87      	ldr	r3, [pc, #540]	; (8009ee4 <SlalomLeft+0x2a4>)
 8009cc8:	f7fe fcf8 	bl	80086bc <__aeabi_ddiv>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	f7fe fec0 	bl	8008a58 <__aeabi_d2f>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009cdc:	4b80      	ldr	r3, [pc, #512]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fb69 	bl	80083b8 <__aeabi_f2d>
 8009ce6:	a378      	add	r3, pc, #480	; (adr r3, 8009ec8 <SlalomLeft+0x288>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7fe fbbc 	bl	8008468 <__aeabi_dmul>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	f04f 0200 	mov.w	r2, #0
 8009cfc:	4b79      	ldr	r3, [pc, #484]	; (8009ee4 <SlalomLeft+0x2a4>)
 8009cfe:	f7fe fcdd 	bl	80086bc <__aeabi_ddiv>
 8009d02:	4603      	mov	r3, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	4618      	mov	r0, r3
 8009d08:	4621      	mov	r1, r4
 8009d0a:	f7fe fea5 	bl	8008a58 <__aeabi_d2f>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009d12:	4b75      	ldr	r3, [pc, #468]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b74      	ldr	r3, [pc, #464]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009d1e:	f7ff fd49 	bl	80097b4 <getFrontWall>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d12f      	bne.n	8009d88 <SlalomLeft+0x148>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009d28:	e00e      	b.n	8009d48 <SlalomLeft+0x108>
		{
			TargetAngularV = 0;
 8009d2a:	4b70      	ldr	r3, [pc, #448]	; (8009eec <SlalomLeft+0x2ac>)
 8009d2c:	f04f 0200 	mov.w	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 8009d32:	4b6f      	ldr	r3, [pc, #444]	; (8009ef0 <SlalomLeft+0x2b0>)
 8009d34:	f04f 0200 	mov.w	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009d3a:	4b6e      	ldr	r3, [pc, #440]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009d42:	4a6d      	ldr	r2, [pc, #436]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009d48:	4b6c      	ldr	r3, [pc, #432]	; (8009efc <SlalomLeft+0x2bc>)
 8009d4a:	edd3 7a00 	vldr	s15, [r3]
 8009d4e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8009f00 <SlalomLeft+0x2c0>
 8009d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5a:	d4e6      	bmi.n	8009d2a <SlalomLeft+0xea>
 8009d5c:	4b67      	ldr	r3, [pc, #412]	; (8009efc <SlalomLeft+0x2bc>)
 8009d5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009d62:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8009f04 <SlalomLeft+0x2c4>
 8009d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	d4dc      	bmi.n	8009d2a <SlalomLeft+0xea>
 8009d70:	e037      	b.n	8009de2 <SlalomLeft+0x1a2>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009d72:	4b5e      	ldr	r3, [pc, #376]	; (8009eec <SlalomLeft+0x2ac>)
 8009d74:	f04f 0200 	mov.w	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 8009d7a:	4b5e      	ldr	r3, [pc, #376]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009d7c:	f04f 0200 	mov.w	r2, #0
 8009d80:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 8009d82:	4a5d      	ldr	r2, [pc, #372]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f7fe fb03 	bl	8008394 <__aeabi_i2d>
 8009d8e:	4604      	mov	r4, r0
 8009d90:	460d      	mov	r5, r1
 8009d92:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d9a:	ee17 0a90 	vmov	r0, s15
 8009d9e:	f7fe fb0b 	bl	80083b8 <__aeabi_f2d>
 8009da2:	a34b      	add	r3, pc, #300	; (adr r3, 8009ed0 <SlalomLeft+0x290>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	f7fe fc88 	bl	80086bc <__aeabi_ddiv>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4620      	mov	r0, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7fe f9a2 	bl	80080fc <__adddf3>
 8009db8:	4603      	mov	r3, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	4625      	mov	r5, r4
 8009dbe:	461c      	mov	r4, r3
 8009dc0:	4b49      	ldr	r3, [pc, #292]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	4b48      	ldr	r3, [pc, #288]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4413      	add	r3, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fae2 	bl	8008394 <__aeabi_i2d>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7fe fdd6 	bl	8008988 <__aeabi_dcmpgt>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1c7      	bne.n	8009d72 <SlalomLeft+0x132>
				////printf("直進1\r\n");
		}
	}


	float start_angle = Angle;
 8009de2:	4b49      	ldr	r3, [pc, #292]	; (8009f08 <SlalomLeft+0x2c8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 8009de8:	e005      	b.n	8009df6 <SlalomLeft+0x1b6>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009dea:	4a42      	ldr	r2, [pc, #264]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009df0:	4a41      	ldr	r2, [pc, #260]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009df6:	ed97 7a01 	vldr	s14, [r7, #4]
 8009dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8009dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e02:	4b41      	ldr	r3, [pc, #260]	; (8009f08 <SlalomLeft+0x2c8>)
 8009e04:	edd3 7a00 	vldr	s15, [r3]
 8009e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e10:	d4eb      	bmi.n	8009dea <SlalomLeft+0x1aa>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009e12:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009e1a:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <SlalomLeft+0x2b0>)
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009e22:	e006      	b.n	8009e32 <SlalomLeft+0x1f2>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009e24:	4b31      	ldr	r3, [pc, #196]	; (8009eec <SlalomLeft+0x2ac>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a30      	ldr	r2, [pc, #192]	; (8009eec <SlalomLeft+0x2ac>)
 8009e2a:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009e2c:	4a32      	ldr	r2, [pc, #200]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009e32:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e36:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e3e:	4b32      	ldr	r3, [pc, #200]	; (8009f08 <SlalomLeft+0x2c8>)
 8009e40:	edd3 7a00 	vldr	s15, [r3]
 8009e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4c:	d4ea      	bmi.n	8009e24 <SlalomLeft+0x1e4>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009e4e:	e016      	b.n	8009e7e <SlalomLeft+0x23e>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009e50:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e54:	eef1 7a67 	vneg.f32	s15, s15
 8009e58:	4b26      	ldr	r3, [pc, #152]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009e5a:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 8009e5e:	4b23      	ldr	r3, [pc, #140]	; (8009eec <SlalomLeft+0x2ac>)
 8009e60:	edd3 7a00 	vldr	s15, [r3]
 8009e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6c:	dd04      	ble.n	8009e78 <SlalomLeft+0x238>
			{
				TargetAngularV = 0;
 8009e6e:	4b1f      	ldr	r3, [pc, #124]	; (8009eec <SlalomLeft+0x2ac>)
 8009e70:	f04f 0200 	mov.w	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
				break;
 8009e76:	e010      	b.n	8009e9a <SlalomLeft+0x25a>
			}
			TargetVelocity[BODY] = v_turn;
 8009e78:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < Angle)
 8009e7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e8a:	4b1f      	ldr	r3, [pc, #124]	; (8009f08 <SlalomLeft+0x2c8>)
 8009e8c:	edd3 7a00 	vldr	s15, [r3]
 8009e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e98:	d4da      	bmi.n	8009e50 <SlalomLeft+0x210>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009e9a:	4b16      	ldr	r3, [pc, #88]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009ea2:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <SlalomLeft+0x2b0>)
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009eaa:	4b10      	ldr	r3, [pc, #64]	; (8009eec <SlalomLeft+0x2ac>)
 8009eac:	f04f 0200 	mov.w	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009eb2:	4b16      	ldr	r3, [pc, #88]	; (8009f0c <SlalomLeft+0x2cc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a16      	ldr	r2, [pc, #88]	; (8009f10 <SlalomLeft+0x2d0>)
 8009eb8:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009ec6:	e03a      	b.n	8009f3e <SlalomLeft+0x2fe>
 8009ec8:	54442d18 	.word	0x54442d18
 8009ecc:	400921fb 	.word	0x400921fb
 8009ed0:	23ca2666 	.word	0x23ca2666
 8009ed4:	3f509268 	.word	0x3f509268
 8009ed8:	20000000 	.word	0x20000000
 8009edc:	20010168 	.word	0x20010168
 8009ee0:	2000ff30 	.word	0x2000ff30
 8009ee4:	40668000 	.word	0x40668000
 8009ee8:	2000ff18 	.word	0x2000ff18
 8009eec:	2000fef8 	.word	0x2000fef8
 8009ef0:	2000fc30 	.word	0x2000fc30
 8009ef4:	2000fc2c 	.word	0x2000fc2c
 8009ef8:	2000fee8 	.word	0x2000fee8
 8009efc:	2000ff58 	.word	0x2000ff58
 8009f00:	43480000 	.word	0x43480000
 8009f04:	437a0000 	.word	0x437a0000
 8009f08:	2000fc24 	.word	0x2000fc24
 8009f0c:	20010598 	.word	0x20010598
 8009f10:	2001059c 	.word	0x2001059c
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009f14:	4b32      	ldr	r3, [pc, #200]	; (8009fe0 <SlalomLeft+0x3a0>)
 8009f16:	f04f 0200 	mov.w	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009f1c:	4a31      	ldr	r2, [pc, #196]	; (8009fe4 <SlalomLeft+0x3a4>)
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 8009f22:	4b31      	ldr	r3, [pc, #196]	; (8009fe8 <SlalomLeft+0x3a8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <SlalomLeft+0x2fe>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009f2a:	f001 facf 	bl	800b4cc <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009f2e:	2201      	movs	r2, #1
 8009f30:	2103      	movs	r1, #3
 8009f32:	2005      	movs	r0, #5
 8009f34:	f001 fc3c 	bl	800b7b0 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009f38:	4b2b      	ldr	r3, [pc, #172]	; (8009fe8 <SlalomLeft+0x3a8>)
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009f3e:	68b8      	ldr	r0, [r7, #8]
 8009f40:	f7fe fa28 	bl	8008394 <__aeabi_i2d>
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f50:	ee17 0a90 	vmov	r0, s15
 8009f54:	f7fe fa30 	bl	80083b8 <__aeabi_f2d>
 8009f58:	a31d      	add	r3, pc, #116	; (adr r3, 8009fd0 <SlalomLeft+0x390>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f7fe fbad 	bl	80086bc <__aeabi_ddiv>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7fe f8c7 	bl	80080fc <__adddf3>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	4625      	mov	r5, r4
 8009f74:	461c      	mov	r4, r3
 8009f76:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <SlalomLeft+0x3ac>)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	4b1c      	ldr	r3, [pc, #112]	; (8009fec <SlalomLeft+0x3ac>)
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	4413      	add	r3, r2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe fa07 	bl	8008394 <__aeabi_i2d>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7fe fcfb 	bl	8008988 <__aeabi_dcmpgt>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1bd      	bne.n	8009f14 <SlalomLeft+0x2d4>
			}
	}
	TargetAngle += -90*M_PI/180;
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <SlalomLeft+0x3b0>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fe fa0b 	bl	80083b8 <__aeabi_f2d>
 8009fa2:	a30d      	add	r3, pc, #52	; (adr r3, 8009fd8 <SlalomLeft+0x398>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7fe f8a6 	bl	80080f8 <__aeabi_dsub>
 8009fac:	4603      	mov	r3, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	f7fe fd50 	bl	8008a58 <__aeabi_d2f>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <SlalomLeft+0x3b0>)
 8009fbc:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	; (8009fec <SlalomLeft+0x3ac>)
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	4a0c      	ldr	r2, [pc, #48]	; (8009ff4 <SlalomLeft+0x3b4>)
 8009fc4:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009fc6:	bf00      	nop
 8009fc8:	3728      	adds	r7, #40	; 0x28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	23ca2666 	.word	0x23ca2666
 8009fd4:	3f509268 	.word	0x3f509268
 8009fd8:	54442d18 	.word	0x54442d18
 8009fdc:	3ff921fb 	.word	0x3ff921fb
 8009fe0:	2000fef8 	.word	0x2000fef8
 8009fe4:	2000fee8 	.word	0x2000fee8
 8009fe8:	2001059c 	.word	0x2001059c
 8009fec:	2000ff18 	.word	0x2000ff18
 8009ff0:	2000ff14 	.word	0x2000ff14
 8009ff4:	2000ff4c 	.word	0x2000ff4c

08009ff8 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 8009ff8:	b5b0      	push	{r4, r5, r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	ed87 0a01 	vstr	s0, [r7, #4]
 800a002:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = accel;
 800a006:	4b56      	ldr	r3, [pc, #344]	; (800a160 <Accel+0x168>)
 800a008:	2200      	movs	r2, #0
 800a00a:	711a      	strb	r2, [r3, #4]
	ControlWall();
 800a00c:	f7ff f88c 	bl	8009128 <ControlWall>
	TargetAngularV = 0;
 800a010:	4b54      	ldr	r3, [pc, #336]	; (800a164 <Accel+0x16c>)
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 800a018:	f04f 0300 	mov.w	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800a01e:	4b52      	ldr	r3, [pc, #328]	; (800a168 <Accel+0x170>)
 800a020:	edd3 7a02 	vldr	s15, [r3, #8]
 800a024:	ed97 7a00 	vldr	s14, [r7]
 800a028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a02c:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800a030:	edd7 7a03 	vldr	s15, [r7, #12]
 800a034:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a16c <Accel+0x174>
 800a038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a03c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a040:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a044:	edd7 7a01 	vldr	s15, [r7, #4]
 800a048:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a050:	4b47      	ldr	r3, [pc, #284]	; (800a170 <Accel+0x178>)
 800a052:	edc3 7a00 	vstr	s15, [r3]
	WallWarn();
 800a056:	f7ff f85b 	bl	8009110 <WallWarn>
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800a05a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a05e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a062:	ee17 0a90 	vmov	r0, s15
 800a066:	f7fe f9a7 	bl	80083b8 <__aeabi_f2d>
 800a06a:	a339      	add	r3, pc, #228	; (adr r3, 800a150 <Accel+0x158>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7fe fb24 	bl	80086bc <__aeabi_ddiv>
 800a074:	4603      	mov	r3, r0
 800a076:	460c      	mov	r4, r1
 800a078:	4618      	mov	r0, r3
 800a07a:	4621      	mov	r1, r4
 800a07c:	f7fe fca4 	bl	80089c8 <__aeabi_d2iz>
 800a080:	4603      	mov	r3, r0
 800a082:	60bb      	str	r3, [r7, #8]

	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	Calc = SearchOrFast;//Fastでは1を代入。
 800a084:	4b3b      	ldr	r3, [pc, #236]	; (800a174 <Accel+0x17c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a3b      	ldr	r2, [pc, #236]	; (800a178 <Accel+0x180>)
 800a08a:	6013      	str	r3, [r2, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a08c:	e035      	b.n	800a0fa <Accel+0x102>
	{
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a08e:	4b3b      	ldr	r3, [pc, #236]	; (800a17c <Accel+0x184>)
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe f97e 	bl	8008394 <__aeabi_i2d>
 800a098:	4604      	mov	r4, r0
 800a09a:	460d      	mov	r5, r1
 800a09c:	68b8      	ldr	r0, [r7, #8]
 800a09e:	f7fe f979 	bl	8008394 <__aeabi_i2d>
 800a0a2:	a32d      	add	r3, pc, #180	; (adr r3, 800a158 <Accel+0x160>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f7fe f9de 	bl	8008468 <__aeabi_dmul>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7fe f822 	bl	80080fc <__adddf3>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	4625      	mov	r5, r4
 800a0be:	461c      	mov	r4, r3
 800a0c0:	4b2f      	ldr	r3, [pc, #188]	; (800a180 <Accel+0x188>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe f965 	bl	8008394 <__aeabi_i2d>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7fe fc3b 	bl	800894c <__aeabi_dcmplt>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d100      	bne.n	800a0de <Accel+0xe6>
 800a0dc:	e00d      	b.n	800a0fa <Accel+0x102>
 800a0de:	4b26      	ldr	r3, [pc, #152]	; (800a178 <Accel+0x180>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <Accel+0x102>
		{
			wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a0e6:	f001 f9f1 	bl	800b4cc <wall_set>
			//計算して
			make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	2103      	movs	r1, #3
 800a0ee:	2005      	movs	r0, #5
 800a0f0:	f001 fb5e 	bl	800b7b0 <make_map>
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
 800a0f4:	4b20      	ldr	r3, [pc, #128]	; (800a178 <Accel+0x180>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a0fa:	4b20      	ldr	r3, [pc, #128]	; (800a17c <Accel+0x184>)
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	441a      	add	r2, r3
 800a102:	4b1f      	ldr	r3, [pc, #124]	; (800a180 <Accel+0x188>)
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	429a      	cmp	r2, r3
 800a108:	dcc1      	bgt.n	800a08e <Accel+0x96>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 800a10a:	4b19      	ldr	r3, [pc, #100]	; (800a170 <Accel+0x178>)
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
	//壁読んで、

	KeepPulse[BODY] += target_pulse;
 800a112:	4b1a      	ldr	r3, [pc, #104]	; (800a17c <Accel+0x184>)
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4413      	add	r3, r2
 800a11a:	4a18      	ldr	r2, [pc, #96]	; (800a17c <Accel+0x184>)
 800a11c:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a11e:	4b17      	ldr	r3, [pc, #92]	; (800a17c <Accel+0x184>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	0fd9      	lsrs	r1, r3, #31
 800a126:	440b      	add	r3, r1
 800a128:	105b      	asrs	r3, r3, #1
 800a12a:	4413      	add	r3, r2
 800a12c:	4a13      	ldr	r2, [pc, #76]	; (800a17c <Accel+0x184>)
 800a12e:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a130:	4b12      	ldr	r3, [pc, #72]	; (800a17c <Accel+0x184>)
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	0fd9      	lsrs	r1, r3, #31
 800a138:	440b      	add	r3, r1
 800a13a:	105b      	asrs	r3, r3, #1
 800a13c:	4413      	add	r3, r2
 800a13e:	4a0f      	ldr	r2, [pc, #60]	; (800a17c <Accel+0x184>)
 800a140:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bdb0      	pop	{r4, r5, r7, pc}
 800a14a:	bf00      	nop
 800a14c:	f3af 8000 	nop.w
 800a150:	23ca2666 	.word	0x23ca2666
 800a154:	3f509268 	.word	0x3f509268
 800a158:	9999999a 	.word	0x9999999a
 800a15c:	3fe99999 	.word	0x3fe99999
 800a160:	20000000 	.word	0x20000000
 800a164:	2000fef8 	.word	0x2000fef8
 800a168:	2000ff24 	.word	0x2000ff24
 800a16c:	3a83126f 	.word	0x3a83126f
 800a170:	2000fc28 	.word	0x2000fc28
 800a174:	20010598 	.word	0x20010598
 800a178:	2001059c 	.word	0x2001059c
 800a17c:	2000ff4c 	.word	0x2000ff4c
 800a180:	2000ff18 	.word	0x2000ff18
 800a184:	00000000 	.word	0x00000000

0800a188 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 800a188:	b5b0      	push	{r4, r5, r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a192:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = decel;
 800a196:	4b60      	ldr	r3, [pc, #384]	; (800a318 <Decel+0x190>)
 800a198:	2201      	movs	r2, #1
 800a19a:	711a      	strb	r2, [r3, #4]
	//int keep_pulse = TotalPulse[BODY];
	float down_speed=0;
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed;
 800a1a2:	4b5e      	ldr	r3, [pc, #376]	; (800a31c <Decel+0x194>)
 800a1a4:	ed93 7a02 	vldr	s14, [r3, #8]
 800a1a8:	edd7 7a00 	vldr	s15, [r7]
 800a1ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b0:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800a1b4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1b8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800a320 <Decel+0x198>
 800a1bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a1c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a1c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a1d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d4:	eef1 7a67 	vneg.f32	s15, s15
 800a1d8:	4b52      	ldr	r3, [pc, #328]	; (800a324 <Decel+0x19c>)
 800a1da:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	WallSafe();
 800a1de:	f7fe ff8b 	bl	80090f8 <WallSafe>
	ControlWall();
 800a1e2:	f7fe ffa1 	bl	8009128 <ControlWall>
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800a1e6:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1ee:	ee17 0a90 	vmov	r0, s15
 800a1f2:	f7fe f8e1 	bl	80083b8 <__aeabi_f2d>
 800a1f6:	a344      	add	r3, pc, #272	; (adr r3, 800a308 <Decel+0x180>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7fe fa5e 	bl	80086bc <__aeabi_ddiv>
 800a200:	4603      	mov	r3, r0
 800a202:	460c      	mov	r4, r1
 800a204:	4618      	mov	r0, r3
 800a206:	4621      	mov	r1, r4
 800a208:	f7fe fbde 	bl	80089c8 <__aeabi_d2iz>
 800a20c:	4603      	mov	r3, r0
 800a20e:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while(/* (	(Photo[FR]+Photo[FL]) < 3800) && */( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a210:	e052      	b.n	800a2b8 <Decel+0x130>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= 0)
 800a212:	4b45      	ldr	r3, [pc, #276]	; (800a328 <Decel+0x1a0>)
 800a214:	edd3 7a02 	vldr	s15, [r3, #8]
 800a218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a220:	d810      	bhi.n	800a244 <Decel+0xbc>
		{
			TargetVelocity[BODY] = 0;
 800a222:	4b41      	ldr	r3, [pc, #260]	; (800a328 <Decel+0x1a0>)
 800a224:	f04f 0200 	mov.w	r2, #0
 800a228:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 800a22a:	4b3e      	ldr	r3, [pc, #248]	; (800a324 <Decel+0x19c>)
 800a22c:	f04f 0200 	mov.w	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800a232:	4b3e      	ldr	r3, [pc, #248]	; (800a32c <Decel+0x1a4>)
 800a234:	f04f 0200 	mov.w	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800a23a:	4b3d      	ldr	r3, [pc, #244]	; (800a330 <Decel+0x1a8>)
 800a23c:	f04f 0200 	mov.w	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
			break;
 800a242:	e041      	b.n	800a2c8 <Decel+0x140>
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800a244:	4b3b      	ldr	r3, [pc, #236]	; (800a334 <Decel+0x1ac>)
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe f8a3 	bl	8008394 <__aeabi_i2d>
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	68b8      	ldr	r0, [r7, #8]
 800a254:	f7fe f89e 	bl	8008394 <__aeabi_i2d>
 800a258:	a32d      	add	r3, pc, #180	; (adr r3, 800a310 <Decel+0x188>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7fe f903 	bl	8008468 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7fd ff47 	bl	80080fc <__adddf3>
 800a26e:	4603      	mov	r3, r0
 800a270:	460c      	mov	r4, r1
 800a272:	4625      	mov	r5, r4
 800a274:	461c      	mov	r4, r3
 800a276:	4b30      	ldr	r3, [pc, #192]	; (800a338 <Decel+0x1b0>)
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe f88a 	bl	8008394 <__aeabi_i2d>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f7fe fb60 	bl	800894c <__aeabi_dcmplt>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d100      	bne.n	800a294 <Decel+0x10c>
 800a292:	e011      	b.n	800a2b8 <Decel+0x130>
		{
			WallWarn();
 800a294:	f7fe ff3c 	bl	8009110 <WallWarn>
			//ControlWall();
			PIDChangeFlag(L_WALL_PID, 0);
 800a298:	2100      	movs	r1, #0
 800a29a:	2002      	movs	r0, #2
 800a29c:	f005 fca4 	bl	800fbe8 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	2003      	movs	r0, #3
 800a2a4:	f005 fca0 	bl	800fbe8 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	f005 fc9c 	bl	800fbe8 <PIDChangeFlag>
			PIDChangeFlag( A_VELO_PID , 1);
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	f005 fc98 	bl	800fbe8 <PIDChangeFlag>
	while(/* (	(Photo[FR]+Photo[FL]) < 3800) && */( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a2b8:	4b1e      	ldr	r3, [pc, #120]	; (800a334 <Decel+0x1ac>)
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	441a      	add	r2, r3
 800a2c0:	4b1d      	ldr	r3, [pc, #116]	; (800a338 <Decel+0x1b0>)
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	dca4      	bgt.n	800a212 <Decel+0x8a>

		}


	}
	WaitStopAndReset();
 800a2c8:	f7ff f846 	bl	8009358 <WaitStopAndReset>
	KeepPulse[BODY] += target_pulse;
 800a2cc:	4b19      	ldr	r3, [pc, #100]	; (800a334 <Decel+0x1ac>)
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	4a17      	ldr	r2, [pc, #92]	; (800a334 <Decel+0x1ac>)
 800a2d6:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a2d8:	4b16      	ldr	r3, [pc, #88]	; (800a334 <Decel+0x1ac>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	0fd9      	lsrs	r1, r3, #31
 800a2e0:	440b      	add	r3, r1
 800a2e2:	105b      	asrs	r3, r3, #1
 800a2e4:	4413      	add	r3, r2
 800a2e6:	4a13      	ldr	r2, [pc, #76]	; (800a334 <Decel+0x1ac>)
 800a2e8:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a2ea:	4b12      	ldr	r3, [pc, #72]	; (800a334 <Decel+0x1ac>)
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	0fd9      	lsrs	r1, r3, #31
 800a2f2:	440b      	add	r3, r1
 800a2f4:	105b      	asrs	r3, r3, #1
 800a2f6:	4413      	add	r3, r2
 800a2f8:	4a0e      	ldr	r2, [pc, #56]	; (800a334 <Decel+0x1ac>)
 800a2fa:	6053      	str	r3, [r2, #4]


}
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bdb0      	pop	{r4, r5, r7, pc}
 800a304:	f3af 8000 	nop.w
 800a308:	23ca2666 	.word	0x23ca2666
 800a30c:	3f509268 	.word	0x3f509268
 800a310:	cccccccd 	.word	0xcccccccd
 800a314:	3fe4cccc 	.word	0x3fe4cccc
 800a318:	20000000 	.word	0x20000000
 800a31c:	2000ff24 	.word	0x2000ff24
 800a320:	3a83126f 	.word	0x3a83126f
 800a324:	2000fc28 	.word	0x2000fc28
 800a328:	2000fee8 	.word	0x2000fee8
 800a32c:	2000fef8 	.word	0x2000fef8
 800a330:	2000fc2c 	.word	0x2000fc2c
 800a334:	2000ff4c 	.word	0x2000ff4c
 800a338:	2000ff18 	.word	0x2000ff18
 800a33c:	00000000 	.word	0x00000000

0800a340 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 800a340:	b590      	push	{r4, r7, lr}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe f821 	bl	8008394 <__aeabi_i2d>
 800a352:	a32b      	add	r3, pc, #172	; (adr r3, 800a400 <Calib+0xc0>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7fe f9b0 	bl	80086bc <__aeabi_ddiv>
 800a35c:	4603      	mov	r3, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4618      	mov	r0, r3
 800a362:	4621      	mov	r1, r4
 800a364:	f7fe fb30 	bl	80089c8 <__aeabi_d2iz>
 800a368:	4603      	mov	r3, r0
 800a36a:	60fb      	str	r3, [r7, #12]
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dd15      	ble.n	800a39e <Calib+0x5e>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a372:	e006      	b.n	800a382 <Calib+0x42>
		{
			Acceleration = 0;
 800a374:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <Calib+0xa8>)
 800a376:	f04f 0200 	mov.w	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = 70;
 800a37c:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <Calib+0xac>)
 800a37e:	4a1c      	ldr	r2, [pc, #112]	; (800a3f0 <Calib+0xb0>)
 800a380:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a382:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <Calib+0xb4>)
 800a384:	689a      	ldr	r2, [r3, #8]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	441a      	add	r2, r3
 800a38a:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <Calib+0xb8>)
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	429a      	cmp	r2, r3
 800a390:	dcf0      	bgt.n	800a374 <Calib+0x34>
		}
		KeepPulse[BODY] += target_pulse;
 800a392:	4b18      	ldr	r3, [pc, #96]	; (800a3f4 <Calib+0xb4>)
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4413      	add	r3, r2
 800a39a:	4a16      	ldr	r2, [pc, #88]	; (800a3f4 <Calib+0xb4>)
 800a39c:	6093      	str	r3, [r2, #8]

	}
	if(target_pulse < 0 )
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	da15      	bge.n	800a3d0 <Calib+0x90>
	{
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a3a4:	e006      	b.n	800a3b4 <Calib+0x74>
		{
			Acceleration = 0;
 800a3a6:	4b10      	ldr	r3, [pc, #64]	; (800a3e8 <Calib+0xa8>)
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = -100;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <Calib+0xac>)
 800a3b0:	4a12      	ldr	r2, [pc, #72]	; (800a3fc <Calib+0xbc>)
 800a3b2:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a3b4:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <Calib+0xb4>)
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	441a      	add	r2, r3
 800a3bc:	4b0e      	ldr	r3, [pc, #56]	; (800a3f8 <Calib+0xb8>)
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	dbf0      	blt.n	800a3a6 <Calib+0x66>
		}
		KeepPulse[BODY] += target_pulse;
 800a3c4:	4b0b      	ldr	r3, [pc, #44]	; (800a3f4 <Calib+0xb4>)
 800a3c6:	689a      	ldr	r2, [r3, #8]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <Calib+0xb4>)
 800a3ce:	6093      	str	r3, [r2, #8]
	}
	TargetVelocity[BODY] = 0;
 800a3d0:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <Calib+0xac>)
 800a3d2:	f04f 0200 	mov.w	r2, #0
 800a3d6:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <Calib+0xa8>)
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
}
 800a3e0:	bf00      	nop
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd90      	pop	{r4, r7, pc}
 800a3e8:	2000fc28 	.word	0x2000fc28
 800a3ec:	2000fee8 	.word	0x2000fee8
 800a3f0:	428c0000 	.word	0x428c0000
 800a3f4:	2000ff4c 	.word	0x2000ff4c
 800a3f8:	2000ff18 	.word	0x2000ff18
 800a3fc:	c2c80000 	.word	0xc2c80000
 800a400:	23ca2666 	.word	0x23ca2666
 800a404:	3f509268 	.word	0x3f509268

0800a408 <Compensate>:
void Compensate()
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0
	//誤差補正する
	//Pos.を考え中
	Pos.Act = compensate;
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <Compensate+0x18>)
 800a40e:	2206      	movs	r2, #6
 800a410:	711a      	strb	r2, [r3, #4]
	TargetPhoto[FL];

#else
	//バック補正
	//ControlWall();
	Calib(-50);
 800a412:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800a416:	f7ff ff93 	bl	800a340 <Calib>

//	Accel(7,-70);
//	Decel(7,0);
#endif

}
 800a41a:	bf00      	nop
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000000 	.word	0x20000000

0800a424 <AjustCenter>:
float AjustCenter(){
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
	//x,y,lrfb
	PIDChangeFlag(L_WALL_PID, 0);
 800a42a:	2100      	movs	r1, #0
 800a42c:	2002      	movs	r0, #2
 800a42e:	f005 fbdb 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800a432:	2100      	movs	r1, #0
 800a434:	2003      	movs	r0, #3
 800a436:	f005 fbd7 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800a43a:	2100      	movs	r1, #0
 800a43c:	2001      	movs	r0, #1
 800a43e:	f005 fbd3 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 800a442:	2100      	movs	r1, #0
 800a444:	2000      	movs	r0, #0
 800a446:	f005 fbcf 	bl	800fbe8 <PIDChangeFlag>

	int wall_ctrl = GetWallCtrlDirection();
 800a44a:	f7fe fcf1 	bl	8008e30 <GetWallCtrlDirection>
 800a44e:	6078      	str	r0, [r7, #4]
	PIDChangeFlag(wall_ctrl, 1);
 800a450:	2101      	movs	r1, #1
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f005 fbc8 	bl	800fbe8 <PIDChangeFlag>

	switch(Pos.Car%4)
 800a458:	4b7a      	ldr	r3, [pc, #488]	; (800a644 <AjustCenter+0x220>)
 800a45a:	78db      	ldrb	r3, [r3, #3]
 800a45c:	f003 0303 	and.w	r3, r3, #3
 800a460:	2b03      	cmp	r3, #3
 800a462:	f200 80d2 	bhi.w	800a60a <AjustCenter+0x1e6>
 800a466:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <AjustCenter+0x48>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a4e3 	.word	0x0800a4e3
 800a474:	0800a547 	.word	0x0800a547
 800a478:	0800a5a9 	.word	0x0800a5a9
	{
	case north: //use west or north wall
			if (Wall[Pos.X][Pos.Y].north == wall) //前に壁があれば前で調整
 800a47c:	4b71      	ldr	r3, [pc, #452]	; (800a644 <AjustCenter+0x220>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	4618      	mov	r0, r3
 800a482:	4b70      	ldr	r3, [pc, #448]	; (800a644 <AjustCenter+0x220>)
 800a484:	785b      	ldrb	r3, [r3, #1]
 800a486:	4619      	mov	r1, r3
 800a488:	4a6f      	ldr	r2, [pc, #444]	; (800a648 <AjustCenter+0x224>)
 800a48a:	0103      	lsls	r3, r0, #4
 800a48c:	440b      	add	r3, r1
 800a48e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a492:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b01      	cmp	r3, #1
 800a49a:	f000 80b8 	beq.w	800a60e <AjustCenter+0x1ea>
			{
				//前壁調整
					//前壁との距離と前二つの差分、左右の壁とのバランスが安定するまで制御ループ

			}
			else if (Wall[Pos.X][Pos.Y].south == wall) //後ろに壁があるときはバック
 800a49e:	4b69      	ldr	r3, [pc, #420]	; (800a644 <AjustCenter+0x220>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	4b67      	ldr	r3, [pc, #412]	; (800a644 <AjustCenter+0x220>)
 800a4a6:	785b      	ldrb	r3, [r3, #1]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4a67      	ldr	r2, [pc, #412]	; (800a648 <AjustCenter+0x224>)
 800a4ac:	0103      	lsls	r3, r0, #4
 800a4ae:	440b      	add	r3, r1
 800a4b0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a4b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	f040 80a7 	bne.w	800a60e <AjustCenter+0x1ea>
			{
				Compensate();	//後ろ壁調整
 800a4c0:	f7ff ffa2 	bl	800a408 <Compensate>

				Pid[wall_ctrl].flag = 0;
 800a4c4:	4a61      	ldr	r2, [pc, #388]	; (800a64c <AjustCenter+0x228>)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	212c      	movs	r1, #44	; 0x2c
 800a4ca:	fb01 f303 	mul.w	r3, r1, r3
 800a4ce:	4413      	add	r3, r2
 800a4d0:	3328      	adds	r3, #40	; 0x28
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a4d6:	4b5e      	ldr	r3, [pc, #376]	; (800a650 <AjustCenter+0x22c>)
 800a4d8:	f04f 0200 	mov.w	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a4de:	4b5d      	ldr	r3, [pc, #372]	; (800a654 <AjustCenter+0x230>)
 800a4e0:	e0a8      	b.n	800a634 <AjustCenter+0x210>
			}
		break;
	case east:
			if (Wall[Pos.X][Pos.Y].east == wall) //前に壁があれば前で調整
 800a4e2:	4b58      	ldr	r3, [pc, #352]	; (800a644 <AjustCenter+0x220>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	4b56      	ldr	r3, [pc, #344]	; (800a644 <AjustCenter+0x220>)
 800a4ea:	785b      	ldrb	r3, [r3, #1]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4a56      	ldr	r2, [pc, #344]	; (800a648 <AjustCenter+0x224>)
 800a4f0:	0103      	lsls	r3, r0, #4
 800a4f2:	440b      	add	r3, r1
 800a4f4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a4f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	f000 8087 	beq.w	800a612 <AjustCenter+0x1ee>
			{
				//前壁調整
			}
			else if (Wall[Pos.X][Pos.Y].west == wall) //後ろに壁があるときはバック
 800a504:	4b4f      	ldr	r3, [pc, #316]	; (800a644 <AjustCenter+0x220>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	4618      	mov	r0, r3
 800a50a:	4b4e      	ldr	r3, [pc, #312]	; (800a644 <AjustCenter+0x220>)
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	4619      	mov	r1, r3
 800a510:	4a4d      	ldr	r2, [pc, #308]	; (800a648 <AjustCenter+0x224>)
 800a512:	0103      	lsls	r3, r0, #4
 800a514:	440b      	add	r3, r1
 800a516:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a51a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	2b01      	cmp	r3, #1
 800a522:	d176      	bne.n	800a612 <AjustCenter+0x1ee>
			{
				Compensate();//後ろ壁調整
 800a524:	f7ff ff70 	bl	800a408 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a528:	4a48      	ldr	r2, [pc, #288]	; (800a64c <AjustCenter+0x228>)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	212c      	movs	r1, #44	; 0x2c
 800a52e:	fb01 f303 	mul.w	r3, r1, r3
 800a532:	4413      	add	r3, r2
 800a534:	3328      	adds	r3, #40	; 0x28
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a53a:	4b45      	ldr	r3, [pc, #276]	; (800a650 <AjustCenter+0x22c>)
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a542:	4b44      	ldr	r3, [pc, #272]	; (800a654 <AjustCenter+0x230>)
 800a544:	e076      	b.n	800a634 <AjustCenter+0x210>
			}
		break;
	case south:
			if (Wall[Pos.X][Pos.Y].south == wall) //前に壁があれば前で調整
 800a546:	4b3f      	ldr	r3, [pc, #252]	; (800a644 <AjustCenter+0x220>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	4b3d      	ldr	r3, [pc, #244]	; (800a644 <AjustCenter+0x220>)
 800a54e:	785b      	ldrb	r3, [r3, #1]
 800a550:	4619      	mov	r1, r3
 800a552:	4a3d      	ldr	r2, [pc, #244]	; (800a648 <AjustCenter+0x224>)
 800a554:	0103      	lsls	r3, r0, #4
 800a556:	440b      	add	r3, r1
 800a558:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a55c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b01      	cmp	r3, #1
 800a564:	d057      	beq.n	800a616 <AjustCenter+0x1f2>
			{
				//前壁調整
			}
			else if (Wall[Pos.X][Pos.Y].north == wall) //後ろに壁があるときはバック
 800a566:	4b37      	ldr	r3, [pc, #220]	; (800a644 <AjustCenter+0x220>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	4b35      	ldr	r3, [pc, #212]	; (800a644 <AjustCenter+0x220>)
 800a56e:	785b      	ldrb	r3, [r3, #1]
 800a570:	4619      	mov	r1, r3
 800a572:	4a35      	ldr	r2, [pc, #212]	; (800a648 <AjustCenter+0x224>)
 800a574:	0103      	lsls	r3, r0, #4
 800a576:	440b      	add	r3, r1
 800a578:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a57c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b01      	cmp	r3, #1
 800a584:	d147      	bne.n	800a616 <AjustCenter+0x1f2>
			{
				Compensate();//後ろ壁調整
 800a586:	f7ff ff3f 	bl	800a408 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a58a:	4a30      	ldr	r2, [pc, #192]	; (800a64c <AjustCenter+0x228>)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	212c      	movs	r1, #44	; 0x2c
 800a590:	fb01 f303 	mul.w	r3, r1, r3
 800a594:	4413      	add	r3, r2
 800a596:	3328      	adds	r3, #40	; 0x28
 800a598:	2200      	movs	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a59c:	4b2c      	ldr	r3, [pc, #176]	; (800a650 <AjustCenter+0x22c>)
 800a59e:	f04f 0200 	mov.w	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a5a4:	4b2b      	ldr	r3, [pc, #172]	; (800a654 <AjustCenter+0x230>)
 800a5a6:	e045      	b.n	800a634 <AjustCenter+0x210>
			}
		break;
	case west:
			if (Wall[Pos.X][Pos.Y].west == wall) //前に壁があれば前で調整
 800a5a8:	4b26      	ldr	r3, [pc, #152]	; (800a644 <AjustCenter+0x220>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	4b25      	ldr	r3, [pc, #148]	; (800a644 <AjustCenter+0x220>)
 800a5b0:	785b      	ldrb	r3, [r3, #1]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4a24      	ldr	r2, [pc, #144]	; (800a648 <AjustCenter+0x224>)
 800a5b6:	0103      	lsls	r3, r0, #4
 800a5b8:	440b      	add	r3, r1
 800a5ba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a5be:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d020      	beq.n	800a60a <AjustCenter+0x1e6>
			{
				//前壁調整
			}
			else if (Wall[Pos.X][Pos.Y].east == wall) //後ろに壁があるときはバック
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <AjustCenter+0x220>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	4b1d      	ldr	r3, [pc, #116]	; (800a644 <AjustCenter+0x220>)
 800a5d0:	785b      	ldrb	r3, [r3, #1]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4a1c      	ldr	r2, [pc, #112]	; (800a648 <AjustCenter+0x224>)
 800a5d6:	0103      	lsls	r3, r0, #4
 800a5d8:	440b      	add	r3, r1
 800a5da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a5de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d110      	bne.n	800a60a <AjustCenter+0x1e6>
			{
				Compensate();//後ろ壁調整
 800a5e8:	f7ff ff0e 	bl	800a408 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a5ec:	4a17      	ldr	r2, [pc, #92]	; (800a64c <AjustCenter+0x228>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	212c      	movs	r1, #44	; 0x2c
 800a5f2:	fb01 f303 	mul.w	r3, r1, r3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3328      	adds	r3, #40	; 0x28
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <AjustCenter+0x22c>)
 800a600:	f04f 0200 	mov.w	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a606:	4b13      	ldr	r3, [pc, #76]	; (800a654 <AjustCenter+0x230>)
 800a608:	e014      	b.n	800a634 <AjustCenter+0x210>
			}
	default:
		break;
 800a60a:	bf00      	nop
 800a60c:	e004      	b.n	800a618 <AjustCenter+0x1f4>
		break;
 800a60e:	bf00      	nop
 800a610:	e002      	b.n	800a618 <AjustCenter+0x1f4>
		break;
 800a612:	bf00      	nop
 800a614:	e000      	b.n	800a618 <AjustCenter+0x1f4>
		break;
 800a616:	bf00      	nop
	}
	Pid[wall_ctrl].flag = 0;
 800a618:	4a0c      	ldr	r2, [pc, #48]	; (800a64c <AjustCenter+0x228>)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	212c      	movs	r1, #44	; 0x2c
 800a61e:	fb01 f303 	mul.w	r3, r1, r3
 800a622:	4413      	add	r3, r2
 800a624:	3328      	adds	r3, #40	; 0x28
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <AjustCenter+0x22c>)
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
	return 45;
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <AjustCenter+0x234>)
 800a634:	ee07 3a90 	vmov	s15, r3
}
 800a638:	eeb0 0a67 	vmov.f32	s0, s15
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000000 	.word	0x20000000
 800a648:	20010398 	.word	0x20010398
 800a64c:	2000fd18 	.word	0x2000fd18
 800a650:	2000fef8 	.word	0x2000fef8
 800a654:	42760000 	.word	0x42760000
 800a658:	42340000 	.word	0x42340000
 800a65c:	00000000 	.word	0x00000000

0800a660 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 800a660:	b5b0      	push	{r4, r5, r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	ed87 0a03 	vstr	s0, [r7, #12]
 800a66a:	edc7 0a02 	vstr	s1, [r7, #8]
 800a66e:	ed87 1a01 	vstr	s2, [r7, #4]
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 800a672:	edd7 7a03 	vldr	s15, [r7, #12]
 800a676:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a67a:	ee17 0a90 	vmov	r0, s15
 800a67e:	f7fd fe9b 	bl	80083b8 <__aeabi_f2d>
 800a682:	a377      	add	r3, pc, #476	; (adr r3, 800a860 <GoStraight+0x200>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7fe f818 	bl	80086bc <__aeabi_ddiv>
 800a68c:	4603      	mov	r3, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	4618      	mov	r0, r3
 800a692:	4621      	mov	r1, r4
 800a694:	f7fe f998 	bl	80089c8 <__aeabi_d2iz>
 800a698:	4603      	mov	r3, r0
 800a69a:	617b      	str	r3, [r7, #20]

	if(accel != 0) //加速するとき
 800a69c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a6a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a8:	d022      	beq.n	800a6f0 <GoStraight+0x90>
	{
		WallWarn();
 800a6aa:	f7fe fd31 	bl	8009110 <WallWarn>
		ControlWall();
 800a6ae:	f7fe fd3b 	bl	8009128 <ControlWall>
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800a6b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a6ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a6be:	ed97 7a02 	vldr	s14, [r7, #8]
 800a6c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a6c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6ca:	eef0 0a67 	vmov.f32	s1, s15
 800a6ce:	eeb0 0a66 	vmov.f32	s0, s13
 800a6d2:	f7ff fc91 	bl	8009ff8 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 800a6d6:	bf00      	nop
 800a6d8:	4b5b      	ldr	r3, [pc, #364]	; (800a848 <GoStraight+0x1e8>)
 800a6da:	689a      	ldr	r2, [r3, #8]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	0fd9      	lsrs	r1, r3, #31
 800a6e0:	440b      	add	r3, r1
 800a6e2:	105b      	asrs	r3, r3, #1
 800a6e4:	441a      	add	r2, r3
 800a6e6:	4b59      	ldr	r3, [pc, #356]	; (800a84c <GoStraight+0x1ec>)
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	dcf4      	bgt.n	800a6d8 <GoStraight+0x78>
 800a6ee:	e082      	b.n	800a7f6 <GoStraight+0x196>
	//		}
		}
	}
	else
	{
		Pos.Act = straight;
 800a6f0:	4b57      	ldr	r3, [pc, #348]	; (800a850 <GoStraight+0x1f0>)
 800a6f2:	2205      	movs	r2, #5
 800a6f4:	711a      	strb	r2, [r3, #4]
		WallSafe();
 800a6f6:	f7fe fcff 	bl	80090f8 <WallSafe>
		ControlWall();
 800a6fa:	f7fe fd15 	bl	8009128 <ControlWall>
		Calc = SearchOrFast;
 800a6fe:	4b55      	ldr	r3, [pc, #340]	; (800a854 <GoStraight+0x1f4>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a55      	ldr	r2, [pc, #340]	; (800a858 <GoStraight+0x1f8>)
 800a704:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a706:	e06e      	b.n	800a7e6 <GoStraight+0x186>
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 800a708:	4b4f      	ldr	r3, [pc, #316]	; (800a848 <GoStraight+0x1e8>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fd fe41 	bl	8008394 <__aeabi_i2d>
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	6978      	ldr	r0, [r7, #20]
 800a718:	f7fd fe3c 	bl	8008394 <__aeabi_i2d>
 800a71c:	a346      	add	r3, pc, #280	; (adr r3, 800a838 <GoStraight+0x1d8>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7fd fea1 	bl	8008468 <__aeabi_dmul>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	4620      	mov	r0, r4
 800a72c:	4629      	mov	r1, r5
 800a72e:	f7fd fce5 	bl	80080fc <__adddf3>
 800a732:	4603      	mov	r3, r0
 800a734:	460c      	mov	r4, r1
 800a736:	4625      	mov	r5, r4
 800a738:	461c      	mov	r4, r3
 800a73a:	4b44      	ldr	r3, [pc, #272]	; (800a84c <GoStraight+0x1ec>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fd fe28 	bl	8008394 <__aeabi_i2d>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4620      	mov	r0, r4
 800a74a:	4629      	mov	r1, r5
 800a74c:	f7fe f8fe 	bl	800894c <__aeabi_dcmplt>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d011      	beq.n	800a77a <GoStraight+0x11a>
			{
				WallWarn();
 800a756:	f7fe fcdb 	bl	8009110 <WallWarn>
				PIDChangeFlag(L_WALL_PID, 0);
 800a75a:	2100      	movs	r1, #0
 800a75c:	2002      	movs	r0, #2
 800a75e:	f005 fa43 	bl	800fbe8 <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800a762:	2100      	movs	r1, #0
 800a764:	2003      	movs	r0, #3
 800a766:	f005 fa3f 	bl	800fbe8 <PIDChangeFlag>
				PIDChangeFlag(D_WALL_PID, 0);
 800a76a:	2100      	movs	r1, #0
 800a76c:	2001      	movs	r0, #1
 800a76e:	f005 fa3b 	bl	800fbe8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800a772:	2101      	movs	r1, #1
 800a774:	2000      	movs	r0, #0
 800a776:	f005 fa37 	bl	800fbe8 <PIDChangeFlag>
			}

			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a77a:	4b33      	ldr	r3, [pc, #204]	; (800a848 <GoStraight+0x1e8>)
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fd fe08 	bl	8008394 <__aeabi_i2d>
 800a784:	4604      	mov	r4, r0
 800a786:	460d      	mov	r5, r1
 800a788:	6978      	ldr	r0, [r7, #20]
 800a78a:	f7fd fe03 	bl	8008394 <__aeabi_i2d>
 800a78e:	a32c      	add	r3, pc, #176	; (adr r3, 800a840 <GoStraight+0x1e0>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	f7fd fe68 	bl	8008468 <__aeabi_dmul>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4620      	mov	r0, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	f7fd fcac 	bl	80080fc <__adddf3>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	4625      	mov	r5, r4
 800a7aa:	461c      	mov	r4, r3
 800a7ac:	4b27      	ldr	r3, [pc, #156]	; (800a84c <GoStraight+0x1ec>)
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fd fdef 	bl	8008394 <__aeabi_i2d>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f7fe f8c5 	bl	800894c <__aeabi_dcmplt>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d100      	bne.n	800a7ca <GoStraight+0x16a>
 800a7c8:	e00d      	b.n	800a7e6 <GoStraight+0x186>
 800a7ca:	4b23      	ldr	r3, [pc, #140]	; (800a858 <GoStraight+0x1f8>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d109      	bne.n	800a7e6 <GoStraight+0x186>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a7d2:	f000 fe7b 	bl	800b4cc <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	2103      	movs	r1, #3
 800a7da:	2005      	movs	r0, #5
 800a7dc:	f000 ffe8 	bl	800b7b0 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 800a7e0:	4b1d      	ldr	r3, [pc, #116]	; (800a858 <GoStraight+0x1f8>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a7e6:	4b18      	ldr	r3, [pc, #96]	; (800a848 <GoStraight+0x1e8>)
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	441a      	add	r2, r3
 800a7ee:	4b17      	ldr	r3, [pc, #92]	; (800a84c <GoStraight+0x1ec>)
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	dc88      	bgt.n	800a708 <GoStraight+0xa8>
	//余分に加速した場合、あとの減速で速度を落としきれないことになっていたので、減速時にその時の速度を使うようにした。
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	int target_pulse = (int)(2*(move_distance/2)/MM_PER_PULSE);
//	int keep_pulse = TotalPulse[BODY];
	//WallWarn();
	Acceleration = 0;
 800a7f6:	4b19      	ldr	r3, [pc, #100]	; (800a85c <GoStraight+0x1fc>)
 800a7f8:	f04f 0200 	mov.w	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800a7fe:	4b12      	ldr	r3, [pc, #72]	; (800a848 <GoStraight+0x1e8>)
 800a800:	689a      	ldr	r2, [r3, #8]
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	4413      	add	r3, r2
 800a806:	4a10      	ldr	r2, [pc, #64]	; (800a848 <GoStraight+0x1e8>)
 800a808:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a80a:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <GoStraight+0x1e8>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	0fd9      	lsrs	r1, r3, #31
 800a812:	440b      	add	r3, r1
 800a814:	105b      	asrs	r3, r3, #1
 800a816:	4413      	add	r3, r2
 800a818:	4a0b      	ldr	r2, [pc, #44]	; (800a848 <GoStraight+0x1e8>)
 800a81a:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <GoStraight+0x1e8>)
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	0fd9      	lsrs	r1, r3, #31
 800a824:	440b      	add	r3, r1
 800a826:	105b      	asrs	r3, r3, #1
 800a828:	4413      	add	r3, r2
 800a82a:	4a07      	ldr	r2, [pc, #28]	; (800a848 <GoStraight+0x1e8>)
 800a82c:	6053      	str	r3, [r2, #4]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 800a82e:	bf00      	nop
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bdb0      	pop	{r4, r5, r7, pc}
 800a836:	bf00      	nop
 800a838:	9999999a 	.word	0x9999999a
 800a83c:	3fd99999 	.word	0x3fd99999
 800a840:	9999999a 	.word	0x9999999a
 800a844:	3fe99999 	.word	0x3fe99999
 800a848:	2000ff4c 	.word	0x2000ff4c
 800a84c:	2000ff18 	.word	0x2000ff18
 800a850:	20000000 	.word	0x20000000
 800a854:	20010598 	.word	0x20010598
 800a858:	2001059c 	.word	0x2001059c
 800a85c:	2000fc28 	.word	0x2000fc28
 800a860:	23ca2666 	.word	0x23ca2666
 800a864:	3f509268 	.word	0x3f509268

0800a868 <TurnRight>:
void TurnRight(char mode)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	2b53      	cmp	r3, #83	; 0x53
 800a876:	d023      	beq.n	800a8c0 <TurnRight+0x58>
 800a878:	2b54      	cmp	r3, #84	; 0x54
 800a87a:	d000      	beq.n	800a87e <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 800a87c:	e023      	b.n	800a8c6 <TurnRight+0x5e>
		Decel(45, 0);
 800a87e:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a8d0 <TurnRight+0x68>
 800a882:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a8d4 <TurnRight+0x6c>
 800a886:	f7ff fc7f 	bl	800a188 <Decel>
		Rotate( 90 , 2*M_PI);//1.5
 800a88a:	eddf 0a13 	vldr	s1, [pc, #76]	; 800a8d8 <TurnRight+0x70>
 800a88e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a8dc <TurnRight+0x74>
 800a892:	f7fe fda5 	bl	80093e0 <Rotate>
		float acc = AjustCenter();
 800a896:	f7ff fdc5 	bl	800a424 <AjustCenter>
 800a89a:	ed87 0a03 	vstr	s0, [r7, #12]
		HAL_Delay(100);
 800a89e:	2064      	movs	r0, #100	; 0x64
 800a8a0:	f005 fcc8 	bl	8010234 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f005 f99e 	bl	800fbe8 <PIDChangeFlag>
		Accel(acc, ExploreVelocity);
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <TurnRight+0x78>)
 800a8ae:	edd3 7a00 	vldr	s15, [r3]
 800a8b2:	eef0 0a67 	vmov.f32	s1, s15
 800a8b6:	ed97 0a03 	vldr	s0, [r7, #12]
 800a8ba:	f7ff fb9d 	bl	8009ff8 <Accel>
		break;
 800a8be:	e002      	b.n	800a8c6 <TurnRight+0x5e>
		SlalomRight();
 800a8c0:	f7fe ffd2 	bl	8009868 <SlalomRight>
		break;
 800a8c4:	bf00      	nop
	}


}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	00000000 	.word	0x00000000
 800a8d4:	42340000 	.word	0x42340000
 800a8d8:	40c90fdb 	.word	0x40c90fdb
 800a8dc:	42b40000 	.word	0x42b40000
 800a8e0:	20010168 	.word	0x20010168

0800a8e4 <TurnLeft>:
void TurnLeft(char mode)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	2b53      	cmp	r3, #83	; 0x53
 800a8f2:	d026      	beq.n	800a942 <TurnLeft+0x5e>
 800a8f4:	2b54      	cmp	r3, #84	; 0x54
 800a8f6:	d000      	beq.n	800a8fa <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 800a8f8:	e026      	b.n	800a948 <TurnLeft+0x64>
		Decel(45, 0);
 800a8fa:	eddf 0a15 	vldr	s1, [pc, #84]	; 800a950 <TurnLeft+0x6c>
 800a8fe:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a954 <TurnLeft+0x70>
 800a902:	f7ff fc41 	bl	800a188 <Decel>
		Rotate( 90 , -2*M_PI);//-1.5
 800a906:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a958 <TurnLeft+0x74>
 800a90a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a95c <TurnLeft+0x78>
 800a90e:	f7fe fd67 	bl	80093e0 <Rotate>
		HAL_Delay(100);
 800a912:	2064      	movs	r0, #100	; 0x64
 800a914:	f005 fc8e 	bl	8010234 <HAL_Delay>
		float acc = AjustCenter();
 800a918:	f7ff fd84 	bl	800a424 <AjustCenter>
 800a91c:	ed87 0a03 	vstr	s0, [r7, #12]
		HAL_Delay(100);
 800a920:	2064      	movs	r0, #100	; 0x64
 800a922:	f005 fc87 	bl	8010234 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a926:	2101      	movs	r1, #1
 800a928:	2000      	movs	r0, #0
 800a92a:	f005 f95d 	bl	800fbe8 <PIDChangeFlag>
		Accel(acc, ExploreVelocity);
 800a92e:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <TurnLeft+0x7c>)
 800a930:	edd3 7a00 	vldr	s15, [r3]
 800a934:	eef0 0a67 	vmov.f32	s1, s15
 800a938:	ed97 0a03 	vldr	s0, [r7, #12]
 800a93c:	f7ff fb5c 	bl	8009ff8 <Accel>
		break;
 800a940:	e002      	b.n	800a948 <TurnLeft+0x64>
		SlalomLeft();
 800a942:	f7ff f97d 	bl	8009c40 <SlalomLeft>
		break;
 800a946:	bf00      	nop
	}

}
 800a948:	bf00      	nop
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	00000000 	.word	0x00000000
 800a954:	42340000 	.word	0x42340000
 800a958:	c0c90fdb 	.word	0xc0c90fdb
 800a95c:	42b40000 	.word	0x42b40000
 800a960:	20010168 	.word	0x20010168

0800a964 <GoBack>:
void GoBack()
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800a96a:	eddf 0a10 	vldr	s1, [pc, #64]	; 800a9ac <GoBack+0x48>
 800a96e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a9b0 <GoBack+0x4c>
 800a972:	f7ff fc09 	bl	800a188 <Decel>
	//補正して
	//Compensate();
	//Calib();
	//回転して
#if 1
	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a976:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800a9b4 <GoBack+0x50>
 800a97a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800a9b8 <GoBack+0x54>
 800a97e:	f7fe fd2f 	bl	80093e0 <Rotate>
	RotateTest(180);
	AjustCenter();

#endif

	float acc = AjustCenter();
 800a982:	f7ff fd4f 	bl	800a424 <AjustCenter>
 800a986:	ed87 0a01 	vstr	s0, [r7, #4]
	//TargetAngle += 180*M_PI/180;
	//加速する
//	PIDReset(L_VELO_PID);
//	PIDReset(R_VELO_PID);
//	PIDReset(A_VELO_PID);
	HAL_Delay(200);
 800a98a:	20c8      	movs	r0, #200	; 0xc8
 800a98c:	f005 fc52 	bl	8010234 <HAL_Delay>

//	Compensate();
	//PIDChangeFlag( A_VELO_PID, 1);
	Accel(acc, ExploreVelocity);
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <GoBack+0x58>)
 800a992:	edd3 7a00 	vldr	s15, [r3]
 800a996:	eef0 0a67 	vmov.f32	s1, s15
 800a99a:	ed97 0a01 	vldr	s0, [r7, #4]
 800a99e:	f7ff fb2b 	bl	8009ff8 <Accel>
	//ここまでで目標走行距離を完了する

}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	00000000 	.word	0x00000000
 800a9b0:	42340000 	.word	0x42340000
 800a9b4:	40c90fdb 	.word	0x40c90fdb
 800a9b8:	43340000 	.word	0x43340000
 800a9bc:	20010168 	.word	0x20010168

0800a9c0 <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
void SelectAction(char turn_mode)	//前後左右であらわす
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir%4) //条件を増やす場合は割る数字に注意
 800a9ca:	4b1b      	ldr	r3, [pc, #108]	; (800aa38 <SelectAction+0x78>)
 800a9cc:	789b      	ldrb	r3, [r3, #2]
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d82a      	bhi.n	800aa2c <SelectAction+0x6c>
 800a9d6:	a201      	add	r2, pc, #4	; (adr r2, 800a9dc <SelectAction+0x1c>)
 800a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9dc:	0800a9ed 	.word	0x0800a9ed
 800a9e0:	0800aa13 	.word	0x0800aa13
 800a9e4:	0800aa27 	.word	0x0800aa27
 800a9e8:	0800aa1d 	.word	0x0800aa1d
	{
	//直進
	case front:
		//直進flagオン
		//PIDChangeFlag( A_VELO_PID, 1);
		AddVelocity = 0;
 800a9ec:	4b13      	ldr	r3, [pc, #76]	; (800aa3c <SelectAction+0x7c>)
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800a9f4:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <SelectAction+0x80>)
 800a9f6:	edd3 7a00 	vldr	s15, [r3]
 800a9fa:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <SelectAction+0x7c>)
 800a9fc:	ed93 7a00 	vldr	s14, [r3]
 800aa00:	eeb0 1a47 	vmov.f32	s2, s14
 800aa04:	eef0 0a67 	vmov.f32	s1, s15
 800aa08:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aa44 <SelectAction+0x84>
 800aa0c:	f7ff fe28 	bl	800a660 <GoStraight>

		break;
 800aa10:	e00d      	b.n	800aa2e <SelectAction+0x6e>
	//右方向
	case right:	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight(turn_mode);
 800aa12:	79fb      	ldrb	r3, [r7, #7]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff ff27 	bl	800a868 <TurnRight>
		break;
 800aa1a:	e008      	b.n	800aa2e <SelectAction+0x6e>
	//左方向
	case left:
		TurnLeft(turn_mode);
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff ff60 	bl	800a8e4 <TurnLeft>
		break;
 800aa24:	e003      	b.n	800aa2e <SelectAction+0x6e>
	case back:
		GoBack();	//Uターン
 800aa26:	f7ff ff9d 	bl	800a964 <GoBack>
		break;
 800aa2a:	e000      	b.n	800aa2e <SelectAction+0x6e>


	default :
		break;
 800aa2c:	bf00      	nop

	}
}
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20000000 	.word	0x20000000
 800aa3c:	2000fef4 	.word	0x2000fef4
 800aa40:	20010168 	.word	0x20010168
 800aa44:	42b40000 	.word	0x42b40000

0800aa48 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 800aa48:	b5b0      	push	{r4, r5, r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800aa4e:	4bb0      	ldr	r3, [pc, #704]	; (800ad10 <Explore_IT+0x2c8>)
 800aa50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa52:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800aa56:	332f      	adds	r3, #47	; 0x2f
 800aa58:	461a      	mov	r2, r3
 800aa5a:	4bae      	ldr	r3, [pc, #696]	; (800ad14 <Explore_IT+0x2cc>)
 800aa5c:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800aa5e:	4bac      	ldr	r3, [pc, #688]	; (800ad10 <Explore_IT+0x2c8>)
 800aa60:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800aa66:	4bac      	ldr	r3, [pc, #688]	; (800ad18 <Explore_IT+0x2d0>)
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800aa6e:	332f      	adds	r3, #47	; 0x2f
 800aa70:	461a      	mov	r2, r3
 800aa72:	4ba8      	ldr	r3, [pc, #672]	; (800ad14 <Explore_IT+0x2cc>)
 800aa74:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800aa76:	4ba8      	ldr	r3, [pc, #672]	; (800ad18 <Explore_IT+0x2d0>)
 800aa78:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa7c:	625a      	str	r2, [r3, #36]	; 0x24

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800aa7e:	4ba5      	ldr	r3, [pc, #660]	; (800ad14 <Explore_IT+0x2cc>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa8a:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800ad1c <Explore_IT+0x2d4>
 800aa8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa92:	4ba3      	ldr	r3, [pc, #652]	; (800ad20 <Explore_IT+0x2d8>)
 800aa94:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800aa98:	4b9e      	ldr	r3, [pc, #632]	; (800ad14 <Explore_IT+0x2cc>)
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	ee07 3a90 	vmov	s15, r3
 800aaa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaa4:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800ad1c <Explore_IT+0x2d4>
 800aaa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaac:	4b9c      	ldr	r3, [pc, #624]	; (800ad20 <Explore_IT+0x2d8>)
 800aaae:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800aab2:	4b9b      	ldr	r3, [pc, #620]	; (800ad20 <Explore_IT+0x2d8>)
 800aab4:	ed93 7a00 	vldr	s14, [r3]
 800aab8:	4b99      	ldr	r3, [pc, #612]	; (800ad20 <Explore_IT+0x2d8>)
 800aaba:	edd3 7a01 	vldr	s15, [r3, #4]
 800aabe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aac2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaca:	4b95      	ldr	r3, [pc, #596]	; (800ad20 <Explore_IT+0x2d8>)
 800aacc:	edc3 7a02 	vstr	s15, [r3, #8]
	if((1 <= dbc) && (dbc <= 8000))
 800aad0:	4b94      	ldr	r3, [pc, #592]	; (800ad24 <Explore_IT+0x2dc>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dd1b      	ble.n	800ab10 <Explore_IT+0xc8>
 800aad8:	4b92      	ldr	r3, [pc, #584]	; (800ad24 <Explore_IT+0x2dc>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800aae0:	dc16      	bgt.n	800ab10 <Explore_IT+0xc8>
	{
		debugVL[dbc-1] = CurrentVelocity[LEFT];
 800aae2:	4b90      	ldr	r3, [pc, #576]	; (800ad24 <Explore_IT+0x2dc>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	4a8d      	ldr	r2, [pc, #564]	; (800ad20 <Explore_IT+0x2d8>)
 800aaea:	6812      	ldr	r2, [r2, #0]
 800aaec:	498e      	ldr	r1, [pc, #568]	; (800ad28 <Explore_IT+0x2e0>)
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	601a      	str	r2, [r3, #0]
		debugVR[dbc-1] = CurrentVelocity[RIGHT];
 800aaf4:	4b8b      	ldr	r3, [pc, #556]	; (800ad24 <Explore_IT+0x2dc>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	4a89      	ldr	r2, [pc, #548]	; (800ad20 <Explore_IT+0x2d8>)
 800aafc:	6852      	ldr	r2, [r2, #4]
 800aafe:	498b      	ldr	r1, [pc, #556]	; (800ad2c <Explore_IT+0x2e4>)
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	601a      	str	r2, [r3, #0]
		dbc ++;
 800ab06:	4b87      	ldr	r3, [pc, #540]	; (800ad24 <Explore_IT+0x2dc>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	4a85      	ldr	r2, [pc, #532]	; (800ad24 <Explore_IT+0x2dc>)
 800ab0e:	6013      	str	r3, [r2, #0]
	}


	//移動量 mm/msを積算

	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800ab10:	4b87      	ldr	r3, [pc, #540]	; (800ad30 <Explore_IT+0x2e8>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	4b7f      	ldr	r3, [pc, #508]	; (800ad14 <Explore_IT+0x2cc>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4413      	add	r3, r2
 800ab1a:	4a85      	ldr	r2, [pc, #532]	; (800ad30 <Explore_IT+0x2e8>)
 800ab1c:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800ab1e:	4b84      	ldr	r3, [pc, #528]	; (800ad30 <Explore_IT+0x2e8>)
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	4b7c      	ldr	r3, [pc, #496]	; (800ad14 <Explore_IT+0x2cc>)
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4413      	add	r3, r2
 800ab28:	4a81      	ldr	r2, [pc, #516]	; (800ad30 <Explore_IT+0x2e8>)
 800ab2a:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800ab2c:	4b80      	ldr	r3, [pc, #512]	; (800ad30 <Explore_IT+0x2e8>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4b7f      	ldr	r3, [pc, #508]	; (800ad30 <Explore_IT+0x2e8>)
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	4a7e      	ldr	r2, [pc, #504]	; (800ad30 <Explore_IT+0x2e8>)
 800ab38:	6093      	str	r3, [r2, #8]
#if 1
	//static float angle=0;
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800ab3a:	2138      	movs	r1, #56	; 0x38
 800ab3c:	2037      	movs	r0, #55	; 0x37
 800ab3e:	f004 f947 	bl	800edd0 <ReadIMU>
 800ab42:	eef0 7a40 	vmov.f32	s15, s0
 800ab46:	4b7b      	ldr	r3, [pc, #492]	; (800ad34 <Explore_IT+0x2ec>)
 800ab48:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800ab4c:	4b79      	ldr	r3, [pc, #484]	; (800ad34 <Explore_IT+0x2ec>)
 800ab4e:	ed93 7a00 	vldr	s14, [r3]
 800ab52:	4b79      	ldr	r3, [pc, #484]	; (800ad38 <Explore_IT+0x2f0>)
 800ab54:	edd3 7a00 	vldr	s15, [r3]
 800ab58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab5c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800ad3c <Explore_IT+0x2f4>
 800ab60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab64:	edc7 7a05 	vstr	s15, [r7, #20]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800ab68:	6978      	ldr	r0, [r7, #20]
 800ab6a:	f7fd fc25 	bl	80083b8 <__aeabi_f2d>
 800ab6e:	a362      	add	r3, pc, #392	; (adr r3, 800acf8 <Explore_IT+0x2b0>)
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f7fd fc78 	bl	8008468 <__aeabi_dmul>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4625      	mov	r5, r4
 800ab7e:	461c      	mov	r4, r3
 800ab80:	4b6f      	ldr	r3, [pc, #444]	; (800ad40 <Explore_IT+0x2f8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fd fc17 	bl	80083b8 <__aeabi_f2d>
 800ab8a:	a35d      	add	r3, pc, #372	; (adr r3, 800ad00 <Explore_IT+0x2b8>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f7fd fc6a 	bl	8008468 <__aeabi_dmul>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	f7fd faae 	bl	80080fc <__adddf3>
 800aba0:	4603      	mov	r3, r0
 800aba2:	460c      	mov	r4, r1
 800aba4:	4618      	mov	r0, r3
 800aba6:	4621      	mov	r1, r4
 800aba8:	f7fd ff56 	bl	8008a58 <__aeabi_d2f>
 800abac:	4603      	mov	r3, r0
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef1 7a67 	vneg.f32	s15, s15
 800abb6:	4b63      	ldr	r3, [pc, #396]	; (800ad44 <Explore_IT+0x2fc>)
 800abb8:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800abbc:	4a60      	ldr	r2, [pc, #384]	; (800ad40 <Explore_IT+0x2f8>)
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800abc2:	4b60      	ldr	r3, [pc, #384]	; (800ad44 <Explore_IT+0x2fc>)
 800abc4:	edd3 7a00 	vldr	s15, [r3]
 800abc8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800ad48 <Explore_IT+0x300>
 800abcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800abd0:	4b5e      	ldr	r3, [pc, #376]	; (800ad4c <Explore_IT+0x304>)
 800abd2:	edd3 7a00 	vldr	s15, [r3]
 800abd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abda:	4b5c      	ldr	r3, [pc, #368]	; (800ad4c <Explore_IT+0x304>)
 800abdc:	edc3 7a00 	vstr	s15, [r3]
	AngularV = ( CurrentVelocity[LEFT] - CurrentVelocity[RIGHT] ) *convert_to_angularv;
	Angle += AngularV * T1;

#endif

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	613b      	str	r3, [r7, #16]
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	2300      	movs	r3, #0
 800abea:	60bb      	str	r3, [r7, #8]
 800abec:	2300      	movs	r3, #0
 800abee:	607b      	str	r3, [r7, #4]
		int ang_out=0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	603b      	str	r3, [r7, #0]

		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 800abf4:	4b56      	ldr	r3, [pc, #344]	; (800ad50 <Explore_IT+0x308>)
 800abf6:	789b      	ldrb	r3, [r3, #2]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d008      	beq.n	800ac0e <Explore_IT+0x1c6>
 800abfc:	4b54      	ldr	r3, [pc, #336]	; (800ad50 <Explore_IT+0x308>)
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	2b06      	cmp	r3, #6
 800ac02:	d004      	beq.n	800ac0e <Explore_IT+0x1c6>
 800ac04:	4b52      	ldr	r3, [pc, #328]	; (800ad50 <Explore_IT+0x308>)
 800ac06:	791b      	ldrb	r3, [r3, #4]
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	f040 8129 	bne.w	800ae60 <Explore_IT+0x418>
		{
			if( Pid[A_VELO_PID].flag == 1 )
 800ac0e:	4b51      	ldr	r3, [pc, #324]	; (800ad54 <Explore_IT+0x30c>)
 800ac10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d116      	bne.n	800ac44 <Explore_IT+0x1fc>
			{
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800ac16:	4b50      	ldr	r3, [pc, #320]	; (800ad58 <Explore_IT+0x310>)
 800ac18:	edd3 7a00 	vldr	s15, [r3]
 800ac1c:	4b4b      	ldr	r3, [pc, #300]	; (800ad4c <Explore_IT+0x304>)
 800ac1e:	ed93 7a00 	vldr	s14, [r3]
 800ac22:	eef0 0a47 	vmov.f32	s1, s14
 800ac26:	eeb0 0a67 	vmov.f32	s0, s15
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	f005 f830 	bl	800fc90 <PIDControl>
 800ac30:	6038      	str	r0, [r7, #0]
				TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac3c:	4b47      	ldr	r3, [pc, #284]	; (800ad5c <Explore_IT+0x314>)
 800ac3e:	edc3 7a00 	vstr	s15, [r3]
 800ac42:	e10d      	b.n	800ae60 <Explore_IT+0x418>
			}
			else if( Pid[D_WALL_PID].flag == 1 )
 800ac44:	4b43      	ldr	r3, [pc, #268]	; (800ad54 <Explore_IT+0x30c>)
 800ac46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d12a      	bne.n	800aca2 <Explore_IT+0x25a>
			{
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800ac4c:	4b44      	ldr	r3, [pc, #272]	; (800ad60 <Explore_IT+0x318>)
 800ac4e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ac52:	4b43      	ldr	r3, [pc, #268]	; (800ad60 <Explore_IT+0x318>)
 800ac54:	ed93 7a01 	vldr	s14, [r3, #4]
 800ac58:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <Explore_IT+0x31c>)
 800ac5a:	edd3 7a00 	vldr	s15, [r3]
 800ac5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac62:	eef0 0a67 	vmov.f32	s1, s15
 800ac66:	eeb0 0a66 	vmov.f32	s0, s13
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	f005 f810 	bl	800fc90 <PIDControl>
 800ac70:	6138      	str	r0, [r7, #16]
				TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	ee07 3a90 	vmov	s15, r3
 800ac78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac7c:	ee17 0a90 	vmov	r0, s15
 800ac80:	f7fd fb9a 	bl	80083b8 <__aeabi_f2d>
 800ac84:	a320      	add	r3, pc, #128	; (adr r3, 800ad08 <Explore_IT+0x2c0>)
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	f7fd fbed 	bl	8008468 <__aeabi_dmul>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	460c      	mov	r4, r1
 800ac92:	4618      	mov	r0, r3
 800ac94:	4621      	mov	r1, r4
 800ac96:	f7fd fedf 	bl	8008a58 <__aeabi_d2f>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	4b2f      	ldr	r3, [pc, #188]	; (800ad5c <Explore_IT+0x314>)
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	e0de      	b.n	800ae60 <Explore_IT+0x418>
			}
			else if( Pid[L_WALL_PID].flag == 1 )
 800aca2:	4b2c      	ldr	r3, [pc, #176]	; (800ad54 <Explore_IT+0x30c>)
 800aca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d15f      	bne.n	800ad6c <Explore_IT+0x324>
			{
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800acac:	4b2c      	ldr	r3, [pc, #176]	; (800ad60 <Explore_IT+0x318>)
 800acae:	edd3 7a02 	vldr	s15, [r3, #8]
 800acb2:	4b2d      	ldr	r3, [pc, #180]	; (800ad68 <Explore_IT+0x320>)
 800acb4:	ed93 7a02 	vldr	s14, [r3, #8]
 800acb8:	eef0 0a47 	vmov.f32	s1, s14
 800acbc:	eeb0 0a67 	vmov.f32	s0, s15
 800acc0:	2002      	movs	r0, #2
 800acc2:	f004 ffe5 	bl	800fc90 <PIDControl>
 800acc6:	60f8      	str	r0, [r7, #12]
				TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acd2:	ee17 0a90 	vmov	r0, s15
 800acd6:	f7fd fb6f 	bl	80083b8 <__aeabi_f2d>
 800acda:	a30b      	add	r3, pc, #44	; (adr r3, 800ad08 <Explore_IT+0x2c0>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f7fd fbc2 	bl	8008468 <__aeabi_dmul>
 800ace4:	4603      	mov	r3, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	4618      	mov	r0, r3
 800acea:	4621      	mov	r1, r4
 800acec:	f7fd feb4 	bl	8008a58 <__aeabi_d2f>
 800acf0:	4602      	mov	r2, r0
 800acf2:	4b1a      	ldr	r3, [pc, #104]	; (800ad5c <Explore_IT+0x314>)
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	e0b3      	b.n	800ae60 <Explore_IT+0x418>
 800acf8:	47ae147b 	.word	0x47ae147b
 800acfc:	3f847ae1 	.word	0x3f847ae1
 800ad00:	7ae147ae 	.word	0x7ae147ae
 800ad04:	3fefae14 	.word	0x3fefae14
 800ad08:	d2f1a9fc 	.word	0xd2f1a9fc
 800ad0c:	3f50624d 	.word	0x3f50624d
 800ad10:	40000400 	.word	0x40000400
 800ad14:	2001038c 	.word	0x2001038c
 800ad18:	40000800 	.word	0x40000800
 800ad1c:	3f8177cd 	.word	0x3f8177cd
 800ad20:	2000ff24 	.word	0x2000ff24
 800ad24:	2000fc14 	.word	0x2000fc14
 800ad28:	20000214 	.word	0x20000214
 800ad2c:	20007f14 	.word	0x20007f14
 800ad30:	2000ff18 	.word	0x2000ff18
 800ad34:	2000fcd4 	.word	0x2000fcd4
 800ad38:	2000fcd0 	.word	0x2000fcd0
 800ad3c:	3a8b7d78 	.word	0x3a8b7d78
 800ad40:	2000fc18 	.word	0x2000fc18
 800ad44:	2000fc20 	.word	0x2000fc20
 800ad48:	3a83126f 	.word	0x3a83126f
 800ad4c:	2000fc24 	.word	0x2000fc24
 800ad50:	20000000 	.word	0x20000000
 800ad54:	2000fd18 	.word	0x2000fd18
 800ad58:	2000ff14 	.word	0x2000ff14
 800ad5c:	2000fef8 	.word	0x2000fef8
 800ad60:	2000ff58 	.word	0x2000ff58
 800ad64:	2000ff0c 	.word	0x2000ff0c
 800ad68:	20010174 	.word	0x20010174

			}
			else if( Pid[R_WALL_PID].flag == 1 )
 800ad6c:	4b78      	ldr	r3, [pc, #480]	; (800af50 <Explore_IT+0x508>)
 800ad6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d125      	bne.n	800adc2 <Explore_IT+0x37a>
			{
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800ad76:	4b77      	ldr	r3, [pc, #476]	; (800af54 <Explore_IT+0x50c>)
 800ad78:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad7c:	4b76      	ldr	r3, [pc, #472]	; (800af58 <Explore_IT+0x510>)
 800ad7e:	ed93 7a01 	vldr	s14, [r3, #4]
 800ad82:	eef0 0a47 	vmov.f32	s1, s14
 800ad86:	eeb0 0a67 	vmov.f32	s0, s15
 800ad8a:	2003      	movs	r0, #3
 800ad8c:	f004 ff80 	bl	800fc90 <PIDControl>
 800ad90:	60b8      	str	r0, [r7, #8]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	ee07 3a90 	vmov	s15, r3
 800ad98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad9c:	ee17 0a90 	vmov	r0, s15
 800ada0:	f7fd fb0a 	bl	80083b8 <__aeabi_f2d>
 800ada4:	a366      	add	r3, pc, #408	; (adr r3, 800af40 <Explore_IT+0x4f8>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7fd fb5d 	bl	8008468 <__aeabi_dmul>
 800adae:	4603      	mov	r3, r0
 800adb0:	460c      	mov	r4, r1
 800adb2:	4618      	mov	r0, r3
 800adb4:	4621      	mov	r1, r4
 800adb6:	f7fd fe4f 	bl	8008a58 <__aeabi_d2f>
 800adba:	4602      	mov	r2, r0
 800adbc:	4b67      	ldr	r3, [pc, #412]	; (800af5c <Explore_IT+0x514>)
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	e04e      	b.n	800ae60 <Explore_IT+0x418>
			}
			else if( Pid[F_WALL_PID].flag == 1)
 800adc2:	4b63      	ldr	r3, [pc, #396]	; (800af50 <Explore_IT+0x508>)
 800adc4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d149      	bne.n	800ae60 <Explore_IT+0x418>
			{
				wall_f = PIDControl( F_WALL_PID,   Photo[FR], Photo[FL]+1000);
 800adcc:	4b62      	ldr	r3, [pc, #392]	; (800af58 <Explore_IT+0x510>)
 800adce:	edd3 6a03 	vldr	s13, [r3, #12]
 800add2:	4b61      	ldr	r3, [pc, #388]	; (800af58 <Explore_IT+0x510>)
 800add4:	edd3 7a00 	vldr	s15, [r3]
 800add8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800af60 <Explore_IT+0x518>
 800addc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ade0:	eef0 0a67 	vmov.f32	s1, s15
 800ade4:	eeb0 0a66 	vmov.f32	s0, s13
 800ade8:	2008      	movs	r0, #8
 800adea:	f004 ff51 	bl	800fc90 <PIDControl>
 800adee:	6078      	str	r0, [r7, #4]
				TargetAngularV = (float)wall_f*0.001;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adfa:	ee17 0a90 	vmov	r0, s15
 800adfe:	f7fd fadb 	bl	80083b8 <__aeabi_f2d>
 800ae02:	a34f      	add	r3, pc, #316	; (adr r3, 800af40 <Explore_IT+0x4f8>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f7fd fb2e 	bl	8008468 <__aeabi_dmul>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	4618      	mov	r0, r3
 800ae12:	4621      	mov	r1, r4
 800ae14:	f7fd fe20 	bl	8008a58 <__aeabi_d2f>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	4b50      	ldr	r3, [pc, #320]	; (800af5c <Explore_IT+0x514>)
 800ae1c:	601a      	str	r2, [r3, #0]

				TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
 800ae1e:	4b4e      	ldr	r3, [pc, #312]	; (800af58 <Explore_IT+0x510>)
 800ae20:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae24:	4b4c      	ldr	r3, [pc, #304]	; (800af58 <Explore_IT+0x510>)
 800ae26:	edd3 7a00 	vldr	s15, [r3]
 800ae2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae2e:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800af64 <Explore_IT+0x51c>
 800ae32:	eeb0 0a67 	vmov.f32	s0, s15
 800ae36:	2009      	movs	r0, #9
 800ae38:	f004 ff2a 	bl	800fc90 <PIDControl>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fd faa8 	bl	8008394 <__aeabi_i2d>
 800ae44:	a340      	add	r3, pc, #256	; (adr r3, 800af48 <Explore_IT+0x500>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	f7fd fb0d 	bl	8008468 <__aeabi_dmul>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	460c      	mov	r4, r1
 800ae52:	4618      	mov	r0, r3
 800ae54:	4621      	mov	r1, r4
 800ae56:	f7fd fdff 	bl	8008a58 <__aeabi_d2f>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4b42      	ldr	r3, [pc, #264]	; (800af68 <Explore_IT+0x520>)
 800ae5e:	609a      	str	r2, [r3, #8]
			}
		}

	TargetVelocity[BODY] += Acceleration;
 800ae60:	4b41      	ldr	r3, [pc, #260]	; (800af68 <Explore_IT+0x520>)
 800ae62:	ed93 7a02 	vldr	s14, [r3, #8]
 800ae66:	4b41      	ldr	r3, [pc, #260]	; (800af6c <Explore_IT+0x524>)
 800ae68:	edd3 7a00 	vldr	s15, [r3]
 800ae6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae70:	4b3d      	ldr	r3, [pc, #244]	; (800af68 <Explore_IT+0x520>)
 800ae72:	edc3 7a02 	vstr	s15, [r3, #8]
	AngularAcceleration += AngularLeapsity;
 800ae76:	4b3e      	ldr	r3, [pc, #248]	; (800af70 <Explore_IT+0x528>)
 800ae78:	ed93 7a00 	vldr	s14, [r3]
 800ae7c:	4b3d      	ldr	r3, [pc, #244]	; (800af74 <Explore_IT+0x52c>)
 800ae7e:	edd3 7a00 	vldr	s15, [r3]
 800ae82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae86:	4b3a      	ldr	r3, [pc, #232]	; (800af70 <Explore_IT+0x528>)
 800ae88:	edc3 7a00 	vstr	s15, [r3]
	TargetAngularV += AngularAcceleration;
 800ae8c:	4b33      	ldr	r3, [pc, #204]	; (800af5c <Explore_IT+0x514>)
 800ae8e:	ed93 7a00 	vldr	s14, [r3]
 800ae92:	4b37      	ldr	r3, [pc, #220]	; (800af70 <Explore_IT+0x528>)
 800ae94:	edd3 7a00 	vldr	s15, [r3]
 800ae98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae9c:	4b2f      	ldr	r3, [pc, #188]	; (800af5c <Explore_IT+0x514>)
 800ae9e:	edc3 7a00 	vstr	s15, [r3]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800aea2:	4b31      	ldr	r3, [pc, #196]	; (800af68 <Explore_IT+0x520>)
 800aea4:	ed93 7a02 	vldr	s14, [r3, #8]
 800aea8:	4b2c      	ldr	r3, [pc, #176]	; (800af5c <Explore_IT+0x514>)
 800aeaa:	edd3 7a00 	vldr	s15, [r3]
 800aeae:	eddf 6a32 	vldr	s13, [pc, #200]	; 800af78 <Explore_IT+0x530>
 800aeb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aeb6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800aeba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aec2:	4b29      	ldr	r3, [pc, #164]	; (800af68 <Explore_IT+0x520>)
 800aec4:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800aec8:	4b24      	ldr	r3, [pc, #144]	; (800af5c <Explore_IT+0x514>)
 800aeca:	edd3 7a00 	vldr	s15, [r3]
 800aece:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800af78 <Explore_IT+0x530>
 800aed2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aed6:	4b24      	ldr	r3, [pc, #144]	; (800af68 <Explore_IT+0x520>)
 800aed8:	edd3 7a01 	vldr	s15, [r3, #4]
 800aedc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aee0:	4b21      	ldr	r3, [pc, #132]	; (800af68 <Explore_IT+0x520>)
 800aee2:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800aee6:	4b20      	ldr	r3, [pc, #128]	; (800af68 <Explore_IT+0x520>)
 800aee8:	edd3 7a00 	vldr	s15, [r3]
 800aeec:	4b23      	ldr	r3, [pc, #140]	; (800af7c <Explore_IT+0x534>)
 800aeee:	ed93 7a00 	vldr	s14, [r3]
 800aef2:	eef0 0a47 	vmov.f32	s1, s14
 800aef6:	eeb0 0a67 	vmov.f32	s0, s15
 800aefa:	2004      	movs	r0, #4
 800aefc:	f004 fec8 	bl	800fc90 <PIDControl>
 800af00:	4602      	mov	r2, r0
 800af02:	4b1f      	ldr	r3, [pc, #124]	; (800af80 <Explore_IT+0x538>)
 800af04:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800af06:	4b18      	ldr	r3, [pc, #96]	; (800af68 <Explore_IT+0x520>)
 800af08:	edd3 7a01 	vldr	s15, [r3, #4]
 800af0c:	4b1b      	ldr	r3, [pc, #108]	; (800af7c <Explore_IT+0x534>)
 800af0e:	ed93 7a01 	vldr	s14, [r3, #4]
 800af12:	eef0 0a47 	vmov.f32	s1, s14
 800af16:	eeb0 0a67 	vmov.f32	s0, s15
 800af1a:	2005      	movs	r0, #5
 800af1c:	f004 feb8 	bl	800fc90 <PIDControl>
 800af20:	4602      	mov	r2, r0
 800af22:	4b18      	ldr	r3, [pc, #96]	; (800af84 <Explore_IT+0x53c>)
 800af24:	601a      	str	r2, [r3, #0]

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800af26:	4b16      	ldr	r3, [pc, #88]	; (800af80 <Explore_IT+0x538>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	4b16      	ldr	r3, [pc, #88]	; (800af84 <Explore_IT+0x53c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f004 f9b5 	bl	800f2a0 <Motor_Switch>

}
 800af36:	bf00      	nop
 800af38:	3718      	adds	r7, #24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bdb0      	pop	{r4, r5, r7, pc}
 800af3e:	bf00      	nop
 800af40:	d2f1a9fc 	.word	0xd2f1a9fc
 800af44:	3f50624d 	.word	0x3f50624d
 800af48:	9999999a 	.word	0x9999999a
 800af4c:	3fb99999 	.word	0x3fb99999
 800af50:	2000fd18 	.word	0x2000fd18
 800af54:	20010174 	.word	0x20010174
 800af58:	2000ff58 	.word	0x2000ff58
 800af5c:	2000fef8 	.word	0x2000fef8
 800af60:	447a0000 	.word	0x447a0000
 800af64:	457a0000 	.word	0x457a0000
 800af68:	2000fee8 	.word	0x2000fee8
 800af6c:	2000fc28 	.word	0x2000fc28
 800af70:	2000fc2c 	.word	0x2000fc2c
 800af74:	2000fc30 	.word	0x2000fc30
 800af78:	42176666 	.word	0x42176666
 800af7c:	2000ff24 	.word	0x2000ff24
 800af80:	2001016c 	.word	0x2001016c
 800af84:	20010188 	.word	0x20010188

0800af88 <WritingFree_IT>:
void WritingFree_IT()
{
 800af88:	b5b0      	push	{r4, r5, r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800af8e:	4b90      	ldr	r3, [pc, #576]	; (800b1d0 <WritingFree_IT+0x248>)
 800af90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af92:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800af96:	332f      	adds	r3, #47	; 0x2f
 800af98:	461a      	mov	r2, r3
 800af9a:	4b8e      	ldr	r3, [pc, #568]	; (800b1d4 <WritingFree_IT+0x24c>)
 800af9c:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800af9e:	4b8c      	ldr	r3, [pc, #560]	; (800b1d0 <WritingFree_IT+0x248>)
 800afa0:	f247 522f 	movw	r2, #29999	; 0x752f
 800afa4:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800afa6:	4b8c      	ldr	r3, [pc, #560]	; (800b1d8 <WritingFree_IT+0x250>)
 800afa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afaa:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800afae:	332f      	adds	r3, #47	; 0x2f
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b88      	ldr	r3, [pc, #544]	; (800b1d4 <WritingFree_IT+0x24c>)
 800afb4:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800afb6:	4b88      	ldr	r3, [pc, #544]	; (800b1d8 <WritingFree_IT+0x250>)
 800afb8:	f247 522f 	movw	r2, #29999	; 0x752f
 800afbc:	625a      	str	r2, [r3, #36]	; 0x24

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800afbe:	4b85      	ldr	r3, [pc, #532]	; (800b1d4 <WritingFree_IT+0x24c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afca:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b1dc <WritingFree_IT+0x254>
 800afce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afd2:	4b83      	ldr	r3, [pc, #524]	; (800b1e0 <WritingFree_IT+0x258>)
 800afd4:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800afd8:	4b7e      	ldr	r3, [pc, #504]	; (800b1d4 <WritingFree_IT+0x24c>)
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afe4:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b1dc <WritingFree_IT+0x254>
 800afe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afec:	4b7c      	ldr	r3, [pc, #496]	; (800b1e0 <WritingFree_IT+0x258>)
 800afee:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800aff2:	4b7b      	ldr	r3, [pc, #492]	; (800b1e0 <WritingFree_IT+0x258>)
 800aff4:	ed93 7a00 	vldr	s14, [r3]
 800aff8:	4b79      	ldr	r3, [pc, #484]	; (800b1e0 <WritingFree_IT+0x258>)
 800affa:	edd3 7a01 	vldr	s15, [r3, #4]
 800affe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b002:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b00a:	4b75      	ldr	r3, [pc, #468]	; (800b1e0 <WritingFree_IT+0x258>)
 800b00c:	edc3 7a02 	vstr	s15, [r3, #8]
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800b010:	4b74      	ldr	r3, [pc, #464]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	4b6f      	ldr	r3, [pc, #444]	; (800b1d4 <WritingFree_IT+0x24c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4413      	add	r3, r2
 800b01a:	4a72      	ldr	r2, [pc, #456]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b01c:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800b01e:	4b71      	ldr	r3, [pc, #452]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b020:	685a      	ldr	r2, [r3, #4]
 800b022:	4b6c      	ldr	r3, [pc, #432]	; (800b1d4 <WritingFree_IT+0x24c>)
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	4413      	add	r3, r2
 800b028:	4a6e      	ldr	r2, [pc, #440]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b02a:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800b02c:	4b6d      	ldr	r3, [pc, #436]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	4b6c      	ldr	r3, [pc, #432]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	4413      	add	r3, r2
 800b036:	4a6b      	ldr	r2, [pc, #428]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b038:	6093      	str	r3, [r2, #8]
#if 1

	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800b03a:	2138      	movs	r1, #56	; 0x38
 800b03c:	2037      	movs	r0, #55	; 0x37
 800b03e:	f003 fec7 	bl	800edd0 <ReadIMU>
 800b042:	eef0 7a40 	vmov.f32	s15, s0
 800b046:	4b68      	ldr	r3, [pc, #416]	; (800b1e8 <WritingFree_IT+0x260>)
 800b048:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800b04c:	4b66      	ldr	r3, [pc, #408]	; (800b1e8 <WritingFree_IT+0x260>)
 800b04e:	ed93 7a00 	vldr	s14, [r3]
 800b052:	4b66      	ldr	r3, [pc, #408]	; (800b1ec <WritingFree_IT+0x264>)
 800b054:	edd3 7a00 	vldr	s15, [r3]
 800b058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b05c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800b1f0 <WritingFree_IT+0x268>
 800b060:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b064:	edc7 7a01 	vstr	s15, [r7, #4]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fd f9a5 	bl	80083b8 <__aeabi_f2d>
 800b06e:	a354      	add	r3, pc, #336	; (adr r3, 800b1c0 <WritingFree_IT+0x238>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7fd f9f8 	bl	8008468 <__aeabi_dmul>
 800b078:	4603      	mov	r3, r0
 800b07a:	460c      	mov	r4, r1
 800b07c:	4625      	mov	r5, r4
 800b07e:	461c      	mov	r4, r3
 800b080:	4b5c      	ldr	r3, [pc, #368]	; (800b1f4 <WritingFree_IT+0x26c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4618      	mov	r0, r3
 800b086:	f7fd f997 	bl	80083b8 <__aeabi_f2d>
 800b08a:	a34f      	add	r3, pc, #316	; (adr r3, 800b1c8 <WritingFree_IT+0x240>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f7fd f9ea 	bl	8008468 <__aeabi_dmul>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	4620      	mov	r0, r4
 800b09a:	4629      	mov	r1, r5
 800b09c:	f7fd f82e 	bl	80080fc <__adddf3>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	f7fd fcd6 	bl	8008a58 <__aeabi_d2f>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef1 7a67 	vneg.f32	s15, s15
 800b0b6:	4b50      	ldr	r3, [pc, #320]	; (800b1f8 <WritingFree_IT+0x270>)
 800b0b8:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800b0bc:	4a4d      	ldr	r2, [pc, #308]	; (800b1f4 <WritingFree_IT+0x26c>)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800b0c2:	4b4d      	ldr	r3, [pc, #308]	; (800b1f8 <WritingFree_IT+0x270>)
 800b0c4:	edd3 7a00 	vldr	s15, [r3]
 800b0c8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b1fc <WritingFree_IT+0x274>
 800b0cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0d0:	4b4b      	ldr	r3, [pc, #300]	; (800b200 <WritingFree_IT+0x278>)
 800b0d2:	edd3 7a00 	vldr	s15, [r3]
 800b0d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0da:	4b49      	ldr	r3, [pc, #292]	; (800b200 <WritingFree_IT+0x278>)
 800b0dc:	edc3 7a00 	vstr	s15, [r3]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
 800b0e0:	4b48      	ldr	r3, [pc, #288]	; (800b204 <WritingFree_IT+0x27c>)
 800b0e2:	ed93 7a00 	vldr	s14, [r3]
 800b0e6:	4b48      	ldr	r3, [pc, #288]	; (800b208 <WritingFree_IT+0x280>)
 800b0e8:	edd3 7a00 	vldr	s15, [r3]
 800b0ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0f0:	4b44      	ldr	r3, [pc, #272]	; (800b204 <WritingFree_IT+0x27c>)
 800b0f2:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[BODY] += Acceleration;
 800b0f6:	4b45      	ldr	r3, [pc, #276]	; (800b20c <WritingFree_IT+0x284>)
 800b0f8:	ed93 7a02 	vldr	s14, [r3, #8]
 800b0fc:	4b44      	ldr	r3, [pc, #272]	; (800b210 <WritingFree_IT+0x288>)
 800b0fe:	edd3 7a00 	vldr	s15, [r3]
 800b102:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b106:	4b41      	ldr	r3, [pc, #260]	; (800b20c <WritingFree_IT+0x284>)
 800b108:	edc3 7a02 	vstr	s15, [r3, #8]
	TargetAngularV += AngularAcceleration;
 800b10c:	4b41      	ldr	r3, [pc, #260]	; (800b214 <WritingFree_IT+0x28c>)
 800b10e:	ed93 7a00 	vldr	s14, [r3]
 800b112:	4b3c      	ldr	r3, [pc, #240]	; (800b204 <WritingFree_IT+0x27c>)
 800b114:	edd3 7a00 	vldr	s15, [r3]
 800b118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b11c:	4b3d      	ldr	r3, [pc, #244]	; (800b214 <WritingFree_IT+0x28c>)
 800b11e:	edc3 7a00 	vstr	s15, [r3]

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800b122:	4b3a      	ldr	r3, [pc, #232]	; (800b20c <WritingFree_IT+0x284>)
 800b124:	ed93 7a02 	vldr	s14, [r3, #8]
 800b128:	4b3a      	ldr	r3, [pc, #232]	; (800b214 <WritingFree_IT+0x28c>)
 800b12a:	edd3 7a00 	vldr	s15, [r3]
 800b12e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b218 <WritingFree_IT+0x290>
 800b132:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b136:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b13a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b13e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b142:	4b32      	ldr	r3, [pc, #200]	; (800b20c <WritingFree_IT+0x284>)
 800b144:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b148:	4b32      	ldr	r3, [pc, #200]	; (800b214 <WritingFree_IT+0x28c>)
 800b14a:	edd3 7a00 	vldr	s15, [r3]
 800b14e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b218 <WritingFree_IT+0x290>
 800b152:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b156:	4b2d      	ldr	r3, [pc, #180]	; (800b20c <WritingFree_IT+0x284>)
 800b158:	edd3 7a01 	vldr	s15, [r3, #4]
 800b15c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b160:	4b2a      	ldr	r3, [pc, #168]	; (800b20c <WritingFree_IT+0x284>)
 800b162:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b166:	4b29      	ldr	r3, [pc, #164]	; (800b20c <WritingFree_IT+0x284>)
 800b168:	edd3 7a00 	vldr	s15, [r3]
 800b16c:	4b1c      	ldr	r3, [pc, #112]	; (800b1e0 <WritingFree_IT+0x258>)
 800b16e:	ed93 7a00 	vldr	s14, [r3]
 800b172:	eef0 0a47 	vmov.f32	s1, s14
 800b176:	eeb0 0a67 	vmov.f32	s0, s15
 800b17a:	2004      	movs	r0, #4
 800b17c:	f004 fd88 	bl	800fc90 <PIDControl>
 800b180:	4602      	mov	r2, r0
 800b182:	4b26      	ldr	r3, [pc, #152]	; (800b21c <WritingFree_IT+0x294>)
 800b184:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b186:	4b21      	ldr	r3, [pc, #132]	; (800b20c <WritingFree_IT+0x284>)
 800b188:	edd3 7a01 	vldr	s15, [r3, #4]
 800b18c:	4b14      	ldr	r3, [pc, #80]	; (800b1e0 <WritingFree_IT+0x258>)
 800b18e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b192:	eef0 0a47 	vmov.f32	s1, s14
 800b196:	eeb0 0a67 	vmov.f32	s0, s15
 800b19a:	2005      	movs	r0, #5
 800b19c:	f004 fd78 	bl	800fc90 <PIDControl>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	4b1f      	ldr	r3, [pc, #124]	; (800b220 <WritingFree_IT+0x298>)
 800b1a4:	601a      	str	r2, [r3, #0]

	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b1a6:	4b1d      	ldr	r3, [pc, #116]	; (800b21c <WritingFree_IT+0x294>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <WritingFree_IT+0x298>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f004 f875 	bl	800f2a0 <Motor_Switch>


}
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	47ae147b 	.word	0x47ae147b
 800b1c4:	3f847ae1 	.word	0x3f847ae1
 800b1c8:	7ae147ae 	.word	0x7ae147ae
 800b1cc:	3fefae14 	.word	0x3fefae14
 800b1d0:	40000400 	.word	0x40000400
 800b1d4:	2001038c 	.word	0x2001038c
 800b1d8:	40000800 	.word	0x40000800
 800b1dc:	3f8177cd 	.word	0x3f8177cd
 800b1e0:	2000ff24 	.word	0x2000ff24
 800b1e4:	2000ff18 	.word	0x2000ff18
 800b1e8:	2000fcd4 	.word	0x2000fcd4
 800b1ec:	2000fcd0 	.word	0x2000fcd0
 800b1f0:	3a8b7d78 	.word	0x3a8b7d78
 800b1f4:	2000fc1c 	.word	0x2000fc1c
 800b1f8:	2000fc20 	.word	0x2000fc20
 800b1fc:	3a83126f 	.word	0x3a83126f
 800b200:	2000fc24 	.word	0x2000fc24
 800b204:	2000fc2c 	.word	0x2000fc2c
 800b208:	2000fc30 	.word	0x2000fc30
 800b20c:	2000fee8 	.word	0x2000fee8
 800b210:	2000fc28 	.word	0x2000fc28
 800b214:	2000fef8 	.word	0x2000fef8
 800b218:	42176666 	.word	0x42176666
 800b21c:	2001016c 	.word	0x2001016c
 800b220:	20010188 	.word	0x20010188

0800b224 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a26      	ldr	r2, [pc, #152]	; (800b2c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d10e      	bne.n	800b252 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		switch(IT_mode){
 800b234:	4b25      	ldr	r3, [pc, #148]	; (800b2cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d007      	beq.n	800b24c <HAL_TIM_PeriodElapsedCallback+0x28>
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d00a      	beq.n	800b256 <HAL_TIM_PeriodElapsedCallback+0x32>
 800b240:	2b00      	cmp	r3, #0
 800b242:	d000      	beq.n	800b246 <HAL_TIM_PeriodElapsedCallback+0x22>
			break;
		case 2:

			break;
		default :
			break;
 800b244:	e008      	b.n	800b258 <HAL_TIM_PeriodElapsedCallback+0x34>
			Explore_IT();
 800b246:	f7ff fbff 	bl	800aa48 <Explore_IT>
			break;
 800b24a:	e005      	b.n	800b258 <HAL_TIM_PeriodElapsedCallback+0x34>
			WritingFree_IT();
 800b24c:	f7ff fe9c 	bl	800af88 <WritingFree_IT>
			break;
 800b250:	e002      	b.n	800b258 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
	}
 800b252:	bf00      	nop
 800b254:	e000      	b.n	800b258 <HAL_TIM_PeriodElapsedCallback+0x34>
			break;
 800b256:	bf00      	nop

	if( htim == &htim8)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a1d      	ldr	r2, [pc, #116]	; (800b2d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d12f      	bne.n	800b2c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		//timer8 += t;

		//壁センサデータの更新
		Photo[FL] = GetWallDataAverage(20, adc1[0], FL);	//adc1_IN10
 800b260:	4b1c      	ldr	r3, [pc, #112]	; (800b2d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2200      	movs	r2, #0
 800b266:	4619      	mov	r1, r3
 800b268:	2014      	movs	r0, #20
 800b26a:	f004 f889 	bl	800f380 <GetWallDataAverage>
 800b26e:	eef0 7a40 	vmov.f32	s15, s0
 800b272:	4b19      	ldr	r3, [pc, #100]	; (800b2d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b274:	edc3 7a00 	vstr	s15, [r3]
		Photo[SR] = GetWallDataAverage(20, adc1[1], SR);	//adc1_IN14
 800b278:	4b16      	ldr	r3, [pc, #88]	; (800b2d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	4619      	mov	r1, r3
 800b280:	2014      	movs	r0, #20
 800b282:	f004 f87d 	bl	800f380 <GetWallDataAverage>
 800b286:	eef0 7a40 	vmov.f32	s15, s0
 800b28a:	4b13      	ldr	r3, [pc, #76]	; (800b2d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b28c:	edc3 7a01 	vstr	s15, [r3, #4]
		Photo[SL] = GetWallDataAverage(20, adc2[0], SL);	//adc2_IN11
 800b290:	4b12      	ldr	r3, [pc, #72]	; (800b2dc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2202      	movs	r2, #2
 800b296:	4619      	mov	r1, r3
 800b298:	2014      	movs	r0, #20
 800b29a:	f004 f871 	bl	800f380 <GetWallDataAverage>
 800b29e:	eef0 7a40 	vmov.f32	s15, s0
 800b2a2:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b2a4:	edc3 7a02 	vstr	s15, [r3, #8]
		Photo[FR] = GetWallDataAverage(20, adc2[1], FR);	//adc2_IN15
 800b2a8:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	2014      	movs	r0, #20
 800b2b2:	f004 f865 	bl	800f380 <GetWallDataAverage>
 800b2b6:	eef0 7a40 	vmov.f32	s15, s0
 800b2ba:	4b07      	ldr	r3, [pc, #28]	; (800b2d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b2bc:	edc3 7a03 	vstr	s15, [r3, #12]
	}
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	200107e8 	.word	0x200107e8
 800b2cc:	2000fedc 	.word	0x2000fedc
 800b2d0:	200105a0 	.word	0x200105a0
 800b2d4:	2000fcbc 	.word	0x2000fcbc
 800b2d8:	2000ff58 	.word	0x2000ff58
 800b2dc:	2000fcc8 	.word	0x2000fcc8

0800b2e0 <flash_store_init>:
//{
//
//}
//壁データの初期化
void flash_store_init()
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800b2e6:	4b2c      	ldr	r3, [pc, #176]	; (800b398 <flash_store_init+0xb8>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	60bb      	str	r3, [r7, #8]
 800b2f0:	e04b      	b.n	800b38a <flash_store_init+0xaa>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	607b      	str	r3, [r7, #4]
 800b2f6:	e042      	b.n	800b37e <flash_store_init+0x9e>
			{
				FLASH_Write_Word(address+0, Wall[i][j].north);
 800b2f8:	4928      	ldr	r1, [pc, #160]	; (800b39c <flash_store_init+0xbc>)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	011a      	lsls	r2, r3, #4
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b306:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	4619      	mov	r1, r3
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f003 fc3a 	bl	800eb88 <FLASH_Write_Word>
				FLASH_Write_Word(address+4, Wall[i][j].east);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	1d18      	adds	r0, r3, #4
 800b318:	4920      	ldr	r1, [pc, #128]	; (800b39c <flash_store_init+0xbc>)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	011a      	lsls	r2, r3, #4
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	4413      	add	r3, r2
 800b322:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b326:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	4619      	mov	r1, r3
 800b32e:	f003 fc2b 	bl	800eb88 <FLASH_Write_Word>
				FLASH_Write_Word(address+8, Wall[i][j].south);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f103 0008 	add.w	r0, r3, #8
 800b338:	4918      	ldr	r1, [pc, #96]	; (800b39c <flash_store_init+0xbc>)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	011a      	lsls	r2, r3, #4
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	4413      	add	r3, r2
 800b342:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b346:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	4619      	mov	r1, r3
 800b34e:	f003 fc1b 	bl	800eb88 <FLASH_Write_Word>
				FLASH_Write_Word(address+12, Wall[i][j].west);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f103 000c 	add.w	r0, r3, #12
 800b358:	4910      	ldr	r1, [pc, #64]	; (800b39c <flash_store_init+0xbc>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	011a      	lsls	r2, r3, #4
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	4413      	add	r3, r2
 800b362:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b366:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	4619      	mov	r1, r3
 800b36e:	f003 fc0b 	bl	800eb88 <FLASH_Write_Word>
				address += 16;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3310      	adds	r3, #16
 800b376:	60fb      	str	r3, [r7, #12]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	3301      	adds	r3, #1
 800b37c:	607b      	str	r3, [r7, #4]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b0f      	cmp	r3, #15
 800b382:	ddb9      	ble.n	800b2f8 <flash_store_init+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	3301      	adds	r3, #1
 800b388:	60bb      	str	r3, [r7, #8]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2b0f      	cmp	r3, #15
 800b38e:	ddb0      	ble.n	800b2f2 <flash_store_init+0x12>
			}
	}
}
 800b390:	bf00      	nop
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	0801a5bc 	.word	0x0801a5bc
 800b39c:	20010398 	.word	0x20010398

0800b3a0 <wall_init>:
void wall_init(){
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	e03b      	b.n	800b424 <wall_init+0x84>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60bb      	str	r3, [r7, #8]
 800b3b0:	e032      	b.n	800b418 <wall_init+0x78>
				Wall[i][j].north = UNKNOWN;
 800b3b2:	4945      	ldr	r1, [pc, #276]	; (800b4c8 <wall_init+0x128>)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	011a      	lsls	r2, r3, #4
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	441a      	add	r2, r3
 800b3bc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b3c0:	2002      	movs	r0, #2
 800b3c2:	f360 0301 	bfi	r3, r0, #0, #2
 800b3c6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800b3ca:	493f      	ldr	r1, [pc, #252]	; (800b4c8 <wall_init+0x128>)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	011a      	lsls	r2, r3, #4
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	441a      	add	r2, r3
 800b3d4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b3d8:	2002      	movs	r0, #2
 800b3da:	f360 0383 	bfi	r3, r0, #2, #2
 800b3de:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800b3e2:	4939      	ldr	r1, [pc, #228]	; (800b4c8 <wall_init+0x128>)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	011a      	lsls	r2, r3, #4
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	441a      	add	r2, r3
 800b3ec:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b3f0:	2002      	movs	r0, #2
 800b3f2:	f360 1305 	bfi	r3, r0, #4, #2
 800b3f6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800b3fa:	4933      	ldr	r1, [pc, #204]	; (800b4c8 <wall_init+0x128>)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	011a      	lsls	r2, r3, #4
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	441a      	add	r2, r3
 800b404:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b408:	2002      	movs	r0, #2
 800b40a:	f360 1387 	bfi	r3, r0, #6, #2
 800b40e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	3301      	adds	r3, #1
 800b416:	60bb      	str	r3, [r7, #8]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b0f      	cmp	r3, #15
 800b41c:	ddc9      	ble.n	800b3b2 <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	3301      	adds	r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b0f      	cmp	r3, #15
 800b428:	ddc0      	ble.n	800b3ac <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b42a:	2300      	movs	r3, #0
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	e02a      	b.n	800b486 <wall_init+0xe6>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800b430:	4a25      	ldr	r2, [pc, #148]	; (800b4c8 <wall_init+0x128>)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	015b      	lsls	r3, r3, #5
 800b436:	4413      	add	r3, r2
 800b438:	f103 021e 	add.w	r2, r3, #30
 800b43c:	7813      	ldrb	r3, [r2, #0]
 800b43e:	2101      	movs	r1, #1
 800b440:	f361 0301 	bfi	r3, r1, #0, #2
 800b444:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800b446:	4920      	ldr	r1, [pc, #128]	; (800b4c8 <wall_init+0x128>)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b44e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b452:	2001      	movs	r0, #1
 800b454:	f360 0383 	bfi	r3, r0, #2, #2
 800b458:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800b45c:	4a1a      	ldr	r2, [pc, #104]	; (800b4c8 <wall_init+0x128>)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	015b      	lsls	r3, r3, #5
 800b462:	441a      	add	r2, r3
 800b464:	7813      	ldrb	r3, [r2, #0]
 800b466:	2101      	movs	r1, #1
 800b468:	f361 1305 	bfi	r3, r1, #4, #2
 800b46c:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800b46e:	4916      	ldr	r1, [pc, #88]	; (800b4c8 <wall_init+0x128>)
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b476:	2001      	movs	r0, #1
 800b478:	f360 1387 	bfi	r3, r0, #6, #2
 800b47c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3301      	adds	r3, #1
 800b484:	607b      	str	r3, [r7, #4]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b0f      	cmp	r3, #15
 800b48a:	ddd1      	ble.n	800b430 <wall_init+0x90>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800b48c:	4a0e      	ldr	r2, [pc, #56]	; (800b4c8 <wall_init+0x128>)
 800b48e:	7813      	ldrb	r3, [r2, #0]
 800b490:	2101      	movs	r1, #1
 800b492:	f361 0383 	bfi	r3, r1, #2, #2
 800b496:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800b498:	4a0b      	ldr	r2, [pc, #44]	; (800b4c8 <wall_init+0x128>)
 800b49a:	7813      	ldrb	r3, [r2, #0]
 800b49c:	f36f 0301 	bfc	r3, #0, #2
 800b4a0:	7013      	strb	r3, [r2, #0]
	Wall[1][0].west = WALL;
 800b4a2:	4a09      	ldr	r2, [pc, #36]	; (800b4c8 <wall_init+0x128>)
 800b4a4:	f892 3020 	ldrb.w	r3, [r2, #32]
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	f361 1387 	bfi	r3, r1, #6, #2
 800b4ae:	f882 3020 	strb.w	r3, [r2, #32]
	Wall[0][1].south = NOWALL;
 800b4b2:	4a05      	ldr	r2, [pc, #20]	; (800b4c8 <wall_init+0x128>)
 800b4b4:	7893      	ldrb	r3, [r2, #2]
 800b4b6:	f36f 1305 	bfc	r3, #4, #2
 800b4ba:	7093      	strb	r3, [r2, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	20010398 	.word	0x20010398

0800b4cc <wall_set>:
	FLASH_Write_Word(address+8, Wall[x][y].south);
	FLASH_Write_Word(address+12, Wall[x][y].west);

}
//壁の更新xyグローバル
void wall_set(){
 800b4cc:	b490      	push	{r4, r7}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800b4d2:	4b8b      	ldr	r3, [pc, #556]	; (800b700 <wall_set+0x234>)
 800b4d4:	ed93 7a00 	vldr	s14, [r3]
 800b4d8:	4b89      	ldr	r3, [pc, #548]	; (800b700 <wall_set+0x234>)
 800b4da:	edd3 7a03 	vldr	s15, [r3, #12]
 800b4de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b4e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b4ea:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800b704 <wall_set+0x238>
 800b4ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f6:	bfcc      	ite	gt
 800b4f8:	2301      	movgt	r3, #1
 800b4fa:	2300      	movle	r3, #0
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	4b82      	ldr	r3, [pc, #520]	; (800b708 <wall_set+0x23c>)
 800b500:	7a5b      	ldrb	r3, [r3, #9]
 800b502:	f107 0108 	add.w	r1, r7, #8
 800b506:	440b      	add	r3, r1
 800b508:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800b50c:	4b7c      	ldr	r3, [pc, #496]	; (800b700 <wall_set+0x234>)
 800b50e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b512:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b70c <wall_set+0x240>
 800b516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b51e:	bfcc      	ite	gt
 800b520:	2301      	movgt	r3, #1
 800b522:	2300      	movle	r3, #0
 800b524:	b2d9      	uxtb	r1, r3
 800b526:	4b78      	ldr	r3, [pc, #480]	; (800b708 <wall_set+0x23c>)
 800b528:	7a5b      	ldrb	r3, [r3, #9]
 800b52a:	3301      	adds	r3, #1
 800b52c:	425a      	negs	r2, r3
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	f002 0203 	and.w	r2, r2, #3
 800b536:	bf58      	it	pl
 800b538:	4253      	negpl	r3, r2
 800b53a:	460a      	mov	r2, r1
 800b53c:	f107 0108 	add.w	r1, r7, #8
 800b540:	440b      	add	r3, r1
 800b542:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800b546:	4b70      	ldr	r3, [pc, #448]	; (800b708 <wall_set+0x23c>)
 800b548:	7a5b      	ldrb	r3, [r3, #9]
 800b54a:	3302      	adds	r3, #2
 800b54c:	425a      	negs	r2, r3
 800b54e:	f003 0303 	and.w	r3, r3, #3
 800b552:	f002 0203 	and.w	r2, r2, #3
 800b556:	bf58      	it	pl
 800b558:	4253      	negpl	r3, r2
 800b55a:	f107 0208 	add.w	r2, r7, #8
 800b55e:	4413      	add	r3, r2
 800b560:	2200      	movs	r2, #0
 800b562:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800b566:	4b66      	ldr	r3, [pc, #408]	; (800b700 <wall_set+0x234>)
 800b568:	edd3 7a02 	vldr	s15, [r3, #8]
 800b56c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800b710 <wall_set+0x244>
 800b570:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	bfcc      	ite	gt
 800b57a:	2301      	movgt	r3, #1
 800b57c:	2300      	movle	r3, #0
 800b57e:	b2d9      	uxtb	r1, r3
 800b580:	4b61      	ldr	r3, [pc, #388]	; (800b708 <wall_set+0x23c>)
 800b582:	7a5b      	ldrb	r3, [r3, #9]
 800b584:	3303      	adds	r3, #3
 800b586:	425a      	negs	r2, r3
 800b588:	f003 0303 	and.w	r3, r3, #3
 800b58c:	f002 0203 	and.w	r2, r2, #3
 800b590:	bf58      	it	pl
 800b592:	4253      	negpl	r3, r2
 800b594:	460a      	mov	r2, r1
 800b596:	f107 0108 	add.w	r1, r7, #8
 800b59a:	440b      	add	r3, r1
 800b59c:	f803 2c04 	strb.w	r2, [r3, #-4]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800b5a0:	7939      	ldrb	r1, [r7, #4]
 800b5a2:	4b59      	ldr	r3, [pc, #356]	; (800b708 <wall_set+0x23c>)
 800b5a4:	799b      	ldrb	r3, [r3, #6]
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	4b57      	ldr	r3, [pc, #348]	; (800b708 <wall_set+0x23c>)
 800b5aa:	79db      	ldrb	r3, [r3, #7]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	f003 0303 	and.w	r3, r3, #3
 800b5b4:	b2d8      	uxtb	r0, r3
 800b5b6:	4957      	ldr	r1, [pc, #348]	; (800b714 <wall_set+0x248>)
 800b5b8:	0123      	lsls	r3, r4, #4
 800b5ba:	441a      	add	r2, r3
 800b5bc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b5c0:	f360 0301 	bfi	r3, r0, #0, #2
 800b5c4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800b5c8:	7979      	ldrb	r1, [r7, #5]
 800b5ca:	4b4f      	ldr	r3, [pc, #316]	; (800b708 <wall_set+0x23c>)
 800b5cc:	799b      	ldrb	r3, [r3, #6]
 800b5ce:	461c      	mov	r4, r3
 800b5d0:	4b4d      	ldr	r3, [pc, #308]	; (800b708 <wall_set+0x23c>)
 800b5d2:	79db      	ldrb	r3, [r3, #7]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	f003 0303 	and.w	r3, r3, #3
 800b5dc:	b2d8      	uxtb	r0, r3
 800b5de:	494d      	ldr	r1, [pc, #308]	; (800b714 <wall_set+0x248>)
 800b5e0:	0123      	lsls	r3, r4, #4
 800b5e2:	441a      	add	r2, r3
 800b5e4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b5e8:	f360 0383 	bfi	r3, r0, #2, #2
 800b5ec:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800b5f0:	79b9      	ldrb	r1, [r7, #6]
 800b5f2:	4b45      	ldr	r3, [pc, #276]	; (800b708 <wall_set+0x23c>)
 800b5f4:	799b      	ldrb	r3, [r3, #6]
 800b5f6:	461c      	mov	r4, r3
 800b5f8:	4b43      	ldr	r3, [pc, #268]	; (800b708 <wall_set+0x23c>)
 800b5fa:	79db      	ldrb	r3, [r3, #7]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	460b      	mov	r3, r1
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	b2d8      	uxtb	r0, r3
 800b606:	4943      	ldr	r1, [pc, #268]	; (800b714 <wall_set+0x248>)
 800b608:	0123      	lsls	r3, r4, #4
 800b60a:	441a      	add	r2, r3
 800b60c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b610:	f360 1305 	bfi	r3, r0, #4, #2
 800b614:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800b618:	79f9      	ldrb	r1, [r7, #7]
 800b61a:	4b3b      	ldr	r3, [pc, #236]	; (800b708 <wall_set+0x23c>)
 800b61c:	799b      	ldrb	r3, [r3, #6]
 800b61e:	461c      	mov	r4, r3
 800b620:	4b39      	ldr	r3, [pc, #228]	; (800b708 <wall_set+0x23c>)
 800b622:	79db      	ldrb	r3, [r3, #7]
 800b624:	461a      	mov	r2, r3
 800b626:	460b      	mov	r3, r1
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	b2d8      	uxtb	r0, r3
 800b62e:	4939      	ldr	r1, [pc, #228]	; (800b714 <wall_set+0x248>)
 800b630:	0123      	lsls	r3, r4, #4
 800b632:	441a      	add	r2, r3
 800b634:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b638:	f360 1387 	bfi	r3, r0, #6, #2
 800b63c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800b640:	4b31      	ldr	r3, [pc, #196]	; (800b708 <wall_set+0x23c>)
 800b642:	79db      	ldrb	r3, [r3, #7]
 800b644:	2b0e      	cmp	r3, #14
 800b646:	d812      	bhi.n	800b66e <wall_set+0x1a2>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800b648:	7939      	ldrb	r1, [r7, #4]
 800b64a:	4b2f      	ldr	r3, [pc, #188]	; (800b708 <wall_set+0x23c>)
 800b64c:	799b      	ldrb	r3, [r3, #6]
 800b64e:	461a      	mov	r2, r3
 800b650:	4b2d      	ldr	r3, [pc, #180]	; (800b708 <wall_set+0x23c>)
 800b652:	79db      	ldrb	r3, [r3, #7]
 800b654:	3301      	adds	r3, #1
 800b656:	f001 0103 	and.w	r1, r1, #3
 800b65a:	b2c8      	uxtb	r0, r1
 800b65c:	492d      	ldr	r1, [pc, #180]	; (800b714 <wall_set+0x248>)
 800b65e:	0112      	lsls	r2, r2, #4
 800b660:	441a      	add	r2, r3
 800b662:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b666:	f360 1305 	bfi	r3, r0, #4, #2
 800b66a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800b66e:	4b26      	ldr	r3, [pc, #152]	; (800b708 <wall_set+0x23c>)
 800b670:	799b      	ldrb	r3, [r3, #6]
 800b672:	2b0e      	cmp	r3, #14
 800b674:	d811      	bhi.n	800b69a <wall_set+0x1ce>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800b676:	7979      	ldrb	r1, [r7, #5]
 800b678:	4b23      	ldr	r3, [pc, #140]	; (800b708 <wall_set+0x23c>)
 800b67a:	799b      	ldrb	r3, [r3, #6]
 800b67c:	3301      	adds	r3, #1
 800b67e:	4a22      	ldr	r2, [pc, #136]	; (800b708 <wall_set+0x23c>)
 800b680:	79d2      	ldrb	r2, [r2, #7]
 800b682:	f001 0103 	and.w	r1, r1, #3
 800b686:	b2c8      	uxtb	r0, r1
 800b688:	4922      	ldr	r1, [pc, #136]	; (800b714 <wall_set+0x248>)
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	441a      	add	r2, r3
 800b68e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b692:	f360 1387 	bfi	r3, r0, #6, #2
 800b696:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800b69a:	4b1b      	ldr	r3, [pc, #108]	; (800b708 <wall_set+0x23c>)
 800b69c:	79db      	ldrb	r3, [r3, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d012      	beq.n	800b6c8 <wall_set+0x1fc>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800b6a2:	79b9      	ldrb	r1, [r7, #6]
 800b6a4:	4b18      	ldr	r3, [pc, #96]	; (800b708 <wall_set+0x23c>)
 800b6a6:	799b      	ldrb	r3, [r3, #6]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4b17      	ldr	r3, [pc, #92]	; (800b708 <wall_set+0x23c>)
 800b6ac:	79db      	ldrb	r3, [r3, #7]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	f001 0103 	and.w	r1, r1, #3
 800b6b4:	b2c8      	uxtb	r0, r1
 800b6b6:	4917      	ldr	r1, [pc, #92]	; (800b714 <wall_set+0x248>)
 800b6b8:	0112      	lsls	r2, r2, #4
 800b6ba:	441a      	add	r2, r3
 800b6bc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b6c0:	f360 0301 	bfi	r3, r0, #0, #2
 800b6c4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800b6c8:	4b0f      	ldr	r3, [pc, #60]	; (800b708 <wall_set+0x23c>)
 800b6ca:	799b      	ldrb	r3, [r3, #6]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d011      	beq.n	800b6f4 <wall_set+0x228>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800b6d0:	79f9      	ldrb	r1, [r7, #7]
 800b6d2:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <wall_set+0x23c>)
 800b6d4:	799b      	ldrb	r3, [r3, #6]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	4a0b      	ldr	r2, [pc, #44]	; (800b708 <wall_set+0x23c>)
 800b6da:	79d2      	ldrb	r2, [r2, #7]
 800b6dc:	f001 0103 	and.w	r1, r1, #3
 800b6e0:	b2c8      	uxtb	r0, r1
 800b6e2:	490c      	ldr	r1, [pc, #48]	; (800b714 <wall_set+0x248>)
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	441a      	add	r2, r3
 800b6e8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b6ec:	f360 0383 	bfi	r3, r0, #2, #2
 800b6f0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc90      	pop	{r4, r7}
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	2000ff58 	.word	0x2000ff58
 800b704:	42340000 	.word	0x42340000
 800b708:	20000000 	.word	0x20000000
 800b70c:	42b40000 	.word	0x42b40000
 800b710:	42c80000 	.word	0x42c80000
 800b714:	20010398 	.word	0x20010398

0800b718 <init_map>:


void init_map(int x, int y)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
//迷路の歩数Mapを初期化する。全体を0xff、引数の座標x,yは0で初期化する

	int i,j;

	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	e013      	b.n	800b750 <init_map+0x38>
	{
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800b728:	2300      	movs	r3, #0
 800b72a:	60bb      	str	r3, [r7, #8]
 800b72c:	e00a      	b.n	800b744 <init_map+0x2c>
		{
			walk_map[i][j] = 255;	//すべて255で埋める
 800b72e:	491f      	ldr	r1, [pc, #124]	; (800b7ac <init_map+0x94>)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	011a      	lsls	r2, r3, #4
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4413      	add	r3, r2
 800b738:	22ff      	movs	r2, #255	; 0xff
 800b73a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	3301      	adds	r3, #1
 800b742:	60bb      	str	r3, [r7, #8]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b0f      	cmp	r3, #15
 800b748:	ddf1      	ble.n	800b72e <init_map+0x16>
	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b0f      	cmp	r3, #15
 800b754:	dde8      	ble.n	800b728 <init_map+0x10>
		}
	}

	walk_map[x][y] = 0;				//ゴール座標の歩数を０に設定
 800b756:	4915      	ldr	r1, [pc, #84]	; (800b7ac <init_map+0x94>)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	011a      	lsls	r2, r3, #4
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	4413      	add	r3, r2
 800b760:	2200      	movs	r2, #0
 800b762:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x][y+1] = 0;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	4910      	ldr	r1, [pc, #64]	; (800b7ac <init_map+0x94>)
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	0112      	lsls	r2, r2, #4
 800b770:	4413      	add	r3, r2
 800b772:	2200      	movs	r2, #0
 800b774:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x+1][y] = 0;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	3301      	adds	r3, #1
 800b77c:	490b      	ldr	r1, [pc, #44]	; (800b7ac <init_map+0x94>)
 800b77e:	011a      	lsls	r2, r3, #4
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	4413      	add	r3, r2
 800b784:	2200      	movs	r2, #0
 800b786:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x+1][y+1] = 0;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	3301      	adds	r3, #1
 800b792:	4906      	ldr	r1, [pc, #24]	; (800b7ac <init_map+0x94>)
 800b794:	0112      	lsls	r2, r2, #4
 800b796:	4413      	add	r3, r2
 800b798:	2200      	movs	r2, #0
 800b79a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	//歩数マップは合ってることにしよう。

}
 800b79e:	bf00      	nop
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	2000ff68 	.word	0x2000ff68

0800b7b0 <make_map>:


void make_map(int x, int y, int mask)	//歩数マップを作成する
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	int i,j;
	_Bool change_flag;			//Map作成終了を見極めるためのフラグ

	init_map(x,y);				//Mapを初期化する
 800b7bc:	68b9      	ldr	r1, [r7, #8]
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f7ff ffaa 	bl	800b718 <init_map>

	do //(6,9)(7,10)に対して、7,11がおかしい。
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	75fb      	strb	r3, [r7, #23]
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	61fb      	str	r3, [r7, #28]
 800b7cc:	e0d8      	b.n	800b980 <make_map+0x1d0>
		{
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	61bb      	str	r3, [r7, #24]
 800b7d2:	e0ce      	b.n	800b972 <make_map+0x1c2>
			{
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800b7d4:	4970      	ldr	r1, [pc, #448]	; (800b998 <make_map+0x1e8>)
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	011a      	lsls	r2, r3, #4
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b7e2:	2bff      	cmp	r3, #255	; 0xff
 800b7e4:	f000 80c1 	beq.w	800b96a <make_map+0x1ba>
				{
					continue;
				}

				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2b0e      	cmp	r3, #14
 800b7ec:	dc2c      	bgt.n	800b848 <make_map+0x98>
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b7ee:	496b      	ldr	r1, [pc, #428]	; (800b99c <make_map+0x1ec>)
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	011a      	lsls	r2, r3, #4
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b7fc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b800:	b2db      	uxtb	r3, r3
 800b802:	461a      	mov	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4013      	ands	r3, r2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d11d      	bne.n	800b848 <make_map+0x98>
					{
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	3301      	adds	r3, #1
 800b810:	4961      	ldr	r1, [pc, #388]	; (800b998 <make_map+0x1e8>)
 800b812:	69fa      	ldr	r2, [r7, #28]
 800b814:	0112      	lsls	r2, r2, #4
 800b816:	4413      	add	r3, r2
 800b818:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b81c:	2bff      	cmp	r3, #255	; 0xff
 800b81e:	d113      	bne.n	800b848 <make_map+0x98>
						{
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800b820:	495d      	ldr	r1, [pc, #372]	; (800b998 <make_map+0x1e8>)
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	011a      	lsls	r2, r3, #4
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	4413      	add	r3, r2
 800b82a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	3301      	adds	r3, #1
 800b832:	3201      	adds	r2, #1
 800b834:	b290      	uxth	r0, r2
 800b836:	4958      	ldr	r1, [pc, #352]	; (800b998 <make_map+0x1e8>)
 800b838:	69fa      	ldr	r2, [r7, #28]
 800b83a:	0112      	lsls	r2, r2, #4
 800b83c:	4413      	add	r3, r2
 800b83e:	4602      	mov	r2, r0
 800b840:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b844:	2301      	movs	r3, #1
 800b846:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	2b0e      	cmp	r3, #14
 800b84c:	dc2c      	bgt.n	800b8a8 <make_map+0xf8>
				{
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800b84e:	4953      	ldr	r1, [pc, #332]	; (800b99c <make_map+0x1ec>)
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	011a      	lsls	r2, r3, #4
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	4413      	add	r3, r2
 800b858:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b85c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b860:	b2db      	uxtb	r3, r3
 800b862:	461a      	mov	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4013      	ands	r3, r2
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d11d      	bne.n	800b8a8 <make_map+0xf8>
					{
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	3301      	adds	r3, #1
 800b870:	4949      	ldr	r1, [pc, #292]	; (800b998 <make_map+0x1e8>)
 800b872:	011a      	lsls	r2, r3, #4
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	4413      	add	r3, r2
 800b878:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b87c:	2bff      	cmp	r3, #255	; 0xff
 800b87e:	d113      	bne.n	800b8a8 <make_map+0xf8>
						{
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800b880:	4945      	ldr	r1, [pc, #276]	; (800b998 <make_map+0x1e8>)
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	011a      	lsls	r2, r3, #4
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	4413      	add	r3, r2
 800b88a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	3301      	adds	r3, #1
 800b892:	3201      	adds	r2, #1
 800b894:	b290      	uxth	r0, r2
 800b896:	4940      	ldr	r1, [pc, #256]	; (800b998 <make_map+0x1e8>)
 800b898:	011a      	lsls	r2, r3, #4
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	4413      	add	r3, r2
 800b89e:	4602      	mov	r2, r0
 800b8a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(j > 0)						//範囲チェック
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dd2c      	ble.n	800b908 <make_map+0x158>
				{
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800b8ae:	493b      	ldr	r1, [pc, #236]	; (800b99c <make_map+0x1ec>)
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	011a      	lsls	r2, r3, #4
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b8bc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d11d      	bne.n	800b908 <make_map+0x158>
					{
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	4931      	ldr	r1, [pc, #196]	; (800b998 <make_map+0x1e8>)
 800b8d2:	69fa      	ldr	r2, [r7, #28]
 800b8d4:	0112      	lsls	r2, r2, #4
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b8dc:	2bff      	cmp	r3, #255	; 0xff
 800b8de:	d113      	bne.n	800b908 <make_map+0x158>
						{
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800b8e0:	492d      	ldr	r1, [pc, #180]	; (800b998 <make_map+0x1e8>)
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	011a      	lsls	r2, r3, #4
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	3201      	adds	r2, #1
 800b8f4:	b290      	uxth	r0, r2
 800b8f6:	4928      	ldr	r1, [pc, #160]	; (800b998 <make_map+0x1e8>)
 800b8f8:	69fa      	ldr	r2, [r7, #28]
 800b8fa:	0112      	lsls	r2, r2, #4
 800b8fc:	4413      	add	r3, r2
 800b8fe:	4602      	mov	r2, r0
 800b900:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b904:	2301      	movs	r3, #1
 800b906:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(i > 0)						//範囲チェック
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	dd2e      	ble.n	800b96c <make_map+0x1bc>
				{
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800b90e:	4923      	ldr	r1, [pc, #140]	; (800b99c <make_map+0x1ec>)
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	011a      	lsls	r2, r3, #4
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	4413      	add	r3, r2
 800b918:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b91c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b920:	b2db      	uxtb	r3, r3
 800b922:	461a      	mov	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4013      	ands	r3, r2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d11f      	bne.n	800b96c <make_map+0x1bc>
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	3b01      	subs	r3, #1
 800b930:	4919      	ldr	r1, [pc, #100]	; (800b998 <make_map+0x1e8>)
 800b932:	011a      	lsls	r2, r3, #4
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	4413      	add	r3, r2
 800b938:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b93c:	2bff      	cmp	r3, #255	; 0xff
 800b93e:	d115      	bne.n	800b96c <make_map+0x1bc>
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800b940:	4915      	ldr	r1, [pc, #84]	; (800b998 <make_map+0x1e8>)
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	011a      	lsls	r2, r3, #4
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	4413      	add	r3, r2
 800b94a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	3b01      	subs	r3, #1
 800b952:	3201      	adds	r2, #1
 800b954:	b290      	uxth	r0, r2
 800b956:	4910      	ldr	r1, [pc, #64]	; (800b998 <make_map+0x1e8>)
 800b958:	011a      	lsls	r2, r3, #4
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	4413      	add	r3, r2
 800b95e:	4602      	mov	r2, r0
 800b960:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b964:	2301      	movs	r3, #1
 800b966:	75fb      	strb	r3, [r7, #23]
 800b968:	e000      	b.n	800b96c <make_map+0x1bc>
					continue;
 800b96a:	bf00      	nop
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	3301      	adds	r3, #1
 800b970:	61bb      	str	r3, [r7, #24]
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2b0f      	cmp	r3, #15
 800b976:	f77f af2d 	ble.w	800b7d4 <make_map+0x24>
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	3301      	adds	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	2b0f      	cmp	r3, #15
 800b984:	f77f af23 	ble.w	800b7ce <make_map+0x1e>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800b988:	7dfb      	ldrb	r3, [r7, #23]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f47f af1a 	bne.w	800b7c4 <make_map+0x14>

}
 800b990:	bf00      	nop
 800b992:	3720      	adds	r7, #32
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	2000ff68 	.word	0x2000ff68
 800b99c:	20010398 	.word	0x20010398

0800b9a0 <wall_ram_print>:
	flash_store_init();

}
//壁データの表示
//北から時計回り
void wall_ram_print(){
 800b9a0:	b5b0      	push	{r4, r5, r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af02      	add	r7, sp, #8

	//迷路
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800b9a6:	230f      	movs	r3, #15
 800b9a8:	607b      	str	r3, [r7, #4]
 800b9aa:	e040      	b.n	800ba2e <wall_ram_print+0x8e>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	603b      	str	r3, [r7, #0]
 800b9b0:	e034      	b.n	800ba1c <wall_ram_print+0x7c>
			//メモリの読み出し
			//北東南西の順に表示
			//北東南西 北東南西 ...
			//4回毎にスペース
		    printf("%d%d%d%d ",Wall[i][j].north, Wall[i][j].east, Wall[i][j].south, Wall[i][j].west);
 800b9b2:	4925      	ldr	r1, [pc, #148]	; (800ba48 <wall_ram_print+0xa8>)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	011a      	lsls	r2, r3, #4
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	491f      	ldr	r1, [pc, #124]	; (800ba48 <wall_ram_print+0xa8>)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	011a      	lsls	r2, r3, #4
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	461c      	mov	r4, r3
 800b9de:	491a      	ldr	r1, [pc, #104]	; (800ba48 <wall_ram_print+0xa8>)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	011a      	lsls	r2, r3, #4
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9ec:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	461d      	mov	r5, r3
 800b9f4:	4914      	ldr	r1, [pc, #80]	; (800ba48 <wall_ram_print+0xa8>)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	011a      	lsls	r2, r3, #4
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800ba02:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	462b      	mov	r3, r5
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4601      	mov	r1, r0
 800ba10:	480e      	ldr	r0, [pc, #56]	; (800ba4c <wall_ram_print+0xac>)
 800ba12:	f00a fa7d 	bl	8015f10 <iprintf>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b0f      	cmp	r3, #15
 800ba20:	ddc7      	ble.n	800b9b2 <wall_ram_print+0x12>

		}
		printf("\r\n");
 800ba22:	480b      	ldr	r0, [pc, #44]	; (800ba50 <wall_ram_print+0xb0>)
 800ba24:	f00a fae8 	bl	8015ff8 <puts>
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	607b      	str	r3, [r7, #4]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dabb      	bge.n	800b9ac <wall_ram_print+0xc>
	}

	printf("\r\n");
 800ba34:	4806      	ldr	r0, [pc, #24]	; (800ba50 <wall_ram_print+0xb0>)
 800ba36:	f00a fadf 	bl	8015ff8 <puts>
	printf("\r\n");
 800ba3a:	4805      	ldr	r0, [pc, #20]	; (800ba50 <wall_ram_print+0xb0>)
 800ba3c:	f00a fadc 	bl	8015ff8 <puts>
}
 800ba40:	bf00      	nop
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bdb0      	pop	{r4, r5, r7, pc}
 800ba48:	20010398 	.word	0x20010398
 800ba4c:	0801a2f4 	.word	0x0801a2f4
 800ba50:	0801a2e0 	.word	0x0801a2e0

0800ba54 <flash_copy_to_ram>:
//	}

}

void flash_copy_to_ram()
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800ba5a:	4b3e      	ldr	r3, [pc, #248]	; (800bb54 <flash_copy_to_ram+0x100>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	61fb      	str	r3, [r7, #28]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800ba60:	2300      	movs	r3, #0
 800ba62:	61bb      	str	r3, [r7, #24]
 800ba64:	e06f      	b.n	800bb46 <flash_copy_to_ram+0xf2>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800ba66:	2300      	movs	r3, #0
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	e066      	b.n	800bb3a <flash_copy_to_ram+0xe6>
			{
				uint32_t wall_data[4]={0};
 800ba6c:	1d3b      	adds	r3, r7, #4
 800ba6e:	2200      	movs	r2, #0
 800ba70:	601a      	str	r2, [r3, #0]
 800ba72:	605a      	str	r2, [r3, #4]
 800ba74:	609a      	str	r2, [r3, #8]
 800ba76:	60da      	str	r2, [r3, #12]
				FLASH_Read_Word(address+0, &wall_data[0]);
 800ba78:	1d3b      	adds	r3, r7, #4
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	69f8      	ldr	r0, [r7, #28]
 800ba7e:	f003 f8ab 	bl	800ebd8 <FLASH_Read_Word>
				FLASH_Read_Word(address+4, &wall_data[1]);
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	1d1a      	adds	r2, r3, #4
 800ba86:	1d3b      	adds	r3, r7, #4
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	f003 f8a3 	bl	800ebd8 <FLASH_Read_Word>
				FLASH_Read_Word(address+8, &wall_data[2]);
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	f103 0208 	add.w	r2, r3, #8
 800ba98:	1d3b      	adds	r3, r7, #4
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f003 f89a 	bl	800ebd8 <FLASH_Read_Word>
				FLASH_Read_Word(address+12, &wall_data[3]);
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	f103 020c 	add.w	r2, r3, #12
 800baaa:	1d3b      	adds	r3, r7, #4
 800baac:	330c      	adds	r3, #12
 800baae:	4619      	mov	r1, r3
 800bab0:	4610      	mov	r0, r2
 800bab2:	f003 f891 	bl	800ebd8 <FLASH_Read_Word>
				Wall[i][j].north = wall_data[0];
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f003 0303 	and.w	r3, r3, #3
 800babc:	b2d8      	uxtb	r0, r3
 800babe:	4926      	ldr	r1, [pc, #152]	; (800bb58 <flash_copy_to_ram+0x104>)
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	011a      	lsls	r2, r3, #4
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	441a      	add	r2, r3
 800bac8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bacc:	f360 0301 	bfi	r3, r0, #0, #2
 800bad0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = wall_data[1];
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f003 0303 	and.w	r3, r3, #3
 800bada:	b2d8      	uxtb	r0, r3
 800badc:	491e      	ldr	r1, [pc, #120]	; (800bb58 <flash_copy_to_ram+0x104>)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	011a      	lsls	r2, r3, #4
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	441a      	add	r2, r3
 800bae6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800baea:	f360 0383 	bfi	r3, r0, #2, #2
 800baee:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = wall_data[2];
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f003 0303 	and.w	r3, r3, #3
 800baf8:	b2d8      	uxtb	r0, r3
 800bafa:	4917      	ldr	r1, [pc, #92]	; (800bb58 <flash_copy_to_ram+0x104>)
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	011a      	lsls	r2, r3, #4
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	441a      	add	r2, r3
 800bb04:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb08:	f360 1305 	bfi	r3, r0, #4, #2
 800bb0c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = wall_data[3];
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f003 0303 	and.w	r3, r3, #3
 800bb16:	b2d8      	uxtb	r0, r3
 800bb18:	490f      	ldr	r1, [pc, #60]	; (800bb58 <flash_copy_to_ram+0x104>)
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	011a      	lsls	r2, r3, #4
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	441a      	add	r2, r3
 800bb22:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb26:	f360 1387 	bfi	r3, r0, #6, #2
 800bb2a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				address += 16;
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	3310      	adds	r3, #16
 800bb32:	61fb      	str	r3, [r7, #28]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	3301      	adds	r3, #1
 800bb38:	617b      	str	r3, [r7, #20]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b0f      	cmp	r3, #15
 800bb3e:	dd95      	ble.n	800ba6c <flash_copy_to_ram+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	3301      	adds	r3, #1
 800bb44:	61bb      	str	r3, [r7, #24]
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	2b0f      	cmp	r3, #15
 800bb4a:	dd8c      	ble.n	800ba66 <flash_copy_to_ram+0x12>
			}
	}

}
 800bb4c:	bf00      	nop
 800bb4e:	3720      	adds	r7, #32
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	0801a5bc 	.word	0x0801a5bc
 800bb58:	20010398 	.word	0x20010398

0800bb5c <InitExplore>:
#include "Debug.h"

#include <main.h>
void TIM5Init();
void InitExplore()
{
 800bb5c:	b590      	push	{r4, r7, lr}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
	PIDReset(A_VELO_PID);

	HAL_Delay(500);
#else
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800bb62:	f003 fb69 	bl	800f238 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800bb66:	f003 fa6d 	bl	800f044 <EncoderStart>
	EmitterON();
 800bb6a:	f003 fa8b 	bl	800f084 <EmitterON>
	ADCStart();
 800bb6e:	f002 ff8b 	bl	800ea88 <ADCStart>
//		HAL_Delay(500);
//		htim2.Init.Prescaler -= 2;
//
//	}
	uint8_t imu_check;
	imu_check = IMU_init();
 800bb72:	f003 f9bb 	bl	800eeec <IMU_init>
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4849      	ldr	r0, [pc, #292]	; (800bca4 <InitExplore+0x148>)
 800bb80:	f00a f9c6 	bl	8015f10 <iprintf>
#if 1 //IMUから値が来なくなる現象の対策
	imu_check =IMU_init();
 800bb84:	f003 f9b2 	bl	800eeec <IMU_init>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4844      	ldr	r0, [pc, #272]	; (800bca4 <InitExplore+0x148>)
 800bb92:	f00a f9bd 	bl	8015f10 <iprintf>
#endif
	HAL_Delay(100);
 800bb96:	2064      	movs	r0, #100	; 0x64
 800bb98:	f004 fb4c 	bl	8010234 <HAL_Delay>

	ZGyro = ReadIMU(0x37, 0x38);
 800bb9c:	2138      	movs	r1, #56	; 0x38
 800bb9e:	2037      	movs	r0, #55	; 0x37
 800bba0:	f003 f916 	bl	800edd0 <ReadIMU>
 800bba4:	eef0 7a40 	vmov.f32	s15, s0
 800bba8:	4b3f      	ldr	r3, [pc, #252]	; (800bca8 <InitExplore+0x14c>)
 800bbaa:	edc3 7a00 	vstr	s15, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800bbae:	4b3e      	ldr	r3, [pc, #248]	; (800bca8 <InitExplore+0x14c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fc fc00 	bl	80083b8 <__aeabi_f2d>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	460c      	mov	r4, r1
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4623      	mov	r3, r4
 800bbc0:	483a      	ldr	r0, [pc, #232]	; (800bcac <InitExplore+0x150>)
 800bbc2:	f00a f9a5 	bl	8015f10 <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	2004      	movs	r0, #4
 800bbca:	f004 f80d 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800bbce:	2100      	movs	r1, #0
 800bbd0:	2005      	movs	r0, #5
 800bbd2:	f004 f809 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	2002      	movs	r0, #2
 800bbda:	f004 f805 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bbde:	2100      	movs	r1, #0
 800bbe0:	2003      	movs	r0, #3
 800bbe2:	f004 f801 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	2001      	movs	r0, #1
 800bbea:	f003 fffd 	bl	800fbe8 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800bbee:	2100      	movs	r1, #0
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	f003 fff9 	bl	800fbe8 <PIDChangeFlag>


	Load_Gain();
 800bbf6:	f003 fd3b 	bl	800f670 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bbfa:	f247 512f 	movw	r1, #29999	; 0x752f
 800bbfe:	482c      	ldr	r0, [pc, #176]	; (800bcb0 <InitExplore+0x154>)
 800bc00:	f003 fbb0 	bl	800f364 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800bc04:	f247 512f 	movw	r1, #29999	; 0x752f
 800bc08:	482a      	ldr	r0, [pc, #168]	; (800bcb4 <InitExplore+0x158>)
 800bc0a:	f003 fbab 	bl	800f364 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800bc0e:	482a      	ldr	r0, [pc, #168]	; (800bcb8 <InitExplore+0x15c>)
 800bc10:	f007 f9f7 	bl	8013002 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800bc14:	4829      	ldr	r0, [pc, #164]	; (800bcbc <InitExplore+0x160>)
 800bc16:	f007 f9f4 	bl	8013002 <HAL_TIM_Base_Start_IT>
		printf("生値%f, 角速度%f ang/s, %f rad/s\r\n",ZGyro,ZGyro/16.4f, AngularV);
	}

#endif

	TargetVelocity[BODY] = 0;
 800bc1a:	4b29      	ldr	r3, [pc, #164]	; (800bcc0 <InitExplore+0x164>)
 800bc1c:	f04f 0200 	mov.w	r2, #0
 800bc20:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800bc22:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <InitExplore+0x168>)
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800bc2a:	4b27      	ldr	r3, [pc, #156]	; (800bcc8 <InitExplore+0x16c>)
 800bc2c:	f04f 0200 	mov.w	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800bc32:	4b26      	ldr	r3, [pc, #152]	; (800bccc <InitExplore+0x170>)
 800bc34:	f04f 0200 	mov.w	r2, #0
 800bc38:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800bc3a:	4b25      	ldr	r3, [pc, #148]	; (800bcd0 <InitExplore+0x174>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800bc40:	4b23      	ldr	r3, [pc, #140]	; (800bcd0 <InitExplore+0x174>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800bc46:	4b22      	ldr	r3, [pc, #136]	; (800bcd0 <InitExplore+0x174>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800bc4c:	f003 f978 	bl	800ef40 <IMU_Calib>
#if 0
	TargetPhoto[SL] = Photo[SL];
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800bc50:	4b20      	ldr	r3, [pc, #128]	; (800bcd4 <InitExplore+0x178>)
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	4a20      	ldr	r2, [pc, #128]	; (800bcd8 <InitExplore+0x17c>)
 800bc56:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800bc58:	4b1e      	ldr	r3, [pc, #120]	; (800bcd4 <InitExplore+0x178>)
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	4a1e      	ldr	r2, [pc, #120]	; (800bcd8 <InitExplore+0x17c>)
 800bc5e:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bc60:	4b1d      	ldr	r3, [pc, #116]	; (800bcd8 <InitExplore+0x17c>)
 800bc62:	ed93 7a02 	vldr	s14, [r3, #8]
 800bc66:	4b1c      	ldr	r3, [pc, #112]	; (800bcd8 <InitExplore+0x17c>)
 800bc68:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc70:	4b1a      	ldr	r3, [pc, #104]	; (800bcdc <InitExplore+0x180>)
 800bc72:	edc3 7a00 	vstr	s15, [r3]

#endif
	PIDReset(L_VELO_PID);
 800bc76:	2004      	movs	r0, #4
 800bc78:	f003 ffcc 	bl	800fc14 <PIDReset>
	PIDReset(R_VELO_PID);
 800bc7c:	2005      	movs	r0, #5
 800bc7e:	f003 ffc9 	bl	800fc14 <PIDReset>

	PIDReset(A_VELO_PID);
 800bc82:	2000      	movs	r0, #0
 800bc84:	f003 ffc6 	bl	800fc14 <PIDReset>
	PIDReset(L_WALL_PID);
 800bc88:	2002      	movs	r0, #2
 800bc8a:	f003 ffc3 	bl	800fc14 <PIDReset>
	PIDReset(R_WALL_PID);
 800bc8e:	2003      	movs	r0, #3
 800bc90:	f003 ffc0 	bl	800fc14 <PIDReset>
	PIDReset(D_WALL_PID);
 800bc94:	2001      	movs	r0, #1
 800bc96:	f003 ffbd 	bl	800fc14 <PIDReset>

#endif
}
 800bc9a:	bf00      	nop
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd90      	pop	{r4, r7, pc}
 800bca2:	bf00      	nop
 800bca4:	0801a304 	.word	0x0801a304
 800bca8:	2000fcd4 	.word	0x2000fcd4
 800bcac:	0801a320 	.word	0x0801a320
 800bcb0:	40000424 	.word	0x40000424
 800bcb4:	40000824 	.word	0x40000824
 800bcb8:	200107e8 	.word	0x200107e8
 800bcbc:	200105a0 	.word	0x200105a0
 800bcc0:	2000fee8 	.word	0x2000fee8
 800bcc4:	2000fef8 	.word	0x2000fef8
 800bcc8:	2000fc28 	.word	0x2000fc28
 800bccc:	2000fc2c 	.word	0x2000fc2c
 800bcd0:	2000ff18 	.word	0x2000ff18
 800bcd4:	2000ff58 	.word	0x2000ff58
 800bcd8:	20010174 	.word	0x20010174
 800bcdc:	2000ff0c 	.word	0x2000ff0c

0800bce0 <InitFastest>:

void InitFastest()
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
	Motor_PWM_Start();
 800bce6:	f003 faa7 	bl	800f238 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800bcea:	f003 f9ab 	bl	800f044 <EncoderStart>
	EmitterON();
 800bcee:	f003 f9c9 	bl	800f084 <EmitterON>
	ADCStart();
 800bcf2:	f002 fec9 	bl	800ea88 <ADCStart>

	uint8_t imu_check;
	imu_check =IMU_init();
 800bcf6:	f003 f8f9 	bl	800eeec <IMU_init>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	4619      	mov	r1, r3
 800bd02:	4838      	ldr	r0, [pc, #224]	; (800bde4 <InitFastest+0x104>)
 800bd04:	f00a f904 	bl	8015f10 <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800bd08:	2100      	movs	r1, #0
 800bd0a:	2004      	movs	r0, #4
 800bd0c:	f003 ff6c 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800bd10:	2100      	movs	r1, #0
 800bd12:	2005      	movs	r0, #5
 800bd14:	f003 ff68 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bd18:	2100      	movs	r1, #0
 800bd1a:	2002      	movs	r0, #2
 800bd1c:	f003 ff64 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bd20:	2100      	movs	r1, #0
 800bd22:	2003      	movs	r0, #3
 800bd24:	f003 ff60 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bd28:	2100      	movs	r1, #0
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	f003 ff5c 	bl	800fbe8 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800bd30:	2100      	movs	r1, #0
 800bd32:	2000      	movs	r0, #0
 800bd34:	f003 ff58 	bl	800fbe8 <PIDChangeFlag>


	Load_Gain();
 800bd38:	f003 fc9a 	bl	800f670 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bd3c:	f247 512f 	movw	r1, #29999	; 0x752f
 800bd40:	4829      	ldr	r0, [pc, #164]	; (800bde8 <InitFastest+0x108>)
 800bd42:	f003 fb0f 	bl	800f364 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800bd46:	f247 512f 	movw	r1, #29999	; 0x752f
 800bd4a:	4828      	ldr	r0, [pc, #160]	; (800bdec <InitFastest+0x10c>)
 800bd4c:	f003 fb0a 	bl	800f364 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800bd50:	4827      	ldr	r0, [pc, #156]	; (800bdf0 <InitFastest+0x110>)
 800bd52:	f007 f956 	bl	8013002 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800bd56:	4827      	ldr	r0, [pc, #156]	; (800bdf4 <InitFastest+0x114>)
 800bd58:	f007 f953 	bl	8013002 <HAL_TIM_Base_Start_IT>


	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800bd5c:	4b26      	ldr	r3, [pc, #152]	; (800bdf8 <InitFastest+0x118>)
 800bd5e:	f04f 0200 	mov.w	r2, #0
 800bd62:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800bd64:	4b25      	ldr	r3, [pc, #148]	; (800bdfc <InitFastest+0x11c>)
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800bd6c:	4b24      	ldr	r3, [pc, #144]	; (800be00 <InitFastest+0x120>)
 800bd6e:	f04f 0200 	mov.w	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800bd74:	4b23      	ldr	r3, [pc, #140]	; (800be04 <InitFastest+0x124>)
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800bd7c:	4b22      	ldr	r3, [pc, #136]	; (800be08 <InitFastest+0x128>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800bd82:	4b21      	ldr	r3, [pc, #132]	; (800be08 <InitFastest+0x128>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800bd88:	4b1f      	ldr	r3, [pc, #124]	; (800be08 <InitFastest+0x128>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800bd8e:	f003 f8d7 	bl	800ef40 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800bd92:	4b1e      	ldr	r3, [pc, #120]	; (800be0c <InitFastest+0x12c>)
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	4a1e      	ldr	r2, [pc, #120]	; (800be10 <InitFastest+0x130>)
 800bd98:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800bd9a:	4b1c      	ldr	r3, [pc, #112]	; (800be0c <InitFastest+0x12c>)
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	4a1c      	ldr	r2, [pc, #112]	; (800be10 <InitFastest+0x130>)
 800bda0:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bda2:	4b1b      	ldr	r3, [pc, #108]	; (800be10 <InitFastest+0x130>)
 800bda4:	ed93 7a02 	vldr	s14, [r3, #8]
 800bda8:	4b19      	ldr	r3, [pc, #100]	; (800be10 <InitFastest+0x130>)
 800bdaa:	edd3 7a01 	vldr	s15, [r3, #4]
 800bdae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdb2:	4b18      	ldr	r3, [pc, #96]	; (800be14 <InitFastest+0x134>)
 800bdb4:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800bdb8:	2004      	movs	r0, #4
 800bdba:	f003 ff2b 	bl	800fc14 <PIDReset>
	PIDReset(R_VELO_PID);
 800bdbe:	2005      	movs	r0, #5
 800bdc0:	f003 ff28 	bl	800fc14 <PIDReset>
	PIDReset(A_VELO_PID);
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	f003 ff25 	bl	800fc14 <PIDReset>
	PIDReset(L_WALL_PID);
 800bdca:	2002      	movs	r0, #2
 800bdcc:	f003 ff22 	bl	800fc14 <PIDReset>
	PIDReset(R_WALL_PID);
 800bdd0:	2003      	movs	r0, #3
 800bdd2:	f003 ff1f 	bl	800fc14 <PIDReset>
	PIDReset(D_WALL_PID);
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	f003 ff1c 	bl	800fc14 <PIDReset>


}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	0801a304 	.word	0x0801a304
 800bde8:	40000424 	.word	0x40000424
 800bdec:	40000824 	.word	0x40000824
 800bdf0:	200107e8 	.word	0x200107e8
 800bdf4:	200105a0 	.word	0x200105a0
 800bdf8:	2000fee8 	.word	0x2000fee8
 800bdfc:	2000fef8 	.word	0x2000fef8
 800be00:	2000fc28 	.word	0x2000fc28
 800be04:	2000fc2c 	.word	0x2000fc2c
 800be08:	2000ff18 	.word	0x2000ff18
 800be0c:	2000ff58 	.word	0x2000ff58
 800be10:	20010174 	.word	0x20010174
 800be14:	2000ff0c 	.word	0x2000ff0c

0800be18 <Debug>:
void Debug()
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800be1e:	f7ff fe9d 	bl	800bb5c <InitExplore>
	InitPosition();
 800be22:	f7fc ffe9 	bl	8008df8 <InitPosition>
	wall_init();
 800be26:	f7ff fabb 	bl	800b3a0 <wall_init>

	TotalPulse[RIGHT] = 0;
 800be2a:	4b37      	ldr	r3, [pc, #220]	; (800bf08 <Debug+0xf0>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800be30:	4b35      	ldr	r3, [pc, #212]	; (800bf08 <Debug+0xf0>)
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800be36:	4b34      	ldr	r3, [pc, #208]	; (800bf08 <Debug+0xf0>)
 800be38:	2200      	movs	r2, #0
 800be3a:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800be3c:	2101      	movs	r1, #1
 800be3e:	2004      	movs	r0, #4
 800be40:	f003 fed2 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800be44:	2101      	movs	r1, #1
 800be46:	2005      	movs	r0, #5
 800be48:	f003 fece 	bl	800fbe8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800be4c:	4b2e      	ldr	r3, [pc, #184]	; (800bf08 <Debug+0xf0>)
 800be4e:	6899      	ldr	r1, [r3, #8]
 800be50:	4b2d      	ldr	r3, [pc, #180]	; (800bf08 <Debug+0xf0>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	4b2c      	ldr	r3, [pc, #176]	; (800bf08 <Debug+0xf0>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	482c      	ldr	r0, [pc, #176]	; (800bf0c <Debug+0xf4>)
 800be5a:	f00a f859 	bl	8015f10 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800be5e:	2100      	movs	r1, #0
 800be60:	2001      	movs	r0, #1
 800be62:	f003 fec1 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800be66:	2100      	movs	r1, #0
 800be68:	2002      	movs	r0, #2
 800be6a:	f003 febd 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800be6e:	2100      	movs	r1, #0
 800be70:	2003      	movs	r0, #3
 800be72:	f003 feb9 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800be76:	2101      	movs	r1, #1
 800be78:	2000      	movs	r0, #0
 800be7a:	f003 feb5 	bl	800fbe8 <PIDChangeFlag>
	ExploreVelocity=0;
 800be7e:	4b24      	ldr	r3, [pc, #144]	; (800bf10 <Debug+0xf8>)
 800be80:	f04f 0200 	mov.w	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800be86:	2003      	movs	r0, #3
 800be88:	f003 f918 	bl	800f0bc <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800be8c:	4b21      	ldr	r3, [pc, #132]	; (800bf14 <Debug+0xfc>)
 800be8e:	2200      	movs	r2, #0
 800be90:	601a      	str	r2, [r3, #0]
		printf("%f, %f, %f, %f\r\n", Photo[FL], Photo[FR], Photo[FL] - Photo[FR],Photo[FL] + Photo[FR] );
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
 800be92:	4b1f      	ldr	r3, [pc, #124]	; (800bf10 <Debug+0xf8>)
 800be94:	4a20      	ldr	r2, [pc, #128]	; (800bf18 <Debug+0x100>)
 800be96:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800be98:	4b20      	ldr	r3, [pc, #128]	; (800bf1c <Debug+0x104>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	709a      	strb	r2, [r3, #2]
	Accel(61.75,ExploreVelocity);
 800be9e:	4b1c      	ldr	r3, [pc, #112]	; (800bf10 <Debug+0xf8>)
 800bea0:	edd3 7a00 	vldr	s15, [r3]
 800bea4:	eef0 0a67 	vmov.f32	s1, s15
 800bea8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800bf20 <Debug+0x108>
 800beac:	f7fe f8a4 	bl	8009ff8 <Accel>
	for(int i=0; i < 1; i++)
 800beb0:	2300      	movs	r3, #0
 800beb2:	607b      	str	r3, [r7, #4]
 800beb4:	e015      	b.n	800bee2 <Debug+0xca>
	{
		Pos.Dir = front;
 800beb6:	4b19      	ldr	r3, [pc, #100]	; (800bf1c <Debug+0x104>)
 800beb8:	2200      	movs	r2, #0
 800beba:	709a      	strb	r2, [r3, #2]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800bebc:	4b14      	ldr	r3, [pc, #80]	; (800bf10 <Debug+0xf8>)
 800bebe:	edd3 7a00 	vldr	s15, [r3]
 800bec2:	4b18      	ldr	r3, [pc, #96]	; (800bf24 <Debug+0x10c>)
 800bec4:	ed93 7a00 	vldr	s14, [r3]
 800bec8:	eeb0 1a47 	vmov.f32	s2, s14
 800becc:	eef0 0a67 	vmov.f32	s1, s15
 800bed0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bf28 <Debug+0x110>
 800bed4:	f7fe fbc4 	bl	800a660 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800bed8:	f7fd fcc6 	bl	8009868 <SlalomRight>
	for(int i=0; i < 1; i++)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3301      	adds	r3, #1
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dde6      	ble.n	800beb6 <Debug+0x9e>

	}
	Pos.Dir = front;
 800bee8:	4b0c      	ldr	r3, [pc, #48]	; (800bf1c <Debug+0x104>)
 800beea:	2200      	movs	r2, #0
 800beec:	709a      	strb	r2, [r3, #2]
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800beee:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <Debug+0x114>)
 800bef0:	f04f 0200 	mov.w	r2, #0
 800bef4:	609a      	str	r2, [r3, #8]
	HAL_Delay(1000);
 800bef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800befa:	f004 f99b 	bl	8010234 <HAL_Delay>
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	2000ff18 	.word	0x2000ff18
 800bf0c:	0801a32c 	.word	0x0801a32c
 800bf10:	20010168 	.word	0x20010168
 800bf14:	2000fedc 	.word	0x2000fedc
 800bf18:	43070000 	.word	0x43070000
 800bf1c:	20000000 	.word	0x20000000
 800bf20:	42770000 	.word	0x42770000
 800bf24:	2000fef4 	.word	0x2000fef4
 800bf28:	42b40000 	.word	0x42b40000
 800bf2c:	2000fee8 	.word	0x2000fee8

0800bf30 <ParameterSetting>:
void ParameterSetting()
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0
	Load_Gain();
 800bf34:	f003 fb9c 	bl	800f670 <Load_Gain>
	Change_Gain();
 800bf38:	f003 fc56 	bl	800f7e8 <Change_Gain>

}
 800bf3c:	bf00      	nop
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800bf44:	4b18      	ldr	r3, [pc, #96]	; (800bfa8 <GainTestRWall+0x68>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bf4a:	f7ff fe07 	bl	800bb5c <InitExplore>
	InitPosition();
 800bf4e:	f7fc ff53 	bl	8008df8 <InitPosition>
	wall_init();
 800bf52:	f7ff fa25 	bl	800b3a0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bf56:	4b15      	ldr	r3, [pc, #84]	; (800bfac <GainTestRWall+0x6c>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bf5c:	4b13      	ldr	r3, [pc, #76]	; (800bfac <GainTestRWall+0x6c>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800bf62:	4b12      	ldr	r3, [pc, #72]	; (800bfac <GainTestRWall+0x6c>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800bf68:	2101      	movs	r1, #1
 800bf6a:	2004      	movs	r0, #4
 800bf6c:	f003 fe3c 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bf70:	2101      	movs	r1, #1
 800bf72:	2005      	movs	r0, #5
 800bf74:	f003 fe38 	bl	800fbe8 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bf78:	2100      	movs	r1, #0
 800bf7a:	2001      	movs	r0, #1
 800bf7c:	f003 fe34 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bf80:	2100      	movs	r1, #0
 800bf82:	2002      	movs	r0, #2
 800bf84:	f003 fe30 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800bf88:	2101      	movs	r1, #1
 800bf8a:	2003      	movs	r0, #3
 800bf8c:	f003 fe2c 	bl	800fbe8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bf90:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <GainTestRWall+0x70>)
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800bf98:	2001      	movs	r0, #1
 800bf9a:	f003 f88f 	bl	800f0bc <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800bf9e:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <GainTestRWall+0x74>)
 800bfa0:	f04f 0200 	mov.w	r2, #0
 800bfa4:	609a      	str	r2, [r3, #8]
 800bfa6:	e7fa      	b.n	800bf9e <GainTestRWall+0x5e>
 800bfa8:	2000fedc 	.word	0x2000fedc
 800bfac:	2000ff18 	.word	0x2000ff18
 800bfb0:	20010168 	.word	0x20010168
 800bfb4:	2000fee8 	.word	0x2000fee8

0800bfb8 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800bfb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfbc:	b086      	sub	sp, #24
 800bfbe:	af06      	add	r7, sp, #24
	IT_mode = EXPLORE;
 800bfc0:	4b2c      	ldr	r3, [pc, #176]	; (800c074 <GainTestDWall+0xbc>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bfc6:	f7ff fdc9 	bl	800bb5c <InitExplore>
	InitPosition();
 800bfca:	f7fc ff15 	bl	8008df8 <InitPosition>
	wall_init();
 800bfce:	f7ff f9e7 	bl	800b3a0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bfd2:	4b29      	ldr	r3, [pc, #164]	; (800c078 <GainTestDWall+0xc0>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bfd8:	4b27      	ldr	r3, [pc, #156]	; (800c078 <GainTestDWall+0xc0>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800bfde:	4b26      	ldr	r3, [pc, #152]	; (800c078 <GainTestDWall+0xc0>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	2004      	movs	r0, #4
 800bfe8:	f003 fdfe 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bfec:	2101      	movs	r1, #1
 800bfee:	2005      	movs	r0, #5
 800bff0:	f003 fdfa 	bl	800fbe8 <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800bff4:	2101      	movs	r1, #1
 800bff6:	2001      	movs	r0, #1
 800bff8:	f003 fdf6 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bffc:	2100      	movs	r1, #0
 800bffe:	2002      	movs	r0, #2
 800c000:	f003 fdf2 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c004:	2100      	movs	r1, #0
 800c006:	2003      	movs	r0, #3
 800c008:	f003 fdee 	bl	800fbe8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c00c:	4b1b      	ldr	r3, [pc, #108]	; (800c07c <GainTestDWall+0xc4>)
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800c014:	2002      	movs	r0, #2
 800c016:	f003 f851 	bl	800f0bc <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800c01a:	4b19      	ldr	r3, [pc, #100]	; (800c080 <GainTestDWall+0xc8>)
 800c01c:	f04f 0200 	mov.w	r2, #0
 800c020:	609a      	str	r2, [r3, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800c022:	4b18      	ldr	r3, [pc, #96]	; (800c084 <GainTestDWall+0xcc>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4618      	mov	r0, r3
 800c028:	f7fc f9c6 	bl	80083b8 <__aeabi_f2d>
 800c02c:	4682      	mov	sl, r0
 800c02e:	468b      	mov	fp, r1
 800c030:	4b14      	ldr	r3, [pc, #80]	; (800c084 <GainTestDWall+0xcc>)
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	4618      	mov	r0, r3
 800c036:	f7fc f9bf 	bl	80083b8 <__aeabi_f2d>
 800c03a:	4604      	mov	r4, r0
 800c03c:	460d      	mov	r5, r1
 800c03e:	4b11      	ldr	r3, [pc, #68]	; (800c084 <GainTestDWall+0xcc>)
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	4618      	mov	r0, r3
 800c044:	f7fc f9b8 	bl	80083b8 <__aeabi_f2d>
 800c048:	4680      	mov	r8, r0
 800c04a:	4689      	mov	r9, r1
 800c04c:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <GainTestDWall+0xcc>)
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	4618      	mov	r0, r3
 800c052:	f7fc f9b1 	bl	80083b8 <__aeabi_f2d>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c05e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c062:	e9cd 4500 	strd	r4, r5, [sp]
 800c066:	4652      	mov	r2, sl
 800c068:	465b      	mov	r3, fp
 800c06a:	4807      	ldr	r0, [pc, #28]	; (800c088 <GainTestDWall+0xd0>)
 800c06c:	f009 ff50 	bl	8015f10 <iprintf>
		TargetVelocity[BODY] = 0;
 800c070:	e7d3      	b.n	800c01a <GainTestDWall+0x62>
 800c072:	bf00      	nop
 800c074:	2000fedc 	.word	0x2000fedc
 800c078:	2000ff18 	.word	0x2000ff18
 800c07c:	20010168 	.word	0x20010168
 800c080:	2000fee8 	.word	0x2000fee8
 800c084:	2000ff58 	.word	0x2000ff58
 800c088:	0801a360 	.word	0x0801a360

0800c08c <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800c090:	4b1a      	ldr	r3, [pc, #104]	; (800c0fc <GainTestAVelo+0x70>)
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]
	InitExplore();
 800c096:	f7ff fd61 	bl	800bb5c <InitExplore>
	InitPosition();
 800c09a:	f7fc fead 	bl	8008df8 <InitPosition>
	wall_init();
 800c09e:	f7ff f97f 	bl	800b3a0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c0a2:	4b17      	ldr	r3, [pc, #92]	; (800c100 <GainTestAVelo+0x74>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c0a8:	4b15      	ldr	r3, [pc, #84]	; (800c100 <GainTestAVelo+0x74>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c0ae:	4b14      	ldr	r3, [pc, #80]	; (800c100 <GainTestAVelo+0x74>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c0b4:	2101      	movs	r1, #1
 800c0b6:	2004      	movs	r0, #4
 800c0b8:	f003 fd96 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c0bc:	2101      	movs	r1, #1
 800c0be:	2005      	movs	r0, #5
 800c0c0:	f003 fd92 	bl	800fbe8 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f003 fd8e 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	f003 fd8a 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	2002      	movs	r0, #2
 800c0d8:	f003 fd86 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c0dc:	2100      	movs	r1, #0
 800c0de:	2003      	movs	r0, #3
 800c0e0:	f003 fd82 	bl	800fbe8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c0e4:	4b07      	ldr	r3, [pc, #28]	; (800c104 <GainTestAVelo+0x78>)
 800c0e6:	f04f 0200 	mov.w	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800c0ec:	2005      	movs	r0, #5
 800c0ee:	f002 ffe5 	bl	800f0bc <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800c0f2:	4b05      	ldr	r3, [pc, #20]	; (800c108 <GainTestAVelo+0x7c>)
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	609a      	str	r2, [r3, #8]
 800c0fa:	e7fa      	b.n	800c0f2 <GainTestAVelo+0x66>
 800c0fc:	2000fedc 	.word	0x2000fedc
 800c100:	2000ff18 	.word	0x2000ff18
 800c104:	20010168 	.word	0x20010168
 800c108:	2000fee8 	.word	0x2000fee8

0800c10c <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800c10c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c110:	b08a      	sub	sp, #40	; 0x28
 800c112:	af08      	add	r7, sp, #32
	IT_mode = WRITINGFREE;
 800c114:	4b3c      	ldr	r3, [pc, #240]	; (800c208 <WritingFree+0xfc>)
 800c116:	2201      	movs	r2, #1
 800c118:	601a      	str	r2, [r3, #0]

	InitExplore();
 800c11a:	f7ff fd1f 	bl	800bb5c <InitExplore>

	printf("3\r\n");
 800c11e:	483b      	ldr	r0, [pc, #236]	; (800c20c <WritingFree+0x100>)
 800c120:	f009 ff6a 	bl	8015ff8 <puts>

	InitPosition();
 800c124:	f7fc fe68 	bl	8008df8 <InitPosition>

	wall_init();
 800c128:	f7ff f93a 	bl	800b3a0 <wall_init>
	printf("4\r\n");
 800c12c:	4838      	ldr	r0, [pc, #224]	; (800c210 <WritingFree+0x104>)
 800c12e:	f009 ff63 	bl	8015ff8 <puts>

	TotalPulse[RIGHT] = 0;
 800c132:	4b38      	ldr	r3, [pc, #224]	; (800c214 <WritingFree+0x108>)
 800c134:	2200      	movs	r2, #0
 800c136:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c138:	4b36      	ldr	r3, [pc, #216]	; (800c214 <WritingFree+0x108>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c13e:	4b35      	ldr	r3, [pc, #212]	; (800c214 <WritingFree+0x108>)
 800c140:	2200      	movs	r2, #0
 800c142:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c144:	2101      	movs	r1, #1
 800c146:	2004      	movs	r0, #4
 800c148:	f003 fd4e 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c14c:	2101      	movs	r1, #1
 800c14e:	2005      	movs	r0, #5
 800c150:	f003 fd4a 	bl	800fbe8 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c154:	2100      	movs	r1, #0
 800c156:	2001      	movs	r0, #1
 800c158:	f003 fd46 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c15c:	2100      	movs	r1, #0
 800c15e:	2002      	movs	r0, #2
 800c160:	f003 fd42 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c164:	2100      	movs	r1, #0
 800c166:	2003      	movs	r0, #3
 800c168:	f003 fd3e 	bl	800fbe8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c16c:	4b2a      	ldr	r3, [pc, #168]	; (800c218 <WritingFree+0x10c>)
 800c16e:	f04f 0200 	mov.w	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800c174:	2007      	movs	r0, #7
 800c176:	f002 ffa1 	bl	800f0bc <ChangeLED>
#else
	while(1)
	{
//		ExploreVelocity=300;
//		GoStraight(9000, ExploreVelocity, 0);
		TargetVelocity[BODY] = 0;
 800c17a:	4b28      	ldr	r3, [pc, #160]	; (800c21c <WritingFree+0x110>)
 800c17c:	f04f 0200 	mov.w	r2, #0
 800c180:	609a      	str	r2, [r3, #8]


		printf("%f, %f, %f, %f, %f\r\n",ZGyro, Photo[FL],Photo[FR],Photo[FL]+Photo[FR],(Photo[FL]+Photo[FR])/2);//壁センサ前のチェック。
 800c182:	4b27      	ldr	r3, [pc, #156]	; (800c220 <WritingFree+0x114>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4618      	mov	r0, r3
 800c188:	f7fc f916 	bl	80083b8 <__aeabi_f2d>
 800c18c:	e9c7 0100 	strd	r0, r1, [r7]
 800c190:	4b24      	ldr	r3, [pc, #144]	; (800c224 <WritingFree+0x118>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4618      	mov	r0, r3
 800c196:	f7fc f90f 	bl	80083b8 <__aeabi_f2d>
 800c19a:	4604      	mov	r4, r0
 800c19c:	460d      	mov	r5, r1
 800c19e:	4b21      	ldr	r3, [pc, #132]	; (800c224 <WritingFree+0x118>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fc f908 	bl	80083b8 <__aeabi_f2d>
 800c1a8:	4680      	mov	r8, r0
 800c1aa:	4689      	mov	r9, r1
 800c1ac:	4b1d      	ldr	r3, [pc, #116]	; (800c224 <WritingFree+0x118>)
 800c1ae:	ed93 7a00 	vldr	s14, [r3]
 800c1b2:	4b1c      	ldr	r3, [pc, #112]	; (800c224 <WritingFree+0x118>)
 800c1b4:	edd3 7a03 	vldr	s15, [r3, #12]
 800c1b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1bc:	ee17 0a90 	vmov	r0, s15
 800c1c0:	f7fc f8fa 	bl	80083b8 <__aeabi_f2d>
 800c1c4:	4682      	mov	sl, r0
 800c1c6:	468b      	mov	fp, r1
 800c1c8:	4b16      	ldr	r3, [pc, #88]	; (800c224 <WritingFree+0x118>)
 800c1ca:	ed93 7a00 	vldr	s14, [r3]
 800c1ce:	4b15      	ldr	r3, [pc, #84]	; (800c224 <WritingFree+0x118>)
 800c1d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c1d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c1dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c1e0:	ee16 0a90 	vmov	r0, s13
 800c1e4:	f7fc f8e8 	bl	80083b8 <__aeabi_f2d>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1f0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800c1f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c1f8:	e9cd 4500 	strd	r4, r5, [sp]
 800c1fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c200:	4809      	ldr	r0, [pc, #36]	; (800c228 <WritingFree+0x11c>)
 800c202:	f009 fe85 	bl	8015f10 <iprintf>
		TargetVelocity[BODY] = 0;
 800c206:	e7b8      	b.n	800c17a <WritingFree+0x6e>
 800c208:	2000fedc 	.word	0x2000fedc
 800c20c:	0801a390 	.word	0x0801a390
 800c210:	0801a394 	.word	0x0801a394
 800c214:	2000ff18 	.word	0x2000ff18
 800c218:	20010168 	.word	0x20010168
 800c21c:	2000fee8 	.word	0x2000fee8
 800c220:	2000fcd4 	.word	0x2000fcd4
 800c224:	2000ff58 	.word	0x2000ff58
 800c228:	0801a398 	.word	0x0801a398

0800c22c <FastestRun>:
	}
	//探索の場合は迷路とステータスの準備
}

void FastestRun()
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af02      	add	r7, sp, #8
	IT_mode = EXPLORE;
 800c232:	4b76      	ldr	r3, [pc, #472]	; (800c40c <FastestRun+0x1e0>)
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//諸々の初期化
	HAL_Delay(250);
 800c238:	20fa      	movs	r0, #250	; 0xfa
 800c23a:	f003 fffb 	bl	8010234 <HAL_Delay>
	Photo[FR] = 0;
 800c23e:	4b74      	ldr	r3, [pc, #464]	; (800c410 <FastestRun+0x1e4>)
 800c240:	f04f 0200 	mov.w	r2, #0
 800c244:	60da      	str	r2, [r3, #12]
	  int8_t mode=1;
 800c246:	2301      	movs	r3, #1
 800c248:	71bb      	strb	r3, [r7, #6]
	  printf("mode : %d\r\n", mode);
 800c24a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c24e:	4619      	mov	r1, r3
 800c250:	4870      	ldr	r0, [pc, #448]	; (800c414 <FastestRun+0x1e8>)
 800c252:	f009 fe5d 	bl	8015f10 <iprintf>
	  ModeSelect( 1, 2, &mode);
 800c256:	1dbb      	adds	r3, r7, #6
 800c258:	461a      	mov	r2, r3
 800c25a:	2102      	movs	r1, #2
 800c25c:	2001      	movs	r0, #1
 800c25e:	f003 fe99 	bl	800ff94 <ModeSelect>
	  Signal( mode );
 800c262:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c266:	4618      	mov	r0, r3
 800c268:	f003 fe42 	bl	800fef0 <Signal>
	  printf("Switch\r\n");
 800c26c:	486a      	ldr	r0, [pc, #424]	; (800c418 <FastestRun+0x1ec>)
 800c26e:	f009 fec3 	bl	8015ff8 <puts>

		HAL_Delay(250);
 800c272:	20fa      	movs	r0, #250	; 0xfa
 800c274:	f003 ffde 	bl	8010234 <HAL_Delay>
		Photo[FR] = 0;
 800c278:	4b65      	ldr	r3, [pc, #404]	; (800c410 <FastestRun+0x1e4>)
 800c27a:	f04f 0200 	mov.w	r2, #0
 800c27e:	60da      	str	r2, [r3, #12]
		  int8_t mode2=1;
 800c280:	2301      	movs	r3, #1
 800c282:	717b      	strb	r3, [r7, #5]
		  printf("mode : %d\r\n", mode2);
 800c284:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c288:	4619      	mov	r1, r3
 800c28a:	4862      	ldr	r0, [pc, #392]	; (800c414 <FastestRun+0x1e8>)
 800c28c:	f009 fe40 	bl	8015f10 <iprintf>
		  ModeSelect( 1, 4, &mode2);
 800c290:	1d7b      	adds	r3, r7, #5
 800c292:	461a      	mov	r2, r3
 800c294:	2104      	movs	r1, #4
 800c296:	2001      	movs	r0, #1
 800c298:	f003 fe7c 	bl	800ff94 <ModeSelect>
		  Signal( mode2 );
 800c29c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f003 fe25 	bl	800fef0 <Signal>
		  printf("Switch\r\n");
 800c2a6:	485c      	ldr	r0, [pc, #368]	; (800c418 <FastestRun+0x1ec>)
 800c2a8:	f009 fea6 	bl	8015ff8 <puts>
	TIM5Init();
 800c2ac:	f001 f988 	bl	800d5c0 <TIM5Init>

	InitFastest();
 800c2b0:	f7ff fd16 	bl	800bce0 <InitFastest>
	InitPosition();
 800c2b4:	f7fc fda0 	bl	8008df8 <InitPosition>


	wall_init();
 800c2b8:	f7ff f872 	bl	800b3a0 <wall_init>

	TotalPulse[RIGHT] = 0;
 800c2bc:	4b57      	ldr	r3, [pc, #348]	; (800c41c <FastestRun+0x1f0>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c2c2:	4b56      	ldr	r3, [pc, #344]	; (800c41c <FastestRun+0x1f0>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c2c8:	4b54      	ldr	r3, [pc, #336]	; (800c41c <FastestRun+0x1f0>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	2004      	movs	r0, #4
 800c2d2:	f003 fc89 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	2005      	movs	r0, #5
 800c2da:	f003 fc85 	bl	800fbe8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c2de:	4b4f      	ldr	r3, [pc, #316]	; (800c41c <FastestRun+0x1f0>)
 800c2e0:	6899      	ldr	r1, [r3, #8]
 800c2e2:	4b4e      	ldr	r3, [pc, #312]	; (800c41c <FastestRun+0x1f0>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	4b4d      	ldr	r3, [pc, #308]	; (800c41c <FastestRun+0x1f0>)
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	484d      	ldr	r0, [pc, #308]	; (800c420 <FastestRun+0x1f4>)
 800c2ec:	f009 fe10 	bl	8015f10 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	2001      	movs	r0, #1
 800c2f4:	f003 fc78 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	2002      	movs	r0, #2
 800c2fc:	f003 fc74 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c300:	2100      	movs	r1, #0
 800c302:	2003      	movs	r0, #3
 800c304:	f003 fc70 	bl	800fbe8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode;
	if(mode == 1)
 800c308:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d105      	bne.n	800c31c <FastestRun+0xf0>
	{
		ExploreVelocity = 400;
 800c310:	4b44      	ldr	r3, [pc, #272]	; (800c424 <FastestRun+0x1f8>)
 800c312:	4a45      	ldr	r2, [pc, #276]	; (800c428 <FastestRun+0x1fc>)
 800c314:	601a      	str	r2, [r3, #0]
		turn_mode = 'T';
 800c316:	2354      	movs	r3, #84	; 0x54
 800c318:	71fb      	strb	r3, [r7, #7]
 800c31a:	e005      	b.n	800c328 <FastestRun+0xfc>
	}
	else if(mode == 2)
 800c31c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c320:	2b02      	cmp	r3, #2
 800c322:	d101      	bne.n	800c328 <FastestRun+0xfc>
	{
		turn_mode = 'S';
 800c324:	2353      	movs	r3, #83	; 0x53
 800c326:	71fb      	strb	r3, [r7, #7]
	}

	switch(mode2)
 800c328:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d84d      	bhi.n	800c3ce <FastestRun+0x1a2>
 800c332:	a201      	add	r2, pc, #4	; (adr r2, 800c338 <FastestRun+0x10c>)
 800c334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c338:	0800c349 	.word	0x0800c349
 800c33c:	0800c375 	.word	0x0800c375
 800c340:	0800c3a1 	.word	0x0800c3a1
 800c344:	0800c3cf 	.word	0x0800c3cf
	{
	case 1:
		ExploreVelocity=90;
 800c348:	4b36      	ldr	r3, [pc, #216]	; (800c424 <FastestRun+0x1f8>)
 800c34a:	4a38      	ldr	r2, [pc, #224]	; (800c42c <FastestRun+0x200>)
 800c34c:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 9;
 800c34e:	4b38      	ldr	r3, [pc, #224]	; (800c430 <FastestRun+0x204>)
 800c350:	4a38      	ldr	r2, [pc, #224]	; (800c434 <FastestRun+0x208>)
 800c352:	601a      	str	r2, [r3, #0]
		Sla.Fol = 13;
 800c354:	4b36      	ldr	r3, [pc, #216]	; (800c430 <FastestRun+0x204>)
 800c356:	4a38      	ldr	r2, [pc, #224]	; (800c438 <FastestRun+0x20c>)
 800c358:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800c35a:	4b35      	ldr	r3, [pc, #212]	; (800c430 <FastestRun+0x204>)
 800c35c:	4a37      	ldr	r2, [pc, #220]	; (800c43c <FastestRun+0x210>)
 800c35e:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c360:	4b33      	ldr	r3, [pc, #204]	; (800c430 <FastestRun+0x204>)
 800c362:	4a37      	ldr	r2, [pc, #220]	; (800c440 <FastestRun+0x214>)
 800c364:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c366:	4b32      	ldr	r3, [pc, #200]	; (800c430 <FastestRun+0x204>)
 800c368:	4a36      	ldr	r2, [pc, #216]	; (800c444 <FastestRun+0x218>)
 800c36a:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c36c:	4b30      	ldr	r3, [pc, #192]	; (800c430 <FastestRun+0x204>)
 800c36e:	4a2f      	ldr	r2, [pc, #188]	; (800c42c <FastestRun+0x200>)
 800c370:	619a      	str	r2, [r3, #24]
		break;
 800c372:	e02c      	b.n	800c3ce <FastestRun+0x1a2>
	case 2:
		//完
		ExploreVelocity=135;
 800c374:	4b2b      	ldr	r3, [pc, #172]	; (800c424 <FastestRun+0x1f8>)
 800c376:	4a34      	ldr	r2, [pc, #208]	; (800c448 <FastestRun+0x21c>)
 800c378:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800c37a:	4b2d      	ldr	r3, [pc, #180]	; (800c430 <FastestRun+0x204>)
 800c37c:	4a33      	ldr	r2, [pc, #204]	; (800c44c <FastestRun+0x220>)
 800c37e:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800c380:	4b2b      	ldr	r3, [pc, #172]	; (800c430 <FastestRun+0x204>)
 800c382:	4a32      	ldr	r2, [pc, #200]	; (800c44c <FastestRun+0x220>)
 800c384:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.0273;
 800c386:	4b2a      	ldr	r3, [pc, #168]	; (800c430 <FastestRun+0x204>)
 800c388:	4a31      	ldr	r2, [pc, #196]	; (800c450 <FastestRun+0x224>)
 800c38a:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c38c:	4b28      	ldr	r3, [pc, #160]	; (800c430 <FastestRun+0x204>)
 800c38e:	4a2c      	ldr	r2, [pc, #176]	; (800c440 <FastestRun+0x214>)
 800c390:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c392:	4b27      	ldr	r3, [pc, #156]	; (800c430 <FastestRun+0x204>)
 800c394:	4a2b      	ldr	r2, [pc, #172]	; (800c444 <FastestRun+0x218>)
 800c396:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c398:	4b25      	ldr	r3, [pc, #148]	; (800c430 <FastestRun+0x204>)
 800c39a:	4a24      	ldr	r2, [pc, #144]	; (800c42c <FastestRun+0x200>)
 800c39c:	619a      	str	r2, [r3, #24]
		break;
 800c39e:	e016      	b.n	800c3ce <FastestRun+0x1a2>
//		Sla.Fol = 10;
//		Sla.Alpha = 0.04478;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		ExploreVelocity=180;
 800c3a0:	4b20      	ldr	r3, [pc, #128]	; (800c424 <FastestRun+0x1f8>)
 800c3a2:	4a2c      	ldr	r2, [pc, #176]	; (800c454 <FastestRun+0x228>)
 800c3a4:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c3a6:	4b22      	ldr	r3, [pc, #136]	; (800c430 <FastestRun+0x204>)
 800c3a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c3ac:	601a      	str	r2, [r3, #0]
		Sla.Fol = 3.5;
 800c3ae:	4b20      	ldr	r3, [pc, #128]	; (800c430 <FastestRun+0x204>)
 800c3b0:	4a29      	ldr	r2, [pc, #164]	; (800c458 <FastestRun+0x22c>)
 800c3b2:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04;
 800c3b4:	4b1e      	ldr	r3, [pc, #120]	; (800c430 <FastestRun+0x204>)
 800c3b6:	4a29      	ldr	r2, [pc, #164]	; (800c45c <FastestRun+0x230>)
 800c3b8:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c3ba:	4b1d      	ldr	r3, [pc, #116]	; (800c430 <FastestRun+0x204>)
 800c3bc:	4a20      	ldr	r2, [pc, #128]	; (800c440 <FastestRun+0x214>)
 800c3be:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c3c0:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <FastestRun+0x204>)
 800c3c2:	4a20      	ldr	r2, [pc, #128]	; (800c444 <FastestRun+0x218>)
 800c3c4:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c3c6:	4b1a      	ldr	r3, [pc, #104]	; (800c430 <FastestRun+0x204>)
 800c3c8:	4a18      	ldr	r2, [pc, #96]	; (800c42c <FastestRun+0x200>)
 800c3ca:	619a      	str	r2, [r3, #24]
		break;
 800c3cc:	bf00      	nop
//		Sla.Theta3 = 90;
		break;

	}

	ChangeLED(4);
 800c3ce:	2004      	movs	r0, #4
 800c3d0:	f002 fe74 	bl	800f0bc <ChangeLED>


	//マップデータの取得。flashから壁データを取得。
	flash_copy_to_ram();
 800c3d4:	f7ff fb3e 	bl	800ba54 <flash_copy_to_ram>
	//最短経路導出(今回は省けそう。)

	//走る
	fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode);
 800c3d8:	79fb      	ldrb	r3, [r7, #7]
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	2304      	movs	r3, #4
 800c3de:	2206      	movs	r2, #6
 800c3e0:	2103      	movs	r1, #3
 800c3e2:	2005      	movs	r0, #5
 800c3e4:	f001 f816 	bl	800d414 <fast_run>

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800c3e8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c460 <FastestRun+0x234>
 800c3ec:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800c464 <FastestRun+0x238>
 800c3f0:	f7fd feca 	bl	800a188 <Decel>
	//終了合図
	Signal(7);
 800c3f4:	2007      	movs	r0, #7
 800c3f6:	f003 fd7b 	bl	800fef0 <Signal>

	while(1)
	{
		HAL_Delay(10*1000);
 800c3fa:	f242 7010 	movw	r0, #10000	; 0x2710
 800c3fe:	f003 ff19 	bl	8010234 <HAL_Delay>
		printf("ログ出力\r\n");
 800c402:	4819      	ldr	r0, [pc, #100]	; (800c468 <FastestRun+0x23c>)
 800c404:	f009 fdf8 	bl	8015ff8 <puts>
		HAL_Delay(10*1000);
 800c408:	e7f7      	b.n	800c3fa <FastestRun+0x1ce>
 800c40a:	bf00      	nop
 800c40c:	2000fedc 	.word	0x2000fedc
 800c410:	2000ff58 	.word	0x2000ff58
 800c414:	0801a3b0 	.word	0x0801a3b0
 800c418:	0801a3bc 	.word	0x0801a3bc
 800c41c:	2000ff18 	.word	0x2000ff18
 800c420:	0801a32c 	.word	0x0801a32c
 800c424:	20010168 	.word	0x20010168
 800c428:	43c80000 	.word	0x43c80000
 800c42c:	42b40000 	.word	0x42b40000
 800c430:	2000ff30 	.word	0x2000ff30
 800c434:	41100000 	.word	0x41100000
 800c438:	41500000 	.word	0x41500000
 800c43c:	3c656042 	.word	0x3c656042
 800c440:	41f00000 	.word	0x41f00000
 800c444:	42700000 	.word	0x42700000
 800c448:	43070000 	.word	0x43070000
 800c44c:	40a00000 	.word	0x40a00000
 800c450:	3cdfa440 	.word	0x3cdfa440
 800c454:	43340000 	.word	0x43340000
 800c458:	40600000 	.word	0x40600000
 800c45c:	3d23d70a 	.word	0x3d23d70a
 800c460:	00000000 	.word	0x00000000
 800c464:	42340000 	.word	0x42340000
 800c468:	0801a3c4 	.word	0x0801a3c4

0800c46c <Explore>:
	}
}
void Explore()
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800c472:	4ba1      	ldr	r3, [pc, #644]	; (800c6f8 <Explore+0x28c>)
 800c474:	2200      	movs	r2, #0
 800c476:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800c478:	2064      	movs	r0, #100	; 0x64
 800c47a:	f003 fedb 	bl	8010234 <HAL_Delay>
	Photo[FR] = 0;
 800c47e:	4b9f      	ldr	r3, [pc, #636]	; (800c6fc <Explore+0x290>)
 800c480:	f04f 0200 	mov.w	r2, #0
 800c484:	60da      	str	r2, [r3, #12]
	int8_t mode=1;
 800c486:	2301      	movs	r3, #1
 800c488:	71bb      	strb	r3, [r7, #6]
		printf("mode : %d\r\n", mode);
 800c48a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c48e:	4619      	mov	r1, r3
 800c490:	489b      	ldr	r0, [pc, #620]	; (800c700 <Explore+0x294>)
 800c492:	f009 fd3d 	bl	8015f10 <iprintf>
	ModeSelect( 1, 2, &mode);
 800c496:	1dbb      	adds	r3, r7, #6
 800c498:	461a      	mov	r2, r3
 800c49a:	2102      	movs	r1, #2
 800c49c:	2001      	movs	r0, #1
 800c49e:	f003 fd79 	bl	800ff94 <ModeSelect>
	Signal( mode );
 800c4a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f003 fd22 	bl	800fef0 <Signal>
		printf("Switch\r\n");
 800c4ac:	4895      	ldr	r0, [pc, #596]	; (800c704 <Explore+0x298>)
 800c4ae:	f009 fda3 	bl	8015ff8 <puts>

	HAL_Delay(100);
 800c4b2:	2064      	movs	r0, #100	; 0x64
 800c4b4:	f003 febe 	bl	8010234 <HAL_Delay>
	Photo[FR] = 0;
 800c4b8:	4b90      	ldr	r3, [pc, #576]	; (800c6fc <Explore+0x290>)
 800c4ba:	f04f 0200 	mov.w	r2, #0
 800c4be:	60da      	str	r2, [r3, #12]
	int8_t mode2=1;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	717b      	strb	r3, [r7, #5]
		printf("mode : %d\r\n", mode2);
 800c4c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	488d      	ldr	r0, [pc, #564]	; (800c700 <Explore+0x294>)
 800c4cc:	f009 fd20 	bl	8015f10 <iprintf>
	ModeSelect( 1, 4, &mode2);
 800c4d0:	1d7b      	adds	r3, r7, #5
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	2104      	movs	r1, #4
 800c4d6:	2001      	movs	r0, #1
 800c4d8:	f003 fd5c 	bl	800ff94 <ModeSelect>
	Signal( mode2 );
 800c4dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f003 fd05 	bl	800fef0 <Signal>
		printf("Switch\r\n");
 800c4e6:	4887      	ldr	r0, [pc, #540]	; (800c704 <Explore+0x298>)
 800c4e8:	f009 fd86 	bl	8015ff8 <puts>

	TIM5Init();
 800c4ec:	f001 f868 	bl	800d5c0 <TIM5Init>
	InitExplore();
 800c4f0:	f7ff fb34 	bl	800bb5c <InitExplore>
		printf("aaa\r\n");
 800c4f4:	4884      	ldr	r0, [pc, #528]	; (800c708 <Explore+0x29c>)
 800c4f6:	f009 fd7f 	bl	8015ff8 <puts>

	InitPosition();
 800c4fa:	f7fc fc7d 	bl	8008df8 <InitPosition>
		printf("bbb\r\n");
 800c4fe:	4883      	ldr	r0, [pc, #524]	; (800c70c <Explore+0x2a0>)
 800c500:	f009 fd7a 	bl	8015ff8 <puts>

	wall_init();
 800c504:	f7fe ff4c 	bl	800b3a0 <wall_init>
		printf("ccc\r\n");
 800c508:	4881      	ldr	r0, [pc, #516]	; (800c710 <Explore+0x2a4>)
 800c50a:	f009 fd75 	bl	8015ff8 <puts>

	TotalPulse[RIGHT] = 0;
 800c50e:	4b81      	ldr	r3, [pc, #516]	; (800c714 <Explore+0x2a8>)
 800c510:	2200      	movs	r2, #0
 800c512:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c514:	4b7f      	ldr	r3, [pc, #508]	; (800c714 <Explore+0x2a8>)
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c51a:	4b7e      	ldr	r3, [pc, #504]	; (800c714 <Explore+0x2a8>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c520:	2101      	movs	r1, #1
 800c522:	2004      	movs	r0, #4
 800c524:	f003 fb60 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c528:	2101      	movs	r1, #1
 800c52a:	2005      	movs	r0, #5
 800c52c:	f003 fb5c 	bl	800fbe8 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c530:	2100      	movs	r1, #0
 800c532:	2001      	movs	r0, #1
 800c534:	f003 fb58 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c538:	2100      	movs	r1, #0
 800c53a:	2002      	movs	r0, #2
 800c53c:	f003 fb54 	bl	800fbe8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c540:	2100      	movs	r1, #0
 800c542:	2003      	movs	r0, #3
 800c544:	f003 fb50 	bl	800fbe8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	ChangeLED(2);
 800c548:	2002      	movs	r0, #2
 800c54a:	f002 fdb7 	bl	800f0bc <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode;
	if(mode == 1)
 800c54e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d105      	bne.n	800c562 <Explore+0xf6>
	{
		turn_mode = 'T';
 800c556:	2354      	movs	r3, #84	; 0x54
 800c558:	71fb      	strb	r3, [r7, #7]
		ExploreVelocity=300;
 800c55a:	4b6f      	ldr	r3, [pc, #444]	; (800c718 <Explore+0x2ac>)
 800c55c:	4a6f      	ldr	r2, [pc, #444]	; (800c71c <Explore+0x2b0>)
 800c55e:	601a      	str	r2, [r3, #0]
 800c560:	e005      	b.n	800c56e <Explore+0x102>
	}
	else if(mode == 2)
 800c562:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c566:	2b02      	cmp	r3, #2
 800c568:	d101      	bne.n	800c56e <Explore+0x102>
	{
		turn_mode = 'S';
 800c56a:	2353      	movs	r3, #83	; 0x53
 800c56c:	71fb      	strb	r3, [r7, #7]
	}

	switch(mode2)
 800c56e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c572:	3b01      	subs	r3, #1
 800c574:	2b03      	cmp	r3, #3
 800c576:	d867      	bhi.n	800c648 <Explore+0x1dc>
 800c578:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <Explore+0x114>)
 800c57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57e:	bf00      	nop
 800c580:	0800c591 	.word	0x0800c591
 800c584:	0800c5bd 	.word	0x0800c5bd
 800c588:	0800c5eb 	.word	0x0800c5eb
 800c58c:	0800c61b 	.word	0x0800c61b
	{
	case 1:
		ExploreVelocity=90;
 800c590:	4b61      	ldr	r3, [pc, #388]	; (800c718 <Explore+0x2ac>)
 800c592:	4a63      	ldr	r2, [pc, #396]	; (800c720 <Explore+0x2b4>)
 800c594:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 9;
 800c596:	4b63      	ldr	r3, [pc, #396]	; (800c724 <Explore+0x2b8>)
 800c598:	4a63      	ldr	r2, [pc, #396]	; (800c728 <Explore+0x2bc>)
 800c59a:	601a      	str	r2, [r3, #0]
		Sla.Fol = 20;
 800c59c:	4b61      	ldr	r3, [pc, #388]	; (800c724 <Explore+0x2b8>)
 800c59e:	4a63      	ldr	r2, [pc, #396]	; (800c72c <Explore+0x2c0>)
 800c5a0:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800c5a2:	4b60      	ldr	r3, [pc, #384]	; (800c724 <Explore+0x2b8>)
 800c5a4:	4a62      	ldr	r2, [pc, #392]	; (800c730 <Explore+0x2c4>)
 800c5a6:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c5a8:	4b5e      	ldr	r3, [pc, #376]	; (800c724 <Explore+0x2b8>)
 800c5aa:	4a62      	ldr	r2, [pc, #392]	; (800c734 <Explore+0x2c8>)
 800c5ac:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c5ae:	4b5d      	ldr	r3, [pc, #372]	; (800c724 <Explore+0x2b8>)
 800c5b0:	4a61      	ldr	r2, [pc, #388]	; (800c738 <Explore+0x2cc>)
 800c5b2:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c5b4:	4b5b      	ldr	r3, [pc, #364]	; (800c724 <Explore+0x2b8>)
 800c5b6:	4a5a      	ldr	r2, [pc, #360]	; (800c720 <Explore+0x2b4>)
 800c5b8:	619a      	str	r2, [r3, #24]
//		Sla.Fol = 12;
//		Sla.Alalpha = 0.0007;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		break;
 800c5ba:	e045      	b.n	800c648 <Explore+0x1dc>
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;



		ExploreVelocity=180;
 800c5bc:	4b56      	ldr	r3, [pc, #344]	; (800c718 <Explore+0x2ac>)
 800c5be:	4a5f      	ldr	r2, [pc, #380]	; (800c73c <Explore+0x2d0>)
 800c5c0:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c5c2:	4b58      	ldr	r3, [pc, #352]	; (800c724 <Explore+0x2b8>)
 800c5c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c5c8:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16.5;
 800c5ca:	4b56      	ldr	r3, [pc, #344]	; (800c724 <Explore+0x2b8>)
 800c5cc:	4a5c      	ldr	r2, [pc, #368]	; (800c740 <Explore+0x2d4>)
 800c5ce:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.043;
 800c5d0:	4b54      	ldr	r3, [pc, #336]	; (800c724 <Explore+0x2b8>)
 800c5d2:	4a5c      	ldr	r2, [pc, #368]	; (800c744 <Explore+0x2d8>)
 800c5d4:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c5d6:	4b53      	ldr	r3, [pc, #332]	; (800c724 <Explore+0x2b8>)
 800c5d8:	4a56      	ldr	r2, [pc, #344]	; (800c734 <Explore+0x2c8>)
 800c5da:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c5dc:	4b51      	ldr	r3, [pc, #324]	; (800c724 <Explore+0x2b8>)
 800c5de:	4a56      	ldr	r2, [pc, #344]	; (800c738 <Explore+0x2cc>)
 800c5e0:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c5e2:	4b50      	ldr	r3, [pc, #320]	; (800c724 <Explore+0x2b8>)
 800c5e4:	4a4e      	ldr	r2, [pc, #312]	; (800c720 <Explore+0x2b4>)
 800c5e6:	619a      	str	r2, [r3, #24]
		break;
 800c5e8:	e02e      	b.n	800c648 <Explore+0x1dc>
	case 3:
		ExploreVelocity=240;
 800c5ea:	4b4b      	ldr	r3, [pc, #300]	; (800c718 <Explore+0x2ac>)
 800c5ec:	4a56      	ldr	r2, [pc, #344]	; (800c748 <Explore+0x2dc>)
 800c5ee:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c5f0:	4b4c      	ldr	r3, [pc, #304]	; (800c724 <Explore+0x2b8>)
 800c5f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c5f6:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16;
 800c5f8:	4b4a      	ldr	r3, [pc, #296]	; (800c724 <Explore+0x2b8>)
 800c5fa:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800c5fe:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.078;
 800c600:	4b48      	ldr	r3, [pc, #288]	; (800c724 <Explore+0x2b8>)
 800c602:	4a52      	ldr	r2, [pc, #328]	; (800c74c <Explore+0x2e0>)
 800c604:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c606:	4b47      	ldr	r3, [pc, #284]	; (800c724 <Explore+0x2b8>)
 800c608:	4a4a      	ldr	r2, [pc, #296]	; (800c734 <Explore+0x2c8>)
 800c60a:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c60c:	4b45      	ldr	r3, [pc, #276]	; (800c724 <Explore+0x2b8>)
 800c60e:	4a4a      	ldr	r2, [pc, #296]	; (800c738 <Explore+0x2cc>)
 800c610:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c612:	4b44      	ldr	r3, [pc, #272]	; (800c724 <Explore+0x2b8>)
 800c614:	4a42      	ldr	r2, [pc, #264]	; (800c720 <Explore+0x2b4>)
 800c616:	619a      	str	r2, [r3, #24]
		break;
 800c618:	e016      	b.n	800c648 <Explore+0x1dc>
	case 4:
		ExploreVelocity=300;
 800c61a:	4b3f      	ldr	r3, [pc, #252]	; (800c718 <Explore+0x2ac>)
 800c61c:	4a3f      	ldr	r2, [pc, #252]	; (800c71c <Explore+0x2b0>)
 800c61e:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c620:	4b40      	ldr	r3, [pc, #256]	; (800c724 <Explore+0x2b8>)
 800c622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c626:	601a      	str	r2, [r3, #0]
		Sla.Fol = 19;
 800c628:	4b3e      	ldr	r3, [pc, #248]	; (800c724 <Explore+0x2b8>)
 800c62a:	4a49      	ldr	r2, [pc, #292]	; (800c750 <Explore+0x2e4>)
 800c62c:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.13;
 800c62e:	4b3d      	ldr	r3, [pc, #244]	; (800c724 <Explore+0x2b8>)
 800c630:	4a48      	ldr	r2, [pc, #288]	; (800c754 <Explore+0x2e8>)
 800c632:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c634:	4b3b      	ldr	r3, [pc, #236]	; (800c724 <Explore+0x2b8>)
 800c636:	4a3f      	ldr	r2, [pc, #252]	; (800c734 <Explore+0x2c8>)
 800c638:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c63a:	4b3a      	ldr	r3, [pc, #232]	; (800c724 <Explore+0x2b8>)
 800c63c:	4a3e      	ldr	r2, [pc, #248]	; (800c738 <Explore+0x2cc>)
 800c63e:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c640:	4b38      	ldr	r3, [pc, #224]	; (800c724 <Explore+0x2b8>)
 800c642:	4a37      	ldr	r2, [pc, #220]	; (800c720 <Explore+0x2b4>)
 800c644:	619a      	str	r2, [r3, #24]
		//		//未

		break;
 800c646:	bf00      	nop

	}
	SearchOrFast = 0;
 800c648:	4b43      	ldr	r3, [pc, #268]	; (800c758 <Explore+0x2ec>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800c64e:	4b43      	ldr	r3, [pc, #268]	; (800c75c <Explore+0x2f0>)
 800c650:	2200      	movs	r2, #0
 800c652:	709a      	strb	r2, [r3, #2]
	Pos.Car = north;
 800c654:	4b41      	ldr	r3, [pc, #260]	; (800c75c <Explore+0x2f0>)
 800c656:	2200      	movs	r2, #0
 800c658:	70da      	strb	r2, [r3, #3]
	Pos.NextX = Pos.X;
 800c65a:	4b40      	ldr	r3, [pc, #256]	; (800c75c <Explore+0x2f0>)
 800c65c:	781a      	ldrb	r2, [r3, #0]
 800c65e:	4b3f      	ldr	r3, [pc, #252]	; (800c75c <Explore+0x2f0>)
 800c660:	719a      	strb	r2, [r3, #6]
	Pos.NextY = Pos.Y + 1;
 800c662:	4b3e      	ldr	r3, [pc, #248]	; (800c75c <Explore+0x2f0>)
 800c664:	785b      	ldrb	r3, [r3, #1]
 800c666:	3301      	adds	r3, #1
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	4b3c      	ldr	r3, [pc, #240]	; (800c75c <Explore+0x2f0>)
 800c66c:	71da      	strb	r2, [r3, #7]
	Pos.NextCar = north;
 800c66e:	4b3b      	ldr	r3, [pc, #236]	; (800c75c <Explore+0x2f0>)
 800c670:	2200      	movs	r2, #0
 800c672:	725a      	strb	r2, [r3, #9]
	dbc = 1;
 800c674:	4b3a      	ldr	r3, [pc, #232]	; (800c760 <Explore+0x2f4>)
 800c676:	2201      	movs	r2, #1
 800c678:	601a      	str	r2, [r3, #0]
	Accel(61.5, ExploreVelocity);
 800c67a:	4b27      	ldr	r3, [pc, #156]	; (800c718 <Explore+0x2ac>)
 800c67c:	edd3 7a00 	vldr	s15, [r3]
 800c680:	eef0 0a67 	vmov.f32	s1, s15
 800c684:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800c764 <Explore+0x2f8>
 800c688:	f7fd fcb6 	bl	8009ff8 <Accel>
 	Pos.X = Pos.NextX;
 800c68c:	4b33      	ldr	r3, [pc, #204]	; (800c75c <Explore+0x2f0>)
 800c68e:	799a      	ldrb	r2, [r3, #6]
 800c690:	4b32      	ldr	r3, [pc, #200]	; (800c75c <Explore+0x2f0>)
 800c692:	701a      	strb	r2, [r3, #0]
    Pos.Y = Pos.NextY;
 800c694:	4b31      	ldr	r3, [pc, #196]	; (800c75c <Explore+0x2f0>)
 800c696:	79da      	ldrb	r2, [r3, #7]
 800c698:	4b30      	ldr	r3, [pc, #192]	; (800c75c <Explore+0x2f0>)
 800c69a:	705a      	strb	r2, [r3, #1]
	Pos.Car = Pos.NextCar;
 800c69c:	4b2f      	ldr	r3, [pc, #188]	; (800c75c <Explore+0x2f0>)
 800c69e:	7a5a      	ldrb	r2, [r3, #9]
 800c6a0:	4b2e      	ldr	r3, [pc, #184]	; (800c75c <Explore+0x2f0>)
 800c6a2:	70da      	strb	r2, [r3, #3]

	while(  !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER) )  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c6a4:	e008      	b.n	800c6b8 <Explore+0x24c>
	{

		ChangeLED(Pos.Car);
 800c6a6:	4b2d      	ldr	r3, [pc, #180]	; (800c75c <Explore+0x2f0>)
 800c6a8:	78db      	ldrb	r3, [r3, #3]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f002 fd06 	bl	800f0bc <ChangeLED>
		KyushinJudge( turn_mode );
 800c6b0:	79fb      	ldrb	r3, [r7, #7]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f85c 	bl	800c770 <KyushinJudge>
	while(  !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER) )  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c6b8:	4b28      	ldr	r3, [pc, #160]	; (800c75c <Explore+0x2f0>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	d9f2      	bls.n	800c6a6 <Explore+0x23a>
 800c6c0:	4b26      	ldr	r3, [pc, #152]	; (800c75c <Explore+0x2f0>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	2b06      	cmp	r3, #6
 800c6c6:	d8ee      	bhi.n	800c6a6 <Explore+0x23a>
 800c6c8:	4b24      	ldr	r3, [pc, #144]	; (800c75c <Explore+0x2f0>)
 800c6ca:	785b      	ldrb	r3, [r3, #1]
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d9ea      	bls.n	800c6a6 <Explore+0x23a>
 800c6d0:	4b22      	ldr	r3, [pc, #136]	; (800c75c <Explore+0x2f0>)
 800c6d2:	785b      	ldrb	r3, [r3, #1]
 800c6d4:	2b04      	cmp	r3, #4
 800c6d6:	d8e6      	bhi.n	800c6a6 <Explore+0x23a>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800c6d8:	eddf 0a23 	vldr	s1, [pc, #140]	; 800c768 <Explore+0x2fc>
 800c6dc:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800c76c <Explore+0x300>
 800c6e0:	f7fd fd52 	bl	800a188 <Decel>
//		printf("total L: %d, total R: %d\r\n",TotalPulse[LEFT],TotalPulse[RIGHT]);
//		HAL_Delay(1000);


	//flashのクリア。
	Flash_clear_sector1();
 800c6e4:	f002 faf6 	bl	800ecd4 <Flash_clear_sector1>
	//マップ書き込み
	flash_store_init();
 800c6e8:	f7fe fdfa 	bl	800b2e0 <flash_store_init>

	//完了の合図
	Signal(7);
 800c6ec:	2007      	movs	r0, #7
 800c6ee:	f003 fbff 	bl	800fef0 <Signal>

	//flashに保存
	while(1)
	{
		wall_ram_print();
 800c6f2:	f7ff f955 	bl	800b9a0 <wall_ram_print>
 800c6f6:	e7fc      	b.n	800c6f2 <Explore+0x286>
 800c6f8:	2000fedc 	.word	0x2000fedc
 800c6fc:	2000ff58 	.word	0x2000ff58
 800c700:	0801a3b0 	.word	0x0801a3b0
 800c704:	0801a3bc 	.word	0x0801a3bc
 800c708:	0801a3d4 	.word	0x0801a3d4
 800c70c:	0801a3dc 	.word	0x0801a3dc
 800c710:	0801a3e4 	.word	0x0801a3e4
 800c714:	2000ff18 	.word	0x2000ff18
 800c718:	20010168 	.word	0x20010168
 800c71c:	43960000 	.word	0x43960000
 800c720:	42b40000 	.word	0x42b40000
 800c724:	2000ff30 	.word	0x2000ff30
 800c728:	41100000 	.word	0x41100000
 800c72c:	41a00000 	.word	0x41a00000
 800c730:	3c656042 	.word	0x3c656042
 800c734:	41f00000 	.word	0x41f00000
 800c738:	42700000 	.word	0x42700000
 800c73c:	43340000 	.word	0x43340000
 800c740:	41840000 	.word	0x41840000
 800c744:	3d3020c5 	.word	0x3d3020c5
 800c748:	43700000 	.word	0x43700000
 800c74c:	3d9fbe77 	.word	0x3d9fbe77
 800c750:	41980000 	.word	0x41980000
 800c754:	3e051eb8 	.word	0x3e051eb8
 800c758:	20010598 	.word	0x20010598
 800c75c:	20000000 	.word	0x20000000
 800c760:	2000fc14 	.word	0x2000fc14
 800c764:	42760000 	.word	0x42760000
 800c768:	00000000 	.word	0x00000000
 800c76c:	42340000 	.word	0x42340000

0800c770 <KyushinJudge>:
int SearchOrFast;

void AdachiJudge(){
}
void KyushinJudge(char turn_mode)
{
 800c770:	b590      	push	{r4, r7, lr}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	71fb      	strb	r3, [r7, #7]
	//歩数マップから進行方向を導き出すのは、アクションが終わった後、座標と方角が更新されてから。
	switch(Pos.Car)
 800c77a:	4b8d      	ldr	r3, [pc, #564]	; (800c9b0 <KyushinJudge+0x240>)
 800c77c:	78db      	ldrb	r3, [r3, #3]
 800c77e:	2b03      	cmp	r3, #3
 800c780:	f200 8445 	bhi.w	800d00e <KyushinJudge+0x89e>
 800c784:	a201      	add	r2, pc, #4	; (adr r2, 800c78c <KyushinJudge+0x1c>)
 800c786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78a:	bf00      	nop
 800c78c:	0800c79d 	.word	0x0800c79d
 800c790:	0800c9bd 	.word	0x0800c9bd
 800c794:	0800cbdd 	.word	0x0800cbdd
 800c798:	0800cdfd 	.word	0x0800cdfd
	{
		  case north:
			  if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800c79c:	4b84      	ldr	r3, [pc, #528]	; (800c9b0 <KyushinJudge+0x240>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	4b83      	ldr	r3, [pc, #524]	; (800c9b0 <KyushinJudge+0x240>)
 800c7a4:	785b      	ldrb	r3, [r3, #1]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4a82      	ldr	r2, [pc, #520]	; (800c9b4 <KyushinJudge+0x244>)
 800c7aa:	0103      	lsls	r3, r0, #4
 800c7ac:	440b      	add	r3, r1
 800c7ae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c7b2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d13c      	bne.n	800c836 <KyushinJudge+0xc6>
 800c7bc:	4b7c      	ldr	r3, [pc, #496]	; (800c9b0 <KyushinJudge+0x240>)
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4b7b      	ldr	r3, [pc, #492]	; (800c9b0 <KyushinJudge+0x240>)
 800c7c4:	785b      	ldrb	r3, [r3, #1]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	497b      	ldr	r1, [pc, #492]	; (800c9b8 <KyushinJudge+0x248>)
 800c7ca:	0112      	lsls	r2, r2, #4
 800c7cc:	4413      	add	r3, r2
 800c7ce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c7d2:	4b77      	ldr	r3, [pc, #476]	; (800c9b0 <KyushinJudge+0x240>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	461c      	mov	r4, r3
 800c7d8:	4b75      	ldr	r3, [pc, #468]	; (800c9b0 <KyushinJudge+0x240>)
 800c7da:	785b      	ldrb	r3, [r3, #1]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	4976      	ldr	r1, [pc, #472]	; (800c9b8 <KyushinJudge+0x248>)
 800c7e0:	0123      	lsls	r3, r4, #4
 800c7e2:	4403      	add	r3, r0
 800c7e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d224      	bcs.n	800c836 <KyushinJudge+0xc6>
 800c7ec:	4b70      	ldr	r3, [pc, #448]	; (800c9b0 <KyushinJudge+0x240>)
 800c7ee:	785b      	ldrb	r3, [r3, #1]
 800c7f0:	2b0e      	cmp	r3, #14
 800c7f2:	d820      	bhi.n	800c836 <KyushinJudge+0xc6>
				  //前北
				  Pos.Dir = front;
 800c7f4:	4b6e      	ldr	r3, [pc, #440]	; (800c9b0 <KyushinJudge+0x240>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c7fa:	4b6d      	ldr	r3, [pc, #436]	; (800c9b0 <KyushinJudge+0x240>)
 800c7fc:	781a      	ldrb	r2, [r3, #0]
 800c7fe:	4b6c      	ldr	r3, [pc, #432]	; (800c9b0 <KyushinJudge+0x240>)
 800c800:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800c802:	4b6b      	ldr	r3, [pc, #428]	; (800c9b0 <KyushinJudge+0x240>)
 800c804:	785b      	ldrb	r3, [r3, #1]
 800c806:	3301      	adds	r3, #1
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	4b69      	ldr	r3, [pc, #420]	; (800c9b0 <KyushinJudge+0x240>)
 800c80c:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800c80e:	4b68      	ldr	r3, [pc, #416]	; (800c9b0 <KyushinJudge+0x240>)
 800c810:	2200      	movs	r2, #0
 800c812:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c814:	79fb      	ldrb	r3, [r7, #7]
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe f8d2 	bl	800a9c0 <SelectAction>
				  Pos.Car = Pos.NextCar;
 800c81c:	4b64      	ldr	r3, [pc, #400]	; (800c9b0 <KyushinJudge+0x240>)
 800c81e:	7a5a      	ldrb	r2, [r3, #9]
 800c820:	4b63      	ldr	r3, [pc, #396]	; (800c9b0 <KyushinJudge+0x240>)
 800c822:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c824:	4b62      	ldr	r3, [pc, #392]	; (800c9b0 <KyushinJudge+0x240>)
 800c826:	799a      	ldrb	r2, [r3, #6]
 800c828:	4b61      	ldr	r3, [pc, #388]	; (800c9b0 <KyushinJudge+0x240>)
 800c82a:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c82c:	4b60      	ldr	r3, [pc, #384]	; (800c9b0 <KyushinJudge+0x240>)
 800c82e:	79da      	ldrb	r2, [r3, #7]
 800c830:	4b5f      	ldr	r3, [pc, #380]	; (800c9b0 <KyushinJudge+0x240>)
 800c832:	705a      	strb	r2, [r3, #1]
 800c834:	e0ba      	b.n	800c9ac <KyushinJudge+0x23c>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800c836:	4b5e      	ldr	r3, [pc, #376]	; (800c9b0 <KyushinJudge+0x240>)
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	4618      	mov	r0, r3
 800c83c:	4b5c      	ldr	r3, [pc, #368]	; (800c9b0 <KyushinJudge+0x240>)
 800c83e:	785b      	ldrb	r3, [r3, #1]
 800c840:	4619      	mov	r1, r3
 800c842:	4a5c      	ldr	r2, [pc, #368]	; (800c9b4 <KyushinJudge+0x244>)
 800c844:	0103      	lsls	r3, r0, #4
 800c846:	440b      	add	r3, r1
 800c848:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c84c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d13c      	bne.n	800c8d0 <KyushinJudge+0x160>
 800c856:	4b56      	ldr	r3, [pc, #344]	; (800c9b0 <KyushinJudge+0x240>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	4a54      	ldr	r2, [pc, #336]	; (800c9b0 <KyushinJudge+0x240>)
 800c85e:	7852      	ldrb	r2, [r2, #1]
 800c860:	4611      	mov	r1, r2
 800c862:	4a55      	ldr	r2, [pc, #340]	; (800c9b8 <KyushinJudge+0x248>)
 800c864:	011b      	lsls	r3, r3, #4
 800c866:	440b      	add	r3, r1
 800c868:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c86c:	4b50      	ldr	r3, [pc, #320]	; (800c9b0 <KyushinJudge+0x240>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	461c      	mov	r4, r3
 800c872:	4b4f      	ldr	r3, [pc, #316]	; (800c9b0 <KyushinJudge+0x240>)
 800c874:	785b      	ldrb	r3, [r3, #1]
 800c876:	4618      	mov	r0, r3
 800c878:	494f      	ldr	r1, [pc, #316]	; (800c9b8 <KyushinJudge+0x248>)
 800c87a:	0123      	lsls	r3, r4, #4
 800c87c:	4403      	add	r3, r0
 800c87e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c882:	429a      	cmp	r2, r3
 800c884:	d224      	bcs.n	800c8d0 <KyushinJudge+0x160>
 800c886:	4b4a      	ldr	r3, [pc, #296]	; (800c9b0 <KyushinJudge+0x240>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d020      	beq.n	800c8d0 <KyushinJudge+0x160>
				  //左西
    			  Pos.Dir = left;
 800c88e:	4b48      	ldr	r3, [pc, #288]	; (800c9b0 <KyushinJudge+0x240>)
 800c890:	2203      	movs	r2, #3
 800c892:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X - 1;
 800c894:	4b46      	ldr	r3, [pc, #280]	; (800c9b0 <KyushinJudge+0x240>)
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	3b01      	subs	r3, #1
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	4b44      	ldr	r3, [pc, #272]	; (800c9b0 <KyushinJudge+0x240>)
 800c89e:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y;
 800c8a0:	4b43      	ldr	r3, [pc, #268]	; (800c9b0 <KyushinJudge+0x240>)
 800c8a2:	785a      	ldrb	r2, [r3, #1]
 800c8a4:	4b42      	ldr	r3, [pc, #264]	; (800c9b0 <KyushinJudge+0x240>)
 800c8a6:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = west;
 800c8a8:	4b41      	ldr	r3, [pc, #260]	; (800c9b0 <KyushinJudge+0x240>)
 800c8aa:	2203      	movs	r2, #3
 800c8ac:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800c8ae:	79fb      	ldrb	r3, [r7, #7]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fe f885 	bl	800a9c0 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800c8b6:	4b3e      	ldr	r3, [pc, #248]	; (800c9b0 <KyushinJudge+0x240>)
 800c8b8:	7a5a      	ldrb	r2, [r3, #9]
 800c8ba:	4b3d      	ldr	r3, [pc, #244]	; (800c9b0 <KyushinJudge+0x240>)
 800c8bc:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c8be:	4b3c      	ldr	r3, [pc, #240]	; (800c9b0 <KyushinJudge+0x240>)
 800c8c0:	799a      	ldrb	r2, [r3, #6]
 800c8c2:	4b3b      	ldr	r3, [pc, #236]	; (800c9b0 <KyushinJudge+0x240>)
 800c8c4:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c8c6:	4b3a      	ldr	r3, [pc, #232]	; (800c9b0 <KyushinJudge+0x240>)
 800c8c8:	79da      	ldrb	r2, [r3, #7]
 800c8ca:	4b39      	ldr	r3, [pc, #228]	; (800c9b0 <KyushinJudge+0x240>)
 800c8cc:	705a      	strb	r2, [r3, #1]
 800c8ce:	e06d      	b.n	800c9ac <KyushinJudge+0x23c>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X <  NUMBER_OF_SQUARES-1){
 800c8d0:	4b37      	ldr	r3, [pc, #220]	; (800c9b0 <KyushinJudge+0x240>)
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	4b36      	ldr	r3, [pc, #216]	; (800c9b0 <KyushinJudge+0x240>)
 800c8d8:	785b      	ldrb	r3, [r3, #1]
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4a35      	ldr	r2, [pc, #212]	; (800c9b4 <KyushinJudge+0x244>)
 800c8de:	0103      	lsls	r3, r0, #4
 800c8e0:	440b      	add	r3, r1
 800c8e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c8e6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d13c      	bne.n	800c96a <KyushinJudge+0x1fa>
 800c8f0:	4b2f      	ldr	r3, [pc, #188]	; (800c9b0 <KyushinJudge+0x240>)
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	4a2e      	ldr	r2, [pc, #184]	; (800c9b0 <KyushinJudge+0x240>)
 800c8f8:	7852      	ldrb	r2, [r2, #1]
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	4a2e      	ldr	r2, [pc, #184]	; (800c9b8 <KyushinJudge+0x248>)
 800c8fe:	011b      	lsls	r3, r3, #4
 800c900:	440b      	add	r3, r1
 800c902:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c906:	4b2a      	ldr	r3, [pc, #168]	; (800c9b0 <KyushinJudge+0x240>)
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	461c      	mov	r4, r3
 800c90c:	4b28      	ldr	r3, [pc, #160]	; (800c9b0 <KyushinJudge+0x240>)
 800c90e:	785b      	ldrb	r3, [r3, #1]
 800c910:	4618      	mov	r0, r3
 800c912:	4929      	ldr	r1, [pc, #164]	; (800c9b8 <KyushinJudge+0x248>)
 800c914:	0123      	lsls	r3, r4, #4
 800c916:	4403      	add	r3, r0
 800c918:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d224      	bcs.n	800c96a <KyushinJudge+0x1fa>
 800c920:	4b23      	ldr	r3, [pc, #140]	; (800c9b0 <KyushinJudge+0x240>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b0e      	cmp	r3, #14
 800c926:	d820      	bhi.n	800c96a <KyushinJudge+0x1fa>
				  //右東
				  Pos.Dir = right;//この方角で右と決まった時点で次の座標が決まっている
 800c928:	4b21      	ldr	r3, [pc, #132]	; (800c9b0 <KyushinJudge+0x240>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800c92e:	4b20      	ldr	r3, [pc, #128]	; (800c9b0 <KyushinJudge+0x240>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	3301      	adds	r3, #1
 800c934:	b2da      	uxtb	r2, r3
 800c936:	4b1e      	ldr	r3, [pc, #120]	; (800c9b0 <KyushinJudge+0x240>)
 800c938:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c93a:	4b1d      	ldr	r3, [pc, #116]	; (800c9b0 <KyushinJudge+0x240>)
 800c93c:	785a      	ldrb	r2, [r3, #1]
 800c93e:	4b1c      	ldr	r3, [pc, #112]	; (800c9b0 <KyushinJudge+0x240>)
 800c940:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800c942:	4b1b      	ldr	r3, [pc, #108]	; (800c9b0 <KyushinJudge+0x240>)
 800c944:	2201      	movs	r2, #1
 800c946:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fe f838 	bl	800a9c0 <SelectAction>
		          Pos.Car = Pos.NextCar;
 800c950:	4b17      	ldr	r3, [pc, #92]	; (800c9b0 <KyushinJudge+0x240>)
 800c952:	7a5a      	ldrb	r2, [r3, #9]
 800c954:	4b16      	ldr	r3, [pc, #88]	; (800c9b0 <KyushinJudge+0x240>)
 800c956:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c958:	4b15      	ldr	r3, [pc, #84]	; (800c9b0 <KyushinJudge+0x240>)
 800c95a:	799a      	ldrb	r2, [r3, #6]
 800c95c:	4b14      	ldr	r3, [pc, #80]	; (800c9b0 <KyushinJudge+0x240>)
 800c95e:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c960:	4b13      	ldr	r3, [pc, #76]	; (800c9b0 <KyushinJudge+0x240>)
 800c962:	79da      	ldrb	r2, [r3, #7]
 800c964:	4b12      	ldr	r3, [pc, #72]	; (800c9b0 <KyushinJudge+0x240>)
 800c966:	705a      	strb	r2, [r3, #1]
 800c968:	e020      	b.n	800c9ac <KyushinJudge+0x23c>
			  }
			  else {
				  Pos.Dir = back;
 800c96a:	4b11      	ldr	r3, [pc, #68]	; (800c9b0 <KyushinJudge+0x240>)
 800c96c:	2202      	movs	r2, #2
 800c96e:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c970:	4b0f      	ldr	r3, [pc, #60]	; (800c9b0 <KyushinJudge+0x240>)
 800c972:	781a      	ldrb	r2, [r3, #0]
 800c974:	4b0e      	ldr	r3, [pc, #56]	; (800c9b0 <KyushinJudge+0x240>)
 800c976:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800c978:	4b0d      	ldr	r3, [pc, #52]	; (800c9b0 <KyushinJudge+0x240>)
 800c97a:	785b      	ldrb	r3, [r3, #1]
 800c97c:	3b01      	subs	r3, #1
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	4b0b      	ldr	r3, [pc, #44]	; (800c9b0 <KyushinJudge+0x240>)
 800c982:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800c984:	4b0a      	ldr	r3, [pc, #40]	; (800c9b0 <KyushinJudge+0x240>)
 800c986:	2202      	movs	r2, #2
 800c988:	725a      	strb	r2, [r3, #9]
				  //後南
				  SelectAction(turn_mode);
 800c98a:	79fb      	ldrb	r3, [r7, #7]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fe f817 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c992:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <KyushinJudge+0x240>)
 800c994:	7a5a      	ldrb	r2, [r3, #9]
 800c996:	4b06      	ldr	r3, [pc, #24]	; (800c9b0 <KyushinJudge+0x240>)
 800c998:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c99a:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <KyushinJudge+0x240>)
 800c99c:	799a      	ldrb	r2, [r3, #6]
 800c99e:	4b04      	ldr	r3, [pc, #16]	; (800c9b0 <KyushinJudge+0x240>)
 800c9a0:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c9a2:	4b03      	ldr	r3, [pc, #12]	; (800c9b0 <KyushinJudge+0x240>)
 800c9a4:	79da      	ldrb	r2, [r3, #7]
 800c9a6:	4b02      	ldr	r3, [pc, #8]	; (800c9b0 <KyushinJudge+0x240>)
 800c9a8:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c9aa:	e331      	b.n	800d010 <KyushinJudge+0x8a0>
 800c9ac:	e330      	b.n	800d010 <KyushinJudge+0x8a0>
 800c9ae:	bf00      	nop
 800c9b0:	20000000 	.word	0x20000000
 800c9b4:	20010398 	.word	0x20010398
 800c9b8:	2000ff68 	.word	0x2000ff68

		  case east:

			  if(Wall[Pos.X][Pos.Y].east == NOWALL && walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800c9bc:	4b84      	ldr	r3, [pc, #528]	; (800cbd0 <KyushinJudge+0x460>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	4b83      	ldr	r3, [pc, #524]	; (800cbd0 <KyushinJudge+0x460>)
 800c9c4:	785b      	ldrb	r3, [r3, #1]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	4a82      	ldr	r2, [pc, #520]	; (800cbd4 <KyushinJudge+0x464>)
 800c9ca:	0103      	lsls	r3, r0, #4
 800c9cc:	440b      	add	r3, r1
 800c9ce:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c9d2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d13c      	bne.n	800ca56 <KyushinJudge+0x2e6>
 800c9dc:	4b7c      	ldr	r3, [pc, #496]	; (800cbd0 <KyushinJudge+0x460>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	4a7b      	ldr	r2, [pc, #492]	; (800cbd0 <KyushinJudge+0x460>)
 800c9e4:	7852      	ldrb	r2, [r2, #1]
 800c9e6:	4611      	mov	r1, r2
 800c9e8:	4a7b      	ldr	r2, [pc, #492]	; (800cbd8 <KyushinJudge+0x468>)
 800c9ea:	011b      	lsls	r3, r3, #4
 800c9ec:	440b      	add	r3, r1
 800c9ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c9f2:	4b77      	ldr	r3, [pc, #476]	; (800cbd0 <KyushinJudge+0x460>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	461c      	mov	r4, r3
 800c9f8:	4b75      	ldr	r3, [pc, #468]	; (800cbd0 <KyushinJudge+0x460>)
 800c9fa:	785b      	ldrb	r3, [r3, #1]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	4976      	ldr	r1, [pc, #472]	; (800cbd8 <KyushinJudge+0x468>)
 800ca00:	0123      	lsls	r3, r4, #4
 800ca02:	4403      	add	r3, r0
 800ca04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d224      	bcs.n	800ca56 <KyushinJudge+0x2e6>
 800ca0c:	4b70      	ldr	r3, [pc, #448]	; (800cbd0 <KyushinJudge+0x460>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b0e      	cmp	r3, #14
 800ca12:	d820      	bhi.n	800ca56 <KyushinJudge+0x2e6>
				  //前東
				  Pos.Dir = front;
 800ca14:	4b6e      	ldr	r3, [pc, #440]	; (800cbd0 <KyushinJudge+0x460>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800ca1a:	4b6d      	ldr	r3, [pc, #436]	; (800cbd0 <KyushinJudge+0x460>)
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	4b6b      	ldr	r3, [pc, #428]	; (800cbd0 <KyushinJudge+0x460>)
 800ca24:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800ca26:	4b6a      	ldr	r3, [pc, #424]	; (800cbd0 <KyushinJudge+0x460>)
 800ca28:	785a      	ldrb	r2, [r3, #1]
 800ca2a:	4b69      	ldr	r3, [pc, #420]	; (800cbd0 <KyushinJudge+0x460>)
 800ca2c:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800ca2e:	4b68      	ldr	r3, [pc, #416]	; (800cbd0 <KyushinJudge+0x460>)
 800ca30:	2201      	movs	r2, #1
 800ca32:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800ca34:	79fb      	ldrb	r3, [r7, #7]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fd ffc2 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800ca3c:	4b64      	ldr	r3, [pc, #400]	; (800cbd0 <KyushinJudge+0x460>)
 800ca3e:	7a5a      	ldrb	r2, [r3, #9]
 800ca40:	4b63      	ldr	r3, [pc, #396]	; (800cbd0 <KyushinJudge+0x460>)
 800ca42:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800ca44:	4b62      	ldr	r3, [pc, #392]	; (800cbd0 <KyushinJudge+0x460>)
 800ca46:	799a      	ldrb	r2, [r3, #6]
 800ca48:	4b61      	ldr	r3, [pc, #388]	; (800cbd0 <KyushinJudge+0x460>)
 800ca4a:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800ca4c:	4b60      	ldr	r3, [pc, #384]	; (800cbd0 <KyushinJudge+0x460>)
 800ca4e:	79da      	ldrb	r2, [r3, #7]
 800ca50:	4b5f      	ldr	r3, [pc, #380]	; (800cbd0 <KyushinJudge+0x460>)
 800ca52:	705a      	strb	r2, [r3, #1]
 800ca54:	e0ba      	b.n	800cbcc <KyushinJudge+0x45c>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800ca56:	4b5e      	ldr	r3, [pc, #376]	; (800cbd0 <KyushinJudge+0x460>)
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	4b5c      	ldr	r3, [pc, #368]	; (800cbd0 <KyushinJudge+0x460>)
 800ca5e:	785b      	ldrb	r3, [r3, #1]
 800ca60:	4619      	mov	r1, r3
 800ca62:	4a5c      	ldr	r2, [pc, #368]	; (800cbd4 <KyushinJudge+0x464>)
 800ca64:	0103      	lsls	r3, r0, #4
 800ca66:	440b      	add	r3, r1
 800ca68:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ca6c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d13c      	bne.n	800caf0 <KyushinJudge+0x380>
 800ca76:	4b56      	ldr	r3, [pc, #344]	; (800cbd0 <KyushinJudge+0x460>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	4b54      	ldr	r3, [pc, #336]	; (800cbd0 <KyushinJudge+0x460>)
 800ca7e:	785b      	ldrb	r3, [r3, #1]
 800ca80:	3301      	adds	r3, #1
 800ca82:	4955      	ldr	r1, [pc, #340]	; (800cbd8 <KyushinJudge+0x468>)
 800ca84:	0112      	lsls	r2, r2, #4
 800ca86:	4413      	add	r3, r2
 800ca88:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ca8c:	4b50      	ldr	r3, [pc, #320]	; (800cbd0 <KyushinJudge+0x460>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	461c      	mov	r4, r3
 800ca92:	4b4f      	ldr	r3, [pc, #316]	; (800cbd0 <KyushinJudge+0x460>)
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	4618      	mov	r0, r3
 800ca98:	494f      	ldr	r1, [pc, #316]	; (800cbd8 <KyushinJudge+0x468>)
 800ca9a:	0123      	lsls	r3, r4, #4
 800ca9c:	4403      	add	r3, r0
 800ca9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d224      	bcs.n	800caf0 <KyushinJudge+0x380>
 800caa6:	4b4a      	ldr	r3, [pc, #296]	; (800cbd0 <KyushinJudge+0x460>)
 800caa8:	785b      	ldrb	r3, [r3, #1]
 800caaa:	2b0e      	cmp	r3, #14
 800caac:	d820      	bhi.n	800caf0 <KyushinJudge+0x380>
				  //左?��?

    			  Pos.Dir = left;
 800caae:	4b48      	ldr	r3, [pc, #288]	; (800cbd0 <KyushinJudge+0x460>)
 800cab0:	2203      	movs	r2, #3
 800cab2:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X;
 800cab4:	4b46      	ldr	r3, [pc, #280]	; (800cbd0 <KyushinJudge+0x460>)
 800cab6:	781a      	ldrb	r2, [r3, #0]
 800cab8:	4b45      	ldr	r3, [pc, #276]	; (800cbd0 <KyushinJudge+0x460>)
 800caba:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y+1;
 800cabc:	4b44      	ldr	r3, [pc, #272]	; (800cbd0 <KyushinJudge+0x460>)
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	4b42      	ldr	r3, [pc, #264]	; (800cbd0 <KyushinJudge+0x460>)
 800cac6:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = north;
 800cac8:	4b41      	ldr	r3, [pc, #260]	; (800cbd0 <KyushinJudge+0x460>)
 800caca:	2200      	movs	r2, #0
 800cacc:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800cace:	79fb      	ldrb	r3, [r7, #7]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fd ff75 	bl	800a9c0 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800cad6:	4b3e      	ldr	r3, [pc, #248]	; (800cbd0 <KyushinJudge+0x460>)
 800cad8:	7a5a      	ldrb	r2, [r3, #9]
 800cada:	4b3d      	ldr	r3, [pc, #244]	; (800cbd0 <KyushinJudge+0x460>)
 800cadc:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cade:	4b3c      	ldr	r3, [pc, #240]	; (800cbd0 <KyushinJudge+0x460>)
 800cae0:	799a      	ldrb	r2, [r3, #6]
 800cae2:	4b3b      	ldr	r3, [pc, #236]	; (800cbd0 <KyushinJudge+0x460>)
 800cae4:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cae6:	4b3a      	ldr	r3, [pc, #232]	; (800cbd0 <KyushinJudge+0x460>)
 800cae8:	79da      	ldrb	r2, [r3, #7]
 800caea:	4b39      	ldr	r3, [pc, #228]	; (800cbd0 <KyushinJudge+0x460>)
 800caec:	705a      	strb	r2, [r3, #1]
 800caee:	e06d      	b.n	800cbcc <KyushinJudge+0x45c>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL && walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800caf0:	4b37      	ldr	r3, [pc, #220]	; (800cbd0 <KyushinJudge+0x460>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	4618      	mov	r0, r3
 800caf6:	4b36      	ldr	r3, [pc, #216]	; (800cbd0 <KyushinJudge+0x460>)
 800caf8:	785b      	ldrb	r3, [r3, #1]
 800cafa:	4619      	mov	r1, r3
 800cafc:	4a35      	ldr	r2, [pc, #212]	; (800cbd4 <KyushinJudge+0x464>)
 800cafe:	0103      	lsls	r3, r0, #4
 800cb00:	440b      	add	r3, r1
 800cb02:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cb06:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d13c      	bne.n	800cb8a <KyushinJudge+0x41a>
 800cb10:	4b2f      	ldr	r3, [pc, #188]	; (800cbd0 <KyushinJudge+0x460>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	461a      	mov	r2, r3
 800cb16:	4b2e      	ldr	r3, [pc, #184]	; (800cbd0 <KyushinJudge+0x460>)
 800cb18:	785b      	ldrb	r3, [r3, #1]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	492e      	ldr	r1, [pc, #184]	; (800cbd8 <KyushinJudge+0x468>)
 800cb1e:	0112      	lsls	r2, r2, #4
 800cb20:	4413      	add	r3, r2
 800cb22:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cb26:	4b2a      	ldr	r3, [pc, #168]	; (800cbd0 <KyushinJudge+0x460>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	461c      	mov	r4, r3
 800cb2c:	4b28      	ldr	r3, [pc, #160]	; (800cbd0 <KyushinJudge+0x460>)
 800cb2e:	785b      	ldrb	r3, [r3, #1]
 800cb30:	4618      	mov	r0, r3
 800cb32:	4929      	ldr	r1, [pc, #164]	; (800cbd8 <KyushinJudge+0x468>)
 800cb34:	0123      	lsls	r3, r4, #4
 800cb36:	4403      	add	r3, r0
 800cb38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d224      	bcs.n	800cb8a <KyushinJudge+0x41a>
 800cb40:	4b23      	ldr	r3, [pc, #140]	; (800cbd0 <KyushinJudge+0x460>)
 800cb42:	785b      	ldrb	r3, [r3, #1]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d020      	beq.n	800cb8a <KyushinJudge+0x41a>
				  //右?��?
				  Pos.Dir = right;
 800cb48:	4b21      	ldr	r3, [pc, #132]	; (800cbd0 <KyushinJudge+0x460>)
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800cb4e:	4b20      	ldr	r3, [pc, #128]	; (800cbd0 <KyushinJudge+0x460>)
 800cb50:	781a      	ldrb	r2, [r3, #0]
 800cb52:	4b1f      	ldr	r3, [pc, #124]	; (800cbd0 <KyushinJudge+0x460>)
 800cb54:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800cb56:	4b1e      	ldr	r3, [pc, #120]	; (800cbd0 <KyushinJudge+0x460>)
 800cb58:	785b      	ldrb	r3, [r3, #1]
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	4b1c      	ldr	r3, [pc, #112]	; (800cbd0 <KyushinJudge+0x460>)
 800cb60:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800cb62:	4b1b      	ldr	r3, [pc, #108]	; (800cbd0 <KyushinJudge+0x460>)
 800cb64:	2202      	movs	r2, #2
 800cb66:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fd ff28 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cb70:	4b17      	ldr	r3, [pc, #92]	; (800cbd0 <KyushinJudge+0x460>)
 800cb72:	7a5a      	ldrb	r2, [r3, #9]
 800cb74:	4b16      	ldr	r3, [pc, #88]	; (800cbd0 <KyushinJudge+0x460>)
 800cb76:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cb78:	4b15      	ldr	r3, [pc, #84]	; (800cbd0 <KyushinJudge+0x460>)
 800cb7a:	799a      	ldrb	r2, [r3, #6]
 800cb7c:	4b14      	ldr	r3, [pc, #80]	; (800cbd0 <KyushinJudge+0x460>)
 800cb7e:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cb80:	4b13      	ldr	r3, [pc, #76]	; (800cbd0 <KyushinJudge+0x460>)
 800cb82:	79da      	ldrb	r2, [r3, #7]
 800cb84:	4b12      	ldr	r3, [pc, #72]	; (800cbd0 <KyushinJudge+0x460>)
 800cb86:	705a      	strb	r2, [r3, #1]
 800cb88:	e020      	b.n	800cbcc <KyushinJudge+0x45c>
			  }
			  else {
				  //後西
				  Pos.Dir = back;
 800cb8a:	4b11      	ldr	r3, [pc, #68]	; (800cbd0 <KyushinJudge+0x460>)
 800cb8c:	2202      	movs	r2, #2
 800cb8e:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800cb90:	4b0f      	ldr	r3, [pc, #60]	; (800cbd0 <KyushinJudge+0x460>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <KyushinJudge+0x460>)
 800cb9a:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800cb9c:	4b0c      	ldr	r3, [pc, #48]	; (800cbd0 <KyushinJudge+0x460>)
 800cb9e:	785a      	ldrb	r2, [r3, #1]
 800cba0:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <KyushinJudge+0x460>)
 800cba2:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800cba4:	4b0a      	ldr	r3, [pc, #40]	; (800cbd0 <KyushinJudge+0x460>)
 800cba6:	2203      	movs	r2, #3
 800cba8:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fd ff07 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cbb2:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <KyushinJudge+0x460>)
 800cbb4:	7a5a      	ldrb	r2, [r3, #9]
 800cbb6:	4b06      	ldr	r3, [pc, #24]	; (800cbd0 <KyushinJudge+0x460>)
 800cbb8:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cbba:	4b05      	ldr	r3, [pc, #20]	; (800cbd0 <KyushinJudge+0x460>)
 800cbbc:	799a      	ldrb	r2, [r3, #6]
 800cbbe:	4b04      	ldr	r3, [pc, #16]	; (800cbd0 <KyushinJudge+0x460>)
 800cbc0:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cbc2:	4b03      	ldr	r3, [pc, #12]	; (800cbd0 <KyushinJudge+0x460>)
 800cbc4:	79da      	ldrb	r2, [r3, #7]
 800cbc6:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <KyushinJudge+0x460>)
 800cbc8:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800cbca:	e221      	b.n	800d010 <KyushinJudge+0x8a0>
 800cbcc:	e220      	b.n	800d010 <KyushinJudge+0x8a0>
 800cbce:	bf00      	nop
 800cbd0:	20000000 	.word	0x20000000
 800cbd4:	20010398 	.word	0x20010398
 800cbd8:	2000ff68 	.word	0x2000ff68

		  case south:

			  if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800cbdc:	4b84      	ldr	r3, [pc, #528]	; (800cdf0 <KyushinJudge+0x680>)
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	4b83      	ldr	r3, [pc, #524]	; (800cdf0 <KyushinJudge+0x680>)
 800cbe4:	785b      	ldrb	r3, [r3, #1]
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4a82      	ldr	r2, [pc, #520]	; (800cdf4 <KyushinJudge+0x684>)
 800cbea:	0103      	lsls	r3, r0, #4
 800cbec:	440b      	add	r3, r1
 800cbee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cbf2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d13c      	bne.n	800cc76 <KyushinJudge+0x506>
 800cbfc:	4b7c      	ldr	r3, [pc, #496]	; (800cdf0 <KyushinJudge+0x680>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	461a      	mov	r2, r3
 800cc02:	4b7b      	ldr	r3, [pc, #492]	; (800cdf0 <KyushinJudge+0x680>)
 800cc04:	785b      	ldrb	r3, [r3, #1]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	497b      	ldr	r1, [pc, #492]	; (800cdf8 <KyushinJudge+0x688>)
 800cc0a:	0112      	lsls	r2, r2, #4
 800cc0c:	4413      	add	r3, r2
 800cc0e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cc12:	4b77      	ldr	r3, [pc, #476]	; (800cdf0 <KyushinJudge+0x680>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	461c      	mov	r4, r3
 800cc18:	4b75      	ldr	r3, [pc, #468]	; (800cdf0 <KyushinJudge+0x680>)
 800cc1a:	785b      	ldrb	r3, [r3, #1]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	4976      	ldr	r1, [pc, #472]	; (800cdf8 <KyushinJudge+0x688>)
 800cc20:	0123      	lsls	r3, r4, #4
 800cc22:	4403      	add	r3, r0
 800cc24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d224      	bcs.n	800cc76 <KyushinJudge+0x506>
 800cc2c:	4b70      	ldr	r3, [pc, #448]	; (800cdf0 <KyushinJudge+0x680>)
 800cc2e:	785b      	ldrb	r3, [r3, #1]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d020      	beq.n	800cc76 <KyushinJudge+0x506>
				  //前南
				  Pos.Dir = front;
 800cc34:	4b6e      	ldr	r3, [pc, #440]	; (800cdf0 <KyushinJudge+0x680>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800cc3a:	4b6d      	ldr	r3, [pc, #436]	; (800cdf0 <KyushinJudge+0x680>)
 800cc3c:	781a      	ldrb	r2, [r3, #0]
 800cc3e:	4b6c      	ldr	r3, [pc, #432]	; (800cdf0 <KyushinJudge+0x680>)
 800cc40:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800cc42:	4b6b      	ldr	r3, [pc, #428]	; (800cdf0 <KyushinJudge+0x680>)
 800cc44:	785b      	ldrb	r3, [r3, #1]
 800cc46:	3b01      	subs	r3, #1
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	4b69      	ldr	r3, [pc, #420]	; (800cdf0 <KyushinJudge+0x680>)
 800cc4c:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800cc4e:	4b68      	ldr	r3, [pc, #416]	; (800cdf0 <KyushinJudge+0x680>)
 800cc50:	2202      	movs	r2, #2
 800cc52:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cc54:	79fb      	ldrb	r3, [r7, #7]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fd feb2 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cc5c:	4b64      	ldr	r3, [pc, #400]	; (800cdf0 <KyushinJudge+0x680>)
 800cc5e:	7a5a      	ldrb	r2, [r3, #9]
 800cc60:	4b63      	ldr	r3, [pc, #396]	; (800cdf0 <KyushinJudge+0x680>)
 800cc62:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cc64:	4b62      	ldr	r3, [pc, #392]	; (800cdf0 <KyushinJudge+0x680>)
 800cc66:	799a      	ldrb	r2, [r3, #6]
 800cc68:	4b61      	ldr	r3, [pc, #388]	; (800cdf0 <KyushinJudge+0x680>)
 800cc6a:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cc6c:	4b60      	ldr	r3, [pc, #384]	; (800cdf0 <KyushinJudge+0x680>)
 800cc6e:	79da      	ldrb	r2, [r3, #7]
 800cc70:	4b5f      	ldr	r3, [pc, #380]	; (800cdf0 <KyushinJudge+0x680>)
 800cc72:	705a      	strb	r2, [r3, #1]
 800cc74:	e0ba      	b.n	800cdec <KyushinJudge+0x67c>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800cc76:	4b5e      	ldr	r3, [pc, #376]	; (800cdf0 <KyushinJudge+0x680>)
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	4b5c      	ldr	r3, [pc, #368]	; (800cdf0 <KyushinJudge+0x680>)
 800cc7e:	785b      	ldrb	r3, [r3, #1]
 800cc80:	4619      	mov	r1, r3
 800cc82:	4a5c      	ldr	r2, [pc, #368]	; (800cdf4 <KyushinJudge+0x684>)
 800cc84:	0103      	lsls	r3, r0, #4
 800cc86:	440b      	add	r3, r1
 800cc88:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cc8c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d13c      	bne.n	800cd10 <KyushinJudge+0x5a0>
 800cc96:	4b56      	ldr	r3, [pc, #344]	; (800cdf0 <KyushinJudge+0x680>)
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	4a54      	ldr	r2, [pc, #336]	; (800cdf0 <KyushinJudge+0x680>)
 800cc9e:	7852      	ldrb	r2, [r2, #1]
 800cca0:	4611      	mov	r1, r2
 800cca2:	4a55      	ldr	r2, [pc, #340]	; (800cdf8 <KyushinJudge+0x688>)
 800cca4:	011b      	lsls	r3, r3, #4
 800cca6:	440b      	add	r3, r1
 800cca8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ccac:	4b50      	ldr	r3, [pc, #320]	; (800cdf0 <KyushinJudge+0x680>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	461c      	mov	r4, r3
 800ccb2:	4b4f      	ldr	r3, [pc, #316]	; (800cdf0 <KyushinJudge+0x680>)
 800ccb4:	785b      	ldrb	r3, [r3, #1]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	494f      	ldr	r1, [pc, #316]	; (800cdf8 <KyushinJudge+0x688>)
 800ccba:	0123      	lsls	r3, r4, #4
 800ccbc:	4403      	add	r3, r0
 800ccbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d224      	bcs.n	800cd10 <KyushinJudge+0x5a0>
 800ccc6:	4b4a      	ldr	r3, [pc, #296]	; (800cdf0 <KyushinJudge+0x680>)
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	2b0e      	cmp	r3, #14
 800cccc:	d820      	bhi.n	800cd10 <KyushinJudge+0x5a0>
				  //左東
    			  Pos.Dir = left;
 800ccce:	4b48      	ldr	r3, [pc, #288]	; (800cdf0 <KyushinJudge+0x680>)
 800ccd0:	2203      	movs	r2, #3
 800ccd2:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X + 1;
 800ccd4:	4b46      	ldr	r3, [pc, #280]	; (800cdf0 <KyushinJudge+0x680>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	b2da      	uxtb	r2, r3
 800ccdc:	4b44      	ldr	r3, [pc, #272]	; (800cdf0 <KyushinJudge+0x680>)
 800ccde:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y;
 800cce0:	4b43      	ldr	r3, [pc, #268]	; (800cdf0 <KyushinJudge+0x680>)
 800cce2:	785a      	ldrb	r2, [r3, #1]
 800cce4:	4b42      	ldr	r3, [pc, #264]	; (800cdf0 <KyushinJudge+0x680>)
 800cce6:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = east;
 800cce8:	4b41      	ldr	r3, [pc, #260]	; (800cdf0 <KyushinJudge+0x680>)
 800ccea:	2201      	movs	r2, #1
 800ccec:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800ccee:	79fb      	ldrb	r3, [r7, #7]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fd fe65 	bl	800a9c0 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800ccf6:	4b3e      	ldr	r3, [pc, #248]	; (800cdf0 <KyushinJudge+0x680>)
 800ccf8:	7a5a      	ldrb	r2, [r3, #9]
 800ccfa:	4b3d      	ldr	r3, [pc, #244]	; (800cdf0 <KyushinJudge+0x680>)
 800ccfc:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800ccfe:	4b3c      	ldr	r3, [pc, #240]	; (800cdf0 <KyushinJudge+0x680>)
 800cd00:	799a      	ldrb	r2, [r3, #6]
 800cd02:	4b3b      	ldr	r3, [pc, #236]	; (800cdf0 <KyushinJudge+0x680>)
 800cd04:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cd06:	4b3a      	ldr	r3, [pc, #232]	; (800cdf0 <KyushinJudge+0x680>)
 800cd08:	79da      	ldrb	r2, [r3, #7]
 800cd0a:	4b39      	ldr	r3, [pc, #228]	; (800cdf0 <KyushinJudge+0x680>)
 800cd0c:	705a      	strb	r2, [r3, #1]
 800cd0e:	e06d      	b.n	800cdec <KyushinJudge+0x67c>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800cd10:	4b37      	ldr	r3, [pc, #220]	; (800cdf0 <KyushinJudge+0x680>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	4618      	mov	r0, r3
 800cd16:	4b36      	ldr	r3, [pc, #216]	; (800cdf0 <KyushinJudge+0x680>)
 800cd18:	785b      	ldrb	r3, [r3, #1]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4a35      	ldr	r2, [pc, #212]	; (800cdf4 <KyushinJudge+0x684>)
 800cd1e:	0103      	lsls	r3, r0, #4
 800cd20:	440b      	add	r3, r1
 800cd22:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cd26:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d13c      	bne.n	800cdaa <KyushinJudge+0x63a>
 800cd30:	4b2f      	ldr	r3, [pc, #188]	; (800cdf0 <KyushinJudge+0x680>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	4a2e      	ldr	r2, [pc, #184]	; (800cdf0 <KyushinJudge+0x680>)
 800cd38:	7852      	ldrb	r2, [r2, #1]
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	4a2e      	ldr	r2, [pc, #184]	; (800cdf8 <KyushinJudge+0x688>)
 800cd3e:	011b      	lsls	r3, r3, #4
 800cd40:	440b      	add	r3, r1
 800cd42:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800cd46:	4b2a      	ldr	r3, [pc, #168]	; (800cdf0 <KyushinJudge+0x680>)
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	461c      	mov	r4, r3
 800cd4c:	4b28      	ldr	r3, [pc, #160]	; (800cdf0 <KyushinJudge+0x680>)
 800cd4e:	785b      	ldrb	r3, [r3, #1]
 800cd50:	4618      	mov	r0, r3
 800cd52:	4929      	ldr	r1, [pc, #164]	; (800cdf8 <KyushinJudge+0x688>)
 800cd54:	0123      	lsls	r3, r4, #4
 800cd56:	4403      	add	r3, r0
 800cd58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d224      	bcs.n	800cdaa <KyushinJudge+0x63a>
 800cd60:	4b23      	ldr	r3, [pc, #140]	; (800cdf0 <KyushinJudge+0x680>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d020      	beq.n	800cdaa <KyushinJudge+0x63a>
				  //右西
				  Pos.Dir = right;
 800cd68:	4b21      	ldr	r3, [pc, #132]	; (800cdf0 <KyushinJudge+0x680>)
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800cd6e:	4b20      	ldr	r3, [pc, #128]	; (800cdf0 <KyushinJudge+0x680>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <KyushinJudge+0x680>)
 800cd78:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800cd7a:	4b1d      	ldr	r3, [pc, #116]	; (800cdf0 <KyushinJudge+0x680>)
 800cd7c:	785a      	ldrb	r2, [r3, #1]
 800cd7e:	4b1c      	ldr	r3, [pc, #112]	; (800cdf0 <KyushinJudge+0x680>)
 800cd80:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800cd82:	4b1b      	ldr	r3, [pc, #108]	; (800cdf0 <KyushinJudge+0x680>)
 800cd84:	2203      	movs	r2, #3
 800cd86:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cd88:	79fb      	ldrb	r3, [r7, #7]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fd fe18 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cd90:	4b17      	ldr	r3, [pc, #92]	; (800cdf0 <KyushinJudge+0x680>)
 800cd92:	7a5a      	ldrb	r2, [r3, #9]
 800cd94:	4b16      	ldr	r3, [pc, #88]	; (800cdf0 <KyushinJudge+0x680>)
 800cd96:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cd98:	4b15      	ldr	r3, [pc, #84]	; (800cdf0 <KyushinJudge+0x680>)
 800cd9a:	799a      	ldrb	r2, [r3, #6]
 800cd9c:	4b14      	ldr	r3, [pc, #80]	; (800cdf0 <KyushinJudge+0x680>)
 800cd9e:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cda0:	4b13      	ldr	r3, [pc, #76]	; (800cdf0 <KyushinJudge+0x680>)
 800cda2:	79da      	ldrb	r2, [r3, #7]
 800cda4:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <KyushinJudge+0x680>)
 800cda6:	705a      	strb	r2, [r3, #1]
 800cda8:	e020      	b.n	800cdec <KyushinJudge+0x67c>
			  }
			  else {
				  //後北
				  Pos.Dir = back;
 800cdaa:	4b11      	ldr	r3, [pc, #68]	; (800cdf0 <KyushinJudge+0x680>)
 800cdac:	2202      	movs	r2, #2
 800cdae:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800cdb0:	4b0f      	ldr	r3, [pc, #60]	; (800cdf0 <KyushinJudge+0x680>)
 800cdb2:	781a      	ldrb	r2, [r3, #0]
 800cdb4:	4b0e      	ldr	r3, [pc, #56]	; (800cdf0 <KyushinJudge+0x680>)
 800cdb6:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800cdb8:	4b0d      	ldr	r3, [pc, #52]	; (800cdf0 <KyushinJudge+0x680>)
 800cdba:	785b      	ldrb	r3, [r3, #1]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <KyushinJudge+0x680>)
 800cdc2:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800cdc4:	4b0a      	ldr	r3, [pc, #40]	; (800cdf0 <KyushinJudge+0x680>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fd fdf7 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cdd2:	4b07      	ldr	r3, [pc, #28]	; (800cdf0 <KyushinJudge+0x680>)
 800cdd4:	7a5a      	ldrb	r2, [r3, #9]
 800cdd6:	4b06      	ldr	r3, [pc, #24]	; (800cdf0 <KyushinJudge+0x680>)
 800cdd8:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cdda:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <KyushinJudge+0x680>)
 800cddc:	799a      	ldrb	r2, [r3, #6]
 800cdde:	4b04      	ldr	r3, [pc, #16]	; (800cdf0 <KyushinJudge+0x680>)
 800cde0:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cde2:	4b03      	ldr	r3, [pc, #12]	; (800cdf0 <KyushinJudge+0x680>)
 800cde4:	79da      	ldrb	r2, [r3, #7]
 800cde6:	4b02      	ldr	r3, [pc, #8]	; (800cdf0 <KyushinJudge+0x680>)
 800cde8:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800cdea:	e111      	b.n	800d010 <KyushinJudge+0x8a0>
 800cdec:	e110      	b.n	800d010 <KyushinJudge+0x8a0>
 800cdee:	bf00      	nop
 800cdf0:	20000000 	.word	0x20000000
 800cdf4:	20010398 	.word	0x20010398
 800cdf8:	2000ff68 	.word	0x2000ff68

		  case west:

			  if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800cdfc:	4b86      	ldr	r3, [pc, #536]	; (800d018 <KyushinJudge+0x8a8>)
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	4618      	mov	r0, r3
 800ce02:	4b85      	ldr	r3, [pc, #532]	; (800d018 <KyushinJudge+0x8a8>)
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	4619      	mov	r1, r3
 800ce08:	4a84      	ldr	r2, [pc, #528]	; (800d01c <KyushinJudge+0x8ac>)
 800ce0a:	0103      	lsls	r3, r0, #4
 800ce0c:	440b      	add	r3, r1
 800ce0e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ce12:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d13c      	bne.n	800ce96 <KyushinJudge+0x726>
 800ce1c:	4b7e      	ldr	r3, [pc, #504]	; (800d018 <KyushinJudge+0x8a8>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	3b01      	subs	r3, #1
 800ce22:	4a7d      	ldr	r2, [pc, #500]	; (800d018 <KyushinJudge+0x8a8>)
 800ce24:	7852      	ldrb	r2, [r2, #1]
 800ce26:	4611      	mov	r1, r2
 800ce28:	4a7d      	ldr	r2, [pc, #500]	; (800d020 <KyushinJudge+0x8b0>)
 800ce2a:	011b      	lsls	r3, r3, #4
 800ce2c:	440b      	add	r3, r1
 800ce2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ce32:	4b79      	ldr	r3, [pc, #484]	; (800d018 <KyushinJudge+0x8a8>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	461c      	mov	r4, r3
 800ce38:	4b77      	ldr	r3, [pc, #476]	; (800d018 <KyushinJudge+0x8a8>)
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	4978      	ldr	r1, [pc, #480]	; (800d020 <KyushinJudge+0x8b0>)
 800ce40:	0123      	lsls	r3, r4, #4
 800ce42:	4403      	add	r3, r0
 800ce44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d224      	bcs.n	800ce96 <KyushinJudge+0x726>
 800ce4c:	4b72      	ldr	r3, [pc, #456]	; (800d018 <KyushinJudge+0x8a8>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d020      	beq.n	800ce96 <KyushinJudge+0x726>
				  //前西
				  Pos.Dir = front;
 800ce54:	4b70      	ldr	r3, [pc, #448]	; (800d018 <KyushinJudge+0x8a8>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800ce5a:	4b6f      	ldr	r3, [pc, #444]	; (800d018 <KyushinJudge+0x8a8>)
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	4b6d      	ldr	r3, [pc, #436]	; (800d018 <KyushinJudge+0x8a8>)
 800ce64:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800ce66:	4b6c      	ldr	r3, [pc, #432]	; (800d018 <KyushinJudge+0x8a8>)
 800ce68:	785a      	ldrb	r2, [r3, #1]
 800ce6a:	4b6b      	ldr	r3, [pc, #428]	; (800d018 <KyushinJudge+0x8a8>)
 800ce6c:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800ce6e:	4b6a      	ldr	r3, [pc, #424]	; (800d018 <KyushinJudge+0x8a8>)
 800ce70:	2203      	movs	r2, #3
 800ce72:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fd fda2 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800ce7c:	4b66      	ldr	r3, [pc, #408]	; (800d018 <KyushinJudge+0x8a8>)
 800ce7e:	7a5a      	ldrb	r2, [r3, #9]
 800ce80:	4b65      	ldr	r3, [pc, #404]	; (800d018 <KyushinJudge+0x8a8>)
 800ce82:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800ce84:	4b64      	ldr	r3, [pc, #400]	; (800d018 <KyushinJudge+0x8a8>)
 800ce86:	799a      	ldrb	r2, [r3, #6]
 800ce88:	4b63      	ldr	r3, [pc, #396]	; (800d018 <KyushinJudge+0x8a8>)
 800ce8a:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800ce8c:	4b62      	ldr	r3, [pc, #392]	; (800d018 <KyushinJudge+0x8a8>)
 800ce8e:	79da      	ldrb	r2, [r3, #7]
 800ce90:	4b61      	ldr	r3, [pc, #388]	; (800d018 <KyushinJudge+0x8a8>)
 800ce92:	705a      	strb	r2, [r3, #1]
 800ce94:	e0ba      	b.n	800d00c <KyushinJudge+0x89c>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800ce96:	4b60      	ldr	r3, [pc, #384]	; (800d018 <KyushinJudge+0x8a8>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	4b5e      	ldr	r3, [pc, #376]	; (800d018 <KyushinJudge+0x8a8>)
 800ce9e:	785b      	ldrb	r3, [r3, #1]
 800cea0:	4619      	mov	r1, r3
 800cea2:	4a5e      	ldr	r2, [pc, #376]	; (800d01c <KyushinJudge+0x8ac>)
 800cea4:	0103      	lsls	r3, r0, #4
 800cea6:	440b      	add	r3, r1
 800cea8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ceac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d13c      	bne.n	800cf30 <KyushinJudge+0x7c0>
 800ceb6:	4b58      	ldr	r3, [pc, #352]	; (800d018 <KyushinJudge+0x8a8>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	4b56      	ldr	r3, [pc, #344]	; (800d018 <KyushinJudge+0x8a8>)
 800cebe:	785b      	ldrb	r3, [r3, #1]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	4957      	ldr	r1, [pc, #348]	; (800d020 <KyushinJudge+0x8b0>)
 800cec4:	0112      	lsls	r2, r2, #4
 800cec6:	4413      	add	r3, r2
 800cec8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cecc:	4b52      	ldr	r3, [pc, #328]	; (800d018 <KyushinJudge+0x8a8>)
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	461c      	mov	r4, r3
 800ced2:	4b51      	ldr	r3, [pc, #324]	; (800d018 <KyushinJudge+0x8a8>)
 800ced4:	785b      	ldrb	r3, [r3, #1]
 800ced6:	4618      	mov	r0, r3
 800ced8:	4951      	ldr	r1, [pc, #324]	; (800d020 <KyushinJudge+0x8b0>)
 800ceda:	0123      	lsls	r3, r4, #4
 800cedc:	4403      	add	r3, r0
 800cede:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d224      	bcs.n	800cf30 <KyushinJudge+0x7c0>
 800cee6:	4b4c      	ldr	r3, [pc, #304]	; (800d018 <KyushinJudge+0x8a8>)
 800cee8:	785b      	ldrb	r3, [r3, #1]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d020      	beq.n	800cf30 <KyushinJudge+0x7c0>
				  //左?��?
    			  Pos.Dir = left;
 800ceee:	4b4a      	ldr	r3, [pc, #296]	; (800d018 <KyushinJudge+0x8a8>)
 800cef0:	2203      	movs	r2, #3
 800cef2:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X;
 800cef4:	4b48      	ldr	r3, [pc, #288]	; (800d018 <KyushinJudge+0x8a8>)
 800cef6:	781a      	ldrb	r2, [r3, #0]
 800cef8:	4b47      	ldr	r3, [pc, #284]	; (800d018 <KyushinJudge+0x8a8>)
 800cefa:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y - 1;
 800cefc:	4b46      	ldr	r3, [pc, #280]	; (800d018 <KyushinJudge+0x8a8>)
 800cefe:	785b      	ldrb	r3, [r3, #1]
 800cf00:	3b01      	subs	r3, #1
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	4b44      	ldr	r3, [pc, #272]	; (800d018 <KyushinJudge+0x8a8>)
 800cf06:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = south;
 800cf08:	4b43      	ldr	r3, [pc, #268]	; (800d018 <KyushinJudge+0x8a8>)
 800cf0a:	2202      	movs	r2, #2
 800cf0c:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fd fd55 	bl	800a9c0 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800cf16:	4b40      	ldr	r3, [pc, #256]	; (800d018 <KyushinJudge+0x8a8>)
 800cf18:	7a5a      	ldrb	r2, [r3, #9]
 800cf1a:	4b3f      	ldr	r3, [pc, #252]	; (800d018 <KyushinJudge+0x8a8>)
 800cf1c:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cf1e:	4b3e      	ldr	r3, [pc, #248]	; (800d018 <KyushinJudge+0x8a8>)
 800cf20:	799a      	ldrb	r2, [r3, #6]
 800cf22:	4b3d      	ldr	r3, [pc, #244]	; (800d018 <KyushinJudge+0x8a8>)
 800cf24:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cf26:	4b3c      	ldr	r3, [pc, #240]	; (800d018 <KyushinJudge+0x8a8>)
 800cf28:	79da      	ldrb	r2, [r3, #7]
 800cf2a:	4b3b      	ldr	r3, [pc, #236]	; (800d018 <KyushinJudge+0x8a8>)
 800cf2c:	705a      	strb	r2, [r3, #1]
 800cf2e:	e06d      	b.n	800d00c <KyushinJudge+0x89c>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL &&walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800cf30:	4b39      	ldr	r3, [pc, #228]	; (800d018 <KyushinJudge+0x8a8>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	4618      	mov	r0, r3
 800cf36:	4b38      	ldr	r3, [pc, #224]	; (800d018 <KyushinJudge+0x8a8>)
 800cf38:	785b      	ldrb	r3, [r3, #1]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4a37      	ldr	r2, [pc, #220]	; (800d01c <KyushinJudge+0x8ac>)
 800cf3e:	0103      	lsls	r3, r0, #4
 800cf40:	440b      	add	r3, r1
 800cf42:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cf46:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d13c      	bne.n	800cfca <KyushinJudge+0x85a>
 800cf50:	4b31      	ldr	r3, [pc, #196]	; (800d018 <KyushinJudge+0x8a8>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	4b30      	ldr	r3, [pc, #192]	; (800d018 <KyushinJudge+0x8a8>)
 800cf58:	785b      	ldrb	r3, [r3, #1]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	4930      	ldr	r1, [pc, #192]	; (800d020 <KyushinJudge+0x8b0>)
 800cf5e:	0112      	lsls	r2, r2, #4
 800cf60:	4413      	add	r3, r2
 800cf62:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cf66:	4b2c      	ldr	r3, [pc, #176]	; (800d018 <KyushinJudge+0x8a8>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	4b2a      	ldr	r3, [pc, #168]	; (800d018 <KyushinJudge+0x8a8>)
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	4618      	mov	r0, r3
 800cf72:	492b      	ldr	r1, [pc, #172]	; (800d020 <KyushinJudge+0x8b0>)
 800cf74:	0123      	lsls	r3, r4, #4
 800cf76:	4403      	add	r3, r0
 800cf78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d224      	bcs.n	800cfca <KyushinJudge+0x85a>
 800cf80:	4b25      	ldr	r3, [pc, #148]	; (800d018 <KyushinJudge+0x8a8>)
 800cf82:	785b      	ldrb	r3, [r3, #1]
 800cf84:	2b0e      	cmp	r3, #14
 800cf86:	d820      	bhi.n	800cfca <KyushinJudge+0x85a>
				  //右?��?
				  Pos.Dir = right;
 800cf88:	4b23      	ldr	r3, [pc, #140]	; (800d018 <KyushinJudge+0x8a8>)
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800cf8e:	4b22      	ldr	r3, [pc, #136]	; (800d018 <KyushinJudge+0x8a8>)
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	4b21      	ldr	r3, [pc, #132]	; (800d018 <KyushinJudge+0x8a8>)
 800cf94:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800cf96:	4b20      	ldr	r3, [pc, #128]	; (800d018 <KyushinJudge+0x8a8>)
 800cf98:	785b      	ldrb	r3, [r3, #1]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	4b1e      	ldr	r3, [pc, #120]	; (800d018 <KyushinJudge+0x8a8>)
 800cfa0:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800cfa2:	4b1d      	ldr	r3, [pc, #116]	; (800d018 <KyushinJudge+0x8a8>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cfa8:	79fb      	ldrb	r3, [r7, #7]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fd fd08 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cfb0:	4b19      	ldr	r3, [pc, #100]	; (800d018 <KyushinJudge+0x8a8>)
 800cfb2:	7a5a      	ldrb	r2, [r3, #9]
 800cfb4:	4b18      	ldr	r3, [pc, #96]	; (800d018 <KyushinJudge+0x8a8>)
 800cfb6:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cfb8:	4b17      	ldr	r3, [pc, #92]	; (800d018 <KyushinJudge+0x8a8>)
 800cfba:	799a      	ldrb	r2, [r3, #6]
 800cfbc:	4b16      	ldr	r3, [pc, #88]	; (800d018 <KyushinJudge+0x8a8>)
 800cfbe:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cfc0:	4b15      	ldr	r3, [pc, #84]	; (800d018 <KyushinJudge+0x8a8>)
 800cfc2:	79da      	ldrb	r2, [r3, #7]
 800cfc4:	4b14      	ldr	r3, [pc, #80]	; (800d018 <KyushinJudge+0x8a8>)
 800cfc6:	705a      	strb	r2, [r3, #1]
 800cfc8:	e020      	b.n	800d00c <KyushinJudge+0x89c>
			  }
			  else {
				  //後東
				  Pos.Dir = back;
 800cfca:	4b13      	ldr	r3, [pc, #76]	; (800d018 <KyushinJudge+0x8a8>)
 800cfcc:	2202      	movs	r2, #2
 800cfce:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800cfd0:	4b11      	ldr	r3, [pc, #68]	; (800d018 <KyushinJudge+0x8a8>)
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	b2da      	uxtb	r2, r3
 800cfd8:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <KyushinJudge+0x8a8>)
 800cfda:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800cfdc:	4b0e      	ldr	r3, [pc, #56]	; (800d018 <KyushinJudge+0x8a8>)
 800cfde:	785a      	ldrb	r2, [r3, #1]
 800cfe0:	4b0d      	ldr	r3, [pc, #52]	; (800d018 <KyushinJudge+0x8a8>)
 800cfe2:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800cfe4:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <KyushinJudge+0x8a8>)
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fd fce7 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cff2:	4b09      	ldr	r3, [pc, #36]	; (800d018 <KyushinJudge+0x8a8>)
 800cff4:	7a5a      	ldrb	r2, [r3, #9]
 800cff6:	4b08      	ldr	r3, [pc, #32]	; (800d018 <KyushinJudge+0x8a8>)
 800cff8:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cffa:	4b07      	ldr	r3, [pc, #28]	; (800d018 <KyushinJudge+0x8a8>)
 800cffc:	799a      	ldrb	r2, [r3, #6]
 800cffe:	4b06      	ldr	r3, [pc, #24]	; (800d018 <KyushinJudge+0x8a8>)
 800d000:	701a      	strb	r2, [r3, #0]
		       	  Pos.Y = Pos.NextY;
 800d002:	4b05      	ldr	r3, [pc, #20]	; (800d018 <KyushinJudge+0x8a8>)
 800d004:	79da      	ldrb	r2, [r3, #7]
 800d006:	4b04      	ldr	r3, [pc, #16]	; (800d018 <KyushinJudge+0x8a8>)
 800d008:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800d00a:	e001      	b.n	800d010 <KyushinJudge+0x8a0>
 800d00c:	e000      	b.n	800d010 <KyushinJudge+0x8a0>

		  default:
			  break;
 800d00e:	bf00      	nop
		  //swtich end
	}

}
 800d010:	bf00      	nop
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	bd90      	pop	{r4, r7, pc}
 800d018:	20000000 	.word	0x20000000
 800d01c:	20010398 	.word	0x20010398
 800d020:	2000ff68 	.word	0x2000ff68

0800d024 <is_unknown>:
    	  default:
    		  break;
    	  }//swtich end
}
_Bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800d02e:	491c      	ldr	r1, [pc, #112]	; (800d0a0 <is_unknown+0x7c>)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	011a      	lsls	r2, r3, #4
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	4413      	add	r3, r2
 800d038:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800d03c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b02      	cmp	r3, #2
 800d044:	d023      	beq.n	800d08e <is_unknown+0x6a>
 800d046:	4916      	ldr	r1, [pc, #88]	; (800d0a0 <is_unknown+0x7c>)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	011a      	lsls	r2, r3, #4
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	4413      	add	r3, r2
 800d050:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800d054:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d017      	beq.n	800d08e <is_unknown+0x6a>
 800d05e:	4910      	ldr	r1, [pc, #64]	; (800d0a0 <is_unknown+0x7c>)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	011a      	lsls	r2, r3, #4
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	4413      	add	r3, r2
 800d068:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800d06c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b02      	cmp	r3, #2
 800d074:	d00b      	beq.n	800d08e <is_unknown+0x6a>
 800d076:	490a      	ldr	r1, [pc, #40]	; (800d0a0 <is_unknown+0x7c>)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	011a      	lsls	r2, r3, #4
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	4413      	add	r3, r2
 800d080:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800d084:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	d101      	bne.n	800d092 <is_unknown+0x6e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 800d08e:	2301      	movs	r3, #1
 800d090:	e000      	b.n	800d094 <is_unknown+0x70>
	}
	else
	{
		return false;	//探索済
 800d092:	2300      	movs	r3, #0
	}
}
 800d094:	4618      	mov	r0, r3
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	20010398 	.word	0x20010398

0800d0a4 <get_priority>:
int get_priority(int x, int y, cardinal car)	//そのマスの情報から、優先度を算出する
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b086      	sub	sp, #24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	71fb      	strb	r3, [r7, #7]
	//それに加え、自分の向きと、行きたい方向から、
	//前(2)横(1)後(0)の優先度を付加する。

	int priority;	//優先度を記録する変数

	priority = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	617b      	str	r3, [r7, #20]

	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800d0b6:	4b15      	ldr	r3, [pc, #84]	; (800d10c <get_priority+0x68>)
 800d0b8:	78db      	ldrb	r3, [r3, #3]
 800d0ba:	79fa      	ldrb	r2, [r7, #7]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d102      	bne.n	800d0c6 <get_priority+0x22>
	{
		priority = 2;
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	617b      	str	r3, [r7, #20]
 800d0c4:	e012      	b.n	800d0ec <get_priority+0x48>
	}
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800d0c6:	4b11      	ldr	r3, [pc, #68]	; (800d10c <get_priority+0x68>)
 800d0c8:	78db      	ldrb	r3, [r3, #3]
 800d0ca:	1d1a      	adds	r2, r3, #4
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	425a      	negs	r2, r3
 800d0d2:	f003 0303 	and.w	r3, r3, #3
 800d0d6:	f002 0203 	and.w	r2, r2, #3
 800d0da:	bf58      	it	pl
 800d0dc:	4253      	negpl	r3, r2
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d102      	bne.n	800d0e8 <get_priority+0x44>
	{
		priority = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	617b      	str	r3, [r7, #20]
 800d0e6:	e001      	b.n	800d0ec <get_priority+0x48>
	}
	else						//それ以外(左右どちらか)の場合
	{
		priority = 1;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	617b      	str	r3, [r7, #20]
	}


	if(is_unknown(x,y) == true)
 800d0ec:	68b9      	ldr	r1, [r7, #8]
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f7ff ff98 	bl	800d024 <is_unknown>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d002      	beq.n	800d100 <get_priority+0x5c>
	{
		priority += 4;				//未探索の場合優先度をさらに付加
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 800d100:	697b      	ldr	r3, [r7, #20]

}
 800d102:	4618      	mov	r0, r3
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	20000000 	.word	0x20000000

0800d110 <get_nextdir>:
int get_nextdir(int x, int y, int mask)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
	//ゴール座標x,yに向かう場合、今どちらに行くべきかを判断する。
	//探索、最短の切り替えのためのmaskを指定、dirは方角を示す
	int little,priority,tmp_priority;		//最小の値を探すために使用する変数


	make_map(x,y,mask);				//歩数Map生成
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	68b9      	ldr	r1, [r7, #8]
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f7fe fb45 	bl	800b7b0 <make_map>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800d126:	23ff      	movs	r3, #255	; 0xff
 800d128:	61fb      	str	r3, [r7, #28]

	priority = 0;					//優先度の初期値は0
 800d12a:	2300      	movs	r3, #0
 800d12c:	61bb      	str	r3, [r7, #24]

		//maskの意味はstatic_parameter.hを参照
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800d12e:	4ba1      	ldr	r3, [pc, #644]	; (800d3b4 <get_nextdir+0x2a4>)
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	4618      	mov	r0, r3
 800d134:	4b9f      	ldr	r3, [pc, #636]	; (800d3b4 <get_nextdir+0x2a4>)
 800d136:	785b      	ldrb	r3, [r3, #1]
 800d138:	4619      	mov	r1, r3
 800d13a:	4a9f      	ldr	r2, [pc, #636]	; (800d3b8 <get_nextdir+0x2a8>)
 800d13c:	0103      	lsls	r3, r0, #4
 800d13e:	440b      	add	r3, r1
 800d140:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d144:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	461a      	mov	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4013      	ands	r3, r2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d143      	bne.n	800d1dc <get_nextdir+0xcc>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y + 1, north);	//優先度を算出
 800d154:	4b97      	ldr	r3, [pc, #604]	; (800d3b4 <get_nextdir+0x2a4>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	4618      	mov	r0, r3
 800d15a:	4b96      	ldr	r3, [pc, #600]	; (800d3b4 <get_nextdir+0x2a4>)
 800d15c:	785b      	ldrb	r3, [r3, #1]
 800d15e:	3301      	adds	r3, #1
 800d160:	2200      	movs	r2, #0
 800d162:	4619      	mov	r1, r3
 800d164:	f7ff ff9e 	bl	800d0a4 <get_priority>
 800d168:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y+1] < little)				//一番歩数が小さい方向を見つける
 800d16a:	4b92      	ldr	r3, [pc, #584]	; (800d3b4 <get_nextdir+0x2a4>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	4b90      	ldr	r3, [pc, #576]	; (800d3b4 <get_nextdir+0x2a4>)
 800d172:	785b      	ldrb	r3, [r3, #1]
 800d174:	3301      	adds	r3, #1
 800d176:	4991      	ldr	r1, [pc, #580]	; (800d3bc <get_nextdir+0x2ac>)
 800d178:	0112      	lsls	r2, r2, #4
 800d17a:	4413      	add	r3, r2
 800d17c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d180:	461a      	mov	r2, r3
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	4293      	cmp	r3, r2
 800d186:	dd11      	ble.n	800d1ac <get_nextdir+0x9c>
		{
			little = walk_map[Pos.X][Pos.Y+1];			//ひとまず北が歩数が小さい事にする
 800d188:	4b8a      	ldr	r3, [pc, #552]	; (800d3b4 <get_nextdir+0x2a4>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	4b89      	ldr	r3, [pc, #548]	; (800d3b4 <get_nextdir+0x2a4>)
 800d190:	785b      	ldrb	r3, [r3, #1]
 800d192:	3301      	adds	r3, #1
 800d194:	4989      	ldr	r1, [pc, #548]	; (800d3bc <get_nextdir+0x2ac>)
 800d196:	0112      	lsls	r2, r2, #4
 800d198:	4413      	add	r3, r2
 800d19a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d19e:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = north;						//方向を保存
 800d1a0:	4b84      	ldr	r3, [pc, #528]	; (800d3b4 <get_nextdir+0x2a4>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	61bb      	str	r3, [r7, #24]
 800d1aa:	e017      	b.n	800d1dc <get_nextdir+0xcc>
		}
		else if(walk_map[Pos.X][Pos.Y+1] == little)			//歩数が同じ場合は優先度から判断する
 800d1ac:	4b81      	ldr	r3, [pc, #516]	; (800d3b4 <get_nextdir+0x2a4>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	4b80      	ldr	r3, [pc, #512]	; (800d3b4 <get_nextdir+0x2a4>)
 800d1b4:	785b      	ldrb	r3, [r3, #1]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	4980      	ldr	r1, [pc, #512]	; (800d3bc <get_nextdir+0x2ac>)
 800d1ba:	0112      	lsls	r2, r2, #4
 800d1bc:	4413      	add	r3, r2
 800d1be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d108      	bne.n	800d1dc <get_nextdir+0xcc>
		{
			if(priority < tmp_priority )				//優先度を評価
 800d1ca:	69ba      	ldr	r2, [r7, #24]
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	da04      	bge.n	800d1dc <get_nextdir+0xcc>
			{
				Pos.NextCar = north;					//方向を更新
 800d1d2:	4b78      	ldr	r3, [pc, #480]	; (800d3b4 <get_nextdir+0x2a4>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].east & mask) == NOWALL)			//東に壁がなければ
 800d1dc:	4b75      	ldr	r3, [pc, #468]	; (800d3b4 <get_nextdir+0x2a4>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	4b74      	ldr	r3, [pc, #464]	; (800d3b4 <get_nextdir+0x2a4>)
 800d1e4:	785b      	ldrb	r3, [r3, #1]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4a73      	ldr	r2, [pc, #460]	; (800d3b8 <get_nextdir+0x2a8>)
 800d1ea:	0103      	lsls	r3, r0, #4
 800d1ec:	440b      	add	r3, r1
 800d1ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d1f2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d142      	bne.n	800d288 <get_nextdir+0x178>
	{
		tmp_priority = get_priority(Pos.X + 1, Pos.Y, east);	//優先度を算出
 800d202:	4b6c      	ldr	r3, [pc, #432]	; (800d3b4 <get_nextdir+0x2a4>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	1c58      	adds	r0, r3, #1
 800d208:	4b6a      	ldr	r3, [pc, #424]	; (800d3b4 <get_nextdir+0x2a4>)
 800d20a:	785b      	ldrb	r3, [r3, #1]
 800d20c:	2201      	movs	r2, #1
 800d20e:	4619      	mov	r1, r3
 800d210:	f7ff ff48 	bl	800d0a4 <get_priority>
 800d214:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X + 1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800d216:	4b67      	ldr	r3, [pc, #412]	; (800d3b4 <get_nextdir+0x2a4>)
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	3301      	adds	r3, #1
 800d21c:	4a65      	ldr	r2, [pc, #404]	; (800d3b4 <get_nextdir+0x2a4>)
 800d21e:	7852      	ldrb	r2, [r2, #1]
 800d220:	4611      	mov	r1, r2
 800d222:	4a66      	ldr	r2, [pc, #408]	; (800d3bc <get_nextdir+0x2ac>)
 800d224:	011b      	lsls	r3, r3, #4
 800d226:	440b      	add	r3, r1
 800d228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d22c:	461a      	mov	r2, r3
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	4293      	cmp	r3, r2
 800d232:	dd11      	ble.n	800d258 <get_nextdir+0x148>
		{
			little = walk_map[Pos.X+1][Pos.Y];			//ひとまず東が歩数が小さい事にする
 800d234:	4b5f      	ldr	r3, [pc, #380]	; (800d3b4 <get_nextdir+0x2a4>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	3301      	adds	r3, #1
 800d23a:	4a5e      	ldr	r2, [pc, #376]	; (800d3b4 <get_nextdir+0x2a4>)
 800d23c:	7852      	ldrb	r2, [r2, #1]
 800d23e:	4611      	mov	r1, r2
 800d240:	4a5e      	ldr	r2, [pc, #376]	; (800d3bc <get_nextdir+0x2ac>)
 800d242:	011b      	lsls	r3, r3, #4
 800d244:	440b      	add	r3, r1
 800d246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d24a:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = east;						//方向を保存
 800d24c:	4b59      	ldr	r3, [pc, #356]	; (800d3b4 <get_nextdir+0x2a4>)
 800d24e:	2201      	movs	r2, #1
 800d250:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	61bb      	str	r3, [r7, #24]
 800d256:	e017      	b.n	800d288 <get_nextdir+0x178>
		}
		else if(walk_map[Pos.X + 1][Pos.Y] == little)			//歩数が同じ場合、優先度から判断
 800d258:	4b56      	ldr	r3, [pc, #344]	; (800d3b4 <get_nextdir+0x2a4>)
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	3301      	adds	r3, #1
 800d25e:	4a55      	ldr	r2, [pc, #340]	; (800d3b4 <get_nextdir+0x2a4>)
 800d260:	7852      	ldrb	r2, [r2, #1]
 800d262:	4611      	mov	r1, r2
 800d264:	4a55      	ldr	r2, [pc, #340]	; (800d3bc <get_nextdir+0x2ac>)
 800d266:	011b      	lsls	r3, r3, #4
 800d268:	440b      	add	r3, r1
 800d26a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d26e:	461a      	mov	r2, r3
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	4293      	cmp	r3, r2
 800d274:	d108      	bne.n	800d288 <get_nextdir+0x178>
		{
			if(priority < tmp_priority)				//優先度を評価
 800d276:	69ba      	ldr	r2, [r7, #24]
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	da04      	bge.n	800d288 <get_nextdir+0x178>
			{
				Pos.NextCar = east;					//方向を保存
 800d27e:	4b4d      	ldr	r3, [pc, #308]	; (800d3b4 <get_nextdir+0x2a4>)
 800d280:	2201      	movs	r2, #1
 800d282:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].south & mask) == NOWALL)			//南に壁がなければ
 800d288:	4b4a      	ldr	r3, [pc, #296]	; (800d3b4 <get_nextdir+0x2a4>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	4618      	mov	r0, r3
 800d28e:	4b49      	ldr	r3, [pc, #292]	; (800d3b4 <get_nextdir+0x2a4>)
 800d290:	785b      	ldrb	r3, [r3, #1]
 800d292:	4619      	mov	r1, r3
 800d294:	4a48      	ldr	r2, [pc, #288]	; (800d3b8 <get_nextdir+0x2a8>)
 800d296:	0103      	lsls	r3, r0, #4
 800d298:	440b      	add	r3, r1
 800d29a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d29e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d143      	bne.n	800d336 <get_nextdir+0x226>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y - 1, south);	//優先度を算出
 800d2ae:	4b41      	ldr	r3, [pc, #260]	; (800d3b4 <get_nextdir+0x2a4>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	4b3f      	ldr	r3, [pc, #252]	; (800d3b4 <get_nextdir+0x2a4>)
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	4619      	mov	r1, r3
 800d2be:	f7ff fef1 	bl	800d0a4 <get_priority>
 800d2c2:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y - 1] < little)				//一番歩数が小さい方向を見つける
 800d2c4:	4b3b      	ldr	r3, [pc, #236]	; (800d3b4 <get_nextdir+0x2a4>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	4b3a      	ldr	r3, [pc, #232]	; (800d3b4 <get_nextdir+0x2a4>)
 800d2cc:	785b      	ldrb	r3, [r3, #1]
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	493a      	ldr	r1, [pc, #232]	; (800d3bc <get_nextdir+0x2ac>)
 800d2d2:	0112      	lsls	r2, r2, #4
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	dd11      	ble.n	800d306 <get_nextdir+0x1f6>
		{
			little = walk_map[Pos.X][Pos.Y-1];			//ひとまず南が歩数が小さい事にする
 800d2e2:	4b34      	ldr	r3, [pc, #208]	; (800d3b4 <get_nextdir+0x2a4>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <get_nextdir+0x2a4>)
 800d2ea:	785b      	ldrb	r3, [r3, #1]
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	4933      	ldr	r1, [pc, #204]	; (800d3bc <get_nextdir+0x2ac>)
 800d2f0:	0112      	lsls	r2, r2, #4
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d2f8:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = south;						//方向を保存
 800d2fa:	4b2e      	ldr	r3, [pc, #184]	; (800d3b4 <get_nextdir+0x2a4>)
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	61bb      	str	r3, [r7, #24]
 800d304:	e017      	b.n	800d336 <get_nextdir+0x226>
		}
		else if(walk_map[Pos.X][Pos.Y - 1] == little)			//歩数が同じ場合、優先度で評価
 800d306:	4b2b      	ldr	r3, [pc, #172]	; (800d3b4 <get_nextdir+0x2a4>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	461a      	mov	r2, r3
 800d30c:	4b29      	ldr	r3, [pc, #164]	; (800d3b4 <get_nextdir+0x2a4>)
 800d30e:	785b      	ldrb	r3, [r3, #1]
 800d310:	3b01      	subs	r3, #1
 800d312:	492a      	ldr	r1, [pc, #168]	; (800d3bc <get_nextdir+0x2ac>)
 800d314:	0112      	lsls	r2, r2, #4
 800d316:	4413      	add	r3, r2
 800d318:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d31c:	461a      	mov	r2, r3
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	4293      	cmp	r3, r2
 800d322:	d108      	bne.n	800d336 <get_nextdir+0x226>
		{
			if(priority < tmp_priority)				//優先度を評価
 800d324:	69ba      	ldr	r2, [r7, #24]
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	429a      	cmp	r2, r3
 800d32a:	da04      	bge.n	800d336 <get_nextdir+0x226>
			{
				Pos.NextCar = south;					//方向を保存
 800d32c:	4b21      	ldr	r3, [pc, #132]	; (800d3b4 <get_nextdir+0x2a4>)
 800d32e:	2202      	movs	r2, #2
 800d330:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].west & mask) == NOWALL)			//西に壁がなければ
 800d336:	4b1f      	ldr	r3, [pc, #124]	; (800d3b4 <get_nextdir+0x2a4>)
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	4618      	mov	r0, r3
 800d33c:	4b1d      	ldr	r3, [pc, #116]	; (800d3b4 <get_nextdir+0x2a4>)
 800d33e:	785b      	ldrb	r3, [r3, #1]
 800d340:	4619      	mov	r1, r3
 800d342:	4a1d      	ldr	r2, [pc, #116]	; (800d3b8 <get_nextdir+0x2a8>)
 800d344:	0103      	lsls	r3, r0, #4
 800d346:	440b      	add	r3, r1
 800d348:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d34c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d350:	b2db      	uxtb	r3, r3
 800d352:	461a      	mov	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4013      	ands	r3, r2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d145      	bne.n	800d3e8 <get_nextdir+0x2d8>
	{
		tmp_priority = get_priority(Pos.X - 1, Pos.Y, west);	//優先度を算出
 800d35c:	4b15      	ldr	r3, [pc, #84]	; (800d3b4 <get_nextdir+0x2a4>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	1e58      	subs	r0, r3, #1
 800d362:	4b14      	ldr	r3, [pc, #80]	; (800d3b4 <get_nextdir+0x2a4>)
 800d364:	785b      	ldrb	r3, [r3, #1]
 800d366:	2203      	movs	r2, #3
 800d368:	4619      	mov	r1, r3
 800d36a:	f7ff fe9b 	bl	800d0a4 <get_priority>
 800d36e:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X-1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800d370:	4b10      	ldr	r3, [pc, #64]	; (800d3b4 <get_nextdir+0x2a4>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	3b01      	subs	r3, #1
 800d376:	4a0f      	ldr	r2, [pc, #60]	; (800d3b4 <get_nextdir+0x2a4>)
 800d378:	7852      	ldrb	r2, [r2, #1]
 800d37a:	4611      	mov	r1, r2
 800d37c:	4a0f      	ldr	r2, [pc, #60]	; (800d3bc <get_nextdir+0x2ac>)
 800d37e:	011b      	lsls	r3, r3, #4
 800d380:	440b      	add	r3, r1
 800d382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d386:	461a      	mov	r2, r3
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	4293      	cmp	r3, r2
 800d38c:	dd18      	ble.n	800d3c0 <get_nextdir+0x2b0>
		{
			little = walk_map[Pos.X-1][Pos.Y];			//西が歩数が小さい
 800d38e:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <get_nextdir+0x2a4>)
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	3b01      	subs	r3, #1
 800d394:	4a07      	ldr	r2, [pc, #28]	; (800d3b4 <get_nextdir+0x2a4>)
 800d396:	7852      	ldrb	r2, [r2, #1]
 800d398:	4611      	mov	r1, r2
 800d39a:	4a08      	ldr	r2, [pc, #32]	; (800d3bc <get_nextdir+0x2ac>)
 800d39c:	011b      	lsls	r3, r3, #4
 800d39e:	440b      	add	r3, r1
 800d3a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3a4:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = west;						//方向を保存
 800d3a6:	4b03      	ldr	r3, [pc, #12]	; (800d3b4 <get_nextdir+0x2a4>)
 800d3a8:	2203      	movs	r2, #3
 800d3aa:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	61bb      	str	r3, [r7, #24]
 800d3b0:	e01a      	b.n	800d3e8 <get_nextdir+0x2d8>
 800d3b2:	bf00      	nop
 800d3b4:	20000000 	.word	0x20000000
 800d3b8:	20010398 	.word	0x20010398
 800d3bc:	2000ff68 	.word	0x2000ff68
		}
		else if(walk_map[Pos.X - 1][Pos.Y] == little)			//歩数が同じ場合、優先度で評価
 800d3c0:	4b12      	ldr	r3, [pc, #72]	; (800d40c <get_nextdir+0x2fc>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	3b01      	subs	r3, #1
 800d3c6:	4a11      	ldr	r2, [pc, #68]	; (800d40c <get_nextdir+0x2fc>)
 800d3c8:	7852      	ldrb	r2, [r2, #1]
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	4a10      	ldr	r2, [pc, #64]	; (800d410 <get_nextdir+0x300>)
 800d3ce:	011b      	lsls	r3, r3, #4
 800d3d0:	440b      	add	r3, r1
 800d3d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d104      	bne.n	800d3e8 <get_nextdir+0x2d8>
		{
			Pos.NextCar = west;						//方向を保存
 800d3de:	4b0b      	ldr	r3, [pc, #44]	; (800d40c <get_nextdir+0x2fc>)
 800d3e0:	2203      	movs	r2, #3
 800d3e2:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	61bb      	str	r3, [r7, #24]
		}
	}


	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800d3e8:	4b08      	ldr	r3, [pc, #32]	; (800d40c <get_nextdir+0x2fc>)
 800d3ea:	7a5b      	ldrb	r3, [r3, #9]
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	4a07      	ldr	r2, [pc, #28]	; (800d40c <get_nextdir+0x2fc>)
 800d3f0:	78d2      	ldrb	r2, [r2, #3]
 800d3f2:	1a9b      	subs	r3, r3, r2
 800d3f4:	425a      	negs	r2, r3
 800d3f6:	f003 0303 	and.w	r3, r3, #3
 800d3fa:	f002 0203 	and.w	r2, r2, #3
 800d3fe:	bf58      	it	pl
 800d400:	4253      	negpl	r3, r2
										//演算の意味はmytyedef.h内のenum宣言から。

}
 800d402:	4618      	mov	r0, r3
 800d404:	3720      	adds	r7, #32
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20000000 	.word	0x20000000
 800d410:	2000ff68 	.word	0x2000ff68

0800d414 <fast_run>:
void fast_run(int x, int y,int x2, int y2, char turn_mode)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	603b      	str	r3, [r7, #0]
//		case west:
//			Pos.X--;	//西を向いたときはX座標を減らす
//			break;
//
//	}
	SearchOrFast = 1;
 800d422:	4b4e      	ldr	r3, [pc, #312]	; (800d55c <fast_run+0x148>)
 800d424:	2201      	movs	r2, #1
 800d426:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800d428:	4b4d      	ldr	r3, [pc, #308]	; (800d560 <fast_run+0x14c>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	709a      	strb	r2, [r3, #2]
	Pos.Car = north;
 800d42e:	4b4c      	ldr	r3, [pc, #304]	; (800d560 <fast_run+0x14c>)
 800d430:	2200      	movs	r2, #0
 800d432:	70da      	strb	r2, [r3, #3]
	Pos.NextX = Pos.X;
 800d434:	4b4a      	ldr	r3, [pc, #296]	; (800d560 <fast_run+0x14c>)
 800d436:	781a      	ldrb	r2, [r3, #0]
 800d438:	4b49      	ldr	r3, [pc, #292]	; (800d560 <fast_run+0x14c>)
 800d43a:	719a      	strb	r2, [r3, #6]
	Pos.NextY = Pos.Y + 1;
 800d43c:	4b48      	ldr	r3, [pc, #288]	; (800d560 <fast_run+0x14c>)
 800d43e:	785b      	ldrb	r3, [r3, #1]
 800d440:	3301      	adds	r3, #1
 800d442:	b2da      	uxtb	r2, r3
 800d444:	4b46      	ldr	r3, [pc, #280]	; (800d560 <fast_run+0x14c>)
 800d446:	71da      	strb	r2, [r3, #7]
	Pos.NextCar = north;
 800d448:	4b45      	ldr	r3, [pc, #276]	; (800d560 <fast_run+0x14c>)
 800d44a:	2200      	movs	r2, #0
 800d44c:	725a      	strb	r2, [r3, #9]
	Accel(61.75, ExploreVelocity);
 800d44e:	4b45      	ldr	r3, [pc, #276]	; (800d564 <fast_run+0x150>)
 800d450:	edd3 7a00 	vldr	s15, [r3]
 800d454:	eef0 0a67 	vmov.f32	s1, s15
 800d458:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800d568 <fast_run+0x154>
 800d45c:	f7fc fdcc 	bl	8009ff8 <Accel>
 	Pos.X = Pos.NextX;
 800d460:	4b3f      	ldr	r3, [pc, #252]	; (800d560 <fast_run+0x14c>)
 800d462:	799a      	ldrb	r2, [r3, #6]
 800d464:	4b3e      	ldr	r3, [pc, #248]	; (800d560 <fast_run+0x14c>)
 800d466:	701a      	strb	r2, [r3, #0]
    Pos.Y = Pos.NextY;
 800d468:	4b3d      	ldr	r3, [pc, #244]	; (800d560 <fast_run+0x14c>)
 800d46a:	79da      	ldrb	r2, [r3, #7]
 800d46c:	4b3c      	ldr	r3, [pc, #240]	; (800d560 <fast_run+0x14c>)
 800d46e:	705a      	strb	r2, [r3, #1]
	Pos.Car = Pos.NextCar;	//自分の向きを更新
 800d470:	4b3b      	ldr	r3, [pc, #236]	; (800d560 <fast_run+0x14c>)
 800d472:	7a5a      	ldrb	r2, [r3, #9]
 800d474:	4b3a      	ldr	r3, [pc, #232]	; (800d560 <fast_run+0x14c>)
 800d476:	70da      	strb	r2, [r3, #3]

	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800d478:	e054      	b.n	800d524 <fast_run+0x110>
		Pos.Dir = get_nextdir(x,y,0x03);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800d47a:	2203      	movs	r2, #3
 800d47c:	68b9      	ldr	r1, [r7, #8]
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f7ff fe46 	bl	800d110 <get_nextdir>
 800d484:	4603      	mov	r3, r0
 800d486:	b2da      	uxtb	r2, r3
 800d488:	4b35      	ldr	r3, [pc, #212]	; (800d560 <fast_run+0x14c>)
 800d48a:	709a      	strb	r2, [r3, #2]
		//向いた方向によって自分の座標を更新する
		switch(Pos.NextCar)//
 800d48c:	4b34      	ldr	r3, [pc, #208]	; (800d560 <fast_run+0x14c>)
 800d48e:	7a5b      	ldrb	r3, [r3, #9]
 800d490:	2b03      	cmp	r3, #3
 800d492:	d837      	bhi.n	800d504 <fast_run+0xf0>
 800d494:	a201      	add	r2, pc, #4	; (adr r2, 800d49c <fast_run+0x88>)
 800d496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49a:	bf00      	nop
 800d49c:	0800d4ad 	.word	0x0800d4ad
 800d4a0:	0800d4c3 	.word	0x0800d4c3
 800d4a4:	0800d4d9 	.word	0x0800d4d9
 800d4a8:	0800d4ef 	.word	0x0800d4ef
		{
			case north:
				Pos.NextX = Pos.X;
 800d4ac:	4b2c      	ldr	r3, [pc, #176]	; (800d560 <fast_run+0x14c>)
 800d4ae:	781a      	ldrb	r2, [r3, #0]
 800d4b0:	4b2b      	ldr	r3, [pc, #172]	; (800d560 <fast_run+0x14c>)
 800d4b2:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y + 1;	//北を向いた時はY座標を増やす
 800d4b4:	4b2a      	ldr	r3, [pc, #168]	; (800d560 <fast_run+0x14c>)
 800d4b6:	785b      	ldrb	r3, [r3, #1]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	4b28      	ldr	r3, [pc, #160]	; (800d560 <fast_run+0x14c>)
 800d4be:	71da      	strb	r2, [r3, #7]
				break;
 800d4c0:	e020      	b.n	800d504 <fast_run+0xf0>

			case east:
				Pos.NextX = Pos.X + 1;	//東を向いた時はX座標を増やす
 800d4c2:	4b27      	ldr	r3, [pc, #156]	; (800d560 <fast_run+0x14c>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	b2da      	uxtb	r2, r3
 800d4ca:	4b25      	ldr	r3, [pc, #148]	; (800d560 <fast_run+0x14c>)
 800d4cc:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y;
 800d4ce:	4b24      	ldr	r3, [pc, #144]	; (800d560 <fast_run+0x14c>)
 800d4d0:	785a      	ldrb	r2, [r3, #1]
 800d4d2:	4b23      	ldr	r3, [pc, #140]	; (800d560 <fast_run+0x14c>)
 800d4d4:	71da      	strb	r2, [r3, #7]
				break;
 800d4d6:	e015      	b.n	800d504 <fast_run+0xf0>

			case south:
				Pos.NextX = Pos.X;
 800d4d8:	4b21      	ldr	r3, [pc, #132]	; (800d560 <fast_run+0x14c>)
 800d4da:	781a      	ldrb	r2, [r3, #0]
 800d4dc:	4b20      	ldr	r3, [pc, #128]	; (800d560 <fast_run+0x14c>)
 800d4de:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y - 1;	//南を向いた時はY座標を減らす
 800d4e0:	4b1f      	ldr	r3, [pc, #124]	; (800d560 <fast_run+0x14c>)
 800d4e2:	785b      	ldrb	r3, [r3, #1]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	4b1d      	ldr	r3, [pc, #116]	; (800d560 <fast_run+0x14c>)
 800d4ea:	71da      	strb	r2, [r3, #7]
				break;
 800d4ec:	e00a      	b.n	800d504 <fast_run+0xf0>

			case west:
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
 800d4ee:	4b1c      	ldr	r3, [pc, #112]	; (800d560 <fast_run+0x14c>)
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	b2da      	uxtb	r2, r3
 800d4f6:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <fast_run+0x14c>)
 800d4f8:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y;
 800d4fa:	4b19      	ldr	r3, [pc, #100]	; (800d560 <fast_run+0x14c>)
 800d4fc:	785a      	ldrb	r2, [r3, #1]
 800d4fe:	4b18      	ldr	r3, [pc, #96]	; (800d560 <fast_run+0x14c>)
 800d500:	71da      	strb	r2, [r3, #7]
				break;
 800d502:	bf00      	nop

		}
		SelectAction(turn_mode);
 800d504:	7e3b      	ldrb	r3, [r7, #24]
 800d506:	4618      	mov	r0, r3
 800d508:	f7fd fa5a 	bl	800a9c0 <SelectAction>
	 	Pos.X = Pos.NextX;
 800d50c:	4b14      	ldr	r3, [pc, #80]	; (800d560 <fast_run+0x14c>)
 800d50e:	799a      	ldrb	r2, [r3, #6]
 800d510:	4b13      	ldr	r3, [pc, #76]	; (800d560 <fast_run+0x14c>)
 800d512:	701a      	strb	r2, [r3, #0]
	    Pos.Y = Pos.NextY;
 800d514:	4b12      	ldr	r3, [pc, #72]	; (800d560 <fast_run+0x14c>)
 800d516:	79da      	ldrb	r2, [r3, #7]
 800d518:	4b11      	ldr	r3, [pc, #68]	; (800d560 <fast_run+0x14c>)
 800d51a:	705a      	strb	r2, [r3, #1]
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800d51c:	4b10      	ldr	r3, [pc, #64]	; (800d560 <fast_run+0x14c>)
 800d51e:	7a5a      	ldrb	r2, [r3, #9]
 800d520:	4b0f      	ldr	r3, [pc, #60]	; (800d560 <fast_run+0x14c>)
 800d522:	70da      	strb	r2, [r3, #3]
	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800d524:	4b0e      	ldr	r3, [pc, #56]	; (800d560 <fast_run+0x14c>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	461a      	mov	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	4293      	cmp	r3, r2
 800d52e:	dca4      	bgt.n	800d47a <fast_run+0x66>
 800d530:	4b0b      	ldr	r3, [pc, #44]	; (800d560 <fast_run+0x14c>)
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	461a      	mov	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4293      	cmp	r3, r2
 800d53a:	db9e      	blt.n	800d47a <fast_run+0x66>
 800d53c:	4b08      	ldr	r3, [pc, #32]	; (800d560 <fast_run+0x14c>)
 800d53e:	785b      	ldrb	r3, [r3, #1]
 800d540:	461a      	mov	r2, r3
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	4293      	cmp	r3, r2
 800d546:	dc98      	bgt.n	800d47a <fast_run+0x66>
 800d548:	4b05      	ldr	r3, [pc, #20]	; (800d560 <fast_run+0x14c>)
 800d54a:	785b      	ldrb	r3, [r3, #1]
 800d54c:	461a      	mov	r2, r3
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	4293      	cmp	r3, r2
 800d552:	db92      	blt.n	800d47a <fast_run+0x66>
//		Pos.Car = Pos.NextCar;	//自分の向きを修正
//
//
	}
//	straight(SECTION*straight_count,FAST_ACCEL,FAST_SPEED,0.0);
}
 800d554:	bf00      	nop
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20010598 	.word	0x20010598
 800d560:	20000000 	.word	0x20000000
 800d564:	20010168 	.word	0x20010168
 800d568:	42770000 	.word	0x42770000

0800d56c <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800d574:	1d39      	adds	r1, r7, #4
 800d576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d57a:	2201      	movs	r2, #1
 800d57c:	4803      	ldr	r0, [pc, #12]	; (800d58c <__io_putchar+0x20>)
 800d57e:	f007 f8fb 	bl	8014778 <HAL_UART_Transmit>
	return ch;
 800d582:	687b      	ldr	r3, [r7, #4]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20010748 	.word	0x20010748

0800d590 <__io_getchar>:
int __io_getchar(void) {
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800d596:	2302      	movs	r3, #2
 800d598:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800d59a:	e007      	b.n	800d5ac <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800d59c:	1db9      	adds	r1, r7, #6
 800d59e:	230a      	movs	r3, #10
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	4806      	ldr	r0, [pc, #24]	; (800d5bc <__io_getchar+0x2c>)
 800d5a4:	f007 f981 	bl	80148aa <HAL_UART_Receive>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1f4      	bne.n	800d59c <__io_getchar+0xc>
//{
//	return 0;
//	break;
//}
}
return(Data);
 800d5b2:	79bb      	ldrb	r3, [r7, #6]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	20010748 	.word	0x20010748

0800d5c0 <TIM5Init>:

void TIM5Init(){
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	af00      	add	r7, sp, #0
	MX_TIM5_Init();
 800d5c4:	f000 fbc2 	bl	800dd4c <MX_TIM5_Init>
	printf("OKOK\r\n");
 800d5c8:	4802      	ldr	r0, [pc, #8]	; (800d5d4 <TIM5Init+0x14>)
 800d5ca:	f008 fd15 	bl	8015ff8 <puts>
}
 800d5ce:	bf00      	nop
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	0801a3ec 	.word	0x0801a3ec

0800d5d8 <HAL_GPIO_EXTI_Callback>:
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 800d5e2:	88fb      	ldrh	r3, [r7, #6]
 800d5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5e8:	d10b      	bne.n	800d602 <HAL_GPIO_EXTI_Callback+0x2a>
	{
	  gpio_callback_count++;
 800d5ea:	4b09      	ldr	r3, [pc, #36]	; (800d610 <HAL_GPIO_EXTI_Callback+0x38>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	4a07      	ldr	r2, [pc, #28]	; (800d610 <HAL_GPIO_EXTI_Callback+0x38>)
 800d5f2:	6013      	str	r3, [r2, #0]
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800d5f4:	4b06      	ldr	r3, [pc, #24]	; (800d610 <HAL_GPIO_EXTI_Callback+0x38>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	dd02      	ble.n	800d602 <HAL_GPIO_EXTI_Callback+0x2a>
 800d5fc:	4b04      	ldr	r3, [pc, #16]	; (800d610 <HAL_GPIO_EXTI_Callback+0x38>)
 800d5fe:	2200      	movs	r2, #0
 800d600:	601a      	str	r2, [r3, #0]
	}
}
 800d602:	bf00      	nop
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	2000fc34 	.word	0x2000fc34

0800d614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d61a:	f002 fd99 	bl	8010150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d61e:	f000 f8b9 	bl	800d794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d622:	f000 fd03 	bl	800e02c <MX_GPIO_Init>
  MX_DMA_Init();
 800d626:	f000 fcd9 	bl	800dfdc <MX_DMA_Init>
  MX_ADC1_Init();
 800d62a:	f000 f91d 	bl	800d868 <MX_ADC1_Init>
  MX_ADC2_Init();
 800d62e:	f000 f989 	bl	800d944 <MX_ADC2_Init>
  MX_TIM3_Init();
 800d632:	f000 fae3 	bl	800dbfc <MX_TIM3_Init>
  MX_TIM2_Init();
 800d636:	f000 fa6b 	bl	800db10 <MX_TIM2_Init>
  MX_SPI3_Init();
 800d63a:	f000 f9e3 	bl	800da04 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800d63e:	f000 fca3 	bl	800df88 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800d642:	f000 fb83 	bl	800dd4c <MX_TIM5_Init>
  MX_TIM4_Init();
 800d646:	f000 fb2d 	bl	800dca4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800d64a:	f000 fbf5 	bl	800de38 <MX_TIM8_Init>
  MX_TIM1_Init();
 800d64e:	f000 fa0f 	bl	800da70 <MX_TIM1_Init>
	  HAL_Delay(10000);

  }

#endif
  ADCStart();
 800d652:	f001 fa19 	bl	800ea88 <ADCStart>
  HAL_Delay(500);
 800d656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d65a:	f002 fdeb 	bl	8010234 <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800d65e:	4b46      	ldr	r3, [pc, #280]	; (800d778 <main+0x164>)
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	4618      	mov	r0, r3
 800d664:	f002 fc62 	bl	800ff2c <BatteryCheck>


  int8_t mode=0;
 800d668:	2300      	movs	r3, #0
 800d66a:	71fb      	strb	r3, [r7, #7]
  printf("mode : %d\r\n", mode);
 800d66c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d670:	4619      	mov	r1, r3
 800d672:	4842      	ldr	r0, [pc, #264]	; (800d77c <main+0x168>)
 800d674:	f008 fc4c 	bl	8015f10 <iprintf>
  ModeSelect( 0, 7, &mode);
 800d678:	1dfb      	adds	r3, r7, #7
 800d67a:	461a      	mov	r2, r3
 800d67c:	2107      	movs	r1, #7
 800d67e:	2000      	movs	r0, #0
 800d680:	f002 fc88 	bl	800ff94 <ModeSelect>
  MX_TIM5_Init();
 800d684:	f000 fb62 	bl	800dd4c <MX_TIM5_Init>
  Signal( mode );
 800d688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d68c:	4618      	mov	r0, r3
 800d68e:	f002 fc2f 	bl	800fef0 <Signal>
  printf("Switch\r\n");
 800d692:	483b      	ldr	r0, [pc, #236]	; (800d780 <main+0x16c>)
 800d694:	f008 fcb0 	bl	8015ff8 <puts>

  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);//1200,0);//2430,0);//7.3,1215,0);//40kHzの//14.6, 2430,0);//(20khzのと?��?);//1200,0.0);//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら 36.6*0.6=18+3.96
 800d698:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 800d784 <main+0x170>
 800d69c:	eddf 0a3a 	vldr	s1, [pc, #232]	; 800d788 <main+0x174>
 800d6a0:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800d78c <main+0x178>
 800d6a4:	2004      	movs	r0, #4
 800d6a6:	f002 fa73 	bl	800fb90 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);// 1200,0);//2430,0);//7.3,1215,0);//14.6, 2430,0);//1200,0.0);//, 2430,0);//17.5//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800d6aa:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800d784 <main+0x170>
 800d6ae:	eddf 0a36 	vldr	s1, [pc, #216]	; 800d788 <main+0x174>
 800d6b2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800d78c <main+0x178>
 800d6b6:	2005      	movs	r0, #5
 800d6b8:	f002 fa6a 	bl	800fb90 <PIDSetGain>
  //PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
  PIDSetGain(A_VELO_PID, 12,0,
 800d6bc:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800d790 <main+0x17c>
 800d6c0:	eddf 0a33 	vldr	s1, [pc, #204]	; 800d790 <main+0x17c>
 800d6c4:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	f002 fa61 	bl	800fb90 <PIDSetGain>
		  0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
  PIDSetGain(F_WALL_PID, 6, 0, 0	);
 800d6ce:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800d790 <main+0x17c>
 800d6d2:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800d790 <main+0x17c>
 800d6d6:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800d6da:	2008      	movs	r0, #8
 800d6dc:	f002 fa58 	bl	800fb90 <PIDSetGain>
  PIDSetGain(D_WALL_PID, 6, 0, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800d6e0:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 800d790 <main+0x17c>
 800d6e4:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800d790 <main+0x17c>
 800d6e8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	f002 fa4f 	bl	800fb90 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 12,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800d6f2:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800d790 <main+0x17c>
 800d6f6:	eddf 0a26 	vldr	s1, [pc, #152]	; 800d790 <main+0x17c>
 800d6fa:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d6fe:	2002      	movs	r0, #2
 800d700:	f002 fa46 	bl	800fb90 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 12,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800d704:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800d790 <main+0x17c>
 800d708:	eddf 0a21 	vldr	s1, [pc, #132]	; 800d790 <main+0x17c>
 800d70c:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d710:	2003      	movs	r0, #3
 800d712:	f002 fa3d 	bl	800fb90 <PIDSetGain>

  while (1)
  {
	  switch( mode )
 800d716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d71a:	2b07      	cmp	r3, #7
 800d71c:	d82a      	bhi.n	800d774 <main+0x160>
 800d71e:	a201      	add	r2, pc, #4	; (adr r2, 800d724 <main+0x110>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d745 	.word	0x0800d745
 800d728:	0800d74b 	.word	0x0800d74b
 800d72c:	0800d751 	.word	0x0800d751
 800d730:	0800d757 	.word	0x0800d757
 800d734:	0800d75d 	.word	0x0800d75d
 800d738:	0800d763 	.word	0x0800d763
 800d73c:	0800d769 	.word	0x0800d769
 800d740:	0800d76f 	.word	0x0800d76f
	  {
	  case 0:

		  ParameterSetting();
 800d744:	f7fe fbf4 	bl	800bf30 <ParameterSetting>
		//wall_flash_print();
		  break;
 800d748:	e015      	b.n	800d776 <main+0x162>
	  case 1:
		  GainTestRWall();
 800d74a:	f7fe fbf9 	bl	800bf40 <GainTestRWall>
		  break;
 800d74e:	e012      	b.n	800d776 <main+0x162>
	  case 2:
		  GainTestDWall();
 800d750:	f7fe fc32 	bl	800bfb8 <GainTestDWall>
		  break;
 800d754:	e00f      	b.n	800d776 <main+0x162>
	  case 3:
		  Debug();
 800d756:	f7fe fb5f 	bl	800be18 <Debug>
		  break;
 800d75a:	e00c      	b.n	800d776 <main+0x162>
	  case 4:
		  //GainTestLWall();
		  FastestRun();
 800d75c:	f7fe fd66 	bl	800c22c <FastestRun>
		  break;
 800d760:	e009      	b.n	800d776 <main+0x162>
	  case 5:
		  GainTestAVelo();
 800d762:	f7fe fc93 	bl	800c08c <GainTestAVelo>
		  break;
 800d766:	e006      	b.n	800d776 <main+0x162>
	  case 6:
		  Explore();
 800d768:	f7fe fe80 	bl	800c46c <Explore>
		  break;
 800d76c:	e003      	b.n	800d776 <main+0x162>
	  case 7:
		  WritingFree();
 800d76e:	f7fe fccd 	bl	800c10c <WritingFree>
		  break;
 800d772:	e000      	b.n	800d776 <main+0x162>
	  default :
		  break;
 800d774:	bf00      	nop
	  switch( mode )
 800d776:	e7ce      	b.n	800d716 <main+0x102>
 800d778:	2000fcbc 	.word	0x2000fcbc
 800d77c:	0801a3f4 	.word	0x0801a3f4
 800d780:	0801a400 	.word	0x0801a400
 800d784:	3a83126f 	.word	0x3a83126f
 800d788:	452f0000 	.word	0x452f0000
 800d78c:	4169999a 	.word	0x4169999a
 800d790:	00000000 	.word	0x00000000

0800d794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b094      	sub	sp, #80	; 0x50
 800d798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d79a:	f107 0320 	add.w	r3, r7, #32
 800d79e:	2230      	movs	r2, #48	; 0x30
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f007 fd6d 	bl	8015282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d7a8:	f107 030c 	add.w	r3, r7, #12
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	601a      	str	r2, [r3, #0]
 800d7b0:	605a      	str	r2, [r3, #4]
 800d7b2:	609a      	str	r2, [r3, #8]
 800d7b4:	60da      	str	r2, [r3, #12]
 800d7b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60bb      	str	r3, [r7, #8]
 800d7bc:	4b28      	ldr	r3, [pc, #160]	; (800d860 <SystemClock_Config+0xcc>)
 800d7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c0:	4a27      	ldr	r2, [pc, #156]	; (800d860 <SystemClock_Config+0xcc>)
 800d7c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7c6:	6413      	str	r3, [r2, #64]	; 0x40
 800d7c8:	4b25      	ldr	r3, [pc, #148]	; (800d860 <SystemClock_Config+0xcc>)
 800d7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7d0:	60bb      	str	r3, [r7, #8]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	607b      	str	r3, [r7, #4]
 800d7d8:	4b22      	ldr	r3, [pc, #136]	; (800d864 <SystemClock_Config+0xd0>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a21      	ldr	r2, [pc, #132]	; (800d864 <SystemClock_Config+0xd0>)
 800d7de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7e2:	6013      	str	r3, [r2, #0]
 800d7e4:	4b1f      	ldr	r3, [pc, #124]	; (800d864 <SystemClock_Config+0xd0>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7ec:	607b      	str	r3, [r7, #4]
 800d7ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d7f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d7fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d804:	2304      	movs	r3, #4
 800d806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d808:	23a8      	movs	r3, #168	; 0xa8
 800d80a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d80c:	2302      	movs	r3, #2
 800d80e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d810:	2304      	movs	r3, #4
 800d812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d814:	f107 0320 	add.w	r3, r7, #32
 800d818:	4618      	mov	r0, r3
 800d81a:	f004 fa11 	bl	8011c40 <HAL_RCC_OscConfig>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d001      	beq.n	800d828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d824:	f000 fcd6 	bl	800e1d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d828:	230f      	movs	r3, #15
 800d82a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d82c:	2302      	movs	r3, #2
 800d82e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d830:	2300      	movs	r3, #0
 800d832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d834:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d83a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d83e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d840:	f107 030c 	add.w	r3, r7, #12
 800d844:	2105      	movs	r1, #5
 800d846:	4618      	mov	r0, r3
 800d848:	f004 fc6a 	bl	8012120 <HAL_RCC_ClockConfig>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d852:	f000 fcbf 	bl	800e1d4 <Error_Handler>
  }
}
 800d856:	bf00      	nop
 800d858:	3750      	adds	r7, #80	; 0x50
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	40023800 	.word	0x40023800
 800d864:	40007000 	.word	0x40007000

0800d868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d86e:	463b      	mov	r3, r7
 800d870:	2200      	movs	r2, #0
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	605a      	str	r2, [r3, #4]
 800d876:	609a      	str	r2, [r3, #8]
 800d878:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800d87a:	4b2f      	ldr	r3, [pc, #188]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d87c:	4a2f      	ldr	r2, [pc, #188]	; (800d93c <MX_ADC1_Init+0xd4>)
 800d87e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d880:	4b2d      	ldr	r3, [pc, #180]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d886:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d888:	4b2b      	ldr	r3, [pc, #172]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800d88e:	4b2a      	ldr	r3, [pc, #168]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d890:	2201      	movs	r2, #1
 800d892:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800d894:	4b28      	ldr	r3, [pc, #160]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d896:	2201      	movs	r2, #1
 800d898:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d89a:	4b27      	ldr	r3, [pc, #156]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d8a2:	4b25      	ldr	r3, [pc, #148]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d8a8:	4b23      	ldr	r3, [pc, #140]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d8aa:	4a25      	ldr	r2, [pc, #148]	; (800d940 <MX_ADC1_Init+0xd8>)
 800d8ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d8ae:	4b22      	ldr	r3, [pc, #136]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800d8b4:	4b20      	ldr	r3, [pc, #128]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d8b6:	2203      	movs	r2, #3
 800d8b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d8ba:	4b1f      	ldr	r3, [pc, #124]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d8c2:	4b1d      	ldr	r3, [pc, #116]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d8c8:	481b      	ldr	r0, [pc, #108]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d8ca:	f002 fcd5 	bl	8010278 <HAL_ADC_Init>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800d8d4:	f000 fc7e 	bl	800e1d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800d8d8:	230a      	movs	r3, #10
 800d8da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d8e0:	2303      	movs	r3, #3
 800d8e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d8e4:	463b      	mov	r3, r7
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4813      	ldr	r0, [pc, #76]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d8ea:	f002 fe63 	bl	80105b4 <HAL_ADC_ConfigChannel>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800d8f4:	f000 fc6e 	bl	800e1d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800d8f8:	230e      	movs	r3, #14
 800d8fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d900:	463b      	mov	r3, r7
 800d902:	4619      	mov	r1, r3
 800d904:	480c      	ldr	r0, [pc, #48]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d906:	f002 fe55 	bl	80105b4 <HAL_ADC_ConfigChannel>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800d910:	f000 fc60 	bl	800e1d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800d914:	2309      	movs	r3, #9
 800d916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800d918:	2303      	movs	r3, #3
 800d91a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d91c:	463b      	mov	r3, r7
 800d91e:	4619      	mov	r1, r3
 800d920:	4805      	ldr	r0, [pc, #20]	; (800d938 <MX_ADC1_Init+0xd0>)
 800d922:	f002 fe47 	bl	80105b4 <HAL_ADC_ConfigChannel>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800d92c:	f000 fc52 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d930:	bf00      	nop
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	20010700 	.word	0x20010700
 800d93c:	40012000 	.word	0x40012000
 800d940:	0f000001 	.word	0x0f000001

0800d944 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d94a:	463b      	mov	r3, r7
 800d94c:	2200      	movs	r2, #0
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	605a      	str	r2, [r3, #4]
 800d952:	609a      	str	r2, [r3, #8]
 800d954:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800d956:	4b28      	ldr	r3, [pc, #160]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d958:	4a28      	ldr	r2, [pc, #160]	; (800d9fc <MX_ADC2_Init+0xb8>)
 800d95a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d95c:	4b26      	ldr	r3, [pc, #152]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d95e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d962:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800d964:	4b24      	ldr	r3, [pc, #144]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d966:	2200      	movs	r2, #0
 800d968:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800d96a:	4b23      	ldr	r3, [pc, #140]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d96c:	2201      	movs	r2, #1
 800d96e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800d970:	4b21      	ldr	r3, [pc, #132]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d972:	2201      	movs	r2, #1
 800d974:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800d976:	4b20      	ldr	r3, [pc, #128]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d97e:	4b1e      	ldr	r3, [pc, #120]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d980:	2200      	movs	r2, #0
 800d982:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d984:	4b1c      	ldr	r3, [pc, #112]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d986:	4a1e      	ldr	r2, [pc, #120]	; (800da00 <MX_ADC2_Init+0xbc>)
 800d988:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d98a:	4b1b      	ldr	r3, [pc, #108]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800d990:	4b19      	ldr	r3, [pc, #100]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d992:	2202      	movs	r2, #2
 800d994:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800d996:	4b18      	ldr	r3, [pc, #96]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d998:	2201      	movs	r2, #1
 800d99a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d99e:	4b16      	ldr	r3, [pc, #88]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800d9a4:	4814      	ldr	r0, [pc, #80]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d9a6:	f002 fc67 	bl	8010278 <HAL_ADC_Init>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d001      	beq.n	800d9b4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800d9b0:	f000 fc10 	bl	800e1d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800d9b4:	230b      	movs	r3, #11
 800d9b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d9bc:	2303      	movs	r3, #3
 800d9be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d9c0:	463b      	mov	r3, r7
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	480c      	ldr	r0, [pc, #48]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d9c6:	f002 fdf5 	bl	80105b4 <HAL_ADC_ConfigChannel>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800d9d0:	f000 fc00 	bl	800e1d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800d9d4:	230f      	movs	r3, #15
 800d9d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800d9d8:	2302      	movs	r3, #2
 800d9da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d9dc:	463b      	mov	r3, r7
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4805      	ldr	r0, [pc, #20]	; (800d9f8 <MX_ADC2_Init+0xb4>)
 800d9e2:	f002 fde7 	bl	80105b4 <HAL_ADC_ConfigChannel>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d001      	beq.n	800d9f0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800d9ec:	f000 fbf2 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	20010620 	.word	0x20010620
 800d9fc:	40012100 	.word	0x40012100
 800da00:	0f000001 	.word	0x0f000001

0800da04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800da08:	4b17      	ldr	r3, [pc, #92]	; (800da68 <MX_SPI3_Init+0x64>)
 800da0a:	4a18      	ldr	r2, [pc, #96]	; (800da6c <MX_SPI3_Init+0x68>)
 800da0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800da0e:	4b16      	ldr	r3, [pc, #88]	; (800da68 <MX_SPI3_Init+0x64>)
 800da10:	f44f 7282 	mov.w	r2, #260	; 0x104
 800da14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800da16:	4b14      	ldr	r3, [pc, #80]	; (800da68 <MX_SPI3_Init+0x64>)
 800da18:	2200      	movs	r2, #0
 800da1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800da1c:	4b12      	ldr	r3, [pc, #72]	; (800da68 <MX_SPI3_Init+0x64>)
 800da1e:	2200      	movs	r2, #0
 800da20:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800da22:	4b11      	ldr	r3, [pc, #68]	; (800da68 <MX_SPI3_Init+0x64>)
 800da24:	2202      	movs	r2, #2
 800da26:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800da28:	4b0f      	ldr	r3, [pc, #60]	; (800da68 <MX_SPI3_Init+0x64>)
 800da2a:	2201      	movs	r2, #1
 800da2c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800da2e:	4b0e      	ldr	r3, [pc, #56]	; (800da68 <MX_SPI3_Init+0x64>)
 800da30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da34:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800da36:	4b0c      	ldr	r3, [pc, #48]	; (800da68 <MX_SPI3_Init+0x64>)
 800da38:	2228      	movs	r2, #40	; 0x28
 800da3a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800da3c:	4b0a      	ldr	r3, [pc, #40]	; (800da68 <MX_SPI3_Init+0x64>)
 800da3e:	2200      	movs	r2, #0
 800da40:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800da42:	4b09      	ldr	r3, [pc, #36]	; (800da68 <MX_SPI3_Init+0x64>)
 800da44:	2200      	movs	r2, #0
 800da46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da48:	4b07      	ldr	r3, [pc, #28]	; (800da68 <MX_SPI3_Init+0x64>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800da4e:	4b06      	ldr	r3, [pc, #24]	; (800da68 <MX_SPI3_Init+0x64>)
 800da50:	220a      	movs	r2, #10
 800da52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800da54:	4804      	ldr	r0, [pc, #16]	; (800da68 <MX_SPI3_Init+0x64>)
 800da56:	f004 fd55 	bl	8012504 <HAL_SPI_Init>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d001      	beq.n	800da64 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800da60:	f000 fbb8 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800da64:	bf00      	nop
 800da66:	bd80      	pop	{r7, pc}
 800da68:	200106a8 	.word	0x200106a8
 800da6c:	40003c00 	.word	0x40003c00

0800da70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800da76:	f107 0308 	add.w	r3, r7, #8
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]
 800da7e:	605a      	str	r2, [r3, #4]
 800da80:	609a      	str	r2, [r3, #8]
 800da82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800da84:	463b      	mov	r3, r7
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800da8c:	4b1e      	ldr	r3, [pc, #120]	; (800db08 <MX_TIM1_Init+0x98>)
 800da8e:	4a1f      	ldr	r2, [pc, #124]	; (800db0c <MX_TIM1_Init+0x9c>)
 800da90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800da92:	4b1d      	ldr	r3, [pc, #116]	; (800db08 <MX_TIM1_Init+0x98>)
 800da94:	22a7      	movs	r2, #167	; 0xa7
 800da96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da98:	4b1b      	ldr	r3, [pc, #108]	; (800db08 <MX_TIM1_Init+0x98>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800da9e:	4b1a      	ldr	r3, [pc, #104]	; (800db08 <MX_TIM1_Init+0x98>)
 800daa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800daa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800daa6:	4b18      	ldr	r3, [pc, #96]	; (800db08 <MX_TIM1_Init+0x98>)
 800daa8:	2200      	movs	r2, #0
 800daaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800daac:	4b16      	ldr	r3, [pc, #88]	; (800db08 <MX_TIM1_Init+0x98>)
 800daae:	2200      	movs	r2, #0
 800dab0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dab2:	4b15      	ldr	r3, [pc, #84]	; (800db08 <MX_TIM1_Init+0x98>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dab8:	4813      	ldr	r0, [pc, #76]	; (800db08 <MX_TIM1_Init+0x98>)
 800daba:	f005 fa77 	bl	8012fac <HAL_TIM_Base_Init>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d001      	beq.n	800dac8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800dac4:	f000 fb86 	bl	800e1d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dacc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dace:	f107 0308 	add.w	r3, r7, #8
 800dad2:	4619      	mov	r1, r3
 800dad4:	480c      	ldr	r0, [pc, #48]	; (800db08 <MX_TIM1_Init+0x98>)
 800dad6:	f006 f841 	bl	8013b5c <HAL_TIM_ConfigClockSource>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800dae0:	f000 fb78 	bl	800e1d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dae4:	2300      	movs	r3, #0
 800dae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dae8:	2300      	movs	r3, #0
 800daea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800daec:	463b      	mov	r3, r7
 800daee:	4619      	mov	r1, r3
 800daf0:	4805      	ldr	r0, [pc, #20]	; (800db08 <MX_TIM1_Init+0x98>)
 800daf2:	f006 fced 	bl	80144d0 <HAL_TIMEx_MasterConfigSynchronization>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800dafc:	f000 fb6a 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800db00:	bf00      	nop
 800db02:	3718      	adds	r7, #24
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	200107e8 	.word	0x200107e8
 800db0c:	40010000 	.word	0x40010000

0800db10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b08e      	sub	sp, #56	; 0x38
 800db14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800db16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db1a:	2200      	movs	r2, #0
 800db1c:	601a      	str	r2, [r3, #0]
 800db1e:	605a      	str	r2, [r3, #4]
 800db20:	609a      	str	r2, [r3, #8]
 800db22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db24:	f107 0320 	add.w	r3, r7, #32
 800db28:	2200      	movs	r2, #0
 800db2a:	601a      	str	r2, [r3, #0]
 800db2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800db2e:	1d3b      	adds	r3, r7, #4
 800db30:	2200      	movs	r2, #0
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	605a      	str	r2, [r3, #4]
 800db36:	609a      	str	r2, [r3, #8]
 800db38:	60da      	str	r2, [r3, #12]
 800db3a:	611a      	str	r2, [r3, #16]
 800db3c:	615a      	str	r2, [r3, #20]
 800db3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800db40:	4b2d      	ldr	r3, [pc, #180]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800db46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800db48:	4b2b      	ldr	r3, [pc, #172]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db4e:	4b2a      	ldr	r3, [pc, #168]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db50:	2200      	movs	r2, #0
 800db52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800db54:	4b28      	ldr	r3, [pc, #160]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db56:	f241 0267 	movw	r2, #4199	; 0x1067
 800db5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db5c:	4b26      	ldr	r3, [pc, #152]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db5e:	2200      	movs	r2, #0
 800db60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db62:	4b25      	ldr	r3, [pc, #148]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db64:	2200      	movs	r2, #0
 800db66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800db68:	4823      	ldr	r0, [pc, #140]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db6a:	f005 fa1f 	bl	8012fac <HAL_TIM_Base_Init>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800db74:	f000 fb2e 	bl	800e1d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800db78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800db7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db82:	4619      	mov	r1, r3
 800db84:	481c      	ldr	r0, [pc, #112]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db86:	f005 ffe9 	bl	8013b5c <HAL_TIM_ConfigClockSource>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800db90:	f000 fb20 	bl	800e1d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800db94:	4818      	ldr	r0, [pc, #96]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800db96:	f005 fbd7 	bl	8013348 <HAL_TIM_PWM_Init>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800dba0:	f000 fb18 	bl	800e1d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dba4:	2300      	movs	r3, #0
 800dba6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dbac:	f107 0320 	add.w	r3, r7, #32
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4811      	ldr	r0, [pc, #68]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800dbb4:	f006 fc8c 	bl	80144d0 <HAL_TIMEx_MasterConfigSynchronization>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800dbbe:	f000 fb09 	bl	800e1d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dbc2:	2360      	movs	r3, #96	; 0x60
 800dbc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dbd2:	1d3b      	adds	r3, r7, #4
 800dbd4:	220c      	movs	r2, #12
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	4807      	ldr	r0, [pc, #28]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800dbda:	f005 fef9 	bl	80139d0 <HAL_TIM_PWM_ConfigChannel>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800dbe4:	f000 faf6 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dbe8:	4803      	ldr	r0, [pc, #12]	; (800dbf8 <MX_TIM2_Init+0xe8>)
 800dbea:	f000 fd4d 	bl	800e688 <HAL_TIM_MspPostInit>

}
 800dbee:	bf00      	nop
 800dbf0:	3738      	adds	r7, #56	; 0x38
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	2000fc3c 	.word	0x2000fc3c

0800dbfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08c      	sub	sp, #48	; 0x30
 800dc00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800dc02:	f107 030c 	add.w	r3, r7, #12
 800dc06:	2224      	movs	r2, #36	; 0x24
 800dc08:	2100      	movs	r1, #0
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f007 fb39 	bl	8015282 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc10:	1d3b      	adds	r3, r7, #4
 800dc12:	2200      	movs	r2, #0
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dc18:	4b20      	ldr	r3, [pc, #128]	; (800dc9c <MX_TIM3_Init+0xa0>)
 800dc1a:	4a21      	ldr	r2, [pc, #132]	; (800dca0 <MX_TIM3_Init+0xa4>)
 800dc1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dc1e:	4b1f      	ldr	r3, [pc, #124]	; (800dc9c <MX_TIM3_Init+0xa0>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc24:	4b1d      	ldr	r3, [pc, #116]	; (800dc9c <MX_TIM3_Init+0xa0>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800dc2a:	4b1c      	ldr	r3, [pc, #112]	; (800dc9c <MX_TIM3_Init+0xa0>)
 800dc2c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800dc30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc32:	4b1a      	ldr	r3, [pc, #104]	; (800dc9c <MX_TIM3_Init+0xa0>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc38:	4b18      	ldr	r3, [pc, #96]	; (800dc9c <MX_TIM3_Init+0xa0>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dc3e:	2303      	movs	r3, #3
 800dc40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dc42:	2300      	movs	r3, #0
 800dc44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dc46:	2301      	movs	r3, #1
 800dc48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dc52:	2300      	movs	r3, #0
 800dc54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dc56:	2301      	movs	r3, #1
 800dc58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800dc62:	f107 030c 	add.w	r3, r7, #12
 800dc66:	4619      	mov	r1, r3
 800dc68:	480c      	ldr	r0, [pc, #48]	; (800dc9c <MX_TIM3_Init+0xa0>)
 800dc6a:	f005 fc39 	bl	80134e0 <HAL_TIM_Encoder_Init>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800dc74:	f000 faae 	bl	800e1d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dc80:	1d3b      	adds	r3, r7, #4
 800dc82:	4619      	mov	r1, r3
 800dc84:	4805      	ldr	r0, [pc, #20]	; (800dc9c <MX_TIM3_Init+0xa0>)
 800dc86:	f006 fc23 	bl	80144d0 <HAL_TIMEx_MasterConfigSynchronization>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800dc90:	f000 faa0 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800dc94:	bf00      	nop
 800dc96:	3730      	adds	r7, #48	; 0x30
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	20010668 	.word	0x20010668
 800dca0:	40000400 	.word	0x40000400

0800dca4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b08c      	sub	sp, #48	; 0x30
 800dca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800dcaa:	f107 030c 	add.w	r3, r7, #12
 800dcae:	2224      	movs	r2, #36	; 0x24
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f007 fae5 	bl	8015282 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dcb8:	1d3b      	adds	r3, r7, #4
 800dcba:	2200      	movs	r2, #0
 800dcbc:	601a      	str	r2, [r3, #0]
 800dcbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800dcc0:	4b20      	ldr	r3, [pc, #128]	; (800dd44 <MX_TIM4_Init+0xa0>)
 800dcc2:	4a21      	ldr	r2, [pc, #132]	; (800dd48 <MX_TIM4_Init+0xa4>)
 800dcc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800dcc6:	4b1f      	ldr	r3, [pc, #124]	; (800dd44 <MX_TIM4_Init+0xa0>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dccc:	4b1d      	ldr	r3, [pc, #116]	; (800dd44 <MX_TIM4_Init+0xa0>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800dcd2:	4b1c      	ldr	r3, [pc, #112]	; (800dd44 <MX_TIM4_Init+0xa0>)
 800dcd4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800dcd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dcda:	4b1a      	ldr	r3, [pc, #104]	; (800dd44 <MX_TIM4_Init+0xa0>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dce0:	4b18      	ldr	r3, [pc, #96]	; (800dd44 <MX_TIM4_Init+0xa0>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dce6:	2303      	movs	r3, #3
 800dce8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dcea:	2300      	movs	r3, #0
 800dcec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dd02:	2300      	movs	r3, #0
 800dd04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800dd0a:	f107 030c 	add.w	r3, r7, #12
 800dd0e:	4619      	mov	r1, r3
 800dd10:	480c      	ldr	r0, [pc, #48]	; (800dd44 <MX_TIM4_Init+0xa0>)
 800dd12:	f005 fbe5 	bl	80134e0 <HAL_TIM_Encoder_Init>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800dd1c:	f000 fa5a 	bl	800e1d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd20:	2300      	movs	r3, #0
 800dd22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd24:	2300      	movs	r3, #0
 800dd26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dd28:	1d3b      	adds	r3, r7, #4
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	4805      	ldr	r0, [pc, #20]	; (800dd44 <MX_TIM4_Init+0xa0>)
 800dd2e:	f006 fbcf 	bl	80144d0 <HAL_TIMEx_MasterConfigSynchronization>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800dd38:	f000 fa4c 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800dd3c:	bf00      	nop
 800dd3e:	3730      	adds	r7, #48	; 0x30
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	200105e0 	.word	0x200105e0
 800dd48:	40000800 	.word	0x40000800

0800dd4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08e      	sub	sp, #56	; 0x38
 800dd50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd56:	2200      	movs	r2, #0
 800dd58:	601a      	str	r2, [r3, #0]
 800dd5a:	605a      	str	r2, [r3, #4]
 800dd5c:	609a      	str	r2, [r3, #8]
 800dd5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd60:	f107 0320 	add.w	r3, r7, #32
 800dd64:	2200      	movs	r2, #0
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dd6a:	1d3b      	adds	r3, r7, #4
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	605a      	str	r2, [r3, #4]
 800dd72:	609a      	str	r2, [r3, #8]
 800dd74:	60da      	str	r2, [r3, #12]
 800dd76:	611a      	str	r2, [r3, #16]
 800dd78:	615a      	str	r2, [r3, #20]
 800dd7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800dd7c:	4b2c      	ldr	r3, [pc, #176]	; (800de30 <MX_TIM5_Init+0xe4>)
 800dd7e:	4a2d      	ldr	r2, [pc, #180]	; (800de34 <MX_TIM5_Init+0xe8>)
 800dd80:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800dd82:	4b2b      	ldr	r3, [pc, #172]	; (800de30 <MX_TIM5_Init+0xe4>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd88:	4b29      	ldr	r3, [pc, #164]	; (800de30 <MX_TIM5_Init+0xe4>)
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800dd8e:	4b28      	ldr	r3, [pc, #160]	; (800de30 <MX_TIM5_Init+0xe4>)
 800dd90:	f241 0267 	movw	r2, #4199	; 0x1067
 800dd94:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd96:	4b26      	ldr	r3, [pc, #152]	; (800de30 <MX_TIM5_Init+0xe4>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd9c:	4b24      	ldr	r3, [pc, #144]	; (800de30 <MX_TIM5_Init+0xe4>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800dda2:	4823      	ldr	r0, [pc, #140]	; (800de30 <MX_TIM5_Init+0xe4>)
 800dda4:	f005 f902 	bl	8012fac <HAL_TIM_Base_Init>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800ddae:	f000 fa11 	bl	800e1d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ddb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ddb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	481c      	ldr	r0, [pc, #112]	; (800de30 <MX_TIM5_Init+0xe4>)
 800ddc0:	f005 fecc 	bl	8013b5c <HAL_TIM_ConfigClockSource>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800ddca:	f000 fa03 	bl	800e1d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800ddce:	4818      	ldr	r0, [pc, #96]	; (800de30 <MX_TIM5_Init+0xe4>)
 800ddd0:	f005 faba 	bl	8013348 <HAL_TIM_PWM_Init>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800ddda:	f000 f9fb 	bl	800e1d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ddde:	2300      	movs	r3, #0
 800dde0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dde2:	2300      	movs	r3, #0
 800dde4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dde6:	f107 0320 	add.w	r3, r7, #32
 800ddea:	4619      	mov	r1, r3
 800ddec:	4810      	ldr	r0, [pc, #64]	; (800de30 <MX_TIM5_Init+0xe4>)
 800ddee:	f006 fb6f 	bl	80144d0 <HAL_TIMEx_MasterConfigSynchronization>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800ddf8:	f000 f9ec 	bl	800e1d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ddfc:	2360      	movs	r3, #96	; 0x60
 800ddfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800de00:	2300      	movs	r3, #0
 800de02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de04:	2300      	movs	r3, #0
 800de06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800de08:	2300      	movs	r3, #0
 800de0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800de0c:	1d3b      	adds	r3, r7, #4
 800de0e:	2204      	movs	r2, #4
 800de10:	4619      	mov	r1, r3
 800de12:	4807      	ldr	r0, [pc, #28]	; (800de30 <MX_TIM5_Init+0xe4>)
 800de14:	f005 fddc 	bl	80139d0 <HAL_TIM_PWM_ConfigChannel>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800de1e:	f000 f9d9 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800de22:	4803      	ldr	r0, [pc, #12]	; (800de30 <MX_TIM5_Init+0xe4>)
 800de24:	f000 fc30 	bl	800e688 <HAL_TIM_MspPostInit>

}
 800de28:	bf00      	nop
 800de2a:	3738      	adds	r7, #56	; 0x38
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	2000fc7c 	.word	0x2000fc7c
 800de34:	40000c00 	.word	0x40000c00

0800de38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b096      	sub	sp, #88	; 0x58
 800de3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800de3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de42:	2200      	movs	r2, #0
 800de44:	601a      	str	r2, [r3, #0]
 800de46:	605a      	str	r2, [r3, #4]
 800de48:	609a      	str	r2, [r3, #8]
 800de4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800de50:	2200      	movs	r2, #0
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de5a:	2200      	movs	r2, #0
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	605a      	str	r2, [r3, #4]
 800de60:	609a      	str	r2, [r3, #8]
 800de62:	60da      	str	r2, [r3, #12]
 800de64:	611a      	str	r2, [r3, #16]
 800de66:	615a      	str	r2, [r3, #20]
 800de68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800de6a:	1d3b      	adds	r3, r7, #4
 800de6c:	2220      	movs	r2, #32
 800de6e:	2100      	movs	r1, #0
 800de70:	4618      	mov	r0, r3
 800de72:	f007 fa06 	bl	8015282 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800de76:	4b42      	ldr	r3, [pc, #264]	; (800df80 <MX_TIM8_Init+0x148>)
 800de78:	4a42      	ldr	r2, [pc, #264]	; (800df84 <MX_TIM8_Init+0x14c>)
 800de7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800de7c:	4b40      	ldr	r3, [pc, #256]	; (800df80 <MX_TIM8_Init+0x148>)
 800de7e:	22a7      	movs	r2, #167	; 0xa7
 800de80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de82:	4b3f      	ldr	r3, [pc, #252]	; (800df80 <MX_TIM8_Init+0x148>)
 800de84:	2200      	movs	r2, #0
 800de86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800de88:	4b3d      	ldr	r3, [pc, #244]	; (800df80 <MX_TIM8_Init+0x148>)
 800de8a:	2231      	movs	r2, #49	; 0x31
 800de8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de8e:	4b3c      	ldr	r3, [pc, #240]	; (800df80 <MX_TIM8_Init+0x148>)
 800de90:	2200      	movs	r2, #0
 800de92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800de94:	4b3a      	ldr	r3, [pc, #232]	; (800df80 <MX_TIM8_Init+0x148>)
 800de96:	2200      	movs	r2, #0
 800de98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800de9a:	4b39      	ldr	r3, [pc, #228]	; (800df80 <MX_TIM8_Init+0x148>)
 800de9c:	2280      	movs	r2, #128	; 0x80
 800de9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800dea0:	4837      	ldr	r0, [pc, #220]	; (800df80 <MX_TIM8_Init+0x148>)
 800dea2:	f005 f883 	bl	8012fac <HAL_TIM_Base_Init>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d001      	beq.n	800deb0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800deac:	f000 f992 	bl	800e1d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800deb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800deb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800deba:	4619      	mov	r1, r3
 800debc:	4830      	ldr	r0, [pc, #192]	; (800df80 <MX_TIM8_Init+0x148>)
 800debe:	f005 fe4d 	bl	8013b5c <HAL_TIM_ConfigClockSource>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d001      	beq.n	800decc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800dec8:	f000 f984 	bl	800e1d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800decc:	482c      	ldr	r0, [pc, #176]	; (800df80 <MX_TIM8_Init+0x148>)
 800dece:	f005 f8e7 	bl	80130a0 <HAL_TIM_OC_Init>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800ded8:	f000 f97c 	bl	800e1d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dedc:	2300      	movs	r3, #0
 800dede:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dee0:	2300      	movs	r3, #0
 800dee2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dee4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dee8:	4619      	mov	r1, r3
 800deea:	4825      	ldr	r0, [pc, #148]	; (800df80 <MX_TIM8_Init+0x148>)
 800deec:	f006 faf0 	bl	80144d0 <HAL_TIMEx_MasterConfigSynchronization>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800def6:	f000 f96d 	bl	800e1d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800defa:	2330      	movs	r3, #48	; 0x30
 800defc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800defe:	2318      	movs	r3, #24
 800df00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800df02:	2300      	movs	r3, #0
 800df04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800df06:	2300      	movs	r3, #0
 800df08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800df0a:	2300      	movs	r3, #0
 800df0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800df0e:	2300      	movs	r3, #0
 800df10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800df12:	2300      	movs	r3, #0
 800df14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800df16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df1a:	2200      	movs	r2, #0
 800df1c:	4619      	mov	r1, r3
 800df1e:	4818      	ldr	r0, [pc, #96]	; (800df80 <MX_TIM8_Init+0x148>)
 800df20:	f005 fcf6 	bl	8013910 <HAL_TIM_OC_ConfigChannel>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800df2a:	f000 f953 	bl	800e1d4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800df2e:	4b14      	ldr	r3, [pc, #80]	; (800df80 <MX_TIM8_Init+0x148>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	699a      	ldr	r2, [r3, #24]
 800df34:	4b12      	ldr	r3, [pc, #72]	; (800df80 <MX_TIM8_Init+0x148>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f042 0208 	orr.w	r2, r2, #8
 800df3c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800df3e:	2300      	movs	r3, #0
 800df40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800df42:	2300      	movs	r3, #0
 800df44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800df46:	2300      	movs	r3, #0
 800df48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800df4a:	2300      	movs	r3, #0
 800df4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800df4e:	2300      	movs	r3, #0
 800df50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800df52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800df58:	2300      	movs	r3, #0
 800df5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800df5c:	1d3b      	adds	r3, r7, #4
 800df5e:	4619      	mov	r1, r3
 800df60:	4807      	ldr	r0, [pc, #28]	; (800df80 <MX_TIM8_Init+0x148>)
 800df62:	f006 fb31 	bl	80145c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800df6c:	f000 f932 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800df70:	4803      	ldr	r0, [pc, #12]	; (800df80 <MX_TIM8_Init+0x148>)
 800df72:	f000 fb89 	bl	800e688 <HAL_TIM_MspPostInit>

}
 800df76:	bf00      	nop
 800df78:	3758      	adds	r7, #88	; 0x58
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	200105a0 	.word	0x200105a0
 800df84:	40010400 	.word	0x40010400

0800df88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800df8c:	4b11      	ldr	r3, [pc, #68]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800df8e:	4a12      	ldr	r2, [pc, #72]	; (800dfd8 <MX_USART1_UART_Init+0x50>)
 800df90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800df92:	4b10      	ldr	r3, [pc, #64]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800df94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800df98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800df9a:	4b0e      	ldr	r3, [pc, #56]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dfa0:	4b0c      	ldr	r3, [pc, #48]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dfac:	4b09      	ldr	r3, [pc, #36]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800dfae:	220c      	movs	r2, #12
 800dfb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dfb2:	4b08      	ldr	r3, [pc, #32]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dfb8:	4b06      	ldr	r3, [pc, #24]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800dfbe:	4805      	ldr	r0, [pc, #20]	; (800dfd4 <MX_USART1_UART_Init+0x4c>)
 800dfc0:	f006 fb8d 	bl	80146de <HAL_UART_Init>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800dfca:	f000 f903 	bl	800e1d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800dfce:	bf00      	nop
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	20010748 	.word	0x20010748
 800dfd8:	40011000 	.word	0x40011000

0800dfdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	607b      	str	r3, [r7, #4]
 800dfe6:	4b10      	ldr	r3, [pc, #64]	; (800e028 <MX_DMA_Init+0x4c>)
 800dfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfea:	4a0f      	ldr	r2, [pc, #60]	; (800e028 <MX_DMA_Init+0x4c>)
 800dfec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dff0:	6313      	str	r3, [r2, #48]	; 0x30
 800dff2:	4b0d      	ldr	r3, [pc, #52]	; (800e028 <MX_DMA_Init+0x4c>)
 800dff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dffa:	607b      	str	r3, [r7, #4]
 800dffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800dffe:	2200      	movs	r2, #0
 800e000:	2100      	movs	r1, #0
 800e002:	2038      	movs	r0, #56	; 0x38
 800e004:	f002 fe51 	bl	8010caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e008:	2038      	movs	r0, #56	; 0x38
 800e00a:	f002 fe6a 	bl	8010ce2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800e00e:	2200      	movs	r2, #0
 800e010:	2100      	movs	r1, #0
 800e012:	203a      	movs	r0, #58	; 0x3a
 800e014:	f002 fe49 	bl	8010caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800e018:	203a      	movs	r0, #58	; 0x3a
 800e01a:	f002 fe62 	bl	8010ce2 <HAL_NVIC_EnableIRQ>

}
 800e01e:	bf00      	nop
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	40023800 	.word	0x40023800

0800e02c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08a      	sub	sp, #40	; 0x28
 800e030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e032:	f107 0314 	add.w	r3, r7, #20
 800e036:	2200      	movs	r2, #0
 800e038:	601a      	str	r2, [r3, #0]
 800e03a:	605a      	str	r2, [r3, #4]
 800e03c:	609a      	str	r2, [r3, #8]
 800e03e:	60da      	str	r2, [r3, #12]
 800e040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e042:	2300      	movs	r3, #0
 800e044:	613b      	str	r3, [r7, #16]
 800e046:	4b5d      	ldr	r3, [pc, #372]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e04a:	4a5c      	ldr	r2, [pc, #368]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e050:	6313      	str	r3, [r2, #48]	; 0x30
 800e052:	4b5a      	ldr	r3, [pc, #360]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e05a:	613b      	str	r3, [r7, #16]
 800e05c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	4b56      	ldr	r3, [pc, #344]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e066:	4a55      	ldr	r2, [pc, #340]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e068:	f043 0304 	orr.w	r3, r3, #4
 800e06c:	6313      	str	r3, [r2, #48]	; 0x30
 800e06e:	4b53      	ldr	r3, [pc, #332]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e072:	f003 0304 	and.w	r3, r3, #4
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e07a:	2300      	movs	r3, #0
 800e07c:	60bb      	str	r3, [r7, #8]
 800e07e:	4b4f      	ldr	r3, [pc, #316]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e082:	4a4e      	ldr	r2, [pc, #312]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e084:	f043 0301 	orr.w	r3, r3, #1
 800e088:	6313      	str	r3, [r2, #48]	; 0x30
 800e08a:	4b4c      	ldr	r3, [pc, #304]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	60bb      	str	r3, [r7, #8]
 800e094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e096:	2300      	movs	r3, #0
 800e098:	607b      	str	r3, [r7, #4]
 800e09a:	4b48      	ldr	r3, [pc, #288]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09e:	4a47      	ldr	r2, [pc, #284]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e0a0:	f043 0302 	orr.w	r3, r3, #2
 800e0a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e0a6:	4b45      	ldr	r3, [pc, #276]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0aa:	f003 0302 	and.w	r3, r3, #2
 800e0ae:	607b      	str	r3, [r7, #4]
 800e0b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	603b      	str	r3, [r7, #0]
 800e0b6:	4b41      	ldr	r3, [pc, #260]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ba:	4a40      	ldr	r2, [pc, #256]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e0bc:	f043 0308 	orr.w	r3, r3, #8
 800e0c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e0c2:	4b3e      	ldr	r3, [pc, #248]	; (800e1bc <MX_GPIO_Init+0x190>)
 800e0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0c6:	f003 0308 	and.w	r3, r3, #8
 800e0ca:	603b      	str	r3, [r7, #0]
 800e0cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f44f 7141 	mov.w	r1, #772	; 0x304
 800e0d4:	483a      	ldr	r0, [pc, #232]	; (800e1c0 <MX_GPIO_Init+0x194>)
 800e0d6:	f003 fd81 	bl	8011bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2105      	movs	r1, #5
 800e0de:	4839      	ldr	r0, [pc, #228]	; (800e1c4 <MX_GPIO_Init+0x198>)
 800e0e0:	f003 fd7c 	bl	8011bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	2104      	movs	r1, #4
 800e0e8:	4837      	ldr	r0, [pc, #220]	; (800e1c8 <MX_GPIO_Init+0x19c>)
 800e0ea:	f003 fd77 	bl	8011bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e0f4:	4835      	ldr	r0, [pc, #212]	; (800e1cc <MX_GPIO_Init+0x1a0>)
 800e0f6:	f003 fd71 	bl	8011bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800e0fa:	f44f 7341 	mov.w	r3, #772	; 0x304
 800e0fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e100:	2301      	movs	r3, #1
 800e102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e104:	2300      	movs	r3, #0
 800e106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e108:	2300      	movs	r3, #0
 800e10a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e10c:	f107 0314 	add.w	r3, r7, #20
 800e110:	4619      	mov	r1, r3
 800e112:	482b      	ldr	r0, [pc, #172]	; (800e1c0 <MX_GPIO_Init+0x194>)
 800e114:	f003 fbc8 	bl	80118a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800e118:	2305      	movs	r3, #5
 800e11a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e11c:	2301      	movs	r3, #1
 800e11e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e120:	2300      	movs	r3, #0
 800e122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e124:	2300      	movs	r3, #0
 800e126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e128:	f107 0314 	add.w	r3, r7, #20
 800e12c:	4619      	mov	r1, r3
 800e12e:	4825      	ldr	r0, [pc, #148]	; (800e1c4 <MX_GPIO_Init+0x198>)
 800e130:	f003 fbba 	bl	80118a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e13a:	4b25      	ldr	r3, [pc, #148]	; (800e1d0 <MX_GPIO_Init+0x1a4>)
 800e13c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e13e:	2300      	movs	r3, #0
 800e140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e142:	f107 0314 	add.w	r3, r7, #20
 800e146:	4619      	mov	r1, r3
 800e148:	4820      	ldr	r0, [pc, #128]	; (800e1cc <MX_GPIO_Init+0x1a0>)
 800e14a:	f003 fbad 	bl	80118a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800e14e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e154:	2300      	movs	r3, #0
 800e156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e158:	2300      	movs	r3, #0
 800e15a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e15c:	f107 0314 	add.w	r3, r7, #20
 800e160:	4619      	mov	r1, r3
 800e162:	4818      	ldr	r0, [pc, #96]	; (800e1c4 <MX_GPIO_Init+0x198>)
 800e164:	f003 fba0 	bl	80118a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e168:	2304      	movs	r3, #4
 800e16a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e16c:	2301      	movs	r3, #1
 800e16e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e170:	2300      	movs	r3, #0
 800e172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e174:	2300      	movs	r3, #0
 800e176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e178:	f107 0314 	add.w	r3, r7, #20
 800e17c:	4619      	mov	r1, r3
 800e17e:	4812      	ldr	r0, [pc, #72]	; (800e1c8 <MX_GPIO_Init+0x19c>)
 800e180:	f003 fb92 	bl	80118a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e184:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e18a:	2301      	movs	r3, #1
 800e18c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e18e:	2300      	movs	r3, #0
 800e190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e192:	2300      	movs	r3, #0
 800e194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e196:	f107 0314 	add.w	r3, r7, #20
 800e19a:	4619      	mov	r1, r3
 800e19c:	480b      	ldr	r0, [pc, #44]	; (800e1cc <MX_GPIO_Init+0x1a0>)
 800e19e:	f003 fb83 	bl	80118a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	2028      	movs	r0, #40	; 0x28
 800e1a8:	f002 fd7f 	bl	8010caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e1ac:	2028      	movs	r0, #40	; 0x28
 800e1ae:	f002 fd98 	bl	8010ce2 <HAL_NVIC_EnableIRQ>

}
 800e1b2:	bf00      	nop
 800e1b4:	3728      	adds	r7, #40	; 0x28
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	40023800 	.word	0x40023800
 800e1c0:	40020800 	.word	0x40020800
 800e1c4:	40020000 	.word	0x40020000
 800e1c8:	40020c00 	.word	0x40020c00
 800e1cc:	40020400 	.word	0x40020400
 800e1d0:	10110000 	.word	0x10110000

0800e1d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e1d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e1da:	e7fe      	b.n	800e1da <Error_Handler+0x6>

0800e1dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	607b      	str	r3, [r7, #4]
 800e1e6:	4b10      	ldr	r3, [pc, #64]	; (800e228 <HAL_MspInit+0x4c>)
 800e1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ea:	4a0f      	ldr	r2, [pc, #60]	; (800e228 <HAL_MspInit+0x4c>)
 800e1ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e1f0:	6453      	str	r3, [r2, #68]	; 0x44
 800e1f2:	4b0d      	ldr	r3, [pc, #52]	; (800e228 <HAL_MspInit+0x4c>)
 800e1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1fa:	607b      	str	r3, [r7, #4]
 800e1fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e1fe:	2300      	movs	r3, #0
 800e200:	603b      	str	r3, [r7, #0]
 800e202:	4b09      	ldr	r3, [pc, #36]	; (800e228 <HAL_MspInit+0x4c>)
 800e204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e206:	4a08      	ldr	r2, [pc, #32]	; (800e228 <HAL_MspInit+0x4c>)
 800e208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e20c:	6413      	str	r3, [r2, #64]	; 0x40
 800e20e:	4b06      	ldr	r3, [pc, #24]	; (800e228 <HAL_MspInit+0x4c>)
 800e210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e216:	603b      	str	r3, [r7, #0]
 800e218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e21a:	bf00      	nop
 800e21c:	370c      	adds	r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	40023800 	.word	0x40023800

0800e22c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08c      	sub	sp, #48	; 0x30
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e234:	f107 031c 	add.w	r3, r7, #28
 800e238:	2200      	movs	r2, #0
 800e23a:	601a      	str	r2, [r3, #0]
 800e23c:	605a      	str	r2, [r3, #4]
 800e23e:	609a      	str	r2, [r3, #8]
 800e240:	60da      	str	r2, [r3, #12]
 800e242:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a6b      	ldr	r2, [pc, #428]	; (800e3f8 <HAL_ADC_MspInit+0x1cc>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d172      	bne.n	800e334 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e24e:	2300      	movs	r3, #0
 800e250:	61bb      	str	r3, [r7, #24]
 800e252:	4b6a      	ldr	r3, [pc, #424]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e256:	4a69      	ldr	r2, [pc, #420]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e25c:	6453      	str	r3, [r2, #68]	; 0x44
 800e25e:	4b67      	ldr	r3, [pc, #412]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e266:	61bb      	str	r3, [r7, #24]
 800e268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e26a:	2300      	movs	r3, #0
 800e26c:	617b      	str	r3, [r7, #20]
 800e26e:	4b63      	ldr	r3, [pc, #396]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e272:	4a62      	ldr	r2, [pc, #392]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e274:	f043 0304 	orr.w	r3, r3, #4
 800e278:	6313      	str	r3, [r2, #48]	; 0x30
 800e27a:	4b60      	ldr	r3, [pc, #384]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27e:	f003 0304 	and.w	r3, r3, #4
 800e282:	617b      	str	r3, [r7, #20]
 800e284:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e286:	2300      	movs	r3, #0
 800e288:	613b      	str	r3, [r7, #16]
 800e28a:	4b5c      	ldr	r3, [pc, #368]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28e:	4a5b      	ldr	r2, [pc, #364]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e290:	f043 0302 	orr.w	r3, r3, #2
 800e294:	6313      	str	r3, [r2, #48]	; 0x30
 800e296:	4b59      	ldr	r3, [pc, #356]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e29a:	f003 0302 	and.w	r3, r3, #2
 800e29e:	613b      	str	r3, [r7, #16]
 800e2a0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800e2a2:	2311      	movs	r3, #17
 800e2a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e2a6:	2303      	movs	r3, #3
 800e2a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e2ae:	f107 031c 	add.w	r3, r7, #28
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	4852      	ldr	r0, [pc, #328]	; (800e400 <HAL_ADC_MspInit+0x1d4>)
 800e2b6:	f003 faf7 	bl	80118a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e2ba:	2302      	movs	r3, #2
 800e2bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2c6:	f107 031c 	add.w	r3, r7, #28
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	484d      	ldr	r0, [pc, #308]	; (800e404 <HAL_ADC_MspInit+0x1d8>)
 800e2ce:	f003 faeb 	bl	80118a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800e2d2:	4b4d      	ldr	r3, [pc, #308]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e2d4:	4a4d      	ldr	r2, [pc, #308]	; (800e40c <HAL_ADC_MspInit+0x1e0>)
 800e2d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e2d8:	4b4b      	ldr	r3, [pc, #300]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e2de:	4b4a      	ldr	r3, [pc, #296]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e2e4:	4b48      	ldr	r3, [pc, #288]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e2ea:	4b47      	ldr	r3, [pc, #284]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e2ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e2f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e2f2:	4b45      	ldr	r3, [pc, #276]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e2f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e2f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e2fa:	4b43      	ldr	r3, [pc, #268]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e2fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e300:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e302:	4b41      	ldr	r3, [pc, #260]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e304:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e308:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e30a:	4b3f      	ldr	r3, [pc, #252]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e310:	4b3d      	ldr	r3, [pc, #244]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e312:	2200      	movs	r2, #0
 800e314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e316:	483c      	ldr	r0, [pc, #240]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e318:	f002 fcfe 	bl	8010d18 <HAL_DMA_Init>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800e322:	f7ff ff57 	bl	800e1d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4a37      	ldr	r2, [pc, #220]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e32a:	639a      	str	r2, [r3, #56]	; 0x38
 800e32c:	4a36      	ldr	r2, [pc, #216]	; (800e408 <HAL_ADC_MspInit+0x1dc>)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800e332:	e05d      	b.n	800e3f0 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a35      	ldr	r2, [pc, #212]	; (800e410 <HAL_ADC_MspInit+0x1e4>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d158      	bne.n	800e3f0 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e33e:	2300      	movs	r3, #0
 800e340:	60fb      	str	r3, [r7, #12]
 800e342:	4b2e      	ldr	r3, [pc, #184]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e346:	4a2d      	ldr	r2, [pc, #180]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e34c:	6453      	str	r3, [r2, #68]	; 0x44
 800e34e:	4b2b      	ldr	r3, [pc, #172]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e356:	60fb      	str	r3, [r7, #12]
 800e358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e35a:	2300      	movs	r3, #0
 800e35c:	60bb      	str	r3, [r7, #8]
 800e35e:	4b27      	ldr	r3, [pc, #156]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e362:	4a26      	ldr	r2, [pc, #152]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e364:	f043 0304 	orr.w	r3, r3, #4
 800e368:	6313      	str	r3, [r2, #48]	; 0x30
 800e36a:	4b24      	ldr	r3, [pc, #144]	; (800e3fc <HAL_ADC_MspInit+0x1d0>)
 800e36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e36e:	f003 0304 	and.w	r3, r3, #4
 800e372:	60bb      	str	r3, [r7, #8]
 800e374:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800e376:	2322      	movs	r3, #34	; 0x22
 800e378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e37a:	2303      	movs	r3, #3
 800e37c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e382:	f107 031c 	add.w	r3, r7, #28
 800e386:	4619      	mov	r1, r3
 800e388:	481d      	ldr	r0, [pc, #116]	; (800e400 <HAL_ADC_MspInit+0x1d4>)
 800e38a:	f003 fa8d 	bl	80118a8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e38e:	4b21      	ldr	r3, [pc, #132]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e390:	4a21      	ldr	r2, [pc, #132]	; (800e418 <HAL_ADC_MspInit+0x1ec>)
 800e392:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e394:	4b1f      	ldr	r3, [pc, #124]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e39a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e39c:	4b1d      	ldr	r3, [pc, #116]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e39e:	2200      	movs	r2, #0
 800e3a0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e3a2:	4b1c      	ldr	r3, [pc, #112]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e3a8:	4b1a      	ldr	r3, [pc, #104]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3ae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e3b0:	4b18      	ldr	r3, [pc, #96]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e3b6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e3b8:	4b16      	ldr	r3, [pc, #88]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e3be:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e3c0:	4b14      	ldr	r3, [pc, #80]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3c6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800e3c8:	4b12      	ldr	r3, [pc, #72]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e3ce:	4b11      	ldr	r3, [pc, #68]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e3d4:	480f      	ldr	r0, [pc, #60]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3d6:	f002 fc9f 	bl	8010d18 <HAL_DMA_Init>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800e3e0:	f7ff fef8 	bl	800e1d4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a0b      	ldr	r2, [pc, #44]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3e8:	639a      	str	r2, [r3, #56]	; 0x38
 800e3ea:	4a0a      	ldr	r2, [pc, #40]	; (800e414 <HAL_ADC_MspInit+0x1e8>)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e3f0:	bf00      	nop
 800e3f2:	3730      	adds	r7, #48	; 0x30
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	40012000 	.word	0x40012000
 800e3fc:	40023800 	.word	0x40023800
 800e400:	40020800 	.word	0x40020800
 800e404:	40020400 	.word	0x40020400
 800e408:	20010788 	.word	0x20010788
 800e40c:	40026410 	.word	0x40026410
 800e410:	40012100 	.word	0x40012100
 800e414:	20010828 	.word	0x20010828
 800e418:	40026440 	.word	0x40026440

0800e41c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b08a      	sub	sp, #40	; 0x28
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e424:	f107 0314 	add.w	r3, r7, #20
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]
 800e42c:	605a      	str	r2, [r3, #4]
 800e42e:	609a      	str	r2, [r3, #8]
 800e430:	60da      	str	r2, [r3, #12]
 800e432:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4a19      	ldr	r2, [pc, #100]	; (800e4a0 <HAL_SPI_MspInit+0x84>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d12c      	bne.n	800e498 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e43e:	2300      	movs	r3, #0
 800e440:	613b      	str	r3, [r7, #16]
 800e442:	4b18      	ldr	r3, [pc, #96]	; (800e4a4 <HAL_SPI_MspInit+0x88>)
 800e444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e446:	4a17      	ldr	r2, [pc, #92]	; (800e4a4 <HAL_SPI_MspInit+0x88>)
 800e448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e44c:	6413      	str	r3, [r2, #64]	; 0x40
 800e44e:	4b15      	ldr	r3, [pc, #84]	; (800e4a4 <HAL_SPI_MspInit+0x88>)
 800e450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e45a:	2300      	movs	r3, #0
 800e45c:	60fb      	str	r3, [r7, #12]
 800e45e:	4b11      	ldr	r3, [pc, #68]	; (800e4a4 <HAL_SPI_MspInit+0x88>)
 800e460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e462:	4a10      	ldr	r2, [pc, #64]	; (800e4a4 <HAL_SPI_MspInit+0x88>)
 800e464:	f043 0304 	orr.w	r3, r3, #4
 800e468:	6313      	str	r3, [r2, #48]	; 0x30
 800e46a:	4b0e      	ldr	r3, [pc, #56]	; (800e4a4 <HAL_SPI_MspInit+0x88>)
 800e46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46e:	f003 0304 	and.w	r3, r3, #4
 800e472:	60fb      	str	r3, [r7, #12]
 800e474:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800e476:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e47a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e47c:	2302      	movs	r3, #2
 800e47e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e480:	2300      	movs	r3, #0
 800e482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e484:	2303      	movs	r3, #3
 800e486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e488:	2306      	movs	r3, #6
 800e48a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e48c:	f107 0314 	add.w	r3, r7, #20
 800e490:	4619      	mov	r1, r3
 800e492:	4805      	ldr	r0, [pc, #20]	; (800e4a8 <HAL_SPI_MspInit+0x8c>)
 800e494:	f003 fa08 	bl	80118a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800e498:	bf00      	nop
 800e49a:	3728      	adds	r7, #40	; 0x28
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	40003c00 	.word	0x40003c00
 800e4a4:	40023800 	.word	0x40023800
 800e4a8:	40020800 	.word	0x40020800

0800e4ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b086      	sub	sp, #24
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a30      	ldr	r2, [pc, #192]	; (800e57c <HAL_TIM_Base_MspInit+0xd0>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d116      	bne.n	800e4ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e4be:	2300      	movs	r3, #0
 800e4c0:	617b      	str	r3, [r7, #20]
 800e4c2:	4b2f      	ldr	r3, [pc, #188]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c6:	4a2e      	ldr	r2, [pc, #184]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e4c8:	f043 0301 	orr.w	r3, r3, #1
 800e4cc:	6453      	str	r3, [r2, #68]	; 0x44
 800e4ce:	4b2c      	ldr	r3, [pc, #176]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	617b      	str	r3, [r7, #20]
 800e4d8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e4da:	2200      	movs	r2, #0
 800e4dc:	2100      	movs	r1, #0
 800e4de:	2019      	movs	r0, #25
 800e4e0:	f002 fbe3 	bl	8010caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e4e4:	2019      	movs	r0, #25
 800e4e6:	f002 fbfc 	bl	8010ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800e4ea:	e042      	b.n	800e572 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4f4:	d10e      	bne.n	800e514 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	613b      	str	r3, [r7, #16]
 800e4fa:	4b21      	ldr	r3, [pc, #132]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4fe:	4a20      	ldr	r2, [pc, #128]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e500:	f043 0301 	orr.w	r3, r3, #1
 800e504:	6413      	str	r3, [r2, #64]	; 0x40
 800e506:	4b1e      	ldr	r3, [pc, #120]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e50a:	f003 0301 	and.w	r3, r3, #1
 800e50e:	613b      	str	r3, [r7, #16]
 800e510:	693b      	ldr	r3, [r7, #16]
}
 800e512:	e02e      	b.n	800e572 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4a1a      	ldr	r2, [pc, #104]	; (800e584 <HAL_TIM_Base_MspInit+0xd8>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d10e      	bne.n	800e53c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e51e:	2300      	movs	r3, #0
 800e520:	60fb      	str	r3, [r7, #12]
 800e522:	4b17      	ldr	r3, [pc, #92]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e526:	4a16      	ldr	r2, [pc, #88]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e528:	f043 0308 	orr.w	r3, r3, #8
 800e52c:	6413      	str	r3, [r2, #64]	; 0x40
 800e52e:	4b14      	ldr	r3, [pc, #80]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e532:	f003 0308 	and.w	r3, r3, #8
 800e536:	60fb      	str	r3, [r7, #12]
 800e538:	68fb      	ldr	r3, [r7, #12]
}
 800e53a:	e01a      	b.n	800e572 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a11      	ldr	r2, [pc, #68]	; (800e588 <HAL_TIM_Base_MspInit+0xdc>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d115      	bne.n	800e572 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e546:	2300      	movs	r3, #0
 800e548:	60bb      	str	r3, [r7, #8]
 800e54a:	4b0d      	ldr	r3, [pc, #52]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54e:	4a0c      	ldr	r2, [pc, #48]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e550:	f043 0302 	orr.w	r3, r3, #2
 800e554:	6453      	str	r3, [r2, #68]	; 0x44
 800e556:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <HAL_TIM_Base_MspInit+0xd4>)
 800e558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e55a:	f003 0302 	and.w	r3, r3, #2
 800e55e:	60bb      	str	r3, [r7, #8]
 800e560:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800e562:	2200      	movs	r2, #0
 800e564:	2101      	movs	r1, #1
 800e566:	202c      	movs	r0, #44	; 0x2c
 800e568:	f002 fb9f 	bl	8010caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800e56c:	202c      	movs	r0, #44	; 0x2c
 800e56e:	f002 fbb8 	bl	8010ce2 <HAL_NVIC_EnableIRQ>
}
 800e572:	bf00      	nop
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	40010000 	.word	0x40010000
 800e580:	40023800 	.word	0x40023800
 800e584:	40000c00 	.word	0x40000c00
 800e588:	40010400 	.word	0x40010400

0800e58c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08c      	sub	sp, #48	; 0x30
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e594:	f107 031c 	add.w	r3, r7, #28
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	605a      	str	r2, [r3, #4]
 800e59e:	609a      	str	r2, [r3, #8]
 800e5a0:	60da      	str	r2, [r3, #12]
 800e5a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a32      	ldr	r2, [pc, #200]	; (800e674 <HAL_TIM_Encoder_MspInit+0xe8>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d12c      	bne.n	800e608 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	61bb      	str	r3, [r7, #24]
 800e5b2:	4b31      	ldr	r3, [pc, #196]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b6:	4a30      	ldr	r2, [pc, #192]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5b8:	f043 0302 	orr.w	r3, r3, #2
 800e5bc:	6413      	str	r3, [r2, #64]	; 0x40
 800e5be:	4b2e      	ldr	r3, [pc, #184]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c2:	f003 0302 	and.w	r3, r3, #2
 800e5c6:	61bb      	str	r3, [r7, #24]
 800e5c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	617b      	str	r3, [r7, #20]
 800e5ce:	4b2a      	ldr	r3, [pc, #168]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d2:	4a29      	ldr	r2, [pc, #164]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5d4:	f043 0301 	orr.w	r3, r3, #1
 800e5d8:	6313      	str	r3, [r2, #48]	; 0x30
 800e5da:	4b27      	ldr	r3, [pc, #156]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5de:	f003 0301 	and.w	r3, r3, #1
 800e5e2:	617b      	str	r3, [r7, #20]
 800e5e4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e5e6:	23c0      	movs	r3, #192	; 0xc0
 800e5e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e5f6:	2302      	movs	r3, #2
 800e5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5fa:	f107 031c 	add.w	r3, r7, #28
 800e5fe:	4619      	mov	r1, r3
 800e600:	481e      	ldr	r0, [pc, #120]	; (800e67c <HAL_TIM_Encoder_MspInit+0xf0>)
 800e602:	f003 f951 	bl	80118a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800e606:	e030      	b.n	800e66a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a1c      	ldr	r2, [pc, #112]	; (800e680 <HAL_TIM_Encoder_MspInit+0xf4>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d12b      	bne.n	800e66a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e612:	2300      	movs	r3, #0
 800e614:	613b      	str	r3, [r7, #16]
 800e616:	4b18      	ldr	r3, [pc, #96]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61a:	4a17      	ldr	r2, [pc, #92]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e61c:	f043 0304 	orr.w	r3, r3, #4
 800e620:	6413      	str	r3, [r2, #64]	; 0x40
 800e622:	4b15      	ldr	r3, [pc, #84]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e626:	f003 0304 	and.w	r3, r3, #4
 800e62a:	613b      	str	r3, [r7, #16]
 800e62c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e62e:	2300      	movs	r3, #0
 800e630:	60fb      	str	r3, [r7, #12]
 800e632:	4b11      	ldr	r3, [pc, #68]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e636:	4a10      	ldr	r2, [pc, #64]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e638:	f043 0302 	orr.w	r3, r3, #2
 800e63c:	6313      	str	r3, [r2, #48]	; 0x30
 800e63e:	4b0e      	ldr	r3, [pc, #56]	; (800e678 <HAL_TIM_Encoder_MspInit+0xec>)
 800e640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e642:	f003 0302 	and.w	r3, r3, #2
 800e646:	60fb      	str	r3, [r7, #12]
 800e648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e64a:	23c0      	movs	r3, #192	; 0xc0
 800e64c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e64e:	2302      	movs	r3, #2
 800e650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e652:	2300      	movs	r3, #0
 800e654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e656:	2300      	movs	r3, #0
 800e658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e65a:	2302      	movs	r3, #2
 800e65c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e65e:	f107 031c 	add.w	r3, r7, #28
 800e662:	4619      	mov	r1, r3
 800e664:	4807      	ldr	r0, [pc, #28]	; (800e684 <HAL_TIM_Encoder_MspInit+0xf8>)
 800e666:	f003 f91f 	bl	80118a8 <HAL_GPIO_Init>
}
 800e66a:	bf00      	nop
 800e66c:	3730      	adds	r7, #48	; 0x30
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	40000400 	.word	0x40000400
 800e678:	40023800 	.word	0x40023800
 800e67c:	40020000 	.word	0x40020000
 800e680:	40000800 	.word	0x40000800
 800e684:	40020400 	.word	0x40020400

0800e688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b08c      	sub	sp, #48	; 0x30
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e690:	f107 031c 	add.w	r3, r7, #28
 800e694:	2200      	movs	r2, #0
 800e696:	601a      	str	r2, [r3, #0]
 800e698:	605a      	str	r2, [r3, #4]
 800e69a:	609a      	str	r2, [r3, #8]
 800e69c:	60da      	str	r2, [r3, #12]
 800e69e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6a8:	d11e      	bne.n	800e6e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	61bb      	str	r3, [r7, #24]
 800e6ae:	4b43      	ldr	r3, [pc, #268]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b2:	4a42      	ldr	r2, [pc, #264]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e6b4:	f043 0301 	orr.w	r3, r3, #1
 800e6b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e6ba:	4b40      	ldr	r3, [pc, #256]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	61bb      	str	r3, [r7, #24]
 800e6c4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e6c6:	2308      	movs	r3, #8
 800e6c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6d2:	2303      	movs	r3, #3
 800e6d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6da:	f107 031c 	add.w	r3, r7, #28
 800e6de:	4619      	mov	r1, r3
 800e6e0:	4837      	ldr	r0, [pc, #220]	; (800e7c0 <HAL_TIM_MspPostInit+0x138>)
 800e6e2:	f003 f8e1 	bl	80118a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e6e6:	e064      	b.n	800e7b2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a35      	ldr	r2, [pc, #212]	; (800e7c4 <HAL_TIM_MspPostInit+0x13c>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d11e      	bne.n	800e730 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	617b      	str	r3, [r7, #20]
 800e6f6:	4b31      	ldr	r3, [pc, #196]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fa:	4a30      	ldr	r2, [pc, #192]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e6fc:	f043 0301 	orr.w	r3, r3, #1
 800e700:	6313      	str	r3, [r2, #48]	; 0x30
 800e702:	4b2e      	ldr	r3, [pc, #184]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e706:	f003 0301 	and.w	r3, r3, #1
 800e70a:	617b      	str	r3, [r7, #20]
 800e70c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e70e:	2302      	movs	r3, #2
 800e710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e712:	2302      	movs	r3, #2
 800e714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e716:	2300      	movs	r3, #0
 800e718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e71a:	2300      	movs	r3, #0
 800e71c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e71e:	2302      	movs	r3, #2
 800e720:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e722:	f107 031c 	add.w	r3, r7, #28
 800e726:	4619      	mov	r1, r3
 800e728:	4825      	ldr	r0, [pc, #148]	; (800e7c0 <HAL_TIM_MspPostInit+0x138>)
 800e72a:	f003 f8bd 	bl	80118a8 <HAL_GPIO_Init>
}
 800e72e:	e040      	b.n	800e7b2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4a24      	ldr	r2, [pc, #144]	; (800e7c8 <HAL_TIM_MspPostInit+0x140>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d13b      	bne.n	800e7b2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e73a:	2300      	movs	r3, #0
 800e73c:	613b      	str	r3, [r7, #16]
 800e73e:	4b1f      	ldr	r3, [pc, #124]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e742:	4a1e      	ldr	r2, [pc, #120]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e744:	f043 0301 	orr.w	r3, r3, #1
 800e748:	6313      	str	r3, [r2, #48]	; 0x30
 800e74a:	4b1c      	ldr	r3, [pc, #112]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	613b      	str	r3, [r7, #16]
 800e754:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e756:	2300      	movs	r3, #0
 800e758:	60fb      	str	r3, [r7, #12]
 800e75a:	4b18      	ldr	r3, [pc, #96]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e75e:	4a17      	ldr	r2, [pc, #92]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e760:	f043 0304 	orr.w	r3, r3, #4
 800e764:	6313      	str	r3, [r2, #48]	; 0x30
 800e766:	4b15      	ldr	r3, [pc, #84]	; (800e7bc <HAL_TIM_MspPostInit+0x134>)
 800e768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76a:	f003 0304 	and.w	r3, r3, #4
 800e76e:	60fb      	str	r3, [r7, #12]
 800e770:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e772:	2320      	movs	r3, #32
 800e774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e776:	2302      	movs	r3, #2
 800e778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e77e:	2300      	movs	r3, #0
 800e780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e782:	2303      	movs	r3, #3
 800e784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e786:	f107 031c 	add.w	r3, r7, #28
 800e78a:	4619      	mov	r1, r3
 800e78c:	480c      	ldr	r0, [pc, #48]	; (800e7c0 <HAL_TIM_MspPostInit+0x138>)
 800e78e:	f003 f88b 	bl	80118a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e792:	2340      	movs	r3, #64	; 0x40
 800e794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e796:	2302      	movs	r3, #2
 800e798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e7a6:	f107 031c 	add.w	r3, r7, #28
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4807      	ldr	r0, [pc, #28]	; (800e7cc <HAL_TIM_MspPostInit+0x144>)
 800e7ae:	f003 f87b 	bl	80118a8 <HAL_GPIO_Init>
}
 800e7b2:	bf00      	nop
 800e7b4:	3730      	adds	r7, #48	; 0x30
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	40023800 	.word	0x40023800
 800e7c0:	40020000 	.word	0x40020000
 800e7c4:	40000c00 	.word	0x40000c00
 800e7c8:	40010400 	.word	0x40010400
 800e7cc:	40020800 	.word	0x40020800

0800e7d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08a      	sub	sp, #40	; 0x28
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7d8:	f107 0314 	add.w	r3, r7, #20
 800e7dc:	2200      	movs	r2, #0
 800e7de:	601a      	str	r2, [r3, #0]
 800e7e0:	605a      	str	r2, [r3, #4]
 800e7e2:	609a      	str	r2, [r3, #8]
 800e7e4:	60da      	str	r2, [r3, #12]
 800e7e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a19      	ldr	r2, [pc, #100]	; (800e854 <HAL_UART_MspInit+0x84>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d12c      	bne.n	800e84c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	613b      	str	r3, [r7, #16]
 800e7f6:	4b18      	ldr	r3, [pc, #96]	; (800e858 <HAL_UART_MspInit+0x88>)
 800e7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7fa:	4a17      	ldr	r2, [pc, #92]	; (800e858 <HAL_UART_MspInit+0x88>)
 800e7fc:	f043 0310 	orr.w	r3, r3, #16
 800e800:	6453      	str	r3, [r2, #68]	; 0x44
 800e802:	4b15      	ldr	r3, [pc, #84]	; (800e858 <HAL_UART_MspInit+0x88>)
 800e804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e806:	f003 0310 	and.w	r3, r3, #16
 800e80a:	613b      	str	r3, [r7, #16]
 800e80c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e80e:	2300      	movs	r3, #0
 800e810:	60fb      	str	r3, [r7, #12]
 800e812:	4b11      	ldr	r3, [pc, #68]	; (800e858 <HAL_UART_MspInit+0x88>)
 800e814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e816:	4a10      	ldr	r2, [pc, #64]	; (800e858 <HAL_UART_MspInit+0x88>)
 800e818:	f043 0301 	orr.w	r3, r3, #1
 800e81c:	6313      	str	r3, [r2, #48]	; 0x30
 800e81e:	4b0e      	ldr	r3, [pc, #56]	; (800e858 <HAL_UART_MspInit+0x88>)
 800e820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e822:	f003 0301 	and.w	r3, r3, #1
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e82a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e82e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e830:	2302      	movs	r3, #2
 800e832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e834:	2300      	movs	r3, #0
 800e836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e838:	2303      	movs	r3, #3
 800e83a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e83c:	2307      	movs	r3, #7
 800e83e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e840:	f107 0314 	add.w	r3, r7, #20
 800e844:	4619      	mov	r1, r3
 800e846:	4805      	ldr	r0, [pc, #20]	; (800e85c <HAL_UART_MspInit+0x8c>)
 800e848:	f003 f82e 	bl	80118a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800e84c:	bf00      	nop
 800e84e:	3728      	adds	r7, #40	; 0x28
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	40011000 	.word	0x40011000
 800e858:	40023800 	.word	0x40023800
 800e85c:	40020000 	.word	0x40020000

0800e860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e860:	b480      	push	{r7}
 800e862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e864:	e7fe      	b.n	800e864 <NMI_Handler+0x4>

0800e866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e866:	b480      	push	{r7}
 800e868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e86a:	e7fe      	b.n	800e86a <HardFault_Handler+0x4>

0800e86c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e86c:	b480      	push	{r7}
 800e86e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e870:	e7fe      	b.n	800e870 <MemManage_Handler+0x4>

0800e872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e872:	b480      	push	{r7}
 800e874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e876:	e7fe      	b.n	800e876 <BusFault_Handler+0x4>

0800e878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e878:	b480      	push	{r7}
 800e87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e87c:	e7fe      	b.n	800e87c <UsageFault_Handler+0x4>

0800e87e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e87e:	b480      	push	{r7}
 800e880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e882:	bf00      	nop
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e88c:	b480      	push	{r7}
 800e88e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e890:	bf00      	nop
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr

0800e89a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e89a:	b480      	push	{r7}
 800e89c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e89e:	bf00      	nop
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e8ac:	f001 fca2 	bl	80101f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e8b0:	bf00      	nop
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e8b8:	4802      	ldr	r0, [pc, #8]	; (800e8c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e8ba:	f004 ff21 	bl	8013700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e8be:	bf00      	nop
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	200107e8 	.word	0x200107e8

0800e8c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800e8cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e8d0:	f003 f99e 	bl	8011c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e8d4:	bf00      	nop
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800e8dc:	4802      	ldr	r0, [pc, #8]	; (800e8e8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800e8de:	f004 ff0f 	bl	8013700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800e8e2:	bf00      	nop
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	200105a0 	.word	0x200105a0

0800e8ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e8f0:	4802      	ldr	r0, [pc, #8]	; (800e8fc <DMA2_Stream0_IRQHandler+0x10>)
 800e8f2:	f002 fb87 	bl	8011004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e8f6:	bf00      	nop
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	20010788 	.word	0x20010788

0800e900 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800e904:	4802      	ldr	r0, [pc, #8]	; (800e910 <DMA2_Stream2_IRQHandler+0x10>)
 800e906:	f002 fb7d 	bl	8011004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800e90a:	bf00      	nop
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	20010828 	.word	0x20010828

0800e914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e914:	b480      	push	{r7}
 800e916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e918:	4b08      	ldr	r3, [pc, #32]	; (800e93c <SystemInit+0x28>)
 800e91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e91e:	4a07      	ldr	r2, [pc, #28]	; (800e93c <SystemInit+0x28>)
 800e920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e928:	4b04      	ldr	r3, [pc, #16]	; (800e93c <SystemInit+0x28>)
 800e92a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e92e:	609a      	str	r2, [r3, #8]
#endif
}
 800e930:	bf00      	nop
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	e000ed00 	.word	0xe000ed00

0800e940 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e94c:	2300      	movs	r3, #0
 800e94e:	617b      	str	r3, [r7, #20]
 800e950:	e00a      	b.n	800e968 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e952:	f7fe fe1d 	bl	800d590 <__io_getchar>
 800e956:	4601      	mov	r1, r0
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	1c5a      	adds	r2, r3, #1
 800e95c:	60ba      	str	r2, [r7, #8]
 800e95e:	b2ca      	uxtb	r2, r1
 800e960:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	3301      	adds	r3, #1
 800e966:	617b      	str	r3, [r7, #20]
 800e968:	697a      	ldr	r2, [r7, #20]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	429a      	cmp	r2, r3
 800e96e:	dbf0      	blt.n	800e952 <_read+0x12>
	}

return len;
 800e970:	687b      	ldr	r3, [r7, #4]
}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b086      	sub	sp, #24
 800e97e:	af00      	add	r7, sp, #0
 800e980:	60f8      	str	r0, [r7, #12]
 800e982:	60b9      	str	r1, [r7, #8]
 800e984:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e986:	2300      	movs	r3, #0
 800e988:	617b      	str	r3, [r7, #20]
 800e98a:	e009      	b.n	800e9a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	60ba      	str	r2, [r7, #8]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	4618      	mov	r0, r3
 800e996:	f7fe fde9 	bl	800d56c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	3301      	adds	r3, #1
 800e99e:	617b      	str	r3, [r7, #20]
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	dbf1      	blt.n	800e98c <_write+0x12>
	}
	return len;
 800e9a8:	687b      	ldr	r3, [r7, #4]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <_close>:

int _close(int file)
{
 800e9b2:	b480      	push	{r7}
 800e9b4:	b083      	sub	sp, #12
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
	return -1;
 800e9ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	370c      	adds	r7, #12
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e9ca:	b480      	push	{r7}
 800e9cc:	b083      	sub	sp, #12
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
 800e9d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e9da:	605a      	str	r2, [r3, #4]
	return 0;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <_isatty>:

int _isatty(int file)
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b083      	sub	sp, #12
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
	return 1;
 800e9f2:	2301      	movs	r3, #1
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b085      	sub	sp, #20
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
	return 0;
 800ea0c:	2300      	movs	r3, #0
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
	...

0800ea1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ea24:	4a14      	ldr	r2, [pc, #80]	; (800ea78 <_sbrk+0x5c>)
 800ea26:	4b15      	ldr	r3, [pc, #84]	; (800ea7c <_sbrk+0x60>)
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ea30:	4b13      	ldr	r3, [pc, #76]	; (800ea80 <_sbrk+0x64>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d102      	bne.n	800ea3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ea38:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <_sbrk+0x64>)
 800ea3a:	4a12      	ldr	r2, [pc, #72]	; (800ea84 <_sbrk+0x68>)
 800ea3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ea3e:	4b10      	ldr	r3, [pc, #64]	; (800ea80 <_sbrk+0x64>)
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4413      	add	r3, r2
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d207      	bcs.n	800ea5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ea4c:	f006 fbe4 	bl	8015218 <__errno>
 800ea50:	4602      	mov	r2, r0
 800ea52:	230c      	movs	r3, #12
 800ea54:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5a:	e009      	b.n	800ea70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ea5c:	4b08      	ldr	r3, [pc, #32]	; (800ea80 <_sbrk+0x64>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ea62:	4b07      	ldr	r3, [pc, #28]	; (800ea80 <_sbrk+0x64>)
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4413      	add	r3, r2
 800ea6a:	4a05      	ldr	r2, [pc, #20]	; (800ea80 <_sbrk+0x64>)
 800ea6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	20020000 	.word	0x20020000
 800ea7c:	00000400 	.word	0x00000400
 800ea80:	2000fc38 	.word	0x2000fc38
 800ea84:	200108b0 	.word	0x200108b0

0800ea88 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800ea8c:	2203      	movs	r2, #3
 800ea8e:	490a      	ldr	r1, [pc, #40]	; (800eab8 <ADCStart+0x30>)
 800ea90:	480a      	ldr	r0, [pc, #40]	; (800eabc <ADCStart+0x34>)
 800ea92:	f001 fc35 	bl	8010300 <HAL_ADC_Start_DMA>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <ADCStart+0x18>
	{
		Error_Handler();
 800ea9c:	f7ff fb9a 	bl	800e1d4 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	4907      	ldr	r1, [pc, #28]	; (800eac0 <ADCStart+0x38>)
 800eaa4:	4807      	ldr	r0, [pc, #28]	; (800eac4 <ADCStart+0x3c>)
 800eaa6:	f001 fc2b 	bl	8010300 <HAL_ADC_Start_DMA>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <ADCStart+0x2c>
	{
		Error_Handler();
 800eab0:	f7ff fb90 	bl	800e1d4 <Error_Handler>
	}

}
 800eab4:	bf00      	nop
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	2000fcbc 	.word	0x2000fcbc
 800eabc:	20010700 	.word	0x20010700
 800eac0:	2000fcc8 	.word	0x2000fcc8
 800eac4:	20010620 	.word	0x20010620

0800eac8 <ADCStop>:
void ADCStop()
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800eacc:	480e      	ldr	r0, [pc, #56]	; (800eb08 <ADCStop+0x40>)
 800eace:	f001 fd09 	bl	80104e4 <HAL_ADC_Stop_DMA>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d007      	beq.n	800eae8 <ADCStop+0x20>
	{
		printf("な\r\n");
 800ead8:	480c      	ldr	r0, [pc, #48]	; (800eb0c <ADCStop+0x44>)
 800eada:	f007 fa8d 	bl	8015ff8 <puts>
		Error_Handler();
 800eade:	f7ff fb79 	bl	800e1d4 <Error_Handler>
		printf("に\r\n");
 800eae2:	480b      	ldr	r0, [pc, #44]	; (800eb10 <ADCStop+0x48>)
 800eae4:	f007 fa88 	bl	8015ff8 <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800eae8:	480a      	ldr	r0, [pc, #40]	; (800eb14 <ADCStop+0x4c>)
 800eaea:	f001 fcfb 	bl	80104e4 <HAL_ADC_Stop_DMA>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d007      	beq.n	800eb04 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800eaf4:	4808      	ldr	r0, [pc, #32]	; (800eb18 <ADCStop+0x50>)
 800eaf6:	f007 fa7f 	bl	8015ff8 <puts>
		Error_Handler();
 800eafa:	f7ff fb6b 	bl	800e1d4 <Error_Handler>
		printf("ね\r\n");
 800eafe:	4807      	ldr	r0, [pc, #28]	; (800eb1c <ADCStop+0x54>)
 800eb00:	f007 fa7a 	bl	8015ff8 <puts>
	}
}
 800eb04:	bf00      	nop
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	20010700 	.word	0x20010700
 800eb0c:	0801a408 	.word	0x0801a408
 800eb10:	0801a410 	.word	0x0801a410
 800eb14:	20010620 	.word	0x20010620
 800eb18:	0801a418 	.word	0x0801a418
 800eb1c:	0801a420 	.word	0x0801a420

0800eb20 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800eb20:	b480      	push	{r7}
 800eb22:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800eb24:	4b05      	ldr	r3, [pc, #20]	; (800eb3c <FLASH_Unlock+0x1c>)
 800eb26:	4a06      	ldr	r2, [pc, #24]	; (800eb40 <FLASH_Unlock+0x20>)
 800eb28:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800eb2a:	4b04      	ldr	r3, [pc, #16]	; (800eb3c <FLASH_Unlock+0x1c>)
 800eb2c:	4a05      	ldr	r2, [pc, #20]	; (800eb44 <FLASH_Unlock+0x24>)
 800eb2e:	605a      	str	r2, [r3, #4]
}
 800eb30:	bf00      	nop
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	40023c00 	.word	0x40023c00
 800eb40:	45670123 	.word	0x45670123
 800eb44:	cdef89ab 	.word	0xcdef89ab

0800eb48 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800eb4c:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <FLASH_Lock+0x1c>)
 800eb4e:	691b      	ldr	r3, [r3, #16]
 800eb50:	4a04      	ldr	r2, [pc, #16]	; (800eb64 <FLASH_Lock+0x1c>)
 800eb52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb56:	6113      	str	r3, [r2, #16]

}
 800eb58:	bf00      	nop
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	40023c00 	.word	0x40023c00

0800eb68 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800eb6c:	bf00      	nop
 800eb6e:	4b05      	ldr	r3, [pc, #20]	; (800eb84 <FLASH_WaitBusy+0x1c>)
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1f9      	bne.n	800eb6e <FLASH_WaitBusy+0x6>
}
 800eb7a:	bf00      	nop
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr
 800eb84:	40023c00 	.word	0x40023c00

0800eb88 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800eb92:	f7ff ffc5 	bl	800eb20 <FLASH_Unlock>

	FLASH_WaitBusy();
 800eb96:	f7ff ffe7 	bl	800eb68 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800eb9a:	4b0e      	ldr	r3, [pc, #56]	; (800ebd4 <FLASH_Write_Word+0x4c>)
 800eb9c:	691b      	ldr	r3, [r3, #16]
 800eb9e:	4a0d      	ldr	r2, [pc, #52]	; (800ebd4 <FLASH_Write_Word+0x4c>)
 800eba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eba4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800eba6:	4b0b      	ldr	r3, [pc, #44]	; (800ebd4 <FLASH_Write_Word+0x4c>)
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	4a0a      	ldr	r2, [pc, #40]	; (800ebd4 <FLASH_Write_Word+0x4c>)
 800ebac:	f043 0301 	orr.w	r3, r3, #1
 800ebb0:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	683a      	ldr	r2, [r7, #0]
 800ebb6:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ebb8:	f7ff ffd6 	bl	800eb68 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ebbc:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <FLASH_Write_Word+0x4c>)
 800ebbe:	691b      	ldr	r3, [r3, #16]
 800ebc0:	4a04      	ldr	r2, [pc, #16]	; (800ebd4 <FLASH_Write_Word+0x4c>)
 800ebc2:	f023 0301 	bic.w	r3, r3, #1
 800ebc6:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ebc8:	f7ff ffbe 	bl	800eb48 <FLASH_Lock>
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	40023c00 	.word	0x40023c00

0800ebd8 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ebe2:	f7ff ff9d 	bl	800eb20 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ebe6:	f7ff ffbf 	bl	800eb68 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ebea:	4b0f      	ldr	r3, [pc, #60]	; (800ec28 <FLASH_Read_Word+0x50>)
 800ebec:	691b      	ldr	r3, [r3, #16]
 800ebee:	4a0e      	ldr	r2, [pc, #56]	; (800ec28 <FLASH_Read_Word+0x50>)
 800ebf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ebf4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ebf6:	4b0c      	ldr	r3, [pc, #48]	; (800ec28 <FLASH_Read_Word+0x50>)
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	4a0b      	ldr	r2, [pc, #44]	; (800ec28 <FLASH_Read_Word+0x50>)
 800ebfc:	f043 0301 	orr.w	r3, r3, #1
 800ec00:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ec0a:	f7ff ffad 	bl	800eb68 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ec0e:	4b06      	ldr	r3, [pc, #24]	; (800ec28 <FLASH_Read_Word+0x50>)
 800ec10:	691b      	ldr	r3, [r3, #16]
 800ec12:	4a05      	ldr	r2, [pc, #20]	; (800ec28 <FLASH_Read_Word+0x50>)
 800ec14:	f023 0301 	bic.w	r3, r3, #1
 800ec18:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ec1a:	f7ff ff95 	bl	800eb48 <FLASH_Lock>
}
 800ec1e:	bf00      	nop
 800ec20:	3708      	adds	r7, #8
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	40023c00 	.word	0x40023c00

0800ec2c <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800ec38:	f7ff ff72 	bl	800eb20 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ec3c:	f7ff ff94 	bl	800eb68 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ec40:	4b0e      	ldr	r3, [pc, #56]	; (800ec7c <FLASH_Write_Word_F+0x50>)
 800ec42:	691b      	ldr	r3, [r3, #16]
 800ec44:	4a0d      	ldr	r2, [pc, #52]	; (800ec7c <FLASH_Write_Word_F+0x50>)
 800ec46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec4a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ec4c:	4b0b      	ldr	r3, [pc, #44]	; (800ec7c <FLASH_Write_Word_F+0x50>)
 800ec4e:	691b      	ldr	r3, [r3, #16]
 800ec50:	4a0a      	ldr	r2, [pc, #40]	; (800ec7c <FLASH_Write_Word_F+0x50>)
 800ec52:	f043 0301 	orr.w	r3, r3, #1
 800ec56:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ec5e:	f7ff ff83 	bl	800eb68 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ec62:	4b06      	ldr	r3, [pc, #24]	; (800ec7c <FLASH_Write_Word_F+0x50>)
 800ec64:	691b      	ldr	r3, [r3, #16]
 800ec66:	4a05      	ldr	r2, [pc, #20]	; (800ec7c <FLASH_Write_Word_F+0x50>)
 800ec68:	f023 0301 	bic.w	r3, r3, #1
 800ec6c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ec6e:	f7ff ff6b 	bl	800eb48 <FLASH_Lock>
}
 800ec72:	bf00      	nop
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	40023c00 	.word	0x40023c00

0800ec80 <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ec8a:	f7ff ff49 	bl	800eb20 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ec8e:	f7ff ff6b 	bl	800eb68 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ec92:	4b0f      	ldr	r3, [pc, #60]	; (800ecd0 <FLASH_Read_Word_F+0x50>)
 800ec94:	691b      	ldr	r3, [r3, #16]
 800ec96:	4a0e      	ldr	r2, [pc, #56]	; (800ecd0 <FLASH_Read_Word_F+0x50>)
 800ec98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec9c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ec9e:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <FLASH_Read_Word_F+0x50>)
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	4a0b      	ldr	r2, [pc, #44]	; (800ecd0 <FLASH_Read_Word_F+0x50>)
 800eca4:	f043 0301 	orr.w	r3, r3, #1
 800eca8:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ecb2:	f7ff ff59 	bl	800eb68 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ecb6:	4b06      	ldr	r3, [pc, #24]	; (800ecd0 <FLASH_Read_Word_F+0x50>)
 800ecb8:	691b      	ldr	r3, [r3, #16]
 800ecba:	4a05      	ldr	r2, [pc, #20]	; (800ecd0 <FLASH_Read_Word_F+0x50>)
 800ecbc:	f023 0301 	bic.w	r3, r3, #1
 800ecc0:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ecc2:	f7ff ff41 	bl	800eb48 <FLASH_Lock>
}
 800ecc6:	bf00      	nop
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	40023c00 	.word	0x40023c00

0800ecd4 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800ecda:	f002 fbfb 	bl	80114d4 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ecde:	2300      	movs	r3, #0
 800ece0:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800ece2:	2301      	movs	r3, #1
 800ece4:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ece6:	2302      	movs	r3, #2
 800ece8:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800ecea:	2301      	movs	r3, #1
 800ecec:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800ecee:	1d3a      	adds	r2, r7, #4
 800ecf0:	f107 0308 	add.w	r3, r7, #8
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f002 fcb4 	bl	8011664 <HAL_FLASHEx_Erase>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800ed00:	f002 fc0a 	bl	8011518 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800ed04:	7ffb      	ldrb	r3, [r7, #31]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d105      	bne.n	800ed16 <Flash_clear_sector1+0x42>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed10:	d101      	bne.n	800ed16 <Flash_clear_sector1+0x42>
 800ed12:	2301      	movs	r3, #1
 800ed14:	e000      	b.n	800ed18 <Flash_clear_sector1+0x44>
 800ed16:	2300      	movs	r3, #0
 800ed18:	f003 0301 	and.w	r3, r3, #1
 800ed1c:	b2db      	uxtb	r3, r3
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3720      	adds	r7, #32
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b088      	sub	sp, #32
 800ed2a:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800ed2c:	f002 fbd2 	bl	80114d4 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ed30:	2300      	movs	r3, #0
 800ed32:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800ed34:	2309      	movs	r3, #9
 800ed36:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ed38:	2302      	movs	r3, #2
 800ed3a:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800ed40:	1d3a      	adds	r2, r7, #4
 800ed42:	f107 0308 	add.w	r3, r7, #8
 800ed46:	4611      	mov	r1, r2
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f002 fc8b 	bl	8011664 <HAL_FLASHEx_Erase>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800ed52:	f002 fbe1 	bl	8011518 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800ed56:	7ffb      	ldrb	r3, [r7, #31]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d105      	bne.n	800ed68 <Flash_clear_sector9+0x42>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed62:	d101      	bne.n	800ed68 <Flash_clear_sector9+0x42>
 800ed64:	2301      	movs	r3, #1
 800ed66:	e000      	b.n	800ed6a <Flash_clear_sector9+0x44>
 800ed68:	2300      	movs	r3, #0
 800ed6a:	f003 0301 	and.w	r3, r3, #1
 800ed6e:	b2db      	uxtb	r3, r3
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3720      	adds	r7, #32
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <read_byte>:
//		Error_Handler();
//		printf("エラー2\r\n");
//	}
//	printf("ok\r\n");
//}
inline uint8_t read_byte( uint8_t reg ) {
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 800ed82:	79fb      	ldrb	r3, [r7, #7]
 800ed84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	2104      	movs	r1, #4
 800ed90:	480d      	ldr	r0, [pc, #52]	; (800edc8 <read_byte+0x50>)
 800ed92:	f002 ff23 	bl	8011bdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800ed96:	f107 010f 	add.w	r1, r7, #15
 800ed9a:	2364      	movs	r3, #100	; 0x64
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	480b      	ldr	r0, [pc, #44]	; (800edcc <read_byte+0x54>)
 800eda0:	f003 fc14 	bl	80125cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800eda4:	f107 010e 	add.w	r1, r7, #14
 800eda8:	2364      	movs	r3, #100	; 0x64
 800edaa:	2201      	movs	r2, #1
 800edac:	4807      	ldr	r0, [pc, #28]	; (800edcc <read_byte+0x54>)
 800edae:	f003 fd41 	bl	8012834 <HAL_SPI_Receive>
	CS_SET;
 800edb2:	2201      	movs	r2, #1
 800edb4:	2104      	movs	r1, #4
 800edb6:	4804      	ldr	r0, [pc, #16]	; (800edc8 <read_byte+0x50>)
 800edb8:	f002 ff10 	bl	8011bdc <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 800edbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	40020c00 	.word	0x40020c00
 800edcc:	200106a8 	.word	0x200106a8

0800edd0 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	4603      	mov	r3, r0
 800edd8:	460a      	mov	r2, r1
 800edda:	71fb      	strb	r3, [r7, #7]
 800eddc:	4613      	mov	r3, r2
 800edde:	71bb      	strb	r3, [r7, #6]

	uint8_t ret1, ret2,val1,val2;
	uint8_t ret[2] = {
 800ede0:	79fb      	ldrb	r3, [r7, #7]
 800ede2:	723b      	strb	r3, [r7, #8]
 800ede4:	79bb      	ldrb	r3, [r7, #6]
 800ede6:	727b      	strb	r3, [r7, #9]
			a,//0x37,
			b//0x38,
	};
	int16_t law_data;
	float res;
	ret1 = ret[0] | 0x80;
 800ede8:	7a3b      	ldrb	r3, [r7, #8]
 800edea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	73fb      	strb	r3, [r7, #15]
	ret2 = ret[1] | 0x80;
 800edf2:	7a7b      	ldrb	r3, [r7, #9]
 800edf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	73bb      	strb	r3, [r7, #14]
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 800edfc:	2200      	movs	r2, #0
 800edfe:	2104      	movs	r1, #4
 800ee00:	4822      	ldr	r0, [pc, #136]	; (800ee8c <ReadIMU+0xbc>)
 800ee02:	f002 feeb 	bl	8011bdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800ee06:	f107 010f 	add.w	r1, r7, #15
 800ee0a:	2364      	movs	r3, #100	; 0x64
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	4820      	ldr	r0, [pc, #128]	; (800ee90 <ReadIMU+0xc0>)
 800ee10:	f003 fbdc 	bl	80125cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800ee14:	f107 010d 	add.w	r1, r7, #13
 800ee18:	2364      	movs	r3, #100	; 0x64
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	481c      	ldr	r0, [pc, #112]	; (800ee90 <ReadIMU+0xc0>)
 800ee1e:	f003 fd09 	bl	8012834 <HAL_SPI_Receive>
	CS_SET;
 800ee22:	2201      	movs	r2, #1
 800ee24:	2104      	movs	r1, #4
 800ee26:	4819      	ldr	r0, [pc, #100]	; (800ee8c <ReadIMU+0xbc>)
 800ee28:	f002 fed8 	bl	8011bdc <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	2104      	movs	r1, #4
 800ee30:	4816      	ldr	r0, [pc, #88]	; (800ee8c <ReadIMU+0xbc>)
 800ee32:	f002 fed3 	bl	8011bdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800ee36:	f107 010e 	add.w	r1, r7, #14
 800ee3a:	2364      	movs	r3, #100	; 0x64
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	4814      	ldr	r0, [pc, #80]	; (800ee90 <ReadIMU+0xc0>)
 800ee40:	f003 fbc4 	bl	80125cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800ee44:	f107 010c 	add.w	r1, r7, #12
 800ee48:	2364      	movs	r3, #100	; 0x64
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	4810      	ldr	r0, [pc, #64]	; (800ee90 <ReadIMU+0xc0>)
 800ee4e:	f003 fcf1 	bl	8012834 <HAL_SPI_Receive>
	CS_SET;
 800ee52:	2201      	movs	r2, #1
 800ee54:	2104      	movs	r1, #4
 800ee56:	480d      	ldr	r0, [pc, #52]	; (800ee8c <ReadIMU+0xbc>)
 800ee58:	f002 fec0 	bl	8011bdc <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800ee5c:	7b7b      	ldrb	r3, [r7, #13]
 800ee5e:	021b      	lsls	r3, r3, #8
 800ee60:	b21a      	sxth	r2, r3
 800ee62:	7b3b      	ldrb	r3, [r7, #12]
 800ee64:	b21b      	sxth	r3, r3
 800ee66:	4313      	orrs	r3, r2
 800ee68:	82fb      	strh	r3, [r7, #22]
	res = (float)law_data;
 800ee6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee6e:	ee07 3a90 	vmov	s15, r3
 800ee72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee76:	edc7 7a04 	vstr	s15, [r7, #16]
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	ee07 3a90 	vmov	s15, r3
}
 800ee80:	eeb0 0a67 	vmov.f32	s0, s15
 800ee84:	3718      	adds	r7, #24
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	40020c00 	.word	0x40020c00
 800ee90:	200106a8 	.word	0x200106a8

0800ee94 <write_byte>:
void write_byte( uint8_t reg, uint8_t val )  {
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	460a      	mov	r2, r1
 800ee9e:	71fb      	strb	r3, [r7, #7]
 800eea0:	4613      	mov	r3, r2
 800eea2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800eeae:	2200      	movs	r2, #0
 800eeb0:	2104      	movs	r1, #4
 800eeb2:	480c      	ldr	r0, [pc, #48]	; (800eee4 <write_byte+0x50>)
 800eeb4:	f002 fe92 	bl	8011bdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800eeb8:	f107 010f 	add.w	r1, r7, #15
 800eebc:	2364      	movs	r3, #100	; 0x64
 800eebe:	2201      	movs	r2, #1
 800eec0:	4809      	ldr	r0, [pc, #36]	; (800eee8 <write_byte+0x54>)
 800eec2:	f003 fb83 	bl	80125cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800eec6:	1db9      	adds	r1, r7, #6
 800eec8:	2364      	movs	r3, #100	; 0x64
 800eeca:	2201      	movs	r2, #1
 800eecc:	4806      	ldr	r0, [pc, #24]	; (800eee8 <write_byte+0x54>)
 800eece:	f003 fb7d 	bl	80125cc <HAL_SPI_Transmit>
	CS_SET;
 800eed2:	2201      	movs	r2, #1
 800eed4:	2104      	movs	r1, #4
 800eed6:	4803      	ldr	r0, [pc, #12]	; (800eee4 <write_byte+0x50>)
 800eed8:	f002 fe80 	bl	8011bdc <HAL_GPIO_WritePin>
}
 800eedc:	bf00      	nop
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	40020c00 	.word	0x40020c00
 800eee8:	200106a8 	.word	0x200106a8

0800eeec <IMU_init>:

uint8_t IMU_init() {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800eef2:	2000      	movs	r0, #0
 800eef4:	f7ff ff40 	bl	800ed78 <read_byte>
 800eef8:	4603      	mov	r3, r0
 800eefa:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800eefc:	79bb      	ldrb	r3, [r7, #6]
 800eefe:	2be0      	cmp	r3, #224	; 0xe0
 800ef00:	d119      	bne.n	800ef36 <IMU_init+0x4a>
		ret = 1;
 800ef02:	2301      	movs	r3, #1
 800ef04:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800ef06:	2101      	movs	r1, #1
 800ef08:	2006      	movs	r0, #6
 800ef0a:	f7ff ffc3 	bl	800ee94 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800ef0e:	2110      	movs	r1, #16
 800ef10:	2003      	movs	r0, #3
 800ef12:	f7ff ffbf 	bl	800ee94 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800ef16:	2120      	movs	r1, #32
 800ef18:	207f      	movs	r0, #127	; 0x7f
 800ef1a:	f7ff ffbb 	bl	800ee94 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800ef1e:	2117      	movs	r1, #23
 800ef20:	2001      	movs	r0, #1
 800ef22:	f7ff ffb7 	bl	800ee94 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000

		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800ef26:	2117      	movs	r1, #23
 800ef28:	2014      	movs	r0, #20
 800ef2a:	f7ff ffb3 	bl	800ee94 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16

		write_byte(0x7F,0x00);	//USER_BANK0
 800ef2e:	2100      	movs	r1, #0
 800ef30:	207f      	movs	r0, #127	; 0x7f
 800ef32:	f7ff ffaf 	bl	800ee94 <write_byte>
	}
	return ret;
 800ef36:	79fb      	ldrb	r3, [r7, #7]
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800ef40:	b580      	push	{r7, lr}
 800ef42:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0


	HAL_Delay(100);
 800ef4a:	2064      	movs	r0, #100	; 0x64
 800ef4c:	f001 f972 	bl	8010234 <HAL_Delay>

	int num = 2000;
 800ef50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ef54:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800ef58:	f102 0204 	add.w	r2, r2, #4
 800ef5c:	6013      	str	r3, [r2, #0]
	float zg_vals[2000]={0.0f};
 800ef5e:	f107 0310 	add.w	r3, r7, #16
 800ef62:	3b0c      	subs	r3, #12
 800ef64:	4618      	mov	r0, r3
 800ef66:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	f006 f988 	bl	8015282 <memset>
	float sum=0;
 800ef72:	f04f 0300 	mov.w	r3, #0
 800ef76:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800ef7a:	f102 020c 	add.w	r2, r2, #12
 800ef7e:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num; i++){
 800ef80:	2300      	movs	r3, #0
 800ef82:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800ef86:	f102 0208 	add.w	r2, r2, #8
 800ef8a:	6013      	str	r3, [r2, #0]
 800ef8c:	e034      	b.n	800eff8 <IMU_Calib+0xb8>
		zg_vals[i] = ZGyro;
 800ef8e:	4b2a      	ldr	r3, [pc, #168]	; (800f038 <IMU_Calib+0xf8>)
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	f107 0310 	add.w	r3, r7, #16
 800ef96:	3b0c      	subs	r3, #12
 800ef98:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800ef9c:	f101 0108 	add.w	r1, r1, #8
 800efa0:	6809      	ldr	r1, [r1, #0]
 800efa2:	0089      	lsls	r1, r1, #2
 800efa4:	440b      	add	r3, r1
 800efa6:	601a      	str	r2, [r3, #0]
		sum += zg_vals[i];
 800efa8:	f107 0310 	add.w	r3, r7, #16
 800efac:	3b0c      	subs	r3, #12
 800efae:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800efb2:	f102 0208 	add.w	r2, r2, #8
 800efb6:	6812      	ldr	r2, [r2, #0]
 800efb8:	0092      	lsls	r2, r2, #2
 800efba:	4413      	add	r3, r2
 800efbc:	edd3 7a00 	vldr	s15, [r3]
 800efc0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800efc4:	f103 030c 	add.w	r3, r3, #12
 800efc8:	ed93 7a00 	vldr	s14, [r3]
 800efcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efd0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800efd4:	f103 030c 	add.w	r3, r3, #12
 800efd8:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800efdc:	2002      	movs	r0, #2
 800efde:	f001 f929 	bl	8010234 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800efe2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800efe6:	f103 0308 	add.w	r3, r3, #8
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	3301      	adds	r3, #1
 800efee:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800eff2:	f102 0208 	add.w	r2, r2, #8
 800eff6:	6013      	str	r3, [r2, #0]
 800eff8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800effc:	f103 0308 	add.w	r3, r3, #8
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f006:	f103 0304 	add.w	r3, r3, #4
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	dbbe      	blt.n	800ef8e <IMU_Calib+0x4e>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800f010:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f014:	f103 030c 	add.w	r3, r3, #12
 800f018:	ed93 7a00 	vldr	s14, [r3]
 800f01c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f03c <IMU_Calib+0xfc>
 800f020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f024:	4b06      	ldr	r3, [pc, #24]	; (800f040 <IMU_Calib+0x100>)
 800f026:	edc3 7a00 	vstr	s15, [r3]
}
 800f02a:	bf00      	nop
 800f02c:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	2000fcd4 	.word	0x2000fcd4
 800f03c:	44fa0000 	.word	0x44fa0000
 800f040:	2000fcd0 	.word	0x2000fcd0

0800f044 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800f044:	b580      	push	{r7, lr}
 800f046:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800f048:	213c      	movs	r1, #60	; 0x3c
 800f04a:	4804      	ldr	r0, [pc, #16]	; (800f05c <EncoderStart+0x18>)
 800f04c:	f004 fada 	bl	8013604 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800f050:	213c      	movs	r1, #60	; 0x3c
 800f052:	4803      	ldr	r0, [pc, #12]	; (800f060 <EncoderStart+0x1c>)
 800f054:	f004 fad6 	bl	8013604 <HAL_TIM_Encoder_Start>
}
 800f058:	bf00      	nop
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20010668 	.word	0x20010668
 800f060:	200105e0 	.word	0x200105e0

0800f064 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800f064:	b580      	push	{r7, lr}
 800f066:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800f068:	213c      	movs	r1, #60	; 0x3c
 800f06a:	4804      	ldr	r0, [pc, #16]	; (800f07c <EncoderStop+0x18>)
 800f06c:	f004 fb01 	bl	8013672 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800f070:	213c      	movs	r1, #60	; 0x3c
 800f072:	4803      	ldr	r0, [pc, #12]	; (800f080 <EncoderStop+0x1c>)
 800f074:	f004 fafd 	bl	8013672 <HAL_TIM_Encoder_Stop>
}
 800f078:	bf00      	nop
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	20010668 	.word	0x20010668
 800f080:	200105e0 	.word	0x200105e0

0800f084 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800f084:	b580      	push	{r7, lr}
 800f086:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800f088:	2100      	movs	r1, #0
 800f08a:	4804      	ldr	r0, [pc, #16]	; (800f09c <EmitterON+0x18>)
 800f08c:	f004 f83e 	bl	801310c <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800f090:	2100      	movs	r1, #0
 800f092:	4802      	ldr	r0, [pc, #8]	; (800f09c <EmitterON+0x18>)
 800f094:	f005 f951 	bl	801433a <HAL_TIMEx_OCN_Start_IT>

}
 800f098:	bf00      	nop
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	200105a0 	.word	0x200105a0

0800f0a0 <EmitterOFF>:
void EmitterOFF()
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	4804      	ldr	r0, [pc, #16]	; (800f0b8 <EmitterOFF+0x18>)
 800f0a8:	f004 f8b4 	bl	8013214 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	4802      	ldr	r0, [pc, #8]	; (800f0b8 <EmitterOFF+0x18>)
 800f0b0:	f005 f998 	bl	80143e4 <HAL_TIMEx_OCN_Stop_IT>

}
 800f0b4:	bf00      	nop
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	200105a0 	.word	0x200105a0

0800f0bc <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b07      	cmp	r3, #7
 800f0c8:	f200 80ac 	bhi.w	800f224 <ChangeLED+0x168>
 800f0cc:	a201      	add	r2, pc, #4	; (adr r2, 800f0d4 <ChangeLED+0x18>)
 800f0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d2:	bf00      	nop
 800f0d4:	0800f0f5 	.word	0x0800f0f5
 800f0d8:	0800f11b 	.word	0x0800f11b
 800f0dc:	0800f141 	.word	0x0800f141
 800f0e0:	0800f167 	.word	0x0800f167
 800f0e4:	0800f18d 	.word	0x0800f18d
 800f0e8:	0800f1b3 	.word	0x0800f1b3
 800f0ec:	0800f1d9 	.word	0x0800f1d9
 800f0f0:	0800f1ff 	.word	0x0800f1ff
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f0fa:	484d      	ldr	r0, [pc, #308]	; (800f230 <ChangeLED+0x174>)
 800f0fc:	f002 fd6e 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f100:	2200      	movs	r2, #0
 800f102:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f106:	484a      	ldr	r0, [pc, #296]	; (800f230 <ChangeLED+0x174>)
 800f108:	f002 fd68 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f10c:	2200      	movs	r2, #0
 800f10e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f112:	4848      	ldr	r0, [pc, #288]	; (800f234 <ChangeLED+0x178>)
 800f114:	f002 fd62 	bl	8011bdc <HAL_GPIO_WritePin>
		break;
 800f118:	e085      	b.n	800f226 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f11a:	2201      	movs	r2, #1
 800f11c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f120:	4843      	ldr	r0, [pc, #268]	; (800f230 <ChangeLED+0x174>)
 800f122:	f002 fd5b 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f126:	2200      	movs	r2, #0
 800f128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f12c:	4840      	ldr	r0, [pc, #256]	; (800f230 <ChangeLED+0x174>)
 800f12e:	f002 fd55 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f132:	2200      	movs	r2, #0
 800f134:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f138:	483e      	ldr	r0, [pc, #248]	; (800f234 <ChangeLED+0x178>)
 800f13a:	f002 fd4f 	bl	8011bdc <HAL_GPIO_WritePin>
		break;
 800f13e:	e072      	b.n	800f226 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f140:	2200      	movs	r2, #0
 800f142:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f146:	483a      	ldr	r0, [pc, #232]	; (800f230 <ChangeLED+0x174>)
 800f148:	f002 fd48 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f14c:	2201      	movs	r2, #1
 800f14e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f152:	4837      	ldr	r0, [pc, #220]	; (800f230 <ChangeLED+0x174>)
 800f154:	f002 fd42 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f158:	2200      	movs	r2, #0
 800f15a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f15e:	4835      	ldr	r0, [pc, #212]	; (800f234 <ChangeLED+0x178>)
 800f160:	f002 fd3c 	bl	8011bdc <HAL_GPIO_WritePin>

		break;
 800f164:	e05f      	b.n	800f226 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f166:	2201      	movs	r2, #1
 800f168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f16c:	4830      	ldr	r0, [pc, #192]	; (800f230 <ChangeLED+0x174>)
 800f16e:	f002 fd35 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f172:	2201      	movs	r2, #1
 800f174:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f178:	482d      	ldr	r0, [pc, #180]	; (800f230 <ChangeLED+0x174>)
 800f17a:	f002 fd2f 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f17e:	2200      	movs	r2, #0
 800f180:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f184:	482b      	ldr	r0, [pc, #172]	; (800f234 <ChangeLED+0x178>)
 800f186:	f002 fd29 	bl	8011bdc <HAL_GPIO_WritePin>
		break;
 800f18a:	e04c      	b.n	800f226 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f18c:	2200      	movs	r2, #0
 800f18e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f192:	4827      	ldr	r0, [pc, #156]	; (800f230 <ChangeLED+0x174>)
 800f194:	f002 fd22 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f198:	2200      	movs	r2, #0
 800f19a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f19e:	4824      	ldr	r0, [pc, #144]	; (800f230 <ChangeLED+0x174>)
 800f1a0:	f002 fd1c 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1aa:	4822      	ldr	r0, [pc, #136]	; (800f234 <ChangeLED+0x178>)
 800f1ac:	f002 fd16 	bl	8011bdc <HAL_GPIO_WritePin>
		break;
 800f1b0:	e039      	b.n	800f226 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1b8:	481d      	ldr	r0, [pc, #116]	; (800f230 <ChangeLED+0x174>)
 800f1ba:	f002 fd0f 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1c4:	481a      	ldr	r0, [pc, #104]	; (800f230 <ChangeLED+0x174>)
 800f1c6:	f002 fd09 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1d0:	4818      	ldr	r0, [pc, #96]	; (800f234 <ChangeLED+0x178>)
 800f1d2:	f002 fd03 	bl	8011bdc <HAL_GPIO_WritePin>
		break;
 800f1d6:	e026      	b.n	800f226 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1de:	4814      	ldr	r0, [pc, #80]	; (800f230 <ChangeLED+0x174>)
 800f1e0:	f002 fcfc 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1ea:	4811      	ldr	r0, [pc, #68]	; (800f230 <ChangeLED+0x174>)
 800f1ec:	f002 fcf6 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1f6:	480f      	ldr	r0, [pc, #60]	; (800f234 <ChangeLED+0x178>)
 800f1f8:	f002 fcf0 	bl	8011bdc <HAL_GPIO_WritePin>

		break;
 800f1fc:	e013      	b.n	800f226 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f1fe:	2201      	movs	r2, #1
 800f200:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f204:	480a      	ldr	r0, [pc, #40]	; (800f230 <ChangeLED+0x174>)
 800f206:	f002 fce9 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f20a:	2201      	movs	r2, #1
 800f20c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f210:	4807      	ldr	r0, [pc, #28]	; (800f230 <ChangeLED+0x174>)
 800f212:	f002 fce3 	bl	8011bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f216:	2201      	movs	r2, #1
 800f218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f21c:	4805      	ldr	r0, [pc, #20]	; (800f234 <ChangeLED+0x178>)
 800f21e:	f002 fcdd 	bl	8011bdc <HAL_GPIO_WritePin>

		break;
 800f222:	e000      	b.n	800f226 <ChangeLED+0x16a>
	default: break;
 800f224:	bf00      	nop

	}
}
 800f226:	bf00      	nop
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	40020800 	.word	0x40020800
 800f234:	40020400 	.word	0x40020400

0800f238 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800f238:	b580      	push	{r7, lr}
 800f23a:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800f23c:	210c      	movs	r1, #12
 800f23e:	4809      	ldr	r0, [pc, #36]	; (800f264 <Motor_PWM_Start+0x2c>)
 800f240:	f004 f8b8 	bl	80133b4 <HAL_TIM_PWM_Start>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d001      	beq.n	800f24e <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800f24a:	f7fe ffc3 	bl	800e1d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800f24e:	2104      	movs	r1, #4
 800f250:	4805      	ldr	r0, [pc, #20]	; (800f268 <Motor_PWM_Start+0x30>)
 800f252:	f004 f8af 	bl	80133b4 <HAL_TIM_PWM_Start>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d001      	beq.n	800f260 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800f25c:	f7fe ffba 	bl	800e1d4 <Error_Handler>
  }
#endif
}
 800f260:	bf00      	nop
 800f262:	bd80      	pop	{r7, pc}
 800f264:	2000fc3c 	.word	0x2000fc3c
 800f268:	2000fc7c 	.word	0x2000fc7c

0800f26c <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800f26c:	b580      	push	{r7, lr}
 800f26e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800f270:	210c      	movs	r1, #12
 800f272:	4809      	ldr	r0, [pc, #36]	; (800f298 <Motor_PWM_Stop+0x2c>)
 800f274:	f004 f8dc 	bl	8013430 <HAL_TIM_PWM_Stop>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d001      	beq.n	800f282 <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800f27e:	f7fe ffa9 	bl	800e1d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800f282:	2104      	movs	r1, #4
 800f284:	4805      	ldr	r0, [pc, #20]	; (800f29c <Motor_PWM_Stop+0x30>)
 800f286:	f004 f8d3 	bl	8013430 <HAL_TIM_PWM_Stop>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800f290:	f7fe ffa0 	bl	800e1d4 <Error_Handler>
  }
#endif
}
 800f294:	bf00      	nop
 800f296:	bd80      	pop	{r7, pc}
 800f298:	2000fc3c 	.word	0x2000fc3c
 800f29c:	2000fc7c 	.word	0x2000fc7c

0800f2a0 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	dd05      	ble.n	800f2bc <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	2104      	movs	r1, #4
 800f2b4:	4828      	ldr	r0, [pc, #160]	; (800f358 <Motor_Switch+0xb8>)
 800f2b6:	f002 fc91 	bl	8011bdc <HAL_GPIO_WritePin>
 800f2ba:	e00a      	b.n	800f2d2 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	da07      	bge.n	800f2d2 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	2104      	movs	r1, #4
 800f2c6:	4824      	ldr	r0, [pc, #144]	; (800f358 <Motor_Switch+0xb8>)
 800f2c8:	f002 fc88 	bl	8011bdc <HAL_GPIO_WritePin>
		left = -left;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	425b      	negs	r3, r3
 800f2d0:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	dd05      	ble.n	800f2e4 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800f2d8:	2200      	movs	r2, #0
 800f2da:	2101      	movs	r1, #1
 800f2dc:	481e      	ldr	r0, [pc, #120]	; (800f358 <Motor_Switch+0xb8>)
 800f2de:	f002 fc7d 	bl	8011bdc <HAL_GPIO_WritePin>
 800f2e2:	e00a      	b.n	800f2fa <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	da07      	bge.n	800f2fa <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	2101      	movs	r1, #1
 800f2ee:	481a      	ldr	r0, [pc, #104]	; (800f358 <Motor_Switch+0xb8>)
 800f2f0:	f002 fc74 	bl	8011bdc <HAL_GPIO_WritePin>
	  	right = -right;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	425b      	negs	r3, r3
 800f2f8:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7f9 f84a 	bl	8008394 <__aeabi_i2d>
 800f300:	a313      	add	r3, pc, #76	; (adr r3, 800f350 <Motor_Switch+0xb0>)
 800f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f306:	f7f9 fb3f 	bl	8008988 <__aeabi_dcmpgt>
 800f30a:	4603      	mov	r3, r0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d002      	beq.n	800f316 <Motor_Switch+0x76>
 800f310:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800f314:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800f316:	6838      	ldr	r0, [r7, #0]
 800f318:	f7f9 f83c 	bl	8008394 <__aeabi_i2d>
 800f31c:	a30c      	add	r3, pc, #48	; (adr r3, 800f350 <Motor_Switch+0xb0>)
 800f31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f322:	f7f9 fb31 	bl	8008988 <__aeabi_dcmpgt>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <Motor_Switch+0x92>
 800f32c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800f330:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800f332:	4b0a      	ldr	r3, [pc, #40]	; (800f35c <Motor_Switch+0xbc>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	683a      	ldr	r2, [r7, #0]
 800f338:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800f33a:	4b09      	ldr	r3, [pc, #36]	; (800f360 <Motor_Switch+0xc0>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f342:	bf00      	nop
 800f344:	3708      	adds	r7, #8
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	f3af 8000 	nop.w
 800f350:	00000000 	.word	0x00000000
 800f354:	40a3b000 	.word	0x40a3b000
 800f358:	40020000 	.word	0x40020000
 800f35c:	2000fc7c 	.word	0x2000fc7c
 800f360:	2000fc3c 	.word	0x2000fc3c

0800f364 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	683a      	ldr	r2, [r7, #0]
 800f372:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800f374:	bf00      	nop
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800f380:	b480      	push	{r7}
 800f382:	b087      	sub	sp, #28
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 800f390:	4a2c      	ldr	r2, [pc, #176]	; (800f444 <GetWallDataAverage+0xc4>)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	1ad3      	subs	r3, r2, r3
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	bfb8      	it	lt
 800f3a0:	425b      	neglt	r3, r3
 800f3a2:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800f3a4:	4927      	ldr	r1, [pc, #156]	; (800f444 <GetWallDataAverage+0xc4>)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	697a      	ldr	r2, [r7, #20]
 800f3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800f3ae:	4a26      	ldr	r2, [pc, #152]	; (800f448 <GetWallDataAverage+0xc8>)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	441a      	add	r2, r3
 800f3ba:	4923      	ldr	r1, [pc, #140]	; (800f448 <GetWallDataAverage+0xc8>)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800f3c2:	4a22      	ldr	r2, [pc, #136]	; (800f44c <GetWallDataAverage+0xcc>)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ca:	1c5a      	adds	r2, r3, #1
 800f3cc:	491f      	ldr	r1, [pc, #124]	; (800f44c <GetWallDataAverage+0xcc>)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800f3d4:	4a1d      	ldr	r2, [pc, #116]	; (800f44c <GetWallDataAverage+0xcc>)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3dc:	68fa      	ldr	r2, [r7, #12]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d121      	bne.n	800f426 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800f3e2:	4a19      	ldr	r2, [pc, #100]	; (800f448 <GetWallDataAverage+0xc8>)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ea:	ee07 3a90 	vmov	s15, r3
 800f3ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f3f2:	4a16      	ldr	r2, [pc, #88]	; (800f44c <GetWallDataAverage+0xcc>)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3fa:	ee07 3a90 	vmov	s15, r3
 800f3fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f406:	4a12      	ldr	r2, [pc, #72]	; (800f450 <GetWallDataAverage+0xd0>)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4413      	add	r3, r2
 800f40e:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800f412:	4a0d      	ldr	r2, [pc, #52]	; (800f448 <GetWallDataAverage+0xc8>)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2100      	movs	r1, #0
 800f418:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 800f41c:	4a0b      	ldr	r2, [pc, #44]	; (800f44c <GetWallDataAverage+0xcc>)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2100      	movs	r1, #0
 800f422:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800f426:	4a0a      	ldr	r2, [pc, #40]	; (800f450 <GetWallDataAverage+0xd0>)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	4413      	add	r3, r2
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	ee07 3a90 	vmov	s15, r3
}
 800f434:	eeb0 0a67 	vmov.f32	s0, s15
 800f438:	371c      	adds	r7, #28
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	2000fcd8 	.word	0x2000fcd8
 800f448:	2000fce8 	.word	0x2000fce8
 800f44c:	2000fcf8 	.word	0x2000fcf8
 800f450:	2000fd08 	.word	0x2000fd08

0800f454 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 800f454:	b480      	push	{r7}
 800f456:	b087      	sub	sp, #28
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f460:	edc7 0a01 	vstr	s1, [r7, #4]
 800f464:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800f468:	f04f 0300 	mov.w	r3, #0
 800f46c:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	ee07 3a90 	vmov	s15, r3
 800f474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f478:	edd7 7a02 	vldr	s15, [r7, #8]
 800f47c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f480:	edd7 7a01 	vldr	s15, [r7, #4]
 800f484:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f488:	ed97 7a00 	vldr	s14, [r7]
 800f48c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f490:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	ee07 3a90 	vmov	s15, r3
}
 800f49a:	eeb0 0a67 	vmov.f32	s0, s15
 800f49e:	371c      	adds	r7, #28
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr

0800f4a8 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	60bb      	str	r3, [r7, #8]
 800f4ba:	e007      	b.n	800f4cc <IntegerPower+0x24>
	{
		pattern_num *= integer;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	fb02 f303 	mul.w	r3, r2, r3
 800f4c4:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	60bb      	str	r3, [r7, #8]
 800f4cc:	68ba      	ldr	r2, [r7, #8]
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	dbf3      	blt.n	800f4bc <IntegerPower+0x14>
	}
	return pattern_num;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3714      	adds	r7, #20
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr

0800f4e2 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800f4e2:	b480      	push	{r7}
 800f4e4:	b08b      	sub	sp, #44	; 0x2c
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	ed87 0a03 	vstr	s0, [r7, #12]
 800f4ec:	edc7 0a02 	vstr	s1, [r7, #8]
 800f4f0:	ed87 1a01 	vstr	s2, [r7, #4]
 800f4f4:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800f4f6:	edd7 6a03 	vldr	s13, [r7, #12]
 800f4fa:	ed97 7a01 	vldr	s14, [r7, #4]
 800f4fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f502:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800f506:	edd7 6a02 	vldr	s13, [r7, #8]
 800f50a:	ed97 7a01 	vldr	s14, [r7, #4]
 800f50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f512:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800f516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f51a:	edd7 7a06 	vldr	s15, [r7, #24]
 800f51e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	ee07 3a90 	vmov	s15, r3
 800f528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f52c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f530:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800f538:	2300      	movs	r3, #0
 800f53a:	623b      	str	r3, [r7, #32]
 800f53c:	e018      	b.n	800f570 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800f53e:	6a3b      	ldr	r3, [r7, #32]
 800f540:	ee07 3a90 	vmov	s15, r3
 800f544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f548:	edd7 7a05 	vldr	s15, [r7, #20]
 800f54c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f550:	edd7 7a06 	vldr	s15, [r7, #24]
 800f554:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f558:	ed97 7a07 	vldr	s14, [r7, #28]
 800f55c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f564:	db01      	blt.n	800f56a <GetBatteryLevel+0x88>
		{
			pattern = i;
 800f566:	6a3b      	ldr	r3, [r7, #32]
 800f568:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800f56a:	6a3b      	ldr	r3, [r7, #32]
 800f56c:	3301      	adds	r3, #1
 800f56e:	623b      	str	r3, [r7, #32]
 800f570:	6a3a      	ldr	r2, [r7, #32]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	429a      	cmp	r2, r3
 800f576:	dbe2      	blt.n	800f53e <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	372c      	adds	r7, #44	; 0x2c
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr
	...

0800f588 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 800f58c:	4b07      	ldr	r3, [pc, #28]	; (800f5ac <Buffering+0x24>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	2100      	movs	r1, #0
 800f594:	4618      	mov	r0, r3
 800f596:	f006 fd4f 	bl	8016038 <setbuf>
	  setbuf(stdin,NULL);
 800f59a:	4b04      	ldr	r3, [pc, #16]	; (800f5ac <Buffering+0x24>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f006 fd48 	bl	8016038 <setbuf>
}
 800f5a8:	bf00      	nop
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	20000028 	.word	0x20000028

0800f5b0 <Copy_Gain>:
void Copy_Gain()
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b092      	sub	sp, #72	; 0x48
 800f5b4:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 800f5b6:	4b2c      	ldr	r3, [pc, #176]	; (800f668 <Copy_Gain+0xb8>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 800f5bc:	463b      	mov	r3, r7
 800f5be:	2240      	movs	r2, #64	; 0x40
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f005 fe5d 	bl	8015282 <memset>
	data[0] = Pid[L_VELO_PID].KP;
 800f5c8:	4b28      	ldr	r3, [pc, #160]	; (800f66c <Copy_Gain+0xbc>)
 800f5ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f5ce:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 800f5d0:	4b26      	ldr	r3, [pc, #152]	; (800f66c <Copy_Gain+0xbc>)
 800f5d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f5d6:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 800f5d8:	4b24      	ldr	r3, [pc, #144]	; (800f66c <Copy_Gain+0xbc>)
 800f5da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f5de:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 800f5e0:	4b22      	ldr	r3, [pc, #136]	; (800f66c <Copy_Gain+0xbc>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 800f5e6:	4b21      	ldr	r3, [pc, #132]	; (800f66c <Copy_Gain+0xbc>)
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800f5ec:	4b1f      	ldr	r3, [pc, #124]	; (800f66c <Copy_Gain+0xbc>)
 800f5ee:	689b      	ldr	r3, [r3, #8]
 800f5f0:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 800f5f2:	4b1e      	ldr	r3, [pc, #120]	; (800f66c <Copy_Gain+0xbc>)
 800f5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5f6:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800f5f8:	4b1c      	ldr	r3, [pc, #112]	; (800f66c <Copy_Gain+0xbc>)
 800f5fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5fc:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 800f5fe:	4b1b      	ldr	r3, [pc, #108]	; (800f66c <Copy_Gain+0xbc>)
 800f600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f602:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 800f604:	4b19      	ldr	r3, [pc, #100]	; (800f66c <Copy_Gain+0xbc>)
 800f606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f60a:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 800f60c:	4b17      	ldr	r3, [pc, #92]	; (800f66c <Copy_Gain+0xbc>)
 800f60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f612:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 800f614:	4b15      	ldr	r3, [pc, #84]	; (800f66c <Copy_Gain+0xbc>)
 800f616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f61a:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 800f61c:	4b13      	ldr	r3, [pc, #76]	; (800f66c <Copy_Gain+0xbc>)
 800f61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f620:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800f622:	4b12      	ldr	r3, [pc, #72]	; (800f66c <Copy_Gain+0xbc>)
 800f624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f626:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800f628:	4b10      	ldr	r3, [pc, #64]	; (800f66c <Copy_Gain+0xbc>)
 800f62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f62c:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 800f62e:	2300      	movs	r3, #0
 800f630:	643b      	str	r3, [r7, #64]	; 0x40
 800f632:	e012      	b.n	800f65a <Copy_Gain+0xaa>
	{

		FLASH_Write_Word_F( address, data[i]);
 800f634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f63c:	4413      	add	r3, r2
 800f63e:	3b48      	subs	r3, #72	; 0x48
 800f640:	edd3 7a00 	vldr	s15, [r3]
 800f644:	eeb0 0a67 	vmov.f32	s0, s15
 800f648:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f64a:	f7ff faef 	bl	800ec2c <FLASH_Write_Word_F>
		address += 0x04;
 800f64e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f650:	3304      	adds	r3, #4
 800f652:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 800f654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f656:	3301      	adds	r3, #1
 800f658:	643b      	str	r3, [r7, #64]	; 0x40
 800f65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f65c:	2b0e      	cmp	r3, #14
 800f65e:	dde9      	ble.n	800f634 <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800f660:	bf00      	nop
 800f662:	3748      	adds	r7, #72	; 0x48
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	0801a5c0 	.word	0x0801a5c0
 800f66c:	2000fd18 	.word	0x2000fd18

0800f670 <Load_Gain>:
void Load_Gain()
{
 800f670:	b590      	push	{r4, r7, lr}
 800f672:	b095      	sub	sp, #84	; 0x54
 800f674:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800f676:	4b59      	ldr	r3, [pc, #356]	; (800f7dc <Load_Gain+0x16c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 800f67c:	463b      	mov	r3, r7
 800f67e:	2240      	movs	r2, #64	; 0x40
 800f680:	2100      	movs	r1, #0
 800f682:	4618      	mov	r0, r3
 800f684:	f005 fdfd 	bl	8015282 <memset>

	//チェック
	int judge;
	uint8_t j=0;
 800f688:	2300      	movs	r3, #0
 800f68a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800f68e:	2300      	movs	r3, #0
 800f690:	647b      	str	r3, [r7, #68]	; 0x44
 800f692:	e038      	b.n	800f706 <Load_Gain+0x96>
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 800f694:	463a      	mov	r2, r7
 800f696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f698:	009b      	lsls	r3, r3, #2
 800f69a:	4413      	add	r3, r2
 800f69c:	4619      	mov	r1, r3
 800f69e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f6a0:	f7ff faee 	bl	800ec80 <FLASH_Read_Word_F>
		address += 0x04;
 800f6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 800f6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f6b2:	4413      	add	r3, r2
 800f6b4:	3b50      	subs	r3, #80	; 0x50
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7f8 fe7d 	bl	80083b8 <__aeabi_f2d>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	460c      	mov	r4, r1
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	4623      	mov	r3, r4
 800f6c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6c8:	4845      	ldr	r0, [pc, #276]	; (800f7e0 <Load_Gain+0x170>)
 800f6ca:	f006 fc21 	bl	8015f10 <iprintf>
		//work_ram[]がデフォ値なら、そのまま
		judge = isnanf(data[i]);
 800f6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f6d6:	4413      	add	r3, r2
 800f6d8:	3b50      	subs	r3, #80	; 0x50
 800f6da:	edd3 7a00 	vldr	s15, [r3]
 800f6de:	eef4 7a67 	vcmp.f32	s15, s15
 800f6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e6:	bf6c      	ite	vs
 800f6e8:	2301      	movvs	r3, #1
 800f6ea:	2300      	movvc	r3, #0
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	643b      	str	r3, [r7, #64]	; 0x40
		if(judge != 0)
 800f6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d004      	beq.n	800f700 <Load_Gain+0x90>
		{
			j++;
 800f6f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800f700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f702:	3301      	adds	r3, #1
 800f704:	647b      	str	r3, [r7, #68]	; 0x44
 800f706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f708:	2b0e      	cmp	r3, #14
 800f70a:	ddc3      	ble.n	800f694 <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800f70c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f710:	4619      	mov	r1, r3
 800f712:	4834      	ldr	r0, [pc, #208]	; (800f7e4 <Load_Gain+0x174>)
 800f714:	f006 fbfc 	bl	8015f10 <iprintf>
		if(j == 15)//全てnan0であれば
 800f718:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f71c:	2b0f      	cmp	r3, #15
 800f71e:	d059      	beq.n	800f7d4 <Load_Gain+0x164>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800f720:	edd7 7a00 	vldr	s15, [r7]
 800f724:	ed97 7a01 	vldr	s14, [r7, #4]
 800f728:	edd7 6a02 	vldr	s13, [r7, #8]
 800f72c:	eeb0 1a66 	vmov.f32	s2, s13
 800f730:	eef0 0a47 	vmov.f32	s1, s14
 800f734:	eeb0 0a67 	vmov.f32	s0, s15
 800f738:	2004      	movs	r0, #4
 800f73a:	f000 fa29 	bl	800fb90 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800f73e:	edd7 7a00 	vldr	s15, [r7]
 800f742:	ed97 7a01 	vldr	s14, [r7, #4]
 800f746:	edd7 6a02 	vldr	s13, [r7, #8]
 800f74a:	eeb0 1a66 	vmov.f32	s2, s13
 800f74e:	eef0 0a47 	vmov.f32	s1, s14
 800f752:	eeb0 0a67 	vmov.f32	s0, s15
 800f756:	2005      	movs	r0, #5
 800f758:	f000 fa1a 	bl	800fb90 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800f75c:	edd7 7a03 	vldr	s15, [r7, #12]
 800f760:	ed97 7a04 	vldr	s14, [r7, #16]
 800f764:	edd7 6a05 	vldr	s13, [r7, #20]
 800f768:	eeb0 1a66 	vmov.f32	s2, s13
 800f76c:	eef0 0a47 	vmov.f32	s1, s14
 800f770:	eeb0 0a67 	vmov.f32	s0, s15
 800f774:	2000      	movs	r0, #0
 800f776:	f000 fa0b 	bl	800fb90 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800f77a:	edd7 7a06 	vldr	s15, [r7, #24]
 800f77e:	ed97 7a07 	vldr	s14, [r7, #28]
 800f782:	edd7 6a08 	vldr	s13, [r7, #32]
 800f786:	eeb0 1a66 	vmov.f32	s2, s13
 800f78a:	eef0 0a47 	vmov.f32	s1, s14
 800f78e:	eeb0 0a67 	vmov.f32	s0, s15
 800f792:	2002      	movs	r0, #2
 800f794:	f000 f9fc 	bl	800fb90 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800f798:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f79c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f7a0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f7a4:	eeb0 1a66 	vmov.f32	s2, s13
 800f7a8:	eef0 0a47 	vmov.f32	s1, s14
 800f7ac:	eeb0 0a67 	vmov.f32	s0, s15
 800f7b0:	2003      	movs	r0, #3
 800f7b2:	f000 f9ed 	bl	800fb90 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800f7b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f7ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f7be:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800f7c2:	eeb0 1a66 	vmov.f32	s2, s13
 800f7c6:	eef0 0a47 	vmov.f32	s1, s14
 800f7ca:	eeb0 0a67 	vmov.f32	s0, s15
 800f7ce:	2001      	movs	r0, #1
 800f7d0:	f000 f9de 	bl	800fb90 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800f7d4:	bf00      	nop
 800f7d6:	3754      	adds	r7, #84	; 0x54
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd90      	pop	{r4, r7, pc}
 800f7dc:	0801a5c0 	.word	0x0801a5c0
 800f7e0:	0801a428 	.word	0x0801a428
 800f7e4:	0801a434 	.word	0x0801a434

0800f7e8 <Change_Gain>:
void Change_Gain()
{
 800f7e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f7ec:	b086      	sub	sp, #24
 800f7ee:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800f7f0:	48af      	ldr	r0, [pc, #700]	; (800fab0 <Change_Gain+0x2c8>)
 800f7f2:	f003 fc2a 	bl	801304a <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800f7f6:	48af      	ldr	r0, [pc, #700]	; (800fab4 <Change_Gain+0x2cc>)
 800f7f8:	f003 fc27 	bl	801304a <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800f7fc:	f7ff fd36 	bl	800f26c <Motor_PWM_Stop>
	EmitterOFF();
 800f800:	f7ff fc4e 	bl	800f0a0 <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 800f804:	20c8      	movs	r0, #200	; 0xc8
 800f806:	f000 fd15 	bl	8010234 <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 800f80a:	2330      	movs	r3, #48	; 0x30
 800f80c:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 800f80e:	2330      	movs	r3, #48	; 0x30
 800f810:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800f812:	48a9      	ldr	r0, [pc, #676]	; (800fab8 <Change_Gain+0x2d0>)
 800f814:	f006 fbf0 	bl	8015ff8 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800f818:	4ba8      	ldr	r3, [pc, #672]	; (800fabc <Change_Gain+0x2d4>)
 800f81a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f81e:	4618      	mov	r0, r3
 800f820:	f7f8 fdca 	bl	80083b8 <__aeabi_f2d>
 800f824:	4680      	mov	r8, r0
 800f826:	4689      	mov	r9, r1
 800f828:	4ba4      	ldr	r3, [pc, #656]	; (800fabc <Change_Gain+0x2d4>)
 800f82a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f82e:	4618      	mov	r0, r3
 800f830:	f7f8 fdc2 	bl	80083b8 <__aeabi_f2d>
 800f834:	4604      	mov	r4, r0
 800f836:	460d      	mov	r5, r1
 800f838:	4ba0      	ldr	r3, [pc, #640]	; (800fabc <Change_Gain+0x2d4>)
 800f83a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f83e:	4618      	mov	r0, r3
 800f840:	f7f8 fdba 	bl	80083b8 <__aeabi_f2d>
 800f844:	4602      	mov	r2, r0
 800f846:	460b      	mov	r3, r1
 800f848:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f84c:	e9cd 4500 	strd	r4, r5, [sp]
 800f850:	4642      	mov	r2, r8
 800f852:	464b      	mov	r3, r9
 800f854:	489a      	ldr	r0, [pc, #616]	; (800fac0 <Change_Gain+0x2d8>)
 800f856:	f006 fb5b 	bl	8015f10 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800f85a:	4b98      	ldr	r3, [pc, #608]	; (800fabc <Change_Gain+0x2d4>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	4618      	mov	r0, r3
 800f860:	f7f8 fdaa 	bl	80083b8 <__aeabi_f2d>
 800f864:	4680      	mov	r8, r0
 800f866:	4689      	mov	r9, r1
 800f868:	4b94      	ldr	r3, [pc, #592]	; (800fabc <Change_Gain+0x2d4>)
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7f8 fda3 	bl	80083b8 <__aeabi_f2d>
 800f872:	4604      	mov	r4, r0
 800f874:	460d      	mov	r5, r1
 800f876:	4b91      	ldr	r3, [pc, #580]	; (800fabc <Change_Gain+0x2d4>)
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7f8 fd9c 	bl	80083b8 <__aeabi_f2d>
 800f880:	4602      	mov	r2, r0
 800f882:	460b      	mov	r3, r1
 800f884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f888:	e9cd 4500 	strd	r4, r5, [sp]
 800f88c:	4642      	mov	r2, r8
 800f88e:	464b      	mov	r3, r9
 800f890:	488c      	ldr	r0, [pc, #560]	; (800fac4 <Change_Gain+0x2dc>)
 800f892:	f006 fb3d 	bl	8015f10 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800f896:	4b89      	ldr	r3, [pc, #548]	; (800fabc <Change_Gain+0x2d4>)
 800f898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7f8 fd8c 	bl	80083b8 <__aeabi_f2d>
 800f8a0:	4680      	mov	r8, r0
 800f8a2:	4689      	mov	r9, r1
 800f8a4:	4b85      	ldr	r3, [pc, #532]	; (800fabc <Change_Gain+0x2d4>)
 800f8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7f8 fd85 	bl	80083b8 <__aeabi_f2d>
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	460d      	mov	r5, r1
 800f8b2:	4b82      	ldr	r3, [pc, #520]	; (800fabc <Change_Gain+0x2d4>)
 800f8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7f8 fd7e 	bl	80083b8 <__aeabi_f2d>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	460b      	mov	r3, r1
 800f8c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8c4:	e9cd 4500 	strd	r4, r5, [sp]
 800f8c8:	4642      	mov	r2, r8
 800f8ca:	464b      	mov	r3, r9
 800f8cc:	487e      	ldr	r0, [pc, #504]	; (800fac8 <Change_Gain+0x2e0>)
 800f8ce:	f006 fb1f 	bl	8015f10 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800f8d2:	4b7a      	ldr	r3, [pc, #488]	; (800fabc <Change_Gain+0x2d4>)
 800f8d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7f8 fd6d 	bl	80083b8 <__aeabi_f2d>
 800f8de:	4680      	mov	r8, r0
 800f8e0:	4689      	mov	r9, r1
 800f8e2:	4b76      	ldr	r3, [pc, #472]	; (800fabc <Change_Gain+0x2d4>)
 800f8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7f8 fd65 	bl	80083b8 <__aeabi_f2d>
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	460d      	mov	r5, r1
 800f8f2:	4b72      	ldr	r3, [pc, #456]	; (800fabc <Change_Gain+0x2d4>)
 800f8f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7f8 fd5d 	bl	80083b8 <__aeabi_f2d>
 800f8fe:	4602      	mov	r2, r0
 800f900:	460b      	mov	r3, r1
 800f902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f906:	e9cd 4500 	strd	r4, r5, [sp]
 800f90a:	4642      	mov	r2, r8
 800f90c:	464b      	mov	r3, r9
 800f90e:	486f      	ldr	r0, [pc, #444]	; (800facc <Change_Gain+0x2e4>)
 800f910:	f006 fafe 	bl	8015f10 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800f914:	4b69      	ldr	r3, [pc, #420]	; (800fabc <Change_Gain+0x2d4>)
 800f916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f918:	4618      	mov	r0, r3
 800f91a:	f7f8 fd4d 	bl	80083b8 <__aeabi_f2d>
 800f91e:	4680      	mov	r8, r0
 800f920:	4689      	mov	r9, r1
 800f922:	4b66      	ldr	r3, [pc, #408]	; (800fabc <Change_Gain+0x2d4>)
 800f924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f926:	4618      	mov	r0, r3
 800f928:	f7f8 fd46 	bl	80083b8 <__aeabi_f2d>
 800f92c:	4604      	mov	r4, r0
 800f92e:	460d      	mov	r5, r1
 800f930:	4b62      	ldr	r3, [pc, #392]	; (800fabc <Change_Gain+0x2d4>)
 800f932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f934:	4618      	mov	r0, r3
 800f936:	f7f8 fd3f 	bl	80083b8 <__aeabi_f2d>
 800f93a:	4602      	mov	r2, r0
 800f93c:	460b      	mov	r3, r1
 800f93e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f942:	e9cd 4500 	strd	r4, r5, [sp]
 800f946:	4642      	mov	r2, r8
 800f948:	464b      	mov	r3, r9
 800f94a:	4861      	ldr	r0, [pc, #388]	; (800fad0 <Change_Gain+0x2e8>)
 800f94c:	f006 fae0 	bl	8015f10 <iprintf>

		Buffering();
 800f950:	f7ff fe1a 	bl	800f588 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800f954:	485f      	ldr	r0, [pc, #380]	; (800fad4 <Change_Gain+0x2ec>)
 800f956:	f006 fadb 	bl	8015f10 <iprintf>
 800f95a:	1dfb      	adds	r3, r7, #7
 800f95c:	4619      	mov	r1, r3
 800f95e:	485e      	ldr	r0, [pc, #376]	; (800fad8 <Change_Gain+0x2f0>)
 800f960:	f006 fb52 	bl	8016008 <iscanf>
		if(change_mode == '0')
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	2b30      	cmp	r3, #48	; 0x30
 800f968:	f000 80f4 	beq.w	800fb54 <Change_Gain+0x36c>
			break;
		}
		else
		{

			Buffering();
 800f96c:	f7ff fe0c 	bl	800f588 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800f970:	485a      	ldr	r0, [pc, #360]	; (800fadc <Change_Gain+0x2f4>)
 800f972:	f006 facd 	bl	8015f10 <iprintf>
 800f976:	1dbb      	adds	r3, r7, #6
 800f978:	4619      	mov	r1, r3
 800f97a:	4857      	ldr	r0, [pc, #348]	; (800fad8 <Change_Gain+0x2f0>)
 800f97c:	f006 fb44 	bl	8016008 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800f980:	79fb      	ldrb	r3, [r7, #7]
 800f982:	4619      	mov	r1, r3
 800f984:	79bb      	ldrb	r3, [r7, #6]
 800f986:	461a      	mov	r2, r3
 800f988:	4855      	ldr	r0, [pc, #340]	; (800fae0 <Change_Gain+0x2f8>)
 800f98a:	f006 fac1 	bl	8015f10 <iprintf>

			Buffering();
 800f98e:	f7ff fdfb 	bl	800f588 <Buffering>
			printf("\r\n値を入力 : ");
 800f992:	4854      	ldr	r0, [pc, #336]	; (800fae4 <Change_Gain+0x2fc>)
 800f994:	f006 fabc 	bl	8015f10 <iprintf>

			switch(change_mode)
 800f998:	79fb      	ldrb	r3, [r7, #7]
 800f99a:	3b31      	subs	r3, #49	; 0x31
 800f99c:	2b04      	cmp	r3, #4
 800f99e:	f200 80c1 	bhi.w	800fb24 <Change_Gain+0x33c>
 800f9a2:	a201      	add	r2, pc, #4	; (adr r2, 800f9a8 <Change_Gain+0x1c0>)
 800f9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a8:	0800f9bd 	.word	0x0800f9bd
 800f9ac:	0800f9ef 	.word	0x0800f9ef
 800f9b0:	0800fa21 	.word	0x0800fa21
 800f9b4:	0800fa51 	.word	0x0800fa51
 800f9b8:	0800fa81 	.word	0x0800fa81
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 800f9bc:	79bb      	ldrb	r3, [r7, #6]
 800f9be:	2b70      	cmp	r3, #112	; 0x70
 800f9c0:	d104      	bne.n	800f9cc <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 800f9c2:	4949      	ldr	r1, [pc, #292]	; (800fae8 <Change_Gain+0x300>)
 800f9c4:	4849      	ldr	r0, [pc, #292]	; (800faec <Change_Gain+0x304>)
 800f9c6:	f006 fb1f 	bl	8016008 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 800f9ca:	e0af      	b.n	800fb2c <Change_Gain+0x344>
				else if(pid == 'i')
 800f9cc:	79bb      	ldrb	r3, [r7, #6]
 800f9ce:	2b69      	cmp	r3, #105	; 0x69
 800f9d0:	d104      	bne.n	800f9dc <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800f9d2:	4947      	ldr	r1, [pc, #284]	; (800faf0 <Change_Gain+0x308>)
 800f9d4:	4845      	ldr	r0, [pc, #276]	; (800faec <Change_Gain+0x304>)
 800f9d6:	f006 fb17 	bl	8016008 <iscanf>
				break;
 800f9da:	e0a7      	b.n	800fb2c <Change_Gain+0x344>
				else if(pid == 'd')
 800f9dc:	79bb      	ldrb	r3, [r7, #6]
 800f9de:	2b64      	cmp	r3, #100	; 0x64
 800f9e0:	f040 80a4 	bne.w	800fb2c <Change_Gain+0x344>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800f9e4:	4943      	ldr	r1, [pc, #268]	; (800faf4 <Change_Gain+0x30c>)
 800f9e6:	4841      	ldr	r0, [pc, #260]	; (800faec <Change_Gain+0x304>)
 800f9e8:	f006 fb0e 	bl	8016008 <iscanf>
				break;
 800f9ec:	e09e      	b.n	800fb2c <Change_Gain+0x344>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 800f9ee:	79bb      	ldrb	r3, [r7, #6]
 800f9f0:	2b70      	cmp	r3, #112	; 0x70
 800f9f2:	d104      	bne.n	800f9fe <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 800f9f4:	4931      	ldr	r1, [pc, #196]	; (800fabc <Change_Gain+0x2d4>)
 800f9f6:	483d      	ldr	r0, [pc, #244]	; (800faec <Change_Gain+0x304>)
 800f9f8:	f006 fb06 	bl	8016008 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 800f9fc:	e098      	b.n	800fb30 <Change_Gain+0x348>
				else if(pid == 'i')
 800f9fe:	79bb      	ldrb	r3, [r7, #6]
 800fa00:	2b69      	cmp	r3, #105	; 0x69
 800fa02:	d104      	bne.n	800fa0e <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800fa04:	493c      	ldr	r1, [pc, #240]	; (800faf8 <Change_Gain+0x310>)
 800fa06:	4839      	ldr	r0, [pc, #228]	; (800faec <Change_Gain+0x304>)
 800fa08:	f006 fafe 	bl	8016008 <iscanf>
				break;
 800fa0c:	e090      	b.n	800fb30 <Change_Gain+0x348>
				else if(pid == 'd')
 800fa0e:	79bb      	ldrb	r3, [r7, #6]
 800fa10:	2b64      	cmp	r3, #100	; 0x64
 800fa12:	f040 808d 	bne.w	800fb30 <Change_Gain+0x348>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800fa16:	4939      	ldr	r1, [pc, #228]	; (800fafc <Change_Gain+0x314>)
 800fa18:	4834      	ldr	r0, [pc, #208]	; (800faec <Change_Gain+0x304>)
 800fa1a:	f006 faf5 	bl	8016008 <iscanf>
				break;
 800fa1e:	e087      	b.n	800fb30 <Change_Gain+0x348>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 800fa20:	79bb      	ldrb	r3, [r7, #6]
 800fa22:	2b70      	cmp	r3, #112	; 0x70
 800fa24:	d104      	bne.n	800fa30 <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 800fa26:	4936      	ldr	r1, [pc, #216]	; (800fb00 <Change_Gain+0x318>)
 800fa28:	4830      	ldr	r0, [pc, #192]	; (800faec <Change_Gain+0x304>)
 800fa2a:	f006 faed 	bl	8016008 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 800fa2e:	e081      	b.n	800fb34 <Change_Gain+0x34c>
				else if(pid == 'i')
 800fa30:	79bb      	ldrb	r3, [r7, #6]
 800fa32:	2b69      	cmp	r3, #105	; 0x69
 800fa34:	d104      	bne.n	800fa40 <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800fa36:	4933      	ldr	r1, [pc, #204]	; (800fb04 <Change_Gain+0x31c>)
 800fa38:	482c      	ldr	r0, [pc, #176]	; (800faec <Change_Gain+0x304>)
 800fa3a:	f006 fae5 	bl	8016008 <iscanf>
				break;
 800fa3e:	e079      	b.n	800fb34 <Change_Gain+0x34c>
				else if(pid == 'd')
 800fa40:	79bb      	ldrb	r3, [r7, #6]
 800fa42:	2b64      	cmp	r3, #100	; 0x64
 800fa44:	d176      	bne.n	800fb34 <Change_Gain+0x34c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800fa46:	4930      	ldr	r1, [pc, #192]	; (800fb08 <Change_Gain+0x320>)
 800fa48:	4828      	ldr	r0, [pc, #160]	; (800faec <Change_Gain+0x304>)
 800fa4a:	f006 fadd 	bl	8016008 <iscanf>
				break;
 800fa4e:	e071      	b.n	800fb34 <Change_Gain+0x34c>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 800fa50:	79bb      	ldrb	r3, [r7, #6]
 800fa52:	2b70      	cmp	r3, #112	; 0x70
 800fa54:	d104      	bne.n	800fa60 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 800fa56:	492d      	ldr	r1, [pc, #180]	; (800fb0c <Change_Gain+0x324>)
 800fa58:	4824      	ldr	r0, [pc, #144]	; (800faec <Change_Gain+0x304>)
 800fa5a:	f006 fad5 	bl	8016008 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 800fa5e:	e06b      	b.n	800fb38 <Change_Gain+0x350>
				else if(pid == 'i')
 800fa60:	79bb      	ldrb	r3, [r7, #6]
 800fa62:	2b69      	cmp	r3, #105	; 0x69
 800fa64:	d104      	bne.n	800fa70 <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800fa66:	492a      	ldr	r1, [pc, #168]	; (800fb10 <Change_Gain+0x328>)
 800fa68:	4820      	ldr	r0, [pc, #128]	; (800faec <Change_Gain+0x304>)
 800fa6a:	f006 facd 	bl	8016008 <iscanf>
				break;
 800fa6e:	e063      	b.n	800fb38 <Change_Gain+0x350>
				else if(pid == 'd')
 800fa70:	79bb      	ldrb	r3, [r7, #6]
 800fa72:	2b64      	cmp	r3, #100	; 0x64
 800fa74:	d160      	bne.n	800fb38 <Change_Gain+0x350>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800fa76:	4927      	ldr	r1, [pc, #156]	; (800fb14 <Change_Gain+0x32c>)
 800fa78:	481c      	ldr	r0, [pc, #112]	; (800faec <Change_Gain+0x304>)
 800fa7a:	f006 fac5 	bl	8016008 <iscanf>
				break;
 800fa7e:	e05b      	b.n	800fb38 <Change_Gain+0x350>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800fa80:	79bb      	ldrb	r3, [r7, #6]
 800fa82:	2b70      	cmp	r3, #112	; 0x70
 800fa84:	d104      	bne.n	800fa90 <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 800fa86:	4924      	ldr	r1, [pc, #144]	; (800fb18 <Change_Gain+0x330>)
 800fa88:	4818      	ldr	r0, [pc, #96]	; (800faec <Change_Gain+0x304>)
 800fa8a:	f006 fabd 	bl	8016008 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 800fa8e:	e055      	b.n	800fb3c <Change_Gain+0x354>
				else if(pid == 'i')
 800fa90:	79bb      	ldrb	r3, [r7, #6]
 800fa92:	2b69      	cmp	r3, #105	; 0x69
 800fa94:	d104      	bne.n	800faa0 <Change_Gain+0x2b8>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800fa96:	4921      	ldr	r1, [pc, #132]	; (800fb1c <Change_Gain+0x334>)
 800fa98:	4814      	ldr	r0, [pc, #80]	; (800faec <Change_Gain+0x304>)
 800fa9a:	f006 fab5 	bl	8016008 <iscanf>
				break;
 800fa9e:	e04d      	b.n	800fb3c <Change_Gain+0x354>
				else if(pid == 'd')
 800faa0:	79bb      	ldrb	r3, [r7, #6]
 800faa2:	2b64      	cmp	r3, #100	; 0x64
 800faa4:	d14a      	bne.n	800fb3c <Change_Gain+0x354>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800faa6:	491e      	ldr	r1, [pc, #120]	; (800fb20 <Change_Gain+0x338>)
 800faa8:	4810      	ldr	r0, [pc, #64]	; (800faec <Change_Gain+0x304>)
 800faaa:	f006 faad 	bl	8016008 <iscanf>
				break;
 800faae:	e045      	b.n	800fb3c <Change_Gain+0x354>
 800fab0:	200107e8 	.word	0x200107e8
 800fab4:	200105a0 	.word	0x200105a0
 800fab8:	0801a43c 	.word	0x0801a43c
 800fabc:	2000fd18 	.word	0x2000fd18
 800fac0:	0801a454 	.word	0x0801a454
 800fac4:	0801a474 	.word	0x0801a474
 800fac8:	0801a490 	.word	0x0801a490
 800facc:	0801a4ac 	.word	0x0801a4ac
 800fad0:	0801a4c8 	.word	0x0801a4c8
 800fad4:	0801a4e4 	.word	0x0801a4e4
 800fad8:	0801a4fc 	.word	0x0801a4fc
 800fadc:	0801a500 	.word	0x0801a500
 800fae0:	0801a514 	.word	0x0801a514
 800fae4:	0801a538 	.word	0x0801a538
 800fae8:	2000fdc8 	.word	0x2000fdc8
 800faec:	0801a54c 	.word	0x0801a54c
 800faf0:	2000fdcc 	.word	0x2000fdcc
 800faf4:	2000fdd0 	.word	0x2000fdd0
 800faf8:	2000fd1c 	.word	0x2000fd1c
 800fafc:	2000fd20 	.word	0x2000fd20
 800fb00:	2000fd70 	.word	0x2000fd70
 800fb04:	2000fd74 	.word	0x2000fd74
 800fb08:	2000fd78 	.word	0x2000fd78
 800fb0c:	2000fd9c 	.word	0x2000fd9c
 800fb10:	2000fda0 	.word	0x2000fda0
 800fb14:	2000fda4 	.word	0x2000fda4
 800fb18:	2000fd44 	.word	0x2000fd44
 800fb1c:	2000fd48 	.word	0x2000fd48
 800fb20:	2000fd4c 	.word	0x2000fd4c
			default :
				printf("該当しません\r\n");
 800fb24:	4816      	ldr	r0, [pc, #88]	; (800fb80 <Change_Gain+0x398>)
 800fb26:	f006 fa67 	bl	8015ff8 <puts>
				break;
 800fb2a:	e008      	b.n	800fb3e <Change_Gain+0x356>
				break;
 800fb2c:	bf00      	nop
 800fb2e:	e006      	b.n	800fb3e <Change_Gain+0x356>
				break;
 800fb30:	bf00      	nop
 800fb32:	e004      	b.n	800fb3e <Change_Gain+0x356>
				break;
 800fb34:	bf00      	nop
 800fb36:	e002      	b.n	800fb3e <Change_Gain+0x356>
				break;
 800fb38:	bf00      	nop
 800fb3a:	e000      	b.n	800fb3e <Change_Gain+0x356>
				break;
 800fb3c:	bf00      	nop
			}
			Buffering();
 800fb3e:	f7ff fd23 	bl	800f588 <Buffering>
			scanf("%c",&nl);
 800fb42:	1d7b      	adds	r3, r7, #5
 800fb44:	4619      	mov	r1, r3
 800fb46:	480f      	ldr	r0, [pc, #60]	; (800fb84 <Change_Gain+0x39c>)
 800fb48:	f006 fa5e 	bl	8016008 <iscanf>
			printf("\r\n");
 800fb4c:	480e      	ldr	r0, [pc, #56]	; (800fb88 <Change_Gain+0x3a0>)
 800fb4e:	f006 fa53 	bl	8015ff8 <puts>
		printf("現在のPIDゲイン\r\n");
 800fb52:	e65e      	b.n	800f812 <Change_Gain+0x2a>
			break;
 800fb54:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 800fb56:	480d      	ldr	r0, [pc, #52]	; (800fb8c <Change_Gain+0x3a4>)
 800fb58:	f006 fa4e 	bl	8015ff8 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800fb5c:	f7ff f8e3 	bl	800ed26 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800fb60:	f7ff fd26 	bl	800f5b0 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800fb64:	2007      	movs	r0, #7
 800fb66:	f7ff faa9 	bl	800f0bc <ChangeLED>
	HAL_Delay(200);
 800fb6a:	20c8      	movs	r0, #200	; 0xc8
 800fb6c:	f000 fb62 	bl	8010234 <HAL_Delay>
	ChangeLED(0);
 800fb70:	2000      	movs	r0, #0
 800fb72:	f7ff faa3 	bl	800f0bc <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800fb76:	bf00      	nop
 800fb78:	3708      	adds	r7, #8
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800fb80:	0801a550 	.word	0x0801a550
 800fb84:	0801a4fc 	.word	0x0801a4fc
 800fb88:	0801a564 	.word	0x0801a564
 800fb8c:	0801a568 	.word	0x0801a568

0800fb90 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800fb90:	b480      	push	{r7}
 800fb92:	b085      	sub	sp, #20
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	ed87 0a02 	vstr	s0, [r7, #8]
 800fb9c:	edc7 0a01 	vstr	s1, [r7, #4]
 800fba0:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 800fba4:	4a0f      	ldr	r2, [pc, #60]	; (800fbe4 <PIDSetGain+0x54>)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	212c      	movs	r1, #44	; 0x2c
 800fbaa:	fb01 f303 	mul.w	r3, r1, r3
 800fbae:	4413      	add	r3, r2
 800fbb0:	68ba      	ldr	r2, [r7, #8]
 800fbb2:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 800fbb4:	4a0b      	ldr	r2, [pc, #44]	; (800fbe4 <PIDSetGain+0x54>)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	212c      	movs	r1, #44	; 0x2c
 800fbba:	fb01 f303 	mul.w	r3, r1, r3
 800fbbe:	4413      	add	r3, r2
 800fbc0:	3304      	adds	r3, #4
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 800fbc6:	4a07      	ldr	r2, [pc, #28]	; (800fbe4 <PIDSetGain+0x54>)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	212c      	movs	r1, #44	; 0x2c
 800fbcc:	fb01 f303 	mul.w	r3, r1, r3
 800fbd0:	4413      	add	r3, r2
 800fbd2:	3308      	adds	r3, #8
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	601a      	str	r2, [r3, #0]

}
 800fbd8:	bf00      	nop
 800fbda:	3714      	adds	r7, #20
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr
 800fbe4:	2000fd18 	.word	0x2000fd18

0800fbe8 <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 800fbf2:	4a07      	ldr	r2, [pc, #28]	; (800fc10 <PIDChangeFlag+0x28>)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	212c      	movs	r1, #44	; 0x2c
 800fbf8:	fb01 f303 	mul.w	r3, r1, r3
 800fbfc:	4413      	add	r3, r2
 800fbfe:	3328      	adds	r3, #40	; 0x28
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	601a      	str	r2, [r3, #0]
}
 800fc04:	bf00      	nop
 800fc06:	370c      	adds	r7, #12
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr
 800fc10:	2000fd18 	.word	0x2000fd18

0800fc14 <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800fc1c:	4a1b      	ldr	r2, [pc, #108]	; (800fc8c <PIDReset+0x78>)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	212c      	movs	r1, #44	; 0x2c
 800fc22:	fb01 f303 	mul.w	r3, r1, r3
 800fc26:	4413      	add	r3, r2
 800fc28:	330c      	adds	r3, #12
 800fc2a:	f04f 0200 	mov.w	r2, #0
 800fc2e:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 800fc30:	4a16      	ldr	r2, [pc, #88]	; (800fc8c <PIDReset+0x78>)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	212c      	movs	r1, #44	; 0x2c
 800fc36:	fb01 f303 	mul.w	r3, r1, r3
 800fc3a:	4413      	add	r3, r2
 800fc3c:	3310      	adds	r3, #16
 800fc3e:	f04f 0200 	mov.w	r2, #0
 800fc42:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 800fc44:	4a11      	ldr	r2, [pc, #68]	; (800fc8c <PIDReset+0x78>)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	212c      	movs	r1, #44	; 0x2c
 800fc4a:	fb01 f303 	mul.w	r3, r1, r3
 800fc4e:	4413      	add	r3, r2
 800fc50:	3314      	adds	r3, #20
 800fc52:	f04f 0200 	mov.w	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 800fc58:	4a0c      	ldr	r2, [pc, #48]	; (800fc8c <PIDReset+0x78>)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	212c      	movs	r1, #44	; 0x2c
 800fc5e:	fb01 f303 	mul.w	r3, r1, r3
 800fc62:	4413      	add	r3, r2
 800fc64:	3318      	adds	r3, #24
 800fc66:	f04f 0200 	mov.w	r2, #0
 800fc6a:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 800fc6c:	4a07      	ldr	r2, [pc, #28]	; (800fc8c <PIDReset+0x78>)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	212c      	movs	r1, #44	; 0x2c
 800fc72:	fb01 f303 	mul.w	r3, r1, r3
 800fc76:	4413      	add	r3, r2
 800fc78:	3324      	adds	r3, #36	; 0x24
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	601a      	str	r2, [r3, #0]
}
 800fc7e:	bf00      	nop
 800fc80:	370c      	adds	r7, #12
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop
 800fc8c:	2000fd18 	.word	0x2000fd18

0800fc90 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 800fc90:	b590      	push	{r4, r7, lr}
 800fc92:	b085      	sub	sp, #20
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	ed87 0a02 	vstr	s0, [r7, #8]
 800fc9c:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800fca0:	4a90      	ldr	r2, [pc, #576]	; (800fee4 <PIDControl+0x254>)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	212c      	movs	r1, #44	; 0x2c
 800fca6:	fb01 f303 	mul.w	r3, r1, r3
 800fcaa:	4413      	add	r3, r2
 800fcac:	3328      	adds	r3, #40	; 0x28
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d132      	bne.n	800fd1a <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 800fcb4:	4a8b      	ldr	r2, [pc, #556]	; (800fee4 <PIDControl+0x254>)
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	212c      	movs	r1, #44	; 0x2c
 800fcba:	fb01 f303 	mul.w	r3, r1, r3
 800fcbe:	4413      	add	r3, r2
 800fcc0:	330c      	adds	r3, #12
 800fcc2:	f04f 0200 	mov.w	r2, #0
 800fcc6:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 800fcc8:	4a86      	ldr	r2, [pc, #536]	; (800fee4 <PIDControl+0x254>)
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	212c      	movs	r1, #44	; 0x2c
 800fcce:	fb01 f303 	mul.w	r3, r1, r3
 800fcd2:	4413      	add	r3, r2
 800fcd4:	3310      	adds	r3, #16
 800fcd6:	f04f 0200 	mov.w	r2, #0
 800fcda:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 800fcdc:	4a81      	ldr	r2, [pc, #516]	; (800fee4 <PIDControl+0x254>)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	212c      	movs	r1, #44	; 0x2c
 800fce2:	fb01 f303 	mul.w	r3, r1, r3
 800fce6:	4413      	add	r3, r2
 800fce8:	3314      	adds	r3, #20
 800fcea:	f04f 0200 	mov.w	r2, #0
 800fcee:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 800fcf0:	4a7c      	ldr	r2, [pc, #496]	; (800fee4 <PIDControl+0x254>)
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	212c      	movs	r1, #44	; 0x2c
 800fcf6:	fb01 f303 	mul.w	r3, r1, r3
 800fcfa:	4413      	add	r3, r2
 800fcfc:	3318      	adds	r3, #24
 800fcfe:	f04f 0200 	mov.w	r2, #0
 800fd02:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 800fd04:	4a77      	ldr	r2, [pc, #476]	; (800fee4 <PIDControl+0x254>)
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	212c      	movs	r1, #44	; 0x2c
 800fd0a:	fb01 f303 	mul.w	r3, r1, r3
 800fd0e:	4413      	add	r3, r2
 800fd10:	3324      	adds	r3, #36	; 0x24
 800fd12:	2200      	movs	r2, #0
 800fd14:	601a      	str	r2, [r3, #0]
		return 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e0df      	b.n	800feda <PIDControl+0x24a>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 800fd1a:	4a72      	ldr	r2, [pc, #456]	; (800fee4 <PIDControl+0x254>)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	212c      	movs	r1, #44	; 0x2c
 800fd20:	fb01 f303 	mul.w	r3, r1, r3
 800fd24:	4413      	add	r3, r2
 800fd26:	3320      	adds	r3, #32
 800fd28:	68ba      	ldr	r2, [r7, #8]
 800fd2a:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 800fd2c:	4a6d      	ldr	r2, [pc, #436]	; (800fee4 <PIDControl+0x254>)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	212c      	movs	r1, #44	; 0x2c
 800fd32:	fb01 f303 	mul.w	r3, r1, r3
 800fd36:	4413      	add	r3, r2
 800fd38:	331c      	adds	r3, #28
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 800fd3e:	4a69      	ldr	r2, [pc, #420]	; (800fee4 <PIDControl+0x254>)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	212c      	movs	r1, #44	; 0x2c
 800fd44:	fb01 f303 	mul.w	r3, r1, r3
 800fd48:	4413      	add	r3, r2
 800fd4a:	3320      	adds	r3, #32
 800fd4c:	ed93 7a00 	vldr	s14, [r3]
 800fd50:	4a64      	ldr	r2, [pc, #400]	; (800fee4 <PIDControl+0x254>)
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	212c      	movs	r1, #44	; 0x2c
 800fd56:	fb01 f303 	mul.w	r3, r1, r3
 800fd5a:	4413      	add	r3, r2
 800fd5c:	331c      	adds	r3, #28
 800fd5e:	edd3 7a00 	vldr	s15, [r3]
 800fd62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd66:	4a5f      	ldr	r2, [pc, #380]	; (800fee4 <PIDControl+0x254>)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	212c      	movs	r1, #44	; 0x2c
 800fd6c:	fb01 f303 	mul.w	r3, r1, r3
 800fd70:	4413      	add	r3, r2
 800fd72:	330c      	adds	r3, #12
 800fd74:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 800fd78:	4a5a      	ldr	r2, [pc, #360]	; (800fee4 <PIDControl+0x254>)
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	212c      	movs	r1, #44	; 0x2c
 800fd7e:	fb01 f303 	mul.w	r3, r1, r3
 800fd82:	4413      	add	r3, r2
 800fd84:	3310      	adds	r3, #16
 800fd86:	ed93 7a00 	vldr	s14, [r3]
 800fd8a:	4a56      	ldr	r2, [pc, #344]	; (800fee4 <PIDControl+0x254>)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	212c      	movs	r1, #44	; 0x2c
 800fd90:	fb01 f303 	mul.w	r3, r1, r3
 800fd94:	4413      	add	r3, r2
 800fd96:	330c      	adds	r3, #12
 800fd98:	edd3 7a00 	vldr	s15, [r3]
 800fd9c:	eddf 6a52 	vldr	s13, [pc, #328]	; 800fee8 <PIDControl+0x258>
 800fda0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fda4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fda8:	4a4e      	ldr	r2, [pc, #312]	; (800fee4 <PIDControl+0x254>)
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	212c      	movs	r1, #44	; 0x2c
 800fdae:	fb01 f303 	mul.w	r3, r1, r3
 800fdb2:	4413      	add	r3, r2
 800fdb4:	3310      	adds	r3, #16
 800fdb6:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800fdba:	4a4a      	ldr	r2, [pc, #296]	; (800fee4 <PIDControl+0x254>)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	212c      	movs	r1, #44	; 0x2c
 800fdc0:	fb01 f303 	mul.w	r3, r1, r3
 800fdc4:	4413      	add	r3, r2
 800fdc6:	330c      	adds	r3, #12
 800fdc8:	ed93 7a00 	vldr	s14, [r3]
 800fdcc:	4a45      	ldr	r2, [pc, #276]	; (800fee4 <PIDControl+0x254>)
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	212c      	movs	r1, #44	; 0x2c
 800fdd2:	fb01 f303 	mul.w	r3, r1, r3
 800fdd6:	4413      	add	r3, r2
 800fdd8:	3318      	adds	r3, #24
 800fdda:	edd3 7a00 	vldr	s15, [r3]
 800fdde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fde2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800feec <PIDControl+0x25c>
 800fde6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdea:	4a3e      	ldr	r2, [pc, #248]	; (800fee4 <PIDControl+0x254>)
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	212c      	movs	r1, #44	; 0x2c
 800fdf0:	fb01 f303 	mul.w	r3, r1, r3
 800fdf4:	4413      	add	r3, r2
 800fdf6:	3314      	adds	r3, #20
 800fdf8:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 800fdfc:	4a39      	ldr	r2, [pc, #228]	; (800fee4 <PIDControl+0x254>)
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	212c      	movs	r1, #44	; 0x2c
 800fe02:	fb01 f303 	mul.w	r3, r1, r3
 800fe06:	4413      	add	r3, r2
 800fe08:	330c      	adds	r3, #12
 800fe0a:	681a      	ldr	r2, [r3, #0]
 800fe0c:	4935      	ldr	r1, [pc, #212]	; (800fee4 <PIDControl+0x254>)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	202c      	movs	r0, #44	; 0x2c
 800fe12:	fb00 f303 	mul.w	r3, r0, r3
 800fe16:	440b      	add	r3, r1
 800fe18:	3318      	adds	r3, #24
 800fe1a:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800fe1c:	4a31      	ldr	r2, [pc, #196]	; (800fee4 <PIDControl+0x254>)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	212c      	movs	r1, #44	; 0x2c
 800fe22:	fb01 f303 	mul.w	r3, r1, r3
 800fe26:	4413      	add	r3, r2
 800fe28:	ed93 7a00 	vldr	s14, [r3]
 800fe2c:	4a2d      	ldr	r2, [pc, #180]	; (800fee4 <PIDControl+0x254>)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	212c      	movs	r1, #44	; 0x2c
 800fe32:	fb01 f303 	mul.w	r3, r1, r3
 800fe36:	4413      	add	r3, r2
 800fe38:	330c      	adds	r3, #12
 800fe3a:	edd3 7a00 	vldr	s15, [r3]
 800fe3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe42:	4a28      	ldr	r2, [pc, #160]	; (800fee4 <PIDControl+0x254>)
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	212c      	movs	r1, #44	; 0x2c
 800fe48:	fb01 f303 	mul.w	r3, r1, r3
 800fe4c:	4413      	add	r3, r2
 800fe4e:	3304      	adds	r3, #4
 800fe50:	edd3 6a00 	vldr	s13, [r3]
 800fe54:	4a23      	ldr	r2, [pc, #140]	; (800fee4 <PIDControl+0x254>)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	212c      	movs	r1, #44	; 0x2c
 800fe5a:	fb01 f303 	mul.w	r3, r1, r3
 800fe5e:	4413      	add	r3, r2
 800fe60:	3310      	adds	r3, #16
 800fe62:	edd3 7a00 	vldr	s15, [r3]
 800fe66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe6e:	4a1d      	ldr	r2, [pc, #116]	; (800fee4 <PIDControl+0x254>)
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	212c      	movs	r1, #44	; 0x2c
 800fe74:	fb01 f303 	mul.w	r3, r1, r3
 800fe78:	4413      	add	r3, r2
 800fe7a:	3308      	adds	r3, #8
 800fe7c:	edd3 6a00 	vldr	s13, [r3]
 800fe80:	4a18      	ldr	r2, [pc, #96]	; (800fee4 <PIDControl+0x254>)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	212c      	movs	r1, #44	; 0x2c
 800fe86:	fb01 f303 	mul.w	r3, r1, r3
 800fe8a:	4413      	add	r3, r2
 800fe8c:	3314      	adds	r3, #20
 800fe8e:	edd3 7a00 	vldr	s15, [r3]
 800fe92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe9a:	ee17 0a90 	vmov	r0, s15
 800fe9e:	f7f8 fa8b 	bl	80083b8 <__aeabi_f2d>
 800fea2:	4603      	mov	r3, r0
 800fea4:	460c      	mov	r4, r1
 800fea6:	ec44 3b10 	vmov	d0, r3, r4
 800feaa:	f005 f96b 	bl	8015184 <round>
 800feae:	ec54 3b10 	vmov	r3, r4, d0
 800feb2:	4618      	mov	r0, r3
 800feb4:	4621      	mov	r1, r4
 800feb6:	f7f8 fd87 	bl	80089c8 <__aeabi_d2iz>
 800feba:	4a0a      	ldr	r2, [pc, #40]	; (800fee4 <PIDControl+0x254>)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	212c      	movs	r1, #44	; 0x2c
 800fec0:	fb01 f303 	mul.w	r3, r1, r3
 800fec4:	4413      	add	r3, r2
 800fec6:	3324      	adds	r3, #36	; 0x24
 800fec8:	6018      	str	r0, [r3, #0]
		return Pid[n].out;
 800feca:	4a06      	ldr	r2, [pc, #24]	; (800fee4 <PIDControl+0x254>)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	212c      	movs	r1, #44	; 0x2c
 800fed0:	fb01 f303 	mul.w	r3, r1, r3
 800fed4:	4413      	add	r3, r2
 800fed6:	3324      	adds	r3, #36	; 0x24
 800fed8:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800feda:	4618      	mov	r0, r3
 800fedc:	3714      	adds	r7, #20
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd90      	pop	{r4, r7, pc}
 800fee2:	bf00      	nop
 800fee4:	2000fd18 	.word	0x2000fd18
 800fee8:	3a83126f 	.word	0x3a83126f
 800feec:	4479ffff 	.word	0x4479ffff

0800fef0 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int mode)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800fef8:	2300      	movs	r3, #0
 800fefa:	60fb      	str	r3, [r7, #12]
 800fefc:	e00e      	b.n	800ff1c <Signal+0x2c>
	{
		ChangeLED(mode);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7ff f8dc 	bl	800f0bc <ChangeLED>
		HAL_Delay(100);
 800ff04:	2064      	movs	r0, #100	; 0x64
 800ff06:	f000 f995 	bl	8010234 <HAL_Delay>
		ChangeLED(0);
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	f7ff f8d6 	bl	800f0bc <ChangeLED>
		HAL_Delay(100);
 800ff10:	2064      	movs	r0, #100	; 0x64
 800ff12:	f000 f98f 	bl	8010234 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	60fb      	str	r3, [r7, #12]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b04      	cmp	r3, #4
 800ff20:	dded      	ble.n	800fefe <Signal+0xe>
	}
}
 800ff22:	bf00      	nop
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
	...

0800ff2c <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b086      	sub	sp, #24
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800ff34:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800ff80 <BatteryCheck+0x54>
 800ff38:	eddf 0a12 	vldr	s1, [pc, #72]	; 800ff84 <BatteryCheck+0x58>
 800ff3c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7ff fa87 	bl	800f454 <ADCToBatteryVoltage>
 800ff46:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800ff4a:	2103      	movs	r1, #3
 800ff4c:	2002      	movs	r0, #2
 800ff4e:	f7ff faab 	bl	800f4a8 <IntegerPower>
 800ff52:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800ff54:	6938      	ldr	r0, [r7, #16]
 800ff56:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800ff88 <BatteryCheck+0x5c>
 800ff5a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800ff8c <BatteryCheck+0x60>
 800ff5e:	ed97 0a05 	vldr	s0, [r7, #20]
 800ff62:	f7ff fabe 	bl	800f4e2 <GetBatteryLevel>
 800ff66:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800ff68:	68f9      	ldr	r1, [r7, #12]
 800ff6a:	4809      	ldr	r0, [pc, #36]	; (800ff90 <BatteryCheck+0x64>)
 800ff6c:	f005 ffd0 	bl	8015f10 <iprintf>
	Signal( battery_level );
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f7ff ffbd 	bl	800fef0 <Signal>
}
 800ff76:	bf00      	nop
 800ff78:	3718      	adds	r7, #24
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	45800000 	.word	0x45800000
 800ff84:	40533333 	.word	0x40533333
 800ff88:	41066666 	.word	0x41066666
 800ff8c:	40e66666 	.word	0x40e66666
 800ff90:	0801a574 	.word	0x0801a574

0800ff94 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af02      	add	r7, sp, #8
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	603a      	str	r2, [r7, #0]
 800ff9e:	71fb      	strb	r3, [r7, #7]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800ffa4:	f7ff f86e 	bl	800f084 <EmitterON>
	ADCStart();
 800ffa8:	f7fe fd6e 	bl	800ea88 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800ffac:	484b      	ldr	r0, [pc, #300]	; (80100dc <ModeSelect+0x148>)
 800ffae:	f003 f828 	bl	8013002 <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800ffb2:	f7ff f847 	bl	800f044 <EncoderStart>
	HAL_Delay(1000);
 800ffb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ffba:	f000 f93b 	bl	8010234 <HAL_Delay>
	//while中で選択
	*pMode=min;
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	79fa      	ldrb	r2, [r7, #7]
 800ffc2:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 800ffc4:	f247 512f 	movw	r1, #29999	; 0x752f
 800ffc8:	4845      	ldr	r0, [pc, #276]	; (80100e0 <ModeSelect+0x14c>)
 800ffca:	f7ff f9cb 	bl	800f364 <InitPulse>

	int ENC3_LEFT;
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800ffce:	e06d      	b.n	80100ac <ModeSelect+0x118>
	{
		printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
 800ffd0:	4b44      	ldr	r3, [pc, #272]	; (80100e4 <ModeSelect+0x150>)
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7f8 f9ef 	bl	80083b8 <__aeabi_f2d>
 800ffda:	460a      	mov	r2, r1
 800ffdc:	4601      	mov	r1, r0
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	460a      	mov	r2, r1
 800ffe6:	4840      	ldr	r0, [pc, #256]	; (80100e8 <ModeSelect+0x154>)
 800ffe8:	f005 ff92 	bl	8015f10 <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ffec:	4b3f      	ldr	r3, [pc, #252]	; (80100ec <ModeSelect+0x158>)
 800ffee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff0:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	ee07 3a90 	vmov	s15, r3
 800fff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fffc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80100f0 <ModeSelect+0x15c>
 8010000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010008:	db21      	blt.n	801004e <ModeSelect+0xba>
		  {
		  	  *pMode += 1;
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	f993 3000 	ldrsb.w	r3, [r3]
 8010010:	b2db      	uxtb	r3, r3
 8010012:	3301      	adds	r3, #1
 8010014:	b2db      	uxtb	r3, r3
 8010016:	b25a      	sxtb	r2, r3
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	f993 3000 	ldrsb.w	r3, [r3]
 8010022:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8010026:	429a      	cmp	r2, r3
 8010028:	da02      	bge.n	8010030 <ModeSelect+0x9c>
		  	  {
		  		  *pMode = min;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	79fa      	ldrb	r2, [r7, #7]
 801002e:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	f993 3000 	ldrsb.w	r3, [r3]
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff f840 	bl	800f0bc <ChangeLED>
		  	  //Motor_Buzzer(440.0f*powf(powf((float)2,(float)1/12),(float)*pMode), 250);
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 801003c:	f247 512f 	movw	r1, #29999	; 0x752f
 8010040:	4827      	ldr	r0, [pc, #156]	; (80100e0 <ModeSelect+0x14c>)
 8010042:	f7ff f98f 	bl	800f364 <InitPulse>
		  	  HAL_Delay(500);
 8010046:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801004a:	f000 f8f3 	bl	8010234 <HAL_Delay>

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	ee07 3a90 	vmov	s15, r3
 8010054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010058:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80100f4 <ModeSelect+0x160>
 801005c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010064:	d900      	bls.n	8010068 <ModeSelect+0xd4>
 8010066:	e021      	b.n	80100ac <ModeSelect+0x118>
		  {
		  	  *pMode -= 1;
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	f993 3000 	ldrsb.w	r3, [r3]
 801006e:	b2db      	uxtb	r3, r3
 8010070:	3b01      	subs	r3, #1
 8010072:	b2db      	uxtb	r3, r3
 8010074:	b25a      	sxtb	r2, r3
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	f993 3000 	ldrsb.w	r3, [r3]
 8010080:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8010084:	429a      	cmp	r2, r3
 8010086:	dd02      	ble.n	801008e <ModeSelect+0xfa>
		  	  {
		  	  		  *pMode = max;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	79ba      	ldrb	r2, [r7, #6]
 801008c:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	f993 3000 	ldrsb.w	r3, [r3]
 8010094:	4618      	mov	r0, r3
 8010096:	f7ff f811 	bl	800f0bc <ChangeLED>
		  	  //Motor_Buzzer(440.0f*powf(powf((float)2,(float)1/12),(float)*pMode), 250);
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE);
 801009a:	f247 512f 	movw	r1, #29999	; 0x752f
 801009e:	4810      	ldr	r0, [pc, #64]	; (80100e0 <ModeSelect+0x14c>)
 80100a0:	f7ff f960 	bl	800f364 <InitPulse>
		  	  HAL_Delay(500);
 80100a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80100a8:	f000 f8c4 	bl	8010234 <HAL_Delay>
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 80100ac:	4b0d      	ldr	r3, [pc, #52]	; (80100e4 <ModeSelect+0x150>)
 80100ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80100b2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80100f8 <ModeSelect+0x164>
 80100b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80100ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100be:	d487      	bmi.n	800ffd0 <ModeSelect+0x3c>
		  }
	}

	EmitterOFF();
 80100c0:	f7fe ffee 	bl	800f0a0 <EmitterOFF>
	ADCStop();
 80100c4:	f7fe fd00 	bl	800eac8 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 80100c8:	4804      	ldr	r0, [pc, #16]	; (80100dc <ModeSelect+0x148>)
 80100ca:	f002 ffbe 	bl	801304a <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 80100ce:	f7fe ffc9 	bl	800f064 <EncoderStop>

	//モード選択後どうするか
}
 80100d2:	bf00      	nop
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	200105a0 	.word	0x200105a0
 80100e0:	40000424 	.word	0x40000424
 80100e4:	2000ff58 	.word	0x2000ff58
 80100e8:	0801a57c 	.word	0x0801a57c
 80100ec:	40000400 	.word	0x40000400
 80100f0:	47352f00 	.word	0x47352f00
 80100f4:	4654bc00 	.word	0x4654bc00
 80100f8:	437a0000 	.word	0x437a0000

080100fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80100fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010134 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010100:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010102:	e003      	b.n	801010c <LoopCopyDataInit>

08010104 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010104:	4b0c      	ldr	r3, [pc, #48]	; (8010138 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010106:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010108:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801010a:	3104      	adds	r1, #4

0801010c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801010c:	480b      	ldr	r0, [pc, #44]	; (801013c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801010e:	4b0c      	ldr	r3, [pc, #48]	; (8010140 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010110:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010112:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010114:	d3f6      	bcc.n	8010104 <CopyDataInit>
  ldr  r2, =_sbss
 8010116:	4a0b      	ldr	r2, [pc, #44]	; (8010144 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010118:	e002      	b.n	8010120 <LoopFillZerobss>

0801011a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801011a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801011c:	f842 3b04 	str.w	r3, [r2], #4

08010120 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010120:	4b09      	ldr	r3, [pc, #36]	; (8010148 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010122:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010124:	d3f9      	bcc.n	801011a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010126:	f7fe fbf5 	bl	800e914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801012a:	f005 f87b 	bl	8015224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801012e:	f7fd fa71 	bl	800d614 <main>
  bx  lr    
 8010132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010134:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010138:	0801a914 	.word	0x0801a914
  ldr  r0, =_sdata
 801013c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010140:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8010144:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8010148:	200108b0 	.word	0x200108b0

0801014c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801014c:	e7fe      	b.n	801014c <ADC_IRQHandler>
	...

08010150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010154:	4b0e      	ldr	r3, [pc, #56]	; (8010190 <HAL_Init+0x40>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a0d      	ldr	r2, [pc, #52]	; (8010190 <HAL_Init+0x40>)
 801015a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801015e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010160:	4b0b      	ldr	r3, [pc, #44]	; (8010190 <HAL_Init+0x40>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a0a      	ldr	r2, [pc, #40]	; (8010190 <HAL_Init+0x40>)
 8010166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801016a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801016c:	4b08      	ldr	r3, [pc, #32]	; (8010190 <HAL_Init+0x40>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a07      	ldr	r2, [pc, #28]	; (8010190 <HAL_Init+0x40>)
 8010172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010178:	2003      	movs	r0, #3
 801017a:	f000 fd8b 	bl	8010c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801017e:	2000      	movs	r0, #0
 8010180:	f000 f808 	bl	8010194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010184:	f7fe f82a 	bl	800e1dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	40023c00 	.word	0x40023c00

08010194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801019c:	4b12      	ldr	r3, [pc, #72]	; (80101e8 <HAL_InitTick+0x54>)
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	4b12      	ldr	r3, [pc, #72]	; (80101ec <HAL_InitTick+0x58>)
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	4619      	mov	r1, r3
 80101a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80101aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80101ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 fda3 	bl	8010cfe <HAL_SYSTICK_Config>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d001      	beq.n	80101c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80101be:	2301      	movs	r3, #1
 80101c0:	e00e      	b.n	80101e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2b0f      	cmp	r3, #15
 80101c6:	d80a      	bhi.n	80101de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80101c8:	2200      	movs	r2, #0
 80101ca:	6879      	ldr	r1, [r7, #4]
 80101cc:	f04f 30ff 	mov.w	r0, #4294967295
 80101d0:	f000 fd6b 	bl	8010caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80101d4:	4a06      	ldr	r2, [pc, #24]	; (80101f0 <HAL_InitTick+0x5c>)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80101da:	2300      	movs	r3, #0
 80101dc:	e000      	b.n	80101e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80101de:	2301      	movs	r3, #1
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	2000001c 	.word	0x2000001c
 80101ec:	20000024 	.word	0x20000024
 80101f0:	20000020 	.word	0x20000020

080101f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80101f4:	b480      	push	{r7}
 80101f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80101f8:	4b06      	ldr	r3, [pc, #24]	; (8010214 <HAL_IncTick+0x20>)
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	461a      	mov	r2, r3
 80101fe:	4b06      	ldr	r3, [pc, #24]	; (8010218 <HAL_IncTick+0x24>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4413      	add	r3, r2
 8010204:	4a04      	ldr	r2, [pc, #16]	; (8010218 <HAL_IncTick+0x24>)
 8010206:	6013      	str	r3, [r2, #0]
}
 8010208:	bf00      	nop
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	20000024 	.word	0x20000024
 8010218:	20010888 	.word	0x20010888

0801021c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801021c:	b480      	push	{r7}
 801021e:	af00      	add	r7, sp, #0
  return uwTick;
 8010220:	4b03      	ldr	r3, [pc, #12]	; (8010230 <HAL_GetTick+0x14>)
 8010222:	681b      	ldr	r3, [r3, #0]
}
 8010224:	4618      	mov	r0, r3
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	20010888 	.word	0x20010888

08010234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801023c:	f7ff ffee 	bl	801021c <HAL_GetTick>
 8010240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024c:	d005      	beq.n	801025a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801024e:	4b09      	ldr	r3, [pc, #36]	; (8010274 <HAL_Delay+0x40>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	461a      	mov	r2, r3
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	4413      	add	r3, r2
 8010258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801025a:	bf00      	nop
 801025c:	f7ff ffde 	bl	801021c <HAL_GetTick>
 8010260:	4602      	mov	r2, r0
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	1ad3      	subs	r3, r2, r3
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	429a      	cmp	r2, r3
 801026a:	d8f7      	bhi.n	801025c <HAL_Delay+0x28>
  {
  }
}
 801026c:	bf00      	nop
 801026e:	3710      	adds	r7, #16
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	20000024 	.word	0x20000024

08010278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010280:	2300      	movs	r3, #0
 8010282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d101      	bne.n	801028e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801028a:	2301      	movs	r3, #1
 801028c:	e033      	b.n	80102f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010292:	2b00      	cmp	r3, #0
 8010294:	d109      	bne.n	80102aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f7fd ffc8 	bl	800e22c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2200      	movs	r2, #0
 80102a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ae:	f003 0310 	and.w	r3, r3, #16
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d118      	bne.n	80102e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80102be:	f023 0302 	bic.w	r3, r3, #2
 80102c2:	f043 0202 	orr.w	r2, r3, #2
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 fa94 	bl	80107f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102da:	f023 0303 	bic.w	r3, r3, #3
 80102de:	f043 0201 	orr.w	r2, r3, #1
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	641a      	str	r2, [r3, #64]	; 0x40
 80102e6:	e001      	b.n	80102ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80102e8:	2301      	movs	r3, #1
 80102ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80102f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
	...

08010300 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801030c:	2300      	movs	r3, #0
 801030e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010316:	2b01      	cmp	r3, #1
 8010318:	d101      	bne.n	801031e <HAL_ADC_Start_DMA+0x1e>
 801031a:	2302      	movs	r3, #2
 801031c:	e0cc      	b.n	80104b8 <HAL_ADC_Start_DMA+0x1b8>
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2201      	movs	r2, #1
 8010322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	f003 0301 	and.w	r3, r3, #1
 8010330:	2b01      	cmp	r3, #1
 8010332:	d018      	beq.n	8010366 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	689a      	ldr	r2, [r3, #8]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	f042 0201 	orr.w	r2, r2, #1
 8010342:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8010344:	4b5e      	ldr	r3, [pc, #376]	; (80104c0 <HAL_ADC_Start_DMA+0x1c0>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4a5e      	ldr	r2, [pc, #376]	; (80104c4 <HAL_ADC_Start_DMA+0x1c4>)
 801034a:	fba2 2303 	umull	r2, r3, r2, r3
 801034e:	0c9a      	lsrs	r2, r3, #18
 8010350:	4613      	mov	r3, r2
 8010352:	005b      	lsls	r3, r3, #1
 8010354:	4413      	add	r3, r2
 8010356:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010358:	e002      	b.n	8010360 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	3b01      	subs	r3, #1
 801035e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d1f9      	bne.n	801035a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	f003 0301 	and.w	r3, r3, #1
 8010370:	2b01      	cmp	r3, #1
 8010372:	f040 80a0 	bne.w	80104b6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801037a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801037e:	f023 0301 	bic.w	r3, r3, #1
 8010382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010394:	2b00      	cmp	r3, #0
 8010396:	d007      	beq.n	80103a8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801039c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80103a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80103b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103b4:	d106      	bne.n	80103c4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103ba:	f023 0206 	bic.w	r2, r3, #6
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	645a      	str	r2, [r3, #68]	; 0x44
 80103c2:	e002      	b.n	80103ca <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80103d2:	4b3d      	ldr	r3, [pc, #244]	; (80104c8 <HAL_ADC_Start_DMA+0x1c8>)
 80103d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103da:	4a3c      	ldr	r2, [pc, #240]	; (80104cc <HAL_ADC_Start_DMA+0x1cc>)
 80103dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e2:	4a3b      	ldr	r2, [pc, #236]	; (80104d0 <HAL_ADC_Start_DMA+0x1d0>)
 80103e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ea:	4a3a      	ldr	r2, [pc, #232]	; (80104d4 <HAL_ADC_Start_DMA+0x1d4>)
 80103ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80103f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	685a      	ldr	r2, [r3, #4]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010406:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	689a      	ldr	r2, [r3, #8]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010416:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	334c      	adds	r3, #76	; 0x4c
 8010422:	4619      	mov	r1, r3
 8010424:	68ba      	ldr	r2, [r7, #8]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f000 fd24 	bl	8010e74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	f003 031f 	and.w	r3, r3, #31
 8010434:	2b00      	cmp	r3, #0
 8010436:	d12a      	bne.n	801048e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a26      	ldr	r2, [pc, #152]	; (80104d8 <HAL_ADC_Start_DMA+0x1d8>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d015      	beq.n	801046e <HAL_ADC_Start_DMA+0x16e>
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	4a25      	ldr	r2, [pc, #148]	; (80104dc <HAL_ADC_Start_DMA+0x1dc>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d105      	bne.n	8010458 <HAL_ADC_Start_DMA+0x158>
 801044c:	4b1e      	ldr	r3, [pc, #120]	; (80104c8 <HAL_ADC_Start_DMA+0x1c8>)
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	f003 031f 	and.w	r3, r3, #31
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00a      	beq.n	801046e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4a20      	ldr	r2, [pc, #128]	; (80104e0 <HAL_ADC_Start_DMA+0x1e0>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d129      	bne.n	80104b6 <HAL_ADC_Start_DMA+0x1b6>
 8010462:	4b19      	ldr	r3, [pc, #100]	; (80104c8 <HAL_ADC_Start_DMA+0x1c8>)
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	f003 031f 	and.w	r3, r3, #31
 801046a:	2b0f      	cmp	r3, #15
 801046c:	d823      	bhi.n	80104b6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	689b      	ldr	r3, [r3, #8]
 8010474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010478:	2b00      	cmp	r3, #0
 801047a:	d11c      	bne.n	80104b6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	689a      	ldr	r2, [r3, #8]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801048a:	609a      	str	r2, [r3, #8]
 801048c:	e013      	b.n	80104b6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4a11      	ldr	r2, [pc, #68]	; (80104d8 <HAL_ADC_Start_DMA+0x1d8>)
 8010494:	4293      	cmp	r3, r2
 8010496:	d10e      	bne.n	80104b6 <HAL_ADC_Start_DMA+0x1b6>
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d107      	bne.n	80104b6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	689a      	ldr	r2, [r3, #8]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80104b4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80104b6:	2300      	movs	r3, #0
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	2000001c 	.word	0x2000001c
 80104c4:	431bde83 	.word	0x431bde83
 80104c8:	40012300 	.word	0x40012300
 80104cc:	080109f1 	.word	0x080109f1
 80104d0:	08010aab 	.word	0x08010aab
 80104d4:	08010ac7 	.word	0x08010ac7
 80104d8:	40012000 	.word	0x40012000
 80104dc:	40012100 	.word	0x40012100
 80104e0:	40012200 	.word	0x40012200

080104e4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80104ec:	2300      	movs	r3, #0
 80104ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d101      	bne.n	80104fe <HAL_ADC_Stop_DMA+0x1a>
 80104fa:	2302      	movs	r3, #2
 80104fc:	e038      	b.n	8010570 <HAL_ADC_Stop_DMA+0x8c>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2201      	movs	r2, #1
 8010502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	689a      	ldr	r2, [r3, #8]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f022 0201 	bic.w	r2, r2, #1
 8010514:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	d120      	bne.n	8010566 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	689a      	ldr	r2, [r3, #8]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010532:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010538:	4618      	mov	r0, r3
 801053a:	f000 fcf3 	bl	8010f24 <HAL_DMA_Abort>
 801053e:	4603      	mov	r3, r0
 8010540:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	685a      	ldr	r2, [r3, #4]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8010550:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010556:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801055a:	f023 0301 	bic.w	r3, r3, #1
 801055e:	f043 0201 	orr.w	r2, r3, #1
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 801056e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3710      	adds	r7, #16
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8010580:	bf00      	nop
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8010594:	bf00      	nop
 8010596:	370c      	adds	r7, #12
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80105a8:	bf00      	nop
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80105be:	2300      	movs	r3, #0
 80105c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d101      	bne.n	80105d0 <HAL_ADC_ConfigChannel+0x1c>
 80105cc:	2302      	movs	r3, #2
 80105ce:	e105      	b.n	80107dc <HAL_ADC_ConfigChannel+0x228>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b09      	cmp	r3, #9
 80105de:	d925      	bls.n	801062c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	68d9      	ldr	r1, [r3, #12]
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	461a      	mov	r2, r3
 80105ee:	4613      	mov	r3, r2
 80105f0:	005b      	lsls	r3, r3, #1
 80105f2:	4413      	add	r3, r2
 80105f4:	3b1e      	subs	r3, #30
 80105f6:	2207      	movs	r2, #7
 80105f8:	fa02 f303 	lsl.w	r3, r2, r3
 80105fc:	43da      	mvns	r2, r3
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	400a      	ands	r2, r1
 8010604:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	68d9      	ldr	r1, [r3, #12]
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	689a      	ldr	r2, [r3, #8]
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	b29b      	uxth	r3, r3
 8010616:	4618      	mov	r0, r3
 8010618:	4603      	mov	r3, r0
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	4403      	add	r3, r0
 801061e:	3b1e      	subs	r3, #30
 8010620:	409a      	lsls	r2, r3
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	430a      	orrs	r2, r1
 8010628:	60da      	str	r2, [r3, #12]
 801062a:	e022      	b.n	8010672 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	6919      	ldr	r1, [r3, #16]
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	b29b      	uxth	r3, r3
 8010638:	461a      	mov	r2, r3
 801063a:	4613      	mov	r3, r2
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	4413      	add	r3, r2
 8010640:	2207      	movs	r2, #7
 8010642:	fa02 f303 	lsl.w	r3, r2, r3
 8010646:	43da      	mvns	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	400a      	ands	r2, r1
 801064e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	6919      	ldr	r1, [r3, #16]
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	689a      	ldr	r2, [r3, #8]
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	b29b      	uxth	r3, r3
 8010660:	4618      	mov	r0, r3
 8010662:	4603      	mov	r3, r0
 8010664:	005b      	lsls	r3, r3, #1
 8010666:	4403      	add	r3, r0
 8010668:	409a      	lsls	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	430a      	orrs	r2, r1
 8010670:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	2b06      	cmp	r3, #6
 8010678:	d824      	bhi.n	80106c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	685a      	ldr	r2, [r3, #4]
 8010684:	4613      	mov	r3, r2
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	4413      	add	r3, r2
 801068a:	3b05      	subs	r3, #5
 801068c:	221f      	movs	r2, #31
 801068e:	fa02 f303 	lsl.w	r3, r2, r3
 8010692:	43da      	mvns	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	400a      	ands	r2, r1
 801069a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	4618      	mov	r0, r3
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	685a      	ldr	r2, [r3, #4]
 80106ae:	4613      	mov	r3, r2
 80106b0:	009b      	lsls	r3, r3, #2
 80106b2:	4413      	add	r3, r2
 80106b4:	3b05      	subs	r3, #5
 80106b6:	fa00 f203 	lsl.w	r2, r0, r3
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	430a      	orrs	r2, r1
 80106c0:	635a      	str	r2, [r3, #52]	; 0x34
 80106c2:	e04c      	b.n	801075e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	2b0c      	cmp	r3, #12
 80106ca:	d824      	bhi.n	8010716 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	4613      	mov	r3, r2
 80106d8:	009b      	lsls	r3, r3, #2
 80106da:	4413      	add	r3, r2
 80106dc:	3b23      	subs	r3, #35	; 0x23
 80106de:	221f      	movs	r2, #31
 80106e0:	fa02 f303 	lsl.w	r3, r2, r3
 80106e4:	43da      	mvns	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	400a      	ands	r2, r1
 80106ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	4618      	mov	r0, r3
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	4613      	mov	r3, r2
 8010702:	009b      	lsls	r3, r3, #2
 8010704:	4413      	add	r3, r2
 8010706:	3b23      	subs	r3, #35	; 0x23
 8010708:	fa00 f203 	lsl.w	r2, r0, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	430a      	orrs	r2, r1
 8010712:	631a      	str	r2, [r3, #48]	; 0x30
 8010714:	e023      	b.n	801075e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	685a      	ldr	r2, [r3, #4]
 8010720:	4613      	mov	r3, r2
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	4413      	add	r3, r2
 8010726:	3b41      	subs	r3, #65	; 0x41
 8010728:	221f      	movs	r2, #31
 801072a:	fa02 f303 	lsl.w	r3, r2, r3
 801072e:	43da      	mvns	r2, r3
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	400a      	ands	r2, r1
 8010736:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	b29b      	uxth	r3, r3
 8010744:	4618      	mov	r0, r3
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	685a      	ldr	r2, [r3, #4]
 801074a:	4613      	mov	r3, r2
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	4413      	add	r3, r2
 8010750:	3b41      	subs	r3, #65	; 0x41
 8010752:	fa00 f203 	lsl.w	r2, r0, r3
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	430a      	orrs	r2, r1
 801075c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801075e:	4b22      	ldr	r3, [pc, #136]	; (80107e8 <HAL_ADC_ConfigChannel+0x234>)
 8010760:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4a21      	ldr	r2, [pc, #132]	; (80107ec <HAL_ADC_ConfigChannel+0x238>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d109      	bne.n	8010780 <HAL_ADC_ConfigChannel+0x1cc>
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2b12      	cmp	r3, #18
 8010772:	d105      	bne.n	8010780 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a19      	ldr	r2, [pc, #100]	; (80107ec <HAL_ADC_ConfigChannel+0x238>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d123      	bne.n	80107d2 <HAL_ADC_ConfigChannel+0x21e>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b10      	cmp	r3, #16
 8010790:	d003      	beq.n	801079a <HAL_ADC_ConfigChannel+0x1e6>
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b11      	cmp	r3, #17
 8010798:	d11b      	bne.n	80107d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2b10      	cmp	r3, #16
 80107ac:	d111      	bne.n	80107d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80107ae:	4b10      	ldr	r3, [pc, #64]	; (80107f0 <HAL_ADC_ConfigChannel+0x23c>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4a10      	ldr	r2, [pc, #64]	; (80107f4 <HAL_ADC_ConfigChannel+0x240>)
 80107b4:	fba2 2303 	umull	r2, r3, r2, r3
 80107b8:	0c9a      	lsrs	r2, r3, #18
 80107ba:	4613      	mov	r3, r2
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4413      	add	r3, r2
 80107c0:	005b      	lsls	r3, r3, #1
 80107c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80107c4:	e002      	b.n	80107cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d1f9      	bne.n	80107c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80107da:	2300      	movs	r3, #0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3714      	adds	r7, #20
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr
 80107e8:	40012300 	.word	0x40012300
 80107ec:	40012000 	.word	0x40012000
 80107f0:	2000001c 	.word	0x2000001c
 80107f4:	431bde83 	.word	0x431bde83

080107f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010800:	4b79      	ldr	r3, [pc, #484]	; (80109e8 <ADC_Init+0x1f0>)
 8010802:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	685a      	ldr	r2, [r3, #4]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	431a      	orrs	r2, r3
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	685a      	ldr	r2, [r3, #4]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801082c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	6859      	ldr	r1, [r3, #4]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	691b      	ldr	r3, [r3, #16]
 8010838:	021a      	lsls	r2, r3, #8
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	430a      	orrs	r2, r1
 8010840:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	685a      	ldr	r2, [r3, #4]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	6859      	ldr	r1, [r3, #4]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	689a      	ldr	r2, [r3, #8]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	430a      	orrs	r2, r1
 8010862:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	689a      	ldr	r2, [r3, #8]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6899      	ldr	r1, [r3, #8]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	68da      	ldr	r2, [r3, #12]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	430a      	orrs	r2, r1
 8010884:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801088a:	4a58      	ldr	r2, [pc, #352]	; (80109ec <ADC_Init+0x1f4>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d022      	beq.n	80108d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	689a      	ldr	r2, [r3, #8]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801089e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	6899      	ldr	r1, [r3, #8]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	430a      	orrs	r2, r1
 80108b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	689a      	ldr	r2, [r3, #8]
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80108c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	6899      	ldr	r1, [r3, #8]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	430a      	orrs	r2, r1
 80108d2:	609a      	str	r2, [r3, #8]
 80108d4:	e00f      	b.n	80108f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	689a      	ldr	r2, [r3, #8]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80108e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	689a      	ldr	r2, [r3, #8]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80108f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	689a      	ldr	r2, [r3, #8]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f022 0202 	bic.w	r2, r2, #2
 8010904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	6899      	ldr	r1, [r3, #8]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	7e1b      	ldrb	r3, [r3, #24]
 8010910:	005a      	lsls	r2, r3, #1
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	430a      	orrs	r2, r1
 8010918:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d01b      	beq.n	801095c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	685a      	ldr	r2, [r3, #4]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010932:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	685a      	ldr	r2, [r3, #4]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010942:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	6859      	ldr	r1, [r3, #4]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801094e:	3b01      	subs	r3, #1
 8010950:	035a      	lsls	r2, r3, #13
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	430a      	orrs	r2, r1
 8010958:	605a      	str	r2, [r3, #4]
 801095a:	e007      	b.n	801096c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	685a      	ldr	r2, [r3, #4]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801096a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801097a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	69db      	ldr	r3, [r3, #28]
 8010986:	3b01      	subs	r3, #1
 8010988:	051a      	lsls	r2, r3, #20
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	430a      	orrs	r2, r1
 8010990:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	689a      	ldr	r2, [r3, #8]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80109a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	6899      	ldr	r1, [r3, #8]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109ae:	025a      	lsls	r2, r3, #9
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	430a      	orrs	r2, r1
 80109b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	689a      	ldr	r2, [r3, #8]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	6899      	ldr	r1, [r3, #8]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	695b      	ldr	r3, [r3, #20]
 80109d2:	029a      	lsls	r2, r3, #10
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	430a      	orrs	r2, r1
 80109da:	609a      	str	r2, [r3, #8]
}
 80109dc:	bf00      	nop
 80109de:	3714      	adds	r7, #20
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr
 80109e8:	40012300 	.word	0x40012300
 80109ec:	0f000001 	.word	0x0f000001

080109f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d13c      	bne.n	8010a84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d12b      	bne.n	8010a7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d127      	bne.n	8010a7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d006      	beq.n	8010a48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	689b      	ldr	r3, [r3, #8]
 8010a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d119      	bne.n	8010a7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	685a      	ldr	r2, [r3, #4]
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f022 0220 	bic.w	r2, r2, #32
 8010a56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d105      	bne.n	8010a7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a74:	f043 0201 	orr.w	r2, r3, #1
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f7ff fd7b 	bl	8010578 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010a82:	e00e      	b.n	8010aa2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a88:	f003 0310 	and.w	r3, r3, #16
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d003      	beq.n	8010a98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f7ff fd85 	bl	80105a0 <HAL_ADC_ErrorCallback>
}
 8010a96:	e004      	b.n	8010aa2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	4798      	blx	r3
}
 8010aa2:	bf00      	nop
 8010aa4:	3710      	adds	r7, #16
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b084      	sub	sp, #16
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f7ff fd67 	bl	801058c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010abe:	bf00      	nop
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b084      	sub	sp, #16
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2240      	movs	r2, #64	; 0x40
 8010ad8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ade:	f043 0204 	orr.w	r2, r3, #4
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010ae6:	68f8      	ldr	r0, [r7, #12]
 8010ae8:	f7ff fd5a 	bl	80105a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010aec:	bf00      	nop
 8010aee:	3710      	adds	r7, #16
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f003 0307 	and.w	r3, r3, #7
 8010b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010b04:	4b0c      	ldr	r3, [pc, #48]	; (8010b38 <__NVIC_SetPriorityGrouping+0x44>)
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b0a:	68ba      	ldr	r2, [r7, #8]
 8010b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010b10:	4013      	ands	r3, r2
 8010b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010b26:	4a04      	ldr	r2, [pc, #16]	; (8010b38 <__NVIC_SetPriorityGrouping+0x44>)
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	60d3      	str	r3, [r2, #12]
}
 8010b2c:	bf00      	nop
 8010b2e:	3714      	adds	r7, #20
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr
 8010b38:	e000ed00 	.word	0xe000ed00

08010b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010b40:	4b04      	ldr	r3, [pc, #16]	; (8010b54 <__NVIC_GetPriorityGrouping+0x18>)
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	0a1b      	lsrs	r3, r3, #8
 8010b46:	f003 0307 	and.w	r3, r3, #7
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	e000ed00 	.word	0xe000ed00

08010b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	4603      	mov	r3, r0
 8010b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	db0b      	blt.n	8010b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b6a:	79fb      	ldrb	r3, [r7, #7]
 8010b6c:	f003 021f 	and.w	r2, r3, #31
 8010b70:	4907      	ldr	r1, [pc, #28]	; (8010b90 <__NVIC_EnableIRQ+0x38>)
 8010b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b76:	095b      	lsrs	r3, r3, #5
 8010b78:	2001      	movs	r0, #1
 8010b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8010b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010b82:	bf00      	nop
 8010b84:	370c      	adds	r7, #12
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	e000e100 	.word	0xe000e100

08010b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	6039      	str	r1, [r7, #0]
 8010b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	db0a      	blt.n	8010bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	b2da      	uxtb	r2, r3
 8010bac:	490c      	ldr	r1, [pc, #48]	; (8010be0 <__NVIC_SetPriority+0x4c>)
 8010bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bb2:	0112      	lsls	r2, r2, #4
 8010bb4:	b2d2      	uxtb	r2, r2
 8010bb6:	440b      	add	r3, r1
 8010bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010bbc:	e00a      	b.n	8010bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	b2da      	uxtb	r2, r3
 8010bc2:	4908      	ldr	r1, [pc, #32]	; (8010be4 <__NVIC_SetPriority+0x50>)
 8010bc4:	79fb      	ldrb	r3, [r7, #7]
 8010bc6:	f003 030f 	and.w	r3, r3, #15
 8010bca:	3b04      	subs	r3, #4
 8010bcc:	0112      	lsls	r2, r2, #4
 8010bce:	b2d2      	uxtb	r2, r2
 8010bd0:	440b      	add	r3, r1
 8010bd2:	761a      	strb	r2, [r3, #24]
}
 8010bd4:	bf00      	nop
 8010bd6:	370c      	adds	r7, #12
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr
 8010be0:	e000e100 	.word	0xe000e100
 8010be4:	e000ed00 	.word	0xe000ed00

08010be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b089      	sub	sp, #36	; 0x24
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	60b9      	str	r1, [r7, #8]
 8010bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f003 0307 	and.w	r3, r3, #7
 8010bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	f1c3 0307 	rsb	r3, r3, #7
 8010c02:	2b04      	cmp	r3, #4
 8010c04:	bf28      	it	cs
 8010c06:	2304      	movcs	r3, #4
 8010c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	2b06      	cmp	r3, #6
 8010c10:	d902      	bls.n	8010c18 <NVIC_EncodePriority+0x30>
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	3b03      	subs	r3, #3
 8010c16:	e000      	b.n	8010c1a <NVIC_EncodePriority+0x32>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	fa02 f303 	lsl.w	r3, r2, r3
 8010c26:	43da      	mvns	r2, r3
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	401a      	ands	r2, r3
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010c30:	f04f 31ff 	mov.w	r1, #4294967295
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	fa01 f303 	lsl.w	r3, r1, r3
 8010c3a:	43d9      	mvns	r1, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c40:	4313      	orrs	r3, r2
         );
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3724      	adds	r7, #36	; 0x24
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
	...

08010c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010c60:	d301      	bcc.n	8010c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010c62:	2301      	movs	r3, #1
 8010c64:	e00f      	b.n	8010c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c66:	4a0a      	ldr	r2, [pc, #40]	; (8010c90 <SysTick_Config+0x40>)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010c6e:	210f      	movs	r1, #15
 8010c70:	f04f 30ff 	mov.w	r0, #4294967295
 8010c74:	f7ff ff8e 	bl	8010b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c78:	4b05      	ldr	r3, [pc, #20]	; (8010c90 <SysTick_Config+0x40>)
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c7e:	4b04      	ldr	r3, [pc, #16]	; (8010c90 <SysTick_Config+0x40>)
 8010c80:	2207      	movs	r2, #7
 8010c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3708      	adds	r7, #8
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	e000e010 	.word	0xe000e010

08010c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7ff ff29 	bl	8010af4 <__NVIC_SetPriorityGrouping>
}
 8010ca2:	bf00      	nop
 8010ca4:	3708      	adds	r7, #8
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}

08010caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010caa:	b580      	push	{r7, lr}
 8010cac:	b086      	sub	sp, #24
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	607a      	str	r2, [r7, #4]
 8010cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010cbc:	f7ff ff3e 	bl	8010b3c <__NVIC_GetPriorityGrouping>
 8010cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	68b9      	ldr	r1, [r7, #8]
 8010cc6:	6978      	ldr	r0, [r7, #20]
 8010cc8:	f7ff ff8e 	bl	8010be8 <NVIC_EncodePriority>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cd2:	4611      	mov	r1, r2
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7ff ff5d 	bl	8010b94 <__NVIC_SetPriority>
}
 8010cda:	bf00      	nop
 8010cdc:	3718      	adds	r7, #24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}

08010ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010ce2:	b580      	push	{r7, lr}
 8010ce4:	b082      	sub	sp, #8
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	4603      	mov	r3, r0
 8010cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7ff ff31 	bl	8010b58 <__NVIC_EnableIRQ>
}
 8010cf6:	bf00      	nop
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}

08010cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010cfe:	b580      	push	{r7, lr}
 8010d00:	b082      	sub	sp, #8
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f7ff ffa2 	bl	8010c50 <SysTick_Config>
 8010d0c:	4603      	mov	r3, r0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
	...

08010d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b086      	sub	sp, #24
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8010d20:	2300      	movs	r3, #0
 8010d22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010d24:	f7ff fa7a 	bl	801021c <HAL_GetTick>
 8010d28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d101      	bne.n	8010d34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010d30:	2301      	movs	r3, #1
 8010d32:	e099      	b.n	8010e68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2200      	movs	r2, #0
 8010d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2202      	movs	r2, #2
 8010d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f022 0201 	bic.w	r2, r2, #1
 8010d52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010d54:	e00f      	b.n	8010d76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010d56:	f7ff fa61 	bl	801021c <HAL_GetTick>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	1ad3      	subs	r3, r2, r3
 8010d60:	2b05      	cmp	r3, #5
 8010d62:	d908      	bls.n	8010d76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2220      	movs	r2, #32
 8010d68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2203      	movs	r2, #3
 8010d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8010d72:	2303      	movs	r3, #3
 8010d74:	e078      	b.n	8010e68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f003 0301 	and.w	r3, r3, #1
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d1e8      	bne.n	8010d56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010d8c:	697a      	ldr	r2, [r7, #20]
 8010d8e:	4b38      	ldr	r3, [pc, #224]	; (8010e70 <HAL_DMA_Init+0x158>)
 8010d90:	4013      	ands	r3, r2
 8010d92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	685a      	ldr	r2, [r3, #4]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	689b      	ldr	r3, [r3, #8]
 8010d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	691b      	ldr	r3, [r3, #16]
 8010da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	699b      	ldr	r3, [r3, #24]
 8010db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6a1b      	ldr	r3, [r3, #32]
 8010dc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010dc2:	697a      	ldr	r2, [r7, #20]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dcc:	2b04      	cmp	r3, #4
 8010dce:	d107      	bne.n	8010de0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dd8:	4313      	orrs	r3, r2
 8010dda:	697a      	ldr	r2, [r7, #20]
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	697a      	ldr	r2, [r7, #20]
 8010de6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	695b      	ldr	r3, [r3, #20]
 8010dee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	f023 0307 	bic.w	r3, r3, #7
 8010df6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dfc:	697a      	ldr	r2, [r7, #20]
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e06:	2b04      	cmp	r3, #4
 8010e08:	d117      	bne.n	8010e3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e0e:	697a      	ldr	r2, [r7, #20]
 8010e10:	4313      	orrs	r3, r2
 8010e12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00e      	beq.n	8010e3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f000 fadf 	bl	80113e0 <DMA_CheckFifoParam>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d008      	beq.n	8010e3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2240      	movs	r2, #64	; 0x40
 8010e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2201      	movs	r2, #1
 8010e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010e36:	2301      	movs	r3, #1
 8010e38:	e016      	b.n	8010e68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	697a      	ldr	r2, [r7, #20]
 8010e40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 fa96 	bl	8011374 <DMA_CalcBaseAndBitshift>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e50:	223f      	movs	r2, #63	; 0x3f
 8010e52:	409a      	lsls	r2, r3
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2201      	movs	r2, #1
 8010e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8010e66:	2300      	movs	r3, #0
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3718      	adds	r7, #24
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	f010803f 	.word	0xf010803f

08010e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
 8010e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010e82:	2300      	movs	r3, #0
 8010e84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d101      	bne.n	8010e9a <HAL_DMA_Start_IT+0x26>
 8010e96:	2302      	movs	r3, #2
 8010e98:	e040      	b.n	8010f1c <HAL_DMA_Start_IT+0xa8>
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010ea8:	b2db      	uxtb	r3, r3
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d12f      	bne.n	8010f0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2202      	movs	r2, #2
 8010eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	68b9      	ldr	r1, [r7, #8]
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f000 fa28 	bl	8011318 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ecc:	223f      	movs	r2, #63	; 0x3f
 8010ece:	409a      	lsls	r2, r3
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f042 0216 	orr.w	r2, r2, #22
 8010ee2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d007      	beq.n	8010efc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f042 0208 	orr.w	r2, r2, #8
 8010efa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f042 0201 	orr.w	r2, r2, #1
 8010f0a:	601a      	str	r2, [r3, #0]
 8010f0c:	e005      	b.n	8010f1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2200      	movs	r2, #0
 8010f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8010f16:	2302      	movs	r3, #2
 8010f18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8010f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3718      	adds	r7, #24
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8010f32:	f7ff f973 	bl	801021c <HAL_GetTick>
 8010f36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	2b02      	cmp	r3, #2
 8010f42:	d008      	beq.n	8010f56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2280      	movs	r2, #128	; 0x80
 8010f48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8010f52:	2301      	movs	r3, #1
 8010f54:	e052      	b.n	8010ffc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f022 0216 	bic.w	r2, r2, #22
 8010f64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	695a      	ldr	r2, [r3, #20]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d103      	bne.n	8010f86 <HAL_DMA_Abort+0x62>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d007      	beq.n	8010f96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f022 0208 	bic.w	r2, r2, #8
 8010f94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f022 0201 	bic.w	r2, r2, #1
 8010fa4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010fa6:	e013      	b.n	8010fd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010fa8:	f7ff f938 	bl	801021c <HAL_GetTick>
 8010fac:	4602      	mov	r2, r0
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	1ad3      	subs	r3, r2, r3
 8010fb2:	2b05      	cmp	r3, #5
 8010fb4:	d90c      	bls.n	8010fd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2220      	movs	r2, #32
 8010fba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2203      	movs	r2, #3
 8010fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8010fcc:	2303      	movs	r3, #3
 8010fce:	e015      	b.n	8010ffc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f003 0301 	and.w	r3, r3, #1
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1e4      	bne.n	8010fa8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fe2:	223f      	movs	r2, #63	; 0x3f
 8010fe4:	409a      	lsls	r2, r3
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2200      	movs	r2, #0
 8010fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b086      	sub	sp, #24
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801100c:	2300      	movs	r3, #0
 801100e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011010:	4b92      	ldr	r3, [pc, #584]	; (801125c <HAL_DMA_IRQHandler+0x258>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4a92      	ldr	r2, [pc, #584]	; (8011260 <HAL_DMA_IRQHandler+0x25c>)
 8011016:	fba2 2303 	umull	r2, r3, r2, r3
 801101a:	0a9b      	lsrs	r3, r3, #10
 801101c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011022:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801102e:	2208      	movs	r2, #8
 8011030:	409a      	lsls	r2, r3
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	4013      	ands	r3, r2
 8011036:	2b00      	cmp	r3, #0
 8011038:	d01a      	beq.n	8011070 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f003 0304 	and.w	r3, r3, #4
 8011044:	2b00      	cmp	r3, #0
 8011046:	d013      	beq.n	8011070 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f022 0204 	bic.w	r2, r2, #4
 8011056:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801105c:	2208      	movs	r2, #8
 801105e:	409a      	lsls	r2, r3
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011068:	f043 0201 	orr.w	r2, r3, #1
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011074:	2201      	movs	r2, #1
 8011076:	409a      	lsls	r2, r3
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	4013      	ands	r3, r2
 801107c:	2b00      	cmp	r3, #0
 801107e:	d012      	beq.n	80110a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	695b      	ldr	r3, [r3, #20]
 8011086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801108a:	2b00      	cmp	r3, #0
 801108c:	d00b      	beq.n	80110a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011092:	2201      	movs	r2, #1
 8011094:	409a      	lsls	r2, r3
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801109e:	f043 0202 	orr.w	r2, r3, #2
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110aa:	2204      	movs	r2, #4
 80110ac:	409a      	lsls	r2, r3
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	4013      	ands	r3, r2
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d012      	beq.n	80110dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f003 0302 	and.w	r3, r3, #2
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00b      	beq.n	80110dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110c8:	2204      	movs	r2, #4
 80110ca:	409a      	lsls	r2, r3
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110d4:	f043 0204 	orr.w	r2, r3, #4
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110e0:	2210      	movs	r2, #16
 80110e2:	409a      	lsls	r2, r3
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	4013      	ands	r3, r2
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d043      	beq.n	8011174 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	f003 0308 	and.w	r3, r3, #8
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d03c      	beq.n	8011174 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110fe:	2210      	movs	r2, #16
 8011100:	409a      	lsls	r2, r3
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011110:	2b00      	cmp	r3, #0
 8011112:	d018      	beq.n	8011146 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801111e:	2b00      	cmp	r3, #0
 8011120:	d108      	bne.n	8011134 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011126:	2b00      	cmp	r3, #0
 8011128:	d024      	beq.n	8011174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	4798      	blx	r3
 8011132:	e01f      	b.n	8011174 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011138:	2b00      	cmp	r3, #0
 801113a:	d01b      	beq.n	8011174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	4798      	blx	r3
 8011144:	e016      	b.n	8011174 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011150:	2b00      	cmp	r3, #0
 8011152:	d107      	bne.n	8011164 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f022 0208 	bic.w	r2, r2, #8
 8011162:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011168:	2b00      	cmp	r3, #0
 801116a:	d003      	beq.n	8011174 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011178:	2220      	movs	r2, #32
 801117a:	409a      	lsls	r2, r3
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	4013      	ands	r3, r2
 8011180:	2b00      	cmp	r3, #0
 8011182:	f000 808e 	beq.w	80112a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f003 0310 	and.w	r3, r3, #16
 8011190:	2b00      	cmp	r3, #0
 8011192:	f000 8086 	beq.w	80112a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801119a:	2220      	movs	r2, #32
 801119c:	409a      	lsls	r2, r3
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	2b05      	cmp	r3, #5
 80111ac:	d136      	bne.n	801121c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f022 0216 	bic.w	r2, r2, #22
 80111bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	695a      	ldr	r2, [r3, #20]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80111cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d103      	bne.n	80111de <HAL_DMA_IRQHandler+0x1da>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d007      	beq.n	80111ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f022 0208 	bic.w	r2, r2, #8
 80111ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111f2:	223f      	movs	r2, #63	; 0x3f
 80111f4:	409a      	lsls	r2, r3
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2200      	movs	r2, #0
 80111fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2201      	movs	r2, #1
 8011206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801120e:	2b00      	cmp	r3, #0
 8011210:	d07d      	beq.n	801130e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	4798      	blx	r3
        }
        return;
 801121a:	e078      	b.n	801130e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011226:	2b00      	cmp	r3, #0
 8011228:	d01c      	beq.n	8011264 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011234:	2b00      	cmp	r3, #0
 8011236:	d108      	bne.n	801124a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801123c:	2b00      	cmp	r3, #0
 801123e:	d030      	beq.n	80112a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	4798      	blx	r3
 8011248:	e02b      	b.n	80112a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801124e:	2b00      	cmp	r3, #0
 8011250:	d027      	beq.n	80112a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	4798      	blx	r3
 801125a:	e022      	b.n	80112a2 <HAL_DMA_IRQHandler+0x29e>
 801125c:	2000001c 	.word	0x2000001c
 8011260:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801126e:	2b00      	cmp	r3, #0
 8011270:	d10f      	bne.n	8011292 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f022 0210 	bic.w	r2, r2, #16
 8011280:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2200      	movs	r2, #0
 8011286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2201      	movs	r2, #1
 801128e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011296:	2b00      	cmp	r3, #0
 8011298:	d003      	beq.n	80112a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d032      	beq.n	8011310 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112ae:	f003 0301 	and.w	r3, r3, #1
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d022      	beq.n	80112fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2205      	movs	r2, #5
 80112ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f022 0201 	bic.w	r2, r2, #1
 80112cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	3301      	adds	r3, #1
 80112d2:	60bb      	str	r3, [r7, #8]
 80112d4:	697a      	ldr	r2, [r7, #20]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d307      	bcc.n	80112ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f003 0301 	and.w	r3, r3, #1
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d1f2      	bne.n	80112ce <HAL_DMA_IRQHandler+0x2ca>
 80112e8:	e000      	b.n	80112ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80112ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2200      	movs	r2, #0
 80112f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2201      	movs	r2, #1
 80112f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011300:	2b00      	cmp	r3, #0
 8011302:	d005      	beq.n	8011310 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	4798      	blx	r3
 801130c:	e000      	b.n	8011310 <HAL_DMA_IRQHandler+0x30c>
        return;
 801130e:	bf00      	nop
    }
  }
}
 8011310:	3718      	adds	r7, #24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop

08011318 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011318:	b480      	push	{r7}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	60b9      	str	r1, [r7, #8]
 8011322:	607a      	str	r2, [r7, #4]
 8011324:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011334:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	683a      	ldr	r2, [r7, #0]
 801133c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	689b      	ldr	r3, [r3, #8]
 8011342:	2b40      	cmp	r3, #64	; 0x40
 8011344:	d108      	bne.n	8011358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	687a      	ldr	r2, [r7, #4]
 801134c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	68ba      	ldr	r2, [r7, #8]
 8011354:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011356:	e007      	b.n	8011368 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	68ba      	ldr	r2, [r7, #8]
 801135e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	60da      	str	r2, [r3, #12]
}
 8011368:	bf00      	nop
 801136a:	3714      	adds	r7, #20
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011374:	b480      	push	{r7}
 8011376:	b085      	sub	sp, #20
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	b2db      	uxtb	r3, r3
 8011382:	3b10      	subs	r3, #16
 8011384:	4a14      	ldr	r2, [pc, #80]	; (80113d8 <DMA_CalcBaseAndBitshift+0x64>)
 8011386:	fba2 2303 	umull	r2, r3, r2, r3
 801138a:	091b      	lsrs	r3, r3, #4
 801138c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801138e:	4a13      	ldr	r2, [pc, #76]	; (80113dc <DMA_CalcBaseAndBitshift+0x68>)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	4413      	add	r3, r2
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	461a      	mov	r2, r3
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b03      	cmp	r3, #3
 80113a0:	d909      	bls.n	80113b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80113aa:	f023 0303 	bic.w	r3, r3, #3
 80113ae:	1d1a      	adds	r2, r3, #4
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	659a      	str	r2, [r3, #88]	; 0x58
 80113b4:	e007      	b.n	80113c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80113be:	f023 0303 	bic.w	r3, r3, #3
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3714      	adds	r7, #20
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop
 80113d8:	aaaaaaab 	.word	0xaaaaaaab
 80113dc:	0801a5c4 	.word	0x0801a5c4

080113e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b085      	sub	sp, #20
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	699b      	ldr	r3, [r3, #24]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d11f      	bne.n	801143a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	2b03      	cmp	r3, #3
 80113fe:	d855      	bhi.n	80114ac <DMA_CheckFifoParam+0xcc>
 8011400:	a201      	add	r2, pc, #4	; (adr r2, 8011408 <DMA_CheckFifoParam+0x28>)
 8011402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011406:	bf00      	nop
 8011408:	08011419 	.word	0x08011419
 801140c:	0801142b 	.word	0x0801142b
 8011410:	08011419 	.word	0x08011419
 8011414:	080114ad 	.word	0x080114ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801141c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011420:	2b00      	cmp	r3, #0
 8011422:	d045      	beq.n	80114b0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8011424:	2301      	movs	r3, #1
 8011426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011428:	e042      	b.n	80114b0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011432:	d13f      	bne.n	80114b4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8011434:	2301      	movs	r3, #1
 8011436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011438:	e03c      	b.n	80114b4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	699b      	ldr	r3, [r3, #24]
 801143e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011442:	d121      	bne.n	8011488 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	2b03      	cmp	r3, #3
 8011448:	d836      	bhi.n	80114b8 <DMA_CheckFifoParam+0xd8>
 801144a:	a201      	add	r2, pc, #4	; (adr r2, 8011450 <DMA_CheckFifoParam+0x70>)
 801144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011450:	08011461 	.word	0x08011461
 8011454:	08011467 	.word	0x08011467
 8011458:	08011461 	.word	0x08011461
 801145c:	08011479 	.word	0x08011479
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011460:	2301      	movs	r3, #1
 8011462:	73fb      	strb	r3, [r7, #15]
      break;
 8011464:	e02f      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801146e:	2b00      	cmp	r3, #0
 8011470:	d024      	beq.n	80114bc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8011472:	2301      	movs	r3, #1
 8011474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011476:	e021      	b.n	80114bc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801147c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011480:	d11e      	bne.n	80114c0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8011482:	2301      	movs	r3, #1
 8011484:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011486:	e01b      	b.n	80114c0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	2b02      	cmp	r3, #2
 801148c:	d902      	bls.n	8011494 <DMA_CheckFifoParam+0xb4>
 801148e:	2b03      	cmp	r3, #3
 8011490:	d003      	beq.n	801149a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011492:	e018      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8011494:	2301      	movs	r3, #1
 8011496:	73fb      	strb	r3, [r7, #15]
      break;
 8011498:	e015      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d00e      	beq.n	80114c4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80114a6:	2301      	movs	r3, #1
 80114a8:	73fb      	strb	r3, [r7, #15]
      break;
 80114aa:	e00b      	b.n	80114c4 <DMA_CheckFifoParam+0xe4>
      break;
 80114ac:	bf00      	nop
 80114ae:	e00a      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
      break;
 80114b0:	bf00      	nop
 80114b2:	e008      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
      break;
 80114b4:	bf00      	nop
 80114b6:	e006      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
      break;
 80114b8:	bf00      	nop
 80114ba:	e004      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
      break;
 80114bc:	bf00      	nop
 80114be:	e002      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
      break;   
 80114c0:	bf00      	nop
 80114c2:	e000      	b.n	80114c6 <DMA_CheckFifoParam+0xe6>
      break;
 80114c4:	bf00      	nop
    }
  } 
  
  return status; 
 80114c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3714      	adds	r7, #20
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr

080114d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80114da:	2300      	movs	r3, #0
 80114dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80114de:	4b0b      	ldr	r3, [pc, #44]	; (801150c <HAL_FLASH_Unlock+0x38>)
 80114e0:	691b      	ldr	r3, [r3, #16]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	da0b      	bge.n	80114fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80114e6:	4b09      	ldr	r3, [pc, #36]	; (801150c <HAL_FLASH_Unlock+0x38>)
 80114e8:	4a09      	ldr	r2, [pc, #36]	; (8011510 <HAL_FLASH_Unlock+0x3c>)
 80114ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80114ec:	4b07      	ldr	r3, [pc, #28]	; (801150c <HAL_FLASH_Unlock+0x38>)
 80114ee:	4a09      	ldr	r2, [pc, #36]	; (8011514 <HAL_FLASH_Unlock+0x40>)
 80114f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80114f2:	4b06      	ldr	r3, [pc, #24]	; (801150c <HAL_FLASH_Unlock+0x38>)
 80114f4:	691b      	ldr	r3, [r3, #16]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	da01      	bge.n	80114fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80114fe:	79fb      	ldrb	r3, [r7, #7]
}
 8011500:	4618      	mov	r0, r3
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	40023c00 	.word	0x40023c00
 8011510:	45670123 	.word	0x45670123
 8011514:	cdef89ab 	.word	0xcdef89ab

08011518 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8011518:	b480      	push	{r7}
 801151a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801151c:	4b05      	ldr	r3, [pc, #20]	; (8011534 <HAL_FLASH_Lock+0x1c>)
 801151e:	691b      	ldr	r3, [r3, #16]
 8011520:	4a04      	ldr	r2, [pc, #16]	; (8011534 <HAL_FLASH_Lock+0x1c>)
 8011522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011526:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8011528:	2300      	movs	r3, #0
}
 801152a:	4618      	mov	r0, r3
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr
 8011534:	40023c00 	.word	0x40023c00

08011538 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011540:	2300      	movs	r3, #0
 8011542:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011544:	4b1a      	ldr	r3, [pc, #104]	; (80115b0 <FLASH_WaitForLastOperation+0x78>)
 8011546:	2200      	movs	r2, #0
 8011548:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801154a:	f7fe fe67 	bl	801021c <HAL_GetTick>
 801154e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011550:	e010      	b.n	8011574 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011558:	d00c      	beq.n	8011574 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d007      	beq.n	8011570 <FLASH_WaitForLastOperation+0x38>
 8011560:	f7fe fe5c 	bl	801021c <HAL_GetTick>
 8011564:	4602      	mov	r2, r0
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	429a      	cmp	r2, r3
 801156e:	d201      	bcs.n	8011574 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011570:	2303      	movs	r3, #3
 8011572:	e019      	b.n	80115a8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011574:	4b0f      	ldr	r3, [pc, #60]	; (80115b4 <FLASH_WaitForLastOperation+0x7c>)
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801157c:	2b00      	cmp	r3, #0
 801157e:	d1e8      	bne.n	8011552 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011580:	4b0c      	ldr	r3, [pc, #48]	; (80115b4 <FLASH_WaitForLastOperation+0x7c>)
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	f003 0301 	and.w	r3, r3, #1
 8011588:	2b00      	cmp	r3, #0
 801158a:	d002      	beq.n	8011592 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801158c:	4b09      	ldr	r3, [pc, #36]	; (80115b4 <FLASH_WaitForLastOperation+0x7c>)
 801158e:	2201      	movs	r2, #1
 8011590:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011592:	4b08      	ldr	r3, [pc, #32]	; (80115b4 <FLASH_WaitForLastOperation+0x7c>)
 8011594:	68db      	ldr	r3, [r3, #12]
 8011596:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801159a:	2b00      	cmp	r3, #0
 801159c:	d003      	beq.n	80115a6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801159e:	f000 f80b 	bl	80115b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80115a2:	2301      	movs	r3, #1
 80115a4:	e000      	b.n	80115a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80115a6:	2300      	movs	r3, #0
  
}  
 80115a8:	4618      	mov	r0, r3
 80115aa:	3710      	adds	r7, #16
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	2001088c 	.word	0x2001088c
 80115b4:	40023c00 	.word	0x40023c00

080115b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80115b8:	b480      	push	{r7}
 80115ba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80115bc:	4b27      	ldr	r3, [pc, #156]	; (801165c <FLASH_SetErrorCode+0xa4>)
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	f003 0310 	and.w	r3, r3, #16
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d008      	beq.n	80115da <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80115c8:	4b25      	ldr	r3, [pc, #148]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 80115ca:	69db      	ldr	r3, [r3, #28]
 80115cc:	f043 0310 	orr.w	r3, r3, #16
 80115d0:	4a23      	ldr	r2, [pc, #140]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 80115d2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80115d4:	4b21      	ldr	r3, [pc, #132]	; (801165c <FLASH_SetErrorCode+0xa4>)
 80115d6:	2210      	movs	r2, #16
 80115d8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80115da:	4b20      	ldr	r3, [pc, #128]	; (801165c <FLASH_SetErrorCode+0xa4>)
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	f003 0320 	and.w	r3, r3, #32
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d008      	beq.n	80115f8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80115e6:	4b1e      	ldr	r3, [pc, #120]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 80115e8:	69db      	ldr	r3, [r3, #28]
 80115ea:	f043 0308 	orr.w	r3, r3, #8
 80115ee:	4a1c      	ldr	r2, [pc, #112]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 80115f0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80115f2:	4b1a      	ldr	r3, [pc, #104]	; (801165c <FLASH_SetErrorCode+0xa4>)
 80115f4:	2220      	movs	r2, #32
 80115f6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80115f8:	4b18      	ldr	r3, [pc, #96]	; (801165c <FLASH_SetErrorCode+0xa4>)
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011600:	2b00      	cmp	r3, #0
 8011602:	d008      	beq.n	8011616 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8011604:	4b16      	ldr	r3, [pc, #88]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 8011606:	69db      	ldr	r3, [r3, #28]
 8011608:	f043 0304 	orr.w	r3, r3, #4
 801160c:	4a14      	ldr	r2, [pc, #80]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 801160e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8011610:	4b12      	ldr	r3, [pc, #72]	; (801165c <FLASH_SetErrorCode+0xa4>)
 8011612:	2240      	movs	r2, #64	; 0x40
 8011614:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8011616:	4b11      	ldr	r3, [pc, #68]	; (801165c <FLASH_SetErrorCode+0xa4>)
 8011618:	68db      	ldr	r3, [r3, #12]
 801161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801161e:	2b00      	cmp	r3, #0
 8011620:	d008      	beq.n	8011634 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8011622:	4b0f      	ldr	r3, [pc, #60]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 8011624:	69db      	ldr	r3, [r3, #28]
 8011626:	f043 0302 	orr.w	r3, r3, #2
 801162a:	4a0d      	ldr	r2, [pc, #52]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 801162c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801162e:	4b0b      	ldr	r3, [pc, #44]	; (801165c <FLASH_SetErrorCode+0xa4>)
 8011630:	2280      	movs	r2, #128	; 0x80
 8011632:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8011634:	4b09      	ldr	r3, [pc, #36]	; (801165c <FLASH_SetErrorCode+0xa4>)
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	f003 0302 	and.w	r3, r3, #2
 801163c:	2b00      	cmp	r3, #0
 801163e:	d008      	beq.n	8011652 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8011640:	4b07      	ldr	r3, [pc, #28]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 8011642:	69db      	ldr	r3, [r3, #28]
 8011644:	f043 0320 	orr.w	r3, r3, #32
 8011648:	4a05      	ldr	r2, [pc, #20]	; (8011660 <FLASH_SetErrorCode+0xa8>)
 801164a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 801164c:	4b03      	ldr	r3, [pc, #12]	; (801165c <FLASH_SetErrorCode+0xa4>)
 801164e:	2202      	movs	r2, #2
 8011650:	60da      	str	r2, [r3, #12]
  }
}
 8011652:	bf00      	nop
 8011654:	46bd      	mov	sp, r7
 8011656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165a:	4770      	bx	lr
 801165c:	40023c00 	.word	0x40023c00
 8011660:	2001088c 	.word	0x2001088c

08011664 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801166e:	2301      	movs	r3, #1
 8011670:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8011672:	2300      	movs	r3, #0
 8011674:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011676:	4b31      	ldr	r3, [pc, #196]	; (801173c <HAL_FLASHEx_Erase+0xd8>)
 8011678:	7e1b      	ldrb	r3, [r3, #24]
 801167a:	2b01      	cmp	r3, #1
 801167c:	d101      	bne.n	8011682 <HAL_FLASHEx_Erase+0x1e>
 801167e:	2302      	movs	r3, #2
 8011680:	e058      	b.n	8011734 <HAL_FLASHEx_Erase+0xd0>
 8011682:	4b2e      	ldr	r3, [pc, #184]	; (801173c <HAL_FLASHEx_Erase+0xd8>)
 8011684:	2201      	movs	r2, #1
 8011686:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011688:	f24c 3050 	movw	r0, #50000	; 0xc350
 801168c:	f7ff ff54 	bl	8011538 <FLASH_WaitForLastOperation>
 8011690:	4603      	mov	r3, r0
 8011692:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8011694:	7bfb      	ldrb	r3, [r7, #15]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d148      	bne.n	801172c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	f04f 32ff 	mov.w	r2, #4294967295
 80116a0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	2b01      	cmp	r3, #1
 80116a8:	d115      	bne.n	80116d6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	691b      	ldr	r3, [r3, #16]
 80116ae:	b2da      	uxtb	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	4619      	mov	r1, r3
 80116b6:	4610      	mov	r0, r2
 80116b8:	f000 f844 	bl	8011744 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80116c0:	f7ff ff3a 	bl	8011538 <FLASH_WaitForLastOperation>
 80116c4:	4603      	mov	r3, r0
 80116c6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80116c8:	4b1d      	ldr	r3, [pc, #116]	; (8011740 <HAL_FLASHEx_Erase+0xdc>)
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	4a1c      	ldr	r2, [pc, #112]	; (8011740 <HAL_FLASHEx_Erase+0xdc>)
 80116ce:	f023 0304 	bic.w	r3, r3, #4
 80116d2:	6113      	str	r3, [r2, #16]
 80116d4:	e028      	b.n	8011728 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	689b      	ldr	r3, [r3, #8]
 80116da:	60bb      	str	r3, [r7, #8]
 80116dc:	e01c      	b.n	8011718 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	691b      	ldr	r3, [r3, #16]
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	4619      	mov	r1, r3
 80116e6:	68b8      	ldr	r0, [r7, #8]
 80116e8:	f000 f850 	bl	801178c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80116f0:	f7ff ff22 	bl	8011538 <FLASH_WaitForLastOperation>
 80116f4:	4603      	mov	r3, r0
 80116f6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80116f8:	4b11      	ldr	r3, [pc, #68]	; (8011740 <HAL_FLASHEx_Erase+0xdc>)
 80116fa:	691b      	ldr	r3, [r3, #16]
 80116fc:	4a10      	ldr	r2, [pc, #64]	; (8011740 <HAL_FLASHEx_Erase+0xdc>)
 80116fe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8011702:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8011704:	7bfb      	ldrb	r3, [r7, #15]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d003      	beq.n	8011712 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	68ba      	ldr	r2, [r7, #8]
 801170e:	601a      	str	r2, [r3, #0]
          break;
 8011710:	e00a      	b.n	8011728 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	3301      	adds	r3, #1
 8011716:	60bb      	str	r3, [r7, #8]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	68da      	ldr	r2, [r3, #12]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	4413      	add	r3, r2
 8011722:	68ba      	ldr	r2, [r7, #8]
 8011724:	429a      	cmp	r2, r3
 8011726:	d3da      	bcc.n	80116de <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8011728:	f000 f878 	bl	801181c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801172c:	4b03      	ldr	r3, [pc, #12]	; (801173c <HAL_FLASHEx_Erase+0xd8>)
 801172e:	2200      	movs	r2, #0
 8011730:	761a      	strb	r2, [r3, #24]

  return status;
 8011732:	7bfb      	ldrb	r3, [r7, #15]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	2001088c 	.word	0x2001088c
 8011740:	40023c00 	.word	0x40023c00

08011744 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8011744:	b480      	push	{r7}
 8011746:	b083      	sub	sp, #12
 8011748:	af00      	add	r7, sp, #0
 801174a:	4603      	mov	r3, r0
 801174c:	6039      	str	r1, [r7, #0]
 801174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011750:	4b0d      	ldr	r3, [pc, #52]	; (8011788 <FLASH_MassErase+0x44>)
 8011752:	691b      	ldr	r3, [r3, #16]
 8011754:	4a0c      	ldr	r2, [pc, #48]	; (8011788 <FLASH_MassErase+0x44>)
 8011756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801175a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 801175c:	4b0a      	ldr	r3, [pc, #40]	; (8011788 <FLASH_MassErase+0x44>)
 801175e:	691b      	ldr	r3, [r3, #16]
 8011760:	4a09      	ldr	r2, [pc, #36]	; (8011788 <FLASH_MassErase+0x44>)
 8011762:	f043 0304 	orr.w	r3, r3, #4
 8011766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8011768:	4b07      	ldr	r3, [pc, #28]	; (8011788 <FLASH_MassErase+0x44>)
 801176a:	691a      	ldr	r2, [r3, #16]
 801176c:	79fb      	ldrb	r3, [r7, #7]
 801176e:	021b      	lsls	r3, r3, #8
 8011770:	4313      	orrs	r3, r2
 8011772:	4a05      	ldr	r2, [pc, #20]	; (8011788 <FLASH_MassErase+0x44>)
 8011774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011778:	6113      	str	r3, [r2, #16]
}
 801177a:	bf00      	nop
 801177c:	370c      	adds	r7, #12
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	40023c00 	.word	0x40023c00

0801178c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801178c:	b480      	push	{r7}
 801178e:	b085      	sub	sp, #20
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	460b      	mov	r3, r1
 8011796:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8011798:	2300      	movs	r3, #0
 801179a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801179c:	78fb      	ldrb	r3, [r7, #3]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d102      	bne.n	80117a8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80117a2:	2300      	movs	r3, #0
 80117a4:	60fb      	str	r3, [r7, #12]
 80117a6:	e010      	b.n	80117ca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80117a8:	78fb      	ldrb	r3, [r7, #3]
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	d103      	bne.n	80117b6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80117ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80117b2:	60fb      	str	r3, [r7, #12]
 80117b4:	e009      	b.n	80117ca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80117b6:	78fb      	ldrb	r3, [r7, #3]
 80117b8:	2b02      	cmp	r3, #2
 80117ba:	d103      	bne.n	80117c4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80117bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117c0:	60fb      	str	r3, [r7, #12]
 80117c2:	e002      	b.n	80117ca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80117c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80117c8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80117ca:	4b13      	ldr	r3, [pc, #76]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 80117cc:	691b      	ldr	r3, [r3, #16]
 80117ce:	4a12      	ldr	r2, [pc, #72]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 80117d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80117d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80117d6:	4b10      	ldr	r3, [pc, #64]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 80117d8:	691a      	ldr	r2, [r3, #16]
 80117da:	490f      	ldr	r1, [pc, #60]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	4313      	orrs	r3, r2
 80117e0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80117e2:	4b0d      	ldr	r3, [pc, #52]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 80117e4:	691b      	ldr	r3, [r3, #16]
 80117e6:	4a0c      	ldr	r2, [pc, #48]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 80117e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80117ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80117ee:	4b0a      	ldr	r3, [pc, #40]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 80117f0:	691a      	ldr	r2, [r3, #16]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	4313      	orrs	r3, r2
 80117f8:	4a07      	ldr	r2, [pc, #28]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 80117fa:	f043 0302 	orr.w	r3, r3, #2
 80117fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8011800:	4b05      	ldr	r3, [pc, #20]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 8011802:	691b      	ldr	r3, [r3, #16]
 8011804:	4a04      	ldr	r2, [pc, #16]	; (8011818 <FLASH_Erase_Sector+0x8c>)
 8011806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801180a:	6113      	str	r3, [r2, #16]
}
 801180c:	bf00      	nop
 801180e:	3714      	adds	r7, #20
 8011810:	46bd      	mov	sp, r7
 8011812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011816:	4770      	bx	lr
 8011818:	40023c00 	.word	0x40023c00

0801181c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801181c:	b480      	push	{r7}
 801181e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8011820:	4b20      	ldr	r3, [pc, #128]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011828:	2b00      	cmp	r3, #0
 801182a:	d017      	beq.n	801185c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801182c:	4b1d      	ldr	r3, [pc, #116]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a1c      	ldr	r2, [pc, #112]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011832:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011836:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8011838:	4b1a      	ldr	r3, [pc, #104]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4a19      	ldr	r2, [pc, #100]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801183e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011842:	6013      	str	r3, [r2, #0]
 8011844:	4b17      	ldr	r3, [pc, #92]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	4a16      	ldr	r2, [pc, #88]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801184a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801184e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011850:	4b14      	ldr	r3, [pc, #80]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4a13      	ldr	r2, [pc, #76]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801185a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 801185c:	4b11      	ldr	r3, [pc, #68]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011864:	2b00      	cmp	r3, #0
 8011866:	d017      	beq.n	8011898 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8011868:	4b0e      	ldr	r3, [pc, #56]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a0d      	ldr	r2, [pc, #52]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801186e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011872:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011874:	4b0b      	ldr	r3, [pc, #44]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4a0a      	ldr	r2, [pc, #40]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801187a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801187e:	6013      	str	r3, [r2, #0]
 8011880:	4b08      	ldr	r3, [pc, #32]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a07      	ldr	r2, [pc, #28]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801188a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801188c:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <FLASH_FlushCaches+0x88>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	4a04      	ldr	r2, [pc, #16]	; (80118a4 <FLASH_FlushCaches+0x88>)
 8011892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011896:	6013      	str	r3, [r2, #0]
  }
}
 8011898:	bf00      	nop
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	40023c00 	.word	0x40023c00

080118a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80118a8:	b480      	push	{r7}
 80118aa:	b089      	sub	sp, #36	; 0x24
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80118b2:	2300      	movs	r3, #0
 80118b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80118b6:	2300      	movs	r3, #0
 80118b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80118ba:	2300      	movs	r3, #0
 80118bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80118be:	2300      	movs	r3, #0
 80118c0:	61fb      	str	r3, [r7, #28]
 80118c2:	e16b      	b.n	8011b9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80118c4:	2201      	movs	r2, #1
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	fa02 f303 	lsl.w	r3, r2, r3
 80118cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	4013      	ands	r3, r2
 80118d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80118d8:	693a      	ldr	r2, [r7, #16]
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	429a      	cmp	r2, r3
 80118de:	f040 815a 	bne.w	8011b96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d00b      	beq.n	8011902 <HAL_GPIO_Init+0x5a>
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	2b02      	cmp	r3, #2
 80118f0:	d007      	beq.n	8011902 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80118f6:	2b11      	cmp	r3, #17
 80118f8:	d003      	beq.n	8011902 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	2b12      	cmp	r3, #18
 8011900:	d130      	bne.n	8011964 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	689b      	ldr	r3, [r3, #8]
 8011906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	005b      	lsls	r3, r3, #1
 801190c:	2203      	movs	r2, #3
 801190e:	fa02 f303 	lsl.w	r3, r2, r3
 8011912:	43db      	mvns	r3, r3
 8011914:	69ba      	ldr	r2, [r7, #24]
 8011916:	4013      	ands	r3, r2
 8011918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	68da      	ldr	r2, [r3, #12]
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	005b      	lsls	r3, r3, #1
 8011922:	fa02 f303 	lsl.w	r3, r2, r3
 8011926:	69ba      	ldr	r2, [r7, #24]
 8011928:	4313      	orrs	r3, r2
 801192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	69ba      	ldr	r2, [r7, #24]
 8011930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	685b      	ldr	r3, [r3, #4]
 8011936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011938:	2201      	movs	r2, #1
 801193a:	69fb      	ldr	r3, [r7, #28]
 801193c:	fa02 f303 	lsl.w	r3, r2, r3
 8011940:	43db      	mvns	r3, r3
 8011942:	69ba      	ldr	r2, [r7, #24]
 8011944:	4013      	ands	r3, r2
 8011946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	091b      	lsrs	r3, r3, #4
 801194e:	f003 0201 	and.w	r2, r3, #1
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	fa02 f303 	lsl.w	r3, r2, r3
 8011958:	69ba      	ldr	r2, [r7, #24]
 801195a:	4313      	orrs	r3, r2
 801195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	69ba      	ldr	r2, [r7, #24]
 8011962:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	005b      	lsls	r3, r3, #1
 801196e:	2203      	movs	r2, #3
 8011970:	fa02 f303 	lsl.w	r3, r2, r3
 8011974:	43db      	mvns	r3, r3
 8011976:	69ba      	ldr	r2, [r7, #24]
 8011978:	4013      	ands	r3, r2
 801197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	689a      	ldr	r2, [r3, #8]
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	005b      	lsls	r3, r3, #1
 8011984:	fa02 f303 	lsl.w	r3, r2, r3
 8011988:	69ba      	ldr	r2, [r7, #24]
 801198a:	4313      	orrs	r3, r2
 801198c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	69ba      	ldr	r2, [r7, #24]
 8011992:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	2b02      	cmp	r3, #2
 801199a:	d003      	beq.n	80119a4 <HAL_GPIO_Init+0xfc>
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	2b12      	cmp	r3, #18
 80119a2:	d123      	bne.n	80119ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	08da      	lsrs	r2, r3, #3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	3208      	adds	r2, #8
 80119ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	f003 0307 	and.w	r3, r3, #7
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	220f      	movs	r2, #15
 80119bc:	fa02 f303 	lsl.w	r3, r2, r3
 80119c0:	43db      	mvns	r3, r3
 80119c2:	69ba      	ldr	r2, [r7, #24]
 80119c4:	4013      	ands	r3, r2
 80119c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	691a      	ldr	r2, [r3, #16]
 80119cc:	69fb      	ldr	r3, [r7, #28]
 80119ce:	f003 0307 	and.w	r3, r3, #7
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	fa02 f303 	lsl.w	r3, r2, r3
 80119d8:	69ba      	ldr	r2, [r7, #24]
 80119da:	4313      	orrs	r3, r2
 80119dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	08da      	lsrs	r2, r3, #3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	3208      	adds	r2, #8
 80119e6:	69b9      	ldr	r1, [r7, #24]
 80119e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	005b      	lsls	r3, r3, #1
 80119f6:	2203      	movs	r2, #3
 80119f8:	fa02 f303 	lsl.w	r3, r2, r3
 80119fc:	43db      	mvns	r3, r3
 80119fe:	69ba      	ldr	r2, [r7, #24]
 8011a00:	4013      	ands	r3, r2
 8011a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	f003 0203 	and.w	r2, r3, #3
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	fa02 f303 	lsl.w	r3, r2, r3
 8011a14:	69ba      	ldr	r2, [r7, #24]
 8011a16:	4313      	orrs	r3, r2
 8011a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	69ba      	ldr	r2, [r7, #24]
 8011a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f000 80b4 	beq.w	8011b96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a2e:	2300      	movs	r3, #0
 8011a30:	60fb      	str	r3, [r7, #12]
 8011a32:	4b5f      	ldr	r3, [pc, #380]	; (8011bb0 <HAL_GPIO_Init+0x308>)
 8011a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a36:	4a5e      	ldr	r2, [pc, #376]	; (8011bb0 <HAL_GPIO_Init+0x308>)
 8011a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8011a3e:	4b5c      	ldr	r3, [pc, #368]	; (8011bb0 <HAL_GPIO_Init+0x308>)
 8011a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a46:	60fb      	str	r3, [r7, #12]
 8011a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011a4a:	4a5a      	ldr	r2, [pc, #360]	; (8011bb4 <HAL_GPIO_Init+0x30c>)
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	089b      	lsrs	r3, r3, #2
 8011a50:	3302      	adds	r3, #2
 8011a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	f003 0303 	and.w	r3, r3, #3
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	220f      	movs	r2, #15
 8011a62:	fa02 f303 	lsl.w	r3, r2, r3
 8011a66:	43db      	mvns	r3, r3
 8011a68:	69ba      	ldr	r2, [r7, #24]
 8011a6a:	4013      	ands	r3, r2
 8011a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4a51      	ldr	r2, [pc, #324]	; (8011bb8 <HAL_GPIO_Init+0x310>)
 8011a72:	4293      	cmp	r3, r2
 8011a74:	d02b      	beq.n	8011ace <HAL_GPIO_Init+0x226>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	4a50      	ldr	r2, [pc, #320]	; (8011bbc <HAL_GPIO_Init+0x314>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d025      	beq.n	8011aca <HAL_GPIO_Init+0x222>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	4a4f      	ldr	r2, [pc, #316]	; (8011bc0 <HAL_GPIO_Init+0x318>)
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d01f      	beq.n	8011ac6 <HAL_GPIO_Init+0x21e>
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	4a4e      	ldr	r2, [pc, #312]	; (8011bc4 <HAL_GPIO_Init+0x31c>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d019      	beq.n	8011ac2 <HAL_GPIO_Init+0x21a>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	4a4d      	ldr	r2, [pc, #308]	; (8011bc8 <HAL_GPIO_Init+0x320>)
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d013      	beq.n	8011abe <HAL_GPIO_Init+0x216>
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	4a4c      	ldr	r2, [pc, #304]	; (8011bcc <HAL_GPIO_Init+0x324>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d00d      	beq.n	8011aba <HAL_GPIO_Init+0x212>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	4a4b      	ldr	r2, [pc, #300]	; (8011bd0 <HAL_GPIO_Init+0x328>)
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d007      	beq.n	8011ab6 <HAL_GPIO_Init+0x20e>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	4a4a      	ldr	r2, [pc, #296]	; (8011bd4 <HAL_GPIO_Init+0x32c>)
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d101      	bne.n	8011ab2 <HAL_GPIO_Init+0x20a>
 8011aae:	2307      	movs	r3, #7
 8011ab0:	e00e      	b.n	8011ad0 <HAL_GPIO_Init+0x228>
 8011ab2:	2308      	movs	r3, #8
 8011ab4:	e00c      	b.n	8011ad0 <HAL_GPIO_Init+0x228>
 8011ab6:	2306      	movs	r3, #6
 8011ab8:	e00a      	b.n	8011ad0 <HAL_GPIO_Init+0x228>
 8011aba:	2305      	movs	r3, #5
 8011abc:	e008      	b.n	8011ad0 <HAL_GPIO_Init+0x228>
 8011abe:	2304      	movs	r3, #4
 8011ac0:	e006      	b.n	8011ad0 <HAL_GPIO_Init+0x228>
 8011ac2:	2303      	movs	r3, #3
 8011ac4:	e004      	b.n	8011ad0 <HAL_GPIO_Init+0x228>
 8011ac6:	2302      	movs	r3, #2
 8011ac8:	e002      	b.n	8011ad0 <HAL_GPIO_Init+0x228>
 8011aca:	2301      	movs	r3, #1
 8011acc:	e000      	b.n	8011ad0 <HAL_GPIO_Init+0x228>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	69fa      	ldr	r2, [r7, #28]
 8011ad2:	f002 0203 	and.w	r2, r2, #3
 8011ad6:	0092      	lsls	r2, r2, #2
 8011ad8:	4093      	lsls	r3, r2
 8011ada:	69ba      	ldr	r2, [r7, #24]
 8011adc:	4313      	orrs	r3, r2
 8011ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011ae0:	4934      	ldr	r1, [pc, #208]	; (8011bb4 <HAL_GPIO_Init+0x30c>)
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	089b      	lsrs	r3, r3, #2
 8011ae6:	3302      	adds	r3, #2
 8011ae8:	69ba      	ldr	r2, [r7, #24]
 8011aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011aee:	4b3a      	ldr	r3, [pc, #232]	; (8011bd8 <HAL_GPIO_Init+0x330>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	43db      	mvns	r3, r3
 8011af8:	69ba      	ldr	r2, [r7, #24]
 8011afa:	4013      	ands	r3, r2
 8011afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d003      	beq.n	8011b12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8011b0a:	69ba      	ldr	r2, [r7, #24]
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011b12:	4a31      	ldr	r2, [pc, #196]	; (8011bd8 <HAL_GPIO_Init+0x330>)
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011b18:	4b2f      	ldr	r3, [pc, #188]	; (8011bd8 <HAL_GPIO_Init+0x330>)
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b1e:	693b      	ldr	r3, [r7, #16]
 8011b20:	43db      	mvns	r3, r3
 8011b22:	69ba      	ldr	r2, [r7, #24]
 8011b24:	4013      	ands	r3, r2
 8011b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d003      	beq.n	8011b3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011b34:	69ba      	ldr	r2, [r7, #24]
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	4313      	orrs	r3, r2
 8011b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011b3c:	4a26      	ldr	r2, [pc, #152]	; (8011bd8 <HAL_GPIO_Init+0x330>)
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011b42:	4b25      	ldr	r3, [pc, #148]	; (8011bd8 <HAL_GPIO_Init+0x330>)
 8011b44:	689b      	ldr	r3, [r3, #8]
 8011b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	43db      	mvns	r3, r3
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	4013      	ands	r3, r2
 8011b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d003      	beq.n	8011b66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8011b5e:	69ba      	ldr	r2, [r7, #24]
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	4313      	orrs	r3, r2
 8011b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011b66:	4a1c      	ldr	r2, [pc, #112]	; (8011bd8 <HAL_GPIO_Init+0x330>)
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011b6c:	4b1a      	ldr	r3, [pc, #104]	; (8011bd8 <HAL_GPIO_Init+0x330>)
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	43db      	mvns	r3, r3
 8011b76:	69ba      	ldr	r2, [r7, #24]
 8011b78:	4013      	ands	r3, r2
 8011b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d003      	beq.n	8011b90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8011b88:	69ba      	ldr	r2, [r7, #24]
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011b90:	4a11      	ldr	r2, [pc, #68]	; (8011bd8 <HAL_GPIO_Init+0x330>)
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011b96:	69fb      	ldr	r3, [r7, #28]
 8011b98:	3301      	adds	r3, #1
 8011b9a:	61fb      	str	r3, [r7, #28]
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	2b0f      	cmp	r3, #15
 8011ba0:	f67f ae90 	bls.w	80118c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011ba4:	bf00      	nop
 8011ba6:	3724      	adds	r7, #36	; 0x24
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	40023800 	.word	0x40023800
 8011bb4:	40013800 	.word	0x40013800
 8011bb8:	40020000 	.word	0x40020000
 8011bbc:	40020400 	.word	0x40020400
 8011bc0:	40020800 	.word	0x40020800
 8011bc4:	40020c00 	.word	0x40020c00
 8011bc8:	40021000 	.word	0x40021000
 8011bcc:	40021400 	.word	0x40021400
 8011bd0:	40021800 	.word	0x40021800
 8011bd4:	40021c00 	.word	0x40021c00
 8011bd8:	40013c00 	.word	0x40013c00

08011bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	460b      	mov	r3, r1
 8011be6:	807b      	strh	r3, [r7, #2]
 8011be8:	4613      	mov	r3, r2
 8011bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011bec:	787b      	ldrb	r3, [r7, #1]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011bf2:	887a      	ldrh	r2, [r7, #2]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011bf8:	e003      	b.n	8011c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011bfa:	887b      	ldrh	r3, [r7, #2]
 8011bfc:	041a      	lsls	r2, r3, #16
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	619a      	str	r2, [r3, #24]
}
 8011c02:	bf00      	nop
 8011c04:	370c      	adds	r7, #12
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr
	...

08011c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	4603      	mov	r3, r0
 8011c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8011c1a:	4b08      	ldr	r3, [pc, #32]	; (8011c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011c1c:	695a      	ldr	r2, [r3, #20]
 8011c1e:	88fb      	ldrh	r3, [r7, #6]
 8011c20:	4013      	ands	r3, r2
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d006      	beq.n	8011c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011c26:	4a05      	ldr	r2, [pc, #20]	; (8011c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011c28:	88fb      	ldrh	r3, [r7, #6]
 8011c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011c2c:	88fb      	ldrh	r3, [r7, #6]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fb fcd2 	bl	800d5d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8011c34:	bf00      	nop
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	40013c00 	.word	0x40013c00

08011c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b086      	sub	sp, #24
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d101      	bne.n	8011c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e25b      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f003 0301 	and.w	r3, r3, #1
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d075      	beq.n	8011d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011c5e:	4ba3      	ldr	r3, [pc, #652]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011c60:	689b      	ldr	r3, [r3, #8]
 8011c62:	f003 030c 	and.w	r3, r3, #12
 8011c66:	2b04      	cmp	r3, #4
 8011c68:	d00c      	beq.n	8011c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011c6a:	4ba0      	ldr	r3, [pc, #640]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011c72:	2b08      	cmp	r3, #8
 8011c74:	d112      	bne.n	8011c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011c76:	4b9d      	ldr	r3, [pc, #628]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011c82:	d10b      	bne.n	8011c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011c84:	4b99      	ldr	r3, [pc, #612]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d05b      	beq.n	8011d48 <HAL_RCC_OscConfig+0x108>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d157      	bne.n	8011d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e236      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ca4:	d106      	bne.n	8011cb4 <HAL_RCC_OscConfig+0x74>
 8011ca6:	4b91      	ldr	r3, [pc, #580]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	4a90      	ldr	r2, [pc, #576]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cb0:	6013      	str	r3, [r2, #0]
 8011cb2:	e01d      	b.n	8011cf0 <HAL_RCC_OscConfig+0xb0>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011cbc:	d10c      	bne.n	8011cd8 <HAL_RCC_OscConfig+0x98>
 8011cbe:	4b8b      	ldr	r3, [pc, #556]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	4a8a      	ldr	r2, [pc, #552]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011cc8:	6013      	str	r3, [r2, #0]
 8011cca:	4b88      	ldr	r3, [pc, #544]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	4a87      	ldr	r2, [pc, #540]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cd4:	6013      	str	r3, [r2, #0]
 8011cd6:	e00b      	b.n	8011cf0 <HAL_RCC_OscConfig+0xb0>
 8011cd8:	4b84      	ldr	r3, [pc, #528]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4a83      	ldr	r2, [pc, #524]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011ce2:	6013      	str	r3, [r2, #0]
 8011ce4:	4b81      	ldr	r3, [pc, #516]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4a80      	ldr	r2, [pc, #512]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d013      	beq.n	8011d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011cf8:	f7fe fa90 	bl	801021c <HAL_GetTick>
 8011cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011cfe:	e008      	b.n	8011d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011d00:	f7fe fa8c 	bl	801021c <HAL_GetTick>
 8011d04:	4602      	mov	r2, r0
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	2b64      	cmp	r3, #100	; 0x64
 8011d0c:	d901      	bls.n	8011d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011d0e:	2303      	movs	r3, #3
 8011d10:	e1fb      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d12:	4b76      	ldr	r3, [pc, #472]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d0f0      	beq.n	8011d00 <HAL_RCC_OscConfig+0xc0>
 8011d1e:	e014      	b.n	8011d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d20:	f7fe fa7c 	bl	801021c <HAL_GetTick>
 8011d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011d26:	e008      	b.n	8011d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011d28:	f7fe fa78 	bl	801021c <HAL_GetTick>
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	2b64      	cmp	r3, #100	; 0x64
 8011d34:	d901      	bls.n	8011d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011d36:	2303      	movs	r3, #3
 8011d38:	e1e7      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011d3a:	4b6c      	ldr	r3, [pc, #432]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d1f0      	bne.n	8011d28 <HAL_RCC_OscConfig+0xe8>
 8011d46:	e000      	b.n	8011d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	f003 0302 	and.w	r3, r3, #2
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d063      	beq.n	8011e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011d56:	4b65      	ldr	r3, [pc, #404]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011d58:	689b      	ldr	r3, [r3, #8]
 8011d5a:	f003 030c 	and.w	r3, r3, #12
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00b      	beq.n	8011d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011d62:	4b62      	ldr	r3, [pc, #392]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011d64:	689b      	ldr	r3, [r3, #8]
 8011d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011d6a:	2b08      	cmp	r3, #8
 8011d6c:	d11c      	bne.n	8011da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011d6e:	4b5f      	ldr	r3, [pc, #380]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d116      	bne.n	8011da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011d7a:	4b5c      	ldr	r3, [pc, #368]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f003 0302 	and.w	r3, r3, #2
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d005      	beq.n	8011d92 <HAL_RCC_OscConfig+0x152>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d001      	beq.n	8011d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e1bb      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d92:	4b56      	ldr	r3, [pc, #344]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	691b      	ldr	r3, [r3, #16]
 8011d9e:	00db      	lsls	r3, r3, #3
 8011da0:	4952      	ldr	r1, [pc, #328]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011da2:	4313      	orrs	r3, r2
 8011da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011da6:	e03a      	b.n	8011e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d020      	beq.n	8011df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011db0:	4b4f      	ldr	r3, [pc, #316]	; (8011ef0 <HAL_RCC_OscConfig+0x2b0>)
 8011db2:	2201      	movs	r2, #1
 8011db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011db6:	f7fe fa31 	bl	801021c <HAL_GetTick>
 8011dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011dbc:	e008      	b.n	8011dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011dbe:	f7fe fa2d 	bl	801021c <HAL_GetTick>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	2b02      	cmp	r3, #2
 8011dca:	d901      	bls.n	8011dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011dcc:	2303      	movs	r3, #3
 8011dce:	e19c      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011dd0:	4b46      	ldr	r3, [pc, #280]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	f003 0302 	and.w	r3, r3, #2
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d0f0      	beq.n	8011dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011ddc:	4b43      	ldr	r3, [pc, #268]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	691b      	ldr	r3, [r3, #16]
 8011de8:	00db      	lsls	r3, r3, #3
 8011dea:	4940      	ldr	r1, [pc, #256]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011dec:	4313      	orrs	r3, r2
 8011dee:	600b      	str	r3, [r1, #0]
 8011df0:	e015      	b.n	8011e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011df2:	4b3f      	ldr	r3, [pc, #252]	; (8011ef0 <HAL_RCC_OscConfig+0x2b0>)
 8011df4:	2200      	movs	r2, #0
 8011df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011df8:	f7fe fa10 	bl	801021c <HAL_GetTick>
 8011dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011dfe:	e008      	b.n	8011e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011e00:	f7fe fa0c 	bl	801021c <HAL_GetTick>
 8011e04:	4602      	mov	r2, r0
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	1ad3      	subs	r3, r2, r3
 8011e0a:	2b02      	cmp	r3, #2
 8011e0c:	d901      	bls.n	8011e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011e0e:	2303      	movs	r3, #3
 8011e10:	e17b      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011e12:	4b36      	ldr	r3, [pc, #216]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f003 0302 	and.w	r3, r3, #2
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d1f0      	bne.n	8011e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	f003 0308 	and.w	r3, r3, #8
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d030      	beq.n	8011e8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	695b      	ldr	r3, [r3, #20]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d016      	beq.n	8011e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011e32:	4b30      	ldr	r3, [pc, #192]	; (8011ef4 <HAL_RCC_OscConfig+0x2b4>)
 8011e34:	2201      	movs	r2, #1
 8011e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e38:	f7fe f9f0 	bl	801021c <HAL_GetTick>
 8011e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011e3e:	e008      	b.n	8011e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011e40:	f7fe f9ec 	bl	801021c <HAL_GetTick>
 8011e44:	4602      	mov	r2, r0
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	1ad3      	subs	r3, r2, r3
 8011e4a:	2b02      	cmp	r3, #2
 8011e4c:	d901      	bls.n	8011e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011e4e:	2303      	movs	r3, #3
 8011e50:	e15b      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011e52:	4b26      	ldr	r3, [pc, #152]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e56:	f003 0302 	and.w	r3, r3, #2
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d0f0      	beq.n	8011e40 <HAL_RCC_OscConfig+0x200>
 8011e5e:	e015      	b.n	8011e8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011e60:	4b24      	ldr	r3, [pc, #144]	; (8011ef4 <HAL_RCC_OscConfig+0x2b4>)
 8011e62:	2200      	movs	r2, #0
 8011e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011e66:	f7fe f9d9 	bl	801021c <HAL_GetTick>
 8011e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011e6c:	e008      	b.n	8011e80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011e6e:	f7fe f9d5 	bl	801021c <HAL_GetTick>
 8011e72:	4602      	mov	r2, r0
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	2b02      	cmp	r3, #2
 8011e7a:	d901      	bls.n	8011e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	e144      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011e80:	4b1a      	ldr	r3, [pc, #104]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e84:	f003 0302 	and.w	r3, r3, #2
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1f0      	bne.n	8011e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f003 0304 	and.w	r3, r3, #4
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f000 80a0 	beq.w	8011fda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011e9e:	4b13      	ldr	r3, [pc, #76]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10f      	bne.n	8011eca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011eaa:	2300      	movs	r3, #0
 8011eac:	60bb      	str	r3, [r7, #8]
 8011eae:	4b0f      	ldr	r3, [pc, #60]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb2:	4a0e      	ldr	r2, [pc, #56]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8011eba:	4b0c      	ldr	r3, [pc, #48]	; (8011eec <HAL_RCC_OscConfig+0x2ac>)
 8011ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ec2:	60bb      	str	r3, [r7, #8]
 8011ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011eca:	4b0b      	ldr	r3, [pc, #44]	; (8011ef8 <HAL_RCC_OscConfig+0x2b8>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d121      	bne.n	8011f1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011ed6:	4b08      	ldr	r3, [pc, #32]	; (8011ef8 <HAL_RCC_OscConfig+0x2b8>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4a07      	ldr	r2, [pc, #28]	; (8011ef8 <HAL_RCC_OscConfig+0x2b8>)
 8011edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011ee2:	f7fe f99b 	bl	801021c <HAL_GetTick>
 8011ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011ee8:	e011      	b.n	8011f0e <HAL_RCC_OscConfig+0x2ce>
 8011eea:	bf00      	nop
 8011eec:	40023800 	.word	0x40023800
 8011ef0:	42470000 	.word	0x42470000
 8011ef4:	42470e80 	.word	0x42470e80
 8011ef8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011efc:	f7fe f98e 	bl	801021c <HAL_GetTick>
 8011f00:	4602      	mov	r2, r0
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	2b02      	cmp	r3, #2
 8011f08:	d901      	bls.n	8011f0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8011f0a:	2303      	movs	r3, #3
 8011f0c:	e0fd      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011f0e:	4b81      	ldr	r3, [pc, #516]	; (8012114 <HAL_RCC_OscConfig+0x4d4>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d0f0      	beq.n	8011efc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	689b      	ldr	r3, [r3, #8]
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	d106      	bne.n	8011f30 <HAL_RCC_OscConfig+0x2f0>
 8011f22:	4b7d      	ldr	r3, [pc, #500]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f26:	4a7c      	ldr	r2, [pc, #496]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f28:	f043 0301 	orr.w	r3, r3, #1
 8011f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8011f2e:	e01c      	b.n	8011f6a <HAL_RCC_OscConfig+0x32a>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	689b      	ldr	r3, [r3, #8]
 8011f34:	2b05      	cmp	r3, #5
 8011f36:	d10c      	bne.n	8011f52 <HAL_RCC_OscConfig+0x312>
 8011f38:	4b77      	ldr	r3, [pc, #476]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f3c:	4a76      	ldr	r2, [pc, #472]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f3e:	f043 0304 	orr.w	r3, r3, #4
 8011f42:	6713      	str	r3, [r2, #112]	; 0x70
 8011f44:	4b74      	ldr	r3, [pc, #464]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f48:	4a73      	ldr	r2, [pc, #460]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f4a:	f043 0301 	orr.w	r3, r3, #1
 8011f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8011f50:	e00b      	b.n	8011f6a <HAL_RCC_OscConfig+0x32a>
 8011f52:	4b71      	ldr	r3, [pc, #452]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f56:	4a70      	ldr	r2, [pc, #448]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f58:	f023 0301 	bic.w	r3, r3, #1
 8011f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8011f5e:	4b6e      	ldr	r3, [pc, #440]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f62:	4a6d      	ldr	r2, [pc, #436]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f64:	f023 0304 	bic.w	r3, r3, #4
 8011f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	689b      	ldr	r3, [r3, #8]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d015      	beq.n	8011f9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011f72:	f7fe f953 	bl	801021c <HAL_GetTick>
 8011f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f78:	e00a      	b.n	8011f90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011f7a:	f7fe f94f 	bl	801021c <HAL_GetTick>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	1ad3      	subs	r3, r2, r3
 8011f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	d901      	bls.n	8011f90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8011f8c:	2303      	movs	r3, #3
 8011f8e:	e0bc      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f90:	4b61      	ldr	r3, [pc, #388]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f94:	f003 0302 	and.w	r3, r3, #2
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d0ee      	beq.n	8011f7a <HAL_RCC_OscConfig+0x33a>
 8011f9c:	e014      	b.n	8011fc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011f9e:	f7fe f93d 	bl	801021c <HAL_GetTick>
 8011fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011fa4:	e00a      	b.n	8011fbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011fa6:	f7fe f939 	bl	801021c <HAL_GetTick>
 8011faa:	4602      	mov	r2, r0
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	1ad3      	subs	r3, r2, r3
 8011fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d901      	bls.n	8011fbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8011fb8:	2303      	movs	r3, #3
 8011fba:	e0a6      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011fbc:	4b56      	ldr	r3, [pc, #344]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fc0:	f003 0302 	and.w	r3, r3, #2
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d1ee      	bne.n	8011fa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011fc8:	7dfb      	ldrb	r3, [r7, #23]
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d105      	bne.n	8011fda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011fce:	4b52      	ldr	r3, [pc, #328]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fd2:	4a51      	ldr	r2, [pc, #324]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	699b      	ldr	r3, [r3, #24]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	f000 8092 	beq.w	8012108 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011fe4:	4b4c      	ldr	r3, [pc, #304]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8011fe6:	689b      	ldr	r3, [r3, #8]
 8011fe8:	f003 030c 	and.w	r3, r3, #12
 8011fec:	2b08      	cmp	r3, #8
 8011fee:	d05c      	beq.n	80120aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	699b      	ldr	r3, [r3, #24]
 8011ff4:	2b02      	cmp	r3, #2
 8011ff6:	d141      	bne.n	801207c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011ff8:	4b48      	ldr	r3, [pc, #288]	; (801211c <HAL_RCC_OscConfig+0x4dc>)
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ffe:	f7fe f90d 	bl	801021c <HAL_GetTick>
 8012002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012004:	e008      	b.n	8012018 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012006:	f7fe f909 	bl	801021c <HAL_GetTick>
 801200a:	4602      	mov	r2, r0
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	2b02      	cmp	r3, #2
 8012012:	d901      	bls.n	8012018 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012014:	2303      	movs	r3, #3
 8012016:	e078      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012018:	4b3f      	ldr	r3, [pc, #252]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012020:	2b00      	cmp	r3, #0
 8012022:	d1f0      	bne.n	8012006 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	69da      	ldr	r2, [r3, #28]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6a1b      	ldr	r3, [r3, #32]
 801202c:	431a      	orrs	r2, r3
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012032:	019b      	lsls	r3, r3, #6
 8012034:	431a      	orrs	r2, r3
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801203a:	085b      	lsrs	r3, r3, #1
 801203c:	3b01      	subs	r3, #1
 801203e:	041b      	lsls	r3, r3, #16
 8012040:	431a      	orrs	r2, r3
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012046:	061b      	lsls	r3, r3, #24
 8012048:	4933      	ldr	r1, [pc, #204]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 801204a:	4313      	orrs	r3, r2
 801204c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801204e:	4b33      	ldr	r3, [pc, #204]	; (801211c <HAL_RCC_OscConfig+0x4dc>)
 8012050:	2201      	movs	r2, #1
 8012052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012054:	f7fe f8e2 	bl	801021c <HAL_GetTick>
 8012058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801205a:	e008      	b.n	801206e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801205c:	f7fe f8de 	bl	801021c <HAL_GetTick>
 8012060:	4602      	mov	r2, r0
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	1ad3      	subs	r3, r2, r3
 8012066:	2b02      	cmp	r3, #2
 8012068:	d901      	bls.n	801206e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801206a:	2303      	movs	r3, #3
 801206c:	e04d      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801206e:	4b2a      	ldr	r3, [pc, #168]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012076:	2b00      	cmp	r3, #0
 8012078:	d0f0      	beq.n	801205c <HAL_RCC_OscConfig+0x41c>
 801207a:	e045      	b.n	8012108 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801207c:	4b27      	ldr	r3, [pc, #156]	; (801211c <HAL_RCC_OscConfig+0x4dc>)
 801207e:	2200      	movs	r2, #0
 8012080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012082:	f7fe f8cb 	bl	801021c <HAL_GetTick>
 8012086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012088:	e008      	b.n	801209c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801208a:	f7fe f8c7 	bl	801021c <HAL_GetTick>
 801208e:	4602      	mov	r2, r0
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	1ad3      	subs	r3, r2, r3
 8012094:	2b02      	cmp	r3, #2
 8012096:	d901      	bls.n	801209c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012098:	2303      	movs	r3, #3
 801209a:	e036      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801209c:	4b1e      	ldr	r3, [pc, #120]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1f0      	bne.n	801208a <HAL_RCC_OscConfig+0x44a>
 80120a8:	e02e      	b.n	8012108 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	699b      	ldr	r3, [r3, #24]
 80120ae:	2b01      	cmp	r3, #1
 80120b0:	d101      	bne.n	80120b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80120b2:	2301      	movs	r3, #1
 80120b4:	e029      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80120b6:	4b18      	ldr	r3, [pc, #96]	; (8012118 <HAL_RCC_OscConfig+0x4d8>)
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	69db      	ldr	r3, [r3, #28]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d11c      	bne.n	8012104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d115      	bne.n	8012104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80120de:	4013      	ands	r3, r2
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d10d      	bne.n	8012104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d106      	bne.n	8012104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012100:	429a      	cmp	r2, r3
 8012102:	d001      	beq.n	8012108 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8012104:	2301      	movs	r3, #1
 8012106:	e000      	b.n	801210a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3718      	adds	r7, #24
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	40007000 	.word	0x40007000
 8012118:	40023800 	.word	0x40023800
 801211c:	42470060 	.word	0x42470060

08012120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d101      	bne.n	8012134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012130:	2301      	movs	r3, #1
 8012132:	e0cc      	b.n	80122ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012134:	4b68      	ldr	r3, [pc, #416]	; (80122d8 <HAL_RCC_ClockConfig+0x1b8>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f003 030f 	and.w	r3, r3, #15
 801213c:	683a      	ldr	r2, [r7, #0]
 801213e:	429a      	cmp	r2, r3
 8012140:	d90c      	bls.n	801215c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012142:	4b65      	ldr	r3, [pc, #404]	; (80122d8 <HAL_RCC_ClockConfig+0x1b8>)
 8012144:	683a      	ldr	r2, [r7, #0]
 8012146:	b2d2      	uxtb	r2, r2
 8012148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801214a:	4b63      	ldr	r3, [pc, #396]	; (80122d8 <HAL_RCC_ClockConfig+0x1b8>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f003 030f 	and.w	r3, r3, #15
 8012152:	683a      	ldr	r2, [r7, #0]
 8012154:	429a      	cmp	r2, r3
 8012156:	d001      	beq.n	801215c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012158:	2301      	movs	r3, #1
 801215a:	e0b8      	b.n	80122ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f003 0302 	and.w	r3, r3, #2
 8012164:	2b00      	cmp	r3, #0
 8012166:	d020      	beq.n	80121aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	f003 0304 	and.w	r3, r3, #4
 8012170:	2b00      	cmp	r3, #0
 8012172:	d005      	beq.n	8012180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012174:	4b59      	ldr	r3, [pc, #356]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	4a58      	ldr	r2, [pc, #352]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 801217a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801217e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f003 0308 	and.w	r3, r3, #8
 8012188:	2b00      	cmp	r3, #0
 801218a:	d005      	beq.n	8012198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801218c:	4b53      	ldr	r3, [pc, #332]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 801218e:	689b      	ldr	r3, [r3, #8]
 8012190:	4a52      	ldr	r2, [pc, #328]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 8012192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012198:	4b50      	ldr	r3, [pc, #320]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 801219a:	689b      	ldr	r3, [r3, #8]
 801219c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	494d      	ldr	r1, [pc, #308]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 80121a6:	4313      	orrs	r3, r2
 80121a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	f003 0301 	and.w	r3, r3, #1
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d044      	beq.n	8012240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	d107      	bne.n	80121ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80121be:	4b47      	ldr	r3, [pc, #284]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d119      	bne.n	80121fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80121ca:	2301      	movs	r3, #1
 80121cc:	e07f      	b.n	80122ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	2b02      	cmp	r3, #2
 80121d4:	d003      	beq.n	80121de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80121da:	2b03      	cmp	r3, #3
 80121dc:	d107      	bne.n	80121ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80121de:	4b3f      	ldr	r3, [pc, #252]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d109      	bne.n	80121fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80121ea:	2301      	movs	r3, #1
 80121ec:	e06f      	b.n	80122ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80121ee:	4b3b      	ldr	r3, [pc, #236]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	f003 0302 	and.w	r3, r3, #2
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d101      	bne.n	80121fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80121fa:	2301      	movs	r3, #1
 80121fc:	e067      	b.n	80122ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80121fe:	4b37      	ldr	r3, [pc, #220]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 8012200:	689b      	ldr	r3, [r3, #8]
 8012202:	f023 0203 	bic.w	r2, r3, #3
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	4934      	ldr	r1, [pc, #208]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 801220c:	4313      	orrs	r3, r2
 801220e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012210:	f7fe f804 	bl	801021c <HAL_GetTick>
 8012214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012216:	e00a      	b.n	801222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012218:	f7fe f800 	bl	801021c <HAL_GetTick>
 801221c:	4602      	mov	r2, r0
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	f241 3288 	movw	r2, #5000	; 0x1388
 8012226:	4293      	cmp	r3, r2
 8012228:	d901      	bls.n	801222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801222a:	2303      	movs	r3, #3
 801222c:	e04f      	b.n	80122ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801222e:	4b2b      	ldr	r3, [pc, #172]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 8012230:	689b      	ldr	r3, [r3, #8]
 8012232:	f003 020c 	and.w	r2, r3, #12
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	429a      	cmp	r2, r3
 801223e:	d1eb      	bne.n	8012218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012240:	4b25      	ldr	r3, [pc, #148]	; (80122d8 <HAL_RCC_ClockConfig+0x1b8>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	f003 030f 	and.w	r3, r3, #15
 8012248:	683a      	ldr	r2, [r7, #0]
 801224a:	429a      	cmp	r2, r3
 801224c:	d20c      	bcs.n	8012268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801224e:	4b22      	ldr	r3, [pc, #136]	; (80122d8 <HAL_RCC_ClockConfig+0x1b8>)
 8012250:	683a      	ldr	r2, [r7, #0]
 8012252:	b2d2      	uxtb	r2, r2
 8012254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012256:	4b20      	ldr	r3, [pc, #128]	; (80122d8 <HAL_RCC_ClockConfig+0x1b8>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f003 030f 	and.w	r3, r3, #15
 801225e:	683a      	ldr	r2, [r7, #0]
 8012260:	429a      	cmp	r2, r3
 8012262:	d001      	beq.n	8012268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012264:	2301      	movs	r3, #1
 8012266:	e032      	b.n	80122ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f003 0304 	and.w	r3, r3, #4
 8012270:	2b00      	cmp	r3, #0
 8012272:	d008      	beq.n	8012286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012274:	4b19      	ldr	r3, [pc, #100]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	4916      	ldr	r1, [pc, #88]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 8012282:	4313      	orrs	r3, r2
 8012284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f003 0308 	and.w	r3, r3, #8
 801228e:	2b00      	cmp	r3, #0
 8012290:	d009      	beq.n	80122a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012292:	4b12      	ldr	r3, [pc, #72]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 8012294:	689b      	ldr	r3, [r3, #8]
 8012296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	691b      	ldr	r3, [r3, #16]
 801229e:	00db      	lsls	r3, r3, #3
 80122a0:	490e      	ldr	r1, [pc, #56]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 80122a2:	4313      	orrs	r3, r2
 80122a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80122a6:	f000 f821 	bl	80122ec <HAL_RCC_GetSysClockFreq>
 80122aa:	4601      	mov	r1, r0
 80122ac:	4b0b      	ldr	r3, [pc, #44]	; (80122dc <HAL_RCC_ClockConfig+0x1bc>)
 80122ae:	689b      	ldr	r3, [r3, #8]
 80122b0:	091b      	lsrs	r3, r3, #4
 80122b2:	f003 030f 	and.w	r3, r3, #15
 80122b6:	4a0a      	ldr	r2, [pc, #40]	; (80122e0 <HAL_RCC_ClockConfig+0x1c0>)
 80122b8:	5cd3      	ldrb	r3, [r2, r3]
 80122ba:	fa21 f303 	lsr.w	r3, r1, r3
 80122be:	4a09      	ldr	r2, [pc, #36]	; (80122e4 <HAL_RCC_ClockConfig+0x1c4>)
 80122c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80122c2:	4b09      	ldr	r3, [pc, #36]	; (80122e8 <HAL_RCC_ClockConfig+0x1c8>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7fd ff64 	bl	8010194 <HAL_InitTick>

  return HAL_OK;
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	40023c00 	.word	0x40023c00
 80122dc:	40023800 	.word	0x40023800
 80122e0:	0801a5a4 	.word	0x0801a5a4
 80122e4:	2000001c 	.word	0x2000001c
 80122e8:	20000020 	.word	0x20000020

080122ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80122ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80122f2:	2300      	movs	r3, #0
 80122f4:	607b      	str	r3, [r7, #4]
 80122f6:	2300      	movs	r3, #0
 80122f8:	60fb      	str	r3, [r7, #12]
 80122fa:	2300      	movs	r3, #0
 80122fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80122fe:	2300      	movs	r3, #0
 8012300:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012302:	4b63      	ldr	r3, [pc, #396]	; (8012490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012304:	689b      	ldr	r3, [r3, #8]
 8012306:	f003 030c 	and.w	r3, r3, #12
 801230a:	2b04      	cmp	r3, #4
 801230c:	d007      	beq.n	801231e <HAL_RCC_GetSysClockFreq+0x32>
 801230e:	2b08      	cmp	r3, #8
 8012310:	d008      	beq.n	8012324 <HAL_RCC_GetSysClockFreq+0x38>
 8012312:	2b00      	cmp	r3, #0
 8012314:	f040 80b4 	bne.w	8012480 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012318:	4b5e      	ldr	r3, [pc, #376]	; (8012494 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801231a:	60bb      	str	r3, [r7, #8]
       break;
 801231c:	e0b3      	b.n	8012486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801231e:	4b5e      	ldr	r3, [pc, #376]	; (8012498 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8012320:	60bb      	str	r3, [r7, #8]
      break;
 8012322:	e0b0      	b.n	8012486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012324:	4b5a      	ldr	r3, [pc, #360]	; (8012490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801232c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801232e:	4b58      	ldr	r3, [pc, #352]	; (8012490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012336:	2b00      	cmp	r3, #0
 8012338:	d04a      	beq.n	80123d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801233a:	4b55      	ldr	r3, [pc, #340]	; (8012490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	099b      	lsrs	r3, r3, #6
 8012340:	f04f 0400 	mov.w	r4, #0
 8012344:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012348:	f04f 0200 	mov.w	r2, #0
 801234c:	ea03 0501 	and.w	r5, r3, r1
 8012350:	ea04 0602 	and.w	r6, r4, r2
 8012354:	4629      	mov	r1, r5
 8012356:	4632      	mov	r2, r6
 8012358:	f04f 0300 	mov.w	r3, #0
 801235c:	f04f 0400 	mov.w	r4, #0
 8012360:	0154      	lsls	r4, r2, #5
 8012362:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8012366:	014b      	lsls	r3, r1, #5
 8012368:	4619      	mov	r1, r3
 801236a:	4622      	mov	r2, r4
 801236c:	1b49      	subs	r1, r1, r5
 801236e:	eb62 0206 	sbc.w	r2, r2, r6
 8012372:	f04f 0300 	mov.w	r3, #0
 8012376:	f04f 0400 	mov.w	r4, #0
 801237a:	0194      	lsls	r4, r2, #6
 801237c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8012380:	018b      	lsls	r3, r1, #6
 8012382:	1a5b      	subs	r3, r3, r1
 8012384:	eb64 0402 	sbc.w	r4, r4, r2
 8012388:	f04f 0100 	mov.w	r1, #0
 801238c:	f04f 0200 	mov.w	r2, #0
 8012390:	00e2      	lsls	r2, r4, #3
 8012392:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8012396:	00d9      	lsls	r1, r3, #3
 8012398:	460b      	mov	r3, r1
 801239a:	4614      	mov	r4, r2
 801239c:	195b      	adds	r3, r3, r5
 801239e:	eb44 0406 	adc.w	r4, r4, r6
 80123a2:	f04f 0100 	mov.w	r1, #0
 80123a6:	f04f 0200 	mov.w	r2, #0
 80123aa:	0262      	lsls	r2, r4, #9
 80123ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80123b0:	0259      	lsls	r1, r3, #9
 80123b2:	460b      	mov	r3, r1
 80123b4:	4614      	mov	r4, r2
 80123b6:	4618      	mov	r0, r3
 80123b8:	4621      	mov	r1, r4
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f04f 0400 	mov.w	r4, #0
 80123c0:	461a      	mov	r2, r3
 80123c2:	4623      	mov	r3, r4
 80123c4:	f7f6 fb98 	bl	8008af8 <__aeabi_uldivmod>
 80123c8:	4603      	mov	r3, r0
 80123ca:	460c      	mov	r4, r1
 80123cc:	60fb      	str	r3, [r7, #12]
 80123ce:	e049      	b.n	8012464 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80123d0:	4b2f      	ldr	r3, [pc, #188]	; (8012490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	099b      	lsrs	r3, r3, #6
 80123d6:	f04f 0400 	mov.w	r4, #0
 80123da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80123de:	f04f 0200 	mov.w	r2, #0
 80123e2:	ea03 0501 	and.w	r5, r3, r1
 80123e6:	ea04 0602 	and.w	r6, r4, r2
 80123ea:	4629      	mov	r1, r5
 80123ec:	4632      	mov	r2, r6
 80123ee:	f04f 0300 	mov.w	r3, #0
 80123f2:	f04f 0400 	mov.w	r4, #0
 80123f6:	0154      	lsls	r4, r2, #5
 80123f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80123fc:	014b      	lsls	r3, r1, #5
 80123fe:	4619      	mov	r1, r3
 8012400:	4622      	mov	r2, r4
 8012402:	1b49      	subs	r1, r1, r5
 8012404:	eb62 0206 	sbc.w	r2, r2, r6
 8012408:	f04f 0300 	mov.w	r3, #0
 801240c:	f04f 0400 	mov.w	r4, #0
 8012410:	0194      	lsls	r4, r2, #6
 8012412:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8012416:	018b      	lsls	r3, r1, #6
 8012418:	1a5b      	subs	r3, r3, r1
 801241a:	eb64 0402 	sbc.w	r4, r4, r2
 801241e:	f04f 0100 	mov.w	r1, #0
 8012422:	f04f 0200 	mov.w	r2, #0
 8012426:	00e2      	lsls	r2, r4, #3
 8012428:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801242c:	00d9      	lsls	r1, r3, #3
 801242e:	460b      	mov	r3, r1
 8012430:	4614      	mov	r4, r2
 8012432:	195b      	adds	r3, r3, r5
 8012434:	eb44 0406 	adc.w	r4, r4, r6
 8012438:	f04f 0100 	mov.w	r1, #0
 801243c:	f04f 0200 	mov.w	r2, #0
 8012440:	02a2      	lsls	r2, r4, #10
 8012442:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8012446:	0299      	lsls	r1, r3, #10
 8012448:	460b      	mov	r3, r1
 801244a:	4614      	mov	r4, r2
 801244c:	4618      	mov	r0, r3
 801244e:	4621      	mov	r1, r4
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f04f 0400 	mov.w	r4, #0
 8012456:	461a      	mov	r2, r3
 8012458:	4623      	mov	r3, r4
 801245a:	f7f6 fb4d 	bl	8008af8 <__aeabi_uldivmod>
 801245e:	4603      	mov	r3, r0
 8012460:	460c      	mov	r4, r1
 8012462:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012464:	4b0a      	ldr	r3, [pc, #40]	; (8012490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	0c1b      	lsrs	r3, r3, #16
 801246a:	f003 0303 	and.w	r3, r3, #3
 801246e:	3301      	adds	r3, #1
 8012470:	005b      	lsls	r3, r3, #1
 8012472:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012474:	68fa      	ldr	r2, [r7, #12]
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	fbb2 f3f3 	udiv	r3, r2, r3
 801247c:	60bb      	str	r3, [r7, #8]
      break;
 801247e:	e002      	b.n	8012486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012480:	4b04      	ldr	r3, [pc, #16]	; (8012494 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8012482:	60bb      	str	r3, [r7, #8]
      break;
 8012484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012486:	68bb      	ldr	r3, [r7, #8]
}
 8012488:	4618      	mov	r0, r3
 801248a:	3714      	adds	r7, #20
 801248c:	46bd      	mov	sp, r7
 801248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012490:	40023800 	.word	0x40023800
 8012494:	00f42400 	.word	0x00f42400
 8012498:	007a1200 	.word	0x007a1200

0801249c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801249c:	b480      	push	{r7}
 801249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80124a0:	4b03      	ldr	r3, [pc, #12]	; (80124b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80124a2:	681b      	ldr	r3, [r3, #0]
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr
 80124ae:	bf00      	nop
 80124b0:	2000001c 	.word	0x2000001c

080124b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80124b8:	f7ff fff0 	bl	801249c <HAL_RCC_GetHCLKFreq>
 80124bc:	4601      	mov	r1, r0
 80124be:	4b05      	ldr	r3, [pc, #20]	; (80124d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80124c0:	689b      	ldr	r3, [r3, #8]
 80124c2:	0a9b      	lsrs	r3, r3, #10
 80124c4:	f003 0307 	and.w	r3, r3, #7
 80124c8:	4a03      	ldr	r2, [pc, #12]	; (80124d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80124ca:	5cd3      	ldrb	r3, [r2, r3]
 80124cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	40023800 	.word	0x40023800
 80124d8:	0801a5b4 	.word	0x0801a5b4

080124dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80124e0:	f7ff ffdc 	bl	801249c <HAL_RCC_GetHCLKFreq>
 80124e4:	4601      	mov	r1, r0
 80124e6:	4b05      	ldr	r3, [pc, #20]	; (80124fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	0b5b      	lsrs	r3, r3, #13
 80124ec:	f003 0307 	and.w	r3, r3, #7
 80124f0:	4a03      	ldr	r2, [pc, #12]	; (8012500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80124f2:	5cd3      	ldrb	r3, [r2, r3]
 80124f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	40023800 	.word	0x40023800
 8012500:	0801a5b4 	.word	0x0801a5b4

08012504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d101      	bne.n	8012516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012512:	2301      	movs	r3, #1
 8012514:	e056      	b.n	80125c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2200      	movs	r2, #0
 801251a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012522:	b2db      	uxtb	r3, r3
 8012524:	2b00      	cmp	r3, #0
 8012526:	d106      	bne.n	8012536 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2200      	movs	r2, #0
 801252c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f7fb ff73 	bl	800e41c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2202      	movs	r2, #2
 801253a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801254c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	685a      	ldr	r2, [r3, #4]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	689b      	ldr	r3, [r3, #8]
 8012556:	431a      	orrs	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	68db      	ldr	r3, [r3, #12]
 801255c:	431a      	orrs	r2, r3
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	691b      	ldr	r3, [r3, #16]
 8012562:	431a      	orrs	r2, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	695b      	ldr	r3, [r3, #20]
 8012568:	431a      	orrs	r2, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	699b      	ldr	r3, [r3, #24]
 801256e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012572:	431a      	orrs	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	69db      	ldr	r3, [r3, #28]
 8012578:	431a      	orrs	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6a1b      	ldr	r3, [r3, #32]
 801257e:	ea42 0103 	orr.w	r1, r2, r3
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	430a      	orrs	r2, r1
 801258c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	699b      	ldr	r3, [r3, #24]
 8012592:	0c1b      	lsrs	r3, r3, #16
 8012594:	f003 0104 	and.w	r1, r3, #4
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	430a      	orrs	r2, r1
 80125a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	69da      	ldr	r2, [r3, #28]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80125b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2201      	movs	r2, #1
 80125be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80125c2:	2300      	movs	r3, #0
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b088      	sub	sp, #32
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	603b      	str	r3, [r7, #0]
 80125d8:	4613      	mov	r3, r2
 80125da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80125dc:	2300      	movs	r3, #0
 80125de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d101      	bne.n	80125ee <HAL_SPI_Transmit+0x22>
 80125ea:	2302      	movs	r3, #2
 80125ec:	e11e      	b.n	801282c <HAL_SPI_Transmit+0x260>
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	2201      	movs	r2, #1
 80125f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80125f6:	f7fd fe11 	bl	801021c <HAL_GetTick>
 80125fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80125fc:	88fb      	ldrh	r3, [r7, #6]
 80125fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012606:	b2db      	uxtb	r3, r3
 8012608:	2b01      	cmp	r3, #1
 801260a:	d002      	beq.n	8012612 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801260c:	2302      	movs	r3, #2
 801260e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012610:	e103      	b.n	801281a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d002      	beq.n	801261e <HAL_SPI_Transmit+0x52>
 8012618:	88fb      	ldrh	r3, [r7, #6]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d102      	bne.n	8012624 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801261e:	2301      	movs	r3, #1
 8012620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012622:	e0fa      	b.n	801281a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2203      	movs	r2, #3
 8012628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	2200      	movs	r2, #0
 8012630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	88fa      	ldrh	r2, [r7, #6]
 801263c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	88fa      	ldrh	r2, [r7, #6]
 8012642:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2200      	movs	r2, #0
 8012648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	2200      	movs	r2, #0
 801264e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	2200      	movs	r2, #0
 8012654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	2200      	movs	r2, #0
 801265a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2200      	movs	r2, #0
 8012660:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801266a:	d107      	bne.n	801267c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801267a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012686:	2b40      	cmp	r3, #64	; 0x40
 8012688:	d007      	beq.n	801269a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80126a2:	d14b      	bne.n	801273c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d002      	beq.n	80126b2 <HAL_SPI_Transmit+0xe6>
 80126ac:	8afb      	ldrh	r3, [r7, #22]
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	d13e      	bne.n	8012730 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126b6:	881a      	ldrh	r2, [r3, #0]
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126c2:	1c9a      	adds	r2, r3, #2
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	3b01      	subs	r3, #1
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80126d6:	e02b      	b.n	8012730 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	689b      	ldr	r3, [r3, #8]
 80126de:	f003 0302 	and.w	r3, r3, #2
 80126e2:	2b02      	cmp	r3, #2
 80126e4:	d112      	bne.n	801270c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ea:	881a      	ldrh	r2, [r3, #0]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126f6:	1c9a      	adds	r2, r3, #2
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012700:	b29b      	uxth	r3, r3
 8012702:	3b01      	subs	r3, #1
 8012704:	b29a      	uxth	r2, r3
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	86da      	strh	r2, [r3, #54]	; 0x36
 801270a:	e011      	b.n	8012730 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801270c:	f7fd fd86 	bl	801021c <HAL_GetTick>
 8012710:	4602      	mov	r2, r0
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	1ad3      	subs	r3, r2, r3
 8012716:	683a      	ldr	r2, [r7, #0]
 8012718:	429a      	cmp	r2, r3
 801271a:	d803      	bhi.n	8012724 <HAL_SPI_Transmit+0x158>
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012722:	d102      	bne.n	801272a <HAL_SPI_Transmit+0x15e>
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d102      	bne.n	8012730 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801272a:	2303      	movs	r3, #3
 801272c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801272e:	e074      	b.n	801281a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012734:	b29b      	uxth	r3, r3
 8012736:	2b00      	cmp	r3, #0
 8012738:	d1ce      	bne.n	80126d8 <HAL_SPI_Transmit+0x10c>
 801273a:	e04c      	b.n	80127d6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <HAL_SPI_Transmit+0x17e>
 8012744:	8afb      	ldrh	r3, [r7, #22]
 8012746:	2b01      	cmp	r3, #1
 8012748:	d140      	bne.n	80127cc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	330c      	adds	r3, #12
 8012754:	7812      	ldrb	r2, [r2, #0]
 8012756:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801275c:	1c5a      	adds	r2, r3, #1
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012766:	b29b      	uxth	r3, r3
 8012768:	3b01      	subs	r3, #1
 801276a:	b29a      	uxth	r2, r3
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012770:	e02c      	b.n	80127cc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	f003 0302 	and.w	r3, r3, #2
 801277c:	2b02      	cmp	r3, #2
 801277e:	d113      	bne.n	80127a8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	330c      	adds	r3, #12
 801278a:	7812      	ldrb	r2, [r2, #0]
 801278c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012792:	1c5a      	adds	r2, r3, #1
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801279c:	b29b      	uxth	r3, r3
 801279e:	3b01      	subs	r3, #1
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80127a6:	e011      	b.n	80127cc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80127a8:	f7fd fd38 	bl	801021c <HAL_GetTick>
 80127ac:	4602      	mov	r2, r0
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	1ad3      	subs	r3, r2, r3
 80127b2:	683a      	ldr	r2, [r7, #0]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d803      	bhi.n	80127c0 <HAL_SPI_Transmit+0x1f4>
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127be:	d102      	bne.n	80127c6 <HAL_SPI_Transmit+0x1fa>
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d102      	bne.n	80127cc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80127c6:	2303      	movs	r3, #3
 80127c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80127ca:	e026      	b.n	801281a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1cd      	bne.n	8012772 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80127d6:	69ba      	ldr	r2, [r7, #24]
 80127d8:	6839      	ldr	r1, [r7, #0]
 80127da:	68f8      	ldr	r0, [r7, #12]
 80127dc:	f000 fba4 	bl	8012f28 <SPI_EndRxTxTransaction>
 80127e0:	4603      	mov	r3, r0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d002      	beq.n	80127ec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2220      	movs	r2, #32
 80127ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	689b      	ldr	r3, [r3, #8]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d10a      	bne.n	801280a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80127f4:	2300      	movs	r3, #0
 80127f6:	613b      	str	r3, [r7, #16]
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	613b      	str	r3, [r7, #16]
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	689b      	ldr	r3, [r3, #8]
 8012806:	613b      	str	r3, [r7, #16]
 8012808:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801280e:	2b00      	cmp	r3, #0
 8012810:	d002      	beq.n	8012818 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8012812:	2301      	movs	r3, #1
 8012814:	77fb      	strb	r3, [r7, #31]
 8012816:	e000      	b.n	801281a <HAL_SPI_Transmit+0x24e>
  }

error:
 8012818:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2201      	movs	r2, #1
 801281e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	2200      	movs	r2, #0
 8012826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801282a:	7ffb      	ldrb	r3, [r7, #31]
}
 801282c:	4618      	mov	r0, r3
 801282e:	3720      	adds	r7, #32
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b088      	sub	sp, #32
 8012838:	af02      	add	r7, sp, #8
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	603b      	str	r3, [r7, #0]
 8012840:	4613      	mov	r3, r2
 8012842:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012844:	2300      	movs	r3, #0
 8012846:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012850:	d112      	bne.n	8012878 <HAL_SPI_Receive+0x44>
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	689b      	ldr	r3, [r3, #8]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d10e      	bne.n	8012878 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	2204      	movs	r2, #4
 801285e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012862:	88fa      	ldrh	r2, [r7, #6]
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	9300      	str	r3, [sp, #0]
 8012868:	4613      	mov	r3, r2
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	68b9      	ldr	r1, [r7, #8]
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f000 f8e9 	bl	8012a46 <HAL_SPI_TransmitReceive>
 8012874:	4603      	mov	r3, r0
 8012876:	e0e2      	b.n	8012a3e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801287e:	2b01      	cmp	r3, #1
 8012880:	d101      	bne.n	8012886 <HAL_SPI_Receive+0x52>
 8012882:	2302      	movs	r3, #2
 8012884:	e0db      	b.n	8012a3e <HAL_SPI_Receive+0x20a>
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2201      	movs	r2, #1
 801288a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801288e:	f7fd fcc5 	bl	801021c <HAL_GetTick>
 8012892:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801289a:	b2db      	uxtb	r3, r3
 801289c:	2b01      	cmp	r3, #1
 801289e:	d002      	beq.n	80128a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80128a0:	2302      	movs	r3, #2
 80128a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80128a4:	e0c2      	b.n	8012a2c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d002      	beq.n	80128b2 <HAL_SPI_Receive+0x7e>
 80128ac:	88fb      	ldrh	r3, [r7, #6]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d102      	bne.n	80128b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80128b2:	2301      	movs	r3, #1
 80128b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80128b6:	e0b9      	b.n	8012a2c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	2204      	movs	r2, #4
 80128bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2200      	movs	r2, #0
 80128c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	68ba      	ldr	r2, [r7, #8]
 80128ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	88fa      	ldrh	r2, [r7, #6]
 80128d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	88fa      	ldrh	r2, [r7, #6]
 80128d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2200      	movs	r2, #0
 80128dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2200      	movs	r2, #0
 80128e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	2200      	movs	r2, #0
 80128e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2200      	movs	r2, #0
 80128ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	2200      	movs	r2, #0
 80128f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	689b      	ldr	r3, [r3, #8]
 80128fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80128fe:	d107      	bne.n	8012910 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801290e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801291a:	2b40      	cmp	r3, #64	; 0x40
 801291c:	d007      	beq.n	801292e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801292c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d162      	bne.n	80129fc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012936:	e02e      	b.n	8012996 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	689b      	ldr	r3, [r3, #8]
 801293e:	f003 0301 	and.w	r3, r3, #1
 8012942:	2b01      	cmp	r3, #1
 8012944:	d115      	bne.n	8012972 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f103 020c 	add.w	r2, r3, #12
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012952:	7812      	ldrb	r2, [r2, #0]
 8012954:	b2d2      	uxtb	r2, r2
 8012956:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801295c:	1c5a      	adds	r2, r3, #1
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012966:	b29b      	uxth	r3, r3
 8012968:	3b01      	subs	r3, #1
 801296a:	b29a      	uxth	r2, r3
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012970:	e011      	b.n	8012996 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012972:	f7fd fc53 	bl	801021c <HAL_GetTick>
 8012976:	4602      	mov	r2, r0
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	1ad3      	subs	r3, r2, r3
 801297c:	683a      	ldr	r2, [r7, #0]
 801297e:	429a      	cmp	r2, r3
 8012980:	d803      	bhi.n	801298a <HAL_SPI_Receive+0x156>
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012988:	d102      	bne.n	8012990 <HAL_SPI_Receive+0x15c>
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d102      	bne.n	8012996 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8012990:	2303      	movs	r3, #3
 8012992:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012994:	e04a      	b.n	8012a2c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801299a:	b29b      	uxth	r3, r3
 801299c:	2b00      	cmp	r3, #0
 801299e:	d1cb      	bne.n	8012938 <HAL_SPI_Receive+0x104>
 80129a0:	e031      	b.n	8012a06 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	689b      	ldr	r3, [r3, #8]
 80129a8:	f003 0301 	and.w	r3, r3, #1
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d113      	bne.n	80129d8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	68da      	ldr	r2, [r3, #12]
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ba:	b292      	uxth	r2, r2
 80129bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129c2:	1c9a      	adds	r2, r3, #2
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	3b01      	subs	r3, #1
 80129d0:	b29a      	uxth	r2, r3
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80129d6:	e011      	b.n	80129fc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80129d8:	f7fd fc20 	bl	801021c <HAL_GetTick>
 80129dc:	4602      	mov	r2, r0
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	1ad3      	subs	r3, r2, r3
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d803      	bhi.n	80129f0 <HAL_SPI_Receive+0x1bc>
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ee:	d102      	bne.n	80129f6 <HAL_SPI_Receive+0x1c2>
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d102      	bne.n	80129fc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80129f6:	2303      	movs	r3, #3
 80129f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80129fa:	e017      	b.n	8012a2c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d1cd      	bne.n	80129a2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012a06:	693a      	ldr	r2, [r7, #16]
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	68f8      	ldr	r0, [r7, #12]
 8012a0c:	f000 fa27 	bl	8012e5e <SPI_EndRxTransaction>
 8012a10:	4603      	mov	r3, r0
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d002      	beq.n	8012a1c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2220      	movs	r2, #32
 8012a1a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d002      	beq.n	8012a2a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8012a24:	2301      	movs	r3, #1
 8012a26:	75fb      	strb	r3, [r7, #23]
 8012a28:	e000      	b.n	8012a2c <HAL_SPI_Receive+0x1f8>
  }

error :
 8012a2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	2200      	movs	r2, #0
 8012a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3718      	adds	r7, #24
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}

08012a46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012a46:	b580      	push	{r7, lr}
 8012a48:	b08c      	sub	sp, #48	; 0x30
 8012a4a:	af00      	add	r7, sp, #0
 8012a4c:	60f8      	str	r0, [r7, #12]
 8012a4e:	60b9      	str	r1, [r7, #8]
 8012a50:	607a      	str	r2, [r7, #4]
 8012a52:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8012a54:	2301      	movs	r3, #1
 8012a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	d101      	bne.n	8012a6c <HAL_SPI_TransmitReceive+0x26>
 8012a68:	2302      	movs	r3, #2
 8012a6a:	e18a      	b.n	8012d82 <HAL_SPI_TransmitReceive+0x33c>
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	2201      	movs	r2, #1
 8012a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012a74:	f7fd fbd2 	bl	801021c <HAL_GetTick>
 8012a78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8012a8a:	887b      	ldrh	r3, [r7, #2]
 8012a8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d00f      	beq.n	8012ab6 <HAL_SPI_TransmitReceive+0x70>
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012a9c:	d107      	bne.n	8012aae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	689b      	ldr	r3, [r3, #8]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d103      	bne.n	8012aae <HAL_SPI_TransmitReceive+0x68>
 8012aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012aaa:	2b04      	cmp	r3, #4
 8012aac:	d003      	beq.n	8012ab6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8012aae:	2302      	movs	r3, #2
 8012ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012ab4:	e15b      	b.n	8012d6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d005      	beq.n	8012ac8 <HAL_SPI_TransmitReceive+0x82>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d002      	beq.n	8012ac8 <HAL_SPI_TransmitReceive+0x82>
 8012ac2:	887b      	ldrh	r3, [r7, #2]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d103      	bne.n	8012ad0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012ace:	e14e      	b.n	8012d6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	2b04      	cmp	r3, #4
 8012ada:	d003      	beq.n	8012ae4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2205      	movs	r2, #5
 8012ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	887a      	ldrh	r2, [r7, #2]
 8012af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	887a      	ldrh	r2, [r7, #2]
 8012afa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	68ba      	ldr	r2, [r7, #8]
 8012b00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	887a      	ldrh	r2, [r7, #2]
 8012b06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	887a      	ldrh	r2, [r7, #2]
 8012b0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	2200      	movs	r2, #0
 8012b12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2200      	movs	r2, #0
 8012b18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b24:	2b40      	cmp	r3, #64	; 0x40
 8012b26:	d007      	beq.n	8012b38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	681a      	ldr	r2, [r3, #0]
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b40:	d178      	bne.n	8012c34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d002      	beq.n	8012b50 <HAL_SPI_TransmitReceive+0x10a>
 8012b4a:	8b7b      	ldrh	r3, [r7, #26]
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d166      	bne.n	8012c1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b54:	881a      	ldrh	r2, [r3, #0]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b60:	1c9a      	adds	r2, r3, #2
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	3b01      	subs	r3, #1
 8012b6e:	b29a      	uxth	r2, r3
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012b74:	e053      	b.n	8012c1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	f003 0302 	and.w	r3, r3, #2
 8012b80:	2b02      	cmp	r3, #2
 8012b82:	d11b      	bne.n	8012bbc <HAL_SPI_TransmitReceive+0x176>
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d016      	beq.n	8012bbc <HAL_SPI_TransmitReceive+0x176>
 8012b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d113      	bne.n	8012bbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b98:	881a      	ldrh	r2, [r3, #0]
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ba4:	1c9a      	adds	r2, r3, #2
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	3b01      	subs	r3, #1
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	689b      	ldr	r3, [r3, #8]
 8012bc2:	f003 0301 	and.w	r3, r3, #1
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d119      	bne.n	8012bfe <HAL_SPI_TransmitReceive+0x1b8>
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d014      	beq.n	8012bfe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	68da      	ldr	r2, [r3, #12]
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bde:	b292      	uxth	r2, r2
 8012be0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012be6:	1c9a      	adds	r2, r3, #2
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	3b01      	subs	r3, #1
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012bfe:	f7fd fb0d 	bl	801021c <HAL_GetTick>
 8012c02:	4602      	mov	r2, r0
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d807      	bhi.n	8012c1e <HAL_SPI_TransmitReceive+0x1d8>
 8012c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c14:	d003      	beq.n	8012c1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8012c16:	2303      	movs	r3, #3
 8012c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8012c1c:	e0a7      	b.n	8012d6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d1a6      	bne.n	8012b76 <HAL_SPI_TransmitReceive+0x130>
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d1a1      	bne.n	8012b76 <HAL_SPI_TransmitReceive+0x130>
 8012c32:	e07c      	b.n	8012d2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d002      	beq.n	8012c42 <HAL_SPI_TransmitReceive+0x1fc>
 8012c3c:	8b7b      	ldrh	r3, [r7, #26]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d16b      	bne.n	8012d1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	330c      	adds	r3, #12
 8012c4c:	7812      	ldrb	r2, [r2, #0]
 8012c4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c54:	1c5a      	adds	r2, r3, #1
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	3b01      	subs	r3, #1
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012c68:	e057      	b.n	8012d1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	f003 0302 	and.w	r3, r3, #2
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	d11c      	bne.n	8012cb2 <HAL_SPI_TransmitReceive+0x26c>
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d017      	beq.n	8012cb2 <HAL_SPI_TransmitReceive+0x26c>
 8012c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d114      	bne.n	8012cb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	330c      	adds	r3, #12
 8012c92:	7812      	ldrb	r2, [r2, #0]
 8012c94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c9a:	1c5a      	adds	r2, r3, #1
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	3b01      	subs	r3, #1
 8012ca8:	b29a      	uxth	r2, r3
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	f003 0301 	and.w	r3, r3, #1
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d119      	bne.n	8012cf4 <HAL_SPI_TransmitReceive+0x2ae>
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d014      	beq.n	8012cf4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	68da      	ldr	r2, [r3, #12]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cd4:	b2d2      	uxtb	r2, r2
 8012cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cdc:	1c5a      	adds	r2, r3, #1
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	b29a      	uxth	r2, r3
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012cf4:	f7fd fa92 	bl	801021c <HAL_GetTick>
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d803      	bhi.n	8012d0c <HAL_SPI_TransmitReceive+0x2c6>
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d0a:	d102      	bne.n	8012d12 <HAL_SPI_TransmitReceive+0x2cc>
 8012d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d103      	bne.n	8012d1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8012d12:	2303      	movs	r3, #3
 8012d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8012d18:	e029      	b.n	8012d6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d1e:	b29b      	uxth	r3, r3
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d1a2      	bne.n	8012c6a <HAL_SPI_TransmitReceive+0x224>
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d19d      	bne.n	8012c6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d32:	68f8      	ldr	r0, [r7, #12]
 8012d34:	f000 f8f8 	bl	8012f28 <SPI_EndRxTxTransaction>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d006      	beq.n	8012d4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	2220      	movs	r2, #32
 8012d48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8012d4a:	e010      	b.n	8012d6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d10b      	bne.n	8012d6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012d54:	2300      	movs	r3, #0
 8012d56:	617b      	str	r3, [r7, #20]
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	617b      	str	r3, [r7, #20]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	689b      	ldr	r3, [r3, #8]
 8012d66:	617b      	str	r3, [r7, #20]
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	e000      	b.n	8012d6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8012d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	2201      	movs	r2, #1
 8012d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	3730      	adds	r7, #48	; 0x30
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}

08012d8a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012d8a:	b580      	push	{r7, lr}
 8012d8c:	b084      	sub	sp, #16
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	60f8      	str	r0, [r7, #12]
 8012d92:	60b9      	str	r1, [r7, #8]
 8012d94:	603b      	str	r3, [r7, #0]
 8012d96:	4613      	mov	r3, r2
 8012d98:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012d9a:	e04c      	b.n	8012e36 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012da2:	d048      	beq.n	8012e36 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8012da4:	f7fd fa3a 	bl	801021c <HAL_GetTick>
 8012da8:	4602      	mov	r2, r0
 8012daa:	69bb      	ldr	r3, [r7, #24]
 8012dac:	1ad3      	subs	r3, r2, r3
 8012dae:	683a      	ldr	r2, [r7, #0]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d902      	bls.n	8012dba <SPI_WaitFlagStateUntilTimeout+0x30>
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d13d      	bne.n	8012e36 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	685a      	ldr	r2, [r3, #4]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012dd2:	d111      	bne.n	8012df8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ddc:	d004      	beq.n	8012de8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012de6:	d107      	bne.n	8012df8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	681a      	ldr	r2, [r3, #0]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012df6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012e00:	d10f      	bne.n	8012e22 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2201      	movs	r2, #1
 8012e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8012e32:	2303      	movs	r3, #3
 8012e34:	e00f      	b.n	8012e56 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	689a      	ldr	r2, [r3, #8]
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	4013      	ands	r3, r2
 8012e40:	68ba      	ldr	r2, [r7, #8]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	bf0c      	ite	eq
 8012e46:	2301      	moveq	r3, #1
 8012e48:	2300      	movne	r3, #0
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	79fb      	ldrb	r3, [r7, #7]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d1a3      	bne.n	8012d9c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3710      	adds	r7, #16
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b086      	sub	sp, #24
 8012e62:	af02      	add	r7, sp, #8
 8012e64:	60f8      	str	r0, [r7, #12]
 8012e66:	60b9      	str	r1, [r7, #8]
 8012e68:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	685b      	ldr	r3, [r3, #4]
 8012e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e72:	d111      	bne.n	8012e98 <SPI_EndRxTransaction+0x3a>
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	689b      	ldr	r3, [r3, #8]
 8012e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e7c:	d004      	beq.n	8012e88 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	689b      	ldr	r3, [r3, #8]
 8012e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e86:	d107      	bne.n	8012e98 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e96:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012ea0:	d12a      	bne.n	8012ef8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	689b      	ldr	r3, [r3, #8]
 8012ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012eaa:	d012      	beq.n	8012ed2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	9300      	str	r3, [sp, #0]
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	2180      	movs	r1, #128	; 0x80
 8012eb6:	68f8      	ldr	r0, [r7, #12]
 8012eb8:	f7ff ff67 	bl	8012d8a <SPI_WaitFlagStateUntilTimeout>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d02d      	beq.n	8012f1e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ec6:	f043 0220 	orr.w	r2, r3, #32
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012ece:	2303      	movs	r3, #3
 8012ed0:	e026      	b.n	8012f20 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	2101      	movs	r1, #1
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f7ff ff54 	bl	8012d8a <SPI_WaitFlagStateUntilTimeout>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d01a      	beq.n	8012f1e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eec:	f043 0220 	orr.w	r2, r3, #32
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012ef4:	2303      	movs	r3, #3
 8012ef6:	e013      	b.n	8012f20 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	2200      	movs	r2, #0
 8012f00:	2101      	movs	r1, #1
 8012f02:	68f8      	ldr	r0, [r7, #12]
 8012f04:	f7ff ff41 	bl	8012d8a <SPI_WaitFlagStateUntilTimeout>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d007      	beq.n	8012f1e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f12:	f043 0220 	orr.w	r2, r3, #32
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012f1a:	2303      	movs	r3, #3
 8012f1c:	e000      	b.n	8012f20 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8012f1e:	2300      	movs	r3, #0
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	3710      	adds	r7, #16
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}

08012f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b088      	sub	sp, #32
 8012f2c:	af02      	add	r7, sp, #8
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012f34:	4b1b      	ldr	r3, [pc, #108]	; (8012fa4 <SPI_EndRxTxTransaction+0x7c>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4a1b      	ldr	r2, [pc, #108]	; (8012fa8 <SPI_EndRxTxTransaction+0x80>)
 8012f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8012f3e:	0d5b      	lsrs	r3, r3, #21
 8012f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012f44:	fb02 f303 	mul.w	r3, r2, r3
 8012f48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012f52:	d112      	bne.n	8012f7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	2180      	movs	r1, #128	; 0x80
 8012f5e:	68f8      	ldr	r0, [r7, #12]
 8012f60:	f7ff ff13 	bl	8012d8a <SPI_WaitFlagStateUntilTimeout>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d016      	beq.n	8012f98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f6e:	f043 0220 	orr.w	r2, r3, #32
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012f76:	2303      	movs	r3, #3
 8012f78:	e00f      	b.n	8012f9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d00a      	beq.n	8012f96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	3b01      	subs	r3, #1
 8012f84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	689b      	ldr	r3, [r3, #8]
 8012f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f90:	2b80      	cmp	r3, #128	; 0x80
 8012f92:	d0f2      	beq.n	8012f7a <SPI_EndRxTxTransaction+0x52>
 8012f94:	e000      	b.n	8012f98 <SPI_EndRxTxTransaction+0x70>
        break;
 8012f96:	bf00      	nop
  }

  return HAL_OK;
 8012f98:	2300      	movs	r3, #0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3718      	adds	r7, #24
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	2000001c 	.word	0x2000001c
 8012fa8:	165e9f81 	.word	0x165e9f81

08012fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d101      	bne.n	8012fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012fba:	2301      	movs	r3, #1
 8012fbc:	e01d      	b.n	8012ffa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d106      	bne.n	8012fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7fb fa6a 	bl	800e4ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2202      	movs	r2, #2
 8012fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	3304      	adds	r3, #4
 8012fe8:	4619      	mov	r1, r3
 8012fea:	4610      	mov	r0, r2
 8012fec:	f000 fe96 	bl	8013d1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012ff8:	2300      	movs	r3, #0
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3708      	adds	r7, #8
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}

08013002 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013002:	b480      	push	{r7}
 8013004:	b085      	sub	sp, #20
 8013006:	af00      	add	r7, sp, #0
 8013008:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	68da      	ldr	r2, [r3, #12]
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f042 0201 	orr.w	r2, r2, #1
 8013018:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	689b      	ldr	r3, [r3, #8]
 8013020:	f003 0307 	and.w	r3, r3, #7
 8013024:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2b06      	cmp	r3, #6
 801302a:	d007      	beq.n	801303c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	f042 0201 	orr.w	r2, r2, #1
 801303a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	3714      	adds	r7, #20
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr

0801304a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801304a:	b480      	push	{r7}
 801304c:	b083      	sub	sp, #12
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	68da      	ldr	r2, [r3, #12]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	f022 0201 	bic.w	r2, r2, #1
 8013060:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	6a1a      	ldr	r2, [r3, #32]
 8013068:	f241 1311 	movw	r3, #4369	; 0x1111
 801306c:	4013      	ands	r3, r2
 801306e:	2b00      	cmp	r3, #0
 8013070:	d10f      	bne.n	8013092 <HAL_TIM_Base_Stop_IT+0x48>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	6a1a      	ldr	r2, [r3, #32]
 8013078:	f240 4344 	movw	r3, #1092	; 0x444
 801307c:	4013      	ands	r3, r2
 801307e:	2b00      	cmp	r3, #0
 8013080:	d107      	bne.n	8013092 <HAL_TIM_Base_Stop_IT+0x48>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	681a      	ldr	r2, [r3, #0]
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f022 0201 	bic.w	r2, r2, #1
 8013090:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013092:	2300      	movs	r3, #0
}
 8013094:	4618      	mov	r0, r3
 8013096:	370c      	adds	r7, #12
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr

080130a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d101      	bne.n	80130b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80130ae:	2301      	movs	r3, #1
 80130b0:	e01d      	b.n	80130ee <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130b8:	b2db      	uxtb	r3, r3
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d106      	bne.n	80130cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2200      	movs	r2, #0
 80130c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f000 f815 	bl	80130f6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2202      	movs	r2, #2
 80130d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	3304      	adds	r3, #4
 80130dc:	4619      	mov	r1, r3
 80130de:	4610      	mov	r0, r2
 80130e0:	f000 fe1c 	bl	8013d1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2201      	movs	r2, #1
 80130e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80130ec:	2300      	movs	r3, #0
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3708      	adds	r7, #8
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}

080130f6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80130f6:	b480      	push	{r7}
 80130f8:	b083      	sub	sp, #12
 80130fa:	af00      	add	r7, sp, #0
 80130fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80130fe:	bf00      	nop
 8013100:	370c      	adds	r7, #12
 8013102:	46bd      	mov	sp, r7
 8013104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013108:	4770      	bx	lr
	...

0801310c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	2b0c      	cmp	r3, #12
 801311a:	d841      	bhi.n	80131a0 <HAL_TIM_OC_Start_IT+0x94>
 801311c:	a201      	add	r2, pc, #4	; (adr r2, 8013124 <HAL_TIM_OC_Start_IT+0x18>)
 801311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013122:	bf00      	nop
 8013124:	08013159 	.word	0x08013159
 8013128:	080131a1 	.word	0x080131a1
 801312c:	080131a1 	.word	0x080131a1
 8013130:	080131a1 	.word	0x080131a1
 8013134:	0801316b 	.word	0x0801316b
 8013138:	080131a1 	.word	0x080131a1
 801313c:	080131a1 	.word	0x080131a1
 8013140:	080131a1 	.word	0x080131a1
 8013144:	0801317d 	.word	0x0801317d
 8013148:	080131a1 	.word	0x080131a1
 801314c:	080131a1 	.word	0x080131a1
 8013150:	080131a1 	.word	0x080131a1
 8013154:	0801318f 	.word	0x0801318f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68da      	ldr	r2, [r3, #12]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	f042 0202 	orr.w	r2, r2, #2
 8013166:	60da      	str	r2, [r3, #12]
      break;
 8013168:	e01b      	b.n	80131a2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	68da      	ldr	r2, [r3, #12]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f042 0204 	orr.w	r2, r2, #4
 8013178:	60da      	str	r2, [r3, #12]
      break;
 801317a:	e012      	b.n	80131a2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	68da      	ldr	r2, [r3, #12]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	f042 0208 	orr.w	r2, r2, #8
 801318a:	60da      	str	r2, [r3, #12]
      break;
 801318c:	e009      	b.n	80131a2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	68da      	ldr	r2, [r3, #12]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f042 0210 	orr.w	r2, r2, #16
 801319c:	60da      	str	r2, [r3, #12]
      break;
 801319e:	e000      	b.n	80131a2 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80131a0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	2201      	movs	r2, #1
 80131a8:	6839      	ldr	r1, [r7, #0]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f001 f8a0 	bl	80142f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a15      	ldr	r2, [pc, #84]	; (801320c <HAL_TIM_OC_Start_IT+0x100>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d004      	beq.n	80131c4 <HAL_TIM_OC_Start_IT+0xb8>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	4a14      	ldr	r2, [pc, #80]	; (8013210 <HAL_TIM_OC_Start_IT+0x104>)
 80131c0:	4293      	cmp	r3, r2
 80131c2:	d101      	bne.n	80131c8 <HAL_TIM_OC_Start_IT+0xbc>
 80131c4:	2301      	movs	r3, #1
 80131c6:	e000      	b.n	80131ca <HAL_TIM_OC_Start_IT+0xbe>
 80131c8:	2300      	movs	r3, #0
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d007      	beq.n	80131de <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80131dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	689b      	ldr	r3, [r3, #8]
 80131e4:	f003 0307 	and.w	r3, r3, #7
 80131e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2b06      	cmp	r3, #6
 80131ee:	d007      	beq.n	8013200 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f042 0201 	orr.w	r2, r2, #1
 80131fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013200:	2300      	movs	r3, #0
}
 8013202:	4618      	mov	r0, r3
 8013204:	3710      	adds	r7, #16
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	40010000 	.word	0x40010000
 8013210:	40010400 	.word	0x40010400

08013214 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	2b0c      	cmp	r3, #12
 8013222:	d841      	bhi.n	80132a8 <HAL_TIM_OC_Stop_IT+0x94>
 8013224:	a201      	add	r2, pc, #4	; (adr r2, 801322c <HAL_TIM_OC_Stop_IT+0x18>)
 8013226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801322a:	bf00      	nop
 801322c:	08013261 	.word	0x08013261
 8013230:	080132a9 	.word	0x080132a9
 8013234:	080132a9 	.word	0x080132a9
 8013238:	080132a9 	.word	0x080132a9
 801323c:	08013273 	.word	0x08013273
 8013240:	080132a9 	.word	0x080132a9
 8013244:	080132a9 	.word	0x080132a9
 8013248:	080132a9 	.word	0x080132a9
 801324c:	08013285 	.word	0x08013285
 8013250:	080132a9 	.word	0x080132a9
 8013254:	080132a9 	.word	0x080132a9
 8013258:	080132a9 	.word	0x080132a9
 801325c:	08013297 	.word	0x08013297
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	68da      	ldr	r2, [r3, #12]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f022 0202 	bic.w	r2, r2, #2
 801326e:	60da      	str	r2, [r3, #12]
      break;
 8013270:	e01b      	b.n	80132aa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	68da      	ldr	r2, [r3, #12]
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f022 0204 	bic.w	r2, r2, #4
 8013280:	60da      	str	r2, [r3, #12]
      break;
 8013282:	e012      	b.n	80132aa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	68da      	ldr	r2, [r3, #12]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f022 0208 	bic.w	r2, r2, #8
 8013292:	60da      	str	r2, [r3, #12]
      break;
 8013294:	e009      	b.n	80132aa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	68da      	ldr	r2, [r3, #12]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f022 0210 	bic.w	r2, r2, #16
 80132a4:	60da      	str	r2, [r3, #12]
      break;
 80132a6:	e000      	b.n	80132aa <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80132a8:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2200      	movs	r2, #0
 80132b0:	6839      	ldr	r1, [r7, #0]
 80132b2:	4618      	mov	r0, r3
 80132b4:	f001 f81c 	bl	80142f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	4a20      	ldr	r2, [pc, #128]	; (8013340 <HAL_TIM_OC_Stop_IT+0x12c>)
 80132be:	4293      	cmp	r3, r2
 80132c0:	d004      	beq.n	80132cc <HAL_TIM_OC_Stop_IT+0xb8>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	4a1f      	ldr	r2, [pc, #124]	; (8013344 <HAL_TIM_OC_Stop_IT+0x130>)
 80132c8:	4293      	cmp	r3, r2
 80132ca:	d101      	bne.n	80132d0 <HAL_TIM_OC_Stop_IT+0xbc>
 80132cc:	2301      	movs	r3, #1
 80132ce:	e000      	b.n	80132d2 <HAL_TIM_OC_Stop_IT+0xbe>
 80132d0:	2300      	movs	r3, #0
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d017      	beq.n	8013306 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	6a1a      	ldr	r2, [r3, #32]
 80132dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80132e0:	4013      	ands	r3, r2
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d10f      	bne.n	8013306 <HAL_TIM_OC_Stop_IT+0xf2>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	6a1a      	ldr	r2, [r3, #32]
 80132ec:	f240 4344 	movw	r3, #1092	; 0x444
 80132f0:	4013      	ands	r3, r2
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d107      	bne.n	8013306 <HAL_TIM_OC_Stop_IT+0xf2>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013304:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	6a1a      	ldr	r2, [r3, #32]
 801330c:	f241 1311 	movw	r3, #4369	; 0x1111
 8013310:	4013      	ands	r3, r2
 8013312:	2b00      	cmp	r3, #0
 8013314:	d10f      	bne.n	8013336 <HAL_TIM_OC_Stop_IT+0x122>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	6a1a      	ldr	r2, [r3, #32]
 801331c:	f240 4344 	movw	r3, #1092	; 0x444
 8013320:	4013      	ands	r3, r2
 8013322:	2b00      	cmp	r3, #0
 8013324:	d107      	bne.n	8013336 <HAL_TIM_OC_Stop_IT+0x122>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	681a      	ldr	r2, [r3, #0]
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	f022 0201 	bic.w	r2, r2, #1
 8013334:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013336:	2300      	movs	r3, #0
}
 8013338:	4618      	mov	r0, r3
 801333a:	3708      	adds	r7, #8
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	40010000 	.word	0x40010000
 8013344:	40010400 	.word	0x40010400

08013348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d101      	bne.n	801335a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013356:	2301      	movs	r3, #1
 8013358:	e01d      	b.n	8013396 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013360:	b2db      	uxtb	r3, r3
 8013362:	2b00      	cmp	r3, #0
 8013364:	d106      	bne.n	8013374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2200      	movs	r2, #0
 801336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 f815 	bl	801339e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2202      	movs	r2, #2
 8013378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681a      	ldr	r2, [r3, #0]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	3304      	adds	r3, #4
 8013384:	4619      	mov	r1, r3
 8013386:	4610      	mov	r0, r2
 8013388:	f000 fcc8 	bl	8013d1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2201      	movs	r2, #1
 8013390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013394:	2300      	movs	r3, #0
}
 8013396:	4618      	mov	r0, r3
 8013398:	3708      	adds	r7, #8
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}

0801339e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801339e:	b480      	push	{r7}
 80133a0:	b083      	sub	sp, #12
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80133a6:	bf00      	nop
 80133a8:	370c      	adds	r7, #12
 80133aa:	46bd      	mov	sp, r7
 80133ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b0:	4770      	bx	lr
	...

080133b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b084      	sub	sp, #16
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2201      	movs	r2, #1
 80133c4:	6839      	ldr	r1, [r7, #0]
 80133c6:	4618      	mov	r0, r3
 80133c8:	f000 ff92 	bl	80142f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	4a15      	ldr	r2, [pc, #84]	; (8013428 <HAL_TIM_PWM_Start+0x74>)
 80133d2:	4293      	cmp	r3, r2
 80133d4:	d004      	beq.n	80133e0 <HAL_TIM_PWM_Start+0x2c>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	4a14      	ldr	r2, [pc, #80]	; (801342c <HAL_TIM_PWM_Start+0x78>)
 80133dc:	4293      	cmp	r3, r2
 80133de:	d101      	bne.n	80133e4 <HAL_TIM_PWM_Start+0x30>
 80133e0:	2301      	movs	r3, #1
 80133e2:	e000      	b.n	80133e6 <HAL_TIM_PWM_Start+0x32>
 80133e4:	2300      	movs	r3, #0
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d007      	beq.n	80133fa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80133f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	f003 0307 	and.w	r3, r3, #7
 8013404:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2b06      	cmp	r3, #6
 801340a:	d007      	beq.n	801341c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	f042 0201 	orr.w	r2, r2, #1
 801341a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801341c:	2300      	movs	r3, #0
}
 801341e:	4618      	mov	r0, r3
 8013420:	3710      	adds	r7, #16
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	40010000 	.word	0x40010000
 801342c:	40010400 	.word	0x40010400

08013430 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2200      	movs	r2, #0
 8013440:	6839      	ldr	r1, [r7, #0]
 8013442:	4618      	mov	r0, r3
 8013444:	f000 ff54 	bl	80142f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4a22      	ldr	r2, [pc, #136]	; (80134d8 <HAL_TIM_PWM_Stop+0xa8>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d004      	beq.n	801345c <HAL_TIM_PWM_Stop+0x2c>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	4a21      	ldr	r2, [pc, #132]	; (80134dc <HAL_TIM_PWM_Stop+0xac>)
 8013458:	4293      	cmp	r3, r2
 801345a:	d101      	bne.n	8013460 <HAL_TIM_PWM_Stop+0x30>
 801345c:	2301      	movs	r3, #1
 801345e:	e000      	b.n	8013462 <HAL_TIM_PWM_Stop+0x32>
 8013460:	2300      	movs	r3, #0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d017      	beq.n	8013496 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	6a1a      	ldr	r2, [r3, #32]
 801346c:	f241 1311 	movw	r3, #4369	; 0x1111
 8013470:	4013      	ands	r3, r2
 8013472:	2b00      	cmp	r3, #0
 8013474:	d10f      	bne.n	8013496 <HAL_TIM_PWM_Stop+0x66>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	6a1a      	ldr	r2, [r3, #32]
 801347c:	f240 4344 	movw	r3, #1092	; 0x444
 8013480:	4013      	ands	r3, r2
 8013482:	2b00      	cmp	r3, #0
 8013484:	d107      	bne.n	8013496 <HAL_TIM_PWM_Stop+0x66>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013494:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	6a1a      	ldr	r2, [r3, #32]
 801349c:	f241 1311 	movw	r3, #4369	; 0x1111
 80134a0:	4013      	ands	r3, r2
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d10f      	bne.n	80134c6 <HAL_TIM_PWM_Stop+0x96>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	6a1a      	ldr	r2, [r3, #32]
 80134ac:	f240 4344 	movw	r3, #1092	; 0x444
 80134b0:	4013      	ands	r3, r2
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d107      	bne.n	80134c6 <HAL_TIM_PWM_Stop+0x96>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	f022 0201 	bic.w	r2, r2, #1
 80134c4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2201      	movs	r2, #1
 80134ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	40010000 	.word	0x40010000
 80134dc:	40010400 	.word	0x40010400

080134e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b086      	sub	sp, #24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d101      	bne.n	80134f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80134f0:	2301      	movs	r3, #1
 80134f2:	e083      	b.n	80135fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d106      	bne.n	801350e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2200      	movs	r2, #0
 8013504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f7fb f83f 	bl	800e58c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2202      	movs	r2, #2
 8013512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	6812      	ldr	r2, [r2, #0]
 8013520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013524:	f023 0307 	bic.w	r3, r3, #7
 8013528:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	3304      	adds	r3, #4
 8013532:	4619      	mov	r1, r3
 8013534:	4610      	mov	r0, r2
 8013536:	f000 fbf1 	bl	8013d1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	689b      	ldr	r3, [r3, #8]
 8013540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	699b      	ldr	r3, [r3, #24]
 8013548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	6a1b      	ldr	r3, [r3, #32]
 8013550:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	4313      	orrs	r3, r2
 801355a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013562:	f023 0303 	bic.w	r3, r3, #3
 8013566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	689a      	ldr	r2, [r3, #8]
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	699b      	ldr	r3, [r3, #24]
 8013570:	021b      	lsls	r3, r3, #8
 8013572:	4313      	orrs	r3, r2
 8013574:	693a      	ldr	r2, [r7, #16]
 8013576:	4313      	orrs	r3, r2
 8013578:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013580:	f023 030c 	bic.w	r3, r3, #12
 8013584:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801358c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	68da      	ldr	r2, [r3, #12]
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	69db      	ldr	r3, [r3, #28]
 801359a:	021b      	lsls	r3, r3, #8
 801359c:	4313      	orrs	r3, r2
 801359e:	693a      	ldr	r2, [r7, #16]
 80135a0:	4313      	orrs	r3, r2
 80135a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	691b      	ldr	r3, [r3, #16]
 80135a8:	011a      	lsls	r2, r3, #4
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	6a1b      	ldr	r3, [r3, #32]
 80135ae:	031b      	lsls	r3, r3, #12
 80135b0:	4313      	orrs	r3, r2
 80135b2:	693a      	ldr	r2, [r7, #16]
 80135b4:	4313      	orrs	r3, r2
 80135b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80135be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80135c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	685a      	ldr	r2, [r3, #4]
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	695b      	ldr	r3, [r3, #20]
 80135d0:	011b      	lsls	r3, r3, #4
 80135d2:	4313      	orrs	r3, r2
 80135d4:	68fa      	ldr	r2, [r7, #12]
 80135d6:	4313      	orrs	r3, r2
 80135d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	697a      	ldr	r2, [r7, #20]
 80135e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	68fa      	ldr	r2, [r7, #12]
 80135f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2201      	movs	r2, #1
 80135f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80135fa:	2300      	movs	r3, #0
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3718      	adds	r7, #24
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}

08013604 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b082      	sub	sp, #8
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d002      	beq.n	801361a <HAL_TIM_Encoder_Start+0x16>
 8013614:	2b04      	cmp	r3, #4
 8013616:	d008      	beq.n	801362a <HAL_TIM_Encoder_Start+0x26>
 8013618:	e00f      	b.n	801363a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2201      	movs	r2, #1
 8013620:	2100      	movs	r1, #0
 8013622:	4618      	mov	r0, r3
 8013624:	f000 fe64 	bl	80142f0 <TIM_CCxChannelCmd>
      break;
 8013628:	e016      	b.n	8013658 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	2201      	movs	r2, #1
 8013630:	2104      	movs	r1, #4
 8013632:	4618      	mov	r0, r3
 8013634:	f000 fe5c 	bl	80142f0 <TIM_CCxChannelCmd>
      break;
 8013638:	e00e      	b.n	8013658 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2201      	movs	r2, #1
 8013640:	2100      	movs	r1, #0
 8013642:	4618      	mov	r0, r3
 8013644:	f000 fe54 	bl	80142f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	2201      	movs	r2, #1
 801364e:	2104      	movs	r1, #4
 8013650:	4618      	mov	r0, r3
 8013652:	f000 fe4d 	bl	80142f0 <TIM_CCxChannelCmd>
      break;
 8013656:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f042 0201 	orr.w	r2, r2, #1
 8013666:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	3708      	adds	r7, #8
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}

08013672 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013672:	b580      	push	{r7, lr}
 8013674:	b082      	sub	sp, #8
 8013676:	af00      	add	r7, sp, #0
 8013678:	6078      	str	r0, [r7, #4]
 801367a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d002      	beq.n	8013688 <HAL_TIM_Encoder_Stop+0x16>
 8013682:	2b04      	cmp	r3, #4
 8013684:	d008      	beq.n	8013698 <HAL_TIM_Encoder_Stop+0x26>
 8013686:	e00f      	b.n	80136a8 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2200      	movs	r2, #0
 801368e:	2100      	movs	r1, #0
 8013690:	4618      	mov	r0, r3
 8013692:	f000 fe2d 	bl	80142f0 <TIM_CCxChannelCmd>
      break;
 8013696:	e016      	b.n	80136c6 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2200      	movs	r2, #0
 801369e:	2104      	movs	r1, #4
 80136a0:	4618      	mov	r0, r3
 80136a2:	f000 fe25 	bl	80142f0 <TIM_CCxChannelCmd>
      break;
 80136a6:	e00e      	b.n	80136c6 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2200      	movs	r2, #0
 80136ae:	2100      	movs	r1, #0
 80136b0:	4618      	mov	r0, r3
 80136b2:	f000 fe1d 	bl	80142f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	2200      	movs	r2, #0
 80136bc:	2104      	movs	r1, #4
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 fe16 	bl	80142f0 <TIM_CCxChannelCmd>
      break;
 80136c4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	6a1a      	ldr	r2, [r3, #32]
 80136cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80136d0:	4013      	ands	r3, r2
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d10f      	bne.n	80136f6 <HAL_TIM_Encoder_Stop+0x84>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	6a1a      	ldr	r2, [r3, #32]
 80136dc:	f240 4344 	movw	r3, #1092	; 0x444
 80136e0:	4013      	ands	r3, r2
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d107      	bne.n	80136f6 <HAL_TIM_Encoder_Stop+0x84>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f022 0201 	bic.w	r2, r2, #1
 80136f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80136f6:	2300      	movs	r3, #0
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3708      	adds	r7, #8
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	691b      	ldr	r3, [r3, #16]
 801370e:	f003 0302 	and.w	r3, r3, #2
 8013712:	2b02      	cmp	r3, #2
 8013714:	d122      	bne.n	801375c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	f003 0302 	and.w	r3, r3, #2
 8013720:	2b02      	cmp	r3, #2
 8013722:	d11b      	bne.n	801375c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f06f 0202 	mvn.w	r2, #2
 801372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2201      	movs	r2, #1
 8013732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	699b      	ldr	r3, [r3, #24]
 801373a:	f003 0303 	and.w	r3, r3, #3
 801373e:	2b00      	cmp	r3, #0
 8013740:	d003      	beq.n	801374a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f000 facb 	bl	8013cde <HAL_TIM_IC_CaptureCallback>
 8013748:	e005      	b.n	8013756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 fabd 	bl	8013cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f000 face 	bl	8013cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2200      	movs	r2, #0
 801375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	691b      	ldr	r3, [r3, #16]
 8013762:	f003 0304 	and.w	r3, r3, #4
 8013766:	2b04      	cmp	r3, #4
 8013768:	d122      	bne.n	80137b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	68db      	ldr	r3, [r3, #12]
 8013770:	f003 0304 	and.w	r3, r3, #4
 8013774:	2b04      	cmp	r3, #4
 8013776:	d11b      	bne.n	80137b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	f06f 0204 	mvn.w	r2, #4
 8013780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2202      	movs	r2, #2
 8013786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	699b      	ldr	r3, [r3, #24]
 801378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013792:	2b00      	cmp	r3, #0
 8013794:	d003      	beq.n	801379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f000 faa1 	bl	8013cde <HAL_TIM_IC_CaptureCallback>
 801379c:	e005      	b.n	80137aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f000 fa93 	bl	8013cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f000 faa4 	bl	8013cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2200      	movs	r2, #0
 80137ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	691b      	ldr	r3, [r3, #16]
 80137b6:	f003 0308 	and.w	r3, r3, #8
 80137ba:	2b08      	cmp	r3, #8
 80137bc:	d122      	bne.n	8013804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	f003 0308 	and.w	r3, r3, #8
 80137c8:	2b08      	cmp	r3, #8
 80137ca:	d11b      	bne.n	8013804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	f06f 0208 	mvn.w	r2, #8
 80137d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2204      	movs	r2, #4
 80137da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	69db      	ldr	r3, [r3, #28]
 80137e2:	f003 0303 	and.w	r3, r3, #3
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d003      	beq.n	80137f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f000 fa77 	bl	8013cde <HAL_TIM_IC_CaptureCallback>
 80137f0:	e005      	b.n	80137fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f000 fa69 	bl	8013cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f000 fa7a 	bl	8013cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2200      	movs	r2, #0
 8013802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	691b      	ldr	r3, [r3, #16]
 801380a:	f003 0310 	and.w	r3, r3, #16
 801380e:	2b10      	cmp	r3, #16
 8013810:	d122      	bne.n	8013858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	68db      	ldr	r3, [r3, #12]
 8013818:	f003 0310 	and.w	r3, r3, #16
 801381c:	2b10      	cmp	r3, #16
 801381e:	d11b      	bne.n	8013858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	f06f 0210 	mvn.w	r2, #16
 8013828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2208      	movs	r2, #8
 801382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	69db      	ldr	r3, [r3, #28]
 8013836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801383a:	2b00      	cmp	r3, #0
 801383c:	d003      	beq.n	8013846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f000 fa4d 	bl	8013cde <HAL_TIM_IC_CaptureCallback>
 8013844:	e005      	b.n	8013852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f000 fa3f 	bl	8013cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f000 fa50 	bl	8013cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	2200      	movs	r2, #0
 8013856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	691b      	ldr	r3, [r3, #16]
 801385e:	f003 0301 	and.w	r3, r3, #1
 8013862:	2b01      	cmp	r3, #1
 8013864:	d10e      	bne.n	8013884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	f003 0301 	and.w	r3, r3, #1
 8013870:	2b01      	cmp	r3, #1
 8013872:	d107      	bne.n	8013884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	f06f 0201 	mvn.w	r2, #1
 801387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f7f7 fcd0 	bl	800b224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	691b      	ldr	r3, [r3, #16]
 801388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801388e:	2b80      	cmp	r3, #128	; 0x80
 8013890:	d10e      	bne.n	80138b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801389c:	2b80      	cmp	r3, #128	; 0x80
 801389e:	d107      	bne.n	80138b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80138a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f000 fee8 	bl	8014680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	691b      	ldr	r3, [r3, #16]
 80138b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138ba:	2b40      	cmp	r3, #64	; 0x40
 80138bc:	d10e      	bne.n	80138dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	68db      	ldr	r3, [r3, #12]
 80138c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138c8:	2b40      	cmp	r3, #64	; 0x40
 80138ca:	d107      	bne.n	80138dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80138d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f000 fa15 	bl	8013d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	691b      	ldr	r3, [r3, #16]
 80138e2:	f003 0320 	and.w	r3, r3, #32
 80138e6:	2b20      	cmp	r3, #32
 80138e8:	d10e      	bne.n	8013908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	68db      	ldr	r3, [r3, #12]
 80138f0:	f003 0320 	and.w	r3, r3, #32
 80138f4:	2b20      	cmp	r3, #32
 80138f6:	d107      	bne.n	8013908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	f06f 0220 	mvn.w	r2, #32
 8013900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f000 feb2 	bl	801466c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013908:	bf00      	nop
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	60b9      	str	r1, [r7, #8]
 801391a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013922:	2b01      	cmp	r3, #1
 8013924:	d101      	bne.n	801392a <HAL_TIM_OC_ConfigChannel+0x1a>
 8013926:	2302      	movs	r3, #2
 8013928:	e04e      	b.n	80139c8 <HAL_TIM_OC_ConfigChannel+0xb8>
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	2201      	movs	r2, #1
 801392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2202      	movs	r2, #2
 8013936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2b0c      	cmp	r3, #12
 801393e:	d839      	bhi.n	80139b4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8013940:	a201      	add	r2, pc, #4	; (adr r2, 8013948 <HAL_TIM_OC_ConfigChannel+0x38>)
 8013942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013946:	bf00      	nop
 8013948:	0801397d 	.word	0x0801397d
 801394c:	080139b5 	.word	0x080139b5
 8013950:	080139b5 	.word	0x080139b5
 8013954:	080139b5 	.word	0x080139b5
 8013958:	0801398b 	.word	0x0801398b
 801395c:	080139b5 	.word	0x080139b5
 8013960:	080139b5 	.word	0x080139b5
 8013964:	080139b5 	.word	0x080139b5
 8013968:	08013999 	.word	0x08013999
 801396c:	080139b5 	.word	0x080139b5
 8013970:	080139b5 	.word	0x080139b5
 8013974:	080139b5 	.word	0x080139b5
 8013978:	080139a7 	.word	0x080139a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	68b9      	ldr	r1, [r7, #8]
 8013982:	4618      	mov	r0, r3
 8013984:	f000 fa6a 	bl	8013e5c <TIM_OC1_SetConfig>
      break;
 8013988:	e015      	b.n	80139b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	68b9      	ldr	r1, [r7, #8]
 8013990:	4618      	mov	r0, r3
 8013992:	f000 fad3 	bl	8013f3c <TIM_OC2_SetConfig>
      break;
 8013996:	e00e      	b.n	80139b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	68b9      	ldr	r1, [r7, #8]
 801399e:	4618      	mov	r0, r3
 80139a0:	f000 fb42 	bl	8014028 <TIM_OC3_SetConfig>
      break;
 80139a4:	e007      	b.n	80139b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	68b9      	ldr	r1, [r7, #8]
 80139ac:	4618      	mov	r0, r3
 80139ae:	f000 fbaf 	bl	8014110 <TIM_OC4_SetConfig>
      break;
 80139b2:	e000      	b.n	80139b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80139b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	2201      	movs	r2, #1
 80139ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	2200      	movs	r2, #0
 80139c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80139c6:	2300      	movs	r3, #0
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3710      	adds	r7, #16
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d101      	bne.n	80139ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80139e6:	2302      	movs	r3, #2
 80139e8:	e0b4      	b.n	8013b54 <HAL_TIM_PWM_ConfigChannel+0x184>
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2201      	movs	r2, #1
 80139ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2202      	movs	r2, #2
 80139f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2b0c      	cmp	r3, #12
 80139fe:	f200 809f 	bhi.w	8013b40 <HAL_TIM_PWM_ConfigChannel+0x170>
 8013a02:	a201      	add	r2, pc, #4	; (adr r2, 8013a08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8013a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a08:	08013a3d 	.word	0x08013a3d
 8013a0c:	08013b41 	.word	0x08013b41
 8013a10:	08013b41 	.word	0x08013b41
 8013a14:	08013b41 	.word	0x08013b41
 8013a18:	08013a7d 	.word	0x08013a7d
 8013a1c:	08013b41 	.word	0x08013b41
 8013a20:	08013b41 	.word	0x08013b41
 8013a24:	08013b41 	.word	0x08013b41
 8013a28:	08013abf 	.word	0x08013abf
 8013a2c:	08013b41 	.word	0x08013b41
 8013a30:	08013b41 	.word	0x08013b41
 8013a34:	08013b41 	.word	0x08013b41
 8013a38:	08013aff 	.word	0x08013aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	68b9      	ldr	r1, [r7, #8]
 8013a42:	4618      	mov	r0, r3
 8013a44:	f000 fa0a 	bl	8013e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	699a      	ldr	r2, [r3, #24]
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	f042 0208 	orr.w	r2, r2, #8
 8013a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	699a      	ldr	r2, [r3, #24]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f022 0204 	bic.w	r2, r2, #4
 8013a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	6999      	ldr	r1, [r3, #24]
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	691a      	ldr	r2, [r3, #16]
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	430a      	orrs	r2, r1
 8013a78:	619a      	str	r2, [r3, #24]
      break;
 8013a7a:	e062      	b.n	8013b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	68b9      	ldr	r1, [r7, #8]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f000 fa5a 	bl	8013f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	699a      	ldr	r2, [r3, #24]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	699a      	ldr	r2, [r3, #24]
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	6999      	ldr	r1, [r3, #24]
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	691b      	ldr	r3, [r3, #16]
 8013ab2:	021a      	lsls	r2, r3, #8
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	430a      	orrs	r2, r1
 8013aba:	619a      	str	r2, [r3, #24]
      break;
 8013abc:	e041      	b.n	8013b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	68b9      	ldr	r1, [r7, #8]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f000 faaf 	bl	8014028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	69da      	ldr	r2, [r3, #28]
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	f042 0208 	orr.w	r2, r2, #8
 8013ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	69da      	ldr	r2, [r3, #28]
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f022 0204 	bic.w	r2, r2, #4
 8013ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	69d9      	ldr	r1, [r3, #28]
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	691a      	ldr	r2, [r3, #16]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	430a      	orrs	r2, r1
 8013afa:	61da      	str	r2, [r3, #28]
      break;
 8013afc:	e021      	b.n	8013b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	68b9      	ldr	r1, [r7, #8]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f000 fb03 	bl	8014110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	69da      	ldr	r2, [r3, #28]
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	69da      	ldr	r2, [r3, #28]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	69d9      	ldr	r1, [r3, #28]
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	691b      	ldr	r3, [r3, #16]
 8013b34:	021a      	lsls	r2, r3, #8
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	430a      	orrs	r2, r1
 8013b3c:	61da      	str	r2, [r3, #28]
      break;
 8013b3e:	e000      	b.n	8013b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8013b40:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2201      	movs	r2, #1
 8013b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013b52:	2300      	movs	r3, #0
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3710      	adds	r7, #16
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	d101      	bne.n	8013b74 <HAL_TIM_ConfigClockSource+0x18>
 8013b70:	2302      	movs	r3, #2
 8013b72:	e0a6      	b.n	8013cc2 <HAL_TIM_ConfigClockSource+0x166>
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2201      	movs	r2, #1
 8013b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2202      	movs	r2, #2
 8013b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	689b      	ldr	r3, [r3, #8]
 8013b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013b9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	68fa      	ldr	r2, [r7, #12]
 8013ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b40      	cmp	r3, #64	; 0x40
 8013baa:	d067      	beq.n	8013c7c <HAL_TIM_ConfigClockSource+0x120>
 8013bac:	2b40      	cmp	r3, #64	; 0x40
 8013bae:	d80b      	bhi.n	8013bc8 <HAL_TIM_ConfigClockSource+0x6c>
 8013bb0:	2b10      	cmp	r3, #16
 8013bb2:	d073      	beq.n	8013c9c <HAL_TIM_ConfigClockSource+0x140>
 8013bb4:	2b10      	cmp	r3, #16
 8013bb6:	d802      	bhi.n	8013bbe <HAL_TIM_ConfigClockSource+0x62>
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d06f      	beq.n	8013c9c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8013bbc:	e078      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8013bbe:	2b20      	cmp	r3, #32
 8013bc0:	d06c      	beq.n	8013c9c <HAL_TIM_ConfigClockSource+0x140>
 8013bc2:	2b30      	cmp	r3, #48	; 0x30
 8013bc4:	d06a      	beq.n	8013c9c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8013bc6:	e073      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8013bc8:	2b70      	cmp	r3, #112	; 0x70
 8013bca:	d00d      	beq.n	8013be8 <HAL_TIM_ConfigClockSource+0x8c>
 8013bcc:	2b70      	cmp	r3, #112	; 0x70
 8013bce:	d804      	bhi.n	8013bda <HAL_TIM_ConfigClockSource+0x7e>
 8013bd0:	2b50      	cmp	r3, #80	; 0x50
 8013bd2:	d033      	beq.n	8013c3c <HAL_TIM_ConfigClockSource+0xe0>
 8013bd4:	2b60      	cmp	r3, #96	; 0x60
 8013bd6:	d041      	beq.n	8013c5c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8013bd8:	e06a      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8013bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013bde:	d066      	beq.n	8013cae <HAL_TIM_ConfigClockSource+0x152>
 8013be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013be4:	d017      	beq.n	8013c16 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8013be6:	e063      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6818      	ldr	r0, [r3, #0]
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	6899      	ldr	r1, [r3, #8]
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	685a      	ldr	r2, [r3, #4]
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	f000 fb5a 	bl	80142b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	689b      	ldr	r3, [r3, #8]
 8013c02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013c0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	68fa      	ldr	r2, [r7, #12]
 8013c12:	609a      	str	r2, [r3, #8]
      break;
 8013c14:	e04c      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6818      	ldr	r0, [r3, #0]
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	6899      	ldr	r1, [r3, #8]
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	685a      	ldr	r2, [r3, #4]
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	68db      	ldr	r3, [r3, #12]
 8013c26:	f000 fb43 	bl	80142b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	689a      	ldr	r2, [r3, #8]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013c38:	609a      	str	r2, [r3, #8]
      break;
 8013c3a:	e039      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6818      	ldr	r0, [r3, #0]
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	6859      	ldr	r1, [r3, #4]
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	461a      	mov	r2, r3
 8013c4a:	f000 fab7 	bl	80141bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	2150      	movs	r1, #80	; 0x50
 8013c54:	4618      	mov	r0, r3
 8013c56:	f000 fb10 	bl	801427a <TIM_ITRx_SetConfig>
      break;
 8013c5a:	e029      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6818      	ldr	r0, [r3, #0]
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	6859      	ldr	r1, [r3, #4]
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	461a      	mov	r2, r3
 8013c6a:	f000 fad6 	bl	801421a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	2160      	movs	r1, #96	; 0x60
 8013c74:	4618      	mov	r0, r3
 8013c76:	f000 fb00 	bl	801427a <TIM_ITRx_SetConfig>
      break;
 8013c7a:	e019      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6818      	ldr	r0, [r3, #0]
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	6859      	ldr	r1, [r3, #4]
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	68db      	ldr	r3, [r3, #12]
 8013c88:	461a      	mov	r2, r3
 8013c8a:	f000 fa97 	bl	80141bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	2140      	movs	r1, #64	; 0x40
 8013c94:	4618      	mov	r0, r3
 8013c96:	f000 faf0 	bl	801427a <TIM_ITRx_SetConfig>
      break;
 8013c9a:	e009      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	4610      	mov	r0, r2
 8013ca8:	f000 fae7 	bl	801427a <TIM_ITRx_SetConfig>
      break;
 8013cac:	e000      	b.n	8013cb0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8013cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013cc0:	2300      	movs	r3, #0
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3710      	adds	r7, #16
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}

08013cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013cca:	b480      	push	{r7}
 8013ccc:	b083      	sub	sp, #12
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013cd2:	bf00      	nop
 8013cd4:	370c      	adds	r7, #12
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cdc:	4770      	bx	lr

08013cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013cde:	b480      	push	{r7}
 8013ce0:	b083      	sub	sp, #12
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013ce6:	bf00      	nop
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr

08013cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013cf2:	b480      	push	{r7}
 8013cf4:	b083      	sub	sp, #12
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013cfa:	bf00      	nop
 8013cfc:	370c      	adds	r7, #12
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d04:	4770      	bx	lr

08013d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013d06:	b480      	push	{r7}
 8013d08:	b083      	sub	sp, #12
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013d0e:	bf00      	nop
 8013d10:	370c      	adds	r7, #12
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr
	...

08013d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b085      	sub	sp, #20
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	4a40      	ldr	r2, [pc, #256]	; (8013e30 <TIM_Base_SetConfig+0x114>)
 8013d30:	4293      	cmp	r3, r2
 8013d32:	d013      	beq.n	8013d5c <TIM_Base_SetConfig+0x40>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d3a:	d00f      	beq.n	8013d5c <TIM_Base_SetConfig+0x40>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	4a3d      	ldr	r2, [pc, #244]	; (8013e34 <TIM_Base_SetConfig+0x118>)
 8013d40:	4293      	cmp	r3, r2
 8013d42:	d00b      	beq.n	8013d5c <TIM_Base_SetConfig+0x40>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	4a3c      	ldr	r2, [pc, #240]	; (8013e38 <TIM_Base_SetConfig+0x11c>)
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	d007      	beq.n	8013d5c <TIM_Base_SetConfig+0x40>
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	4a3b      	ldr	r2, [pc, #236]	; (8013e3c <TIM_Base_SetConfig+0x120>)
 8013d50:	4293      	cmp	r3, r2
 8013d52:	d003      	beq.n	8013d5c <TIM_Base_SetConfig+0x40>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	4a3a      	ldr	r2, [pc, #232]	; (8013e40 <TIM_Base_SetConfig+0x124>)
 8013d58:	4293      	cmp	r3, r2
 8013d5a:	d108      	bne.n	8013d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	4313      	orrs	r3, r2
 8013d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	4a2f      	ldr	r2, [pc, #188]	; (8013e30 <TIM_Base_SetConfig+0x114>)
 8013d72:	4293      	cmp	r3, r2
 8013d74:	d02b      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d7c:	d027      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	4a2c      	ldr	r2, [pc, #176]	; (8013e34 <TIM_Base_SetConfig+0x118>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d023      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	4a2b      	ldr	r2, [pc, #172]	; (8013e38 <TIM_Base_SetConfig+0x11c>)
 8013d8a:	4293      	cmp	r3, r2
 8013d8c:	d01f      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	4a2a      	ldr	r2, [pc, #168]	; (8013e3c <TIM_Base_SetConfig+0x120>)
 8013d92:	4293      	cmp	r3, r2
 8013d94:	d01b      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4a29      	ldr	r2, [pc, #164]	; (8013e40 <TIM_Base_SetConfig+0x124>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d017      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	4a28      	ldr	r2, [pc, #160]	; (8013e44 <TIM_Base_SetConfig+0x128>)
 8013da2:	4293      	cmp	r3, r2
 8013da4:	d013      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	4a27      	ldr	r2, [pc, #156]	; (8013e48 <TIM_Base_SetConfig+0x12c>)
 8013daa:	4293      	cmp	r3, r2
 8013dac:	d00f      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	4a26      	ldr	r2, [pc, #152]	; (8013e4c <TIM_Base_SetConfig+0x130>)
 8013db2:	4293      	cmp	r3, r2
 8013db4:	d00b      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	4a25      	ldr	r2, [pc, #148]	; (8013e50 <TIM_Base_SetConfig+0x134>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	d007      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4a24      	ldr	r2, [pc, #144]	; (8013e54 <TIM_Base_SetConfig+0x138>)
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	d003      	beq.n	8013dce <TIM_Base_SetConfig+0xb2>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	4a23      	ldr	r2, [pc, #140]	; (8013e58 <TIM_Base_SetConfig+0x13c>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d108      	bne.n	8013de0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013dd6:	683b      	ldr	r3, [r7, #0]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	68fa      	ldr	r2, [r7, #12]
 8013ddc:	4313      	orrs	r3, r2
 8013dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	695b      	ldr	r3, [r3, #20]
 8013dea:	4313      	orrs	r3, r2
 8013dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	68fa      	ldr	r2, [r7, #12]
 8013df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	689a      	ldr	r2, [r3, #8]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	4a0a      	ldr	r2, [pc, #40]	; (8013e30 <TIM_Base_SetConfig+0x114>)
 8013e08:	4293      	cmp	r3, r2
 8013e0a:	d003      	beq.n	8013e14 <TIM_Base_SetConfig+0xf8>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	4a0c      	ldr	r2, [pc, #48]	; (8013e40 <TIM_Base_SetConfig+0x124>)
 8013e10:	4293      	cmp	r3, r2
 8013e12:	d103      	bne.n	8013e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	691a      	ldr	r2, [r3, #16]
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2201      	movs	r2, #1
 8013e20:	615a      	str	r2, [r3, #20]
}
 8013e22:	bf00      	nop
 8013e24:	3714      	adds	r7, #20
 8013e26:	46bd      	mov	sp, r7
 8013e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2c:	4770      	bx	lr
 8013e2e:	bf00      	nop
 8013e30:	40010000 	.word	0x40010000
 8013e34:	40000400 	.word	0x40000400
 8013e38:	40000800 	.word	0x40000800
 8013e3c:	40000c00 	.word	0x40000c00
 8013e40:	40010400 	.word	0x40010400
 8013e44:	40014000 	.word	0x40014000
 8013e48:	40014400 	.word	0x40014400
 8013e4c:	40014800 	.word	0x40014800
 8013e50:	40001800 	.word	0x40001800
 8013e54:	40001c00 	.word	0x40001c00
 8013e58:	40002000 	.word	0x40002000

08013e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b087      	sub	sp, #28
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	6a1b      	ldr	r3, [r3, #32]
 8013e6a:	f023 0201 	bic.w	r2, r3, #1
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6a1b      	ldr	r3, [r3, #32]
 8013e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	699b      	ldr	r3, [r3, #24]
 8013e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	f023 0303 	bic.w	r3, r3, #3
 8013e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	68fa      	ldr	r2, [r7, #12]
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	f023 0302 	bic.w	r3, r3, #2
 8013ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	689b      	ldr	r3, [r3, #8]
 8013eaa:	697a      	ldr	r2, [r7, #20]
 8013eac:	4313      	orrs	r3, r2
 8013eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	4a20      	ldr	r2, [pc, #128]	; (8013f34 <TIM_OC1_SetConfig+0xd8>)
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d003      	beq.n	8013ec0 <TIM_OC1_SetConfig+0x64>
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	4a1f      	ldr	r2, [pc, #124]	; (8013f38 <TIM_OC1_SetConfig+0xdc>)
 8013ebc:	4293      	cmp	r3, r2
 8013ebe:	d10c      	bne.n	8013eda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	f023 0308 	bic.w	r3, r3, #8
 8013ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	68db      	ldr	r3, [r3, #12]
 8013ecc:	697a      	ldr	r2, [r7, #20]
 8013ece:	4313      	orrs	r3, r2
 8013ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	f023 0304 	bic.w	r3, r3, #4
 8013ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	4a15      	ldr	r2, [pc, #84]	; (8013f34 <TIM_OC1_SetConfig+0xd8>)
 8013ede:	4293      	cmp	r3, r2
 8013ee0:	d003      	beq.n	8013eea <TIM_OC1_SetConfig+0x8e>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4a14      	ldr	r2, [pc, #80]	; (8013f38 <TIM_OC1_SetConfig+0xdc>)
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d111      	bne.n	8013f0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	695b      	ldr	r3, [r3, #20]
 8013efe:	693a      	ldr	r2, [r7, #16]
 8013f00:	4313      	orrs	r3, r2
 8013f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	699b      	ldr	r3, [r3, #24]
 8013f08:	693a      	ldr	r2, [r7, #16]
 8013f0a:	4313      	orrs	r3, r2
 8013f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	693a      	ldr	r2, [r7, #16]
 8013f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	685a      	ldr	r2, [r3, #4]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	697a      	ldr	r2, [r7, #20]
 8013f26:	621a      	str	r2, [r3, #32]
}
 8013f28:	bf00      	nop
 8013f2a:	371c      	adds	r7, #28
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr
 8013f34:	40010000 	.word	0x40010000
 8013f38:	40010400 	.word	0x40010400

08013f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b087      	sub	sp, #28
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6a1b      	ldr	r3, [r3, #32]
 8013f4a:	f023 0210 	bic.w	r2, r3, #16
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6a1b      	ldr	r3, [r3, #32]
 8013f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	699b      	ldr	r3, [r3, #24]
 8013f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	021b      	lsls	r3, r3, #8
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	4313      	orrs	r3, r2
 8013f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	f023 0320 	bic.w	r3, r3, #32
 8013f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	011b      	lsls	r3, r3, #4
 8013f8e:	697a      	ldr	r2, [r7, #20]
 8013f90:	4313      	orrs	r3, r2
 8013f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	4a22      	ldr	r2, [pc, #136]	; (8014020 <TIM_OC2_SetConfig+0xe4>)
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	d003      	beq.n	8013fa4 <TIM_OC2_SetConfig+0x68>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	4a21      	ldr	r2, [pc, #132]	; (8014024 <TIM_OC2_SetConfig+0xe8>)
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	d10d      	bne.n	8013fc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	68db      	ldr	r3, [r3, #12]
 8013fb0:	011b      	lsls	r3, r3, #4
 8013fb2:	697a      	ldr	r2, [r7, #20]
 8013fb4:	4313      	orrs	r3, r2
 8013fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013fbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	4a17      	ldr	r2, [pc, #92]	; (8014020 <TIM_OC2_SetConfig+0xe4>)
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	d003      	beq.n	8013fd0 <TIM_OC2_SetConfig+0x94>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	4a16      	ldr	r2, [pc, #88]	; (8014024 <TIM_OC2_SetConfig+0xe8>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d113      	bne.n	8013ff8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	695b      	ldr	r3, [r3, #20]
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	693a      	ldr	r2, [r7, #16]
 8013fe8:	4313      	orrs	r3, r2
 8013fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	699b      	ldr	r3, [r3, #24]
 8013ff0:	009b      	lsls	r3, r3, #2
 8013ff2:	693a      	ldr	r2, [r7, #16]
 8013ff4:	4313      	orrs	r3, r2
 8013ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	693a      	ldr	r2, [r7, #16]
 8013ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	68fa      	ldr	r2, [r7, #12]
 8014002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	685a      	ldr	r2, [r3, #4]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	697a      	ldr	r2, [r7, #20]
 8014010:	621a      	str	r2, [r3, #32]
}
 8014012:	bf00      	nop
 8014014:	371c      	adds	r7, #28
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	40010000 	.word	0x40010000
 8014024:	40010400 	.word	0x40010400

08014028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014028:	b480      	push	{r7}
 801402a:	b087      	sub	sp, #28
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6a1b      	ldr	r3, [r3, #32]
 8014036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	6a1b      	ldr	r3, [r3, #32]
 8014042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	69db      	ldr	r3, [r3, #28]
 801404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f023 0303 	bic.w	r3, r3, #3
 801405e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	68fa      	ldr	r2, [r7, #12]
 8014066:	4313      	orrs	r3, r2
 8014068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	689b      	ldr	r3, [r3, #8]
 8014076:	021b      	lsls	r3, r3, #8
 8014078:	697a      	ldr	r2, [r7, #20]
 801407a:	4313      	orrs	r3, r2
 801407c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	4a21      	ldr	r2, [pc, #132]	; (8014108 <TIM_OC3_SetConfig+0xe0>)
 8014082:	4293      	cmp	r3, r2
 8014084:	d003      	beq.n	801408e <TIM_OC3_SetConfig+0x66>
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	4a20      	ldr	r2, [pc, #128]	; (801410c <TIM_OC3_SetConfig+0xe4>)
 801408a:	4293      	cmp	r3, r2
 801408c:	d10d      	bne.n	80140aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	021b      	lsls	r3, r3, #8
 801409c:	697a      	ldr	r2, [r7, #20]
 801409e:	4313      	orrs	r3, r2
 80140a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80140a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	4a16      	ldr	r2, [pc, #88]	; (8014108 <TIM_OC3_SetConfig+0xe0>)
 80140ae:	4293      	cmp	r3, r2
 80140b0:	d003      	beq.n	80140ba <TIM_OC3_SetConfig+0x92>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	4a15      	ldr	r2, [pc, #84]	; (801410c <TIM_OC3_SetConfig+0xe4>)
 80140b6:	4293      	cmp	r3, r2
 80140b8:	d113      	bne.n	80140e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80140c2:	693b      	ldr	r3, [r7, #16]
 80140c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80140c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	695b      	ldr	r3, [r3, #20]
 80140ce:	011b      	lsls	r3, r3, #4
 80140d0:	693a      	ldr	r2, [r7, #16]
 80140d2:	4313      	orrs	r3, r2
 80140d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	699b      	ldr	r3, [r3, #24]
 80140da:	011b      	lsls	r3, r3, #4
 80140dc:	693a      	ldr	r2, [r7, #16]
 80140de:	4313      	orrs	r3, r2
 80140e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	693a      	ldr	r2, [r7, #16]
 80140e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	68fa      	ldr	r2, [r7, #12]
 80140ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	685a      	ldr	r2, [r3, #4]
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	697a      	ldr	r2, [r7, #20]
 80140fa:	621a      	str	r2, [r3, #32]
}
 80140fc:	bf00      	nop
 80140fe:	371c      	adds	r7, #28
 8014100:	46bd      	mov	sp, r7
 8014102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014106:	4770      	bx	lr
 8014108:	40010000 	.word	0x40010000
 801410c:	40010400 	.word	0x40010400

08014110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014110:	b480      	push	{r7}
 8014112:	b087      	sub	sp, #28
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6a1b      	ldr	r3, [r3, #32]
 801411e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6a1b      	ldr	r3, [r3, #32]
 801412a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	685b      	ldr	r3, [r3, #4]
 8014130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	69db      	ldr	r3, [r3, #28]
 8014136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801413e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	021b      	lsls	r3, r3, #8
 801414e:	68fa      	ldr	r2, [r7, #12]
 8014150:	4313      	orrs	r3, r2
 8014152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801415a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	689b      	ldr	r3, [r3, #8]
 8014160:	031b      	lsls	r3, r3, #12
 8014162:	693a      	ldr	r2, [r7, #16]
 8014164:	4313      	orrs	r3, r2
 8014166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	4a12      	ldr	r2, [pc, #72]	; (80141b4 <TIM_OC4_SetConfig+0xa4>)
 801416c:	4293      	cmp	r3, r2
 801416e:	d003      	beq.n	8014178 <TIM_OC4_SetConfig+0x68>
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	4a11      	ldr	r2, [pc, #68]	; (80141b8 <TIM_OC4_SetConfig+0xa8>)
 8014174:	4293      	cmp	r3, r2
 8014176:	d109      	bne.n	801418c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801417e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	695b      	ldr	r3, [r3, #20]
 8014184:	019b      	lsls	r3, r3, #6
 8014186:	697a      	ldr	r2, [r7, #20]
 8014188:	4313      	orrs	r3, r2
 801418a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	697a      	ldr	r2, [r7, #20]
 8014190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	685a      	ldr	r2, [r3, #4]
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	693a      	ldr	r2, [r7, #16]
 80141a4:	621a      	str	r2, [r3, #32]
}
 80141a6:	bf00      	nop
 80141a8:	371c      	adds	r7, #28
 80141aa:	46bd      	mov	sp, r7
 80141ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b0:	4770      	bx	lr
 80141b2:	bf00      	nop
 80141b4:	40010000 	.word	0x40010000
 80141b8:	40010400 	.word	0x40010400

080141bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80141bc:	b480      	push	{r7}
 80141be:	b087      	sub	sp, #28
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	6a1b      	ldr	r3, [r3, #32]
 80141cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	6a1b      	ldr	r3, [r3, #32]
 80141d2:	f023 0201 	bic.w	r2, r3, #1
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	699b      	ldr	r3, [r3, #24]
 80141de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80141e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	011b      	lsls	r3, r3, #4
 80141ec:	693a      	ldr	r2, [r7, #16]
 80141ee:	4313      	orrs	r3, r2
 80141f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	f023 030a 	bic.w	r3, r3, #10
 80141f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80141fa:	697a      	ldr	r2, [r7, #20]
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	4313      	orrs	r3, r2
 8014200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	693a      	ldr	r2, [r7, #16]
 8014206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	697a      	ldr	r2, [r7, #20]
 801420c:	621a      	str	r2, [r3, #32]
}
 801420e:	bf00      	nop
 8014210:	371c      	adds	r7, #28
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr

0801421a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801421a:	b480      	push	{r7}
 801421c:	b087      	sub	sp, #28
 801421e:	af00      	add	r7, sp, #0
 8014220:	60f8      	str	r0, [r7, #12]
 8014222:	60b9      	str	r1, [r7, #8]
 8014224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	6a1b      	ldr	r3, [r3, #32]
 801422a:	f023 0210 	bic.w	r2, r3, #16
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	699b      	ldr	r3, [r3, #24]
 8014236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	6a1b      	ldr	r3, [r3, #32]
 801423c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	031b      	lsls	r3, r3, #12
 801424a:	697a      	ldr	r2, [r7, #20]
 801424c:	4313      	orrs	r3, r2
 801424e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	011b      	lsls	r3, r3, #4
 801425c:	693a      	ldr	r2, [r7, #16]
 801425e:	4313      	orrs	r3, r2
 8014260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	697a      	ldr	r2, [r7, #20]
 8014266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	693a      	ldr	r2, [r7, #16]
 801426c:	621a      	str	r2, [r3, #32]
}
 801426e:	bf00      	nop
 8014270:	371c      	adds	r7, #28
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr

0801427a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801427a:	b480      	push	{r7}
 801427c:	b085      	sub	sp, #20
 801427e:	af00      	add	r7, sp, #0
 8014280:	6078      	str	r0, [r7, #4]
 8014282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	689b      	ldr	r3, [r3, #8]
 8014288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014292:	683a      	ldr	r2, [r7, #0]
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	4313      	orrs	r3, r2
 8014298:	f043 0307 	orr.w	r3, r3, #7
 801429c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	68fa      	ldr	r2, [r7, #12]
 80142a2:	609a      	str	r2, [r3, #8]
}
 80142a4:	bf00      	nop
 80142a6:	3714      	adds	r7, #20
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr

080142b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80142b0:	b480      	push	{r7}
 80142b2:	b087      	sub	sp, #28
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	60f8      	str	r0, [r7, #12]
 80142b8:	60b9      	str	r1, [r7, #8]
 80142ba:	607a      	str	r2, [r7, #4]
 80142bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	689b      	ldr	r3, [r3, #8]
 80142c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80142ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	021a      	lsls	r2, r3, #8
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	431a      	orrs	r2, r3
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	4313      	orrs	r3, r2
 80142d8:	697a      	ldr	r2, [r7, #20]
 80142da:	4313      	orrs	r3, r2
 80142dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	697a      	ldr	r2, [r7, #20]
 80142e2:	609a      	str	r2, [r3, #8]
}
 80142e4:	bf00      	nop
 80142e6:	371c      	adds	r7, #28
 80142e8:	46bd      	mov	sp, r7
 80142ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ee:	4770      	bx	lr

080142f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80142f0:	b480      	push	{r7}
 80142f2:	b087      	sub	sp, #28
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	60b9      	str	r1, [r7, #8]
 80142fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	f003 031f 	and.w	r3, r3, #31
 8014302:	2201      	movs	r2, #1
 8014304:	fa02 f303 	lsl.w	r3, r2, r3
 8014308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	6a1a      	ldr	r2, [r3, #32]
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	43db      	mvns	r3, r3
 8014312:	401a      	ands	r2, r3
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	6a1a      	ldr	r2, [r3, #32]
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	f003 031f 	and.w	r3, r3, #31
 8014322:	6879      	ldr	r1, [r7, #4]
 8014324:	fa01 f303 	lsl.w	r3, r1, r3
 8014328:	431a      	orrs	r2, r3
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	621a      	str	r2, [r3, #32]
}
 801432e:	bf00      	nop
 8014330:	371c      	adds	r7, #28
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr

0801433a <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b084      	sub	sp, #16
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
 8014342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	2b04      	cmp	r3, #4
 8014348:	d00d      	beq.n	8014366 <HAL_TIMEx_OCN_Start_IT+0x2c>
 801434a:	2b08      	cmp	r3, #8
 801434c:	d014      	beq.n	8014378 <HAL_TIMEx_OCN_Start_IT+0x3e>
 801434e:	2b00      	cmp	r3, #0
 8014350:	d000      	beq.n	8014354 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8014352:	e01a      	b.n	801438a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	68da      	ldr	r2, [r3, #12]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	f042 0202 	orr.w	r2, r2, #2
 8014362:	60da      	str	r2, [r3, #12]
      break;
 8014364:	e011      	b.n	801438a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	68da      	ldr	r2, [r3, #12]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	f042 0204 	orr.w	r2, r2, #4
 8014374:	60da      	str	r2, [r3, #12]
      break;
 8014376:	e008      	b.n	801438a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	68da      	ldr	r2, [r3, #12]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f042 0208 	orr.w	r2, r2, #8
 8014386:	60da      	str	r2, [r3, #12]
      break;
 8014388:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	68da      	ldr	r2, [r3, #12]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014398:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	2204      	movs	r2, #4
 80143a0:	6839      	ldr	r1, [r7, #0]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f000 f976 	bl	8014694 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80143b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	689b      	ldr	r3, [r3, #8]
 80143be:	f003 0307 	and.w	r3, r3, #7
 80143c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2b06      	cmp	r3, #6
 80143c8:	d007      	beq.n	80143da <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	f042 0201 	orr.w	r2, r2, #1
 80143d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80143da:	2300      	movs	r3, #0
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3710      	adds	r7, #16
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b084      	sub	sp, #16
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
 80143ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	2b04      	cmp	r3, #4
 80143f2:	d00d      	beq.n	8014410 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 80143f4:	2b08      	cmp	r3, #8
 80143f6:	d014      	beq.n	8014422 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d000      	beq.n	80143fe <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80143fc:	e01a      	b.n	8014434 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	68da      	ldr	r2, [r3, #12]
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	f022 0202 	bic.w	r2, r2, #2
 801440c:	60da      	str	r2, [r3, #12]
      break;
 801440e:	e011      	b.n	8014434 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	68da      	ldr	r2, [r3, #12]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f022 0204 	bic.w	r2, r2, #4
 801441e:	60da      	str	r2, [r3, #12]
      break;
 8014420:	e008      	b.n	8014434 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	68da      	ldr	r2, [r3, #12]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	f022 0208 	bic.w	r2, r2, #8
 8014430:	60da      	str	r2, [r3, #12]
      break;
 8014432:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	2200      	movs	r2, #0
 801443a:	6839      	ldr	r1, [r7, #0]
 801443c:	4618      	mov	r0, r3
 801443e:	f000 f929 	bl	8014694 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	6a1b      	ldr	r3, [r3, #32]
 8014448:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801444a:	68fa      	ldr	r2, [r7, #12]
 801444c:	f240 4344 	movw	r3, #1092	; 0x444
 8014450:	4013      	ands	r3, r2
 8014452:	2b00      	cmp	r3, #0
 8014454:	d107      	bne.n	8014466 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	68da      	ldr	r2, [r3, #12]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014464:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	6a1a      	ldr	r2, [r3, #32]
 801446c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014470:	4013      	ands	r3, r2
 8014472:	2b00      	cmp	r3, #0
 8014474:	d10f      	bne.n	8014496 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	6a1a      	ldr	r2, [r3, #32]
 801447c:	f240 4344 	movw	r3, #1092	; 0x444
 8014480:	4013      	ands	r3, r2
 8014482:	2b00      	cmp	r3, #0
 8014484:	d107      	bne.n	8014496 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014494:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	6a1a      	ldr	r2, [r3, #32]
 801449c:	f241 1311 	movw	r3, #4369	; 0x1111
 80144a0:	4013      	ands	r3, r2
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d10f      	bne.n	80144c6 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	6a1a      	ldr	r2, [r3, #32]
 80144ac:	f240 4344 	movw	r3, #1092	; 0x444
 80144b0:	4013      	ands	r3, r2
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d107      	bne.n	80144c6 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	681a      	ldr	r2, [r3, #0]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f022 0201 	bic.w	r2, r2, #1
 80144c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80144c6:	2300      	movs	r3, #0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80144d0:	b480      	push	{r7}
 80144d2:	b085      	sub	sp, #20
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d101      	bne.n	80144e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80144e4:	2302      	movs	r3, #2
 80144e6:	e05a      	b.n	801459e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2201      	movs	r2, #1
 80144ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2202      	movs	r2, #2
 80144f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	685b      	ldr	r3, [r3, #4]
 80144fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	689b      	ldr	r3, [r3, #8]
 8014506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801450e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014510:	683b      	ldr	r3, [r7, #0]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	68fa      	ldr	r2, [r7, #12]
 8014516:	4313      	orrs	r3, r2
 8014518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	68fa      	ldr	r2, [r7, #12]
 8014520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	4a21      	ldr	r2, [pc, #132]	; (80145ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014528:	4293      	cmp	r3, r2
 801452a:	d022      	beq.n	8014572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014534:	d01d      	beq.n	8014572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	4a1d      	ldr	r2, [pc, #116]	; (80145b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801453c:	4293      	cmp	r3, r2
 801453e:	d018      	beq.n	8014572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4a1b      	ldr	r2, [pc, #108]	; (80145b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014546:	4293      	cmp	r3, r2
 8014548:	d013      	beq.n	8014572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	4a1a      	ldr	r2, [pc, #104]	; (80145b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014550:	4293      	cmp	r3, r2
 8014552:	d00e      	beq.n	8014572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a18      	ldr	r2, [pc, #96]	; (80145bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801455a:	4293      	cmp	r3, r2
 801455c:	d009      	beq.n	8014572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	4a17      	ldr	r2, [pc, #92]	; (80145c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014564:	4293      	cmp	r3, r2
 8014566:	d004      	beq.n	8014572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	4a15      	ldr	r2, [pc, #84]	; (80145c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801456e:	4293      	cmp	r3, r2
 8014570:	d10c      	bne.n	801458c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	68ba      	ldr	r2, [r7, #8]
 8014580:	4313      	orrs	r3, r2
 8014582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	68ba      	ldr	r2, [r7, #8]
 801458a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2201      	movs	r2, #1
 8014590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2200      	movs	r2, #0
 8014598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801459c:	2300      	movs	r3, #0
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3714      	adds	r7, #20
 80145a2:	46bd      	mov	sp, r7
 80145a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a8:	4770      	bx	lr
 80145aa:	bf00      	nop
 80145ac:	40010000 	.word	0x40010000
 80145b0:	40000400 	.word	0x40000400
 80145b4:	40000800 	.word	0x40000800
 80145b8:	40000c00 	.word	0x40000c00
 80145bc:	40010400 	.word	0x40010400
 80145c0:	40014000 	.word	0x40014000
 80145c4:	40001800 	.word	0x40001800

080145c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80145c8:	b480      	push	{r7}
 80145ca:	b085      	sub	sp, #20
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80145d2:	2300      	movs	r3, #0
 80145d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80145dc:	2b01      	cmp	r3, #1
 80145de:	d101      	bne.n	80145e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80145e0:	2302      	movs	r3, #2
 80145e2:	e03d      	b.n	8014660 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2201      	movs	r2, #1
 80145e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	4313      	orrs	r3, r2
 80145f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	689b      	ldr	r3, [r3, #8]
 8014604:	4313      	orrs	r3, r2
 8014606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	4313      	orrs	r3, r2
 8014614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	4313      	orrs	r3, r2
 8014622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	691b      	ldr	r3, [r3, #16]
 801462e:	4313      	orrs	r3, r2
 8014630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	695b      	ldr	r3, [r3, #20]
 801463c:	4313      	orrs	r3, r2
 801463e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	69db      	ldr	r3, [r3, #28]
 801464a:	4313      	orrs	r3, r2
 801464c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2200      	movs	r2, #0
 801465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801465e:	2300      	movs	r3, #0
}
 8014660:	4618      	mov	r0, r3
 8014662:	3714      	adds	r7, #20
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr

0801466c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801466c:	b480      	push	{r7}
 801466e:	b083      	sub	sp, #12
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014674:	bf00      	nop
 8014676:	370c      	adds	r7, #12
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr

08014680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014680:	b480      	push	{r7}
 8014682:	b083      	sub	sp, #12
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014688:	bf00      	nop
 801468a:	370c      	adds	r7, #12
 801468c:	46bd      	mov	sp, r7
 801468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014692:	4770      	bx	lr

08014694 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8014694:	b480      	push	{r7}
 8014696:	b087      	sub	sp, #28
 8014698:	af00      	add	r7, sp, #0
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80146a0:	68bb      	ldr	r3, [r7, #8]
 80146a2:	f003 031f 	and.w	r3, r3, #31
 80146a6:	2204      	movs	r2, #4
 80146a8:	fa02 f303 	lsl.w	r3, r2, r3
 80146ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	6a1a      	ldr	r2, [r3, #32]
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	43db      	mvns	r3, r3
 80146b6:	401a      	ands	r2, r3
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	6a1a      	ldr	r2, [r3, #32]
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	f003 031f 	and.w	r3, r3, #31
 80146c6:	6879      	ldr	r1, [r7, #4]
 80146c8:	fa01 f303 	lsl.w	r3, r1, r3
 80146cc:	431a      	orrs	r2, r3
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	621a      	str	r2, [r3, #32]
}
 80146d2:	bf00      	nop
 80146d4:	371c      	adds	r7, #28
 80146d6:	46bd      	mov	sp, r7
 80146d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146dc:	4770      	bx	lr

080146de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	b082      	sub	sp, #8
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d101      	bne.n	80146f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80146ec:	2301      	movs	r3, #1
 80146ee:	e03f      	b.n	8014770 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d106      	bne.n	801470a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2200      	movs	r2, #0
 8014700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7fa f863 	bl	800e7d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2224      	movs	r2, #36	; 0x24
 801470e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	68da      	ldr	r2, [r3, #12]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014720:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f000 f9b2 	bl	8014a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	691a      	ldr	r2, [r3, #16]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014736:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	695a      	ldr	r2, [r3, #20]
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014746:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	68da      	ldr	r2, [r3, #12]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014756:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2200      	movs	r2, #0
 801475c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2220      	movs	r2, #32
 8014762:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2220      	movs	r2, #32
 801476a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801476e:	2300      	movs	r3, #0
}
 8014770:	4618      	mov	r0, r3
 8014772:	3708      	adds	r7, #8
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b088      	sub	sp, #32
 801477c:	af02      	add	r7, sp, #8
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	603b      	str	r3, [r7, #0]
 8014784:	4613      	mov	r3, r2
 8014786:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8014788:	2300      	movs	r3, #0
 801478a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014792:	b2db      	uxtb	r3, r3
 8014794:	2b20      	cmp	r3, #32
 8014796:	f040 8083 	bne.w	80148a0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d002      	beq.n	80147a6 <HAL_UART_Transmit+0x2e>
 80147a0:	88fb      	ldrh	r3, [r7, #6]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d101      	bne.n	80147aa <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80147a6:	2301      	movs	r3, #1
 80147a8:	e07b      	b.n	80148a2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80147b0:	2b01      	cmp	r3, #1
 80147b2:	d101      	bne.n	80147b8 <HAL_UART_Transmit+0x40>
 80147b4:	2302      	movs	r3, #2
 80147b6:	e074      	b.n	80148a2 <HAL_UART_Transmit+0x12a>
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	2201      	movs	r2, #1
 80147bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	2200      	movs	r2, #0
 80147c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	2221      	movs	r2, #33	; 0x21
 80147ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80147ce:	f7fb fd25 	bl	801021c <HAL_GetTick>
 80147d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	88fa      	ldrh	r2, [r7, #6]
 80147d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	88fa      	ldrh	r2, [r7, #6]
 80147de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2200      	movs	r2, #0
 80147e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80147e8:	e042      	b.n	8014870 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	3b01      	subs	r3, #1
 80147f2:	b29a      	uxth	r2, r3
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	689b      	ldr	r3, [r3, #8]
 80147fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014800:	d122      	bne.n	8014848 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	9300      	str	r3, [sp, #0]
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	2200      	movs	r2, #0
 801480a:	2180      	movs	r1, #128	; 0x80
 801480c:	68f8      	ldr	r0, [r7, #12]
 801480e:	f000 f8f2 	bl	80149f6 <UART_WaitOnFlagUntilTimeout>
 8014812:	4603      	mov	r3, r0
 8014814:	2b00      	cmp	r3, #0
 8014816:	d001      	beq.n	801481c <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8014818:	2303      	movs	r3, #3
 801481a:	e042      	b.n	80148a2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	461a      	mov	r2, r3
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801482e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	691b      	ldr	r3, [r3, #16]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d103      	bne.n	8014840 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	3302      	adds	r3, #2
 801483c:	60bb      	str	r3, [r7, #8]
 801483e:	e017      	b.n	8014870 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	3301      	adds	r3, #1
 8014844:	60bb      	str	r3, [r7, #8]
 8014846:	e013      	b.n	8014870 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	9300      	str	r3, [sp, #0]
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	2200      	movs	r2, #0
 8014850:	2180      	movs	r1, #128	; 0x80
 8014852:	68f8      	ldr	r0, [r7, #12]
 8014854:	f000 f8cf 	bl	80149f6 <UART_WaitOnFlagUntilTimeout>
 8014858:	4603      	mov	r3, r0
 801485a:	2b00      	cmp	r3, #0
 801485c:	d001      	beq.n	8014862 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801485e:	2303      	movs	r3, #3
 8014860:	e01f      	b.n	80148a2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	1c5a      	adds	r2, r3, #1
 8014866:	60ba      	str	r2, [r7, #8]
 8014868:	781a      	ldrb	r2, [r3, #0]
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014874:	b29b      	uxth	r3, r3
 8014876:	2b00      	cmp	r3, #0
 8014878:	d1b7      	bne.n	80147ea <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	9300      	str	r3, [sp, #0]
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	2200      	movs	r2, #0
 8014882:	2140      	movs	r1, #64	; 0x40
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f000 f8b6 	bl	80149f6 <UART_WaitOnFlagUntilTimeout>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d001      	beq.n	8014894 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8014890:	2303      	movs	r3, #3
 8014892:	e006      	b.n	80148a2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	2220      	movs	r2, #32
 8014898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801489c:	2300      	movs	r3, #0
 801489e:	e000      	b.n	80148a2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80148a0:	2302      	movs	r3, #2
  }
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3718      	adds	r7, #24
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}

080148aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80148aa:	b580      	push	{r7, lr}
 80148ac:	b088      	sub	sp, #32
 80148ae:	af02      	add	r7, sp, #8
 80148b0:	60f8      	str	r0, [r7, #12]
 80148b2:	60b9      	str	r1, [r7, #8]
 80148b4:	603b      	str	r3, [r7, #0]
 80148b6:	4613      	mov	r3, r2
 80148b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80148ba:	2300      	movs	r3, #0
 80148bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80148c4:	b2db      	uxtb	r3, r3
 80148c6:	2b20      	cmp	r3, #32
 80148c8:	f040 8090 	bne.w	80149ec <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d002      	beq.n	80148d8 <HAL_UART_Receive+0x2e>
 80148d2:	88fb      	ldrh	r3, [r7, #6]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d101      	bne.n	80148dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80148d8:	2301      	movs	r3, #1
 80148da:	e088      	b.n	80149ee <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80148e2:	2b01      	cmp	r3, #1
 80148e4:	d101      	bne.n	80148ea <HAL_UART_Receive+0x40>
 80148e6:	2302      	movs	r3, #2
 80148e8:	e081      	b.n	80149ee <HAL_UART_Receive+0x144>
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2201      	movs	r2, #1
 80148ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	2200      	movs	r2, #0
 80148f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	2222      	movs	r2, #34	; 0x22
 80148fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8014900:	f7fb fc8c 	bl	801021c <HAL_GetTick>
 8014904:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	88fa      	ldrh	r2, [r7, #6]
 801490a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	88fa      	ldrh	r2, [r7, #6]
 8014910:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	2200      	movs	r2, #0
 8014916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 801491a:	e05c      	b.n	80149d6 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014920:	b29b      	uxth	r3, r3
 8014922:	3b01      	subs	r3, #1
 8014924:	b29a      	uxth	r2, r3
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	689b      	ldr	r3, [r3, #8]
 801492e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014932:	d12b      	bne.n	801498c <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	9300      	str	r3, [sp, #0]
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	2200      	movs	r2, #0
 801493c:	2120      	movs	r1, #32
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f000 f859 	bl	80149f6 <UART_WaitOnFlagUntilTimeout>
 8014944:	4603      	mov	r3, r0
 8014946:	2b00      	cmp	r3, #0
 8014948:	d001      	beq.n	801494e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 801494a:	2303      	movs	r3, #3
 801494c:	e04f      	b.n	80149ee <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	691b      	ldr	r3, [r3, #16]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10c      	bne.n	8014974 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	b29b      	uxth	r3, r3
 8014962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014966:	b29a      	uxth	r2, r3
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	3302      	adds	r3, #2
 8014970:	60bb      	str	r3, [r7, #8]
 8014972:	e030      	b.n	80149d6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	b29b      	uxth	r3, r3
 801497c:	b2db      	uxtb	r3, r3
 801497e:	b29a      	uxth	r2, r3
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	3301      	adds	r3, #1
 8014988:	60bb      	str	r3, [r7, #8]
 801498a:	e024      	b.n	80149d6 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	2200      	movs	r2, #0
 8014994:	2120      	movs	r1, #32
 8014996:	68f8      	ldr	r0, [r7, #12]
 8014998:	f000 f82d 	bl	80149f6 <UART_WaitOnFlagUntilTimeout>
 801499c:	4603      	mov	r3, r0
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d001      	beq.n	80149a6 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80149a2:	2303      	movs	r3, #3
 80149a4:	e023      	b.n	80149ee <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	691b      	ldr	r3, [r3, #16]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d108      	bne.n	80149c0 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	6859      	ldr	r1, [r3, #4]
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	1c5a      	adds	r2, r3, #1
 80149b8:	60ba      	str	r2, [r7, #8]
 80149ba:	b2ca      	uxtb	r2, r1
 80149bc:	701a      	strb	r2, [r3, #0]
 80149be:	e00a      	b.n	80149d6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	b2da      	uxtb	r2, r3
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	1c59      	adds	r1, r3, #1
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80149d2:	b2d2      	uxtb	r2, r2
 80149d4:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80149da:	b29b      	uxth	r3, r3
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d19d      	bne.n	801491c <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2220      	movs	r2, #32
 80149e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80149e8:	2300      	movs	r3, #0
 80149ea:	e000      	b.n	80149ee <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80149ec:	2302      	movs	r3, #2
  }
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3718      	adds	r7, #24
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}

080149f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80149f6:	b580      	push	{r7, lr}
 80149f8:	b084      	sub	sp, #16
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	60f8      	str	r0, [r7, #12]
 80149fe:	60b9      	str	r1, [r7, #8]
 8014a00:	603b      	str	r3, [r7, #0]
 8014a02:	4613      	mov	r3, r2
 8014a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014a06:	e02c      	b.n	8014a62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014a08:	69bb      	ldr	r3, [r7, #24]
 8014a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a0e:	d028      	beq.n	8014a62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d007      	beq.n	8014a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8014a16:	f7fb fc01 	bl	801021c <HAL_GetTick>
 8014a1a:	4602      	mov	r2, r0
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	1ad3      	subs	r3, r2, r3
 8014a20:	69ba      	ldr	r2, [r7, #24]
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d21d      	bcs.n	8014a62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	68da      	ldr	r2, [r3, #12]
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014a34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	695a      	ldr	r2, [r3, #20]
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	f022 0201 	bic.w	r2, r2, #1
 8014a44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	2220      	movs	r2, #32
 8014a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	2220      	movs	r2, #32
 8014a52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8014a5e:	2303      	movs	r3, #3
 8014a60:	e00f      	b.n	8014a82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	681a      	ldr	r2, [r3, #0]
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	4013      	ands	r3, r2
 8014a6c:	68ba      	ldr	r2, [r7, #8]
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	bf0c      	ite	eq
 8014a72:	2301      	moveq	r3, #1
 8014a74:	2300      	movne	r3, #0
 8014a76:	b2db      	uxtb	r3, r3
 8014a78:	461a      	mov	r2, r3
 8014a7a:	79fb      	ldrb	r3, [r7, #7]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d0c3      	beq.n	8014a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014a80:	2300      	movs	r3, #0
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3710      	adds	r7, #16
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}
	...

08014a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a90:	b085      	sub	sp, #20
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	691b      	ldr	r3, [r3, #16]
 8014a9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	68da      	ldr	r2, [r3, #12]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	430a      	orrs	r2, r1
 8014aaa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	689a      	ldr	r2, [r3, #8]
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	691b      	ldr	r3, [r3, #16]
 8014ab4:	431a      	orrs	r2, r3
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	695b      	ldr	r3, [r3, #20]
 8014aba:	431a      	orrs	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	69db      	ldr	r3, [r3, #28]
 8014ac0:	4313      	orrs	r3, r2
 8014ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	68db      	ldr	r3, [r3, #12]
 8014aca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8014ace:	f023 030c 	bic.w	r3, r3, #12
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	6812      	ldr	r2, [r2, #0]
 8014ad6:	68f9      	ldr	r1, [r7, #12]
 8014ad8:	430b      	orrs	r3, r1
 8014ada:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	695b      	ldr	r3, [r3, #20]
 8014ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	699a      	ldr	r2, [r3, #24]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	430a      	orrs	r2, r1
 8014af0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	69db      	ldr	r3, [r3, #28]
 8014af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014afa:	f040 818b 	bne.w	8014e14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	4ac1      	ldr	r2, [pc, #772]	; (8014e08 <UART_SetConfig+0x37c>)
 8014b04:	4293      	cmp	r3, r2
 8014b06:	d005      	beq.n	8014b14 <UART_SetConfig+0x88>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	4abf      	ldr	r2, [pc, #764]	; (8014e0c <UART_SetConfig+0x380>)
 8014b0e:	4293      	cmp	r3, r2
 8014b10:	f040 80bd 	bne.w	8014c8e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014b14:	f7fd fce2 	bl	80124dc <HAL_RCC_GetPCLK2Freq>
 8014b18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	461d      	mov	r5, r3
 8014b1e:	f04f 0600 	mov.w	r6, #0
 8014b22:	46a8      	mov	r8, r5
 8014b24:	46b1      	mov	r9, r6
 8014b26:	eb18 0308 	adds.w	r3, r8, r8
 8014b2a:	eb49 0409 	adc.w	r4, r9, r9
 8014b2e:	4698      	mov	r8, r3
 8014b30:	46a1      	mov	r9, r4
 8014b32:	eb18 0805 	adds.w	r8, r8, r5
 8014b36:	eb49 0906 	adc.w	r9, r9, r6
 8014b3a:	f04f 0100 	mov.w	r1, #0
 8014b3e:	f04f 0200 	mov.w	r2, #0
 8014b42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014b46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014b4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014b4e:	4688      	mov	r8, r1
 8014b50:	4691      	mov	r9, r2
 8014b52:	eb18 0005 	adds.w	r0, r8, r5
 8014b56:	eb49 0106 	adc.w	r1, r9, r6
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	461d      	mov	r5, r3
 8014b60:	f04f 0600 	mov.w	r6, #0
 8014b64:	196b      	adds	r3, r5, r5
 8014b66:	eb46 0406 	adc.w	r4, r6, r6
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	4623      	mov	r3, r4
 8014b6e:	f7f3 ffc3 	bl	8008af8 <__aeabi_uldivmod>
 8014b72:	4603      	mov	r3, r0
 8014b74:	460c      	mov	r4, r1
 8014b76:	461a      	mov	r2, r3
 8014b78:	4ba5      	ldr	r3, [pc, #660]	; (8014e10 <UART_SetConfig+0x384>)
 8014b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8014b7e:	095b      	lsrs	r3, r3, #5
 8014b80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	461d      	mov	r5, r3
 8014b88:	f04f 0600 	mov.w	r6, #0
 8014b8c:	46a9      	mov	r9, r5
 8014b8e:	46b2      	mov	sl, r6
 8014b90:	eb19 0309 	adds.w	r3, r9, r9
 8014b94:	eb4a 040a 	adc.w	r4, sl, sl
 8014b98:	4699      	mov	r9, r3
 8014b9a:	46a2      	mov	sl, r4
 8014b9c:	eb19 0905 	adds.w	r9, r9, r5
 8014ba0:	eb4a 0a06 	adc.w	sl, sl, r6
 8014ba4:	f04f 0100 	mov.w	r1, #0
 8014ba8:	f04f 0200 	mov.w	r2, #0
 8014bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014bb8:	4689      	mov	r9, r1
 8014bba:	4692      	mov	sl, r2
 8014bbc:	eb19 0005 	adds.w	r0, r9, r5
 8014bc0:	eb4a 0106 	adc.w	r1, sl, r6
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	461d      	mov	r5, r3
 8014bca:	f04f 0600 	mov.w	r6, #0
 8014bce:	196b      	adds	r3, r5, r5
 8014bd0:	eb46 0406 	adc.w	r4, r6, r6
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	4623      	mov	r3, r4
 8014bd8:	f7f3 ff8e 	bl	8008af8 <__aeabi_uldivmod>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	460c      	mov	r4, r1
 8014be0:	461a      	mov	r2, r3
 8014be2:	4b8b      	ldr	r3, [pc, #556]	; (8014e10 <UART_SetConfig+0x384>)
 8014be4:	fba3 1302 	umull	r1, r3, r3, r2
 8014be8:	095b      	lsrs	r3, r3, #5
 8014bea:	2164      	movs	r1, #100	; 0x64
 8014bec:	fb01 f303 	mul.w	r3, r1, r3
 8014bf0:	1ad3      	subs	r3, r2, r3
 8014bf2:	00db      	lsls	r3, r3, #3
 8014bf4:	3332      	adds	r3, #50	; 0x32
 8014bf6:	4a86      	ldr	r2, [pc, #536]	; (8014e10 <UART_SetConfig+0x384>)
 8014bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8014bfc:	095b      	lsrs	r3, r3, #5
 8014bfe:	005b      	lsls	r3, r3, #1
 8014c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014c04:	4498      	add	r8, r3
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	461d      	mov	r5, r3
 8014c0a:	f04f 0600 	mov.w	r6, #0
 8014c0e:	46a9      	mov	r9, r5
 8014c10:	46b2      	mov	sl, r6
 8014c12:	eb19 0309 	adds.w	r3, r9, r9
 8014c16:	eb4a 040a 	adc.w	r4, sl, sl
 8014c1a:	4699      	mov	r9, r3
 8014c1c:	46a2      	mov	sl, r4
 8014c1e:	eb19 0905 	adds.w	r9, r9, r5
 8014c22:	eb4a 0a06 	adc.w	sl, sl, r6
 8014c26:	f04f 0100 	mov.w	r1, #0
 8014c2a:	f04f 0200 	mov.w	r2, #0
 8014c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014c3a:	4689      	mov	r9, r1
 8014c3c:	4692      	mov	sl, r2
 8014c3e:	eb19 0005 	adds.w	r0, r9, r5
 8014c42:	eb4a 0106 	adc.w	r1, sl, r6
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	685b      	ldr	r3, [r3, #4]
 8014c4a:	461d      	mov	r5, r3
 8014c4c:	f04f 0600 	mov.w	r6, #0
 8014c50:	196b      	adds	r3, r5, r5
 8014c52:	eb46 0406 	adc.w	r4, r6, r6
 8014c56:	461a      	mov	r2, r3
 8014c58:	4623      	mov	r3, r4
 8014c5a:	f7f3 ff4d 	bl	8008af8 <__aeabi_uldivmod>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	460c      	mov	r4, r1
 8014c62:	461a      	mov	r2, r3
 8014c64:	4b6a      	ldr	r3, [pc, #424]	; (8014e10 <UART_SetConfig+0x384>)
 8014c66:	fba3 1302 	umull	r1, r3, r3, r2
 8014c6a:	095b      	lsrs	r3, r3, #5
 8014c6c:	2164      	movs	r1, #100	; 0x64
 8014c6e:	fb01 f303 	mul.w	r3, r1, r3
 8014c72:	1ad3      	subs	r3, r2, r3
 8014c74:	00db      	lsls	r3, r3, #3
 8014c76:	3332      	adds	r3, #50	; 0x32
 8014c78:	4a65      	ldr	r2, [pc, #404]	; (8014e10 <UART_SetConfig+0x384>)
 8014c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8014c7e:	095b      	lsrs	r3, r3, #5
 8014c80:	f003 0207 	and.w	r2, r3, #7
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	4442      	add	r2, r8
 8014c8a:	609a      	str	r2, [r3, #8]
 8014c8c:	e26f      	b.n	801516e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014c8e:	f7fd fc11 	bl	80124b4 <HAL_RCC_GetPCLK1Freq>
 8014c92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	461d      	mov	r5, r3
 8014c98:	f04f 0600 	mov.w	r6, #0
 8014c9c:	46a8      	mov	r8, r5
 8014c9e:	46b1      	mov	r9, r6
 8014ca0:	eb18 0308 	adds.w	r3, r8, r8
 8014ca4:	eb49 0409 	adc.w	r4, r9, r9
 8014ca8:	4698      	mov	r8, r3
 8014caa:	46a1      	mov	r9, r4
 8014cac:	eb18 0805 	adds.w	r8, r8, r5
 8014cb0:	eb49 0906 	adc.w	r9, r9, r6
 8014cb4:	f04f 0100 	mov.w	r1, #0
 8014cb8:	f04f 0200 	mov.w	r2, #0
 8014cbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014cc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014cc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014cc8:	4688      	mov	r8, r1
 8014cca:	4691      	mov	r9, r2
 8014ccc:	eb18 0005 	adds.w	r0, r8, r5
 8014cd0:	eb49 0106 	adc.w	r1, r9, r6
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	685b      	ldr	r3, [r3, #4]
 8014cd8:	461d      	mov	r5, r3
 8014cda:	f04f 0600 	mov.w	r6, #0
 8014cde:	196b      	adds	r3, r5, r5
 8014ce0:	eb46 0406 	adc.w	r4, r6, r6
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	4623      	mov	r3, r4
 8014ce8:	f7f3 ff06 	bl	8008af8 <__aeabi_uldivmod>
 8014cec:	4603      	mov	r3, r0
 8014cee:	460c      	mov	r4, r1
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	4b47      	ldr	r3, [pc, #284]	; (8014e10 <UART_SetConfig+0x384>)
 8014cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8014cf8:	095b      	lsrs	r3, r3, #5
 8014cfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	461d      	mov	r5, r3
 8014d02:	f04f 0600 	mov.w	r6, #0
 8014d06:	46a9      	mov	r9, r5
 8014d08:	46b2      	mov	sl, r6
 8014d0a:	eb19 0309 	adds.w	r3, r9, r9
 8014d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8014d12:	4699      	mov	r9, r3
 8014d14:	46a2      	mov	sl, r4
 8014d16:	eb19 0905 	adds.w	r9, r9, r5
 8014d1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8014d1e:	f04f 0100 	mov.w	r1, #0
 8014d22:	f04f 0200 	mov.w	r2, #0
 8014d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014d32:	4689      	mov	r9, r1
 8014d34:	4692      	mov	sl, r2
 8014d36:	eb19 0005 	adds.w	r0, r9, r5
 8014d3a:	eb4a 0106 	adc.w	r1, sl, r6
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	685b      	ldr	r3, [r3, #4]
 8014d42:	461d      	mov	r5, r3
 8014d44:	f04f 0600 	mov.w	r6, #0
 8014d48:	196b      	adds	r3, r5, r5
 8014d4a:	eb46 0406 	adc.w	r4, r6, r6
 8014d4e:	461a      	mov	r2, r3
 8014d50:	4623      	mov	r3, r4
 8014d52:	f7f3 fed1 	bl	8008af8 <__aeabi_uldivmod>
 8014d56:	4603      	mov	r3, r0
 8014d58:	460c      	mov	r4, r1
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	4b2c      	ldr	r3, [pc, #176]	; (8014e10 <UART_SetConfig+0x384>)
 8014d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8014d62:	095b      	lsrs	r3, r3, #5
 8014d64:	2164      	movs	r1, #100	; 0x64
 8014d66:	fb01 f303 	mul.w	r3, r1, r3
 8014d6a:	1ad3      	subs	r3, r2, r3
 8014d6c:	00db      	lsls	r3, r3, #3
 8014d6e:	3332      	adds	r3, #50	; 0x32
 8014d70:	4a27      	ldr	r2, [pc, #156]	; (8014e10 <UART_SetConfig+0x384>)
 8014d72:	fba2 2303 	umull	r2, r3, r2, r3
 8014d76:	095b      	lsrs	r3, r3, #5
 8014d78:	005b      	lsls	r3, r3, #1
 8014d7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014d7e:	4498      	add	r8, r3
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	461d      	mov	r5, r3
 8014d84:	f04f 0600 	mov.w	r6, #0
 8014d88:	46a9      	mov	r9, r5
 8014d8a:	46b2      	mov	sl, r6
 8014d8c:	eb19 0309 	adds.w	r3, r9, r9
 8014d90:	eb4a 040a 	adc.w	r4, sl, sl
 8014d94:	4699      	mov	r9, r3
 8014d96:	46a2      	mov	sl, r4
 8014d98:	eb19 0905 	adds.w	r9, r9, r5
 8014d9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8014da0:	f04f 0100 	mov.w	r1, #0
 8014da4:	f04f 0200 	mov.w	r2, #0
 8014da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014db4:	4689      	mov	r9, r1
 8014db6:	4692      	mov	sl, r2
 8014db8:	eb19 0005 	adds.w	r0, r9, r5
 8014dbc:	eb4a 0106 	adc.w	r1, sl, r6
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	461d      	mov	r5, r3
 8014dc6:	f04f 0600 	mov.w	r6, #0
 8014dca:	196b      	adds	r3, r5, r5
 8014dcc:	eb46 0406 	adc.w	r4, r6, r6
 8014dd0:	461a      	mov	r2, r3
 8014dd2:	4623      	mov	r3, r4
 8014dd4:	f7f3 fe90 	bl	8008af8 <__aeabi_uldivmod>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	460c      	mov	r4, r1
 8014ddc:	461a      	mov	r2, r3
 8014dde:	4b0c      	ldr	r3, [pc, #48]	; (8014e10 <UART_SetConfig+0x384>)
 8014de0:	fba3 1302 	umull	r1, r3, r3, r2
 8014de4:	095b      	lsrs	r3, r3, #5
 8014de6:	2164      	movs	r1, #100	; 0x64
 8014de8:	fb01 f303 	mul.w	r3, r1, r3
 8014dec:	1ad3      	subs	r3, r2, r3
 8014dee:	00db      	lsls	r3, r3, #3
 8014df0:	3332      	adds	r3, #50	; 0x32
 8014df2:	4a07      	ldr	r2, [pc, #28]	; (8014e10 <UART_SetConfig+0x384>)
 8014df4:	fba2 2303 	umull	r2, r3, r2, r3
 8014df8:	095b      	lsrs	r3, r3, #5
 8014dfa:	f003 0207 	and.w	r2, r3, #7
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	4442      	add	r2, r8
 8014e04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8014e06:	e1b2      	b.n	801516e <UART_SetConfig+0x6e2>
 8014e08:	40011000 	.word	0x40011000
 8014e0c:	40011400 	.word	0x40011400
 8014e10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	4ad7      	ldr	r2, [pc, #860]	; (8015178 <UART_SetConfig+0x6ec>)
 8014e1a:	4293      	cmp	r3, r2
 8014e1c:	d005      	beq.n	8014e2a <UART_SetConfig+0x39e>
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	4ad6      	ldr	r2, [pc, #856]	; (801517c <UART_SetConfig+0x6f0>)
 8014e24:	4293      	cmp	r3, r2
 8014e26:	f040 80d1 	bne.w	8014fcc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8014e2a:	f7fd fb57 	bl	80124dc <HAL_RCC_GetPCLK2Freq>
 8014e2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	469a      	mov	sl, r3
 8014e34:	f04f 0b00 	mov.w	fp, #0
 8014e38:	46d0      	mov	r8, sl
 8014e3a:	46d9      	mov	r9, fp
 8014e3c:	eb18 0308 	adds.w	r3, r8, r8
 8014e40:	eb49 0409 	adc.w	r4, r9, r9
 8014e44:	4698      	mov	r8, r3
 8014e46:	46a1      	mov	r9, r4
 8014e48:	eb18 080a 	adds.w	r8, r8, sl
 8014e4c:	eb49 090b 	adc.w	r9, r9, fp
 8014e50:	f04f 0100 	mov.w	r1, #0
 8014e54:	f04f 0200 	mov.w	r2, #0
 8014e58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014e5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014e60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014e64:	4688      	mov	r8, r1
 8014e66:	4691      	mov	r9, r2
 8014e68:	eb1a 0508 	adds.w	r5, sl, r8
 8014e6c:	eb4b 0609 	adc.w	r6, fp, r9
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	4619      	mov	r1, r3
 8014e76:	f04f 0200 	mov.w	r2, #0
 8014e7a:	f04f 0300 	mov.w	r3, #0
 8014e7e:	f04f 0400 	mov.w	r4, #0
 8014e82:	0094      	lsls	r4, r2, #2
 8014e84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014e88:	008b      	lsls	r3, r1, #2
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	4623      	mov	r3, r4
 8014e8e:	4628      	mov	r0, r5
 8014e90:	4631      	mov	r1, r6
 8014e92:	f7f3 fe31 	bl	8008af8 <__aeabi_uldivmod>
 8014e96:	4603      	mov	r3, r0
 8014e98:	460c      	mov	r4, r1
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	4bb8      	ldr	r3, [pc, #736]	; (8015180 <UART_SetConfig+0x6f4>)
 8014e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8014ea2:	095b      	lsrs	r3, r3, #5
 8014ea4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	469b      	mov	fp, r3
 8014eac:	f04f 0c00 	mov.w	ip, #0
 8014eb0:	46d9      	mov	r9, fp
 8014eb2:	46e2      	mov	sl, ip
 8014eb4:	eb19 0309 	adds.w	r3, r9, r9
 8014eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8014ebc:	4699      	mov	r9, r3
 8014ebe:	46a2      	mov	sl, r4
 8014ec0:	eb19 090b 	adds.w	r9, r9, fp
 8014ec4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014ec8:	f04f 0100 	mov.w	r1, #0
 8014ecc:	f04f 0200 	mov.w	r2, #0
 8014ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014edc:	4689      	mov	r9, r1
 8014ede:	4692      	mov	sl, r2
 8014ee0:	eb1b 0509 	adds.w	r5, fp, r9
 8014ee4:	eb4c 060a 	adc.w	r6, ip, sl
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	4619      	mov	r1, r3
 8014eee:	f04f 0200 	mov.w	r2, #0
 8014ef2:	f04f 0300 	mov.w	r3, #0
 8014ef6:	f04f 0400 	mov.w	r4, #0
 8014efa:	0094      	lsls	r4, r2, #2
 8014efc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014f00:	008b      	lsls	r3, r1, #2
 8014f02:	461a      	mov	r2, r3
 8014f04:	4623      	mov	r3, r4
 8014f06:	4628      	mov	r0, r5
 8014f08:	4631      	mov	r1, r6
 8014f0a:	f7f3 fdf5 	bl	8008af8 <__aeabi_uldivmod>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	460c      	mov	r4, r1
 8014f12:	461a      	mov	r2, r3
 8014f14:	4b9a      	ldr	r3, [pc, #616]	; (8015180 <UART_SetConfig+0x6f4>)
 8014f16:	fba3 1302 	umull	r1, r3, r3, r2
 8014f1a:	095b      	lsrs	r3, r3, #5
 8014f1c:	2164      	movs	r1, #100	; 0x64
 8014f1e:	fb01 f303 	mul.w	r3, r1, r3
 8014f22:	1ad3      	subs	r3, r2, r3
 8014f24:	011b      	lsls	r3, r3, #4
 8014f26:	3332      	adds	r3, #50	; 0x32
 8014f28:	4a95      	ldr	r2, [pc, #596]	; (8015180 <UART_SetConfig+0x6f4>)
 8014f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8014f2e:	095b      	lsrs	r3, r3, #5
 8014f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f34:	4498      	add	r8, r3
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	469b      	mov	fp, r3
 8014f3a:	f04f 0c00 	mov.w	ip, #0
 8014f3e:	46d9      	mov	r9, fp
 8014f40:	46e2      	mov	sl, ip
 8014f42:	eb19 0309 	adds.w	r3, r9, r9
 8014f46:	eb4a 040a 	adc.w	r4, sl, sl
 8014f4a:	4699      	mov	r9, r3
 8014f4c:	46a2      	mov	sl, r4
 8014f4e:	eb19 090b 	adds.w	r9, r9, fp
 8014f52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014f56:	f04f 0100 	mov.w	r1, #0
 8014f5a:	f04f 0200 	mov.w	r2, #0
 8014f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014f62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014f66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014f6a:	4689      	mov	r9, r1
 8014f6c:	4692      	mov	sl, r2
 8014f6e:	eb1b 0509 	adds.w	r5, fp, r9
 8014f72:	eb4c 060a 	adc.w	r6, ip, sl
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	685b      	ldr	r3, [r3, #4]
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	f04f 0200 	mov.w	r2, #0
 8014f80:	f04f 0300 	mov.w	r3, #0
 8014f84:	f04f 0400 	mov.w	r4, #0
 8014f88:	0094      	lsls	r4, r2, #2
 8014f8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014f8e:	008b      	lsls	r3, r1, #2
 8014f90:	461a      	mov	r2, r3
 8014f92:	4623      	mov	r3, r4
 8014f94:	4628      	mov	r0, r5
 8014f96:	4631      	mov	r1, r6
 8014f98:	f7f3 fdae 	bl	8008af8 <__aeabi_uldivmod>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	460c      	mov	r4, r1
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	4b77      	ldr	r3, [pc, #476]	; (8015180 <UART_SetConfig+0x6f4>)
 8014fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8014fa8:	095b      	lsrs	r3, r3, #5
 8014faa:	2164      	movs	r1, #100	; 0x64
 8014fac:	fb01 f303 	mul.w	r3, r1, r3
 8014fb0:	1ad3      	subs	r3, r2, r3
 8014fb2:	011b      	lsls	r3, r3, #4
 8014fb4:	3332      	adds	r3, #50	; 0x32
 8014fb6:	4a72      	ldr	r2, [pc, #456]	; (8015180 <UART_SetConfig+0x6f4>)
 8014fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8014fbc:	095b      	lsrs	r3, r3, #5
 8014fbe:	f003 020f 	and.w	r2, r3, #15
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	4442      	add	r2, r8
 8014fc8:	609a      	str	r2, [r3, #8]
 8014fca:	e0d0      	b.n	801516e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8014fcc:	f7fd fa72 	bl	80124b4 <HAL_RCC_GetPCLK1Freq>
 8014fd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014fd2:	68bb      	ldr	r3, [r7, #8]
 8014fd4:	469a      	mov	sl, r3
 8014fd6:	f04f 0b00 	mov.w	fp, #0
 8014fda:	46d0      	mov	r8, sl
 8014fdc:	46d9      	mov	r9, fp
 8014fde:	eb18 0308 	adds.w	r3, r8, r8
 8014fe2:	eb49 0409 	adc.w	r4, r9, r9
 8014fe6:	4698      	mov	r8, r3
 8014fe8:	46a1      	mov	r9, r4
 8014fea:	eb18 080a 	adds.w	r8, r8, sl
 8014fee:	eb49 090b 	adc.w	r9, r9, fp
 8014ff2:	f04f 0100 	mov.w	r1, #0
 8014ff6:	f04f 0200 	mov.w	r2, #0
 8014ffa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014ffe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015002:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015006:	4688      	mov	r8, r1
 8015008:	4691      	mov	r9, r2
 801500a:	eb1a 0508 	adds.w	r5, sl, r8
 801500e:	eb4b 0609 	adc.w	r6, fp, r9
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	4619      	mov	r1, r3
 8015018:	f04f 0200 	mov.w	r2, #0
 801501c:	f04f 0300 	mov.w	r3, #0
 8015020:	f04f 0400 	mov.w	r4, #0
 8015024:	0094      	lsls	r4, r2, #2
 8015026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801502a:	008b      	lsls	r3, r1, #2
 801502c:	461a      	mov	r2, r3
 801502e:	4623      	mov	r3, r4
 8015030:	4628      	mov	r0, r5
 8015032:	4631      	mov	r1, r6
 8015034:	f7f3 fd60 	bl	8008af8 <__aeabi_uldivmod>
 8015038:	4603      	mov	r3, r0
 801503a:	460c      	mov	r4, r1
 801503c:	461a      	mov	r2, r3
 801503e:	4b50      	ldr	r3, [pc, #320]	; (8015180 <UART_SetConfig+0x6f4>)
 8015040:	fba3 2302 	umull	r2, r3, r3, r2
 8015044:	095b      	lsrs	r3, r3, #5
 8015046:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	469b      	mov	fp, r3
 801504e:	f04f 0c00 	mov.w	ip, #0
 8015052:	46d9      	mov	r9, fp
 8015054:	46e2      	mov	sl, ip
 8015056:	eb19 0309 	adds.w	r3, r9, r9
 801505a:	eb4a 040a 	adc.w	r4, sl, sl
 801505e:	4699      	mov	r9, r3
 8015060:	46a2      	mov	sl, r4
 8015062:	eb19 090b 	adds.w	r9, r9, fp
 8015066:	eb4a 0a0c 	adc.w	sl, sl, ip
 801506a:	f04f 0100 	mov.w	r1, #0
 801506e:	f04f 0200 	mov.w	r2, #0
 8015072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015076:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801507a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801507e:	4689      	mov	r9, r1
 8015080:	4692      	mov	sl, r2
 8015082:	eb1b 0509 	adds.w	r5, fp, r9
 8015086:	eb4c 060a 	adc.w	r6, ip, sl
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	685b      	ldr	r3, [r3, #4]
 801508e:	4619      	mov	r1, r3
 8015090:	f04f 0200 	mov.w	r2, #0
 8015094:	f04f 0300 	mov.w	r3, #0
 8015098:	f04f 0400 	mov.w	r4, #0
 801509c:	0094      	lsls	r4, r2, #2
 801509e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80150a2:	008b      	lsls	r3, r1, #2
 80150a4:	461a      	mov	r2, r3
 80150a6:	4623      	mov	r3, r4
 80150a8:	4628      	mov	r0, r5
 80150aa:	4631      	mov	r1, r6
 80150ac:	f7f3 fd24 	bl	8008af8 <__aeabi_uldivmod>
 80150b0:	4603      	mov	r3, r0
 80150b2:	460c      	mov	r4, r1
 80150b4:	461a      	mov	r2, r3
 80150b6:	4b32      	ldr	r3, [pc, #200]	; (8015180 <UART_SetConfig+0x6f4>)
 80150b8:	fba3 1302 	umull	r1, r3, r3, r2
 80150bc:	095b      	lsrs	r3, r3, #5
 80150be:	2164      	movs	r1, #100	; 0x64
 80150c0:	fb01 f303 	mul.w	r3, r1, r3
 80150c4:	1ad3      	subs	r3, r2, r3
 80150c6:	011b      	lsls	r3, r3, #4
 80150c8:	3332      	adds	r3, #50	; 0x32
 80150ca:	4a2d      	ldr	r2, [pc, #180]	; (8015180 <UART_SetConfig+0x6f4>)
 80150cc:	fba2 2303 	umull	r2, r3, r2, r3
 80150d0:	095b      	lsrs	r3, r3, #5
 80150d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150d6:	4498      	add	r8, r3
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	469b      	mov	fp, r3
 80150dc:	f04f 0c00 	mov.w	ip, #0
 80150e0:	46d9      	mov	r9, fp
 80150e2:	46e2      	mov	sl, ip
 80150e4:	eb19 0309 	adds.w	r3, r9, r9
 80150e8:	eb4a 040a 	adc.w	r4, sl, sl
 80150ec:	4699      	mov	r9, r3
 80150ee:	46a2      	mov	sl, r4
 80150f0:	eb19 090b 	adds.w	r9, r9, fp
 80150f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80150f8:	f04f 0100 	mov.w	r1, #0
 80150fc:	f04f 0200 	mov.w	r2, #0
 8015100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801510c:	4689      	mov	r9, r1
 801510e:	4692      	mov	sl, r2
 8015110:	eb1b 0509 	adds.w	r5, fp, r9
 8015114:	eb4c 060a 	adc.w	r6, ip, sl
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	4619      	mov	r1, r3
 801511e:	f04f 0200 	mov.w	r2, #0
 8015122:	f04f 0300 	mov.w	r3, #0
 8015126:	f04f 0400 	mov.w	r4, #0
 801512a:	0094      	lsls	r4, r2, #2
 801512c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015130:	008b      	lsls	r3, r1, #2
 8015132:	461a      	mov	r2, r3
 8015134:	4623      	mov	r3, r4
 8015136:	4628      	mov	r0, r5
 8015138:	4631      	mov	r1, r6
 801513a:	f7f3 fcdd 	bl	8008af8 <__aeabi_uldivmod>
 801513e:	4603      	mov	r3, r0
 8015140:	460c      	mov	r4, r1
 8015142:	461a      	mov	r2, r3
 8015144:	4b0e      	ldr	r3, [pc, #56]	; (8015180 <UART_SetConfig+0x6f4>)
 8015146:	fba3 1302 	umull	r1, r3, r3, r2
 801514a:	095b      	lsrs	r3, r3, #5
 801514c:	2164      	movs	r1, #100	; 0x64
 801514e:	fb01 f303 	mul.w	r3, r1, r3
 8015152:	1ad3      	subs	r3, r2, r3
 8015154:	011b      	lsls	r3, r3, #4
 8015156:	3332      	adds	r3, #50	; 0x32
 8015158:	4a09      	ldr	r2, [pc, #36]	; (8015180 <UART_SetConfig+0x6f4>)
 801515a:	fba2 2303 	umull	r2, r3, r2, r3
 801515e:	095b      	lsrs	r3, r3, #5
 8015160:	f003 020f 	and.w	r2, r3, #15
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4442      	add	r2, r8
 801516a:	609a      	str	r2, [r3, #8]
}
 801516c:	e7ff      	b.n	801516e <UART_SetConfig+0x6e2>
 801516e:	bf00      	nop
 8015170:	3714      	adds	r7, #20
 8015172:	46bd      	mov	sp, r7
 8015174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015178:	40011000 	.word	0x40011000
 801517c:	40011400 	.word	0x40011400
 8015180:	51eb851f 	.word	0x51eb851f

08015184 <round>:
 8015184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015186:	ec57 6b10 	vmov	r6, r7, d0
 801518a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801518e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015192:	2c13      	cmp	r4, #19
 8015194:	463b      	mov	r3, r7
 8015196:	463d      	mov	r5, r7
 8015198:	dc17      	bgt.n	80151ca <round+0x46>
 801519a:	2c00      	cmp	r4, #0
 801519c:	da09      	bge.n	80151b2 <round+0x2e>
 801519e:	3401      	adds	r4, #1
 80151a0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80151a4:	d103      	bne.n	80151ae <round+0x2a>
 80151a6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80151aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80151ae:	2100      	movs	r1, #0
 80151b0:	e02c      	b.n	801520c <round+0x88>
 80151b2:	4a18      	ldr	r2, [pc, #96]	; (8015214 <round+0x90>)
 80151b4:	4122      	asrs	r2, r4
 80151b6:	4217      	tst	r7, r2
 80151b8:	d100      	bne.n	80151bc <round+0x38>
 80151ba:	b19e      	cbz	r6, 80151e4 <round+0x60>
 80151bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80151c0:	4123      	asrs	r3, r4
 80151c2:	442b      	add	r3, r5
 80151c4:	ea23 0302 	bic.w	r3, r3, r2
 80151c8:	e7f1      	b.n	80151ae <round+0x2a>
 80151ca:	2c33      	cmp	r4, #51	; 0x33
 80151cc:	dd0d      	ble.n	80151ea <round+0x66>
 80151ce:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80151d2:	d107      	bne.n	80151e4 <round+0x60>
 80151d4:	4630      	mov	r0, r6
 80151d6:	4639      	mov	r1, r7
 80151d8:	ee10 2a10 	vmov	r2, s0
 80151dc:	f7f2 ff8e 	bl	80080fc <__adddf3>
 80151e0:	4606      	mov	r6, r0
 80151e2:	460f      	mov	r7, r1
 80151e4:	ec47 6b10 	vmov	d0, r6, r7
 80151e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151ea:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80151ee:	f04f 30ff 	mov.w	r0, #4294967295
 80151f2:	40d0      	lsrs	r0, r2
 80151f4:	4206      	tst	r6, r0
 80151f6:	d0f5      	beq.n	80151e4 <round+0x60>
 80151f8:	2201      	movs	r2, #1
 80151fa:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80151fe:	fa02 f404 	lsl.w	r4, r2, r4
 8015202:	1931      	adds	r1, r6, r4
 8015204:	bf28      	it	cs
 8015206:	189b      	addcs	r3, r3, r2
 8015208:	ea21 0100 	bic.w	r1, r1, r0
 801520c:	461f      	mov	r7, r3
 801520e:	460e      	mov	r6, r1
 8015210:	e7e8      	b.n	80151e4 <round+0x60>
 8015212:	bf00      	nop
 8015214:	000fffff 	.word	0x000fffff

08015218 <__errno>:
 8015218:	4b01      	ldr	r3, [pc, #4]	; (8015220 <__errno+0x8>)
 801521a:	6818      	ldr	r0, [r3, #0]
 801521c:	4770      	bx	lr
 801521e:	bf00      	nop
 8015220:	20000028 	.word	0x20000028

08015224 <__libc_init_array>:
 8015224:	b570      	push	{r4, r5, r6, lr}
 8015226:	4e0d      	ldr	r6, [pc, #52]	; (801525c <__libc_init_array+0x38>)
 8015228:	4c0d      	ldr	r4, [pc, #52]	; (8015260 <__libc_init_array+0x3c>)
 801522a:	1ba4      	subs	r4, r4, r6
 801522c:	10a4      	asrs	r4, r4, #2
 801522e:	2500      	movs	r5, #0
 8015230:	42a5      	cmp	r5, r4
 8015232:	d109      	bne.n	8015248 <__libc_init_array+0x24>
 8015234:	4e0b      	ldr	r6, [pc, #44]	; (8015264 <__libc_init_array+0x40>)
 8015236:	4c0c      	ldr	r4, [pc, #48]	; (8015268 <__libc_init_array+0x44>)
 8015238:	f005 f83a 	bl	801a2b0 <_init>
 801523c:	1ba4      	subs	r4, r4, r6
 801523e:	10a4      	asrs	r4, r4, #2
 8015240:	2500      	movs	r5, #0
 8015242:	42a5      	cmp	r5, r4
 8015244:	d105      	bne.n	8015252 <__libc_init_array+0x2e>
 8015246:	bd70      	pop	{r4, r5, r6, pc}
 8015248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801524c:	4798      	blx	r3
 801524e:	3501      	adds	r5, #1
 8015250:	e7ee      	b.n	8015230 <__libc_init_array+0xc>
 8015252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015256:	4798      	blx	r3
 8015258:	3501      	adds	r5, #1
 801525a:	e7f2      	b.n	8015242 <__libc_init_array+0x1e>
 801525c:	0801a90c 	.word	0x0801a90c
 8015260:	0801a90c 	.word	0x0801a90c
 8015264:	0801a90c 	.word	0x0801a90c
 8015268:	0801a910 	.word	0x0801a910

0801526c <memcpy>:
 801526c:	b510      	push	{r4, lr}
 801526e:	1e43      	subs	r3, r0, #1
 8015270:	440a      	add	r2, r1
 8015272:	4291      	cmp	r1, r2
 8015274:	d100      	bne.n	8015278 <memcpy+0xc>
 8015276:	bd10      	pop	{r4, pc}
 8015278:	f811 4b01 	ldrb.w	r4, [r1], #1
 801527c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015280:	e7f7      	b.n	8015272 <memcpy+0x6>

08015282 <memset>:
 8015282:	4402      	add	r2, r0
 8015284:	4603      	mov	r3, r0
 8015286:	4293      	cmp	r3, r2
 8015288:	d100      	bne.n	801528c <memset+0xa>
 801528a:	4770      	bx	lr
 801528c:	f803 1b01 	strb.w	r1, [r3], #1
 8015290:	e7f9      	b.n	8015286 <memset+0x4>

08015292 <__cvt>:
 8015292:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015296:	ec55 4b10 	vmov	r4, r5, d0
 801529a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801529c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80152a0:	2d00      	cmp	r5, #0
 80152a2:	460e      	mov	r6, r1
 80152a4:	4691      	mov	r9, r2
 80152a6:	4619      	mov	r1, r3
 80152a8:	bfb8      	it	lt
 80152aa:	4622      	movlt	r2, r4
 80152ac:	462b      	mov	r3, r5
 80152ae:	f027 0720 	bic.w	r7, r7, #32
 80152b2:	bfbb      	ittet	lt
 80152b4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80152b8:	461d      	movlt	r5, r3
 80152ba:	2300      	movge	r3, #0
 80152bc:	232d      	movlt	r3, #45	; 0x2d
 80152be:	bfb8      	it	lt
 80152c0:	4614      	movlt	r4, r2
 80152c2:	2f46      	cmp	r7, #70	; 0x46
 80152c4:	700b      	strb	r3, [r1, #0]
 80152c6:	d004      	beq.n	80152d2 <__cvt+0x40>
 80152c8:	2f45      	cmp	r7, #69	; 0x45
 80152ca:	d100      	bne.n	80152ce <__cvt+0x3c>
 80152cc:	3601      	adds	r6, #1
 80152ce:	2102      	movs	r1, #2
 80152d0:	e000      	b.n	80152d4 <__cvt+0x42>
 80152d2:	2103      	movs	r1, #3
 80152d4:	ab03      	add	r3, sp, #12
 80152d6:	9301      	str	r3, [sp, #4]
 80152d8:	ab02      	add	r3, sp, #8
 80152da:	9300      	str	r3, [sp, #0]
 80152dc:	4632      	mov	r2, r6
 80152de:	4653      	mov	r3, sl
 80152e0:	ec45 4b10 	vmov	d0, r4, r5
 80152e4:	f001 ff80 	bl	80171e8 <_dtoa_r>
 80152e8:	2f47      	cmp	r7, #71	; 0x47
 80152ea:	4680      	mov	r8, r0
 80152ec:	d102      	bne.n	80152f4 <__cvt+0x62>
 80152ee:	f019 0f01 	tst.w	r9, #1
 80152f2:	d026      	beq.n	8015342 <__cvt+0xb0>
 80152f4:	2f46      	cmp	r7, #70	; 0x46
 80152f6:	eb08 0906 	add.w	r9, r8, r6
 80152fa:	d111      	bne.n	8015320 <__cvt+0x8e>
 80152fc:	f898 3000 	ldrb.w	r3, [r8]
 8015300:	2b30      	cmp	r3, #48	; 0x30
 8015302:	d10a      	bne.n	801531a <__cvt+0x88>
 8015304:	2200      	movs	r2, #0
 8015306:	2300      	movs	r3, #0
 8015308:	4620      	mov	r0, r4
 801530a:	4629      	mov	r1, r5
 801530c:	f7f3 fb14 	bl	8008938 <__aeabi_dcmpeq>
 8015310:	b918      	cbnz	r0, 801531a <__cvt+0x88>
 8015312:	f1c6 0601 	rsb	r6, r6, #1
 8015316:	f8ca 6000 	str.w	r6, [sl]
 801531a:	f8da 3000 	ldr.w	r3, [sl]
 801531e:	4499      	add	r9, r3
 8015320:	2200      	movs	r2, #0
 8015322:	2300      	movs	r3, #0
 8015324:	4620      	mov	r0, r4
 8015326:	4629      	mov	r1, r5
 8015328:	f7f3 fb06 	bl	8008938 <__aeabi_dcmpeq>
 801532c:	b938      	cbnz	r0, 801533e <__cvt+0xac>
 801532e:	2230      	movs	r2, #48	; 0x30
 8015330:	9b03      	ldr	r3, [sp, #12]
 8015332:	454b      	cmp	r3, r9
 8015334:	d205      	bcs.n	8015342 <__cvt+0xb0>
 8015336:	1c59      	adds	r1, r3, #1
 8015338:	9103      	str	r1, [sp, #12]
 801533a:	701a      	strb	r2, [r3, #0]
 801533c:	e7f8      	b.n	8015330 <__cvt+0x9e>
 801533e:	f8cd 900c 	str.w	r9, [sp, #12]
 8015342:	9b03      	ldr	r3, [sp, #12]
 8015344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015346:	eba3 0308 	sub.w	r3, r3, r8
 801534a:	4640      	mov	r0, r8
 801534c:	6013      	str	r3, [r2, #0]
 801534e:	b004      	add	sp, #16
 8015350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015354 <__exponent>:
 8015354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015356:	2900      	cmp	r1, #0
 8015358:	4604      	mov	r4, r0
 801535a:	bfba      	itte	lt
 801535c:	4249      	neglt	r1, r1
 801535e:	232d      	movlt	r3, #45	; 0x2d
 8015360:	232b      	movge	r3, #43	; 0x2b
 8015362:	2909      	cmp	r1, #9
 8015364:	f804 2b02 	strb.w	r2, [r4], #2
 8015368:	7043      	strb	r3, [r0, #1]
 801536a:	dd20      	ble.n	80153ae <__exponent+0x5a>
 801536c:	f10d 0307 	add.w	r3, sp, #7
 8015370:	461f      	mov	r7, r3
 8015372:	260a      	movs	r6, #10
 8015374:	fb91 f5f6 	sdiv	r5, r1, r6
 8015378:	fb06 1115 	mls	r1, r6, r5, r1
 801537c:	3130      	adds	r1, #48	; 0x30
 801537e:	2d09      	cmp	r5, #9
 8015380:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015384:	f103 32ff 	add.w	r2, r3, #4294967295
 8015388:	4629      	mov	r1, r5
 801538a:	dc09      	bgt.n	80153a0 <__exponent+0x4c>
 801538c:	3130      	adds	r1, #48	; 0x30
 801538e:	3b02      	subs	r3, #2
 8015390:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015394:	42bb      	cmp	r3, r7
 8015396:	4622      	mov	r2, r4
 8015398:	d304      	bcc.n	80153a4 <__exponent+0x50>
 801539a:	1a10      	subs	r0, r2, r0
 801539c:	b003      	add	sp, #12
 801539e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153a0:	4613      	mov	r3, r2
 80153a2:	e7e7      	b.n	8015374 <__exponent+0x20>
 80153a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153a8:	f804 2b01 	strb.w	r2, [r4], #1
 80153ac:	e7f2      	b.n	8015394 <__exponent+0x40>
 80153ae:	2330      	movs	r3, #48	; 0x30
 80153b0:	4419      	add	r1, r3
 80153b2:	7083      	strb	r3, [r0, #2]
 80153b4:	1d02      	adds	r2, r0, #4
 80153b6:	70c1      	strb	r1, [r0, #3]
 80153b8:	e7ef      	b.n	801539a <__exponent+0x46>
	...

080153bc <_printf_float>:
 80153bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153c0:	b08d      	sub	sp, #52	; 0x34
 80153c2:	460c      	mov	r4, r1
 80153c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80153c8:	4616      	mov	r6, r2
 80153ca:	461f      	mov	r7, r3
 80153cc:	4605      	mov	r5, r0
 80153ce:	f003 f9a5 	bl	801871c <_localeconv_r>
 80153d2:	6803      	ldr	r3, [r0, #0]
 80153d4:	9304      	str	r3, [sp, #16]
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7f2 fe32 	bl	8008040 <strlen>
 80153dc:	2300      	movs	r3, #0
 80153de:	930a      	str	r3, [sp, #40]	; 0x28
 80153e0:	f8d8 3000 	ldr.w	r3, [r8]
 80153e4:	9005      	str	r0, [sp, #20]
 80153e6:	3307      	adds	r3, #7
 80153e8:	f023 0307 	bic.w	r3, r3, #7
 80153ec:	f103 0208 	add.w	r2, r3, #8
 80153f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80153f4:	f8d4 b000 	ldr.w	fp, [r4]
 80153f8:	f8c8 2000 	str.w	r2, [r8]
 80153fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015400:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015404:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015408:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801540c:	9307      	str	r3, [sp, #28]
 801540e:	f8cd 8018 	str.w	r8, [sp, #24]
 8015412:	f04f 32ff 	mov.w	r2, #4294967295
 8015416:	4ba7      	ldr	r3, [pc, #668]	; (80156b4 <_printf_float+0x2f8>)
 8015418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801541c:	f7f3 fabe 	bl	800899c <__aeabi_dcmpun>
 8015420:	bb70      	cbnz	r0, 8015480 <_printf_float+0xc4>
 8015422:	f04f 32ff 	mov.w	r2, #4294967295
 8015426:	4ba3      	ldr	r3, [pc, #652]	; (80156b4 <_printf_float+0x2f8>)
 8015428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801542c:	f7f3 fa98 	bl	8008960 <__aeabi_dcmple>
 8015430:	bb30      	cbnz	r0, 8015480 <_printf_float+0xc4>
 8015432:	2200      	movs	r2, #0
 8015434:	2300      	movs	r3, #0
 8015436:	4640      	mov	r0, r8
 8015438:	4649      	mov	r1, r9
 801543a:	f7f3 fa87 	bl	800894c <__aeabi_dcmplt>
 801543e:	b110      	cbz	r0, 8015446 <_printf_float+0x8a>
 8015440:	232d      	movs	r3, #45	; 0x2d
 8015442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015446:	4a9c      	ldr	r2, [pc, #624]	; (80156b8 <_printf_float+0x2fc>)
 8015448:	4b9c      	ldr	r3, [pc, #624]	; (80156bc <_printf_float+0x300>)
 801544a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801544e:	bf8c      	ite	hi
 8015450:	4690      	movhi	r8, r2
 8015452:	4698      	movls	r8, r3
 8015454:	2303      	movs	r3, #3
 8015456:	f02b 0204 	bic.w	r2, fp, #4
 801545a:	6123      	str	r3, [r4, #16]
 801545c:	6022      	str	r2, [r4, #0]
 801545e:	f04f 0900 	mov.w	r9, #0
 8015462:	9700      	str	r7, [sp, #0]
 8015464:	4633      	mov	r3, r6
 8015466:	aa0b      	add	r2, sp, #44	; 0x2c
 8015468:	4621      	mov	r1, r4
 801546a:	4628      	mov	r0, r5
 801546c:	f000 f9e6 	bl	801583c <_printf_common>
 8015470:	3001      	adds	r0, #1
 8015472:	f040 808d 	bne.w	8015590 <_printf_float+0x1d4>
 8015476:	f04f 30ff 	mov.w	r0, #4294967295
 801547a:	b00d      	add	sp, #52	; 0x34
 801547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015480:	4642      	mov	r2, r8
 8015482:	464b      	mov	r3, r9
 8015484:	4640      	mov	r0, r8
 8015486:	4649      	mov	r1, r9
 8015488:	f7f3 fa88 	bl	800899c <__aeabi_dcmpun>
 801548c:	b110      	cbz	r0, 8015494 <_printf_float+0xd8>
 801548e:	4a8c      	ldr	r2, [pc, #560]	; (80156c0 <_printf_float+0x304>)
 8015490:	4b8c      	ldr	r3, [pc, #560]	; (80156c4 <_printf_float+0x308>)
 8015492:	e7da      	b.n	801544a <_printf_float+0x8e>
 8015494:	6861      	ldr	r1, [r4, #4]
 8015496:	1c4b      	adds	r3, r1, #1
 8015498:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801549c:	a80a      	add	r0, sp, #40	; 0x28
 801549e:	d13e      	bne.n	801551e <_printf_float+0x162>
 80154a0:	2306      	movs	r3, #6
 80154a2:	6063      	str	r3, [r4, #4]
 80154a4:	2300      	movs	r3, #0
 80154a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80154aa:	ab09      	add	r3, sp, #36	; 0x24
 80154ac:	9300      	str	r3, [sp, #0]
 80154ae:	ec49 8b10 	vmov	d0, r8, r9
 80154b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80154b6:	6022      	str	r2, [r4, #0]
 80154b8:	f8cd a004 	str.w	sl, [sp, #4]
 80154bc:	6861      	ldr	r1, [r4, #4]
 80154be:	4628      	mov	r0, r5
 80154c0:	f7ff fee7 	bl	8015292 <__cvt>
 80154c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80154c8:	2b47      	cmp	r3, #71	; 0x47
 80154ca:	4680      	mov	r8, r0
 80154cc:	d109      	bne.n	80154e2 <_printf_float+0x126>
 80154ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154d0:	1cd8      	adds	r0, r3, #3
 80154d2:	db02      	blt.n	80154da <_printf_float+0x11e>
 80154d4:	6862      	ldr	r2, [r4, #4]
 80154d6:	4293      	cmp	r3, r2
 80154d8:	dd47      	ble.n	801556a <_printf_float+0x1ae>
 80154da:	f1aa 0a02 	sub.w	sl, sl, #2
 80154de:	fa5f fa8a 	uxtb.w	sl, sl
 80154e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80154e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154e8:	d824      	bhi.n	8015534 <_printf_float+0x178>
 80154ea:	3901      	subs	r1, #1
 80154ec:	4652      	mov	r2, sl
 80154ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80154f2:	9109      	str	r1, [sp, #36]	; 0x24
 80154f4:	f7ff ff2e 	bl	8015354 <__exponent>
 80154f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154fa:	1813      	adds	r3, r2, r0
 80154fc:	2a01      	cmp	r2, #1
 80154fe:	4681      	mov	r9, r0
 8015500:	6123      	str	r3, [r4, #16]
 8015502:	dc02      	bgt.n	801550a <_printf_float+0x14e>
 8015504:	6822      	ldr	r2, [r4, #0]
 8015506:	07d1      	lsls	r1, r2, #31
 8015508:	d501      	bpl.n	801550e <_printf_float+0x152>
 801550a:	3301      	adds	r3, #1
 801550c:	6123      	str	r3, [r4, #16]
 801550e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015512:	2b00      	cmp	r3, #0
 8015514:	d0a5      	beq.n	8015462 <_printf_float+0xa6>
 8015516:	232d      	movs	r3, #45	; 0x2d
 8015518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801551c:	e7a1      	b.n	8015462 <_printf_float+0xa6>
 801551e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015522:	f000 8177 	beq.w	8015814 <_printf_float+0x458>
 8015526:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801552a:	d1bb      	bne.n	80154a4 <_printf_float+0xe8>
 801552c:	2900      	cmp	r1, #0
 801552e:	d1b9      	bne.n	80154a4 <_printf_float+0xe8>
 8015530:	2301      	movs	r3, #1
 8015532:	e7b6      	b.n	80154a2 <_printf_float+0xe6>
 8015534:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015538:	d119      	bne.n	801556e <_printf_float+0x1b2>
 801553a:	2900      	cmp	r1, #0
 801553c:	6863      	ldr	r3, [r4, #4]
 801553e:	dd0c      	ble.n	801555a <_printf_float+0x19e>
 8015540:	6121      	str	r1, [r4, #16]
 8015542:	b913      	cbnz	r3, 801554a <_printf_float+0x18e>
 8015544:	6822      	ldr	r2, [r4, #0]
 8015546:	07d2      	lsls	r2, r2, #31
 8015548:	d502      	bpl.n	8015550 <_printf_float+0x194>
 801554a:	3301      	adds	r3, #1
 801554c:	440b      	add	r3, r1
 801554e:	6123      	str	r3, [r4, #16]
 8015550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015552:	65a3      	str	r3, [r4, #88]	; 0x58
 8015554:	f04f 0900 	mov.w	r9, #0
 8015558:	e7d9      	b.n	801550e <_printf_float+0x152>
 801555a:	b913      	cbnz	r3, 8015562 <_printf_float+0x1a6>
 801555c:	6822      	ldr	r2, [r4, #0]
 801555e:	07d0      	lsls	r0, r2, #31
 8015560:	d501      	bpl.n	8015566 <_printf_float+0x1aa>
 8015562:	3302      	adds	r3, #2
 8015564:	e7f3      	b.n	801554e <_printf_float+0x192>
 8015566:	2301      	movs	r3, #1
 8015568:	e7f1      	b.n	801554e <_printf_float+0x192>
 801556a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801556e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015572:	4293      	cmp	r3, r2
 8015574:	db05      	blt.n	8015582 <_printf_float+0x1c6>
 8015576:	6822      	ldr	r2, [r4, #0]
 8015578:	6123      	str	r3, [r4, #16]
 801557a:	07d1      	lsls	r1, r2, #31
 801557c:	d5e8      	bpl.n	8015550 <_printf_float+0x194>
 801557e:	3301      	adds	r3, #1
 8015580:	e7e5      	b.n	801554e <_printf_float+0x192>
 8015582:	2b00      	cmp	r3, #0
 8015584:	bfd4      	ite	le
 8015586:	f1c3 0302 	rsble	r3, r3, #2
 801558a:	2301      	movgt	r3, #1
 801558c:	4413      	add	r3, r2
 801558e:	e7de      	b.n	801554e <_printf_float+0x192>
 8015590:	6823      	ldr	r3, [r4, #0]
 8015592:	055a      	lsls	r2, r3, #21
 8015594:	d407      	bmi.n	80155a6 <_printf_float+0x1ea>
 8015596:	6923      	ldr	r3, [r4, #16]
 8015598:	4642      	mov	r2, r8
 801559a:	4631      	mov	r1, r6
 801559c:	4628      	mov	r0, r5
 801559e:	47b8      	blx	r7
 80155a0:	3001      	adds	r0, #1
 80155a2:	d12b      	bne.n	80155fc <_printf_float+0x240>
 80155a4:	e767      	b.n	8015476 <_printf_float+0xba>
 80155a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80155aa:	f240 80dc 	bls.w	8015766 <_printf_float+0x3aa>
 80155ae:	2200      	movs	r2, #0
 80155b0:	2300      	movs	r3, #0
 80155b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80155b6:	f7f3 f9bf 	bl	8008938 <__aeabi_dcmpeq>
 80155ba:	2800      	cmp	r0, #0
 80155bc:	d033      	beq.n	8015626 <_printf_float+0x26a>
 80155be:	2301      	movs	r3, #1
 80155c0:	4a41      	ldr	r2, [pc, #260]	; (80156c8 <_printf_float+0x30c>)
 80155c2:	4631      	mov	r1, r6
 80155c4:	4628      	mov	r0, r5
 80155c6:	47b8      	blx	r7
 80155c8:	3001      	adds	r0, #1
 80155ca:	f43f af54 	beq.w	8015476 <_printf_float+0xba>
 80155ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155d2:	429a      	cmp	r2, r3
 80155d4:	db02      	blt.n	80155dc <_printf_float+0x220>
 80155d6:	6823      	ldr	r3, [r4, #0]
 80155d8:	07d8      	lsls	r0, r3, #31
 80155da:	d50f      	bpl.n	80155fc <_printf_float+0x240>
 80155dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155e0:	4631      	mov	r1, r6
 80155e2:	4628      	mov	r0, r5
 80155e4:	47b8      	blx	r7
 80155e6:	3001      	adds	r0, #1
 80155e8:	f43f af45 	beq.w	8015476 <_printf_float+0xba>
 80155ec:	f04f 0800 	mov.w	r8, #0
 80155f0:	f104 091a 	add.w	r9, r4, #26
 80155f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155f6:	3b01      	subs	r3, #1
 80155f8:	4543      	cmp	r3, r8
 80155fa:	dc09      	bgt.n	8015610 <_printf_float+0x254>
 80155fc:	6823      	ldr	r3, [r4, #0]
 80155fe:	079b      	lsls	r3, r3, #30
 8015600:	f100 8103 	bmi.w	801580a <_printf_float+0x44e>
 8015604:	68e0      	ldr	r0, [r4, #12]
 8015606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015608:	4298      	cmp	r0, r3
 801560a:	bfb8      	it	lt
 801560c:	4618      	movlt	r0, r3
 801560e:	e734      	b.n	801547a <_printf_float+0xbe>
 8015610:	2301      	movs	r3, #1
 8015612:	464a      	mov	r2, r9
 8015614:	4631      	mov	r1, r6
 8015616:	4628      	mov	r0, r5
 8015618:	47b8      	blx	r7
 801561a:	3001      	adds	r0, #1
 801561c:	f43f af2b 	beq.w	8015476 <_printf_float+0xba>
 8015620:	f108 0801 	add.w	r8, r8, #1
 8015624:	e7e6      	b.n	80155f4 <_printf_float+0x238>
 8015626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015628:	2b00      	cmp	r3, #0
 801562a:	dc2b      	bgt.n	8015684 <_printf_float+0x2c8>
 801562c:	2301      	movs	r3, #1
 801562e:	4a26      	ldr	r2, [pc, #152]	; (80156c8 <_printf_float+0x30c>)
 8015630:	4631      	mov	r1, r6
 8015632:	4628      	mov	r0, r5
 8015634:	47b8      	blx	r7
 8015636:	3001      	adds	r0, #1
 8015638:	f43f af1d 	beq.w	8015476 <_printf_float+0xba>
 801563c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801563e:	b923      	cbnz	r3, 801564a <_printf_float+0x28e>
 8015640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015642:	b913      	cbnz	r3, 801564a <_printf_float+0x28e>
 8015644:	6823      	ldr	r3, [r4, #0]
 8015646:	07d9      	lsls	r1, r3, #31
 8015648:	d5d8      	bpl.n	80155fc <_printf_float+0x240>
 801564a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801564e:	4631      	mov	r1, r6
 8015650:	4628      	mov	r0, r5
 8015652:	47b8      	blx	r7
 8015654:	3001      	adds	r0, #1
 8015656:	f43f af0e 	beq.w	8015476 <_printf_float+0xba>
 801565a:	f04f 0900 	mov.w	r9, #0
 801565e:	f104 0a1a 	add.w	sl, r4, #26
 8015662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015664:	425b      	negs	r3, r3
 8015666:	454b      	cmp	r3, r9
 8015668:	dc01      	bgt.n	801566e <_printf_float+0x2b2>
 801566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801566c:	e794      	b.n	8015598 <_printf_float+0x1dc>
 801566e:	2301      	movs	r3, #1
 8015670:	4652      	mov	r2, sl
 8015672:	4631      	mov	r1, r6
 8015674:	4628      	mov	r0, r5
 8015676:	47b8      	blx	r7
 8015678:	3001      	adds	r0, #1
 801567a:	f43f aefc 	beq.w	8015476 <_printf_float+0xba>
 801567e:	f109 0901 	add.w	r9, r9, #1
 8015682:	e7ee      	b.n	8015662 <_printf_float+0x2a6>
 8015684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015688:	429a      	cmp	r2, r3
 801568a:	bfa8      	it	ge
 801568c:	461a      	movge	r2, r3
 801568e:	2a00      	cmp	r2, #0
 8015690:	4691      	mov	r9, r2
 8015692:	dd07      	ble.n	80156a4 <_printf_float+0x2e8>
 8015694:	4613      	mov	r3, r2
 8015696:	4631      	mov	r1, r6
 8015698:	4642      	mov	r2, r8
 801569a:	4628      	mov	r0, r5
 801569c:	47b8      	blx	r7
 801569e:	3001      	adds	r0, #1
 80156a0:	f43f aee9 	beq.w	8015476 <_printf_float+0xba>
 80156a4:	f104 031a 	add.w	r3, r4, #26
 80156a8:	f04f 0b00 	mov.w	fp, #0
 80156ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156b0:	9306      	str	r3, [sp, #24]
 80156b2:	e015      	b.n	80156e0 <_printf_float+0x324>
 80156b4:	7fefffff 	.word	0x7fefffff
 80156b8:	0801a5d4 	.word	0x0801a5d4
 80156bc:	0801a5d0 	.word	0x0801a5d0
 80156c0:	0801a5dc 	.word	0x0801a5dc
 80156c4:	0801a5d8 	.word	0x0801a5d8
 80156c8:	0801a7fb 	.word	0x0801a7fb
 80156cc:	2301      	movs	r3, #1
 80156ce:	9a06      	ldr	r2, [sp, #24]
 80156d0:	4631      	mov	r1, r6
 80156d2:	4628      	mov	r0, r5
 80156d4:	47b8      	blx	r7
 80156d6:	3001      	adds	r0, #1
 80156d8:	f43f aecd 	beq.w	8015476 <_printf_float+0xba>
 80156dc:	f10b 0b01 	add.w	fp, fp, #1
 80156e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80156e4:	ebaa 0309 	sub.w	r3, sl, r9
 80156e8:	455b      	cmp	r3, fp
 80156ea:	dcef      	bgt.n	80156cc <_printf_float+0x310>
 80156ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156f0:	429a      	cmp	r2, r3
 80156f2:	44d0      	add	r8, sl
 80156f4:	db15      	blt.n	8015722 <_printf_float+0x366>
 80156f6:	6823      	ldr	r3, [r4, #0]
 80156f8:	07da      	lsls	r2, r3, #31
 80156fa:	d412      	bmi.n	8015722 <_printf_float+0x366>
 80156fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015700:	eba3 020a 	sub.w	r2, r3, sl
 8015704:	eba3 0a01 	sub.w	sl, r3, r1
 8015708:	4592      	cmp	sl, r2
 801570a:	bfa8      	it	ge
 801570c:	4692      	movge	sl, r2
 801570e:	f1ba 0f00 	cmp.w	sl, #0
 8015712:	dc0e      	bgt.n	8015732 <_printf_float+0x376>
 8015714:	f04f 0800 	mov.w	r8, #0
 8015718:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801571c:	f104 091a 	add.w	r9, r4, #26
 8015720:	e019      	b.n	8015756 <_printf_float+0x39a>
 8015722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015726:	4631      	mov	r1, r6
 8015728:	4628      	mov	r0, r5
 801572a:	47b8      	blx	r7
 801572c:	3001      	adds	r0, #1
 801572e:	d1e5      	bne.n	80156fc <_printf_float+0x340>
 8015730:	e6a1      	b.n	8015476 <_printf_float+0xba>
 8015732:	4653      	mov	r3, sl
 8015734:	4642      	mov	r2, r8
 8015736:	4631      	mov	r1, r6
 8015738:	4628      	mov	r0, r5
 801573a:	47b8      	blx	r7
 801573c:	3001      	adds	r0, #1
 801573e:	d1e9      	bne.n	8015714 <_printf_float+0x358>
 8015740:	e699      	b.n	8015476 <_printf_float+0xba>
 8015742:	2301      	movs	r3, #1
 8015744:	464a      	mov	r2, r9
 8015746:	4631      	mov	r1, r6
 8015748:	4628      	mov	r0, r5
 801574a:	47b8      	blx	r7
 801574c:	3001      	adds	r0, #1
 801574e:	f43f ae92 	beq.w	8015476 <_printf_float+0xba>
 8015752:	f108 0801 	add.w	r8, r8, #1
 8015756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801575a:	1a9b      	subs	r3, r3, r2
 801575c:	eba3 030a 	sub.w	r3, r3, sl
 8015760:	4543      	cmp	r3, r8
 8015762:	dcee      	bgt.n	8015742 <_printf_float+0x386>
 8015764:	e74a      	b.n	80155fc <_printf_float+0x240>
 8015766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015768:	2a01      	cmp	r2, #1
 801576a:	dc01      	bgt.n	8015770 <_printf_float+0x3b4>
 801576c:	07db      	lsls	r3, r3, #31
 801576e:	d53a      	bpl.n	80157e6 <_printf_float+0x42a>
 8015770:	2301      	movs	r3, #1
 8015772:	4642      	mov	r2, r8
 8015774:	4631      	mov	r1, r6
 8015776:	4628      	mov	r0, r5
 8015778:	47b8      	blx	r7
 801577a:	3001      	adds	r0, #1
 801577c:	f43f ae7b 	beq.w	8015476 <_printf_float+0xba>
 8015780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015784:	4631      	mov	r1, r6
 8015786:	4628      	mov	r0, r5
 8015788:	47b8      	blx	r7
 801578a:	3001      	adds	r0, #1
 801578c:	f108 0801 	add.w	r8, r8, #1
 8015790:	f43f ae71 	beq.w	8015476 <_printf_float+0xba>
 8015794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015796:	2200      	movs	r2, #0
 8015798:	f103 3aff 	add.w	sl, r3, #4294967295
 801579c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80157a0:	2300      	movs	r3, #0
 80157a2:	f7f3 f8c9 	bl	8008938 <__aeabi_dcmpeq>
 80157a6:	b9c8      	cbnz	r0, 80157dc <_printf_float+0x420>
 80157a8:	4653      	mov	r3, sl
 80157aa:	4642      	mov	r2, r8
 80157ac:	4631      	mov	r1, r6
 80157ae:	4628      	mov	r0, r5
 80157b0:	47b8      	blx	r7
 80157b2:	3001      	adds	r0, #1
 80157b4:	d10e      	bne.n	80157d4 <_printf_float+0x418>
 80157b6:	e65e      	b.n	8015476 <_printf_float+0xba>
 80157b8:	2301      	movs	r3, #1
 80157ba:	4652      	mov	r2, sl
 80157bc:	4631      	mov	r1, r6
 80157be:	4628      	mov	r0, r5
 80157c0:	47b8      	blx	r7
 80157c2:	3001      	adds	r0, #1
 80157c4:	f43f ae57 	beq.w	8015476 <_printf_float+0xba>
 80157c8:	f108 0801 	add.w	r8, r8, #1
 80157cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157ce:	3b01      	subs	r3, #1
 80157d0:	4543      	cmp	r3, r8
 80157d2:	dcf1      	bgt.n	80157b8 <_printf_float+0x3fc>
 80157d4:	464b      	mov	r3, r9
 80157d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80157da:	e6de      	b.n	801559a <_printf_float+0x1de>
 80157dc:	f04f 0800 	mov.w	r8, #0
 80157e0:	f104 0a1a 	add.w	sl, r4, #26
 80157e4:	e7f2      	b.n	80157cc <_printf_float+0x410>
 80157e6:	2301      	movs	r3, #1
 80157e8:	e7df      	b.n	80157aa <_printf_float+0x3ee>
 80157ea:	2301      	movs	r3, #1
 80157ec:	464a      	mov	r2, r9
 80157ee:	4631      	mov	r1, r6
 80157f0:	4628      	mov	r0, r5
 80157f2:	47b8      	blx	r7
 80157f4:	3001      	adds	r0, #1
 80157f6:	f43f ae3e 	beq.w	8015476 <_printf_float+0xba>
 80157fa:	f108 0801 	add.w	r8, r8, #1
 80157fe:	68e3      	ldr	r3, [r4, #12]
 8015800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015802:	1a9b      	subs	r3, r3, r2
 8015804:	4543      	cmp	r3, r8
 8015806:	dcf0      	bgt.n	80157ea <_printf_float+0x42e>
 8015808:	e6fc      	b.n	8015604 <_printf_float+0x248>
 801580a:	f04f 0800 	mov.w	r8, #0
 801580e:	f104 0919 	add.w	r9, r4, #25
 8015812:	e7f4      	b.n	80157fe <_printf_float+0x442>
 8015814:	2900      	cmp	r1, #0
 8015816:	f43f ae8b 	beq.w	8015530 <_printf_float+0x174>
 801581a:	2300      	movs	r3, #0
 801581c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015820:	ab09      	add	r3, sp, #36	; 0x24
 8015822:	9300      	str	r3, [sp, #0]
 8015824:	ec49 8b10 	vmov	d0, r8, r9
 8015828:	6022      	str	r2, [r4, #0]
 801582a:	f8cd a004 	str.w	sl, [sp, #4]
 801582e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015832:	4628      	mov	r0, r5
 8015834:	f7ff fd2d 	bl	8015292 <__cvt>
 8015838:	4680      	mov	r8, r0
 801583a:	e648      	b.n	80154ce <_printf_float+0x112>

0801583c <_printf_common>:
 801583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015840:	4691      	mov	r9, r2
 8015842:	461f      	mov	r7, r3
 8015844:	688a      	ldr	r2, [r1, #8]
 8015846:	690b      	ldr	r3, [r1, #16]
 8015848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801584c:	4293      	cmp	r3, r2
 801584e:	bfb8      	it	lt
 8015850:	4613      	movlt	r3, r2
 8015852:	f8c9 3000 	str.w	r3, [r9]
 8015856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801585a:	4606      	mov	r6, r0
 801585c:	460c      	mov	r4, r1
 801585e:	b112      	cbz	r2, 8015866 <_printf_common+0x2a>
 8015860:	3301      	adds	r3, #1
 8015862:	f8c9 3000 	str.w	r3, [r9]
 8015866:	6823      	ldr	r3, [r4, #0]
 8015868:	0699      	lsls	r1, r3, #26
 801586a:	bf42      	ittt	mi
 801586c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015870:	3302      	addmi	r3, #2
 8015872:	f8c9 3000 	strmi.w	r3, [r9]
 8015876:	6825      	ldr	r5, [r4, #0]
 8015878:	f015 0506 	ands.w	r5, r5, #6
 801587c:	d107      	bne.n	801588e <_printf_common+0x52>
 801587e:	f104 0a19 	add.w	sl, r4, #25
 8015882:	68e3      	ldr	r3, [r4, #12]
 8015884:	f8d9 2000 	ldr.w	r2, [r9]
 8015888:	1a9b      	subs	r3, r3, r2
 801588a:	42ab      	cmp	r3, r5
 801588c:	dc28      	bgt.n	80158e0 <_printf_common+0xa4>
 801588e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015892:	6822      	ldr	r2, [r4, #0]
 8015894:	3300      	adds	r3, #0
 8015896:	bf18      	it	ne
 8015898:	2301      	movne	r3, #1
 801589a:	0692      	lsls	r2, r2, #26
 801589c:	d42d      	bmi.n	80158fa <_printf_common+0xbe>
 801589e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158a2:	4639      	mov	r1, r7
 80158a4:	4630      	mov	r0, r6
 80158a6:	47c0      	blx	r8
 80158a8:	3001      	adds	r0, #1
 80158aa:	d020      	beq.n	80158ee <_printf_common+0xb2>
 80158ac:	6823      	ldr	r3, [r4, #0]
 80158ae:	68e5      	ldr	r5, [r4, #12]
 80158b0:	f8d9 2000 	ldr.w	r2, [r9]
 80158b4:	f003 0306 	and.w	r3, r3, #6
 80158b8:	2b04      	cmp	r3, #4
 80158ba:	bf08      	it	eq
 80158bc:	1aad      	subeq	r5, r5, r2
 80158be:	68a3      	ldr	r3, [r4, #8]
 80158c0:	6922      	ldr	r2, [r4, #16]
 80158c2:	bf0c      	ite	eq
 80158c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80158c8:	2500      	movne	r5, #0
 80158ca:	4293      	cmp	r3, r2
 80158cc:	bfc4      	itt	gt
 80158ce:	1a9b      	subgt	r3, r3, r2
 80158d0:	18ed      	addgt	r5, r5, r3
 80158d2:	f04f 0900 	mov.w	r9, #0
 80158d6:	341a      	adds	r4, #26
 80158d8:	454d      	cmp	r5, r9
 80158da:	d11a      	bne.n	8015912 <_printf_common+0xd6>
 80158dc:	2000      	movs	r0, #0
 80158de:	e008      	b.n	80158f2 <_printf_common+0xb6>
 80158e0:	2301      	movs	r3, #1
 80158e2:	4652      	mov	r2, sl
 80158e4:	4639      	mov	r1, r7
 80158e6:	4630      	mov	r0, r6
 80158e8:	47c0      	blx	r8
 80158ea:	3001      	adds	r0, #1
 80158ec:	d103      	bne.n	80158f6 <_printf_common+0xba>
 80158ee:	f04f 30ff 	mov.w	r0, #4294967295
 80158f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158f6:	3501      	adds	r5, #1
 80158f8:	e7c3      	b.n	8015882 <_printf_common+0x46>
 80158fa:	18e1      	adds	r1, r4, r3
 80158fc:	1c5a      	adds	r2, r3, #1
 80158fe:	2030      	movs	r0, #48	; 0x30
 8015900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015904:	4422      	add	r2, r4
 8015906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801590a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801590e:	3302      	adds	r3, #2
 8015910:	e7c5      	b.n	801589e <_printf_common+0x62>
 8015912:	2301      	movs	r3, #1
 8015914:	4622      	mov	r2, r4
 8015916:	4639      	mov	r1, r7
 8015918:	4630      	mov	r0, r6
 801591a:	47c0      	blx	r8
 801591c:	3001      	adds	r0, #1
 801591e:	d0e6      	beq.n	80158ee <_printf_common+0xb2>
 8015920:	f109 0901 	add.w	r9, r9, #1
 8015924:	e7d8      	b.n	80158d8 <_printf_common+0x9c>
	...

08015928 <_printf_i>:
 8015928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801592c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015930:	460c      	mov	r4, r1
 8015932:	7e09      	ldrb	r1, [r1, #24]
 8015934:	b085      	sub	sp, #20
 8015936:	296e      	cmp	r1, #110	; 0x6e
 8015938:	4617      	mov	r7, r2
 801593a:	4606      	mov	r6, r0
 801593c:	4698      	mov	r8, r3
 801593e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015940:	f000 80b3 	beq.w	8015aaa <_printf_i+0x182>
 8015944:	d822      	bhi.n	801598c <_printf_i+0x64>
 8015946:	2963      	cmp	r1, #99	; 0x63
 8015948:	d036      	beq.n	80159b8 <_printf_i+0x90>
 801594a:	d80a      	bhi.n	8015962 <_printf_i+0x3a>
 801594c:	2900      	cmp	r1, #0
 801594e:	f000 80b9 	beq.w	8015ac4 <_printf_i+0x19c>
 8015952:	2958      	cmp	r1, #88	; 0x58
 8015954:	f000 8083 	beq.w	8015a5e <_printf_i+0x136>
 8015958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801595c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015960:	e032      	b.n	80159c8 <_printf_i+0xa0>
 8015962:	2964      	cmp	r1, #100	; 0x64
 8015964:	d001      	beq.n	801596a <_printf_i+0x42>
 8015966:	2969      	cmp	r1, #105	; 0x69
 8015968:	d1f6      	bne.n	8015958 <_printf_i+0x30>
 801596a:	6820      	ldr	r0, [r4, #0]
 801596c:	6813      	ldr	r3, [r2, #0]
 801596e:	0605      	lsls	r5, r0, #24
 8015970:	f103 0104 	add.w	r1, r3, #4
 8015974:	d52a      	bpl.n	80159cc <_printf_i+0xa4>
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	6011      	str	r1, [r2, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	da03      	bge.n	8015986 <_printf_i+0x5e>
 801597e:	222d      	movs	r2, #45	; 0x2d
 8015980:	425b      	negs	r3, r3
 8015982:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015986:	486f      	ldr	r0, [pc, #444]	; (8015b44 <_printf_i+0x21c>)
 8015988:	220a      	movs	r2, #10
 801598a:	e039      	b.n	8015a00 <_printf_i+0xd8>
 801598c:	2973      	cmp	r1, #115	; 0x73
 801598e:	f000 809d 	beq.w	8015acc <_printf_i+0x1a4>
 8015992:	d808      	bhi.n	80159a6 <_printf_i+0x7e>
 8015994:	296f      	cmp	r1, #111	; 0x6f
 8015996:	d020      	beq.n	80159da <_printf_i+0xb2>
 8015998:	2970      	cmp	r1, #112	; 0x70
 801599a:	d1dd      	bne.n	8015958 <_printf_i+0x30>
 801599c:	6823      	ldr	r3, [r4, #0]
 801599e:	f043 0320 	orr.w	r3, r3, #32
 80159a2:	6023      	str	r3, [r4, #0]
 80159a4:	e003      	b.n	80159ae <_printf_i+0x86>
 80159a6:	2975      	cmp	r1, #117	; 0x75
 80159a8:	d017      	beq.n	80159da <_printf_i+0xb2>
 80159aa:	2978      	cmp	r1, #120	; 0x78
 80159ac:	d1d4      	bne.n	8015958 <_printf_i+0x30>
 80159ae:	2378      	movs	r3, #120	; 0x78
 80159b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80159b4:	4864      	ldr	r0, [pc, #400]	; (8015b48 <_printf_i+0x220>)
 80159b6:	e055      	b.n	8015a64 <_printf_i+0x13c>
 80159b8:	6813      	ldr	r3, [r2, #0]
 80159ba:	1d19      	adds	r1, r3, #4
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	6011      	str	r1, [r2, #0]
 80159c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80159c8:	2301      	movs	r3, #1
 80159ca:	e08c      	b.n	8015ae6 <_printf_i+0x1be>
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	6011      	str	r1, [r2, #0]
 80159d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80159d4:	bf18      	it	ne
 80159d6:	b21b      	sxthne	r3, r3
 80159d8:	e7cf      	b.n	801597a <_printf_i+0x52>
 80159da:	6813      	ldr	r3, [r2, #0]
 80159dc:	6825      	ldr	r5, [r4, #0]
 80159de:	1d18      	adds	r0, r3, #4
 80159e0:	6010      	str	r0, [r2, #0]
 80159e2:	0628      	lsls	r0, r5, #24
 80159e4:	d501      	bpl.n	80159ea <_printf_i+0xc2>
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	e002      	b.n	80159f0 <_printf_i+0xc8>
 80159ea:	0668      	lsls	r0, r5, #25
 80159ec:	d5fb      	bpl.n	80159e6 <_printf_i+0xbe>
 80159ee:	881b      	ldrh	r3, [r3, #0]
 80159f0:	4854      	ldr	r0, [pc, #336]	; (8015b44 <_printf_i+0x21c>)
 80159f2:	296f      	cmp	r1, #111	; 0x6f
 80159f4:	bf14      	ite	ne
 80159f6:	220a      	movne	r2, #10
 80159f8:	2208      	moveq	r2, #8
 80159fa:	2100      	movs	r1, #0
 80159fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015a00:	6865      	ldr	r5, [r4, #4]
 8015a02:	60a5      	str	r5, [r4, #8]
 8015a04:	2d00      	cmp	r5, #0
 8015a06:	f2c0 8095 	blt.w	8015b34 <_printf_i+0x20c>
 8015a0a:	6821      	ldr	r1, [r4, #0]
 8015a0c:	f021 0104 	bic.w	r1, r1, #4
 8015a10:	6021      	str	r1, [r4, #0]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d13d      	bne.n	8015a92 <_printf_i+0x16a>
 8015a16:	2d00      	cmp	r5, #0
 8015a18:	f040 808e 	bne.w	8015b38 <_printf_i+0x210>
 8015a1c:	4665      	mov	r5, ip
 8015a1e:	2a08      	cmp	r2, #8
 8015a20:	d10b      	bne.n	8015a3a <_printf_i+0x112>
 8015a22:	6823      	ldr	r3, [r4, #0]
 8015a24:	07db      	lsls	r3, r3, #31
 8015a26:	d508      	bpl.n	8015a3a <_printf_i+0x112>
 8015a28:	6923      	ldr	r3, [r4, #16]
 8015a2a:	6862      	ldr	r2, [r4, #4]
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	bfde      	ittt	le
 8015a30:	2330      	movle	r3, #48	; 0x30
 8015a32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015a3a:	ebac 0305 	sub.w	r3, ip, r5
 8015a3e:	6123      	str	r3, [r4, #16]
 8015a40:	f8cd 8000 	str.w	r8, [sp]
 8015a44:	463b      	mov	r3, r7
 8015a46:	aa03      	add	r2, sp, #12
 8015a48:	4621      	mov	r1, r4
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f7ff fef6 	bl	801583c <_printf_common>
 8015a50:	3001      	adds	r0, #1
 8015a52:	d14d      	bne.n	8015af0 <_printf_i+0x1c8>
 8015a54:	f04f 30ff 	mov.w	r0, #4294967295
 8015a58:	b005      	add	sp, #20
 8015a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a5e:	4839      	ldr	r0, [pc, #228]	; (8015b44 <_printf_i+0x21c>)
 8015a60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015a64:	6813      	ldr	r3, [r2, #0]
 8015a66:	6821      	ldr	r1, [r4, #0]
 8015a68:	1d1d      	adds	r5, r3, #4
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	6015      	str	r5, [r2, #0]
 8015a6e:	060a      	lsls	r2, r1, #24
 8015a70:	d50b      	bpl.n	8015a8a <_printf_i+0x162>
 8015a72:	07ca      	lsls	r2, r1, #31
 8015a74:	bf44      	itt	mi
 8015a76:	f041 0120 	orrmi.w	r1, r1, #32
 8015a7a:	6021      	strmi	r1, [r4, #0]
 8015a7c:	b91b      	cbnz	r3, 8015a86 <_printf_i+0x15e>
 8015a7e:	6822      	ldr	r2, [r4, #0]
 8015a80:	f022 0220 	bic.w	r2, r2, #32
 8015a84:	6022      	str	r2, [r4, #0]
 8015a86:	2210      	movs	r2, #16
 8015a88:	e7b7      	b.n	80159fa <_printf_i+0xd2>
 8015a8a:	064d      	lsls	r5, r1, #25
 8015a8c:	bf48      	it	mi
 8015a8e:	b29b      	uxthmi	r3, r3
 8015a90:	e7ef      	b.n	8015a72 <_printf_i+0x14a>
 8015a92:	4665      	mov	r5, ip
 8015a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a98:	fb02 3311 	mls	r3, r2, r1, r3
 8015a9c:	5cc3      	ldrb	r3, [r0, r3]
 8015a9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	2900      	cmp	r1, #0
 8015aa6:	d1f5      	bne.n	8015a94 <_printf_i+0x16c>
 8015aa8:	e7b9      	b.n	8015a1e <_printf_i+0xf6>
 8015aaa:	6813      	ldr	r3, [r2, #0]
 8015aac:	6825      	ldr	r5, [r4, #0]
 8015aae:	6961      	ldr	r1, [r4, #20]
 8015ab0:	1d18      	adds	r0, r3, #4
 8015ab2:	6010      	str	r0, [r2, #0]
 8015ab4:	0628      	lsls	r0, r5, #24
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	d501      	bpl.n	8015abe <_printf_i+0x196>
 8015aba:	6019      	str	r1, [r3, #0]
 8015abc:	e002      	b.n	8015ac4 <_printf_i+0x19c>
 8015abe:	066a      	lsls	r2, r5, #25
 8015ac0:	d5fb      	bpl.n	8015aba <_printf_i+0x192>
 8015ac2:	8019      	strh	r1, [r3, #0]
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	6123      	str	r3, [r4, #16]
 8015ac8:	4665      	mov	r5, ip
 8015aca:	e7b9      	b.n	8015a40 <_printf_i+0x118>
 8015acc:	6813      	ldr	r3, [r2, #0]
 8015ace:	1d19      	adds	r1, r3, #4
 8015ad0:	6011      	str	r1, [r2, #0]
 8015ad2:	681d      	ldr	r5, [r3, #0]
 8015ad4:	6862      	ldr	r2, [r4, #4]
 8015ad6:	2100      	movs	r1, #0
 8015ad8:	4628      	mov	r0, r5
 8015ada:	f7f2 fab9 	bl	8008050 <memchr>
 8015ade:	b108      	cbz	r0, 8015ae4 <_printf_i+0x1bc>
 8015ae0:	1b40      	subs	r0, r0, r5
 8015ae2:	6060      	str	r0, [r4, #4]
 8015ae4:	6863      	ldr	r3, [r4, #4]
 8015ae6:	6123      	str	r3, [r4, #16]
 8015ae8:	2300      	movs	r3, #0
 8015aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015aee:	e7a7      	b.n	8015a40 <_printf_i+0x118>
 8015af0:	6923      	ldr	r3, [r4, #16]
 8015af2:	462a      	mov	r2, r5
 8015af4:	4639      	mov	r1, r7
 8015af6:	4630      	mov	r0, r6
 8015af8:	47c0      	blx	r8
 8015afa:	3001      	adds	r0, #1
 8015afc:	d0aa      	beq.n	8015a54 <_printf_i+0x12c>
 8015afe:	6823      	ldr	r3, [r4, #0]
 8015b00:	079b      	lsls	r3, r3, #30
 8015b02:	d413      	bmi.n	8015b2c <_printf_i+0x204>
 8015b04:	68e0      	ldr	r0, [r4, #12]
 8015b06:	9b03      	ldr	r3, [sp, #12]
 8015b08:	4298      	cmp	r0, r3
 8015b0a:	bfb8      	it	lt
 8015b0c:	4618      	movlt	r0, r3
 8015b0e:	e7a3      	b.n	8015a58 <_printf_i+0x130>
 8015b10:	2301      	movs	r3, #1
 8015b12:	464a      	mov	r2, r9
 8015b14:	4639      	mov	r1, r7
 8015b16:	4630      	mov	r0, r6
 8015b18:	47c0      	blx	r8
 8015b1a:	3001      	adds	r0, #1
 8015b1c:	d09a      	beq.n	8015a54 <_printf_i+0x12c>
 8015b1e:	3501      	adds	r5, #1
 8015b20:	68e3      	ldr	r3, [r4, #12]
 8015b22:	9a03      	ldr	r2, [sp, #12]
 8015b24:	1a9b      	subs	r3, r3, r2
 8015b26:	42ab      	cmp	r3, r5
 8015b28:	dcf2      	bgt.n	8015b10 <_printf_i+0x1e8>
 8015b2a:	e7eb      	b.n	8015b04 <_printf_i+0x1dc>
 8015b2c:	2500      	movs	r5, #0
 8015b2e:	f104 0919 	add.w	r9, r4, #25
 8015b32:	e7f5      	b.n	8015b20 <_printf_i+0x1f8>
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d1ac      	bne.n	8015a92 <_printf_i+0x16a>
 8015b38:	7803      	ldrb	r3, [r0, #0]
 8015b3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b42:	e76c      	b.n	8015a1e <_printf_i+0xf6>
 8015b44:	0801a5e0 	.word	0x0801a5e0
 8015b48:	0801a5f1 	.word	0x0801a5f1

08015b4c <_scanf_float>:
 8015b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b50:	469a      	mov	sl, r3
 8015b52:	688b      	ldr	r3, [r1, #8]
 8015b54:	4616      	mov	r6, r2
 8015b56:	1e5a      	subs	r2, r3, #1
 8015b58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015b5c:	b087      	sub	sp, #28
 8015b5e:	bf83      	ittte	hi
 8015b60:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015b64:	189b      	addhi	r3, r3, r2
 8015b66:	9301      	strhi	r3, [sp, #4]
 8015b68:	2300      	movls	r3, #0
 8015b6a:	bf86      	itte	hi
 8015b6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015b70:	608b      	strhi	r3, [r1, #8]
 8015b72:	9301      	strls	r3, [sp, #4]
 8015b74:	680b      	ldr	r3, [r1, #0]
 8015b76:	4688      	mov	r8, r1
 8015b78:	f04f 0b00 	mov.w	fp, #0
 8015b7c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015b80:	f848 3b1c 	str.w	r3, [r8], #28
 8015b84:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015b88:	4607      	mov	r7, r0
 8015b8a:	460c      	mov	r4, r1
 8015b8c:	4645      	mov	r5, r8
 8015b8e:	465a      	mov	r2, fp
 8015b90:	46d9      	mov	r9, fp
 8015b92:	f8cd b008 	str.w	fp, [sp, #8]
 8015b96:	68a1      	ldr	r1, [r4, #8]
 8015b98:	b181      	cbz	r1, 8015bbc <_scanf_float+0x70>
 8015b9a:	6833      	ldr	r3, [r6, #0]
 8015b9c:	781b      	ldrb	r3, [r3, #0]
 8015b9e:	2b49      	cmp	r3, #73	; 0x49
 8015ba0:	d071      	beq.n	8015c86 <_scanf_float+0x13a>
 8015ba2:	d84d      	bhi.n	8015c40 <_scanf_float+0xf4>
 8015ba4:	2b39      	cmp	r3, #57	; 0x39
 8015ba6:	d840      	bhi.n	8015c2a <_scanf_float+0xde>
 8015ba8:	2b31      	cmp	r3, #49	; 0x31
 8015baa:	f080 8088 	bcs.w	8015cbe <_scanf_float+0x172>
 8015bae:	2b2d      	cmp	r3, #45	; 0x2d
 8015bb0:	f000 8090 	beq.w	8015cd4 <_scanf_float+0x188>
 8015bb4:	d815      	bhi.n	8015be2 <_scanf_float+0x96>
 8015bb6:	2b2b      	cmp	r3, #43	; 0x2b
 8015bb8:	f000 808c 	beq.w	8015cd4 <_scanf_float+0x188>
 8015bbc:	f1b9 0f00 	cmp.w	r9, #0
 8015bc0:	d003      	beq.n	8015bca <_scanf_float+0x7e>
 8015bc2:	6823      	ldr	r3, [r4, #0]
 8015bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015bc8:	6023      	str	r3, [r4, #0]
 8015bca:	3a01      	subs	r2, #1
 8015bcc:	2a01      	cmp	r2, #1
 8015bce:	f200 80ea 	bhi.w	8015da6 <_scanf_float+0x25a>
 8015bd2:	4545      	cmp	r5, r8
 8015bd4:	f200 80dc 	bhi.w	8015d90 <_scanf_float+0x244>
 8015bd8:	2601      	movs	r6, #1
 8015bda:	4630      	mov	r0, r6
 8015bdc:	b007      	add	sp, #28
 8015bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be2:	2b2e      	cmp	r3, #46	; 0x2e
 8015be4:	f000 809f 	beq.w	8015d26 <_scanf_float+0x1da>
 8015be8:	2b30      	cmp	r3, #48	; 0x30
 8015bea:	d1e7      	bne.n	8015bbc <_scanf_float+0x70>
 8015bec:	6820      	ldr	r0, [r4, #0]
 8015bee:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015bf2:	d064      	beq.n	8015cbe <_scanf_float+0x172>
 8015bf4:	9b01      	ldr	r3, [sp, #4]
 8015bf6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015bfa:	6020      	str	r0, [r4, #0]
 8015bfc:	f109 0901 	add.w	r9, r9, #1
 8015c00:	b11b      	cbz	r3, 8015c0a <_scanf_float+0xbe>
 8015c02:	3b01      	subs	r3, #1
 8015c04:	3101      	adds	r1, #1
 8015c06:	9301      	str	r3, [sp, #4]
 8015c08:	60a1      	str	r1, [r4, #8]
 8015c0a:	68a3      	ldr	r3, [r4, #8]
 8015c0c:	3b01      	subs	r3, #1
 8015c0e:	60a3      	str	r3, [r4, #8]
 8015c10:	6923      	ldr	r3, [r4, #16]
 8015c12:	3301      	adds	r3, #1
 8015c14:	6123      	str	r3, [r4, #16]
 8015c16:	6873      	ldr	r3, [r6, #4]
 8015c18:	3b01      	subs	r3, #1
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	6073      	str	r3, [r6, #4]
 8015c1e:	f340 80ac 	ble.w	8015d7a <_scanf_float+0x22e>
 8015c22:	6833      	ldr	r3, [r6, #0]
 8015c24:	3301      	adds	r3, #1
 8015c26:	6033      	str	r3, [r6, #0]
 8015c28:	e7b5      	b.n	8015b96 <_scanf_float+0x4a>
 8015c2a:	2b45      	cmp	r3, #69	; 0x45
 8015c2c:	f000 8085 	beq.w	8015d3a <_scanf_float+0x1ee>
 8015c30:	2b46      	cmp	r3, #70	; 0x46
 8015c32:	d06a      	beq.n	8015d0a <_scanf_float+0x1be>
 8015c34:	2b41      	cmp	r3, #65	; 0x41
 8015c36:	d1c1      	bne.n	8015bbc <_scanf_float+0x70>
 8015c38:	2a01      	cmp	r2, #1
 8015c3a:	d1bf      	bne.n	8015bbc <_scanf_float+0x70>
 8015c3c:	2202      	movs	r2, #2
 8015c3e:	e046      	b.n	8015cce <_scanf_float+0x182>
 8015c40:	2b65      	cmp	r3, #101	; 0x65
 8015c42:	d07a      	beq.n	8015d3a <_scanf_float+0x1ee>
 8015c44:	d818      	bhi.n	8015c78 <_scanf_float+0x12c>
 8015c46:	2b54      	cmp	r3, #84	; 0x54
 8015c48:	d066      	beq.n	8015d18 <_scanf_float+0x1cc>
 8015c4a:	d811      	bhi.n	8015c70 <_scanf_float+0x124>
 8015c4c:	2b4e      	cmp	r3, #78	; 0x4e
 8015c4e:	d1b5      	bne.n	8015bbc <_scanf_float+0x70>
 8015c50:	2a00      	cmp	r2, #0
 8015c52:	d146      	bne.n	8015ce2 <_scanf_float+0x196>
 8015c54:	f1b9 0f00 	cmp.w	r9, #0
 8015c58:	d145      	bne.n	8015ce6 <_scanf_float+0x19a>
 8015c5a:	6821      	ldr	r1, [r4, #0]
 8015c5c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015c60:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015c64:	d13f      	bne.n	8015ce6 <_scanf_float+0x19a>
 8015c66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015c6a:	6021      	str	r1, [r4, #0]
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	e02e      	b.n	8015cce <_scanf_float+0x182>
 8015c70:	2b59      	cmp	r3, #89	; 0x59
 8015c72:	d01e      	beq.n	8015cb2 <_scanf_float+0x166>
 8015c74:	2b61      	cmp	r3, #97	; 0x61
 8015c76:	e7de      	b.n	8015c36 <_scanf_float+0xea>
 8015c78:	2b6e      	cmp	r3, #110	; 0x6e
 8015c7a:	d0e9      	beq.n	8015c50 <_scanf_float+0x104>
 8015c7c:	d815      	bhi.n	8015caa <_scanf_float+0x15e>
 8015c7e:	2b66      	cmp	r3, #102	; 0x66
 8015c80:	d043      	beq.n	8015d0a <_scanf_float+0x1be>
 8015c82:	2b69      	cmp	r3, #105	; 0x69
 8015c84:	d19a      	bne.n	8015bbc <_scanf_float+0x70>
 8015c86:	f1bb 0f00 	cmp.w	fp, #0
 8015c8a:	d138      	bne.n	8015cfe <_scanf_float+0x1b2>
 8015c8c:	f1b9 0f00 	cmp.w	r9, #0
 8015c90:	d197      	bne.n	8015bc2 <_scanf_float+0x76>
 8015c92:	6821      	ldr	r1, [r4, #0]
 8015c94:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015c98:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015c9c:	d195      	bne.n	8015bca <_scanf_float+0x7e>
 8015c9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015ca2:	6021      	str	r1, [r4, #0]
 8015ca4:	f04f 0b01 	mov.w	fp, #1
 8015ca8:	e011      	b.n	8015cce <_scanf_float+0x182>
 8015caa:	2b74      	cmp	r3, #116	; 0x74
 8015cac:	d034      	beq.n	8015d18 <_scanf_float+0x1cc>
 8015cae:	2b79      	cmp	r3, #121	; 0x79
 8015cb0:	d184      	bne.n	8015bbc <_scanf_float+0x70>
 8015cb2:	f1bb 0f07 	cmp.w	fp, #7
 8015cb6:	d181      	bne.n	8015bbc <_scanf_float+0x70>
 8015cb8:	f04f 0b08 	mov.w	fp, #8
 8015cbc:	e007      	b.n	8015cce <_scanf_float+0x182>
 8015cbe:	eb12 0f0b 	cmn.w	r2, fp
 8015cc2:	f47f af7b 	bne.w	8015bbc <_scanf_float+0x70>
 8015cc6:	6821      	ldr	r1, [r4, #0]
 8015cc8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015ccc:	6021      	str	r1, [r4, #0]
 8015cce:	702b      	strb	r3, [r5, #0]
 8015cd0:	3501      	adds	r5, #1
 8015cd2:	e79a      	b.n	8015c0a <_scanf_float+0xbe>
 8015cd4:	6821      	ldr	r1, [r4, #0]
 8015cd6:	0608      	lsls	r0, r1, #24
 8015cd8:	f57f af70 	bpl.w	8015bbc <_scanf_float+0x70>
 8015cdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015ce0:	e7f4      	b.n	8015ccc <_scanf_float+0x180>
 8015ce2:	2a02      	cmp	r2, #2
 8015ce4:	d047      	beq.n	8015d76 <_scanf_float+0x22a>
 8015ce6:	f1bb 0f01 	cmp.w	fp, #1
 8015cea:	d003      	beq.n	8015cf4 <_scanf_float+0x1a8>
 8015cec:	f1bb 0f04 	cmp.w	fp, #4
 8015cf0:	f47f af64 	bne.w	8015bbc <_scanf_float+0x70>
 8015cf4:	f10b 0b01 	add.w	fp, fp, #1
 8015cf8:	fa5f fb8b 	uxtb.w	fp, fp
 8015cfc:	e7e7      	b.n	8015cce <_scanf_float+0x182>
 8015cfe:	f1bb 0f03 	cmp.w	fp, #3
 8015d02:	d0f7      	beq.n	8015cf4 <_scanf_float+0x1a8>
 8015d04:	f1bb 0f05 	cmp.w	fp, #5
 8015d08:	e7f2      	b.n	8015cf0 <_scanf_float+0x1a4>
 8015d0a:	f1bb 0f02 	cmp.w	fp, #2
 8015d0e:	f47f af55 	bne.w	8015bbc <_scanf_float+0x70>
 8015d12:	f04f 0b03 	mov.w	fp, #3
 8015d16:	e7da      	b.n	8015cce <_scanf_float+0x182>
 8015d18:	f1bb 0f06 	cmp.w	fp, #6
 8015d1c:	f47f af4e 	bne.w	8015bbc <_scanf_float+0x70>
 8015d20:	f04f 0b07 	mov.w	fp, #7
 8015d24:	e7d3      	b.n	8015cce <_scanf_float+0x182>
 8015d26:	6821      	ldr	r1, [r4, #0]
 8015d28:	0588      	lsls	r0, r1, #22
 8015d2a:	f57f af47 	bpl.w	8015bbc <_scanf_float+0x70>
 8015d2e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015d32:	6021      	str	r1, [r4, #0]
 8015d34:	f8cd 9008 	str.w	r9, [sp, #8]
 8015d38:	e7c9      	b.n	8015cce <_scanf_float+0x182>
 8015d3a:	6821      	ldr	r1, [r4, #0]
 8015d3c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015d40:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015d44:	d006      	beq.n	8015d54 <_scanf_float+0x208>
 8015d46:	0548      	lsls	r0, r1, #21
 8015d48:	f57f af38 	bpl.w	8015bbc <_scanf_float+0x70>
 8015d4c:	f1b9 0f00 	cmp.w	r9, #0
 8015d50:	f43f af3b 	beq.w	8015bca <_scanf_float+0x7e>
 8015d54:	0588      	lsls	r0, r1, #22
 8015d56:	bf58      	it	pl
 8015d58:	9802      	ldrpl	r0, [sp, #8]
 8015d5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015d5e:	bf58      	it	pl
 8015d60:	eba9 0000 	subpl.w	r0, r9, r0
 8015d64:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015d68:	bf58      	it	pl
 8015d6a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015d6e:	6021      	str	r1, [r4, #0]
 8015d70:	f04f 0900 	mov.w	r9, #0
 8015d74:	e7ab      	b.n	8015cce <_scanf_float+0x182>
 8015d76:	2203      	movs	r2, #3
 8015d78:	e7a9      	b.n	8015cce <_scanf_float+0x182>
 8015d7a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015d7e:	9205      	str	r2, [sp, #20]
 8015d80:	4631      	mov	r1, r6
 8015d82:	4638      	mov	r0, r7
 8015d84:	4798      	blx	r3
 8015d86:	9a05      	ldr	r2, [sp, #20]
 8015d88:	2800      	cmp	r0, #0
 8015d8a:	f43f af04 	beq.w	8015b96 <_scanf_float+0x4a>
 8015d8e:	e715      	b.n	8015bbc <_scanf_float+0x70>
 8015d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015d98:	4632      	mov	r2, r6
 8015d9a:	4638      	mov	r0, r7
 8015d9c:	4798      	blx	r3
 8015d9e:	6923      	ldr	r3, [r4, #16]
 8015da0:	3b01      	subs	r3, #1
 8015da2:	6123      	str	r3, [r4, #16]
 8015da4:	e715      	b.n	8015bd2 <_scanf_float+0x86>
 8015da6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015daa:	2b06      	cmp	r3, #6
 8015dac:	d80a      	bhi.n	8015dc4 <_scanf_float+0x278>
 8015dae:	f1bb 0f02 	cmp.w	fp, #2
 8015db2:	d968      	bls.n	8015e86 <_scanf_float+0x33a>
 8015db4:	f1ab 0b03 	sub.w	fp, fp, #3
 8015db8:	fa5f fb8b 	uxtb.w	fp, fp
 8015dbc:	eba5 0b0b 	sub.w	fp, r5, fp
 8015dc0:	455d      	cmp	r5, fp
 8015dc2:	d14b      	bne.n	8015e5c <_scanf_float+0x310>
 8015dc4:	6823      	ldr	r3, [r4, #0]
 8015dc6:	05da      	lsls	r2, r3, #23
 8015dc8:	d51f      	bpl.n	8015e0a <_scanf_float+0x2be>
 8015dca:	055b      	lsls	r3, r3, #21
 8015dcc:	d468      	bmi.n	8015ea0 <_scanf_float+0x354>
 8015dce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015dd2:	6923      	ldr	r3, [r4, #16]
 8015dd4:	2965      	cmp	r1, #101	; 0x65
 8015dd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8015dda:	f105 3bff 	add.w	fp, r5, #4294967295
 8015dde:	6123      	str	r3, [r4, #16]
 8015de0:	d00d      	beq.n	8015dfe <_scanf_float+0x2b2>
 8015de2:	2945      	cmp	r1, #69	; 0x45
 8015de4:	d00b      	beq.n	8015dfe <_scanf_float+0x2b2>
 8015de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dea:	4632      	mov	r2, r6
 8015dec:	4638      	mov	r0, r7
 8015dee:	4798      	blx	r3
 8015df0:	6923      	ldr	r3, [r4, #16]
 8015df2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015df6:	3b01      	subs	r3, #1
 8015df8:	f1a5 0b02 	sub.w	fp, r5, #2
 8015dfc:	6123      	str	r3, [r4, #16]
 8015dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e02:	4632      	mov	r2, r6
 8015e04:	4638      	mov	r0, r7
 8015e06:	4798      	blx	r3
 8015e08:	465d      	mov	r5, fp
 8015e0a:	6826      	ldr	r6, [r4, #0]
 8015e0c:	f016 0610 	ands.w	r6, r6, #16
 8015e10:	d17a      	bne.n	8015f08 <_scanf_float+0x3bc>
 8015e12:	702e      	strb	r6, [r5, #0]
 8015e14:	6823      	ldr	r3, [r4, #0]
 8015e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015e1e:	d142      	bne.n	8015ea6 <_scanf_float+0x35a>
 8015e20:	9b02      	ldr	r3, [sp, #8]
 8015e22:	eba9 0303 	sub.w	r3, r9, r3
 8015e26:	425a      	negs	r2, r3
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d149      	bne.n	8015ec0 <_scanf_float+0x374>
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	4641      	mov	r1, r8
 8015e30:	4638      	mov	r0, r7
 8015e32:	f000 ffed 	bl	8016e10 <_strtod_r>
 8015e36:	6825      	ldr	r5, [r4, #0]
 8015e38:	f8da 3000 	ldr.w	r3, [sl]
 8015e3c:	f015 0f02 	tst.w	r5, #2
 8015e40:	f103 0204 	add.w	r2, r3, #4
 8015e44:	ec59 8b10 	vmov	r8, r9, d0
 8015e48:	f8ca 2000 	str.w	r2, [sl]
 8015e4c:	d043      	beq.n	8015ed6 <_scanf_float+0x38a>
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	e9c3 8900 	strd	r8, r9, [r3]
 8015e54:	68e3      	ldr	r3, [r4, #12]
 8015e56:	3301      	adds	r3, #1
 8015e58:	60e3      	str	r3, [r4, #12]
 8015e5a:	e6be      	b.n	8015bda <_scanf_float+0x8e>
 8015e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e64:	4632      	mov	r2, r6
 8015e66:	4638      	mov	r0, r7
 8015e68:	4798      	blx	r3
 8015e6a:	6923      	ldr	r3, [r4, #16]
 8015e6c:	3b01      	subs	r3, #1
 8015e6e:	6123      	str	r3, [r4, #16]
 8015e70:	e7a6      	b.n	8015dc0 <_scanf_float+0x274>
 8015e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e76:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e7a:	4632      	mov	r2, r6
 8015e7c:	4638      	mov	r0, r7
 8015e7e:	4798      	blx	r3
 8015e80:	6923      	ldr	r3, [r4, #16]
 8015e82:	3b01      	subs	r3, #1
 8015e84:	6123      	str	r3, [r4, #16]
 8015e86:	4545      	cmp	r5, r8
 8015e88:	d8f3      	bhi.n	8015e72 <_scanf_float+0x326>
 8015e8a:	e6a5      	b.n	8015bd8 <_scanf_float+0x8c>
 8015e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e94:	4632      	mov	r2, r6
 8015e96:	4638      	mov	r0, r7
 8015e98:	4798      	blx	r3
 8015e9a:	6923      	ldr	r3, [r4, #16]
 8015e9c:	3b01      	subs	r3, #1
 8015e9e:	6123      	str	r3, [r4, #16]
 8015ea0:	4545      	cmp	r5, r8
 8015ea2:	d8f3      	bhi.n	8015e8c <_scanf_float+0x340>
 8015ea4:	e698      	b.n	8015bd8 <_scanf_float+0x8c>
 8015ea6:	9b03      	ldr	r3, [sp, #12]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d0bf      	beq.n	8015e2c <_scanf_float+0x2e0>
 8015eac:	9904      	ldr	r1, [sp, #16]
 8015eae:	230a      	movs	r3, #10
 8015eb0:	4632      	mov	r2, r6
 8015eb2:	3101      	adds	r1, #1
 8015eb4:	4638      	mov	r0, r7
 8015eb6:	f001 f837 	bl	8016f28 <_strtol_r>
 8015eba:	9b03      	ldr	r3, [sp, #12]
 8015ebc:	9d04      	ldr	r5, [sp, #16]
 8015ebe:	1ac2      	subs	r2, r0, r3
 8015ec0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015ec4:	429d      	cmp	r5, r3
 8015ec6:	bf28      	it	cs
 8015ec8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015ecc:	490f      	ldr	r1, [pc, #60]	; (8015f0c <_scanf_float+0x3c0>)
 8015ece:	4628      	mov	r0, r5
 8015ed0:	f000 f96e 	bl	80161b0 <siprintf>
 8015ed4:	e7aa      	b.n	8015e2c <_scanf_float+0x2e0>
 8015ed6:	f015 0504 	ands.w	r5, r5, #4
 8015eda:	d1b8      	bne.n	8015e4e <_scanf_float+0x302>
 8015edc:	681f      	ldr	r7, [r3, #0]
 8015ede:	ee10 2a10 	vmov	r2, s0
 8015ee2:	464b      	mov	r3, r9
 8015ee4:	ee10 0a10 	vmov	r0, s0
 8015ee8:	4649      	mov	r1, r9
 8015eea:	f7f2 fd57 	bl	800899c <__aeabi_dcmpun>
 8015eee:	b128      	cbz	r0, 8015efc <_scanf_float+0x3b0>
 8015ef0:	4628      	mov	r0, r5
 8015ef2:	f000 f957 	bl	80161a4 <nanf>
 8015ef6:	ed87 0a00 	vstr	s0, [r7]
 8015efa:	e7ab      	b.n	8015e54 <_scanf_float+0x308>
 8015efc:	4640      	mov	r0, r8
 8015efe:	4649      	mov	r1, r9
 8015f00:	f7f2 fdaa 	bl	8008a58 <__aeabi_d2f>
 8015f04:	6038      	str	r0, [r7, #0]
 8015f06:	e7a5      	b.n	8015e54 <_scanf_float+0x308>
 8015f08:	2600      	movs	r6, #0
 8015f0a:	e666      	b.n	8015bda <_scanf_float+0x8e>
 8015f0c:	0801a602 	.word	0x0801a602

08015f10 <iprintf>:
 8015f10:	b40f      	push	{r0, r1, r2, r3}
 8015f12:	4b0a      	ldr	r3, [pc, #40]	; (8015f3c <iprintf+0x2c>)
 8015f14:	b513      	push	{r0, r1, r4, lr}
 8015f16:	681c      	ldr	r4, [r3, #0]
 8015f18:	b124      	cbz	r4, 8015f24 <iprintf+0x14>
 8015f1a:	69a3      	ldr	r3, [r4, #24]
 8015f1c:	b913      	cbnz	r3, 8015f24 <iprintf+0x14>
 8015f1e:	4620      	mov	r0, r4
 8015f20:	f002 f81c 	bl	8017f5c <__sinit>
 8015f24:	ab05      	add	r3, sp, #20
 8015f26:	9a04      	ldr	r2, [sp, #16]
 8015f28:	68a1      	ldr	r1, [r4, #8]
 8015f2a:	9301      	str	r3, [sp, #4]
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	f003 fab3 	bl	8019498 <_vfiprintf_r>
 8015f32:	b002      	add	sp, #8
 8015f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f38:	b004      	add	sp, #16
 8015f3a:	4770      	bx	lr
 8015f3c:	20000028 	.word	0x20000028

08015f40 <_puts_r>:
 8015f40:	b570      	push	{r4, r5, r6, lr}
 8015f42:	460e      	mov	r6, r1
 8015f44:	4605      	mov	r5, r0
 8015f46:	b118      	cbz	r0, 8015f50 <_puts_r+0x10>
 8015f48:	6983      	ldr	r3, [r0, #24]
 8015f4a:	b90b      	cbnz	r3, 8015f50 <_puts_r+0x10>
 8015f4c:	f002 f806 	bl	8017f5c <__sinit>
 8015f50:	69ab      	ldr	r3, [r5, #24]
 8015f52:	68ac      	ldr	r4, [r5, #8]
 8015f54:	b913      	cbnz	r3, 8015f5c <_puts_r+0x1c>
 8015f56:	4628      	mov	r0, r5
 8015f58:	f002 f800 	bl	8017f5c <__sinit>
 8015f5c:	4b23      	ldr	r3, [pc, #140]	; (8015fec <_puts_r+0xac>)
 8015f5e:	429c      	cmp	r4, r3
 8015f60:	d117      	bne.n	8015f92 <_puts_r+0x52>
 8015f62:	686c      	ldr	r4, [r5, #4]
 8015f64:	89a3      	ldrh	r3, [r4, #12]
 8015f66:	071b      	lsls	r3, r3, #28
 8015f68:	d51d      	bpl.n	8015fa6 <_puts_r+0x66>
 8015f6a:	6923      	ldr	r3, [r4, #16]
 8015f6c:	b1db      	cbz	r3, 8015fa6 <_puts_r+0x66>
 8015f6e:	3e01      	subs	r6, #1
 8015f70:	68a3      	ldr	r3, [r4, #8]
 8015f72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015f76:	3b01      	subs	r3, #1
 8015f78:	60a3      	str	r3, [r4, #8]
 8015f7a:	b9e9      	cbnz	r1, 8015fb8 <_puts_r+0x78>
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	da2e      	bge.n	8015fde <_puts_r+0x9e>
 8015f80:	4622      	mov	r2, r4
 8015f82:	210a      	movs	r1, #10
 8015f84:	4628      	mov	r0, r5
 8015f86:	f000 ffe1 	bl	8016f4c <__swbuf_r>
 8015f8a:	3001      	adds	r0, #1
 8015f8c:	d011      	beq.n	8015fb2 <_puts_r+0x72>
 8015f8e:	200a      	movs	r0, #10
 8015f90:	e011      	b.n	8015fb6 <_puts_r+0x76>
 8015f92:	4b17      	ldr	r3, [pc, #92]	; (8015ff0 <_puts_r+0xb0>)
 8015f94:	429c      	cmp	r4, r3
 8015f96:	d101      	bne.n	8015f9c <_puts_r+0x5c>
 8015f98:	68ac      	ldr	r4, [r5, #8]
 8015f9a:	e7e3      	b.n	8015f64 <_puts_r+0x24>
 8015f9c:	4b15      	ldr	r3, [pc, #84]	; (8015ff4 <_puts_r+0xb4>)
 8015f9e:	429c      	cmp	r4, r3
 8015fa0:	bf08      	it	eq
 8015fa2:	68ec      	ldreq	r4, [r5, #12]
 8015fa4:	e7de      	b.n	8015f64 <_puts_r+0x24>
 8015fa6:	4621      	mov	r1, r4
 8015fa8:	4628      	mov	r0, r5
 8015faa:	f001 f821 	bl	8016ff0 <__swsetup_r>
 8015fae:	2800      	cmp	r0, #0
 8015fb0:	d0dd      	beq.n	8015f6e <_puts_r+0x2e>
 8015fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8015fb6:	bd70      	pop	{r4, r5, r6, pc}
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	da04      	bge.n	8015fc6 <_puts_r+0x86>
 8015fbc:	69a2      	ldr	r2, [r4, #24]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	dc06      	bgt.n	8015fd0 <_puts_r+0x90>
 8015fc2:	290a      	cmp	r1, #10
 8015fc4:	d004      	beq.n	8015fd0 <_puts_r+0x90>
 8015fc6:	6823      	ldr	r3, [r4, #0]
 8015fc8:	1c5a      	adds	r2, r3, #1
 8015fca:	6022      	str	r2, [r4, #0]
 8015fcc:	7019      	strb	r1, [r3, #0]
 8015fce:	e7cf      	b.n	8015f70 <_puts_r+0x30>
 8015fd0:	4622      	mov	r2, r4
 8015fd2:	4628      	mov	r0, r5
 8015fd4:	f000 ffba 	bl	8016f4c <__swbuf_r>
 8015fd8:	3001      	adds	r0, #1
 8015fda:	d1c9      	bne.n	8015f70 <_puts_r+0x30>
 8015fdc:	e7e9      	b.n	8015fb2 <_puts_r+0x72>
 8015fde:	6823      	ldr	r3, [r4, #0]
 8015fe0:	200a      	movs	r0, #10
 8015fe2:	1c5a      	adds	r2, r3, #1
 8015fe4:	6022      	str	r2, [r4, #0]
 8015fe6:	7018      	strb	r0, [r3, #0]
 8015fe8:	e7e5      	b.n	8015fb6 <_puts_r+0x76>
 8015fea:	bf00      	nop
 8015fec:	0801a688 	.word	0x0801a688
 8015ff0:	0801a6a8 	.word	0x0801a6a8
 8015ff4:	0801a668 	.word	0x0801a668

08015ff8 <puts>:
 8015ff8:	4b02      	ldr	r3, [pc, #8]	; (8016004 <puts+0xc>)
 8015ffa:	4601      	mov	r1, r0
 8015ffc:	6818      	ldr	r0, [r3, #0]
 8015ffe:	f7ff bf9f 	b.w	8015f40 <_puts_r>
 8016002:	bf00      	nop
 8016004:	20000028 	.word	0x20000028

08016008 <iscanf>:
 8016008:	b40f      	push	{r0, r1, r2, r3}
 801600a:	4b0a      	ldr	r3, [pc, #40]	; (8016034 <iscanf+0x2c>)
 801600c:	b513      	push	{r0, r1, r4, lr}
 801600e:	681c      	ldr	r4, [r3, #0]
 8016010:	b124      	cbz	r4, 801601c <iscanf+0x14>
 8016012:	69a3      	ldr	r3, [r4, #24]
 8016014:	b913      	cbnz	r3, 801601c <iscanf+0x14>
 8016016:	4620      	mov	r0, r4
 8016018:	f001 ffa0 	bl	8017f5c <__sinit>
 801601c:	ab05      	add	r3, sp, #20
 801601e:	9a04      	ldr	r2, [sp, #16]
 8016020:	6861      	ldr	r1, [r4, #4]
 8016022:	9301      	str	r3, [sp, #4]
 8016024:	4620      	mov	r0, r4
 8016026:	f003 fc9d 	bl	8019964 <_vfiscanf_r>
 801602a:	b002      	add	sp, #8
 801602c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016030:	b004      	add	sp, #16
 8016032:	4770      	bx	lr
 8016034:	20000028 	.word	0x20000028

08016038 <setbuf>:
 8016038:	2900      	cmp	r1, #0
 801603a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801603e:	bf0c      	ite	eq
 8016040:	2202      	moveq	r2, #2
 8016042:	2200      	movne	r2, #0
 8016044:	f000 b800 	b.w	8016048 <setvbuf>

08016048 <setvbuf>:
 8016048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801604c:	461d      	mov	r5, r3
 801604e:	4b51      	ldr	r3, [pc, #324]	; (8016194 <setvbuf+0x14c>)
 8016050:	681e      	ldr	r6, [r3, #0]
 8016052:	4604      	mov	r4, r0
 8016054:	460f      	mov	r7, r1
 8016056:	4690      	mov	r8, r2
 8016058:	b126      	cbz	r6, 8016064 <setvbuf+0x1c>
 801605a:	69b3      	ldr	r3, [r6, #24]
 801605c:	b913      	cbnz	r3, 8016064 <setvbuf+0x1c>
 801605e:	4630      	mov	r0, r6
 8016060:	f001 ff7c 	bl	8017f5c <__sinit>
 8016064:	4b4c      	ldr	r3, [pc, #304]	; (8016198 <setvbuf+0x150>)
 8016066:	429c      	cmp	r4, r3
 8016068:	d152      	bne.n	8016110 <setvbuf+0xc8>
 801606a:	6874      	ldr	r4, [r6, #4]
 801606c:	f1b8 0f02 	cmp.w	r8, #2
 8016070:	d006      	beq.n	8016080 <setvbuf+0x38>
 8016072:	f1b8 0f01 	cmp.w	r8, #1
 8016076:	f200 8089 	bhi.w	801618c <setvbuf+0x144>
 801607a:	2d00      	cmp	r5, #0
 801607c:	f2c0 8086 	blt.w	801618c <setvbuf+0x144>
 8016080:	4621      	mov	r1, r4
 8016082:	4630      	mov	r0, r6
 8016084:	f001 feee 	bl	8017e64 <_fflush_r>
 8016088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801608a:	b141      	cbz	r1, 801609e <setvbuf+0x56>
 801608c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016090:	4299      	cmp	r1, r3
 8016092:	d002      	beq.n	801609a <setvbuf+0x52>
 8016094:	4630      	mov	r0, r6
 8016096:	f002 ffdb 	bl	8019050 <_free_r>
 801609a:	2300      	movs	r3, #0
 801609c:	6363      	str	r3, [r4, #52]	; 0x34
 801609e:	2300      	movs	r3, #0
 80160a0:	61a3      	str	r3, [r4, #24]
 80160a2:	6063      	str	r3, [r4, #4]
 80160a4:	89a3      	ldrh	r3, [r4, #12]
 80160a6:	061b      	lsls	r3, r3, #24
 80160a8:	d503      	bpl.n	80160b2 <setvbuf+0x6a>
 80160aa:	6921      	ldr	r1, [r4, #16]
 80160ac:	4630      	mov	r0, r6
 80160ae:	f002 ffcf 	bl	8019050 <_free_r>
 80160b2:	89a3      	ldrh	r3, [r4, #12]
 80160b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80160b8:	f023 0303 	bic.w	r3, r3, #3
 80160bc:	f1b8 0f02 	cmp.w	r8, #2
 80160c0:	81a3      	strh	r3, [r4, #12]
 80160c2:	d05d      	beq.n	8016180 <setvbuf+0x138>
 80160c4:	ab01      	add	r3, sp, #4
 80160c6:	466a      	mov	r2, sp
 80160c8:	4621      	mov	r1, r4
 80160ca:	4630      	mov	r0, r6
 80160cc:	f002 fb34 	bl	8018738 <__swhatbuf_r>
 80160d0:	89a3      	ldrh	r3, [r4, #12]
 80160d2:	4318      	orrs	r0, r3
 80160d4:	81a0      	strh	r0, [r4, #12]
 80160d6:	bb2d      	cbnz	r5, 8016124 <setvbuf+0xdc>
 80160d8:	9d00      	ldr	r5, [sp, #0]
 80160da:	4628      	mov	r0, r5
 80160dc:	f002 fb90 	bl	8018800 <malloc>
 80160e0:	4607      	mov	r7, r0
 80160e2:	2800      	cmp	r0, #0
 80160e4:	d14e      	bne.n	8016184 <setvbuf+0x13c>
 80160e6:	f8dd 9000 	ldr.w	r9, [sp]
 80160ea:	45a9      	cmp	r9, r5
 80160ec:	d13c      	bne.n	8016168 <setvbuf+0x120>
 80160ee:	f04f 30ff 	mov.w	r0, #4294967295
 80160f2:	89a3      	ldrh	r3, [r4, #12]
 80160f4:	f043 0302 	orr.w	r3, r3, #2
 80160f8:	81a3      	strh	r3, [r4, #12]
 80160fa:	2300      	movs	r3, #0
 80160fc:	60a3      	str	r3, [r4, #8]
 80160fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016102:	6023      	str	r3, [r4, #0]
 8016104:	6123      	str	r3, [r4, #16]
 8016106:	2301      	movs	r3, #1
 8016108:	6163      	str	r3, [r4, #20]
 801610a:	b003      	add	sp, #12
 801610c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016110:	4b22      	ldr	r3, [pc, #136]	; (801619c <setvbuf+0x154>)
 8016112:	429c      	cmp	r4, r3
 8016114:	d101      	bne.n	801611a <setvbuf+0xd2>
 8016116:	68b4      	ldr	r4, [r6, #8]
 8016118:	e7a8      	b.n	801606c <setvbuf+0x24>
 801611a:	4b21      	ldr	r3, [pc, #132]	; (80161a0 <setvbuf+0x158>)
 801611c:	429c      	cmp	r4, r3
 801611e:	bf08      	it	eq
 8016120:	68f4      	ldreq	r4, [r6, #12]
 8016122:	e7a3      	b.n	801606c <setvbuf+0x24>
 8016124:	2f00      	cmp	r7, #0
 8016126:	d0d8      	beq.n	80160da <setvbuf+0x92>
 8016128:	69b3      	ldr	r3, [r6, #24]
 801612a:	b913      	cbnz	r3, 8016132 <setvbuf+0xea>
 801612c:	4630      	mov	r0, r6
 801612e:	f001 ff15 	bl	8017f5c <__sinit>
 8016132:	f1b8 0f01 	cmp.w	r8, #1
 8016136:	bf08      	it	eq
 8016138:	89a3      	ldrheq	r3, [r4, #12]
 801613a:	6027      	str	r7, [r4, #0]
 801613c:	bf04      	itt	eq
 801613e:	f043 0301 	orreq.w	r3, r3, #1
 8016142:	81a3      	strheq	r3, [r4, #12]
 8016144:	89a3      	ldrh	r3, [r4, #12]
 8016146:	f013 0008 	ands.w	r0, r3, #8
 801614a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801614e:	d01b      	beq.n	8016188 <setvbuf+0x140>
 8016150:	f013 0001 	ands.w	r0, r3, #1
 8016154:	bf18      	it	ne
 8016156:	426d      	negne	r5, r5
 8016158:	f04f 0300 	mov.w	r3, #0
 801615c:	bf1d      	ittte	ne
 801615e:	60a3      	strne	r3, [r4, #8]
 8016160:	61a5      	strne	r5, [r4, #24]
 8016162:	4618      	movne	r0, r3
 8016164:	60a5      	streq	r5, [r4, #8]
 8016166:	e7d0      	b.n	801610a <setvbuf+0xc2>
 8016168:	4648      	mov	r0, r9
 801616a:	f002 fb49 	bl	8018800 <malloc>
 801616e:	4607      	mov	r7, r0
 8016170:	2800      	cmp	r0, #0
 8016172:	d0bc      	beq.n	80160ee <setvbuf+0xa6>
 8016174:	89a3      	ldrh	r3, [r4, #12]
 8016176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801617a:	81a3      	strh	r3, [r4, #12]
 801617c:	464d      	mov	r5, r9
 801617e:	e7d3      	b.n	8016128 <setvbuf+0xe0>
 8016180:	2000      	movs	r0, #0
 8016182:	e7b6      	b.n	80160f2 <setvbuf+0xaa>
 8016184:	46a9      	mov	r9, r5
 8016186:	e7f5      	b.n	8016174 <setvbuf+0x12c>
 8016188:	60a0      	str	r0, [r4, #8]
 801618a:	e7be      	b.n	801610a <setvbuf+0xc2>
 801618c:	f04f 30ff 	mov.w	r0, #4294967295
 8016190:	e7bb      	b.n	801610a <setvbuf+0xc2>
 8016192:	bf00      	nop
 8016194:	20000028 	.word	0x20000028
 8016198:	0801a688 	.word	0x0801a688
 801619c:	0801a6a8 	.word	0x0801a6a8
 80161a0:	0801a668 	.word	0x0801a668

080161a4 <nanf>:
 80161a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80161ac <nanf+0x8>
 80161a8:	4770      	bx	lr
 80161aa:	bf00      	nop
 80161ac:	7fc00000 	.word	0x7fc00000

080161b0 <siprintf>:
 80161b0:	b40e      	push	{r1, r2, r3}
 80161b2:	b500      	push	{lr}
 80161b4:	b09c      	sub	sp, #112	; 0x70
 80161b6:	ab1d      	add	r3, sp, #116	; 0x74
 80161b8:	9002      	str	r0, [sp, #8]
 80161ba:	9006      	str	r0, [sp, #24]
 80161bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80161c0:	4809      	ldr	r0, [pc, #36]	; (80161e8 <siprintf+0x38>)
 80161c2:	9107      	str	r1, [sp, #28]
 80161c4:	9104      	str	r1, [sp, #16]
 80161c6:	4909      	ldr	r1, [pc, #36]	; (80161ec <siprintf+0x3c>)
 80161c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80161cc:	9105      	str	r1, [sp, #20]
 80161ce:	6800      	ldr	r0, [r0, #0]
 80161d0:	9301      	str	r3, [sp, #4]
 80161d2:	a902      	add	r1, sp, #8
 80161d4:	f003 f83e 	bl	8019254 <_svfiprintf_r>
 80161d8:	9b02      	ldr	r3, [sp, #8]
 80161da:	2200      	movs	r2, #0
 80161dc:	701a      	strb	r2, [r3, #0]
 80161de:	b01c      	add	sp, #112	; 0x70
 80161e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80161e4:	b003      	add	sp, #12
 80161e6:	4770      	bx	lr
 80161e8:	20000028 	.word	0x20000028
 80161ec:	ffff0208 	.word	0xffff0208

080161f0 <sulp>:
 80161f0:	b570      	push	{r4, r5, r6, lr}
 80161f2:	4604      	mov	r4, r0
 80161f4:	460d      	mov	r5, r1
 80161f6:	ec45 4b10 	vmov	d0, r4, r5
 80161fa:	4616      	mov	r6, r2
 80161fc:	f002 fde6 	bl	8018dcc <__ulp>
 8016200:	ec51 0b10 	vmov	r0, r1, d0
 8016204:	b17e      	cbz	r6, 8016226 <sulp+0x36>
 8016206:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801620a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801620e:	2b00      	cmp	r3, #0
 8016210:	dd09      	ble.n	8016226 <sulp+0x36>
 8016212:	051b      	lsls	r3, r3, #20
 8016214:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016218:	2400      	movs	r4, #0
 801621a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801621e:	4622      	mov	r2, r4
 8016220:	462b      	mov	r3, r5
 8016222:	f7f2 f921 	bl	8008468 <__aeabi_dmul>
 8016226:	bd70      	pop	{r4, r5, r6, pc}

08016228 <_strtod_l>:
 8016228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801622c:	461f      	mov	r7, r3
 801622e:	b0a1      	sub	sp, #132	; 0x84
 8016230:	2300      	movs	r3, #0
 8016232:	4681      	mov	r9, r0
 8016234:	4638      	mov	r0, r7
 8016236:	460e      	mov	r6, r1
 8016238:	9217      	str	r2, [sp, #92]	; 0x5c
 801623a:	931c      	str	r3, [sp, #112]	; 0x70
 801623c:	f002 fa6c 	bl	8018718 <__localeconv_l>
 8016240:	4680      	mov	r8, r0
 8016242:	6800      	ldr	r0, [r0, #0]
 8016244:	f7f1 fefc 	bl	8008040 <strlen>
 8016248:	f04f 0a00 	mov.w	sl, #0
 801624c:	4604      	mov	r4, r0
 801624e:	f04f 0b00 	mov.w	fp, #0
 8016252:	961b      	str	r6, [sp, #108]	; 0x6c
 8016254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016256:	781a      	ldrb	r2, [r3, #0]
 8016258:	2a0d      	cmp	r2, #13
 801625a:	d832      	bhi.n	80162c2 <_strtod_l+0x9a>
 801625c:	2a09      	cmp	r2, #9
 801625e:	d236      	bcs.n	80162ce <_strtod_l+0xa6>
 8016260:	2a00      	cmp	r2, #0
 8016262:	d03e      	beq.n	80162e2 <_strtod_l+0xba>
 8016264:	2300      	movs	r3, #0
 8016266:	930d      	str	r3, [sp, #52]	; 0x34
 8016268:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801626a:	782b      	ldrb	r3, [r5, #0]
 801626c:	2b30      	cmp	r3, #48	; 0x30
 801626e:	f040 80ac 	bne.w	80163ca <_strtod_l+0x1a2>
 8016272:	786b      	ldrb	r3, [r5, #1]
 8016274:	2b58      	cmp	r3, #88	; 0x58
 8016276:	d001      	beq.n	801627c <_strtod_l+0x54>
 8016278:	2b78      	cmp	r3, #120	; 0x78
 801627a:	d167      	bne.n	801634c <_strtod_l+0x124>
 801627c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801627e:	9301      	str	r3, [sp, #4]
 8016280:	ab1c      	add	r3, sp, #112	; 0x70
 8016282:	9300      	str	r3, [sp, #0]
 8016284:	9702      	str	r7, [sp, #8]
 8016286:	ab1d      	add	r3, sp, #116	; 0x74
 8016288:	4a88      	ldr	r2, [pc, #544]	; (80164ac <_strtod_l+0x284>)
 801628a:	a91b      	add	r1, sp, #108	; 0x6c
 801628c:	4648      	mov	r0, r9
 801628e:	f001 ff5a 	bl	8018146 <__gethex>
 8016292:	f010 0407 	ands.w	r4, r0, #7
 8016296:	4606      	mov	r6, r0
 8016298:	d005      	beq.n	80162a6 <_strtod_l+0x7e>
 801629a:	2c06      	cmp	r4, #6
 801629c:	d12b      	bne.n	80162f6 <_strtod_l+0xce>
 801629e:	3501      	adds	r5, #1
 80162a0:	2300      	movs	r3, #0
 80162a2:	951b      	str	r5, [sp, #108]	; 0x6c
 80162a4:	930d      	str	r3, [sp, #52]	; 0x34
 80162a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	f040 859a 	bne.w	8016de2 <_strtod_l+0xbba>
 80162ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162b0:	b1e3      	cbz	r3, 80162ec <_strtod_l+0xc4>
 80162b2:	4652      	mov	r2, sl
 80162b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80162b8:	ec43 2b10 	vmov	d0, r2, r3
 80162bc:	b021      	add	sp, #132	; 0x84
 80162be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c2:	2a2b      	cmp	r2, #43	; 0x2b
 80162c4:	d015      	beq.n	80162f2 <_strtod_l+0xca>
 80162c6:	2a2d      	cmp	r2, #45	; 0x2d
 80162c8:	d004      	beq.n	80162d4 <_strtod_l+0xac>
 80162ca:	2a20      	cmp	r2, #32
 80162cc:	d1ca      	bne.n	8016264 <_strtod_l+0x3c>
 80162ce:	3301      	adds	r3, #1
 80162d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80162d2:	e7bf      	b.n	8016254 <_strtod_l+0x2c>
 80162d4:	2201      	movs	r2, #1
 80162d6:	920d      	str	r2, [sp, #52]	; 0x34
 80162d8:	1c5a      	adds	r2, r3, #1
 80162da:	921b      	str	r2, [sp, #108]	; 0x6c
 80162dc:	785b      	ldrb	r3, [r3, #1]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d1c2      	bne.n	8016268 <_strtod_l+0x40>
 80162e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	f040 8579 	bne.w	8016dde <_strtod_l+0xbb6>
 80162ec:	4652      	mov	r2, sl
 80162ee:	465b      	mov	r3, fp
 80162f0:	e7e2      	b.n	80162b8 <_strtod_l+0x90>
 80162f2:	2200      	movs	r2, #0
 80162f4:	e7ef      	b.n	80162d6 <_strtod_l+0xae>
 80162f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80162f8:	b13a      	cbz	r2, 801630a <_strtod_l+0xe2>
 80162fa:	2135      	movs	r1, #53	; 0x35
 80162fc:	a81e      	add	r0, sp, #120	; 0x78
 80162fe:	f002 fe5d 	bl	8018fbc <__copybits>
 8016302:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016304:	4648      	mov	r0, r9
 8016306:	f002 fac9 	bl	801889c <_Bfree>
 801630a:	3c01      	subs	r4, #1
 801630c:	2c04      	cmp	r4, #4
 801630e:	d806      	bhi.n	801631e <_strtod_l+0xf6>
 8016310:	e8df f004 	tbb	[pc, r4]
 8016314:	1714030a 	.word	0x1714030a
 8016318:	0a          	.byte	0x0a
 8016319:	00          	.byte	0x00
 801631a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801631e:	0730      	lsls	r0, r6, #28
 8016320:	d5c1      	bpl.n	80162a6 <_strtod_l+0x7e>
 8016322:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016326:	e7be      	b.n	80162a6 <_strtod_l+0x7e>
 8016328:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801632c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801632e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016332:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016336:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801633a:	e7f0      	b.n	801631e <_strtod_l+0xf6>
 801633c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80164b0 <_strtod_l+0x288>
 8016340:	e7ed      	b.n	801631e <_strtod_l+0xf6>
 8016342:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016346:	f04f 3aff 	mov.w	sl, #4294967295
 801634a:	e7e8      	b.n	801631e <_strtod_l+0xf6>
 801634c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801634e:	1c5a      	adds	r2, r3, #1
 8016350:	921b      	str	r2, [sp, #108]	; 0x6c
 8016352:	785b      	ldrb	r3, [r3, #1]
 8016354:	2b30      	cmp	r3, #48	; 0x30
 8016356:	d0f9      	beq.n	801634c <_strtod_l+0x124>
 8016358:	2b00      	cmp	r3, #0
 801635a:	d0a4      	beq.n	80162a6 <_strtod_l+0x7e>
 801635c:	2301      	movs	r3, #1
 801635e:	2500      	movs	r5, #0
 8016360:	9306      	str	r3, [sp, #24]
 8016362:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016364:	9308      	str	r3, [sp, #32]
 8016366:	9507      	str	r5, [sp, #28]
 8016368:	9505      	str	r5, [sp, #20]
 801636a:	220a      	movs	r2, #10
 801636c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801636e:	7807      	ldrb	r7, [r0, #0]
 8016370:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016374:	b2d9      	uxtb	r1, r3
 8016376:	2909      	cmp	r1, #9
 8016378:	d929      	bls.n	80163ce <_strtod_l+0x1a6>
 801637a:	4622      	mov	r2, r4
 801637c:	f8d8 1000 	ldr.w	r1, [r8]
 8016380:	f003 fd8b 	bl	8019e9a <strncmp>
 8016384:	2800      	cmp	r0, #0
 8016386:	d031      	beq.n	80163ec <_strtod_l+0x1c4>
 8016388:	2000      	movs	r0, #0
 801638a:	9c05      	ldr	r4, [sp, #20]
 801638c:	9004      	str	r0, [sp, #16]
 801638e:	463b      	mov	r3, r7
 8016390:	4602      	mov	r2, r0
 8016392:	2b65      	cmp	r3, #101	; 0x65
 8016394:	d001      	beq.n	801639a <_strtod_l+0x172>
 8016396:	2b45      	cmp	r3, #69	; 0x45
 8016398:	d114      	bne.n	80163c4 <_strtod_l+0x19c>
 801639a:	b924      	cbnz	r4, 80163a6 <_strtod_l+0x17e>
 801639c:	b910      	cbnz	r0, 80163a4 <_strtod_l+0x17c>
 801639e:	9b06      	ldr	r3, [sp, #24]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d09e      	beq.n	80162e2 <_strtod_l+0xba>
 80163a4:	2400      	movs	r4, #0
 80163a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80163a8:	1c73      	adds	r3, r6, #1
 80163aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80163ac:	7873      	ldrb	r3, [r6, #1]
 80163ae:	2b2b      	cmp	r3, #43	; 0x2b
 80163b0:	d078      	beq.n	80164a4 <_strtod_l+0x27c>
 80163b2:	2b2d      	cmp	r3, #45	; 0x2d
 80163b4:	d070      	beq.n	8016498 <_strtod_l+0x270>
 80163b6:	f04f 0c00 	mov.w	ip, #0
 80163ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80163be:	2f09      	cmp	r7, #9
 80163c0:	d97c      	bls.n	80164bc <_strtod_l+0x294>
 80163c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80163c4:	f04f 0e00 	mov.w	lr, #0
 80163c8:	e09a      	b.n	8016500 <_strtod_l+0x2d8>
 80163ca:	2300      	movs	r3, #0
 80163cc:	e7c7      	b.n	801635e <_strtod_l+0x136>
 80163ce:	9905      	ldr	r1, [sp, #20]
 80163d0:	2908      	cmp	r1, #8
 80163d2:	bfdd      	ittte	le
 80163d4:	9907      	ldrle	r1, [sp, #28]
 80163d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80163da:	9307      	strle	r3, [sp, #28]
 80163dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80163e0:	9b05      	ldr	r3, [sp, #20]
 80163e2:	3001      	adds	r0, #1
 80163e4:	3301      	adds	r3, #1
 80163e6:	9305      	str	r3, [sp, #20]
 80163e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80163ea:	e7bf      	b.n	801636c <_strtod_l+0x144>
 80163ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163ee:	191a      	adds	r2, r3, r4
 80163f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80163f2:	9a05      	ldr	r2, [sp, #20]
 80163f4:	5d1b      	ldrb	r3, [r3, r4]
 80163f6:	2a00      	cmp	r2, #0
 80163f8:	d037      	beq.n	801646a <_strtod_l+0x242>
 80163fa:	9c05      	ldr	r4, [sp, #20]
 80163fc:	4602      	mov	r2, r0
 80163fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016402:	2909      	cmp	r1, #9
 8016404:	d913      	bls.n	801642e <_strtod_l+0x206>
 8016406:	2101      	movs	r1, #1
 8016408:	9104      	str	r1, [sp, #16]
 801640a:	e7c2      	b.n	8016392 <_strtod_l+0x16a>
 801640c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801640e:	1c5a      	adds	r2, r3, #1
 8016410:	921b      	str	r2, [sp, #108]	; 0x6c
 8016412:	785b      	ldrb	r3, [r3, #1]
 8016414:	3001      	adds	r0, #1
 8016416:	2b30      	cmp	r3, #48	; 0x30
 8016418:	d0f8      	beq.n	801640c <_strtod_l+0x1e4>
 801641a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801641e:	2a08      	cmp	r2, #8
 8016420:	f200 84e4 	bhi.w	8016dec <_strtod_l+0xbc4>
 8016424:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016426:	9208      	str	r2, [sp, #32]
 8016428:	4602      	mov	r2, r0
 801642a:	2000      	movs	r0, #0
 801642c:	4604      	mov	r4, r0
 801642e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016432:	f100 0101 	add.w	r1, r0, #1
 8016436:	d012      	beq.n	801645e <_strtod_l+0x236>
 8016438:	440a      	add	r2, r1
 801643a:	eb00 0c04 	add.w	ip, r0, r4
 801643e:	4621      	mov	r1, r4
 8016440:	270a      	movs	r7, #10
 8016442:	458c      	cmp	ip, r1
 8016444:	d113      	bne.n	801646e <_strtod_l+0x246>
 8016446:	1821      	adds	r1, r4, r0
 8016448:	2908      	cmp	r1, #8
 801644a:	f104 0401 	add.w	r4, r4, #1
 801644e:	4404      	add	r4, r0
 8016450:	dc19      	bgt.n	8016486 <_strtod_l+0x25e>
 8016452:	9b07      	ldr	r3, [sp, #28]
 8016454:	210a      	movs	r1, #10
 8016456:	fb01 e303 	mla	r3, r1, r3, lr
 801645a:	9307      	str	r3, [sp, #28]
 801645c:	2100      	movs	r1, #0
 801645e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016460:	1c58      	adds	r0, r3, #1
 8016462:	901b      	str	r0, [sp, #108]	; 0x6c
 8016464:	785b      	ldrb	r3, [r3, #1]
 8016466:	4608      	mov	r0, r1
 8016468:	e7c9      	b.n	80163fe <_strtod_l+0x1d6>
 801646a:	9805      	ldr	r0, [sp, #20]
 801646c:	e7d3      	b.n	8016416 <_strtod_l+0x1ee>
 801646e:	2908      	cmp	r1, #8
 8016470:	f101 0101 	add.w	r1, r1, #1
 8016474:	dc03      	bgt.n	801647e <_strtod_l+0x256>
 8016476:	9b07      	ldr	r3, [sp, #28]
 8016478:	437b      	muls	r3, r7
 801647a:	9307      	str	r3, [sp, #28]
 801647c:	e7e1      	b.n	8016442 <_strtod_l+0x21a>
 801647e:	2910      	cmp	r1, #16
 8016480:	bfd8      	it	le
 8016482:	437d      	mulle	r5, r7
 8016484:	e7dd      	b.n	8016442 <_strtod_l+0x21a>
 8016486:	2c10      	cmp	r4, #16
 8016488:	bfdc      	itt	le
 801648a:	210a      	movle	r1, #10
 801648c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016490:	e7e4      	b.n	801645c <_strtod_l+0x234>
 8016492:	2301      	movs	r3, #1
 8016494:	9304      	str	r3, [sp, #16]
 8016496:	e781      	b.n	801639c <_strtod_l+0x174>
 8016498:	f04f 0c01 	mov.w	ip, #1
 801649c:	1cb3      	adds	r3, r6, #2
 801649e:	931b      	str	r3, [sp, #108]	; 0x6c
 80164a0:	78b3      	ldrb	r3, [r6, #2]
 80164a2:	e78a      	b.n	80163ba <_strtod_l+0x192>
 80164a4:	f04f 0c00 	mov.w	ip, #0
 80164a8:	e7f8      	b.n	801649c <_strtod_l+0x274>
 80164aa:	bf00      	nop
 80164ac:	0801a608 	.word	0x0801a608
 80164b0:	7ff00000 	.word	0x7ff00000
 80164b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164b6:	1c5f      	adds	r7, r3, #1
 80164b8:	971b      	str	r7, [sp, #108]	; 0x6c
 80164ba:	785b      	ldrb	r3, [r3, #1]
 80164bc:	2b30      	cmp	r3, #48	; 0x30
 80164be:	d0f9      	beq.n	80164b4 <_strtod_l+0x28c>
 80164c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80164c4:	2f08      	cmp	r7, #8
 80164c6:	f63f af7d 	bhi.w	80163c4 <_strtod_l+0x19c>
 80164ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80164ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164d0:	930a      	str	r3, [sp, #40]	; 0x28
 80164d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164d4:	1c5f      	adds	r7, r3, #1
 80164d6:	971b      	str	r7, [sp, #108]	; 0x6c
 80164d8:	785b      	ldrb	r3, [r3, #1]
 80164da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80164de:	f1b8 0f09 	cmp.w	r8, #9
 80164e2:	d937      	bls.n	8016554 <_strtod_l+0x32c>
 80164e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80164e6:	1a7f      	subs	r7, r7, r1
 80164e8:	2f08      	cmp	r7, #8
 80164ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80164ee:	dc37      	bgt.n	8016560 <_strtod_l+0x338>
 80164f0:	45be      	cmp	lr, r7
 80164f2:	bfa8      	it	ge
 80164f4:	46be      	movge	lr, r7
 80164f6:	f1bc 0f00 	cmp.w	ip, #0
 80164fa:	d001      	beq.n	8016500 <_strtod_l+0x2d8>
 80164fc:	f1ce 0e00 	rsb	lr, lr, #0
 8016500:	2c00      	cmp	r4, #0
 8016502:	d151      	bne.n	80165a8 <_strtod_l+0x380>
 8016504:	2800      	cmp	r0, #0
 8016506:	f47f aece 	bne.w	80162a6 <_strtod_l+0x7e>
 801650a:	9a06      	ldr	r2, [sp, #24]
 801650c:	2a00      	cmp	r2, #0
 801650e:	f47f aeca 	bne.w	80162a6 <_strtod_l+0x7e>
 8016512:	9a04      	ldr	r2, [sp, #16]
 8016514:	2a00      	cmp	r2, #0
 8016516:	f47f aee4 	bne.w	80162e2 <_strtod_l+0xba>
 801651a:	2b4e      	cmp	r3, #78	; 0x4e
 801651c:	d027      	beq.n	801656e <_strtod_l+0x346>
 801651e:	dc21      	bgt.n	8016564 <_strtod_l+0x33c>
 8016520:	2b49      	cmp	r3, #73	; 0x49
 8016522:	f47f aede 	bne.w	80162e2 <_strtod_l+0xba>
 8016526:	49a0      	ldr	r1, [pc, #640]	; (80167a8 <_strtod_l+0x580>)
 8016528:	a81b      	add	r0, sp, #108	; 0x6c
 801652a:	f002 f83f 	bl	80185ac <__match>
 801652e:	2800      	cmp	r0, #0
 8016530:	f43f aed7 	beq.w	80162e2 <_strtod_l+0xba>
 8016534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016536:	499d      	ldr	r1, [pc, #628]	; (80167ac <_strtod_l+0x584>)
 8016538:	3b01      	subs	r3, #1
 801653a:	a81b      	add	r0, sp, #108	; 0x6c
 801653c:	931b      	str	r3, [sp, #108]	; 0x6c
 801653e:	f002 f835 	bl	80185ac <__match>
 8016542:	b910      	cbnz	r0, 801654a <_strtod_l+0x322>
 8016544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016546:	3301      	adds	r3, #1
 8016548:	931b      	str	r3, [sp, #108]	; 0x6c
 801654a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80167c0 <_strtod_l+0x598>
 801654e:	f04f 0a00 	mov.w	sl, #0
 8016552:	e6a8      	b.n	80162a6 <_strtod_l+0x7e>
 8016554:	210a      	movs	r1, #10
 8016556:	fb01 3e0e 	mla	lr, r1, lr, r3
 801655a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801655e:	e7b8      	b.n	80164d2 <_strtod_l+0x2aa>
 8016560:	46be      	mov	lr, r7
 8016562:	e7c8      	b.n	80164f6 <_strtod_l+0x2ce>
 8016564:	2b69      	cmp	r3, #105	; 0x69
 8016566:	d0de      	beq.n	8016526 <_strtod_l+0x2fe>
 8016568:	2b6e      	cmp	r3, #110	; 0x6e
 801656a:	f47f aeba 	bne.w	80162e2 <_strtod_l+0xba>
 801656e:	4990      	ldr	r1, [pc, #576]	; (80167b0 <_strtod_l+0x588>)
 8016570:	a81b      	add	r0, sp, #108	; 0x6c
 8016572:	f002 f81b 	bl	80185ac <__match>
 8016576:	2800      	cmp	r0, #0
 8016578:	f43f aeb3 	beq.w	80162e2 <_strtod_l+0xba>
 801657c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	2b28      	cmp	r3, #40	; 0x28
 8016582:	d10e      	bne.n	80165a2 <_strtod_l+0x37a>
 8016584:	aa1e      	add	r2, sp, #120	; 0x78
 8016586:	498b      	ldr	r1, [pc, #556]	; (80167b4 <_strtod_l+0x58c>)
 8016588:	a81b      	add	r0, sp, #108	; 0x6c
 801658a:	f002 f823 	bl	80185d4 <__hexnan>
 801658e:	2805      	cmp	r0, #5
 8016590:	d107      	bne.n	80165a2 <_strtod_l+0x37a>
 8016592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016594:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016598:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801659c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80165a0:	e681      	b.n	80162a6 <_strtod_l+0x7e>
 80165a2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80167c8 <_strtod_l+0x5a0>
 80165a6:	e7d2      	b.n	801654e <_strtod_l+0x326>
 80165a8:	ebae 0302 	sub.w	r3, lr, r2
 80165ac:	9306      	str	r3, [sp, #24]
 80165ae:	9b05      	ldr	r3, [sp, #20]
 80165b0:	9807      	ldr	r0, [sp, #28]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	bf08      	it	eq
 80165b6:	4623      	moveq	r3, r4
 80165b8:	2c10      	cmp	r4, #16
 80165ba:	9305      	str	r3, [sp, #20]
 80165bc:	46a0      	mov	r8, r4
 80165be:	bfa8      	it	ge
 80165c0:	f04f 0810 	movge.w	r8, #16
 80165c4:	f7f1 fed6 	bl	8008374 <__aeabi_ui2d>
 80165c8:	2c09      	cmp	r4, #9
 80165ca:	4682      	mov	sl, r0
 80165cc:	468b      	mov	fp, r1
 80165ce:	dc13      	bgt.n	80165f8 <_strtod_l+0x3d0>
 80165d0:	9b06      	ldr	r3, [sp, #24]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	f43f ae67 	beq.w	80162a6 <_strtod_l+0x7e>
 80165d8:	9b06      	ldr	r3, [sp, #24]
 80165da:	dd7a      	ble.n	80166d2 <_strtod_l+0x4aa>
 80165dc:	2b16      	cmp	r3, #22
 80165de:	dc61      	bgt.n	80166a4 <_strtod_l+0x47c>
 80165e0:	4a75      	ldr	r2, [pc, #468]	; (80167b8 <_strtod_l+0x590>)
 80165e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80165e6:	e9de 0100 	ldrd	r0, r1, [lr]
 80165ea:	4652      	mov	r2, sl
 80165ec:	465b      	mov	r3, fp
 80165ee:	f7f1 ff3b 	bl	8008468 <__aeabi_dmul>
 80165f2:	4682      	mov	sl, r0
 80165f4:	468b      	mov	fp, r1
 80165f6:	e656      	b.n	80162a6 <_strtod_l+0x7e>
 80165f8:	4b6f      	ldr	r3, [pc, #444]	; (80167b8 <_strtod_l+0x590>)
 80165fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80165fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016602:	f7f1 ff31 	bl	8008468 <__aeabi_dmul>
 8016606:	4606      	mov	r6, r0
 8016608:	4628      	mov	r0, r5
 801660a:	460f      	mov	r7, r1
 801660c:	f7f1 feb2 	bl	8008374 <__aeabi_ui2d>
 8016610:	4602      	mov	r2, r0
 8016612:	460b      	mov	r3, r1
 8016614:	4630      	mov	r0, r6
 8016616:	4639      	mov	r1, r7
 8016618:	f7f1 fd70 	bl	80080fc <__adddf3>
 801661c:	2c0f      	cmp	r4, #15
 801661e:	4682      	mov	sl, r0
 8016620:	468b      	mov	fp, r1
 8016622:	ddd5      	ble.n	80165d0 <_strtod_l+0x3a8>
 8016624:	9b06      	ldr	r3, [sp, #24]
 8016626:	eba4 0808 	sub.w	r8, r4, r8
 801662a:	4498      	add	r8, r3
 801662c:	f1b8 0f00 	cmp.w	r8, #0
 8016630:	f340 8096 	ble.w	8016760 <_strtod_l+0x538>
 8016634:	f018 030f 	ands.w	r3, r8, #15
 8016638:	d00a      	beq.n	8016650 <_strtod_l+0x428>
 801663a:	495f      	ldr	r1, [pc, #380]	; (80167b8 <_strtod_l+0x590>)
 801663c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016640:	4652      	mov	r2, sl
 8016642:	465b      	mov	r3, fp
 8016644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016648:	f7f1 ff0e 	bl	8008468 <__aeabi_dmul>
 801664c:	4682      	mov	sl, r0
 801664e:	468b      	mov	fp, r1
 8016650:	f038 080f 	bics.w	r8, r8, #15
 8016654:	d073      	beq.n	801673e <_strtod_l+0x516>
 8016656:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801665a:	dd47      	ble.n	80166ec <_strtod_l+0x4c4>
 801665c:	2400      	movs	r4, #0
 801665e:	46a0      	mov	r8, r4
 8016660:	9407      	str	r4, [sp, #28]
 8016662:	9405      	str	r4, [sp, #20]
 8016664:	2322      	movs	r3, #34	; 0x22
 8016666:	f8df b158 	ldr.w	fp, [pc, #344]	; 80167c0 <_strtod_l+0x598>
 801666a:	f8c9 3000 	str.w	r3, [r9]
 801666e:	f04f 0a00 	mov.w	sl, #0
 8016672:	9b07      	ldr	r3, [sp, #28]
 8016674:	2b00      	cmp	r3, #0
 8016676:	f43f ae16 	beq.w	80162a6 <_strtod_l+0x7e>
 801667a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801667c:	4648      	mov	r0, r9
 801667e:	f002 f90d 	bl	801889c <_Bfree>
 8016682:	9905      	ldr	r1, [sp, #20]
 8016684:	4648      	mov	r0, r9
 8016686:	f002 f909 	bl	801889c <_Bfree>
 801668a:	4641      	mov	r1, r8
 801668c:	4648      	mov	r0, r9
 801668e:	f002 f905 	bl	801889c <_Bfree>
 8016692:	9907      	ldr	r1, [sp, #28]
 8016694:	4648      	mov	r0, r9
 8016696:	f002 f901 	bl	801889c <_Bfree>
 801669a:	4621      	mov	r1, r4
 801669c:	4648      	mov	r0, r9
 801669e:	f002 f8fd 	bl	801889c <_Bfree>
 80166a2:	e600      	b.n	80162a6 <_strtod_l+0x7e>
 80166a4:	9a06      	ldr	r2, [sp, #24]
 80166a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80166aa:	4293      	cmp	r3, r2
 80166ac:	dbba      	blt.n	8016624 <_strtod_l+0x3fc>
 80166ae:	4d42      	ldr	r5, [pc, #264]	; (80167b8 <_strtod_l+0x590>)
 80166b0:	f1c4 040f 	rsb	r4, r4, #15
 80166b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80166b8:	4652      	mov	r2, sl
 80166ba:	465b      	mov	r3, fp
 80166bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166c0:	f7f1 fed2 	bl	8008468 <__aeabi_dmul>
 80166c4:	9b06      	ldr	r3, [sp, #24]
 80166c6:	1b1c      	subs	r4, r3, r4
 80166c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80166cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80166d0:	e78d      	b.n	80165ee <_strtod_l+0x3c6>
 80166d2:	f113 0f16 	cmn.w	r3, #22
 80166d6:	dba5      	blt.n	8016624 <_strtod_l+0x3fc>
 80166d8:	4a37      	ldr	r2, [pc, #220]	; (80167b8 <_strtod_l+0x590>)
 80166da:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80166de:	e9d2 2300 	ldrd	r2, r3, [r2]
 80166e2:	4650      	mov	r0, sl
 80166e4:	4659      	mov	r1, fp
 80166e6:	f7f1 ffe9 	bl	80086bc <__aeabi_ddiv>
 80166ea:	e782      	b.n	80165f2 <_strtod_l+0x3ca>
 80166ec:	2300      	movs	r3, #0
 80166ee:	4e33      	ldr	r6, [pc, #204]	; (80167bc <_strtod_l+0x594>)
 80166f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80166f4:	4650      	mov	r0, sl
 80166f6:	4659      	mov	r1, fp
 80166f8:	461d      	mov	r5, r3
 80166fa:	f1b8 0f01 	cmp.w	r8, #1
 80166fe:	dc21      	bgt.n	8016744 <_strtod_l+0x51c>
 8016700:	b10b      	cbz	r3, 8016706 <_strtod_l+0x4de>
 8016702:	4682      	mov	sl, r0
 8016704:	468b      	mov	fp, r1
 8016706:	4b2d      	ldr	r3, [pc, #180]	; (80167bc <_strtod_l+0x594>)
 8016708:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801670c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016710:	4652      	mov	r2, sl
 8016712:	465b      	mov	r3, fp
 8016714:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016718:	f7f1 fea6 	bl	8008468 <__aeabi_dmul>
 801671c:	4b28      	ldr	r3, [pc, #160]	; (80167c0 <_strtod_l+0x598>)
 801671e:	460a      	mov	r2, r1
 8016720:	400b      	ands	r3, r1
 8016722:	4928      	ldr	r1, [pc, #160]	; (80167c4 <_strtod_l+0x59c>)
 8016724:	428b      	cmp	r3, r1
 8016726:	4682      	mov	sl, r0
 8016728:	d898      	bhi.n	801665c <_strtod_l+0x434>
 801672a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801672e:	428b      	cmp	r3, r1
 8016730:	bf86      	itte	hi
 8016732:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80167cc <_strtod_l+0x5a4>
 8016736:	f04f 3aff 	movhi.w	sl, #4294967295
 801673a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801673e:	2300      	movs	r3, #0
 8016740:	9304      	str	r3, [sp, #16]
 8016742:	e077      	b.n	8016834 <_strtod_l+0x60c>
 8016744:	f018 0f01 	tst.w	r8, #1
 8016748:	d006      	beq.n	8016758 <_strtod_l+0x530>
 801674a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016752:	f7f1 fe89 	bl	8008468 <__aeabi_dmul>
 8016756:	2301      	movs	r3, #1
 8016758:	3501      	adds	r5, #1
 801675a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801675e:	e7cc      	b.n	80166fa <_strtod_l+0x4d2>
 8016760:	d0ed      	beq.n	801673e <_strtod_l+0x516>
 8016762:	f1c8 0800 	rsb	r8, r8, #0
 8016766:	f018 020f 	ands.w	r2, r8, #15
 801676a:	d00a      	beq.n	8016782 <_strtod_l+0x55a>
 801676c:	4b12      	ldr	r3, [pc, #72]	; (80167b8 <_strtod_l+0x590>)
 801676e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016772:	4650      	mov	r0, sl
 8016774:	4659      	mov	r1, fp
 8016776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801677a:	f7f1 ff9f 	bl	80086bc <__aeabi_ddiv>
 801677e:	4682      	mov	sl, r0
 8016780:	468b      	mov	fp, r1
 8016782:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016786:	d0da      	beq.n	801673e <_strtod_l+0x516>
 8016788:	f1b8 0f1f 	cmp.w	r8, #31
 801678c:	dd20      	ble.n	80167d0 <_strtod_l+0x5a8>
 801678e:	2400      	movs	r4, #0
 8016790:	46a0      	mov	r8, r4
 8016792:	9407      	str	r4, [sp, #28]
 8016794:	9405      	str	r4, [sp, #20]
 8016796:	2322      	movs	r3, #34	; 0x22
 8016798:	f04f 0a00 	mov.w	sl, #0
 801679c:	f04f 0b00 	mov.w	fp, #0
 80167a0:	f8c9 3000 	str.w	r3, [r9]
 80167a4:	e765      	b.n	8016672 <_strtod_l+0x44a>
 80167a6:	bf00      	nop
 80167a8:	0801a5d5 	.word	0x0801a5d5
 80167ac:	0801a65b 	.word	0x0801a65b
 80167b0:	0801a5dd 	.word	0x0801a5dd
 80167b4:	0801a61c 	.word	0x0801a61c
 80167b8:	0801a700 	.word	0x0801a700
 80167bc:	0801a6d8 	.word	0x0801a6d8
 80167c0:	7ff00000 	.word	0x7ff00000
 80167c4:	7ca00000 	.word	0x7ca00000
 80167c8:	fff80000 	.word	0xfff80000
 80167cc:	7fefffff 	.word	0x7fefffff
 80167d0:	f018 0310 	ands.w	r3, r8, #16
 80167d4:	bf18      	it	ne
 80167d6:	236a      	movne	r3, #106	; 0x6a
 80167d8:	4da0      	ldr	r5, [pc, #640]	; (8016a5c <_strtod_l+0x834>)
 80167da:	9304      	str	r3, [sp, #16]
 80167dc:	4650      	mov	r0, sl
 80167de:	4659      	mov	r1, fp
 80167e0:	2300      	movs	r3, #0
 80167e2:	f1b8 0f00 	cmp.w	r8, #0
 80167e6:	f300 810a 	bgt.w	80169fe <_strtod_l+0x7d6>
 80167ea:	b10b      	cbz	r3, 80167f0 <_strtod_l+0x5c8>
 80167ec:	4682      	mov	sl, r0
 80167ee:	468b      	mov	fp, r1
 80167f0:	9b04      	ldr	r3, [sp, #16]
 80167f2:	b1bb      	cbz	r3, 8016824 <_strtod_l+0x5fc>
 80167f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80167f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	4659      	mov	r1, fp
 8016800:	dd10      	ble.n	8016824 <_strtod_l+0x5fc>
 8016802:	2b1f      	cmp	r3, #31
 8016804:	f340 8107 	ble.w	8016a16 <_strtod_l+0x7ee>
 8016808:	2b34      	cmp	r3, #52	; 0x34
 801680a:	bfde      	ittt	le
 801680c:	3b20      	suble	r3, #32
 801680e:	f04f 32ff 	movle.w	r2, #4294967295
 8016812:	fa02 f303 	lslle.w	r3, r2, r3
 8016816:	f04f 0a00 	mov.w	sl, #0
 801681a:	bfcc      	ite	gt
 801681c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016820:	ea03 0b01 	andle.w	fp, r3, r1
 8016824:	2200      	movs	r2, #0
 8016826:	2300      	movs	r3, #0
 8016828:	4650      	mov	r0, sl
 801682a:	4659      	mov	r1, fp
 801682c:	f7f2 f884 	bl	8008938 <__aeabi_dcmpeq>
 8016830:	2800      	cmp	r0, #0
 8016832:	d1ac      	bne.n	801678e <_strtod_l+0x566>
 8016834:	9b07      	ldr	r3, [sp, #28]
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	9a05      	ldr	r2, [sp, #20]
 801683a:	9908      	ldr	r1, [sp, #32]
 801683c:	4623      	mov	r3, r4
 801683e:	4648      	mov	r0, r9
 8016840:	f002 f87e 	bl	8018940 <__s2b>
 8016844:	9007      	str	r0, [sp, #28]
 8016846:	2800      	cmp	r0, #0
 8016848:	f43f af08 	beq.w	801665c <_strtod_l+0x434>
 801684c:	9a06      	ldr	r2, [sp, #24]
 801684e:	9b06      	ldr	r3, [sp, #24]
 8016850:	2a00      	cmp	r2, #0
 8016852:	f1c3 0300 	rsb	r3, r3, #0
 8016856:	bfa8      	it	ge
 8016858:	2300      	movge	r3, #0
 801685a:	930e      	str	r3, [sp, #56]	; 0x38
 801685c:	2400      	movs	r4, #0
 801685e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016862:	9316      	str	r3, [sp, #88]	; 0x58
 8016864:	46a0      	mov	r8, r4
 8016866:	9b07      	ldr	r3, [sp, #28]
 8016868:	4648      	mov	r0, r9
 801686a:	6859      	ldr	r1, [r3, #4]
 801686c:	f001 ffe2 	bl	8018834 <_Balloc>
 8016870:	9005      	str	r0, [sp, #20]
 8016872:	2800      	cmp	r0, #0
 8016874:	f43f aef6 	beq.w	8016664 <_strtod_l+0x43c>
 8016878:	9b07      	ldr	r3, [sp, #28]
 801687a:	691a      	ldr	r2, [r3, #16]
 801687c:	3202      	adds	r2, #2
 801687e:	f103 010c 	add.w	r1, r3, #12
 8016882:	0092      	lsls	r2, r2, #2
 8016884:	300c      	adds	r0, #12
 8016886:	f7fe fcf1 	bl	801526c <memcpy>
 801688a:	aa1e      	add	r2, sp, #120	; 0x78
 801688c:	a91d      	add	r1, sp, #116	; 0x74
 801688e:	ec4b ab10 	vmov	d0, sl, fp
 8016892:	4648      	mov	r0, r9
 8016894:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016898:	f002 fb0e 	bl	8018eb8 <__d2b>
 801689c:	901c      	str	r0, [sp, #112]	; 0x70
 801689e:	2800      	cmp	r0, #0
 80168a0:	f43f aee0 	beq.w	8016664 <_strtod_l+0x43c>
 80168a4:	2101      	movs	r1, #1
 80168a6:	4648      	mov	r0, r9
 80168a8:	f002 f8d6 	bl	8018a58 <__i2b>
 80168ac:	4680      	mov	r8, r0
 80168ae:	2800      	cmp	r0, #0
 80168b0:	f43f aed8 	beq.w	8016664 <_strtod_l+0x43c>
 80168b4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80168b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80168b8:	2e00      	cmp	r6, #0
 80168ba:	bfab      	itete	ge
 80168bc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80168be:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80168c0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80168c2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80168c4:	bfac      	ite	ge
 80168c6:	18f7      	addge	r7, r6, r3
 80168c8:	1b9d      	sublt	r5, r3, r6
 80168ca:	9b04      	ldr	r3, [sp, #16]
 80168cc:	1af6      	subs	r6, r6, r3
 80168ce:	4416      	add	r6, r2
 80168d0:	4b63      	ldr	r3, [pc, #396]	; (8016a60 <_strtod_l+0x838>)
 80168d2:	3e01      	subs	r6, #1
 80168d4:	429e      	cmp	r6, r3
 80168d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80168da:	f280 80af 	bge.w	8016a3c <_strtod_l+0x814>
 80168de:	1b9b      	subs	r3, r3, r6
 80168e0:	2b1f      	cmp	r3, #31
 80168e2:	eba2 0203 	sub.w	r2, r2, r3
 80168e6:	f04f 0101 	mov.w	r1, #1
 80168ea:	f300 809b 	bgt.w	8016a24 <_strtod_l+0x7fc>
 80168ee:	fa01 f303 	lsl.w	r3, r1, r3
 80168f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80168f4:	2300      	movs	r3, #0
 80168f6:	930a      	str	r3, [sp, #40]	; 0x28
 80168f8:	18be      	adds	r6, r7, r2
 80168fa:	9b04      	ldr	r3, [sp, #16]
 80168fc:	42b7      	cmp	r7, r6
 80168fe:	4415      	add	r5, r2
 8016900:	441d      	add	r5, r3
 8016902:	463b      	mov	r3, r7
 8016904:	bfa8      	it	ge
 8016906:	4633      	movge	r3, r6
 8016908:	42ab      	cmp	r3, r5
 801690a:	bfa8      	it	ge
 801690c:	462b      	movge	r3, r5
 801690e:	2b00      	cmp	r3, #0
 8016910:	bfc2      	ittt	gt
 8016912:	1af6      	subgt	r6, r6, r3
 8016914:	1aed      	subgt	r5, r5, r3
 8016916:	1aff      	subgt	r7, r7, r3
 8016918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801691a:	b1bb      	cbz	r3, 801694c <_strtod_l+0x724>
 801691c:	4641      	mov	r1, r8
 801691e:	461a      	mov	r2, r3
 8016920:	4648      	mov	r0, r9
 8016922:	f002 f939 	bl	8018b98 <__pow5mult>
 8016926:	4680      	mov	r8, r0
 8016928:	2800      	cmp	r0, #0
 801692a:	f43f ae9b 	beq.w	8016664 <_strtod_l+0x43c>
 801692e:	4601      	mov	r1, r0
 8016930:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016932:	4648      	mov	r0, r9
 8016934:	f002 f899 	bl	8018a6a <__multiply>
 8016938:	900c      	str	r0, [sp, #48]	; 0x30
 801693a:	2800      	cmp	r0, #0
 801693c:	f43f ae92 	beq.w	8016664 <_strtod_l+0x43c>
 8016940:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016942:	4648      	mov	r0, r9
 8016944:	f001 ffaa 	bl	801889c <_Bfree>
 8016948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801694a:	931c      	str	r3, [sp, #112]	; 0x70
 801694c:	2e00      	cmp	r6, #0
 801694e:	dc7a      	bgt.n	8016a46 <_strtod_l+0x81e>
 8016950:	9b06      	ldr	r3, [sp, #24]
 8016952:	2b00      	cmp	r3, #0
 8016954:	dd08      	ble.n	8016968 <_strtod_l+0x740>
 8016956:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016958:	9905      	ldr	r1, [sp, #20]
 801695a:	4648      	mov	r0, r9
 801695c:	f002 f91c 	bl	8018b98 <__pow5mult>
 8016960:	9005      	str	r0, [sp, #20]
 8016962:	2800      	cmp	r0, #0
 8016964:	f43f ae7e 	beq.w	8016664 <_strtod_l+0x43c>
 8016968:	2d00      	cmp	r5, #0
 801696a:	dd08      	ble.n	801697e <_strtod_l+0x756>
 801696c:	462a      	mov	r2, r5
 801696e:	9905      	ldr	r1, [sp, #20]
 8016970:	4648      	mov	r0, r9
 8016972:	f002 f95f 	bl	8018c34 <__lshift>
 8016976:	9005      	str	r0, [sp, #20]
 8016978:	2800      	cmp	r0, #0
 801697a:	f43f ae73 	beq.w	8016664 <_strtod_l+0x43c>
 801697e:	2f00      	cmp	r7, #0
 8016980:	dd08      	ble.n	8016994 <_strtod_l+0x76c>
 8016982:	4641      	mov	r1, r8
 8016984:	463a      	mov	r2, r7
 8016986:	4648      	mov	r0, r9
 8016988:	f002 f954 	bl	8018c34 <__lshift>
 801698c:	4680      	mov	r8, r0
 801698e:	2800      	cmp	r0, #0
 8016990:	f43f ae68 	beq.w	8016664 <_strtod_l+0x43c>
 8016994:	9a05      	ldr	r2, [sp, #20]
 8016996:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016998:	4648      	mov	r0, r9
 801699a:	f002 f9b9 	bl	8018d10 <__mdiff>
 801699e:	4604      	mov	r4, r0
 80169a0:	2800      	cmp	r0, #0
 80169a2:	f43f ae5f 	beq.w	8016664 <_strtod_l+0x43c>
 80169a6:	68c3      	ldr	r3, [r0, #12]
 80169a8:	930c      	str	r3, [sp, #48]	; 0x30
 80169aa:	2300      	movs	r3, #0
 80169ac:	60c3      	str	r3, [r0, #12]
 80169ae:	4641      	mov	r1, r8
 80169b0:	f002 f994 	bl	8018cdc <__mcmp>
 80169b4:	2800      	cmp	r0, #0
 80169b6:	da55      	bge.n	8016a64 <_strtod_l+0x83c>
 80169b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169ba:	b9e3      	cbnz	r3, 80169f6 <_strtod_l+0x7ce>
 80169bc:	f1ba 0f00 	cmp.w	sl, #0
 80169c0:	d119      	bne.n	80169f6 <_strtod_l+0x7ce>
 80169c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169c6:	b9b3      	cbnz	r3, 80169f6 <_strtod_l+0x7ce>
 80169c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80169cc:	0d1b      	lsrs	r3, r3, #20
 80169ce:	051b      	lsls	r3, r3, #20
 80169d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80169d4:	d90f      	bls.n	80169f6 <_strtod_l+0x7ce>
 80169d6:	6963      	ldr	r3, [r4, #20]
 80169d8:	b913      	cbnz	r3, 80169e0 <_strtod_l+0x7b8>
 80169da:	6923      	ldr	r3, [r4, #16]
 80169dc:	2b01      	cmp	r3, #1
 80169de:	dd0a      	ble.n	80169f6 <_strtod_l+0x7ce>
 80169e0:	4621      	mov	r1, r4
 80169e2:	2201      	movs	r2, #1
 80169e4:	4648      	mov	r0, r9
 80169e6:	f002 f925 	bl	8018c34 <__lshift>
 80169ea:	4641      	mov	r1, r8
 80169ec:	4604      	mov	r4, r0
 80169ee:	f002 f975 	bl	8018cdc <__mcmp>
 80169f2:	2800      	cmp	r0, #0
 80169f4:	dc67      	bgt.n	8016ac6 <_strtod_l+0x89e>
 80169f6:	9b04      	ldr	r3, [sp, #16]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d171      	bne.n	8016ae0 <_strtod_l+0x8b8>
 80169fc:	e63d      	b.n	801667a <_strtod_l+0x452>
 80169fe:	f018 0f01 	tst.w	r8, #1
 8016a02:	d004      	beq.n	8016a0e <_strtod_l+0x7e6>
 8016a04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a08:	f7f1 fd2e 	bl	8008468 <__aeabi_dmul>
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016a12:	3508      	adds	r5, #8
 8016a14:	e6e5      	b.n	80167e2 <_strtod_l+0x5ba>
 8016a16:	f04f 32ff 	mov.w	r2, #4294967295
 8016a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016a1e:	ea03 0a0a 	and.w	sl, r3, sl
 8016a22:	e6ff      	b.n	8016824 <_strtod_l+0x5fc>
 8016a24:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016a28:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016a2c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016a30:	36e2      	adds	r6, #226	; 0xe2
 8016a32:	fa01 f306 	lsl.w	r3, r1, r6
 8016a36:	930a      	str	r3, [sp, #40]	; 0x28
 8016a38:	910f      	str	r1, [sp, #60]	; 0x3c
 8016a3a:	e75d      	b.n	80168f8 <_strtod_l+0x6d0>
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8016a40:	2301      	movs	r3, #1
 8016a42:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a44:	e758      	b.n	80168f8 <_strtod_l+0x6d0>
 8016a46:	4632      	mov	r2, r6
 8016a48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a4a:	4648      	mov	r0, r9
 8016a4c:	f002 f8f2 	bl	8018c34 <__lshift>
 8016a50:	901c      	str	r0, [sp, #112]	; 0x70
 8016a52:	2800      	cmp	r0, #0
 8016a54:	f47f af7c 	bne.w	8016950 <_strtod_l+0x728>
 8016a58:	e604      	b.n	8016664 <_strtod_l+0x43c>
 8016a5a:	bf00      	nop
 8016a5c:	0801a630 	.word	0x0801a630
 8016a60:	fffffc02 	.word	0xfffffc02
 8016a64:	465d      	mov	r5, fp
 8016a66:	f040 8086 	bne.w	8016b76 <_strtod_l+0x94e>
 8016a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a70:	b32a      	cbz	r2, 8016abe <_strtod_l+0x896>
 8016a72:	4aaf      	ldr	r2, [pc, #700]	; (8016d30 <_strtod_l+0xb08>)
 8016a74:	4293      	cmp	r3, r2
 8016a76:	d153      	bne.n	8016b20 <_strtod_l+0x8f8>
 8016a78:	9b04      	ldr	r3, [sp, #16]
 8016a7a:	4650      	mov	r0, sl
 8016a7c:	b1d3      	cbz	r3, 8016ab4 <_strtod_l+0x88c>
 8016a7e:	4aad      	ldr	r2, [pc, #692]	; (8016d34 <_strtod_l+0xb0c>)
 8016a80:	402a      	ands	r2, r5
 8016a82:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016a86:	f04f 31ff 	mov.w	r1, #4294967295
 8016a8a:	d816      	bhi.n	8016aba <_strtod_l+0x892>
 8016a8c:	0d12      	lsrs	r2, r2, #20
 8016a8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016a92:	fa01 f303 	lsl.w	r3, r1, r3
 8016a96:	4298      	cmp	r0, r3
 8016a98:	d142      	bne.n	8016b20 <_strtod_l+0x8f8>
 8016a9a:	4ba7      	ldr	r3, [pc, #668]	; (8016d38 <_strtod_l+0xb10>)
 8016a9c:	429d      	cmp	r5, r3
 8016a9e:	d102      	bne.n	8016aa6 <_strtod_l+0x87e>
 8016aa0:	3001      	adds	r0, #1
 8016aa2:	f43f addf 	beq.w	8016664 <_strtod_l+0x43c>
 8016aa6:	4ba3      	ldr	r3, [pc, #652]	; (8016d34 <_strtod_l+0xb0c>)
 8016aa8:	402b      	ands	r3, r5
 8016aaa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016aae:	f04f 0a00 	mov.w	sl, #0
 8016ab2:	e7a0      	b.n	80169f6 <_strtod_l+0x7ce>
 8016ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ab8:	e7ed      	b.n	8016a96 <_strtod_l+0x86e>
 8016aba:	460b      	mov	r3, r1
 8016abc:	e7eb      	b.n	8016a96 <_strtod_l+0x86e>
 8016abe:	bb7b      	cbnz	r3, 8016b20 <_strtod_l+0x8f8>
 8016ac0:	f1ba 0f00 	cmp.w	sl, #0
 8016ac4:	d12c      	bne.n	8016b20 <_strtod_l+0x8f8>
 8016ac6:	9904      	ldr	r1, [sp, #16]
 8016ac8:	4a9a      	ldr	r2, [pc, #616]	; (8016d34 <_strtod_l+0xb0c>)
 8016aca:	465b      	mov	r3, fp
 8016acc:	b1f1      	cbz	r1, 8016b0c <_strtod_l+0x8e4>
 8016ace:	ea02 010b 	and.w	r1, r2, fp
 8016ad2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016ad6:	dc19      	bgt.n	8016b0c <_strtod_l+0x8e4>
 8016ad8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016adc:	f77f ae5b 	ble.w	8016796 <_strtod_l+0x56e>
 8016ae0:	4a96      	ldr	r2, [pc, #600]	; (8016d3c <_strtod_l+0xb14>)
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016ae8:	4650      	mov	r0, sl
 8016aea:	4659      	mov	r1, fp
 8016aec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016af0:	f7f1 fcba 	bl	8008468 <__aeabi_dmul>
 8016af4:	4682      	mov	sl, r0
 8016af6:	468b      	mov	fp, r1
 8016af8:	2900      	cmp	r1, #0
 8016afa:	f47f adbe 	bne.w	801667a <_strtod_l+0x452>
 8016afe:	2800      	cmp	r0, #0
 8016b00:	f47f adbb 	bne.w	801667a <_strtod_l+0x452>
 8016b04:	2322      	movs	r3, #34	; 0x22
 8016b06:	f8c9 3000 	str.w	r3, [r9]
 8016b0a:	e5b6      	b.n	801667a <_strtod_l+0x452>
 8016b0c:	4013      	ands	r3, r2
 8016b0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016b12:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016b16:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016b1a:	f04f 3aff 	mov.w	sl, #4294967295
 8016b1e:	e76a      	b.n	80169f6 <_strtod_l+0x7ce>
 8016b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b22:	b193      	cbz	r3, 8016b4a <_strtod_l+0x922>
 8016b24:	422b      	tst	r3, r5
 8016b26:	f43f af66 	beq.w	80169f6 <_strtod_l+0x7ce>
 8016b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b2c:	9a04      	ldr	r2, [sp, #16]
 8016b2e:	4650      	mov	r0, sl
 8016b30:	4659      	mov	r1, fp
 8016b32:	b173      	cbz	r3, 8016b52 <_strtod_l+0x92a>
 8016b34:	f7ff fb5c 	bl	80161f0 <sulp>
 8016b38:	4602      	mov	r2, r0
 8016b3a:	460b      	mov	r3, r1
 8016b3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016b40:	f7f1 fadc 	bl	80080fc <__adddf3>
 8016b44:	4682      	mov	sl, r0
 8016b46:	468b      	mov	fp, r1
 8016b48:	e755      	b.n	80169f6 <_strtod_l+0x7ce>
 8016b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b4c:	ea13 0f0a 	tst.w	r3, sl
 8016b50:	e7e9      	b.n	8016b26 <_strtod_l+0x8fe>
 8016b52:	f7ff fb4d 	bl	80161f0 <sulp>
 8016b56:	4602      	mov	r2, r0
 8016b58:	460b      	mov	r3, r1
 8016b5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016b5e:	f7f1 facb 	bl	80080f8 <__aeabi_dsub>
 8016b62:	2200      	movs	r2, #0
 8016b64:	2300      	movs	r3, #0
 8016b66:	4682      	mov	sl, r0
 8016b68:	468b      	mov	fp, r1
 8016b6a:	f7f1 fee5 	bl	8008938 <__aeabi_dcmpeq>
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	f47f ae11 	bne.w	8016796 <_strtod_l+0x56e>
 8016b74:	e73f      	b.n	80169f6 <_strtod_l+0x7ce>
 8016b76:	4641      	mov	r1, r8
 8016b78:	4620      	mov	r0, r4
 8016b7a:	f002 f9ec 	bl	8018f56 <__ratio>
 8016b7e:	ec57 6b10 	vmov	r6, r7, d0
 8016b82:	2200      	movs	r2, #0
 8016b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b88:	ee10 0a10 	vmov	r0, s0
 8016b8c:	4639      	mov	r1, r7
 8016b8e:	f7f1 fee7 	bl	8008960 <__aeabi_dcmple>
 8016b92:	2800      	cmp	r0, #0
 8016b94:	d077      	beq.n	8016c86 <_strtod_l+0xa5e>
 8016b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d04a      	beq.n	8016c32 <_strtod_l+0xa0a>
 8016b9c:	4b68      	ldr	r3, [pc, #416]	; (8016d40 <_strtod_l+0xb18>)
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016ba4:	4f66      	ldr	r7, [pc, #408]	; (8016d40 <_strtod_l+0xb18>)
 8016ba6:	2600      	movs	r6, #0
 8016ba8:	4b62      	ldr	r3, [pc, #392]	; (8016d34 <_strtod_l+0xb0c>)
 8016baa:	402b      	ands	r3, r5
 8016bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bb0:	4b64      	ldr	r3, [pc, #400]	; (8016d44 <_strtod_l+0xb1c>)
 8016bb2:	429a      	cmp	r2, r3
 8016bb4:	f040 80ce 	bne.w	8016d54 <_strtod_l+0xb2c>
 8016bb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016bbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016bc0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016bc4:	ec4b ab10 	vmov	d0, sl, fp
 8016bc8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016bcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016bd0:	f002 f8fc 	bl	8018dcc <__ulp>
 8016bd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016bd8:	ec53 2b10 	vmov	r2, r3, d0
 8016bdc:	f7f1 fc44 	bl	8008468 <__aeabi_dmul>
 8016be0:	4652      	mov	r2, sl
 8016be2:	465b      	mov	r3, fp
 8016be4:	f7f1 fa8a 	bl	80080fc <__adddf3>
 8016be8:	460b      	mov	r3, r1
 8016bea:	4952      	ldr	r1, [pc, #328]	; (8016d34 <_strtod_l+0xb0c>)
 8016bec:	4a56      	ldr	r2, [pc, #344]	; (8016d48 <_strtod_l+0xb20>)
 8016bee:	4019      	ands	r1, r3
 8016bf0:	4291      	cmp	r1, r2
 8016bf2:	4682      	mov	sl, r0
 8016bf4:	d95b      	bls.n	8016cae <_strtod_l+0xa86>
 8016bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bf8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016bfc:	4293      	cmp	r3, r2
 8016bfe:	d103      	bne.n	8016c08 <_strtod_l+0x9e0>
 8016c00:	9b08      	ldr	r3, [sp, #32]
 8016c02:	3301      	adds	r3, #1
 8016c04:	f43f ad2e 	beq.w	8016664 <_strtod_l+0x43c>
 8016c08:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016d38 <_strtod_l+0xb10>
 8016c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8016c10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c12:	4648      	mov	r0, r9
 8016c14:	f001 fe42 	bl	801889c <_Bfree>
 8016c18:	9905      	ldr	r1, [sp, #20]
 8016c1a:	4648      	mov	r0, r9
 8016c1c:	f001 fe3e 	bl	801889c <_Bfree>
 8016c20:	4641      	mov	r1, r8
 8016c22:	4648      	mov	r0, r9
 8016c24:	f001 fe3a 	bl	801889c <_Bfree>
 8016c28:	4621      	mov	r1, r4
 8016c2a:	4648      	mov	r0, r9
 8016c2c:	f001 fe36 	bl	801889c <_Bfree>
 8016c30:	e619      	b.n	8016866 <_strtod_l+0x63e>
 8016c32:	f1ba 0f00 	cmp.w	sl, #0
 8016c36:	d11a      	bne.n	8016c6e <_strtod_l+0xa46>
 8016c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c3c:	b9eb      	cbnz	r3, 8016c7a <_strtod_l+0xa52>
 8016c3e:	2200      	movs	r2, #0
 8016c40:	4b3f      	ldr	r3, [pc, #252]	; (8016d40 <_strtod_l+0xb18>)
 8016c42:	4630      	mov	r0, r6
 8016c44:	4639      	mov	r1, r7
 8016c46:	f7f1 fe81 	bl	800894c <__aeabi_dcmplt>
 8016c4a:	b9c8      	cbnz	r0, 8016c80 <_strtod_l+0xa58>
 8016c4c:	4630      	mov	r0, r6
 8016c4e:	4639      	mov	r1, r7
 8016c50:	2200      	movs	r2, #0
 8016c52:	4b3e      	ldr	r3, [pc, #248]	; (8016d4c <_strtod_l+0xb24>)
 8016c54:	f7f1 fc08 	bl	8008468 <__aeabi_dmul>
 8016c58:	4606      	mov	r6, r0
 8016c5a:	460f      	mov	r7, r1
 8016c5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016c60:	9618      	str	r6, [sp, #96]	; 0x60
 8016c62:	9319      	str	r3, [sp, #100]	; 0x64
 8016c64:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016c68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016c6c:	e79c      	b.n	8016ba8 <_strtod_l+0x980>
 8016c6e:	f1ba 0f01 	cmp.w	sl, #1
 8016c72:	d102      	bne.n	8016c7a <_strtod_l+0xa52>
 8016c74:	2d00      	cmp	r5, #0
 8016c76:	f43f ad8e 	beq.w	8016796 <_strtod_l+0x56e>
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	4b34      	ldr	r3, [pc, #208]	; (8016d50 <_strtod_l+0xb28>)
 8016c7e:	e78f      	b.n	8016ba0 <_strtod_l+0x978>
 8016c80:	2600      	movs	r6, #0
 8016c82:	4f32      	ldr	r7, [pc, #200]	; (8016d4c <_strtod_l+0xb24>)
 8016c84:	e7ea      	b.n	8016c5c <_strtod_l+0xa34>
 8016c86:	4b31      	ldr	r3, [pc, #196]	; (8016d4c <_strtod_l+0xb24>)
 8016c88:	4630      	mov	r0, r6
 8016c8a:	4639      	mov	r1, r7
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	f7f1 fbeb 	bl	8008468 <__aeabi_dmul>
 8016c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c94:	4606      	mov	r6, r0
 8016c96:	460f      	mov	r7, r1
 8016c98:	b933      	cbnz	r3, 8016ca8 <_strtod_l+0xa80>
 8016c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c9e:	9010      	str	r0, [sp, #64]	; 0x40
 8016ca0:	9311      	str	r3, [sp, #68]	; 0x44
 8016ca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016ca6:	e7df      	b.n	8016c68 <_strtod_l+0xa40>
 8016ca8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016cac:	e7f9      	b.n	8016ca2 <_strtod_l+0xa7a>
 8016cae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016cb2:	9b04      	ldr	r3, [sp, #16]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d1ab      	bne.n	8016c10 <_strtod_l+0x9e8>
 8016cb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016cbc:	0d1b      	lsrs	r3, r3, #20
 8016cbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016cc0:	051b      	lsls	r3, r3, #20
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	465d      	mov	r5, fp
 8016cc6:	d1a3      	bne.n	8016c10 <_strtod_l+0x9e8>
 8016cc8:	4639      	mov	r1, r7
 8016cca:	4630      	mov	r0, r6
 8016ccc:	f7f1 fe7c 	bl	80089c8 <__aeabi_d2iz>
 8016cd0:	f7f1 fb60 	bl	8008394 <__aeabi_i2d>
 8016cd4:	460b      	mov	r3, r1
 8016cd6:	4602      	mov	r2, r0
 8016cd8:	4639      	mov	r1, r7
 8016cda:	4630      	mov	r0, r6
 8016cdc:	f7f1 fa0c 	bl	80080f8 <__aeabi_dsub>
 8016ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ce2:	4606      	mov	r6, r0
 8016ce4:	460f      	mov	r7, r1
 8016ce6:	b933      	cbnz	r3, 8016cf6 <_strtod_l+0xace>
 8016ce8:	f1ba 0f00 	cmp.w	sl, #0
 8016cec:	d103      	bne.n	8016cf6 <_strtod_l+0xace>
 8016cee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016cf2:	2d00      	cmp	r5, #0
 8016cf4:	d06d      	beq.n	8016dd2 <_strtod_l+0xbaa>
 8016cf6:	a30a      	add	r3, pc, #40	; (adr r3, 8016d20 <_strtod_l+0xaf8>)
 8016cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	4639      	mov	r1, r7
 8016d00:	f7f1 fe24 	bl	800894c <__aeabi_dcmplt>
 8016d04:	2800      	cmp	r0, #0
 8016d06:	f47f acb8 	bne.w	801667a <_strtod_l+0x452>
 8016d0a:	a307      	add	r3, pc, #28	; (adr r3, 8016d28 <_strtod_l+0xb00>)
 8016d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d10:	4630      	mov	r0, r6
 8016d12:	4639      	mov	r1, r7
 8016d14:	f7f1 fe38 	bl	8008988 <__aeabi_dcmpgt>
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	f43f af79 	beq.w	8016c10 <_strtod_l+0x9e8>
 8016d1e:	e4ac      	b.n	801667a <_strtod_l+0x452>
 8016d20:	94a03595 	.word	0x94a03595
 8016d24:	3fdfffff 	.word	0x3fdfffff
 8016d28:	35afe535 	.word	0x35afe535
 8016d2c:	3fe00000 	.word	0x3fe00000
 8016d30:	000fffff 	.word	0x000fffff
 8016d34:	7ff00000 	.word	0x7ff00000
 8016d38:	7fefffff 	.word	0x7fefffff
 8016d3c:	39500000 	.word	0x39500000
 8016d40:	3ff00000 	.word	0x3ff00000
 8016d44:	7fe00000 	.word	0x7fe00000
 8016d48:	7c9fffff 	.word	0x7c9fffff
 8016d4c:	3fe00000 	.word	0x3fe00000
 8016d50:	bff00000 	.word	0xbff00000
 8016d54:	9b04      	ldr	r3, [sp, #16]
 8016d56:	b333      	cbz	r3, 8016da6 <_strtod_l+0xb7e>
 8016d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016d5e:	d822      	bhi.n	8016da6 <_strtod_l+0xb7e>
 8016d60:	a327      	add	r3, pc, #156	; (adr r3, 8016e00 <_strtod_l+0xbd8>)
 8016d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d66:	4630      	mov	r0, r6
 8016d68:	4639      	mov	r1, r7
 8016d6a:	f7f1 fdf9 	bl	8008960 <__aeabi_dcmple>
 8016d6e:	b1a0      	cbz	r0, 8016d9a <_strtod_l+0xb72>
 8016d70:	4639      	mov	r1, r7
 8016d72:	4630      	mov	r0, r6
 8016d74:	f7f1 fe50 	bl	8008a18 <__aeabi_d2uiz>
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	bf08      	it	eq
 8016d7c:	2001      	moveq	r0, #1
 8016d7e:	f7f1 faf9 	bl	8008374 <__aeabi_ui2d>
 8016d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d84:	4606      	mov	r6, r0
 8016d86:	460f      	mov	r7, r1
 8016d88:	bb03      	cbnz	r3, 8016dcc <_strtod_l+0xba4>
 8016d8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d8e:	9012      	str	r0, [sp, #72]	; 0x48
 8016d90:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016d96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d9e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016da2:	1a9b      	subs	r3, r3, r2
 8016da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016da6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016daa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016dae:	f002 f80d 	bl	8018dcc <__ulp>
 8016db2:	4650      	mov	r0, sl
 8016db4:	ec53 2b10 	vmov	r2, r3, d0
 8016db8:	4659      	mov	r1, fp
 8016dba:	f7f1 fb55 	bl	8008468 <__aeabi_dmul>
 8016dbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016dc2:	f7f1 f99b 	bl	80080fc <__adddf3>
 8016dc6:	4682      	mov	sl, r0
 8016dc8:	468b      	mov	fp, r1
 8016dca:	e772      	b.n	8016cb2 <_strtod_l+0xa8a>
 8016dcc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016dd0:	e7df      	b.n	8016d92 <_strtod_l+0xb6a>
 8016dd2:	a30d      	add	r3, pc, #52	; (adr r3, 8016e08 <_strtod_l+0xbe0>)
 8016dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd8:	f7f1 fdb8 	bl	800894c <__aeabi_dcmplt>
 8016ddc:	e79c      	b.n	8016d18 <_strtod_l+0xaf0>
 8016dde:	2300      	movs	r3, #0
 8016de0:	930d      	str	r3, [sp, #52]	; 0x34
 8016de2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016de6:	6013      	str	r3, [r2, #0]
 8016de8:	f7ff ba61 	b.w	80162ae <_strtod_l+0x86>
 8016dec:	2b65      	cmp	r3, #101	; 0x65
 8016dee:	f04f 0200 	mov.w	r2, #0
 8016df2:	f43f ab4e 	beq.w	8016492 <_strtod_l+0x26a>
 8016df6:	2101      	movs	r1, #1
 8016df8:	4614      	mov	r4, r2
 8016dfa:	9104      	str	r1, [sp, #16]
 8016dfc:	f7ff bacb 	b.w	8016396 <_strtod_l+0x16e>
 8016e00:	ffc00000 	.word	0xffc00000
 8016e04:	41dfffff 	.word	0x41dfffff
 8016e08:	94a03595 	.word	0x94a03595
 8016e0c:	3fcfffff 	.word	0x3fcfffff

08016e10 <_strtod_r>:
 8016e10:	4b05      	ldr	r3, [pc, #20]	; (8016e28 <_strtod_r+0x18>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	b410      	push	{r4}
 8016e16:	6a1b      	ldr	r3, [r3, #32]
 8016e18:	4c04      	ldr	r4, [pc, #16]	; (8016e2c <_strtod_r+0x1c>)
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	bf08      	it	eq
 8016e1e:	4623      	moveq	r3, r4
 8016e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e24:	f7ff ba00 	b.w	8016228 <_strtod_l>
 8016e28:	20000028 	.word	0x20000028
 8016e2c:	2000008c 	.word	0x2000008c

08016e30 <_strtol_l.isra.0>:
 8016e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e34:	4680      	mov	r8, r0
 8016e36:	4689      	mov	r9, r1
 8016e38:	4692      	mov	sl, r2
 8016e3a:	461e      	mov	r6, r3
 8016e3c:	460f      	mov	r7, r1
 8016e3e:	463d      	mov	r5, r7
 8016e40:	9808      	ldr	r0, [sp, #32]
 8016e42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e46:	f001 fc55 	bl	80186f4 <__locale_ctype_ptr_l>
 8016e4a:	4420      	add	r0, r4
 8016e4c:	7843      	ldrb	r3, [r0, #1]
 8016e4e:	f013 0308 	ands.w	r3, r3, #8
 8016e52:	d132      	bne.n	8016eba <_strtol_l.isra.0+0x8a>
 8016e54:	2c2d      	cmp	r4, #45	; 0x2d
 8016e56:	d132      	bne.n	8016ebe <_strtol_l.isra.0+0x8e>
 8016e58:	787c      	ldrb	r4, [r7, #1]
 8016e5a:	1cbd      	adds	r5, r7, #2
 8016e5c:	2201      	movs	r2, #1
 8016e5e:	2e00      	cmp	r6, #0
 8016e60:	d05d      	beq.n	8016f1e <_strtol_l.isra.0+0xee>
 8016e62:	2e10      	cmp	r6, #16
 8016e64:	d109      	bne.n	8016e7a <_strtol_l.isra.0+0x4a>
 8016e66:	2c30      	cmp	r4, #48	; 0x30
 8016e68:	d107      	bne.n	8016e7a <_strtol_l.isra.0+0x4a>
 8016e6a:	782b      	ldrb	r3, [r5, #0]
 8016e6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016e70:	2b58      	cmp	r3, #88	; 0x58
 8016e72:	d14f      	bne.n	8016f14 <_strtol_l.isra.0+0xe4>
 8016e74:	786c      	ldrb	r4, [r5, #1]
 8016e76:	2610      	movs	r6, #16
 8016e78:	3502      	adds	r5, #2
 8016e7a:	2a00      	cmp	r2, #0
 8016e7c:	bf14      	ite	ne
 8016e7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016e82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016e86:	2700      	movs	r7, #0
 8016e88:	fbb1 fcf6 	udiv	ip, r1, r6
 8016e8c:	4638      	mov	r0, r7
 8016e8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016e92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016e96:	2b09      	cmp	r3, #9
 8016e98:	d817      	bhi.n	8016eca <_strtol_l.isra.0+0x9a>
 8016e9a:	461c      	mov	r4, r3
 8016e9c:	42a6      	cmp	r6, r4
 8016e9e:	dd23      	ble.n	8016ee8 <_strtol_l.isra.0+0xb8>
 8016ea0:	1c7b      	adds	r3, r7, #1
 8016ea2:	d007      	beq.n	8016eb4 <_strtol_l.isra.0+0x84>
 8016ea4:	4584      	cmp	ip, r0
 8016ea6:	d31c      	bcc.n	8016ee2 <_strtol_l.isra.0+0xb2>
 8016ea8:	d101      	bne.n	8016eae <_strtol_l.isra.0+0x7e>
 8016eaa:	45a6      	cmp	lr, r4
 8016eac:	db19      	blt.n	8016ee2 <_strtol_l.isra.0+0xb2>
 8016eae:	fb00 4006 	mla	r0, r0, r6, r4
 8016eb2:	2701      	movs	r7, #1
 8016eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016eb8:	e7eb      	b.n	8016e92 <_strtol_l.isra.0+0x62>
 8016eba:	462f      	mov	r7, r5
 8016ebc:	e7bf      	b.n	8016e3e <_strtol_l.isra.0+0xe>
 8016ebe:	2c2b      	cmp	r4, #43	; 0x2b
 8016ec0:	bf04      	itt	eq
 8016ec2:	1cbd      	addeq	r5, r7, #2
 8016ec4:	787c      	ldrbeq	r4, [r7, #1]
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	e7c9      	b.n	8016e5e <_strtol_l.isra.0+0x2e>
 8016eca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016ece:	2b19      	cmp	r3, #25
 8016ed0:	d801      	bhi.n	8016ed6 <_strtol_l.isra.0+0xa6>
 8016ed2:	3c37      	subs	r4, #55	; 0x37
 8016ed4:	e7e2      	b.n	8016e9c <_strtol_l.isra.0+0x6c>
 8016ed6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016eda:	2b19      	cmp	r3, #25
 8016edc:	d804      	bhi.n	8016ee8 <_strtol_l.isra.0+0xb8>
 8016ede:	3c57      	subs	r4, #87	; 0x57
 8016ee0:	e7dc      	b.n	8016e9c <_strtol_l.isra.0+0x6c>
 8016ee2:	f04f 37ff 	mov.w	r7, #4294967295
 8016ee6:	e7e5      	b.n	8016eb4 <_strtol_l.isra.0+0x84>
 8016ee8:	1c7b      	adds	r3, r7, #1
 8016eea:	d108      	bne.n	8016efe <_strtol_l.isra.0+0xce>
 8016eec:	2322      	movs	r3, #34	; 0x22
 8016eee:	f8c8 3000 	str.w	r3, [r8]
 8016ef2:	4608      	mov	r0, r1
 8016ef4:	f1ba 0f00 	cmp.w	sl, #0
 8016ef8:	d107      	bne.n	8016f0a <_strtol_l.isra.0+0xda>
 8016efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016efe:	b102      	cbz	r2, 8016f02 <_strtol_l.isra.0+0xd2>
 8016f00:	4240      	negs	r0, r0
 8016f02:	f1ba 0f00 	cmp.w	sl, #0
 8016f06:	d0f8      	beq.n	8016efa <_strtol_l.isra.0+0xca>
 8016f08:	b10f      	cbz	r7, 8016f0e <_strtol_l.isra.0+0xde>
 8016f0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016f0e:	f8ca 9000 	str.w	r9, [sl]
 8016f12:	e7f2      	b.n	8016efa <_strtol_l.isra.0+0xca>
 8016f14:	2430      	movs	r4, #48	; 0x30
 8016f16:	2e00      	cmp	r6, #0
 8016f18:	d1af      	bne.n	8016e7a <_strtol_l.isra.0+0x4a>
 8016f1a:	2608      	movs	r6, #8
 8016f1c:	e7ad      	b.n	8016e7a <_strtol_l.isra.0+0x4a>
 8016f1e:	2c30      	cmp	r4, #48	; 0x30
 8016f20:	d0a3      	beq.n	8016e6a <_strtol_l.isra.0+0x3a>
 8016f22:	260a      	movs	r6, #10
 8016f24:	e7a9      	b.n	8016e7a <_strtol_l.isra.0+0x4a>
	...

08016f28 <_strtol_r>:
 8016f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f2a:	4c06      	ldr	r4, [pc, #24]	; (8016f44 <_strtol_r+0x1c>)
 8016f2c:	4d06      	ldr	r5, [pc, #24]	; (8016f48 <_strtol_r+0x20>)
 8016f2e:	6824      	ldr	r4, [r4, #0]
 8016f30:	6a24      	ldr	r4, [r4, #32]
 8016f32:	2c00      	cmp	r4, #0
 8016f34:	bf08      	it	eq
 8016f36:	462c      	moveq	r4, r5
 8016f38:	9400      	str	r4, [sp, #0]
 8016f3a:	f7ff ff79 	bl	8016e30 <_strtol_l.isra.0>
 8016f3e:	b003      	add	sp, #12
 8016f40:	bd30      	pop	{r4, r5, pc}
 8016f42:	bf00      	nop
 8016f44:	20000028 	.word	0x20000028
 8016f48:	2000008c 	.word	0x2000008c

08016f4c <__swbuf_r>:
 8016f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f4e:	460e      	mov	r6, r1
 8016f50:	4614      	mov	r4, r2
 8016f52:	4605      	mov	r5, r0
 8016f54:	b118      	cbz	r0, 8016f5e <__swbuf_r+0x12>
 8016f56:	6983      	ldr	r3, [r0, #24]
 8016f58:	b90b      	cbnz	r3, 8016f5e <__swbuf_r+0x12>
 8016f5a:	f000 ffff 	bl	8017f5c <__sinit>
 8016f5e:	4b21      	ldr	r3, [pc, #132]	; (8016fe4 <__swbuf_r+0x98>)
 8016f60:	429c      	cmp	r4, r3
 8016f62:	d12a      	bne.n	8016fba <__swbuf_r+0x6e>
 8016f64:	686c      	ldr	r4, [r5, #4]
 8016f66:	69a3      	ldr	r3, [r4, #24]
 8016f68:	60a3      	str	r3, [r4, #8]
 8016f6a:	89a3      	ldrh	r3, [r4, #12]
 8016f6c:	071a      	lsls	r2, r3, #28
 8016f6e:	d52e      	bpl.n	8016fce <__swbuf_r+0x82>
 8016f70:	6923      	ldr	r3, [r4, #16]
 8016f72:	b363      	cbz	r3, 8016fce <__swbuf_r+0x82>
 8016f74:	6923      	ldr	r3, [r4, #16]
 8016f76:	6820      	ldr	r0, [r4, #0]
 8016f78:	1ac0      	subs	r0, r0, r3
 8016f7a:	6963      	ldr	r3, [r4, #20]
 8016f7c:	b2f6      	uxtb	r6, r6
 8016f7e:	4283      	cmp	r3, r0
 8016f80:	4637      	mov	r7, r6
 8016f82:	dc04      	bgt.n	8016f8e <__swbuf_r+0x42>
 8016f84:	4621      	mov	r1, r4
 8016f86:	4628      	mov	r0, r5
 8016f88:	f000 ff6c 	bl	8017e64 <_fflush_r>
 8016f8c:	bb28      	cbnz	r0, 8016fda <__swbuf_r+0x8e>
 8016f8e:	68a3      	ldr	r3, [r4, #8]
 8016f90:	3b01      	subs	r3, #1
 8016f92:	60a3      	str	r3, [r4, #8]
 8016f94:	6823      	ldr	r3, [r4, #0]
 8016f96:	1c5a      	adds	r2, r3, #1
 8016f98:	6022      	str	r2, [r4, #0]
 8016f9a:	701e      	strb	r6, [r3, #0]
 8016f9c:	6963      	ldr	r3, [r4, #20]
 8016f9e:	3001      	adds	r0, #1
 8016fa0:	4283      	cmp	r3, r0
 8016fa2:	d004      	beq.n	8016fae <__swbuf_r+0x62>
 8016fa4:	89a3      	ldrh	r3, [r4, #12]
 8016fa6:	07db      	lsls	r3, r3, #31
 8016fa8:	d519      	bpl.n	8016fde <__swbuf_r+0x92>
 8016faa:	2e0a      	cmp	r6, #10
 8016fac:	d117      	bne.n	8016fde <__swbuf_r+0x92>
 8016fae:	4621      	mov	r1, r4
 8016fb0:	4628      	mov	r0, r5
 8016fb2:	f000 ff57 	bl	8017e64 <_fflush_r>
 8016fb6:	b190      	cbz	r0, 8016fde <__swbuf_r+0x92>
 8016fb8:	e00f      	b.n	8016fda <__swbuf_r+0x8e>
 8016fba:	4b0b      	ldr	r3, [pc, #44]	; (8016fe8 <__swbuf_r+0x9c>)
 8016fbc:	429c      	cmp	r4, r3
 8016fbe:	d101      	bne.n	8016fc4 <__swbuf_r+0x78>
 8016fc0:	68ac      	ldr	r4, [r5, #8]
 8016fc2:	e7d0      	b.n	8016f66 <__swbuf_r+0x1a>
 8016fc4:	4b09      	ldr	r3, [pc, #36]	; (8016fec <__swbuf_r+0xa0>)
 8016fc6:	429c      	cmp	r4, r3
 8016fc8:	bf08      	it	eq
 8016fca:	68ec      	ldreq	r4, [r5, #12]
 8016fcc:	e7cb      	b.n	8016f66 <__swbuf_r+0x1a>
 8016fce:	4621      	mov	r1, r4
 8016fd0:	4628      	mov	r0, r5
 8016fd2:	f000 f80d 	bl	8016ff0 <__swsetup_r>
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	d0cc      	beq.n	8016f74 <__swbuf_r+0x28>
 8016fda:	f04f 37ff 	mov.w	r7, #4294967295
 8016fde:	4638      	mov	r0, r7
 8016fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	0801a688 	.word	0x0801a688
 8016fe8:	0801a6a8 	.word	0x0801a6a8
 8016fec:	0801a668 	.word	0x0801a668

08016ff0 <__swsetup_r>:
 8016ff0:	4b32      	ldr	r3, [pc, #200]	; (80170bc <__swsetup_r+0xcc>)
 8016ff2:	b570      	push	{r4, r5, r6, lr}
 8016ff4:	681d      	ldr	r5, [r3, #0]
 8016ff6:	4606      	mov	r6, r0
 8016ff8:	460c      	mov	r4, r1
 8016ffa:	b125      	cbz	r5, 8017006 <__swsetup_r+0x16>
 8016ffc:	69ab      	ldr	r3, [r5, #24]
 8016ffe:	b913      	cbnz	r3, 8017006 <__swsetup_r+0x16>
 8017000:	4628      	mov	r0, r5
 8017002:	f000 ffab 	bl	8017f5c <__sinit>
 8017006:	4b2e      	ldr	r3, [pc, #184]	; (80170c0 <__swsetup_r+0xd0>)
 8017008:	429c      	cmp	r4, r3
 801700a:	d10f      	bne.n	801702c <__swsetup_r+0x3c>
 801700c:	686c      	ldr	r4, [r5, #4]
 801700e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017012:	b29a      	uxth	r2, r3
 8017014:	0715      	lsls	r5, r2, #28
 8017016:	d42c      	bmi.n	8017072 <__swsetup_r+0x82>
 8017018:	06d0      	lsls	r0, r2, #27
 801701a:	d411      	bmi.n	8017040 <__swsetup_r+0x50>
 801701c:	2209      	movs	r2, #9
 801701e:	6032      	str	r2, [r6, #0]
 8017020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017024:	81a3      	strh	r3, [r4, #12]
 8017026:	f04f 30ff 	mov.w	r0, #4294967295
 801702a:	e03e      	b.n	80170aa <__swsetup_r+0xba>
 801702c:	4b25      	ldr	r3, [pc, #148]	; (80170c4 <__swsetup_r+0xd4>)
 801702e:	429c      	cmp	r4, r3
 8017030:	d101      	bne.n	8017036 <__swsetup_r+0x46>
 8017032:	68ac      	ldr	r4, [r5, #8]
 8017034:	e7eb      	b.n	801700e <__swsetup_r+0x1e>
 8017036:	4b24      	ldr	r3, [pc, #144]	; (80170c8 <__swsetup_r+0xd8>)
 8017038:	429c      	cmp	r4, r3
 801703a:	bf08      	it	eq
 801703c:	68ec      	ldreq	r4, [r5, #12]
 801703e:	e7e6      	b.n	801700e <__swsetup_r+0x1e>
 8017040:	0751      	lsls	r1, r2, #29
 8017042:	d512      	bpl.n	801706a <__swsetup_r+0x7a>
 8017044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017046:	b141      	cbz	r1, 801705a <__swsetup_r+0x6a>
 8017048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801704c:	4299      	cmp	r1, r3
 801704e:	d002      	beq.n	8017056 <__swsetup_r+0x66>
 8017050:	4630      	mov	r0, r6
 8017052:	f001 fffd 	bl	8019050 <_free_r>
 8017056:	2300      	movs	r3, #0
 8017058:	6363      	str	r3, [r4, #52]	; 0x34
 801705a:	89a3      	ldrh	r3, [r4, #12]
 801705c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017060:	81a3      	strh	r3, [r4, #12]
 8017062:	2300      	movs	r3, #0
 8017064:	6063      	str	r3, [r4, #4]
 8017066:	6923      	ldr	r3, [r4, #16]
 8017068:	6023      	str	r3, [r4, #0]
 801706a:	89a3      	ldrh	r3, [r4, #12]
 801706c:	f043 0308 	orr.w	r3, r3, #8
 8017070:	81a3      	strh	r3, [r4, #12]
 8017072:	6923      	ldr	r3, [r4, #16]
 8017074:	b94b      	cbnz	r3, 801708a <__swsetup_r+0x9a>
 8017076:	89a3      	ldrh	r3, [r4, #12]
 8017078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801707c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017080:	d003      	beq.n	801708a <__swsetup_r+0x9a>
 8017082:	4621      	mov	r1, r4
 8017084:	4630      	mov	r0, r6
 8017086:	f001 fb7b 	bl	8018780 <__smakebuf_r>
 801708a:	89a2      	ldrh	r2, [r4, #12]
 801708c:	f012 0301 	ands.w	r3, r2, #1
 8017090:	d00c      	beq.n	80170ac <__swsetup_r+0xbc>
 8017092:	2300      	movs	r3, #0
 8017094:	60a3      	str	r3, [r4, #8]
 8017096:	6963      	ldr	r3, [r4, #20]
 8017098:	425b      	negs	r3, r3
 801709a:	61a3      	str	r3, [r4, #24]
 801709c:	6923      	ldr	r3, [r4, #16]
 801709e:	b953      	cbnz	r3, 80170b6 <__swsetup_r+0xc6>
 80170a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80170a8:	d1ba      	bne.n	8017020 <__swsetup_r+0x30>
 80170aa:	bd70      	pop	{r4, r5, r6, pc}
 80170ac:	0792      	lsls	r2, r2, #30
 80170ae:	bf58      	it	pl
 80170b0:	6963      	ldrpl	r3, [r4, #20]
 80170b2:	60a3      	str	r3, [r4, #8]
 80170b4:	e7f2      	b.n	801709c <__swsetup_r+0xac>
 80170b6:	2000      	movs	r0, #0
 80170b8:	e7f7      	b.n	80170aa <__swsetup_r+0xba>
 80170ba:	bf00      	nop
 80170bc:	20000028 	.word	0x20000028
 80170c0:	0801a688 	.word	0x0801a688
 80170c4:	0801a6a8 	.word	0x0801a6a8
 80170c8:	0801a668 	.word	0x0801a668

080170cc <quorem>:
 80170cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d0:	6903      	ldr	r3, [r0, #16]
 80170d2:	690c      	ldr	r4, [r1, #16]
 80170d4:	42a3      	cmp	r3, r4
 80170d6:	4680      	mov	r8, r0
 80170d8:	f2c0 8082 	blt.w	80171e0 <quorem+0x114>
 80170dc:	3c01      	subs	r4, #1
 80170de:	f101 0714 	add.w	r7, r1, #20
 80170e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80170e6:	f100 0614 	add.w	r6, r0, #20
 80170ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80170ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80170f2:	eb06 030c 	add.w	r3, r6, ip
 80170f6:	3501      	adds	r5, #1
 80170f8:	eb07 090c 	add.w	r9, r7, ip
 80170fc:	9301      	str	r3, [sp, #4]
 80170fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8017102:	b395      	cbz	r5, 801716a <quorem+0x9e>
 8017104:	f04f 0a00 	mov.w	sl, #0
 8017108:	4638      	mov	r0, r7
 801710a:	46b6      	mov	lr, r6
 801710c:	46d3      	mov	fp, sl
 801710e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017112:	b293      	uxth	r3, r2
 8017114:	fb05 a303 	mla	r3, r5, r3, sl
 8017118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801711c:	b29b      	uxth	r3, r3
 801711e:	ebab 0303 	sub.w	r3, fp, r3
 8017122:	0c12      	lsrs	r2, r2, #16
 8017124:	f8de b000 	ldr.w	fp, [lr]
 8017128:	fb05 a202 	mla	r2, r5, r2, sl
 801712c:	fa13 f38b 	uxtah	r3, r3, fp
 8017130:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017134:	fa1f fb82 	uxth.w	fp, r2
 8017138:	f8de 2000 	ldr.w	r2, [lr]
 801713c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017144:	b29b      	uxth	r3, r3
 8017146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801714a:	4581      	cmp	r9, r0
 801714c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017150:	f84e 3b04 	str.w	r3, [lr], #4
 8017154:	d2db      	bcs.n	801710e <quorem+0x42>
 8017156:	f856 300c 	ldr.w	r3, [r6, ip]
 801715a:	b933      	cbnz	r3, 801716a <quorem+0x9e>
 801715c:	9b01      	ldr	r3, [sp, #4]
 801715e:	3b04      	subs	r3, #4
 8017160:	429e      	cmp	r6, r3
 8017162:	461a      	mov	r2, r3
 8017164:	d330      	bcc.n	80171c8 <quorem+0xfc>
 8017166:	f8c8 4010 	str.w	r4, [r8, #16]
 801716a:	4640      	mov	r0, r8
 801716c:	f001 fdb6 	bl	8018cdc <__mcmp>
 8017170:	2800      	cmp	r0, #0
 8017172:	db25      	blt.n	80171c0 <quorem+0xf4>
 8017174:	3501      	adds	r5, #1
 8017176:	4630      	mov	r0, r6
 8017178:	f04f 0c00 	mov.w	ip, #0
 801717c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017180:	f8d0 e000 	ldr.w	lr, [r0]
 8017184:	b293      	uxth	r3, r2
 8017186:	ebac 0303 	sub.w	r3, ip, r3
 801718a:	0c12      	lsrs	r2, r2, #16
 801718c:	fa13 f38e 	uxtah	r3, r3, lr
 8017190:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017198:	b29b      	uxth	r3, r3
 801719a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801719e:	45b9      	cmp	r9, r7
 80171a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80171a4:	f840 3b04 	str.w	r3, [r0], #4
 80171a8:	d2e8      	bcs.n	801717c <quorem+0xb0>
 80171aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80171ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80171b2:	b92a      	cbnz	r2, 80171c0 <quorem+0xf4>
 80171b4:	3b04      	subs	r3, #4
 80171b6:	429e      	cmp	r6, r3
 80171b8:	461a      	mov	r2, r3
 80171ba:	d30b      	bcc.n	80171d4 <quorem+0x108>
 80171bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80171c0:	4628      	mov	r0, r5
 80171c2:	b003      	add	sp, #12
 80171c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171c8:	6812      	ldr	r2, [r2, #0]
 80171ca:	3b04      	subs	r3, #4
 80171cc:	2a00      	cmp	r2, #0
 80171ce:	d1ca      	bne.n	8017166 <quorem+0x9a>
 80171d0:	3c01      	subs	r4, #1
 80171d2:	e7c5      	b.n	8017160 <quorem+0x94>
 80171d4:	6812      	ldr	r2, [r2, #0]
 80171d6:	3b04      	subs	r3, #4
 80171d8:	2a00      	cmp	r2, #0
 80171da:	d1ef      	bne.n	80171bc <quorem+0xf0>
 80171dc:	3c01      	subs	r4, #1
 80171de:	e7ea      	b.n	80171b6 <quorem+0xea>
 80171e0:	2000      	movs	r0, #0
 80171e2:	e7ee      	b.n	80171c2 <quorem+0xf6>
 80171e4:	0000      	movs	r0, r0
	...

080171e8 <_dtoa_r>:
 80171e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ec:	ec57 6b10 	vmov	r6, r7, d0
 80171f0:	b097      	sub	sp, #92	; 0x5c
 80171f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80171f4:	9106      	str	r1, [sp, #24]
 80171f6:	4604      	mov	r4, r0
 80171f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80171fa:	9312      	str	r3, [sp, #72]	; 0x48
 80171fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017200:	e9cd 6700 	strd	r6, r7, [sp]
 8017204:	b93d      	cbnz	r5, 8017216 <_dtoa_r+0x2e>
 8017206:	2010      	movs	r0, #16
 8017208:	f001 fafa 	bl	8018800 <malloc>
 801720c:	6260      	str	r0, [r4, #36]	; 0x24
 801720e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017212:	6005      	str	r5, [r0, #0]
 8017214:	60c5      	str	r5, [r0, #12]
 8017216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017218:	6819      	ldr	r1, [r3, #0]
 801721a:	b151      	cbz	r1, 8017232 <_dtoa_r+0x4a>
 801721c:	685a      	ldr	r2, [r3, #4]
 801721e:	604a      	str	r2, [r1, #4]
 8017220:	2301      	movs	r3, #1
 8017222:	4093      	lsls	r3, r2
 8017224:	608b      	str	r3, [r1, #8]
 8017226:	4620      	mov	r0, r4
 8017228:	f001 fb38 	bl	801889c <_Bfree>
 801722c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801722e:	2200      	movs	r2, #0
 8017230:	601a      	str	r2, [r3, #0]
 8017232:	1e3b      	subs	r3, r7, #0
 8017234:	bfbb      	ittet	lt
 8017236:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801723a:	9301      	strlt	r3, [sp, #4]
 801723c:	2300      	movge	r3, #0
 801723e:	2201      	movlt	r2, #1
 8017240:	bfac      	ite	ge
 8017242:	f8c8 3000 	strge.w	r3, [r8]
 8017246:	f8c8 2000 	strlt.w	r2, [r8]
 801724a:	4baf      	ldr	r3, [pc, #700]	; (8017508 <_dtoa_r+0x320>)
 801724c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017250:	ea33 0308 	bics.w	r3, r3, r8
 8017254:	d114      	bne.n	8017280 <_dtoa_r+0x98>
 8017256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017258:	f242 730f 	movw	r3, #9999	; 0x270f
 801725c:	6013      	str	r3, [r2, #0]
 801725e:	9b00      	ldr	r3, [sp, #0]
 8017260:	b923      	cbnz	r3, 801726c <_dtoa_r+0x84>
 8017262:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017266:	2800      	cmp	r0, #0
 8017268:	f000 8542 	beq.w	8017cf0 <_dtoa_r+0xb08>
 801726c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801726e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801751c <_dtoa_r+0x334>
 8017272:	2b00      	cmp	r3, #0
 8017274:	f000 8544 	beq.w	8017d00 <_dtoa_r+0xb18>
 8017278:	f10b 0303 	add.w	r3, fp, #3
 801727c:	f000 bd3e 	b.w	8017cfc <_dtoa_r+0xb14>
 8017280:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017284:	2200      	movs	r2, #0
 8017286:	2300      	movs	r3, #0
 8017288:	4630      	mov	r0, r6
 801728a:	4639      	mov	r1, r7
 801728c:	f7f1 fb54 	bl	8008938 <__aeabi_dcmpeq>
 8017290:	4681      	mov	r9, r0
 8017292:	b168      	cbz	r0, 80172b0 <_dtoa_r+0xc8>
 8017294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017296:	2301      	movs	r3, #1
 8017298:	6013      	str	r3, [r2, #0]
 801729a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801729c:	2b00      	cmp	r3, #0
 801729e:	f000 8524 	beq.w	8017cea <_dtoa_r+0xb02>
 80172a2:	4b9a      	ldr	r3, [pc, #616]	; (801750c <_dtoa_r+0x324>)
 80172a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80172a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80172aa:	6013      	str	r3, [r2, #0]
 80172ac:	f000 bd28 	b.w	8017d00 <_dtoa_r+0xb18>
 80172b0:	aa14      	add	r2, sp, #80	; 0x50
 80172b2:	a915      	add	r1, sp, #84	; 0x54
 80172b4:	ec47 6b10 	vmov	d0, r6, r7
 80172b8:	4620      	mov	r0, r4
 80172ba:	f001 fdfd 	bl	8018eb8 <__d2b>
 80172be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80172c2:	9004      	str	r0, [sp, #16]
 80172c4:	2d00      	cmp	r5, #0
 80172c6:	d07c      	beq.n	80173c2 <_dtoa_r+0x1da>
 80172c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80172cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80172d0:	46b2      	mov	sl, r6
 80172d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80172d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80172da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80172de:	2200      	movs	r2, #0
 80172e0:	4b8b      	ldr	r3, [pc, #556]	; (8017510 <_dtoa_r+0x328>)
 80172e2:	4650      	mov	r0, sl
 80172e4:	4659      	mov	r1, fp
 80172e6:	f7f0 ff07 	bl	80080f8 <__aeabi_dsub>
 80172ea:	a381      	add	r3, pc, #516	; (adr r3, 80174f0 <_dtoa_r+0x308>)
 80172ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f0:	f7f1 f8ba 	bl	8008468 <__aeabi_dmul>
 80172f4:	a380      	add	r3, pc, #512	; (adr r3, 80174f8 <_dtoa_r+0x310>)
 80172f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172fa:	f7f0 feff 	bl	80080fc <__adddf3>
 80172fe:	4606      	mov	r6, r0
 8017300:	4628      	mov	r0, r5
 8017302:	460f      	mov	r7, r1
 8017304:	f7f1 f846 	bl	8008394 <__aeabi_i2d>
 8017308:	a37d      	add	r3, pc, #500	; (adr r3, 8017500 <_dtoa_r+0x318>)
 801730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730e:	f7f1 f8ab 	bl	8008468 <__aeabi_dmul>
 8017312:	4602      	mov	r2, r0
 8017314:	460b      	mov	r3, r1
 8017316:	4630      	mov	r0, r6
 8017318:	4639      	mov	r1, r7
 801731a:	f7f0 feef 	bl	80080fc <__adddf3>
 801731e:	4606      	mov	r6, r0
 8017320:	460f      	mov	r7, r1
 8017322:	f7f1 fb51 	bl	80089c8 <__aeabi_d2iz>
 8017326:	2200      	movs	r2, #0
 8017328:	4682      	mov	sl, r0
 801732a:	2300      	movs	r3, #0
 801732c:	4630      	mov	r0, r6
 801732e:	4639      	mov	r1, r7
 8017330:	f7f1 fb0c 	bl	800894c <__aeabi_dcmplt>
 8017334:	b148      	cbz	r0, 801734a <_dtoa_r+0x162>
 8017336:	4650      	mov	r0, sl
 8017338:	f7f1 f82c 	bl	8008394 <__aeabi_i2d>
 801733c:	4632      	mov	r2, r6
 801733e:	463b      	mov	r3, r7
 8017340:	f7f1 fafa 	bl	8008938 <__aeabi_dcmpeq>
 8017344:	b908      	cbnz	r0, 801734a <_dtoa_r+0x162>
 8017346:	f10a 3aff 	add.w	sl, sl, #4294967295
 801734a:	f1ba 0f16 	cmp.w	sl, #22
 801734e:	d859      	bhi.n	8017404 <_dtoa_r+0x21c>
 8017350:	4970      	ldr	r1, [pc, #448]	; (8017514 <_dtoa_r+0x32c>)
 8017352:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017356:	e9dd 2300 	ldrd	r2, r3, [sp]
 801735a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801735e:	f7f1 fb13 	bl	8008988 <__aeabi_dcmpgt>
 8017362:	2800      	cmp	r0, #0
 8017364:	d050      	beq.n	8017408 <_dtoa_r+0x220>
 8017366:	f10a 3aff 	add.w	sl, sl, #4294967295
 801736a:	2300      	movs	r3, #0
 801736c:	930f      	str	r3, [sp, #60]	; 0x3c
 801736e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017370:	1b5d      	subs	r5, r3, r5
 8017372:	f1b5 0801 	subs.w	r8, r5, #1
 8017376:	bf49      	itett	mi
 8017378:	f1c5 0301 	rsbmi	r3, r5, #1
 801737c:	2300      	movpl	r3, #0
 801737e:	9305      	strmi	r3, [sp, #20]
 8017380:	f04f 0800 	movmi.w	r8, #0
 8017384:	bf58      	it	pl
 8017386:	9305      	strpl	r3, [sp, #20]
 8017388:	f1ba 0f00 	cmp.w	sl, #0
 801738c:	db3e      	blt.n	801740c <_dtoa_r+0x224>
 801738e:	2300      	movs	r3, #0
 8017390:	44d0      	add	r8, sl
 8017392:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017396:	9307      	str	r3, [sp, #28]
 8017398:	9b06      	ldr	r3, [sp, #24]
 801739a:	2b09      	cmp	r3, #9
 801739c:	f200 8090 	bhi.w	80174c0 <_dtoa_r+0x2d8>
 80173a0:	2b05      	cmp	r3, #5
 80173a2:	bfc4      	itt	gt
 80173a4:	3b04      	subgt	r3, #4
 80173a6:	9306      	strgt	r3, [sp, #24]
 80173a8:	9b06      	ldr	r3, [sp, #24]
 80173aa:	f1a3 0302 	sub.w	r3, r3, #2
 80173ae:	bfcc      	ite	gt
 80173b0:	2500      	movgt	r5, #0
 80173b2:	2501      	movle	r5, #1
 80173b4:	2b03      	cmp	r3, #3
 80173b6:	f200 808f 	bhi.w	80174d8 <_dtoa_r+0x2f0>
 80173ba:	e8df f003 	tbb	[pc, r3]
 80173be:	7f7d      	.short	0x7f7d
 80173c0:	7131      	.short	0x7131
 80173c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80173c6:	441d      	add	r5, r3
 80173c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80173cc:	2820      	cmp	r0, #32
 80173ce:	dd13      	ble.n	80173f8 <_dtoa_r+0x210>
 80173d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80173d4:	9b00      	ldr	r3, [sp, #0]
 80173d6:	fa08 f800 	lsl.w	r8, r8, r0
 80173da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80173de:	fa23 f000 	lsr.w	r0, r3, r0
 80173e2:	ea48 0000 	orr.w	r0, r8, r0
 80173e6:	f7f0 ffc5 	bl	8008374 <__aeabi_ui2d>
 80173ea:	2301      	movs	r3, #1
 80173ec:	4682      	mov	sl, r0
 80173ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80173f2:	3d01      	subs	r5, #1
 80173f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80173f6:	e772      	b.n	80172de <_dtoa_r+0xf6>
 80173f8:	9b00      	ldr	r3, [sp, #0]
 80173fa:	f1c0 0020 	rsb	r0, r0, #32
 80173fe:	fa03 f000 	lsl.w	r0, r3, r0
 8017402:	e7f0      	b.n	80173e6 <_dtoa_r+0x1fe>
 8017404:	2301      	movs	r3, #1
 8017406:	e7b1      	b.n	801736c <_dtoa_r+0x184>
 8017408:	900f      	str	r0, [sp, #60]	; 0x3c
 801740a:	e7b0      	b.n	801736e <_dtoa_r+0x186>
 801740c:	9b05      	ldr	r3, [sp, #20]
 801740e:	eba3 030a 	sub.w	r3, r3, sl
 8017412:	9305      	str	r3, [sp, #20]
 8017414:	f1ca 0300 	rsb	r3, sl, #0
 8017418:	9307      	str	r3, [sp, #28]
 801741a:	2300      	movs	r3, #0
 801741c:	930e      	str	r3, [sp, #56]	; 0x38
 801741e:	e7bb      	b.n	8017398 <_dtoa_r+0x1b0>
 8017420:	2301      	movs	r3, #1
 8017422:	930a      	str	r3, [sp, #40]	; 0x28
 8017424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017426:	2b00      	cmp	r3, #0
 8017428:	dd59      	ble.n	80174de <_dtoa_r+0x2f6>
 801742a:	9302      	str	r3, [sp, #8]
 801742c:	4699      	mov	r9, r3
 801742e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017430:	2200      	movs	r2, #0
 8017432:	6072      	str	r2, [r6, #4]
 8017434:	2204      	movs	r2, #4
 8017436:	f102 0014 	add.w	r0, r2, #20
 801743a:	4298      	cmp	r0, r3
 801743c:	6871      	ldr	r1, [r6, #4]
 801743e:	d953      	bls.n	80174e8 <_dtoa_r+0x300>
 8017440:	4620      	mov	r0, r4
 8017442:	f001 f9f7 	bl	8018834 <_Balloc>
 8017446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017448:	6030      	str	r0, [r6, #0]
 801744a:	f1b9 0f0e 	cmp.w	r9, #14
 801744e:	f8d3 b000 	ldr.w	fp, [r3]
 8017452:	f200 80e6 	bhi.w	8017622 <_dtoa_r+0x43a>
 8017456:	2d00      	cmp	r5, #0
 8017458:	f000 80e3 	beq.w	8017622 <_dtoa_r+0x43a>
 801745c:	ed9d 7b00 	vldr	d7, [sp]
 8017460:	f1ba 0f00 	cmp.w	sl, #0
 8017464:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017468:	dd74      	ble.n	8017554 <_dtoa_r+0x36c>
 801746a:	4a2a      	ldr	r2, [pc, #168]	; (8017514 <_dtoa_r+0x32c>)
 801746c:	f00a 030f 	and.w	r3, sl, #15
 8017470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017474:	ed93 7b00 	vldr	d7, [r3]
 8017478:	ea4f 162a 	mov.w	r6, sl, asr #4
 801747c:	06f0      	lsls	r0, r6, #27
 801747e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017482:	d565      	bpl.n	8017550 <_dtoa_r+0x368>
 8017484:	4b24      	ldr	r3, [pc, #144]	; (8017518 <_dtoa_r+0x330>)
 8017486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801748a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801748e:	f7f1 f915 	bl	80086bc <__aeabi_ddiv>
 8017492:	e9cd 0100 	strd	r0, r1, [sp]
 8017496:	f006 060f 	and.w	r6, r6, #15
 801749a:	2503      	movs	r5, #3
 801749c:	4f1e      	ldr	r7, [pc, #120]	; (8017518 <_dtoa_r+0x330>)
 801749e:	e04c      	b.n	801753a <_dtoa_r+0x352>
 80174a0:	2301      	movs	r3, #1
 80174a2:	930a      	str	r3, [sp, #40]	; 0x28
 80174a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174a6:	4453      	add	r3, sl
 80174a8:	f103 0901 	add.w	r9, r3, #1
 80174ac:	9302      	str	r3, [sp, #8]
 80174ae:	464b      	mov	r3, r9
 80174b0:	2b01      	cmp	r3, #1
 80174b2:	bfb8      	it	lt
 80174b4:	2301      	movlt	r3, #1
 80174b6:	e7ba      	b.n	801742e <_dtoa_r+0x246>
 80174b8:	2300      	movs	r3, #0
 80174ba:	e7b2      	b.n	8017422 <_dtoa_r+0x23a>
 80174bc:	2300      	movs	r3, #0
 80174be:	e7f0      	b.n	80174a2 <_dtoa_r+0x2ba>
 80174c0:	2501      	movs	r5, #1
 80174c2:	2300      	movs	r3, #0
 80174c4:	9306      	str	r3, [sp, #24]
 80174c6:	950a      	str	r5, [sp, #40]	; 0x28
 80174c8:	f04f 33ff 	mov.w	r3, #4294967295
 80174cc:	9302      	str	r3, [sp, #8]
 80174ce:	4699      	mov	r9, r3
 80174d0:	2200      	movs	r2, #0
 80174d2:	2312      	movs	r3, #18
 80174d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80174d6:	e7aa      	b.n	801742e <_dtoa_r+0x246>
 80174d8:	2301      	movs	r3, #1
 80174da:	930a      	str	r3, [sp, #40]	; 0x28
 80174dc:	e7f4      	b.n	80174c8 <_dtoa_r+0x2e0>
 80174de:	2301      	movs	r3, #1
 80174e0:	9302      	str	r3, [sp, #8]
 80174e2:	4699      	mov	r9, r3
 80174e4:	461a      	mov	r2, r3
 80174e6:	e7f5      	b.n	80174d4 <_dtoa_r+0x2ec>
 80174e8:	3101      	adds	r1, #1
 80174ea:	6071      	str	r1, [r6, #4]
 80174ec:	0052      	lsls	r2, r2, #1
 80174ee:	e7a2      	b.n	8017436 <_dtoa_r+0x24e>
 80174f0:	636f4361 	.word	0x636f4361
 80174f4:	3fd287a7 	.word	0x3fd287a7
 80174f8:	8b60c8b3 	.word	0x8b60c8b3
 80174fc:	3fc68a28 	.word	0x3fc68a28
 8017500:	509f79fb 	.word	0x509f79fb
 8017504:	3fd34413 	.word	0x3fd34413
 8017508:	7ff00000 	.word	0x7ff00000
 801750c:	0801a7fc 	.word	0x0801a7fc
 8017510:	3ff80000 	.word	0x3ff80000
 8017514:	0801a700 	.word	0x0801a700
 8017518:	0801a6d8 	.word	0x0801a6d8
 801751c:	0801a661 	.word	0x0801a661
 8017520:	07f1      	lsls	r1, r6, #31
 8017522:	d508      	bpl.n	8017536 <_dtoa_r+0x34e>
 8017524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017528:	e9d7 2300 	ldrd	r2, r3, [r7]
 801752c:	f7f0 ff9c 	bl	8008468 <__aeabi_dmul>
 8017530:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017534:	3501      	adds	r5, #1
 8017536:	1076      	asrs	r6, r6, #1
 8017538:	3708      	adds	r7, #8
 801753a:	2e00      	cmp	r6, #0
 801753c:	d1f0      	bne.n	8017520 <_dtoa_r+0x338>
 801753e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017546:	f7f1 f8b9 	bl	80086bc <__aeabi_ddiv>
 801754a:	e9cd 0100 	strd	r0, r1, [sp]
 801754e:	e01a      	b.n	8017586 <_dtoa_r+0x39e>
 8017550:	2502      	movs	r5, #2
 8017552:	e7a3      	b.n	801749c <_dtoa_r+0x2b4>
 8017554:	f000 80a0 	beq.w	8017698 <_dtoa_r+0x4b0>
 8017558:	f1ca 0600 	rsb	r6, sl, #0
 801755c:	4b9f      	ldr	r3, [pc, #636]	; (80177dc <_dtoa_r+0x5f4>)
 801755e:	4fa0      	ldr	r7, [pc, #640]	; (80177e0 <_dtoa_r+0x5f8>)
 8017560:	f006 020f 	and.w	r2, r6, #15
 8017564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801756c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017570:	f7f0 ff7a 	bl	8008468 <__aeabi_dmul>
 8017574:	e9cd 0100 	strd	r0, r1, [sp]
 8017578:	1136      	asrs	r6, r6, #4
 801757a:	2300      	movs	r3, #0
 801757c:	2502      	movs	r5, #2
 801757e:	2e00      	cmp	r6, #0
 8017580:	d17f      	bne.n	8017682 <_dtoa_r+0x49a>
 8017582:	2b00      	cmp	r3, #0
 8017584:	d1e1      	bne.n	801754a <_dtoa_r+0x362>
 8017586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017588:	2b00      	cmp	r3, #0
 801758a:	f000 8087 	beq.w	801769c <_dtoa_r+0x4b4>
 801758e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017592:	2200      	movs	r2, #0
 8017594:	4b93      	ldr	r3, [pc, #588]	; (80177e4 <_dtoa_r+0x5fc>)
 8017596:	4630      	mov	r0, r6
 8017598:	4639      	mov	r1, r7
 801759a:	f7f1 f9d7 	bl	800894c <__aeabi_dcmplt>
 801759e:	2800      	cmp	r0, #0
 80175a0:	d07c      	beq.n	801769c <_dtoa_r+0x4b4>
 80175a2:	f1b9 0f00 	cmp.w	r9, #0
 80175a6:	d079      	beq.n	801769c <_dtoa_r+0x4b4>
 80175a8:	9b02      	ldr	r3, [sp, #8]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	dd35      	ble.n	801761a <_dtoa_r+0x432>
 80175ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80175b2:	9308      	str	r3, [sp, #32]
 80175b4:	4639      	mov	r1, r7
 80175b6:	2200      	movs	r2, #0
 80175b8:	4b8b      	ldr	r3, [pc, #556]	; (80177e8 <_dtoa_r+0x600>)
 80175ba:	4630      	mov	r0, r6
 80175bc:	f7f0 ff54 	bl	8008468 <__aeabi_dmul>
 80175c0:	e9cd 0100 	strd	r0, r1, [sp]
 80175c4:	9f02      	ldr	r7, [sp, #8]
 80175c6:	3501      	adds	r5, #1
 80175c8:	4628      	mov	r0, r5
 80175ca:	f7f0 fee3 	bl	8008394 <__aeabi_i2d>
 80175ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175d2:	f7f0 ff49 	bl	8008468 <__aeabi_dmul>
 80175d6:	2200      	movs	r2, #0
 80175d8:	4b84      	ldr	r3, [pc, #528]	; (80177ec <_dtoa_r+0x604>)
 80175da:	f7f0 fd8f 	bl	80080fc <__adddf3>
 80175de:	4605      	mov	r5, r0
 80175e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80175e4:	2f00      	cmp	r7, #0
 80175e6:	d15d      	bne.n	80176a4 <_dtoa_r+0x4bc>
 80175e8:	2200      	movs	r2, #0
 80175ea:	4b81      	ldr	r3, [pc, #516]	; (80177f0 <_dtoa_r+0x608>)
 80175ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80175f0:	f7f0 fd82 	bl	80080f8 <__aeabi_dsub>
 80175f4:	462a      	mov	r2, r5
 80175f6:	4633      	mov	r3, r6
 80175f8:	e9cd 0100 	strd	r0, r1, [sp]
 80175fc:	f7f1 f9c4 	bl	8008988 <__aeabi_dcmpgt>
 8017600:	2800      	cmp	r0, #0
 8017602:	f040 8288 	bne.w	8017b16 <_dtoa_r+0x92e>
 8017606:	462a      	mov	r2, r5
 8017608:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801760c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017610:	f7f1 f99c 	bl	800894c <__aeabi_dcmplt>
 8017614:	2800      	cmp	r0, #0
 8017616:	f040 827c 	bne.w	8017b12 <_dtoa_r+0x92a>
 801761a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801761e:	e9cd 2300 	strd	r2, r3, [sp]
 8017622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017624:	2b00      	cmp	r3, #0
 8017626:	f2c0 8150 	blt.w	80178ca <_dtoa_r+0x6e2>
 801762a:	f1ba 0f0e 	cmp.w	sl, #14
 801762e:	f300 814c 	bgt.w	80178ca <_dtoa_r+0x6e2>
 8017632:	4b6a      	ldr	r3, [pc, #424]	; (80177dc <_dtoa_r+0x5f4>)
 8017634:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017638:	ed93 7b00 	vldr	d7, [r3]
 801763c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801763e:	2b00      	cmp	r3, #0
 8017640:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017644:	f280 80d8 	bge.w	80177f8 <_dtoa_r+0x610>
 8017648:	f1b9 0f00 	cmp.w	r9, #0
 801764c:	f300 80d4 	bgt.w	80177f8 <_dtoa_r+0x610>
 8017650:	f040 825e 	bne.w	8017b10 <_dtoa_r+0x928>
 8017654:	2200      	movs	r2, #0
 8017656:	4b66      	ldr	r3, [pc, #408]	; (80177f0 <_dtoa_r+0x608>)
 8017658:	ec51 0b17 	vmov	r0, r1, d7
 801765c:	f7f0 ff04 	bl	8008468 <__aeabi_dmul>
 8017660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017664:	f7f1 f986 	bl	8008974 <__aeabi_dcmpge>
 8017668:	464f      	mov	r7, r9
 801766a:	464e      	mov	r6, r9
 801766c:	2800      	cmp	r0, #0
 801766e:	f040 8234 	bne.w	8017ada <_dtoa_r+0x8f2>
 8017672:	2331      	movs	r3, #49	; 0x31
 8017674:	f10b 0501 	add.w	r5, fp, #1
 8017678:	f88b 3000 	strb.w	r3, [fp]
 801767c:	f10a 0a01 	add.w	sl, sl, #1
 8017680:	e22f      	b.n	8017ae2 <_dtoa_r+0x8fa>
 8017682:	07f2      	lsls	r2, r6, #31
 8017684:	d505      	bpl.n	8017692 <_dtoa_r+0x4aa>
 8017686:	e9d7 2300 	ldrd	r2, r3, [r7]
 801768a:	f7f0 feed 	bl	8008468 <__aeabi_dmul>
 801768e:	3501      	adds	r5, #1
 8017690:	2301      	movs	r3, #1
 8017692:	1076      	asrs	r6, r6, #1
 8017694:	3708      	adds	r7, #8
 8017696:	e772      	b.n	801757e <_dtoa_r+0x396>
 8017698:	2502      	movs	r5, #2
 801769a:	e774      	b.n	8017586 <_dtoa_r+0x39e>
 801769c:	f8cd a020 	str.w	sl, [sp, #32]
 80176a0:	464f      	mov	r7, r9
 80176a2:	e791      	b.n	80175c8 <_dtoa_r+0x3e0>
 80176a4:	4b4d      	ldr	r3, [pc, #308]	; (80177dc <_dtoa_r+0x5f4>)
 80176a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80176aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80176ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d047      	beq.n	8017744 <_dtoa_r+0x55c>
 80176b4:	4602      	mov	r2, r0
 80176b6:	460b      	mov	r3, r1
 80176b8:	2000      	movs	r0, #0
 80176ba:	494e      	ldr	r1, [pc, #312]	; (80177f4 <_dtoa_r+0x60c>)
 80176bc:	f7f0 fffe 	bl	80086bc <__aeabi_ddiv>
 80176c0:	462a      	mov	r2, r5
 80176c2:	4633      	mov	r3, r6
 80176c4:	f7f0 fd18 	bl	80080f8 <__aeabi_dsub>
 80176c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80176cc:	465d      	mov	r5, fp
 80176ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176d2:	f7f1 f979 	bl	80089c8 <__aeabi_d2iz>
 80176d6:	4606      	mov	r6, r0
 80176d8:	f7f0 fe5c 	bl	8008394 <__aeabi_i2d>
 80176dc:	4602      	mov	r2, r0
 80176de:	460b      	mov	r3, r1
 80176e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176e4:	f7f0 fd08 	bl	80080f8 <__aeabi_dsub>
 80176e8:	3630      	adds	r6, #48	; 0x30
 80176ea:	f805 6b01 	strb.w	r6, [r5], #1
 80176ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80176f2:	e9cd 0100 	strd	r0, r1, [sp]
 80176f6:	f7f1 f929 	bl	800894c <__aeabi_dcmplt>
 80176fa:	2800      	cmp	r0, #0
 80176fc:	d163      	bne.n	80177c6 <_dtoa_r+0x5de>
 80176fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017702:	2000      	movs	r0, #0
 8017704:	4937      	ldr	r1, [pc, #220]	; (80177e4 <_dtoa_r+0x5fc>)
 8017706:	f7f0 fcf7 	bl	80080f8 <__aeabi_dsub>
 801770a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801770e:	f7f1 f91d 	bl	800894c <__aeabi_dcmplt>
 8017712:	2800      	cmp	r0, #0
 8017714:	f040 80b7 	bne.w	8017886 <_dtoa_r+0x69e>
 8017718:	eba5 030b 	sub.w	r3, r5, fp
 801771c:	429f      	cmp	r7, r3
 801771e:	f77f af7c 	ble.w	801761a <_dtoa_r+0x432>
 8017722:	2200      	movs	r2, #0
 8017724:	4b30      	ldr	r3, [pc, #192]	; (80177e8 <_dtoa_r+0x600>)
 8017726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801772a:	f7f0 fe9d 	bl	8008468 <__aeabi_dmul>
 801772e:	2200      	movs	r2, #0
 8017730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017734:	4b2c      	ldr	r3, [pc, #176]	; (80177e8 <_dtoa_r+0x600>)
 8017736:	e9dd 0100 	ldrd	r0, r1, [sp]
 801773a:	f7f0 fe95 	bl	8008468 <__aeabi_dmul>
 801773e:	e9cd 0100 	strd	r0, r1, [sp]
 8017742:	e7c4      	b.n	80176ce <_dtoa_r+0x4e6>
 8017744:	462a      	mov	r2, r5
 8017746:	4633      	mov	r3, r6
 8017748:	f7f0 fe8e 	bl	8008468 <__aeabi_dmul>
 801774c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017750:	eb0b 0507 	add.w	r5, fp, r7
 8017754:	465e      	mov	r6, fp
 8017756:	e9dd 0100 	ldrd	r0, r1, [sp]
 801775a:	f7f1 f935 	bl	80089c8 <__aeabi_d2iz>
 801775e:	4607      	mov	r7, r0
 8017760:	f7f0 fe18 	bl	8008394 <__aeabi_i2d>
 8017764:	3730      	adds	r7, #48	; 0x30
 8017766:	4602      	mov	r2, r0
 8017768:	460b      	mov	r3, r1
 801776a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801776e:	f7f0 fcc3 	bl	80080f8 <__aeabi_dsub>
 8017772:	f806 7b01 	strb.w	r7, [r6], #1
 8017776:	42ae      	cmp	r6, r5
 8017778:	e9cd 0100 	strd	r0, r1, [sp]
 801777c:	f04f 0200 	mov.w	r2, #0
 8017780:	d126      	bne.n	80177d0 <_dtoa_r+0x5e8>
 8017782:	4b1c      	ldr	r3, [pc, #112]	; (80177f4 <_dtoa_r+0x60c>)
 8017784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017788:	f7f0 fcb8 	bl	80080fc <__adddf3>
 801778c:	4602      	mov	r2, r0
 801778e:	460b      	mov	r3, r1
 8017790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017794:	f7f1 f8f8 	bl	8008988 <__aeabi_dcmpgt>
 8017798:	2800      	cmp	r0, #0
 801779a:	d174      	bne.n	8017886 <_dtoa_r+0x69e>
 801779c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80177a0:	2000      	movs	r0, #0
 80177a2:	4914      	ldr	r1, [pc, #80]	; (80177f4 <_dtoa_r+0x60c>)
 80177a4:	f7f0 fca8 	bl	80080f8 <__aeabi_dsub>
 80177a8:	4602      	mov	r2, r0
 80177aa:	460b      	mov	r3, r1
 80177ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177b0:	f7f1 f8cc 	bl	800894c <__aeabi_dcmplt>
 80177b4:	2800      	cmp	r0, #0
 80177b6:	f43f af30 	beq.w	801761a <_dtoa_r+0x432>
 80177ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80177be:	2b30      	cmp	r3, #48	; 0x30
 80177c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80177c4:	d002      	beq.n	80177cc <_dtoa_r+0x5e4>
 80177c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80177ca:	e04a      	b.n	8017862 <_dtoa_r+0x67a>
 80177cc:	4615      	mov	r5, r2
 80177ce:	e7f4      	b.n	80177ba <_dtoa_r+0x5d2>
 80177d0:	4b05      	ldr	r3, [pc, #20]	; (80177e8 <_dtoa_r+0x600>)
 80177d2:	f7f0 fe49 	bl	8008468 <__aeabi_dmul>
 80177d6:	e9cd 0100 	strd	r0, r1, [sp]
 80177da:	e7bc      	b.n	8017756 <_dtoa_r+0x56e>
 80177dc:	0801a700 	.word	0x0801a700
 80177e0:	0801a6d8 	.word	0x0801a6d8
 80177e4:	3ff00000 	.word	0x3ff00000
 80177e8:	40240000 	.word	0x40240000
 80177ec:	401c0000 	.word	0x401c0000
 80177f0:	40140000 	.word	0x40140000
 80177f4:	3fe00000 	.word	0x3fe00000
 80177f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80177fc:	465d      	mov	r5, fp
 80177fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017802:	4630      	mov	r0, r6
 8017804:	4639      	mov	r1, r7
 8017806:	f7f0 ff59 	bl	80086bc <__aeabi_ddiv>
 801780a:	f7f1 f8dd 	bl	80089c8 <__aeabi_d2iz>
 801780e:	4680      	mov	r8, r0
 8017810:	f7f0 fdc0 	bl	8008394 <__aeabi_i2d>
 8017814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017818:	f7f0 fe26 	bl	8008468 <__aeabi_dmul>
 801781c:	4602      	mov	r2, r0
 801781e:	460b      	mov	r3, r1
 8017820:	4630      	mov	r0, r6
 8017822:	4639      	mov	r1, r7
 8017824:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017828:	f7f0 fc66 	bl	80080f8 <__aeabi_dsub>
 801782c:	f805 6b01 	strb.w	r6, [r5], #1
 8017830:	eba5 060b 	sub.w	r6, r5, fp
 8017834:	45b1      	cmp	r9, r6
 8017836:	4602      	mov	r2, r0
 8017838:	460b      	mov	r3, r1
 801783a:	d139      	bne.n	80178b0 <_dtoa_r+0x6c8>
 801783c:	f7f0 fc5e 	bl	80080fc <__adddf3>
 8017840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017844:	4606      	mov	r6, r0
 8017846:	460f      	mov	r7, r1
 8017848:	f7f1 f89e 	bl	8008988 <__aeabi_dcmpgt>
 801784c:	b9c8      	cbnz	r0, 8017882 <_dtoa_r+0x69a>
 801784e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017852:	4630      	mov	r0, r6
 8017854:	4639      	mov	r1, r7
 8017856:	f7f1 f86f 	bl	8008938 <__aeabi_dcmpeq>
 801785a:	b110      	cbz	r0, 8017862 <_dtoa_r+0x67a>
 801785c:	f018 0f01 	tst.w	r8, #1
 8017860:	d10f      	bne.n	8017882 <_dtoa_r+0x69a>
 8017862:	9904      	ldr	r1, [sp, #16]
 8017864:	4620      	mov	r0, r4
 8017866:	f001 f819 	bl	801889c <_Bfree>
 801786a:	2300      	movs	r3, #0
 801786c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801786e:	702b      	strb	r3, [r5, #0]
 8017870:	f10a 0301 	add.w	r3, sl, #1
 8017874:	6013      	str	r3, [r2, #0]
 8017876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017878:	2b00      	cmp	r3, #0
 801787a:	f000 8241 	beq.w	8017d00 <_dtoa_r+0xb18>
 801787e:	601d      	str	r5, [r3, #0]
 8017880:	e23e      	b.n	8017d00 <_dtoa_r+0xb18>
 8017882:	f8cd a020 	str.w	sl, [sp, #32]
 8017886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801788a:	2a39      	cmp	r2, #57	; 0x39
 801788c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017890:	d108      	bne.n	80178a4 <_dtoa_r+0x6bc>
 8017892:	459b      	cmp	fp, r3
 8017894:	d10a      	bne.n	80178ac <_dtoa_r+0x6c4>
 8017896:	9b08      	ldr	r3, [sp, #32]
 8017898:	3301      	adds	r3, #1
 801789a:	9308      	str	r3, [sp, #32]
 801789c:	2330      	movs	r3, #48	; 0x30
 801789e:	f88b 3000 	strb.w	r3, [fp]
 80178a2:	465b      	mov	r3, fp
 80178a4:	781a      	ldrb	r2, [r3, #0]
 80178a6:	3201      	adds	r2, #1
 80178a8:	701a      	strb	r2, [r3, #0]
 80178aa:	e78c      	b.n	80177c6 <_dtoa_r+0x5de>
 80178ac:	461d      	mov	r5, r3
 80178ae:	e7ea      	b.n	8017886 <_dtoa_r+0x69e>
 80178b0:	2200      	movs	r2, #0
 80178b2:	4b9b      	ldr	r3, [pc, #620]	; (8017b20 <_dtoa_r+0x938>)
 80178b4:	f7f0 fdd8 	bl	8008468 <__aeabi_dmul>
 80178b8:	2200      	movs	r2, #0
 80178ba:	2300      	movs	r3, #0
 80178bc:	4606      	mov	r6, r0
 80178be:	460f      	mov	r7, r1
 80178c0:	f7f1 f83a 	bl	8008938 <__aeabi_dcmpeq>
 80178c4:	2800      	cmp	r0, #0
 80178c6:	d09a      	beq.n	80177fe <_dtoa_r+0x616>
 80178c8:	e7cb      	b.n	8017862 <_dtoa_r+0x67a>
 80178ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178cc:	2a00      	cmp	r2, #0
 80178ce:	f000 808b 	beq.w	80179e8 <_dtoa_r+0x800>
 80178d2:	9a06      	ldr	r2, [sp, #24]
 80178d4:	2a01      	cmp	r2, #1
 80178d6:	dc6e      	bgt.n	80179b6 <_dtoa_r+0x7ce>
 80178d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80178da:	2a00      	cmp	r2, #0
 80178dc:	d067      	beq.n	80179ae <_dtoa_r+0x7c6>
 80178de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80178e2:	9f07      	ldr	r7, [sp, #28]
 80178e4:	9d05      	ldr	r5, [sp, #20]
 80178e6:	9a05      	ldr	r2, [sp, #20]
 80178e8:	2101      	movs	r1, #1
 80178ea:	441a      	add	r2, r3
 80178ec:	4620      	mov	r0, r4
 80178ee:	9205      	str	r2, [sp, #20]
 80178f0:	4498      	add	r8, r3
 80178f2:	f001 f8b1 	bl	8018a58 <__i2b>
 80178f6:	4606      	mov	r6, r0
 80178f8:	2d00      	cmp	r5, #0
 80178fa:	dd0c      	ble.n	8017916 <_dtoa_r+0x72e>
 80178fc:	f1b8 0f00 	cmp.w	r8, #0
 8017900:	dd09      	ble.n	8017916 <_dtoa_r+0x72e>
 8017902:	4545      	cmp	r5, r8
 8017904:	9a05      	ldr	r2, [sp, #20]
 8017906:	462b      	mov	r3, r5
 8017908:	bfa8      	it	ge
 801790a:	4643      	movge	r3, r8
 801790c:	1ad2      	subs	r2, r2, r3
 801790e:	9205      	str	r2, [sp, #20]
 8017910:	1aed      	subs	r5, r5, r3
 8017912:	eba8 0803 	sub.w	r8, r8, r3
 8017916:	9b07      	ldr	r3, [sp, #28]
 8017918:	b1eb      	cbz	r3, 8017956 <_dtoa_r+0x76e>
 801791a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801791c:	2b00      	cmp	r3, #0
 801791e:	d067      	beq.n	80179f0 <_dtoa_r+0x808>
 8017920:	b18f      	cbz	r7, 8017946 <_dtoa_r+0x75e>
 8017922:	4631      	mov	r1, r6
 8017924:	463a      	mov	r2, r7
 8017926:	4620      	mov	r0, r4
 8017928:	f001 f936 	bl	8018b98 <__pow5mult>
 801792c:	9a04      	ldr	r2, [sp, #16]
 801792e:	4601      	mov	r1, r0
 8017930:	4606      	mov	r6, r0
 8017932:	4620      	mov	r0, r4
 8017934:	f001 f899 	bl	8018a6a <__multiply>
 8017938:	9904      	ldr	r1, [sp, #16]
 801793a:	9008      	str	r0, [sp, #32]
 801793c:	4620      	mov	r0, r4
 801793e:	f000 ffad 	bl	801889c <_Bfree>
 8017942:	9b08      	ldr	r3, [sp, #32]
 8017944:	9304      	str	r3, [sp, #16]
 8017946:	9b07      	ldr	r3, [sp, #28]
 8017948:	1bda      	subs	r2, r3, r7
 801794a:	d004      	beq.n	8017956 <_dtoa_r+0x76e>
 801794c:	9904      	ldr	r1, [sp, #16]
 801794e:	4620      	mov	r0, r4
 8017950:	f001 f922 	bl	8018b98 <__pow5mult>
 8017954:	9004      	str	r0, [sp, #16]
 8017956:	2101      	movs	r1, #1
 8017958:	4620      	mov	r0, r4
 801795a:	f001 f87d 	bl	8018a58 <__i2b>
 801795e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017960:	4607      	mov	r7, r0
 8017962:	2b00      	cmp	r3, #0
 8017964:	f000 81d0 	beq.w	8017d08 <_dtoa_r+0xb20>
 8017968:	461a      	mov	r2, r3
 801796a:	4601      	mov	r1, r0
 801796c:	4620      	mov	r0, r4
 801796e:	f001 f913 	bl	8018b98 <__pow5mult>
 8017972:	9b06      	ldr	r3, [sp, #24]
 8017974:	2b01      	cmp	r3, #1
 8017976:	4607      	mov	r7, r0
 8017978:	dc40      	bgt.n	80179fc <_dtoa_r+0x814>
 801797a:	9b00      	ldr	r3, [sp, #0]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d139      	bne.n	80179f4 <_dtoa_r+0x80c>
 8017980:	9b01      	ldr	r3, [sp, #4]
 8017982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017986:	2b00      	cmp	r3, #0
 8017988:	d136      	bne.n	80179f8 <_dtoa_r+0x810>
 801798a:	9b01      	ldr	r3, [sp, #4]
 801798c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017990:	0d1b      	lsrs	r3, r3, #20
 8017992:	051b      	lsls	r3, r3, #20
 8017994:	b12b      	cbz	r3, 80179a2 <_dtoa_r+0x7ba>
 8017996:	9b05      	ldr	r3, [sp, #20]
 8017998:	3301      	adds	r3, #1
 801799a:	9305      	str	r3, [sp, #20]
 801799c:	f108 0801 	add.w	r8, r8, #1
 80179a0:	2301      	movs	r3, #1
 80179a2:	9307      	str	r3, [sp, #28]
 80179a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d12a      	bne.n	8017a00 <_dtoa_r+0x818>
 80179aa:	2001      	movs	r0, #1
 80179ac:	e030      	b.n	8017a10 <_dtoa_r+0x828>
 80179ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80179b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80179b4:	e795      	b.n	80178e2 <_dtoa_r+0x6fa>
 80179b6:	9b07      	ldr	r3, [sp, #28]
 80179b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80179bc:	42bb      	cmp	r3, r7
 80179be:	bfbf      	itttt	lt
 80179c0:	9b07      	ldrlt	r3, [sp, #28]
 80179c2:	9707      	strlt	r7, [sp, #28]
 80179c4:	1afa      	sublt	r2, r7, r3
 80179c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80179c8:	bfbb      	ittet	lt
 80179ca:	189b      	addlt	r3, r3, r2
 80179cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80179ce:	1bdf      	subge	r7, r3, r7
 80179d0:	2700      	movlt	r7, #0
 80179d2:	f1b9 0f00 	cmp.w	r9, #0
 80179d6:	bfb5      	itete	lt
 80179d8:	9b05      	ldrlt	r3, [sp, #20]
 80179da:	9d05      	ldrge	r5, [sp, #20]
 80179dc:	eba3 0509 	sublt.w	r5, r3, r9
 80179e0:	464b      	movge	r3, r9
 80179e2:	bfb8      	it	lt
 80179e4:	2300      	movlt	r3, #0
 80179e6:	e77e      	b.n	80178e6 <_dtoa_r+0x6fe>
 80179e8:	9f07      	ldr	r7, [sp, #28]
 80179ea:	9d05      	ldr	r5, [sp, #20]
 80179ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80179ee:	e783      	b.n	80178f8 <_dtoa_r+0x710>
 80179f0:	9a07      	ldr	r2, [sp, #28]
 80179f2:	e7ab      	b.n	801794c <_dtoa_r+0x764>
 80179f4:	2300      	movs	r3, #0
 80179f6:	e7d4      	b.n	80179a2 <_dtoa_r+0x7ba>
 80179f8:	9b00      	ldr	r3, [sp, #0]
 80179fa:	e7d2      	b.n	80179a2 <_dtoa_r+0x7ba>
 80179fc:	2300      	movs	r3, #0
 80179fe:	9307      	str	r3, [sp, #28]
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017a06:	6918      	ldr	r0, [r3, #16]
 8017a08:	f000 ffd8 	bl	80189bc <__hi0bits>
 8017a0c:	f1c0 0020 	rsb	r0, r0, #32
 8017a10:	4440      	add	r0, r8
 8017a12:	f010 001f 	ands.w	r0, r0, #31
 8017a16:	d047      	beq.n	8017aa8 <_dtoa_r+0x8c0>
 8017a18:	f1c0 0320 	rsb	r3, r0, #32
 8017a1c:	2b04      	cmp	r3, #4
 8017a1e:	dd3b      	ble.n	8017a98 <_dtoa_r+0x8b0>
 8017a20:	9b05      	ldr	r3, [sp, #20]
 8017a22:	f1c0 001c 	rsb	r0, r0, #28
 8017a26:	4403      	add	r3, r0
 8017a28:	9305      	str	r3, [sp, #20]
 8017a2a:	4405      	add	r5, r0
 8017a2c:	4480      	add	r8, r0
 8017a2e:	9b05      	ldr	r3, [sp, #20]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	dd05      	ble.n	8017a40 <_dtoa_r+0x858>
 8017a34:	461a      	mov	r2, r3
 8017a36:	9904      	ldr	r1, [sp, #16]
 8017a38:	4620      	mov	r0, r4
 8017a3a:	f001 f8fb 	bl	8018c34 <__lshift>
 8017a3e:	9004      	str	r0, [sp, #16]
 8017a40:	f1b8 0f00 	cmp.w	r8, #0
 8017a44:	dd05      	ble.n	8017a52 <_dtoa_r+0x86a>
 8017a46:	4639      	mov	r1, r7
 8017a48:	4642      	mov	r2, r8
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	f001 f8f2 	bl	8018c34 <__lshift>
 8017a50:	4607      	mov	r7, r0
 8017a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a54:	b353      	cbz	r3, 8017aac <_dtoa_r+0x8c4>
 8017a56:	4639      	mov	r1, r7
 8017a58:	9804      	ldr	r0, [sp, #16]
 8017a5a:	f001 f93f 	bl	8018cdc <__mcmp>
 8017a5e:	2800      	cmp	r0, #0
 8017a60:	da24      	bge.n	8017aac <_dtoa_r+0x8c4>
 8017a62:	2300      	movs	r3, #0
 8017a64:	220a      	movs	r2, #10
 8017a66:	9904      	ldr	r1, [sp, #16]
 8017a68:	4620      	mov	r0, r4
 8017a6a:	f000 ff2e 	bl	80188ca <__multadd>
 8017a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a70:	9004      	str	r0, [sp, #16]
 8017a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	f000 814d 	beq.w	8017d16 <_dtoa_r+0xb2e>
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	4631      	mov	r1, r6
 8017a80:	220a      	movs	r2, #10
 8017a82:	4620      	mov	r0, r4
 8017a84:	f000 ff21 	bl	80188ca <__multadd>
 8017a88:	9b02      	ldr	r3, [sp, #8]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	4606      	mov	r6, r0
 8017a8e:	dc4f      	bgt.n	8017b30 <_dtoa_r+0x948>
 8017a90:	9b06      	ldr	r3, [sp, #24]
 8017a92:	2b02      	cmp	r3, #2
 8017a94:	dd4c      	ble.n	8017b30 <_dtoa_r+0x948>
 8017a96:	e011      	b.n	8017abc <_dtoa_r+0x8d4>
 8017a98:	d0c9      	beq.n	8017a2e <_dtoa_r+0x846>
 8017a9a:	9a05      	ldr	r2, [sp, #20]
 8017a9c:	331c      	adds	r3, #28
 8017a9e:	441a      	add	r2, r3
 8017aa0:	9205      	str	r2, [sp, #20]
 8017aa2:	441d      	add	r5, r3
 8017aa4:	4498      	add	r8, r3
 8017aa6:	e7c2      	b.n	8017a2e <_dtoa_r+0x846>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	e7f6      	b.n	8017a9a <_dtoa_r+0x8b2>
 8017aac:	f1b9 0f00 	cmp.w	r9, #0
 8017ab0:	dc38      	bgt.n	8017b24 <_dtoa_r+0x93c>
 8017ab2:	9b06      	ldr	r3, [sp, #24]
 8017ab4:	2b02      	cmp	r3, #2
 8017ab6:	dd35      	ble.n	8017b24 <_dtoa_r+0x93c>
 8017ab8:	f8cd 9008 	str.w	r9, [sp, #8]
 8017abc:	9b02      	ldr	r3, [sp, #8]
 8017abe:	b963      	cbnz	r3, 8017ada <_dtoa_r+0x8f2>
 8017ac0:	4639      	mov	r1, r7
 8017ac2:	2205      	movs	r2, #5
 8017ac4:	4620      	mov	r0, r4
 8017ac6:	f000 ff00 	bl	80188ca <__multadd>
 8017aca:	4601      	mov	r1, r0
 8017acc:	4607      	mov	r7, r0
 8017ace:	9804      	ldr	r0, [sp, #16]
 8017ad0:	f001 f904 	bl	8018cdc <__mcmp>
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	f73f adcc 	bgt.w	8017672 <_dtoa_r+0x48a>
 8017ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017adc:	465d      	mov	r5, fp
 8017ade:	ea6f 0a03 	mvn.w	sl, r3
 8017ae2:	f04f 0900 	mov.w	r9, #0
 8017ae6:	4639      	mov	r1, r7
 8017ae8:	4620      	mov	r0, r4
 8017aea:	f000 fed7 	bl	801889c <_Bfree>
 8017aee:	2e00      	cmp	r6, #0
 8017af0:	f43f aeb7 	beq.w	8017862 <_dtoa_r+0x67a>
 8017af4:	f1b9 0f00 	cmp.w	r9, #0
 8017af8:	d005      	beq.n	8017b06 <_dtoa_r+0x91e>
 8017afa:	45b1      	cmp	r9, r6
 8017afc:	d003      	beq.n	8017b06 <_dtoa_r+0x91e>
 8017afe:	4649      	mov	r1, r9
 8017b00:	4620      	mov	r0, r4
 8017b02:	f000 fecb 	bl	801889c <_Bfree>
 8017b06:	4631      	mov	r1, r6
 8017b08:	4620      	mov	r0, r4
 8017b0a:	f000 fec7 	bl	801889c <_Bfree>
 8017b0e:	e6a8      	b.n	8017862 <_dtoa_r+0x67a>
 8017b10:	2700      	movs	r7, #0
 8017b12:	463e      	mov	r6, r7
 8017b14:	e7e1      	b.n	8017ada <_dtoa_r+0x8f2>
 8017b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017b1a:	463e      	mov	r6, r7
 8017b1c:	e5a9      	b.n	8017672 <_dtoa_r+0x48a>
 8017b1e:	bf00      	nop
 8017b20:	40240000 	.word	0x40240000
 8017b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b26:	f8cd 9008 	str.w	r9, [sp, #8]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	f000 80fa 	beq.w	8017d24 <_dtoa_r+0xb3c>
 8017b30:	2d00      	cmp	r5, #0
 8017b32:	dd05      	ble.n	8017b40 <_dtoa_r+0x958>
 8017b34:	4631      	mov	r1, r6
 8017b36:	462a      	mov	r2, r5
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f001 f87b 	bl	8018c34 <__lshift>
 8017b3e:	4606      	mov	r6, r0
 8017b40:	9b07      	ldr	r3, [sp, #28]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d04c      	beq.n	8017be0 <_dtoa_r+0x9f8>
 8017b46:	6871      	ldr	r1, [r6, #4]
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f000 fe73 	bl	8018834 <_Balloc>
 8017b4e:	6932      	ldr	r2, [r6, #16]
 8017b50:	3202      	adds	r2, #2
 8017b52:	4605      	mov	r5, r0
 8017b54:	0092      	lsls	r2, r2, #2
 8017b56:	f106 010c 	add.w	r1, r6, #12
 8017b5a:	300c      	adds	r0, #12
 8017b5c:	f7fd fb86 	bl	801526c <memcpy>
 8017b60:	2201      	movs	r2, #1
 8017b62:	4629      	mov	r1, r5
 8017b64:	4620      	mov	r0, r4
 8017b66:	f001 f865 	bl	8018c34 <__lshift>
 8017b6a:	9b00      	ldr	r3, [sp, #0]
 8017b6c:	f8cd b014 	str.w	fp, [sp, #20]
 8017b70:	f003 0301 	and.w	r3, r3, #1
 8017b74:	46b1      	mov	r9, r6
 8017b76:	9307      	str	r3, [sp, #28]
 8017b78:	4606      	mov	r6, r0
 8017b7a:	4639      	mov	r1, r7
 8017b7c:	9804      	ldr	r0, [sp, #16]
 8017b7e:	f7ff faa5 	bl	80170cc <quorem>
 8017b82:	4649      	mov	r1, r9
 8017b84:	4605      	mov	r5, r0
 8017b86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017b8a:	9804      	ldr	r0, [sp, #16]
 8017b8c:	f001 f8a6 	bl	8018cdc <__mcmp>
 8017b90:	4632      	mov	r2, r6
 8017b92:	9000      	str	r0, [sp, #0]
 8017b94:	4639      	mov	r1, r7
 8017b96:	4620      	mov	r0, r4
 8017b98:	f001 f8ba 	bl	8018d10 <__mdiff>
 8017b9c:	68c3      	ldr	r3, [r0, #12]
 8017b9e:	4602      	mov	r2, r0
 8017ba0:	bb03      	cbnz	r3, 8017be4 <_dtoa_r+0x9fc>
 8017ba2:	4601      	mov	r1, r0
 8017ba4:	9008      	str	r0, [sp, #32]
 8017ba6:	9804      	ldr	r0, [sp, #16]
 8017ba8:	f001 f898 	bl	8018cdc <__mcmp>
 8017bac:	9a08      	ldr	r2, [sp, #32]
 8017bae:	4603      	mov	r3, r0
 8017bb0:	4611      	mov	r1, r2
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	9308      	str	r3, [sp, #32]
 8017bb6:	f000 fe71 	bl	801889c <_Bfree>
 8017bba:	9b08      	ldr	r3, [sp, #32]
 8017bbc:	b9a3      	cbnz	r3, 8017be8 <_dtoa_r+0xa00>
 8017bbe:	9a06      	ldr	r2, [sp, #24]
 8017bc0:	b992      	cbnz	r2, 8017be8 <_dtoa_r+0xa00>
 8017bc2:	9a07      	ldr	r2, [sp, #28]
 8017bc4:	b982      	cbnz	r2, 8017be8 <_dtoa_r+0xa00>
 8017bc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017bca:	d029      	beq.n	8017c20 <_dtoa_r+0xa38>
 8017bcc:	9b00      	ldr	r3, [sp, #0]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	dd01      	ble.n	8017bd6 <_dtoa_r+0x9ee>
 8017bd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017bd6:	9b05      	ldr	r3, [sp, #20]
 8017bd8:	1c5d      	adds	r5, r3, #1
 8017bda:	f883 8000 	strb.w	r8, [r3]
 8017bde:	e782      	b.n	8017ae6 <_dtoa_r+0x8fe>
 8017be0:	4630      	mov	r0, r6
 8017be2:	e7c2      	b.n	8017b6a <_dtoa_r+0x982>
 8017be4:	2301      	movs	r3, #1
 8017be6:	e7e3      	b.n	8017bb0 <_dtoa_r+0x9c8>
 8017be8:	9a00      	ldr	r2, [sp, #0]
 8017bea:	2a00      	cmp	r2, #0
 8017bec:	db04      	blt.n	8017bf8 <_dtoa_r+0xa10>
 8017bee:	d125      	bne.n	8017c3c <_dtoa_r+0xa54>
 8017bf0:	9a06      	ldr	r2, [sp, #24]
 8017bf2:	bb1a      	cbnz	r2, 8017c3c <_dtoa_r+0xa54>
 8017bf4:	9a07      	ldr	r2, [sp, #28]
 8017bf6:	bb0a      	cbnz	r2, 8017c3c <_dtoa_r+0xa54>
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	ddec      	ble.n	8017bd6 <_dtoa_r+0x9ee>
 8017bfc:	2201      	movs	r2, #1
 8017bfe:	9904      	ldr	r1, [sp, #16]
 8017c00:	4620      	mov	r0, r4
 8017c02:	f001 f817 	bl	8018c34 <__lshift>
 8017c06:	4639      	mov	r1, r7
 8017c08:	9004      	str	r0, [sp, #16]
 8017c0a:	f001 f867 	bl	8018cdc <__mcmp>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	dc03      	bgt.n	8017c1a <_dtoa_r+0xa32>
 8017c12:	d1e0      	bne.n	8017bd6 <_dtoa_r+0x9ee>
 8017c14:	f018 0f01 	tst.w	r8, #1
 8017c18:	d0dd      	beq.n	8017bd6 <_dtoa_r+0x9ee>
 8017c1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017c1e:	d1d8      	bne.n	8017bd2 <_dtoa_r+0x9ea>
 8017c20:	9b05      	ldr	r3, [sp, #20]
 8017c22:	9a05      	ldr	r2, [sp, #20]
 8017c24:	1c5d      	adds	r5, r3, #1
 8017c26:	2339      	movs	r3, #57	; 0x39
 8017c28:	7013      	strb	r3, [r2, #0]
 8017c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017c2e:	2b39      	cmp	r3, #57	; 0x39
 8017c30:	f105 32ff 	add.w	r2, r5, #4294967295
 8017c34:	d04f      	beq.n	8017cd6 <_dtoa_r+0xaee>
 8017c36:	3301      	adds	r3, #1
 8017c38:	7013      	strb	r3, [r2, #0]
 8017c3a:	e754      	b.n	8017ae6 <_dtoa_r+0x8fe>
 8017c3c:	9a05      	ldr	r2, [sp, #20]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	f102 0501 	add.w	r5, r2, #1
 8017c44:	dd06      	ble.n	8017c54 <_dtoa_r+0xa6c>
 8017c46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017c4a:	d0e9      	beq.n	8017c20 <_dtoa_r+0xa38>
 8017c4c:	f108 0801 	add.w	r8, r8, #1
 8017c50:	9b05      	ldr	r3, [sp, #20]
 8017c52:	e7c2      	b.n	8017bda <_dtoa_r+0x9f2>
 8017c54:	9a02      	ldr	r2, [sp, #8]
 8017c56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017c5a:	eba5 030b 	sub.w	r3, r5, fp
 8017c5e:	4293      	cmp	r3, r2
 8017c60:	d021      	beq.n	8017ca6 <_dtoa_r+0xabe>
 8017c62:	2300      	movs	r3, #0
 8017c64:	220a      	movs	r2, #10
 8017c66:	9904      	ldr	r1, [sp, #16]
 8017c68:	4620      	mov	r0, r4
 8017c6a:	f000 fe2e 	bl	80188ca <__multadd>
 8017c6e:	45b1      	cmp	r9, r6
 8017c70:	9004      	str	r0, [sp, #16]
 8017c72:	f04f 0300 	mov.w	r3, #0
 8017c76:	f04f 020a 	mov.w	r2, #10
 8017c7a:	4649      	mov	r1, r9
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	d105      	bne.n	8017c8c <_dtoa_r+0xaa4>
 8017c80:	f000 fe23 	bl	80188ca <__multadd>
 8017c84:	4681      	mov	r9, r0
 8017c86:	4606      	mov	r6, r0
 8017c88:	9505      	str	r5, [sp, #20]
 8017c8a:	e776      	b.n	8017b7a <_dtoa_r+0x992>
 8017c8c:	f000 fe1d 	bl	80188ca <__multadd>
 8017c90:	4631      	mov	r1, r6
 8017c92:	4681      	mov	r9, r0
 8017c94:	2300      	movs	r3, #0
 8017c96:	220a      	movs	r2, #10
 8017c98:	4620      	mov	r0, r4
 8017c9a:	f000 fe16 	bl	80188ca <__multadd>
 8017c9e:	4606      	mov	r6, r0
 8017ca0:	e7f2      	b.n	8017c88 <_dtoa_r+0xaa0>
 8017ca2:	f04f 0900 	mov.w	r9, #0
 8017ca6:	2201      	movs	r2, #1
 8017ca8:	9904      	ldr	r1, [sp, #16]
 8017caa:	4620      	mov	r0, r4
 8017cac:	f000 ffc2 	bl	8018c34 <__lshift>
 8017cb0:	4639      	mov	r1, r7
 8017cb2:	9004      	str	r0, [sp, #16]
 8017cb4:	f001 f812 	bl	8018cdc <__mcmp>
 8017cb8:	2800      	cmp	r0, #0
 8017cba:	dcb6      	bgt.n	8017c2a <_dtoa_r+0xa42>
 8017cbc:	d102      	bne.n	8017cc4 <_dtoa_r+0xadc>
 8017cbe:	f018 0f01 	tst.w	r8, #1
 8017cc2:	d1b2      	bne.n	8017c2a <_dtoa_r+0xa42>
 8017cc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017cc8:	2b30      	cmp	r3, #48	; 0x30
 8017cca:	f105 32ff 	add.w	r2, r5, #4294967295
 8017cce:	f47f af0a 	bne.w	8017ae6 <_dtoa_r+0x8fe>
 8017cd2:	4615      	mov	r5, r2
 8017cd4:	e7f6      	b.n	8017cc4 <_dtoa_r+0xadc>
 8017cd6:	4593      	cmp	fp, r2
 8017cd8:	d105      	bne.n	8017ce6 <_dtoa_r+0xafe>
 8017cda:	2331      	movs	r3, #49	; 0x31
 8017cdc:	f10a 0a01 	add.w	sl, sl, #1
 8017ce0:	f88b 3000 	strb.w	r3, [fp]
 8017ce4:	e6ff      	b.n	8017ae6 <_dtoa_r+0x8fe>
 8017ce6:	4615      	mov	r5, r2
 8017ce8:	e79f      	b.n	8017c2a <_dtoa_r+0xa42>
 8017cea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017d50 <_dtoa_r+0xb68>
 8017cee:	e007      	b.n	8017d00 <_dtoa_r+0xb18>
 8017cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017cf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017d54 <_dtoa_r+0xb6c>
 8017cf6:	b11b      	cbz	r3, 8017d00 <_dtoa_r+0xb18>
 8017cf8:	f10b 0308 	add.w	r3, fp, #8
 8017cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017cfe:	6013      	str	r3, [r2, #0]
 8017d00:	4658      	mov	r0, fp
 8017d02:	b017      	add	sp, #92	; 0x5c
 8017d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d08:	9b06      	ldr	r3, [sp, #24]
 8017d0a:	2b01      	cmp	r3, #1
 8017d0c:	f77f ae35 	ble.w	801797a <_dtoa_r+0x792>
 8017d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d12:	9307      	str	r3, [sp, #28]
 8017d14:	e649      	b.n	80179aa <_dtoa_r+0x7c2>
 8017d16:	9b02      	ldr	r3, [sp, #8]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	dc03      	bgt.n	8017d24 <_dtoa_r+0xb3c>
 8017d1c:	9b06      	ldr	r3, [sp, #24]
 8017d1e:	2b02      	cmp	r3, #2
 8017d20:	f73f aecc 	bgt.w	8017abc <_dtoa_r+0x8d4>
 8017d24:	465d      	mov	r5, fp
 8017d26:	4639      	mov	r1, r7
 8017d28:	9804      	ldr	r0, [sp, #16]
 8017d2a:	f7ff f9cf 	bl	80170cc <quorem>
 8017d2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017d32:	f805 8b01 	strb.w	r8, [r5], #1
 8017d36:	9a02      	ldr	r2, [sp, #8]
 8017d38:	eba5 030b 	sub.w	r3, r5, fp
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	ddb0      	ble.n	8017ca2 <_dtoa_r+0xaba>
 8017d40:	2300      	movs	r3, #0
 8017d42:	220a      	movs	r2, #10
 8017d44:	9904      	ldr	r1, [sp, #16]
 8017d46:	4620      	mov	r0, r4
 8017d48:	f000 fdbf 	bl	80188ca <__multadd>
 8017d4c:	9004      	str	r0, [sp, #16]
 8017d4e:	e7ea      	b.n	8017d26 <_dtoa_r+0xb3e>
 8017d50:	0801a7fb 	.word	0x0801a7fb
 8017d54:	0801a658 	.word	0x0801a658

08017d58 <__sflush_r>:
 8017d58:	898a      	ldrh	r2, [r1, #12]
 8017d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d5e:	4605      	mov	r5, r0
 8017d60:	0710      	lsls	r0, r2, #28
 8017d62:	460c      	mov	r4, r1
 8017d64:	d458      	bmi.n	8017e18 <__sflush_r+0xc0>
 8017d66:	684b      	ldr	r3, [r1, #4]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	dc05      	bgt.n	8017d78 <__sflush_r+0x20>
 8017d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	dc02      	bgt.n	8017d78 <__sflush_r+0x20>
 8017d72:	2000      	movs	r0, #0
 8017d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d7a:	2e00      	cmp	r6, #0
 8017d7c:	d0f9      	beq.n	8017d72 <__sflush_r+0x1a>
 8017d7e:	2300      	movs	r3, #0
 8017d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d84:	682f      	ldr	r7, [r5, #0]
 8017d86:	6a21      	ldr	r1, [r4, #32]
 8017d88:	602b      	str	r3, [r5, #0]
 8017d8a:	d032      	beq.n	8017df2 <__sflush_r+0x9a>
 8017d8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d8e:	89a3      	ldrh	r3, [r4, #12]
 8017d90:	075a      	lsls	r2, r3, #29
 8017d92:	d505      	bpl.n	8017da0 <__sflush_r+0x48>
 8017d94:	6863      	ldr	r3, [r4, #4]
 8017d96:	1ac0      	subs	r0, r0, r3
 8017d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d9a:	b10b      	cbz	r3, 8017da0 <__sflush_r+0x48>
 8017d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d9e:	1ac0      	subs	r0, r0, r3
 8017da0:	2300      	movs	r3, #0
 8017da2:	4602      	mov	r2, r0
 8017da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017da6:	6a21      	ldr	r1, [r4, #32]
 8017da8:	4628      	mov	r0, r5
 8017daa:	47b0      	blx	r6
 8017dac:	1c43      	adds	r3, r0, #1
 8017dae:	89a3      	ldrh	r3, [r4, #12]
 8017db0:	d106      	bne.n	8017dc0 <__sflush_r+0x68>
 8017db2:	6829      	ldr	r1, [r5, #0]
 8017db4:	291d      	cmp	r1, #29
 8017db6:	d848      	bhi.n	8017e4a <__sflush_r+0xf2>
 8017db8:	4a29      	ldr	r2, [pc, #164]	; (8017e60 <__sflush_r+0x108>)
 8017dba:	40ca      	lsrs	r2, r1
 8017dbc:	07d6      	lsls	r6, r2, #31
 8017dbe:	d544      	bpl.n	8017e4a <__sflush_r+0xf2>
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	6062      	str	r2, [r4, #4]
 8017dc4:	04d9      	lsls	r1, r3, #19
 8017dc6:	6922      	ldr	r2, [r4, #16]
 8017dc8:	6022      	str	r2, [r4, #0]
 8017dca:	d504      	bpl.n	8017dd6 <__sflush_r+0x7e>
 8017dcc:	1c42      	adds	r2, r0, #1
 8017dce:	d101      	bne.n	8017dd4 <__sflush_r+0x7c>
 8017dd0:	682b      	ldr	r3, [r5, #0]
 8017dd2:	b903      	cbnz	r3, 8017dd6 <__sflush_r+0x7e>
 8017dd4:	6560      	str	r0, [r4, #84]	; 0x54
 8017dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dd8:	602f      	str	r7, [r5, #0]
 8017dda:	2900      	cmp	r1, #0
 8017ddc:	d0c9      	beq.n	8017d72 <__sflush_r+0x1a>
 8017dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017de2:	4299      	cmp	r1, r3
 8017de4:	d002      	beq.n	8017dec <__sflush_r+0x94>
 8017de6:	4628      	mov	r0, r5
 8017de8:	f001 f932 	bl	8019050 <_free_r>
 8017dec:	2000      	movs	r0, #0
 8017dee:	6360      	str	r0, [r4, #52]	; 0x34
 8017df0:	e7c0      	b.n	8017d74 <__sflush_r+0x1c>
 8017df2:	2301      	movs	r3, #1
 8017df4:	4628      	mov	r0, r5
 8017df6:	47b0      	blx	r6
 8017df8:	1c41      	adds	r1, r0, #1
 8017dfa:	d1c8      	bne.n	8017d8e <__sflush_r+0x36>
 8017dfc:	682b      	ldr	r3, [r5, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d0c5      	beq.n	8017d8e <__sflush_r+0x36>
 8017e02:	2b1d      	cmp	r3, #29
 8017e04:	d001      	beq.n	8017e0a <__sflush_r+0xb2>
 8017e06:	2b16      	cmp	r3, #22
 8017e08:	d101      	bne.n	8017e0e <__sflush_r+0xb6>
 8017e0a:	602f      	str	r7, [r5, #0]
 8017e0c:	e7b1      	b.n	8017d72 <__sflush_r+0x1a>
 8017e0e:	89a3      	ldrh	r3, [r4, #12]
 8017e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e14:	81a3      	strh	r3, [r4, #12]
 8017e16:	e7ad      	b.n	8017d74 <__sflush_r+0x1c>
 8017e18:	690f      	ldr	r7, [r1, #16]
 8017e1a:	2f00      	cmp	r7, #0
 8017e1c:	d0a9      	beq.n	8017d72 <__sflush_r+0x1a>
 8017e1e:	0793      	lsls	r3, r2, #30
 8017e20:	680e      	ldr	r6, [r1, #0]
 8017e22:	bf08      	it	eq
 8017e24:	694b      	ldreq	r3, [r1, #20]
 8017e26:	600f      	str	r7, [r1, #0]
 8017e28:	bf18      	it	ne
 8017e2a:	2300      	movne	r3, #0
 8017e2c:	eba6 0807 	sub.w	r8, r6, r7
 8017e30:	608b      	str	r3, [r1, #8]
 8017e32:	f1b8 0f00 	cmp.w	r8, #0
 8017e36:	dd9c      	ble.n	8017d72 <__sflush_r+0x1a>
 8017e38:	4643      	mov	r3, r8
 8017e3a:	463a      	mov	r2, r7
 8017e3c:	6a21      	ldr	r1, [r4, #32]
 8017e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e40:	4628      	mov	r0, r5
 8017e42:	47b0      	blx	r6
 8017e44:	2800      	cmp	r0, #0
 8017e46:	dc06      	bgt.n	8017e56 <__sflush_r+0xfe>
 8017e48:	89a3      	ldrh	r3, [r4, #12]
 8017e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e4e:	81a3      	strh	r3, [r4, #12]
 8017e50:	f04f 30ff 	mov.w	r0, #4294967295
 8017e54:	e78e      	b.n	8017d74 <__sflush_r+0x1c>
 8017e56:	4407      	add	r7, r0
 8017e58:	eba8 0800 	sub.w	r8, r8, r0
 8017e5c:	e7e9      	b.n	8017e32 <__sflush_r+0xda>
 8017e5e:	bf00      	nop
 8017e60:	20400001 	.word	0x20400001

08017e64 <_fflush_r>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	690b      	ldr	r3, [r1, #16]
 8017e68:	4605      	mov	r5, r0
 8017e6a:	460c      	mov	r4, r1
 8017e6c:	b1db      	cbz	r3, 8017ea6 <_fflush_r+0x42>
 8017e6e:	b118      	cbz	r0, 8017e78 <_fflush_r+0x14>
 8017e70:	6983      	ldr	r3, [r0, #24]
 8017e72:	b90b      	cbnz	r3, 8017e78 <_fflush_r+0x14>
 8017e74:	f000 f872 	bl	8017f5c <__sinit>
 8017e78:	4b0c      	ldr	r3, [pc, #48]	; (8017eac <_fflush_r+0x48>)
 8017e7a:	429c      	cmp	r4, r3
 8017e7c:	d109      	bne.n	8017e92 <_fflush_r+0x2e>
 8017e7e:	686c      	ldr	r4, [r5, #4]
 8017e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e84:	b17b      	cbz	r3, 8017ea6 <_fflush_r+0x42>
 8017e86:	4621      	mov	r1, r4
 8017e88:	4628      	mov	r0, r5
 8017e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e8e:	f7ff bf63 	b.w	8017d58 <__sflush_r>
 8017e92:	4b07      	ldr	r3, [pc, #28]	; (8017eb0 <_fflush_r+0x4c>)
 8017e94:	429c      	cmp	r4, r3
 8017e96:	d101      	bne.n	8017e9c <_fflush_r+0x38>
 8017e98:	68ac      	ldr	r4, [r5, #8]
 8017e9a:	e7f1      	b.n	8017e80 <_fflush_r+0x1c>
 8017e9c:	4b05      	ldr	r3, [pc, #20]	; (8017eb4 <_fflush_r+0x50>)
 8017e9e:	429c      	cmp	r4, r3
 8017ea0:	bf08      	it	eq
 8017ea2:	68ec      	ldreq	r4, [r5, #12]
 8017ea4:	e7ec      	b.n	8017e80 <_fflush_r+0x1c>
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	bd38      	pop	{r3, r4, r5, pc}
 8017eaa:	bf00      	nop
 8017eac:	0801a688 	.word	0x0801a688
 8017eb0:	0801a6a8 	.word	0x0801a6a8
 8017eb4:	0801a668 	.word	0x0801a668

08017eb8 <fflush>:
 8017eb8:	4601      	mov	r1, r0
 8017eba:	b920      	cbnz	r0, 8017ec6 <fflush+0xe>
 8017ebc:	4b04      	ldr	r3, [pc, #16]	; (8017ed0 <fflush+0x18>)
 8017ebe:	4905      	ldr	r1, [pc, #20]	; (8017ed4 <fflush+0x1c>)
 8017ec0:	6818      	ldr	r0, [r3, #0]
 8017ec2:	f000 b8d3 	b.w	801806c <_fwalk_reent>
 8017ec6:	4b04      	ldr	r3, [pc, #16]	; (8017ed8 <fflush+0x20>)
 8017ec8:	6818      	ldr	r0, [r3, #0]
 8017eca:	f7ff bfcb 	b.w	8017e64 <_fflush_r>
 8017ece:	bf00      	nop
 8017ed0:	0801a5cc 	.word	0x0801a5cc
 8017ed4:	08017e65 	.word	0x08017e65
 8017ed8:	20000028 	.word	0x20000028

08017edc <std>:
 8017edc:	2300      	movs	r3, #0
 8017ede:	b510      	push	{r4, lr}
 8017ee0:	4604      	mov	r4, r0
 8017ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8017ee6:	6083      	str	r3, [r0, #8]
 8017ee8:	8181      	strh	r1, [r0, #12]
 8017eea:	6643      	str	r3, [r0, #100]	; 0x64
 8017eec:	81c2      	strh	r2, [r0, #14]
 8017eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ef2:	6183      	str	r3, [r0, #24]
 8017ef4:	4619      	mov	r1, r3
 8017ef6:	2208      	movs	r2, #8
 8017ef8:	305c      	adds	r0, #92	; 0x5c
 8017efa:	f7fd f9c2 	bl	8015282 <memset>
 8017efe:	4b05      	ldr	r3, [pc, #20]	; (8017f14 <std+0x38>)
 8017f00:	6263      	str	r3, [r4, #36]	; 0x24
 8017f02:	4b05      	ldr	r3, [pc, #20]	; (8017f18 <std+0x3c>)
 8017f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f06:	4b05      	ldr	r3, [pc, #20]	; (8017f1c <std+0x40>)
 8017f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f0a:	4b05      	ldr	r3, [pc, #20]	; (8017f20 <std+0x44>)
 8017f0c:	6224      	str	r4, [r4, #32]
 8017f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8017f10:	bd10      	pop	{r4, pc}
 8017f12:	bf00      	nop
 8017f14:	08019e15 	.word	0x08019e15
 8017f18:	08019e37 	.word	0x08019e37
 8017f1c:	08019e6f 	.word	0x08019e6f
 8017f20:	08019e93 	.word	0x08019e93

08017f24 <_cleanup_r>:
 8017f24:	4901      	ldr	r1, [pc, #4]	; (8017f2c <_cleanup_r+0x8>)
 8017f26:	f000 b8a1 	b.w	801806c <_fwalk_reent>
 8017f2a:	bf00      	nop
 8017f2c:	08017e65 	.word	0x08017e65

08017f30 <__sfmoreglue>:
 8017f30:	b570      	push	{r4, r5, r6, lr}
 8017f32:	1e4a      	subs	r2, r1, #1
 8017f34:	2568      	movs	r5, #104	; 0x68
 8017f36:	4355      	muls	r5, r2
 8017f38:	460e      	mov	r6, r1
 8017f3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017f3e:	f001 f8d5 	bl	80190ec <_malloc_r>
 8017f42:	4604      	mov	r4, r0
 8017f44:	b140      	cbz	r0, 8017f58 <__sfmoreglue+0x28>
 8017f46:	2100      	movs	r1, #0
 8017f48:	e9c0 1600 	strd	r1, r6, [r0]
 8017f4c:	300c      	adds	r0, #12
 8017f4e:	60a0      	str	r0, [r4, #8]
 8017f50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017f54:	f7fd f995 	bl	8015282 <memset>
 8017f58:	4620      	mov	r0, r4
 8017f5a:	bd70      	pop	{r4, r5, r6, pc}

08017f5c <__sinit>:
 8017f5c:	6983      	ldr	r3, [r0, #24]
 8017f5e:	b510      	push	{r4, lr}
 8017f60:	4604      	mov	r4, r0
 8017f62:	bb33      	cbnz	r3, 8017fb2 <__sinit+0x56>
 8017f64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017f68:	6503      	str	r3, [r0, #80]	; 0x50
 8017f6a:	4b12      	ldr	r3, [pc, #72]	; (8017fb4 <__sinit+0x58>)
 8017f6c:	4a12      	ldr	r2, [pc, #72]	; (8017fb8 <__sinit+0x5c>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	6282      	str	r2, [r0, #40]	; 0x28
 8017f72:	4298      	cmp	r0, r3
 8017f74:	bf04      	itt	eq
 8017f76:	2301      	moveq	r3, #1
 8017f78:	6183      	streq	r3, [r0, #24]
 8017f7a:	f000 f81f 	bl	8017fbc <__sfp>
 8017f7e:	6060      	str	r0, [r4, #4]
 8017f80:	4620      	mov	r0, r4
 8017f82:	f000 f81b 	bl	8017fbc <__sfp>
 8017f86:	60a0      	str	r0, [r4, #8]
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f000 f817 	bl	8017fbc <__sfp>
 8017f8e:	2200      	movs	r2, #0
 8017f90:	60e0      	str	r0, [r4, #12]
 8017f92:	2104      	movs	r1, #4
 8017f94:	6860      	ldr	r0, [r4, #4]
 8017f96:	f7ff ffa1 	bl	8017edc <std>
 8017f9a:	2201      	movs	r2, #1
 8017f9c:	2109      	movs	r1, #9
 8017f9e:	68a0      	ldr	r0, [r4, #8]
 8017fa0:	f7ff ff9c 	bl	8017edc <std>
 8017fa4:	2202      	movs	r2, #2
 8017fa6:	2112      	movs	r1, #18
 8017fa8:	68e0      	ldr	r0, [r4, #12]
 8017faa:	f7ff ff97 	bl	8017edc <std>
 8017fae:	2301      	movs	r3, #1
 8017fb0:	61a3      	str	r3, [r4, #24]
 8017fb2:	bd10      	pop	{r4, pc}
 8017fb4:	0801a5cc 	.word	0x0801a5cc
 8017fb8:	08017f25 	.word	0x08017f25

08017fbc <__sfp>:
 8017fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fbe:	4b1b      	ldr	r3, [pc, #108]	; (801802c <__sfp+0x70>)
 8017fc0:	681e      	ldr	r6, [r3, #0]
 8017fc2:	69b3      	ldr	r3, [r6, #24]
 8017fc4:	4607      	mov	r7, r0
 8017fc6:	b913      	cbnz	r3, 8017fce <__sfp+0x12>
 8017fc8:	4630      	mov	r0, r6
 8017fca:	f7ff ffc7 	bl	8017f5c <__sinit>
 8017fce:	3648      	adds	r6, #72	; 0x48
 8017fd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017fd4:	3b01      	subs	r3, #1
 8017fd6:	d503      	bpl.n	8017fe0 <__sfp+0x24>
 8017fd8:	6833      	ldr	r3, [r6, #0]
 8017fda:	b133      	cbz	r3, 8017fea <__sfp+0x2e>
 8017fdc:	6836      	ldr	r6, [r6, #0]
 8017fde:	e7f7      	b.n	8017fd0 <__sfp+0x14>
 8017fe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017fe4:	b16d      	cbz	r5, 8018002 <__sfp+0x46>
 8017fe6:	3468      	adds	r4, #104	; 0x68
 8017fe8:	e7f4      	b.n	8017fd4 <__sfp+0x18>
 8017fea:	2104      	movs	r1, #4
 8017fec:	4638      	mov	r0, r7
 8017fee:	f7ff ff9f 	bl	8017f30 <__sfmoreglue>
 8017ff2:	6030      	str	r0, [r6, #0]
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	d1f1      	bne.n	8017fdc <__sfp+0x20>
 8017ff8:	230c      	movs	r3, #12
 8017ffa:	603b      	str	r3, [r7, #0]
 8017ffc:	4604      	mov	r4, r0
 8017ffe:	4620      	mov	r0, r4
 8018000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018002:	4b0b      	ldr	r3, [pc, #44]	; (8018030 <__sfp+0x74>)
 8018004:	6665      	str	r5, [r4, #100]	; 0x64
 8018006:	e9c4 5500 	strd	r5, r5, [r4]
 801800a:	60a5      	str	r5, [r4, #8]
 801800c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018010:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018014:	2208      	movs	r2, #8
 8018016:	4629      	mov	r1, r5
 8018018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801801c:	f7fd f931 	bl	8015282 <memset>
 8018020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018028:	e7e9      	b.n	8017ffe <__sfp+0x42>
 801802a:	bf00      	nop
 801802c:	0801a5cc 	.word	0x0801a5cc
 8018030:	ffff0001 	.word	0xffff0001

08018034 <_fwalk>:
 8018034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018038:	4688      	mov	r8, r1
 801803a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801803e:	2600      	movs	r6, #0
 8018040:	b914      	cbnz	r4, 8018048 <_fwalk+0x14>
 8018042:	4630      	mov	r0, r6
 8018044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018048:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801804c:	3f01      	subs	r7, #1
 801804e:	d501      	bpl.n	8018054 <_fwalk+0x20>
 8018050:	6824      	ldr	r4, [r4, #0]
 8018052:	e7f5      	b.n	8018040 <_fwalk+0xc>
 8018054:	89ab      	ldrh	r3, [r5, #12]
 8018056:	2b01      	cmp	r3, #1
 8018058:	d906      	bls.n	8018068 <_fwalk+0x34>
 801805a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801805e:	3301      	adds	r3, #1
 8018060:	d002      	beq.n	8018068 <_fwalk+0x34>
 8018062:	4628      	mov	r0, r5
 8018064:	47c0      	blx	r8
 8018066:	4306      	orrs	r6, r0
 8018068:	3568      	adds	r5, #104	; 0x68
 801806a:	e7ef      	b.n	801804c <_fwalk+0x18>

0801806c <_fwalk_reent>:
 801806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018070:	4680      	mov	r8, r0
 8018072:	4689      	mov	r9, r1
 8018074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018078:	2600      	movs	r6, #0
 801807a:	b914      	cbnz	r4, 8018082 <_fwalk_reent+0x16>
 801807c:	4630      	mov	r0, r6
 801807e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018082:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018086:	3f01      	subs	r7, #1
 8018088:	d501      	bpl.n	801808e <_fwalk_reent+0x22>
 801808a:	6824      	ldr	r4, [r4, #0]
 801808c:	e7f5      	b.n	801807a <_fwalk_reent+0xe>
 801808e:	89ab      	ldrh	r3, [r5, #12]
 8018090:	2b01      	cmp	r3, #1
 8018092:	d907      	bls.n	80180a4 <_fwalk_reent+0x38>
 8018094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018098:	3301      	adds	r3, #1
 801809a:	d003      	beq.n	80180a4 <_fwalk_reent+0x38>
 801809c:	4629      	mov	r1, r5
 801809e:	4640      	mov	r0, r8
 80180a0:	47c8      	blx	r9
 80180a2:	4306      	orrs	r6, r0
 80180a4:	3568      	adds	r5, #104	; 0x68
 80180a6:	e7ee      	b.n	8018086 <_fwalk_reent+0x1a>

080180a8 <rshift>:
 80180a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180aa:	6906      	ldr	r6, [r0, #16]
 80180ac:	114b      	asrs	r3, r1, #5
 80180ae:	429e      	cmp	r6, r3
 80180b0:	f100 0414 	add.w	r4, r0, #20
 80180b4:	dd30      	ble.n	8018118 <rshift+0x70>
 80180b6:	f011 011f 	ands.w	r1, r1, #31
 80180ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80180be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80180c2:	d108      	bne.n	80180d6 <rshift+0x2e>
 80180c4:	4621      	mov	r1, r4
 80180c6:	42b2      	cmp	r2, r6
 80180c8:	460b      	mov	r3, r1
 80180ca:	d211      	bcs.n	80180f0 <rshift+0x48>
 80180cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80180d0:	f841 3b04 	str.w	r3, [r1], #4
 80180d4:	e7f7      	b.n	80180c6 <rshift+0x1e>
 80180d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80180da:	f1c1 0c20 	rsb	ip, r1, #32
 80180de:	40cd      	lsrs	r5, r1
 80180e0:	3204      	adds	r2, #4
 80180e2:	4623      	mov	r3, r4
 80180e4:	42b2      	cmp	r2, r6
 80180e6:	4617      	mov	r7, r2
 80180e8:	d30c      	bcc.n	8018104 <rshift+0x5c>
 80180ea:	601d      	str	r5, [r3, #0]
 80180ec:	b105      	cbz	r5, 80180f0 <rshift+0x48>
 80180ee:	3304      	adds	r3, #4
 80180f0:	1b1a      	subs	r2, r3, r4
 80180f2:	42a3      	cmp	r3, r4
 80180f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80180f8:	bf08      	it	eq
 80180fa:	2300      	moveq	r3, #0
 80180fc:	6102      	str	r2, [r0, #16]
 80180fe:	bf08      	it	eq
 8018100:	6143      	streq	r3, [r0, #20]
 8018102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018104:	683f      	ldr	r7, [r7, #0]
 8018106:	fa07 f70c 	lsl.w	r7, r7, ip
 801810a:	433d      	orrs	r5, r7
 801810c:	f843 5b04 	str.w	r5, [r3], #4
 8018110:	f852 5b04 	ldr.w	r5, [r2], #4
 8018114:	40cd      	lsrs	r5, r1
 8018116:	e7e5      	b.n	80180e4 <rshift+0x3c>
 8018118:	4623      	mov	r3, r4
 801811a:	e7e9      	b.n	80180f0 <rshift+0x48>

0801811c <__hexdig_fun>:
 801811c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018120:	2b09      	cmp	r3, #9
 8018122:	d802      	bhi.n	801812a <__hexdig_fun+0xe>
 8018124:	3820      	subs	r0, #32
 8018126:	b2c0      	uxtb	r0, r0
 8018128:	4770      	bx	lr
 801812a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801812e:	2b05      	cmp	r3, #5
 8018130:	d801      	bhi.n	8018136 <__hexdig_fun+0x1a>
 8018132:	3847      	subs	r0, #71	; 0x47
 8018134:	e7f7      	b.n	8018126 <__hexdig_fun+0xa>
 8018136:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801813a:	2b05      	cmp	r3, #5
 801813c:	d801      	bhi.n	8018142 <__hexdig_fun+0x26>
 801813e:	3827      	subs	r0, #39	; 0x27
 8018140:	e7f1      	b.n	8018126 <__hexdig_fun+0xa>
 8018142:	2000      	movs	r0, #0
 8018144:	4770      	bx	lr

08018146 <__gethex>:
 8018146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801814a:	b08b      	sub	sp, #44	; 0x2c
 801814c:	468a      	mov	sl, r1
 801814e:	9002      	str	r0, [sp, #8]
 8018150:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018152:	9306      	str	r3, [sp, #24]
 8018154:	4690      	mov	r8, r2
 8018156:	f000 fadf 	bl	8018718 <__localeconv_l>
 801815a:	6803      	ldr	r3, [r0, #0]
 801815c:	9303      	str	r3, [sp, #12]
 801815e:	4618      	mov	r0, r3
 8018160:	f7ef ff6e 	bl	8008040 <strlen>
 8018164:	9b03      	ldr	r3, [sp, #12]
 8018166:	9001      	str	r0, [sp, #4]
 8018168:	4403      	add	r3, r0
 801816a:	f04f 0b00 	mov.w	fp, #0
 801816e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018172:	9307      	str	r3, [sp, #28]
 8018174:	f8da 3000 	ldr.w	r3, [sl]
 8018178:	3302      	adds	r3, #2
 801817a:	461f      	mov	r7, r3
 801817c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018180:	2830      	cmp	r0, #48	; 0x30
 8018182:	d06c      	beq.n	801825e <__gethex+0x118>
 8018184:	f7ff ffca 	bl	801811c <__hexdig_fun>
 8018188:	4604      	mov	r4, r0
 801818a:	2800      	cmp	r0, #0
 801818c:	d16a      	bne.n	8018264 <__gethex+0x11e>
 801818e:	9a01      	ldr	r2, [sp, #4]
 8018190:	9903      	ldr	r1, [sp, #12]
 8018192:	4638      	mov	r0, r7
 8018194:	f001 fe81 	bl	8019e9a <strncmp>
 8018198:	2800      	cmp	r0, #0
 801819a:	d166      	bne.n	801826a <__gethex+0x124>
 801819c:	9b01      	ldr	r3, [sp, #4]
 801819e:	5cf8      	ldrb	r0, [r7, r3]
 80181a0:	18fe      	adds	r6, r7, r3
 80181a2:	f7ff ffbb 	bl	801811c <__hexdig_fun>
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d062      	beq.n	8018270 <__gethex+0x12a>
 80181aa:	4633      	mov	r3, r6
 80181ac:	7818      	ldrb	r0, [r3, #0]
 80181ae:	2830      	cmp	r0, #48	; 0x30
 80181b0:	461f      	mov	r7, r3
 80181b2:	f103 0301 	add.w	r3, r3, #1
 80181b6:	d0f9      	beq.n	80181ac <__gethex+0x66>
 80181b8:	f7ff ffb0 	bl	801811c <__hexdig_fun>
 80181bc:	fab0 f580 	clz	r5, r0
 80181c0:	096d      	lsrs	r5, r5, #5
 80181c2:	4634      	mov	r4, r6
 80181c4:	f04f 0b01 	mov.w	fp, #1
 80181c8:	463a      	mov	r2, r7
 80181ca:	4616      	mov	r6, r2
 80181cc:	3201      	adds	r2, #1
 80181ce:	7830      	ldrb	r0, [r6, #0]
 80181d0:	f7ff ffa4 	bl	801811c <__hexdig_fun>
 80181d4:	2800      	cmp	r0, #0
 80181d6:	d1f8      	bne.n	80181ca <__gethex+0x84>
 80181d8:	9a01      	ldr	r2, [sp, #4]
 80181da:	9903      	ldr	r1, [sp, #12]
 80181dc:	4630      	mov	r0, r6
 80181de:	f001 fe5c 	bl	8019e9a <strncmp>
 80181e2:	b950      	cbnz	r0, 80181fa <__gethex+0xb4>
 80181e4:	b954      	cbnz	r4, 80181fc <__gethex+0xb6>
 80181e6:	9b01      	ldr	r3, [sp, #4]
 80181e8:	18f4      	adds	r4, r6, r3
 80181ea:	4622      	mov	r2, r4
 80181ec:	4616      	mov	r6, r2
 80181ee:	3201      	adds	r2, #1
 80181f0:	7830      	ldrb	r0, [r6, #0]
 80181f2:	f7ff ff93 	bl	801811c <__hexdig_fun>
 80181f6:	2800      	cmp	r0, #0
 80181f8:	d1f8      	bne.n	80181ec <__gethex+0xa6>
 80181fa:	b10c      	cbz	r4, 8018200 <__gethex+0xba>
 80181fc:	1ba4      	subs	r4, r4, r6
 80181fe:	00a4      	lsls	r4, r4, #2
 8018200:	7833      	ldrb	r3, [r6, #0]
 8018202:	2b50      	cmp	r3, #80	; 0x50
 8018204:	d001      	beq.n	801820a <__gethex+0xc4>
 8018206:	2b70      	cmp	r3, #112	; 0x70
 8018208:	d140      	bne.n	801828c <__gethex+0x146>
 801820a:	7873      	ldrb	r3, [r6, #1]
 801820c:	2b2b      	cmp	r3, #43	; 0x2b
 801820e:	d031      	beq.n	8018274 <__gethex+0x12e>
 8018210:	2b2d      	cmp	r3, #45	; 0x2d
 8018212:	d033      	beq.n	801827c <__gethex+0x136>
 8018214:	1c71      	adds	r1, r6, #1
 8018216:	f04f 0900 	mov.w	r9, #0
 801821a:	7808      	ldrb	r0, [r1, #0]
 801821c:	f7ff ff7e 	bl	801811c <__hexdig_fun>
 8018220:	1e43      	subs	r3, r0, #1
 8018222:	b2db      	uxtb	r3, r3
 8018224:	2b18      	cmp	r3, #24
 8018226:	d831      	bhi.n	801828c <__gethex+0x146>
 8018228:	f1a0 0210 	sub.w	r2, r0, #16
 801822c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018230:	f7ff ff74 	bl	801811c <__hexdig_fun>
 8018234:	1e43      	subs	r3, r0, #1
 8018236:	b2db      	uxtb	r3, r3
 8018238:	2b18      	cmp	r3, #24
 801823a:	d922      	bls.n	8018282 <__gethex+0x13c>
 801823c:	f1b9 0f00 	cmp.w	r9, #0
 8018240:	d000      	beq.n	8018244 <__gethex+0xfe>
 8018242:	4252      	negs	r2, r2
 8018244:	4414      	add	r4, r2
 8018246:	f8ca 1000 	str.w	r1, [sl]
 801824a:	b30d      	cbz	r5, 8018290 <__gethex+0x14a>
 801824c:	f1bb 0f00 	cmp.w	fp, #0
 8018250:	bf0c      	ite	eq
 8018252:	2706      	moveq	r7, #6
 8018254:	2700      	movne	r7, #0
 8018256:	4638      	mov	r0, r7
 8018258:	b00b      	add	sp, #44	; 0x2c
 801825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801825e:	f10b 0b01 	add.w	fp, fp, #1
 8018262:	e78a      	b.n	801817a <__gethex+0x34>
 8018264:	2500      	movs	r5, #0
 8018266:	462c      	mov	r4, r5
 8018268:	e7ae      	b.n	80181c8 <__gethex+0x82>
 801826a:	463e      	mov	r6, r7
 801826c:	2501      	movs	r5, #1
 801826e:	e7c7      	b.n	8018200 <__gethex+0xba>
 8018270:	4604      	mov	r4, r0
 8018272:	e7fb      	b.n	801826c <__gethex+0x126>
 8018274:	f04f 0900 	mov.w	r9, #0
 8018278:	1cb1      	adds	r1, r6, #2
 801827a:	e7ce      	b.n	801821a <__gethex+0xd4>
 801827c:	f04f 0901 	mov.w	r9, #1
 8018280:	e7fa      	b.n	8018278 <__gethex+0x132>
 8018282:	230a      	movs	r3, #10
 8018284:	fb03 0202 	mla	r2, r3, r2, r0
 8018288:	3a10      	subs	r2, #16
 801828a:	e7cf      	b.n	801822c <__gethex+0xe6>
 801828c:	4631      	mov	r1, r6
 801828e:	e7da      	b.n	8018246 <__gethex+0x100>
 8018290:	1bf3      	subs	r3, r6, r7
 8018292:	3b01      	subs	r3, #1
 8018294:	4629      	mov	r1, r5
 8018296:	2b07      	cmp	r3, #7
 8018298:	dc49      	bgt.n	801832e <__gethex+0x1e8>
 801829a:	9802      	ldr	r0, [sp, #8]
 801829c:	f000 faca 	bl	8018834 <_Balloc>
 80182a0:	9b01      	ldr	r3, [sp, #4]
 80182a2:	f100 0914 	add.w	r9, r0, #20
 80182a6:	f04f 0b00 	mov.w	fp, #0
 80182aa:	f1c3 0301 	rsb	r3, r3, #1
 80182ae:	4605      	mov	r5, r0
 80182b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80182b4:	46da      	mov	sl, fp
 80182b6:	9308      	str	r3, [sp, #32]
 80182b8:	42b7      	cmp	r7, r6
 80182ba:	d33b      	bcc.n	8018334 <__gethex+0x1ee>
 80182bc:	9804      	ldr	r0, [sp, #16]
 80182be:	f840 ab04 	str.w	sl, [r0], #4
 80182c2:	eba0 0009 	sub.w	r0, r0, r9
 80182c6:	1080      	asrs	r0, r0, #2
 80182c8:	6128      	str	r0, [r5, #16]
 80182ca:	0147      	lsls	r7, r0, #5
 80182cc:	4650      	mov	r0, sl
 80182ce:	f000 fb75 	bl	80189bc <__hi0bits>
 80182d2:	f8d8 6000 	ldr.w	r6, [r8]
 80182d6:	1a3f      	subs	r7, r7, r0
 80182d8:	42b7      	cmp	r7, r6
 80182da:	dd64      	ble.n	80183a6 <__gethex+0x260>
 80182dc:	1bbf      	subs	r7, r7, r6
 80182de:	4639      	mov	r1, r7
 80182e0:	4628      	mov	r0, r5
 80182e2:	f000 fe85 	bl	8018ff0 <__any_on>
 80182e6:	4682      	mov	sl, r0
 80182e8:	b178      	cbz	r0, 801830a <__gethex+0x1c4>
 80182ea:	1e7b      	subs	r3, r7, #1
 80182ec:	1159      	asrs	r1, r3, #5
 80182ee:	f003 021f 	and.w	r2, r3, #31
 80182f2:	f04f 0a01 	mov.w	sl, #1
 80182f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80182fa:	fa0a f202 	lsl.w	r2, sl, r2
 80182fe:	420a      	tst	r2, r1
 8018300:	d003      	beq.n	801830a <__gethex+0x1c4>
 8018302:	4553      	cmp	r3, sl
 8018304:	dc46      	bgt.n	8018394 <__gethex+0x24e>
 8018306:	f04f 0a02 	mov.w	sl, #2
 801830a:	4639      	mov	r1, r7
 801830c:	4628      	mov	r0, r5
 801830e:	f7ff fecb 	bl	80180a8 <rshift>
 8018312:	443c      	add	r4, r7
 8018314:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018318:	42a3      	cmp	r3, r4
 801831a:	da52      	bge.n	80183c2 <__gethex+0x27c>
 801831c:	4629      	mov	r1, r5
 801831e:	9802      	ldr	r0, [sp, #8]
 8018320:	f000 fabc 	bl	801889c <_Bfree>
 8018324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018326:	2300      	movs	r3, #0
 8018328:	6013      	str	r3, [r2, #0]
 801832a:	27a3      	movs	r7, #163	; 0xa3
 801832c:	e793      	b.n	8018256 <__gethex+0x110>
 801832e:	3101      	adds	r1, #1
 8018330:	105b      	asrs	r3, r3, #1
 8018332:	e7b0      	b.n	8018296 <__gethex+0x150>
 8018334:	1e73      	subs	r3, r6, #1
 8018336:	9305      	str	r3, [sp, #20]
 8018338:	9a07      	ldr	r2, [sp, #28]
 801833a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801833e:	4293      	cmp	r3, r2
 8018340:	d018      	beq.n	8018374 <__gethex+0x22e>
 8018342:	f1bb 0f20 	cmp.w	fp, #32
 8018346:	d107      	bne.n	8018358 <__gethex+0x212>
 8018348:	9b04      	ldr	r3, [sp, #16]
 801834a:	f8c3 a000 	str.w	sl, [r3]
 801834e:	3304      	adds	r3, #4
 8018350:	f04f 0a00 	mov.w	sl, #0
 8018354:	9304      	str	r3, [sp, #16]
 8018356:	46d3      	mov	fp, sl
 8018358:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801835c:	f7ff fede 	bl	801811c <__hexdig_fun>
 8018360:	f000 000f 	and.w	r0, r0, #15
 8018364:	fa00 f00b 	lsl.w	r0, r0, fp
 8018368:	ea4a 0a00 	orr.w	sl, sl, r0
 801836c:	f10b 0b04 	add.w	fp, fp, #4
 8018370:	9b05      	ldr	r3, [sp, #20]
 8018372:	e00d      	b.n	8018390 <__gethex+0x24a>
 8018374:	9b05      	ldr	r3, [sp, #20]
 8018376:	9a08      	ldr	r2, [sp, #32]
 8018378:	4413      	add	r3, r2
 801837a:	42bb      	cmp	r3, r7
 801837c:	d3e1      	bcc.n	8018342 <__gethex+0x1fc>
 801837e:	4618      	mov	r0, r3
 8018380:	9a01      	ldr	r2, [sp, #4]
 8018382:	9903      	ldr	r1, [sp, #12]
 8018384:	9309      	str	r3, [sp, #36]	; 0x24
 8018386:	f001 fd88 	bl	8019e9a <strncmp>
 801838a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801838c:	2800      	cmp	r0, #0
 801838e:	d1d8      	bne.n	8018342 <__gethex+0x1fc>
 8018390:	461e      	mov	r6, r3
 8018392:	e791      	b.n	80182b8 <__gethex+0x172>
 8018394:	1eb9      	subs	r1, r7, #2
 8018396:	4628      	mov	r0, r5
 8018398:	f000 fe2a 	bl	8018ff0 <__any_on>
 801839c:	2800      	cmp	r0, #0
 801839e:	d0b2      	beq.n	8018306 <__gethex+0x1c0>
 80183a0:	f04f 0a03 	mov.w	sl, #3
 80183a4:	e7b1      	b.n	801830a <__gethex+0x1c4>
 80183a6:	da09      	bge.n	80183bc <__gethex+0x276>
 80183a8:	1bf7      	subs	r7, r6, r7
 80183aa:	4629      	mov	r1, r5
 80183ac:	463a      	mov	r2, r7
 80183ae:	9802      	ldr	r0, [sp, #8]
 80183b0:	f000 fc40 	bl	8018c34 <__lshift>
 80183b4:	1be4      	subs	r4, r4, r7
 80183b6:	4605      	mov	r5, r0
 80183b8:	f100 0914 	add.w	r9, r0, #20
 80183bc:	f04f 0a00 	mov.w	sl, #0
 80183c0:	e7a8      	b.n	8018314 <__gethex+0x1ce>
 80183c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80183c6:	42a0      	cmp	r0, r4
 80183c8:	dd6a      	ble.n	80184a0 <__gethex+0x35a>
 80183ca:	1b04      	subs	r4, r0, r4
 80183cc:	42a6      	cmp	r6, r4
 80183ce:	dc2e      	bgt.n	801842e <__gethex+0x2e8>
 80183d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80183d4:	2b02      	cmp	r3, #2
 80183d6:	d022      	beq.n	801841e <__gethex+0x2d8>
 80183d8:	2b03      	cmp	r3, #3
 80183da:	d024      	beq.n	8018426 <__gethex+0x2e0>
 80183dc:	2b01      	cmp	r3, #1
 80183de:	d115      	bne.n	801840c <__gethex+0x2c6>
 80183e0:	42a6      	cmp	r6, r4
 80183e2:	d113      	bne.n	801840c <__gethex+0x2c6>
 80183e4:	2e01      	cmp	r6, #1
 80183e6:	dc0b      	bgt.n	8018400 <__gethex+0x2ba>
 80183e8:	9a06      	ldr	r2, [sp, #24]
 80183ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80183ee:	6013      	str	r3, [r2, #0]
 80183f0:	2301      	movs	r3, #1
 80183f2:	612b      	str	r3, [r5, #16]
 80183f4:	f8c9 3000 	str.w	r3, [r9]
 80183f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80183fa:	2762      	movs	r7, #98	; 0x62
 80183fc:	601d      	str	r5, [r3, #0]
 80183fe:	e72a      	b.n	8018256 <__gethex+0x110>
 8018400:	1e71      	subs	r1, r6, #1
 8018402:	4628      	mov	r0, r5
 8018404:	f000 fdf4 	bl	8018ff0 <__any_on>
 8018408:	2800      	cmp	r0, #0
 801840a:	d1ed      	bne.n	80183e8 <__gethex+0x2a2>
 801840c:	4629      	mov	r1, r5
 801840e:	9802      	ldr	r0, [sp, #8]
 8018410:	f000 fa44 	bl	801889c <_Bfree>
 8018414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018416:	2300      	movs	r3, #0
 8018418:	6013      	str	r3, [r2, #0]
 801841a:	2750      	movs	r7, #80	; 0x50
 801841c:	e71b      	b.n	8018256 <__gethex+0x110>
 801841e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018420:	2b00      	cmp	r3, #0
 8018422:	d0e1      	beq.n	80183e8 <__gethex+0x2a2>
 8018424:	e7f2      	b.n	801840c <__gethex+0x2c6>
 8018426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018428:	2b00      	cmp	r3, #0
 801842a:	d1dd      	bne.n	80183e8 <__gethex+0x2a2>
 801842c:	e7ee      	b.n	801840c <__gethex+0x2c6>
 801842e:	1e67      	subs	r7, r4, #1
 8018430:	f1ba 0f00 	cmp.w	sl, #0
 8018434:	d131      	bne.n	801849a <__gethex+0x354>
 8018436:	b127      	cbz	r7, 8018442 <__gethex+0x2fc>
 8018438:	4639      	mov	r1, r7
 801843a:	4628      	mov	r0, r5
 801843c:	f000 fdd8 	bl	8018ff0 <__any_on>
 8018440:	4682      	mov	sl, r0
 8018442:	117a      	asrs	r2, r7, #5
 8018444:	2301      	movs	r3, #1
 8018446:	f007 071f 	and.w	r7, r7, #31
 801844a:	fa03 f707 	lsl.w	r7, r3, r7
 801844e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018452:	4621      	mov	r1, r4
 8018454:	421f      	tst	r7, r3
 8018456:	4628      	mov	r0, r5
 8018458:	bf18      	it	ne
 801845a:	f04a 0a02 	orrne.w	sl, sl, #2
 801845e:	1b36      	subs	r6, r6, r4
 8018460:	f7ff fe22 	bl	80180a8 <rshift>
 8018464:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018468:	2702      	movs	r7, #2
 801846a:	f1ba 0f00 	cmp.w	sl, #0
 801846e:	d048      	beq.n	8018502 <__gethex+0x3bc>
 8018470:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018474:	2b02      	cmp	r3, #2
 8018476:	d015      	beq.n	80184a4 <__gethex+0x35e>
 8018478:	2b03      	cmp	r3, #3
 801847a:	d017      	beq.n	80184ac <__gethex+0x366>
 801847c:	2b01      	cmp	r3, #1
 801847e:	d109      	bne.n	8018494 <__gethex+0x34e>
 8018480:	f01a 0f02 	tst.w	sl, #2
 8018484:	d006      	beq.n	8018494 <__gethex+0x34e>
 8018486:	f8d9 3000 	ldr.w	r3, [r9]
 801848a:	ea4a 0a03 	orr.w	sl, sl, r3
 801848e:	f01a 0f01 	tst.w	sl, #1
 8018492:	d10e      	bne.n	80184b2 <__gethex+0x36c>
 8018494:	f047 0710 	orr.w	r7, r7, #16
 8018498:	e033      	b.n	8018502 <__gethex+0x3bc>
 801849a:	f04f 0a01 	mov.w	sl, #1
 801849e:	e7d0      	b.n	8018442 <__gethex+0x2fc>
 80184a0:	2701      	movs	r7, #1
 80184a2:	e7e2      	b.n	801846a <__gethex+0x324>
 80184a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184a6:	f1c3 0301 	rsb	r3, r3, #1
 80184aa:	9315      	str	r3, [sp, #84]	; 0x54
 80184ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d0f0      	beq.n	8018494 <__gethex+0x34e>
 80184b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80184b6:	f105 0314 	add.w	r3, r5, #20
 80184ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80184be:	eb03 010a 	add.w	r1, r3, sl
 80184c2:	f04f 0c00 	mov.w	ip, #0
 80184c6:	4618      	mov	r0, r3
 80184c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80184cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80184d0:	d01c      	beq.n	801850c <__gethex+0x3c6>
 80184d2:	3201      	adds	r2, #1
 80184d4:	6002      	str	r2, [r0, #0]
 80184d6:	2f02      	cmp	r7, #2
 80184d8:	f105 0314 	add.w	r3, r5, #20
 80184dc:	d138      	bne.n	8018550 <__gethex+0x40a>
 80184de:	f8d8 2000 	ldr.w	r2, [r8]
 80184e2:	3a01      	subs	r2, #1
 80184e4:	42b2      	cmp	r2, r6
 80184e6:	d10a      	bne.n	80184fe <__gethex+0x3b8>
 80184e8:	1171      	asrs	r1, r6, #5
 80184ea:	2201      	movs	r2, #1
 80184ec:	f006 061f 	and.w	r6, r6, #31
 80184f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80184f4:	fa02 f606 	lsl.w	r6, r2, r6
 80184f8:	421e      	tst	r6, r3
 80184fa:	bf18      	it	ne
 80184fc:	4617      	movne	r7, r2
 80184fe:	f047 0720 	orr.w	r7, r7, #32
 8018502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018504:	601d      	str	r5, [r3, #0]
 8018506:	9b06      	ldr	r3, [sp, #24]
 8018508:	601c      	str	r4, [r3, #0]
 801850a:	e6a4      	b.n	8018256 <__gethex+0x110>
 801850c:	4299      	cmp	r1, r3
 801850e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018512:	d8d8      	bhi.n	80184c6 <__gethex+0x380>
 8018514:	68ab      	ldr	r3, [r5, #8]
 8018516:	4599      	cmp	r9, r3
 8018518:	db12      	blt.n	8018540 <__gethex+0x3fa>
 801851a:	6869      	ldr	r1, [r5, #4]
 801851c:	9802      	ldr	r0, [sp, #8]
 801851e:	3101      	adds	r1, #1
 8018520:	f000 f988 	bl	8018834 <_Balloc>
 8018524:	692a      	ldr	r2, [r5, #16]
 8018526:	3202      	adds	r2, #2
 8018528:	f105 010c 	add.w	r1, r5, #12
 801852c:	4683      	mov	fp, r0
 801852e:	0092      	lsls	r2, r2, #2
 8018530:	300c      	adds	r0, #12
 8018532:	f7fc fe9b 	bl	801526c <memcpy>
 8018536:	4629      	mov	r1, r5
 8018538:	9802      	ldr	r0, [sp, #8]
 801853a:	f000 f9af 	bl	801889c <_Bfree>
 801853e:	465d      	mov	r5, fp
 8018540:	692b      	ldr	r3, [r5, #16]
 8018542:	1c5a      	adds	r2, r3, #1
 8018544:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018548:	612a      	str	r2, [r5, #16]
 801854a:	2201      	movs	r2, #1
 801854c:	615a      	str	r2, [r3, #20]
 801854e:	e7c2      	b.n	80184d6 <__gethex+0x390>
 8018550:	692a      	ldr	r2, [r5, #16]
 8018552:	454a      	cmp	r2, r9
 8018554:	dd0b      	ble.n	801856e <__gethex+0x428>
 8018556:	2101      	movs	r1, #1
 8018558:	4628      	mov	r0, r5
 801855a:	f7ff fda5 	bl	80180a8 <rshift>
 801855e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018562:	3401      	adds	r4, #1
 8018564:	42a3      	cmp	r3, r4
 8018566:	f6ff aed9 	blt.w	801831c <__gethex+0x1d6>
 801856a:	2701      	movs	r7, #1
 801856c:	e7c7      	b.n	80184fe <__gethex+0x3b8>
 801856e:	f016 061f 	ands.w	r6, r6, #31
 8018572:	d0fa      	beq.n	801856a <__gethex+0x424>
 8018574:	449a      	add	sl, r3
 8018576:	f1c6 0620 	rsb	r6, r6, #32
 801857a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801857e:	f000 fa1d 	bl	80189bc <__hi0bits>
 8018582:	42b0      	cmp	r0, r6
 8018584:	dbe7      	blt.n	8018556 <__gethex+0x410>
 8018586:	e7f0      	b.n	801856a <__gethex+0x424>

08018588 <L_shift>:
 8018588:	f1c2 0208 	rsb	r2, r2, #8
 801858c:	0092      	lsls	r2, r2, #2
 801858e:	b570      	push	{r4, r5, r6, lr}
 8018590:	f1c2 0620 	rsb	r6, r2, #32
 8018594:	6843      	ldr	r3, [r0, #4]
 8018596:	6804      	ldr	r4, [r0, #0]
 8018598:	fa03 f506 	lsl.w	r5, r3, r6
 801859c:	432c      	orrs	r4, r5
 801859e:	40d3      	lsrs	r3, r2
 80185a0:	6004      	str	r4, [r0, #0]
 80185a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80185a6:	4288      	cmp	r0, r1
 80185a8:	d3f4      	bcc.n	8018594 <L_shift+0xc>
 80185aa:	bd70      	pop	{r4, r5, r6, pc}

080185ac <__match>:
 80185ac:	b530      	push	{r4, r5, lr}
 80185ae:	6803      	ldr	r3, [r0, #0]
 80185b0:	3301      	adds	r3, #1
 80185b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185b6:	b914      	cbnz	r4, 80185be <__match+0x12>
 80185b8:	6003      	str	r3, [r0, #0]
 80185ba:	2001      	movs	r0, #1
 80185bc:	bd30      	pop	{r4, r5, pc}
 80185be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80185c6:	2d19      	cmp	r5, #25
 80185c8:	bf98      	it	ls
 80185ca:	3220      	addls	r2, #32
 80185cc:	42a2      	cmp	r2, r4
 80185ce:	d0f0      	beq.n	80185b2 <__match+0x6>
 80185d0:	2000      	movs	r0, #0
 80185d2:	e7f3      	b.n	80185bc <__match+0x10>

080185d4 <__hexnan>:
 80185d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d8:	680b      	ldr	r3, [r1, #0]
 80185da:	6801      	ldr	r1, [r0, #0]
 80185dc:	115f      	asrs	r7, r3, #5
 80185de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80185e2:	f013 031f 	ands.w	r3, r3, #31
 80185e6:	b087      	sub	sp, #28
 80185e8:	bf18      	it	ne
 80185ea:	3704      	addne	r7, #4
 80185ec:	2500      	movs	r5, #0
 80185ee:	1f3e      	subs	r6, r7, #4
 80185f0:	4682      	mov	sl, r0
 80185f2:	4690      	mov	r8, r2
 80185f4:	9301      	str	r3, [sp, #4]
 80185f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80185fa:	46b1      	mov	r9, r6
 80185fc:	4634      	mov	r4, r6
 80185fe:	9502      	str	r5, [sp, #8]
 8018600:	46ab      	mov	fp, r5
 8018602:	784a      	ldrb	r2, [r1, #1]
 8018604:	1c4b      	adds	r3, r1, #1
 8018606:	9303      	str	r3, [sp, #12]
 8018608:	b342      	cbz	r2, 801865c <__hexnan+0x88>
 801860a:	4610      	mov	r0, r2
 801860c:	9105      	str	r1, [sp, #20]
 801860e:	9204      	str	r2, [sp, #16]
 8018610:	f7ff fd84 	bl	801811c <__hexdig_fun>
 8018614:	2800      	cmp	r0, #0
 8018616:	d143      	bne.n	80186a0 <__hexnan+0xcc>
 8018618:	9a04      	ldr	r2, [sp, #16]
 801861a:	9905      	ldr	r1, [sp, #20]
 801861c:	2a20      	cmp	r2, #32
 801861e:	d818      	bhi.n	8018652 <__hexnan+0x7e>
 8018620:	9b02      	ldr	r3, [sp, #8]
 8018622:	459b      	cmp	fp, r3
 8018624:	dd13      	ble.n	801864e <__hexnan+0x7a>
 8018626:	454c      	cmp	r4, r9
 8018628:	d206      	bcs.n	8018638 <__hexnan+0x64>
 801862a:	2d07      	cmp	r5, #7
 801862c:	dc04      	bgt.n	8018638 <__hexnan+0x64>
 801862e:	462a      	mov	r2, r5
 8018630:	4649      	mov	r1, r9
 8018632:	4620      	mov	r0, r4
 8018634:	f7ff ffa8 	bl	8018588 <L_shift>
 8018638:	4544      	cmp	r4, r8
 801863a:	d944      	bls.n	80186c6 <__hexnan+0xf2>
 801863c:	2300      	movs	r3, #0
 801863e:	f1a4 0904 	sub.w	r9, r4, #4
 8018642:	f844 3c04 	str.w	r3, [r4, #-4]
 8018646:	f8cd b008 	str.w	fp, [sp, #8]
 801864a:	464c      	mov	r4, r9
 801864c:	461d      	mov	r5, r3
 801864e:	9903      	ldr	r1, [sp, #12]
 8018650:	e7d7      	b.n	8018602 <__hexnan+0x2e>
 8018652:	2a29      	cmp	r2, #41	; 0x29
 8018654:	d14a      	bne.n	80186ec <__hexnan+0x118>
 8018656:	3102      	adds	r1, #2
 8018658:	f8ca 1000 	str.w	r1, [sl]
 801865c:	f1bb 0f00 	cmp.w	fp, #0
 8018660:	d044      	beq.n	80186ec <__hexnan+0x118>
 8018662:	454c      	cmp	r4, r9
 8018664:	d206      	bcs.n	8018674 <__hexnan+0xa0>
 8018666:	2d07      	cmp	r5, #7
 8018668:	dc04      	bgt.n	8018674 <__hexnan+0xa0>
 801866a:	462a      	mov	r2, r5
 801866c:	4649      	mov	r1, r9
 801866e:	4620      	mov	r0, r4
 8018670:	f7ff ff8a 	bl	8018588 <L_shift>
 8018674:	4544      	cmp	r4, r8
 8018676:	d928      	bls.n	80186ca <__hexnan+0xf6>
 8018678:	4643      	mov	r3, r8
 801867a:	f854 2b04 	ldr.w	r2, [r4], #4
 801867e:	f843 2b04 	str.w	r2, [r3], #4
 8018682:	42a6      	cmp	r6, r4
 8018684:	d2f9      	bcs.n	801867a <__hexnan+0xa6>
 8018686:	2200      	movs	r2, #0
 8018688:	f843 2b04 	str.w	r2, [r3], #4
 801868c:	429e      	cmp	r6, r3
 801868e:	d2fb      	bcs.n	8018688 <__hexnan+0xb4>
 8018690:	6833      	ldr	r3, [r6, #0]
 8018692:	b91b      	cbnz	r3, 801869c <__hexnan+0xc8>
 8018694:	4546      	cmp	r6, r8
 8018696:	d127      	bne.n	80186e8 <__hexnan+0x114>
 8018698:	2301      	movs	r3, #1
 801869a:	6033      	str	r3, [r6, #0]
 801869c:	2005      	movs	r0, #5
 801869e:	e026      	b.n	80186ee <__hexnan+0x11a>
 80186a0:	3501      	adds	r5, #1
 80186a2:	2d08      	cmp	r5, #8
 80186a4:	f10b 0b01 	add.w	fp, fp, #1
 80186a8:	dd06      	ble.n	80186b8 <__hexnan+0xe4>
 80186aa:	4544      	cmp	r4, r8
 80186ac:	d9cf      	bls.n	801864e <__hexnan+0x7a>
 80186ae:	2300      	movs	r3, #0
 80186b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80186b4:	2501      	movs	r5, #1
 80186b6:	3c04      	subs	r4, #4
 80186b8:	6822      	ldr	r2, [r4, #0]
 80186ba:	f000 000f 	and.w	r0, r0, #15
 80186be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80186c2:	6020      	str	r0, [r4, #0]
 80186c4:	e7c3      	b.n	801864e <__hexnan+0x7a>
 80186c6:	2508      	movs	r5, #8
 80186c8:	e7c1      	b.n	801864e <__hexnan+0x7a>
 80186ca:	9b01      	ldr	r3, [sp, #4]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d0df      	beq.n	8018690 <__hexnan+0xbc>
 80186d0:	f04f 32ff 	mov.w	r2, #4294967295
 80186d4:	f1c3 0320 	rsb	r3, r3, #32
 80186d8:	fa22 f303 	lsr.w	r3, r2, r3
 80186dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80186e0:	401a      	ands	r2, r3
 80186e2:	f847 2c04 	str.w	r2, [r7, #-4]
 80186e6:	e7d3      	b.n	8018690 <__hexnan+0xbc>
 80186e8:	3e04      	subs	r6, #4
 80186ea:	e7d1      	b.n	8018690 <__hexnan+0xbc>
 80186ec:	2004      	movs	r0, #4
 80186ee:	b007      	add	sp, #28
 80186f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186f4 <__locale_ctype_ptr_l>:
 80186f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80186f8:	4770      	bx	lr
	...

080186fc <__locale_ctype_ptr>:
 80186fc:	4b04      	ldr	r3, [pc, #16]	; (8018710 <__locale_ctype_ptr+0x14>)
 80186fe:	4a05      	ldr	r2, [pc, #20]	; (8018714 <__locale_ctype_ptr+0x18>)
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	6a1b      	ldr	r3, [r3, #32]
 8018704:	2b00      	cmp	r3, #0
 8018706:	bf08      	it	eq
 8018708:	4613      	moveq	r3, r2
 801870a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801870e:	4770      	bx	lr
 8018710:	20000028 	.word	0x20000028
 8018714:	2000008c 	.word	0x2000008c

08018718 <__localeconv_l>:
 8018718:	30f0      	adds	r0, #240	; 0xf0
 801871a:	4770      	bx	lr

0801871c <_localeconv_r>:
 801871c:	4b04      	ldr	r3, [pc, #16]	; (8018730 <_localeconv_r+0x14>)
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	6a18      	ldr	r0, [r3, #32]
 8018722:	4b04      	ldr	r3, [pc, #16]	; (8018734 <_localeconv_r+0x18>)
 8018724:	2800      	cmp	r0, #0
 8018726:	bf08      	it	eq
 8018728:	4618      	moveq	r0, r3
 801872a:	30f0      	adds	r0, #240	; 0xf0
 801872c:	4770      	bx	lr
 801872e:	bf00      	nop
 8018730:	20000028 	.word	0x20000028
 8018734:	2000008c 	.word	0x2000008c

08018738 <__swhatbuf_r>:
 8018738:	b570      	push	{r4, r5, r6, lr}
 801873a:	460e      	mov	r6, r1
 801873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018740:	2900      	cmp	r1, #0
 8018742:	b096      	sub	sp, #88	; 0x58
 8018744:	4614      	mov	r4, r2
 8018746:	461d      	mov	r5, r3
 8018748:	da07      	bge.n	801875a <__swhatbuf_r+0x22>
 801874a:	2300      	movs	r3, #0
 801874c:	602b      	str	r3, [r5, #0]
 801874e:	89b3      	ldrh	r3, [r6, #12]
 8018750:	061a      	lsls	r2, r3, #24
 8018752:	d410      	bmi.n	8018776 <__swhatbuf_r+0x3e>
 8018754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018758:	e00e      	b.n	8018778 <__swhatbuf_r+0x40>
 801875a:	466a      	mov	r2, sp
 801875c:	f001 fd18 	bl	801a190 <_fstat_r>
 8018760:	2800      	cmp	r0, #0
 8018762:	dbf2      	blt.n	801874a <__swhatbuf_r+0x12>
 8018764:	9a01      	ldr	r2, [sp, #4]
 8018766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801876a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801876e:	425a      	negs	r2, r3
 8018770:	415a      	adcs	r2, r3
 8018772:	602a      	str	r2, [r5, #0]
 8018774:	e7ee      	b.n	8018754 <__swhatbuf_r+0x1c>
 8018776:	2340      	movs	r3, #64	; 0x40
 8018778:	2000      	movs	r0, #0
 801877a:	6023      	str	r3, [r4, #0]
 801877c:	b016      	add	sp, #88	; 0x58
 801877e:	bd70      	pop	{r4, r5, r6, pc}

08018780 <__smakebuf_r>:
 8018780:	898b      	ldrh	r3, [r1, #12]
 8018782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018784:	079d      	lsls	r5, r3, #30
 8018786:	4606      	mov	r6, r0
 8018788:	460c      	mov	r4, r1
 801878a:	d507      	bpl.n	801879c <__smakebuf_r+0x1c>
 801878c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018790:	6023      	str	r3, [r4, #0]
 8018792:	6123      	str	r3, [r4, #16]
 8018794:	2301      	movs	r3, #1
 8018796:	6163      	str	r3, [r4, #20]
 8018798:	b002      	add	sp, #8
 801879a:	bd70      	pop	{r4, r5, r6, pc}
 801879c:	ab01      	add	r3, sp, #4
 801879e:	466a      	mov	r2, sp
 80187a0:	f7ff ffca 	bl	8018738 <__swhatbuf_r>
 80187a4:	9900      	ldr	r1, [sp, #0]
 80187a6:	4605      	mov	r5, r0
 80187a8:	4630      	mov	r0, r6
 80187aa:	f000 fc9f 	bl	80190ec <_malloc_r>
 80187ae:	b948      	cbnz	r0, 80187c4 <__smakebuf_r+0x44>
 80187b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187b4:	059a      	lsls	r2, r3, #22
 80187b6:	d4ef      	bmi.n	8018798 <__smakebuf_r+0x18>
 80187b8:	f023 0303 	bic.w	r3, r3, #3
 80187bc:	f043 0302 	orr.w	r3, r3, #2
 80187c0:	81a3      	strh	r3, [r4, #12]
 80187c2:	e7e3      	b.n	801878c <__smakebuf_r+0xc>
 80187c4:	4b0d      	ldr	r3, [pc, #52]	; (80187fc <__smakebuf_r+0x7c>)
 80187c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80187c8:	89a3      	ldrh	r3, [r4, #12]
 80187ca:	6020      	str	r0, [r4, #0]
 80187cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187d0:	81a3      	strh	r3, [r4, #12]
 80187d2:	9b00      	ldr	r3, [sp, #0]
 80187d4:	6163      	str	r3, [r4, #20]
 80187d6:	9b01      	ldr	r3, [sp, #4]
 80187d8:	6120      	str	r0, [r4, #16]
 80187da:	b15b      	cbz	r3, 80187f4 <__smakebuf_r+0x74>
 80187dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80187e0:	4630      	mov	r0, r6
 80187e2:	f001 fce7 	bl	801a1b4 <_isatty_r>
 80187e6:	b128      	cbz	r0, 80187f4 <__smakebuf_r+0x74>
 80187e8:	89a3      	ldrh	r3, [r4, #12]
 80187ea:	f023 0303 	bic.w	r3, r3, #3
 80187ee:	f043 0301 	orr.w	r3, r3, #1
 80187f2:	81a3      	strh	r3, [r4, #12]
 80187f4:	89a3      	ldrh	r3, [r4, #12]
 80187f6:	431d      	orrs	r5, r3
 80187f8:	81a5      	strh	r5, [r4, #12]
 80187fa:	e7cd      	b.n	8018798 <__smakebuf_r+0x18>
 80187fc:	08017f25 	.word	0x08017f25

08018800 <malloc>:
 8018800:	4b02      	ldr	r3, [pc, #8]	; (801880c <malloc+0xc>)
 8018802:	4601      	mov	r1, r0
 8018804:	6818      	ldr	r0, [r3, #0]
 8018806:	f000 bc71 	b.w	80190ec <_malloc_r>
 801880a:	bf00      	nop
 801880c:	20000028 	.word	0x20000028

08018810 <__ascii_mbtowc>:
 8018810:	b082      	sub	sp, #8
 8018812:	b901      	cbnz	r1, 8018816 <__ascii_mbtowc+0x6>
 8018814:	a901      	add	r1, sp, #4
 8018816:	b142      	cbz	r2, 801882a <__ascii_mbtowc+0x1a>
 8018818:	b14b      	cbz	r3, 801882e <__ascii_mbtowc+0x1e>
 801881a:	7813      	ldrb	r3, [r2, #0]
 801881c:	600b      	str	r3, [r1, #0]
 801881e:	7812      	ldrb	r2, [r2, #0]
 8018820:	1c10      	adds	r0, r2, #0
 8018822:	bf18      	it	ne
 8018824:	2001      	movne	r0, #1
 8018826:	b002      	add	sp, #8
 8018828:	4770      	bx	lr
 801882a:	4610      	mov	r0, r2
 801882c:	e7fb      	b.n	8018826 <__ascii_mbtowc+0x16>
 801882e:	f06f 0001 	mvn.w	r0, #1
 8018832:	e7f8      	b.n	8018826 <__ascii_mbtowc+0x16>

08018834 <_Balloc>:
 8018834:	b570      	push	{r4, r5, r6, lr}
 8018836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018838:	4604      	mov	r4, r0
 801883a:	460e      	mov	r6, r1
 801883c:	b93d      	cbnz	r5, 801884e <_Balloc+0x1a>
 801883e:	2010      	movs	r0, #16
 8018840:	f7ff ffde 	bl	8018800 <malloc>
 8018844:	6260      	str	r0, [r4, #36]	; 0x24
 8018846:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801884a:	6005      	str	r5, [r0, #0]
 801884c:	60c5      	str	r5, [r0, #12]
 801884e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018850:	68eb      	ldr	r3, [r5, #12]
 8018852:	b183      	cbz	r3, 8018876 <_Balloc+0x42>
 8018854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018856:	68db      	ldr	r3, [r3, #12]
 8018858:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801885c:	b9b8      	cbnz	r0, 801888e <_Balloc+0x5a>
 801885e:	2101      	movs	r1, #1
 8018860:	fa01 f506 	lsl.w	r5, r1, r6
 8018864:	1d6a      	adds	r2, r5, #5
 8018866:	0092      	lsls	r2, r2, #2
 8018868:	4620      	mov	r0, r4
 801886a:	f000 fbe2 	bl	8019032 <_calloc_r>
 801886e:	b160      	cbz	r0, 801888a <_Balloc+0x56>
 8018870:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018874:	e00e      	b.n	8018894 <_Balloc+0x60>
 8018876:	2221      	movs	r2, #33	; 0x21
 8018878:	2104      	movs	r1, #4
 801887a:	4620      	mov	r0, r4
 801887c:	f000 fbd9 	bl	8019032 <_calloc_r>
 8018880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018882:	60e8      	str	r0, [r5, #12]
 8018884:	68db      	ldr	r3, [r3, #12]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d1e4      	bne.n	8018854 <_Balloc+0x20>
 801888a:	2000      	movs	r0, #0
 801888c:	bd70      	pop	{r4, r5, r6, pc}
 801888e:	6802      	ldr	r2, [r0, #0]
 8018890:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018894:	2300      	movs	r3, #0
 8018896:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801889a:	e7f7      	b.n	801888c <_Balloc+0x58>

0801889c <_Bfree>:
 801889c:	b570      	push	{r4, r5, r6, lr}
 801889e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80188a0:	4606      	mov	r6, r0
 80188a2:	460d      	mov	r5, r1
 80188a4:	b93c      	cbnz	r4, 80188b6 <_Bfree+0x1a>
 80188a6:	2010      	movs	r0, #16
 80188a8:	f7ff ffaa 	bl	8018800 <malloc>
 80188ac:	6270      	str	r0, [r6, #36]	; 0x24
 80188ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80188b2:	6004      	str	r4, [r0, #0]
 80188b4:	60c4      	str	r4, [r0, #12]
 80188b6:	b13d      	cbz	r5, 80188c8 <_Bfree+0x2c>
 80188b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80188ba:	686a      	ldr	r2, [r5, #4]
 80188bc:	68db      	ldr	r3, [r3, #12]
 80188be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80188c2:	6029      	str	r1, [r5, #0]
 80188c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80188c8:	bd70      	pop	{r4, r5, r6, pc}

080188ca <__multadd>:
 80188ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188ce:	690d      	ldr	r5, [r1, #16]
 80188d0:	461f      	mov	r7, r3
 80188d2:	4606      	mov	r6, r0
 80188d4:	460c      	mov	r4, r1
 80188d6:	f101 0c14 	add.w	ip, r1, #20
 80188da:	2300      	movs	r3, #0
 80188dc:	f8dc 0000 	ldr.w	r0, [ip]
 80188e0:	b281      	uxth	r1, r0
 80188e2:	fb02 7101 	mla	r1, r2, r1, r7
 80188e6:	0c0f      	lsrs	r7, r1, #16
 80188e8:	0c00      	lsrs	r0, r0, #16
 80188ea:	fb02 7000 	mla	r0, r2, r0, r7
 80188ee:	b289      	uxth	r1, r1
 80188f0:	3301      	adds	r3, #1
 80188f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80188f6:	429d      	cmp	r5, r3
 80188f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80188fc:	f84c 1b04 	str.w	r1, [ip], #4
 8018900:	dcec      	bgt.n	80188dc <__multadd+0x12>
 8018902:	b1d7      	cbz	r7, 801893a <__multadd+0x70>
 8018904:	68a3      	ldr	r3, [r4, #8]
 8018906:	42ab      	cmp	r3, r5
 8018908:	dc12      	bgt.n	8018930 <__multadd+0x66>
 801890a:	6861      	ldr	r1, [r4, #4]
 801890c:	4630      	mov	r0, r6
 801890e:	3101      	adds	r1, #1
 8018910:	f7ff ff90 	bl	8018834 <_Balloc>
 8018914:	6922      	ldr	r2, [r4, #16]
 8018916:	3202      	adds	r2, #2
 8018918:	f104 010c 	add.w	r1, r4, #12
 801891c:	4680      	mov	r8, r0
 801891e:	0092      	lsls	r2, r2, #2
 8018920:	300c      	adds	r0, #12
 8018922:	f7fc fca3 	bl	801526c <memcpy>
 8018926:	4621      	mov	r1, r4
 8018928:	4630      	mov	r0, r6
 801892a:	f7ff ffb7 	bl	801889c <_Bfree>
 801892e:	4644      	mov	r4, r8
 8018930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018934:	3501      	adds	r5, #1
 8018936:	615f      	str	r7, [r3, #20]
 8018938:	6125      	str	r5, [r4, #16]
 801893a:	4620      	mov	r0, r4
 801893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018940 <__s2b>:
 8018940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018944:	460c      	mov	r4, r1
 8018946:	4615      	mov	r5, r2
 8018948:	461f      	mov	r7, r3
 801894a:	2209      	movs	r2, #9
 801894c:	3308      	adds	r3, #8
 801894e:	4606      	mov	r6, r0
 8018950:	fb93 f3f2 	sdiv	r3, r3, r2
 8018954:	2100      	movs	r1, #0
 8018956:	2201      	movs	r2, #1
 8018958:	429a      	cmp	r2, r3
 801895a:	db20      	blt.n	801899e <__s2b+0x5e>
 801895c:	4630      	mov	r0, r6
 801895e:	f7ff ff69 	bl	8018834 <_Balloc>
 8018962:	9b08      	ldr	r3, [sp, #32]
 8018964:	6143      	str	r3, [r0, #20]
 8018966:	2d09      	cmp	r5, #9
 8018968:	f04f 0301 	mov.w	r3, #1
 801896c:	6103      	str	r3, [r0, #16]
 801896e:	dd19      	ble.n	80189a4 <__s2b+0x64>
 8018970:	f104 0809 	add.w	r8, r4, #9
 8018974:	46c1      	mov	r9, r8
 8018976:	442c      	add	r4, r5
 8018978:	f819 3b01 	ldrb.w	r3, [r9], #1
 801897c:	4601      	mov	r1, r0
 801897e:	3b30      	subs	r3, #48	; 0x30
 8018980:	220a      	movs	r2, #10
 8018982:	4630      	mov	r0, r6
 8018984:	f7ff ffa1 	bl	80188ca <__multadd>
 8018988:	45a1      	cmp	r9, r4
 801898a:	d1f5      	bne.n	8018978 <__s2b+0x38>
 801898c:	eb08 0405 	add.w	r4, r8, r5
 8018990:	3c08      	subs	r4, #8
 8018992:	1b2d      	subs	r5, r5, r4
 8018994:	1963      	adds	r3, r4, r5
 8018996:	42bb      	cmp	r3, r7
 8018998:	db07      	blt.n	80189aa <__s2b+0x6a>
 801899a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801899e:	0052      	lsls	r2, r2, #1
 80189a0:	3101      	adds	r1, #1
 80189a2:	e7d9      	b.n	8018958 <__s2b+0x18>
 80189a4:	340a      	adds	r4, #10
 80189a6:	2509      	movs	r5, #9
 80189a8:	e7f3      	b.n	8018992 <__s2b+0x52>
 80189aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80189ae:	4601      	mov	r1, r0
 80189b0:	3b30      	subs	r3, #48	; 0x30
 80189b2:	220a      	movs	r2, #10
 80189b4:	4630      	mov	r0, r6
 80189b6:	f7ff ff88 	bl	80188ca <__multadd>
 80189ba:	e7eb      	b.n	8018994 <__s2b+0x54>

080189bc <__hi0bits>:
 80189bc:	0c02      	lsrs	r2, r0, #16
 80189be:	0412      	lsls	r2, r2, #16
 80189c0:	4603      	mov	r3, r0
 80189c2:	b9b2      	cbnz	r2, 80189f2 <__hi0bits+0x36>
 80189c4:	0403      	lsls	r3, r0, #16
 80189c6:	2010      	movs	r0, #16
 80189c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80189cc:	bf04      	itt	eq
 80189ce:	021b      	lsleq	r3, r3, #8
 80189d0:	3008      	addeq	r0, #8
 80189d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80189d6:	bf04      	itt	eq
 80189d8:	011b      	lsleq	r3, r3, #4
 80189da:	3004      	addeq	r0, #4
 80189dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80189e0:	bf04      	itt	eq
 80189e2:	009b      	lsleq	r3, r3, #2
 80189e4:	3002      	addeq	r0, #2
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	db06      	blt.n	80189f8 <__hi0bits+0x3c>
 80189ea:	005b      	lsls	r3, r3, #1
 80189ec:	d503      	bpl.n	80189f6 <__hi0bits+0x3a>
 80189ee:	3001      	adds	r0, #1
 80189f0:	4770      	bx	lr
 80189f2:	2000      	movs	r0, #0
 80189f4:	e7e8      	b.n	80189c8 <__hi0bits+0xc>
 80189f6:	2020      	movs	r0, #32
 80189f8:	4770      	bx	lr

080189fa <__lo0bits>:
 80189fa:	6803      	ldr	r3, [r0, #0]
 80189fc:	f013 0207 	ands.w	r2, r3, #7
 8018a00:	4601      	mov	r1, r0
 8018a02:	d00b      	beq.n	8018a1c <__lo0bits+0x22>
 8018a04:	07da      	lsls	r2, r3, #31
 8018a06:	d423      	bmi.n	8018a50 <__lo0bits+0x56>
 8018a08:	0798      	lsls	r0, r3, #30
 8018a0a:	bf49      	itett	mi
 8018a0c:	085b      	lsrmi	r3, r3, #1
 8018a0e:	089b      	lsrpl	r3, r3, #2
 8018a10:	2001      	movmi	r0, #1
 8018a12:	600b      	strmi	r3, [r1, #0]
 8018a14:	bf5c      	itt	pl
 8018a16:	600b      	strpl	r3, [r1, #0]
 8018a18:	2002      	movpl	r0, #2
 8018a1a:	4770      	bx	lr
 8018a1c:	b298      	uxth	r0, r3
 8018a1e:	b9a8      	cbnz	r0, 8018a4c <__lo0bits+0x52>
 8018a20:	0c1b      	lsrs	r3, r3, #16
 8018a22:	2010      	movs	r0, #16
 8018a24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a28:	bf04      	itt	eq
 8018a2a:	0a1b      	lsreq	r3, r3, #8
 8018a2c:	3008      	addeq	r0, #8
 8018a2e:	071a      	lsls	r2, r3, #28
 8018a30:	bf04      	itt	eq
 8018a32:	091b      	lsreq	r3, r3, #4
 8018a34:	3004      	addeq	r0, #4
 8018a36:	079a      	lsls	r2, r3, #30
 8018a38:	bf04      	itt	eq
 8018a3a:	089b      	lsreq	r3, r3, #2
 8018a3c:	3002      	addeq	r0, #2
 8018a3e:	07da      	lsls	r2, r3, #31
 8018a40:	d402      	bmi.n	8018a48 <__lo0bits+0x4e>
 8018a42:	085b      	lsrs	r3, r3, #1
 8018a44:	d006      	beq.n	8018a54 <__lo0bits+0x5a>
 8018a46:	3001      	adds	r0, #1
 8018a48:	600b      	str	r3, [r1, #0]
 8018a4a:	4770      	bx	lr
 8018a4c:	4610      	mov	r0, r2
 8018a4e:	e7e9      	b.n	8018a24 <__lo0bits+0x2a>
 8018a50:	2000      	movs	r0, #0
 8018a52:	4770      	bx	lr
 8018a54:	2020      	movs	r0, #32
 8018a56:	4770      	bx	lr

08018a58 <__i2b>:
 8018a58:	b510      	push	{r4, lr}
 8018a5a:	460c      	mov	r4, r1
 8018a5c:	2101      	movs	r1, #1
 8018a5e:	f7ff fee9 	bl	8018834 <_Balloc>
 8018a62:	2201      	movs	r2, #1
 8018a64:	6144      	str	r4, [r0, #20]
 8018a66:	6102      	str	r2, [r0, #16]
 8018a68:	bd10      	pop	{r4, pc}

08018a6a <__multiply>:
 8018a6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a6e:	4614      	mov	r4, r2
 8018a70:	690a      	ldr	r2, [r1, #16]
 8018a72:	6923      	ldr	r3, [r4, #16]
 8018a74:	429a      	cmp	r2, r3
 8018a76:	bfb8      	it	lt
 8018a78:	460b      	movlt	r3, r1
 8018a7a:	4688      	mov	r8, r1
 8018a7c:	bfbc      	itt	lt
 8018a7e:	46a0      	movlt	r8, r4
 8018a80:	461c      	movlt	r4, r3
 8018a82:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018a86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018a8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018a92:	eb07 0609 	add.w	r6, r7, r9
 8018a96:	42b3      	cmp	r3, r6
 8018a98:	bfb8      	it	lt
 8018a9a:	3101      	addlt	r1, #1
 8018a9c:	f7ff feca 	bl	8018834 <_Balloc>
 8018aa0:	f100 0514 	add.w	r5, r0, #20
 8018aa4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018aa8:	462b      	mov	r3, r5
 8018aaa:	2200      	movs	r2, #0
 8018aac:	4573      	cmp	r3, lr
 8018aae:	d316      	bcc.n	8018ade <__multiply+0x74>
 8018ab0:	f104 0214 	add.w	r2, r4, #20
 8018ab4:	f108 0114 	add.w	r1, r8, #20
 8018ab8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018abc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018ac0:	9300      	str	r3, [sp, #0]
 8018ac2:	9b00      	ldr	r3, [sp, #0]
 8018ac4:	9201      	str	r2, [sp, #4]
 8018ac6:	4293      	cmp	r3, r2
 8018ac8:	d80c      	bhi.n	8018ae4 <__multiply+0x7a>
 8018aca:	2e00      	cmp	r6, #0
 8018acc:	dd03      	ble.n	8018ad6 <__multiply+0x6c>
 8018ace:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d05d      	beq.n	8018b92 <__multiply+0x128>
 8018ad6:	6106      	str	r6, [r0, #16]
 8018ad8:	b003      	add	sp, #12
 8018ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ade:	f843 2b04 	str.w	r2, [r3], #4
 8018ae2:	e7e3      	b.n	8018aac <__multiply+0x42>
 8018ae4:	f8b2 b000 	ldrh.w	fp, [r2]
 8018ae8:	f1bb 0f00 	cmp.w	fp, #0
 8018aec:	d023      	beq.n	8018b36 <__multiply+0xcc>
 8018aee:	4689      	mov	r9, r1
 8018af0:	46ac      	mov	ip, r5
 8018af2:	f04f 0800 	mov.w	r8, #0
 8018af6:	f859 4b04 	ldr.w	r4, [r9], #4
 8018afa:	f8dc a000 	ldr.w	sl, [ip]
 8018afe:	b2a3      	uxth	r3, r4
 8018b00:	fa1f fa8a 	uxth.w	sl, sl
 8018b04:	fb0b a303 	mla	r3, fp, r3, sl
 8018b08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018b0c:	f8dc 4000 	ldr.w	r4, [ip]
 8018b10:	4443      	add	r3, r8
 8018b12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b16:	fb0b 840a 	mla	r4, fp, sl, r8
 8018b1a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018b1e:	46e2      	mov	sl, ip
 8018b20:	b29b      	uxth	r3, r3
 8018b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b26:	454f      	cmp	r7, r9
 8018b28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b2c:	f84a 3b04 	str.w	r3, [sl], #4
 8018b30:	d82b      	bhi.n	8018b8a <__multiply+0x120>
 8018b32:	f8cc 8004 	str.w	r8, [ip, #4]
 8018b36:	9b01      	ldr	r3, [sp, #4]
 8018b38:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018b3c:	3204      	adds	r2, #4
 8018b3e:	f1ba 0f00 	cmp.w	sl, #0
 8018b42:	d020      	beq.n	8018b86 <__multiply+0x11c>
 8018b44:	682b      	ldr	r3, [r5, #0]
 8018b46:	4689      	mov	r9, r1
 8018b48:	46a8      	mov	r8, r5
 8018b4a:	f04f 0b00 	mov.w	fp, #0
 8018b4e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018b52:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018b56:	fb0a 440c 	mla	r4, sl, ip, r4
 8018b5a:	445c      	add	r4, fp
 8018b5c:	46c4      	mov	ip, r8
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b64:	f84c 3b04 	str.w	r3, [ip], #4
 8018b68:	f859 3b04 	ldr.w	r3, [r9], #4
 8018b6c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018b70:	0c1b      	lsrs	r3, r3, #16
 8018b72:	fb0a b303 	mla	r3, sl, r3, fp
 8018b76:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018b7a:	454f      	cmp	r7, r9
 8018b7c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018b80:	d805      	bhi.n	8018b8e <__multiply+0x124>
 8018b82:	f8c8 3004 	str.w	r3, [r8, #4]
 8018b86:	3504      	adds	r5, #4
 8018b88:	e79b      	b.n	8018ac2 <__multiply+0x58>
 8018b8a:	46d4      	mov	ip, sl
 8018b8c:	e7b3      	b.n	8018af6 <__multiply+0x8c>
 8018b8e:	46e0      	mov	r8, ip
 8018b90:	e7dd      	b.n	8018b4e <__multiply+0xe4>
 8018b92:	3e01      	subs	r6, #1
 8018b94:	e799      	b.n	8018aca <__multiply+0x60>
	...

08018b98 <__pow5mult>:
 8018b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b9c:	4615      	mov	r5, r2
 8018b9e:	f012 0203 	ands.w	r2, r2, #3
 8018ba2:	4606      	mov	r6, r0
 8018ba4:	460f      	mov	r7, r1
 8018ba6:	d007      	beq.n	8018bb8 <__pow5mult+0x20>
 8018ba8:	3a01      	subs	r2, #1
 8018baa:	4c21      	ldr	r4, [pc, #132]	; (8018c30 <__pow5mult+0x98>)
 8018bac:	2300      	movs	r3, #0
 8018bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018bb2:	f7ff fe8a 	bl	80188ca <__multadd>
 8018bb6:	4607      	mov	r7, r0
 8018bb8:	10ad      	asrs	r5, r5, #2
 8018bba:	d035      	beq.n	8018c28 <__pow5mult+0x90>
 8018bbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018bbe:	b93c      	cbnz	r4, 8018bd0 <__pow5mult+0x38>
 8018bc0:	2010      	movs	r0, #16
 8018bc2:	f7ff fe1d 	bl	8018800 <malloc>
 8018bc6:	6270      	str	r0, [r6, #36]	; 0x24
 8018bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018bcc:	6004      	str	r4, [r0, #0]
 8018bce:	60c4      	str	r4, [r0, #12]
 8018bd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018bd8:	b94c      	cbnz	r4, 8018bee <__pow5mult+0x56>
 8018bda:	f240 2171 	movw	r1, #625	; 0x271
 8018bde:	4630      	mov	r0, r6
 8018be0:	f7ff ff3a 	bl	8018a58 <__i2b>
 8018be4:	2300      	movs	r3, #0
 8018be6:	f8c8 0008 	str.w	r0, [r8, #8]
 8018bea:	4604      	mov	r4, r0
 8018bec:	6003      	str	r3, [r0, #0]
 8018bee:	f04f 0800 	mov.w	r8, #0
 8018bf2:	07eb      	lsls	r3, r5, #31
 8018bf4:	d50a      	bpl.n	8018c0c <__pow5mult+0x74>
 8018bf6:	4639      	mov	r1, r7
 8018bf8:	4622      	mov	r2, r4
 8018bfa:	4630      	mov	r0, r6
 8018bfc:	f7ff ff35 	bl	8018a6a <__multiply>
 8018c00:	4639      	mov	r1, r7
 8018c02:	4681      	mov	r9, r0
 8018c04:	4630      	mov	r0, r6
 8018c06:	f7ff fe49 	bl	801889c <_Bfree>
 8018c0a:	464f      	mov	r7, r9
 8018c0c:	106d      	asrs	r5, r5, #1
 8018c0e:	d00b      	beq.n	8018c28 <__pow5mult+0x90>
 8018c10:	6820      	ldr	r0, [r4, #0]
 8018c12:	b938      	cbnz	r0, 8018c24 <__pow5mult+0x8c>
 8018c14:	4622      	mov	r2, r4
 8018c16:	4621      	mov	r1, r4
 8018c18:	4630      	mov	r0, r6
 8018c1a:	f7ff ff26 	bl	8018a6a <__multiply>
 8018c1e:	6020      	str	r0, [r4, #0]
 8018c20:	f8c0 8000 	str.w	r8, [r0]
 8018c24:	4604      	mov	r4, r0
 8018c26:	e7e4      	b.n	8018bf2 <__pow5mult+0x5a>
 8018c28:	4638      	mov	r0, r7
 8018c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c2e:	bf00      	nop
 8018c30:	0801a7c8 	.word	0x0801a7c8

08018c34 <__lshift>:
 8018c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c38:	460c      	mov	r4, r1
 8018c3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018c3e:	6923      	ldr	r3, [r4, #16]
 8018c40:	6849      	ldr	r1, [r1, #4]
 8018c42:	eb0a 0903 	add.w	r9, sl, r3
 8018c46:	68a3      	ldr	r3, [r4, #8]
 8018c48:	4607      	mov	r7, r0
 8018c4a:	4616      	mov	r6, r2
 8018c4c:	f109 0501 	add.w	r5, r9, #1
 8018c50:	42ab      	cmp	r3, r5
 8018c52:	db32      	blt.n	8018cba <__lshift+0x86>
 8018c54:	4638      	mov	r0, r7
 8018c56:	f7ff fded 	bl	8018834 <_Balloc>
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	4680      	mov	r8, r0
 8018c5e:	f100 0114 	add.w	r1, r0, #20
 8018c62:	461a      	mov	r2, r3
 8018c64:	4553      	cmp	r3, sl
 8018c66:	db2b      	blt.n	8018cc0 <__lshift+0x8c>
 8018c68:	6920      	ldr	r0, [r4, #16]
 8018c6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018c6e:	f104 0314 	add.w	r3, r4, #20
 8018c72:	f016 021f 	ands.w	r2, r6, #31
 8018c76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018c7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018c7e:	d025      	beq.n	8018ccc <__lshift+0x98>
 8018c80:	f1c2 0e20 	rsb	lr, r2, #32
 8018c84:	2000      	movs	r0, #0
 8018c86:	681e      	ldr	r6, [r3, #0]
 8018c88:	468a      	mov	sl, r1
 8018c8a:	4096      	lsls	r6, r2
 8018c8c:	4330      	orrs	r0, r6
 8018c8e:	f84a 0b04 	str.w	r0, [sl], #4
 8018c92:	f853 0b04 	ldr.w	r0, [r3], #4
 8018c96:	459c      	cmp	ip, r3
 8018c98:	fa20 f00e 	lsr.w	r0, r0, lr
 8018c9c:	d814      	bhi.n	8018cc8 <__lshift+0x94>
 8018c9e:	6048      	str	r0, [r1, #4]
 8018ca0:	b108      	cbz	r0, 8018ca6 <__lshift+0x72>
 8018ca2:	f109 0502 	add.w	r5, r9, #2
 8018ca6:	3d01      	subs	r5, #1
 8018ca8:	4638      	mov	r0, r7
 8018caa:	f8c8 5010 	str.w	r5, [r8, #16]
 8018cae:	4621      	mov	r1, r4
 8018cb0:	f7ff fdf4 	bl	801889c <_Bfree>
 8018cb4:	4640      	mov	r0, r8
 8018cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cba:	3101      	adds	r1, #1
 8018cbc:	005b      	lsls	r3, r3, #1
 8018cbe:	e7c7      	b.n	8018c50 <__lshift+0x1c>
 8018cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018cc4:	3301      	adds	r3, #1
 8018cc6:	e7cd      	b.n	8018c64 <__lshift+0x30>
 8018cc8:	4651      	mov	r1, sl
 8018cca:	e7dc      	b.n	8018c86 <__lshift+0x52>
 8018ccc:	3904      	subs	r1, #4
 8018cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8018cd6:	459c      	cmp	ip, r3
 8018cd8:	d8f9      	bhi.n	8018cce <__lshift+0x9a>
 8018cda:	e7e4      	b.n	8018ca6 <__lshift+0x72>

08018cdc <__mcmp>:
 8018cdc:	6903      	ldr	r3, [r0, #16]
 8018cde:	690a      	ldr	r2, [r1, #16]
 8018ce0:	1a9b      	subs	r3, r3, r2
 8018ce2:	b530      	push	{r4, r5, lr}
 8018ce4:	d10c      	bne.n	8018d00 <__mcmp+0x24>
 8018ce6:	0092      	lsls	r2, r2, #2
 8018ce8:	3014      	adds	r0, #20
 8018cea:	3114      	adds	r1, #20
 8018cec:	1884      	adds	r4, r0, r2
 8018cee:	4411      	add	r1, r2
 8018cf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018cf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018cf8:	4295      	cmp	r5, r2
 8018cfa:	d003      	beq.n	8018d04 <__mcmp+0x28>
 8018cfc:	d305      	bcc.n	8018d0a <__mcmp+0x2e>
 8018cfe:	2301      	movs	r3, #1
 8018d00:	4618      	mov	r0, r3
 8018d02:	bd30      	pop	{r4, r5, pc}
 8018d04:	42a0      	cmp	r0, r4
 8018d06:	d3f3      	bcc.n	8018cf0 <__mcmp+0x14>
 8018d08:	e7fa      	b.n	8018d00 <__mcmp+0x24>
 8018d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d0e:	e7f7      	b.n	8018d00 <__mcmp+0x24>

08018d10 <__mdiff>:
 8018d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d14:	460d      	mov	r5, r1
 8018d16:	4607      	mov	r7, r0
 8018d18:	4611      	mov	r1, r2
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	4614      	mov	r4, r2
 8018d1e:	f7ff ffdd 	bl	8018cdc <__mcmp>
 8018d22:	1e06      	subs	r6, r0, #0
 8018d24:	d108      	bne.n	8018d38 <__mdiff+0x28>
 8018d26:	4631      	mov	r1, r6
 8018d28:	4638      	mov	r0, r7
 8018d2a:	f7ff fd83 	bl	8018834 <_Balloc>
 8018d2e:	2301      	movs	r3, #1
 8018d30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d38:	bfa4      	itt	ge
 8018d3a:	4623      	movge	r3, r4
 8018d3c:	462c      	movge	r4, r5
 8018d3e:	4638      	mov	r0, r7
 8018d40:	6861      	ldr	r1, [r4, #4]
 8018d42:	bfa6      	itte	ge
 8018d44:	461d      	movge	r5, r3
 8018d46:	2600      	movge	r6, #0
 8018d48:	2601      	movlt	r6, #1
 8018d4a:	f7ff fd73 	bl	8018834 <_Balloc>
 8018d4e:	692b      	ldr	r3, [r5, #16]
 8018d50:	60c6      	str	r6, [r0, #12]
 8018d52:	6926      	ldr	r6, [r4, #16]
 8018d54:	f105 0914 	add.w	r9, r5, #20
 8018d58:	f104 0214 	add.w	r2, r4, #20
 8018d5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018d60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018d64:	f100 0514 	add.w	r5, r0, #20
 8018d68:	f04f 0e00 	mov.w	lr, #0
 8018d6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018d70:	f859 4b04 	ldr.w	r4, [r9], #4
 8018d74:	fa1e f18a 	uxtah	r1, lr, sl
 8018d78:	b2a3      	uxth	r3, r4
 8018d7a:	1ac9      	subs	r1, r1, r3
 8018d7c:	0c23      	lsrs	r3, r4, #16
 8018d7e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018d82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018d86:	b289      	uxth	r1, r1
 8018d88:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018d8c:	45c8      	cmp	r8, r9
 8018d8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018d92:	4694      	mov	ip, r2
 8018d94:	f845 3b04 	str.w	r3, [r5], #4
 8018d98:	d8e8      	bhi.n	8018d6c <__mdiff+0x5c>
 8018d9a:	45bc      	cmp	ip, r7
 8018d9c:	d304      	bcc.n	8018da8 <__mdiff+0x98>
 8018d9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018da2:	b183      	cbz	r3, 8018dc6 <__mdiff+0xb6>
 8018da4:	6106      	str	r6, [r0, #16]
 8018da6:	e7c5      	b.n	8018d34 <__mdiff+0x24>
 8018da8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018dac:	fa1e f381 	uxtah	r3, lr, r1
 8018db0:	141a      	asrs	r2, r3, #16
 8018db2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018db6:	b29b      	uxth	r3, r3
 8018db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018dbc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018dc0:	f845 3b04 	str.w	r3, [r5], #4
 8018dc4:	e7e9      	b.n	8018d9a <__mdiff+0x8a>
 8018dc6:	3e01      	subs	r6, #1
 8018dc8:	e7e9      	b.n	8018d9e <__mdiff+0x8e>
	...

08018dcc <__ulp>:
 8018dcc:	4b12      	ldr	r3, [pc, #72]	; (8018e18 <__ulp+0x4c>)
 8018dce:	ee10 2a90 	vmov	r2, s1
 8018dd2:	401a      	ands	r2, r3
 8018dd4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	dd04      	ble.n	8018de6 <__ulp+0x1a>
 8018ddc:	2000      	movs	r0, #0
 8018dde:	4619      	mov	r1, r3
 8018de0:	ec41 0b10 	vmov	d0, r0, r1
 8018de4:	4770      	bx	lr
 8018de6:	425b      	negs	r3, r3
 8018de8:	151b      	asrs	r3, r3, #20
 8018dea:	2b13      	cmp	r3, #19
 8018dec:	f04f 0000 	mov.w	r0, #0
 8018df0:	f04f 0100 	mov.w	r1, #0
 8018df4:	dc04      	bgt.n	8018e00 <__ulp+0x34>
 8018df6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018dfa:	fa42 f103 	asr.w	r1, r2, r3
 8018dfe:	e7ef      	b.n	8018de0 <__ulp+0x14>
 8018e00:	3b14      	subs	r3, #20
 8018e02:	2b1e      	cmp	r3, #30
 8018e04:	f04f 0201 	mov.w	r2, #1
 8018e08:	bfda      	itte	le
 8018e0a:	f1c3 031f 	rsble	r3, r3, #31
 8018e0e:	fa02 f303 	lslle.w	r3, r2, r3
 8018e12:	4613      	movgt	r3, r2
 8018e14:	4618      	mov	r0, r3
 8018e16:	e7e3      	b.n	8018de0 <__ulp+0x14>
 8018e18:	7ff00000 	.word	0x7ff00000

08018e1c <__b2d>:
 8018e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e1e:	6905      	ldr	r5, [r0, #16]
 8018e20:	f100 0714 	add.w	r7, r0, #20
 8018e24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018e28:	1f2e      	subs	r6, r5, #4
 8018e2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018e2e:	4620      	mov	r0, r4
 8018e30:	f7ff fdc4 	bl	80189bc <__hi0bits>
 8018e34:	f1c0 0320 	rsb	r3, r0, #32
 8018e38:	280a      	cmp	r0, #10
 8018e3a:	600b      	str	r3, [r1, #0]
 8018e3c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018eb4 <__b2d+0x98>
 8018e40:	dc14      	bgt.n	8018e6c <__b2d+0x50>
 8018e42:	f1c0 0e0b 	rsb	lr, r0, #11
 8018e46:	fa24 f10e 	lsr.w	r1, r4, lr
 8018e4a:	42b7      	cmp	r7, r6
 8018e4c:	ea41 030c 	orr.w	r3, r1, ip
 8018e50:	bf34      	ite	cc
 8018e52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e56:	2100      	movcs	r1, #0
 8018e58:	3015      	adds	r0, #21
 8018e5a:	fa04 f000 	lsl.w	r0, r4, r0
 8018e5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8018e62:	ea40 0201 	orr.w	r2, r0, r1
 8018e66:	ec43 2b10 	vmov	d0, r2, r3
 8018e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e6c:	42b7      	cmp	r7, r6
 8018e6e:	bf3a      	itte	cc
 8018e70:	f1a5 0608 	subcc.w	r6, r5, #8
 8018e74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e78:	2100      	movcs	r1, #0
 8018e7a:	380b      	subs	r0, #11
 8018e7c:	d015      	beq.n	8018eaa <__b2d+0x8e>
 8018e7e:	4084      	lsls	r4, r0
 8018e80:	f1c0 0520 	rsb	r5, r0, #32
 8018e84:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018e88:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018e8c:	42be      	cmp	r6, r7
 8018e8e:	fa21 fc05 	lsr.w	ip, r1, r5
 8018e92:	ea44 030c 	orr.w	r3, r4, ip
 8018e96:	bf8c      	ite	hi
 8018e98:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018e9c:	2400      	movls	r4, #0
 8018e9e:	fa01 f000 	lsl.w	r0, r1, r0
 8018ea2:	40ec      	lsrs	r4, r5
 8018ea4:	ea40 0204 	orr.w	r2, r0, r4
 8018ea8:	e7dd      	b.n	8018e66 <__b2d+0x4a>
 8018eaa:	ea44 030c 	orr.w	r3, r4, ip
 8018eae:	460a      	mov	r2, r1
 8018eb0:	e7d9      	b.n	8018e66 <__b2d+0x4a>
 8018eb2:	bf00      	nop
 8018eb4:	3ff00000 	.word	0x3ff00000

08018eb8 <__d2b>:
 8018eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ebc:	460e      	mov	r6, r1
 8018ebe:	2101      	movs	r1, #1
 8018ec0:	ec59 8b10 	vmov	r8, r9, d0
 8018ec4:	4615      	mov	r5, r2
 8018ec6:	f7ff fcb5 	bl	8018834 <_Balloc>
 8018eca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018ece:	4607      	mov	r7, r0
 8018ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018ed4:	bb34      	cbnz	r4, 8018f24 <__d2b+0x6c>
 8018ed6:	9301      	str	r3, [sp, #4]
 8018ed8:	f1b8 0300 	subs.w	r3, r8, #0
 8018edc:	d027      	beq.n	8018f2e <__d2b+0x76>
 8018ede:	a802      	add	r0, sp, #8
 8018ee0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018ee4:	f7ff fd89 	bl	80189fa <__lo0bits>
 8018ee8:	9900      	ldr	r1, [sp, #0]
 8018eea:	b1f0      	cbz	r0, 8018f2a <__d2b+0x72>
 8018eec:	9a01      	ldr	r2, [sp, #4]
 8018eee:	f1c0 0320 	rsb	r3, r0, #32
 8018ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8018ef6:	430b      	orrs	r3, r1
 8018ef8:	40c2      	lsrs	r2, r0
 8018efa:	617b      	str	r3, [r7, #20]
 8018efc:	9201      	str	r2, [sp, #4]
 8018efe:	9b01      	ldr	r3, [sp, #4]
 8018f00:	61bb      	str	r3, [r7, #24]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	bf14      	ite	ne
 8018f06:	2102      	movne	r1, #2
 8018f08:	2101      	moveq	r1, #1
 8018f0a:	6139      	str	r1, [r7, #16]
 8018f0c:	b1c4      	cbz	r4, 8018f40 <__d2b+0x88>
 8018f0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018f12:	4404      	add	r4, r0
 8018f14:	6034      	str	r4, [r6, #0]
 8018f16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f1a:	6028      	str	r0, [r5, #0]
 8018f1c:	4638      	mov	r0, r7
 8018f1e:	b003      	add	sp, #12
 8018f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f28:	e7d5      	b.n	8018ed6 <__d2b+0x1e>
 8018f2a:	6179      	str	r1, [r7, #20]
 8018f2c:	e7e7      	b.n	8018efe <__d2b+0x46>
 8018f2e:	a801      	add	r0, sp, #4
 8018f30:	f7ff fd63 	bl	80189fa <__lo0bits>
 8018f34:	9b01      	ldr	r3, [sp, #4]
 8018f36:	617b      	str	r3, [r7, #20]
 8018f38:	2101      	movs	r1, #1
 8018f3a:	6139      	str	r1, [r7, #16]
 8018f3c:	3020      	adds	r0, #32
 8018f3e:	e7e5      	b.n	8018f0c <__d2b+0x54>
 8018f40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018f44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018f48:	6030      	str	r0, [r6, #0]
 8018f4a:	6918      	ldr	r0, [r3, #16]
 8018f4c:	f7ff fd36 	bl	80189bc <__hi0bits>
 8018f50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018f54:	e7e1      	b.n	8018f1a <__d2b+0x62>

08018f56 <__ratio>:
 8018f56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f5a:	4688      	mov	r8, r1
 8018f5c:	4669      	mov	r1, sp
 8018f5e:	4681      	mov	r9, r0
 8018f60:	f7ff ff5c 	bl	8018e1c <__b2d>
 8018f64:	a901      	add	r1, sp, #4
 8018f66:	4640      	mov	r0, r8
 8018f68:	ec57 6b10 	vmov	r6, r7, d0
 8018f6c:	f7ff ff56 	bl	8018e1c <__b2d>
 8018f70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018f74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018f78:	eba3 0c02 	sub.w	ip, r3, r2
 8018f7c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018f80:	1a9b      	subs	r3, r3, r2
 8018f82:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018f86:	ec5b ab10 	vmov	sl, fp, d0
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	bfce      	itee	gt
 8018f8e:	463a      	movgt	r2, r7
 8018f90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018f94:	465a      	movle	r2, fp
 8018f96:	4659      	mov	r1, fp
 8018f98:	463d      	mov	r5, r7
 8018f9a:	bfd4      	ite	le
 8018f9c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018fa0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018fa4:	4630      	mov	r0, r6
 8018fa6:	ee10 2a10 	vmov	r2, s0
 8018faa:	460b      	mov	r3, r1
 8018fac:	4629      	mov	r1, r5
 8018fae:	f7ef fb85 	bl	80086bc <__aeabi_ddiv>
 8018fb2:	ec41 0b10 	vmov	d0, r0, r1
 8018fb6:	b003      	add	sp, #12
 8018fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018fbc <__copybits>:
 8018fbc:	3901      	subs	r1, #1
 8018fbe:	b510      	push	{r4, lr}
 8018fc0:	1149      	asrs	r1, r1, #5
 8018fc2:	6914      	ldr	r4, [r2, #16]
 8018fc4:	3101      	adds	r1, #1
 8018fc6:	f102 0314 	add.w	r3, r2, #20
 8018fca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018fce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018fd2:	42a3      	cmp	r3, r4
 8018fd4:	4602      	mov	r2, r0
 8018fd6:	d303      	bcc.n	8018fe0 <__copybits+0x24>
 8018fd8:	2300      	movs	r3, #0
 8018fda:	428a      	cmp	r2, r1
 8018fdc:	d305      	bcc.n	8018fea <__copybits+0x2e>
 8018fde:	bd10      	pop	{r4, pc}
 8018fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fe4:	f840 2b04 	str.w	r2, [r0], #4
 8018fe8:	e7f3      	b.n	8018fd2 <__copybits+0x16>
 8018fea:	f842 3b04 	str.w	r3, [r2], #4
 8018fee:	e7f4      	b.n	8018fda <__copybits+0x1e>

08018ff0 <__any_on>:
 8018ff0:	f100 0214 	add.w	r2, r0, #20
 8018ff4:	6900      	ldr	r0, [r0, #16]
 8018ff6:	114b      	asrs	r3, r1, #5
 8018ff8:	4298      	cmp	r0, r3
 8018ffa:	b510      	push	{r4, lr}
 8018ffc:	db11      	blt.n	8019022 <__any_on+0x32>
 8018ffe:	dd0a      	ble.n	8019016 <__any_on+0x26>
 8019000:	f011 011f 	ands.w	r1, r1, #31
 8019004:	d007      	beq.n	8019016 <__any_on+0x26>
 8019006:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801900a:	fa24 f001 	lsr.w	r0, r4, r1
 801900e:	fa00 f101 	lsl.w	r1, r0, r1
 8019012:	428c      	cmp	r4, r1
 8019014:	d10b      	bne.n	801902e <__any_on+0x3e>
 8019016:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801901a:	4293      	cmp	r3, r2
 801901c:	d803      	bhi.n	8019026 <__any_on+0x36>
 801901e:	2000      	movs	r0, #0
 8019020:	bd10      	pop	{r4, pc}
 8019022:	4603      	mov	r3, r0
 8019024:	e7f7      	b.n	8019016 <__any_on+0x26>
 8019026:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801902a:	2900      	cmp	r1, #0
 801902c:	d0f5      	beq.n	801901a <__any_on+0x2a>
 801902e:	2001      	movs	r0, #1
 8019030:	e7f6      	b.n	8019020 <__any_on+0x30>

08019032 <_calloc_r>:
 8019032:	b538      	push	{r3, r4, r5, lr}
 8019034:	fb02 f401 	mul.w	r4, r2, r1
 8019038:	4621      	mov	r1, r4
 801903a:	f000 f857 	bl	80190ec <_malloc_r>
 801903e:	4605      	mov	r5, r0
 8019040:	b118      	cbz	r0, 801904a <_calloc_r+0x18>
 8019042:	4622      	mov	r2, r4
 8019044:	2100      	movs	r1, #0
 8019046:	f7fc f91c 	bl	8015282 <memset>
 801904a:	4628      	mov	r0, r5
 801904c:	bd38      	pop	{r3, r4, r5, pc}
	...

08019050 <_free_r>:
 8019050:	b538      	push	{r3, r4, r5, lr}
 8019052:	4605      	mov	r5, r0
 8019054:	2900      	cmp	r1, #0
 8019056:	d045      	beq.n	80190e4 <_free_r+0x94>
 8019058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801905c:	1f0c      	subs	r4, r1, #4
 801905e:	2b00      	cmp	r3, #0
 8019060:	bfb8      	it	lt
 8019062:	18e4      	addlt	r4, r4, r3
 8019064:	f001 f8e1 	bl	801a22a <__malloc_lock>
 8019068:	4a1f      	ldr	r2, [pc, #124]	; (80190e8 <_free_r+0x98>)
 801906a:	6813      	ldr	r3, [r2, #0]
 801906c:	4610      	mov	r0, r2
 801906e:	b933      	cbnz	r3, 801907e <_free_r+0x2e>
 8019070:	6063      	str	r3, [r4, #4]
 8019072:	6014      	str	r4, [r2, #0]
 8019074:	4628      	mov	r0, r5
 8019076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801907a:	f001 b8d7 	b.w	801a22c <__malloc_unlock>
 801907e:	42a3      	cmp	r3, r4
 8019080:	d90c      	bls.n	801909c <_free_r+0x4c>
 8019082:	6821      	ldr	r1, [r4, #0]
 8019084:	1862      	adds	r2, r4, r1
 8019086:	4293      	cmp	r3, r2
 8019088:	bf04      	itt	eq
 801908a:	681a      	ldreq	r2, [r3, #0]
 801908c:	685b      	ldreq	r3, [r3, #4]
 801908e:	6063      	str	r3, [r4, #4]
 8019090:	bf04      	itt	eq
 8019092:	1852      	addeq	r2, r2, r1
 8019094:	6022      	streq	r2, [r4, #0]
 8019096:	6004      	str	r4, [r0, #0]
 8019098:	e7ec      	b.n	8019074 <_free_r+0x24>
 801909a:	4613      	mov	r3, r2
 801909c:	685a      	ldr	r2, [r3, #4]
 801909e:	b10a      	cbz	r2, 80190a4 <_free_r+0x54>
 80190a0:	42a2      	cmp	r2, r4
 80190a2:	d9fa      	bls.n	801909a <_free_r+0x4a>
 80190a4:	6819      	ldr	r1, [r3, #0]
 80190a6:	1858      	adds	r0, r3, r1
 80190a8:	42a0      	cmp	r0, r4
 80190aa:	d10b      	bne.n	80190c4 <_free_r+0x74>
 80190ac:	6820      	ldr	r0, [r4, #0]
 80190ae:	4401      	add	r1, r0
 80190b0:	1858      	adds	r0, r3, r1
 80190b2:	4282      	cmp	r2, r0
 80190b4:	6019      	str	r1, [r3, #0]
 80190b6:	d1dd      	bne.n	8019074 <_free_r+0x24>
 80190b8:	6810      	ldr	r0, [r2, #0]
 80190ba:	6852      	ldr	r2, [r2, #4]
 80190bc:	605a      	str	r2, [r3, #4]
 80190be:	4401      	add	r1, r0
 80190c0:	6019      	str	r1, [r3, #0]
 80190c2:	e7d7      	b.n	8019074 <_free_r+0x24>
 80190c4:	d902      	bls.n	80190cc <_free_r+0x7c>
 80190c6:	230c      	movs	r3, #12
 80190c8:	602b      	str	r3, [r5, #0]
 80190ca:	e7d3      	b.n	8019074 <_free_r+0x24>
 80190cc:	6820      	ldr	r0, [r4, #0]
 80190ce:	1821      	adds	r1, r4, r0
 80190d0:	428a      	cmp	r2, r1
 80190d2:	bf04      	itt	eq
 80190d4:	6811      	ldreq	r1, [r2, #0]
 80190d6:	6852      	ldreq	r2, [r2, #4]
 80190d8:	6062      	str	r2, [r4, #4]
 80190da:	bf04      	itt	eq
 80190dc:	1809      	addeq	r1, r1, r0
 80190de:	6021      	streq	r1, [r4, #0]
 80190e0:	605c      	str	r4, [r3, #4]
 80190e2:	e7c7      	b.n	8019074 <_free_r+0x24>
 80190e4:	bd38      	pop	{r3, r4, r5, pc}
 80190e6:	bf00      	nop
 80190e8:	2000fed0 	.word	0x2000fed0

080190ec <_malloc_r>:
 80190ec:	b570      	push	{r4, r5, r6, lr}
 80190ee:	1ccd      	adds	r5, r1, #3
 80190f0:	f025 0503 	bic.w	r5, r5, #3
 80190f4:	3508      	adds	r5, #8
 80190f6:	2d0c      	cmp	r5, #12
 80190f8:	bf38      	it	cc
 80190fa:	250c      	movcc	r5, #12
 80190fc:	2d00      	cmp	r5, #0
 80190fe:	4606      	mov	r6, r0
 8019100:	db01      	blt.n	8019106 <_malloc_r+0x1a>
 8019102:	42a9      	cmp	r1, r5
 8019104:	d903      	bls.n	801910e <_malloc_r+0x22>
 8019106:	230c      	movs	r3, #12
 8019108:	6033      	str	r3, [r6, #0]
 801910a:	2000      	movs	r0, #0
 801910c:	bd70      	pop	{r4, r5, r6, pc}
 801910e:	f001 f88c 	bl	801a22a <__malloc_lock>
 8019112:	4a21      	ldr	r2, [pc, #132]	; (8019198 <_malloc_r+0xac>)
 8019114:	6814      	ldr	r4, [r2, #0]
 8019116:	4621      	mov	r1, r4
 8019118:	b991      	cbnz	r1, 8019140 <_malloc_r+0x54>
 801911a:	4c20      	ldr	r4, [pc, #128]	; (801919c <_malloc_r+0xb0>)
 801911c:	6823      	ldr	r3, [r4, #0]
 801911e:	b91b      	cbnz	r3, 8019128 <_malloc_r+0x3c>
 8019120:	4630      	mov	r0, r6
 8019122:	f000 fe35 	bl	8019d90 <_sbrk_r>
 8019126:	6020      	str	r0, [r4, #0]
 8019128:	4629      	mov	r1, r5
 801912a:	4630      	mov	r0, r6
 801912c:	f000 fe30 	bl	8019d90 <_sbrk_r>
 8019130:	1c43      	adds	r3, r0, #1
 8019132:	d124      	bne.n	801917e <_malloc_r+0x92>
 8019134:	230c      	movs	r3, #12
 8019136:	6033      	str	r3, [r6, #0]
 8019138:	4630      	mov	r0, r6
 801913a:	f001 f877 	bl	801a22c <__malloc_unlock>
 801913e:	e7e4      	b.n	801910a <_malloc_r+0x1e>
 8019140:	680b      	ldr	r3, [r1, #0]
 8019142:	1b5b      	subs	r3, r3, r5
 8019144:	d418      	bmi.n	8019178 <_malloc_r+0x8c>
 8019146:	2b0b      	cmp	r3, #11
 8019148:	d90f      	bls.n	801916a <_malloc_r+0x7e>
 801914a:	600b      	str	r3, [r1, #0]
 801914c:	50cd      	str	r5, [r1, r3]
 801914e:	18cc      	adds	r4, r1, r3
 8019150:	4630      	mov	r0, r6
 8019152:	f001 f86b 	bl	801a22c <__malloc_unlock>
 8019156:	f104 000b 	add.w	r0, r4, #11
 801915a:	1d23      	adds	r3, r4, #4
 801915c:	f020 0007 	bic.w	r0, r0, #7
 8019160:	1ac3      	subs	r3, r0, r3
 8019162:	d0d3      	beq.n	801910c <_malloc_r+0x20>
 8019164:	425a      	negs	r2, r3
 8019166:	50e2      	str	r2, [r4, r3]
 8019168:	e7d0      	b.n	801910c <_malloc_r+0x20>
 801916a:	428c      	cmp	r4, r1
 801916c:	684b      	ldr	r3, [r1, #4]
 801916e:	bf16      	itet	ne
 8019170:	6063      	strne	r3, [r4, #4]
 8019172:	6013      	streq	r3, [r2, #0]
 8019174:	460c      	movne	r4, r1
 8019176:	e7eb      	b.n	8019150 <_malloc_r+0x64>
 8019178:	460c      	mov	r4, r1
 801917a:	6849      	ldr	r1, [r1, #4]
 801917c:	e7cc      	b.n	8019118 <_malloc_r+0x2c>
 801917e:	1cc4      	adds	r4, r0, #3
 8019180:	f024 0403 	bic.w	r4, r4, #3
 8019184:	42a0      	cmp	r0, r4
 8019186:	d005      	beq.n	8019194 <_malloc_r+0xa8>
 8019188:	1a21      	subs	r1, r4, r0
 801918a:	4630      	mov	r0, r6
 801918c:	f000 fe00 	bl	8019d90 <_sbrk_r>
 8019190:	3001      	adds	r0, #1
 8019192:	d0cf      	beq.n	8019134 <_malloc_r+0x48>
 8019194:	6025      	str	r5, [r4, #0]
 8019196:	e7db      	b.n	8019150 <_malloc_r+0x64>
 8019198:	2000fed0 	.word	0x2000fed0
 801919c:	2000fed4 	.word	0x2000fed4

080191a0 <__ssputs_r>:
 80191a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191a4:	688e      	ldr	r6, [r1, #8]
 80191a6:	429e      	cmp	r6, r3
 80191a8:	4682      	mov	sl, r0
 80191aa:	460c      	mov	r4, r1
 80191ac:	4690      	mov	r8, r2
 80191ae:	4699      	mov	r9, r3
 80191b0:	d837      	bhi.n	8019222 <__ssputs_r+0x82>
 80191b2:	898a      	ldrh	r2, [r1, #12]
 80191b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80191b8:	d031      	beq.n	801921e <__ssputs_r+0x7e>
 80191ba:	6825      	ldr	r5, [r4, #0]
 80191bc:	6909      	ldr	r1, [r1, #16]
 80191be:	1a6f      	subs	r7, r5, r1
 80191c0:	6965      	ldr	r5, [r4, #20]
 80191c2:	2302      	movs	r3, #2
 80191c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80191cc:	f109 0301 	add.w	r3, r9, #1
 80191d0:	443b      	add	r3, r7
 80191d2:	429d      	cmp	r5, r3
 80191d4:	bf38      	it	cc
 80191d6:	461d      	movcc	r5, r3
 80191d8:	0553      	lsls	r3, r2, #21
 80191da:	d530      	bpl.n	801923e <__ssputs_r+0x9e>
 80191dc:	4629      	mov	r1, r5
 80191de:	f7ff ff85 	bl	80190ec <_malloc_r>
 80191e2:	4606      	mov	r6, r0
 80191e4:	b950      	cbnz	r0, 80191fc <__ssputs_r+0x5c>
 80191e6:	230c      	movs	r3, #12
 80191e8:	f8ca 3000 	str.w	r3, [sl]
 80191ec:	89a3      	ldrh	r3, [r4, #12]
 80191ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191f2:	81a3      	strh	r3, [r4, #12]
 80191f4:	f04f 30ff 	mov.w	r0, #4294967295
 80191f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191fc:	463a      	mov	r2, r7
 80191fe:	6921      	ldr	r1, [r4, #16]
 8019200:	f7fc f834 	bl	801526c <memcpy>
 8019204:	89a3      	ldrh	r3, [r4, #12]
 8019206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801920a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801920e:	81a3      	strh	r3, [r4, #12]
 8019210:	6126      	str	r6, [r4, #16]
 8019212:	6165      	str	r5, [r4, #20]
 8019214:	443e      	add	r6, r7
 8019216:	1bed      	subs	r5, r5, r7
 8019218:	6026      	str	r6, [r4, #0]
 801921a:	60a5      	str	r5, [r4, #8]
 801921c:	464e      	mov	r6, r9
 801921e:	454e      	cmp	r6, r9
 8019220:	d900      	bls.n	8019224 <__ssputs_r+0x84>
 8019222:	464e      	mov	r6, r9
 8019224:	4632      	mov	r2, r6
 8019226:	4641      	mov	r1, r8
 8019228:	6820      	ldr	r0, [r4, #0]
 801922a:	f000 ffe5 	bl	801a1f8 <memmove>
 801922e:	68a3      	ldr	r3, [r4, #8]
 8019230:	1b9b      	subs	r3, r3, r6
 8019232:	60a3      	str	r3, [r4, #8]
 8019234:	6823      	ldr	r3, [r4, #0]
 8019236:	441e      	add	r6, r3
 8019238:	6026      	str	r6, [r4, #0]
 801923a:	2000      	movs	r0, #0
 801923c:	e7dc      	b.n	80191f8 <__ssputs_r+0x58>
 801923e:	462a      	mov	r2, r5
 8019240:	f000 fff5 	bl	801a22e <_realloc_r>
 8019244:	4606      	mov	r6, r0
 8019246:	2800      	cmp	r0, #0
 8019248:	d1e2      	bne.n	8019210 <__ssputs_r+0x70>
 801924a:	6921      	ldr	r1, [r4, #16]
 801924c:	4650      	mov	r0, sl
 801924e:	f7ff feff 	bl	8019050 <_free_r>
 8019252:	e7c8      	b.n	80191e6 <__ssputs_r+0x46>

08019254 <_svfiprintf_r>:
 8019254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019258:	461d      	mov	r5, r3
 801925a:	898b      	ldrh	r3, [r1, #12]
 801925c:	061f      	lsls	r7, r3, #24
 801925e:	b09d      	sub	sp, #116	; 0x74
 8019260:	4680      	mov	r8, r0
 8019262:	460c      	mov	r4, r1
 8019264:	4616      	mov	r6, r2
 8019266:	d50f      	bpl.n	8019288 <_svfiprintf_r+0x34>
 8019268:	690b      	ldr	r3, [r1, #16]
 801926a:	b96b      	cbnz	r3, 8019288 <_svfiprintf_r+0x34>
 801926c:	2140      	movs	r1, #64	; 0x40
 801926e:	f7ff ff3d 	bl	80190ec <_malloc_r>
 8019272:	6020      	str	r0, [r4, #0]
 8019274:	6120      	str	r0, [r4, #16]
 8019276:	b928      	cbnz	r0, 8019284 <_svfiprintf_r+0x30>
 8019278:	230c      	movs	r3, #12
 801927a:	f8c8 3000 	str.w	r3, [r8]
 801927e:	f04f 30ff 	mov.w	r0, #4294967295
 8019282:	e0c8      	b.n	8019416 <_svfiprintf_r+0x1c2>
 8019284:	2340      	movs	r3, #64	; 0x40
 8019286:	6163      	str	r3, [r4, #20]
 8019288:	2300      	movs	r3, #0
 801928a:	9309      	str	r3, [sp, #36]	; 0x24
 801928c:	2320      	movs	r3, #32
 801928e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019292:	2330      	movs	r3, #48	; 0x30
 8019294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019298:	9503      	str	r5, [sp, #12]
 801929a:	f04f 0b01 	mov.w	fp, #1
 801929e:	4637      	mov	r7, r6
 80192a0:	463d      	mov	r5, r7
 80192a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80192a6:	b10b      	cbz	r3, 80192ac <_svfiprintf_r+0x58>
 80192a8:	2b25      	cmp	r3, #37	; 0x25
 80192aa:	d13e      	bne.n	801932a <_svfiprintf_r+0xd6>
 80192ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80192b0:	d00b      	beq.n	80192ca <_svfiprintf_r+0x76>
 80192b2:	4653      	mov	r3, sl
 80192b4:	4632      	mov	r2, r6
 80192b6:	4621      	mov	r1, r4
 80192b8:	4640      	mov	r0, r8
 80192ba:	f7ff ff71 	bl	80191a0 <__ssputs_r>
 80192be:	3001      	adds	r0, #1
 80192c0:	f000 80a4 	beq.w	801940c <_svfiprintf_r+0x1b8>
 80192c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192c6:	4453      	add	r3, sl
 80192c8:	9309      	str	r3, [sp, #36]	; 0x24
 80192ca:	783b      	ldrb	r3, [r7, #0]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	f000 809d 	beq.w	801940c <_svfiprintf_r+0x1b8>
 80192d2:	2300      	movs	r3, #0
 80192d4:	f04f 32ff 	mov.w	r2, #4294967295
 80192d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80192dc:	9304      	str	r3, [sp, #16]
 80192de:	9307      	str	r3, [sp, #28]
 80192e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80192e4:	931a      	str	r3, [sp, #104]	; 0x68
 80192e6:	462f      	mov	r7, r5
 80192e8:	2205      	movs	r2, #5
 80192ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80192ee:	4850      	ldr	r0, [pc, #320]	; (8019430 <_svfiprintf_r+0x1dc>)
 80192f0:	f7ee feae 	bl	8008050 <memchr>
 80192f4:	9b04      	ldr	r3, [sp, #16]
 80192f6:	b9d0      	cbnz	r0, 801932e <_svfiprintf_r+0xda>
 80192f8:	06d9      	lsls	r1, r3, #27
 80192fa:	bf44      	itt	mi
 80192fc:	2220      	movmi	r2, #32
 80192fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019302:	071a      	lsls	r2, r3, #28
 8019304:	bf44      	itt	mi
 8019306:	222b      	movmi	r2, #43	; 0x2b
 8019308:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801930c:	782a      	ldrb	r2, [r5, #0]
 801930e:	2a2a      	cmp	r2, #42	; 0x2a
 8019310:	d015      	beq.n	801933e <_svfiprintf_r+0xea>
 8019312:	9a07      	ldr	r2, [sp, #28]
 8019314:	462f      	mov	r7, r5
 8019316:	2000      	movs	r0, #0
 8019318:	250a      	movs	r5, #10
 801931a:	4639      	mov	r1, r7
 801931c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019320:	3b30      	subs	r3, #48	; 0x30
 8019322:	2b09      	cmp	r3, #9
 8019324:	d94d      	bls.n	80193c2 <_svfiprintf_r+0x16e>
 8019326:	b1b8      	cbz	r0, 8019358 <_svfiprintf_r+0x104>
 8019328:	e00f      	b.n	801934a <_svfiprintf_r+0xf6>
 801932a:	462f      	mov	r7, r5
 801932c:	e7b8      	b.n	80192a0 <_svfiprintf_r+0x4c>
 801932e:	4a40      	ldr	r2, [pc, #256]	; (8019430 <_svfiprintf_r+0x1dc>)
 8019330:	1a80      	subs	r0, r0, r2
 8019332:	fa0b f000 	lsl.w	r0, fp, r0
 8019336:	4318      	orrs	r0, r3
 8019338:	9004      	str	r0, [sp, #16]
 801933a:	463d      	mov	r5, r7
 801933c:	e7d3      	b.n	80192e6 <_svfiprintf_r+0x92>
 801933e:	9a03      	ldr	r2, [sp, #12]
 8019340:	1d11      	adds	r1, r2, #4
 8019342:	6812      	ldr	r2, [r2, #0]
 8019344:	9103      	str	r1, [sp, #12]
 8019346:	2a00      	cmp	r2, #0
 8019348:	db01      	blt.n	801934e <_svfiprintf_r+0xfa>
 801934a:	9207      	str	r2, [sp, #28]
 801934c:	e004      	b.n	8019358 <_svfiprintf_r+0x104>
 801934e:	4252      	negs	r2, r2
 8019350:	f043 0302 	orr.w	r3, r3, #2
 8019354:	9207      	str	r2, [sp, #28]
 8019356:	9304      	str	r3, [sp, #16]
 8019358:	783b      	ldrb	r3, [r7, #0]
 801935a:	2b2e      	cmp	r3, #46	; 0x2e
 801935c:	d10c      	bne.n	8019378 <_svfiprintf_r+0x124>
 801935e:	787b      	ldrb	r3, [r7, #1]
 8019360:	2b2a      	cmp	r3, #42	; 0x2a
 8019362:	d133      	bne.n	80193cc <_svfiprintf_r+0x178>
 8019364:	9b03      	ldr	r3, [sp, #12]
 8019366:	1d1a      	adds	r2, r3, #4
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	9203      	str	r2, [sp, #12]
 801936c:	2b00      	cmp	r3, #0
 801936e:	bfb8      	it	lt
 8019370:	f04f 33ff 	movlt.w	r3, #4294967295
 8019374:	3702      	adds	r7, #2
 8019376:	9305      	str	r3, [sp, #20]
 8019378:	4d2e      	ldr	r5, [pc, #184]	; (8019434 <_svfiprintf_r+0x1e0>)
 801937a:	7839      	ldrb	r1, [r7, #0]
 801937c:	2203      	movs	r2, #3
 801937e:	4628      	mov	r0, r5
 8019380:	f7ee fe66 	bl	8008050 <memchr>
 8019384:	b138      	cbz	r0, 8019396 <_svfiprintf_r+0x142>
 8019386:	2340      	movs	r3, #64	; 0x40
 8019388:	1b40      	subs	r0, r0, r5
 801938a:	fa03 f000 	lsl.w	r0, r3, r0
 801938e:	9b04      	ldr	r3, [sp, #16]
 8019390:	4303      	orrs	r3, r0
 8019392:	3701      	adds	r7, #1
 8019394:	9304      	str	r3, [sp, #16]
 8019396:	7839      	ldrb	r1, [r7, #0]
 8019398:	4827      	ldr	r0, [pc, #156]	; (8019438 <_svfiprintf_r+0x1e4>)
 801939a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801939e:	2206      	movs	r2, #6
 80193a0:	1c7e      	adds	r6, r7, #1
 80193a2:	f7ee fe55 	bl	8008050 <memchr>
 80193a6:	2800      	cmp	r0, #0
 80193a8:	d038      	beq.n	801941c <_svfiprintf_r+0x1c8>
 80193aa:	4b24      	ldr	r3, [pc, #144]	; (801943c <_svfiprintf_r+0x1e8>)
 80193ac:	bb13      	cbnz	r3, 80193f4 <_svfiprintf_r+0x1a0>
 80193ae:	9b03      	ldr	r3, [sp, #12]
 80193b0:	3307      	adds	r3, #7
 80193b2:	f023 0307 	bic.w	r3, r3, #7
 80193b6:	3308      	adds	r3, #8
 80193b8:	9303      	str	r3, [sp, #12]
 80193ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193bc:	444b      	add	r3, r9
 80193be:	9309      	str	r3, [sp, #36]	; 0x24
 80193c0:	e76d      	b.n	801929e <_svfiprintf_r+0x4a>
 80193c2:	fb05 3202 	mla	r2, r5, r2, r3
 80193c6:	2001      	movs	r0, #1
 80193c8:	460f      	mov	r7, r1
 80193ca:	e7a6      	b.n	801931a <_svfiprintf_r+0xc6>
 80193cc:	2300      	movs	r3, #0
 80193ce:	3701      	adds	r7, #1
 80193d0:	9305      	str	r3, [sp, #20]
 80193d2:	4619      	mov	r1, r3
 80193d4:	250a      	movs	r5, #10
 80193d6:	4638      	mov	r0, r7
 80193d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193dc:	3a30      	subs	r2, #48	; 0x30
 80193de:	2a09      	cmp	r2, #9
 80193e0:	d903      	bls.n	80193ea <_svfiprintf_r+0x196>
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d0c8      	beq.n	8019378 <_svfiprintf_r+0x124>
 80193e6:	9105      	str	r1, [sp, #20]
 80193e8:	e7c6      	b.n	8019378 <_svfiprintf_r+0x124>
 80193ea:	fb05 2101 	mla	r1, r5, r1, r2
 80193ee:	2301      	movs	r3, #1
 80193f0:	4607      	mov	r7, r0
 80193f2:	e7f0      	b.n	80193d6 <_svfiprintf_r+0x182>
 80193f4:	ab03      	add	r3, sp, #12
 80193f6:	9300      	str	r3, [sp, #0]
 80193f8:	4622      	mov	r2, r4
 80193fa:	4b11      	ldr	r3, [pc, #68]	; (8019440 <_svfiprintf_r+0x1ec>)
 80193fc:	a904      	add	r1, sp, #16
 80193fe:	4640      	mov	r0, r8
 8019400:	f7fb ffdc 	bl	80153bc <_printf_float>
 8019404:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019408:	4681      	mov	r9, r0
 801940a:	d1d6      	bne.n	80193ba <_svfiprintf_r+0x166>
 801940c:	89a3      	ldrh	r3, [r4, #12]
 801940e:	065b      	lsls	r3, r3, #25
 8019410:	f53f af35 	bmi.w	801927e <_svfiprintf_r+0x2a>
 8019414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019416:	b01d      	add	sp, #116	; 0x74
 8019418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801941c:	ab03      	add	r3, sp, #12
 801941e:	9300      	str	r3, [sp, #0]
 8019420:	4622      	mov	r2, r4
 8019422:	4b07      	ldr	r3, [pc, #28]	; (8019440 <_svfiprintf_r+0x1ec>)
 8019424:	a904      	add	r1, sp, #16
 8019426:	4640      	mov	r0, r8
 8019428:	f7fc fa7e 	bl	8015928 <_printf_i>
 801942c:	e7ea      	b.n	8019404 <_svfiprintf_r+0x1b0>
 801942e:	bf00      	nop
 8019430:	0801a7d4 	.word	0x0801a7d4
 8019434:	0801a7da 	.word	0x0801a7da
 8019438:	0801a7de 	.word	0x0801a7de
 801943c:	080153bd 	.word	0x080153bd
 8019440:	080191a1 	.word	0x080191a1

08019444 <__sfputc_r>:
 8019444:	6893      	ldr	r3, [r2, #8]
 8019446:	3b01      	subs	r3, #1
 8019448:	2b00      	cmp	r3, #0
 801944a:	b410      	push	{r4}
 801944c:	6093      	str	r3, [r2, #8]
 801944e:	da08      	bge.n	8019462 <__sfputc_r+0x1e>
 8019450:	6994      	ldr	r4, [r2, #24]
 8019452:	42a3      	cmp	r3, r4
 8019454:	db01      	blt.n	801945a <__sfputc_r+0x16>
 8019456:	290a      	cmp	r1, #10
 8019458:	d103      	bne.n	8019462 <__sfputc_r+0x1e>
 801945a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801945e:	f7fd bd75 	b.w	8016f4c <__swbuf_r>
 8019462:	6813      	ldr	r3, [r2, #0]
 8019464:	1c58      	adds	r0, r3, #1
 8019466:	6010      	str	r0, [r2, #0]
 8019468:	7019      	strb	r1, [r3, #0]
 801946a:	4608      	mov	r0, r1
 801946c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019470:	4770      	bx	lr

08019472 <__sfputs_r>:
 8019472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019474:	4606      	mov	r6, r0
 8019476:	460f      	mov	r7, r1
 8019478:	4614      	mov	r4, r2
 801947a:	18d5      	adds	r5, r2, r3
 801947c:	42ac      	cmp	r4, r5
 801947e:	d101      	bne.n	8019484 <__sfputs_r+0x12>
 8019480:	2000      	movs	r0, #0
 8019482:	e007      	b.n	8019494 <__sfputs_r+0x22>
 8019484:	463a      	mov	r2, r7
 8019486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801948a:	4630      	mov	r0, r6
 801948c:	f7ff ffda 	bl	8019444 <__sfputc_r>
 8019490:	1c43      	adds	r3, r0, #1
 8019492:	d1f3      	bne.n	801947c <__sfputs_r+0xa>
 8019494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019498 <_vfiprintf_r>:
 8019498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801949c:	460c      	mov	r4, r1
 801949e:	b09d      	sub	sp, #116	; 0x74
 80194a0:	4617      	mov	r7, r2
 80194a2:	461d      	mov	r5, r3
 80194a4:	4606      	mov	r6, r0
 80194a6:	b118      	cbz	r0, 80194b0 <_vfiprintf_r+0x18>
 80194a8:	6983      	ldr	r3, [r0, #24]
 80194aa:	b90b      	cbnz	r3, 80194b0 <_vfiprintf_r+0x18>
 80194ac:	f7fe fd56 	bl	8017f5c <__sinit>
 80194b0:	4b7c      	ldr	r3, [pc, #496]	; (80196a4 <_vfiprintf_r+0x20c>)
 80194b2:	429c      	cmp	r4, r3
 80194b4:	d158      	bne.n	8019568 <_vfiprintf_r+0xd0>
 80194b6:	6874      	ldr	r4, [r6, #4]
 80194b8:	89a3      	ldrh	r3, [r4, #12]
 80194ba:	0718      	lsls	r0, r3, #28
 80194bc:	d55e      	bpl.n	801957c <_vfiprintf_r+0xe4>
 80194be:	6923      	ldr	r3, [r4, #16]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d05b      	beq.n	801957c <_vfiprintf_r+0xe4>
 80194c4:	2300      	movs	r3, #0
 80194c6:	9309      	str	r3, [sp, #36]	; 0x24
 80194c8:	2320      	movs	r3, #32
 80194ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194ce:	2330      	movs	r3, #48	; 0x30
 80194d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80194d4:	9503      	str	r5, [sp, #12]
 80194d6:	f04f 0b01 	mov.w	fp, #1
 80194da:	46b8      	mov	r8, r7
 80194dc:	4645      	mov	r5, r8
 80194de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80194e2:	b10b      	cbz	r3, 80194e8 <_vfiprintf_r+0x50>
 80194e4:	2b25      	cmp	r3, #37	; 0x25
 80194e6:	d154      	bne.n	8019592 <_vfiprintf_r+0xfa>
 80194e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80194ec:	d00b      	beq.n	8019506 <_vfiprintf_r+0x6e>
 80194ee:	4653      	mov	r3, sl
 80194f0:	463a      	mov	r2, r7
 80194f2:	4621      	mov	r1, r4
 80194f4:	4630      	mov	r0, r6
 80194f6:	f7ff ffbc 	bl	8019472 <__sfputs_r>
 80194fa:	3001      	adds	r0, #1
 80194fc:	f000 80c2 	beq.w	8019684 <_vfiprintf_r+0x1ec>
 8019500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019502:	4453      	add	r3, sl
 8019504:	9309      	str	r3, [sp, #36]	; 0x24
 8019506:	f898 3000 	ldrb.w	r3, [r8]
 801950a:	2b00      	cmp	r3, #0
 801950c:	f000 80ba 	beq.w	8019684 <_vfiprintf_r+0x1ec>
 8019510:	2300      	movs	r3, #0
 8019512:	f04f 32ff 	mov.w	r2, #4294967295
 8019516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801951a:	9304      	str	r3, [sp, #16]
 801951c:	9307      	str	r3, [sp, #28]
 801951e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019522:	931a      	str	r3, [sp, #104]	; 0x68
 8019524:	46a8      	mov	r8, r5
 8019526:	2205      	movs	r2, #5
 8019528:	f818 1b01 	ldrb.w	r1, [r8], #1
 801952c:	485e      	ldr	r0, [pc, #376]	; (80196a8 <_vfiprintf_r+0x210>)
 801952e:	f7ee fd8f 	bl	8008050 <memchr>
 8019532:	9b04      	ldr	r3, [sp, #16]
 8019534:	bb78      	cbnz	r0, 8019596 <_vfiprintf_r+0xfe>
 8019536:	06d9      	lsls	r1, r3, #27
 8019538:	bf44      	itt	mi
 801953a:	2220      	movmi	r2, #32
 801953c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019540:	071a      	lsls	r2, r3, #28
 8019542:	bf44      	itt	mi
 8019544:	222b      	movmi	r2, #43	; 0x2b
 8019546:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801954a:	782a      	ldrb	r2, [r5, #0]
 801954c:	2a2a      	cmp	r2, #42	; 0x2a
 801954e:	d02a      	beq.n	80195a6 <_vfiprintf_r+0x10e>
 8019550:	9a07      	ldr	r2, [sp, #28]
 8019552:	46a8      	mov	r8, r5
 8019554:	2000      	movs	r0, #0
 8019556:	250a      	movs	r5, #10
 8019558:	4641      	mov	r1, r8
 801955a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801955e:	3b30      	subs	r3, #48	; 0x30
 8019560:	2b09      	cmp	r3, #9
 8019562:	d969      	bls.n	8019638 <_vfiprintf_r+0x1a0>
 8019564:	b360      	cbz	r0, 80195c0 <_vfiprintf_r+0x128>
 8019566:	e024      	b.n	80195b2 <_vfiprintf_r+0x11a>
 8019568:	4b50      	ldr	r3, [pc, #320]	; (80196ac <_vfiprintf_r+0x214>)
 801956a:	429c      	cmp	r4, r3
 801956c:	d101      	bne.n	8019572 <_vfiprintf_r+0xda>
 801956e:	68b4      	ldr	r4, [r6, #8]
 8019570:	e7a2      	b.n	80194b8 <_vfiprintf_r+0x20>
 8019572:	4b4f      	ldr	r3, [pc, #316]	; (80196b0 <_vfiprintf_r+0x218>)
 8019574:	429c      	cmp	r4, r3
 8019576:	bf08      	it	eq
 8019578:	68f4      	ldreq	r4, [r6, #12]
 801957a:	e79d      	b.n	80194b8 <_vfiprintf_r+0x20>
 801957c:	4621      	mov	r1, r4
 801957e:	4630      	mov	r0, r6
 8019580:	f7fd fd36 	bl	8016ff0 <__swsetup_r>
 8019584:	2800      	cmp	r0, #0
 8019586:	d09d      	beq.n	80194c4 <_vfiprintf_r+0x2c>
 8019588:	f04f 30ff 	mov.w	r0, #4294967295
 801958c:	b01d      	add	sp, #116	; 0x74
 801958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019592:	46a8      	mov	r8, r5
 8019594:	e7a2      	b.n	80194dc <_vfiprintf_r+0x44>
 8019596:	4a44      	ldr	r2, [pc, #272]	; (80196a8 <_vfiprintf_r+0x210>)
 8019598:	1a80      	subs	r0, r0, r2
 801959a:	fa0b f000 	lsl.w	r0, fp, r0
 801959e:	4318      	orrs	r0, r3
 80195a0:	9004      	str	r0, [sp, #16]
 80195a2:	4645      	mov	r5, r8
 80195a4:	e7be      	b.n	8019524 <_vfiprintf_r+0x8c>
 80195a6:	9a03      	ldr	r2, [sp, #12]
 80195a8:	1d11      	adds	r1, r2, #4
 80195aa:	6812      	ldr	r2, [r2, #0]
 80195ac:	9103      	str	r1, [sp, #12]
 80195ae:	2a00      	cmp	r2, #0
 80195b0:	db01      	blt.n	80195b6 <_vfiprintf_r+0x11e>
 80195b2:	9207      	str	r2, [sp, #28]
 80195b4:	e004      	b.n	80195c0 <_vfiprintf_r+0x128>
 80195b6:	4252      	negs	r2, r2
 80195b8:	f043 0302 	orr.w	r3, r3, #2
 80195bc:	9207      	str	r2, [sp, #28]
 80195be:	9304      	str	r3, [sp, #16]
 80195c0:	f898 3000 	ldrb.w	r3, [r8]
 80195c4:	2b2e      	cmp	r3, #46	; 0x2e
 80195c6:	d10e      	bne.n	80195e6 <_vfiprintf_r+0x14e>
 80195c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80195cc:	2b2a      	cmp	r3, #42	; 0x2a
 80195ce:	d138      	bne.n	8019642 <_vfiprintf_r+0x1aa>
 80195d0:	9b03      	ldr	r3, [sp, #12]
 80195d2:	1d1a      	adds	r2, r3, #4
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	9203      	str	r2, [sp, #12]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	bfb8      	it	lt
 80195dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80195e0:	f108 0802 	add.w	r8, r8, #2
 80195e4:	9305      	str	r3, [sp, #20]
 80195e6:	4d33      	ldr	r5, [pc, #204]	; (80196b4 <_vfiprintf_r+0x21c>)
 80195e8:	f898 1000 	ldrb.w	r1, [r8]
 80195ec:	2203      	movs	r2, #3
 80195ee:	4628      	mov	r0, r5
 80195f0:	f7ee fd2e 	bl	8008050 <memchr>
 80195f4:	b140      	cbz	r0, 8019608 <_vfiprintf_r+0x170>
 80195f6:	2340      	movs	r3, #64	; 0x40
 80195f8:	1b40      	subs	r0, r0, r5
 80195fa:	fa03 f000 	lsl.w	r0, r3, r0
 80195fe:	9b04      	ldr	r3, [sp, #16]
 8019600:	4303      	orrs	r3, r0
 8019602:	f108 0801 	add.w	r8, r8, #1
 8019606:	9304      	str	r3, [sp, #16]
 8019608:	f898 1000 	ldrb.w	r1, [r8]
 801960c:	482a      	ldr	r0, [pc, #168]	; (80196b8 <_vfiprintf_r+0x220>)
 801960e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019612:	2206      	movs	r2, #6
 8019614:	f108 0701 	add.w	r7, r8, #1
 8019618:	f7ee fd1a 	bl	8008050 <memchr>
 801961c:	2800      	cmp	r0, #0
 801961e:	d037      	beq.n	8019690 <_vfiprintf_r+0x1f8>
 8019620:	4b26      	ldr	r3, [pc, #152]	; (80196bc <_vfiprintf_r+0x224>)
 8019622:	bb1b      	cbnz	r3, 801966c <_vfiprintf_r+0x1d4>
 8019624:	9b03      	ldr	r3, [sp, #12]
 8019626:	3307      	adds	r3, #7
 8019628:	f023 0307 	bic.w	r3, r3, #7
 801962c:	3308      	adds	r3, #8
 801962e:	9303      	str	r3, [sp, #12]
 8019630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019632:	444b      	add	r3, r9
 8019634:	9309      	str	r3, [sp, #36]	; 0x24
 8019636:	e750      	b.n	80194da <_vfiprintf_r+0x42>
 8019638:	fb05 3202 	mla	r2, r5, r2, r3
 801963c:	2001      	movs	r0, #1
 801963e:	4688      	mov	r8, r1
 8019640:	e78a      	b.n	8019558 <_vfiprintf_r+0xc0>
 8019642:	2300      	movs	r3, #0
 8019644:	f108 0801 	add.w	r8, r8, #1
 8019648:	9305      	str	r3, [sp, #20]
 801964a:	4619      	mov	r1, r3
 801964c:	250a      	movs	r5, #10
 801964e:	4640      	mov	r0, r8
 8019650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019654:	3a30      	subs	r2, #48	; 0x30
 8019656:	2a09      	cmp	r2, #9
 8019658:	d903      	bls.n	8019662 <_vfiprintf_r+0x1ca>
 801965a:	2b00      	cmp	r3, #0
 801965c:	d0c3      	beq.n	80195e6 <_vfiprintf_r+0x14e>
 801965e:	9105      	str	r1, [sp, #20]
 8019660:	e7c1      	b.n	80195e6 <_vfiprintf_r+0x14e>
 8019662:	fb05 2101 	mla	r1, r5, r1, r2
 8019666:	2301      	movs	r3, #1
 8019668:	4680      	mov	r8, r0
 801966a:	e7f0      	b.n	801964e <_vfiprintf_r+0x1b6>
 801966c:	ab03      	add	r3, sp, #12
 801966e:	9300      	str	r3, [sp, #0]
 8019670:	4622      	mov	r2, r4
 8019672:	4b13      	ldr	r3, [pc, #76]	; (80196c0 <_vfiprintf_r+0x228>)
 8019674:	a904      	add	r1, sp, #16
 8019676:	4630      	mov	r0, r6
 8019678:	f7fb fea0 	bl	80153bc <_printf_float>
 801967c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019680:	4681      	mov	r9, r0
 8019682:	d1d5      	bne.n	8019630 <_vfiprintf_r+0x198>
 8019684:	89a3      	ldrh	r3, [r4, #12]
 8019686:	065b      	lsls	r3, r3, #25
 8019688:	f53f af7e 	bmi.w	8019588 <_vfiprintf_r+0xf0>
 801968c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801968e:	e77d      	b.n	801958c <_vfiprintf_r+0xf4>
 8019690:	ab03      	add	r3, sp, #12
 8019692:	9300      	str	r3, [sp, #0]
 8019694:	4622      	mov	r2, r4
 8019696:	4b0a      	ldr	r3, [pc, #40]	; (80196c0 <_vfiprintf_r+0x228>)
 8019698:	a904      	add	r1, sp, #16
 801969a:	4630      	mov	r0, r6
 801969c:	f7fc f944 	bl	8015928 <_printf_i>
 80196a0:	e7ec      	b.n	801967c <_vfiprintf_r+0x1e4>
 80196a2:	bf00      	nop
 80196a4:	0801a688 	.word	0x0801a688
 80196a8:	0801a7d4 	.word	0x0801a7d4
 80196ac:	0801a6a8 	.word	0x0801a6a8
 80196b0:	0801a668 	.word	0x0801a668
 80196b4:	0801a7da 	.word	0x0801a7da
 80196b8:	0801a7de 	.word	0x0801a7de
 80196bc:	080153bd 	.word	0x080153bd
 80196c0:	08019473 	.word	0x08019473

080196c4 <__svfiscanf_r>:
 80196c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80196cc:	460c      	mov	r4, r1
 80196ce:	2100      	movs	r1, #0
 80196d0:	9144      	str	r1, [sp, #272]	; 0x110
 80196d2:	9145      	str	r1, [sp, #276]	; 0x114
 80196d4:	499f      	ldr	r1, [pc, #636]	; (8019954 <__svfiscanf_r+0x290>)
 80196d6:	91a0      	str	r1, [sp, #640]	; 0x280
 80196d8:	f10d 0804 	add.w	r8, sp, #4
 80196dc:	499e      	ldr	r1, [pc, #632]	; (8019958 <__svfiscanf_r+0x294>)
 80196de:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801995c <__svfiscanf_r+0x298>
 80196e2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80196e6:	4606      	mov	r6, r0
 80196e8:	4692      	mov	sl, r2
 80196ea:	91a1      	str	r1, [sp, #644]	; 0x284
 80196ec:	9300      	str	r3, [sp, #0]
 80196ee:	270a      	movs	r7, #10
 80196f0:	f89a 3000 	ldrb.w	r3, [sl]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	f000 812a 	beq.w	801994e <__svfiscanf_r+0x28a>
 80196fa:	4655      	mov	r5, sl
 80196fc:	f7fe fffe 	bl	80186fc <__locale_ctype_ptr>
 8019700:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019704:	4458      	add	r0, fp
 8019706:	7843      	ldrb	r3, [r0, #1]
 8019708:	f013 0308 	ands.w	r3, r3, #8
 801970c:	d01c      	beq.n	8019748 <__svfiscanf_r+0x84>
 801970e:	6863      	ldr	r3, [r4, #4]
 8019710:	2b00      	cmp	r3, #0
 8019712:	dd12      	ble.n	801973a <__svfiscanf_r+0x76>
 8019714:	f7fe fff2 	bl	80186fc <__locale_ctype_ptr>
 8019718:	6823      	ldr	r3, [r4, #0]
 801971a:	781a      	ldrb	r2, [r3, #0]
 801971c:	4410      	add	r0, r2
 801971e:	7842      	ldrb	r2, [r0, #1]
 8019720:	0712      	lsls	r2, r2, #28
 8019722:	d401      	bmi.n	8019728 <__svfiscanf_r+0x64>
 8019724:	46aa      	mov	sl, r5
 8019726:	e7e3      	b.n	80196f0 <__svfiscanf_r+0x2c>
 8019728:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801972a:	3201      	adds	r2, #1
 801972c:	9245      	str	r2, [sp, #276]	; 0x114
 801972e:	6862      	ldr	r2, [r4, #4]
 8019730:	3301      	adds	r3, #1
 8019732:	3a01      	subs	r2, #1
 8019734:	6062      	str	r2, [r4, #4]
 8019736:	6023      	str	r3, [r4, #0]
 8019738:	e7e9      	b.n	801970e <__svfiscanf_r+0x4a>
 801973a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801973c:	4621      	mov	r1, r4
 801973e:	4630      	mov	r0, r6
 8019740:	4798      	blx	r3
 8019742:	2800      	cmp	r0, #0
 8019744:	d0e6      	beq.n	8019714 <__svfiscanf_r+0x50>
 8019746:	e7ed      	b.n	8019724 <__svfiscanf_r+0x60>
 8019748:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801974c:	f040 8082 	bne.w	8019854 <__svfiscanf_r+0x190>
 8019750:	9343      	str	r3, [sp, #268]	; 0x10c
 8019752:	9341      	str	r3, [sp, #260]	; 0x104
 8019754:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019758:	2b2a      	cmp	r3, #42	; 0x2a
 801975a:	d103      	bne.n	8019764 <__svfiscanf_r+0xa0>
 801975c:	2310      	movs	r3, #16
 801975e:	9341      	str	r3, [sp, #260]	; 0x104
 8019760:	f10a 0502 	add.w	r5, sl, #2
 8019764:	46aa      	mov	sl, r5
 8019766:	f815 1b01 	ldrb.w	r1, [r5], #1
 801976a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801976e:	2a09      	cmp	r2, #9
 8019770:	d922      	bls.n	80197b8 <__svfiscanf_r+0xf4>
 8019772:	2203      	movs	r2, #3
 8019774:	4879      	ldr	r0, [pc, #484]	; (801995c <__svfiscanf_r+0x298>)
 8019776:	f7ee fc6b 	bl	8008050 <memchr>
 801977a:	b138      	cbz	r0, 801978c <__svfiscanf_r+0xc8>
 801977c:	eba0 0309 	sub.w	r3, r0, r9
 8019780:	2001      	movs	r0, #1
 8019782:	4098      	lsls	r0, r3
 8019784:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019786:	4318      	orrs	r0, r3
 8019788:	9041      	str	r0, [sp, #260]	; 0x104
 801978a:	46aa      	mov	sl, r5
 801978c:	f89a 3000 	ldrb.w	r3, [sl]
 8019790:	2b67      	cmp	r3, #103	; 0x67
 8019792:	f10a 0501 	add.w	r5, sl, #1
 8019796:	d82b      	bhi.n	80197f0 <__svfiscanf_r+0x12c>
 8019798:	2b65      	cmp	r3, #101	; 0x65
 801979a:	f080 809f 	bcs.w	80198dc <__svfiscanf_r+0x218>
 801979e:	2b47      	cmp	r3, #71	; 0x47
 80197a0:	d810      	bhi.n	80197c4 <__svfiscanf_r+0x100>
 80197a2:	2b45      	cmp	r3, #69	; 0x45
 80197a4:	f080 809a 	bcs.w	80198dc <__svfiscanf_r+0x218>
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d06c      	beq.n	8019886 <__svfiscanf_r+0x1c2>
 80197ac:	2b25      	cmp	r3, #37	; 0x25
 80197ae:	d051      	beq.n	8019854 <__svfiscanf_r+0x190>
 80197b0:	2303      	movs	r3, #3
 80197b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80197b4:	9742      	str	r7, [sp, #264]	; 0x108
 80197b6:	e027      	b.n	8019808 <__svfiscanf_r+0x144>
 80197b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80197ba:	fb07 1303 	mla	r3, r7, r3, r1
 80197be:	3b30      	subs	r3, #48	; 0x30
 80197c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80197c2:	e7cf      	b.n	8019764 <__svfiscanf_r+0xa0>
 80197c4:	2b5b      	cmp	r3, #91	; 0x5b
 80197c6:	d06a      	beq.n	801989e <__svfiscanf_r+0x1da>
 80197c8:	d80c      	bhi.n	80197e4 <__svfiscanf_r+0x120>
 80197ca:	2b58      	cmp	r3, #88	; 0x58
 80197cc:	d1f0      	bne.n	80197b0 <__svfiscanf_r+0xec>
 80197ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80197d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197d4:	9241      	str	r2, [sp, #260]	; 0x104
 80197d6:	2210      	movs	r2, #16
 80197d8:	9242      	str	r2, [sp, #264]	; 0x108
 80197da:	2b6e      	cmp	r3, #110	; 0x6e
 80197dc:	bf8c      	ite	hi
 80197de:	2304      	movhi	r3, #4
 80197e0:	2303      	movls	r3, #3
 80197e2:	e010      	b.n	8019806 <__svfiscanf_r+0x142>
 80197e4:	2b63      	cmp	r3, #99	; 0x63
 80197e6:	d065      	beq.n	80198b4 <__svfiscanf_r+0x1f0>
 80197e8:	2b64      	cmp	r3, #100	; 0x64
 80197ea:	d1e1      	bne.n	80197b0 <__svfiscanf_r+0xec>
 80197ec:	9742      	str	r7, [sp, #264]	; 0x108
 80197ee:	e7f4      	b.n	80197da <__svfiscanf_r+0x116>
 80197f0:	2b70      	cmp	r3, #112	; 0x70
 80197f2:	d04b      	beq.n	801988c <__svfiscanf_r+0x1c8>
 80197f4:	d826      	bhi.n	8019844 <__svfiscanf_r+0x180>
 80197f6:	2b6e      	cmp	r3, #110	; 0x6e
 80197f8:	d062      	beq.n	80198c0 <__svfiscanf_r+0x1fc>
 80197fa:	d84c      	bhi.n	8019896 <__svfiscanf_r+0x1d2>
 80197fc:	2b69      	cmp	r3, #105	; 0x69
 80197fe:	d1d7      	bne.n	80197b0 <__svfiscanf_r+0xec>
 8019800:	2300      	movs	r3, #0
 8019802:	9342      	str	r3, [sp, #264]	; 0x108
 8019804:	2303      	movs	r3, #3
 8019806:	9347      	str	r3, [sp, #284]	; 0x11c
 8019808:	6863      	ldr	r3, [r4, #4]
 801980a:	2b00      	cmp	r3, #0
 801980c:	dd68      	ble.n	80198e0 <__svfiscanf_r+0x21c>
 801980e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019810:	0659      	lsls	r1, r3, #25
 8019812:	d407      	bmi.n	8019824 <__svfiscanf_r+0x160>
 8019814:	f7fe ff72 	bl	80186fc <__locale_ctype_ptr>
 8019818:	6823      	ldr	r3, [r4, #0]
 801981a:	781a      	ldrb	r2, [r3, #0]
 801981c:	4410      	add	r0, r2
 801981e:	7842      	ldrb	r2, [r0, #1]
 8019820:	0712      	lsls	r2, r2, #28
 8019822:	d464      	bmi.n	80198ee <__svfiscanf_r+0x22a>
 8019824:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019826:	2b02      	cmp	r3, #2
 8019828:	dc73      	bgt.n	8019912 <__svfiscanf_r+0x24e>
 801982a:	466b      	mov	r3, sp
 801982c:	4622      	mov	r2, r4
 801982e:	a941      	add	r1, sp, #260	; 0x104
 8019830:	4630      	mov	r0, r6
 8019832:	f000 f8bf 	bl	80199b4 <_scanf_chars>
 8019836:	2801      	cmp	r0, #1
 8019838:	f000 8089 	beq.w	801994e <__svfiscanf_r+0x28a>
 801983c:	2802      	cmp	r0, #2
 801983e:	f47f af71 	bne.w	8019724 <__svfiscanf_r+0x60>
 8019842:	e01d      	b.n	8019880 <__svfiscanf_r+0x1bc>
 8019844:	2b75      	cmp	r3, #117	; 0x75
 8019846:	d0d1      	beq.n	80197ec <__svfiscanf_r+0x128>
 8019848:	2b78      	cmp	r3, #120	; 0x78
 801984a:	d0c0      	beq.n	80197ce <__svfiscanf_r+0x10a>
 801984c:	2b73      	cmp	r3, #115	; 0x73
 801984e:	d1af      	bne.n	80197b0 <__svfiscanf_r+0xec>
 8019850:	2302      	movs	r3, #2
 8019852:	e7d8      	b.n	8019806 <__svfiscanf_r+0x142>
 8019854:	6863      	ldr	r3, [r4, #4]
 8019856:	2b00      	cmp	r3, #0
 8019858:	dd0c      	ble.n	8019874 <__svfiscanf_r+0x1b0>
 801985a:	6823      	ldr	r3, [r4, #0]
 801985c:	781a      	ldrb	r2, [r3, #0]
 801985e:	455a      	cmp	r2, fp
 8019860:	d175      	bne.n	801994e <__svfiscanf_r+0x28a>
 8019862:	3301      	adds	r3, #1
 8019864:	6862      	ldr	r2, [r4, #4]
 8019866:	6023      	str	r3, [r4, #0]
 8019868:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801986a:	3a01      	subs	r2, #1
 801986c:	3301      	adds	r3, #1
 801986e:	6062      	str	r2, [r4, #4]
 8019870:	9345      	str	r3, [sp, #276]	; 0x114
 8019872:	e757      	b.n	8019724 <__svfiscanf_r+0x60>
 8019874:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019876:	4621      	mov	r1, r4
 8019878:	4630      	mov	r0, r6
 801987a:	4798      	blx	r3
 801987c:	2800      	cmp	r0, #0
 801987e:	d0ec      	beq.n	801985a <__svfiscanf_r+0x196>
 8019880:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019882:	2800      	cmp	r0, #0
 8019884:	d159      	bne.n	801993a <__svfiscanf_r+0x276>
 8019886:	f04f 30ff 	mov.w	r0, #4294967295
 801988a:	e05c      	b.n	8019946 <__svfiscanf_r+0x282>
 801988c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801988e:	f042 0220 	orr.w	r2, r2, #32
 8019892:	9241      	str	r2, [sp, #260]	; 0x104
 8019894:	e79b      	b.n	80197ce <__svfiscanf_r+0x10a>
 8019896:	2308      	movs	r3, #8
 8019898:	9342      	str	r3, [sp, #264]	; 0x108
 801989a:	2304      	movs	r3, #4
 801989c:	e7b3      	b.n	8019806 <__svfiscanf_r+0x142>
 801989e:	4629      	mov	r1, r5
 80198a0:	4640      	mov	r0, r8
 80198a2:	f000 fa85 	bl	8019db0 <__sccl>
 80198a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80198a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198ac:	9341      	str	r3, [sp, #260]	; 0x104
 80198ae:	4605      	mov	r5, r0
 80198b0:	2301      	movs	r3, #1
 80198b2:	e7a8      	b.n	8019806 <__svfiscanf_r+0x142>
 80198b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80198b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198ba:	9341      	str	r3, [sp, #260]	; 0x104
 80198bc:	2300      	movs	r3, #0
 80198be:	e7a2      	b.n	8019806 <__svfiscanf_r+0x142>
 80198c0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80198c2:	06c3      	lsls	r3, r0, #27
 80198c4:	f53f af2e 	bmi.w	8019724 <__svfiscanf_r+0x60>
 80198c8:	9b00      	ldr	r3, [sp, #0]
 80198ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198cc:	1d19      	adds	r1, r3, #4
 80198ce:	9100      	str	r1, [sp, #0]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	07c0      	lsls	r0, r0, #31
 80198d4:	bf4c      	ite	mi
 80198d6:	801a      	strhmi	r2, [r3, #0]
 80198d8:	601a      	strpl	r2, [r3, #0]
 80198da:	e723      	b.n	8019724 <__svfiscanf_r+0x60>
 80198dc:	2305      	movs	r3, #5
 80198de:	e792      	b.n	8019806 <__svfiscanf_r+0x142>
 80198e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198e2:	4621      	mov	r1, r4
 80198e4:	4630      	mov	r0, r6
 80198e6:	4798      	blx	r3
 80198e8:	2800      	cmp	r0, #0
 80198ea:	d090      	beq.n	801980e <__svfiscanf_r+0x14a>
 80198ec:	e7c8      	b.n	8019880 <__svfiscanf_r+0x1bc>
 80198ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198f0:	3201      	adds	r2, #1
 80198f2:	9245      	str	r2, [sp, #276]	; 0x114
 80198f4:	6862      	ldr	r2, [r4, #4]
 80198f6:	3a01      	subs	r2, #1
 80198f8:	2a00      	cmp	r2, #0
 80198fa:	6062      	str	r2, [r4, #4]
 80198fc:	dd02      	ble.n	8019904 <__svfiscanf_r+0x240>
 80198fe:	3301      	adds	r3, #1
 8019900:	6023      	str	r3, [r4, #0]
 8019902:	e787      	b.n	8019814 <__svfiscanf_r+0x150>
 8019904:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019906:	4621      	mov	r1, r4
 8019908:	4630      	mov	r0, r6
 801990a:	4798      	blx	r3
 801990c:	2800      	cmp	r0, #0
 801990e:	d081      	beq.n	8019814 <__svfiscanf_r+0x150>
 8019910:	e7b6      	b.n	8019880 <__svfiscanf_r+0x1bc>
 8019912:	2b04      	cmp	r3, #4
 8019914:	dc06      	bgt.n	8019924 <__svfiscanf_r+0x260>
 8019916:	466b      	mov	r3, sp
 8019918:	4622      	mov	r2, r4
 801991a:	a941      	add	r1, sp, #260	; 0x104
 801991c:	4630      	mov	r0, r6
 801991e:	f000 f8ad 	bl	8019a7c <_scanf_i>
 8019922:	e788      	b.n	8019836 <__svfiscanf_r+0x172>
 8019924:	4b0e      	ldr	r3, [pc, #56]	; (8019960 <__svfiscanf_r+0x29c>)
 8019926:	2b00      	cmp	r3, #0
 8019928:	f43f aefc 	beq.w	8019724 <__svfiscanf_r+0x60>
 801992c:	466b      	mov	r3, sp
 801992e:	4622      	mov	r2, r4
 8019930:	a941      	add	r1, sp, #260	; 0x104
 8019932:	4630      	mov	r0, r6
 8019934:	f7fc f90a 	bl	8015b4c <_scanf_float>
 8019938:	e77d      	b.n	8019836 <__svfiscanf_r+0x172>
 801993a:	89a3      	ldrh	r3, [r4, #12]
 801993c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019940:	bf18      	it	ne
 8019942:	f04f 30ff 	movne.w	r0, #4294967295
 8019946:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801994e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019950:	e7f9      	b.n	8019946 <__svfiscanf_r+0x282>
 8019952:	bf00      	nop
 8019954:	0801a04d 	.word	0x0801a04d
 8019958:	08019c79 	.word	0x08019c79
 801995c:	0801a7da 	.word	0x0801a7da
 8019960:	08015b4d 	.word	0x08015b4d

08019964 <_vfiscanf_r>:
 8019964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019968:	460c      	mov	r4, r1
 801996a:	4616      	mov	r6, r2
 801996c:	461f      	mov	r7, r3
 801996e:	4605      	mov	r5, r0
 8019970:	b118      	cbz	r0, 801997a <_vfiscanf_r+0x16>
 8019972:	6983      	ldr	r3, [r0, #24]
 8019974:	b90b      	cbnz	r3, 801997a <_vfiscanf_r+0x16>
 8019976:	f7fe faf1 	bl	8017f5c <__sinit>
 801997a:	4b0b      	ldr	r3, [pc, #44]	; (80199a8 <_vfiscanf_r+0x44>)
 801997c:	429c      	cmp	r4, r3
 801997e:	d108      	bne.n	8019992 <_vfiscanf_r+0x2e>
 8019980:	686c      	ldr	r4, [r5, #4]
 8019982:	463b      	mov	r3, r7
 8019984:	4632      	mov	r2, r6
 8019986:	4621      	mov	r1, r4
 8019988:	4628      	mov	r0, r5
 801998a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801998e:	f7ff be99 	b.w	80196c4 <__svfiscanf_r>
 8019992:	4b06      	ldr	r3, [pc, #24]	; (80199ac <_vfiscanf_r+0x48>)
 8019994:	429c      	cmp	r4, r3
 8019996:	d101      	bne.n	801999c <_vfiscanf_r+0x38>
 8019998:	68ac      	ldr	r4, [r5, #8]
 801999a:	e7f2      	b.n	8019982 <_vfiscanf_r+0x1e>
 801999c:	4b04      	ldr	r3, [pc, #16]	; (80199b0 <_vfiscanf_r+0x4c>)
 801999e:	429c      	cmp	r4, r3
 80199a0:	bf08      	it	eq
 80199a2:	68ec      	ldreq	r4, [r5, #12]
 80199a4:	e7ed      	b.n	8019982 <_vfiscanf_r+0x1e>
 80199a6:	bf00      	nop
 80199a8:	0801a688 	.word	0x0801a688
 80199ac:	0801a6a8 	.word	0x0801a6a8
 80199b0:	0801a668 	.word	0x0801a668

080199b4 <_scanf_chars>:
 80199b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199b8:	4615      	mov	r5, r2
 80199ba:	688a      	ldr	r2, [r1, #8]
 80199bc:	4680      	mov	r8, r0
 80199be:	460c      	mov	r4, r1
 80199c0:	b932      	cbnz	r2, 80199d0 <_scanf_chars+0x1c>
 80199c2:	698a      	ldr	r2, [r1, #24]
 80199c4:	2a00      	cmp	r2, #0
 80199c6:	bf14      	ite	ne
 80199c8:	f04f 32ff 	movne.w	r2, #4294967295
 80199cc:	2201      	moveq	r2, #1
 80199ce:	608a      	str	r2, [r1, #8]
 80199d0:	6822      	ldr	r2, [r4, #0]
 80199d2:	06d1      	lsls	r1, r2, #27
 80199d4:	bf5f      	itttt	pl
 80199d6:	681a      	ldrpl	r2, [r3, #0]
 80199d8:	1d11      	addpl	r1, r2, #4
 80199da:	6019      	strpl	r1, [r3, #0]
 80199dc:	6817      	ldrpl	r7, [r2, #0]
 80199de:	2600      	movs	r6, #0
 80199e0:	69a3      	ldr	r3, [r4, #24]
 80199e2:	b1db      	cbz	r3, 8019a1c <_scanf_chars+0x68>
 80199e4:	2b01      	cmp	r3, #1
 80199e6:	d107      	bne.n	80199f8 <_scanf_chars+0x44>
 80199e8:	682b      	ldr	r3, [r5, #0]
 80199ea:	6962      	ldr	r2, [r4, #20]
 80199ec:	781b      	ldrb	r3, [r3, #0]
 80199ee:	5cd3      	ldrb	r3, [r2, r3]
 80199f0:	b9a3      	cbnz	r3, 8019a1c <_scanf_chars+0x68>
 80199f2:	2e00      	cmp	r6, #0
 80199f4:	d132      	bne.n	8019a5c <_scanf_chars+0xa8>
 80199f6:	e006      	b.n	8019a06 <_scanf_chars+0x52>
 80199f8:	2b02      	cmp	r3, #2
 80199fa:	d007      	beq.n	8019a0c <_scanf_chars+0x58>
 80199fc:	2e00      	cmp	r6, #0
 80199fe:	d12d      	bne.n	8019a5c <_scanf_chars+0xa8>
 8019a00:	69a3      	ldr	r3, [r4, #24]
 8019a02:	2b01      	cmp	r3, #1
 8019a04:	d12a      	bne.n	8019a5c <_scanf_chars+0xa8>
 8019a06:	2001      	movs	r0, #1
 8019a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a0c:	f7fe fe76 	bl	80186fc <__locale_ctype_ptr>
 8019a10:	682b      	ldr	r3, [r5, #0]
 8019a12:	781b      	ldrb	r3, [r3, #0]
 8019a14:	4418      	add	r0, r3
 8019a16:	7843      	ldrb	r3, [r0, #1]
 8019a18:	071b      	lsls	r3, r3, #28
 8019a1a:	d4ef      	bmi.n	80199fc <_scanf_chars+0x48>
 8019a1c:	6823      	ldr	r3, [r4, #0]
 8019a1e:	06da      	lsls	r2, r3, #27
 8019a20:	bf5e      	ittt	pl
 8019a22:	682b      	ldrpl	r3, [r5, #0]
 8019a24:	781b      	ldrbpl	r3, [r3, #0]
 8019a26:	703b      	strbpl	r3, [r7, #0]
 8019a28:	682a      	ldr	r2, [r5, #0]
 8019a2a:	686b      	ldr	r3, [r5, #4]
 8019a2c:	f102 0201 	add.w	r2, r2, #1
 8019a30:	602a      	str	r2, [r5, #0]
 8019a32:	68a2      	ldr	r2, [r4, #8]
 8019a34:	f103 33ff 	add.w	r3, r3, #4294967295
 8019a38:	f102 32ff 	add.w	r2, r2, #4294967295
 8019a3c:	606b      	str	r3, [r5, #4]
 8019a3e:	f106 0601 	add.w	r6, r6, #1
 8019a42:	bf58      	it	pl
 8019a44:	3701      	addpl	r7, #1
 8019a46:	60a2      	str	r2, [r4, #8]
 8019a48:	b142      	cbz	r2, 8019a5c <_scanf_chars+0xa8>
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	dcc8      	bgt.n	80199e0 <_scanf_chars+0x2c>
 8019a4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019a52:	4629      	mov	r1, r5
 8019a54:	4640      	mov	r0, r8
 8019a56:	4798      	blx	r3
 8019a58:	2800      	cmp	r0, #0
 8019a5a:	d0c1      	beq.n	80199e0 <_scanf_chars+0x2c>
 8019a5c:	6823      	ldr	r3, [r4, #0]
 8019a5e:	f013 0310 	ands.w	r3, r3, #16
 8019a62:	d105      	bne.n	8019a70 <_scanf_chars+0xbc>
 8019a64:	68e2      	ldr	r2, [r4, #12]
 8019a66:	3201      	adds	r2, #1
 8019a68:	60e2      	str	r2, [r4, #12]
 8019a6a:	69a2      	ldr	r2, [r4, #24]
 8019a6c:	b102      	cbz	r2, 8019a70 <_scanf_chars+0xbc>
 8019a6e:	703b      	strb	r3, [r7, #0]
 8019a70:	6923      	ldr	r3, [r4, #16]
 8019a72:	441e      	add	r6, r3
 8019a74:	6126      	str	r6, [r4, #16]
 8019a76:	2000      	movs	r0, #0
 8019a78:	e7c6      	b.n	8019a08 <_scanf_chars+0x54>
	...

08019a7c <_scanf_i>:
 8019a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a80:	469a      	mov	sl, r3
 8019a82:	4b74      	ldr	r3, [pc, #464]	; (8019c54 <_scanf_i+0x1d8>)
 8019a84:	460c      	mov	r4, r1
 8019a86:	4683      	mov	fp, r0
 8019a88:	4616      	mov	r6, r2
 8019a8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a8e:	b087      	sub	sp, #28
 8019a90:	ab03      	add	r3, sp, #12
 8019a92:	68a7      	ldr	r7, [r4, #8]
 8019a94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019a98:	4b6f      	ldr	r3, [pc, #444]	; (8019c58 <_scanf_i+0x1dc>)
 8019a9a:	69a1      	ldr	r1, [r4, #24]
 8019a9c:	4a6f      	ldr	r2, [pc, #444]	; (8019c5c <_scanf_i+0x1e0>)
 8019a9e:	2903      	cmp	r1, #3
 8019aa0:	bf08      	it	eq
 8019aa2:	461a      	moveq	r2, r3
 8019aa4:	1e7b      	subs	r3, r7, #1
 8019aa6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019aaa:	bf84      	itt	hi
 8019aac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019ab0:	60a3      	strhi	r3, [r4, #8]
 8019ab2:	6823      	ldr	r3, [r4, #0]
 8019ab4:	9200      	str	r2, [sp, #0]
 8019ab6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019aba:	bf88      	it	hi
 8019abc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019ac0:	f104 091c 	add.w	r9, r4, #28
 8019ac4:	6023      	str	r3, [r4, #0]
 8019ac6:	bf8c      	ite	hi
 8019ac8:	197f      	addhi	r7, r7, r5
 8019aca:	2700      	movls	r7, #0
 8019acc:	464b      	mov	r3, r9
 8019ace:	f04f 0800 	mov.w	r8, #0
 8019ad2:	9301      	str	r3, [sp, #4]
 8019ad4:	6831      	ldr	r1, [r6, #0]
 8019ad6:	ab03      	add	r3, sp, #12
 8019ad8:	2202      	movs	r2, #2
 8019ada:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019ade:	7809      	ldrb	r1, [r1, #0]
 8019ae0:	f7ee fab6 	bl	8008050 <memchr>
 8019ae4:	9b01      	ldr	r3, [sp, #4]
 8019ae6:	b330      	cbz	r0, 8019b36 <_scanf_i+0xba>
 8019ae8:	f1b8 0f01 	cmp.w	r8, #1
 8019aec:	d15a      	bne.n	8019ba4 <_scanf_i+0x128>
 8019aee:	6862      	ldr	r2, [r4, #4]
 8019af0:	b92a      	cbnz	r2, 8019afe <_scanf_i+0x82>
 8019af2:	6822      	ldr	r2, [r4, #0]
 8019af4:	2108      	movs	r1, #8
 8019af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019afa:	6061      	str	r1, [r4, #4]
 8019afc:	6022      	str	r2, [r4, #0]
 8019afe:	6822      	ldr	r2, [r4, #0]
 8019b00:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019b04:	6022      	str	r2, [r4, #0]
 8019b06:	68a2      	ldr	r2, [r4, #8]
 8019b08:	1e51      	subs	r1, r2, #1
 8019b0a:	60a1      	str	r1, [r4, #8]
 8019b0c:	b19a      	cbz	r2, 8019b36 <_scanf_i+0xba>
 8019b0e:	6832      	ldr	r2, [r6, #0]
 8019b10:	1c51      	adds	r1, r2, #1
 8019b12:	6031      	str	r1, [r6, #0]
 8019b14:	7812      	ldrb	r2, [r2, #0]
 8019b16:	701a      	strb	r2, [r3, #0]
 8019b18:	1c5d      	adds	r5, r3, #1
 8019b1a:	6873      	ldr	r3, [r6, #4]
 8019b1c:	3b01      	subs	r3, #1
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	6073      	str	r3, [r6, #4]
 8019b22:	dc07      	bgt.n	8019b34 <_scanf_i+0xb8>
 8019b24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019b28:	4631      	mov	r1, r6
 8019b2a:	4658      	mov	r0, fp
 8019b2c:	4798      	blx	r3
 8019b2e:	2800      	cmp	r0, #0
 8019b30:	f040 8086 	bne.w	8019c40 <_scanf_i+0x1c4>
 8019b34:	462b      	mov	r3, r5
 8019b36:	f108 0801 	add.w	r8, r8, #1
 8019b3a:	f1b8 0f03 	cmp.w	r8, #3
 8019b3e:	d1c8      	bne.n	8019ad2 <_scanf_i+0x56>
 8019b40:	6862      	ldr	r2, [r4, #4]
 8019b42:	b90a      	cbnz	r2, 8019b48 <_scanf_i+0xcc>
 8019b44:	220a      	movs	r2, #10
 8019b46:	6062      	str	r2, [r4, #4]
 8019b48:	6862      	ldr	r2, [r4, #4]
 8019b4a:	4945      	ldr	r1, [pc, #276]	; (8019c60 <_scanf_i+0x1e4>)
 8019b4c:	6960      	ldr	r0, [r4, #20]
 8019b4e:	9301      	str	r3, [sp, #4]
 8019b50:	1a89      	subs	r1, r1, r2
 8019b52:	f000 f92d 	bl	8019db0 <__sccl>
 8019b56:	9b01      	ldr	r3, [sp, #4]
 8019b58:	f04f 0800 	mov.w	r8, #0
 8019b5c:	461d      	mov	r5, r3
 8019b5e:	68a3      	ldr	r3, [r4, #8]
 8019b60:	6822      	ldr	r2, [r4, #0]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d03a      	beq.n	8019bdc <_scanf_i+0x160>
 8019b66:	6831      	ldr	r1, [r6, #0]
 8019b68:	6960      	ldr	r0, [r4, #20]
 8019b6a:	f891 c000 	ldrb.w	ip, [r1]
 8019b6e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019b72:	2800      	cmp	r0, #0
 8019b74:	d032      	beq.n	8019bdc <_scanf_i+0x160>
 8019b76:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019b7a:	d121      	bne.n	8019bc0 <_scanf_i+0x144>
 8019b7c:	0510      	lsls	r0, r2, #20
 8019b7e:	d51f      	bpl.n	8019bc0 <_scanf_i+0x144>
 8019b80:	f108 0801 	add.w	r8, r8, #1
 8019b84:	b117      	cbz	r7, 8019b8c <_scanf_i+0x110>
 8019b86:	3301      	adds	r3, #1
 8019b88:	3f01      	subs	r7, #1
 8019b8a:	60a3      	str	r3, [r4, #8]
 8019b8c:	6873      	ldr	r3, [r6, #4]
 8019b8e:	3b01      	subs	r3, #1
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	6073      	str	r3, [r6, #4]
 8019b94:	dd1b      	ble.n	8019bce <_scanf_i+0x152>
 8019b96:	6833      	ldr	r3, [r6, #0]
 8019b98:	3301      	adds	r3, #1
 8019b9a:	6033      	str	r3, [r6, #0]
 8019b9c:	68a3      	ldr	r3, [r4, #8]
 8019b9e:	3b01      	subs	r3, #1
 8019ba0:	60a3      	str	r3, [r4, #8]
 8019ba2:	e7dc      	b.n	8019b5e <_scanf_i+0xe2>
 8019ba4:	f1b8 0f02 	cmp.w	r8, #2
 8019ba8:	d1ad      	bne.n	8019b06 <_scanf_i+0x8a>
 8019baa:	6822      	ldr	r2, [r4, #0]
 8019bac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019bb0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019bb4:	d1bf      	bne.n	8019b36 <_scanf_i+0xba>
 8019bb6:	2110      	movs	r1, #16
 8019bb8:	6061      	str	r1, [r4, #4]
 8019bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019bbe:	e7a1      	b.n	8019b04 <_scanf_i+0x88>
 8019bc0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019bc4:	6022      	str	r2, [r4, #0]
 8019bc6:	780b      	ldrb	r3, [r1, #0]
 8019bc8:	702b      	strb	r3, [r5, #0]
 8019bca:	3501      	adds	r5, #1
 8019bcc:	e7de      	b.n	8019b8c <_scanf_i+0x110>
 8019bce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019bd2:	4631      	mov	r1, r6
 8019bd4:	4658      	mov	r0, fp
 8019bd6:	4798      	blx	r3
 8019bd8:	2800      	cmp	r0, #0
 8019bda:	d0df      	beq.n	8019b9c <_scanf_i+0x120>
 8019bdc:	6823      	ldr	r3, [r4, #0]
 8019bde:	05d9      	lsls	r1, r3, #23
 8019be0:	d50c      	bpl.n	8019bfc <_scanf_i+0x180>
 8019be2:	454d      	cmp	r5, r9
 8019be4:	d908      	bls.n	8019bf8 <_scanf_i+0x17c>
 8019be6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019bee:	4632      	mov	r2, r6
 8019bf0:	4658      	mov	r0, fp
 8019bf2:	4798      	blx	r3
 8019bf4:	1e6f      	subs	r7, r5, #1
 8019bf6:	463d      	mov	r5, r7
 8019bf8:	454d      	cmp	r5, r9
 8019bfa:	d029      	beq.n	8019c50 <_scanf_i+0x1d4>
 8019bfc:	6822      	ldr	r2, [r4, #0]
 8019bfe:	f012 0210 	ands.w	r2, r2, #16
 8019c02:	d113      	bne.n	8019c2c <_scanf_i+0x1b0>
 8019c04:	702a      	strb	r2, [r5, #0]
 8019c06:	6863      	ldr	r3, [r4, #4]
 8019c08:	9e00      	ldr	r6, [sp, #0]
 8019c0a:	4649      	mov	r1, r9
 8019c0c:	4658      	mov	r0, fp
 8019c0e:	47b0      	blx	r6
 8019c10:	f8da 3000 	ldr.w	r3, [sl]
 8019c14:	6821      	ldr	r1, [r4, #0]
 8019c16:	1d1a      	adds	r2, r3, #4
 8019c18:	f8ca 2000 	str.w	r2, [sl]
 8019c1c:	f011 0f20 	tst.w	r1, #32
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	d010      	beq.n	8019c46 <_scanf_i+0x1ca>
 8019c24:	6018      	str	r0, [r3, #0]
 8019c26:	68e3      	ldr	r3, [r4, #12]
 8019c28:	3301      	adds	r3, #1
 8019c2a:	60e3      	str	r3, [r4, #12]
 8019c2c:	eba5 0509 	sub.w	r5, r5, r9
 8019c30:	44a8      	add	r8, r5
 8019c32:	6925      	ldr	r5, [r4, #16]
 8019c34:	4445      	add	r5, r8
 8019c36:	6125      	str	r5, [r4, #16]
 8019c38:	2000      	movs	r0, #0
 8019c3a:	b007      	add	sp, #28
 8019c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c40:	f04f 0800 	mov.w	r8, #0
 8019c44:	e7ca      	b.n	8019bdc <_scanf_i+0x160>
 8019c46:	07ca      	lsls	r2, r1, #31
 8019c48:	bf4c      	ite	mi
 8019c4a:	8018      	strhmi	r0, [r3, #0]
 8019c4c:	6018      	strpl	r0, [r3, #0]
 8019c4e:	e7ea      	b.n	8019c26 <_scanf_i+0x1aa>
 8019c50:	2001      	movs	r0, #1
 8019c52:	e7f2      	b.n	8019c3a <_scanf_i+0x1be>
 8019c54:	0801a598 	.word	0x0801a598
 8019c58:	08016f29 	.word	0x08016f29
 8019c5c:	08019fb5 	.word	0x08019fb5
 8019c60:	0801a7f5 	.word	0x0801a7f5

08019c64 <lflush>:
 8019c64:	8983      	ldrh	r3, [r0, #12]
 8019c66:	f003 0309 	and.w	r3, r3, #9
 8019c6a:	2b09      	cmp	r3, #9
 8019c6c:	d101      	bne.n	8019c72 <lflush+0xe>
 8019c6e:	f7fe b923 	b.w	8017eb8 <fflush>
 8019c72:	2000      	movs	r0, #0
 8019c74:	4770      	bx	lr
	...

08019c78 <__srefill_r>:
 8019c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c7a:	460c      	mov	r4, r1
 8019c7c:	4605      	mov	r5, r0
 8019c7e:	b118      	cbz	r0, 8019c88 <__srefill_r+0x10>
 8019c80:	6983      	ldr	r3, [r0, #24]
 8019c82:	b90b      	cbnz	r3, 8019c88 <__srefill_r+0x10>
 8019c84:	f7fe f96a 	bl	8017f5c <__sinit>
 8019c88:	4b3c      	ldr	r3, [pc, #240]	; (8019d7c <__srefill_r+0x104>)
 8019c8a:	429c      	cmp	r4, r3
 8019c8c:	d10a      	bne.n	8019ca4 <__srefill_r+0x2c>
 8019c8e:	686c      	ldr	r4, [r5, #4]
 8019c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019c94:	2300      	movs	r3, #0
 8019c96:	6063      	str	r3, [r4, #4]
 8019c98:	b293      	uxth	r3, r2
 8019c9a:	069e      	lsls	r6, r3, #26
 8019c9c:	d50c      	bpl.n	8019cb8 <__srefill_r+0x40>
 8019c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8019ca2:	e067      	b.n	8019d74 <__srefill_r+0xfc>
 8019ca4:	4b36      	ldr	r3, [pc, #216]	; (8019d80 <__srefill_r+0x108>)
 8019ca6:	429c      	cmp	r4, r3
 8019ca8:	d101      	bne.n	8019cae <__srefill_r+0x36>
 8019caa:	68ac      	ldr	r4, [r5, #8]
 8019cac:	e7f0      	b.n	8019c90 <__srefill_r+0x18>
 8019cae:	4b35      	ldr	r3, [pc, #212]	; (8019d84 <__srefill_r+0x10c>)
 8019cb0:	429c      	cmp	r4, r3
 8019cb2:	bf08      	it	eq
 8019cb4:	68ec      	ldreq	r4, [r5, #12]
 8019cb6:	e7eb      	b.n	8019c90 <__srefill_r+0x18>
 8019cb8:	0758      	lsls	r0, r3, #29
 8019cba:	d449      	bmi.n	8019d50 <__srefill_r+0xd8>
 8019cbc:	06d9      	lsls	r1, r3, #27
 8019cbe:	d405      	bmi.n	8019ccc <__srefill_r+0x54>
 8019cc0:	2309      	movs	r3, #9
 8019cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019cc6:	602b      	str	r3, [r5, #0]
 8019cc8:	81a2      	strh	r2, [r4, #12]
 8019cca:	e7e8      	b.n	8019c9e <__srefill_r+0x26>
 8019ccc:	071a      	lsls	r2, r3, #28
 8019cce:	d50b      	bpl.n	8019ce8 <__srefill_r+0x70>
 8019cd0:	4621      	mov	r1, r4
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	f7fe f8c6 	bl	8017e64 <_fflush_r>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	d1e0      	bne.n	8019c9e <__srefill_r+0x26>
 8019cdc:	89a3      	ldrh	r3, [r4, #12]
 8019cde:	60a0      	str	r0, [r4, #8]
 8019ce0:	f023 0308 	bic.w	r3, r3, #8
 8019ce4:	81a3      	strh	r3, [r4, #12]
 8019ce6:	61a0      	str	r0, [r4, #24]
 8019ce8:	89a3      	ldrh	r3, [r4, #12]
 8019cea:	f043 0304 	orr.w	r3, r3, #4
 8019cee:	81a3      	strh	r3, [r4, #12]
 8019cf0:	6923      	ldr	r3, [r4, #16]
 8019cf2:	b91b      	cbnz	r3, 8019cfc <__srefill_r+0x84>
 8019cf4:	4621      	mov	r1, r4
 8019cf6:	4628      	mov	r0, r5
 8019cf8:	f7fe fd42 	bl	8018780 <__smakebuf_r>
 8019cfc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8019d00:	b2be      	uxth	r6, r7
 8019d02:	07b3      	lsls	r3, r6, #30
 8019d04:	d00f      	beq.n	8019d26 <__srefill_r+0xae>
 8019d06:	2301      	movs	r3, #1
 8019d08:	81a3      	strh	r3, [r4, #12]
 8019d0a:	4b1f      	ldr	r3, [pc, #124]	; (8019d88 <__srefill_r+0x110>)
 8019d0c:	491f      	ldr	r1, [pc, #124]	; (8019d8c <__srefill_r+0x114>)
 8019d0e:	6818      	ldr	r0, [r3, #0]
 8019d10:	f006 0609 	and.w	r6, r6, #9
 8019d14:	f7fe f98e 	bl	8018034 <_fwalk>
 8019d18:	2e09      	cmp	r6, #9
 8019d1a:	81a7      	strh	r7, [r4, #12]
 8019d1c:	d103      	bne.n	8019d26 <__srefill_r+0xae>
 8019d1e:	4621      	mov	r1, r4
 8019d20:	4628      	mov	r0, r5
 8019d22:	f7fe f819 	bl	8017d58 <__sflush_r>
 8019d26:	6922      	ldr	r2, [r4, #16]
 8019d28:	6022      	str	r2, [r4, #0]
 8019d2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019d2c:	6963      	ldr	r3, [r4, #20]
 8019d2e:	6a21      	ldr	r1, [r4, #32]
 8019d30:	4628      	mov	r0, r5
 8019d32:	47b0      	blx	r6
 8019d34:	2800      	cmp	r0, #0
 8019d36:	6060      	str	r0, [r4, #4]
 8019d38:	dc1d      	bgt.n	8019d76 <__srefill_r+0xfe>
 8019d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d3e:	bf17      	itett	ne
 8019d40:	2200      	movne	r2, #0
 8019d42:	f043 0320 	orreq.w	r3, r3, #32
 8019d46:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8019d4a:	6062      	strne	r2, [r4, #4]
 8019d4c:	81a3      	strh	r3, [r4, #12]
 8019d4e:	e7a6      	b.n	8019c9e <__srefill_r+0x26>
 8019d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d52:	2900      	cmp	r1, #0
 8019d54:	d0cc      	beq.n	8019cf0 <__srefill_r+0x78>
 8019d56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d5a:	4299      	cmp	r1, r3
 8019d5c:	d002      	beq.n	8019d64 <__srefill_r+0xec>
 8019d5e:	4628      	mov	r0, r5
 8019d60:	f7ff f976 	bl	8019050 <_free_r>
 8019d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d66:	6063      	str	r3, [r4, #4]
 8019d68:	2000      	movs	r0, #0
 8019d6a:	6360      	str	r0, [r4, #52]	; 0x34
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d0bf      	beq.n	8019cf0 <__srefill_r+0x78>
 8019d70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019d72:	6023      	str	r3, [r4, #0]
 8019d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d76:	2000      	movs	r0, #0
 8019d78:	e7fc      	b.n	8019d74 <__srefill_r+0xfc>
 8019d7a:	bf00      	nop
 8019d7c:	0801a688 	.word	0x0801a688
 8019d80:	0801a6a8 	.word	0x0801a6a8
 8019d84:	0801a668 	.word	0x0801a668
 8019d88:	0801a5cc 	.word	0x0801a5cc
 8019d8c:	08019c65 	.word	0x08019c65

08019d90 <_sbrk_r>:
 8019d90:	b538      	push	{r3, r4, r5, lr}
 8019d92:	4c06      	ldr	r4, [pc, #24]	; (8019dac <_sbrk_r+0x1c>)
 8019d94:	2300      	movs	r3, #0
 8019d96:	4605      	mov	r5, r0
 8019d98:	4608      	mov	r0, r1
 8019d9a:	6023      	str	r3, [r4, #0]
 8019d9c:	f7f4 fe3e 	bl	800ea1c <_sbrk>
 8019da0:	1c43      	adds	r3, r0, #1
 8019da2:	d102      	bne.n	8019daa <_sbrk_r+0x1a>
 8019da4:	6823      	ldr	r3, [r4, #0]
 8019da6:	b103      	cbz	r3, 8019daa <_sbrk_r+0x1a>
 8019da8:	602b      	str	r3, [r5, #0]
 8019daa:	bd38      	pop	{r3, r4, r5, pc}
 8019dac:	200108ac 	.word	0x200108ac

08019db0 <__sccl>:
 8019db0:	b570      	push	{r4, r5, r6, lr}
 8019db2:	780b      	ldrb	r3, [r1, #0]
 8019db4:	2b5e      	cmp	r3, #94	; 0x5e
 8019db6:	bf13      	iteet	ne
 8019db8:	1c4a      	addne	r2, r1, #1
 8019dba:	1c8a      	addeq	r2, r1, #2
 8019dbc:	784b      	ldrbeq	r3, [r1, #1]
 8019dbe:	2100      	movne	r1, #0
 8019dc0:	bf08      	it	eq
 8019dc2:	2101      	moveq	r1, #1
 8019dc4:	1e44      	subs	r4, r0, #1
 8019dc6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019dca:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019dce:	42ac      	cmp	r4, r5
 8019dd0:	d1fb      	bne.n	8019dca <__sccl+0x1a>
 8019dd2:	b913      	cbnz	r3, 8019dda <__sccl+0x2a>
 8019dd4:	3a01      	subs	r2, #1
 8019dd6:	4610      	mov	r0, r2
 8019dd8:	bd70      	pop	{r4, r5, r6, pc}
 8019dda:	f081 0401 	eor.w	r4, r1, #1
 8019dde:	54c4      	strb	r4, [r0, r3]
 8019de0:	1c51      	adds	r1, r2, #1
 8019de2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019de6:	2d2d      	cmp	r5, #45	; 0x2d
 8019de8:	f101 36ff 	add.w	r6, r1, #4294967295
 8019dec:	460a      	mov	r2, r1
 8019dee:	d006      	beq.n	8019dfe <__sccl+0x4e>
 8019df0:	2d5d      	cmp	r5, #93	; 0x5d
 8019df2:	d0f0      	beq.n	8019dd6 <__sccl+0x26>
 8019df4:	b90d      	cbnz	r5, 8019dfa <__sccl+0x4a>
 8019df6:	4632      	mov	r2, r6
 8019df8:	e7ed      	b.n	8019dd6 <__sccl+0x26>
 8019dfa:	462b      	mov	r3, r5
 8019dfc:	e7ef      	b.n	8019dde <__sccl+0x2e>
 8019dfe:	780e      	ldrb	r6, [r1, #0]
 8019e00:	2e5d      	cmp	r6, #93	; 0x5d
 8019e02:	d0fa      	beq.n	8019dfa <__sccl+0x4a>
 8019e04:	42b3      	cmp	r3, r6
 8019e06:	dcf8      	bgt.n	8019dfa <__sccl+0x4a>
 8019e08:	3301      	adds	r3, #1
 8019e0a:	429e      	cmp	r6, r3
 8019e0c:	54c4      	strb	r4, [r0, r3]
 8019e0e:	dcfb      	bgt.n	8019e08 <__sccl+0x58>
 8019e10:	3102      	adds	r1, #2
 8019e12:	e7e6      	b.n	8019de2 <__sccl+0x32>

08019e14 <__sread>:
 8019e14:	b510      	push	{r4, lr}
 8019e16:	460c      	mov	r4, r1
 8019e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e1c:	f000 fa2e 	bl	801a27c <_read_r>
 8019e20:	2800      	cmp	r0, #0
 8019e22:	bfab      	itete	ge
 8019e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019e26:	89a3      	ldrhlt	r3, [r4, #12]
 8019e28:	181b      	addge	r3, r3, r0
 8019e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019e2e:	bfac      	ite	ge
 8019e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8019e32:	81a3      	strhlt	r3, [r4, #12]
 8019e34:	bd10      	pop	{r4, pc}

08019e36 <__swrite>:
 8019e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e3a:	461f      	mov	r7, r3
 8019e3c:	898b      	ldrh	r3, [r1, #12]
 8019e3e:	05db      	lsls	r3, r3, #23
 8019e40:	4605      	mov	r5, r0
 8019e42:	460c      	mov	r4, r1
 8019e44:	4616      	mov	r6, r2
 8019e46:	d505      	bpl.n	8019e54 <__swrite+0x1e>
 8019e48:	2302      	movs	r3, #2
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e50:	f000 f9c0 	bl	801a1d4 <_lseek_r>
 8019e54:	89a3      	ldrh	r3, [r4, #12]
 8019e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019e5e:	81a3      	strh	r3, [r4, #12]
 8019e60:	4632      	mov	r2, r6
 8019e62:	463b      	mov	r3, r7
 8019e64:	4628      	mov	r0, r5
 8019e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e6a:	f000 b96f 	b.w	801a14c <_write_r>

08019e6e <__sseek>:
 8019e6e:	b510      	push	{r4, lr}
 8019e70:	460c      	mov	r4, r1
 8019e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e76:	f000 f9ad 	bl	801a1d4 <_lseek_r>
 8019e7a:	1c43      	adds	r3, r0, #1
 8019e7c:	89a3      	ldrh	r3, [r4, #12]
 8019e7e:	bf15      	itete	ne
 8019e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8019e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019e8a:	81a3      	strheq	r3, [r4, #12]
 8019e8c:	bf18      	it	ne
 8019e8e:	81a3      	strhne	r3, [r4, #12]
 8019e90:	bd10      	pop	{r4, pc}

08019e92 <__sclose>:
 8019e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e96:	f000 b96b 	b.w	801a170 <_close_r>

08019e9a <strncmp>:
 8019e9a:	b510      	push	{r4, lr}
 8019e9c:	b16a      	cbz	r2, 8019eba <strncmp+0x20>
 8019e9e:	3901      	subs	r1, #1
 8019ea0:	1884      	adds	r4, r0, r2
 8019ea2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019ea6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019eaa:	4293      	cmp	r3, r2
 8019eac:	d103      	bne.n	8019eb6 <strncmp+0x1c>
 8019eae:	42a0      	cmp	r0, r4
 8019eb0:	d001      	beq.n	8019eb6 <strncmp+0x1c>
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d1f5      	bne.n	8019ea2 <strncmp+0x8>
 8019eb6:	1a98      	subs	r0, r3, r2
 8019eb8:	bd10      	pop	{r4, pc}
 8019eba:	4610      	mov	r0, r2
 8019ebc:	e7fc      	b.n	8019eb8 <strncmp+0x1e>

08019ebe <_strtoul_l.isra.0>:
 8019ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ec2:	4680      	mov	r8, r0
 8019ec4:	4689      	mov	r9, r1
 8019ec6:	4692      	mov	sl, r2
 8019ec8:	461e      	mov	r6, r3
 8019eca:	460f      	mov	r7, r1
 8019ecc:	463d      	mov	r5, r7
 8019ece:	9808      	ldr	r0, [sp, #32]
 8019ed0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ed4:	f7fe fc0e 	bl	80186f4 <__locale_ctype_ptr_l>
 8019ed8:	4420      	add	r0, r4
 8019eda:	7843      	ldrb	r3, [r0, #1]
 8019edc:	f013 0308 	ands.w	r3, r3, #8
 8019ee0:	d130      	bne.n	8019f44 <_strtoul_l.isra.0+0x86>
 8019ee2:	2c2d      	cmp	r4, #45	; 0x2d
 8019ee4:	d130      	bne.n	8019f48 <_strtoul_l.isra.0+0x8a>
 8019ee6:	787c      	ldrb	r4, [r7, #1]
 8019ee8:	1cbd      	adds	r5, r7, #2
 8019eea:	2101      	movs	r1, #1
 8019eec:	2e00      	cmp	r6, #0
 8019eee:	d05c      	beq.n	8019faa <_strtoul_l.isra.0+0xec>
 8019ef0:	2e10      	cmp	r6, #16
 8019ef2:	d109      	bne.n	8019f08 <_strtoul_l.isra.0+0x4a>
 8019ef4:	2c30      	cmp	r4, #48	; 0x30
 8019ef6:	d107      	bne.n	8019f08 <_strtoul_l.isra.0+0x4a>
 8019ef8:	782b      	ldrb	r3, [r5, #0]
 8019efa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019efe:	2b58      	cmp	r3, #88	; 0x58
 8019f00:	d14e      	bne.n	8019fa0 <_strtoul_l.isra.0+0xe2>
 8019f02:	786c      	ldrb	r4, [r5, #1]
 8019f04:	2610      	movs	r6, #16
 8019f06:	3502      	adds	r5, #2
 8019f08:	f04f 32ff 	mov.w	r2, #4294967295
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	fbb2 f2f6 	udiv	r2, r2, r6
 8019f12:	fb06 fc02 	mul.w	ip, r6, r2
 8019f16:	ea6f 0c0c 	mvn.w	ip, ip
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019f20:	2f09      	cmp	r7, #9
 8019f22:	d817      	bhi.n	8019f54 <_strtoul_l.isra.0+0x96>
 8019f24:	463c      	mov	r4, r7
 8019f26:	42a6      	cmp	r6, r4
 8019f28:	dd23      	ble.n	8019f72 <_strtoul_l.isra.0+0xb4>
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	db1e      	blt.n	8019f6c <_strtoul_l.isra.0+0xae>
 8019f2e:	4282      	cmp	r2, r0
 8019f30:	d31c      	bcc.n	8019f6c <_strtoul_l.isra.0+0xae>
 8019f32:	d101      	bne.n	8019f38 <_strtoul_l.isra.0+0x7a>
 8019f34:	45a4      	cmp	ip, r4
 8019f36:	db19      	blt.n	8019f6c <_strtoul_l.isra.0+0xae>
 8019f38:	fb00 4006 	mla	r0, r0, r6, r4
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f42:	e7eb      	b.n	8019f1c <_strtoul_l.isra.0+0x5e>
 8019f44:	462f      	mov	r7, r5
 8019f46:	e7c1      	b.n	8019ecc <_strtoul_l.isra.0+0xe>
 8019f48:	2c2b      	cmp	r4, #43	; 0x2b
 8019f4a:	bf04      	itt	eq
 8019f4c:	1cbd      	addeq	r5, r7, #2
 8019f4e:	787c      	ldrbeq	r4, [r7, #1]
 8019f50:	4619      	mov	r1, r3
 8019f52:	e7cb      	b.n	8019eec <_strtoul_l.isra.0+0x2e>
 8019f54:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019f58:	2f19      	cmp	r7, #25
 8019f5a:	d801      	bhi.n	8019f60 <_strtoul_l.isra.0+0xa2>
 8019f5c:	3c37      	subs	r4, #55	; 0x37
 8019f5e:	e7e2      	b.n	8019f26 <_strtoul_l.isra.0+0x68>
 8019f60:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019f64:	2f19      	cmp	r7, #25
 8019f66:	d804      	bhi.n	8019f72 <_strtoul_l.isra.0+0xb4>
 8019f68:	3c57      	subs	r4, #87	; 0x57
 8019f6a:	e7dc      	b.n	8019f26 <_strtoul_l.isra.0+0x68>
 8019f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f70:	e7e5      	b.n	8019f3e <_strtoul_l.isra.0+0x80>
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	da09      	bge.n	8019f8a <_strtoul_l.isra.0+0xcc>
 8019f76:	2322      	movs	r3, #34	; 0x22
 8019f78:	f8c8 3000 	str.w	r3, [r8]
 8019f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f80:	f1ba 0f00 	cmp.w	sl, #0
 8019f84:	d107      	bne.n	8019f96 <_strtoul_l.isra.0+0xd8>
 8019f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f8a:	b101      	cbz	r1, 8019f8e <_strtoul_l.isra.0+0xd0>
 8019f8c:	4240      	negs	r0, r0
 8019f8e:	f1ba 0f00 	cmp.w	sl, #0
 8019f92:	d0f8      	beq.n	8019f86 <_strtoul_l.isra.0+0xc8>
 8019f94:	b10b      	cbz	r3, 8019f9a <_strtoul_l.isra.0+0xdc>
 8019f96:	f105 39ff 	add.w	r9, r5, #4294967295
 8019f9a:	f8ca 9000 	str.w	r9, [sl]
 8019f9e:	e7f2      	b.n	8019f86 <_strtoul_l.isra.0+0xc8>
 8019fa0:	2430      	movs	r4, #48	; 0x30
 8019fa2:	2e00      	cmp	r6, #0
 8019fa4:	d1b0      	bne.n	8019f08 <_strtoul_l.isra.0+0x4a>
 8019fa6:	2608      	movs	r6, #8
 8019fa8:	e7ae      	b.n	8019f08 <_strtoul_l.isra.0+0x4a>
 8019faa:	2c30      	cmp	r4, #48	; 0x30
 8019fac:	d0a4      	beq.n	8019ef8 <_strtoul_l.isra.0+0x3a>
 8019fae:	260a      	movs	r6, #10
 8019fb0:	e7aa      	b.n	8019f08 <_strtoul_l.isra.0+0x4a>
	...

08019fb4 <_strtoul_r>:
 8019fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019fb6:	4c06      	ldr	r4, [pc, #24]	; (8019fd0 <_strtoul_r+0x1c>)
 8019fb8:	4d06      	ldr	r5, [pc, #24]	; (8019fd4 <_strtoul_r+0x20>)
 8019fba:	6824      	ldr	r4, [r4, #0]
 8019fbc:	6a24      	ldr	r4, [r4, #32]
 8019fbe:	2c00      	cmp	r4, #0
 8019fc0:	bf08      	it	eq
 8019fc2:	462c      	moveq	r4, r5
 8019fc4:	9400      	str	r4, [sp, #0]
 8019fc6:	f7ff ff7a 	bl	8019ebe <_strtoul_l.isra.0>
 8019fca:	b003      	add	sp, #12
 8019fcc:	bd30      	pop	{r4, r5, pc}
 8019fce:	bf00      	nop
 8019fd0:	20000028 	.word	0x20000028
 8019fd4:	2000008c 	.word	0x2000008c

08019fd8 <__submore>:
 8019fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fdc:	460c      	mov	r4, r1
 8019fde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fe4:	4299      	cmp	r1, r3
 8019fe6:	d11d      	bne.n	801a024 <__submore+0x4c>
 8019fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019fec:	f7ff f87e 	bl	80190ec <_malloc_r>
 8019ff0:	b918      	cbnz	r0, 8019ffa <__submore+0x22>
 8019ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8019ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ffe:	63a3      	str	r3, [r4, #56]	; 0x38
 801a000:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a004:	6360      	str	r0, [r4, #52]	; 0x34
 801a006:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a00a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a00e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a012:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a016:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a01a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a01e:	6020      	str	r0, [r4, #0]
 801a020:	2000      	movs	r0, #0
 801a022:	e7e8      	b.n	8019ff6 <__submore+0x1e>
 801a024:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a026:	0077      	lsls	r7, r6, #1
 801a028:	463a      	mov	r2, r7
 801a02a:	f000 f900 	bl	801a22e <_realloc_r>
 801a02e:	4605      	mov	r5, r0
 801a030:	2800      	cmp	r0, #0
 801a032:	d0de      	beq.n	8019ff2 <__submore+0x1a>
 801a034:	eb00 0806 	add.w	r8, r0, r6
 801a038:	4601      	mov	r1, r0
 801a03a:	4632      	mov	r2, r6
 801a03c:	4640      	mov	r0, r8
 801a03e:	f7fb f915 	bl	801526c <memcpy>
 801a042:	f8c4 8000 	str.w	r8, [r4]
 801a046:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a04a:	e7e9      	b.n	801a020 <__submore+0x48>

0801a04c <_ungetc_r>:
 801a04c:	1c4b      	adds	r3, r1, #1
 801a04e:	b570      	push	{r4, r5, r6, lr}
 801a050:	4606      	mov	r6, r0
 801a052:	460d      	mov	r5, r1
 801a054:	4614      	mov	r4, r2
 801a056:	d103      	bne.n	801a060 <_ungetc_r+0x14>
 801a058:	f04f 35ff 	mov.w	r5, #4294967295
 801a05c:	4628      	mov	r0, r5
 801a05e:	bd70      	pop	{r4, r5, r6, pc}
 801a060:	b118      	cbz	r0, 801a06a <_ungetc_r+0x1e>
 801a062:	6983      	ldr	r3, [r0, #24]
 801a064:	b90b      	cbnz	r3, 801a06a <_ungetc_r+0x1e>
 801a066:	f7fd ff79 	bl	8017f5c <__sinit>
 801a06a:	4b2e      	ldr	r3, [pc, #184]	; (801a124 <_ungetc_r+0xd8>)
 801a06c:	429c      	cmp	r4, r3
 801a06e:	d12c      	bne.n	801a0ca <_ungetc_r+0x7e>
 801a070:	6874      	ldr	r4, [r6, #4]
 801a072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a076:	f023 0320 	bic.w	r3, r3, #32
 801a07a:	81a3      	strh	r3, [r4, #12]
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	0759      	lsls	r1, r3, #29
 801a080:	d413      	bmi.n	801a0aa <_ungetc_r+0x5e>
 801a082:	06da      	lsls	r2, r3, #27
 801a084:	d5e8      	bpl.n	801a058 <_ungetc_r+0xc>
 801a086:	071b      	lsls	r3, r3, #28
 801a088:	d50b      	bpl.n	801a0a2 <_ungetc_r+0x56>
 801a08a:	4621      	mov	r1, r4
 801a08c:	4630      	mov	r0, r6
 801a08e:	f7fd fee9 	bl	8017e64 <_fflush_r>
 801a092:	2800      	cmp	r0, #0
 801a094:	d1e0      	bne.n	801a058 <_ungetc_r+0xc>
 801a096:	89a3      	ldrh	r3, [r4, #12]
 801a098:	60a0      	str	r0, [r4, #8]
 801a09a:	f023 0308 	bic.w	r3, r3, #8
 801a09e:	81a3      	strh	r3, [r4, #12]
 801a0a0:	61a0      	str	r0, [r4, #24]
 801a0a2:	89a3      	ldrh	r3, [r4, #12]
 801a0a4:	f043 0304 	orr.w	r3, r3, #4
 801a0a8:	81a3      	strh	r3, [r4, #12]
 801a0aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a0ac:	6862      	ldr	r2, [r4, #4]
 801a0ae:	b2ed      	uxtb	r5, r5
 801a0b0:	b1e3      	cbz	r3, 801a0ec <_ungetc_r+0xa0>
 801a0b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a0b4:	4293      	cmp	r3, r2
 801a0b6:	dd12      	ble.n	801a0de <_ungetc_r+0x92>
 801a0b8:	6823      	ldr	r3, [r4, #0]
 801a0ba:	1e5a      	subs	r2, r3, #1
 801a0bc:	6022      	str	r2, [r4, #0]
 801a0be:	f803 5c01 	strb.w	r5, [r3, #-1]
 801a0c2:	6863      	ldr	r3, [r4, #4]
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	6063      	str	r3, [r4, #4]
 801a0c8:	e7c8      	b.n	801a05c <_ungetc_r+0x10>
 801a0ca:	4b17      	ldr	r3, [pc, #92]	; (801a128 <_ungetc_r+0xdc>)
 801a0cc:	429c      	cmp	r4, r3
 801a0ce:	d101      	bne.n	801a0d4 <_ungetc_r+0x88>
 801a0d0:	68b4      	ldr	r4, [r6, #8]
 801a0d2:	e7ce      	b.n	801a072 <_ungetc_r+0x26>
 801a0d4:	4b15      	ldr	r3, [pc, #84]	; (801a12c <_ungetc_r+0xe0>)
 801a0d6:	429c      	cmp	r4, r3
 801a0d8:	bf08      	it	eq
 801a0da:	68f4      	ldreq	r4, [r6, #12]
 801a0dc:	e7c9      	b.n	801a072 <_ungetc_r+0x26>
 801a0de:	4621      	mov	r1, r4
 801a0e0:	4630      	mov	r0, r6
 801a0e2:	f7ff ff79 	bl	8019fd8 <__submore>
 801a0e6:	2800      	cmp	r0, #0
 801a0e8:	d0e6      	beq.n	801a0b8 <_ungetc_r+0x6c>
 801a0ea:	e7b5      	b.n	801a058 <_ungetc_r+0xc>
 801a0ec:	6921      	ldr	r1, [r4, #16]
 801a0ee:	6823      	ldr	r3, [r4, #0]
 801a0f0:	b151      	cbz	r1, 801a108 <_ungetc_r+0xbc>
 801a0f2:	4299      	cmp	r1, r3
 801a0f4:	d208      	bcs.n	801a108 <_ungetc_r+0xbc>
 801a0f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801a0fa:	42a9      	cmp	r1, r5
 801a0fc:	d104      	bne.n	801a108 <_ungetc_r+0xbc>
 801a0fe:	3b01      	subs	r3, #1
 801a100:	3201      	adds	r2, #1
 801a102:	6023      	str	r3, [r4, #0]
 801a104:	6062      	str	r2, [r4, #4]
 801a106:	e7a9      	b.n	801a05c <_ungetc_r+0x10>
 801a108:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801a10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a110:	6363      	str	r3, [r4, #52]	; 0x34
 801a112:	2303      	movs	r3, #3
 801a114:	63a3      	str	r3, [r4, #56]	; 0x38
 801a116:	4623      	mov	r3, r4
 801a118:	f803 5f46 	strb.w	r5, [r3, #70]!
 801a11c:	6023      	str	r3, [r4, #0]
 801a11e:	2301      	movs	r3, #1
 801a120:	e7d1      	b.n	801a0c6 <_ungetc_r+0x7a>
 801a122:	bf00      	nop
 801a124:	0801a688 	.word	0x0801a688
 801a128:	0801a6a8 	.word	0x0801a6a8
 801a12c:	0801a668 	.word	0x0801a668

0801a130 <__ascii_wctomb>:
 801a130:	b149      	cbz	r1, 801a146 <__ascii_wctomb+0x16>
 801a132:	2aff      	cmp	r2, #255	; 0xff
 801a134:	bf85      	ittet	hi
 801a136:	238a      	movhi	r3, #138	; 0x8a
 801a138:	6003      	strhi	r3, [r0, #0]
 801a13a:	700a      	strbls	r2, [r1, #0]
 801a13c:	f04f 30ff 	movhi.w	r0, #4294967295
 801a140:	bf98      	it	ls
 801a142:	2001      	movls	r0, #1
 801a144:	4770      	bx	lr
 801a146:	4608      	mov	r0, r1
 801a148:	4770      	bx	lr
	...

0801a14c <_write_r>:
 801a14c:	b538      	push	{r3, r4, r5, lr}
 801a14e:	4c07      	ldr	r4, [pc, #28]	; (801a16c <_write_r+0x20>)
 801a150:	4605      	mov	r5, r0
 801a152:	4608      	mov	r0, r1
 801a154:	4611      	mov	r1, r2
 801a156:	2200      	movs	r2, #0
 801a158:	6022      	str	r2, [r4, #0]
 801a15a:	461a      	mov	r2, r3
 801a15c:	f7f4 fc0d 	bl	800e97a <_write>
 801a160:	1c43      	adds	r3, r0, #1
 801a162:	d102      	bne.n	801a16a <_write_r+0x1e>
 801a164:	6823      	ldr	r3, [r4, #0]
 801a166:	b103      	cbz	r3, 801a16a <_write_r+0x1e>
 801a168:	602b      	str	r3, [r5, #0]
 801a16a:	bd38      	pop	{r3, r4, r5, pc}
 801a16c:	200108ac 	.word	0x200108ac

0801a170 <_close_r>:
 801a170:	b538      	push	{r3, r4, r5, lr}
 801a172:	4c06      	ldr	r4, [pc, #24]	; (801a18c <_close_r+0x1c>)
 801a174:	2300      	movs	r3, #0
 801a176:	4605      	mov	r5, r0
 801a178:	4608      	mov	r0, r1
 801a17a:	6023      	str	r3, [r4, #0]
 801a17c:	f7f4 fc19 	bl	800e9b2 <_close>
 801a180:	1c43      	adds	r3, r0, #1
 801a182:	d102      	bne.n	801a18a <_close_r+0x1a>
 801a184:	6823      	ldr	r3, [r4, #0]
 801a186:	b103      	cbz	r3, 801a18a <_close_r+0x1a>
 801a188:	602b      	str	r3, [r5, #0]
 801a18a:	bd38      	pop	{r3, r4, r5, pc}
 801a18c:	200108ac 	.word	0x200108ac

0801a190 <_fstat_r>:
 801a190:	b538      	push	{r3, r4, r5, lr}
 801a192:	4c07      	ldr	r4, [pc, #28]	; (801a1b0 <_fstat_r+0x20>)
 801a194:	2300      	movs	r3, #0
 801a196:	4605      	mov	r5, r0
 801a198:	4608      	mov	r0, r1
 801a19a:	4611      	mov	r1, r2
 801a19c:	6023      	str	r3, [r4, #0]
 801a19e:	f7f4 fc14 	bl	800e9ca <_fstat>
 801a1a2:	1c43      	adds	r3, r0, #1
 801a1a4:	d102      	bne.n	801a1ac <_fstat_r+0x1c>
 801a1a6:	6823      	ldr	r3, [r4, #0]
 801a1a8:	b103      	cbz	r3, 801a1ac <_fstat_r+0x1c>
 801a1aa:	602b      	str	r3, [r5, #0]
 801a1ac:	bd38      	pop	{r3, r4, r5, pc}
 801a1ae:	bf00      	nop
 801a1b0:	200108ac 	.word	0x200108ac

0801a1b4 <_isatty_r>:
 801a1b4:	b538      	push	{r3, r4, r5, lr}
 801a1b6:	4c06      	ldr	r4, [pc, #24]	; (801a1d0 <_isatty_r+0x1c>)
 801a1b8:	2300      	movs	r3, #0
 801a1ba:	4605      	mov	r5, r0
 801a1bc:	4608      	mov	r0, r1
 801a1be:	6023      	str	r3, [r4, #0]
 801a1c0:	f7f4 fc13 	bl	800e9ea <_isatty>
 801a1c4:	1c43      	adds	r3, r0, #1
 801a1c6:	d102      	bne.n	801a1ce <_isatty_r+0x1a>
 801a1c8:	6823      	ldr	r3, [r4, #0]
 801a1ca:	b103      	cbz	r3, 801a1ce <_isatty_r+0x1a>
 801a1cc:	602b      	str	r3, [r5, #0]
 801a1ce:	bd38      	pop	{r3, r4, r5, pc}
 801a1d0:	200108ac 	.word	0x200108ac

0801a1d4 <_lseek_r>:
 801a1d4:	b538      	push	{r3, r4, r5, lr}
 801a1d6:	4c07      	ldr	r4, [pc, #28]	; (801a1f4 <_lseek_r+0x20>)
 801a1d8:	4605      	mov	r5, r0
 801a1da:	4608      	mov	r0, r1
 801a1dc:	4611      	mov	r1, r2
 801a1de:	2200      	movs	r2, #0
 801a1e0:	6022      	str	r2, [r4, #0]
 801a1e2:	461a      	mov	r2, r3
 801a1e4:	f7f4 fc0c 	bl	800ea00 <_lseek>
 801a1e8:	1c43      	adds	r3, r0, #1
 801a1ea:	d102      	bne.n	801a1f2 <_lseek_r+0x1e>
 801a1ec:	6823      	ldr	r3, [r4, #0]
 801a1ee:	b103      	cbz	r3, 801a1f2 <_lseek_r+0x1e>
 801a1f0:	602b      	str	r3, [r5, #0]
 801a1f2:	bd38      	pop	{r3, r4, r5, pc}
 801a1f4:	200108ac 	.word	0x200108ac

0801a1f8 <memmove>:
 801a1f8:	4288      	cmp	r0, r1
 801a1fa:	b510      	push	{r4, lr}
 801a1fc:	eb01 0302 	add.w	r3, r1, r2
 801a200:	d807      	bhi.n	801a212 <memmove+0x1a>
 801a202:	1e42      	subs	r2, r0, #1
 801a204:	4299      	cmp	r1, r3
 801a206:	d00a      	beq.n	801a21e <memmove+0x26>
 801a208:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a20c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a210:	e7f8      	b.n	801a204 <memmove+0xc>
 801a212:	4283      	cmp	r3, r0
 801a214:	d9f5      	bls.n	801a202 <memmove+0xa>
 801a216:	1881      	adds	r1, r0, r2
 801a218:	1ad2      	subs	r2, r2, r3
 801a21a:	42d3      	cmn	r3, r2
 801a21c:	d100      	bne.n	801a220 <memmove+0x28>
 801a21e:	bd10      	pop	{r4, pc}
 801a220:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a224:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a228:	e7f7      	b.n	801a21a <memmove+0x22>

0801a22a <__malloc_lock>:
 801a22a:	4770      	bx	lr

0801a22c <__malloc_unlock>:
 801a22c:	4770      	bx	lr

0801a22e <_realloc_r>:
 801a22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a230:	4607      	mov	r7, r0
 801a232:	4614      	mov	r4, r2
 801a234:	460e      	mov	r6, r1
 801a236:	b921      	cbnz	r1, 801a242 <_realloc_r+0x14>
 801a238:	4611      	mov	r1, r2
 801a23a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a23e:	f7fe bf55 	b.w	80190ec <_malloc_r>
 801a242:	b922      	cbnz	r2, 801a24e <_realloc_r+0x20>
 801a244:	f7fe ff04 	bl	8019050 <_free_r>
 801a248:	4625      	mov	r5, r4
 801a24a:	4628      	mov	r0, r5
 801a24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a24e:	f000 f827 	bl	801a2a0 <_malloc_usable_size_r>
 801a252:	42a0      	cmp	r0, r4
 801a254:	d20f      	bcs.n	801a276 <_realloc_r+0x48>
 801a256:	4621      	mov	r1, r4
 801a258:	4638      	mov	r0, r7
 801a25a:	f7fe ff47 	bl	80190ec <_malloc_r>
 801a25e:	4605      	mov	r5, r0
 801a260:	2800      	cmp	r0, #0
 801a262:	d0f2      	beq.n	801a24a <_realloc_r+0x1c>
 801a264:	4631      	mov	r1, r6
 801a266:	4622      	mov	r2, r4
 801a268:	f7fb f800 	bl	801526c <memcpy>
 801a26c:	4631      	mov	r1, r6
 801a26e:	4638      	mov	r0, r7
 801a270:	f7fe feee 	bl	8019050 <_free_r>
 801a274:	e7e9      	b.n	801a24a <_realloc_r+0x1c>
 801a276:	4635      	mov	r5, r6
 801a278:	e7e7      	b.n	801a24a <_realloc_r+0x1c>
	...

0801a27c <_read_r>:
 801a27c:	b538      	push	{r3, r4, r5, lr}
 801a27e:	4c07      	ldr	r4, [pc, #28]	; (801a29c <_read_r+0x20>)
 801a280:	4605      	mov	r5, r0
 801a282:	4608      	mov	r0, r1
 801a284:	4611      	mov	r1, r2
 801a286:	2200      	movs	r2, #0
 801a288:	6022      	str	r2, [r4, #0]
 801a28a:	461a      	mov	r2, r3
 801a28c:	f7f4 fb58 	bl	800e940 <_read>
 801a290:	1c43      	adds	r3, r0, #1
 801a292:	d102      	bne.n	801a29a <_read_r+0x1e>
 801a294:	6823      	ldr	r3, [r4, #0]
 801a296:	b103      	cbz	r3, 801a29a <_read_r+0x1e>
 801a298:	602b      	str	r3, [r5, #0]
 801a29a:	bd38      	pop	{r3, r4, r5, pc}
 801a29c:	200108ac 	.word	0x200108ac

0801a2a0 <_malloc_usable_size_r>:
 801a2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2a4:	1f18      	subs	r0, r3, #4
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	bfbc      	itt	lt
 801a2aa:	580b      	ldrlt	r3, [r1, r0]
 801a2ac:	18c0      	addlt	r0, r0, r3
 801a2ae:	4770      	bx	lr

0801a2b0 <_init>:
 801a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2b2:	bf00      	nop
 801a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2b6:	bc08      	pop	{r3}
 801a2b8:	469e      	mov	lr, r3
 801a2ba:	4770      	bx	lr

0801a2bc <_fini>:
 801a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2be:	bf00      	nop
 801a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2c2:	bc08      	pop	{r3}
 801a2c4:	469e      	mov	lr, r3
 801a2c6:	4770      	bx	lr
