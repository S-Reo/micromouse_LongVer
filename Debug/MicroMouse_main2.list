
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000a478  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000310  08012478  08012478  00022478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08012788  08012788  000301dc  2**0
                  CONTENTS
  6 .ARM          00000008  08012788  08012788  00022788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08012790  08012790  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08012790  08012790  00022790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08012794  08012794  00022794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001dc  20000000  08012798  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005d8  200001dc  08012974  000301dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007b4  08012974  000307b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ae57  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003d51  00000000  00000000  0004b063  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001428  00000000  00000000  0004edb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001228  00000000  00000000  000501e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00023794  00000000  00000000  00051408  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00013079  00000000  00000000  00074b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c8565  00000000  00000000  00087c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0015017a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f04  00000000  00000000  001501f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001dc 	.word	0x200001dc
 800801c:	00000000 	.word	0x00000000
 8008020:	08012460 	.word	0x08012460

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e0 	.word	0x200001e0
 800803c:	08012460 	.word	0x08012460

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Accel>:
////	距離folを速度v_turnで進む;
//}

//
void Accel(float add_distance, float explore_speed)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008dc2:	edc7 0a00 	vstr	s1, [r7]
	float additional_speed=0;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
	additional_speed = explore_speed - target_velocity[BODY];
 8008dcc:	4b4a      	ldr	r3, [pc, #296]	; (8008ef8 <Accel+0x140>)
 8008dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8008dd2:	ed97 7a00 	vldr	s14, [r7]
 8008dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dda:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8008dde:	6978      	ldr	r0, [r7, #20]
 8008de0:	f7ff faea 	bl	80083b8 <__aeabi_f2d>
 8008de4:	a33e      	add	r3, pc, #248	; (adr r3, 8008ee0 <Accel+0x128>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7ff fb3d 	bl	8008468 <__aeabi_dmul>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4625      	mov	r5, r4
 8008df4:	461c      	mov	r4, r3
 8008df6:	6978      	ldr	r0, [r7, #20]
 8008df8:	f7ff fade 	bl	80083b8 <__aeabi_f2d>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4620      	mov	r0, r4
 8008e02:	4629      	mov	r1, r5
 8008e04:	f7ff fb30 	bl	8008468 <__aeabi_dmul>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	4625      	mov	r5, r4
 8008e0e:	461c      	mov	r4, r3
 8008e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e18:	ee17 0a90 	vmov	r0, s15
 8008e1c:	f7ff facc 	bl	80083b8 <__aeabi_f2d>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7ff fc48 	bl	80086bc <__aeabi_ddiv>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4618      	mov	r0, r3
 8008e32:	4621      	mov	r1, r4
 8008e34:	f7ff fdf0 	bl	8008a18 <__aeabi_d2f>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	4b30      	ldr	r3, [pc, #192]	; (8008efc <Accel+0x144>)
 8008e3c:	601a      	str	r2, [r3, #0]

	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8008e3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e46:	ee17 0a90 	vmov	r0, s15
 8008e4a:	f7ff fab5 	bl	80083b8 <__aeabi_f2d>
 8008e4e:	a326      	add	r3, pc, #152	; (adr r3, 8008ee8 <Accel+0x130>)
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	f7ff fc32 	bl	80086bc <__aeabi_ddiv>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	4621      	mov	r1, r4
 8008e60:	f7ff fdb2 	bl	80089c8 <__aeabi_d2iz>
 8008e64:	4603      	mov	r3, r0
 8008e66:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8008e68:	4b25      	ldr	r3, [pc, #148]	; (8008f00 <Accel+0x148>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4413      	add	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]

	while( ( keep_pulse ) >= ( total_pulse[BODY] ) )
 8008e72:	e029      	b.n	8008ec8 <Accel+0x110>
	{
		//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
		if( ( ( keep_pulse - (target_pulse*0.1) ) ) <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fa8d 	bl	8008394 <__aeabi_i2d>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	6938      	ldr	r0, [r7, #16]
 8008e80:	f7ff fa88 	bl	8008394 <__aeabi_i2d>
 8008e84:	a31a      	add	r3, pc, #104	; (adr r3, 8008ef0 <Accel+0x138>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	f7ff faed 	bl	8008468 <__aeabi_dmul>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4620      	mov	r0, r4
 8008e94:	4629      	mov	r1, r5
 8008e96:	f7ff f92f 	bl	80080f8 <__aeabi_dsub>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	4625      	mov	r5, r4
 8008ea0:	461c      	mov	r4, r3
 8008ea2:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <Accel+0x148>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff fa74 	bl	8008394 <__aeabi_i2d>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	f7ff fd54 	bl	8008960 <__aeabi_dcmple>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d100      	bne.n	8008ec0 <Accel+0x108>
 8008ebe:	e003      	b.n	8008ec8 <Accel+0x110>
		{
			acceleration = 0;
 8008ec0:	4b0e      	ldr	r3, [pc, #56]	; (8008efc <Accel+0x144>)
 8008ec2:	f04f 0200 	mov.w	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]
	while( ( keep_pulse ) >= ( total_pulse[BODY] ) )
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <Accel+0x148>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	dad0      	bge.n	8008e74 <Accel+0xbc>
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 8008ed2:	bf00      	nop
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eda:	bf00      	nop
 8008edc:	f3af 8000 	nop.w
 8008ee0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008ee4:	3f50624d 	.word	0x3f50624d
 8008ee8:	317249d5 	.word	0x317249d5
 8008eec:	3f502de0 	.word	0x3f502de0
 8008ef0:	9999999a 	.word	0x9999999a
 8008ef4:	3fb99999 	.word	0x3fb99999
 8008ef8:	20000270 	.word	0x20000270
 8008efc:	2000027c 	.word	0x2000027c
 8008f00:	2000025c 	.word	0x2000025c
 8008f04:	00000000 	.word	0x00000000

08008f08 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 8008f08:	b5b0      	push	{r4, r5, r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f12:	edc7 0a00 	vstr	s1, [r7]
	float down_speed=0;
 8008f16:	f04f 0300 	mov.w	r3, #0
 8008f1a:	617b      	str	r3, [r7, #20]
	down_speed = target_velocity[BODY] - end_speed;
 8008f1c:	4b4c      	ldr	r3, [pc, #304]	; (8009050 <Decel+0x148>)
 8008f1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008f22:	edd7 7a00 	vldr	s15, [r7]
 8008f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f2a:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8008f2e:	6978      	ldr	r0, [r7, #20]
 8008f30:	f7ff fa42 	bl	80083b8 <__aeabi_f2d>
 8008f34:	a340      	add	r3, pc, #256	; (adr r3, 8009038 <Decel+0x130>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7ff fa95 	bl	8008468 <__aeabi_dmul>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	460c      	mov	r4, r1
 8008f42:	4625      	mov	r5, r4
 8008f44:	461c      	mov	r4, r3
 8008f46:	6978      	ldr	r0, [r7, #20]
 8008f48:	f7ff fa36 	bl	80083b8 <__aeabi_f2d>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4620      	mov	r0, r4
 8008f52:	4629      	mov	r1, r5
 8008f54:	f7ff fa88 	bl	8008468 <__aeabi_dmul>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4625      	mov	r5, r4
 8008f5e:	461c      	mov	r4, r3
 8008f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f68:	ee17 0a90 	vmov	r0, s15
 8008f6c:	f7ff fa24 	bl	80083b8 <__aeabi_f2d>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7ff fba0 	bl	80086bc <__aeabi_ddiv>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	460c      	mov	r4, r1
 8008f80:	4618      	mov	r0, r3
 8008f82:	4621      	mov	r1, r4
 8008f84:	f7ff fd48 	bl	8008a18 <__aeabi_d2f>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef1 7a67 	vneg.f32	s15, s15
 8008f92:	4b30      	ldr	r3, [pc, #192]	; (8009054 <Decel+0x14c>)
 8008f94:	edc3 7a00 	vstr	s15, [r3]

	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8008f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008fa0:	ee17 0a90 	vmov	r0, s15
 8008fa4:	f7ff fa08 	bl	80083b8 <__aeabi_f2d>
 8008fa8:	a325      	add	r3, pc, #148	; (adr r3, 8009040 <Decel+0x138>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f7ff fb85 	bl	80086bc <__aeabi_ddiv>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	4621      	mov	r1, r4
 8008fba:	f7ff fd05 	bl	80089c8 <__aeabi_d2iz>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8008fc2:	4b25      	ldr	r3, [pc, #148]	; (8009058 <Decel+0x150>)
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4413      	add	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]

	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 8008fcc:	e029      	b.n	8009022 <Decel+0x11a>
	{
		//探索目標速度 <= 制御目標速度  となったら、減速をやめる。
		if(  ( ( keep_pulse - (target_pulse*0.1) ) ) <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7ff f9e0 	bl	8008394 <__aeabi_i2d>
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	460d      	mov	r5, r1
 8008fd8:	6938      	ldr	r0, [r7, #16]
 8008fda:	f7ff f9db 	bl	8008394 <__aeabi_i2d>
 8008fde:	a31a      	add	r3, pc, #104	; (adr r3, 8009048 <Decel+0x140>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7ff fa40 	bl	8008468 <__aeabi_dmul>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4620      	mov	r0, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f7ff f882 	bl	80080f8 <__aeabi_dsub>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4625      	mov	r5, r4
 8008ffa:	461c      	mov	r4, r3
 8008ffc:	4b16      	ldr	r3, [pc, #88]	; (8009058 <Decel+0x150>)
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff f9c7 	bl	8008394 <__aeabi_i2d>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	f7ff fca7 	bl	8008960 <__aeabi_dcmple>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d100      	bne.n	800901a <Decel+0x112>
 8009018:	e003      	b.n	8009022 <Decel+0x11a>
		{
			acceleration = 0;
 800901a:	4b0e      	ldr	r3, [pc, #56]	; (8009054 <Decel+0x14c>)
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 8009022:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <Decel+0x150>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	429a      	cmp	r2, r3
 800902a:	dad0      	bge.n	8008fce <Decel+0xc6>
		}
	}
}
 800902c:	bf00      	nop
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bdb0      	pop	{r4, r5, r7, pc}
 8009034:	f3af 8000 	nop.w
 8009038:	d2f1a9fc 	.word	0xd2f1a9fc
 800903c:	3f50624d 	.word	0x3f50624d
 8009040:	317249d5 	.word	0x317249d5
 8009044:	3f502de0 	.word	0x3f502de0
 8009048:	9999999a 	.word	0x9999999a
 800904c:	3fb99999 	.word	0x3fb99999
 8009050:	20000270 	.word	0x20000270
 8009054:	2000027c 	.word	0x2000027c
 8009058:	2000025c 	.word	0x2000025c

0800905c <GoStraight>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void GoStraight(int accel, float explore_speed)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	ed87 0a00 	vstr	s0, [r7]

	//エンコーダの移動量チェックって、もっと細かい間隔でやったほうがいいのでは。

		//target_velocity[BODY] = explore_speed;
	//加速なら
	if(accel == TRUE)	//目標移動量と到達速度から加速度を計算する。
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d107      	bne.n	800907e <GoStraight+0x22>
		explore_speed += 0;
 800906e:	edd7 7a00 	vldr	s15, [r7]
 8009072:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80090cc <GoStraight+0x70>
 8009076:	ee77 7a87 	vadd.f32	s15, s15, s14
 800907a:	edc7 7a00 	vstr	s15, [r7]

	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	Accel( 90/2 , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800907e:	edd7 0a00 	vldr	s1, [r7]
 8009082:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80090d0 <GoStraight+0x74>
 8009086:	f7ff fe97 	bl	8008db8 <Accel>

	int target_pulse = (int)(2*90/MM_PER_PULSE);
 800908a:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <GoStraight+0x78>)
 800908c:	60fb      	str	r3, [r7, #12]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 800908e:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <GoStraight+0x7c>)
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]

	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 8009098:	e00f      	b.n	80090ba <GoStraight+0x5e>
	{
		//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
		if(accel == TRUE && ( ( keep_pulse ) / 2 ) <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d10c      	bne.n	80090ba <GoStraight+0x5e>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	0fda      	lsrs	r2, r3, #31
 80090a4:	4413      	add	r3, r2
 80090a6:	105b      	asrs	r3, r3, #1
 80090a8:	461a      	mov	r2, r3
 80090aa:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <GoStraight+0x7c>)
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	dc03      	bgt.n	80090ba <GoStraight+0x5e>
		{
			acceleration = 0;
 80090b2:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <GoStraight+0x80>)
 80090b4:	f04f 0200 	mov.w	r2, #0
 80090b8:	601a      	str	r2, [r3, #0]
	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 80090ba:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <GoStraight+0x7c>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	daea      	bge.n	800909a <GoStraight+0x3e>

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 80090c4:	bf00      	nop
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	00000000 	.word	0x00000000
 80090d0:	42340000 	.word	0x42340000
 80090d4:	0002c806 	.word	0x0002c806
 80090d8:	2000025c 	.word	0x2000025c
 80090dc:	2000027c 	.word	0x2000027c

080090e0 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <GetPulseDisplacement>:
//目的 : エンコーダパルスの初期値との差分を取得する(割り込み内)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : パルスの変位
//-------------------------//
int GetPulseDisplacement(int *timer_counter,  int initial_pulse)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
	//割り込みで呼び出す想定

	int pulse_displacement = *timer_counter;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	60fb      	str	r3, [r7, #12]
	pulse_displacement = -1* (pulse_displacement - initial_pulse);
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	60fb      	str	r3, [r7, #12]

	//次回の呼び出しのためにすぐ初期化。
	InitPulse( timer_counter, initial_pulse);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff ffe2 	bl	80090e0 <InitPulse>

	return pulse_displacement;
 800911c:	68fb      	ldr	r3, [r7, #12]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8009138:	4a2c      	ldr	r2, [pc, #176]	; (80091ec <GetWallDataAverage+0xc4>)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	bfb8      	it	lt
 8009148:	425b      	neglt	r3, r3
 800914a:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800914c:	4927      	ldr	r1, [pc, #156]	; (80091ec <GetWallDataAverage+0xc4>)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 8009156:	4a26      	ldr	r2, [pc, #152]	; (80091f0 <GetWallDataAverage+0xc8>)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	441a      	add	r2, r3
 8009162:	4923      	ldr	r1, [pc, #140]	; (80091f0 <GetWallDataAverage+0xc8>)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800916a:	4a22      	ldr	r2, [pc, #136]	; (80091f4 <GetWallDataAverage+0xcc>)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	491f      	ldr	r1, [pc, #124]	; (80091f4 <GetWallDataAverage+0xcc>)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800917c:	4a1d      	ldr	r2, [pc, #116]	; (80091f4 <GetWallDataAverage+0xcc>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	429a      	cmp	r2, r3
 8009188:	d121      	bne.n	80091ce <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800918a:	4a19      	ldr	r2, [pc, #100]	; (80091f0 <GetWallDataAverage+0xc8>)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800919a:	4a16      	ldr	r2, [pc, #88]	; (80091f4 <GetWallDataAverage+0xcc>)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ae:	4a12      	ldr	r2, [pc, #72]	; (80091f8 <GetWallDataAverage+0xd0>)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 80091ba:	4a0d      	ldr	r2, [pc, #52]	; (80091f0 <GetWallDataAverage+0xc8>)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2100      	movs	r1, #0
 80091c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 80091c4:	4a0b      	ldr	r2, [pc, #44]	; (80091f4 <GetWallDataAverage+0xcc>)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2100      	movs	r1, #0
 80091ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 80091ce:	4a0a      	ldr	r2, [pc, #40]	; (80091f8 <GetWallDataAverage+0xd0>)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	ee07 3a90 	vmov	s15, r3
}
 80091dc:	eeb0 0a67 	vmov.f32	s0, s15
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	200001f8 	.word	0x200001f8
 80091f0:	20000208 	.word	0x20000208
 80091f4:	20000218 	.word	0x20000218
 80091f8:	20000228 	.word	0x20000228

080091fc <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	ed87 0a02 	vstr	s0, [r7, #8]
 8009208:	edc7 0a01 	vstr	s1, [r7, #4]
 800920c:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 8009210:	f04f 0300 	mov.w	r3, #0
 8009214:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	ee07 3a90 	vmov	s15, r3
 800921c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009220:	edd7 7a02 	vldr	s15, [r7, #8]
 8009224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009228:	edd7 7a01 	vldr	s15, [r7, #4]
 800922c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009230:	ed97 7a00 	vldr	s14, [r7]
 8009234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009238:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	ee07 3a90 	vmov	s15, r3
}
 8009242:	eeb0 0a67 	vmov.f32	s0, s15
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800925a:	2301      	movs	r3, #1
 800925c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800925e:	2300      	movs	r3, #0
 8009260:	60bb      	str	r3, [r7, #8]
 8009262:	e007      	b.n	8009274 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	fb02 f303 	mul.w	r3, r2, r3
 800926c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	3301      	adds	r3, #1
 8009272:	60bb      	str	r3, [r7, #8]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	dbf3      	blt.n	8009264 <IntegerPower+0x14>
	}
	return pattern_num;
 800927c:	68fb      	ldr	r3, [r7, #12]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800928a:	b480      	push	{r7}
 800928c:	b08b      	sub	sp, #44	; 0x2c
 800928e:	af00      	add	r7, sp, #0
 8009290:	ed87 0a03 	vstr	s0, [r7, #12]
 8009294:	edc7 0a02 	vstr	s1, [r7, #8]
 8009298:	ed87 1a01 	vstr	s2, [r7, #4]
 800929c:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800929e:	edd7 6a03 	vldr	s13, [r7, #12]
 80092a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80092a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092aa:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 80092ae:	edd7 6a02 	vldr	s13, [r7, #8]
 80092b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80092b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ba:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 80092be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80092c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	ee07 3a90 	vmov	s15, r3
 80092d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092d8:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 80092e0:	2300      	movs	r3, #0
 80092e2:	623b      	str	r3, [r7, #32]
 80092e4:	e018      	b.n	8009318 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80092f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80092fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009300:	ed97 7a07 	vldr	s14, [r7, #28]
 8009304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930c:	db01      	blt.n	8009312 <GetBatteryLevel+0x88>
		{
			pattern = i;
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	3301      	adds	r3, #1
 8009316:	623b      	str	r3, [r7, #32]
 8009318:	6a3a      	ldr	r2, [r7, #32]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	dbe2      	blt.n	80092e6 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009322:	4618      	mov	r0, r3
 8009324:	372c      	adds	r7, #44	; 0x2c
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <TimeMonitor>:
#include "Motor_Driver.h"

//以下割り込みで呼ぶ関数
//このあたりの関数は、構造体変数を扱うファイルにまとめたほうがいいかもしれない。(メインのアルゴリズム、アクション)
void TimeMonitor()
{
 800932e:	b480      	push	{r7}
 8009330:	af00      	add	r7, sp, #0
	//いろいろな時間を測って監視する。

}
 8009332:	bf00      	nop
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	0000      	movs	r0, r0
	...

08009340 <UpdatePhisicalDataFromEnc>:

void UpdatePhisicalDataFromEnc()
{
 8009340:	b5b0      	push	{r4, r5, r7, lr}
 8009342:	af00      	add	r7, sp, #0
	pulse_displacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 8009344:	f247 512f 	movw	r1, #29999	; 0x752f
 8009348:	4857      	ldr	r0, [pc, #348]	; (80094a8 <UpdatePhisicalDataFromEnc+0x168>)
 800934a:	f7ff fed7 	bl	80090fc <GetPulseDisplacement>
 800934e:	4602      	mov	r2, r0
 8009350:	4b56      	ldr	r3, [pc, #344]	; (80094ac <UpdatePhisicalDataFromEnc+0x16c>)
 8009352:	601a      	str	r2, [r3, #0]
	pulse_displacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 8009354:	f247 512f 	movw	r1, #29999	; 0x752f
 8009358:	4855      	ldr	r0, [pc, #340]	; (80094b0 <UpdatePhisicalDataFromEnc+0x170>)
 800935a:	f7ff fecf 	bl	80090fc <GetPulseDisplacement>
 800935e:	4602      	mov	r2, r0
 8009360:	4b52      	ldr	r3, [pc, #328]	; (80094ac <UpdatePhisicalDataFromEnc+0x16c>)
 8009362:	605a      	str	r2, [r3, #4]

	//速度 mm/s
	current_velocity[LEFT] = ( (float)pulse_displacement[LEFT] * MM_PER_PULSE ) / T1;
 8009364:	4b51      	ldr	r3, [pc, #324]	; (80094ac <UpdatePhisicalDataFromEnc+0x16c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	ee07 3a90 	vmov	s15, r3
 800936c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009370:	ee17 0a90 	vmov	r0, s15
 8009374:	f7ff f820 	bl	80083b8 <__aeabi_f2d>
 8009378:	a345      	add	r3, pc, #276	; (adr r3, 8009490 <UpdatePhisicalDataFromEnc+0x150>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7ff f873 	bl	8008468 <__aeabi_dmul>
 8009382:	4603      	mov	r3, r0
 8009384:	460c      	mov	r4, r1
 8009386:	4618      	mov	r0, r3
 8009388:	4621      	mov	r1, r4
 800938a:	a343      	add	r3, pc, #268	; (adr r3, 8009498 <UpdatePhisicalDataFromEnc+0x158>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7ff f994 	bl	80086bc <__aeabi_ddiv>
 8009394:	4603      	mov	r3, r0
 8009396:	460c      	mov	r4, r1
 8009398:	4618      	mov	r0, r3
 800939a:	4621      	mov	r1, r4
 800939c:	f7ff fb3c 	bl	8008a18 <__aeabi_d2f>
 80093a0:	4602      	mov	r2, r0
 80093a2:	4b44      	ldr	r3, [pc, #272]	; (80094b4 <UpdatePhisicalDataFromEnc+0x174>)
 80093a4:	601a      	str	r2, [r3, #0]
	current_velocity[RIGHT] = ( (float)pulse_displacement[RIGHT] * MM_PER_PULSE ) / T1;
 80093a6:	4b41      	ldr	r3, [pc, #260]	; (80094ac <UpdatePhisicalDataFromEnc+0x16c>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093b2:	ee17 0a90 	vmov	r0, s15
 80093b6:	f7fe ffff 	bl	80083b8 <__aeabi_f2d>
 80093ba:	a335      	add	r3, pc, #212	; (adr r3, 8009490 <UpdatePhisicalDataFromEnc+0x150>)
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	f7ff f852 	bl	8008468 <__aeabi_dmul>
 80093c4:	4603      	mov	r3, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	4618      	mov	r0, r3
 80093ca:	4621      	mov	r1, r4
 80093cc:	a332      	add	r3, pc, #200	; (adr r3, 8009498 <UpdatePhisicalDataFromEnc+0x158>)
 80093ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d2:	f7ff f973 	bl	80086bc <__aeabi_ddiv>
 80093d6:	4603      	mov	r3, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	4618      	mov	r0, r3
 80093dc:	4621      	mov	r1, r4
 80093de:	f7ff fb1b 	bl	8008a18 <__aeabi_d2f>
 80093e2:	4602      	mov	r2, r0
 80093e4:	4b33      	ldr	r3, [pc, #204]	; (80094b4 <UpdatePhisicalDataFromEnc+0x174>)
 80093e6:	605a      	str	r2, [r3, #4]

	//移動量 mm/msを積算
	total_pulse[LEFT] += pulse_displacement[LEFT];
 80093e8:	4b33      	ldr	r3, [pc, #204]	; (80094b8 <UpdatePhisicalDataFromEnc+0x178>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	4b2f      	ldr	r3, [pc, #188]	; (80094ac <UpdatePhisicalDataFromEnc+0x16c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4413      	add	r3, r2
 80093f2:	4a31      	ldr	r2, [pc, #196]	; (80094b8 <UpdatePhisicalDataFromEnc+0x178>)
 80093f4:	6013      	str	r3, [r2, #0]
	total_pulse[RIGHT] += pulse_displacement[RIGHT];
 80093f6:	4b30      	ldr	r3, [pc, #192]	; (80094b8 <UpdatePhisicalDataFromEnc+0x178>)
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	4b2c      	ldr	r3, [pc, #176]	; (80094ac <UpdatePhisicalDataFromEnc+0x16c>)
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	4413      	add	r3, r2
 8009400:	4a2d      	ldr	r2, [pc, #180]	; (80094b8 <UpdatePhisicalDataFromEnc+0x178>)
 8009402:	6053      	str	r3, [r2, #4]
	total_pulse[BODY] = total_pulse[LEFT]+total_pulse[RIGHT];
 8009404:	4b2c      	ldr	r3, [pc, #176]	; (80094b8 <UpdatePhisicalDataFromEnc+0x178>)
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	4b2b      	ldr	r3, [pc, #172]	; (80094b8 <UpdatePhisicalDataFromEnc+0x178>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4413      	add	r3, r2
 800940e:	4a2a      	ldr	r2, [pc, #168]	; (80094b8 <UpdatePhisicalDataFromEnc+0x178>)
 8009410:	6093      	str	r3, [r2, #8]
	//角速度 rad/s
	angular_v = ( current_velocity[LEFT] - current_velocity[RIGHT] ) / TREAD_WIDTH;
 8009412:	4b28      	ldr	r3, [pc, #160]	; (80094b4 <UpdatePhisicalDataFromEnc+0x174>)
 8009414:	ed93 7a00 	vldr	s14, [r3]
 8009418:	4b26      	ldr	r3, [pc, #152]	; (80094b4 <UpdatePhisicalDataFromEnc+0x174>)
 800941a:	edd3 7a01 	vldr	s15, [r3, #4]
 800941e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009422:	ee17 0a90 	vmov	r0, s15
 8009426:	f7fe ffc7 	bl	80083b8 <__aeabi_f2d>
 800942a:	a31d      	add	r3, pc, #116	; (adr r3, 80094a0 <UpdatePhisicalDataFromEnc+0x160>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f7ff f944 	bl	80086bc <__aeabi_ddiv>
 8009434:	4603      	mov	r3, r0
 8009436:	460c      	mov	r4, r1
 8009438:	4618      	mov	r0, r3
 800943a:	4621      	mov	r1, r4
 800943c:	f7ff faec 	bl	8008a18 <__aeabi_d2f>
 8009440:	4602      	mov	r2, r0
 8009442:	4b1e      	ldr	r3, [pc, #120]	; (80094bc <UpdatePhisicalDataFromEnc+0x17c>)
 8009444:	601a      	str	r2, [r3, #0]

	//角度 rad/msを積算
	angle += angular_v * T1;
 8009446:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <UpdatePhisicalDataFromEnc+0x180>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe ffb4 	bl	80083b8 <__aeabi_f2d>
 8009450:	4604      	mov	r4, r0
 8009452:	460d      	mov	r5, r1
 8009454:	4b19      	ldr	r3, [pc, #100]	; (80094bc <UpdatePhisicalDataFromEnc+0x17c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4618      	mov	r0, r3
 800945a:	f7fe ffad 	bl	80083b8 <__aeabi_f2d>
 800945e:	a30e      	add	r3, pc, #56	; (adr r3, 8009498 <UpdatePhisicalDataFromEnc+0x158>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7ff f800 	bl	8008468 <__aeabi_dmul>
 8009468:	4602      	mov	r2, r0
 800946a:	460b      	mov	r3, r1
 800946c:	4620      	mov	r0, r4
 800946e:	4629      	mov	r1, r5
 8009470:	f7fe fe44 	bl	80080fc <__adddf3>
 8009474:	4603      	mov	r3, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4618      	mov	r0, r3
 800947a:	4621      	mov	r1, r4
 800947c:	f7ff facc 	bl	8008a18 <__aeabi_d2f>
 8009480:	4602      	mov	r2, r0
 8009482:	4b0f      	ldr	r3, [pc, #60]	; (80094c0 <UpdatePhisicalDataFromEnc+0x180>)
 8009484:	601a      	str	r2, [r3, #0]
	//ここまでがエンコーダからのUpdate
}
 8009486:	bf00      	nop
 8009488:	bdb0      	pop	{r4, r5, r7, pc}
 800948a:	bf00      	nop
 800948c:	f3af 8000 	nop.w
 8009490:	317249d5 	.word	0x317249d5
 8009494:	3f502de0 	.word	0x3f502de0
 8009498:	d2f1a9fc 	.word	0xd2f1a9fc
 800949c:	3f50624d 	.word	0x3f50624d
 80094a0:	33333333 	.word	0x33333333
 80094a4:	40423333 	.word	0x40423333
 80094a8:	40000424 	.word	0x40000424
 80094ac:	20000248 	.word	0x20000248
 80094b0:	40000824 	.word	0x40000824
 80094b4:	20000250 	.word	0x20000250
 80094b8:	2000025c 	.word	0x2000025c
 80094bc:	20000268 	.word	0x20000268
 80094c0:	2000026c 	.word	0x2000026c
 80094c4:	00000000 	.word	0x00000000

080094c8 <ControlMotor>:
void ControlMotor()
{
 80094c8:	b5b0      	push	{r4, r5, r7, lr}
 80094ca:	af00      	add	r7, sp, #0
	//ここで更新する変数をグローバルに、もしくは構造体で書ければ、あとはメインのアルゴリズムを記述するだけ？

	UpdatePhisicalDataFromEnc();
 80094cc:	f7ff ff38 	bl	8009340 <UpdatePhisicalDataFromEnc>

	//ここからは目標値と現在値を用いた制御。

	//タイヤ目標値計算
	target_velocity[BODY] += acceleration;
 80094d0:	4b55      	ldr	r3, [pc, #340]	; (8009628 <ControlMotor+0x160>)
 80094d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80094d6:	4b55      	ldr	r3, [pc, #340]	; (800962c <ControlMotor+0x164>)
 80094d8:	edd3 7a00 	vldr	s15, [r3]
 80094dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e0:	4b51      	ldr	r3, [pc, #324]	; (8009628 <ControlMotor+0x160>)
 80094e2:	edc3 7a02 	vstr	s15, [r3, #8]
	target_angular_v += angular_acceleration;
 80094e6:	4b52      	ldr	r3, [pc, #328]	; (8009630 <ControlMotor+0x168>)
 80094e8:	ed93 7a00 	vldr	s14, [r3]
 80094ec:	4b51      	ldr	r3, [pc, #324]	; (8009634 <ControlMotor+0x16c>)
 80094ee:	edd3 7a00 	vldr	s15, [r3]
 80094f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094f6:	4b4e      	ldr	r3, [pc, #312]	; (8009630 <ControlMotor+0x168>)
 80094f8:	edc3 7a00 	vstr	s15, [r3]


	target_velocity[RIGHT] = ( target_velocity[BODY]*2 - target_angular_v * TREAD_WIDTH )/2;
 80094fc:	4b4a      	ldr	r3, [pc, #296]	; (8009628 <ControlMotor+0x160>)
 80094fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8009502:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009506:	ee17 0a90 	vmov	r0, s15
 800950a:	f7fe ff55 	bl	80083b8 <__aeabi_f2d>
 800950e:	4604      	mov	r4, r0
 8009510:	460d      	mov	r5, r1
 8009512:	4b47      	ldr	r3, [pc, #284]	; (8009630 <ControlMotor+0x168>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f7fe ff4e 	bl	80083b8 <__aeabi_f2d>
 800951c:	a340      	add	r3, pc, #256	; (adr r3, 8009620 <ControlMotor+0x158>)
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	f7fe ffa1 	bl	8008468 <__aeabi_dmul>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4620      	mov	r0, r4
 800952c:	4629      	mov	r1, r5
 800952e:	f7fe fde3 	bl	80080f8 <__aeabi_dsub>
 8009532:	4603      	mov	r3, r0
 8009534:	460c      	mov	r4, r1
 8009536:	4618      	mov	r0, r3
 8009538:	4621      	mov	r1, r4
 800953a:	f04f 0200 	mov.w	r2, #0
 800953e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009542:	f7ff f8bb 	bl	80086bc <__aeabi_ddiv>
 8009546:	4603      	mov	r3, r0
 8009548:	460c      	mov	r4, r1
 800954a:	4618      	mov	r0, r3
 800954c:	4621      	mov	r1, r4
 800954e:	f7ff fa63 	bl	8008a18 <__aeabi_d2f>
 8009552:	4602      	mov	r2, r0
 8009554:	4b34      	ldr	r3, [pc, #208]	; (8009628 <ControlMotor+0x160>)
 8009556:	605a      	str	r2, [r3, #4]
	target_velocity[LEFT] = ( target_angular_v *TREAD_WIDTH ) + target_velocity[RIGHT];
 8009558:	4b35      	ldr	r3, [pc, #212]	; (8009630 <ControlMotor+0x168>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe ff2b 	bl	80083b8 <__aeabi_f2d>
 8009562:	a32f      	add	r3, pc, #188	; (adr r3, 8009620 <ControlMotor+0x158>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7fe ff7e 	bl	8008468 <__aeabi_dmul>
 800956c:	4603      	mov	r3, r0
 800956e:	460c      	mov	r4, r1
 8009570:	4625      	mov	r5, r4
 8009572:	461c      	mov	r4, r3
 8009574:	4b2c      	ldr	r3, [pc, #176]	; (8009628 <ControlMotor+0x160>)
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe ff1d 	bl	80083b8 <__aeabi_f2d>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f7fe fdb9 	bl	80080fc <__adddf3>
 800958a:	4603      	mov	r3, r0
 800958c:	460c      	mov	r4, r1
 800958e:	4618      	mov	r0, r3
 8009590:	4621      	mov	r1, r4
 8009592:	f7ff fa41 	bl	8008a18 <__aeabi_d2f>
 8009596:	4602      	mov	r2, r0
 8009598:	4b23      	ldr	r3, [pc, #140]	; (8009628 <ControlMotor+0x160>)
 800959a:	601a      	str	r2, [r3, #0]

	//制御出力値生成
	//PIDControl(int n, int T, float target, float current, int *output);
	velocity_left_out = PIDControl( L_VELO, T1, target_velocity[LEFT], current_velocity[LEFT]);
 800959c:	4b22      	ldr	r3, [pc, #136]	; (8009628 <ControlMotor+0x160>)
 800959e:	edd3 7a00 	vldr	s15, [r3]
 80095a2:	4b25      	ldr	r3, [pc, #148]	; (8009638 <ControlMotor+0x170>)
 80095a4:	ed93 7a00 	vldr	s14, [r3]
 80095a8:	eeb0 1a47 	vmov.f32	s2, s14
 80095ac:	eef0 0a67 	vmov.f32	s1, s15
 80095b0:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800963c <ControlMotor+0x174>
 80095b4:	2000      	movs	r0, #0
 80095b6:	f000 fac7 	bl	8009b48 <PIDControl>
 80095ba:	4602      	mov	r2, r0
 80095bc:	4b20      	ldr	r3, [pc, #128]	; (8009640 <ControlMotor+0x178>)
 80095be:	601a      	str	r2, [r3, #0]
	velocity_right_out = PIDControl( R_VELO, T1, target_velocity[RIGHT], current_velocity[RIGHT]);
 80095c0:	4b19      	ldr	r3, [pc, #100]	; (8009628 <ControlMotor+0x160>)
 80095c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80095c6:	4b1c      	ldr	r3, [pc, #112]	; (8009638 <ControlMotor+0x170>)
 80095c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80095cc:	eeb0 1a47 	vmov.f32	s2, s14
 80095d0:	eef0 0a67 	vmov.f32	s1, s15
 80095d4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800963c <ControlMotor+0x174>
 80095d8:	2001      	movs	r0, #1
 80095da:	f000 fab5 	bl	8009b48 <PIDControl>
 80095de:	4602      	mov	r2, r0
 80095e0:	4b18      	ldr	r3, [pc, #96]	; (8009644 <ControlMotor+0x17c>)
 80095e2:	601a      	str	r2, [r3, #0]
	//PIDControl( B_VELO, T1, target, current, &left);
	//PIDControl( D_WALL, T1, photo[SL], photo[SR], &wall_right_out);

	wall_left_out = -wall_right_out;
 80095e4:	4b18      	ldr	r3, [pc, #96]	; (8009648 <ControlMotor+0x180>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	425b      	negs	r3, r3
 80095ea:	4a18      	ldr	r2, [pc, #96]	; (800964c <ControlMotor+0x184>)
 80095ec:	6013      	str	r3, [r2, #0]

	L_motor = wall_left_out + velocity_left_out;
 80095ee:	4b17      	ldr	r3, [pc, #92]	; (800964c <ControlMotor+0x184>)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b13      	ldr	r3, [pc, #76]	; (8009640 <ControlMotor+0x178>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4413      	add	r3, r2
 80095f8:	4a15      	ldr	r2, [pc, #84]	; (8009650 <ControlMotor+0x188>)
 80095fa:	6013      	str	r3, [r2, #0]
	R_motor = wall_right_out + velocity_right_out;
 80095fc:	4b12      	ldr	r3, [pc, #72]	; (8009648 <ControlMotor+0x180>)
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	4b10      	ldr	r3, [pc, #64]	; (8009644 <ControlMotor+0x17c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4413      	add	r3, r2
 8009606:	4a13      	ldr	r2, [pc, #76]	; (8009654 <ControlMotor+0x18c>)
 8009608:	6013      	str	r3, [r2, #0]

	//モータに出力
	Motor_Switch( L_motor, R_motor );
 800960a:	4b11      	ldr	r3, [pc, #68]	; (8009650 <ControlMotor+0x188>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b11      	ldr	r3, [pc, #68]	; (8009654 <ControlMotor+0x18c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4619      	mov	r1, r3
 8009614:	4610      	mov	r0, r2
 8009616:	f001 ff77 	bl	800b508 <Motor_Switch>
//	int left = 300, right = 300;
//	Motor_Switch( left, right );

}
 800961a:	bf00      	nop
 800961c:	bdb0      	pop	{r4, r5, r7, pc}
 800961e:	bf00      	nop
 8009620:	33333333 	.word	0x33333333
 8009624:	40423333 	.word	0x40423333
 8009628:	20000270 	.word	0x20000270
 800962c:	2000027c 	.word	0x2000027c
 8009630:	20000280 	.word	0x20000280
 8009634:	20000284 	.word	0x20000284
 8009638:	20000250 	.word	0x20000250
 800963c:	3a83126f 	.word	0x3a83126f
 8009640:	20000288 	.word	0x20000288
 8009644:	2000028c 	.word	0x2000028c
 8009648:	20000290 	.word	0x20000290
 800964c:	20000294 	.word	0x20000294
 8009650:	20000298 	.word	0x20000298
 8009654:	2000029c 	.word	0x2000029c

08009658 <UpdatePhotoData>:

void UpdatePhotoData()
{
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
	photo[FL] = GetWallDataAverage(10, adc1[0], FL);
 800965c:	4b18      	ldr	r3, [pc, #96]	; (80096c0 <UpdatePhotoData+0x68>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2200      	movs	r2, #0
 8009662:	4619      	mov	r1, r3
 8009664:	200a      	movs	r0, #10
 8009666:	f7ff fd5f 	bl	8009128 <GetWallDataAverage>
 800966a:	eef0 7a40 	vmov.f32	s15, s0
 800966e:	4b15      	ldr	r3, [pc, #84]	; (80096c4 <UpdatePhotoData+0x6c>)
 8009670:	edc3 7a00 	vstr	s15, [r3]
	photo[SR] = GetWallDataAverage(10, adc1[1], SR);
 8009674:	4b12      	ldr	r3, [pc, #72]	; (80096c0 <UpdatePhotoData+0x68>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	4619      	mov	r1, r3
 800967c:	200a      	movs	r0, #10
 800967e:	f7ff fd53 	bl	8009128 <GetWallDataAverage>
 8009682:	eef0 7a40 	vmov.f32	s15, s0
 8009686:	4b0f      	ldr	r3, [pc, #60]	; (80096c4 <UpdatePhotoData+0x6c>)
 8009688:	edc3 7a01 	vstr	s15, [r3, #4]
	photo[SL] = GetWallDataAverage(10, adc2[0], SL);
 800968c:	4b0e      	ldr	r3, [pc, #56]	; (80096c8 <UpdatePhotoData+0x70>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2202      	movs	r2, #2
 8009692:	4619      	mov	r1, r3
 8009694:	200a      	movs	r0, #10
 8009696:	f7ff fd47 	bl	8009128 <GetWallDataAverage>
 800969a:	eef0 7a40 	vmov.f32	s15, s0
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <UpdatePhotoData+0x6c>)
 80096a0:	edc3 7a02 	vstr	s15, [r3, #8]
	photo[FR] = GetWallDataAverage(10, adc2[1], FR);
 80096a4:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <UpdatePhotoData+0x70>)
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	2203      	movs	r2, #3
 80096aa:	4619      	mov	r1, r3
 80096ac:	200a      	movs	r0, #10
 80096ae:	f7ff fd3b 	bl	8009128 <GetWallDataAverage>
 80096b2:	eef0 7a40 	vmov.f32	s15, s0
 80096b6:	4b03      	ldr	r3, [pc, #12]	; (80096c4 <UpdatePhotoData+0x6c>)
 80096b8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80096bc:	bf00      	nop
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000404 	.word	0x20000404
 80096c4:	20000238 	.word	0x20000238
 80096c8:	20000410 	.word	0x20000410

080096cc <HAL_TIM_PeriodElapsedCallback>:


//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a08      	ldr	r2, [pc, #32]	; (80096f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d103      	bne.n	80096e4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TimeMonitor();
 80096dc:	f7ff fe27 	bl	800932e <TimeMonitor>
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		//出力値をモータ出力用関数に渡す
		ControlMotor();
 80096e0:	f7ff fef2 	bl	80094c8 <ControlMotor>
	}

	if( htim == &htim8)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a05      	ldr	r2, [pc, #20]	; (80096fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d101      	bne.n	80096f0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		//壁センサデータの更新だけ
		UpdatePhotoData();
 80096ec:	f7ff ffb4 	bl	8009658 <UpdatePhotoData>

	}
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	200006a8 	.word	0x200006a8
 80096fc:	20000420 	.word	0x20000420

08009700 <WritingFree>:
#include "UI.h"
#include "Action.h"


void WritingFree()
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0

	//好きなようにいじるモード。テスト場。


	//ペリフェラルの動作開始
	Motor_PWM_Start();
 8009704:	f001 fee6 	bl	800b4d4 <Motor_PWM_Start>
	EncoderStart();
 8009708:	f001 fdea 	bl	800b2e0 <EncoderStart>
	EmitterON();
 800970c:	f001 fe08 	bl	800b320 <EmitterON>
	ADCStart();
 8009710:	f001 fdae 	bl	800b270 <ADCStart>

	PIDReset(L_VELO);
 8009714:	2000      	movs	r0, #0
 8009716:	f000 f8e5 	bl	80098e4 <PIDReset>
	PIDReset(R_VELO);
 800971a:	2001      	movs	r0, #1
 800971c:	f000 f8e2 	bl	80098e4 <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 8009720:	2101      	movs	r1, #1
 8009722:	2000      	movs	r0, #0
 8009724:	f000 f8c8 	bl	80098b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 8009728:	2101      	movs	r1, #1
 800972a:	2001      	movs	r0, #1
 800972c:	f000 f8c4 	bl	80098b8 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 8009730:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80097c4 <WritingFree+0xc4>
 8009734:	eddf 0a24 	vldr	s1, [pc, #144]	; 80097c8 <WritingFree+0xc8>
 8009738:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80097cc <WritingFree+0xcc>
 800973c:	2000      	movs	r0, #0
 800973e:	f000 f88f 	bl	8009860 <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 8009742:	ed9f 1a20 	vldr	s2, [pc, #128]	; 80097c4 <WritingFree+0xc4>
 8009746:	eddf 0a20 	vldr	s1, [pc, #128]	; 80097c8 <WritingFree+0xc8>
 800974a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80097cc <WritingFree+0xcc>
 800974e:	2001      	movs	r0, #1
 8009750:	f000 f886 	bl	8009860 <PIDSetGain>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 8009754:	481e      	ldr	r0, [pc, #120]	; (80097d0 <WritingFree+0xd0>)
 8009756:	f004 fab6 	bl	800dcc6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800975a:	481e      	ldr	r0, [pc, #120]	; (80097d4 <WritingFree+0xd4>)
 800975c:	f004 fab3 	bl	800dcc6 <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 8009760:	4b1d      	ldr	r3, [pc, #116]	; (80097d8 <WritingFree+0xd8>)
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 8009768:	4b1c      	ldr	r3, [pc, #112]	; (80097dc <WritingFree+0xdc>)
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 8009770:	4b1b      	ldr	r3, [pc, #108]	; (80097e0 <WritingFree+0xe0>)
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 8009778:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <WritingFree+0xe4>)
 800977a:	f04f 0200 	mov.w	r2, #0
 800977e:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 8009780:	4b19      	ldr	r3, [pc, #100]	; (80097e8 <WritingFree+0xe8>)
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 8009786:	4b18      	ldr	r3, [pc, #96]	; (80097e8 <WritingFree+0xe8>)
 8009788:	2200      	movs	r2, #0
 800978a:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 800978c:	4b16      	ldr	r3, [pc, #88]	; (80097e8 <WritingFree+0xe8>)
 800978e:	2200      	movs	r2, #0
 8009790:	609a      	str	r2, [r3, #8]
	PIDReset(L_VELO);
 8009792:	2000      	movs	r0, #0
 8009794:	f000 f8a6 	bl	80098e4 <PIDReset>
	PIDReset(R_VELO);
 8009798:	2001      	movs	r0, #1
 800979a:	f000 f8a3 	bl	80098e4 <PIDReset>


	//GoStraight( TRUE, 300);
	Accel(45, 300);
 800979e:	eddf 0a13 	vldr	s1, [pc, #76]	; 80097ec <WritingFree+0xec>
 80097a2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80097f0 <WritingFree+0xf0>
 80097a6:	f7ff fb07 	bl	8008db8 <Accel>
	GoStraight( TRUE, 300);
 80097aa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80097ec <WritingFree+0xec>
 80097ae:	2001      	movs	r0, #1
 80097b0:	f7ff fc54 	bl	800905c <GoStraight>
	Decel(45, 0);
 80097b4:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80097f4 <WritingFree+0xf4>
 80097b8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80097f0 <WritingFree+0xf0>
 80097bc:	f7ff fba4 	bl	8008f08 <Decel>
	while(1)
 80097c0:	e7fe      	b.n	80097c0 <WritingFree+0xc0>
 80097c2:	bf00      	nop
 80097c4:	3bc45a38 	.word	0x3bc45a38
 80097c8:	420617c2 	.word	0x420617c2
 80097cc:	3f98d845 	.word	0x3f98d845
 80097d0:	200006a8 	.word	0x200006a8
 80097d4:	20000420 	.word	0x20000420
 80097d8:	20000270 	.word	0x20000270
 80097dc:	20000280 	.word	0x20000280
 80097e0:	2000027c 	.word	0x2000027c
 80097e4:	20000284 	.word	0x20000284
 80097e8:	2000025c 	.word	0x2000025c
 80097ec:	43960000 	.word	0x43960000
 80097f0:	42340000 	.word	0x42340000
 80097f4:	00000000 	.word	0x00000000

080097f8 <Explore>:


}

void Explore()
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	//ペリフェラルの動作開始
	Motor_PWM_Start();
 80097fe:	f001 fe69 	bl	800b4d4 <Motor_PWM_Start>
	EncoderStart();
 8009802:	f001 fd6d 	bl	800b2e0 <EncoderStart>
	EmitterON();
 8009806:	f001 fd8b 	bl	800b320 <EmitterON>
	ADCStart();
 800980a:	f001 fd31 	bl	800b270 <ADCStart>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800980e:	4811      	ldr	r0, [pc, #68]	; (8009854 <Explore+0x5c>)
 8009810:	f004 fa59 	bl	800dcc6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8009814:	4810      	ldr	r0, [pc, #64]	; (8009858 <Explore+0x60>)
 8009816:	f004 fa56 	bl	800dcc6 <HAL_TIM_Base_Start_IT>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 800981a:	2101      	movs	r1, #1
 800981c:	2000      	movs	r0, #0
 800981e:	f000 f84b 	bl	80098b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 8009822:	2101      	movs	r1, #1
 8009824:	2001      	movs	r0, #1
 8009826:	f000 f847 	bl	80098b8 <PIDChangeFlag>
	//ここからはソフト的な準備


	//迷路とステータスの準備
	//方角と座標の初期化。
	direction my_direction = north;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
	uint8_t x=0,y=0;
 800982e:	2300      	movs	r3, #0
 8009830:	73bb      	strb	r3, [r7, #14]
 8009832:	2300      	movs	r3, #0
 8009834:	737b      	strb	r3, [r7, #13]
	//時間用の処理の初期化。
	int timer = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	60bb      	str	r3, [r7, #8]
	//エンコーダ移動量の初期化。
	total_pulse[0] = 0;
 800983a:	4b08      	ldr	r3, [pc, #32]	; (800985c <Explore+0x64>)
 800983c:	2200      	movs	r2, #0
 800983e:	601a      	str	r2, [r3, #0]
	total_pulse[1] = 0;
 8009840:	4b06      	ldr	r3, [pc, #24]	; (800985c <Explore+0x64>)
 8009842:	2200      	movs	r2, #0
 8009844:	605a      	str	r2, [r3, #4]
	total_pulse[2] = 0;
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <Explore+0x64>)
 8009848:	2200      	movs	r2, #0
 800984a:	609a      	str	r2, [r3, #8]
	//スタート時のアクションに設定
	char action_type = 'S';
 800984c:	2353      	movs	r3, #83	; 0x53
 800984e:	71fb      	strb	r3, [r7, #7]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	while(1)
 8009850:	e7fe      	b.n	8009850 <Explore+0x58>
 8009852:	bf00      	nop
 8009854:	200006a8 	.word	0x200006a8
 8009858:	20000420 	.word	0x20000420
 800985c:	2000025c 	.word	0x2000025c

08009860 <PIDSetGain>:
//motor_control *p;
//control angular_velocity[1] = {0};
//control distance_wall[ WALL_SENSOR_NUM] = {0};

void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	ed87 0a02 	vstr	s0, [r7, #8]
 800986c:	edc7 0a01 	vstr	s1, [r7, #4]
 8009870:	ed87 1a00 	vstr	s2, [r7]
	pid[n].KP = kp;
 8009874:	4a0f      	ldr	r2, [pc, #60]	; (80098b4 <PIDSetGain+0x54>)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	212c      	movs	r1, #44	; 0x2c
 800987a:	fb01 f303 	mul.w	r3, r1, r3
 800987e:	4413      	add	r3, r2
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	601a      	str	r2, [r3, #0]
	pid[n].KI = ki;
 8009884:	4a0b      	ldr	r2, [pc, #44]	; (80098b4 <PIDSetGain+0x54>)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	212c      	movs	r1, #44	; 0x2c
 800988a:	fb01 f303 	mul.w	r3, r1, r3
 800988e:	4413      	add	r3, r2
 8009890:	3304      	adds	r3, #4
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	601a      	str	r2, [r3, #0]
	pid[n].KD = kd;
 8009896:	4a07      	ldr	r2, [pc, #28]	; (80098b4 <PIDSetGain+0x54>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	212c      	movs	r1, #44	; 0x2c
 800989c:	fb01 f303 	mul.w	r3, r1, r3
 80098a0:	4413      	add	r3, r2
 80098a2:	3308      	adds	r3, #8
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	601a      	str	r2, [r3, #0]
//
//	p = *pid[n];
//	p->KP;
}
 80098a8:	bf00      	nop
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	200002a0 	.word	0x200002a0

080098b8 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
	pid[n].flag = on_or_off;
 80098c2:	4a07      	ldr	r2, [pc, #28]	; (80098e0 <PIDChangeFlag+0x28>)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	212c      	movs	r1, #44	; 0x2c
 80098c8:	fb01 f303 	mul.w	r3, r1, r3
 80098cc:	4413      	add	r3, r2
 80098ce:	3328      	adds	r3, #40	; 0x28
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	601a      	str	r2, [r3, #0]
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	200002a0 	.word	0x200002a0

080098e4 <PIDReset>:
int PIDGetFlag(int n)
{
	return pid[n].flag;
}
void PIDReset(int n)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	pid[n].e = 0;
 80098ec:	4a1b      	ldr	r2, [pc, #108]	; (800995c <PIDReset+0x78>)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	212c      	movs	r1, #44	; 0x2c
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	4413      	add	r3, r2
 80098f8:	330c      	adds	r3, #12
 80098fa:	f04f 0200 	mov.w	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
	pid[n].ei = 0;
 8009900:	4a16      	ldr	r2, [pc, #88]	; (800995c <PIDReset+0x78>)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	212c      	movs	r1, #44	; 0x2c
 8009906:	fb01 f303 	mul.w	r3, r1, r3
 800990a:	4413      	add	r3, r2
 800990c:	3310      	adds	r3, #16
 800990e:	f04f 0200 	mov.w	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
	pid[n].ed = 0;
 8009914:	4a11      	ldr	r2, [pc, #68]	; (800995c <PIDReset+0x78>)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	212c      	movs	r1, #44	; 0x2c
 800991a:	fb01 f303 	mul.w	r3, r1, r3
 800991e:	4413      	add	r3, r2
 8009920:	3314      	adds	r3, #20
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
	pid[n].elast = 0;
 8009928:	4a0c      	ldr	r2, [pc, #48]	; (800995c <PIDReset+0x78>)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	212c      	movs	r1, #44	; 0x2c
 800992e:	fb01 f303 	mul.w	r3, r1, r3
 8009932:	4413      	add	r3, r2
 8009934:	3318      	adds	r3, #24
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	601a      	str	r2, [r3, #0]
	pid[n].out = 0;
 800993c:	4a07      	ldr	r2, [pc, #28]	; (800995c <PIDReset+0x78>)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	212c      	movs	r1, #44	; 0x2c
 8009942:	fb01 f303 	mul.w	r3, r1, r3
 8009946:	4413      	add	r3, r2
 8009948:	3324      	adds	r3, #36	; 0x24
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	200002a0 	.word	0x200002a0

08009960 <PIDCalculate>:

void PIDCalculate(int n, float T)//, float target, float current, int flag
{
 8009960:	b590      	push	{r4, r7, lr}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	ed87 0a00 	vstr	s0, [r7]
	pid[n].e = pid[n].target - pid[n].current;
 800996c:	4a64      	ldr	r2, [pc, #400]	; (8009b00 <PIDCalculate+0x1a0>)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	212c      	movs	r1, #44	; 0x2c
 8009972:	fb01 f303 	mul.w	r3, r1, r3
 8009976:	4413      	add	r3, r2
 8009978:	3320      	adds	r3, #32
 800997a:	ed93 7a00 	vldr	s14, [r3]
 800997e:	4a60      	ldr	r2, [pc, #384]	; (8009b00 <PIDCalculate+0x1a0>)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	212c      	movs	r1, #44	; 0x2c
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	4413      	add	r3, r2
 800998a:	331c      	adds	r3, #28
 800998c:	edd3 7a00 	vldr	s15, [r3]
 8009990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009994:	4a5a      	ldr	r2, [pc, #360]	; (8009b00 <PIDCalculate+0x1a0>)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	212c      	movs	r1, #44	; 0x2c
 800999a:	fb01 f303 	mul.w	r3, r1, r3
 800999e:	4413      	add	r3, r2
 80099a0:	330c      	adds	r3, #12
 80099a2:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ei += pid[n].e * T;
 80099a6:	4a56      	ldr	r2, [pc, #344]	; (8009b00 <PIDCalculate+0x1a0>)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	212c      	movs	r1, #44	; 0x2c
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	3310      	adds	r3, #16
 80099b4:	ed93 7a00 	vldr	s14, [r3]
 80099b8:	4a51      	ldr	r2, [pc, #324]	; (8009b00 <PIDCalculate+0x1a0>)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	212c      	movs	r1, #44	; 0x2c
 80099be:	fb01 f303 	mul.w	r3, r1, r3
 80099c2:	4413      	add	r3, r2
 80099c4:	330c      	adds	r3, #12
 80099c6:	edd3 6a00 	vldr	s13, [r3]
 80099ca:	edd7 7a00 	vldr	s15, [r7]
 80099ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099d6:	4a4a      	ldr	r2, [pc, #296]	; (8009b00 <PIDCalculate+0x1a0>)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	212c      	movs	r1, #44	; 0x2c
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	4413      	add	r3, r2
 80099e2:	3310      	adds	r3, #16
 80099e4:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ed = ( pid[n].e - pid[n].elast ) / T;
 80099e8:	4a45      	ldr	r2, [pc, #276]	; (8009b00 <PIDCalculate+0x1a0>)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	212c      	movs	r1, #44	; 0x2c
 80099ee:	fb01 f303 	mul.w	r3, r1, r3
 80099f2:	4413      	add	r3, r2
 80099f4:	330c      	adds	r3, #12
 80099f6:	ed93 7a00 	vldr	s14, [r3]
 80099fa:	4a41      	ldr	r2, [pc, #260]	; (8009b00 <PIDCalculate+0x1a0>)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	212c      	movs	r1, #44	; 0x2c
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	4413      	add	r3, r2
 8009a06:	3318      	adds	r3, #24
 8009a08:	edd3 7a00 	vldr	s15, [r3]
 8009a0c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009a10:	ed97 7a00 	vldr	s14, [r7]
 8009a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a18:	4a39      	ldr	r2, [pc, #228]	; (8009b00 <PIDCalculate+0x1a0>)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	212c      	movs	r1, #44	; 0x2c
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	3314      	adds	r3, #20
 8009a26:	edc3 7a00 	vstr	s15, [r3]
	pid[n].elast = pid[n].e;
 8009a2a:	4a35      	ldr	r2, [pc, #212]	; (8009b00 <PIDCalculate+0x1a0>)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	212c      	movs	r1, #44	; 0x2c
 8009a30:	fb01 f303 	mul.w	r3, r1, r3
 8009a34:	4413      	add	r3, r2
 8009a36:	330c      	adds	r3, #12
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4931      	ldr	r1, [pc, #196]	; (8009b00 <PIDCalculate+0x1a0>)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	202c      	movs	r0, #44	; 0x2c
 8009a40:	fb00 f303 	mul.w	r3, r0, r3
 8009a44:	440b      	add	r3, r1
 8009a46:	3318      	adds	r3, #24
 8009a48:	601a      	str	r2, [r3, #0]
	pid[n].out = round(pid[n].KP*pid[n].e + pid[n].KI*pid[n].ei + pid[n].KD*pid[n].ed);
 8009a4a:	4a2d      	ldr	r2, [pc, #180]	; (8009b00 <PIDCalculate+0x1a0>)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	212c      	movs	r1, #44	; 0x2c
 8009a50:	fb01 f303 	mul.w	r3, r1, r3
 8009a54:	4413      	add	r3, r2
 8009a56:	ed93 7a00 	vldr	s14, [r3]
 8009a5a:	4a29      	ldr	r2, [pc, #164]	; (8009b00 <PIDCalculate+0x1a0>)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	212c      	movs	r1, #44	; 0x2c
 8009a60:	fb01 f303 	mul.w	r3, r1, r3
 8009a64:	4413      	add	r3, r2
 8009a66:	330c      	adds	r3, #12
 8009a68:	edd3 7a00 	vldr	s15, [r3]
 8009a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a70:	4a23      	ldr	r2, [pc, #140]	; (8009b00 <PIDCalculate+0x1a0>)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	212c      	movs	r1, #44	; 0x2c
 8009a76:	fb01 f303 	mul.w	r3, r1, r3
 8009a7a:	4413      	add	r3, r2
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	edd3 6a00 	vldr	s13, [r3]
 8009a82:	4a1f      	ldr	r2, [pc, #124]	; (8009b00 <PIDCalculate+0x1a0>)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	212c      	movs	r1, #44	; 0x2c
 8009a88:	fb01 f303 	mul.w	r3, r1, r3
 8009a8c:	4413      	add	r3, r2
 8009a8e:	3310      	adds	r3, #16
 8009a90:	edd3 7a00 	vldr	s15, [r3]
 8009a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a9c:	4a18      	ldr	r2, [pc, #96]	; (8009b00 <PIDCalculate+0x1a0>)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	212c      	movs	r1, #44	; 0x2c
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	edd3 6a00 	vldr	s13, [r3]
 8009aae:	4a14      	ldr	r2, [pc, #80]	; (8009b00 <PIDCalculate+0x1a0>)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	212c      	movs	r1, #44	; 0x2c
 8009ab4:	fb01 f303 	mul.w	r3, r1, r3
 8009ab8:	4413      	add	r3, r2
 8009aba:	3314      	adds	r3, #20
 8009abc:	edd3 7a00 	vldr	s15, [r3]
 8009ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ac8:	ee17 0a90 	vmov	r0, s15
 8009acc:	f7fe fc74 	bl	80083b8 <__aeabi_f2d>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	ec44 3b10 	vmov	d0, r3, r4
 8009ad8:	f006 f8b8 	bl	800fc4c <round>
 8009adc:	ec54 3b10 	vmov	r3, r4, d0
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	f7fe ff70 	bl	80089c8 <__aeabi_d2iz>
 8009ae8:	4a05      	ldr	r2, [pc, #20]	; (8009b00 <PIDCalculate+0x1a0>)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	212c      	movs	r1, #44	; 0x2c
 8009aee:	fb01 f303 	mul.w	r3, r1, r3
 8009af2:	4413      	add	r3, r2
 8009af4:	3324      	adds	r3, #36	; 0x24
 8009af6:	6018      	str	r0, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd90      	pop	{r4, r7, pc}
 8009b00:	200002a0 	.word	0x200002a0

08009b04 <PIDInput>:
	*output = pid[n].out;
}
//pid制御は現在値と目標値から、出力するべき値を計算するもの。前回の値の保存と積算用の変数が必要なので、独立させるかポインタかフラグで初期化

void PIDInput(int n, float target, float current)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8009b10:	edc7 0a01 	vstr	s1, [r7, #4]
	pid[n].target = target;
 8009b14:	4a0b      	ldr	r2, [pc, #44]	; (8009b44 <PIDInput+0x40>)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	212c      	movs	r1, #44	; 0x2c
 8009b1a:	fb01 f303 	mul.w	r3, r1, r3
 8009b1e:	4413      	add	r3, r2
 8009b20:	3320      	adds	r3, #32
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	601a      	str	r2, [r3, #0]
	pid[n].current = current;
 8009b26:	4a07      	ldr	r2, [pc, #28]	; (8009b44 <PIDInput+0x40>)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	212c      	movs	r1, #44	; 0x2c
 8009b2c:	fb01 f303 	mul.w	r3, r1, r3
 8009b30:	4413      	add	r3, r2
 8009b32:	331c      	adds	r3, #28
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	601a      	str	r2, [r3, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	200002a0 	.word	0x200002a0

08009b48 <PIDControl>:
int PIDControl(int n, float T, float target, float current)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	ed87 0a02 	vstr	s0, [r7, #8]
 8009b54:	edc7 0a01 	vstr	s1, [r7, #4]
 8009b58:	ed87 1a00 	vstr	s2, [r7]
	PIDInput( n, target, current);
 8009b5c:	edd7 0a00 	vldr	s1, [r7]
 8009b60:	ed97 0a01 	vldr	s0, [r7, #4]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff ffcd 	bl	8009b04 <PIDInput>
	PIDCalculate( n, T );
 8009b6a:	ed97 0a02 	vldr	s0, [r7, #8]
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff fef6 	bl	8009960 <PIDCalculate>
	//出力の前に全部0にする処理をフラグで
	if(pid[n].flag == 0)
 8009b74:	4a0c      	ldr	r2, [pc, #48]	; (8009ba8 <PIDControl+0x60>)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	212c      	movs	r1, #44	; 0x2c
 8009b7a:	fb01 f303 	mul.w	r3, r1, r3
 8009b7e:	4413      	add	r3, r2
 8009b80:	3328      	adds	r3, #40	; 0x28
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <PIDControl+0x46>
	{
		PIDReset(n);
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff feab 	bl	80098e4 <PIDReset>
	}
	//*output = pid[n].out;
	//PIDOutput( n, output );
	return pid[n].out;
 8009b8e:	4a06      	ldr	r2, [pc, #24]	; (8009ba8 <PIDControl+0x60>)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	212c      	movs	r1, #44	; 0x2c
 8009b94:	fb01 f303 	mul.w	r3, r1, r3
 8009b98:	4413      	add	r3, r2
 8009b9a:	3324      	adds	r3, #36	; 0x24
 8009b9c:	681b      	ldr	r3, [r3, #0]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	200002a0 	.word	0x200002a0

08009bac <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
float photo[4];

//led_driver
void Signal(int mode)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e00e      	b.n	8009bd8 <Signal+0x2c>
	{
		ChangeLED(mode);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 fbcc 	bl	800b358 <ChangeLED>
		HAL_Delay(100);
 8009bc0:	2064      	movs	r0, #100	; 0x64
 8009bc2:	f001 fd9f 	bl	800b704 <HAL_Delay>
		ChangeLED(0);
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	f001 fbc6 	bl	800b358 <ChangeLED>
		HAL_Delay(100);
 8009bcc:	2064      	movs	r0, #100	; 0x64
 8009bce:	f001 fd99 	bl	800b704 <HAL_Delay>
	for(int i=0; i < 5; i++)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	dded      	ble.n	8009bba <Signal+0xe>
	}
}
 8009bde:	bf00      	nop
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 8009bf0:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8009c3c <BatteryCheck+0x54>
 8009bf4:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009c40 <BatteryCheck+0x58>
 8009bf8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff fafd 	bl	80091fc <ADCToBatteryVoltage>
 8009c02:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 8009c06:	2103      	movs	r1, #3
 8009c08:	2002      	movs	r0, #2
 8009c0a:	f7ff fb21 	bl	8009250 <IntegerPower>
 8009c0e:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 8009c10:	6938      	ldr	r0, [r7, #16]
 8009c12:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8009c44 <BatteryCheck+0x5c>
 8009c16:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8009c48 <BatteryCheck+0x60>
 8009c1a:	ed97 0a05 	vldr	s0, [r7, #20]
 8009c1e:	f7ff fb34 	bl	800928a <GetBatteryLevel>
 8009c22:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 8009c24:	68f9      	ldr	r1, [r7, #12]
 8009c26:	4809      	ldr	r0, [pc, #36]	; (8009c4c <BatteryCheck+0x64>)
 8009c28:	f006 fcf4 	bl	8010614 <iprintf>
	Signal( battery_level );
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff ffbd 	bl	8009bac <Signal>
}
 8009c32:	bf00      	nop
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	45800000 	.word	0x45800000
 8009c40:	40533333 	.word	0x40533333
 8009c44:	41066666 	.word	0x41066666
 8009c48:	40e66666 	.word	0x40e66666
 8009c4c:	08012478 	.word	0x08012478

08009c50 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 8009c50:	b590      	push	{r4, r7, lr}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	603a      	str	r2, [r7, #0]
 8009c5a:	71fb      	strb	r3, [r7, #7]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 8009c60:	f001 fb5e 	bl	800b320 <EmitterON>
	ADCStart();
 8009c64:	f001 fb04 	bl	800b270 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 8009c68:	4840      	ldr	r0, [pc, #256]	; (8009d6c <ModeSelect+0x11c>)
 8009c6a:	f004 f82c 	bl	800dcc6 <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 8009c6e:	f001 fb37 	bl	800b2e0 <EncoderStart>

	//while中で選択
	*pMode=min;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	79fa      	ldrb	r2, [r7, #7]
 8009c76:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 8009c78:	f247 512f 	movw	r1, #29999	; 0x752f
 8009c7c:	483c      	ldr	r0, [pc, #240]	; (8009d70 <ModeSelect+0x120>)
 8009c7e:	f7ff fa2f 	bl	80090e0 <InitPulse>

	int ENC3_LEFT;
	while(photo[SR]/*構造体アロー*/ < 250/**/) //前向きの
 8009c82:	e05c      	b.n	8009d3e <ModeSelect+0xee>
	{
		printf("photo[SR] : %f\r\n", photo[SR]);
 8009c84:	4b3b      	ldr	r3, [pc, #236]	; (8009d74 <ModeSelect+0x124>)
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe fb95 	bl	80083b8 <__aeabi_f2d>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	461a      	mov	r2, r3
 8009c94:	4623      	mov	r3, r4
 8009c96:	4838      	ldr	r0, [pc, #224]	; (8009d78 <ModeSelect+0x128>)
 8009c98:	f006 fcbc 	bl	8010614 <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 8009c9c:	4b37      	ldr	r3, [pc, #220]	; (8009d7c <ModeSelect+0x12c>)
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	60fb      	str	r3, [r7, #12]

		  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f24b 522e 	movw	r2, #46382	; 0xb52e
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	dd21      	ble.n	8009cf0 <ModeSelect+0xa0>
		  {
		  	  *pMode += 1;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	f993 3000 	ldrsb.w	r3, [r3]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	b25a      	sxtb	r2, r3
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8009cc4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	da02      	bge.n	8009cd2 <ModeSelect+0x82>
		  	  {
		  		  *pMode = min;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	79fa      	ldrb	r2, [r7, #7]
 8009cd0:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 fb3d 	bl	800b358 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 8009cde:	f247 512f 	movw	r1, #29999	; 0x752f
 8009ce2:	4823      	ldr	r0, [pc, #140]	; (8009d70 <ModeSelect+0x120>)
 8009ce4:	f7ff f9fc 	bl	80090e0 <InitPulse>
		  	  HAL_Delay(500);
 8009ce8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cec:	f001 fd0a 	bl	800b704 <HAL_Delay>

		  }
		  if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f243 522f 	movw	r2, #13615	; 0x352f
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	dc21      	bgt.n	8009d3e <ModeSelect+0xee>
		  {
		  	  *pMode -= 1;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	3b01      	subs	r3, #1
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	b25a      	sxtb	r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8009d12:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	dd02      	ble.n	8009d20 <ModeSelect+0xd0>
		  	  {
		  	  		  *pMode = max;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	79ba      	ldrb	r2, [r7, #6]
 8009d1e:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	f993 3000 	ldrsb.w	r3, [r3]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f001 fb16 	bl	800b358 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE_L);
 8009d2c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009d30:	480f      	ldr	r0, [pc, #60]	; (8009d70 <ModeSelect+0x120>)
 8009d32:	f7ff f9d5 	bl	80090e0 <InitPulse>
		  	  HAL_Delay(500);
 8009d36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d3a:	f001 fce3 	bl	800b704 <HAL_Delay>
	while(photo[SR]/*構造体アロー*/ < 250/**/) //前向きの
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <ModeSelect+0x124>)
 8009d40:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d44:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009d80 <ModeSelect+0x130>
 8009d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d50:	d498      	bmi.n	8009c84 <ModeSelect+0x34>
		  }
	}

	EmitterOFF();
 8009d52:	f001 faf3 	bl	800b33c <EmitterOFF>
	ADCStop();
 8009d56:	f001 faab 	bl	800b2b0 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 8009d5a:	4804      	ldr	r0, [pc, #16]	; (8009d6c <ModeSelect+0x11c>)
 8009d5c:	f003 ffd7 	bl	800dd0e <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 8009d60:	f001 face 	bl	800b300 <EncoderStop>

	//モード選択後どうするか
}
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd90      	pop	{r4, r7, pc}
 8009d6c:	20000420 	.word	0x20000420
 8009d70:	40000424 	.word	0x40000424
 8009d74:	20000238 	.word	0x20000238
 8009d78:	08012480 	.word	0x08012480
 8009d7c:	40000400 	.word	0x40000400
 8009d80:	437a0000 	.word	0x437a0000

08009d84 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8009d8c:	1d39      	adds	r1, r7, #4
 8009d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d92:	2201      	movs	r2, #1
 8009d94:	4803      	ldr	r0, [pc, #12]	; (8009da4 <__io_putchar+0x20>)
 8009d96:	f005 faf9 	bl	800f38c <HAL_UART_Transmit>
	return ch;
 8009d9a:	687b      	ldr	r3, [r7, #4]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20000608 	.word	0x20000608

08009da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009dae:	f001 fc37 	bl	800b620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009db2:	f000 f85f 	bl	8009e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009db6:	f000 fca9 	bl	800a70c <MX_GPIO_Init>
  MX_DMA_Init();
 8009dba:	f000 fc7f 	bl	800a6bc <MX_DMA_Init>
  MX_ADC1_Init();
 8009dbe:	f000 f8c3 	bl	8009f48 <MX_ADC1_Init>
  MX_ADC2_Init();
 8009dc2:	f000 f92f 	bl	800a024 <MX_ADC2_Init>
  MX_TIM3_Init();
 8009dc6:	f000 fa89 	bl	800a2dc <MX_TIM3_Init>
  MX_TIM2_Init();
 8009dca:	f000 fa11 	bl	800a1f0 <MX_TIM2_Init>
  MX_SPI3_Init();
 8009dce:	f000 f989 	bl	800a0e4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8009dd2:	f000 fc49 	bl	800a668 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8009dd6:	f000 fb29 	bl	800a42c <MX_TIM5_Init>
  MX_TIM4_Init();
 8009dda:	f000 fad3 	bl	800a384 <MX_TIM4_Init>
  MX_TIM8_Init();
 8009dde:	f000 fb9b 	bl	800a518 <MX_TIM8_Init>
  MX_TIM1_Init();
 8009de2:	f000 f9b5 	bl	800a150 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ADCStart();
 8009de6:	f001 fa43 	bl	800b270 <ADCStart>
  HAL_Delay(500);
 8009dea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009dee:	f001 fc89 	bl	800b704 <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 8009df2:	4b1d      	ldr	r3, [pc, #116]	; (8009e68 <main+0xc0>)
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff fef6 	bl	8009be8 <BatteryCheck>

  int8_t mode=0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	71fb      	strb	r3, [r7, #7]
  	  printf("mode : %d\r\n", mode);
 8009e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e04:	4619      	mov	r1, r3
 8009e06:	4819      	ldr	r0, [pc, #100]	; (8009e6c <main+0xc4>)
 8009e08:	f006 fc04 	bl	8010614 <iprintf>
  ModeSelect( 0, 7, &mode);
 8009e0c:	1dfb      	adds	r3, r7, #7
 8009e0e:	461a      	mov	r2, r3
 8009e10:	2107      	movs	r1, #7
 8009e12:	2000      	movs	r0, #0
 8009e14:	f7ff ff1c 	bl	8009c50 <ModeSelect>
  Signal( mode );
 8009e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff fec5 	bl	8009bac <Signal>
  	  printf("ドン\r\n");
 8009e22:	4813      	ldr	r0, [pc, #76]	; (8009e70 <main+0xc8>)
 8009e24:	f006 fc6a 	bl	80106fc <puts>

  while (1)
  {

	  switch( mode )
 8009e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e2c:	2b07      	cmp	r3, #7
 8009e2e:	d819      	bhi.n	8009e64 <main+0xbc>
 8009e30:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <main+0x90>)
 8009e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e36:	bf00      	nop
 8009e38:	08009e65 	.word	0x08009e65
 8009e3c:	08009e65 	.word	0x08009e65
 8009e40:	08009e65 	.word	0x08009e65
 8009e44:	08009e65 	.word	0x08009e65
 8009e48:	08009e65 	.word	0x08009e65
 8009e4c:	08009e65 	.word	0x08009e65
 8009e50:	08009e59 	.word	0x08009e59
 8009e54:	08009e5f 	.word	0x08009e5f
	  case 4:
		  break;
	  case 5:
		  break;
	  case 6:
		  Explore();
 8009e58:	f7ff fcce 	bl	80097f8 <Explore>
		  break;
 8009e5c:	e003      	b.n	8009e66 <main+0xbe>
	  case 7:
		  WritingFree();
 8009e5e:	f7ff fc4f 	bl	8009700 <WritingFree>
		  break;
 8009e62:	e000      	b.n	8009e66 <main+0xbe>
	  default :
		  break;
 8009e64:	bf00      	nop
	  switch( mode )
 8009e66:	e7df      	b.n	8009e28 <main+0x80>
 8009e68:	20000404 	.word	0x20000404
 8009e6c:	08012494 	.word	0x08012494
 8009e70:	080124a0 	.word	0x080124a0

08009e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b094      	sub	sp, #80	; 0x50
 8009e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009e7a:	f107 0320 	add.w	r3, r7, #32
 8009e7e:	2230      	movs	r2, #48	; 0x30
 8009e80:	2100      	movs	r1, #0
 8009e82:	4618      	mov	r0, r3
 8009e84:	f005 ff61 	bl	800fd4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	605a      	str	r2, [r3, #4]
 8009e92:	609a      	str	r2, [r3, #8]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e98:	2300      	movs	r3, #0
 8009e9a:	60bb      	str	r3, [r7, #8]
 8009e9c:	4b28      	ldr	r3, [pc, #160]	; (8009f40 <SystemClock_Config+0xcc>)
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	4a27      	ldr	r2, [pc, #156]	; (8009f40 <SystemClock_Config+0xcc>)
 8009ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8009ea8:	4b25      	ldr	r3, [pc, #148]	; (8009f40 <SystemClock_Config+0xcc>)
 8009eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eb0:	60bb      	str	r3, [r7, #8]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	607b      	str	r3, [r7, #4]
 8009eb8:	4b22      	ldr	r3, [pc, #136]	; (8009f44 <SystemClock_Config+0xd0>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a21      	ldr	r2, [pc, #132]	; (8009f44 <SystemClock_Config+0xd0>)
 8009ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	4b1f      	ldr	r3, [pc, #124]	; (8009f44 <SystemClock_Config+0xd0>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ecc:	607b      	str	r3, [r7, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009eda:	2302      	movs	r3, #2
 8009edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009ee8:	23a8      	movs	r3, #168	; 0xa8
 8009eea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009eec:	2302      	movs	r3, #2
 8009eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009ef4:	f107 0320 	add.w	r3, r7, #32
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f003 f9f3 	bl	800d2e4 <HAL_RCC_OscConfig>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009f04:	f000 fccc 	bl	800a8a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f08:	230f      	movs	r3, #15
 8009f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009f14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009f20:	f107 030c 	add.w	r3, r7, #12
 8009f24:	2105      	movs	r1, #5
 8009f26:	4618      	mov	r0, r3
 8009f28:	f003 fc4c 	bl	800d7c4 <HAL_RCC_ClockConfig>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009f32:	f000 fcb5 	bl	800a8a0 <Error_Handler>
  }
}
 8009f36:	bf00      	nop
 8009f38:	3750      	adds	r7, #80	; 0x50
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	40023800 	.word	0x40023800
 8009f44:	40007000 	.word	0x40007000

08009f48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009f4e:	463b      	mov	r3, r7
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	605a      	str	r2, [r3, #4]
 8009f56:	609a      	str	r2, [r3, #8]
 8009f58:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009f5a:	4b2f      	ldr	r3, [pc, #188]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f5c:	4a2f      	ldr	r2, [pc, #188]	; (800a01c <MX_ADC1_Init+0xd4>)
 8009f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009f60:	4b2d      	ldr	r3, [pc, #180]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009f68:	4b2b      	ldr	r3, [pc, #172]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8009f6e:	4b2a      	ldr	r3, [pc, #168]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f70:	2201      	movs	r2, #1
 8009f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009f74:	4b28      	ldr	r3, [pc, #160]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f76:	2201      	movs	r2, #1
 8009f78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009f7a:	4b27      	ldr	r3, [pc, #156]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009f82:	4b25      	ldr	r3, [pc, #148]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009f88:	4b23      	ldr	r3, [pc, #140]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f8a:	4a25      	ldr	r2, [pc, #148]	; (800a020 <MX_ADC1_Init+0xd8>)
 8009f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009f8e:	4b22      	ldr	r3, [pc, #136]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8009f94:	4b20      	ldr	r3, [pc, #128]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f96:	2203      	movs	r2, #3
 8009f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009f9a:	4b1f      	ldr	r3, [pc, #124]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009fa2:	4b1d      	ldr	r3, [pc, #116]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009fa8:	481b      	ldr	r0, [pc, #108]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009faa:	f001 fbcd 	bl	800b748 <HAL_ADC_Init>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8009fb4:	f000 fc74 	bl	800a8a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009fb8:	230a      	movs	r3, #10
 8009fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009fc4:	463b      	mov	r3, r7
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4813      	ldr	r0, [pc, #76]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009fca:	f001 fea5 	bl	800bd18 <HAL_ADC_ConfigChannel>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009fd4:	f000 fc64 	bl	800a8a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009fd8:	230e      	movs	r3, #14
 8009fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8009fdc:	2302      	movs	r3, #2
 8009fde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	480c      	ldr	r0, [pc, #48]	; (800a018 <MX_ADC1_Init+0xd0>)
 8009fe6:	f001 fe97 	bl	800bd18 <HAL_ADC_ConfigChannel>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8009ff0:	f000 fc56 	bl	800a8a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009ff4:	2309      	movs	r3, #9
 8009ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	4619      	mov	r1, r3
 800a000:	4805      	ldr	r0, [pc, #20]	; (800a018 <MX_ADC1_Init+0xd0>)
 800a002:	f001 fe89 	bl	800bd18 <HAL_ADC_ConfigChannel>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800a00c:	f000 fc48 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a010:	bf00      	nop
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	200005c0 	.word	0x200005c0
 800a01c:	40012000 	.word	0x40012000
 800a020:	0f000001 	.word	0x0f000001

0800a024 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a02a:	463b      	mov	r3, r7
 800a02c:	2200      	movs	r2, #0
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	605a      	str	r2, [r3, #4]
 800a032:	609a      	str	r2, [r3, #8]
 800a034:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800a036:	4b28      	ldr	r3, [pc, #160]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a038:	4a28      	ldr	r2, [pc, #160]	; (800a0dc <MX_ADC2_Init+0xb8>)
 800a03a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800a03c:	4b26      	ldr	r3, [pc, #152]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a03e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a042:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a044:	4b24      	ldr	r3, [pc, #144]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a046:	2200      	movs	r2, #0
 800a048:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800a04a:	4b23      	ldr	r3, [pc, #140]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a04c:	2201      	movs	r2, #1
 800a04e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800a050:	4b21      	ldr	r3, [pc, #132]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a052:	2201      	movs	r2, #1
 800a054:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a056:	4b20      	ldr	r3, [pc, #128]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a05e:	4b1e      	ldr	r3, [pc, #120]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a060:	2200      	movs	r2, #0
 800a062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a064:	4b1c      	ldr	r3, [pc, #112]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a066:	4a1e      	ldr	r2, [pc, #120]	; (800a0e0 <MX_ADC2_Init+0xbc>)
 800a068:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a06a:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800a070:	4b19      	ldr	r3, [pc, #100]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a072:	2202      	movs	r2, #2
 800a074:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800a076:	4b18      	ldr	r3, [pc, #96]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a07e:	4b16      	ldr	r3, [pc, #88]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a080:	2201      	movs	r2, #1
 800a082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a084:	4814      	ldr	r0, [pc, #80]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a086:	f001 fb5f 	bl	800b748 <HAL_ADC_Init>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800a090:	f000 fc06 	bl	800a8a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800a094:	230b      	movs	r3, #11
 800a096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800a098:	2301      	movs	r3, #1
 800a09a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800a09c:	2303      	movs	r3, #3
 800a09e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	480c      	ldr	r0, [pc, #48]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a0a6:	f001 fe37 	bl	800bd18 <HAL_ADC_ConfigChannel>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800a0b0:	f000 fbf6 	bl	800a8a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a0b4:	230f      	movs	r3, #15
 800a0b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a0bc:	463b      	mov	r3, r7
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4805      	ldr	r0, [pc, #20]	; (800a0d8 <MX_ADC2_Init+0xb4>)
 800a0c2:	f001 fe29 	bl	800bd18 <HAL_ADC_ConfigChannel>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800a0cc:	f000 fbe8 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	200004a0 	.word	0x200004a0
 800a0dc:	40012100 	.word	0x40012100
 800a0e0:	0f000001 	.word	0x0f000001

0800a0e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800a0e8:	4b17      	ldr	r3, [pc, #92]	; (800a148 <MX_SPI3_Init+0x64>)
 800a0ea:	4a18      	ldr	r2, [pc, #96]	; (800a14c <MX_SPI3_Init+0x68>)
 800a0ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a0ee:	4b16      	ldr	r3, [pc, #88]	; (800a148 <MX_SPI3_Init+0x64>)
 800a0f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a0f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a0f6:	4b14      	ldr	r3, [pc, #80]	; (800a148 <MX_SPI3_Init+0x64>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a0fc:	4b12      	ldr	r3, [pc, #72]	; (800a148 <MX_SPI3_Init+0x64>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800a102:	4b11      	ldr	r3, [pc, #68]	; (800a148 <MX_SPI3_Init+0x64>)
 800a104:	2202      	movs	r2, #2
 800a106:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a108:	4b0f      	ldr	r3, [pc, #60]	; (800a148 <MX_SPI3_Init+0x64>)
 800a10a:	2201      	movs	r2, #1
 800a10c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a10e:	4b0e      	ldr	r3, [pc, #56]	; (800a148 <MX_SPI3_Init+0x64>)
 800a110:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a114:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <MX_SPI3_Init+0x64>)
 800a118:	2228      	movs	r2, #40	; 0x28
 800a11a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <MX_SPI3_Init+0x64>)
 800a11e:	2200      	movs	r2, #0
 800a120:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <MX_SPI3_Init+0x64>)
 800a124:	2200      	movs	r2, #0
 800a126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a128:	4b07      	ldr	r3, [pc, #28]	; (800a148 <MX_SPI3_Init+0x64>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800a12e:	4b06      	ldr	r3, [pc, #24]	; (800a148 <MX_SPI3_Init+0x64>)
 800a130:	220a      	movs	r2, #10
 800a132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a134:	4804      	ldr	r0, [pc, #16]	; (800a148 <MX_SPI3_Init+0x64>)
 800a136:	f003 fd37 	bl	800dba8 <HAL_SPI_Init>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800a140:	f000 fbae 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a144:	bf00      	nop
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20000568 	.word	0x20000568
 800a14c:	40003c00 	.word	0x40003c00

0800a150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a156:	f107 0308 	add.w	r3, r7, #8
 800a15a:	2200      	movs	r2, #0
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	605a      	str	r2, [r3, #4]
 800a160:	609a      	str	r2, [r3, #8]
 800a162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a164:	463b      	mov	r3, r7
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a16c:	4b1e      	ldr	r3, [pc, #120]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a16e:	4a1f      	ldr	r2, [pc, #124]	; (800a1ec <MX_TIM1_Init+0x9c>)
 800a170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800a172:	4b1d      	ldr	r3, [pc, #116]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a174:	22a7      	movs	r2, #167	; 0xa7
 800a176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a178:	4b1b      	ldr	r3, [pc, #108]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800a17e:	4b1a      	ldr	r3, [pc, #104]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a180:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a184:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a186:	4b18      	ldr	r3, [pc, #96]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a188:	2200      	movs	r2, #0
 800a18a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a18c:	4b16      	ldr	r3, [pc, #88]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a18e:	2200      	movs	r2, #0
 800a190:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a192:	4b15      	ldr	r3, [pc, #84]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a194:	2200      	movs	r2, #0
 800a196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a198:	4813      	ldr	r0, [pc, #76]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a19a:	f003 fd69 	bl	800dc70 <HAL_TIM_Base_Init>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800a1a4:	f000 fb7c 	bl	800a8a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a1a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a1ae:	f107 0308 	add.w	r3, r7, #8
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	480c      	ldr	r0, [pc, #48]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a1b6:	f004 fadb 	bl	800e770 <HAL_TIM_ConfigClockSource>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800a1c0:	f000 fb6e 	bl	800a8a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4805      	ldr	r0, [pc, #20]	; (800a1e8 <MX_TIM1_Init+0x98>)
 800a1d2:	f004 ff87 	bl	800f0e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a1dc:	f000 fb60 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a1e0:	bf00      	nop
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	200006a8 	.word	0x200006a8
 800a1ec:	40010000 	.word	0x40010000

0800a1f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08e      	sub	sp, #56	; 0x38
 800a1f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a1f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	609a      	str	r2, [r3, #8]
 800a202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a204:	f107 0320 	add.w	r3, r7, #32
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a20e:	1d3b      	adds	r3, r7, #4
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	605a      	str	r2, [r3, #4]
 800a216:	609a      	str	r2, [r3, #8]
 800a218:	60da      	str	r2, [r3, #12]
 800a21a:	611a      	str	r2, [r3, #16]
 800a21c:	615a      	str	r2, [r3, #20]
 800a21e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a220:	4b2d      	ldr	r3, [pc, #180]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a226:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a228:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a22e:	4b2a      	ldr	r3, [pc, #168]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a230:	2200      	movs	r2, #0
 800a232:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800a234:	4b28      	ldr	r3, [pc, #160]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a236:	f241 0267 	movw	r2, #4199	; 0x1067
 800a23a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a23c:	4b26      	ldr	r3, [pc, #152]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a23e:	2200      	movs	r2, #0
 800a240:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a242:	4b25      	ldr	r3, [pc, #148]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a244:	2200      	movs	r2, #0
 800a246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a248:	4823      	ldr	r0, [pc, #140]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a24a:	f003 fd11 	bl	800dc70 <HAL_TIM_Base_Init>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a254:	f000 fb24 	bl	800a8a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a25c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a25e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a262:	4619      	mov	r1, r3
 800a264:	481c      	ldr	r0, [pc, #112]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a266:	f004 fa83 	bl	800e770 <HAL_TIM_ConfigClockSource>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a270:	f000 fb16 	bl	800a8a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a274:	4818      	ldr	r0, [pc, #96]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a276:	f003 fec9 	bl	800e00c <HAL_TIM_PWM_Init>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a280:	f000 fb0e 	bl	800a8a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a284:	2300      	movs	r3, #0
 800a286:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a288:	2300      	movs	r3, #0
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a28c:	f107 0320 	add.w	r3, r7, #32
 800a290:	4619      	mov	r1, r3
 800a292:	4811      	ldr	r0, [pc, #68]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a294:	f004 ff26 	bl	800f0e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a29e:	f000 faff 	bl	800a8a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a2a2:	2360      	movs	r3, #96	; 0x60
 800a2a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a2b2:	1d3b      	adds	r3, r7, #4
 800a2b4:	220c      	movs	r2, #12
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	4807      	ldr	r0, [pc, #28]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a2ba:	f004 f993 	bl	800e5e4 <HAL_TIM_PWM_ConfigChannel>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a2c4:	f000 faec 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a2c8:	4803      	ldr	r0, [pc, #12]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a2ca:	f000 fd89 	bl	800ade0 <HAL_TIM_MspPostInit>

}
 800a2ce:	bf00      	nop
 800a2d0:	3738      	adds	r7, #56	; 0x38
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	200006e8 	.word	0x200006e8

0800a2dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08c      	sub	sp, #48	; 0x30
 800a2e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a2e2:	f107 030c 	add.w	r3, r7, #12
 800a2e6:	2224      	movs	r2, #36	; 0x24
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f005 fd2d 	bl	800fd4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2f0:	1d3b      	adds	r3, r7, #4
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a2f8:	4b20      	ldr	r3, [pc, #128]	; (800a37c <MX_TIM3_Init+0xa0>)
 800a2fa:	4a21      	ldr	r2, [pc, #132]	; (800a380 <MX_TIM3_Init+0xa4>)
 800a2fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a2fe:	4b1f      	ldr	r3, [pc, #124]	; (800a37c <MX_TIM3_Init+0xa0>)
 800a300:	2200      	movs	r2, #0
 800a302:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a304:	4b1d      	ldr	r3, [pc, #116]	; (800a37c <MX_TIM3_Init+0xa0>)
 800a306:	2200      	movs	r2, #0
 800a308:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800a30a:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <MX_TIM3_Init+0xa0>)
 800a30c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800a310:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a312:	4b1a      	ldr	r3, [pc, #104]	; (800a37c <MX_TIM3_Init+0xa0>)
 800a314:	2200      	movs	r2, #0
 800a316:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a318:	4b18      	ldr	r3, [pc, #96]	; (800a37c <MX_TIM3_Init+0xa0>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a31e:	2303      	movs	r3, #3
 800a320:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a326:	2301      	movs	r3, #1
 800a328:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a32a:	2300      	movs	r3, #0
 800a32c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a332:	2300      	movs	r3, #0
 800a334:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a336:	2301      	movs	r3, #1
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a33a:	2300      	movs	r3, #0
 800a33c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a342:	f107 030c 	add.w	r3, r7, #12
 800a346:	4619      	mov	r1, r3
 800a348:	480c      	ldr	r0, [pc, #48]	; (800a37c <MX_TIM3_Init+0xa0>)
 800a34a:	f003 fed3 	bl	800e0f4 <HAL_TIM_Encoder_Init>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800a354:	f000 faa4 	bl	800a8a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a358:	2300      	movs	r3, #0
 800a35a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a360:	1d3b      	adds	r3, r7, #4
 800a362:	4619      	mov	r1, r3
 800a364:	4805      	ldr	r0, [pc, #20]	; (800a37c <MX_TIM3_Init+0xa0>)
 800a366:	f004 febd 	bl	800f0e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a370:	f000 fa96 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a374:	bf00      	nop
 800a376:	3730      	adds	r7, #48	; 0x30
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20000528 	.word	0x20000528
 800a380:	40000400 	.word	0x40000400

0800a384 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08c      	sub	sp, #48	; 0x30
 800a388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a38a:	f107 030c 	add.w	r3, r7, #12
 800a38e:	2224      	movs	r2, #36	; 0x24
 800a390:	2100      	movs	r1, #0
 800a392:	4618      	mov	r0, r3
 800a394:	f005 fcd9 	bl	800fd4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a398:	1d3b      	adds	r3, r7, #4
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a3a0:	4b20      	ldr	r3, [pc, #128]	; (800a424 <MX_TIM4_Init+0xa0>)
 800a3a2:	4a21      	ldr	r2, [pc, #132]	; (800a428 <MX_TIM4_Init+0xa4>)
 800a3a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a3a6:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <MX_TIM4_Init+0xa0>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3ac:	4b1d      	ldr	r3, [pc, #116]	; (800a424 <MX_TIM4_Init+0xa0>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800a3b2:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <MX_TIM4_Init+0xa0>)
 800a3b4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800a3b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3ba:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <MX_TIM4_Init+0xa0>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3c0:	4b18      	ldr	r3, [pc, #96]	; (800a424 <MX_TIM4_Init+0xa0>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a3ea:	f107 030c 	add.w	r3, r7, #12
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	480c      	ldr	r0, [pc, #48]	; (800a424 <MX_TIM4_Init+0xa0>)
 800a3f2:	f003 fe7f 	bl	800e0f4 <HAL_TIM_Encoder_Init>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800a3fc:	f000 fa50 	bl	800a8a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a400:	2300      	movs	r3, #0
 800a402:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a404:	2300      	movs	r3, #0
 800a406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a408:	1d3b      	adds	r3, r7, #4
 800a40a:	4619      	mov	r1, r3
 800a40c:	4805      	ldr	r0, [pc, #20]	; (800a424 <MX_TIM4_Init+0xa0>)
 800a40e:	f004 fe69 	bl	800f0e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800a418:	f000 fa42 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a41c:	bf00      	nop
 800a41e:	3730      	adds	r7, #48	; 0x30
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	20000460 	.word	0x20000460
 800a428:	40000800 	.word	0x40000800

0800a42c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b08e      	sub	sp, #56	; 0x38
 800a430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a436:	2200      	movs	r2, #0
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	605a      	str	r2, [r3, #4]
 800a43c:	609a      	str	r2, [r3, #8]
 800a43e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a440:	f107 0320 	add.w	r3, r7, #32
 800a444:	2200      	movs	r2, #0
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a44a:	1d3b      	adds	r3, r7, #4
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	609a      	str	r2, [r3, #8]
 800a454:	60da      	str	r2, [r3, #12]
 800a456:	611a      	str	r2, [r3, #16]
 800a458:	615a      	str	r2, [r3, #20]
 800a45a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a45c:	4b2c      	ldr	r3, [pc, #176]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a45e:	4a2d      	ldr	r2, [pc, #180]	; (800a514 <MX_TIM5_Init+0xe8>)
 800a460:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a462:	4b2b      	ldr	r3, [pc, #172]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a464:	2200      	movs	r2, #0
 800a466:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a468:	4b29      	ldr	r3, [pc, #164]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800a46e:	4b28      	ldr	r3, [pc, #160]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a470:	f241 0267 	movw	r2, #4199	; 0x1067
 800a474:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a476:	4b26      	ldr	r3, [pc, #152]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a478:	2200      	movs	r2, #0
 800a47a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a47c:	4b24      	ldr	r3, [pc, #144]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a47e:	2200      	movs	r2, #0
 800a480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a482:	4823      	ldr	r0, [pc, #140]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a484:	f003 fbf4 	bl	800dc70 <HAL_TIM_Base_Init>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800a48e:	f000 fa07 	bl	800a8a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a496:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a49c:	4619      	mov	r1, r3
 800a49e:	481c      	ldr	r0, [pc, #112]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a4a0:	f004 f966 	bl	800e770 <HAL_TIM_ConfigClockSource>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800a4aa:	f000 f9f9 	bl	800a8a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a4ae:	4818      	ldr	r0, [pc, #96]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a4b0:	f003 fdac 	bl	800e00c <HAL_TIM_PWM_Init>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800a4ba:	f000 f9f1 	bl	800a8a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a4c6:	f107 0320 	add.w	r3, r7, #32
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4810      	ldr	r0, [pc, #64]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a4ce:	f004 fe09 	bl	800f0e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800a4d8:	f000 f9e2 	bl	800a8a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a4dc:	2360      	movs	r3, #96	; 0x60
 800a4de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a4ec:	1d3b      	adds	r3, r7, #4
 800a4ee:	2204      	movs	r2, #4
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4807      	ldr	r0, [pc, #28]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a4f4:	f004 f876 	bl	800e5e4 <HAL_TIM_PWM_ConfigChannel>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800a4fe:	f000 f9cf 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800a502:	4803      	ldr	r0, [pc, #12]	; (800a510 <MX_TIM5_Init+0xe4>)
 800a504:	f000 fc6c 	bl	800ade0 <HAL_TIM_MspPostInit>

}
 800a508:	bf00      	nop
 800a50a:	3738      	adds	r7, #56	; 0x38
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	200004e8 	.word	0x200004e8
 800a514:	40000c00 	.word	0x40000c00

0800a518 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b096      	sub	sp, #88	; 0x58
 800a51c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a51e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	605a      	str	r2, [r3, #4]
 800a528:	609a      	str	r2, [r3, #8]
 800a52a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a52c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a530:	2200      	movs	r2, #0
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a53a:	2200      	movs	r2, #0
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	605a      	str	r2, [r3, #4]
 800a540:	609a      	str	r2, [r3, #8]
 800a542:	60da      	str	r2, [r3, #12]
 800a544:	611a      	str	r2, [r3, #16]
 800a546:	615a      	str	r2, [r3, #20]
 800a548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a54a:	1d3b      	adds	r3, r7, #4
 800a54c:	2220      	movs	r2, #32
 800a54e:	2100      	movs	r1, #0
 800a550:	4618      	mov	r0, r3
 800a552:	f005 fbfa 	bl	800fd4a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a556:	4b42      	ldr	r3, [pc, #264]	; (800a660 <MX_TIM8_Init+0x148>)
 800a558:	4a42      	ldr	r2, [pc, #264]	; (800a664 <MX_TIM8_Init+0x14c>)
 800a55a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800a55c:	4b40      	ldr	r3, [pc, #256]	; (800a660 <MX_TIM8_Init+0x148>)
 800a55e:	22a7      	movs	r2, #167	; 0xa7
 800a560:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a562:	4b3f      	ldr	r3, [pc, #252]	; (800a660 <MX_TIM8_Init+0x148>)
 800a564:	2200      	movs	r2, #0
 800a566:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800a568:	4b3d      	ldr	r3, [pc, #244]	; (800a660 <MX_TIM8_Init+0x148>)
 800a56a:	2231      	movs	r2, #49	; 0x31
 800a56c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a56e:	4b3c      	ldr	r3, [pc, #240]	; (800a660 <MX_TIM8_Init+0x148>)
 800a570:	2200      	movs	r2, #0
 800a572:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a574:	4b3a      	ldr	r3, [pc, #232]	; (800a660 <MX_TIM8_Init+0x148>)
 800a576:	2200      	movs	r2, #0
 800a578:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a57a:	4b39      	ldr	r3, [pc, #228]	; (800a660 <MX_TIM8_Init+0x148>)
 800a57c:	2280      	movs	r2, #128	; 0x80
 800a57e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a580:	4837      	ldr	r0, [pc, #220]	; (800a660 <MX_TIM8_Init+0x148>)
 800a582:	f003 fb75 	bl	800dc70 <HAL_TIM_Base_Init>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800a58c:	f000 f988 	bl	800a8a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a594:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a596:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a59a:	4619      	mov	r1, r3
 800a59c:	4830      	ldr	r0, [pc, #192]	; (800a660 <MX_TIM8_Init+0x148>)
 800a59e:	f004 f8e7 	bl	800e770 <HAL_TIM_ConfigClockSource>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800a5a8:	f000 f97a 	bl	800a8a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800a5ac:	482c      	ldr	r0, [pc, #176]	; (800a660 <MX_TIM8_Init+0x148>)
 800a5ae:	f003 fbd9 	bl	800dd64 <HAL_TIM_OC_Init>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800a5b8:	f000 f972 	bl	800a8a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a5c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4825      	ldr	r0, [pc, #148]	; (800a660 <MX_TIM8_Init+0x148>)
 800a5cc:	f004 fd8a 	bl	800f0e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800a5d6:	f000 f963 	bl	800a8a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a5da:	2330      	movs	r3, #48	; 0x30
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800a5de:	2318      	movs	r3, #24
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a5f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4818      	ldr	r0, [pc, #96]	; (800a660 <MX_TIM8_Init+0x148>)
 800a600:	f003 ff90 	bl	800e524 <HAL_TIM_OC_ConfigChannel>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800a60a:	f000 f949 	bl	800a8a0 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800a60e:	4b14      	ldr	r3, [pc, #80]	; (800a660 <MX_TIM8_Init+0x148>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	699a      	ldr	r2, [r3, #24]
 800a614:	4b12      	ldr	r3, [pc, #72]	; (800a660 <MX_TIM8_Init+0x148>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0208 	orr.w	r2, r2, #8
 800a61c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a622:	2300      	movs	r3, #0
 800a624:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a636:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a638:	2300      	movs	r3, #0
 800a63a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a63c:	1d3b      	adds	r3, r7, #4
 800a63e:	4619      	mov	r1, r3
 800a640:	4807      	ldr	r0, [pc, #28]	; (800a660 <MX_TIM8_Init+0x148>)
 800a642:	f004 fdcb 	bl	800f1dc <HAL_TIMEx_ConfigBreakDeadTime>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800a64c:	f000 f928 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a650:	4803      	ldr	r0, [pc, #12]	; (800a660 <MX_TIM8_Init+0x148>)
 800a652:	f000 fbc5 	bl	800ade0 <HAL_TIM_MspPostInit>

}
 800a656:	bf00      	nop
 800a658:	3758      	adds	r7, #88	; 0x58
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20000420 	.word	0x20000420
 800a664:	40010400 	.word	0x40010400

0800a668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a66c:	4b11      	ldr	r3, [pc, #68]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a66e:	4a12      	ldr	r2, [pc, #72]	; (800a6b8 <MX_USART1_UART_Init+0x50>)
 800a670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a672:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a67a:	4b0e      	ldr	r3, [pc, #56]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a680:	4b0c      	ldr	r3, [pc, #48]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a682:	2200      	movs	r2, #0
 800a684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a686:	4b0b      	ldr	r3, [pc, #44]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a688:	2200      	movs	r2, #0
 800a68a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a68e:	220c      	movs	r2, #12
 800a690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a692:	4b08      	ldr	r3, [pc, #32]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a694:	2200      	movs	r2, #0
 800a696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a698:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a69e:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <MX_USART1_UART_Init+0x4c>)
 800a6a0:	f004 fe27 	bl	800f2f2 <HAL_UART_Init>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a6aa:	f000 f8f9 	bl	800a8a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a6ae:	bf00      	nop
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000608 	.word	0x20000608
 800a6b8:	40011000 	.word	0x40011000

0800a6bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	607b      	str	r3, [r7, #4]
 800a6c6:	4b10      	ldr	r3, [pc, #64]	; (800a708 <MX_DMA_Init+0x4c>)
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	4a0f      	ldr	r2, [pc, #60]	; (800a708 <MX_DMA_Init+0x4c>)
 800a6cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a6d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a6d2:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <MX_DMA_Init+0x4c>)
 800a6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6da:	607b      	str	r3, [r7, #4]
 800a6dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	2038      	movs	r0, #56	; 0x38
 800a6e4:	f001 fe9d 	bl	800c422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a6e8:	2038      	movs	r0, #56	; 0x38
 800a6ea:	f001 feb6 	bl	800c45a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	203a      	movs	r0, #58	; 0x3a
 800a6f4:	f001 fe95 	bl	800c422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800a6f8:	203a      	movs	r0, #58	; 0x3a
 800a6fa:	f001 feae 	bl	800c45a <HAL_NVIC_EnableIRQ>

}
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	40023800 	.word	0x40023800

0800a70c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08a      	sub	sp, #40	; 0x28
 800a710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a712:	f107 0314 	add.w	r3, r7, #20
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	605a      	str	r2, [r3, #4]
 800a71c:	609a      	str	r2, [r3, #8]
 800a71e:	60da      	str	r2, [r3, #12]
 800a720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a722:	2300      	movs	r3, #0
 800a724:	613b      	str	r3, [r7, #16]
 800a726:	4b59      	ldr	r3, [pc, #356]	; (800a88c <MX_GPIO_Init+0x180>)
 800a728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72a:	4a58      	ldr	r2, [pc, #352]	; (800a88c <MX_GPIO_Init+0x180>)
 800a72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a730:	6313      	str	r3, [r2, #48]	; 0x30
 800a732:	4b56      	ldr	r3, [pc, #344]	; (800a88c <MX_GPIO_Init+0x180>)
 800a734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73a:	613b      	str	r3, [r7, #16]
 800a73c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a73e:	2300      	movs	r3, #0
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	4b52      	ldr	r3, [pc, #328]	; (800a88c <MX_GPIO_Init+0x180>)
 800a744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a746:	4a51      	ldr	r2, [pc, #324]	; (800a88c <MX_GPIO_Init+0x180>)
 800a748:	f043 0304 	orr.w	r3, r3, #4
 800a74c:	6313      	str	r3, [r2, #48]	; 0x30
 800a74e:	4b4f      	ldr	r3, [pc, #316]	; (800a88c <MX_GPIO_Init+0x180>)
 800a750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a752:	f003 0304 	and.w	r3, r3, #4
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a75a:	2300      	movs	r3, #0
 800a75c:	60bb      	str	r3, [r7, #8]
 800a75e:	4b4b      	ldr	r3, [pc, #300]	; (800a88c <MX_GPIO_Init+0x180>)
 800a760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a762:	4a4a      	ldr	r2, [pc, #296]	; (800a88c <MX_GPIO_Init+0x180>)
 800a764:	f043 0301 	orr.w	r3, r3, #1
 800a768:	6313      	str	r3, [r2, #48]	; 0x30
 800a76a:	4b48      	ldr	r3, [pc, #288]	; (800a88c <MX_GPIO_Init+0x180>)
 800a76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	60bb      	str	r3, [r7, #8]
 800a774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a776:	2300      	movs	r3, #0
 800a778:	607b      	str	r3, [r7, #4]
 800a77a:	4b44      	ldr	r3, [pc, #272]	; (800a88c <MX_GPIO_Init+0x180>)
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	4a43      	ldr	r2, [pc, #268]	; (800a88c <MX_GPIO_Init+0x180>)
 800a780:	f043 0302 	orr.w	r3, r3, #2
 800a784:	6313      	str	r3, [r2, #48]	; 0x30
 800a786:	4b41      	ldr	r3, [pc, #260]	; (800a88c <MX_GPIO_Init+0x180>)
 800a788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	607b      	str	r3, [r7, #4]
 800a790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a792:	2300      	movs	r3, #0
 800a794:	603b      	str	r3, [r7, #0]
 800a796:	4b3d      	ldr	r3, [pc, #244]	; (800a88c <MX_GPIO_Init+0x180>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	4a3c      	ldr	r2, [pc, #240]	; (800a88c <MX_GPIO_Init+0x180>)
 800a79c:	f043 0308 	orr.w	r3, r3, #8
 800a7a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a7a2:	4b3a      	ldr	r3, [pc, #232]	; (800a88c <MX_GPIO_Init+0x180>)
 800a7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a6:	f003 0308 	and.w	r3, r3, #8
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f44f 7141 	mov.w	r1, #772	; 0x304
 800a7b4:	4836      	ldr	r0, [pc, #216]	; (800a890 <MX_GPIO_Init+0x184>)
 800a7b6:	f002 fd7b 	bl	800d2b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2105      	movs	r1, #5
 800a7be:	4835      	ldr	r0, [pc, #212]	; (800a894 <MX_GPIO_Init+0x188>)
 800a7c0:	f002 fd76 	bl	800d2b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	4833      	ldr	r0, [pc, #204]	; (800a898 <MX_GPIO_Init+0x18c>)
 800a7ca:	f002 fd71 	bl	800d2b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7d4:	4831      	ldr	r0, [pc, #196]	; (800a89c <MX_GPIO_Init+0x190>)
 800a7d6:	f002 fd6b 	bl	800d2b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800a7da:	f44f 7341 	mov.w	r3, #772	; 0x304
 800a7de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7ec:	f107 0314 	add.w	r3, r7, #20
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4827      	ldr	r0, [pc, #156]	; (800a890 <MX_GPIO_Init+0x184>)
 800a7f4:	f002 fbc2 	bl	800cf7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a7f8:	2305      	movs	r3, #5
 800a7fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a800:	2300      	movs	r3, #0
 800a802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a804:	2300      	movs	r3, #0
 800a806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a808:	f107 0314 	add.w	r3, r7, #20
 800a80c:	4619      	mov	r1, r3
 800a80e:	4821      	ldr	r0, [pc, #132]	; (800a894 <MX_GPIO_Init+0x188>)
 800a810:	f002 fbb4 	bl	800cf7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800a814:	f241 0304 	movw	r3, #4100	; 0x1004
 800a818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a81a:	2300      	movs	r3, #0
 800a81c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a822:	f107 0314 	add.w	r3, r7, #20
 800a826:	4619      	mov	r1, r3
 800a828:	481c      	ldr	r0, [pc, #112]	; (800a89c <MX_GPIO_Init+0x190>)
 800a82a:	f002 fba7 	bl	800cf7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800a82e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a834:	2300      	movs	r3, #0
 800a836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a838:	2300      	movs	r3, #0
 800a83a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a83c:	f107 0314 	add.w	r3, r7, #20
 800a840:	4619      	mov	r1, r3
 800a842:	4814      	ldr	r0, [pc, #80]	; (800a894 <MX_GPIO_Init+0x188>)
 800a844:	f002 fb9a 	bl	800cf7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a848:	2304      	movs	r3, #4
 800a84a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a84c:	2301      	movs	r3, #1
 800a84e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a850:	2300      	movs	r3, #0
 800a852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a854:	2300      	movs	r3, #0
 800a856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	4619      	mov	r1, r3
 800a85e:	480e      	ldr	r0, [pc, #56]	; (800a898 <MX_GPIO_Init+0x18c>)
 800a860:	f002 fb8c 	bl	800cf7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a864:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a86a:	2301      	movs	r3, #1
 800a86c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a872:	2300      	movs	r3, #0
 800a874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a876:	f107 0314 	add.w	r3, r7, #20
 800a87a:	4619      	mov	r1, r3
 800a87c:	4807      	ldr	r0, [pc, #28]	; (800a89c <MX_GPIO_Init+0x190>)
 800a87e:	f002 fb7d 	bl	800cf7c <HAL_GPIO_Init>

}
 800a882:	bf00      	nop
 800a884:	3728      	adds	r7, #40	; 0x28
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	40023800 	.word	0x40023800
 800a890:	40020800 	.word	0x40020800
 800a894:	40020000 	.word	0x40020000
 800a898:	40020c00 	.word	0x40020c00
 800a89c:	40020400 	.word	0x40020400

0800a8a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a8a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a8a6:	e7fe      	b.n	800a8a6 <Error_Handler+0x6>

0800a8a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	607b      	str	r3, [r7, #4]
 800a8b2:	4b13      	ldr	r3, [pc, #76]	; (800a900 <HAL_MspInit+0x58>)
 800a8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8b6:	4a12      	ldr	r2, [pc, #72]	; (800a900 <HAL_MspInit+0x58>)
 800a8b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8bc:	6453      	str	r3, [r2, #68]	; 0x44
 800a8be:	4b10      	ldr	r3, [pc, #64]	; (800a900 <HAL_MspInit+0x58>)
 800a8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8c6:	607b      	str	r3, [r7, #4]
 800a8c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	603b      	str	r3, [r7, #0]
 800a8ce:	4b0c      	ldr	r3, [pc, #48]	; (800a900 <HAL_MspInit+0x58>)
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	4a0b      	ldr	r2, [pc, #44]	; (800a900 <HAL_MspInit+0x58>)
 800a8d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8d8:	6413      	str	r3, [r2, #64]	; 0x40
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <HAL_MspInit+0x58>)
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	2004      	movs	r0, #4
 800a8ec:	f001 fd99 	bl	800c422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800a8f0:	2004      	movs	r0, #4
 800a8f2:	f001 fdb2 	bl	800c45a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a8f6:	bf00      	nop
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	40023800 	.word	0x40023800

0800a904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08c      	sub	sp, #48	; 0x30
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a90c:	f107 031c 	add.w	r3, r7, #28
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	605a      	str	r2, [r3, #4]
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	60da      	str	r2, [r3, #12]
 800a91a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a73      	ldr	r2, [pc, #460]	; (800aaf0 <HAL_ADC_MspInit+0x1ec>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d17a      	bne.n	800aa1c <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a926:	2300      	movs	r3, #0
 800a928:	61bb      	str	r3, [r7, #24]
 800a92a:	4b72      	ldr	r3, [pc, #456]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a92e:	4a71      	ldr	r2, [pc, #452]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a934:	6453      	str	r3, [r2, #68]	; 0x44
 800a936:	4b6f      	ldr	r3, [pc, #444]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93e:	61bb      	str	r3, [r7, #24]
 800a940:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a942:	2300      	movs	r3, #0
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	4b6b      	ldr	r3, [pc, #428]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94a:	4a6a      	ldr	r2, [pc, #424]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a94c:	f043 0304 	orr.w	r3, r3, #4
 800a950:	6313      	str	r3, [r2, #48]	; 0x30
 800a952:	4b68      	ldr	r3, [pc, #416]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	617b      	str	r3, [r7, #20]
 800a95c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a95e:	2300      	movs	r3, #0
 800a960:	613b      	str	r3, [r7, #16]
 800a962:	4b64      	ldr	r3, [pc, #400]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a966:	4a63      	ldr	r2, [pc, #396]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a968:	f043 0302 	orr.w	r3, r3, #2
 800a96c:	6313      	str	r3, [r2, #48]	; 0x30
 800a96e:	4b61      	ldr	r3, [pc, #388]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800a970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	613b      	str	r3, [r7, #16]
 800a978:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800a97a:	2311      	movs	r3, #17
 800a97c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a97e:	2303      	movs	r3, #3
 800a980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a982:	2300      	movs	r3, #0
 800a984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a986:	f107 031c 	add.w	r3, r7, #28
 800a98a:	4619      	mov	r1, r3
 800a98c:	485a      	ldr	r0, [pc, #360]	; (800aaf8 <HAL_ADC_MspInit+0x1f4>)
 800a98e:	f002 faf5 	bl	800cf7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a992:	2302      	movs	r3, #2
 800a994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a996:	2303      	movs	r3, #3
 800a998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a99e:	f107 031c 	add.w	r3, r7, #28
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4855      	ldr	r0, [pc, #340]	; (800aafc <HAL_ADC_MspInit+0x1f8>)
 800a9a6:	f002 fae9 	bl	800cf7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800a9aa:	4b55      	ldr	r3, [pc, #340]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9ac:	4a55      	ldr	r2, [pc, #340]	; (800ab04 <HAL_ADC_MspInit+0x200>)
 800a9ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800a9b0:	4b53      	ldr	r3, [pc, #332]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9b6:	4b52      	ldr	r3, [pc, #328]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9bc:	4b50      	ldr	r3, [pc, #320]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a9c2:	4b4f      	ldr	r3, [pc, #316]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a9ca:	4b4d      	ldr	r3, [pc, #308]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a9d2:	4b4b      	ldr	r3, [pc, #300]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a9d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a9da:	4b49      	ldr	r3, [pc, #292]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a9e2:	4b47      	ldr	r3, [pc, #284]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a9e8:	4b45      	ldr	r3, [pc, #276]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a9ee:	4844      	ldr	r0, [pc, #272]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800a9f0:	f001 fd4e 	bl	800c490 <HAL_DMA_Init>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800a9fa:	f7ff ff51 	bl	800a8a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a3f      	ldr	r2, [pc, #252]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800aa02:	639a      	str	r2, [r3, #56]	; 0x38
 800aa04:	4a3e      	ldr	r2, [pc, #248]	; (800ab00 <HAL_ADC_MspInit+0x1fc>)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	2012      	movs	r0, #18
 800aa10:	f001 fd07 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800aa14:	2012      	movs	r0, #18
 800aa16:	f001 fd20 	bl	800c45a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800aa1a:	e065      	b.n	800aae8 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a39      	ldr	r2, [pc, #228]	; (800ab08 <HAL_ADC_MspInit+0x204>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d160      	bne.n	800aae8 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800aa26:	2300      	movs	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	4b32      	ldr	r3, [pc, #200]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800aa2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2e:	4a31      	ldr	r2, [pc, #196]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800aa30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa34:	6453      	str	r3, [r2, #68]	; 0x44
 800aa36:	4b2f      	ldr	r3, [pc, #188]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800aa38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa42:	2300      	movs	r3, #0
 800aa44:	60bb      	str	r3, [r7, #8]
 800aa46:	4b2b      	ldr	r3, [pc, #172]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800aa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4a:	4a2a      	ldr	r2, [pc, #168]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800aa4c:	f043 0304 	orr.w	r3, r3, #4
 800aa50:	6313      	str	r3, [r2, #48]	; 0x30
 800aa52:	4b28      	ldr	r3, [pc, #160]	; (800aaf4 <HAL_ADC_MspInit+0x1f0>)
 800aa54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	60bb      	str	r3, [r7, #8]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800aa5e:	2322      	movs	r3, #34	; 0x22
 800aa60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aa62:	2303      	movs	r3, #3
 800aa64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa6a:	f107 031c 	add.w	r3, r7, #28
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4821      	ldr	r0, [pc, #132]	; (800aaf8 <HAL_ADC_MspInit+0x1f4>)
 800aa72:	f002 fa83 	bl	800cf7c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800aa76:	4b25      	ldr	r3, [pc, #148]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aa78:	4a25      	ldr	r2, [pc, #148]	; (800ab10 <HAL_ADC_MspInit+0x20c>)
 800aa7a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800aa7c:	4b23      	ldr	r3, [pc, #140]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aa7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800aa82:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa84:	4b21      	ldr	r3, [pc, #132]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa8a:	4b20      	ldr	r3, [pc, #128]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800aa90:	4b1e      	ldr	r3, [pc, #120]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aa92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa96:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800aa98:	4b1c      	ldr	r3, [pc, #112]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aa9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa9e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aaa0:	4b1a      	ldr	r3, [pc, #104]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aaa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aaa6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800aaa8:	4b18      	ldr	r3, [pc, #96]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aaaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aaae:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800aab0:	4b16      	ldr	r3, [pc, #88]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aab6:	4b15      	ldr	r3, [pc, #84]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800aabc:	4813      	ldr	r0, [pc, #76]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aabe:	f001 fce7 	bl	800c490 <HAL_DMA_Init>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800aac8:	f7ff feea 	bl	800a8a0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a0f      	ldr	r2, [pc, #60]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aad0:	639a      	str	r2, [r3, #56]	; 0x38
 800aad2:	4a0e      	ldr	r2, [pc, #56]	; (800ab0c <HAL_ADC_MspInit+0x208>)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800aad8:	2200      	movs	r2, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	2012      	movs	r0, #18
 800aade:	f001 fca0 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800aae2:	2012      	movs	r0, #18
 800aae4:	f001 fcb9 	bl	800c45a <HAL_NVIC_EnableIRQ>
}
 800aae8:	bf00      	nop
 800aaea:	3730      	adds	r7, #48	; 0x30
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	40012000 	.word	0x40012000
 800aaf4:	40023800 	.word	0x40023800
 800aaf8:	40020800 	.word	0x40020800
 800aafc:	40020400 	.word	0x40020400
 800ab00:	20000648 	.word	0x20000648
 800ab04:	40026410 	.word	0x40026410
 800ab08:	40012100 	.word	0x40012100
 800ab0c:	20000728 	.word	0x20000728
 800ab10:	40026440 	.word	0x40026440

0800ab14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08a      	sub	sp, #40	; 0x28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab1c:	f107 0314 	add.w	r3, r7, #20
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	605a      	str	r2, [r3, #4]
 800ab26:	609a      	str	r2, [r3, #8]
 800ab28:	60da      	str	r2, [r3, #12]
 800ab2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a19      	ldr	r2, [pc, #100]	; (800ab98 <HAL_SPI_MspInit+0x84>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d12c      	bne.n	800ab90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800ab36:	2300      	movs	r3, #0
 800ab38:	613b      	str	r3, [r7, #16]
 800ab3a:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <HAL_SPI_MspInit+0x88>)
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3e:	4a17      	ldr	r2, [pc, #92]	; (800ab9c <HAL_SPI_MspInit+0x88>)
 800ab40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab44:	6413      	str	r3, [r2, #64]	; 0x40
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <HAL_SPI_MspInit+0x88>)
 800ab48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab4e:	613b      	str	r3, [r7, #16]
 800ab50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	4b11      	ldr	r3, [pc, #68]	; (800ab9c <HAL_SPI_MspInit+0x88>)
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	4a10      	ldr	r2, [pc, #64]	; (800ab9c <HAL_SPI_MspInit+0x88>)
 800ab5c:	f043 0304 	orr.w	r3, r3, #4
 800ab60:	6313      	str	r3, [r2, #48]	; 0x30
 800ab62:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <HAL_SPI_MspInit+0x88>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	f003 0304 	and.w	r3, r3, #4
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800ab6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ab72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab74:	2302      	movs	r3, #2
 800ab76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ab80:	2306      	movs	r3, #6
 800ab82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab84:	f107 0314 	add.w	r3, r7, #20
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4805      	ldr	r0, [pc, #20]	; (800aba0 <HAL_SPI_MspInit+0x8c>)
 800ab8c:	f002 f9f6 	bl	800cf7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800ab90:	bf00      	nop
 800ab92:	3728      	adds	r7, #40	; 0x28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	40003c00 	.word	0x40003c00
 800ab9c:	40023800 	.word	0x40023800
 800aba0:	40020800 	.word	0x40020800

0800aba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a40      	ldr	r2, [pc, #256]	; (800acb4 <HAL_TIM_Base_MspInit+0x110>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d116      	bne.n	800abe4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	4b3f      	ldr	r3, [pc, #252]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800abbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abbe:	4a3e      	ldr	r2, [pc, #248]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800abc0:	f043 0301 	orr.w	r3, r3, #1
 800abc4:	6453      	str	r3, [r2, #68]	; 0x44
 800abc6:	4b3c      	ldr	r3, [pc, #240]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800abc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800abd2:	2200      	movs	r2, #0
 800abd4:	2101      	movs	r1, #1
 800abd6:	2019      	movs	r0, #25
 800abd8:	f001 fc23 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800abdc:	2019      	movs	r0, #25
 800abde:	f001 fc3c 	bl	800c45a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800abe2:	e062      	b.n	800acaa <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abec:	d116      	bne.n	800ac1c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800abee:	2300      	movs	r3, #0
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	4b31      	ldr	r3, [pc, #196]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800abf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf6:	4a30      	ldr	r2, [pc, #192]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800abf8:	f043 0301 	orr.w	r3, r3, #1
 800abfc:	6413      	str	r3, [r2, #64]	; 0x40
 800abfe:	4b2e      	ldr	r3, [pc, #184]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800ac00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	613b      	str	r3, [r7, #16]
 800ac08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	201c      	movs	r0, #28
 800ac10:	f001 fc07 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ac14:	201c      	movs	r0, #28
 800ac16:	f001 fc20 	bl	800c45a <HAL_NVIC_EnableIRQ>
}
 800ac1a:	e046      	b.n	800acaa <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a26      	ldr	r2, [pc, #152]	; (800acbc <HAL_TIM_Base_MspInit+0x118>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d116      	bne.n	800ac54 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ac26:	2300      	movs	r3, #0
 800ac28:	60fb      	str	r3, [r7, #12]
 800ac2a:	4b23      	ldr	r3, [pc, #140]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2e:	4a22      	ldr	r2, [pc, #136]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800ac30:	f043 0308 	orr.w	r3, r3, #8
 800ac34:	6413      	str	r3, [r2, #64]	; 0x40
 800ac36:	4b20      	ldr	r3, [pc, #128]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800ac38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3a:	f003 0308 	and.w	r3, r3, #8
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800ac42:	2200      	movs	r2, #0
 800ac44:	2100      	movs	r1, #0
 800ac46:	2032      	movs	r0, #50	; 0x32
 800ac48:	f001 fbeb 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800ac4c:	2032      	movs	r0, #50	; 0x32
 800ac4e:	f001 fc04 	bl	800c45a <HAL_NVIC_EnableIRQ>
}
 800ac52:	e02a      	b.n	800acaa <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a19      	ldr	r2, [pc, #100]	; (800acc0 <HAL_TIM_Base_MspInit+0x11c>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d125      	bne.n	800acaa <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60bb      	str	r3, [r7, #8]
 800ac62:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800ac64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac66:	4a14      	ldr	r2, [pc, #80]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800ac68:	f043 0302 	orr.w	r3, r3, #2
 800ac6c:	6453      	str	r3, [r2, #68]	; 0x44
 800ac6e:	4b12      	ldr	r3, [pc, #72]	; (800acb8 <HAL_TIM_Base_MspInit+0x114>)
 800ac70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac72:	f003 0302 	and.w	r3, r3, #2
 800ac76:	60bb      	str	r3, [r7, #8]
 800ac78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2102      	movs	r1, #2
 800ac7e:	202c      	movs	r0, #44	; 0x2c
 800ac80:	f001 fbcf 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800ac84:	202c      	movs	r0, #44	; 0x2c
 800ac86:	f001 fbe8 	bl	800c45a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	202d      	movs	r0, #45	; 0x2d
 800ac90:	f001 fbc7 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800ac94:	202d      	movs	r0, #45	; 0x2d
 800ac96:	f001 fbe0 	bl	800c45a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	202e      	movs	r0, #46	; 0x2e
 800aca0:	f001 fbbf 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800aca4:	202e      	movs	r0, #46	; 0x2e
 800aca6:	f001 fbd8 	bl	800c45a <HAL_NVIC_EnableIRQ>
}
 800acaa:	bf00      	nop
 800acac:	3718      	adds	r7, #24
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	40010000 	.word	0x40010000
 800acb8:	40023800 	.word	0x40023800
 800acbc:	40000c00 	.word	0x40000c00
 800acc0:	40010400 	.word	0x40010400

0800acc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b08c      	sub	sp, #48	; 0x30
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800accc:	f107 031c 	add.w	r3, r7, #28
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	605a      	str	r2, [r3, #4]
 800acd6:	609a      	str	r2, [r3, #8]
 800acd8:	60da      	str	r2, [r3, #12]
 800acda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a3a      	ldr	r2, [pc, #232]	; (800adcc <HAL_TIM_Encoder_MspInit+0x108>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d134      	bne.n	800ad50 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ace6:	2300      	movs	r3, #0
 800ace8:	61bb      	str	r3, [r7, #24]
 800acea:	4b39      	ldr	r3, [pc, #228]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800acec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acee:	4a38      	ldr	r2, [pc, #224]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800acf0:	f043 0302 	orr.w	r3, r3, #2
 800acf4:	6413      	str	r3, [r2, #64]	; 0x40
 800acf6:	4b36      	ldr	r3, [pc, #216]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfa:	f003 0302 	and.w	r3, r3, #2
 800acfe:	61bb      	str	r3, [r7, #24]
 800ad00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
 800ad06:	4b32      	ldr	r3, [pc, #200]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	4a31      	ldr	r2, [pc, #196]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad0c:	f043 0301 	orr.w	r3, r3, #1
 800ad10:	6313      	str	r3, [r2, #48]	; 0x30
 800ad12:	4b2f      	ldr	r3, [pc, #188]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]
 800ad1c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ad1e:	23c0      	movs	r3, #192	; 0xc0
 800ad20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad22:	2302      	movs	r3, #2
 800ad24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ad2e:	2302      	movs	r3, #2
 800ad30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad32:	f107 031c 	add.w	r3, r7, #28
 800ad36:	4619      	mov	r1, r3
 800ad38:	4826      	ldr	r0, [pc, #152]	; (800add4 <HAL_TIM_Encoder_MspInit+0x110>)
 800ad3a:	f002 f91f 	bl	800cf7c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2100      	movs	r1, #0
 800ad42:	201d      	movs	r0, #29
 800ad44:	f001 fb6d 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ad48:	201d      	movs	r0, #29
 800ad4a:	f001 fb86 	bl	800c45a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800ad4e:	e038      	b.n	800adc2 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a20      	ldr	r2, [pc, #128]	; (800add8 <HAL_TIM_Encoder_MspInit+0x114>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d133      	bne.n	800adc2 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	613b      	str	r3, [r7, #16]
 800ad5e:	4b1c      	ldr	r3, [pc, #112]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad62:	4a1b      	ldr	r2, [pc, #108]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad64:	f043 0304 	orr.w	r3, r3, #4
 800ad68:	6413      	str	r3, [r2, #64]	; 0x40
 800ad6a:	4b19      	ldr	r3, [pc, #100]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6e:	f003 0304 	and.w	r3, r3, #4
 800ad72:	613b      	str	r3, [r7, #16]
 800ad74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	4b15      	ldr	r3, [pc, #84]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	4a14      	ldr	r2, [pc, #80]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad80:	f043 0302 	orr.w	r3, r3, #2
 800ad84:	6313      	str	r3, [r2, #48]	; 0x30
 800ad86:	4b12      	ldr	r3, [pc, #72]	; (800add0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ad92:	23c0      	movs	r3, #192	; 0xc0
 800ad94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad96:	2302      	movs	r3, #2
 800ad98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ada2:	2302      	movs	r3, #2
 800ada4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ada6:	f107 031c 	add.w	r3, r7, #28
 800adaa:	4619      	mov	r1, r3
 800adac:	480b      	ldr	r0, [pc, #44]	; (800addc <HAL_TIM_Encoder_MspInit+0x118>)
 800adae:	f002 f8e5 	bl	800cf7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800adb2:	2200      	movs	r2, #0
 800adb4:	2100      	movs	r1, #0
 800adb6:	201e      	movs	r0, #30
 800adb8:	f001 fb33 	bl	800c422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800adbc:	201e      	movs	r0, #30
 800adbe:	f001 fb4c 	bl	800c45a <HAL_NVIC_EnableIRQ>
}
 800adc2:	bf00      	nop
 800adc4:	3730      	adds	r7, #48	; 0x30
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	40000400 	.word	0x40000400
 800add0:	40023800 	.word	0x40023800
 800add4:	40020000 	.word	0x40020000
 800add8:	40000800 	.word	0x40000800
 800addc:	40020400 	.word	0x40020400

0800ade0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08c      	sub	sp, #48	; 0x30
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ade8:	f107 031c 	add.w	r3, r7, #28
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	609a      	str	r2, [r3, #8]
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae00:	d11e      	bne.n	800ae40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae02:	2300      	movs	r3, #0
 800ae04:	61bb      	str	r3, [r7, #24]
 800ae06:	4b43      	ldr	r3, [pc, #268]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800ae08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0a:	4a42      	ldr	r2, [pc, #264]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800ae0c:	f043 0301 	orr.w	r3, r3, #1
 800ae10:	6313      	str	r3, [r2, #48]	; 0x30
 800ae12:	4b40      	ldr	r3, [pc, #256]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800ae14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	61bb      	str	r3, [r7, #24]
 800ae1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ae1e:	2308      	movs	r3, #8
 800ae20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae22:	2302      	movs	r3, #2
 800ae24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae32:	f107 031c 	add.w	r3, r7, #28
 800ae36:	4619      	mov	r1, r3
 800ae38:	4837      	ldr	r0, [pc, #220]	; (800af18 <HAL_TIM_MspPostInit+0x138>)
 800ae3a:	f002 f89f 	bl	800cf7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ae3e:	e064      	b.n	800af0a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a35      	ldr	r2, [pc, #212]	; (800af1c <HAL_TIM_MspPostInit+0x13c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d11e      	bne.n	800ae88 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	4b31      	ldr	r3, [pc, #196]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800ae50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae52:	4a30      	ldr	r2, [pc, #192]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800ae54:	f043 0301 	orr.w	r3, r3, #1
 800ae58:	6313      	str	r3, [r2, #48]	; 0x30
 800ae5a:	4b2e      	ldr	r3, [pc, #184]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ae66:	2302      	movs	r3, #2
 800ae68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae72:	2300      	movs	r3, #0
 800ae74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ae76:	2302      	movs	r3, #2
 800ae78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae7a:	f107 031c 	add.w	r3, r7, #28
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4825      	ldr	r0, [pc, #148]	; (800af18 <HAL_TIM_MspPostInit+0x138>)
 800ae82:	f002 f87b 	bl	800cf7c <HAL_GPIO_Init>
}
 800ae86:	e040      	b.n	800af0a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a24      	ldr	r2, [pc, #144]	; (800af20 <HAL_TIM_MspPostInit+0x140>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d13b      	bne.n	800af0a <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae92:	2300      	movs	r3, #0
 800ae94:	613b      	str	r3, [r7, #16]
 800ae96:	4b1f      	ldr	r3, [pc, #124]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800ae98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9a:	4a1e      	ldr	r2, [pc, #120]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800ae9c:	f043 0301 	orr.w	r3, r3, #1
 800aea0:	6313      	str	r3, [r2, #48]	; 0x30
 800aea2:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800aea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	613b      	str	r3, [r7, #16]
 800aeac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	4b18      	ldr	r3, [pc, #96]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800aeb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb6:	4a17      	ldr	r2, [pc, #92]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800aeb8:	f043 0304 	orr.w	r3, r3, #4
 800aebc:	6313      	str	r3, [r2, #48]	; 0x30
 800aebe:	4b15      	ldr	r3, [pc, #84]	; (800af14 <HAL_TIM_MspPostInit+0x134>)
 800aec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec2:	f003 0304 	and.w	r3, r3, #4
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800aeca:	2320      	movs	r3, #32
 800aecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aece:	2302      	movs	r3, #2
 800aed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aed6:	2300      	movs	r3, #0
 800aed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800aeda:	2303      	movs	r3, #3
 800aedc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aede:	f107 031c 	add.w	r3, r7, #28
 800aee2:	4619      	mov	r1, r3
 800aee4:	480c      	ldr	r0, [pc, #48]	; (800af18 <HAL_TIM_MspPostInit+0x138>)
 800aee6:	f002 f849 	bl	800cf7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aeee:	2302      	movs	r3, #2
 800aef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aef6:	2300      	movs	r3, #0
 800aef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800aefa:	2303      	movs	r3, #3
 800aefc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aefe:	f107 031c 	add.w	r3, r7, #28
 800af02:	4619      	mov	r1, r3
 800af04:	4807      	ldr	r0, [pc, #28]	; (800af24 <HAL_TIM_MspPostInit+0x144>)
 800af06:	f002 f839 	bl	800cf7c <HAL_GPIO_Init>
}
 800af0a:	bf00      	nop
 800af0c:	3730      	adds	r7, #48	; 0x30
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	40023800 	.word	0x40023800
 800af18:	40020000 	.word	0x40020000
 800af1c:	40000c00 	.word	0x40000c00
 800af20:	40010400 	.word	0x40010400
 800af24:	40020800 	.word	0x40020800

0800af28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08a      	sub	sp, #40	; 0x28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af30:	f107 0314 	add.w	r3, r7, #20
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	605a      	str	r2, [r3, #4]
 800af3a:	609a      	str	r2, [r3, #8]
 800af3c:	60da      	str	r2, [r3, #12]
 800af3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a19      	ldr	r2, [pc, #100]	; (800afac <HAL_UART_MspInit+0x84>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d12c      	bne.n	800afa4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800af4a:	2300      	movs	r3, #0
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	4b18      	ldr	r3, [pc, #96]	; (800afb0 <HAL_UART_MspInit+0x88>)
 800af50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af52:	4a17      	ldr	r2, [pc, #92]	; (800afb0 <HAL_UART_MspInit+0x88>)
 800af54:	f043 0310 	orr.w	r3, r3, #16
 800af58:	6453      	str	r3, [r2, #68]	; 0x44
 800af5a:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <HAL_UART_MspInit+0x88>)
 800af5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af5e:	f003 0310 	and.w	r3, r3, #16
 800af62:	613b      	str	r3, [r7, #16]
 800af64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <HAL_UART_MspInit+0x88>)
 800af6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6e:	4a10      	ldr	r2, [pc, #64]	; (800afb0 <HAL_UART_MspInit+0x88>)
 800af70:	f043 0301 	orr.w	r3, r3, #1
 800af74:	6313      	str	r3, [r2, #48]	; 0x30
 800af76:	4b0e      	ldr	r3, [pc, #56]	; (800afb0 <HAL_UART_MspInit+0x88>)
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800af82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800af86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af88:	2302      	movs	r3, #2
 800af8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8c:	2300      	movs	r3, #0
 800af8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af90:	2303      	movs	r3, #3
 800af92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800af94:	2307      	movs	r3, #7
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af98:	f107 0314 	add.w	r3, r7, #20
 800af9c:	4619      	mov	r1, r3
 800af9e:	4805      	ldr	r0, [pc, #20]	; (800afb4 <HAL_UART_MspInit+0x8c>)
 800afa0:	f001 ffec 	bl	800cf7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800afa4:	bf00      	nop
 800afa6:	3728      	adds	r7, #40	; 0x28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	40011000 	.word	0x40011000
 800afb0:	40023800 	.word	0x40023800
 800afb4:	40020000 	.word	0x40020000

0800afb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800afbc:	e7fe      	b.n	800afbc <NMI_Handler+0x4>

0800afbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800afbe:	b480      	push	{r7}
 800afc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800afc2:	e7fe      	b.n	800afc2 <HardFault_Handler+0x4>

0800afc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800afc4:	b480      	push	{r7}
 800afc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800afc8:	e7fe      	b.n	800afc8 <MemManage_Handler+0x4>

0800afca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800afca:	b480      	push	{r7}
 800afcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800afce:	e7fe      	b.n	800afce <BusFault_Handler+0x4>

0800afd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800afd4:	e7fe      	b.n	800afd4 <UsageFault_Handler+0x4>

0800afd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800afd6:	b480      	push	{r7}
 800afd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800afda:	bf00      	nop
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800afe4:	b480      	push	{r7}
 800afe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800afe8:	bf00      	nop
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800aff2:	b480      	push	{r7}
 800aff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800aff6:	bf00      	nop
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b004:	f000 fb5e 	bl	800b6c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b008:	bf00      	nop
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800b010:	f001 fe1c 	bl	800cc4c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800b014:	bf00      	nop
 800b016:	bd80      	pop	{r7, pc}

0800b018 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800b01c:	4803      	ldr	r0, [pc, #12]	; (800b02c <ADC_IRQHandler+0x14>)
 800b01e:	f000 fbd6 	bl	800b7ce <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800b022:	4803      	ldr	r0, [pc, #12]	; (800b030 <ADC_IRQHandler+0x18>)
 800b024:	f000 fbd3 	bl	800b7ce <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800b028:	bf00      	nop
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	200005c0 	.word	0x200005c0
 800b030:	200004a0 	.word	0x200004a0

0800b034 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b038:	4802      	ldr	r0, [pc, #8]	; (800b044 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800b03a:	f003 f96b 	bl	800e314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800b03e:	bf00      	nop
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	200006a8 	.word	0x200006a8

0800b048 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b04c:	4802      	ldr	r0, [pc, #8]	; (800b058 <TIM2_IRQHandler+0x10>)
 800b04e:	f003 f961 	bl	800e314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b052:	bf00      	nop
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	200006e8 	.word	0x200006e8

0800b05c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b060:	4802      	ldr	r0, [pc, #8]	; (800b06c <TIM3_IRQHandler+0x10>)
 800b062:	f003 f957 	bl	800e314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b066:	bf00      	nop
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20000528 	.word	0x20000528

0800b070 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b074:	4802      	ldr	r0, [pc, #8]	; (800b080 <TIM4_IRQHandler+0x10>)
 800b076:	f003 f94d 	bl	800e314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b07a:	bf00      	nop
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20000460 	.word	0x20000460

0800b084 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800b088:	4802      	ldr	r0, [pc, #8]	; (800b094 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800b08a:	f003 f943 	bl	800e314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800b08e:	bf00      	nop
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000420 	.word	0x20000420

0800b098 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800b09c:	4802      	ldr	r0, [pc, #8]	; (800b0a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800b09e:	f003 f939 	bl	800e314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800b0a2:	bf00      	nop
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20000420 	.word	0x20000420

0800b0ac <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800b0b0:	4802      	ldr	r0, [pc, #8]	; (800b0bc <TIM8_CC_IRQHandler+0x10>)
 800b0b2:	f003 f92f 	bl	800e314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800b0b6:	bf00      	nop
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000420 	.word	0x20000420

0800b0c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800b0c4:	4802      	ldr	r0, [pc, #8]	; (800b0d0 <TIM5_IRQHandler+0x10>)
 800b0c6:	f003 f925 	bl	800e314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800b0ca:	bf00      	nop
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200004e8 	.word	0x200004e8

0800b0d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b0d8:	4802      	ldr	r0, [pc, #8]	; (800b0e4 <DMA2_Stream0_IRQHandler+0x10>)
 800b0da:	f001 fb4f 	bl	800c77c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b0de:	bf00      	nop
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000648 	.word	0x20000648

0800b0e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800b0ec:	4802      	ldr	r0, [pc, #8]	; (800b0f8 <DMA2_Stream2_IRQHandler+0x10>)
 800b0ee:	f001 fb45 	bl	800c77c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800b0f2:	bf00      	nop
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	20000728 	.word	0x20000728

0800b0fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b108:	2300      	movs	r3, #0
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e00a      	b.n	800b124 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b10e:	f3af 8000 	nop.w
 800b112:	4601      	mov	r1, r0
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	60ba      	str	r2, [r7, #8]
 800b11a:	b2ca      	uxtb	r2, r1
 800b11c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	3301      	adds	r3, #1
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	429a      	cmp	r2, r3
 800b12a:	dbf0      	blt.n	800b10e <_read+0x12>
	}

return len;
 800b12c:	687b      	ldr	r3, [r7, #4]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b086      	sub	sp, #24
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b142:	2300      	movs	r3, #0
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	e009      	b.n	800b15c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	60ba      	str	r2, [r7, #8]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	4618      	mov	r0, r3
 800b152:	f7fe fe17 	bl	8009d84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	3301      	adds	r3, #1
 800b15a:	617b      	str	r3, [r7, #20]
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	429a      	cmp	r2, r3
 800b162:	dbf1      	blt.n	800b148 <_write+0x12>
	}
	return len;
 800b164:	687b      	ldr	r3, [r7, #4]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3718      	adds	r7, #24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <_close>:

int _close(int file)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
	return -1;
 800b176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b196:	605a      	str	r2, [r3, #4]
	return 0;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <_isatty>:

int _isatty(int file)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
	return 1;
 800b1ae:	2301      	movs	r3, #1
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
	return 0;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
	...

0800b1d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b1e0:	4a14      	ldr	r2, [pc, #80]	; (800b234 <_sbrk+0x5c>)
 800b1e2:	4b15      	ldr	r3, [pc, #84]	; (800b238 <_sbrk+0x60>)
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b1ec:	4b13      	ldr	r3, [pc, #76]	; (800b23c <_sbrk+0x64>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d102      	bne.n	800b1fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b1f4:	4b11      	ldr	r3, [pc, #68]	; (800b23c <_sbrk+0x64>)
 800b1f6:	4a12      	ldr	r2, [pc, #72]	; (800b240 <_sbrk+0x68>)
 800b1f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b1fa:	4b10      	ldr	r3, [pc, #64]	; (800b23c <_sbrk+0x64>)
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4413      	add	r3, r2
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	429a      	cmp	r2, r3
 800b206:	d207      	bcs.n	800b218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b208:	f004 fd6a 	bl	800fce0 <__errno>
 800b20c:	4602      	mov	r2, r0
 800b20e:	230c      	movs	r3, #12
 800b210:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800b212:	f04f 33ff 	mov.w	r3, #4294967295
 800b216:	e009      	b.n	800b22c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b218:	4b08      	ldr	r3, [pc, #32]	; (800b23c <_sbrk+0x64>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b21e:	4b07      	ldr	r3, [pc, #28]	; (800b23c <_sbrk+0x64>)
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4413      	add	r3, r2
 800b226:	4a05      	ldr	r2, [pc, #20]	; (800b23c <_sbrk+0x64>)
 800b228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b22a:	68fb      	ldr	r3, [r7, #12]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	20020000 	.word	0x20020000
 800b238:	00000400 	.word	0x00000400
 800b23c:	20000400 	.word	0x20000400
 800b240:	200007b8 	.word	0x200007b8

0800b244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b244:	b480      	push	{r7}
 800b246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b248:	4b08      	ldr	r3, [pc, #32]	; (800b26c <SystemInit+0x28>)
 800b24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24e:	4a07      	ldr	r2, [pc, #28]	; (800b26c <SystemInit+0x28>)
 800b250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b258:	4b04      	ldr	r3, [pc, #16]	; (800b26c <SystemInit+0x28>)
 800b25a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b25e:	609a      	str	r2, [r3, #8]
#endif
}
 800b260:	bf00      	nop
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	e000ed00 	.word	0xe000ed00

0800b270 <ADCStart>:

uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800b270:	b580      	push	{r7, lr}
 800b272:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800b274:	2203      	movs	r2, #3
 800b276:	490a      	ldr	r1, [pc, #40]	; (800b2a0 <ADCStart+0x30>)
 800b278:	480a      	ldr	r0, [pc, #40]	; (800b2a4 <ADCStart+0x34>)
 800b27a:	f000 fbe9 	bl	800ba50 <HAL_ADC_Start_DMA>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <ADCStart+0x18>
	{
		Error_Handler();
 800b284:	f7ff fb0c 	bl	800a8a0 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800b288:	2202      	movs	r2, #2
 800b28a:	4907      	ldr	r1, [pc, #28]	; (800b2a8 <ADCStart+0x38>)
 800b28c:	4807      	ldr	r0, [pc, #28]	; (800b2ac <ADCStart+0x3c>)
 800b28e:	f000 fbdf 	bl	800ba50 <HAL_ADC_Start_DMA>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <ADCStart+0x2c>
	{
		Error_Handler();
 800b298:	f7ff fb02 	bl	800a8a0 <Error_Handler>
	}

}
 800b29c:	bf00      	nop
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	20000404 	.word	0x20000404
 800b2a4:	200005c0 	.word	0x200005c0
 800b2a8:	20000410 	.word	0x20000410
 800b2ac:	200004a0 	.word	0x200004a0

0800b2b0 <ADCStop>:
void ADCStop()
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800b2b4:	4808      	ldr	r0, [pc, #32]	; (800b2d8 <ADCStop+0x28>)
 800b2b6:	f000 fcbd 	bl	800bc34 <HAL_ADC_Stop_DMA>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <ADCStop+0x14>
	{
		Error_Handler();
 800b2c0:	f7ff faee 	bl	800a8a0 <Error_Handler>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800b2c4:	4805      	ldr	r0, [pc, #20]	; (800b2dc <ADCStop+0x2c>)
 800b2c6:	f000 fcb5 	bl	800bc34 <HAL_ADC_Stop_DMA>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <ADCStop+0x24>
	{
		Error_Handler();
 800b2d0:	f7ff fae6 	bl	800a8a0 <Error_Handler>
	}
}
 800b2d4:	bf00      	nop
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	200005c0 	.word	0x200005c0
 800b2dc:	200004a0 	.word	0x200004a0

0800b2e0 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800b2e4:	213c      	movs	r1, #60	; 0x3c
 800b2e6:	4804      	ldr	r0, [pc, #16]	; (800b2f8 <EncoderStart+0x18>)
 800b2e8:	f002 ff96 	bl	800e218 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800b2ec:	213c      	movs	r1, #60	; 0x3c
 800b2ee:	4803      	ldr	r0, [pc, #12]	; (800b2fc <EncoderStart+0x1c>)
 800b2f0:	f002 ff92 	bl	800e218 <HAL_TIM_Encoder_Start>
}
 800b2f4:	bf00      	nop
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20000528 	.word	0x20000528
 800b2fc:	20000460 	.word	0x20000460

0800b300 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800b304:	213c      	movs	r1, #60	; 0x3c
 800b306:	4804      	ldr	r0, [pc, #16]	; (800b318 <EncoderStop+0x18>)
 800b308:	f002 ffbd 	bl	800e286 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800b30c:	213c      	movs	r1, #60	; 0x3c
 800b30e:	4803      	ldr	r0, [pc, #12]	; (800b31c <EncoderStop+0x1c>)
 800b310:	f002 ffb9 	bl	800e286 <HAL_TIM_Encoder_Stop>
}
 800b314:	bf00      	nop
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20000528 	.word	0x20000528
 800b31c:	20000460 	.word	0x20000460

0800b320 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800b324:	2100      	movs	r1, #0
 800b326:	4804      	ldr	r0, [pc, #16]	; (800b338 <EmitterON+0x18>)
 800b328:	f002 fd52 	bl	800ddd0 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800b32c:	2100      	movs	r1, #0
 800b32e:	4802      	ldr	r0, [pc, #8]	; (800b338 <EmitterON+0x18>)
 800b330:	f003 fe0d 	bl	800ef4e <HAL_TIMEx_OCN_Start_IT>

}
 800b334:	bf00      	nop
 800b336:	bd80      	pop	{r7, pc}
 800b338:	20000420 	.word	0x20000420

0800b33c <EmitterOFF>:
void EmitterOFF()
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800b340:	2100      	movs	r1, #0
 800b342:	4804      	ldr	r0, [pc, #16]	; (800b354 <EmitterOFF+0x18>)
 800b344:	f002 fdc8 	bl	800ded8 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800b348:	2100      	movs	r1, #0
 800b34a:	4802      	ldr	r0, [pc, #8]	; (800b354 <EmitterOFF+0x18>)
 800b34c:	f003 fe54 	bl	800eff8 <HAL_TIMEx_OCN_Stop_IT>

}
 800b350:	bf00      	nop
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20000420 	.word	0x20000420

0800b358 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b07      	cmp	r3, #7
 800b364:	f200 80ac 	bhi.w	800b4c0 <ChangeLED+0x168>
 800b368:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <ChangeLED+0x18>)
 800b36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36e:	bf00      	nop
 800b370:	0800b391 	.word	0x0800b391
 800b374:	0800b3b7 	.word	0x0800b3b7
 800b378:	0800b3dd 	.word	0x0800b3dd
 800b37c:	0800b403 	.word	0x0800b403
 800b380:	0800b429 	.word	0x0800b429
 800b384:	0800b44f 	.word	0x0800b44f
 800b388:	0800b475 	.word	0x0800b475
 800b38c:	0800b49b 	.word	0x0800b49b
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b390:	2200      	movs	r2, #0
 800b392:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b396:	484d      	ldr	r0, [pc, #308]	; (800b4cc <ChangeLED+0x174>)
 800b398:	f001 ff8a 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b39c:	2200      	movs	r2, #0
 800b39e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3a2:	484a      	ldr	r0, [pc, #296]	; (800b4cc <ChangeLED+0x174>)
 800b3a4:	f001 ff84 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3ae:	4848      	ldr	r0, [pc, #288]	; (800b4d0 <ChangeLED+0x178>)
 800b3b0:	f001 ff7e 	bl	800d2b0 <HAL_GPIO_WritePin>
		break;
 800b3b4:	e085      	b.n	800b4c2 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3bc:	4843      	ldr	r0, [pc, #268]	; (800b4cc <ChangeLED+0x174>)
 800b3be:	f001 ff77 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3c8:	4840      	ldr	r0, [pc, #256]	; (800b4cc <ChangeLED+0x174>)
 800b3ca:	f001 ff71 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3d4:	483e      	ldr	r0, [pc, #248]	; (800b4d0 <ChangeLED+0x178>)
 800b3d6:	f001 ff6b 	bl	800d2b0 <HAL_GPIO_WritePin>
		break;
 800b3da:	e072      	b.n	800b4c2 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3e2:	483a      	ldr	r0, [pc, #232]	; (800b4cc <ChangeLED+0x174>)
 800b3e4:	f001 ff64 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3ee:	4837      	ldr	r0, [pc, #220]	; (800b4cc <ChangeLED+0x174>)
 800b3f0:	f001 ff5e 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3fa:	4835      	ldr	r0, [pc, #212]	; (800b4d0 <ChangeLED+0x178>)
 800b3fc:	f001 ff58 	bl	800d2b0 <HAL_GPIO_WritePin>

		break;
 800b400:	e05f      	b.n	800b4c2 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b402:	2201      	movs	r2, #1
 800b404:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b408:	4830      	ldr	r0, [pc, #192]	; (800b4cc <ChangeLED+0x174>)
 800b40a:	f001 ff51 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b40e:	2201      	movs	r2, #1
 800b410:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b414:	482d      	ldr	r0, [pc, #180]	; (800b4cc <ChangeLED+0x174>)
 800b416:	f001 ff4b 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b41a:	2200      	movs	r2, #0
 800b41c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b420:	482b      	ldr	r0, [pc, #172]	; (800b4d0 <ChangeLED+0x178>)
 800b422:	f001 ff45 	bl	800d2b0 <HAL_GPIO_WritePin>
		break;
 800b426:	e04c      	b.n	800b4c2 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b428:	2200      	movs	r2, #0
 800b42a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b42e:	4827      	ldr	r0, [pc, #156]	; (800b4cc <ChangeLED+0x174>)
 800b430:	f001 ff3e 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b434:	2200      	movs	r2, #0
 800b436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b43a:	4824      	ldr	r0, [pc, #144]	; (800b4cc <ChangeLED+0x174>)
 800b43c:	f001 ff38 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b440:	2201      	movs	r2, #1
 800b442:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b446:	4822      	ldr	r0, [pc, #136]	; (800b4d0 <ChangeLED+0x178>)
 800b448:	f001 ff32 	bl	800d2b0 <HAL_GPIO_WritePin>
		break;
 800b44c:	e039      	b.n	800b4c2 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b44e:	2201      	movs	r2, #1
 800b450:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b454:	481d      	ldr	r0, [pc, #116]	; (800b4cc <ChangeLED+0x174>)
 800b456:	f001 ff2b 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b45a:	2200      	movs	r2, #0
 800b45c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b460:	481a      	ldr	r0, [pc, #104]	; (800b4cc <ChangeLED+0x174>)
 800b462:	f001 ff25 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b466:	2201      	movs	r2, #1
 800b468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b46c:	4818      	ldr	r0, [pc, #96]	; (800b4d0 <ChangeLED+0x178>)
 800b46e:	f001 ff1f 	bl	800d2b0 <HAL_GPIO_WritePin>
		break;
 800b472:	e026      	b.n	800b4c2 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b474:	2200      	movs	r2, #0
 800b476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b47a:	4814      	ldr	r0, [pc, #80]	; (800b4cc <ChangeLED+0x174>)
 800b47c:	f001 ff18 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b480:	2201      	movs	r2, #1
 800b482:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b486:	4811      	ldr	r0, [pc, #68]	; (800b4cc <ChangeLED+0x174>)
 800b488:	f001 ff12 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b48c:	2201      	movs	r2, #1
 800b48e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b492:	480f      	ldr	r0, [pc, #60]	; (800b4d0 <ChangeLED+0x178>)
 800b494:	f001 ff0c 	bl	800d2b0 <HAL_GPIO_WritePin>

		break;
 800b498:	e013      	b.n	800b4c2 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b49a:	2201      	movs	r2, #1
 800b49c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4a0:	480a      	ldr	r0, [pc, #40]	; (800b4cc <ChangeLED+0x174>)
 800b4a2:	f001 ff05 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4ac:	4807      	ldr	r0, [pc, #28]	; (800b4cc <ChangeLED+0x174>)
 800b4ae:	f001 feff 	bl	800d2b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4b8:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <ChangeLED+0x178>)
 800b4ba:	f001 fef9 	bl	800d2b0 <HAL_GPIO_WritePin>

		break;
 800b4be:	e000      	b.n	800b4c2 <ChangeLED+0x16a>
	default: break;
 800b4c0:	bf00      	nop

	}
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	40020800 	.word	0x40020800
 800b4d0:	40020400 	.word	0x40020400

0800b4d4 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800b4d8:	210c      	movs	r1, #12
 800b4da:	4809      	ldr	r0, [pc, #36]	; (800b500 <Motor_PWM_Start+0x2c>)
 800b4dc:	f002 fdcc 	bl	800e078 <HAL_TIM_PWM_Start>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800b4e6:	f7ff f9db 	bl	800a8a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800b4ea:	2104      	movs	r1, #4
 800b4ec:	4805      	ldr	r0, [pc, #20]	; (800b504 <Motor_PWM_Start+0x30>)
 800b4ee:	f002 fdc3 	bl	800e078 <HAL_TIM_PWM_Start>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800b4f8:	f7ff f9d2 	bl	800a8a0 <Error_Handler>
  }
#endif
}
 800b4fc:	bf00      	nop
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	200006e8 	.word	0x200006e8
 800b504:	200004e8 	.word	0x200004e8

0800b508 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
void Motor_Switch(int left, int right){
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	dd05      	ble.n	800b524 <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800b518:	2201      	movs	r2, #1
 800b51a:	2104      	movs	r1, #4
 800b51c:	4828      	ldr	r0, [pc, #160]	; (800b5c0 <Motor_Switch+0xb8>)
 800b51e:	f001 fec7 	bl	800d2b0 <HAL_GPIO_WritePin>
 800b522:	e00a      	b.n	800b53a <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	da07      	bge.n	800b53a <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800b52a:	2200      	movs	r2, #0
 800b52c:	2104      	movs	r1, #4
 800b52e:	4824      	ldr	r0, [pc, #144]	; (800b5c0 <Motor_Switch+0xb8>)
 800b530:	f001 febe 	bl	800d2b0 <HAL_GPIO_WritePin>
		left = -left;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	425b      	negs	r3, r3
 800b538:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dd05      	ble.n	800b54c <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800b540:	2200      	movs	r2, #0
 800b542:	2101      	movs	r1, #1
 800b544:	481e      	ldr	r0, [pc, #120]	; (800b5c0 <Motor_Switch+0xb8>)
 800b546:	f001 feb3 	bl	800d2b0 <HAL_GPIO_WritePin>
 800b54a:	e00a      	b.n	800b562 <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	da07      	bge.n	800b562 <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800b552:	2201      	movs	r2, #1
 800b554:	2101      	movs	r1, #1
 800b556:	481a      	ldr	r0, [pc, #104]	; (800b5c0 <Motor_Switch+0xb8>)
 800b558:	f001 feaa 	bl	800d2b0 <HAL_GPIO_WritePin>
	  	right = -right;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	425b      	negs	r3, r3
 800b560:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7fc ff16 	bl	8008394 <__aeabi_i2d>
 800b568:	a313      	add	r3, pc, #76	; (adr r3, 800b5b8 <Motor_Switch+0xb0>)
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	f7fd fa0b 	bl	8008988 <__aeabi_dcmpgt>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <Motor_Switch+0x76>
 800b578:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800b57c:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800b57e:	6838      	ldr	r0, [r7, #0]
 800b580:	f7fc ff08 	bl	8008394 <__aeabi_i2d>
 800b584:	a30c      	add	r3, pc, #48	; (adr r3, 800b5b8 <Motor_Switch+0xb0>)
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	f7fd f9fd 	bl	8008988 <__aeabi_dcmpgt>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <Motor_Switch+0x92>
 800b594:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800b598:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800b59a:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <Motor_Switch+0xbc>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800b5a2:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <Motor_Switch+0xc0>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b5aa:	bf00      	nop
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	f3af 8000 	nop.w
 800b5b8:	00000000 	.word	0x00000000
 800b5bc:	40a3b000 	.word	0x40a3b000
 800b5c0:	40020000 	.word	0x40020000
 800b5c4:	200006e8 	.word	0x200006e8
 800b5c8:	200004e8 	.word	0x200004e8

0800b5cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b5cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b5d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b5d2:	e003      	b.n	800b5dc <LoopCopyDataInit>

0800b5d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b5d4:	4b0c      	ldr	r3, [pc, #48]	; (800b608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b5d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b5d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b5da:	3104      	adds	r1, #4

0800b5dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b5dc:	480b      	ldr	r0, [pc, #44]	; (800b60c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b5de:	4b0c      	ldr	r3, [pc, #48]	; (800b610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b5e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b5e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b5e4:	d3f6      	bcc.n	800b5d4 <CopyDataInit>
  ldr  r2, =_sbss
 800b5e6:	4a0b      	ldr	r2, [pc, #44]	; (800b614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b5e8:	e002      	b.n	800b5f0 <LoopFillZerobss>

0800b5ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b5ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b5ec:	f842 3b04 	str.w	r3, [r2], #4

0800b5f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b5f0:	4b09      	ldr	r3, [pc, #36]	; (800b618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b5f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b5f4:	d3f9      	bcc.n	800b5ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b5f6:	f7ff fe25 	bl	800b244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b5fa:	f004 fb77 	bl	800fcec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b5fe:	f7fe fbd3 	bl	8009da8 <main>
  bx  lr    
 800b602:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b604:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b608:	08012798 	.word	0x08012798
  ldr  r0, =_sdata
 800b60c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b610:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800b614:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800b618:	200007b4 	.word	0x200007b4

0800b61c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b61c:	e7fe      	b.n	800b61c <CAN1_RX0_IRQHandler>
	...

0800b620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b624:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <HAL_Init+0x40>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a0d      	ldr	r2, [pc, #52]	; (800b660 <HAL_Init+0x40>)
 800b62a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b62e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b630:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <HAL_Init+0x40>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a0a      	ldr	r2, [pc, #40]	; (800b660 <HAL_Init+0x40>)
 800b636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b63a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b63c:	4b08      	ldr	r3, [pc, #32]	; (800b660 <HAL_Init+0x40>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a07      	ldr	r2, [pc, #28]	; (800b660 <HAL_Init+0x40>)
 800b642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b648:	2003      	movs	r0, #3
 800b64a:	f000 fedf 	bl	800c40c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b64e:	2000      	movs	r0, #0
 800b650:	f000 f808 	bl	800b664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b654:	f7ff f928 	bl	800a8a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	40023c00 	.word	0x40023c00

0800b664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b66c:	4b12      	ldr	r3, [pc, #72]	; (800b6b8 <HAL_InitTick+0x54>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <HAL_InitTick+0x58>)
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	4619      	mov	r1, r3
 800b676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b67a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b67e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b682:	4618      	mov	r0, r3
 800b684:	f000 fef7 	bl	800c476 <HAL_SYSTICK_Config>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e00e      	b.n	800b6b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b0f      	cmp	r3, #15
 800b696:	d80a      	bhi.n	800b6ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b698:	2200      	movs	r2, #0
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a0:	f000 febf 	bl	800c422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b6a4:	4a06      	ldr	r2, [pc, #24]	; (800b6c0 <HAL_InitTick+0x5c>)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e000      	b.n	800b6b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	20000000 	.word	0x20000000
 800b6bc:	20000008 	.word	0x20000008
 800b6c0:	20000004 	.word	0x20000004

0800b6c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b6c8:	4b06      	ldr	r3, [pc, #24]	; (800b6e4 <HAL_IncTick+0x20>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <HAL_IncTick+0x24>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	4a04      	ldr	r2, [pc, #16]	; (800b6e8 <HAL_IncTick+0x24>)
 800b6d6:	6013      	str	r3, [r2, #0]
}
 800b6d8:	bf00      	nop
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	20000008 	.word	0x20000008
 800b6e8:	2000078c 	.word	0x2000078c

0800b6ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
  return uwTick;
 800b6f0:	4b03      	ldr	r3, [pc, #12]	; (800b700 <HAL_GetTick+0x14>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	2000078c 	.word	0x2000078c

0800b704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b70c:	f7ff ffee 	bl	800b6ec <HAL_GetTick>
 800b710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71c:	d005      	beq.n	800b72a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b71e:	4b09      	ldr	r3, [pc, #36]	; (800b744 <HAL_Delay+0x40>)
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	4413      	add	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b72a:	bf00      	nop
 800b72c:	f7ff ffde 	bl	800b6ec <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d8f7      	bhi.n	800b72c <HAL_Delay+0x28>
  {
  }
}
 800b73c:	bf00      	nop
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20000008 	.word	0x20000008

0800b748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d101      	bne.n	800b75e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e033      	b.n	800b7c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff f8cc 	bl	800a904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77e:	f003 0310 	and.w	r3, r3, #16
 800b782:	2b00      	cmp	r3, #0
 800b784:	d118      	bne.n	800b7b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b78e:	f023 0302 	bic.w	r3, r3, #2
 800b792:	f043 0202 	orr.w	r2, r3, #2
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fbde 	bl	800bf5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7aa:	f023 0303 	bic.w	r3, r3, #3
 800b7ae:	f043 0201 	orr.w	r2, r3, #1
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	641a      	str	r2, [r3, #64]	; 0x40
 800b7b6:	e001      	b.n	800b7bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60fb      	str	r3, [r7, #12]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0302 	and.w	r3, r3, #2
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	bf0c      	ite	eq
 800b7ec:	2301      	moveq	r3, #1
 800b7ee:	2300      	movne	r3, #0
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	f003 0320 	and.w	r3, r3, #32
 800b7fe:	2b20      	cmp	r3, #32
 800b800:	bf0c      	ite	eq
 800b802:	2301      	moveq	r3, #1
 800b804:	2300      	movne	r3, #0
 800b806:	b2db      	uxtb	r3, r3
 800b808:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d049      	beq.n	800b8a4 <HAL_ADC_IRQHandler+0xd6>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d046      	beq.n	800b8a4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81a:	f003 0310 	and.w	r3, r3, #16
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d105      	bne.n	800b82e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b826:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d12b      	bne.n	800b894 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b840:	2b00      	cmp	r3, #0
 800b842:	d127      	bne.n	800b894 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d006      	beq.n	800b860 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d119      	bne.n	800b894 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f022 0220 	bic.w	r2, r2, #32
 800b86e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d105      	bne.n	800b894 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88c:	f043 0201 	orr.w	r2, r3, #1
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fa17 	bl	800bcc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f06f 0212 	mvn.w	r2, #18
 800b8a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0304 	and.w	r3, r3, #4
 800b8ae:	2b04      	cmp	r3, #4
 800b8b0:	bf0c      	ite	eq
 800b8b2:	2301      	moveq	r3, #1
 800b8b4:	2300      	movne	r3, #0
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c4:	2b80      	cmp	r3, #128	; 0x80
 800b8c6:	bf0c      	ite	eq
 800b8c8:	2301      	moveq	r3, #1
 800b8ca:	2300      	movne	r3, #0
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d057      	beq.n	800b986 <HAL_ADC_IRQHandler+0x1b8>
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d054      	beq.n	800b986 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e0:	f003 0310 	and.w	r3, r3, #16
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d105      	bne.n	800b8f4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d139      	bne.n	800b976 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b908:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d006      	beq.n	800b91e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d12b      	bne.n	800b976 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d124      	bne.n	800b976 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b936:	2b00      	cmp	r3, #0
 800b938:	d11d      	bne.n	800b976 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d119      	bne.n	800b976 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b950:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b966:	2b00      	cmp	r3, #0
 800b968:	d105      	bne.n	800b976 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96e:	f043 0201 	orr.w	r2, r3, #1
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fc6e 	bl	800c258 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f06f 020c 	mvn.w	r2, #12
 800b984:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 0301 	and.w	r3, r3, #1
 800b990:	2b01      	cmp	r3, #1
 800b992:	bf0c      	ite	eq
 800b994:	2301      	moveq	r3, #1
 800b996:	2300      	movne	r3, #0
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a6:	2b40      	cmp	r3, #64	; 0x40
 800b9a8:	bf0c      	ite	eq
 800b9aa:	2301      	moveq	r3, #1
 800b9ac:	2300      	movne	r3, #0
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d017      	beq.n	800b9e8 <HAL_ADC_IRQHandler+0x21a>
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d014      	beq.n	800b9e8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0301 	and.w	r3, r3, #1
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d10d      	bne.n	800b9e8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f989 	bl	800bcf0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f06f 0201 	mvn.w	r2, #1
 800b9e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0320 	and.w	r3, r3, #32
 800b9f2:	2b20      	cmp	r3, #32
 800b9f4:	bf0c      	ite	eq
 800b9f6:	2301      	moveq	r3, #1
 800b9f8:	2300      	movne	r3, #0
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba0c:	bf0c      	ite	eq
 800ba0e:	2301      	moveq	r3, #1
 800ba10:	2300      	movne	r3, #0
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d015      	beq.n	800ba48 <HAL_ADC_IRQHandler+0x27a>
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d012      	beq.n	800ba48 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba26:	f043 0202 	orr.w	r2, r3, #2
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f06f 0220 	mvn.w	r2, #32
 800ba36:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f963 	bl	800bd04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f06f 0220 	mvn.w	r2, #32
 800ba46:	601a      	str	r2, [r3, #0]
  }
}
 800ba48:	bf00      	nop
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d101      	bne.n	800ba6e <HAL_ADC_Start_DMA+0x1e>
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e0cc      	b.n	800bc08 <HAL_ADC_Start_DMA+0x1b8>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d018      	beq.n	800bab6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689a      	ldr	r2, [r3, #8]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f042 0201 	orr.w	r2, r2, #1
 800ba92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ba94:	4b5e      	ldr	r3, [pc, #376]	; (800bc10 <HAL_ADC_Start_DMA+0x1c0>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a5e      	ldr	r2, [pc, #376]	; (800bc14 <HAL_ADC_Start_DMA+0x1c4>)
 800ba9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9e:	0c9a      	lsrs	r2, r3, #18
 800baa0:	4613      	mov	r3, r2
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	4413      	add	r3, r2
 800baa6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800baa8:	e002      	b.n	800bab0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	3b01      	subs	r3, #1
 800baae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1f9      	bne.n	800baaa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	f040 80a0 	bne.w	800bc06 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bace:	f023 0301 	bic.w	r3, r3, #1
 800bad2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800baf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb04:	d106      	bne.n	800bb14 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb0a:	f023 0206 	bic.w	r2, r3, #6
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	645a      	str	r2, [r3, #68]	; 0x44
 800bb12:	e002      	b.n	800bb1a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bb22:	4b3d      	ldr	r3, [pc, #244]	; (800bc18 <HAL_ADC_Start_DMA+0x1c8>)
 800bb24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2a:	4a3c      	ldr	r2, [pc, #240]	; (800bc1c <HAL_ADC_Start_DMA+0x1cc>)
 800bb2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb32:	4a3b      	ldr	r2, [pc, #236]	; (800bc20 <HAL_ADC_Start_DMA+0x1d0>)
 800bb34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	4a3a      	ldr	r2, [pc, #232]	; (800bc24 <HAL_ADC_Start_DMA+0x1d4>)
 800bb3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800bb46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bb56:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	689a      	ldr	r2, [r3, #8]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb66:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	334c      	adds	r3, #76	; 0x4c
 800bb72:	4619      	mov	r1, r3
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f000 fd38 	bl	800c5ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	f003 031f 	and.w	r3, r3, #31
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d12a      	bne.n	800bbde <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a26      	ldr	r2, [pc, #152]	; (800bc28 <HAL_ADC_Start_DMA+0x1d8>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d015      	beq.n	800bbbe <HAL_ADC_Start_DMA+0x16e>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a25      	ldr	r2, [pc, #148]	; (800bc2c <HAL_ADC_Start_DMA+0x1dc>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d105      	bne.n	800bba8 <HAL_ADC_Start_DMA+0x158>
 800bb9c:	4b1e      	ldr	r3, [pc, #120]	; (800bc18 <HAL_ADC_Start_DMA+0x1c8>)
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	f003 031f 	and.w	r3, r3, #31
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00a      	beq.n	800bbbe <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a20      	ldr	r2, [pc, #128]	; (800bc30 <HAL_ADC_Start_DMA+0x1e0>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d129      	bne.n	800bc06 <HAL_ADC_Start_DMA+0x1b6>
 800bbb2:	4b19      	ldr	r3, [pc, #100]	; (800bc18 <HAL_ADC_Start_DMA+0x1c8>)
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	f003 031f 	and.w	r3, r3, #31
 800bbba:	2b0f      	cmp	r3, #15
 800bbbc:	d823      	bhi.n	800bc06 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d11c      	bne.n	800bc06 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689a      	ldr	r2, [r3, #8]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bbda:	609a      	str	r2, [r3, #8]
 800bbdc:	e013      	b.n	800bc06 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a11      	ldr	r2, [pc, #68]	; (800bc28 <HAL_ADC_Start_DMA+0x1d8>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d10e      	bne.n	800bc06 <HAL_ADC_Start_DMA+0x1b6>
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d107      	bne.n	800bc06 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bc04:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000000 	.word	0x20000000
 800bc14:	431bde83 	.word	0x431bde83
 800bc18:	40012300 	.word	0x40012300
 800bc1c:	0800c155 	.word	0x0800c155
 800bc20:	0800c20f 	.word	0x0800c20f
 800bc24:	0800c22b 	.word	0x0800c22b
 800bc28:	40012000 	.word	0x40012000
 800bc2c:	40012100 	.word	0x40012100
 800bc30:	40012200 	.word	0x40012200

0800bc34 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d101      	bne.n	800bc4e <HAL_ADC_Stop_DMA+0x1a>
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	e038      	b.n	800bcc0 <HAL_ADC_Stop_DMA+0x8c>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689a      	ldr	r2, [r3, #8]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f022 0201 	bic.w	r2, r2, #1
 800bc64:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d120      	bne.n	800bcb6 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	689a      	ldr	r2, [r3, #8]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc82:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f000 fd07 	bl	800c69c <HAL_DMA_Abort>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800bca0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bcaa:	f023 0301 	bic.w	r3, r3, #1
 800bcae:	f043 0201 	orr.w	r2, r3, #1
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bd22:	2300      	movs	r3, #0
 800bd24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d101      	bne.n	800bd34 <HAL_ADC_ConfigChannel+0x1c>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e105      	b.n	800bf40 <HAL_ADC_ConfigChannel+0x228>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b09      	cmp	r3, #9
 800bd42:	d925      	bls.n	800bd90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68d9      	ldr	r1, [r3, #12]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	461a      	mov	r2, r3
 800bd52:	4613      	mov	r3, r2
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	4413      	add	r3, r2
 800bd58:	3b1e      	subs	r3, #30
 800bd5a:	2207      	movs	r2, #7
 800bd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd60:	43da      	mvns	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	400a      	ands	r2, r1
 800bd68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68d9      	ldr	r1, [r3, #12]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	689a      	ldr	r2, [r3, #8]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	005b      	lsls	r3, r3, #1
 800bd80:	4403      	add	r3, r0
 800bd82:	3b1e      	subs	r3, #30
 800bd84:	409a      	lsls	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	430a      	orrs	r2, r1
 800bd8c:	60da      	str	r2, [r3, #12]
 800bd8e:	e022      	b.n	800bdd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6919      	ldr	r1, [r3, #16]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	4613      	mov	r3, r2
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	4413      	add	r3, r2
 800bda4:	2207      	movs	r2, #7
 800bda6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdaa:	43da      	mvns	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	400a      	ands	r2, r1
 800bdb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6919      	ldr	r1, [r3, #16]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	689a      	ldr	r2, [r3, #8]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	005b      	lsls	r3, r3, #1
 800bdca:	4403      	add	r3, r0
 800bdcc:	409a      	lsls	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	430a      	orrs	r2, r1
 800bdd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	2b06      	cmp	r3, #6
 800bddc:	d824      	bhi.n	800be28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	3b05      	subs	r3, #5
 800bdf0:	221f      	movs	r2, #31
 800bdf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf6:	43da      	mvns	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	400a      	ands	r2, r1
 800bdfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	4618      	mov	r0, r3
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	3b05      	subs	r3, #5
 800be1a:	fa00 f203 	lsl.w	r2, r0, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	635a      	str	r2, [r3, #52]	; 0x34
 800be26:	e04c      	b.n	800bec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	2b0c      	cmp	r3, #12
 800be2e:	d824      	bhi.n	800be7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	685a      	ldr	r2, [r3, #4]
 800be3a:	4613      	mov	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	3b23      	subs	r3, #35	; 0x23
 800be42:	221f      	movs	r2, #31
 800be44:	fa02 f303 	lsl.w	r3, r2, r3
 800be48:	43da      	mvns	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	400a      	ands	r2, r1
 800be50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	4618      	mov	r0, r3
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	3b23      	subs	r3, #35	; 0x23
 800be6c:	fa00 f203 	lsl.w	r2, r0, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	430a      	orrs	r2, r1
 800be76:	631a      	str	r2, [r3, #48]	; 0x30
 800be78:	e023      	b.n	800bec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	4613      	mov	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	3b41      	subs	r3, #65	; 0x41
 800be8c:	221f      	movs	r2, #31
 800be8e:	fa02 f303 	lsl.w	r3, r2, r3
 800be92:	43da      	mvns	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	400a      	ands	r2, r1
 800be9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	4618      	mov	r0, r3
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	685a      	ldr	r2, [r3, #4]
 800beae:	4613      	mov	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	3b41      	subs	r3, #65	; 0x41
 800beb6:	fa00 f203 	lsl.w	r2, r0, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	430a      	orrs	r2, r1
 800bec0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bec2:	4b22      	ldr	r3, [pc, #136]	; (800bf4c <HAL_ADC_ConfigChannel+0x234>)
 800bec4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a21      	ldr	r2, [pc, #132]	; (800bf50 <HAL_ADC_ConfigChannel+0x238>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d109      	bne.n	800bee4 <HAL_ADC_ConfigChannel+0x1cc>
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b12      	cmp	r3, #18
 800bed6:	d105      	bne.n	800bee4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a19      	ldr	r2, [pc, #100]	; (800bf50 <HAL_ADC_ConfigChannel+0x238>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d123      	bne.n	800bf36 <HAL_ADC_ConfigChannel+0x21e>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b10      	cmp	r3, #16
 800bef4:	d003      	beq.n	800befe <HAL_ADC_ConfigChannel+0x1e6>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b11      	cmp	r3, #17
 800befc:	d11b      	bne.n	800bf36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b10      	cmp	r3, #16
 800bf10:	d111      	bne.n	800bf36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800bf12:	4b10      	ldr	r3, [pc, #64]	; (800bf54 <HAL_ADC_ConfigChannel+0x23c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a10      	ldr	r2, [pc, #64]	; (800bf58 <HAL_ADC_ConfigChannel+0x240>)
 800bf18:	fba2 2303 	umull	r2, r3, r2, r3
 800bf1c:	0c9a      	lsrs	r2, r3, #18
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bf28:	e002      	b.n	800bf30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1f9      	bne.n	800bf2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	40012300 	.word	0x40012300
 800bf50:	40012000 	.word	0x40012000
 800bf54:	20000000 	.word	0x20000000
 800bf58:	431bde83 	.word	0x431bde83

0800bf5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bf64:	4b79      	ldr	r3, [pc, #484]	; (800c14c <ADC_Init+0x1f0>)
 800bf66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6859      	ldr	r1, [r3, #4]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	021a      	lsls	r2, r3, #8
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	430a      	orrs	r2, r1
 800bfa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	685a      	ldr	r2, [r3, #4]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bfb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6859      	ldr	r1, [r3, #4]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689a      	ldr	r2, [r3, #8]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6899      	ldr	r1, [r3, #8]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68da      	ldr	r2, [r3, #12]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfee:	4a58      	ldr	r2, [pc, #352]	; (800c150 <ADC_Init+0x1f4>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d022      	beq.n	800c03a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689a      	ldr	r2, [r3, #8]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6899      	ldr	r1, [r3, #8]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	430a      	orrs	r2, r1
 800c014:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	689a      	ldr	r2, [r3, #8]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6899      	ldr	r1, [r3, #8]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	430a      	orrs	r2, r1
 800c036:	609a      	str	r2, [r3, #8]
 800c038:	e00f      	b.n	800c05a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	689a      	ldr	r2, [r3, #8]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	689a      	ldr	r2, [r3, #8]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c058:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	689a      	ldr	r2, [r3, #8]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f022 0202 	bic.w	r2, r2, #2
 800c068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6899      	ldr	r1, [r3, #8]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7e1b      	ldrb	r3, [r3, #24]
 800c074:	005a      	lsls	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	430a      	orrs	r2, r1
 800c07c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d01b      	beq.n	800c0c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685a      	ldr	r2, [r3, #4]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c096:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c0a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6859      	ldr	r1, [r3, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	035a      	lsls	r2, r3, #13
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	605a      	str	r2, [r3, #4]
 800c0be:	e007      	b.n	800c0d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c0de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	051a      	lsls	r2, r3, #20
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	689a      	ldr	r2, [r3, #8]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6899      	ldr	r1, [r3, #8]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c112:	025a      	lsls	r2, r3, #9
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	689a      	ldr	r2, [r3, #8]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c12a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6899      	ldr	r1, [r3, #8]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	029a      	lsls	r2, r3, #10
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	430a      	orrs	r2, r1
 800c13e:	609a      	str	r2, [r3, #8]
}
 800c140:	bf00      	nop
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	40012300 	.word	0x40012300
 800c150:	0f000001 	.word	0x0f000001

0800c154 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c160:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c166:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d13c      	bne.n	800c1e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c172:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d12b      	bne.n	800c1e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d127      	bne.n	800c1e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c196:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d006      	beq.n	800c1ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d119      	bne.n	800c1e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f022 0220 	bic.w	r2, r2, #32
 800c1ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d105      	bne.n	800c1e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d8:	f043 0201 	orr.w	r2, r3, #1
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f7ff fd71 	bl	800bcc8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c1e6:	e00e      	b.n	800c206 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ec:	f003 0310 	and.w	r3, r3, #16
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d003      	beq.n	800c1fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f7ff fd85 	bl	800bd04 <HAL_ADC_ErrorCallback>
}
 800c1fa:	e004      	b.n	800c206 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	4798      	blx	r3
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff fd5d 	bl	800bcdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c222:	bf00      	nop
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b084      	sub	sp, #16
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c236:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2240      	movs	r2, #64	; 0x40
 800c23c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c242:	f043 0204 	orr.w	r2, r3, #4
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f7ff fd5a 	bl	800bd04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c250:	bf00      	nop
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c27c:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <__NVIC_SetPriorityGrouping+0x44>)
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c288:	4013      	ands	r3, r2
 800c28a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c29c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c29e:	4a04      	ldr	r2, [pc, #16]	; (800c2b0 <__NVIC_SetPriorityGrouping+0x44>)
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	60d3      	str	r3, [r2, #12]
}
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr
 800c2b0:	e000ed00 	.word	0xe000ed00

0800c2b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c2b8:	4b04      	ldr	r3, [pc, #16]	; (800c2cc <__NVIC_GetPriorityGrouping+0x18>)
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	0a1b      	lsrs	r3, r3, #8
 800c2be:	f003 0307 	and.w	r3, r3, #7
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	e000ed00 	.word	0xe000ed00

0800c2d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c2da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	db0b      	blt.n	800c2fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c2e2:	79fb      	ldrb	r3, [r7, #7]
 800c2e4:	f003 021f 	and.w	r2, r3, #31
 800c2e8:	4907      	ldr	r1, [pc, #28]	; (800c308 <__NVIC_EnableIRQ+0x38>)
 800c2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2ee:	095b      	lsrs	r3, r3, #5
 800c2f0:	2001      	movs	r0, #1
 800c2f2:	fa00 f202 	lsl.w	r2, r0, r2
 800c2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c2fa:	bf00      	nop
 800c2fc:	370c      	adds	r7, #12
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	e000e100 	.word	0xe000e100

0800c30c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	4603      	mov	r3, r0
 800c314:	6039      	str	r1, [r7, #0]
 800c316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	db0a      	blt.n	800c336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	b2da      	uxtb	r2, r3
 800c324:	490c      	ldr	r1, [pc, #48]	; (800c358 <__NVIC_SetPriority+0x4c>)
 800c326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c32a:	0112      	lsls	r2, r2, #4
 800c32c:	b2d2      	uxtb	r2, r2
 800c32e:	440b      	add	r3, r1
 800c330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c334:	e00a      	b.n	800c34c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	4908      	ldr	r1, [pc, #32]	; (800c35c <__NVIC_SetPriority+0x50>)
 800c33c:	79fb      	ldrb	r3, [r7, #7]
 800c33e:	f003 030f 	and.w	r3, r3, #15
 800c342:	3b04      	subs	r3, #4
 800c344:	0112      	lsls	r2, r2, #4
 800c346:	b2d2      	uxtb	r2, r2
 800c348:	440b      	add	r3, r1
 800c34a:	761a      	strb	r2, [r3, #24]
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	e000e100 	.word	0xe000e100
 800c35c:	e000ed00 	.word	0xe000ed00

0800c360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c360:	b480      	push	{r7}
 800c362:	b089      	sub	sp, #36	; 0x24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	f1c3 0307 	rsb	r3, r3, #7
 800c37a:	2b04      	cmp	r3, #4
 800c37c:	bf28      	it	cs
 800c37e:	2304      	movcs	r3, #4
 800c380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	3304      	adds	r3, #4
 800c386:	2b06      	cmp	r3, #6
 800c388:	d902      	bls.n	800c390 <NVIC_EncodePriority+0x30>
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	3b03      	subs	r3, #3
 800c38e:	e000      	b.n	800c392 <NVIC_EncodePriority+0x32>
 800c390:	2300      	movs	r3, #0
 800c392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c394:	f04f 32ff 	mov.w	r2, #4294967295
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	fa02 f303 	lsl.w	r3, r2, r3
 800c39e:	43da      	mvns	r2, r3
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	401a      	ands	r2, r3
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c3a8:	f04f 31ff 	mov.w	r1, #4294967295
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c3b2:	43d9      	mvns	r1, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c3b8:	4313      	orrs	r3, r2
         );
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3724      	adds	r7, #36	; 0x24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
	...

0800c3c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3d8:	d301      	bcc.n	800c3de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e00f      	b.n	800c3fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c3de:	4a0a      	ldr	r2, [pc, #40]	; (800c408 <SysTick_Config+0x40>)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c3e6:	210f      	movs	r1, #15
 800c3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ec:	f7ff ff8e 	bl	800c30c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c3f0:	4b05      	ldr	r3, [pc, #20]	; (800c408 <SysTick_Config+0x40>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c3f6:	4b04      	ldr	r3, [pc, #16]	; (800c408 <SysTick_Config+0x40>)
 800c3f8:	2207      	movs	r2, #7
 800c3fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	e000e010 	.word	0xe000e010

0800c40c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff ff29 	bl	800c26c <__NVIC_SetPriorityGrouping>
}
 800c41a:	bf00      	nop
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c422:	b580      	push	{r7, lr}
 800c424:	b086      	sub	sp, #24
 800c426:	af00      	add	r7, sp, #0
 800c428:	4603      	mov	r3, r0
 800c42a:	60b9      	str	r1, [r7, #8]
 800c42c:	607a      	str	r2, [r7, #4]
 800c42e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c434:	f7ff ff3e 	bl	800c2b4 <__NVIC_GetPriorityGrouping>
 800c438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	68b9      	ldr	r1, [r7, #8]
 800c43e:	6978      	ldr	r0, [r7, #20]
 800c440:	f7ff ff8e 	bl	800c360 <NVIC_EncodePriority>
 800c444:	4602      	mov	r2, r0
 800c446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c44a:	4611      	mov	r1, r2
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7ff ff5d 	bl	800c30c <__NVIC_SetPriority>
}
 800c452:	bf00      	nop
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b082      	sub	sp, #8
 800c45e:	af00      	add	r7, sp, #0
 800c460:	4603      	mov	r3, r0
 800c462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff ff31 	bl	800c2d0 <__NVIC_EnableIRQ>
}
 800c46e:	bf00      	nop
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff ffa2 	bl	800c3c8 <SysTick_Config>
 800c484:	4603      	mov	r3, r0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
	...

0800c490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c49c:	f7ff f926 	bl	800b6ec <HAL_GetTick>
 800c4a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e099      	b.n	800c5e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0201 	bic.w	r2, r2, #1
 800c4ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c4cc:	e00f      	b.n	800c4ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c4ce:	f7ff f90d 	bl	800b6ec <HAL_GetTick>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	2b05      	cmp	r3, #5
 800c4da:	d908      	bls.n	800c4ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2220      	movs	r2, #32
 800c4e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	e078      	b.n	800c5e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e8      	bne.n	800c4ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	4b38      	ldr	r3, [pc, #224]	; (800c5e8 <HAL_DMA_Init+0x158>)
 800c508:	4013      	ands	r3, r2
 800c50a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c51a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a1b      	ldr	r3, [r3, #32]
 800c538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c544:	2b04      	cmp	r3, #4
 800c546:	d107      	bne.n	800c558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c550:	4313      	orrs	r3, r2
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	4313      	orrs	r3, r2
 800c556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	f023 0307 	bic.w	r3, r3, #7
 800c56e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	4313      	orrs	r3, r2
 800c578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57e:	2b04      	cmp	r3, #4
 800c580:	d117      	bne.n	800c5b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	4313      	orrs	r3, r2
 800c58a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00e      	beq.n	800c5b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fadf 	bl	800cb58 <DMA_CheckFifoParam>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2240      	movs	r2, #64	; 0x40
 800c5a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e016      	b.n	800c5e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fa96 	bl	800caec <DMA_CalcBaseAndBitshift>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5c8:	223f      	movs	r2, #63	; 0x3f
 800c5ca:	409a      	lsls	r2, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3718      	adds	r7, #24
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	f010803f 	.word	0xf010803f

0800c5ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
 800c5f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c602:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d101      	bne.n	800c612 <HAL_DMA_Start_IT+0x26>
 800c60e:	2302      	movs	r3, #2
 800c610:	e040      	b.n	800c694 <HAL_DMA_Start_IT+0xa8>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b01      	cmp	r3, #1
 800c624:	d12f      	bne.n	800c686 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2202      	movs	r2, #2
 800c62a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	68b9      	ldr	r1, [r7, #8]
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f000 fa28 	bl	800ca90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c644:	223f      	movs	r2, #63	; 0x3f
 800c646:	409a      	lsls	r2, r3
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f042 0216 	orr.w	r2, r2, #22
 800c65a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c660:	2b00      	cmp	r3, #0
 800c662:	d007      	beq.n	800c674 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f042 0208 	orr.w	r2, r2, #8
 800c672:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f042 0201 	orr.w	r2, r2, #1
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	e005      	b.n	800c692 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c68e:	2302      	movs	r3, #2
 800c690:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c692:	7dfb      	ldrb	r3, [r7, #23]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3718      	adds	r7, #24
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c6aa:	f7ff f81f 	bl	800b6ec <HAL_GetTick>
 800c6ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d008      	beq.n	800c6ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2280      	movs	r2, #128	; 0x80
 800c6c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e052      	b.n	800c774 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f022 0216 	bic.w	r2, r2, #22
 800c6dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	695a      	ldr	r2, [r3, #20]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d103      	bne.n	800c6fe <HAL_DMA_Abort+0x62>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d007      	beq.n	800c70e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f022 0208 	bic.w	r2, r2, #8
 800c70c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f022 0201 	bic.w	r2, r2, #1
 800c71c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c71e:	e013      	b.n	800c748 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c720:	f7fe ffe4 	bl	800b6ec <HAL_GetTick>
 800c724:	4602      	mov	r2, r0
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	2b05      	cmp	r3, #5
 800c72c:	d90c      	bls.n	800c748 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2220      	movs	r2, #32
 800c732:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2203      	movs	r2, #3
 800c740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e015      	b.n	800c774 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 0301 	and.w	r3, r3, #1
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1e4      	bne.n	800c720 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c75a:	223f      	movs	r2, #63	; 0x3f
 800c75c:	409a      	lsls	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b086      	sub	sp, #24
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c784:	2300      	movs	r3, #0
 800c786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c788:	4b92      	ldr	r3, [pc, #584]	; (800c9d4 <HAL_DMA_IRQHandler+0x258>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a92      	ldr	r2, [pc, #584]	; (800c9d8 <HAL_DMA_IRQHandler+0x25c>)
 800c78e:	fba2 2303 	umull	r2, r3, r2, r3
 800c792:	0a9b      	lsrs	r3, r3, #10
 800c794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c79a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7a6:	2208      	movs	r2, #8
 800c7a8:	409a      	lsls	r2, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d01a      	beq.n	800c7e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d013      	beq.n	800c7e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f022 0204 	bic.w	r2, r2, #4
 800c7ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7d4:	2208      	movs	r2, #8
 800c7d6:	409a      	lsls	r2, r3
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e0:	f043 0201 	orr.w	r2, r3, #1
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	409a      	lsls	r2, r3
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d012      	beq.n	800c81e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	695b      	ldr	r3, [r3, #20]
 800c7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00b      	beq.n	800c81e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c80a:	2201      	movs	r2, #1
 800c80c:	409a      	lsls	r2, r3
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c816:	f043 0202 	orr.w	r2, r3, #2
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c822:	2204      	movs	r2, #4
 800c824:	409a      	lsls	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	4013      	ands	r3, r2
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d012      	beq.n	800c854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 0302 	and.w	r3, r3, #2
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00b      	beq.n	800c854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c840:	2204      	movs	r2, #4
 800c842:	409a      	lsls	r2, r3
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84c:	f043 0204 	orr.w	r2, r3, #4
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c858:	2210      	movs	r2, #16
 800c85a:	409a      	lsls	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	4013      	ands	r3, r2
 800c860:	2b00      	cmp	r3, #0
 800c862:	d043      	beq.n	800c8ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 0308 	and.w	r3, r3, #8
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d03c      	beq.n	800c8ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c876:	2210      	movs	r2, #16
 800c878:	409a      	lsls	r2, r3
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d018      	beq.n	800c8be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c896:	2b00      	cmp	r3, #0
 800c898:	d108      	bne.n	800c8ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d024      	beq.n	800c8ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	4798      	blx	r3
 800c8aa:	e01f      	b.n	800c8ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d01b      	beq.n	800c8ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	4798      	blx	r3
 800c8bc:	e016      	b.n	800c8ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d107      	bne.n	800c8dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 0208 	bic.w	r2, r2, #8
 800c8da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d003      	beq.n	800c8ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8f0:	2220      	movs	r2, #32
 800c8f2:	409a      	lsls	r2, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 808e 	beq.w	800ca1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0310 	and.w	r3, r3, #16
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f000 8086 	beq.w	800ca1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c912:	2220      	movs	r2, #32
 800c914:	409a      	lsls	r2, r3
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b05      	cmp	r3, #5
 800c924:	d136      	bne.n	800c994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f022 0216 	bic.w	r2, r2, #22
 800c934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	695a      	ldr	r2, [r3, #20]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d103      	bne.n	800c956 <HAL_DMA_IRQHandler+0x1da>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c952:	2b00      	cmp	r3, #0
 800c954:	d007      	beq.n	800c966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f022 0208 	bic.w	r2, r2, #8
 800c964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c96a:	223f      	movs	r2, #63	; 0x3f
 800c96c:	409a      	lsls	r2, r3
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c986:	2b00      	cmp	r3, #0
 800c988:	d07d      	beq.n	800ca86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	4798      	blx	r3
        }
        return;
 800c992:	e078      	b.n	800ca86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d01c      	beq.n	800c9dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d108      	bne.n	800c9c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d030      	beq.n	800ca1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	4798      	blx	r3
 800c9c0:	e02b      	b.n	800ca1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d027      	beq.n	800ca1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	4798      	blx	r3
 800c9d2:	e022      	b.n	800ca1a <HAL_DMA_IRQHandler+0x29e>
 800c9d4:	20000000 	.word	0x20000000
 800c9d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10f      	bne.n	800ca0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f022 0210 	bic.w	r2, r2, #16
 800c9f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d003      	beq.n	800ca1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d032      	beq.n	800ca88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca26:	f003 0301 	and.w	r3, r3, #1
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d022      	beq.n	800ca74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2205      	movs	r2, #5
 800ca32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f022 0201 	bic.w	r2, r2, #1
 800ca44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	60bb      	str	r3, [r7, #8]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d307      	bcc.n	800ca62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 0301 	and.w	r3, r3, #1
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1f2      	bne.n	800ca46 <HAL_DMA_IRQHandler+0x2ca>
 800ca60:	e000      	b.n	800ca64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ca62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d005      	beq.n	800ca88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	4798      	blx	r3
 800ca84:	e000      	b.n	800ca88 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ca86:	bf00      	nop
    }
  }
}
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop

0800ca90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800caac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	2b40      	cmp	r3, #64	; 0x40
 800cabc:	d108      	bne.n	800cad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800cace:	e007      	b.n	800cae0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68ba      	ldr	r2, [r7, #8]
 800cad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	60da      	str	r2, [r3, #12]
}
 800cae0:	bf00      	nop
 800cae2:	3714      	adds	r7, #20
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	3b10      	subs	r3, #16
 800cafc:	4a14      	ldr	r2, [pc, #80]	; (800cb50 <DMA_CalcBaseAndBitshift+0x64>)
 800cafe:	fba2 2303 	umull	r2, r3, r2, r3
 800cb02:	091b      	lsrs	r3, r3, #4
 800cb04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cb06:	4a13      	ldr	r2, [pc, #76]	; (800cb54 <DMA_CalcBaseAndBitshift+0x68>)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d909      	bls.n	800cb2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800cb22:	f023 0303 	bic.w	r3, r3, #3
 800cb26:	1d1a      	adds	r2, r3, #4
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	659a      	str	r2, [r3, #88]	; 0x58
 800cb2c:	e007      	b.n	800cb3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800cb36:	f023 0303 	bic.w	r3, r3, #3
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3714      	adds	r7, #20
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	aaaaaaab 	.word	0xaaaaaaab
 800cb54:	080124c0 	.word	0x080124c0

0800cb58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d11f      	bne.n	800cbb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d855      	bhi.n	800cc24 <DMA_CheckFifoParam+0xcc>
 800cb78:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <DMA_CheckFifoParam+0x28>)
 800cb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7e:	bf00      	nop
 800cb80:	0800cb91 	.word	0x0800cb91
 800cb84:	0800cba3 	.word	0x0800cba3
 800cb88:	0800cb91 	.word	0x0800cb91
 800cb8c:	0800cc25 	.word	0x0800cc25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d045      	beq.n	800cc28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cba0:	e042      	b.n	800cc28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cbaa:	d13f      	bne.n	800cc2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbb0:	e03c      	b.n	800cc2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	699b      	ldr	r3, [r3, #24]
 800cbb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbba:	d121      	bne.n	800cc00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	d836      	bhi.n	800cc30 <DMA_CheckFifoParam+0xd8>
 800cbc2:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <DMA_CheckFifoParam+0x70>)
 800cbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc8:	0800cbd9 	.word	0x0800cbd9
 800cbcc:	0800cbdf 	.word	0x0800cbdf
 800cbd0:	0800cbd9 	.word	0x0800cbd9
 800cbd4:	0800cbf1 	.word	0x0800cbf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	73fb      	strb	r3, [r7, #15]
      break;
 800cbdc:	e02f      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d024      	beq.n	800cc34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbee:	e021      	b.n	800cc34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cbf8:	d11e      	bne.n	800cc38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800cbfe:	e01b      	b.n	800cc38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d902      	bls.n	800cc0c <DMA_CheckFifoParam+0xb4>
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d003      	beq.n	800cc12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cc0a:	e018      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc10:	e015      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00e      	beq.n	800cc3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	73fb      	strb	r3, [r7, #15]
      break;
 800cc22:	e00b      	b.n	800cc3c <DMA_CheckFifoParam+0xe4>
      break;
 800cc24:	bf00      	nop
 800cc26:	e00a      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
      break;
 800cc28:	bf00      	nop
 800cc2a:	e008      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
      break;
 800cc2c:	bf00      	nop
 800cc2e:	e006      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
      break;
 800cc30:	bf00      	nop
 800cc32:	e004      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
      break;
 800cc34:	bf00      	nop
 800cc36:	e002      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
      break;   
 800cc38:	bf00      	nop
 800cc3a:	e000      	b.n	800cc3e <DMA_CheckFifoParam+0xe6>
      break;
 800cc3c:	bf00      	nop
    }
  } 
  
  return status; 
 800cc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3714      	adds	r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800cc52:	2300      	movs	r3, #0
 800cc54:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800cc56:	4b4b      	ldr	r3, [pc, #300]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d020      	beq.n	800cca4 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800cc62:	4b49      	ldr	r3, [pc, #292]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d107      	bne.n	800cc7c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800cc6c:	4b46      	ldr	r3, [pc, #280]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800cc72:	4b45      	ldr	r3, [pc, #276]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cc74:	f04f 32ff 	mov.w	r2, #4294967295
 800cc78:	60da      	str	r2, [r3, #12]
 800cc7a:	e00b      	b.n	800cc94 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800cc7c:	4b42      	ldr	r3, [pc, #264]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d103      	bne.n	800cc8e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800cc86:	4b40      	ldr	r3, [pc, #256]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	607b      	str	r3, [r7, #4]
 800cc8c:	e002      	b.n	800cc94 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800cc8e:	4b3e      	ldr	r3, [pc, #248]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800cc94:	f000 f88e 	bl	800cdb4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f881 	bl	800cda0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800cc9e:	4b3a      	ldr	r3, [pc, #232]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cca0:	2200      	movs	r2, #0
 800cca2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800cca4:	4b37      	ldr	r3, [pc, #220]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d04a      	beq.n	800cd46 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ccb0:	4b34      	ldr	r3, [pc, #208]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800ccb6:	4b34      	ldr	r3, [pc, #208]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d12d      	bne.n	800cd1c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800ccc0:	4b31      	ldr	r3, [pc, #196]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	4a30      	ldr	r2, [pc, #192]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800ccc8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800ccca:	4b2f      	ldr	r3, [pc, #188]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d015      	beq.n	800ccfe <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800ccd2:	4b2d      	ldr	r3, [pc, #180]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f857 	bl	800cd8c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800ccde:	4b2a      	ldr	r3, [pc, #168]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	3301      	adds	r3, #1
 800cce4:	4a28      	ldr	r2, [pc, #160]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cce6:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800cce8:	4b27      	ldr	r3, [pc, #156]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800ccee:	4b26      	ldr	r3, [pc, #152]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800ccf0:	7a1b      	ldrb	r3, [r3, #8]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f8b2 	bl	800ce60 <FLASH_Erase_Sector>
 800ccfc:	e023      	b.n	800cd46 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800ccfe:	f04f 33ff 	mov.w	r3, #4294967295
 800cd02:	607b      	str	r3, [r7, #4]
 800cd04:	4a20      	ldr	r2, [pc, #128]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800cd0a:	4b1f      	ldr	r3, [pc, #124]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800cd10:	f000 f8ee 	bl	800cef0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f839 	bl	800cd8c <HAL_FLASH_EndOfOperationCallback>
 800cd1a:	e014      	b.n	800cd46 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800cd1c:	4b1a      	ldr	r3, [pc, #104]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d107      	bne.n	800cd36 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800cd26:	f000 f8e3 	bl	800cef0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800cd2a:	4b17      	ldr	r3, [pc, #92]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f82c 	bl	800cd8c <HAL_FLASH_EndOfOperationCallback>
 800cd34:	e004      	b.n	800cd40 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800cd36:	4b14      	ldr	r3, [pc, #80]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cd38:	695b      	ldr	r3, [r3, #20]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f000 f826 	bl	800cd8c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800cd40:	4b11      	ldr	r3, [pc, #68]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800cd46:	4b10      	ldr	r3, [pc, #64]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d114      	bne.n	800cd7a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800cd50:	4b0c      	ldr	r3, [pc, #48]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800cd52:	691b      	ldr	r3, [r3, #16]
 800cd54:	4a0b      	ldr	r2, [pc, #44]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800cd56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd5a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800cd5c:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	4a08      	ldr	r2, [pc, #32]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800cd62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd66:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800cd68:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	4a05      	ldr	r2, [pc, #20]	; (800cd84 <HAL_FLASH_IRQHandler+0x138>)
 800cd6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cd72:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800cd74:	4b04      	ldr	r3, [pc, #16]	; (800cd88 <HAL_FLASH_IRQHandler+0x13c>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	761a      	strb	r2, [r3, #24]
  }
}
 800cd7a:	bf00      	nop
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	40023c00 	.word	0x40023c00
 800cd88:	20000790 	.word	0x20000790

0800cd8c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800cd94:	bf00      	nop
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800cda8:	bf00      	nop
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800cdb4:	b480      	push	{r7}
 800cdb6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800cdb8:	4b27      	ldr	r3, [pc, #156]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f003 0310 	and.w	r3, r3, #16
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d008      	beq.n	800cdd6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cdc4:	4b25      	ldr	r3, [pc, #148]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800cdc6:	69db      	ldr	r3, [r3, #28]
 800cdc8:	f043 0310 	orr.w	r3, r3, #16
 800cdcc:	4a23      	ldr	r2, [pc, #140]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800cdce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800cdd0:	4b21      	ldr	r3, [pc, #132]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800cdd2:	2210      	movs	r2, #16
 800cdd4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800cdd6:	4b20      	ldr	r3, [pc, #128]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	f003 0320 	and.w	r3, r3, #32
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d008      	beq.n	800cdf4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cde2:	4b1e      	ldr	r3, [pc, #120]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	f043 0308 	orr.w	r3, r3, #8
 800cdea:	4a1c      	ldr	r2, [pc, #112]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800cdec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800cdee:	4b1a      	ldr	r3, [pc, #104]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800cdf0:	2220      	movs	r2, #32
 800cdf2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800cdf4:	4b18      	ldr	r3, [pc, #96]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d008      	beq.n	800ce12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ce00:	4b16      	ldr	r3, [pc, #88]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800ce02:	69db      	ldr	r3, [r3, #28]
 800ce04:	f043 0304 	orr.w	r3, r3, #4
 800ce08:	4a14      	ldr	r2, [pc, #80]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800ce0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ce0c:	4b12      	ldr	r3, [pc, #72]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800ce0e:	2240      	movs	r2, #64	; 0x40
 800ce10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ce12:	4b11      	ldr	r3, [pc, #68]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d008      	beq.n	800ce30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ce1e:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800ce20:	69db      	ldr	r3, [r3, #28]
 800ce22:	f043 0302 	orr.w	r3, r3, #2
 800ce26:	4a0d      	ldr	r2, [pc, #52]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800ce28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ce2a:	4b0b      	ldr	r3, [pc, #44]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800ce2c:	2280      	movs	r2, #128	; 0x80
 800ce2e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ce30:	4b09      	ldr	r3, [pc, #36]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	f003 0302 	and.w	r3, r3, #2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d008      	beq.n	800ce4e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ce3c:	4b07      	ldr	r3, [pc, #28]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800ce3e:	69db      	ldr	r3, [r3, #28]
 800ce40:	f043 0320 	orr.w	r3, r3, #32
 800ce44:	4a05      	ldr	r2, [pc, #20]	; (800ce5c <FLASH_SetErrorCode+0xa8>)
 800ce46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ce48:	4b03      	ldr	r3, [pc, #12]	; (800ce58 <FLASH_SetErrorCode+0xa4>)
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	60da      	str	r2, [r3, #12]
  }
}
 800ce4e:	bf00      	nop
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr
 800ce58:	40023c00 	.word	0x40023c00
 800ce5c:	20000790 	.word	0x20000790

0800ce60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ce70:	78fb      	ldrb	r3, [r7, #3]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800ce76:	2300      	movs	r3, #0
 800ce78:	60fb      	str	r3, [r7, #12]
 800ce7a:	e010      	b.n	800ce9e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ce7c:	78fb      	ldrb	r3, [r7, #3]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d103      	bne.n	800ce8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ce82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce86:	60fb      	str	r3, [r7, #12]
 800ce88:	e009      	b.n	800ce9e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ce8a:	78fb      	ldrb	r3, [r7, #3]
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d103      	bne.n	800ce98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ce90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce94:	60fb      	str	r3, [r7, #12]
 800ce96:	e002      	b.n	800ce9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ce98:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ce9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ce9e:	4b13      	ldr	r3, [pc, #76]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800cea0:	691b      	ldr	r3, [r3, #16]
 800cea2:	4a12      	ldr	r2, [pc, #72]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800cea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cea8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ceaa:	4b10      	ldr	r3, [pc, #64]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800ceac:	691a      	ldr	r2, [r3, #16]
 800ceae:	490f      	ldr	r1, [pc, #60]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	4a0c      	ldr	r2, [pc, #48]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800cebc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cec0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800cec2:	4b0a      	ldr	r3, [pc, #40]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800cec4:	691a      	ldr	r2, [r3, #16]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	00db      	lsls	r3, r3, #3
 800ceca:	4313      	orrs	r3, r2
 800cecc:	4a07      	ldr	r2, [pc, #28]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800cece:	f043 0302 	orr.w	r3, r3, #2
 800ced2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ced4:	4b05      	ldr	r3, [pc, #20]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	4a04      	ldr	r2, [pc, #16]	; (800ceec <FLASH_Erase_Sector+0x8c>)
 800ceda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cede:	6113      	str	r3, [r2, #16]
}
 800cee0:	bf00      	nop
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr
 800ceec:	40023c00 	.word	0x40023c00

0800cef0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800cef0:	b480      	push	{r7}
 800cef2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800cef4:	4b20      	ldr	r3, [pc, #128]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d017      	beq.n	800cf30 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cf00:	4b1d      	ldr	r3, [pc, #116]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a1c      	ldr	r2, [pc, #112]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf0a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cf0c:	4b1a      	ldr	r3, [pc, #104]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a19      	ldr	r2, [pc, #100]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	4b17      	ldr	r3, [pc, #92]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a16      	ldr	r2, [pc, #88]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf22:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cf24:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a13      	ldr	r2, [pc, #76]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf2e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800cf30:	4b11      	ldr	r3, [pc, #68]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d017      	beq.n	800cf6c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800cf3c:	4b0e      	ldr	r3, [pc, #56]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a0d      	ldr	r2, [pc, #52]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf46:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800cf48:	4b0b      	ldr	r3, [pc, #44]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a0a      	ldr	r2, [pc, #40]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cf52:	6013      	str	r3, [r2, #0]
 800cf54:	4b08      	ldr	r3, [pc, #32]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a07      	ldr	r2, [pc, #28]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf5e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800cf60:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a04      	ldr	r2, [pc, #16]	; (800cf78 <FLASH_FlushCaches+0x88>)
 800cf66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cf6a:	6013      	str	r3, [r2, #0]
  }
}
 800cf6c:	bf00      	nop
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	40023c00 	.word	0x40023c00

0800cf7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b089      	sub	sp, #36	; 0x24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cf86:	2300      	movs	r3, #0
 800cf88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cf92:	2300      	movs	r3, #0
 800cf94:	61fb      	str	r3, [r7, #28]
 800cf96:	e16b      	b.n	800d270 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cf98:	2201      	movs	r2, #1
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cfac:	693a      	ldr	r2, [r7, #16]
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	f040 815a 	bne.w	800d26a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d00b      	beq.n	800cfd6 <HAL_GPIO_Init+0x5a>
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d007      	beq.n	800cfd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cfca:	2b11      	cmp	r3, #17
 800cfcc:	d003      	beq.n	800cfd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	2b12      	cmp	r3, #18
 800cfd4:	d130      	bne.n	800d038 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	005b      	lsls	r3, r3, #1
 800cfe0:	2203      	movs	r2, #3
 800cfe2:	fa02 f303 	lsl.w	r3, r2, r3
 800cfe6:	43db      	mvns	r3, r3
 800cfe8:	69ba      	ldr	r2, [r7, #24]
 800cfea:	4013      	ands	r3, r2
 800cfec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	68da      	ldr	r2, [r3, #12]
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	fa02 f303 	lsl.w	r3, r2, r3
 800cffa:	69ba      	ldr	r2, [r7, #24]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	69ba      	ldr	r2, [r7, #24]
 800d004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d00c:	2201      	movs	r2, #1
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	fa02 f303 	lsl.w	r3, r2, r3
 800d014:	43db      	mvns	r3, r3
 800d016:	69ba      	ldr	r2, [r7, #24]
 800d018:	4013      	ands	r3, r2
 800d01a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	091b      	lsrs	r3, r3, #4
 800d022:	f003 0201 	and.w	r2, r3, #1
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	fa02 f303 	lsl.w	r3, r2, r3
 800d02c:	69ba      	ldr	r2, [r7, #24]
 800d02e:	4313      	orrs	r3, r2
 800d030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	005b      	lsls	r3, r3, #1
 800d042:	2203      	movs	r2, #3
 800d044:	fa02 f303 	lsl.w	r3, r2, r3
 800d048:	43db      	mvns	r3, r3
 800d04a:	69ba      	ldr	r2, [r7, #24]
 800d04c:	4013      	ands	r3, r2
 800d04e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	689a      	ldr	r2, [r3, #8]
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	005b      	lsls	r3, r3, #1
 800d058:	fa02 f303 	lsl.w	r3, r2, r3
 800d05c:	69ba      	ldr	r2, [r7, #24]
 800d05e:	4313      	orrs	r3, r2
 800d060:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	69ba      	ldr	r2, [r7, #24]
 800d066:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d003      	beq.n	800d078 <HAL_GPIO_Init+0xfc>
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	2b12      	cmp	r3, #18
 800d076:	d123      	bne.n	800d0c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	08da      	lsrs	r2, r3, #3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3208      	adds	r2, #8
 800d080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	f003 0307 	and.w	r3, r3, #7
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	220f      	movs	r2, #15
 800d090:	fa02 f303 	lsl.w	r3, r2, r3
 800d094:	43db      	mvns	r3, r3
 800d096:	69ba      	ldr	r2, [r7, #24]
 800d098:	4013      	ands	r3, r2
 800d09a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	691a      	ldr	r2, [r3, #16]
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	f003 0307 	and.w	r3, r3, #7
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	08da      	lsrs	r2, r3, #3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3208      	adds	r2, #8
 800d0ba:	69b9      	ldr	r1, [r7, #24]
 800d0bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	2203      	movs	r2, #3
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	43db      	mvns	r3, r3
 800d0d2:	69ba      	ldr	r2, [r7, #24]
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	f003 0203 	and.w	r2, r3, #3
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0e8:	69ba      	ldr	r2, [r7, #24]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	69ba      	ldr	r2, [r7, #24]
 800d0f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f000 80b4 	beq.w	800d26a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d102:	2300      	movs	r3, #0
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	4b5f      	ldr	r3, [pc, #380]	; (800d284 <HAL_GPIO_Init+0x308>)
 800d108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d10a:	4a5e      	ldr	r2, [pc, #376]	; (800d284 <HAL_GPIO_Init+0x308>)
 800d10c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d110:	6453      	str	r3, [r2, #68]	; 0x44
 800d112:	4b5c      	ldr	r3, [pc, #368]	; (800d284 <HAL_GPIO_Init+0x308>)
 800d114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d11a:	60fb      	str	r3, [r7, #12]
 800d11c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d11e:	4a5a      	ldr	r2, [pc, #360]	; (800d288 <HAL_GPIO_Init+0x30c>)
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	089b      	lsrs	r3, r3, #2
 800d124:	3302      	adds	r3, #2
 800d126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d12a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	f003 0303 	and.w	r3, r3, #3
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	220f      	movs	r2, #15
 800d136:	fa02 f303 	lsl.w	r3, r2, r3
 800d13a:	43db      	mvns	r3, r3
 800d13c:	69ba      	ldr	r2, [r7, #24]
 800d13e:	4013      	ands	r3, r2
 800d140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a51      	ldr	r2, [pc, #324]	; (800d28c <HAL_GPIO_Init+0x310>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d02b      	beq.n	800d1a2 <HAL_GPIO_Init+0x226>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4a50      	ldr	r2, [pc, #320]	; (800d290 <HAL_GPIO_Init+0x314>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d025      	beq.n	800d19e <HAL_GPIO_Init+0x222>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a4f      	ldr	r2, [pc, #316]	; (800d294 <HAL_GPIO_Init+0x318>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d01f      	beq.n	800d19a <HAL_GPIO_Init+0x21e>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a4e      	ldr	r2, [pc, #312]	; (800d298 <HAL_GPIO_Init+0x31c>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d019      	beq.n	800d196 <HAL_GPIO_Init+0x21a>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a4d      	ldr	r2, [pc, #308]	; (800d29c <HAL_GPIO_Init+0x320>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d013      	beq.n	800d192 <HAL_GPIO_Init+0x216>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a4c      	ldr	r2, [pc, #304]	; (800d2a0 <HAL_GPIO_Init+0x324>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d00d      	beq.n	800d18e <HAL_GPIO_Init+0x212>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a4b      	ldr	r2, [pc, #300]	; (800d2a4 <HAL_GPIO_Init+0x328>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d007      	beq.n	800d18a <HAL_GPIO_Init+0x20e>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4a4a      	ldr	r2, [pc, #296]	; (800d2a8 <HAL_GPIO_Init+0x32c>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d101      	bne.n	800d186 <HAL_GPIO_Init+0x20a>
 800d182:	2307      	movs	r3, #7
 800d184:	e00e      	b.n	800d1a4 <HAL_GPIO_Init+0x228>
 800d186:	2308      	movs	r3, #8
 800d188:	e00c      	b.n	800d1a4 <HAL_GPIO_Init+0x228>
 800d18a:	2306      	movs	r3, #6
 800d18c:	e00a      	b.n	800d1a4 <HAL_GPIO_Init+0x228>
 800d18e:	2305      	movs	r3, #5
 800d190:	e008      	b.n	800d1a4 <HAL_GPIO_Init+0x228>
 800d192:	2304      	movs	r3, #4
 800d194:	e006      	b.n	800d1a4 <HAL_GPIO_Init+0x228>
 800d196:	2303      	movs	r3, #3
 800d198:	e004      	b.n	800d1a4 <HAL_GPIO_Init+0x228>
 800d19a:	2302      	movs	r3, #2
 800d19c:	e002      	b.n	800d1a4 <HAL_GPIO_Init+0x228>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e000      	b.n	800d1a4 <HAL_GPIO_Init+0x228>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	69fa      	ldr	r2, [r7, #28]
 800d1a6:	f002 0203 	and.w	r2, r2, #3
 800d1aa:	0092      	lsls	r2, r2, #2
 800d1ac:	4093      	lsls	r3, r2
 800d1ae:	69ba      	ldr	r2, [r7, #24]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d1b4:	4934      	ldr	r1, [pc, #208]	; (800d288 <HAL_GPIO_Init+0x30c>)
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	089b      	lsrs	r3, r3, #2
 800d1ba:	3302      	adds	r3, #2
 800d1bc:	69ba      	ldr	r2, [r7, #24]
 800d1be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d1c2:	4b3a      	ldr	r3, [pc, #232]	; (800d2ac <HAL_GPIO_Init+0x330>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	43db      	mvns	r3, r3
 800d1cc:	69ba      	ldr	r2, [r7, #24]
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d003      	beq.n	800d1e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d1de:	69ba      	ldr	r2, [r7, #24]
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d1e6:	4a31      	ldr	r2, [pc, #196]	; (800d2ac <HAL_GPIO_Init+0x330>)
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d1ec:	4b2f      	ldr	r3, [pc, #188]	; (800d2ac <HAL_GPIO_Init+0x330>)
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	43db      	mvns	r3, r3
 800d1f6:	69ba      	ldr	r2, [r7, #24]
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d003      	beq.n	800d210 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d208:	69ba      	ldr	r2, [r7, #24]
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d210:	4a26      	ldr	r2, [pc, #152]	; (800d2ac <HAL_GPIO_Init+0x330>)
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d216:	4b25      	ldr	r3, [pc, #148]	; (800d2ac <HAL_GPIO_Init+0x330>)
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	43db      	mvns	r3, r3
 800d220:	69ba      	ldr	r2, [r7, #24]
 800d222:	4013      	ands	r3, r2
 800d224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d003      	beq.n	800d23a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d232:	69ba      	ldr	r2, [r7, #24]
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	4313      	orrs	r3, r2
 800d238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d23a:	4a1c      	ldr	r2, [pc, #112]	; (800d2ac <HAL_GPIO_Init+0x330>)
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d240:	4b1a      	ldr	r3, [pc, #104]	; (800d2ac <HAL_GPIO_Init+0x330>)
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	43db      	mvns	r3, r3
 800d24a:	69ba      	ldr	r2, [r7, #24]
 800d24c:	4013      	ands	r3, r2
 800d24e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d003      	beq.n	800d264 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d25c:	69ba      	ldr	r2, [r7, #24]
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	4313      	orrs	r3, r2
 800d262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d264:	4a11      	ldr	r2, [pc, #68]	; (800d2ac <HAL_GPIO_Init+0x330>)
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	3301      	adds	r3, #1
 800d26e:	61fb      	str	r3, [r7, #28]
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	2b0f      	cmp	r3, #15
 800d274:	f67f ae90 	bls.w	800cf98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d278:	bf00      	nop
 800d27a:	3724      	adds	r7, #36	; 0x24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	40023800 	.word	0x40023800
 800d288:	40013800 	.word	0x40013800
 800d28c:	40020000 	.word	0x40020000
 800d290:	40020400 	.word	0x40020400
 800d294:	40020800 	.word	0x40020800
 800d298:	40020c00 	.word	0x40020c00
 800d29c:	40021000 	.word	0x40021000
 800d2a0:	40021400 	.word	0x40021400
 800d2a4:	40021800 	.word	0x40021800
 800d2a8:	40021c00 	.word	0x40021c00
 800d2ac:	40013c00 	.word	0x40013c00

0800d2b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	807b      	strh	r3, [r7, #2]
 800d2bc:	4613      	mov	r3, r2
 800d2be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d2c0:	787b      	ldrb	r3, [r7, #1]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d2c6:	887a      	ldrh	r2, [r7, #2]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d2cc:	e003      	b.n	800d2d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d2ce:	887b      	ldrh	r3, [r7, #2]
 800d2d0:	041a      	lsls	r2, r3, #16
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	619a      	str	r2, [r3, #24]
}
 800d2d6:	bf00      	nop
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
	...

0800d2e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d101      	bne.n	800d2f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e25b      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 0301 	and.w	r3, r3, #1
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d075      	beq.n	800d3ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d302:	4ba3      	ldr	r3, [pc, #652]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	f003 030c 	and.w	r3, r3, #12
 800d30a:	2b04      	cmp	r3, #4
 800d30c:	d00c      	beq.n	800d328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d30e:	4ba0      	ldr	r3, [pc, #640]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d316:	2b08      	cmp	r3, #8
 800d318:	d112      	bne.n	800d340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d31a:	4b9d      	ldr	r3, [pc, #628]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d326:	d10b      	bne.n	800d340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d328:	4b99      	ldr	r3, [pc, #612]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d330:	2b00      	cmp	r3, #0
 800d332:	d05b      	beq.n	800d3ec <HAL_RCC_OscConfig+0x108>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d157      	bne.n	800d3ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e236      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d348:	d106      	bne.n	800d358 <HAL_RCC_OscConfig+0x74>
 800d34a:	4b91      	ldr	r3, [pc, #580]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a90      	ldr	r2, [pc, #576]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d354:	6013      	str	r3, [r2, #0]
 800d356:	e01d      	b.n	800d394 <HAL_RCC_OscConfig+0xb0>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d360:	d10c      	bne.n	800d37c <HAL_RCC_OscConfig+0x98>
 800d362:	4b8b      	ldr	r3, [pc, #556]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a8a      	ldr	r2, [pc, #552]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	4b88      	ldr	r3, [pc, #544]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a87      	ldr	r2, [pc, #540]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d378:	6013      	str	r3, [r2, #0]
 800d37a:	e00b      	b.n	800d394 <HAL_RCC_OscConfig+0xb0>
 800d37c:	4b84      	ldr	r3, [pc, #528]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a83      	ldr	r2, [pc, #524]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	4b81      	ldr	r3, [pc, #516]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a80      	ldr	r2, [pc, #512]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d38e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d013      	beq.n	800d3c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d39c:	f7fe f9a6 	bl	800b6ec <HAL_GetTick>
 800d3a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3a2:	e008      	b.n	800d3b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d3a4:	f7fe f9a2 	bl	800b6ec <HAL_GetTick>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	2b64      	cmp	r3, #100	; 0x64
 800d3b0:	d901      	bls.n	800d3b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d3b2:	2303      	movs	r3, #3
 800d3b4:	e1fb      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3b6:	4b76      	ldr	r3, [pc, #472]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d0f0      	beq.n	800d3a4 <HAL_RCC_OscConfig+0xc0>
 800d3c2:	e014      	b.n	800d3ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3c4:	f7fe f992 	bl	800b6ec <HAL_GetTick>
 800d3c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d3ca:	e008      	b.n	800d3de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d3cc:	f7fe f98e 	bl	800b6ec <HAL_GetTick>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	2b64      	cmp	r3, #100	; 0x64
 800d3d8:	d901      	bls.n	800d3de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	e1e7      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d3de:	4b6c      	ldr	r3, [pc, #432]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1f0      	bne.n	800d3cc <HAL_RCC_OscConfig+0xe8>
 800d3ea:	e000      	b.n	800d3ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d3ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f003 0302 	and.w	r3, r3, #2
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d063      	beq.n	800d4c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d3fa:	4b65      	ldr	r3, [pc, #404]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	f003 030c 	and.w	r3, r3, #12
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00b      	beq.n	800d41e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d406:	4b62      	ldr	r3, [pc, #392]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d40e:	2b08      	cmp	r3, #8
 800d410:	d11c      	bne.n	800d44c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d412:	4b5f      	ldr	r3, [pc, #380]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d116      	bne.n	800d44c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d41e:	4b5c      	ldr	r3, [pc, #368]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 0302 	and.w	r3, r3, #2
 800d426:	2b00      	cmp	r3, #0
 800d428:	d005      	beq.n	800d436 <HAL_RCC_OscConfig+0x152>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d001      	beq.n	800d436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	e1bb      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d436:	4b56      	ldr	r3, [pc, #344]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	4952      	ldr	r1, [pc, #328]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d446:	4313      	orrs	r3, r2
 800d448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d44a:	e03a      	b.n	800d4c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d020      	beq.n	800d496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d454:	4b4f      	ldr	r3, [pc, #316]	; (800d594 <HAL_RCC_OscConfig+0x2b0>)
 800d456:	2201      	movs	r2, #1
 800d458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d45a:	f7fe f947 	bl	800b6ec <HAL_GetTick>
 800d45e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d460:	e008      	b.n	800d474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d462:	f7fe f943 	bl	800b6ec <HAL_GetTick>
 800d466:	4602      	mov	r2, r0
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	1ad3      	subs	r3, r2, r3
 800d46c:	2b02      	cmp	r3, #2
 800d46e:	d901      	bls.n	800d474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d470:	2303      	movs	r3, #3
 800d472:	e19c      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d474:	4b46      	ldr	r3, [pc, #280]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 0302 	and.w	r3, r3, #2
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d0f0      	beq.n	800d462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d480:	4b43      	ldr	r3, [pc, #268]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	00db      	lsls	r3, r3, #3
 800d48e:	4940      	ldr	r1, [pc, #256]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d490:	4313      	orrs	r3, r2
 800d492:	600b      	str	r3, [r1, #0]
 800d494:	e015      	b.n	800d4c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d496:	4b3f      	ldr	r3, [pc, #252]	; (800d594 <HAL_RCC_OscConfig+0x2b0>)
 800d498:	2200      	movs	r2, #0
 800d49a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d49c:	f7fe f926 	bl	800b6ec <HAL_GetTick>
 800d4a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d4a2:	e008      	b.n	800d4b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d4a4:	f7fe f922 	bl	800b6ec <HAL_GetTick>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d901      	bls.n	800d4b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	e17b      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d4b6:	4b36      	ldr	r3, [pc, #216]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f003 0302 	and.w	r3, r3, #2
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1f0      	bne.n	800d4a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f003 0308 	and.w	r3, r3, #8
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d030      	beq.n	800d530 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d016      	beq.n	800d504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d4d6:	4b30      	ldr	r3, [pc, #192]	; (800d598 <HAL_RCC_OscConfig+0x2b4>)
 800d4d8:	2201      	movs	r2, #1
 800d4da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4dc:	f7fe f906 	bl	800b6ec <HAL_GetTick>
 800d4e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d4e2:	e008      	b.n	800d4f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d4e4:	f7fe f902 	bl	800b6ec <HAL_GetTick>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	1ad3      	subs	r3, r2, r3
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	d901      	bls.n	800d4f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d4f2:	2303      	movs	r3, #3
 800d4f4:	e15b      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d4f6:	4b26      	ldr	r3, [pc, #152]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4fa:	f003 0302 	and.w	r3, r3, #2
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d0f0      	beq.n	800d4e4 <HAL_RCC_OscConfig+0x200>
 800d502:	e015      	b.n	800d530 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d504:	4b24      	ldr	r3, [pc, #144]	; (800d598 <HAL_RCC_OscConfig+0x2b4>)
 800d506:	2200      	movs	r2, #0
 800d508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d50a:	f7fe f8ef 	bl	800b6ec <HAL_GetTick>
 800d50e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d510:	e008      	b.n	800d524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d512:	f7fe f8eb 	bl	800b6ec <HAL_GetTick>
 800d516:	4602      	mov	r2, r0
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d901      	bls.n	800d524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d520:	2303      	movs	r3, #3
 800d522:	e144      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d524:	4b1a      	ldr	r3, [pc, #104]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d528:	f003 0302 	and.w	r3, r3, #2
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1f0      	bne.n	800d512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f000 80a0 	beq.w	800d67e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d53e:	2300      	movs	r3, #0
 800d540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d542:	4b13      	ldr	r3, [pc, #76]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10f      	bne.n	800d56e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d54e:	2300      	movs	r3, #0
 800d550:	60bb      	str	r3, [r7, #8]
 800d552:	4b0f      	ldr	r3, [pc, #60]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d556:	4a0e      	ldr	r2, [pc, #56]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d55c:	6413      	str	r3, [r2, #64]	; 0x40
 800d55e:	4b0c      	ldr	r3, [pc, #48]	; (800d590 <HAL_RCC_OscConfig+0x2ac>)
 800d560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d566:	60bb      	str	r3, [r7, #8]
 800d568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d56a:	2301      	movs	r3, #1
 800d56c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d56e:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <HAL_RCC_OscConfig+0x2b8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d576:	2b00      	cmp	r3, #0
 800d578:	d121      	bne.n	800d5be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d57a:	4b08      	ldr	r3, [pc, #32]	; (800d59c <HAL_RCC_OscConfig+0x2b8>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a07      	ldr	r2, [pc, #28]	; (800d59c <HAL_RCC_OscConfig+0x2b8>)
 800d580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d586:	f7fe f8b1 	bl	800b6ec <HAL_GetTick>
 800d58a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d58c:	e011      	b.n	800d5b2 <HAL_RCC_OscConfig+0x2ce>
 800d58e:	bf00      	nop
 800d590:	40023800 	.word	0x40023800
 800d594:	42470000 	.word	0x42470000
 800d598:	42470e80 	.word	0x42470e80
 800d59c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d5a0:	f7fe f8a4 	bl	800b6ec <HAL_GetTick>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d901      	bls.n	800d5b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d5ae:	2303      	movs	r3, #3
 800d5b0:	e0fd      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5b2:	4b81      	ldr	r3, [pc, #516]	; (800d7b8 <HAL_RCC_OscConfig+0x4d4>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0f0      	beq.n	800d5a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d106      	bne.n	800d5d4 <HAL_RCC_OscConfig+0x2f0>
 800d5c6:	4b7d      	ldr	r3, [pc, #500]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ca:	4a7c      	ldr	r2, [pc, #496]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d5cc:	f043 0301 	orr.w	r3, r3, #1
 800d5d0:	6713      	str	r3, [r2, #112]	; 0x70
 800d5d2:	e01c      	b.n	800d60e <HAL_RCC_OscConfig+0x32a>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	2b05      	cmp	r3, #5
 800d5da:	d10c      	bne.n	800d5f6 <HAL_RCC_OscConfig+0x312>
 800d5dc:	4b77      	ldr	r3, [pc, #476]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d5de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5e0:	4a76      	ldr	r2, [pc, #472]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d5e2:	f043 0304 	orr.w	r3, r3, #4
 800d5e6:	6713      	str	r3, [r2, #112]	; 0x70
 800d5e8:	4b74      	ldr	r3, [pc, #464]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ec:	4a73      	ldr	r2, [pc, #460]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d5ee:	f043 0301 	orr.w	r3, r3, #1
 800d5f2:	6713      	str	r3, [r2, #112]	; 0x70
 800d5f4:	e00b      	b.n	800d60e <HAL_RCC_OscConfig+0x32a>
 800d5f6:	4b71      	ldr	r3, [pc, #452]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fa:	4a70      	ldr	r2, [pc, #448]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d5fc:	f023 0301 	bic.w	r3, r3, #1
 800d600:	6713      	str	r3, [r2, #112]	; 0x70
 800d602:	4b6e      	ldr	r3, [pc, #440]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d606:	4a6d      	ldr	r2, [pc, #436]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d608:	f023 0304 	bic.w	r3, r3, #4
 800d60c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d015      	beq.n	800d642 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d616:	f7fe f869 	bl	800b6ec <HAL_GetTick>
 800d61a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d61c:	e00a      	b.n	800d634 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d61e:	f7fe f865 	bl	800b6ec <HAL_GetTick>
 800d622:	4602      	mov	r2, r0
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	1ad3      	subs	r3, r2, r3
 800d628:	f241 3288 	movw	r2, #5000	; 0x1388
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d901      	bls.n	800d634 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d630:	2303      	movs	r3, #3
 800d632:	e0bc      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d634:	4b61      	ldr	r3, [pc, #388]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d638:	f003 0302 	and.w	r3, r3, #2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d0ee      	beq.n	800d61e <HAL_RCC_OscConfig+0x33a>
 800d640:	e014      	b.n	800d66c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d642:	f7fe f853 	bl	800b6ec <HAL_GetTick>
 800d646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d648:	e00a      	b.n	800d660 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d64a:	f7fe f84f 	bl	800b6ec <HAL_GetTick>
 800d64e:	4602      	mov	r2, r0
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	f241 3288 	movw	r2, #5000	; 0x1388
 800d658:	4293      	cmp	r3, r2
 800d65a:	d901      	bls.n	800d660 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d65c:	2303      	movs	r3, #3
 800d65e:	e0a6      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d660:	4b56      	ldr	r3, [pc, #344]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d664:	f003 0302 	and.w	r3, r3, #2
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1ee      	bne.n	800d64a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d105      	bne.n	800d67e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d672:	4b52      	ldr	r3, [pc, #328]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	4a51      	ldr	r2, [pc, #324]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d67c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	699b      	ldr	r3, [r3, #24]
 800d682:	2b00      	cmp	r3, #0
 800d684:	f000 8092 	beq.w	800d7ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d688:	4b4c      	ldr	r3, [pc, #304]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f003 030c 	and.w	r3, r3, #12
 800d690:	2b08      	cmp	r3, #8
 800d692:	d05c      	beq.n	800d74e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d141      	bne.n	800d720 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d69c:	4b48      	ldr	r3, [pc, #288]	; (800d7c0 <HAL_RCC_OscConfig+0x4dc>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6a2:	f7fe f823 	bl	800b6ec <HAL_GetTick>
 800d6a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6a8:	e008      	b.n	800d6bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d6aa:	f7fe f81f 	bl	800b6ec <HAL_GetTick>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d901      	bls.n	800d6bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	e078      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6bc:	4b3f      	ldr	r3, [pc, #252]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1f0      	bne.n	800d6aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	69da      	ldr	r2, [r3, #28]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6a1b      	ldr	r3, [r3, #32]
 800d6d0:	431a      	orrs	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d6:	019b      	lsls	r3, r3, #6
 800d6d8:	431a      	orrs	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6de:	085b      	lsrs	r3, r3, #1
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	041b      	lsls	r3, r3, #16
 800d6e4:	431a      	orrs	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ea:	061b      	lsls	r3, r3, #24
 800d6ec:	4933      	ldr	r1, [pc, #204]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d6f2:	4b33      	ldr	r3, [pc, #204]	; (800d7c0 <HAL_RCC_OscConfig+0x4dc>)
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6f8:	f7fd fff8 	bl	800b6ec <HAL_GetTick>
 800d6fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d6fe:	e008      	b.n	800d712 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d700:	f7fd fff4 	bl	800b6ec <HAL_GetTick>
 800d704:	4602      	mov	r2, r0
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d901      	bls.n	800d712 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d70e:	2303      	movs	r3, #3
 800d710:	e04d      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d712:	4b2a      	ldr	r3, [pc, #168]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d0f0      	beq.n	800d700 <HAL_RCC_OscConfig+0x41c>
 800d71e:	e045      	b.n	800d7ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d720:	4b27      	ldr	r3, [pc, #156]	; (800d7c0 <HAL_RCC_OscConfig+0x4dc>)
 800d722:	2200      	movs	r2, #0
 800d724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d726:	f7fd ffe1 	bl	800b6ec <HAL_GetTick>
 800d72a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d72c:	e008      	b.n	800d740 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d72e:	f7fd ffdd 	bl	800b6ec <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d901      	bls.n	800d740 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e036      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d740:	4b1e      	ldr	r3, [pc, #120]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f0      	bne.n	800d72e <HAL_RCC_OscConfig+0x44a>
 800d74c:	e02e      	b.n	800d7ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d101      	bne.n	800d75a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e029      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d75a:	4b18      	ldr	r3, [pc, #96]	; (800d7bc <HAL_RCC_OscConfig+0x4d8>)
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d11c      	bne.n	800d7a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d778:	429a      	cmp	r2, r3
 800d77a:	d115      	bne.n	800d7a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d782:	4013      	ands	r3, r2
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d788:	4293      	cmp	r3, r2
 800d78a:	d10d      	bne.n	800d7a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d796:	429a      	cmp	r2, r3
 800d798:	d106      	bne.n	800d7a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d001      	beq.n	800d7ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e000      	b.n	800d7ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	40007000 	.word	0x40007000
 800d7bc:	40023800 	.word	0x40023800
 800d7c0:	42470060 	.word	0x42470060

0800d7c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d101      	bne.n	800d7d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	e0cc      	b.n	800d972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d7d8:	4b68      	ldr	r3, [pc, #416]	; (800d97c <HAL_RCC_ClockConfig+0x1b8>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f003 030f 	and.w	r3, r3, #15
 800d7e0:	683a      	ldr	r2, [r7, #0]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d90c      	bls.n	800d800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7e6:	4b65      	ldr	r3, [pc, #404]	; (800d97c <HAL_RCC_ClockConfig+0x1b8>)
 800d7e8:	683a      	ldr	r2, [r7, #0]
 800d7ea:	b2d2      	uxtb	r2, r2
 800d7ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7ee:	4b63      	ldr	r3, [pc, #396]	; (800d97c <HAL_RCC_ClockConfig+0x1b8>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f003 030f 	and.w	r3, r3, #15
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d001      	beq.n	800d800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e0b8      	b.n	800d972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0302 	and.w	r3, r3, #2
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d020      	beq.n	800d84e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f003 0304 	and.w	r3, r3, #4
 800d814:	2b00      	cmp	r3, #0
 800d816:	d005      	beq.n	800d824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d818:	4b59      	ldr	r3, [pc, #356]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	4a58      	ldr	r2, [pc, #352]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d81e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f003 0308 	and.w	r3, r3, #8
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d005      	beq.n	800d83c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d830:	4b53      	ldr	r3, [pc, #332]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	4a52      	ldr	r2, [pc, #328]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d83a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d83c:	4b50      	ldr	r3, [pc, #320]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	494d      	ldr	r1, [pc, #308]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d84a:	4313      	orrs	r3, r2
 800d84c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f003 0301 	and.w	r3, r3, #1
 800d856:	2b00      	cmp	r3, #0
 800d858:	d044      	beq.n	800d8e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d107      	bne.n	800d872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d862:	4b47      	ldr	r3, [pc, #284]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d119      	bne.n	800d8a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	e07f      	b.n	800d972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	2b02      	cmp	r3, #2
 800d878:	d003      	beq.n	800d882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d87e:	2b03      	cmp	r3, #3
 800d880:	d107      	bne.n	800d892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d882:	4b3f      	ldr	r3, [pc, #252]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d109      	bne.n	800d8a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	e06f      	b.n	800d972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d892:	4b3b      	ldr	r3, [pc, #236]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f003 0302 	and.w	r3, r3, #2
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d101      	bne.n	800d8a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e067      	b.n	800d972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d8a2:	4b37      	ldr	r3, [pc, #220]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	f023 0203 	bic.w	r2, r3, #3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	4934      	ldr	r1, [pc, #208]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d8b4:	f7fd ff1a 	bl	800b6ec <HAL_GetTick>
 800d8b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8ba:	e00a      	b.n	800d8d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d8bc:	f7fd ff16 	bl	800b6ec <HAL_GetTick>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d901      	bls.n	800d8d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e04f      	b.n	800d972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8d2:	4b2b      	ldr	r3, [pc, #172]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	f003 020c 	and.w	r2, r3, #12
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d1eb      	bne.n	800d8bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d8e4:	4b25      	ldr	r3, [pc, #148]	; (800d97c <HAL_RCC_ClockConfig+0x1b8>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f003 030f 	and.w	r3, r3, #15
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d20c      	bcs.n	800d90c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8f2:	4b22      	ldr	r3, [pc, #136]	; (800d97c <HAL_RCC_ClockConfig+0x1b8>)
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	b2d2      	uxtb	r2, r2
 800d8f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8fa:	4b20      	ldr	r3, [pc, #128]	; (800d97c <HAL_RCC_ClockConfig+0x1b8>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f003 030f 	and.w	r3, r3, #15
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	429a      	cmp	r2, r3
 800d906:	d001      	beq.n	800d90c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e032      	b.n	800d972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f003 0304 	and.w	r3, r3, #4
 800d914:	2b00      	cmp	r3, #0
 800d916:	d008      	beq.n	800d92a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d918:	4b19      	ldr	r3, [pc, #100]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	4916      	ldr	r1, [pc, #88]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d926:	4313      	orrs	r3, r2
 800d928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f003 0308 	and.w	r3, r3, #8
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d936:	4b12      	ldr	r3, [pc, #72]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	691b      	ldr	r3, [r3, #16]
 800d942:	00db      	lsls	r3, r3, #3
 800d944:	490e      	ldr	r1, [pc, #56]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d946:	4313      	orrs	r3, r2
 800d948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d94a:	f000 f821 	bl	800d990 <HAL_RCC_GetSysClockFreq>
 800d94e:	4601      	mov	r1, r0
 800d950:	4b0b      	ldr	r3, [pc, #44]	; (800d980 <HAL_RCC_ClockConfig+0x1bc>)
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	091b      	lsrs	r3, r3, #4
 800d956:	f003 030f 	and.w	r3, r3, #15
 800d95a:	4a0a      	ldr	r2, [pc, #40]	; (800d984 <HAL_RCC_ClockConfig+0x1c0>)
 800d95c:	5cd3      	ldrb	r3, [r2, r3]
 800d95e:	fa21 f303 	lsr.w	r3, r1, r3
 800d962:	4a09      	ldr	r2, [pc, #36]	; (800d988 <HAL_RCC_ClockConfig+0x1c4>)
 800d964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d966:	4b09      	ldr	r3, [pc, #36]	; (800d98c <HAL_RCC_ClockConfig+0x1c8>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7fd fe7a 	bl	800b664 <HAL_InitTick>

  return HAL_OK;
 800d970:	2300      	movs	r3, #0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	40023c00 	.word	0x40023c00
 800d980:	40023800 	.word	0x40023800
 800d984:	080124a8 	.word	0x080124a8
 800d988:	20000000 	.word	0x20000000
 800d98c:	20000004 	.word	0x20000004

0800d990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d996:	2300      	movs	r3, #0
 800d998:	607b      	str	r3, [r7, #4]
 800d99a:	2300      	movs	r3, #0
 800d99c:	60fb      	str	r3, [r7, #12]
 800d99e:	2300      	movs	r3, #0
 800d9a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d9a6:	4b63      	ldr	r3, [pc, #396]	; (800db34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	f003 030c 	and.w	r3, r3, #12
 800d9ae:	2b04      	cmp	r3, #4
 800d9b0:	d007      	beq.n	800d9c2 <HAL_RCC_GetSysClockFreq+0x32>
 800d9b2:	2b08      	cmp	r3, #8
 800d9b4:	d008      	beq.n	800d9c8 <HAL_RCC_GetSysClockFreq+0x38>
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f040 80b4 	bne.w	800db24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d9bc:	4b5e      	ldr	r3, [pc, #376]	; (800db38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d9be:	60bb      	str	r3, [r7, #8]
       break;
 800d9c0:	e0b3      	b.n	800db2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d9c2:	4b5e      	ldr	r3, [pc, #376]	; (800db3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d9c4:	60bb      	str	r3, [r7, #8]
      break;
 800d9c6:	e0b0      	b.n	800db2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d9c8:	4b5a      	ldr	r3, [pc, #360]	; (800db34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d9d2:	4b58      	ldr	r3, [pc, #352]	; (800db34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d04a      	beq.n	800da74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d9de:	4b55      	ldr	r3, [pc, #340]	; (800db34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	099b      	lsrs	r3, r3, #6
 800d9e4:	f04f 0400 	mov.w	r4, #0
 800d9e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d9ec:	f04f 0200 	mov.w	r2, #0
 800d9f0:	ea03 0501 	and.w	r5, r3, r1
 800d9f4:	ea04 0602 	and.w	r6, r4, r2
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4632      	mov	r2, r6
 800d9fc:	f04f 0300 	mov.w	r3, #0
 800da00:	f04f 0400 	mov.w	r4, #0
 800da04:	0154      	lsls	r4, r2, #5
 800da06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800da0a:	014b      	lsls	r3, r1, #5
 800da0c:	4619      	mov	r1, r3
 800da0e:	4622      	mov	r2, r4
 800da10:	1b49      	subs	r1, r1, r5
 800da12:	eb62 0206 	sbc.w	r2, r2, r6
 800da16:	f04f 0300 	mov.w	r3, #0
 800da1a:	f04f 0400 	mov.w	r4, #0
 800da1e:	0194      	lsls	r4, r2, #6
 800da20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800da24:	018b      	lsls	r3, r1, #6
 800da26:	1a5b      	subs	r3, r3, r1
 800da28:	eb64 0402 	sbc.w	r4, r4, r2
 800da2c:	f04f 0100 	mov.w	r1, #0
 800da30:	f04f 0200 	mov.w	r2, #0
 800da34:	00e2      	lsls	r2, r4, #3
 800da36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800da3a:	00d9      	lsls	r1, r3, #3
 800da3c:	460b      	mov	r3, r1
 800da3e:	4614      	mov	r4, r2
 800da40:	195b      	adds	r3, r3, r5
 800da42:	eb44 0406 	adc.w	r4, r4, r6
 800da46:	f04f 0100 	mov.w	r1, #0
 800da4a:	f04f 0200 	mov.w	r2, #0
 800da4e:	0262      	lsls	r2, r4, #9
 800da50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800da54:	0259      	lsls	r1, r3, #9
 800da56:	460b      	mov	r3, r1
 800da58:	4614      	mov	r4, r2
 800da5a:	4618      	mov	r0, r3
 800da5c:	4621      	mov	r1, r4
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f04f 0400 	mov.w	r4, #0
 800da64:	461a      	mov	r2, r3
 800da66:	4623      	mov	r3, r4
 800da68:	f7fb f826 	bl	8008ab8 <__aeabi_uldivmod>
 800da6c:	4603      	mov	r3, r0
 800da6e:	460c      	mov	r4, r1
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	e049      	b.n	800db08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da74:	4b2f      	ldr	r3, [pc, #188]	; (800db34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	099b      	lsrs	r3, r3, #6
 800da7a:	f04f 0400 	mov.w	r4, #0
 800da7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800da82:	f04f 0200 	mov.w	r2, #0
 800da86:	ea03 0501 	and.w	r5, r3, r1
 800da8a:	ea04 0602 	and.w	r6, r4, r2
 800da8e:	4629      	mov	r1, r5
 800da90:	4632      	mov	r2, r6
 800da92:	f04f 0300 	mov.w	r3, #0
 800da96:	f04f 0400 	mov.w	r4, #0
 800da9a:	0154      	lsls	r4, r2, #5
 800da9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800daa0:	014b      	lsls	r3, r1, #5
 800daa2:	4619      	mov	r1, r3
 800daa4:	4622      	mov	r2, r4
 800daa6:	1b49      	subs	r1, r1, r5
 800daa8:	eb62 0206 	sbc.w	r2, r2, r6
 800daac:	f04f 0300 	mov.w	r3, #0
 800dab0:	f04f 0400 	mov.w	r4, #0
 800dab4:	0194      	lsls	r4, r2, #6
 800dab6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800daba:	018b      	lsls	r3, r1, #6
 800dabc:	1a5b      	subs	r3, r3, r1
 800dabe:	eb64 0402 	sbc.w	r4, r4, r2
 800dac2:	f04f 0100 	mov.w	r1, #0
 800dac6:	f04f 0200 	mov.w	r2, #0
 800daca:	00e2      	lsls	r2, r4, #3
 800dacc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dad0:	00d9      	lsls	r1, r3, #3
 800dad2:	460b      	mov	r3, r1
 800dad4:	4614      	mov	r4, r2
 800dad6:	195b      	adds	r3, r3, r5
 800dad8:	eb44 0406 	adc.w	r4, r4, r6
 800dadc:	f04f 0100 	mov.w	r1, #0
 800dae0:	f04f 0200 	mov.w	r2, #0
 800dae4:	02a2      	lsls	r2, r4, #10
 800dae6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800daea:	0299      	lsls	r1, r3, #10
 800daec:	460b      	mov	r3, r1
 800daee:	4614      	mov	r4, r2
 800daf0:	4618      	mov	r0, r3
 800daf2:	4621      	mov	r1, r4
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f04f 0400 	mov.w	r4, #0
 800dafa:	461a      	mov	r2, r3
 800dafc:	4623      	mov	r3, r4
 800dafe:	f7fa ffdb 	bl	8008ab8 <__aeabi_uldivmod>
 800db02:	4603      	mov	r3, r0
 800db04:	460c      	mov	r4, r1
 800db06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800db08:	4b0a      	ldr	r3, [pc, #40]	; (800db34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	0c1b      	lsrs	r3, r3, #16
 800db0e:	f003 0303 	and.w	r3, r3, #3
 800db12:	3301      	adds	r3, #1
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db20:	60bb      	str	r3, [r7, #8]
      break;
 800db22:	e002      	b.n	800db2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800db24:	4b04      	ldr	r3, [pc, #16]	; (800db38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800db26:	60bb      	str	r3, [r7, #8]
      break;
 800db28:	bf00      	nop
    }
  }
  return sysclockfreq;
 800db2a:	68bb      	ldr	r3, [r7, #8]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db34:	40023800 	.word	0x40023800
 800db38:	00f42400 	.word	0x00f42400
 800db3c:	007a1200 	.word	0x007a1200

0800db40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800db40:	b480      	push	{r7}
 800db42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800db44:	4b03      	ldr	r3, [pc, #12]	; (800db54 <HAL_RCC_GetHCLKFreq+0x14>)
 800db46:	681b      	ldr	r3, [r3, #0]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	20000000 	.word	0x20000000

0800db58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800db5c:	f7ff fff0 	bl	800db40 <HAL_RCC_GetHCLKFreq>
 800db60:	4601      	mov	r1, r0
 800db62:	4b05      	ldr	r3, [pc, #20]	; (800db78 <HAL_RCC_GetPCLK1Freq+0x20>)
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	0a9b      	lsrs	r3, r3, #10
 800db68:	f003 0307 	and.w	r3, r3, #7
 800db6c:	4a03      	ldr	r2, [pc, #12]	; (800db7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800db6e:	5cd3      	ldrb	r3, [r2, r3]
 800db70:	fa21 f303 	lsr.w	r3, r1, r3
}
 800db74:	4618      	mov	r0, r3
 800db76:	bd80      	pop	{r7, pc}
 800db78:	40023800 	.word	0x40023800
 800db7c:	080124b8 	.word	0x080124b8

0800db80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800db84:	f7ff ffdc 	bl	800db40 <HAL_RCC_GetHCLKFreq>
 800db88:	4601      	mov	r1, r0
 800db8a:	4b05      	ldr	r3, [pc, #20]	; (800dba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	0b5b      	lsrs	r3, r3, #13
 800db90:	f003 0307 	and.w	r3, r3, #7
 800db94:	4a03      	ldr	r2, [pc, #12]	; (800dba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800db96:	5cd3      	ldrb	r3, [r2, r3]
 800db98:	fa21 f303 	lsr.w	r3, r1, r3
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	40023800 	.word	0x40023800
 800dba4:	080124b8 	.word	0x080124b8

0800dba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d101      	bne.n	800dbba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e056      	b.n	800dc68 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d106      	bne.n	800dbda <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7fc ff9d 	bl	800ab14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2202      	movs	r2, #2
 800dbde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbf0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	431a      	orrs	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	431a      	orrs	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	431a      	orrs	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	695b      	ldr	r3, [r3, #20]
 800dc0c:	431a      	orrs	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc16:	431a      	orrs	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	69db      	ldr	r3, [r3, #28]
 800dc1c:	431a      	orrs	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	ea42 0103 	orr.w	r1, r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	699b      	ldr	r3, [r3, #24]
 800dc36:	0c1b      	lsrs	r3, r3, #16
 800dc38:	f003 0104 	and.w	r1, r3, #4
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	430a      	orrs	r2, r1
 800dc46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	69da      	ldr	r2, [r3, #28]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2201      	movs	r2, #1
 800dc62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d101      	bne.n	800dc82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e01d      	b.n	800dcbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d106      	bne.n	800dc9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7fc ff84 	bl	800aba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	3304      	adds	r3, #4
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f000 fe3e 	bl	800e930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dcc6:	b480      	push	{r7}
 800dcc8:	b085      	sub	sp, #20
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	68da      	ldr	r2, [r3, #12]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f042 0201 	orr.w	r2, r2, #1
 800dcdc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f003 0307 	and.w	r3, r3, #7
 800dce8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b06      	cmp	r3, #6
 800dcee:	d007      	beq.n	800dd00 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f042 0201 	orr.w	r2, r2, #1
 800dcfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3714      	adds	r7, #20
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b083      	sub	sp, #12
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	68da      	ldr	r2, [r3, #12]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 0201 	bic.w	r2, r2, #1
 800dd24:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6a1a      	ldr	r2, [r3, #32]
 800dd2c:	f241 1311 	movw	r3, #4369	; 0x1111
 800dd30:	4013      	ands	r3, r2
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d10f      	bne.n	800dd56 <HAL_TIM_Base_Stop_IT+0x48>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	6a1a      	ldr	r2, [r3, #32]
 800dd3c:	f240 4344 	movw	r3, #1092	; 0x444
 800dd40:	4013      	ands	r3, r2
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d107      	bne.n	800dd56 <HAL_TIM_Base_Stop_IT+0x48>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f022 0201 	bic.w	r2, r2, #1
 800dd54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	370c      	adds	r7, #12
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d101      	bne.n	800dd76 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e01d      	b.n	800ddb2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d106      	bne.n	800dd90 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 f815 	bl	800ddba <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2202      	movs	r2, #2
 800dd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3304      	adds	r3, #4
 800dda0:	4619      	mov	r1, r3
 800dda2:	4610      	mov	r0, r2
 800dda4:	f000 fdc4 	bl	800e930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3708      	adds	r7, #8
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800ddc2:	bf00      	nop
 800ddc4:	370c      	adds	r7, #12
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
	...

0800ddd0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b0c      	cmp	r3, #12
 800ddde:	d841      	bhi.n	800de64 <HAL_TIM_OC_Start_IT+0x94>
 800dde0:	a201      	add	r2, pc, #4	; (adr r2, 800dde8 <HAL_TIM_OC_Start_IT+0x18>)
 800dde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde6:	bf00      	nop
 800dde8:	0800de1d 	.word	0x0800de1d
 800ddec:	0800de65 	.word	0x0800de65
 800ddf0:	0800de65 	.word	0x0800de65
 800ddf4:	0800de65 	.word	0x0800de65
 800ddf8:	0800de2f 	.word	0x0800de2f
 800ddfc:	0800de65 	.word	0x0800de65
 800de00:	0800de65 	.word	0x0800de65
 800de04:	0800de65 	.word	0x0800de65
 800de08:	0800de41 	.word	0x0800de41
 800de0c:	0800de65 	.word	0x0800de65
 800de10:	0800de65 	.word	0x0800de65
 800de14:	0800de65 	.word	0x0800de65
 800de18:	0800de53 	.word	0x0800de53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68da      	ldr	r2, [r3, #12]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f042 0202 	orr.w	r2, r2, #2
 800de2a:	60da      	str	r2, [r3, #12]
      break;
 800de2c:	e01b      	b.n	800de66 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68da      	ldr	r2, [r3, #12]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f042 0204 	orr.w	r2, r2, #4
 800de3c:	60da      	str	r2, [r3, #12]
      break;
 800de3e:	e012      	b.n	800de66 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68da      	ldr	r2, [r3, #12]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f042 0208 	orr.w	r2, r2, #8
 800de4e:	60da      	str	r2, [r3, #12]
      break;
 800de50:	e009      	b.n	800de66 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	68da      	ldr	r2, [r3, #12]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f042 0210 	orr.w	r2, r2, #16
 800de60:	60da      	str	r2, [r3, #12]
      break;
 800de62:	e000      	b.n	800de66 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800de64:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2201      	movs	r2, #1
 800de6c:	6839      	ldr	r1, [r7, #0]
 800de6e:	4618      	mov	r0, r3
 800de70:	f001 f848 	bl	800ef04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a15      	ldr	r2, [pc, #84]	; (800ded0 <HAL_TIM_OC_Start_IT+0x100>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d004      	beq.n	800de88 <HAL_TIM_OC_Start_IT+0xb8>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a14      	ldr	r2, [pc, #80]	; (800ded4 <HAL_TIM_OC_Start_IT+0x104>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d101      	bne.n	800de8c <HAL_TIM_OC_Start_IT+0xbc>
 800de88:	2301      	movs	r3, #1
 800de8a:	e000      	b.n	800de8e <HAL_TIM_OC_Start_IT+0xbe>
 800de8c:	2300      	movs	r3, #0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d007      	beq.n	800dea2 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	f003 0307 	and.w	r3, r3, #7
 800deac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b06      	cmp	r3, #6
 800deb2:	d007      	beq.n	800dec4 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f042 0201 	orr.w	r2, r2, #1
 800dec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	40010000 	.word	0x40010000
 800ded4:	40010400 	.word	0x40010400

0800ded8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2b0c      	cmp	r3, #12
 800dee6:	d841      	bhi.n	800df6c <HAL_TIM_OC_Stop_IT+0x94>
 800dee8:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <HAL_TIM_OC_Stop_IT+0x18>)
 800deea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deee:	bf00      	nop
 800def0:	0800df25 	.word	0x0800df25
 800def4:	0800df6d 	.word	0x0800df6d
 800def8:	0800df6d 	.word	0x0800df6d
 800defc:	0800df6d 	.word	0x0800df6d
 800df00:	0800df37 	.word	0x0800df37
 800df04:	0800df6d 	.word	0x0800df6d
 800df08:	0800df6d 	.word	0x0800df6d
 800df0c:	0800df6d 	.word	0x0800df6d
 800df10:	0800df49 	.word	0x0800df49
 800df14:	0800df6d 	.word	0x0800df6d
 800df18:	0800df6d 	.word	0x0800df6d
 800df1c:	0800df6d 	.word	0x0800df6d
 800df20:	0800df5b 	.word	0x0800df5b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	68da      	ldr	r2, [r3, #12]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f022 0202 	bic.w	r2, r2, #2
 800df32:	60da      	str	r2, [r3, #12]
      break;
 800df34:	e01b      	b.n	800df6e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	68da      	ldr	r2, [r3, #12]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f022 0204 	bic.w	r2, r2, #4
 800df44:	60da      	str	r2, [r3, #12]
      break;
 800df46:	e012      	b.n	800df6e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	68da      	ldr	r2, [r3, #12]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f022 0208 	bic.w	r2, r2, #8
 800df56:	60da      	str	r2, [r3, #12]
      break;
 800df58:	e009      	b.n	800df6e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	68da      	ldr	r2, [r3, #12]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f022 0210 	bic.w	r2, r2, #16
 800df68:	60da      	str	r2, [r3, #12]
      break;
 800df6a:	e000      	b.n	800df6e <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800df6c:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2200      	movs	r2, #0
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	4618      	mov	r0, r3
 800df78:	f000 ffc4 	bl	800ef04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a20      	ldr	r2, [pc, #128]	; (800e004 <HAL_TIM_OC_Stop_IT+0x12c>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d004      	beq.n	800df90 <HAL_TIM_OC_Stop_IT+0xb8>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a1f      	ldr	r2, [pc, #124]	; (800e008 <HAL_TIM_OC_Stop_IT+0x130>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d101      	bne.n	800df94 <HAL_TIM_OC_Stop_IT+0xbc>
 800df90:	2301      	movs	r3, #1
 800df92:	e000      	b.n	800df96 <HAL_TIM_OC_Stop_IT+0xbe>
 800df94:	2300      	movs	r3, #0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d017      	beq.n	800dfca <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	6a1a      	ldr	r2, [r3, #32]
 800dfa0:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfa4:	4013      	ands	r3, r2
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d10f      	bne.n	800dfca <HAL_TIM_OC_Stop_IT+0xf2>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6a1a      	ldr	r2, [r3, #32]
 800dfb0:	f240 4344 	movw	r3, #1092	; 0x444
 800dfb4:	4013      	ands	r3, r2
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d107      	bne.n	800dfca <HAL_TIM_OC_Stop_IT+0xf2>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dfc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	6a1a      	ldr	r2, [r3, #32]
 800dfd0:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10f      	bne.n	800dffa <HAL_TIM_OC_Stop_IT+0x122>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	6a1a      	ldr	r2, [r3, #32]
 800dfe0:	f240 4344 	movw	r3, #1092	; 0x444
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d107      	bne.n	800dffa <HAL_TIM_OC_Stop_IT+0x122>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f022 0201 	bic.w	r2, r2, #1
 800dff8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	40010000 	.word	0x40010000
 800e008:	40010400 	.word	0x40010400

0800e00c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d101      	bne.n	800e01e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e01a:	2301      	movs	r3, #1
 800e01c:	e01d      	b.n	800e05a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e024:	b2db      	uxtb	r3, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f815 	bl	800e062 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2202      	movs	r2, #2
 800e03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3304      	adds	r3, #4
 800e048:	4619      	mov	r1, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	f000 fc70 	bl	800e930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e06a:	bf00      	nop
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
	...

0800e078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2201      	movs	r2, #1
 800e088:	6839      	ldr	r1, [r7, #0]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f000 ff3a 	bl	800ef04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a15      	ldr	r2, [pc, #84]	; (800e0ec <HAL_TIM_PWM_Start+0x74>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d004      	beq.n	800e0a4 <HAL_TIM_PWM_Start+0x2c>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a14      	ldr	r2, [pc, #80]	; (800e0f0 <HAL_TIM_PWM_Start+0x78>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d101      	bne.n	800e0a8 <HAL_TIM_PWM_Start+0x30>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e000      	b.n	800e0aa <HAL_TIM_PWM_Start+0x32>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d007      	beq.n	800e0be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e0bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	f003 0307 	and.w	r3, r3, #7
 800e0c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b06      	cmp	r3, #6
 800e0ce:	d007      	beq.n	800e0e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f042 0201 	orr.w	r2, r2, #1
 800e0de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	40010000 	.word	0x40010000
 800e0f0:	40010400 	.word	0x40010400

0800e0f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d101      	bne.n	800e108 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e104:	2301      	movs	r3, #1
 800e106:	e083      	b.n	800e210 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	2b00      	cmp	r3, #0
 800e112:	d106      	bne.n	800e122 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7fc fdd1 	bl	800acc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2202      	movs	r2, #2
 800e126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	6812      	ldr	r2, [r2, #0]
 800e134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e138:	f023 0307 	bic.w	r3, r3, #7
 800e13c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	3304      	adds	r3, #4
 800e146:	4619      	mov	r1, r3
 800e148:	4610      	mov	r0, r2
 800e14a:	f000 fbf1 	bl	800e930 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	699b      	ldr	r3, [r3, #24]
 800e15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6a1b      	ldr	r3, [r3, #32]
 800e164:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	4313      	orrs	r3, r2
 800e16e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e176:	f023 0303 	bic.w	r3, r3, #3
 800e17a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	689a      	ldr	r2, [r3, #8]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	699b      	ldr	r3, [r3, #24]
 800e184:	021b      	lsls	r3, r3, #8
 800e186:	4313      	orrs	r3, r2
 800e188:	693a      	ldr	r2, [r7, #16]
 800e18a:	4313      	orrs	r3, r2
 800e18c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e194:	f023 030c 	bic.w	r3, r3, #12
 800e198:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e1a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e1a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	68da      	ldr	r2, [r3, #12]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	69db      	ldr	r3, [r3, #28]
 800e1ae:	021b      	lsls	r3, r3, #8
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	693a      	ldr	r2, [r7, #16]
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	011a      	lsls	r2, r3, #4
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	6a1b      	ldr	r3, [r3, #32]
 800e1c2:	031b      	lsls	r3, r3, #12
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	693a      	ldr	r2, [r7, #16]
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e1d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e1da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	685a      	ldr	r2, [r3, #4]
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	011b      	lsls	r3, r3, #4
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2201      	movs	r2, #1
 800e20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e20e:	2300      	movs	r3, #0
}
 800e210:	4618      	mov	r0, r3
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <HAL_TIM_Encoder_Start+0x16>
 800e228:	2b04      	cmp	r3, #4
 800e22a:	d008      	beq.n	800e23e <HAL_TIM_Encoder_Start+0x26>
 800e22c:	e00f      	b.n	800e24e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2201      	movs	r2, #1
 800e234:	2100      	movs	r1, #0
 800e236:	4618      	mov	r0, r3
 800e238:	f000 fe64 	bl	800ef04 <TIM_CCxChannelCmd>
      break;
 800e23c:	e016      	b.n	800e26c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2201      	movs	r2, #1
 800e244:	2104      	movs	r1, #4
 800e246:	4618      	mov	r0, r3
 800e248:	f000 fe5c 	bl	800ef04 <TIM_CCxChannelCmd>
      break;
 800e24c:	e00e      	b.n	800e26c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2201      	movs	r2, #1
 800e254:	2100      	movs	r1, #0
 800e256:	4618      	mov	r0, r3
 800e258:	f000 fe54 	bl	800ef04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2201      	movs	r2, #1
 800e262:	2104      	movs	r1, #4
 800e264:	4618      	mov	r0, r3
 800e266:	f000 fe4d 	bl	800ef04 <TIM_CCxChannelCmd>
      break;
 800e26a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f042 0201 	orr.w	r2, r2, #1
 800e27a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b082      	sub	sp, #8
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <HAL_TIM_Encoder_Stop+0x16>
 800e296:	2b04      	cmp	r3, #4
 800e298:	d008      	beq.n	800e2ac <HAL_TIM_Encoder_Stop+0x26>
 800e29a:	e00f      	b.n	800e2bc <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f000 fe2d 	bl	800ef04 <TIM_CCxChannelCmd>
      break;
 800e2aa:	e016      	b.n	800e2da <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	2104      	movs	r1, #4
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f000 fe25 	bl	800ef04 <TIM_CCxChannelCmd>
      break;
 800e2ba:	e00e      	b.n	800e2da <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f000 fe1d 	bl	800ef04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	2104      	movs	r1, #4
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f000 fe16 	bl	800ef04 <TIM_CCxChannelCmd>
      break;
 800e2d8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6a1a      	ldr	r2, [r3, #32]
 800e2e0:	f241 1311 	movw	r3, #4369	; 0x1111
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10f      	bne.n	800e30a <HAL_TIM_Encoder_Stop+0x84>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	6a1a      	ldr	r2, [r3, #32]
 800e2f0:	f240 4344 	movw	r3, #1092	; 0x444
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d107      	bne.n	800e30a <HAL_TIM_Encoder_Stop+0x84>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f022 0201 	bic.w	r2, r2, #1
 800e308:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	f003 0302 	and.w	r3, r3, #2
 800e326:	2b02      	cmp	r3, #2
 800e328:	d122      	bne.n	800e370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	f003 0302 	and.w	r3, r3, #2
 800e334:	2b02      	cmp	r3, #2
 800e336:	d11b      	bne.n	800e370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f06f 0202 	mvn.w	r2, #2
 800e340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2201      	movs	r2, #1
 800e346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	699b      	ldr	r3, [r3, #24]
 800e34e:	f003 0303 	and.w	r3, r3, #3
 800e352:	2b00      	cmp	r3, #0
 800e354:	d003      	beq.n	800e35e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 facb 	bl	800e8f2 <HAL_TIM_IC_CaptureCallback>
 800e35c:	e005      	b.n	800e36a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fabd 	bl	800e8de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 face 	bl	800e906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	691b      	ldr	r3, [r3, #16]
 800e376:	f003 0304 	and.w	r3, r3, #4
 800e37a:	2b04      	cmp	r3, #4
 800e37c:	d122      	bne.n	800e3c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	f003 0304 	and.w	r3, r3, #4
 800e388:	2b04      	cmp	r3, #4
 800e38a:	d11b      	bne.n	800e3c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f06f 0204 	mvn.w	r2, #4
 800e394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2202      	movs	r2, #2
 800e39a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	699b      	ldr	r3, [r3, #24]
 800e3a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 faa1 	bl	800e8f2 <HAL_TIM_IC_CaptureCallback>
 800e3b0:	e005      	b.n	800e3be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fa93 	bl	800e8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 faa4 	bl	800e906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	691b      	ldr	r3, [r3, #16]
 800e3ca:	f003 0308 	and.w	r3, r3, #8
 800e3ce:	2b08      	cmp	r3, #8
 800e3d0:	d122      	bne.n	800e418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	f003 0308 	and.w	r3, r3, #8
 800e3dc:	2b08      	cmp	r3, #8
 800e3de:	d11b      	bne.n	800e418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f06f 0208 	mvn.w	r2, #8
 800e3e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2204      	movs	r2, #4
 800e3ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	69db      	ldr	r3, [r3, #28]
 800e3f6:	f003 0303 	and.w	r3, r3, #3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 fa77 	bl	800e8f2 <HAL_TIM_IC_CaptureCallback>
 800e404:	e005      	b.n	800e412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 fa69 	bl	800e8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 fa7a 	bl	800e906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	691b      	ldr	r3, [r3, #16]
 800e41e:	f003 0310 	and.w	r3, r3, #16
 800e422:	2b10      	cmp	r3, #16
 800e424:	d122      	bne.n	800e46c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	f003 0310 	and.w	r3, r3, #16
 800e430:	2b10      	cmp	r3, #16
 800e432:	d11b      	bne.n	800e46c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f06f 0210 	mvn.w	r2, #16
 800e43c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2208      	movs	r2, #8
 800e442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	69db      	ldr	r3, [r3, #28]
 800e44a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fa4d 	bl	800e8f2 <HAL_TIM_IC_CaptureCallback>
 800e458:	e005      	b.n	800e466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 fa3f 	bl	800e8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fa50 	bl	800e906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	f003 0301 	and.w	r3, r3, #1
 800e476:	2b01      	cmp	r3, #1
 800e478:	d10e      	bne.n	800e498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	f003 0301 	and.w	r3, r3, #1
 800e484:	2b01      	cmp	r3, #1
 800e486:	d107      	bne.n	800e498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f06f 0201 	mvn.w	r2, #1
 800e490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7fb f91a 	bl	80096cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4a2:	2b80      	cmp	r3, #128	; 0x80
 800e4a4:	d10e      	bne.n	800e4c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b0:	2b80      	cmp	r3, #128	; 0x80
 800e4b2:	d107      	bne.n	800e4c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e4bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fee8 	bl	800f294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	691b      	ldr	r3, [r3, #16]
 800e4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4ce:	2b40      	cmp	r3, #64	; 0x40
 800e4d0:	d10e      	bne.n	800e4f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4dc:	2b40      	cmp	r3, #64	; 0x40
 800e4de:	d107      	bne.n	800e4f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e4e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fa15 	bl	800e91a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	f003 0320 	and.w	r3, r3, #32
 800e4fa:	2b20      	cmp	r3, #32
 800e4fc:	d10e      	bne.n	800e51c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	f003 0320 	and.w	r3, r3, #32
 800e508:	2b20      	cmp	r3, #32
 800e50a:	d107      	bne.n	800e51c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f06f 0220 	mvn.w	r2, #32
 800e514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 feb2 	bl	800f280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e536:	2b01      	cmp	r3, #1
 800e538:	d101      	bne.n	800e53e <HAL_TIM_OC_ConfigChannel+0x1a>
 800e53a:	2302      	movs	r3, #2
 800e53c:	e04e      	b.n	800e5dc <HAL_TIM_OC_ConfigChannel+0xb8>
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2201      	movs	r2, #1
 800e542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2202      	movs	r2, #2
 800e54a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b0c      	cmp	r3, #12
 800e552:	d839      	bhi.n	800e5c8 <HAL_TIM_OC_ConfigChannel+0xa4>
 800e554:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <HAL_TIM_OC_ConfigChannel+0x38>)
 800e556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55a:	bf00      	nop
 800e55c:	0800e591 	.word	0x0800e591
 800e560:	0800e5c9 	.word	0x0800e5c9
 800e564:	0800e5c9 	.word	0x0800e5c9
 800e568:	0800e5c9 	.word	0x0800e5c9
 800e56c:	0800e59f 	.word	0x0800e59f
 800e570:	0800e5c9 	.word	0x0800e5c9
 800e574:	0800e5c9 	.word	0x0800e5c9
 800e578:	0800e5c9 	.word	0x0800e5c9
 800e57c:	0800e5ad 	.word	0x0800e5ad
 800e580:	0800e5c9 	.word	0x0800e5c9
 800e584:	0800e5c9 	.word	0x0800e5c9
 800e588:	0800e5c9 	.word	0x0800e5c9
 800e58c:	0800e5bb 	.word	0x0800e5bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68b9      	ldr	r1, [r7, #8]
 800e596:	4618      	mov	r0, r3
 800e598:	f000 fa6a 	bl	800ea70 <TIM_OC1_SetConfig>
      break;
 800e59c:	e015      	b.n	800e5ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f000 fad3 	bl	800eb50 <TIM_OC2_SetConfig>
      break;
 800e5aa:	e00e      	b.n	800e5ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68b9      	ldr	r1, [r7, #8]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f000 fb42 	bl	800ec3c <TIM_OC3_SetConfig>
      break;
 800e5b8:	e007      	b.n	800e5ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	68b9      	ldr	r1, [r7, #8]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 fbaf 	bl	800ed24 <TIM_OC4_SetConfig>
      break;
 800e5c6:	e000      	b.n	800e5ca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800e5c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d101      	bne.n	800e5fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e5fa:	2302      	movs	r3, #2
 800e5fc:	e0b4      	b.n	800e768 <HAL_TIM_PWM_ConfigChannel+0x184>
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2201      	movs	r2, #1
 800e602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2202      	movs	r2, #2
 800e60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b0c      	cmp	r3, #12
 800e612:	f200 809f 	bhi.w	800e754 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e616:	a201      	add	r2, pc, #4	; (adr r2, 800e61c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61c:	0800e651 	.word	0x0800e651
 800e620:	0800e755 	.word	0x0800e755
 800e624:	0800e755 	.word	0x0800e755
 800e628:	0800e755 	.word	0x0800e755
 800e62c:	0800e691 	.word	0x0800e691
 800e630:	0800e755 	.word	0x0800e755
 800e634:	0800e755 	.word	0x0800e755
 800e638:	0800e755 	.word	0x0800e755
 800e63c:	0800e6d3 	.word	0x0800e6d3
 800e640:	0800e755 	.word	0x0800e755
 800e644:	0800e755 	.word	0x0800e755
 800e648:	0800e755 	.word	0x0800e755
 800e64c:	0800e713 	.word	0x0800e713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68b9      	ldr	r1, [r7, #8]
 800e656:	4618      	mov	r0, r3
 800e658:	f000 fa0a 	bl	800ea70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	699a      	ldr	r2, [r3, #24]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f042 0208 	orr.w	r2, r2, #8
 800e66a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	699a      	ldr	r2, [r3, #24]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f022 0204 	bic.w	r2, r2, #4
 800e67a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6999      	ldr	r1, [r3, #24]
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	691a      	ldr	r2, [r3, #16]
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	430a      	orrs	r2, r1
 800e68c:	619a      	str	r2, [r3, #24]
      break;
 800e68e:	e062      	b.n	800e756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68b9      	ldr	r1, [r7, #8]
 800e696:	4618      	mov	r0, r3
 800e698:	f000 fa5a 	bl	800eb50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	699a      	ldr	r2, [r3, #24]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	699a      	ldr	r2, [r3, #24]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6999      	ldr	r1, [r3, #24]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	691b      	ldr	r3, [r3, #16]
 800e6c6:	021a      	lsls	r2, r3, #8
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	430a      	orrs	r2, r1
 800e6ce:	619a      	str	r2, [r3, #24]
      break;
 800e6d0:	e041      	b.n	800e756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	68b9      	ldr	r1, [r7, #8]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 faaf 	bl	800ec3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	69da      	ldr	r2, [r3, #28]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f042 0208 	orr.w	r2, r2, #8
 800e6ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	69da      	ldr	r2, [r3, #28]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f022 0204 	bic.w	r2, r2, #4
 800e6fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	69d9      	ldr	r1, [r3, #28]
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	691a      	ldr	r2, [r3, #16]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	430a      	orrs	r2, r1
 800e70e:	61da      	str	r2, [r3, #28]
      break;
 800e710:	e021      	b.n	800e756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68b9      	ldr	r1, [r7, #8]
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 fb03 	bl	800ed24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	69da      	ldr	r2, [r3, #28]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e72c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	69da      	ldr	r2, [r3, #28]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e73c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	69d9      	ldr	r1, [r3, #28]
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	691b      	ldr	r3, [r3, #16]
 800e748:	021a      	lsls	r2, r3, #8
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	430a      	orrs	r2, r1
 800e750:	61da      	str	r2, [r3, #28]
      break;
 800e752:	e000      	b.n	800e756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e754:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e780:	2b01      	cmp	r3, #1
 800e782:	d101      	bne.n	800e788 <HAL_TIM_ConfigClockSource+0x18>
 800e784:	2302      	movs	r3, #2
 800e786:	e0a6      	b.n	800e8d6 <HAL_TIM_ConfigClockSource+0x166>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2201      	movs	r2, #1
 800e78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2202      	movs	r2, #2
 800e794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e7a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e7ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	68fa      	ldr	r2, [r7, #12]
 800e7b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b40      	cmp	r3, #64	; 0x40
 800e7be:	d067      	beq.n	800e890 <HAL_TIM_ConfigClockSource+0x120>
 800e7c0:	2b40      	cmp	r3, #64	; 0x40
 800e7c2:	d80b      	bhi.n	800e7dc <HAL_TIM_ConfigClockSource+0x6c>
 800e7c4:	2b10      	cmp	r3, #16
 800e7c6:	d073      	beq.n	800e8b0 <HAL_TIM_ConfigClockSource+0x140>
 800e7c8:	2b10      	cmp	r3, #16
 800e7ca:	d802      	bhi.n	800e7d2 <HAL_TIM_ConfigClockSource+0x62>
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d06f      	beq.n	800e8b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e7d0:	e078      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e7d2:	2b20      	cmp	r3, #32
 800e7d4:	d06c      	beq.n	800e8b0 <HAL_TIM_ConfigClockSource+0x140>
 800e7d6:	2b30      	cmp	r3, #48	; 0x30
 800e7d8:	d06a      	beq.n	800e8b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e7da:	e073      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e7dc:	2b70      	cmp	r3, #112	; 0x70
 800e7de:	d00d      	beq.n	800e7fc <HAL_TIM_ConfigClockSource+0x8c>
 800e7e0:	2b70      	cmp	r3, #112	; 0x70
 800e7e2:	d804      	bhi.n	800e7ee <HAL_TIM_ConfigClockSource+0x7e>
 800e7e4:	2b50      	cmp	r3, #80	; 0x50
 800e7e6:	d033      	beq.n	800e850 <HAL_TIM_ConfigClockSource+0xe0>
 800e7e8:	2b60      	cmp	r3, #96	; 0x60
 800e7ea:	d041      	beq.n	800e870 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e7ec:	e06a      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e7ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7f2:	d066      	beq.n	800e8c2 <HAL_TIM_ConfigClockSource+0x152>
 800e7f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7f8:	d017      	beq.n	800e82a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e7fa:	e063      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6818      	ldr	r0, [r3, #0]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	6899      	ldr	r1, [r3, #8]
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	685a      	ldr	r2, [r3, #4]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	f000 fb5a 	bl	800eec4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e81e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	609a      	str	r2, [r3, #8]
      break;
 800e828:	e04c      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6818      	ldr	r0, [r3, #0]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	6899      	ldr	r1, [r3, #8]
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	685a      	ldr	r2, [r3, #4]
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	f000 fb43 	bl	800eec4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	689a      	ldr	r2, [r3, #8]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e84c:	609a      	str	r2, [r3, #8]
      break;
 800e84e:	e039      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6818      	ldr	r0, [r3, #0]
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	6859      	ldr	r1, [r3, #4]
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	461a      	mov	r2, r3
 800e85e:	f000 fab7 	bl	800edd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	2150      	movs	r1, #80	; 0x50
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 fb10 	bl	800ee8e <TIM_ITRx_SetConfig>
      break;
 800e86e:	e029      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6818      	ldr	r0, [r3, #0]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	6859      	ldr	r1, [r3, #4]
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	461a      	mov	r2, r3
 800e87e:	f000 fad6 	bl	800ee2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2160      	movs	r1, #96	; 0x60
 800e888:	4618      	mov	r0, r3
 800e88a:	f000 fb00 	bl	800ee8e <TIM_ITRx_SetConfig>
      break;
 800e88e:	e019      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6818      	ldr	r0, [r3, #0]
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	6859      	ldr	r1, [r3, #4]
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	461a      	mov	r2, r3
 800e89e:	f000 fa97 	bl	800edd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2140      	movs	r1, #64	; 0x40
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f000 faf0 	bl	800ee8e <TIM_ITRx_SetConfig>
      break;
 800e8ae:	e009      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	f000 fae7 	bl	800ee8e <TIM_ITRx_SetConfig>
      break;
 800e8c0:	e000      	b.n	800e8c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e8c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8de:	b480      	push	{r7}
 800e8e0:	b083      	sub	sp, #12
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8e6:	bf00      	nop
 800e8e8:	370c      	adds	r7, #12
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr

0800e8f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8f2:	b480      	push	{r7}
 800e8f4:	b083      	sub	sp, #12
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8fa:	bf00      	nop
 800e8fc:	370c      	adds	r7, #12
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e906:	b480      	push	{r7}
 800e908:	b083      	sub	sp, #12
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e90e:	bf00      	nop
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e91a:	b480      	push	{r7}
 800e91c:	b083      	sub	sp, #12
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e922:	bf00      	nop
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
	...

0800e930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a40      	ldr	r2, [pc, #256]	; (800ea44 <TIM_Base_SetConfig+0x114>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d013      	beq.n	800e970 <TIM_Base_SetConfig+0x40>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e94e:	d00f      	beq.n	800e970 <TIM_Base_SetConfig+0x40>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4a3d      	ldr	r2, [pc, #244]	; (800ea48 <TIM_Base_SetConfig+0x118>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d00b      	beq.n	800e970 <TIM_Base_SetConfig+0x40>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4a3c      	ldr	r2, [pc, #240]	; (800ea4c <TIM_Base_SetConfig+0x11c>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d007      	beq.n	800e970 <TIM_Base_SetConfig+0x40>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	4a3b      	ldr	r2, [pc, #236]	; (800ea50 <TIM_Base_SetConfig+0x120>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d003      	beq.n	800e970 <TIM_Base_SetConfig+0x40>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4a3a      	ldr	r2, [pc, #232]	; (800ea54 <TIM_Base_SetConfig+0x124>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d108      	bne.n	800e982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	4313      	orrs	r3, r2
 800e980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a2f      	ldr	r2, [pc, #188]	; (800ea44 <TIM_Base_SetConfig+0x114>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d02b      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e990:	d027      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4a2c      	ldr	r2, [pc, #176]	; (800ea48 <TIM_Base_SetConfig+0x118>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d023      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	4a2b      	ldr	r2, [pc, #172]	; (800ea4c <TIM_Base_SetConfig+0x11c>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d01f      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	4a2a      	ldr	r2, [pc, #168]	; (800ea50 <TIM_Base_SetConfig+0x120>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d01b      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	4a29      	ldr	r2, [pc, #164]	; (800ea54 <TIM_Base_SetConfig+0x124>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d017      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	4a28      	ldr	r2, [pc, #160]	; (800ea58 <TIM_Base_SetConfig+0x128>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d013      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	4a27      	ldr	r2, [pc, #156]	; (800ea5c <TIM_Base_SetConfig+0x12c>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d00f      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4a26      	ldr	r2, [pc, #152]	; (800ea60 <TIM_Base_SetConfig+0x130>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d00b      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4a25      	ldr	r2, [pc, #148]	; (800ea64 <TIM_Base_SetConfig+0x134>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d007      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4a24      	ldr	r2, [pc, #144]	; (800ea68 <TIM_Base_SetConfig+0x138>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d003      	beq.n	800e9e2 <TIM_Base_SetConfig+0xb2>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4a23      	ldr	r2, [pc, #140]	; (800ea6c <TIM_Base_SetConfig+0x13c>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d108      	bne.n	800e9f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	695b      	ldr	r3, [r3, #20]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	689a      	ldr	r2, [r3, #8]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4a0a      	ldr	r2, [pc, #40]	; (800ea44 <TIM_Base_SetConfig+0x114>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d003      	beq.n	800ea28 <TIM_Base_SetConfig+0xf8>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4a0c      	ldr	r2, [pc, #48]	; (800ea54 <TIM_Base_SetConfig+0x124>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d103      	bne.n	800ea30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	691a      	ldr	r2, [r3, #16]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	615a      	str	r2, [r3, #20]
}
 800ea36:	bf00      	nop
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	40010000 	.word	0x40010000
 800ea48:	40000400 	.word	0x40000400
 800ea4c:	40000800 	.word	0x40000800
 800ea50:	40000c00 	.word	0x40000c00
 800ea54:	40010400 	.word	0x40010400
 800ea58:	40014000 	.word	0x40014000
 800ea5c:	40014400 	.word	0x40014400
 800ea60:	40014800 	.word	0x40014800
 800ea64:	40001800 	.word	0x40001800
 800ea68:	40001c00 	.word	0x40001c00
 800ea6c:	40002000 	.word	0x40002000

0800ea70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	f023 0201 	bic.w	r2, r3, #1
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a1b      	ldr	r3, [r3, #32]
 800ea8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	699b      	ldr	r3, [r3, #24]
 800ea96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f023 0303 	bic.w	r3, r3, #3
 800eaa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	f023 0302 	bic.w	r3, r3, #2
 800eab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	697a      	ldr	r2, [r7, #20]
 800eac0:	4313      	orrs	r3, r2
 800eac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4a20      	ldr	r2, [pc, #128]	; (800eb48 <TIM_OC1_SetConfig+0xd8>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d003      	beq.n	800ead4 <TIM_OC1_SetConfig+0x64>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a1f      	ldr	r2, [pc, #124]	; (800eb4c <TIM_OC1_SetConfig+0xdc>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d10c      	bne.n	800eaee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	f023 0308 	bic.w	r3, r3, #8
 800eada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f023 0304 	bic.w	r3, r3, #4
 800eaec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a15      	ldr	r2, [pc, #84]	; (800eb48 <TIM_OC1_SetConfig+0xd8>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d003      	beq.n	800eafe <TIM_OC1_SetConfig+0x8e>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a14      	ldr	r2, [pc, #80]	; (800eb4c <TIM_OC1_SetConfig+0xdc>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d111      	bne.n	800eb22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	695b      	ldr	r3, [r3, #20]
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	699b      	ldr	r3, [r3, #24]
 800eb1c:	693a      	ldr	r2, [r7, #16]
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	693a      	ldr	r2, [r7, #16]
 800eb26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	685a      	ldr	r2, [r3, #4]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	697a      	ldr	r2, [r7, #20]
 800eb3a:	621a      	str	r2, [r3, #32]
}
 800eb3c:	bf00      	nop
 800eb3e:	371c      	adds	r7, #28
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	40010000 	.word	0x40010000
 800eb4c:	40010400 	.word	0x40010400

0800eb50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b087      	sub	sp, #28
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a1b      	ldr	r3, [r3, #32]
 800eb5e:	f023 0210 	bic.w	r2, r3, #16
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6a1b      	ldr	r3, [r3, #32]
 800eb6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	021b      	lsls	r3, r3, #8
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	4313      	orrs	r3, r2
 800eb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f023 0320 	bic.w	r3, r3, #32
 800eb9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	011b      	lsls	r3, r3, #4
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	4313      	orrs	r3, r2
 800eba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a22      	ldr	r2, [pc, #136]	; (800ec34 <TIM_OC2_SetConfig+0xe4>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d003      	beq.n	800ebb8 <TIM_OC2_SetConfig+0x68>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	4a21      	ldr	r2, [pc, #132]	; (800ec38 <TIM_OC2_SetConfig+0xe8>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d10d      	bne.n	800ebd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	011b      	lsls	r3, r3, #4
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	4a17      	ldr	r2, [pc, #92]	; (800ec34 <TIM_OC2_SetConfig+0xe4>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d003      	beq.n	800ebe4 <TIM_OC2_SetConfig+0x94>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4a16      	ldr	r2, [pc, #88]	; (800ec38 <TIM_OC2_SetConfig+0xe8>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d113      	bne.n	800ec0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ebea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	695b      	ldr	r3, [r3, #20]
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	699b      	ldr	r3, [r3, #24]
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	693a      	ldr	r2, [r7, #16]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	693a      	ldr	r2, [r7, #16]
 800ec10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	685a      	ldr	r2, [r3, #4]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	621a      	str	r2, [r3, #32]
}
 800ec26:	bf00      	nop
 800ec28:	371c      	adds	r7, #28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	40010000 	.word	0x40010000
 800ec38:	40010400 	.word	0x40010400

0800ec3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b087      	sub	sp, #28
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6a1b      	ldr	r3, [r3, #32]
 800ec4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6a1b      	ldr	r3, [r3, #32]
 800ec56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	69db      	ldr	r3, [r3, #28]
 800ec62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f023 0303 	bic.w	r3, r3, #3
 800ec72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	021b      	lsls	r3, r3, #8
 800ec8c:	697a      	ldr	r2, [r7, #20]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a21      	ldr	r2, [pc, #132]	; (800ed1c <TIM_OC3_SetConfig+0xe0>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d003      	beq.n	800eca2 <TIM_OC3_SetConfig+0x66>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a20      	ldr	r2, [pc, #128]	; (800ed20 <TIM_OC3_SetConfig+0xe4>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d10d      	bne.n	800ecbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	021b      	lsls	r3, r3, #8
 800ecb0:	697a      	ldr	r2, [r7, #20]
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ecbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a16      	ldr	r2, [pc, #88]	; (800ed1c <TIM_OC3_SetConfig+0xe0>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d003      	beq.n	800ecce <TIM_OC3_SetConfig+0x92>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4a15      	ldr	r2, [pc, #84]	; (800ed20 <TIM_OC3_SetConfig+0xe4>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d113      	bne.n	800ecf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ecdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	695b      	ldr	r3, [r3, #20]
 800ece2:	011b      	lsls	r3, r3, #4
 800ece4:	693a      	ldr	r2, [r7, #16]
 800ece6:	4313      	orrs	r3, r2
 800ece8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	699b      	ldr	r3, [r3, #24]
 800ecee:	011b      	lsls	r3, r3, #4
 800ecf0:	693a      	ldr	r2, [r7, #16]
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	693a      	ldr	r2, [r7, #16]
 800ecfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	697a      	ldr	r2, [r7, #20]
 800ed0e:	621a      	str	r2, [r3, #32]
}
 800ed10:	bf00      	nop
 800ed12:	371c      	adds	r7, #28
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr
 800ed1c:	40010000 	.word	0x40010000
 800ed20:	40010400 	.word	0x40010400

0800ed24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b087      	sub	sp, #28
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a1b      	ldr	r3, [r3, #32]
 800ed3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	69db      	ldr	r3, [r3, #28]
 800ed4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	021b      	lsls	r3, r3, #8
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	031b      	lsls	r3, r3, #12
 800ed76:	693a      	ldr	r2, [r7, #16]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a12      	ldr	r2, [pc, #72]	; (800edc8 <TIM_OC4_SetConfig+0xa4>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d003      	beq.n	800ed8c <TIM_OC4_SetConfig+0x68>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a11      	ldr	r2, [pc, #68]	; (800edcc <TIM_OC4_SetConfig+0xa8>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d109      	bne.n	800eda0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	695b      	ldr	r3, [r3, #20]
 800ed98:	019b      	lsls	r3, r3, #6
 800ed9a:	697a      	ldr	r2, [r7, #20]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	697a      	ldr	r2, [r7, #20]
 800eda4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	621a      	str	r2, [r3, #32]
}
 800edba:	bf00      	nop
 800edbc:	371c      	adds	r7, #28
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	40010000 	.word	0x40010000
 800edcc:	40010400 	.word	0x40010400

0800edd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b087      	sub	sp, #28
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6a1b      	ldr	r3, [r3, #32]
 800ede0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6a1b      	ldr	r3, [r3, #32]
 800ede6:	f023 0201 	bic.w	r2, r3, #1
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	699b      	ldr	r3, [r3, #24]
 800edf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800edfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	011b      	lsls	r3, r3, #4
 800ee00:	693a      	ldr	r2, [r7, #16]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	f023 030a 	bic.w	r3, r3, #10
 800ee0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	693a      	ldr	r2, [r7, #16]
 800ee1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	621a      	str	r2, [r3, #32]
}
 800ee22:	bf00      	nop
 800ee24:	371c      	adds	r7, #28
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr

0800ee2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee2e:	b480      	push	{r7}
 800ee30:	b087      	sub	sp, #28
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	60b9      	str	r1, [r7, #8]
 800ee38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	f023 0210 	bic.w	r2, r3, #16
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6a1b      	ldr	r3, [r3, #32]
 800ee50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ee58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	031b      	lsls	r3, r3, #12
 800ee5e:	697a      	ldr	r2, [r7, #20]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ee6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	011b      	lsls	r3, r3, #4
 800ee70:	693a      	ldr	r2, [r7, #16]
 800ee72:	4313      	orrs	r3, r2
 800ee74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	697a      	ldr	r2, [r7, #20]
 800ee7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	693a      	ldr	r2, [r7, #16]
 800ee80:	621a      	str	r2, [r3, #32]
}
 800ee82:	bf00      	nop
 800ee84:	371c      	adds	r7, #28
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr

0800ee8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee8e:	b480      	push	{r7}
 800ee90:	b085      	sub	sp, #20
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	689b      	ldr	r3, [r3, #8]
 800ee9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	f043 0307 	orr.w	r3, r3, #7
 800eeb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	609a      	str	r2, [r3, #8]
}
 800eeb8:	bf00      	nop
 800eeba:	3714      	adds	r7, #20
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b087      	sub	sp, #28
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	021a      	lsls	r2, r3, #8
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	431a      	orrs	r2, r3
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	4313      	orrs	r3, r2
 800eeec:	697a      	ldr	r2, [r7, #20]
 800eeee:	4313      	orrs	r3, r2
 800eef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	697a      	ldr	r2, [r7, #20]
 800eef6:	609a      	str	r2, [r3, #8]
}
 800eef8:	bf00      	nop
 800eefa:	371c      	adds	r7, #28
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr

0800ef04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b087      	sub	sp, #28
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	f003 031f 	and.w	r3, r3, #31
 800ef16:	2201      	movs	r2, #1
 800ef18:	fa02 f303 	lsl.w	r3, r2, r3
 800ef1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6a1a      	ldr	r2, [r3, #32]
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	43db      	mvns	r3, r3
 800ef26:	401a      	ands	r2, r3
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6a1a      	ldr	r2, [r3, #32]
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	f003 031f 	and.w	r3, r3, #31
 800ef36:	6879      	ldr	r1, [r7, #4]
 800ef38:	fa01 f303 	lsl.w	r3, r1, r3
 800ef3c:	431a      	orrs	r2, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	621a      	str	r2, [r3, #32]
}
 800ef42:	bf00      	nop
 800ef44:	371c      	adds	r7, #28
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b084      	sub	sp, #16
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2b04      	cmp	r3, #4
 800ef5c:	d00d      	beq.n	800ef7a <HAL_TIMEx_OCN_Start_IT+0x2c>
 800ef5e:	2b08      	cmp	r3, #8
 800ef60:	d014      	beq.n	800ef8c <HAL_TIMEx_OCN_Start_IT+0x3e>
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d000      	beq.n	800ef68 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 800ef66:	e01a      	b.n	800ef9e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68da      	ldr	r2, [r3, #12]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f042 0202 	orr.w	r2, r2, #2
 800ef76:	60da      	str	r2, [r3, #12]
      break;
 800ef78:	e011      	b.n	800ef9e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68da      	ldr	r2, [r3, #12]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f042 0204 	orr.w	r2, r2, #4
 800ef88:	60da      	str	r2, [r3, #12]
      break;
 800ef8a:	e008      	b.n	800ef9e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68da      	ldr	r2, [r3, #12]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f042 0208 	orr.w	r2, r2, #8
 800ef9a:	60da      	str	r2, [r3, #12]
      break;
 800ef9c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68da      	ldr	r2, [r3, #12]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800efac:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2204      	movs	r2, #4
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f000 f976 	bl	800f2a8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800efca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	f003 0307 	and.w	r3, r3, #7
 800efd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2b06      	cmp	r3, #6
 800efdc:	d007      	beq.n	800efee <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f042 0201 	orr.w	r2, r2, #1
 800efec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	2b04      	cmp	r3, #4
 800f006:	d00d      	beq.n	800f024 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 800f008:	2b08      	cmp	r3, #8
 800f00a:	d014      	beq.n	800f036 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d000      	beq.n	800f012 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800f010:	e01a      	b.n	800f048 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68da      	ldr	r2, [r3, #12]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f022 0202 	bic.w	r2, r2, #2
 800f020:	60da      	str	r2, [r3, #12]
      break;
 800f022:	e011      	b.n	800f048 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68da      	ldr	r2, [r3, #12]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f022 0204 	bic.w	r2, r2, #4
 800f032:	60da      	str	r2, [r3, #12]
      break;
 800f034:	e008      	b.n	800f048 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68da      	ldr	r2, [r3, #12]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f022 0208 	bic.w	r2, r2, #8
 800f044:	60da      	str	r2, [r3, #12]
      break;
 800f046:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2200      	movs	r2, #0
 800f04e:	6839      	ldr	r1, [r7, #0]
 800f050:	4618      	mov	r0, r3
 800f052:	f000 f929 	bl	800f2a8 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	6a1b      	ldr	r3, [r3, #32]
 800f05c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	f240 4344 	movw	r3, #1092	; 0x444
 800f064:	4013      	ands	r3, r2
 800f066:	2b00      	cmp	r3, #0
 800f068:	d107      	bne.n	800f07a <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68da      	ldr	r2, [r3, #12]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f078:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	6a1a      	ldr	r2, [r3, #32]
 800f080:	f241 1311 	movw	r3, #4369	; 0x1111
 800f084:	4013      	ands	r3, r2
 800f086:	2b00      	cmp	r3, #0
 800f088:	d10f      	bne.n	800f0aa <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	6a1a      	ldr	r2, [r3, #32]
 800f090:	f240 4344 	movw	r3, #1092	; 0x444
 800f094:	4013      	ands	r3, r2
 800f096:	2b00      	cmp	r3, #0
 800f098:	d107      	bne.n	800f0aa <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f0a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	6a1a      	ldr	r2, [r3, #32]
 800f0b0:	f241 1311 	movw	r3, #4369	; 0x1111
 800f0b4:	4013      	ands	r3, r2
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10f      	bne.n	800f0da <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	6a1a      	ldr	r2, [r3, #32]
 800f0c0:	f240 4344 	movw	r3, #1092	; 0x444
 800f0c4:	4013      	ands	r3, r2
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d107      	bne.n	800f0da <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f022 0201 	bic.w	r2, r2, #1
 800f0d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3710      	adds	r7, #16
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d101      	bne.n	800f0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	e05a      	b.n	800f1b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2201      	movs	r2, #1
 800f100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2202      	movs	r2, #2
 800f108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	4313      	orrs	r3, r2
 800f12c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	68fa      	ldr	r2, [r7, #12]
 800f134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a21      	ldr	r2, [pc, #132]	; (800f1c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d022      	beq.n	800f186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f148:	d01d      	beq.n	800f186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4a1d      	ldr	r2, [pc, #116]	; (800f1c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d018      	beq.n	800f186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a1b      	ldr	r2, [pc, #108]	; (800f1c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d013      	beq.n	800f186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	4a1a      	ldr	r2, [pc, #104]	; (800f1cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d00e      	beq.n	800f186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4a18      	ldr	r2, [pc, #96]	; (800f1d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	d009      	beq.n	800f186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a17      	ldr	r2, [pc, #92]	; (800f1d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d004      	beq.n	800f186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a15      	ldr	r2, [pc, #84]	; (800f1d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d10c      	bne.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f18c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	68ba      	ldr	r2, [r7, #8]
 800f194:	4313      	orrs	r3, r2
 800f196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3714      	adds	r7, #20
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	40010000 	.word	0x40010000
 800f1c4:	40000400 	.word	0x40000400
 800f1c8:	40000800 	.word	0x40000800
 800f1cc:	40000c00 	.word	0x40000c00
 800f1d0:	40010400 	.word	0x40010400
 800f1d4:	40014000 	.word	0x40014000
 800f1d8:	40001800 	.word	0x40001800

0800f1dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d101      	bne.n	800f1f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	e03d      	b.n	800f274 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	4313      	orrs	r3, r2
 800f20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	4313      	orrs	r3, r2
 800f21a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	4313      	orrs	r3, r2
 800f228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4313      	orrs	r3, r2
 800f236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	4313      	orrs	r3, r2
 800f244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	695b      	ldr	r3, [r3, #20]
 800f250:	4313      	orrs	r3, r2
 800f252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	69db      	ldr	r3, [r3, #28]
 800f25e:	4313      	orrs	r3, r2
 800f260:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f272:	2300      	movs	r3, #0
}
 800f274:	4618      	mov	r0, r3
 800f276:	3714      	adds	r7, #20
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f29c:	bf00      	nop
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b087      	sub	sp, #28
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f003 031f 	and.w	r3, r3, #31
 800f2ba:	2204      	movs	r2, #4
 800f2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f2c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6a1a      	ldr	r2, [r3, #32]
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	43db      	mvns	r3, r3
 800f2ca:	401a      	ands	r2, r3
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6a1a      	ldr	r2, [r3, #32]
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	f003 031f 	and.w	r3, r3, #31
 800f2da:	6879      	ldr	r1, [r7, #4]
 800f2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f2e0:	431a      	orrs	r2, r3
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	621a      	str	r2, [r3, #32]
}
 800f2e6:	bf00      	nop
 800f2e8:	371c      	adds	r7, #28
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr

0800f2f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b082      	sub	sp, #8
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d101      	bne.n	800f304 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f300:	2301      	movs	r3, #1
 800f302:	e03f      	b.n	800f384 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d106      	bne.n	800f31e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7fb fe05 	bl	800af28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2224      	movs	r2, #36	; 0x24
 800f322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68da      	ldr	r2, [r3, #12]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f334:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 f90c 	bl	800f554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	691a      	ldr	r2, [r3, #16]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f34a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	695a      	ldr	r2, [r3, #20]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f35a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	68da      	ldr	r2, [r3, #12]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f36a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2220      	movs	r2, #32
 800f376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2220      	movs	r2, #32
 800f37e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b088      	sub	sp, #32
 800f390:	af02      	add	r7, sp, #8
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	603b      	str	r3, [r7, #0]
 800f398:	4613      	mov	r3, r2
 800f39a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800f39c:	2300      	movs	r3, #0
 800f39e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	2b20      	cmp	r3, #32
 800f3aa:	f040 8083 	bne.w	800f4b4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <HAL_UART_Transmit+0x2e>
 800f3b4:	88fb      	ldrh	r3, [r7, #6]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e07b      	b.n	800f4b6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d101      	bne.n	800f3cc <HAL_UART_Transmit+0x40>
 800f3c8:	2302      	movs	r3, #2
 800f3ca:	e074      	b.n	800f4b6 <HAL_UART_Transmit+0x12a>
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2221      	movs	r2, #33	; 0x21
 800f3de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800f3e2:	f7fc f983 	bl	800b6ec <HAL_GetTick>
 800f3e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	88fa      	ldrh	r2, [r7, #6]
 800f3ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	88fa      	ldrh	r2, [r7, #6]
 800f3f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800f3fc:	e042      	b.n	800f484 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f402:	b29b      	uxth	r3, r3
 800f404:	3b01      	subs	r3, #1
 800f406:	b29a      	uxth	r2, r3
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f414:	d122      	bne.n	800f45c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	9300      	str	r3, [sp, #0]
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	2200      	movs	r2, #0
 800f41e:	2180      	movs	r1, #128	; 0x80
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f000 f84c 	bl	800f4be <UART_WaitOnFlagUntilTimeout>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800f42c:	2303      	movs	r3, #3
 800f42e:	e042      	b.n	800f4b6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	461a      	mov	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f442:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	691b      	ldr	r3, [r3, #16]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d103      	bne.n	800f454 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	3302      	adds	r3, #2
 800f450:	60bb      	str	r3, [r7, #8]
 800f452:	e017      	b.n	800f484 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	3301      	adds	r3, #1
 800f458:	60bb      	str	r3, [r7, #8]
 800f45a:	e013      	b.n	800f484 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	2200      	movs	r2, #0
 800f464:	2180      	movs	r1, #128	; 0x80
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f000 f829 	bl	800f4be <UART_WaitOnFlagUntilTimeout>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d001      	beq.n	800f476 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800f472:	2303      	movs	r3, #3
 800f474:	e01f      	b.n	800f4b6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	1c5a      	adds	r2, r3, #1
 800f47a:	60ba      	str	r2, [r7, #8]
 800f47c:	781a      	ldrb	r2, [r3, #0]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f488:	b29b      	uxth	r3, r3
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1b7      	bne.n	800f3fe <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	9300      	str	r3, [sp, #0]
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	2200      	movs	r2, #0
 800f496:	2140      	movs	r1, #64	; 0x40
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 f810 	bl	800f4be <UART_WaitOnFlagUntilTimeout>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d001      	beq.n	800f4a8 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800f4a4:	2303      	movs	r3, #3
 800f4a6:	e006      	b.n	800f4b6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2220      	movs	r2, #32
 800f4ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	e000      	b.n	800f4b6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800f4b4:	2302      	movs	r3, #2
  }
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b084      	sub	sp, #16
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	60f8      	str	r0, [r7, #12]
 800f4c6:	60b9      	str	r1, [r7, #8]
 800f4c8:	603b      	str	r3, [r7, #0]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4ce:	e02c      	b.n	800f52a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d6:	d028      	beq.n	800f52a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d007      	beq.n	800f4ee <UART_WaitOnFlagUntilTimeout+0x30>
 800f4de:	f7fc f905 	bl	800b6ec <HAL_GetTick>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	1ad3      	subs	r3, r2, r3
 800f4e8:	69ba      	ldr	r2, [r7, #24]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d21d      	bcs.n	800f52a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	68da      	ldr	r2, [r3, #12]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f4fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	695a      	ldr	r2, [r3, #20]
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f022 0201 	bic.w	r2, r2, #1
 800f50c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2220      	movs	r2, #32
 800f512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2220      	movs	r2, #32
 800f51a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2200      	movs	r2, #0
 800f522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800f526:	2303      	movs	r3, #3
 800f528:	e00f      	b.n	800f54a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	4013      	ands	r3, r2
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	429a      	cmp	r2, r3
 800f538:	bf0c      	ite	eq
 800f53a:	2301      	moveq	r3, #1
 800f53c:	2300      	movne	r3, #0
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	461a      	mov	r2, r3
 800f542:	79fb      	ldrb	r3, [r7, #7]
 800f544:	429a      	cmp	r2, r3
 800f546:	d0c3      	beq.n	800f4d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f558:	b085      	sub	sp, #20
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	68da      	ldr	r2, [r3, #12]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	430a      	orrs	r2, r1
 800f572:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	689a      	ldr	r2, [r3, #8]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	691b      	ldr	r3, [r3, #16]
 800f57c:	431a      	orrs	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	695b      	ldr	r3, [r3, #20]
 800f582:	431a      	orrs	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	69db      	ldr	r3, [r3, #28]
 800f588:	4313      	orrs	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f596:	f023 030c 	bic.w	r3, r3, #12
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	6812      	ldr	r2, [r2, #0]
 800f59e:	68f9      	ldr	r1, [r7, #12]
 800f5a0:	430b      	orrs	r3, r1
 800f5a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	695b      	ldr	r3, [r3, #20]
 800f5aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	699a      	ldr	r2, [r3, #24]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	430a      	orrs	r2, r1
 800f5b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	69db      	ldr	r3, [r3, #28]
 800f5be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5c2:	f040 818b 	bne.w	800f8dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4ac1      	ldr	r2, [pc, #772]	; (800f8d0 <UART_SetConfig+0x37c>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d005      	beq.n	800f5dc <UART_SetConfig+0x88>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4abf      	ldr	r2, [pc, #764]	; (800f8d4 <UART_SetConfig+0x380>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	f040 80bd 	bne.w	800f756 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f5dc:	f7fe fad0 	bl	800db80 <HAL_RCC_GetPCLK2Freq>
 800f5e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	461d      	mov	r5, r3
 800f5e6:	f04f 0600 	mov.w	r6, #0
 800f5ea:	46a8      	mov	r8, r5
 800f5ec:	46b1      	mov	r9, r6
 800f5ee:	eb18 0308 	adds.w	r3, r8, r8
 800f5f2:	eb49 0409 	adc.w	r4, r9, r9
 800f5f6:	4698      	mov	r8, r3
 800f5f8:	46a1      	mov	r9, r4
 800f5fa:	eb18 0805 	adds.w	r8, r8, r5
 800f5fe:	eb49 0906 	adc.w	r9, r9, r6
 800f602:	f04f 0100 	mov.w	r1, #0
 800f606:	f04f 0200 	mov.w	r2, #0
 800f60a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f60e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f612:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f616:	4688      	mov	r8, r1
 800f618:	4691      	mov	r9, r2
 800f61a:	eb18 0005 	adds.w	r0, r8, r5
 800f61e:	eb49 0106 	adc.w	r1, r9, r6
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	461d      	mov	r5, r3
 800f628:	f04f 0600 	mov.w	r6, #0
 800f62c:	196b      	adds	r3, r5, r5
 800f62e:	eb46 0406 	adc.w	r4, r6, r6
 800f632:	461a      	mov	r2, r3
 800f634:	4623      	mov	r3, r4
 800f636:	f7f9 fa3f 	bl	8008ab8 <__aeabi_uldivmod>
 800f63a:	4603      	mov	r3, r0
 800f63c:	460c      	mov	r4, r1
 800f63e:	461a      	mov	r2, r3
 800f640:	4ba5      	ldr	r3, [pc, #660]	; (800f8d8 <UART_SetConfig+0x384>)
 800f642:	fba3 2302 	umull	r2, r3, r3, r2
 800f646:	095b      	lsrs	r3, r3, #5
 800f648:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	461d      	mov	r5, r3
 800f650:	f04f 0600 	mov.w	r6, #0
 800f654:	46a9      	mov	r9, r5
 800f656:	46b2      	mov	sl, r6
 800f658:	eb19 0309 	adds.w	r3, r9, r9
 800f65c:	eb4a 040a 	adc.w	r4, sl, sl
 800f660:	4699      	mov	r9, r3
 800f662:	46a2      	mov	sl, r4
 800f664:	eb19 0905 	adds.w	r9, r9, r5
 800f668:	eb4a 0a06 	adc.w	sl, sl, r6
 800f66c:	f04f 0100 	mov.w	r1, #0
 800f670:	f04f 0200 	mov.w	r2, #0
 800f674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f678:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f67c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f680:	4689      	mov	r9, r1
 800f682:	4692      	mov	sl, r2
 800f684:	eb19 0005 	adds.w	r0, r9, r5
 800f688:	eb4a 0106 	adc.w	r1, sl, r6
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	461d      	mov	r5, r3
 800f692:	f04f 0600 	mov.w	r6, #0
 800f696:	196b      	adds	r3, r5, r5
 800f698:	eb46 0406 	adc.w	r4, r6, r6
 800f69c:	461a      	mov	r2, r3
 800f69e:	4623      	mov	r3, r4
 800f6a0:	f7f9 fa0a 	bl	8008ab8 <__aeabi_uldivmod>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	460c      	mov	r4, r1
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	4b8b      	ldr	r3, [pc, #556]	; (800f8d8 <UART_SetConfig+0x384>)
 800f6ac:	fba3 1302 	umull	r1, r3, r3, r2
 800f6b0:	095b      	lsrs	r3, r3, #5
 800f6b2:	2164      	movs	r1, #100	; 0x64
 800f6b4:	fb01 f303 	mul.w	r3, r1, r3
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	00db      	lsls	r3, r3, #3
 800f6bc:	3332      	adds	r3, #50	; 0x32
 800f6be:	4a86      	ldr	r2, [pc, #536]	; (800f8d8 <UART_SetConfig+0x384>)
 800f6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f6c4:	095b      	lsrs	r3, r3, #5
 800f6c6:	005b      	lsls	r3, r3, #1
 800f6c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f6cc:	4498      	add	r8, r3
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	461d      	mov	r5, r3
 800f6d2:	f04f 0600 	mov.w	r6, #0
 800f6d6:	46a9      	mov	r9, r5
 800f6d8:	46b2      	mov	sl, r6
 800f6da:	eb19 0309 	adds.w	r3, r9, r9
 800f6de:	eb4a 040a 	adc.w	r4, sl, sl
 800f6e2:	4699      	mov	r9, r3
 800f6e4:	46a2      	mov	sl, r4
 800f6e6:	eb19 0905 	adds.w	r9, r9, r5
 800f6ea:	eb4a 0a06 	adc.w	sl, sl, r6
 800f6ee:	f04f 0100 	mov.w	r1, #0
 800f6f2:	f04f 0200 	mov.w	r2, #0
 800f6f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f6fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f6fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f702:	4689      	mov	r9, r1
 800f704:	4692      	mov	sl, r2
 800f706:	eb19 0005 	adds.w	r0, r9, r5
 800f70a:	eb4a 0106 	adc.w	r1, sl, r6
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	461d      	mov	r5, r3
 800f714:	f04f 0600 	mov.w	r6, #0
 800f718:	196b      	adds	r3, r5, r5
 800f71a:	eb46 0406 	adc.w	r4, r6, r6
 800f71e:	461a      	mov	r2, r3
 800f720:	4623      	mov	r3, r4
 800f722:	f7f9 f9c9 	bl	8008ab8 <__aeabi_uldivmod>
 800f726:	4603      	mov	r3, r0
 800f728:	460c      	mov	r4, r1
 800f72a:	461a      	mov	r2, r3
 800f72c:	4b6a      	ldr	r3, [pc, #424]	; (800f8d8 <UART_SetConfig+0x384>)
 800f72e:	fba3 1302 	umull	r1, r3, r3, r2
 800f732:	095b      	lsrs	r3, r3, #5
 800f734:	2164      	movs	r1, #100	; 0x64
 800f736:	fb01 f303 	mul.w	r3, r1, r3
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	00db      	lsls	r3, r3, #3
 800f73e:	3332      	adds	r3, #50	; 0x32
 800f740:	4a65      	ldr	r2, [pc, #404]	; (800f8d8 <UART_SetConfig+0x384>)
 800f742:	fba2 2303 	umull	r2, r3, r2, r3
 800f746:	095b      	lsrs	r3, r3, #5
 800f748:	f003 0207 	and.w	r2, r3, #7
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4442      	add	r2, r8
 800f752:	609a      	str	r2, [r3, #8]
 800f754:	e26f      	b.n	800fc36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f756:	f7fe f9ff 	bl	800db58 <HAL_RCC_GetPCLK1Freq>
 800f75a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	461d      	mov	r5, r3
 800f760:	f04f 0600 	mov.w	r6, #0
 800f764:	46a8      	mov	r8, r5
 800f766:	46b1      	mov	r9, r6
 800f768:	eb18 0308 	adds.w	r3, r8, r8
 800f76c:	eb49 0409 	adc.w	r4, r9, r9
 800f770:	4698      	mov	r8, r3
 800f772:	46a1      	mov	r9, r4
 800f774:	eb18 0805 	adds.w	r8, r8, r5
 800f778:	eb49 0906 	adc.w	r9, r9, r6
 800f77c:	f04f 0100 	mov.w	r1, #0
 800f780:	f04f 0200 	mov.w	r2, #0
 800f784:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f788:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f78c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f790:	4688      	mov	r8, r1
 800f792:	4691      	mov	r9, r2
 800f794:	eb18 0005 	adds.w	r0, r8, r5
 800f798:	eb49 0106 	adc.w	r1, r9, r6
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	461d      	mov	r5, r3
 800f7a2:	f04f 0600 	mov.w	r6, #0
 800f7a6:	196b      	adds	r3, r5, r5
 800f7a8:	eb46 0406 	adc.w	r4, r6, r6
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	4623      	mov	r3, r4
 800f7b0:	f7f9 f982 	bl	8008ab8 <__aeabi_uldivmod>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	4b47      	ldr	r3, [pc, #284]	; (800f8d8 <UART_SetConfig+0x384>)
 800f7bc:	fba3 2302 	umull	r2, r3, r3, r2
 800f7c0:	095b      	lsrs	r3, r3, #5
 800f7c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	461d      	mov	r5, r3
 800f7ca:	f04f 0600 	mov.w	r6, #0
 800f7ce:	46a9      	mov	r9, r5
 800f7d0:	46b2      	mov	sl, r6
 800f7d2:	eb19 0309 	adds.w	r3, r9, r9
 800f7d6:	eb4a 040a 	adc.w	r4, sl, sl
 800f7da:	4699      	mov	r9, r3
 800f7dc:	46a2      	mov	sl, r4
 800f7de:	eb19 0905 	adds.w	r9, r9, r5
 800f7e2:	eb4a 0a06 	adc.w	sl, sl, r6
 800f7e6:	f04f 0100 	mov.w	r1, #0
 800f7ea:	f04f 0200 	mov.w	r2, #0
 800f7ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f7f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f7f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f7fa:	4689      	mov	r9, r1
 800f7fc:	4692      	mov	sl, r2
 800f7fe:	eb19 0005 	adds.w	r0, r9, r5
 800f802:	eb4a 0106 	adc.w	r1, sl, r6
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	461d      	mov	r5, r3
 800f80c:	f04f 0600 	mov.w	r6, #0
 800f810:	196b      	adds	r3, r5, r5
 800f812:	eb46 0406 	adc.w	r4, r6, r6
 800f816:	461a      	mov	r2, r3
 800f818:	4623      	mov	r3, r4
 800f81a:	f7f9 f94d 	bl	8008ab8 <__aeabi_uldivmod>
 800f81e:	4603      	mov	r3, r0
 800f820:	460c      	mov	r4, r1
 800f822:	461a      	mov	r2, r3
 800f824:	4b2c      	ldr	r3, [pc, #176]	; (800f8d8 <UART_SetConfig+0x384>)
 800f826:	fba3 1302 	umull	r1, r3, r3, r2
 800f82a:	095b      	lsrs	r3, r3, #5
 800f82c:	2164      	movs	r1, #100	; 0x64
 800f82e:	fb01 f303 	mul.w	r3, r1, r3
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	3332      	adds	r3, #50	; 0x32
 800f838:	4a27      	ldr	r2, [pc, #156]	; (800f8d8 <UART_SetConfig+0x384>)
 800f83a:	fba2 2303 	umull	r2, r3, r2, r3
 800f83e:	095b      	lsrs	r3, r3, #5
 800f840:	005b      	lsls	r3, r3, #1
 800f842:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f846:	4498      	add	r8, r3
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	461d      	mov	r5, r3
 800f84c:	f04f 0600 	mov.w	r6, #0
 800f850:	46a9      	mov	r9, r5
 800f852:	46b2      	mov	sl, r6
 800f854:	eb19 0309 	adds.w	r3, r9, r9
 800f858:	eb4a 040a 	adc.w	r4, sl, sl
 800f85c:	4699      	mov	r9, r3
 800f85e:	46a2      	mov	sl, r4
 800f860:	eb19 0905 	adds.w	r9, r9, r5
 800f864:	eb4a 0a06 	adc.w	sl, sl, r6
 800f868:	f04f 0100 	mov.w	r1, #0
 800f86c:	f04f 0200 	mov.w	r2, #0
 800f870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f874:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f878:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f87c:	4689      	mov	r9, r1
 800f87e:	4692      	mov	sl, r2
 800f880:	eb19 0005 	adds.w	r0, r9, r5
 800f884:	eb4a 0106 	adc.w	r1, sl, r6
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	461d      	mov	r5, r3
 800f88e:	f04f 0600 	mov.w	r6, #0
 800f892:	196b      	adds	r3, r5, r5
 800f894:	eb46 0406 	adc.w	r4, r6, r6
 800f898:	461a      	mov	r2, r3
 800f89a:	4623      	mov	r3, r4
 800f89c:	f7f9 f90c 	bl	8008ab8 <__aeabi_uldivmod>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	460c      	mov	r4, r1
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	4b0c      	ldr	r3, [pc, #48]	; (800f8d8 <UART_SetConfig+0x384>)
 800f8a8:	fba3 1302 	umull	r1, r3, r3, r2
 800f8ac:	095b      	lsrs	r3, r3, #5
 800f8ae:	2164      	movs	r1, #100	; 0x64
 800f8b0:	fb01 f303 	mul.w	r3, r1, r3
 800f8b4:	1ad3      	subs	r3, r2, r3
 800f8b6:	00db      	lsls	r3, r3, #3
 800f8b8:	3332      	adds	r3, #50	; 0x32
 800f8ba:	4a07      	ldr	r2, [pc, #28]	; (800f8d8 <UART_SetConfig+0x384>)
 800f8bc:	fba2 2303 	umull	r2, r3, r2, r3
 800f8c0:	095b      	lsrs	r3, r3, #5
 800f8c2:	f003 0207 	and.w	r2, r3, #7
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4442      	add	r2, r8
 800f8cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f8ce:	e1b2      	b.n	800fc36 <UART_SetConfig+0x6e2>
 800f8d0:	40011000 	.word	0x40011000
 800f8d4:	40011400 	.word	0x40011400
 800f8d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4ad7      	ldr	r2, [pc, #860]	; (800fc40 <UART_SetConfig+0x6ec>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d005      	beq.n	800f8f2 <UART_SetConfig+0x39e>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4ad6      	ldr	r2, [pc, #856]	; (800fc44 <UART_SetConfig+0x6f0>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	f040 80d1 	bne.w	800fa94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f8f2:	f7fe f945 	bl	800db80 <HAL_RCC_GetPCLK2Freq>
 800f8f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	469a      	mov	sl, r3
 800f8fc:	f04f 0b00 	mov.w	fp, #0
 800f900:	46d0      	mov	r8, sl
 800f902:	46d9      	mov	r9, fp
 800f904:	eb18 0308 	adds.w	r3, r8, r8
 800f908:	eb49 0409 	adc.w	r4, r9, r9
 800f90c:	4698      	mov	r8, r3
 800f90e:	46a1      	mov	r9, r4
 800f910:	eb18 080a 	adds.w	r8, r8, sl
 800f914:	eb49 090b 	adc.w	r9, r9, fp
 800f918:	f04f 0100 	mov.w	r1, #0
 800f91c:	f04f 0200 	mov.w	r2, #0
 800f920:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f924:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f928:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f92c:	4688      	mov	r8, r1
 800f92e:	4691      	mov	r9, r2
 800f930:	eb1a 0508 	adds.w	r5, sl, r8
 800f934:	eb4b 0609 	adc.w	r6, fp, r9
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	4619      	mov	r1, r3
 800f93e:	f04f 0200 	mov.w	r2, #0
 800f942:	f04f 0300 	mov.w	r3, #0
 800f946:	f04f 0400 	mov.w	r4, #0
 800f94a:	0094      	lsls	r4, r2, #2
 800f94c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f950:	008b      	lsls	r3, r1, #2
 800f952:	461a      	mov	r2, r3
 800f954:	4623      	mov	r3, r4
 800f956:	4628      	mov	r0, r5
 800f958:	4631      	mov	r1, r6
 800f95a:	f7f9 f8ad 	bl	8008ab8 <__aeabi_uldivmod>
 800f95e:	4603      	mov	r3, r0
 800f960:	460c      	mov	r4, r1
 800f962:	461a      	mov	r2, r3
 800f964:	4bb8      	ldr	r3, [pc, #736]	; (800fc48 <UART_SetConfig+0x6f4>)
 800f966:	fba3 2302 	umull	r2, r3, r3, r2
 800f96a:	095b      	lsrs	r3, r3, #5
 800f96c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	469b      	mov	fp, r3
 800f974:	f04f 0c00 	mov.w	ip, #0
 800f978:	46d9      	mov	r9, fp
 800f97a:	46e2      	mov	sl, ip
 800f97c:	eb19 0309 	adds.w	r3, r9, r9
 800f980:	eb4a 040a 	adc.w	r4, sl, sl
 800f984:	4699      	mov	r9, r3
 800f986:	46a2      	mov	sl, r4
 800f988:	eb19 090b 	adds.w	r9, r9, fp
 800f98c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f990:	f04f 0100 	mov.w	r1, #0
 800f994:	f04f 0200 	mov.w	r2, #0
 800f998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f99c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9a4:	4689      	mov	r9, r1
 800f9a6:	4692      	mov	sl, r2
 800f9a8:	eb1b 0509 	adds.w	r5, fp, r9
 800f9ac:	eb4c 060a 	adc.w	r6, ip, sl
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	f04f 0200 	mov.w	r2, #0
 800f9ba:	f04f 0300 	mov.w	r3, #0
 800f9be:	f04f 0400 	mov.w	r4, #0
 800f9c2:	0094      	lsls	r4, r2, #2
 800f9c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f9c8:	008b      	lsls	r3, r1, #2
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	4623      	mov	r3, r4
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	4631      	mov	r1, r6
 800f9d2:	f7f9 f871 	bl	8008ab8 <__aeabi_uldivmod>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	460c      	mov	r4, r1
 800f9da:	461a      	mov	r2, r3
 800f9dc:	4b9a      	ldr	r3, [pc, #616]	; (800fc48 <UART_SetConfig+0x6f4>)
 800f9de:	fba3 1302 	umull	r1, r3, r3, r2
 800f9e2:	095b      	lsrs	r3, r3, #5
 800f9e4:	2164      	movs	r1, #100	; 0x64
 800f9e6:	fb01 f303 	mul.w	r3, r1, r3
 800f9ea:	1ad3      	subs	r3, r2, r3
 800f9ec:	011b      	lsls	r3, r3, #4
 800f9ee:	3332      	adds	r3, #50	; 0x32
 800f9f0:	4a95      	ldr	r2, [pc, #596]	; (800fc48 <UART_SetConfig+0x6f4>)
 800f9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f6:	095b      	lsrs	r3, r3, #5
 800f9f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9fc:	4498      	add	r8, r3
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	469b      	mov	fp, r3
 800fa02:	f04f 0c00 	mov.w	ip, #0
 800fa06:	46d9      	mov	r9, fp
 800fa08:	46e2      	mov	sl, ip
 800fa0a:	eb19 0309 	adds.w	r3, r9, r9
 800fa0e:	eb4a 040a 	adc.w	r4, sl, sl
 800fa12:	4699      	mov	r9, r3
 800fa14:	46a2      	mov	sl, r4
 800fa16:	eb19 090b 	adds.w	r9, r9, fp
 800fa1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fa1e:	f04f 0100 	mov.w	r1, #0
 800fa22:	f04f 0200 	mov.w	r2, #0
 800fa26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa32:	4689      	mov	r9, r1
 800fa34:	4692      	mov	sl, r2
 800fa36:	eb1b 0509 	adds.w	r5, fp, r9
 800fa3a:	eb4c 060a 	adc.w	r6, ip, sl
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	4619      	mov	r1, r3
 800fa44:	f04f 0200 	mov.w	r2, #0
 800fa48:	f04f 0300 	mov.w	r3, #0
 800fa4c:	f04f 0400 	mov.w	r4, #0
 800fa50:	0094      	lsls	r4, r2, #2
 800fa52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fa56:	008b      	lsls	r3, r1, #2
 800fa58:	461a      	mov	r2, r3
 800fa5a:	4623      	mov	r3, r4
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	4631      	mov	r1, r6
 800fa60:	f7f9 f82a 	bl	8008ab8 <__aeabi_uldivmod>
 800fa64:	4603      	mov	r3, r0
 800fa66:	460c      	mov	r4, r1
 800fa68:	461a      	mov	r2, r3
 800fa6a:	4b77      	ldr	r3, [pc, #476]	; (800fc48 <UART_SetConfig+0x6f4>)
 800fa6c:	fba3 1302 	umull	r1, r3, r3, r2
 800fa70:	095b      	lsrs	r3, r3, #5
 800fa72:	2164      	movs	r1, #100	; 0x64
 800fa74:	fb01 f303 	mul.w	r3, r1, r3
 800fa78:	1ad3      	subs	r3, r2, r3
 800fa7a:	011b      	lsls	r3, r3, #4
 800fa7c:	3332      	adds	r3, #50	; 0x32
 800fa7e:	4a72      	ldr	r2, [pc, #456]	; (800fc48 <UART_SetConfig+0x6f4>)
 800fa80:	fba2 2303 	umull	r2, r3, r2, r3
 800fa84:	095b      	lsrs	r3, r3, #5
 800fa86:	f003 020f 	and.w	r2, r3, #15
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4442      	add	r2, r8
 800fa90:	609a      	str	r2, [r3, #8]
 800fa92:	e0d0      	b.n	800fc36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fa94:	f7fe f860 	bl	800db58 <HAL_RCC_GetPCLK1Freq>
 800fa98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	469a      	mov	sl, r3
 800fa9e:	f04f 0b00 	mov.w	fp, #0
 800faa2:	46d0      	mov	r8, sl
 800faa4:	46d9      	mov	r9, fp
 800faa6:	eb18 0308 	adds.w	r3, r8, r8
 800faaa:	eb49 0409 	adc.w	r4, r9, r9
 800faae:	4698      	mov	r8, r3
 800fab0:	46a1      	mov	r9, r4
 800fab2:	eb18 080a 	adds.w	r8, r8, sl
 800fab6:	eb49 090b 	adc.w	r9, r9, fp
 800faba:	f04f 0100 	mov.w	r1, #0
 800fabe:	f04f 0200 	mov.w	r2, #0
 800fac2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fac6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800faca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800face:	4688      	mov	r8, r1
 800fad0:	4691      	mov	r9, r2
 800fad2:	eb1a 0508 	adds.w	r5, sl, r8
 800fad6:	eb4b 0609 	adc.w	r6, fp, r9
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	4619      	mov	r1, r3
 800fae0:	f04f 0200 	mov.w	r2, #0
 800fae4:	f04f 0300 	mov.w	r3, #0
 800fae8:	f04f 0400 	mov.w	r4, #0
 800faec:	0094      	lsls	r4, r2, #2
 800faee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800faf2:	008b      	lsls	r3, r1, #2
 800faf4:	461a      	mov	r2, r3
 800faf6:	4623      	mov	r3, r4
 800faf8:	4628      	mov	r0, r5
 800fafa:	4631      	mov	r1, r6
 800fafc:	f7f8 ffdc 	bl	8008ab8 <__aeabi_uldivmod>
 800fb00:	4603      	mov	r3, r0
 800fb02:	460c      	mov	r4, r1
 800fb04:	461a      	mov	r2, r3
 800fb06:	4b50      	ldr	r3, [pc, #320]	; (800fc48 <UART_SetConfig+0x6f4>)
 800fb08:	fba3 2302 	umull	r2, r3, r3, r2
 800fb0c:	095b      	lsrs	r3, r3, #5
 800fb0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	469b      	mov	fp, r3
 800fb16:	f04f 0c00 	mov.w	ip, #0
 800fb1a:	46d9      	mov	r9, fp
 800fb1c:	46e2      	mov	sl, ip
 800fb1e:	eb19 0309 	adds.w	r3, r9, r9
 800fb22:	eb4a 040a 	adc.w	r4, sl, sl
 800fb26:	4699      	mov	r9, r3
 800fb28:	46a2      	mov	sl, r4
 800fb2a:	eb19 090b 	adds.w	r9, r9, fp
 800fb2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fb32:	f04f 0100 	mov.w	r1, #0
 800fb36:	f04f 0200 	mov.w	r2, #0
 800fb3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb46:	4689      	mov	r9, r1
 800fb48:	4692      	mov	sl, r2
 800fb4a:	eb1b 0509 	adds.w	r5, fp, r9
 800fb4e:	eb4c 060a 	adc.w	r6, ip, sl
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	4619      	mov	r1, r3
 800fb58:	f04f 0200 	mov.w	r2, #0
 800fb5c:	f04f 0300 	mov.w	r3, #0
 800fb60:	f04f 0400 	mov.w	r4, #0
 800fb64:	0094      	lsls	r4, r2, #2
 800fb66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb6a:	008b      	lsls	r3, r1, #2
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	4623      	mov	r3, r4
 800fb70:	4628      	mov	r0, r5
 800fb72:	4631      	mov	r1, r6
 800fb74:	f7f8 ffa0 	bl	8008ab8 <__aeabi_uldivmod>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	460c      	mov	r4, r1
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	4b32      	ldr	r3, [pc, #200]	; (800fc48 <UART_SetConfig+0x6f4>)
 800fb80:	fba3 1302 	umull	r1, r3, r3, r2
 800fb84:	095b      	lsrs	r3, r3, #5
 800fb86:	2164      	movs	r1, #100	; 0x64
 800fb88:	fb01 f303 	mul.w	r3, r1, r3
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	011b      	lsls	r3, r3, #4
 800fb90:	3332      	adds	r3, #50	; 0x32
 800fb92:	4a2d      	ldr	r2, [pc, #180]	; (800fc48 <UART_SetConfig+0x6f4>)
 800fb94:	fba2 2303 	umull	r2, r3, r2, r3
 800fb98:	095b      	lsrs	r3, r3, #5
 800fb9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb9e:	4498      	add	r8, r3
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	469b      	mov	fp, r3
 800fba4:	f04f 0c00 	mov.w	ip, #0
 800fba8:	46d9      	mov	r9, fp
 800fbaa:	46e2      	mov	sl, ip
 800fbac:	eb19 0309 	adds.w	r3, r9, r9
 800fbb0:	eb4a 040a 	adc.w	r4, sl, sl
 800fbb4:	4699      	mov	r9, r3
 800fbb6:	46a2      	mov	sl, r4
 800fbb8:	eb19 090b 	adds.w	r9, r9, fp
 800fbbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fbc0:	f04f 0100 	mov.w	r1, #0
 800fbc4:	f04f 0200 	mov.w	r2, #0
 800fbc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fbcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fbd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fbd4:	4689      	mov	r9, r1
 800fbd6:	4692      	mov	sl, r2
 800fbd8:	eb1b 0509 	adds.w	r5, fp, r9
 800fbdc:	eb4c 060a 	adc.w	r6, ip, sl
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	f04f 0200 	mov.w	r2, #0
 800fbea:	f04f 0300 	mov.w	r3, #0
 800fbee:	f04f 0400 	mov.w	r4, #0
 800fbf2:	0094      	lsls	r4, r2, #2
 800fbf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fbf8:	008b      	lsls	r3, r1, #2
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	4623      	mov	r3, r4
 800fbfe:	4628      	mov	r0, r5
 800fc00:	4631      	mov	r1, r6
 800fc02:	f7f8 ff59 	bl	8008ab8 <__aeabi_uldivmod>
 800fc06:	4603      	mov	r3, r0
 800fc08:	460c      	mov	r4, r1
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	4b0e      	ldr	r3, [pc, #56]	; (800fc48 <UART_SetConfig+0x6f4>)
 800fc0e:	fba3 1302 	umull	r1, r3, r3, r2
 800fc12:	095b      	lsrs	r3, r3, #5
 800fc14:	2164      	movs	r1, #100	; 0x64
 800fc16:	fb01 f303 	mul.w	r3, r1, r3
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	011b      	lsls	r3, r3, #4
 800fc1e:	3332      	adds	r3, #50	; 0x32
 800fc20:	4a09      	ldr	r2, [pc, #36]	; (800fc48 <UART_SetConfig+0x6f4>)
 800fc22:	fba2 2303 	umull	r2, r3, r2, r3
 800fc26:	095b      	lsrs	r3, r3, #5
 800fc28:	f003 020f 	and.w	r2, r3, #15
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4442      	add	r2, r8
 800fc32:	609a      	str	r2, [r3, #8]
}
 800fc34:	e7ff      	b.n	800fc36 <UART_SetConfig+0x6e2>
 800fc36:	bf00      	nop
 800fc38:	3714      	adds	r7, #20
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc40:	40011000 	.word	0x40011000
 800fc44:	40011400 	.word	0x40011400
 800fc48:	51eb851f 	.word	0x51eb851f

0800fc4c <round>:
 800fc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4e:	ec57 6b10 	vmov	r6, r7, d0
 800fc52:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800fc56:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800fc5a:	2c13      	cmp	r4, #19
 800fc5c:	463b      	mov	r3, r7
 800fc5e:	463d      	mov	r5, r7
 800fc60:	dc17      	bgt.n	800fc92 <round+0x46>
 800fc62:	2c00      	cmp	r4, #0
 800fc64:	da09      	bge.n	800fc7a <round+0x2e>
 800fc66:	3401      	adds	r4, #1
 800fc68:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800fc6c:	d103      	bne.n	800fc76 <round+0x2a>
 800fc6e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fc72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fc76:	2100      	movs	r1, #0
 800fc78:	e02c      	b.n	800fcd4 <round+0x88>
 800fc7a:	4a18      	ldr	r2, [pc, #96]	; (800fcdc <round+0x90>)
 800fc7c:	4122      	asrs	r2, r4
 800fc7e:	4217      	tst	r7, r2
 800fc80:	d100      	bne.n	800fc84 <round+0x38>
 800fc82:	b19e      	cbz	r6, 800fcac <round+0x60>
 800fc84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fc88:	4123      	asrs	r3, r4
 800fc8a:	442b      	add	r3, r5
 800fc8c:	ea23 0302 	bic.w	r3, r3, r2
 800fc90:	e7f1      	b.n	800fc76 <round+0x2a>
 800fc92:	2c33      	cmp	r4, #51	; 0x33
 800fc94:	dd0d      	ble.n	800fcb2 <round+0x66>
 800fc96:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800fc9a:	d107      	bne.n	800fcac <round+0x60>
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	4639      	mov	r1, r7
 800fca0:	ee10 2a10 	vmov	r2, s0
 800fca4:	f7f8 fa2a 	bl	80080fc <__adddf3>
 800fca8:	4606      	mov	r6, r0
 800fcaa:	460f      	mov	r7, r1
 800fcac:	ec47 6b10 	vmov	d0, r6, r7
 800fcb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcb2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800fcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcba:	40d0      	lsrs	r0, r2
 800fcbc:	4206      	tst	r6, r0
 800fcbe:	d0f5      	beq.n	800fcac <round+0x60>
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800fcc6:	fa02 f404 	lsl.w	r4, r2, r4
 800fcca:	1931      	adds	r1, r6, r4
 800fccc:	bf28      	it	cs
 800fcce:	189b      	addcs	r3, r3, r2
 800fcd0:	ea21 0100 	bic.w	r1, r1, r0
 800fcd4:	461f      	mov	r7, r3
 800fcd6:	460e      	mov	r6, r1
 800fcd8:	e7e8      	b.n	800fcac <round+0x60>
 800fcda:	bf00      	nop
 800fcdc:	000fffff 	.word	0x000fffff

0800fce0 <__errno>:
 800fce0:	4b01      	ldr	r3, [pc, #4]	; (800fce8 <__errno+0x8>)
 800fce2:	6818      	ldr	r0, [r3, #0]
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
 800fce8:	2000000c 	.word	0x2000000c

0800fcec <__libc_init_array>:
 800fcec:	b570      	push	{r4, r5, r6, lr}
 800fcee:	4e0d      	ldr	r6, [pc, #52]	; (800fd24 <__libc_init_array+0x38>)
 800fcf0:	4c0d      	ldr	r4, [pc, #52]	; (800fd28 <__libc_init_array+0x3c>)
 800fcf2:	1ba4      	subs	r4, r4, r6
 800fcf4:	10a4      	asrs	r4, r4, #2
 800fcf6:	2500      	movs	r5, #0
 800fcf8:	42a5      	cmp	r5, r4
 800fcfa:	d109      	bne.n	800fd10 <__libc_init_array+0x24>
 800fcfc:	4e0b      	ldr	r6, [pc, #44]	; (800fd2c <__libc_init_array+0x40>)
 800fcfe:	4c0c      	ldr	r4, [pc, #48]	; (800fd30 <__libc_init_array+0x44>)
 800fd00:	f002 fbae 	bl	8012460 <_init>
 800fd04:	1ba4      	subs	r4, r4, r6
 800fd06:	10a4      	asrs	r4, r4, #2
 800fd08:	2500      	movs	r5, #0
 800fd0a:	42a5      	cmp	r5, r4
 800fd0c:	d105      	bne.n	800fd1a <__libc_init_array+0x2e>
 800fd0e:	bd70      	pop	{r4, r5, r6, pc}
 800fd10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fd14:	4798      	blx	r3
 800fd16:	3501      	adds	r5, #1
 800fd18:	e7ee      	b.n	800fcf8 <__libc_init_array+0xc>
 800fd1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fd1e:	4798      	blx	r3
 800fd20:	3501      	adds	r5, #1
 800fd22:	e7f2      	b.n	800fd0a <__libc_init_array+0x1e>
 800fd24:	08012790 	.word	0x08012790
 800fd28:	08012790 	.word	0x08012790
 800fd2c:	08012790 	.word	0x08012790
 800fd30:	08012794 	.word	0x08012794

0800fd34 <memcpy>:
 800fd34:	b510      	push	{r4, lr}
 800fd36:	1e43      	subs	r3, r0, #1
 800fd38:	440a      	add	r2, r1
 800fd3a:	4291      	cmp	r1, r2
 800fd3c:	d100      	bne.n	800fd40 <memcpy+0xc>
 800fd3e:	bd10      	pop	{r4, pc}
 800fd40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd48:	e7f7      	b.n	800fd3a <memcpy+0x6>

0800fd4a <memset>:
 800fd4a:	4402      	add	r2, r0
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d100      	bne.n	800fd54 <memset+0xa>
 800fd52:	4770      	bx	lr
 800fd54:	f803 1b01 	strb.w	r1, [r3], #1
 800fd58:	e7f9      	b.n	800fd4e <memset+0x4>

0800fd5a <__cvt>:
 800fd5a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd5e:	ec55 4b10 	vmov	r4, r5, d0
 800fd62:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fd64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fd68:	2d00      	cmp	r5, #0
 800fd6a:	460e      	mov	r6, r1
 800fd6c:	4691      	mov	r9, r2
 800fd6e:	4619      	mov	r1, r3
 800fd70:	bfb8      	it	lt
 800fd72:	4622      	movlt	r2, r4
 800fd74:	462b      	mov	r3, r5
 800fd76:	f027 0720 	bic.w	r7, r7, #32
 800fd7a:	bfbb      	ittet	lt
 800fd7c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fd80:	461d      	movlt	r5, r3
 800fd82:	2300      	movge	r3, #0
 800fd84:	232d      	movlt	r3, #45	; 0x2d
 800fd86:	bfb8      	it	lt
 800fd88:	4614      	movlt	r4, r2
 800fd8a:	2f46      	cmp	r7, #70	; 0x46
 800fd8c:	700b      	strb	r3, [r1, #0]
 800fd8e:	d004      	beq.n	800fd9a <__cvt+0x40>
 800fd90:	2f45      	cmp	r7, #69	; 0x45
 800fd92:	d100      	bne.n	800fd96 <__cvt+0x3c>
 800fd94:	3601      	adds	r6, #1
 800fd96:	2102      	movs	r1, #2
 800fd98:	e000      	b.n	800fd9c <__cvt+0x42>
 800fd9a:	2103      	movs	r1, #3
 800fd9c:	ab03      	add	r3, sp, #12
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	ab02      	add	r3, sp, #8
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	4632      	mov	r2, r6
 800fda6:	4653      	mov	r3, sl
 800fda8:	ec45 4b10 	vmov	d0, r4, r5
 800fdac:	f000 fdfc 	bl	80109a8 <_dtoa_r>
 800fdb0:	2f47      	cmp	r7, #71	; 0x47
 800fdb2:	4680      	mov	r8, r0
 800fdb4:	d102      	bne.n	800fdbc <__cvt+0x62>
 800fdb6:	f019 0f01 	tst.w	r9, #1
 800fdba:	d026      	beq.n	800fe0a <__cvt+0xb0>
 800fdbc:	2f46      	cmp	r7, #70	; 0x46
 800fdbe:	eb08 0906 	add.w	r9, r8, r6
 800fdc2:	d111      	bne.n	800fde8 <__cvt+0x8e>
 800fdc4:	f898 3000 	ldrb.w	r3, [r8]
 800fdc8:	2b30      	cmp	r3, #48	; 0x30
 800fdca:	d10a      	bne.n	800fde2 <__cvt+0x88>
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2300      	movs	r3, #0
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	4629      	mov	r1, r5
 800fdd4:	f7f8 fdb0 	bl	8008938 <__aeabi_dcmpeq>
 800fdd8:	b918      	cbnz	r0, 800fde2 <__cvt+0x88>
 800fdda:	f1c6 0601 	rsb	r6, r6, #1
 800fdde:	f8ca 6000 	str.w	r6, [sl]
 800fde2:	f8da 3000 	ldr.w	r3, [sl]
 800fde6:	4499      	add	r9, r3
 800fde8:	2200      	movs	r2, #0
 800fdea:	2300      	movs	r3, #0
 800fdec:	4620      	mov	r0, r4
 800fdee:	4629      	mov	r1, r5
 800fdf0:	f7f8 fda2 	bl	8008938 <__aeabi_dcmpeq>
 800fdf4:	b938      	cbnz	r0, 800fe06 <__cvt+0xac>
 800fdf6:	2230      	movs	r2, #48	; 0x30
 800fdf8:	9b03      	ldr	r3, [sp, #12]
 800fdfa:	454b      	cmp	r3, r9
 800fdfc:	d205      	bcs.n	800fe0a <__cvt+0xb0>
 800fdfe:	1c59      	adds	r1, r3, #1
 800fe00:	9103      	str	r1, [sp, #12]
 800fe02:	701a      	strb	r2, [r3, #0]
 800fe04:	e7f8      	b.n	800fdf8 <__cvt+0x9e>
 800fe06:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe0a:	9b03      	ldr	r3, [sp, #12]
 800fe0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe0e:	eba3 0308 	sub.w	r3, r3, r8
 800fe12:	4640      	mov	r0, r8
 800fe14:	6013      	str	r3, [r2, #0]
 800fe16:	b004      	add	sp, #16
 800fe18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fe1c <__exponent>:
 800fe1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe1e:	2900      	cmp	r1, #0
 800fe20:	4604      	mov	r4, r0
 800fe22:	bfba      	itte	lt
 800fe24:	4249      	neglt	r1, r1
 800fe26:	232d      	movlt	r3, #45	; 0x2d
 800fe28:	232b      	movge	r3, #43	; 0x2b
 800fe2a:	2909      	cmp	r1, #9
 800fe2c:	f804 2b02 	strb.w	r2, [r4], #2
 800fe30:	7043      	strb	r3, [r0, #1]
 800fe32:	dd20      	ble.n	800fe76 <__exponent+0x5a>
 800fe34:	f10d 0307 	add.w	r3, sp, #7
 800fe38:	461f      	mov	r7, r3
 800fe3a:	260a      	movs	r6, #10
 800fe3c:	fb91 f5f6 	sdiv	r5, r1, r6
 800fe40:	fb06 1115 	mls	r1, r6, r5, r1
 800fe44:	3130      	adds	r1, #48	; 0x30
 800fe46:	2d09      	cmp	r5, #9
 800fe48:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fe4c:	f103 32ff 	add.w	r2, r3, #4294967295
 800fe50:	4629      	mov	r1, r5
 800fe52:	dc09      	bgt.n	800fe68 <__exponent+0x4c>
 800fe54:	3130      	adds	r1, #48	; 0x30
 800fe56:	3b02      	subs	r3, #2
 800fe58:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fe5c:	42bb      	cmp	r3, r7
 800fe5e:	4622      	mov	r2, r4
 800fe60:	d304      	bcc.n	800fe6c <__exponent+0x50>
 800fe62:	1a10      	subs	r0, r2, r0
 800fe64:	b003      	add	sp, #12
 800fe66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe68:	4613      	mov	r3, r2
 800fe6a:	e7e7      	b.n	800fe3c <__exponent+0x20>
 800fe6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe70:	f804 2b01 	strb.w	r2, [r4], #1
 800fe74:	e7f2      	b.n	800fe5c <__exponent+0x40>
 800fe76:	2330      	movs	r3, #48	; 0x30
 800fe78:	4419      	add	r1, r3
 800fe7a:	7083      	strb	r3, [r0, #2]
 800fe7c:	1d02      	adds	r2, r0, #4
 800fe7e:	70c1      	strb	r1, [r0, #3]
 800fe80:	e7ef      	b.n	800fe62 <__exponent+0x46>
	...

0800fe84 <_printf_float>:
 800fe84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe88:	b08d      	sub	sp, #52	; 0x34
 800fe8a:	460c      	mov	r4, r1
 800fe8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fe90:	4616      	mov	r6, r2
 800fe92:	461f      	mov	r7, r3
 800fe94:	4605      	mov	r5, r0
 800fe96:	f001 fcb9 	bl	801180c <_localeconv_r>
 800fe9a:	6803      	ldr	r3, [r0, #0]
 800fe9c:	9304      	str	r3, [sp, #16]
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7f8 f8ce 	bl	8008040 <strlen>
 800fea4:	2300      	movs	r3, #0
 800fea6:	930a      	str	r3, [sp, #40]	; 0x28
 800fea8:	f8d8 3000 	ldr.w	r3, [r8]
 800feac:	9005      	str	r0, [sp, #20]
 800feae:	3307      	adds	r3, #7
 800feb0:	f023 0307 	bic.w	r3, r3, #7
 800feb4:	f103 0208 	add.w	r2, r3, #8
 800feb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800febc:	f8d4 b000 	ldr.w	fp, [r4]
 800fec0:	f8c8 2000 	str.w	r2, [r8]
 800fec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fecc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fed0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fed4:	9307      	str	r3, [sp, #28]
 800fed6:	f8cd 8018 	str.w	r8, [sp, #24]
 800feda:	f04f 32ff 	mov.w	r2, #4294967295
 800fede:	4ba7      	ldr	r3, [pc, #668]	; (801017c <_printf_float+0x2f8>)
 800fee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fee4:	f7f8 fd5a 	bl	800899c <__aeabi_dcmpun>
 800fee8:	bb70      	cbnz	r0, 800ff48 <_printf_float+0xc4>
 800feea:	f04f 32ff 	mov.w	r2, #4294967295
 800feee:	4ba3      	ldr	r3, [pc, #652]	; (801017c <_printf_float+0x2f8>)
 800fef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fef4:	f7f8 fd34 	bl	8008960 <__aeabi_dcmple>
 800fef8:	bb30      	cbnz	r0, 800ff48 <_printf_float+0xc4>
 800fefa:	2200      	movs	r2, #0
 800fefc:	2300      	movs	r3, #0
 800fefe:	4640      	mov	r0, r8
 800ff00:	4649      	mov	r1, r9
 800ff02:	f7f8 fd23 	bl	800894c <__aeabi_dcmplt>
 800ff06:	b110      	cbz	r0, 800ff0e <_printf_float+0x8a>
 800ff08:	232d      	movs	r3, #45	; 0x2d
 800ff0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff0e:	4a9c      	ldr	r2, [pc, #624]	; (8010180 <_printf_float+0x2fc>)
 800ff10:	4b9c      	ldr	r3, [pc, #624]	; (8010184 <_printf_float+0x300>)
 800ff12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ff16:	bf8c      	ite	hi
 800ff18:	4690      	movhi	r8, r2
 800ff1a:	4698      	movls	r8, r3
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	f02b 0204 	bic.w	r2, fp, #4
 800ff22:	6123      	str	r3, [r4, #16]
 800ff24:	6022      	str	r2, [r4, #0]
 800ff26:	f04f 0900 	mov.w	r9, #0
 800ff2a:	9700      	str	r7, [sp, #0]
 800ff2c:	4633      	mov	r3, r6
 800ff2e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ff30:	4621      	mov	r1, r4
 800ff32:	4628      	mov	r0, r5
 800ff34:	f000 f9e6 	bl	8010304 <_printf_common>
 800ff38:	3001      	adds	r0, #1
 800ff3a:	f040 808d 	bne.w	8010058 <_printf_float+0x1d4>
 800ff3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff42:	b00d      	add	sp, #52	; 0x34
 800ff44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff48:	4642      	mov	r2, r8
 800ff4a:	464b      	mov	r3, r9
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	4649      	mov	r1, r9
 800ff50:	f7f8 fd24 	bl	800899c <__aeabi_dcmpun>
 800ff54:	b110      	cbz	r0, 800ff5c <_printf_float+0xd8>
 800ff56:	4a8c      	ldr	r2, [pc, #560]	; (8010188 <_printf_float+0x304>)
 800ff58:	4b8c      	ldr	r3, [pc, #560]	; (801018c <_printf_float+0x308>)
 800ff5a:	e7da      	b.n	800ff12 <_printf_float+0x8e>
 800ff5c:	6861      	ldr	r1, [r4, #4]
 800ff5e:	1c4b      	adds	r3, r1, #1
 800ff60:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ff64:	a80a      	add	r0, sp, #40	; 0x28
 800ff66:	d13e      	bne.n	800ffe6 <_printf_float+0x162>
 800ff68:	2306      	movs	r3, #6
 800ff6a:	6063      	str	r3, [r4, #4]
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ff72:	ab09      	add	r3, sp, #36	; 0x24
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	ec49 8b10 	vmov	d0, r8, r9
 800ff7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ff7e:	6022      	str	r2, [r4, #0]
 800ff80:	f8cd a004 	str.w	sl, [sp, #4]
 800ff84:	6861      	ldr	r1, [r4, #4]
 800ff86:	4628      	mov	r0, r5
 800ff88:	f7ff fee7 	bl	800fd5a <__cvt>
 800ff8c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ff90:	2b47      	cmp	r3, #71	; 0x47
 800ff92:	4680      	mov	r8, r0
 800ff94:	d109      	bne.n	800ffaa <_printf_float+0x126>
 800ff96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff98:	1cd8      	adds	r0, r3, #3
 800ff9a:	db02      	blt.n	800ffa2 <_printf_float+0x11e>
 800ff9c:	6862      	ldr	r2, [r4, #4]
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	dd47      	ble.n	8010032 <_printf_float+0x1ae>
 800ffa2:	f1aa 0a02 	sub.w	sl, sl, #2
 800ffa6:	fa5f fa8a 	uxtb.w	sl, sl
 800ffaa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ffae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffb0:	d824      	bhi.n	800fffc <_printf_float+0x178>
 800ffb2:	3901      	subs	r1, #1
 800ffb4:	4652      	mov	r2, sl
 800ffb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ffba:	9109      	str	r1, [sp, #36]	; 0x24
 800ffbc:	f7ff ff2e 	bl	800fe1c <__exponent>
 800ffc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffc2:	1813      	adds	r3, r2, r0
 800ffc4:	2a01      	cmp	r2, #1
 800ffc6:	4681      	mov	r9, r0
 800ffc8:	6123      	str	r3, [r4, #16]
 800ffca:	dc02      	bgt.n	800ffd2 <_printf_float+0x14e>
 800ffcc:	6822      	ldr	r2, [r4, #0]
 800ffce:	07d1      	lsls	r1, r2, #31
 800ffd0:	d501      	bpl.n	800ffd6 <_printf_float+0x152>
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	6123      	str	r3, [r4, #16]
 800ffd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d0a5      	beq.n	800ff2a <_printf_float+0xa6>
 800ffde:	232d      	movs	r3, #45	; 0x2d
 800ffe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffe4:	e7a1      	b.n	800ff2a <_printf_float+0xa6>
 800ffe6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ffea:	f000 8177 	beq.w	80102dc <_printf_float+0x458>
 800ffee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fff2:	d1bb      	bne.n	800ff6c <_printf_float+0xe8>
 800fff4:	2900      	cmp	r1, #0
 800fff6:	d1b9      	bne.n	800ff6c <_printf_float+0xe8>
 800fff8:	2301      	movs	r3, #1
 800fffa:	e7b6      	b.n	800ff6a <_printf_float+0xe6>
 800fffc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010000:	d119      	bne.n	8010036 <_printf_float+0x1b2>
 8010002:	2900      	cmp	r1, #0
 8010004:	6863      	ldr	r3, [r4, #4]
 8010006:	dd0c      	ble.n	8010022 <_printf_float+0x19e>
 8010008:	6121      	str	r1, [r4, #16]
 801000a:	b913      	cbnz	r3, 8010012 <_printf_float+0x18e>
 801000c:	6822      	ldr	r2, [r4, #0]
 801000e:	07d2      	lsls	r2, r2, #31
 8010010:	d502      	bpl.n	8010018 <_printf_float+0x194>
 8010012:	3301      	adds	r3, #1
 8010014:	440b      	add	r3, r1
 8010016:	6123      	str	r3, [r4, #16]
 8010018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801001a:	65a3      	str	r3, [r4, #88]	; 0x58
 801001c:	f04f 0900 	mov.w	r9, #0
 8010020:	e7d9      	b.n	800ffd6 <_printf_float+0x152>
 8010022:	b913      	cbnz	r3, 801002a <_printf_float+0x1a6>
 8010024:	6822      	ldr	r2, [r4, #0]
 8010026:	07d0      	lsls	r0, r2, #31
 8010028:	d501      	bpl.n	801002e <_printf_float+0x1aa>
 801002a:	3302      	adds	r3, #2
 801002c:	e7f3      	b.n	8010016 <_printf_float+0x192>
 801002e:	2301      	movs	r3, #1
 8010030:	e7f1      	b.n	8010016 <_printf_float+0x192>
 8010032:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010036:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801003a:	4293      	cmp	r3, r2
 801003c:	db05      	blt.n	801004a <_printf_float+0x1c6>
 801003e:	6822      	ldr	r2, [r4, #0]
 8010040:	6123      	str	r3, [r4, #16]
 8010042:	07d1      	lsls	r1, r2, #31
 8010044:	d5e8      	bpl.n	8010018 <_printf_float+0x194>
 8010046:	3301      	adds	r3, #1
 8010048:	e7e5      	b.n	8010016 <_printf_float+0x192>
 801004a:	2b00      	cmp	r3, #0
 801004c:	bfd4      	ite	le
 801004e:	f1c3 0302 	rsble	r3, r3, #2
 8010052:	2301      	movgt	r3, #1
 8010054:	4413      	add	r3, r2
 8010056:	e7de      	b.n	8010016 <_printf_float+0x192>
 8010058:	6823      	ldr	r3, [r4, #0]
 801005a:	055a      	lsls	r2, r3, #21
 801005c:	d407      	bmi.n	801006e <_printf_float+0x1ea>
 801005e:	6923      	ldr	r3, [r4, #16]
 8010060:	4642      	mov	r2, r8
 8010062:	4631      	mov	r1, r6
 8010064:	4628      	mov	r0, r5
 8010066:	47b8      	blx	r7
 8010068:	3001      	adds	r0, #1
 801006a:	d12b      	bne.n	80100c4 <_printf_float+0x240>
 801006c:	e767      	b.n	800ff3e <_printf_float+0xba>
 801006e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010072:	f240 80dc 	bls.w	801022e <_printf_float+0x3aa>
 8010076:	2200      	movs	r2, #0
 8010078:	2300      	movs	r3, #0
 801007a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801007e:	f7f8 fc5b 	bl	8008938 <__aeabi_dcmpeq>
 8010082:	2800      	cmp	r0, #0
 8010084:	d033      	beq.n	80100ee <_printf_float+0x26a>
 8010086:	2301      	movs	r3, #1
 8010088:	4a41      	ldr	r2, [pc, #260]	; (8010190 <_printf_float+0x30c>)
 801008a:	4631      	mov	r1, r6
 801008c:	4628      	mov	r0, r5
 801008e:	47b8      	blx	r7
 8010090:	3001      	adds	r0, #1
 8010092:	f43f af54 	beq.w	800ff3e <_printf_float+0xba>
 8010096:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801009a:	429a      	cmp	r2, r3
 801009c:	db02      	blt.n	80100a4 <_printf_float+0x220>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	07d8      	lsls	r0, r3, #31
 80100a2:	d50f      	bpl.n	80100c4 <_printf_float+0x240>
 80100a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100a8:	4631      	mov	r1, r6
 80100aa:	4628      	mov	r0, r5
 80100ac:	47b8      	blx	r7
 80100ae:	3001      	adds	r0, #1
 80100b0:	f43f af45 	beq.w	800ff3e <_printf_float+0xba>
 80100b4:	f04f 0800 	mov.w	r8, #0
 80100b8:	f104 091a 	add.w	r9, r4, #26
 80100bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100be:	3b01      	subs	r3, #1
 80100c0:	4543      	cmp	r3, r8
 80100c2:	dc09      	bgt.n	80100d8 <_printf_float+0x254>
 80100c4:	6823      	ldr	r3, [r4, #0]
 80100c6:	079b      	lsls	r3, r3, #30
 80100c8:	f100 8103 	bmi.w	80102d2 <_printf_float+0x44e>
 80100cc:	68e0      	ldr	r0, [r4, #12]
 80100ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100d0:	4298      	cmp	r0, r3
 80100d2:	bfb8      	it	lt
 80100d4:	4618      	movlt	r0, r3
 80100d6:	e734      	b.n	800ff42 <_printf_float+0xbe>
 80100d8:	2301      	movs	r3, #1
 80100da:	464a      	mov	r2, r9
 80100dc:	4631      	mov	r1, r6
 80100de:	4628      	mov	r0, r5
 80100e0:	47b8      	blx	r7
 80100e2:	3001      	adds	r0, #1
 80100e4:	f43f af2b 	beq.w	800ff3e <_printf_float+0xba>
 80100e8:	f108 0801 	add.w	r8, r8, #1
 80100ec:	e7e6      	b.n	80100bc <_printf_float+0x238>
 80100ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	dc2b      	bgt.n	801014c <_printf_float+0x2c8>
 80100f4:	2301      	movs	r3, #1
 80100f6:	4a26      	ldr	r2, [pc, #152]	; (8010190 <_printf_float+0x30c>)
 80100f8:	4631      	mov	r1, r6
 80100fa:	4628      	mov	r0, r5
 80100fc:	47b8      	blx	r7
 80100fe:	3001      	adds	r0, #1
 8010100:	f43f af1d 	beq.w	800ff3e <_printf_float+0xba>
 8010104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010106:	b923      	cbnz	r3, 8010112 <_printf_float+0x28e>
 8010108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801010a:	b913      	cbnz	r3, 8010112 <_printf_float+0x28e>
 801010c:	6823      	ldr	r3, [r4, #0]
 801010e:	07d9      	lsls	r1, r3, #31
 8010110:	d5d8      	bpl.n	80100c4 <_printf_float+0x240>
 8010112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010116:	4631      	mov	r1, r6
 8010118:	4628      	mov	r0, r5
 801011a:	47b8      	blx	r7
 801011c:	3001      	adds	r0, #1
 801011e:	f43f af0e 	beq.w	800ff3e <_printf_float+0xba>
 8010122:	f04f 0900 	mov.w	r9, #0
 8010126:	f104 0a1a 	add.w	sl, r4, #26
 801012a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801012c:	425b      	negs	r3, r3
 801012e:	454b      	cmp	r3, r9
 8010130:	dc01      	bgt.n	8010136 <_printf_float+0x2b2>
 8010132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010134:	e794      	b.n	8010060 <_printf_float+0x1dc>
 8010136:	2301      	movs	r3, #1
 8010138:	4652      	mov	r2, sl
 801013a:	4631      	mov	r1, r6
 801013c:	4628      	mov	r0, r5
 801013e:	47b8      	blx	r7
 8010140:	3001      	adds	r0, #1
 8010142:	f43f aefc 	beq.w	800ff3e <_printf_float+0xba>
 8010146:	f109 0901 	add.w	r9, r9, #1
 801014a:	e7ee      	b.n	801012a <_printf_float+0x2a6>
 801014c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801014e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010150:	429a      	cmp	r2, r3
 8010152:	bfa8      	it	ge
 8010154:	461a      	movge	r2, r3
 8010156:	2a00      	cmp	r2, #0
 8010158:	4691      	mov	r9, r2
 801015a:	dd07      	ble.n	801016c <_printf_float+0x2e8>
 801015c:	4613      	mov	r3, r2
 801015e:	4631      	mov	r1, r6
 8010160:	4642      	mov	r2, r8
 8010162:	4628      	mov	r0, r5
 8010164:	47b8      	blx	r7
 8010166:	3001      	adds	r0, #1
 8010168:	f43f aee9 	beq.w	800ff3e <_printf_float+0xba>
 801016c:	f104 031a 	add.w	r3, r4, #26
 8010170:	f04f 0b00 	mov.w	fp, #0
 8010174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010178:	9306      	str	r3, [sp, #24]
 801017a:	e015      	b.n	80101a8 <_printf_float+0x324>
 801017c:	7fefffff 	.word	0x7fefffff
 8010180:	080124d0 	.word	0x080124d0
 8010184:	080124cc 	.word	0x080124cc
 8010188:	080124d8 	.word	0x080124d8
 801018c:	080124d4 	.word	0x080124d4
 8010190:	080124dc 	.word	0x080124dc
 8010194:	2301      	movs	r3, #1
 8010196:	9a06      	ldr	r2, [sp, #24]
 8010198:	4631      	mov	r1, r6
 801019a:	4628      	mov	r0, r5
 801019c:	47b8      	blx	r7
 801019e:	3001      	adds	r0, #1
 80101a0:	f43f aecd 	beq.w	800ff3e <_printf_float+0xba>
 80101a4:	f10b 0b01 	add.w	fp, fp, #1
 80101a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80101ac:	ebaa 0309 	sub.w	r3, sl, r9
 80101b0:	455b      	cmp	r3, fp
 80101b2:	dcef      	bgt.n	8010194 <_printf_float+0x310>
 80101b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101b8:	429a      	cmp	r2, r3
 80101ba:	44d0      	add	r8, sl
 80101bc:	db15      	blt.n	80101ea <_printf_float+0x366>
 80101be:	6823      	ldr	r3, [r4, #0]
 80101c0:	07da      	lsls	r2, r3, #31
 80101c2:	d412      	bmi.n	80101ea <_printf_float+0x366>
 80101c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101c8:	eba3 020a 	sub.w	r2, r3, sl
 80101cc:	eba3 0a01 	sub.w	sl, r3, r1
 80101d0:	4592      	cmp	sl, r2
 80101d2:	bfa8      	it	ge
 80101d4:	4692      	movge	sl, r2
 80101d6:	f1ba 0f00 	cmp.w	sl, #0
 80101da:	dc0e      	bgt.n	80101fa <_printf_float+0x376>
 80101dc:	f04f 0800 	mov.w	r8, #0
 80101e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101e4:	f104 091a 	add.w	r9, r4, #26
 80101e8:	e019      	b.n	801021e <_printf_float+0x39a>
 80101ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101ee:	4631      	mov	r1, r6
 80101f0:	4628      	mov	r0, r5
 80101f2:	47b8      	blx	r7
 80101f4:	3001      	adds	r0, #1
 80101f6:	d1e5      	bne.n	80101c4 <_printf_float+0x340>
 80101f8:	e6a1      	b.n	800ff3e <_printf_float+0xba>
 80101fa:	4653      	mov	r3, sl
 80101fc:	4642      	mov	r2, r8
 80101fe:	4631      	mov	r1, r6
 8010200:	4628      	mov	r0, r5
 8010202:	47b8      	blx	r7
 8010204:	3001      	adds	r0, #1
 8010206:	d1e9      	bne.n	80101dc <_printf_float+0x358>
 8010208:	e699      	b.n	800ff3e <_printf_float+0xba>
 801020a:	2301      	movs	r3, #1
 801020c:	464a      	mov	r2, r9
 801020e:	4631      	mov	r1, r6
 8010210:	4628      	mov	r0, r5
 8010212:	47b8      	blx	r7
 8010214:	3001      	adds	r0, #1
 8010216:	f43f ae92 	beq.w	800ff3e <_printf_float+0xba>
 801021a:	f108 0801 	add.w	r8, r8, #1
 801021e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010222:	1a9b      	subs	r3, r3, r2
 8010224:	eba3 030a 	sub.w	r3, r3, sl
 8010228:	4543      	cmp	r3, r8
 801022a:	dcee      	bgt.n	801020a <_printf_float+0x386>
 801022c:	e74a      	b.n	80100c4 <_printf_float+0x240>
 801022e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010230:	2a01      	cmp	r2, #1
 8010232:	dc01      	bgt.n	8010238 <_printf_float+0x3b4>
 8010234:	07db      	lsls	r3, r3, #31
 8010236:	d53a      	bpl.n	80102ae <_printf_float+0x42a>
 8010238:	2301      	movs	r3, #1
 801023a:	4642      	mov	r2, r8
 801023c:	4631      	mov	r1, r6
 801023e:	4628      	mov	r0, r5
 8010240:	47b8      	blx	r7
 8010242:	3001      	adds	r0, #1
 8010244:	f43f ae7b 	beq.w	800ff3e <_printf_float+0xba>
 8010248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801024c:	4631      	mov	r1, r6
 801024e:	4628      	mov	r0, r5
 8010250:	47b8      	blx	r7
 8010252:	3001      	adds	r0, #1
 8010254:	f108 0801 	add.w	r8, r8, #1
 8010258:	f43f ae71 	beq.w	800ff3e <_printf_float+0xba>
 801025c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801025e:	2200      	movs	r2, #0
 8010260:	f103 3aff 	add.w	sl, r3, #4294967295
 8010264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010268:	2300      	movs	r3, #0
 801026a:	f7f8 fb65 	bl	8008938 <__aeabi_dcmpeq>
 801026e:	b9c8      	cbnz	r0, 80102a4 <_printf_float+0x420>
 8010270:	4653      	mov	r3, sl
 8010272:	4642      	mov	r2, r8
 8010274:	4631      	mov	r1, r6
 8010276:	4628      	mov	r0, r5
 8010278:	47b8      	blx	r7
 801027a:	3001      	adds	r0, #1
 801027c:	d10e      	bne.n	801029c <_printf_float+0x418>
 801027e:	e65e      	b.n	800ff3e <_printf_float+0xba>
 8010280:	2301      	movs	r3, #1
 8010282:	4652      	mov	r2, sl
 8010284:	4631      	mov	r1, r6
 8010286:	4628      	mov	r0, r5
 8010288:	47b8      	blx	r7
 801028a:	3001      	adds	r0, #1
 801028c:	f43f ae57 	beq.w	800ff3e <_printf_float+0xba>
 8010290:	f108 0801 	add.w	r8, r8, #1
 8010294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010296:	3b01      	subs	r3, #1
 8010298:	4543      	cmp	r3, r8
 801029a:	dcf1      	bgt.n	8010280 <_printf_float+0x3fc>
 801029c:	464b      	mov	r3, r9
 801029e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80102a2:	e6de      	b.n	8010062 <_printf_float+0x1de>
 80102a4:	f04f 0800 	mov.w	r8, #0
 80102a8:	f104 0a1a 	add.w	sl, r4, #26
 80102ac:	e7f2      	b.n	8010294 <_printf_float+0x410>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e7df      	b.n	8010272 <_printf_float+0x3ee>
 80102b2:	2301      	movs	r3, #1
 80102b4:	464a      	mov	r2, r9
 80102b6:	4631      	mov	r1, r6
 80102b8:	4628      	mov	r0, r5
 80102ba:	47b8      	blx	r7
 80102bc:	3001      	adds	r0, #1
 80102be:	f43f ae3e 	beq.w	800ff3e <_printf_float+0xba>
 80102c2:	f108 0801 	add.w	r8, r8, #1
 80102c6:	68e3      	ldr	r3, [r4, #12]
 80102c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80102ca:	1a9b      	subs	r3, r3, r2
 80102cc:	4543      	cmp	r3, r8
 80102ce:	dcf0      	bgt.n	80102b2 <_printf_float+0x42e>
 80102d0:	e6fc      	b.n	80100cc <_printf_float+0x248>
 80102d2:	f04f 0800 	mov.w	r8, #0
 80102d6:	f104 0919 	add.w	r9, r4, #25
 80102da:	e7f4      	b.n	80102c6 <_printf_float+0x442>
 80102dc:	2900      	cmp	r1, #0
 80102de:	f43f ae8b 	beq.w	800fff8 <_printf_float+0x174>
 80102e2:	2300      	movs	r3, #0
 80102e4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80102e8:	ab09      	add	r3, sp, #36	; 0x24
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	ec49 8b10 	vmov	d0, r8, r9
 80102f0:	6022      	str	r2, [r4, #0]
 80102f2:	f8cd a004 	str.w	sl, [sp, #4]
 80102f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80102fa:	4628      	mov	r0, r5
 80102fc:	f7ff fd2d 	bl	800fd5a <__cvt>
 8010300:	4680      	mov	r8, r0
 8010302:	e648      	b.n	800ff96 <_printf_float+0x112>

08010304 <_printf_common>:
 8010304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010308:	4691      	mov	r9, r2
 801030a:	461f      	mov	r7, r3
 801030c:	688a      	ldr	r2, [r1, #8]
 801030e:	690b      	ldr	r3, [r1, #16]
 8010310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010314:	4293      	cmp	r3, r2
 8010316:	bfb8      	it	lt
 8010318:	4613      	movlt	r3, r2
 801031a:	f8c9 3000 	str.w	r3, [r9]
 801031e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010322:	4606      	mov	r6, r0
 8010324:	460c      	mov	r4, r1
 8010326:	b112      	cbz	r2, 801032e <_printf_common+0x2a>
 8010328:	3301      	adds	r3, #1
 801032a:	f8c9 3000 	str.w	r3, [r9]
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	0699      	lsls	r1, r3, #26
 8010332:	bf42      	ittt	mi
 8010334:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010338:	3302      	addmi	r3, #2
 801033a:	f8c9 3000 	strmi.w	r3, [r9]
 801033e:	6825      	ldr	r5, [r4, #0]
 8010340:	f015 0506 	ands.w	r5, r5, #6
 8010344:	d107      	bne.n	8010356 <_printf_common+0x52>
 8010346:	f104 0a19 	add.w	sl, r4, #25
 801034a:	68e3      	ldr	r3, [r4, #12]
 801034c:	f8d9 2000 	ldr.w	r2, [r9]
 8010350:	1a9b      	subs	r3, r3, r2
 8010352:	42ab      	cmp	r3, r5
 8010354:	dc28      	bgt.n	80103a8 <_printf_common+0xa4>
 8010356:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801035a:	6822      	ldr	r2, [r4, #0]
 801035c:	3300      	adds	r3, #0
 801035e:	bf18      	it	ne
 8010360:	2301      	movne	r3, #1
 8010362:	0692      	lsls	r2, r2, #26
 8010364:	d42d      	bmi.n	80103c2 <_printf_common+0xbe>
 8010366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801036a:	4639      	mov	r1, r7
 801036c:	4630      	mov	r0, r6
 801036e:	47c0      	blx	r8
 8010370:	3001      	adds	r0, #1
 8010372:	d020      	beq.n	80103b6 <_printf_common+0xb2>
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	68e5      	ldr	r5, [r4, #12]
 8010378:	f8d9 2000 	ldr.w	r2, [r9]
 801037c:	f003 0306 	and.w	r3, r3, #6
 8010380:	2b04      	cmp	r3, #4
 8010382:	bf08      	it	eq
 8010384:	1aad      	subeq	r5, r5, r2
 8010386:	68a3      	ldr	r3, [r4, #8]
 8010388:	6922      	ldr	r2, [r4, #16]
 801038a:	bf0c      	ite	eq
 801038c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010390:	2500      	movne	r5, #0
 8010392:	4293      	cmp	r3, r2
 8010394:	bfc4      	itt	gt
 8010396:	1a9b      	subgt	r3, r3, r2
 8010398:	18ed      	addgt	r5, r5, r3
 801039a:	f04f 0900 	mov.w	r9, #0
 801039e:	341a      	adds	r4, #26
 80103a0:	454d      	cmp	r5, r9
 80103a2:	d11a      	bne.n	80103da <_printf_common+0xd6>
 80103a4:	2000      	movs	r0, #0
 80103a6:	e008      	b.n	80103ba <_printf_common+0xb6>
 80103a8:	2301      	movs	r3, #1
 80103aa:	4652      	mov	r2, sl
 80103ac:	4639      	mov	r1, r7
 80103ae:	4630      	mov	r0, r6
 80103b0:	47c0      	blx	r8
 80103b2:	3001      	adds	r0, #1
 80103b4:	d103      	bne.n	80103be <_printf_common+0xba>
 80103b6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103be:	3501      	adds	r5, #1
 80103c0:	e7c3      	b.n	801034a <_printf_common+0x46>
 80103c2:	18e1      	adds	r1, r4, r3
 80103c4:	1c5a      	adds	r2, r3, #1
 80103c6:	2030      	movs	r0, #48	; 0x30
 80103c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103cc:	4422      	add	r2, r4
 80103ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103d6:	3302      	adds	r3, #2
 80103d8:	e7c5      	b.n	8010366 <_printf_common+0x62>
 80103da:	2301      	movs	r3, #1
 80103dc:	4622      	mov	r2, r4
 80103de:	4639      	mov	r1, r7
 80103e0:	4630      	mov	r0, r6
 80103e2:	47c0      	blx	r8
 80103e4:	3001      	adds	r0, #1
 80103e6:	d0e6      	beq.n	80103b6 <_printf_common+0xb2>
 80103e8:	f109 0901 	add.w	r9, r9, #1
 80103ec:	e7d8      	b.n	80103a0 <_printf_common+0x9c>
	...

080103f0 <_printf_i>:
 80103f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80103f8:	460c      	mov	r4, r1
 80103fa:	7e09      	ldrb	r1, [r1, #24]
 80103fc:	b085      	sub	sp, #20
 80103fe:	296e      	cmp	r1, #110	; 0x6e
 8010400:	4617      	mov	r7, r2
 8010402:	4606      	mov	r6, r0
 8010404:	4698      	mov	r8, r3
 8010406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010408:	f000 80b3 	beq.w	8010572 <_printf_i+0x182>
 801040c:	d822      	bhi.n	8010454 <_printf_i+0x64>
 801040e:	2963      	cmp	r1, #99	; 0x63
 8010410:	d036      	beq.n	8010480 <_printf_i+0x90>
 8010412:	d80a      	bhi.n	801042a <_printf_i+0x3a>
 8010414:	2900      	cmp	r1, #0
 8010416:	f000 80b9 	beq.w	801058c <_printf_i+0x19c>
 801041a:	2958      	cmp	r1, #88	; 0x58
 801041c:	f000 8083 	beq.w	8010526 <_printf_i+0x136>
 8010420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010424:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010428:	e032      	b.n	8010490 <_printf_i+0xa0>
 801042a:	2964      	cmp	r1, #100	; 0x64
 801042c:	d001      	beq.n	8010432 <_printf_i+0x42>
 801042e:	2969      	cmp	r1, #105	; 0x69
 8010430:	d1f6      	bne.n	8010420 <_printf_i+0x30>
 8010432:	6820      	ldr	r0, [r4, #0]
 8010434:	6813      	ldr	r3, [r2, #0]
 8010436:	0605      	lsls	r5, r0, #24
 8010438:	f103 0104 	add.w	r1, r3, #4
 801043c:	d52a      	bpl.n	8010494 <_printf_i+0xa4>
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	6011      	str	r1, [r2, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	da03      	bge.n	801044e <_printf_i+0x5e>
 8010446:	222d      	movs	r2, #45	; 0x2d
 8010448:	425b      	negs	r3, r3
 801044a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801044e:	486f      	ldr	r0, [pc, #444]	; (801060c <_printf_i+0x21c>)
 8010450:	220a      	movs	r2, #10
 8010452:	e039      	b.n	80104c8 <_printf_i+0xd8>
 8010454:	2973      	cmp	r1, #115	; 0x73
 8010456:	f000 809d 	beq.w	8010594 <_printf_i+0x1a4>
 801045a:	d808      	bhi.n	801046e <_printf_i+0x7e>
 801045c:	296f      	cmp	r1, #111	; 0x6f
 801045e:	d020      	beq.n	80104a2 <_printf_i+0xb2>
 8010460:	2970      	cmp	r1, #112	; 0x70
 8010462:	d1dd      	bne.n	8010420 <_printf_i+0x30>
 8010464:	6823      	ldr	r3, [r4, #0]
 8010466:	f043 0320 	orr.w	r3, r3, #32
 801046a:	6023      	str	r3, [r4, #0]
 801046c:	e003      	b.n	8010476 <_printf_i+0x86>
 801046e:	2975      	cmp	r1, #117	; 0x75
 8010470:	d017      	beq.n	80104a2 <_printf_i+0xb2>
 8010472:	2978      	cmp	r1, #120	; 0x78
 8010474:	d1d4      	bne.n	8010420 <_printf_i+0x30>
 8010476:	2378      	movs	r3, #120	; 0x78
 8010478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801047c:	4864      	ldr	r0, [pc, #400]	; (8010610 <_printf_i+0x220>)
 801047e:	e055      	b.n	801052c <_printf_i+0x13c>
 8010480:	6813      	ldr	r3, [r2, #0]
 8010482:	1d19      	adds	r1, r3, #4
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	6011      	str	r1, [r2, #0]
 8010488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801048c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010490:	2301      	movs	r3, #1
 8010492:	e08c      	b.n	80105ae <_printf_i+0x1be>
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	6011      	str	r1, [r2, #0]
 8010498:	f010 0f40 	tst.w	r0, #64	; 0x40
 801049c:	bf18      	it	ne
 801049e:	b21b      	sxthne	r3, r3
 80104a0:	e7cf      	b.n	8010442 <_printf_i+0x52>
 80104a2:	6813      	ldr	r3, [r2, #0]
 80104a4:	6825      	ldr	r5, [r4, #0]
 80104a6:	1d18      	adds	r0, r3, #4
 80104a8:	6010      	str	r0, [r2, #0]
 80104aa:	0628      	lsls	r0, r5, #24
 80104ac:	d501      	bpl.n	80104b2 <_printf_i+0xc2>
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	e002      	b.n	80104b8 <_printf_i+0xc8>
 80104b2:	0668      	lsls	r0, r5, #25
 80104b4:	d5fb      	bpl.n	80104ae <_printf_i+0xbe>
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	4854      	ldr	r0, [pc, #336]	; (801060c <_printf_i+0x21c>)
 80104ba:	296f      	cmp	r1, #111	; 0x6f
 80104bc:	bf14      	ite	ne
 80104be:	220a      	movne	r2, #10
 80104c0:	2208      	moveq	r2, #8
 80104c2:	2100      	movs	r1, #0
 80104c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104c8:	6865      	ldr	r5, [r4, #4]
 80104ca:	60a5      	str	r5, [r4, #8]
 80104cc:	2d00      	cmp	r5, #0
 80104ce:	f2c0 8095 	blt.w	80105fc <_printf_i+0x20c>
 80104d2:	6821      	ldr	r1, [r4, #0]
 80104d4:	f021 0104 	bic.w	r1, r1, #4
 80104d8:	6021      	str	r1, [r4, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d13d      	bne.n	801055a <_printf_i+0x16a>
 80104de:	2d00      	cmp	r5, #0
 80104e0:	f040 808e 	bne.w	8010600 <_printf_i+0x210>
 80104e4:	4665      	mov	r5, ip
 80104e6:	2a08      	cmp	r2, #8
 80104e8:	d10b      	bne.n	8010502 <_printf_i+0x112>
 80104ea:	6823      	ldr	r3, [r4, #0]
 80104ec:	07db      	lsls	r3, r3, #31
 80104ee:	d508      	bpl.n	8010502 <_printf_i+0x112>
 80104f0:	6923      	ldr	r3, [r4, #16]
 80104f2:	6862      	ldr	r2, [r4, #4]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	bfde      	ittt	le
 80104f8:	2330      	movle	r3, #48	; 0x30
 80104fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010502:	ebac 0305 	sub.w	r3, ip, r5
 8010506:	6123      	str	r3, [r4, #16]
 8010508:	f8cd 8000 	str.w	r8, [sp]
 801050c:	463b      	mov	r3, r7
 801050e:	aa03      	add	r2, sp, #12
 8010510:	4621      	mov	r1, r4
 8010512:	4630      	mov	r0, r6
 8010514:	f7ff fef6 	bl	8010304 <_printf_common>
 8010518:	3001      	adds	r0, #1
 801051a:	d14d      	bne.n	80105b8 <_printf_i+0x1c8>
 801051c:	f04f 30ff 	mov.w	r0, #4294967295
 8010520:	b005      	add	sp, #20
 8010522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010526:	4839      	ldr	r0, [pc, #228]	; (801060c <_printf_i+0x21c>)
 8010528:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801052c:	6813      	ldr	r3, [r2, #0]
 801052e:	6821      	ldr	r1, [r4, #0]
 8010530:	1d1d      	adds	r5, r3, #4
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	6015      	str	r5, [r2, #0]
 8010536:	060a      	lsls	r2, r1, #24
 8010538:	d50b      	bpl.n	8010552 <_printf_i+0x162>
 801053a:	07ca      	lsls	r2, r1, #31
 801053c:	bf44      	itt	mi
 801053e:	f041 0120 	orrmi.w	r1, r1, #32
 8010542:	6021      	strmi	r1, [r4, #0]
 8010544:	b91b      	cbnz	r3, 801054e <_printf_i+0x15e>
 8010546:	6822      	ldr	r2, [r4, #0]
 8010548:	f022 0220 	bic.w	r2, r2, #32
 801054c:	6022      	str	r2, [r4, #0]
 801054e:	2210      	movs	r2, #16
 8010550:	e7b7      	b.n	80104c2 <_printf_i+0xd2>
 8010552:	064d      	lsls	r5, r1, #25
 8010554:	bf48      	it	mi
 8010556:	b29b      	uxthmi	r3, r3
 8010558:	e7ef      	b.n	801053a <_printf_i+0x14a>
 801055a:	4665      	mov	r5, ip
 801055c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010560:	fb02 3311 	mls	r3, r2, r1, r3
 8010564:	5cc3      	ldrb	r3, [r0, r3]
 8010566:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801056a:	460b      	mov	r3, r1
 801056c:	2900      	cmp	r1, #0
 801056e:	d1f5      	bne.n	801055c <_printf_i+0x16c>
 8010570:	e7b9      	b.n	80104e6 <_printf_i+0xf6>
 8010572:	6813      	ldr	r3, [r2, #0]
 8010574:	6825      	ldr	r5, [r4, #0]
 8010576:	6961      	ldr	r1, [r4, #20]
 8010578:	1d18      	adds	r0, r3, #4
 801057a:	6010      	str	r0, [r2, #0]
 801057c:	0628      	lsls	r0, r5, #24
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	d501      	bpl.n	8010586 <_printf_i+0x196>
 8010582:	6019      	str	r1, [r3, #0]
 8010584:	e002      	b.n	801058c <_printf_i+0x19c>
 8010586:	066a      	lsls	r2, r5, #25
 8010588:	d5fb      	bpl.n	8010582 <_printf_i+0x192>
 801058a:	8019      	strh	r1, [r3, #0]
 801058c:	2300      	movs	r3, #0
 801058e:	6123      	str	r3, [r4, #16]
 8010590:	4665      	mov	r5, ip
 8010592:	e7b9      	b.n	8010508 <_printf_i+0x118>
 8010594:	6813      	ldr	r3, [r2, #0]
 8010596:	1d19      	adds	r1, r3, #4
 8010598:	6011      	str	r1, [r2, #0]
 801059a:	681d      	ldr	r5, [r3, #0]
 801059c:	6862      	ldr	r2, [r4, #4]
 801059e:	2100      	movs	r1, #0
 80105a0:	4628      	mov	r0, r5
 80105a2:	f7f7 fd55 	bl	8008050 <memchr>
 80105a6:	b108      	cbz	r0, 80105ac <_printf_i+0x1bc>
 80105a8:	1b40      	subs	r0, r0, r5
 80105aa:	6060      	str	r0, [r4, #4]
 80105ac:	6863      	ldr	r3, [r4, #4]
 80105ae:	6123      	str	r3, [r4, #16]
 80105b0:	2300      	movs	r3, #0
 80105b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105b6:	e7a7      	b.n	8010508 <_printf_i+0x118>
 80105b8:	6923      	ldr	r3, [r4, #16]
 80105ba:	462a      	mov	r2, r5
 80105bc:	4639      	mov	r1, r7
 80105be:	4630      	mov	r0, r6
 80105c0:	47c0      	blx	r8
 80105c2:	3001      	adds	r0, #1
 80105c4:	d0aa      	beq.n	801051c <_printf_i+0x12c>
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	079b      	lsls	r3, r3, #30
 80105ca:	d413      	bmi.n	80105f4 <_printf_i+0x204>
 80105cc:	68e0      	ldr	r0, [r4, #12]
 80105ce:	9b03      	ldr	r3, [sp, #12]
 80105d0:	4298      	cmp	r0, r3
 80105d2:	bfb8      	it	lt
 80105d4:	4618      	movlt	r0, r3
 80105d6:	e7a3      	b.n	8010520 <_printf_i+0x130>
 80105d8:	2301      	movs	r3, #1
 80105da:	464a      	mov	r2, r9
 80105dc:	4639      	mov	r1, r7
 80105de:	4630      	mov	r0, r6
 80105e0:	47c0      	blx	r8
 80105e2:	3001      	adds	r0, #1
 80105e4:	d09a      	beq.n	801051c <_printf_i+0x12c>
 80105e6:	3501      	adds	r5, #1
 80105e8:	68e3      	ldr	r3, [r4, #12]
 80105ea:	9a03      	ldr	r2, [sp, #12]
 80105ec:	1a9b      	subs	r3, r3, r2
 80105ee:	42ab      	cmp	r3, r5
 80105f0:	dcf2      	bgt.n	80105d8 <_printf_i+0x1e8>
 80105f2:	e7eb      	b.n	80105cc <_printf_i+0x1dc>
 80105f4:	2500      	movs	r5, #0
 80105f6:	f104 0919 	add.w	r9, r4, #25
 80105fa:	e7f5      	b.n	80105e8 <_printf_i+0x1f8>
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d1ac      	bne.n	801055a <_printf_i+0x16a>
 8010600:	7803      	ldrb	r3, [r0, #0]
 8010602:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010606:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801060a:	e76c      	b.n	80104e6 <_printf_i+0xf6>
 801060c:	080124de 	.word	0x080124de
 8010610:	080124ef 	.word	0x080124ef

08010614 <iprintf>:
 8010614:	b40f      	push	{r0, r1, r2, r3}
 8010616:	4b0a      	ldr	r3, [pc, #40]	; (8010640 <iprintf+0x2c>)
 8010618:	b513      	push	{r0, r1, r4, lr}
 801061a:	681c      	ldr	r4, [r3, #0]
 801061c:	b124      	cbz	r4, 8010628 <iprintf+0x14>
 801061e:	69a3      	ldr	r3, [r4, #24]
 8010620:	b913      	cbnz	r3, 8010628 <iprintf+0x14>
 8010622:	4620      	mov	r0, r4
 8010624:	f001 f868 	bl	80116f8 <__sinit>
 8010628:	ab05      	add	r3, sp, #20
 801062a:	9a04      	ldr	r2, [sp, #16]
 801062c:	68a1      	ldr	r1, [r4, #8]
 801062e:	9301      	str	r3, [sp, #4]
 8010630:	4620      	mov	r0, r4
 8010632:	f001 fd21 	bl	8012078 <_vfiprintf_r>
 8010636:	b002      	add	sp, #8
 8010638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801063c:	b004      	add	sp, #16
 801063e:	4770      	bx	lr
 8010640:	2000000c 	.word	0x2000000c

08010644 <_puts_r>:
 8010644:	b570      	push	{r4, r5, r6, lr}
 8010646:	460e      	mov	r6, r1
 8010648:	4605      	mov	r5, r0
 801064a:	b118      	cbz	r0, 8010654 <_puts_r+0x10>
 801064c:	6983      	ldr	r3, [r0, #24]
 801064e:	b90b      	cbnz	r3, 8010654 <_puts_r+0x10>
 8010650:	f001 f852 	bl	80116f8 <__sinit>
 8010654:	69ab      	ldr	r3, [r5, #24]
 8010656:	68ac      	ldr	r4, [r5, #8]
 8010658:	b913      	cbnz	r3, 8010660 <_puts_r+0x1c>
 801065a:	4628      	mov	r0, r5
 801065c:	f001 f84c 	bl	80116f8 <__sinit>
 8010660:	4b23      	ldr	r3, [pc, #140]	; (80106f0 <_puts_r+0xac>)
 8010662:	429c      	cmp	r4, r3
 8010664:	d117      	bne.n	8010696 <_puts_r+0x52>
 8010666:	686c      	ldr	r4, [r5, #4]
 8010668:	89a3      	ldrh	r3, [r4, #12]
 801066a:	071b      	lsls	r3, r3, #28
 801066c:	d51d      	bpl.n	80106aa <_puts_r+0x66>
 801066e:	6923      	ldr	r3, [r4, #16]
 8010670:	b1db      	cbz	r3, 80106aa <_puts_r+0x66>
 8010672:	3e01      	subs	r6, #1
 8010674:	68a3      	ldr	r3, [r4, #8]
 8010676:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801067a:	3b01      	subs	r3, #1
 801067c:	60a3      	str	r3, [r4, #8]
 801067e:	b9e9      	cbnz	r1, 80106bc <_puts_r+0x78>
 8010680:	2b00      	cmp	r3, #0
 8010682:	da2e      	bge.n	80106e2 <_puts_r+0x9e>
 8010684:	4622      	mov	r2, r4
 8010686:	210a      	movs	r1, #10
 8010688:	4628      	mov	r0, r5
 801068a:	f000 f83f 	bl	801070c <__swbuf_r>
 801068e:	3001      	adds	r0, #1
 8010690:	d011      	beq.n	80106b6 <_puts_r+0x72>
 8010692:	200a      	movs	r0, #10
 8010694:	e011      	b.n	80106ba <_puts_r+0x76>
 8010696:	4b17      	ldr	r3, [pc, #92]	; (80106f4 <_puts_r+0xb0>)
 8010698:	429c      	cmp	r4, r3
 801069a:	d101      	bne.n	80106a0 <_puts_r+0x5c>
 801069c:	68ac      	ldr	r4, [r5, #8]
 801069e:	e7e3      	b.n	8010668 <_puts_r+0x24>
 80106a0:	4b15      	ldr	r3, [pc, #84]	; (80106f8 <_puts_r+0xb4>)
 80106a2:	429c      	cmp	r4, r3
 80106a4:	bf08      	it	eq
 80106a6:	68ec      	ldreq	r4, [r5, #12]
 80106a8:	e7de      	b.n	8010668 <_puts_r+0x24>
 80106aa:	4621      	mov	r1, r4
 80106ac:	4628      	mov	r0, r5
 80106ae:	f000 f87f 	bl	80107b0 <__swsetup_r>
 80106b2:	2800      	cmp	r0, #0
 80106b4:	d0dd      	beq.n	8010672 <_puts_r+0x2e>
 80106b6:	f04f 30ff 	mov.w	r0, #4294967295
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	2b00      	cmp	r3, #0
 80106be:	da04      	bge.n	80106ca <_puts_r+0x86>
 80106c0:	69a2      	ldr	r2, [r4, #24]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	dc06      	bgt.n	80106d4 <_puts_r+0x90>
 80106c6:	290a      	cmp	r1, #10
 80106c8:	d004      	beq.n	80106d4 <_puts_r+0x90>
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	1c5a      	adds	r2, r3, #1
 80106ce:	6022      	str	r2, [r4, #0]
 80106d0:	7019      	strb	r1, [r3, #0]
 80106d2:	e7cf      	b.n	8010674 <_puts_r+0x30>
 80106d4:	4622      	mov	r2, r4
 80106d6:	4628      	mov	r0, r5
 80106d8:	f000 f818 	bl	801070c <__swbuf_r>
 80106dc:	3001      	adds	r0, #1
 80106de:	d1c9      	bne.n	8010674 <_puts_r+0x30>
 80106e0:	e7e9      	b.n	80106b6 <_puts_r+0x72>
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	200a      	movs	r0, #10
 80106e6:	1c5a      	adds	r2, r3, #1
 80106e8:	6022      	str	r2, [r4, #0]
 80106ea:	7018      	strb	r0, [r3, #0]
 80106ec:	e7e5      	b.n	80106ba <_puts_r+0x76>
 80106ee:	bf00      	nop
 80106f0:	08012530 	.word	0x08012530
 80106f4:	08012550 	.word	0x08012550
 80106f8:	08012510 	.word	0x08012510

080106fc <puts>:
 80106fc:	4b02      	ldr	r3, [pc, #8]	; (8010708 <puts+0xc>)
 80106fe:	4601      	mov	r1, r0
 8010700:	6818      	ldr	r0, [r3, #0]
 8010702:	f7ff bf9f 	b.w	8010644 <_puts_r>
 8010706:	bf00      	nop
 8010708:	2000000c 	.word	0x2000000c

0801070c <__swbuf_r>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	460e      	mov	r6, r1
 8010710:	4614      	mov	r4, r2
 8010712:	4605      	mov	r5, r0
 8010714:	b118      	cbz	r0, 801071e <__swbuf_r+0x12>
 8010716:	6983      	ldr	r3, [r0, #24]
 8010718:	b90b      	cbnz	r3, 801071e <__swbuf_r+0x12>
 801071a:	f000 ffed 	bl	80116f8 <__sinit>
 801071e:	4b21      	ldr	r3, [pc, #132]	; (80107a4 <__swbuf_r+0x98>)
 8010720:	429c      	cmp	r4, r3
 8010722:	d12a      	bne.n	801077a <__swbuf_r+0x6e>
 8010724:	686c      	ldr	r4, [r5, #4]
 8010726:	69a3      	ldr	r3, [r4, #24]
 8010728:	60a3      	str	r3, [r4, #8]
 801072a:	89a3      	ldrh	r3, [r4, #12]
 801072c:	071a      	lsls	r2, r3, #28
 801072e:	d52e      	bpl.n	801078e <__swbuf_r+0x82>
 8010730:	6923      	ldr	r3, [r4, #16]
 8010732:	b363      	cbz	r3, 801078e <__swbuf_r+0x82>
 8010734:	6923      	ldr	r3, [r4, #16]
 8010736:	6820      	ldr	r0, [r4, #0]
 8010738:	1ac0      	subs	r0, r0, r3
 801073a:	6963      	ldr	r3, [r4, #20]
 801073c:	b2f6      	uxtb	r6, r6
 801073e:	4283      	cmp	r3, r0
 8010740:	4637      	mov	r7, r6
 8010742:	dc04      	bgt.n	801074e <__swbuf_r+0x42>
 8010744:	4621      	mov	r1, r4
 8010746:	4628      	mov	r0, r5
 8010748:	f000 ff6c 	bl	8011624 <_fflush_r>
 801074c:	bb28      	cbnz	r0, 801079a <__swbuf_r+0x8e>
 801074e:	68a3      	ldr	r3, [r4, #8]
 8010750:	3b01      	subs	r3, #1
 8010752:	60a3      	str	r3, [r4, #8]
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	1c5a      	adds	r2, r3, #1
 8010758:	6022      	str	r2, [r4, #0]
 801075a:	701e      	strb	r6, [r3, #0]
 801075c:	6963      	ldr	r3, [r4, #20]
 801075e:	3001      	adds	r0, #1
 8010760:	4283      	cmp	r3, r0
 8010762:	d004      	beq.n	801076e <__swbuf_r+0x62>
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	07db      	lsls	r3, r3, #31
 8010768:	d519      	bpl.n	801079e <__swbuf_r+0x92>
 801076a:	2e0a      	cmp	r6, #10
 801076c:	d117      	bne.n	801079e <__swbuf_r+0x92>
 801076e:	4621      	mov	r1, r4
 8010770:	4628      	mov	r0, r5
 8010772:	f000 ff57 	bl	8011624 <_fflush_r>
 8010776:	b190      	cbz	r0, 801079e <__swbuf_r+0x92>
 8010778:	e00f      	b.n	801079a <__swbuf_r+0x8e>
 801077a:	4b0b      	ldr	r3, [pc, #44]	; (80107a8 <__swbuf_r+0x9c>)
 801077c:	429c      	cmp	r4, r3
 801077e:	d101      	bne.n	8010784 <__swbuf_r+0x78>
 8010780:	68ac      	ldr	r4, [r5, #8]
 8010782:	e7d0      	b.n	8010726 <__swbuf_r+0x1a>
 8010784:	4b09      	ldr	r3, [pc, #36]	; (80107ac <__swbuf_r+0xa0>)
 8010786:	429c      	cmp	r4, r3
 8010788:	bf08      	it	eq
 801078a:	68ec      	ldreq	r4, [r5, #12]
 801078c:	e7cb      	b.n	8010726 <__swbuf_r+0x1a>
 801078e:	4621      	mov	r1, r4
 8010790:	4628      	mov	r0, r5
 8010792:	f000 f80d 	bl	80107b0 <__swsetup_r>
 8010796:	2800      	cmp	r0, #0
 8010798:	d0cc      	beq.n	8010734 <__swbuf_r+0x28>
 801079a:	f04f 37ff 	mov.w	r7, #4294967295
 801079e:	4638      	mov	r0, r7
 80107a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a2:	bf00      	nop
 80107a4:	08012530 	.word	0x08012530
 80107a8:	08012550 	.word	0x08012550
 80107ac:	08012510 	.word	0x08012510

080107b0 <__swsetup_r>:
 80107b0:	4b32      	ldr	r3, [pc, #200]	; (801087c <__swsetup_r+0xcc>)
 80107b2:	b570      	push	{r4, r5, r6, lr}
 80107b4:	681d      	ldr	r5, [r3, #0]
 80107b6:	4606      	mov	r6, r0
 80107b8:	460c      	mov	r4, r1
 80107ba:	b125      	cbz	r5, 80107c6 <__swsetup_r+0x16>
 80107bc:	69ab      	ldr	r3, [r5, #24]
 80107be:	b913      	cbnz	r3, 80107c6 <__swsetup_r+0x16>
 80107c0:	4628      	mov	r0, r5
 80107c2:	f000 ff99 	bl	80116f8 <__sinit>
 80107c6:	4b2e      	ldr	r3, [pc, #184]	; (8010880 <__swsetup_r+0xd0>)
 80107c8:	429c      	cmp	r4, r3
 80107ca:	d10f      	bne.n	80107ec <__swsetup_r+0x3c>
 80107cc:	686c      	ldr	r4, [r5, #4]
 80107ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	0715      	lsls	r5, r2, #28
 80107d6:	d42c      	bmi.n	8010832 <__swsetup_r+0x82>
 80107d8:	06d0      	lsls	r0, r2, #27
 80107da:	d411      	bmi.n	8010800 <__swsetup_r+0x50>
 80107dc:	2209      	movs	r2, #9
 80107de:	6032      	str	r2, [r6, #0]
 80107e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107e4:	81a3      	strh	r3, [r4, #12]
 80107e6:	f04f 30ff 	mov.w	r0, #4294967295
 80107ea:	e03e      	b.n	801086a <__swsetup_r+0xba>
 80107ec:	4b25      	ldr	r3, [pc, #148]	; (8010884 <__swsetup_r+0xd4>)
 80107ee:	429c      	cmp	r4, r3
 80107f0:	d101      	bne.n	80107f6 <__swsetup_r+0x46>
 80107f2:	68ac      	ldr	r4, [r5, #8]
 80107f4:	e7eb      	b.n	80107ce <__swsetup_r+0x1e>
 80107f6:	4b24      	ldr	r3, [pc, #144]	; (8010888 <__swsetup_r+0xd8>)
 80107f8:	429c      	cmp	r4, r3
 80107fa:	bf08      	it	eq
 80107fc:	68ec      	ldreq	r4, [r5, #12]
 80107fe:	e7e6      	b.n	80107ce <__swsetup_r+0x1e>
 8010800:	0751      	lsls	r1, r2, #29
 8010802:	d512      	bpl.n	801082a <__swsetup_r+0x7a>
 8010804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010806:	b141      	cbz	r1, 801081a <__swsetup_r+0x6a>
 8010808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801080c:	4299      	cmp	r1, r3
 801080e:	d002      	beq.n	8010816 <__swsetup_r+0x66>
 8010810:	4630      	mov	r0, r6
 8010812:	f001 fb5f 	bl	8011ed4 <_free_r>
 8010816:	2300      	movs	r3, #0
 8010818:	6363      	str	r3, [r4, #52]	; 0x34
 801081a:	89a3      	ldrh	r3, [r4, #12]
 801081c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010820:	81a3      	strh	r3, [r4, #12]
 8010822:	2300      	movs	r3, #0
 8010824:	6063      	str	r3, [r4, #4]
 8010826:	6923      	ldr	r3, [r4, #16]
 8010828:	6023      	str	r3, [r4, #0]
 801082a:	89a3      	ldrh	r3, [r4, #12]
 801082c:	f043 0308 	orr.w	r3, r3, #8
 8010830:	81a3      	strh	r3, [r4, #12]
 8010832:	6923      	ldr	r3, [r4, #16]
 8010834:	b94b      	cbnz	r3, 801084a <__swsetup_r+0x9a>
 8010836:	89a3      	ldrh	r3, [r4, #12]
 8010838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801083c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010840:	d003      	beq.n	801084a <__swsetup_r+0x9a>
 8010842:	4621      	mov	r1, r4
 8010844:	4630      	mov	r0, r6
 8010846:	f001 f813 	bl	8011870 <__smakebuf_r>
 801084a:	89a2      	ldrh	r2, [r4, #12]
 801084c:	f012 0301 	ands.w	r3, r2, #1
 8010850:	d00c      	beq.n	801086c <__swsetup_r+0xbc>
 8010852:	2300      	movs	r3, #0
 8010854:	60a3      	str	r3, [r4, #8]
 8010856:	6963      	ldr	r3, [r4, #20]
 8010858:	425b      	negs	r3, r3
 801085a:	61a3      	str	r3, [r4, #24]
 801085c:	6923      	ldr	r3, [r4, #16]
 801085e:	b953      	cbnz	r3, 8010876 <__swsetup_r+0xc6>
 8010860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010864:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010868:	d1ba      	bne.n	80107e0 <__swsetup_r+0x30>
 801086a:	bd70      	pop	{r4, r5, r6, pc}
 801086c:	0792      	lsls	r2, r2, #30
 801086e:	bf58      	it	pl
 8010870:	6963      	ldrpl	r3, [r4, #20]
 8010872:	60a3      	str	r3, [r4, #8]
 8010874:	e7f2      	b.n	801085c <__swsetup_r+0xac>
 8010876:	2000      	movs	r0, #0
 8010878:	e7f7      	b.n	801086a <__swsetup_r+0xba>
 801087a:	bf00      	nop
 801087c:	2000000c 	.word	0x2000000c
 8010880:	08012530 	.word	0x08012530
 8010884:	08012550 	.word	0x08012550
 8010888:	08012510 	.word	0x08012510

0801088c <quorem>:
 801088c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010890:	6903      	ldr	r3, [r0, #16]
 8010892:	690c      	ldr	r4, [r1, #16]
 8010894:	42a3      	cmp	r3, r4
 8010896:	4680      	mov	r8, r0
 8010898:	f2c0 8082 	blt.w	80109a0 <quorem+0x114>
 801089c:	3c01      	subs	r4, #1
 801089e:	f101 0714 	add.w	r7, r1, #20
 80108a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80108a6:	f100 0614 	add.w	r6, r0, #20
 80108aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80108ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80108b2:	eb06 030c 	add.w	r3, r6, ip
 80108b6:	3501      	adds	r5, #1
 80108b8:	eb07 090c 	add.w	r9, r7, ip
 80108bc:	9301      	str	r3, [sp, #4]
 80108be:	fbb0 f5f5 	udiv	r5, r0, r5
 80108c2:	b395      	cbz	r5, 801092a <quorem+0x9e>
 80108c4:	f04f 0a00 	mov.w	sl, #0
 80108c8:	4638      	mov	r0, r7
 80108ca:	46b6      	mov	lr, r6
 80108cc:	46d3      	mov	fp, sl
 80108ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80108d2:	b293      	uxth	r3, r2
 80108d4:	fb05 a303 	mla	r3, r5, r3, sl
 80108d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80108dc:	b29b      	uxth	r3, r3
 80108de:	ebab 0303 	sub.w	r3, fp, r3
 80108e2:	0c12      	lsrs	r2, r2, #16
 80108e4:	f8de b000 	ldr.w	fp, [lr]
 80108e8:	fb05 a202 	mla	r2, r5, r2, sl
 80108ec:	fa13 f38b 	uxtah	r3, r3, fp
 80108f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80108f4:	fa1f fb82 	uxth.w	fp, r2
 80108f8:	f8de 2000 	ldr.w	r2, [lr]
 80108fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010904:	b29b      	uxth	r3, r3
 8010906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801090a:	4581      	cmp	r9, r0
 801090c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010910:	f84e 3b04 	str.w	r3, [lr], #4
 8010914:	d2db      	bcs.n	80108ce <quorem+0x42>
 8010916:	f856 300c 	ldr.w	r3, [r6, ip]
 801091a:	b933      	cbnz	r3, 801092a <quorem+0x9e>
 801091c:	9b01      	ldr	r3, [sp, #4]
 801091e:	3b04      	subs	r3, #4
 8010920:	429e      	cmp	r6, r3
 8010922:	461a      	mov	r2, r3
 8010924:	d330      	bcc.n	8010988 <quorem+0xfc>
 8010926:	f8c8 4010 	str.w	r4, [r8, #16]
 801092a:	4640      	mov	r0, r8
 801092c:	f001 f9fe 	bl	8011d2c <__mcmp>
 8010930:	2800      	cmp	r0, #0
 8010932:	db25      	blt.n	8010980 <quorem+0xf4>
 8010934:	3501      	adds	r5, #1
 8010936:	4630      	mov	r0, r6
 8010938:	f04f 0c00 	mov.w	ip, #0
 801093c:	f857 2b04 	ldr.w	r2, [r7], #4
 8010940:	f8d0 e000 	ldr.w	lr, [r0]
 8010944:	b293      	uxth	r3, r2
 8010946:	ebac 0303 	sub.w	r3, ip, r3
 801094a:	0c12      	lsrs	r2, r2, #16
 801094c:	fa13 f38e 	uxtah	r3, r3, lr
 8010950:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010958:	b29b      	uxth	r3, r3
 801095a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801095e:	45b9      	cmp	r9, r7
 8010960:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010964:	f840 3b04 	str.w	r3, [r0], #4
 8010968:	d2e8      	bcs.n	801093c <quorem+0xb0>
 801096a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801096e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010972:	b92a      	cbnz	r2, 8010980 <quorem+0xf4>
 8010974:	3b04      	subs	r3, #4
 8010976:	429e      	cmp	r6, r3
 8010978:	461a      	mov	r2, r3
 801097a:	d30b      	bcc.n	8010994 <quorem+0x108>
 801097c:	f8c8 4010 	str.w	r4, [r8, #16]
 8010980:	4628      	mov	r0, r5
 8010982:	b003      	add	sp, #12
 8010984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010988:	6812      	ldr	r2, [r2, #0]
 801098a:	3b04      	subs	r3, #4
 801098c:	2a00      	cmp	r2, #0
 801098e:	d1ca      	bne.n	8010926 <quorem+0x9a>
 8010990:	3c01      	subs	r4, #1
 8010992:	e7c5      	b.n	8010920 <quorem+0x94>
 8010994:	6812      	ldr	r2, [r2, #0]
 8010996:	3b04      	subs	r3, #4
 8010998:	2a00      	cmp	r2, #0
 801099a:	d1ef      	bne.n	801097c <quorem+0xf0>
 801099c:	3c01      	subs	r4, #1
 801099e:	e7ea      	b.n	8010976 <quorem+0xea>
 80109a0:	2000      	movs	r0, #0
 80109a2:	e7ee      	b.n	8010982 <quorem+0xf6>
 80109a4:	0000      	movs	r0, r0
	...

080109a8 <_dtoa_r>:
 80109a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ac:	ec57 6b10 	vmov	r6, r7, d0
 80109b0:	b097      	sub	sp, #92	; 0x5c
 80109b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80109b4:	9106      	str	r1, [sp, #24]
 80109b6:	4604      	mov	r4, r0
 80109b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80109ba:	9312      	str	r3, [sp, #72]	; 0x48
 80109bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80109c0:	e9cd 6700 	strd	r6, r7, [sp]
 80109c4:	b93d      	cbnz	r5, 80109d6 <_dtoa_r+0x2e>
 80109c6:	2010      	movs	r0, #16
 80109c8:	f000 ff92 	bl	80118f0 <malloc>
 80109cc:	6260      	str	r0, [r4, #36]	; 0x24
 80109ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109d2:	6005      	str	r5, [r0, #0]
 80109d4:	60c5      	str	r5, [r0, #12]
 80109d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109d8:	6819      	ldr	r1, [r3, #0]
 80109da:	b151      	cbz	r1, 80109f2 <_dtoa_r+0x4a>
 80109dc:	685a      	ldr	r2, [r3, #4]
 80109de:	604a      	str	r2, [r1, #4]
 80109e0:	2301      	movs	r3, #1
 80109e2:	4093      	lsls	r3, r2
 80109e4:	608b      	str	r3, [r1, #8]
 80109e6:	4620      	mov	r0, r4
 80109e8:	f000 ffbe 	bl	8011968 <_Bfree>
 80109ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109ee:	2200      	movs	r2, #0
 80109f0:	601a      	str	r2, [r3, #0]
 80109f2:	1e3b      	subs	r3, r7, #0
 80109f4:	bfbb      	ittet	lt
 80109f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80109fa:	9301      	strlt	r3, [sp, #4]
 80109fc:	2300      	movge	r3, #0
 80109fe:	2201      	movlt	r2, #1
 8010a00:	bfac      	ite	ge
 8010a02:	f8c8 3000 	strge.w	r3, [r8]
 8010a06:	f8c8 2000 	strlt.w	r2, [r8]
 8010a0a:	4baf      	ldr	r3, [pc, #700]	; (8010cc8 <_dtoa_r+0x320>)
 8010a0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010a10:	ea33 0308 	bics.w	r3, r3, r8
 8010a14:	d114      	bne.n	8010a40 <_dtoa_r+0x98>
 8010a16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010a18:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a1c:	6013      	str	r3, [r2, #0]
 8010a1e:	9b00      	ldr	r3, [sp, #0]
 8010a20:	b923      	cbnz	r3, 8010a2c <_dtoa_r+0x84>
 8010a22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010a26:	2800      	cmp	r0, #0
 8010a28:	f000 8542 	beq.w	80114b0 <_dtoa_r+0xb08>
 8010a2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010cdc <_dtoa_r+0x334>
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 8544 	beq.w	80114c0 <_dtoa_r+0xb18>
 8010a38:	f10b 0303 	add.w	r3, fp, #3
 8010a3c:	f000 bd3e 	b.w	80114bc <_dtoa_r+0xb14>
 8010a40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010a44:	2200      	movs	r2, #0
 8010a46:	2300      	movs	r3, #0
 8010a48:	4630      	mov	r0, r6
 8010a4a:	4639      	mov	r1, r7
 8010a4c:	f7f7 ff74 	bl	8008938 <__aeabi_dcmpeq>
 8010a50:	4681      	mov	r9, r0
 8010a52:	b168      	cbz	r0, 8010a70 <_dtoa_r+0xc8>
 8010a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010a56:	2301      	movs	r3, #1
 8010a58:	6013      	str	r3, [r2, #0]
 8010a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 8524 	beq.w	80114aa <_dtoa_r+0xb02>
 8010a62:	4b9a      	ldr	r3, [pc, #616]	; (8010ccc <_dtoa_r+0x324>)
 8010a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a66:	f103 3bff 	add.w	fp, r3, #4294967295
 8010a6a:	6013      	str	r3, [r2, #0]
 8010a6c:	f000 bd28 	b.w	80114c0 <_dtoa_r+0xb18>
 8010a70:	aa14      	add	r2, sp, #80	; 0x50
 8010a72:	a915      	add	r1, sp, #84	; 0x54
 8010a74:	ec47 6b10 	vmov	d0, r6, r7
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f001 f9ce 	bl	8011e1a <__d2b>
 8010a7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010a82:	9004      	str	r0, [sp, #16]
 8010a84:	2d00      	cmp	r5, #0
 8010a86:	d07c      	beq.n	8010b82 <_dtoa_r+0x1da>
 8010a88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010a8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010a90:	46b2      	mov	sl, r6
 8010a92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010a9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	4b8b      	ldr	r3, [pc, #556]	; (8010cd0 <_dtoa_r+0x328>)
 8010aa2:	4650      	mov	r0, sl
 8010aa4:	4659      	mov	r1, fp
 8010aa6:	f7f7 fb27 	bl	80080f8 <__aeabi_dsub>
 8010aaa:	a381      	add	r3, pc, #516	; (adr r3, 8010cb0 <_dtoa_r+0x308>)
 8010aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab0:	f7f7 fcda 	bl	8008468 <__aeabi_dmul>
 8010ab4:	a380      	add	r3, pc, #512	; (adr r3, 8010cb8 <_dtoa_r+0x310>)
 8010ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aba:	f7f7 fb1f 	bl	80080fc <__adddf3>
 8010abe:	4606      	mov	r6, r0
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	460f      	mov	r7, r1
 8010ac4:	f7f7 fc66 	bl	8008394 <__aeabi_i2d>
 8010ac8:	a37d      	add	r3, pc, #500	; (adr r3, 8010cc0 <_dtoa_r+0x318>)
 8010aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ace:	f7f7 fccb 	bl	8008468 <__aeabi_dmul>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	460b      	mov	r3, r1
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	4639      	mov	r1, r7
 8010ada:	f7f7 fb0f 	bl	80080fc <__adddf3>
 8010ade:	4606      	mov	r6, r0
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	f7f7 ff71 	bl	80089c8 <__aeabi_d2iz>
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	4682      	mov	sl, r0
 8010aea:	2300      	movs	r3, #0
 8010aec:	4630      	mov	r0, r6
 8010aee:	4639      	mov	r1, r7
 8010af0:	f7f7 ff2c 	bl	800894c <__aeabi_dcmplt>
 8010af4:	b148      	cbz	r0, 8010b0a <_dtoa_r+0x162>
 8010af6:	4650      	mov	r0, sl
 8010af8:	f7f7 fc4c 	bl	8008394 <__aeabi_i2d>
 8010afc:	4632      	mov	r2, r6
 8010afe:	463b      	mov	r3, r7
 8010b00:	f7f7 ff1a 	bl	8008938 <__aeabi_dcmpeq>
 8010b04:	b908      	cbnz	r0, 8010b0a <_dtoa_r+0x162>
 8010b06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b0a:	f1ba 0f16 	cmp.w	sl, #22
 8010b0e:	d859      	bhi.n	8010bc4 <_dtoa_r+0x21c>
 8010b10:	4970      	ldr	r1, [pc, #448]	; (8010cd4 <_dtoa_r+0x32c>)
 8010b12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b1e:	f7f7 ff33 	bl	8008988 <__aeabi_dcmpgt>
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d050      	beq.n	8010bc8 <_dtoa_r+0x220>
 8010b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b30:	1b5d      	subs	r5, r3, r5
 8010b32:	f1b5 0801 	subs.w	r8, r5, #1
 8010b36:	bf49      	itett	mi
 8010b38:	f1c5 0301 	rsbmi	r3, r5, #1
 8010b3c:	2300      	movpl	r3, #0
 8010b3e:	9305      	strmi	r3, [sp, #20]
 8010b40:	f04f 0800 	movmi.w	r8, #0
 8010b44:	bf58      	it	pl
 8010b46:	9305      	strpl	r3, [sp, #20]
 8010b48:	f1ba 0f00 	cmp.w	sl, #0
 8010b4c:	db3e      	blt.n	8010bcc <_dtoa_r+0x224>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	44d0      	add	r8, sl
 8010b52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010b56:	9307      	str	r3, [sp, #28]
 8010b58:	9b06      	ldr	r3, [sp, #24]
 8010b5a:	2b09      	cmp	r3, #9
 8010b5c:	f200 8090 	bhi.w	8010c80 <_dtoa_r+0x2d8>
 8010b60:	2b05      	cmp	r3, #5
 8010b62:	bfc4      	itt	gt
 8010b64:	3b04      	subgt	r3, #4
 8010b66:	9306      	strgt	r3, [sp, #24]
 8010b68:	9b06      	ldr	r3, [sp, #24]
 8010b6a:	f1a3 0302 	sub.w	r3, r3, #2
 8010b6e:	bfcc      	ite	gt
 8010b70:	2500      	movgt	r5, #0
 8010b72:	2501      	movle	r5, #1
 8010b74:	2b03      	cmp	r3, #3
 8010b76:	f200 808f 	bhi.w	8010c98 <_dtoa_r+0x2f0>
 8010b7a:	e8df f003 	tbb	[pc, r3]
 8010b7e:	7f7d      	.short	0x7f7d
 8010b80:	7131      	.short	0x7131
 8010b82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010b86:	441d      	add	r5, r3
 8010b88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010b8c:	2820      	cmp	r0, #32
 8010b8e:	dd13      	ble.n	8010bb8 <_dtoa_r+0x210>
 8010b90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010b94:	9b00      	ldr	r3, [sp, #0]
 8010b96:	fa08 f800 	lsl.w	r8, r8, r0
 8010b9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010b9e:	fa23 f000 	lsr.w	r0, r3, r0
 8010ba2:	ea48 0000 	orr.w	r0, r8, r0
 8010ba6:	f7f7 fbe5 	bl	8008374 <__aeabi_ui2d>
 8010baa:	2301      	movs	r3, #1
 8010bac:	4682      	mov	sl, r0
 8010bae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010bb2:	3d01      	subs	r5, #1
 8010bb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8010bb6:	e772      	b.n	8010a9e <_dtoa_r+0xf6>
 8010bb8:	9b00      	ldr	r3, [sp, #0]
 8010bba:	f1c0 0020 	rsb	r0, r0, #32
 8010bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8010bc2:	e7f0      	b.n	8010ba6 <_dtoa_r+0x1fe>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e7b1      	b.n	8010b2c <_dtoa_r+0x184>
 8010bc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8010bca:	e7b0      	b.n	8010b2e <_dtoa_r+0x186>
 8010bcc:	9b05      	ldr	r3, [sp, #20]
 8010bce:	eba3 030a 	sub.w	r3, r3, sl
 8010bd2:	9305      	str	r3, [sp, #20]
 8010bd4:	f1ca 0300 	rsb	r3, sl, #0
 8010bd8:	9307      	str	r3, [sp, #28]
 8010bda:	2300      	movs	r3, #0
 8010bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8010bde:	e7bb      	b.n	8010b58 <_dtoa_r+0x1b0>
 8010be0:	2301      	movs	r3, #1
 8010be2:	930a      	str	r3, [sp, #40]	; 0x28
 8010be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	dd59      	ble.n	8010c9e <_dtoa_r+0x2f6>
 8010bea:	9302      	str	r3, [sp, #8]
 8010bec:	4699      	mov	r9, r3
 8010bee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	6072      	str	r2, [r6, #4]
 8010bf4:	2204      	movs	r2, #4
 8010bf6:	f102 0014 	add.w	r0, r2, #20
 8010bfa:	4298      	cmp	r0, r3
 8010bfc:	6871      	ldr	r1, [r6, #4]
 8010bfe:	d953      	bls.n	8010ca8 <_dtoa_r+0x300>
 8010c00:	4620      	mov	r0, r4
 8010c02:	f000 fe7d 	bl	8011900 <_Balloc>
 8010c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c08:	6030      	str	r0, [r6, #0]
 8010c0a:	f1b9 0f0e 	cmp.w	r9, #14
 8010c0e:	f8d3 b000 	ldr.w	fp, [r3]
 8010c12:	f200 80e6 	bhi.w	8010de2 <_dtoa_r+0x43a>
 8010c16:	2d00      	cmp	r5, #0
 8010c18:	f000 80e3 	beq.w	8010de2 <_dtoa_r+0x43a>
 8010c1c:	ed9d 7b00 	vldr	d7, [sp]
 8010c20:	f1ba 0f00 	cmp.w	sl, #0
 8010c24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010c28:	dd74      	ble.n	8010d14 <_dtoa_r+0x36c>
 8010c2a:	4a2a      	ldr	r2, [pc, #168]	; (8010cd4 <_dtoa_r+0x32c>)
 8010c2c:	f00a 030f 	and.w	r3, sl, #15
 8010c30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c34:	ed93 7b00 	vldr	d7, [r3]
 8010c38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010c3c:	06f0      	lsls	r0, r6, #27
 8010c3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010c42:	d565      	bpl.n	8010d10 <_dtoa_r+0x368>
 8010c44:	4b24      	ldr	r3, [pc, #144]	; (8010cd8 <_dtoa_r+0x330>)
 8010c46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010c4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c4e:	f7f7 fd35 	bl	80086bc <__aeabi_ddiv>
 8010c52:	e9cd 0100 	strd	r0, r1, [sp]
 8010c56:	f006 060f 	and.w	r6, r6, #15
 8010c5a:	2503      	movs	r5, #3
 8010c5c:	4f1e      	ldr	r7, [pc, #120]	; (8010cd8 <_dtoa_r+0x330>)
 8010c5e:	e04c      	b.n	8010cfa <_dtoa_r+0x352>
 8010c60:	2301      	movs	r3, #1
 8010c62:	930a      	str	r3, [sp, #40]	; 0x28
 8010c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c66:	4453      	add	r3, sl
 8010c68:	f103 0901 	add.w	r9, r3, #1
 8010c6c:	9302      	str	r3, [sp, #8]
 8010c6e:	464b      	mov	r3, r9
 8010c70:	2b01      	cmp	r3, #1
 8010c72:	bfb8      	it	lt
 8010c74:	2301      	movlt	r3, #1
 8010c76:	e7ba      	b.n	8010bee <_dtoa_r+0x246>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	e7b2      	b.n	8010be2 <_dtoa_r+0x23a>
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	e7f0      	b.n	8010c62 <_dtoa_r+0x2ba>
 8010c80:	2501      	movs	r5, #1
 8010c82:	2300      	movs	r3, #0
 8010c84:	9306      	str	r3, [sp, #24]
 8010c86:	950a      	str	r5, [sp, #40]	; 0x28
 8010c88:	f04f 33ff 	mov.w	r3, #4294967295
 8010c8c:	9302      	str	r3, [sp, #8]
 8010c8e:	4699      	mov	r9, r3
 8010c90:	2200      	movs	r2, #0
 8010c92:	2312      	movs	r3, #18
 8010c94:	920b      	str	r2, [sp, #44]	; 0x2c
 8010c96:	e7aa      	b.n	8010bee <_dtoa_r+0x246>
 8010c98:	2301      	movs	r3, #1
 8010c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8010c9c:	e7f4      	b.n	8010c88 <_dtoa_r+0x2e0>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	9302      	str	r3, [sp, #8]
 8010ca2:	4699      	mov	r9, r3
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	e7f5      	b.n	8010c94 <_dtoa_r+0x2ec>
 8010ca8:	3101      	adds	r1, #1
 8010caa:	6071      	str	r1, [r6, #4]
 8010cac:	0052      	lsls	r2, r2, #1
 8010cae:	e7a2      	b.n	8010bf6 <_dtoa_r+0x24e>
 8010cb0:	636f4361 	.word	0x636f4361
 8010cb4:	3fd287a7 	.word	0x3fd287a7
 8010cb8:	8b60c8b3 	.word	0x8b60c8b3
 8010cbc:	3fc68a28 	.word	0x3fc68a28
 8010cc0:	509f79fb 	.word	0x509f79fb
 8010cc4:	3fd34413 	.word	0x3fd34413
 8010cc8:	7ff00000 	.word	0x7ff00000
 8010ccc:	080124dd 	.word	0x080124dd
 8010cd0:	3ff80000 	.word	0x3ff80000
 8010cd4:	08012598 	.word	0x08012598
 8010cd8:	08012570 	.word	0x08012570
 8010cdc:	08012509 	.word	0x08012509
 8010ce0:	07f1      	lsls	r1, r6, #31
 8010ce2:	d508      	bpl.n	8010cf6 <_dtoa_r+0x34e>
 8010ce4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cec:	f7f7 fbbc 	bl	8008468 <__aeabi_dmul>
 8010cf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010cf4:	3501      	adds	r5, #1
 8010cf6:	1076      	asrs	r6, r6, #1
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	2e00      	cmp	r6, #0
 8010cfc:	d1f0      	bne.n	8010ce0 <_dtoa_r+0x338>
 8010cfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d06:	f7f7 fcd9 	bl	80086bc <__aeabi_ddiv>
 8010d0a:	e9cd 0100 	strd	r0, r1, [sp]
 8010d0e:	e01a      	b.n	8010d46 <_dtoa_r+0x39e>
 8010d10:	2502      	movs	r5, #2
 8010d12:	e7a3      	b.n	8010c5c <_dtoa_r+0x2b4>
 8010d14:	f000 80a0 	beq.w	8010e58 <_dtoa_r+0x4b0>
 8010d18:	f1ca 0600 	rsb	r6, sl, #0
 8010d1c:	4b9f      	ldr	r3, [pc, #636]	; (8010f9c <_dtoa_r+0x5f4>)
 8010d1e:	4fa0      	ldr	r7, [pc, #640]	; (8010fa0 <_dtoa_r+0x5f8>)
 8010d20:	f006 020f 	and.w	r2, r6, #15
 8010d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010d30:	f7f7 fb9a 	bl	8008468 <__aeabi_dmul>
 8010d34:	e9cd 0100 	strd	r0, r1, [sp]
 8010d38:	1136      	asrs	r6, r6, #4
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	2502      	movs	r5, #2
 8010d3e:	2e00      	cmp	r6, #0
 8010d40:	d17f      	bne.n	8010e42 <_dtoa_r+0x49a>
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d1e1      	bne.n	8010d0a <_dtoa_r+0x362>
 8010d46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	f000 8087 	beq.w	8010e5c <_dtoa_r+0x4b4>
 8010d4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010d52:	2200      	movs	r2, #0
 8010d54:	4b93      	ldr	r3, [pc, #588]	; (8010fa4 <_dtoa_r+0x5fc>)
 8010d56:	4630      	mov	r0, r6
 8010d58:	4639      	mov	r1, r7
 8010d5a:	f7f7 fdf7 	bl	800894c <__aeabi_dcmplt>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	d07c      	beq.n	8010e5c <_dtoa_r+0x4b4>
 8010d62:	f1b9 0f00 	cmp.w	r9, #0
 8010d66:	d079      	beq.n	8010e5c <_dtoa_r+0x4b4>
 8010d68:	9b02      	ldr	r3, [sp, #8]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	dd35      	ble.n	8010dda <_dtoa_r+0x432>
 8010d6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010d72:	9308      	str	r3, [sp, #32]
 8010d74:	4639      	mov	r1, r7
 8010d76:	2200      	movs	r2, #0
 8010d78:	4b8b      	ldr	r3, [pc, #556]	; (8010fa8 <_dtoa_r+0x600>)
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	f7f7 fb74 	bl	8008468 <__aeabi_dmul>
 8010d80:	e9cd 0100 	strd	r0, r1, [sp]
 8010d84:	9f02      	ldr	r7, [sp, #8]
 8010d86:	3501      	adds	r5, #1
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f7f7 fb03 	bl	8008394 <__aeabi_i2d>
 8010d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d92:	f7f7 fb69 	bl	8008468 <__aeabi_dmul>
 8010d96:	2200      	movs	r2, #0
 8010d98:	4b84      	ldr	r3, [pc, #528]	; (8010fac <_dtoa_r+0x604>)
 8010d9a:	f7f7 f9af 	bl	80080fc <__adddf3>
 8010d9e:	4605      	mov	r5, r0
 8010da0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010da4:	2f00      	cmp	r7, #0
 8010da6:	d15d      	bne.n	8010e64 <_dtoa_r+0x4bc>
 8010da8:	2200      	movs	r2, #0
 8010daa:	4b81      	ldr	r3, [pc, #516]	; (8010fb0 <_dtoa_r+0x608>)
 8010dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010db0:	f7f7 f9a2 	bl	80080f8 <__aeabi_dsub>
 8010db4:	462a      	mov	r2, r5
 8010db6:	4633      	mov	r3, r6
 8010db8:	e9cd 0100 	strd	r0, r1, [sp]
 8010dbc:	f7f7 fde4 	bl	8008988 <__aeabi_dcmpgt>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	f040 8288 	bne.w	80112d6 <_dtoa_r+0x92e>
 8010dc6:	462a      	mov	r2, r5
 8010dc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dd0:	f7f7 fdbc 	bl	800894c <__aeabi_dcmplt>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	f040 827c 	bne.w	80112d2 <_dtoa_r+0x92a>
 8010dda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010dde:	e9cd 2300 	strd	r2, r3, [sp]
 8010de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	f2c0 8150 	blt.w	801108a <_dtoa_r+0x6e2>
 8010dea:	f1ba 0f0e 	cmp.w	sl, #14
 8010dee:	f300 814c 	bgt.w	801108a <_dtoa_r+0x6e2>
 8010df2:	4b6a      	ldr	r3, [pc, #424]	; (8010f9c <_dtoa_r+0x5f4>)
 8010df4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010df8:	ed93 7b00 	vldr	d7, [r3]
 8010dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e04:	f280 80d8 	bge.w	8010fb8 <_dtoa_r+0x610>
 8010e08:	f1b9 0f00 	cmp.w	r9, #0
 8010e0c:	f300 80d4 	bgt.w	8010fb8 <_dtoa_r+0x610>
 8010e10:	f040 825e 	bne.w	80112d0 <_dtoa_r+0x928>
 8010e14:	2200      	movs	r2, #0
 8010e16:	4b66      	ldr	r3, [pc, #408]	; (8010fb0 <_dtoa_r+0x608>)
 8010e18:	ec51 0b17 	vmov	r0, r1, d7
 8010e1c:	f7f7 fb24 	bl	8008468 <__aeabi_dmul>
 8010e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e24:	f7f7 fda6 	bl	8008974 <__aeabi_dcmpge>
 8010e28:	464f      	mov	r7, r9
 8010e2a:	464e      	mov	r6, r9
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	f040 8234 	bne.w	801129a <_dtoa_r+0x8f2>
 8010e32:	2331      	movs	r3, #49	; 0x31
 8010e34:	f10b 0501 	add.w	r5, fp, #1
 8010e38:	f88b 3000 	strb.w	r3, [fp]
 8010e3c:	f10a 0a01 	add.w	sl, sl, #1
 8010e40:	e22f      	b.n	80112a2 <_dtoa_r+0x8fa>
 8010e42:	07f2      	lsls	r2, r6, #31
 8010e44:	d505      	bpl.n	8010e52 <_dtoa_r+0x4aa>
 8010e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e4a:	f7f7 fb0d 	bl	8008468 <__aeabi_dmul>
 8010e4e:	3501      	adds	r5, #1
 8010e50:	2301      	movs	r3, #1
 8010e52:	1076      	asrs	r6, r6, #1
 8010e54:	3708      	adds	r7, #8
 8010e56:	e772      	b.n	8010d3e <_dtoa_r+0x396>
 8010e58:	2502      	movs	r5, #2
 8010e5a:	e774      	b.n	8010d46 <_dtoa_r+0x39e>
 8010e5c:	f8cd a020 	str.w	sl, [sp, #32]
 8010e60:	464f      	mov	r7, r9
 8010e62:	e791      	b.n	8010d88 <_dtoa_r+0x3e0>
 8010e64:	4b4d      	ldr	r3, [pc, #308]	; (8010f9c <_dtoa_r+0x5f4>)
 8010e66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010e6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d047      	beq.n	8010f04 <_dtoa_r+0x55c>
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	2000      	movs	r0, #0
 8010e7a:	494e      	ldr	r1, [pc, #312]	; (8010fb4 <_dtoa_r+0x60c>)
 8010e7c:	f7f7 fc1e 	bl	80086bc <__aeabi_ddiv>
 8010e80:	462a      	mov	r2, r5
 8010e82:	4633      	mov	r3, r6
 8010e84:	f7f7 f938 	bl	80080f8 <__aeabi_dsub>
 8010e88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010e8c:	465d      	mov	r5, fp
 8010e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e92:	f7f7 fd99 	bl	80089c8 <__aeabi_d2iz>
 8010e96:	4606      	mov	r6, r0
 8010e98:	f7f7 fa7c 	bl	8008394 <__aeabi_i2d>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ea4:	f7f7 f928 	bl	80080f8 <__aeabi_dsub>
 8010ea8:	3630      	adds	r6, #48	; 0x30
 8010eaa:	f805 6b01 	strb.w	r6, [r5], #1
 8010eae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8010eb6:	f7f7 fd49 	bl	800894c <__aeabi_dcmplt>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	d163      	bne.n	8010f86 <_dtoa_r+0x5de>
 8010ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	4937      	ldr	r1, [pc, #220]	; (8010fa4 <_dtoa_r+0x5fc>)
 8010ec6:	f7f7 f917 	bl	80080f8 <__aeabi_dsub>
 8010eca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010ece:	f7f7 fd3d 	bl	800894c <__aeabi_dcmplt>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	f040 80b7 	bne.w	8011046 <_dtoa_r+0x69e>
 8010ed8:	eba5 030b 	sub.w	r3, r5, fp
 8010edc:	429f      	cmp	r7, r3
 8010ede:	f77f af7c 	ble.w	8010dda <_dtoa_r+0x432>
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	4b30      	ldr	r3, [pc, #192]	; (8010fa8 <_dtoa_r+0x600>)
 8010ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010eea:	f7f7 fabd 	bl	8008468 <__aeabi_dmul>
 8010eee:	2200      	movs	r2, #0
 8010ef0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010ef4:	4b2c      	ldr	r3, [pc, #176]	; (8010fa8 <_dtoa_r+0x600>)
 8010ef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010efa:	f7f7 fab5 	bl	8008468 <__aeabi_dmul>
 8010efe:	e9cd 0100 	strd	r0, r1, [sp]
 8010f02:	e7c4      	b.n	8010e8e <_dtoa_r+0x4e6>
 8010f04:	462a      	mov	r2, r5
 8010f06:	4633      	mov	r3, r6
 8010f08:	f7f7 faae 	bl	8008468 <__aeabi_dmul>
 8010f0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010f10:	eb0b 0507 	add.w	r5, fp, r7
 8010f14:	465e      	mov	r6, fp
 8010f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f1a:	f7f7 fd55 	bl	80089c8 <__aeabi_d2iz>
 8010f1e:	4607      	mov	r7, r0
 8010f20:	f7f7 fa38 	bl	8008394 <__aeabi_i2d>
 8010f24:	3730      	adds	r7, #48	; 0x30
 8010f26:	4602      	mov	r2, r0
 8010f28:	460b      	mov	r3, r1
 8010f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f2e:	f7f7 f8e3 	bl	80080f8 <__aeabi_dsub>
 8010f32:	f806 7b01 	strb.w	r7, [r6], #1
 8010f36:	42ae      	cmp	r6, r5
 8010f38:	e9cd 0100 	strd	r0, r1, [sp]
 8010f3c:	f04f 0200 	mov.w	r2, #0
 8010f40:	d126      	bne.n	8010f90 <_dtoa_r+0x5e8>
 8010f42:	4b1c      	ldr	r3, [pc, #112]	; (8010fb4 <_dtoa_r+0x60c>)
 8010f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010f48:	f7f7 f8d8 	bl	80080fc <__adddf3>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f54:	f7f7 fd18 	bl	8008988 <__aeabi_dcmpgt>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d174      	bne.n	8011046 <_dtoa_r+0x69e>
 8010f5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010f60:	2000      	movs	r0, #0
 8010f62:	4914      	ldr	r1, [pc, #80]	; (8010fb4 <_dtoa_r+0x60c>)
 8010f64:	f7f7 f8c8 	bl	80080f8 <__aeabi_dsub>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f70:	f7f7 fcec 	bl	800894c <__aeabi_dcmplt>
 8010f74:	2800      	cmp	r0, #0
 8010f76:	f43f af30 	beq.w	8010dda <_dtoa_r+0x432>
 8010f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010f7e:	2b30      	cmp	r3, #48	; 0x30
 8010f80:	f105 32ff 	add.w	r2, r5, #4294967295
 8010f84:	d002      	beq.n	8010f8c <_dtoa_r+0x5e4>
 8010f86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010f8a:	e04a      	b.n	8011022 <_dtoa_r+0x67a>
 8010f8c:	4615      	mov	r5, r2
 8010f8e:	e7f4      	b.n	8010f7a <_dtoa_r+0x5d2>
 8010f90:	4b05      	ldr	r3, [pc, #20]	; (8010fa8 <_dtoa_r+0x600>)
 8010f92:	f7f7 fa69 	bl	8008468 <__aeabi_dmul>
 8010f96:	e9cd 0100 	strd	r0, r1, [sp]
 8010f9a:	e7bc      	b.n	8010f16 <_dtoa_r+0x56e>
 8010f9c:	08012598 	.word	0x08012598
 8010fa0:	08012570 	.word	0x08012570
 8010fa4:	3ff00000 	.word	0x3ff00000
 8010fa8:	40240000 	.word	0x40240000
 8010fac:	401c0000 	.word	0x401c0000
 8010fb0:	40140000 	.word	0x40140000
 8010fb4:	3fe00000 	.word	0x3fe00000
 8010fb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010fbc:	465d      	mov	r5, fp
 8010fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	4639      	mov	r1, r7
 8010fc6:	f7f7 fb79 	bl	80086bc <__aeabi_ddiv>
 8010fca:	f7f7 fcfd 	bl	80089c8 <__aeabi_d2iz>
 8010fce:	4680      	mov	r8, r0
 8010fd0:	f7f7 f9e0 	bl	8008394 <__aeabi_i2d>
 8010fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010fd8:	f7f7 fa46 	bl	8008468 <__aeabi_dmul>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	4639      	mov	r1, r7
 8010fe4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010fe8:	f7f7 f886 	bl	80080f8 <__aeabi_dsub>
 8010fec:	f805 6b01 	strb.w	r6, [r5], #1
 8010ff0:	eba5 060b 	sub.w	r6, r5, fp
 8010ff4:	45b1      	cmp	r9, r6
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	d139      	bne.n	8011070 <_dtoa_r+0x6c8>
 8010ffc:	f7f7 f87e 	bl	80080fc <__adddf3>
 8011000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011004:	4606      	mov	r6, r0
 8011006:	460f      	mov	r7, r1
 8011008:	f7f7 fcbe 	bl	8008988 <__aeabi_dcmpgt>
 801100c:	b9c8      	cbnz	r0, 8011042 <_dtoa_r+0x69a>
 801100e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011012:	4630      	mov	r0, r6
 8011014:	4639      	mov	r1, r7
 8011016:	f7f7 fc8f 	bl	8008938 <__aeabi_dcmpeq>
 801101a:	b110      	cbz	r0, 8011022 <_dtoa_r+0x67a>
 801101c:	f018 0f01 	tst.w	r8, #1
 8011020:	d10f      	bne.n	8011042 <_dtoa_r+0x69a>
 8011022:	9904      	ldr	r1, [sp, #16]
 8011024:	4620      	mov	r0, r4
 8011026:	f000 fc9f 	bl	8011968 <_Bfree>
 801102a:	2300      	movs	r3, #0
 801102c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801102e:	702b      	strb	r3, [r5, #0]
 8011030:	f10a 0301 	add.w	r3, sl, #1
 8011034:	6013      	str	r3, [r2, #0]
 8011036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011038:	2b00      	cmp	r3, #0
 801103a:	f000 8241 	beq.w	80114c0 <_dtoa_r+0xb18>
 801103e:	601d      	str	r5, [r3, #0]
 8011040:	e23e      	b.n	80114c0 <_dtoa_r+0xb18>
 8011042:	f8cd a020 	str.w	sl, [sp, #32]
 8011046:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801104a:	2a39      	cmp	r2, #57	; 0x39
 801104c:	f105 33ff 	add.w	r3, r5, #4294967295
 8011050:	d108      	bne.n	8011064 <_dtoa_r+0x6bc>
 8011052:	459b      	cmp	fp, r3
 8011054:	d10a      	bne.n	801106c <_dtoa_r+0x6c4>
 8011056:	9b08      	ldr	r3, [sp, #32]
 8011058:	3301      	adds	r3, #1
 801105a:	9308      	str	r3, [sp, #32]
 801105c:	2330      	movs	r3, #48	; 0x30
 801105e:	f88b 3000 	strb.w	r3, [fp]
 8011062:	465b      	mov	r3, fp
 8011064:	781a      	ldrb	r2, [r3, #0]
 8011066:	3201      	adds	r2, #1
 8011068:	701a      	strb	r2, [r3, #0]
 801106a:	e78c      	b.n	8010f86 <_dtoa_r+0x5de>
 801106c:	461d      	mov	r5, r3
 801106e:	e7ea      	b.n	8011046 <_dtoa_r+0x69e>
 8011070:	2200      	movs	r2, #0
 8011072:	4b9b      	ldr	r3, [pc, #620]	; (80112e0 <_dtoa_r+0x938>)
 8011074:	f7f7 f9f8 	bl	8008468 <__aeabi_dmul>
 8011078:	2200      	movs	r2, #0
 801107a:	2300      	movs	r3, #0
 801107c:	4606      	mov	r6, r0
 801107e:	460f      	mov	r7, r1
 8011080:	f7f7 fc5a 	bl	8008938 <__aeabi_dcmpeq>
 8011084:	2800      	cmp	r0, #0
 8011086:	d09a      	beq.n	8010fbe <_dtoa_r+0x616>
 8011088:	e7cb      	b.n	8011022 <_dtoa_r+0x67a>
 801108a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801108c:	2a00      	cmp	r2, #0
 801108e:	f000 808b 	beq.w	80111a8 <_dtoa_r+0x800>
 8011092:	9a06      	ldr	r2, [sp, #24]
 8011094:	2a01      	cmp	r2, #1
 8011096:	dc6e      	bgt.n	8011176 <_dtoa_r+0x7ce>
 8011098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801109a:	2a00      	cmp	r2, #0
 801109c:	d067      	beq.n	801116e <_dtoa_r+0x7c6>
 801109e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80110a2:	9f07      	ldr	r7, [sp, #28]
 80110a4:	9d05      	ldr	r5, [sp, #20]
 80110a6:	9a05      	ldr	r2, [sp, #20]
 80110a8:	2101      	movs	r1, #1
 80110aa:	441a      	add	r2, r3
 80110ac:	4620      	mov	r0, r4
 80110ae:	9205      	str	r2, [sp, #20]
 80110b0:	4498      	add	r8, r3
 80110b2:	f000 fcf9 	bl	8011aa8 <__i2b>
 80110b6:	4606      	mov	r6, r0
 80110b8:	2d00      	cmp	r5, #0
 80110ba:	dd0c      	ble.n	80110d6 <_dtoa_r+0x72e>
 80110bc:	f1b8 0f00 	cmp.w	r8, #0
 80110c0:	dd09      	ble.n	80110d6 <_dtoa_r+0x72e>
 80110c2:	4545      	cmp	r5, r8
 80110c4:	9a05      	ldr	r2, [sp, #20]
 80110c6:	462b      	mov	r3, r5
 80110c8:	bfa8      	it	ge
 80110ca:	4643      	movge	r3, r8
 80110cc:	1ad2      	subs	r2, r2, r3
 80110ce:	9205      	str	r2, [sp, #20]
 80110d0:	1aed      	subs	r5, r5, r3
 80110d2:	eba8 0803 	sub.w	r8, r8, r3
 80110d6:	9b07      	ldr	r3, [sp, #28]
 80110d8:	b1eb      	cbz	r3, 8011116 <_dtoa_r+0x76e>
 80110da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d067      	beq.n	80111b0 <_dtoa_r+0x808>
 80110e0:	b18f      	cbz	r7, 8011106 <_dtoa_r+0x75e>
 80110e2:	4631      	mov	r1, r6
 80110e4:	463a      	mov	r2, r7
 80110e6:	4620      	mov	r0, r4
 80110e8:	f000 fd7e 	bl	8011be8 <__pow5mult>
 80110ec:	9a04      	ldr	r2, [sp, #16]
 80110ee:	4601      	mov	r1, r0
 80110f0:	4606      	mov	r6, r0
 80110f2:	4620      	mov	r0, r4
 80110f4:	f000 fce1 	bl	8011aba <__multiply>
 80110f8:	9904      	ldr	r1, [sp, #16]
 80110fa:	9008      	str	r0, [sp, #32]
 80110fc:	4620      	mov	r0, r4
 80110fe:	f000 fc33 	bl	8011968 <_Bfree>
 8011102:	9b08      	ldr	r3, [sp, #32]
 8011104:	9304      	str	r3, [sp, #16]
 8011106:	9b07      	ldr	r3, [sp, #28]
 8011108:	1bda      	subs	r2, r3, r7
 801110a:	d004      	beq.n	8011116 <_dtoa_r+0x76e>
 801110c:	9904      	ldr	r1, [sp, #16]
 801110e:	4620      	mov	r0, r4
 8011110:	f000 fd6a 	bl	8011be8 <__pow5mult>
 8011114:	9004      	str	r0, [sp, #16]
 8011116:	2101      	movs	r1, #1
 8011118:	4620      	mov	r0, r4
 801111a:	f000 fcc5 	bl	8011aa8 <__i2b>
 801111e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011120:	4607      	mov	r7, r0
 8011122:	2b00      	cmp	r3, #0
 8011124:	f000 81d0 	beq.w	80114c8 <_dtoa_r+0xb20>
 8011128:	461a      	mov	r2, r3
 801112a:	4601      	mov	r1, r0
 801112c:	4620      	mov	r0, r4
 801112e:	f000 fd5b 	bl	8011be8 <__pow5mult>
 8011132:	9b06      	ldr	r3, [sp, #24]
 8011134:	2b01      	cmp	r3, #1
 8011136:	4607      	mov	r7, r0
 8011138:	dc40      	bgt.n	80111bc <_dtoa_r+0x814>
 801113a:	9b00      	ldr	r3, [sp, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d139      	bne.n	80111b4 <_dtoa_r+0x80c>
 8011140:	9b01      	ldr	r3, [sp, #4]
 8011142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011146:	2b00      	cmp	r3, #0
 8011148:	d136      	bne.n	80111b8 <_dtoa_r+0x810>
 801114a:	9b01      	ldr	r3, [sp, #4]
 801114c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011150:	0d1b      	lsrs	r3, r3, #20
 8011152:	051b      	lsls	r3, r3, #20
 8011154:	b12b      	cbz	r3, 8011162 <_dtoa_r+0x7ba>
 8011156:	9b05      	ldr	r3, [sp, #20]
 8011158:	3301      	adds	r3, #1
 801115a:	9305      	str	r3, [sp, #20]
 801115c:	f108 0801 	add.w	r8, r8, #1
 8011160:	2301      	movs	r3, #1
 8011162:	9307      	str	r3, [sp, #28]
 8011164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011166:	2b00      	cmp	r3, #0
 8011168:	d12a      	bne.n	80111c0 <_dtoa_r+0x818>
 801116a:	2001      	movs	r0, #1
 801116c:	e030      	b.n	80111d0 <_dtoa_r+0x828>
 801116e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011170:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011174:	e795      	b.n	80110a2 <_dtoa_r+0x6fa>
 8011176:	9b07      	ldr	r3, [sp, #28]
 8011178:	f109 37ff 	add.w	r7, r9, #4294967295
 801117c:	42bb      	cmp	r3, r7
 801117e:	bfbf      	itttt	lt
 8011180:	9b07      	ldrlt	r3, [sp, #28]
 8011182:	9707      	strlt	r7, [sp, #28]
 8011184:	1afa      	sublt	r2, r7, r3
 8011186:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011188:	bfbb      	ittet	lt
 801118a:	189b      	addlt	r3, r3, r2
 801118c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801118e:	1bdf      	subge	r7, r3, r7
 8011190:	2700      	movlt	r7, #0
 8011192:	f1b9 0f00 	cmp.w	r9, #0
 8011196:	bfb5      	itete	lt
 8011198:	9b05      	ldrlt	r3, [sp, #20]
 801119a:	9d05      	ldrge	r5, [sp, #20]
 801119c:	eba3 0509 	sublt.w	r5, r3, r9
 80111a0:	464b      	movge	r3, r9
 80111a2:	bfb8      	it	lt
 80111a4:	2300      	movlt	r3, #0
 80111a6:	e77e      	b.n	80110a6 <_dtoa_r+0x6fe>
 80111a8:	9f07      	ldr	r7, [sp, #28]
 80111aa:	9d05      	ldr	r5, [sp, #20]
 80111ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80111ae:	e783      	b.n	80110b8 <_dtoa_r+0x710>
 80111b0:	9a07      	ldr	r2, [sp, #28]
 80111b2:	e7ab      	b.n	801110c <_dtoa_r+0x764>
 80111b4:	2300      	movs	r3, #0
 80111b6:	e7d4      	b.n	8011162 <_dtoa_r+0x7ba>
 80111b8:	9b00      	ldr	r3, [sp, #0]
 80111ba:	e7d2      	b.n	8011162 <_dtoa_r+0x7ba>
 80111bc:	2300      	movs	r3, #0
 80111be:	9307      	str	r3, [sp, #28]
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80111c6:	6918      	ldr	r0, [r3, #16]
 80111c8:	f000 fc20 	bl	8011a0c <__hi0bits>
 80111cc:	f1c0 0020 	rsb	r0, r0, #32
 80111d0:	4440      	add	r0, r8
 80111d2:	f010 001f 	ands.w	r0, r0, #31
 80111d6:	d047      	beq.n	8011268 <_dtoa_r+0x8c0>
 80111d8:	f1c0 0320 	rsb	r3, r0, #32
 80111dc:	2b04      	cmp	r3, #4
 80111de:	dd3b      	ble.n	8011258 <_dtoa_r+0x8b0>
 80111e0:	9b05      	ldr	r3, [sp, #20]
 80111e2:	f1c0 001c 	rsb	r0, r0, #28
 80111e6:	4403      	add	r3, r0
 80111e8:	9305      	str	r3, [sp, #20]
 80111ea:	4405      	add	r5, r0
 80111ec:	4480      	add	r8, r0
 80111ee:	9b05      	ldr	r3, [sp, #20]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	dd05      	ble.n	8011200 <_dtoa_r+0x858>
 80111f4:	461a      	mov	r2, r3
 80111f6:	9904      	ldr	r1, [sp, #16]
 80111f8:	4620      	mov	r0, r4
 80111fa:	f000 fd43 	bl	8011c84 <__lshift>
 80111fe:	9004      	str	r0, [sp, #16]
 8011200:	f1b8 0f00 	cmp.w	r8, #0
 8011204:	dd05      	ble.n	8011212 <_dtoa_r+0x86a>
 8011206:	4639      	mov	r1, r7
 8011208:	4642      	mov	r2, r8
 801120a:	4620      	mov	r0, r4
 801120c:	f000 fd3a 	bl	8011c84 <__lshift>
 8011210:	4607      	mov	r7, r0
 8011212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011214:	b353      	cbz	r3, 801126c <_dtoa_r+0x8c4>
 8011216:	4639      	mov	r1, r7
 8011218:	9804      	ldr	r0, [sp, #16]
 801121a:	f000 fd87 	bl	8011d2c <__mcmp>
 801121e:	2800      	cmp	r0, #0
 8011220:	da24      	bge.n	801126c <_dtoa_r+0x8c4>
 8011222:	2300      	movs	r3, #0
 8011224:	220a      	movs	r2, #10
 8011226:	9904      	ldr	r1, [sp, #16]
 8011228:	4620      	mov	r0, r4
 801122a:	f000 fbb4 	bl	8011996 <__multadd>
 801122e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011230:	9004      	str	r0, [sp, #16]
 8011232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011236:	2b00      	cmp	r3, #0
 8011238:	f000 814d 	beq.w	80114d6 <_dtoa_r+0xb2e>
 801123c:	2300      	movs	r3, #0
 801123e:	4631      	mov	r1, r6
 8011240:	220a      	movs	r2, #10
 8011242:	4620      	mov	r0, r4
 8011244:	f000 fba7 	bl	8011996 <__multadd>
 8011248:	9b02      	ldr	r3, [sp, #8]
 801124a:	2b00      	cmp	r3, #0
 801124c:	4606      	mov	r6, r0
 801124e:	dc4f      	bgt.n	80112f0 <_dtoa_r+0x948>
 8011250:	9b06      	ldr	r3, [sp, #24]
 8011252:	2b02      	cmp	r3, #2
 8011254:	dd4c      	ble.n	80112f0 <_dtoa_r+0x948>
 8011256:	e011      	b.n	801127c <_dtoa_r+0x8d4>
 8011258:	d0c9      	beq.n	80111ee <_dtoa_r+0x846>
 801125a:	9a05      	ldr	r2, [sp, #20]
 801125c:	331c      	adds	r3, #28
 801125e:	441a      	add	r2, r3
 8011260:	9205      	str	r2, [sp, #20]
 8011262:	441d      	add	r5, r3
 8011264:	4498      	add	r8, r3
 8011266:	e7c2      	b.n	80111ee <_dtoa_r+0x846>
 8011268:	4603      	mov	r3, r0
 801126a:	e7f6      	b.n	801125a <_dtoa_r+0x8b2>
 801126c:	f1b9 0f00 	cmp.w	r9, #0
 8011270:	dc38      	bgt.n	80112e4 <_dtoa_r+0x93c>
 8011272:	9b06      	ldr	r3, [sp, #24]
 8011274:	2b02      	cmp	r3, #2
 8011276:	dd35      	ble.n	80112e4 <_dtoa_r+0x93c>
 8011278:	f8cd 9008 	str.w	r9, [sp, #8]
 801127c:	9b02      	ldr	r3, [sp, #8]
 801127e:	b963      	cbnz	r3, 801129a <_dtoa_r+0x8f2>
 8011280:	4639      	mov	r1, r7
 8011282:	2205      	movs	r2, #5
 8011284:	4620      	mov	r0, r4
 8011286:	f000 fb86 	bl	8011996 <__multadd>
 801128a:	4601      	mov	r1, r0
 801128c:	4607      	mov	r7, r0
 801128e:	9804      	ldr	r0, [sp, #16]
 8011290:	f000 fd4c 	bl	8011d2c <__mcmp>
 8011294:	2800      	cmp	r0, #0
 8011296:	f73f adcc 	bgt.w	8010e32 <_dtoa_r+0x48a>
 801129a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801129c:	465d      	mov	r5, fp
 801129e:	ea6f 0a03 	mvn.w	sl, r3
 80112a2:	f04f 0900 	mov.w	r9, #0
 80112a6:	4639      	mov	r1, r7
 80112a8:	4620      	mov	r0, r4
 80112aa:	f000 fb5d 	bl	8011968 <_Bfree>
 80112ae:	2e00      	cmp	r6, #0
 80112b0:	f43f aeb7 	beq.w	8011022 <_dtoa_r+0x67a>
 80112b4:	f1b9 0f00 	cmp.w	r9, #0
 80112b8:	d005      	beq.n	80112c6 <_dtoa_r+0x91e>
 80112ba:	45b1      	cmp	r9, r6
 80112bc:	d003      	beq.n	80112c6 <_dtoa_r+0x91e>
 80112be:	4649      	mov	r1, r9
 80112c0:	4620      	mov	r0, r4
 80112c2:	f000 fb51 	bl	8011968 <_Bfree>
 80112c6:	4631      	mov	r1, r6
 80112c8:	4620      	mov	r0, r4
 80112ca:	f000 fb4d 	bl	8011968 <_Bfree>
 80112ce:	e6a8      	b.n	8011022 <_dtoa_r+0x67a>
 80112d0:	2700      	movs	r7, #0
 80112d2:	463e      	mov	r6, r7
 80112d4:	e7e1      	b.n	801129a <_dtoa_r+0x8f2>
 80112d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80112da:	463e      	mov	r6, r7
 80112dc:	e5a9      	b.n	8010e32 <_dtoa_r+0x48a>
 80112de:	bf00      	nop
 80112e0:	40240000 	.word	0x40240000
 80112e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	f000 80fa 	beq.w	80114e4 <_dtoa_r+0xb3c>
 80112f0:	2d00      	cmp	r5, #0
 80112f2:	dd05      	ble.n	8011300 <_dtoa_r+0x958>
 80112f4:	4631      	mov	r1, r6
 80112f6:	462a      	mov	r2, r5
 80112f8:	4620      	mov	r0, r4
 80112fa:	f000 fcc3 	bl	8011c84 <__lshift>
 80112fe:	4606      	mov	r6, r0
 8011300:	9b07      	ldr	r3, [sp, #28]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d04c      	beq.n	80113a0 <_dtoa_r+0x9f8>
 8011306:	6871      	ldr	r1, [r6, #4]
 8011308:	4620      	mov	r0, r4
 801130a:	f000 faf9 	bl	8011900 <_Balloc>
 801130e:	6932      	ldr	r2, [r6, #16]
 8011310:	3202      	adds	r2, #2
 8011312:	4605      	mov	r5, r0
 8011314:	0092      	lsls	r2, r2, #2
 8011316:	f106 010c 	add.w	r1, r6, #12
 801131a:	300c      	adds	r0, #12
 801131c:	f7fe fd0a 	bl	800fd34 <memcpy>
 8011320:	2201      	movs	r2, #1
 8011322:	4629      	mov	r1, r5
 8011324:	4620      	mov	r0, r4
 8011326:	f000 fcad 	bl	8011c84 <__lshift>
 801132a:	9b00      	ldr	r3, [sp, #0]
 801132c:	f8cd b014 	str.w	fp, [sp, #20]
 8011330:	f003 0301 	and.w	r3, r3, #1
 8011334:	46b1      	mov	r9, r6
 8011336:	9307      	str	r3, [sp, #28]
 8011338:	4606      	mov	r6, r0
 801133a:	4639      	mov	r1, r7
 801133c:	9804      	ldr	r0, [sp, #16]
 801133e:	f7ff faa5 	bl	801088c <quorem>
 8011342:	4649      	mov	r1, r9
 8011344:	4605      	mov	r5, r0
 8011346:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801134a:	9804      	ldr	r0, [sp, #16]
 801134c:	f000 fcee 	bl	8011d2c <__mcmp>
 8011350:	4632      	mov	r2, r6
 8011352:	9000      	str	r0, [sp, #0]
 8011354:	4639      	mov	r1, r7
 8011356:	4620      	mov	r0, r4
 8011358:	f000 fd02 	bl	8011d60 <__mdiff>
 801135c:	68c3      	ldr	r3, [r0, #12]
 801135e:	4602      	mov	r2, r0
 8011360:	bb03      	cbnz	r3, 80113a4 <_dtoa_r+0x9fc>
 8011362:	4601      	mov	r1, r0
 8011364:	9008      	str	r0, [sp, #32]
 8011366:	9804      	ldr	r0, [sp, #16]
 8011368:	f000 fce0 	bl	8011d2c <__mcmp>
 801136c:	9a08      	ldr	r2, [sp, #32]
 801136e:	4603      	mov	r3, r0
 8011370:	4611      	mov	r1, r2
 8011372:	4620      	mov	r0, r4
 8011374:	9308      	str	r3, [sp, #32]
 8011376:	f000 faf7 	bl	8011968 <_Bfree>
 801137a:	9b08      	ldr	r3, [sp, #32]
 801137c:	b9a3      	cbnz	r3, 80113a8 <_dtoa_r+0xa00>
 801137e:	9a06      	ldr	r2, [sp, #24]
 8011380:	b992      	cbnz	r2, 80113a8 <_dtoa_r+0xa00>
 8011382:	9a07      	ldr	r2, [sp, #28]
 8011384:	b982      	cbnz	r2, 80113a8 <_dtoa_r+0xa00>
 8011386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801138a:	d029      	beq.n	80113e0 <_dtoa_r+0xa38>
 801138c:	9b00      	ldr	r3, [sp, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	dd01      	ble.n	8011396 <_dtoa_r+0x9ee>
 8011392:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011396:	9b05      	ldr	r3, [sp, #20]
 8011398:	1c5d      	adds	r5, r3, #1
 801139a:	f883 8000 	strb.w	r8, [r3]
 801139e:	e782      	b.n	80112a6 <_dtoa_r+0x8fe>
 80113a0:	4630      	mov	r0, r6
 80113a2:	e7c2      	b.n	801132a <_dtoa_r+0x982>
 80113a4:	2301      	movs	r3, #1
 80113a6:	e7e3      	b.n	8011370 <_dtoa_r+0x9c8>
 80113a8:	9a00      	ldr	r2, [sp, #0]
 80113aa:	2a00      	cmp	r2, #0
 80113ac:	db04      	blt.n	80113b8 <_dtoa_r+0xa10>
 80113ae:	d125      	bne.n	80113fc <_dtoa_r+0xa54>
 80113b0:	9a06      	ldr	r2, [sp, #24]
 80113b2:	bb1a      	cbnz	r2, 80113fc <_dtoa_r+0xa54>
 80113b4:	9a07      	ldr	r2, [sp, #28]
 80113b6:	bb0a      	cbnz	r2, 80113fc <_dtoa_r+0xa54>
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	ddec      	ble.n	8011396 <_dtoa_r+0x9ee>
 80113bc:	2201      	movs	r2, #1
 80113be:	9904      	ldr	r1, [sp, #16]
 80113c0:	4620      	mov	r0, r4
 80113c2:	f000 fc5f 	bl	8011c84 <__lshift>
 80113c6:	4639      	mov	r1, r7
 80113c8:	9004      	str	r0, [sp, #16]
 80113ca:	f000 fcaf 	bl	8011d2c <__mcmp>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	dc03      	bgt.n	80113da <_dtoa_r+0xa32>
 80113d2:	d1e0      	bne.n	8011396 <_dtoa_r+0x9ee>
 80113d4:	f018 0f01 	tst.w	r8, #1
 80113d8:	d0dd      	beq.n	8011396 <_dtoa_r+0x9ee>
 80113da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80113de:	d1d8      	bne.n	8011392 <_dtoa_r+0x9ea>
 80113e0:	9b05      	ldr	r3, [sp, #20]
 80113e2:	9a05      	ldr	r2, [sp, #20]
 80113e4:	1c5d      	adds	r5, r3, #1
 80113e6:	2339      	movs	r3, #57	; 0x39
 80113e8:	7013      	strb	r3, [r2, #0]
 80113ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80113ee:	2b39      	cmp	r3, #57	; 0x39
 80113f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80113f4:	d04f      	beq.n	8011496 <_dtoa_r+0xaee>
 80113f6:	3301      	adds	r3, #1
 80113f8:	7013      	strb	r3, [r2, #0]
 80113fa:	e754      	b.n	80112a6 <_dtoa_r+0x8fe>
 80113fc:	9a05      	ldr	r2, [sp, #20]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	f102 0501 	add.w	r5, r2, #1
 8011404:	dd06      	ble.n	8011414 <_dtoa_r+0xa6c>
 8011406:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801140a:	d0e9      	beq.n	80113e0 <_dtoa_r+0xa38>
 801140c:	f108 0801 	add.w	r8, r8, #1
 8011410:	9b05      	ldr	r3, [sp, #20]
 8011412:	e7c2      	b.n	801139a <_dtoa_r+0x9f2>
 8011414:	9a02      	ldr	r2, [sp, #8]
 8011416:	f805 8c01 	strb.w	r8, [r5, #-1]
 801141a:	eba5 030b 	sub.w	r3, r5, fp
 801141e:	4293      	cmp	r3, r2
 8011420:	d021      	beq.n	8011466 <_dtoa_r+0xabe>
 8011422:	2300      	movs	r3, #0
 8011424:	220a      	movs	r2, #10
 8011426:	9904      	ldr	r1, [sp, #16]
 8011428:	4620      	mov	r0, r4
 801142a:	f000 fab4 	bl	8011996 <__multadd>
 801142e:	45b1      	cmp	r9, r6
 8011430:	9004      	str	r0, [sp, #16]
 8011432:	f04f 0300 	mov.w	r3, #0
 8011436:	f04f 020a 	mov.w	r2, #10
 801143a:	4649      	mov	r1, r9
 801143c:	4620      	mov	r0, r4
 801143e:	d105      	bne.n	801144c <_dtoa_r+0xaa4>
 8011440:	f000 faa9 	bl	8011996 <__multadd>
 8011444:	4681      	mov	r9, r0
 8011446:	4606      	mov	r6, r0
 8011448:	9505      	str	r5, [sp, #20]
 801144a:	e776      	b.n	801133a <_dtoa_r+0x992>
 801144c:	f000 faa3 	bl	8011996 <__multadd>
 8011450:	4631      	mov	r1, r6
 8011452:	4681      	mov	r9, r0
 8011454:	2300      	movs	r3, #0
 8011456:	220a      	movs	r2, #10
 8011458:	4620      	mov	r0, r4
 801145a:	f000 fa9c 	bl	8011996 <__multadd>
 801145e:	4606      	mov	r6, r0
 8011460:	e7f2      	b.n	8011448 <_dtoa_r+0xaa0>
 8011462:	f04f 0900 	mov.w	r9, #0
 8011466:	2201      	movs	r2, #1
 8011468:	9904      	ldr	r1, [sp, #16]
 801146a:	4620      	mov	r0, r4
 801146c:	f000 fc0a 	bl	8011c84 <__lshift>
 8011470:	4639      	mov	r1, r7
 8011472:	9004      	str	r0, [sp, #16]
 8011474:	f000 fc5a 	bl	8011d2c <__mcmp>
 8011478:	2800      	cmp	r0, #0
 801147a:	dcb6      	bgt.n	80113ea <_dtoa_r+0xa42>
 801147c:	d102      	bne.n	8011484 <_dtoa_r+0xadc>
 801147e:	f018 0f01 	tst.w	r8, #1
 8011482:	d1b2      	bne.n	80113ea <_dtoa_r+0xa42>
 8011484:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011488:	2b30      	cmp	r3, #48	; 0x30
 801148a:	f105 32ff 	add.w	r2, r5, #4294967295
 801148e:	f47f af0a 	bne.w	80112a6 <_dtoa_r+0x8fe>
 8011492:	4615      	mov	r5, r2
 8011494:	e7f6      	b.n	8011484 <_dtoa_r+0xadc>
 8011496:	4593      	cmp	fp, r2
 8011498:	d105      	bne.n	80114a6 <_dtoa_r+0xafe>
 801149a:	2331      	movs	r3, #49	; 0x31
 801149c:	f10a 0a01 	add.w	sl, sl, #1
 80114a0:	f88b 3000 	strb.w	r3, [fp]
 80114a4:	e6ff      	b.n	80112a6 <_dtoa_r+0x8fe>
 80114a6:	4615      	mov	r5, r2
 80114a8:	e79f      	b.n	80113ea <_dtoa_r+0xa42>
 80114aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011510 <_dtoa_r+0xb68>
 80114ae:	e007      	b.n	80114c0 <_dtoa_r+0xb18>
 80114b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011514 <_dtoa_r+0xb6c>
 80114b6:	b11b      	cbz	r3, 80114c0 <_dtoa_r+0xb18>
 80114b8:	f10b 0308 	add.w	r3, fp, #8
 80114bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	4658      	mov	r0, fp
 80114c2:	b017      	add	sp, #92	; 0x5c
 80114c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c8:	9b06      	ldr	r3, [sp, #24]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	f77f ae35 	ble.w	801113a <_dtoa_r+0x792>
 80114d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114d2:	9307      	str	r3, [sp, #28]
 80114d4:	e649      	b.n	801116a <_dtoa_r+0x7c2>
 80114d6:	9b02      	ldr	r3, [sp, #8]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	dc03      	bgt.n	80114e4 <_dtoa_r+0xb3c>
 80114dc:	9b06      	ldr	r3, [sp, #24]
 80114de:	2b02      	cmp	r3, #2
 80114e0:	f73f aecc 	bgt.w	801127c <_dtoa_r+0x8d4>
 80114e4:	465d      	mov	r5, fp
 80114e6:	4639      	mov	r1, r7
 80114e8:	9804      	ldr	r0, [sp, #16]
 80114ea:	f7ff f9cf 	bl	801088c <quorem>
 80114ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80114f2:	f805 8b01 	strb.w	r8, [r5], #1
 80114f6:	9a02      	ldr	r2, [sp, #8]
 80114f8:	eba5 030b 	sub.w	r3, r5, fp
 80114fc:	429a      	cmp	r2, r3
 80114fe:	ddb0      	ble.n	8011462 <_dtoa_r+0xaba>
 8011500:	2300      	movs	r3, #0
 8011502:	220a      	movs	r2, #10
 8011504:	9904      	ldr	r1, [sp, #16]
 8011506:	4620      	mov	r0, r4
 8011508:	f000 fa45 	bl	8011996 <__multadd>
 801150c:	9004      	str	r0, [sp, #16]
 801150e:	e7ea      	b.n	80114e6 <_dtoa_r+0xb3e>
 8011510:	080124dc 	.word	0x080124dc
 8011514:	08012500 	.word	0x08012500

08011518 <__sflush_r>:
 8011518:	898a      	ldrh	r2, [r1, #12]
 801151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151e:	4605      	mov	r5, r0
 8011520:	0710      	lsls	r0, r2, #28
 8011522:	460c      	mov	r4, r1
 8011524:	d458      	bmi.n	80115d8 <__sflush_r+0xc0>
 8011526:	684b      	ldr	r3, [r1, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	dc05      	bgt.n	8011538 <__sflush_r+0x20>
 801152c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801152e:	2b00      	cmp	r3, #0
 8011530:	dc02      	bgt.n	8011538 <__sflush_r+0x20>
 8011532:	2000      	movs	r0, #0
 8011534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801153a:	2e00      	cmp	r6, #0
 801153c:	d0f9      	beq.n	8011532 <__sflush_r+0x1a>
 801153e:	2300      	movs	r3, #0
 8011540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011544:	682f      	ldr	r7, [r5, #0]
 8011546:	6a21      	ldr	r1, [r4, #32]
 8011548:	602b      	str	r3, [r5, #0]
 801154a:	d032      	beq.n	80115b2 <__sflush_r+0x9a>
 801154c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801154e:	89a3      	ldrh	r3, [r4, #12]
 8011550:	075a      	lsls	r2, r3, #29
 8011552:	d505      	bpl.n	8011560 <__sflush_r+0x48>
 8011554:	6863      	ldr	r3, [r4, #4]
 8011556:	1ac0      	subs	r0, r0, r3
 8011558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801155a:	b10b      	cbz	r3, 8011560 <__sflush_r+0x48>
 801155c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801155e:	1ac0      	subs	r0, r0, r3
 8011560:	2300      	movs	r3, #0
 8011562:	4602      	mov	r2, r0
 8011564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011566:	6a21      	ldr	r1, [r4, #32]
 8011568:	4628      	mov	r0, r5
 801156a:	47b0      	blx	r6
 801156c:	1c43      	adds	r3, r0, #1
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	d106      	bne.n	8011580 <__sflush_r+0x68>
 8011572:	6829      	ldr	r1, [r5, #0]
 8011574:	291d      	cmp	r1, #29
 8011576:	d848      	bhi.n	801160a <__sflush_r+0xf2>
 8011578:	4a29      	ldr	r2, [pc, #164]	; (8011620 <__sflush_r+0x108>)
 801157a:	40ca      	lsrs	r2, r1
 801157c:	07d6      	lsls	r6, r2, #31
 801157e:	d544      	bpl.n	801160a <__sflush_r+0xf2>
 8011580:	2200      	movs	r2, #0
 8011582:	6062      	str	r2, [r4, #4]
 8011584:	04d9      	lsls	r1, r3, #19
 8011586:	6922      	ldr	r2, [r4, #16]
 8011588:	6022      	str	r2, [r4, #0]
 801158a:	d504      	bpl.n	8011596 <__sflush_r+0x7e>
 801158c:	1c42      	adds	r2, r0, #1
 801158e:	d101      	bne.n	8011594 <__sflush_r+0x7c>
 8011590:	682b      	ldr	r3, [r5, #0]
 8011592:	b903      	cbnz	r3, 8011596 <__sflush_r+0x7e>
 8011594:	6560      	str	r0, [r4, #84]	; 0x54
 8011596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011598:	602f      	str	r7, [r5, #0]
 801159a:	2900      	cmp	r1, #0
 801159c:	d0c9      	beq.n	8011532 <__sflush_r+0x1a>
 801159e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115a2:	4299      	cmp	r1, r3
 80115a4:	d002      	beq.n	80115ac <__sflush_r+0x94>
 80115a6:	4628      	mov	r0, r5
 80115a8:	f000 fc94 	bl	8011ed4 <_free_r>
 80115ac:	2000      	movs	r0, #0
 80115ae:	6360      	str	r0, [r4, #52]	; 0x34
 80115b0:	e7c0      	b.n	8011534 <__sflush_r+0x1c>
 80115b2:	2301      	movs	r3, #1
 80115b4:	4628      	mov	r0, r5
 80115b6:	47b0      	blx	r6
 80115b8:	1c41      	adds	r1, r0, #1
 80115ba:	d1c8      	bne.n	801154e <__sflush_r+0x36>
 80115bc:	682b      	ldr	r3, [r5, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d0c5      	beq.n	801154e <__sflush_r+0x36>
 80115c2:	2b1d      	cmp	r3, #29
 80115c4:	d001      	beq.n	80115ca <__sflush_r+0xb2>
 80115c6:	2b16      	cmp	r3, #22
 80115c8:	d101      	bne.n	80115ce <__sflush_r+0xb6>
 80115ca:	602f      	str	r7, [r5, #0]
 80115cc:	e7b1      	b.n	8011532 <__sflush_r+0x1a>
 80115ce:	89a3      	ldrh	r3, [r4, #12]
 80115d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115d4:	81a3      	strh	r3, [r4, #12]
 80115d6:	e7ad      	b.n	8011534 <__sflush_r+0x1c>
 80115d8:	690f      	ldr	r7, [r1, #16]
 80115da:	2f00      	cmp	r7, #0
 80115dc:	d0a9      	beq.n	8011532 <__sflush_r+0x1a>
 80115de:	0793      	lsls	r3, r2, #30
 80115e0:	680e      	ldr	r6, [r1, #0]
 80115e2:	bf08      	it	eq
 80115e4:	694b      	ldreq	r3, [r1, #20]
 80115e6:	600f      	str	r7, [r1, #0]
 80115e8:	bf18      	it	ne
 80115ea:	2300      	movne	r3, #0
 80115ec:	eba6 0807 	sub.w	r8, r6, r7
 80115f0:	608b      	str	r3, [r1, #8]
 80115f2:	f1b8 0f00 	cmp.w	r8, #0
 80115f6:	dd9c      	ble.n	8011532 <__sflush_r+0x1a>
 80115f8:	4643      	mov	r3, r8
 80115fa:	463a      	mov	r2, r7
 80115fc:	6a21      	ldr	r1, [r4, #32]
 80115fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011600:	4628      	mov	r0, r5
 8011602:	47b0      	blx	r6
 8011604:	2800      	cmp	r0, #0
 8011606:	dc06      	bgt.n	8011616 <__sflush_r+0xfe>
 8011608:	89a3      	ldrh	r3, [r4, #12]
 801160a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801160e:	81a3      	strh	r3, [r4, #12]
 8011610:	f04f 30ff 	mov.w	r0, #4294967295
 8011614:	e78e      	b.n	8011534 <__sflush_r+0x1c>
 8011616:	4407      	add	r7, r0
 8011618:	eba8 0800 	sub.w	r8, r8, r0
 801161c:	e7e9      	b.n	80115f2 <__sflush_r+0xda>
 801161e:	bf00      	nop
 8011620:	20400001 	.word	0x20400001

08011624 <_fflush_r>:
 8011624:	b538      	push	{r3, r4, r5, lr}
 8011626:	690b      	ldr	r3, [r1, #16]
 8011628:	4605      	mov	r5, r0
 801162a:	460c      	mov	r4, r1
 801162c:	b1db      	cbz	r3, 8011666 <_fflush_r+0x42>
 801162e:	b118      	cbz	r0, 8011638 <_fflush_r+0x14>
 8011630:	6983      	ldr	r3, [r0, #24]
 8011632:	b90b      	cbnz	r3, 8011638 <_fflush_r+0x14>
 8011634:	f000 f860 	bl	80116f8 <__sinit>
 8011638:	4b0c      	ldr	r3, [pc, #48]	; (801166c <_fflush_r+0x48>)
 801163a:	429c      	cmp	r4, r3
 801163c:	d109      	bne.n	8011652 <_fflush_r+0x2e>
 801163e:	686c      	ldr	r4, [r5, #4]
 8011640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011644:	b17b      	cbz	r3, 8011666 <_fflush_r+0x42>
 8011646:	4621      	mov	r1, r4
 8011648:	4628      	mov	r0, r5
 801164a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801164e:	f7ff bf63 	b.w	8011518 <__sflush_r>
 8011652:	4b07      	ldr	r3, [pc, #28]	; (8011670 <_fflush_r+0x4c>)
 8011654:	429c      	cmp	r4, r3
 8011656:	d101      	bne.n	801165c <_fflush_r+0x38>
 8011658:	68ac      	ldr	r4, [r5, #8]
 801165a:	e7f1      	b.n	8011640 <_fflush_r+0x1c>
 801165c:	4b05      	ldr	r3, [pc, #20]	; (8011674 <_fflush_r+0x50>)
 801165e:	429c      	cmp	r4, r3
 8011660:	bf08      	it	eq
 8011662:	68ec      	ldreq	r4, [r5, #12]
 8011664:	e7ec      	b.n	8011640 <_fflush_r+0x1c>
 8011666:	2000      	movs	r0, #0
 8011668:	bd38      	pop	{r3, r4, r5, pc}
 801166a:	bf00      	nop
 801166c:	08012530 	.word	0x08012530
 8011670:	08012550 	.word	0x08012550
 8011674:	08012510 	.word	0x08012510

08011678 <std>:
 8011678:	2300      	movs	r3, #0
 801167a:	b510      	push	{r4, lr}
 801167c:	4604      	mov	r4, r0
 801167e:	e9c0 3300 	strd	r3, r3, [r0]
 8011682:	6083      	str	r3, [r0, #8]
 8011684:	8181      	strh	r1, [r0, #12]
 8011686:	6643      	str	r3, [r0, #100]	; 0x64
 8011688:	81c2      	strh	r2, [r0, #14]
 801168a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801168e:	6183      	str	r3, [r0, #24]
 8011690:	4619      	mov	r1, r3
 8011692:	2208      	movs	r2, #8
 8011694:	305c      	adds	r0, #92	; 0x5c
 8011696:	f7fe fb58 	bl	800fd4a <memset>
 801169a:	4b05      	ldr	r3, [pc, #20]	; (80116b0 <std+0x38>)
 801169c:	6263      	str	r3, [r4, #36]	; 0x24
 801169e:	4b05      	ldr	r3, [pc, #20]	; (80116b4 <std+0x3c>)
 80116a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80116a2:	4b05      	ldr	r3, [pc, #20]	; (80116b8 <std+0x40>)
 80116a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80116a6:	4b05      	ldr	r3, [pc, #20]	; (80116bc <std+0x44>)
 80116a8:	6224      	str	r4, [r4, #32]
 80116aa:	6323      	str	r3, [r4, #48]	; 0x30
 80116ac:	bd10      	pop	{r4, pc}
 80116ae:	bf00      	nop
 80116b0:	080122c5 	.word	0x080122c5
 80116b4:	080122e7 	.word	0x080122e7
 80116b8:	0801231f 	.word	0x0801231f
 80116bc:	08012343 	.word	0x08012343

080116c0 <_cleanup_r>:
 80116c0:	4901      	ldr	r1, [pc, #4]	; (80116c8 <_cleanup_r+0x8>)
 80116c2:	f000 b885 	b.w	80117d0 <_fwalk_reent>
 80116c6:	bf00      	nop
 80116c8:	08011625 	.word	0x08011625

080116cc <__sfmoreglue>:
 80116cc:	b570      	push	{r4, r5, r6, lr}
 80116ce:	1e4a      	subs	r2, r1, #1
 80116d0:	2568      	movs	r5, #104	; 0x68
 80116d2:	4355      	muls	r5, r2
 80116d4:	460e      	mov	r6, r1
 80116d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80116da:	f000 fc49 	bl	8011f70 <_malloc_r>
 80116de:	4604      	mov	r4, r0
 80116e0:	b140      	cbz	r0, 80116f4 <__sfmoreglue+0x28>
 80116e2:	2100      	movs	r1, #0
 80116e4:	e9c0 1600 	strd	r1, r6, [r0]
 80116e8:	300c      	adds	r0, #12
 80116ea:	60a0      	str	r0, [r4, #8]
 80116ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116f0:	f7fe fb2b 	bl	800fd4a <memset>
 80116f4:	4620      	mov	r0, r4
 80116f6:	bd70      	pop	{r4, r5, r6, pc}

080116f8 <__sinit>:
 80116f8:	6983      	ldr	r3, [r0, #24]
 80116fa:	b510      	push	{r4, lr}
 80116fc:	4604      	mov	r4, r0
 80116fe:	bb33      	cbnz	r3, 801174e <__sinit+0x56>
 8011700:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011704:	6503      	str	r3, [r0, #80]	; 0x50
 8011706:	4b12      	ldr	r3, [pc, #72]	; (8011750 <__sinit+0x58>)
 8011708:	4a12      	ldr	r2, [pc, #72]	; (8011754 <__sinit+0x5c>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6282      	str	r2, [r0, #40]	; 0x28
 801170e:	4298      	cmp	r0, r3
 8011710:	bf04      	itt	eq
 8011712:	2301      	moveq	r3, #1
 8011714:	6183      	streq	r3, [r0, #24]
 8011716:	f000 f81f 	bl	8011758 <__sfp>
 801171a:	6060      	str	r0, [r4, #4]
 801171c:	4620      	mov	r0, r4
 801171e:	f000 f81b 	bl	8011758 <__sfp>
 8011722:	60a0      	str	r0, [r4, #8]
 8011724:	4620      	mov	r0, r4
 8011726:	f000 f817 	bl	8011758 <__sfp>
 801172a:	2200      	movs	r2, #0
 801172c:	60e0      	str	r0, [r4, #12]
 801172e:	2104      	movs	r1, #4
 8011730:	6860      	ldr	r0, [r4, #4]
 8011732:	f7ff ffa1 	bl	8011678 <std>
 8011736:	2201      	movs	r2, #1
 8011738:	2109      	movs	r1, #9
 801173a:	68a0      	ldr	r0, [r4, #8]
 801173c:	f7ff ff9c 	bl	8011678 <std>
 8011740:	2202      	movs	r2, #2
 8011742:	2112      	movs	r1, #18
 8011744:	68e0      	ldr	r0, [r4, #12]
 8011746:	f7ff ff97 	bl	8011678 <std>
 801174a:	2301      	movs	r3, #1
 801174c:	61a3      	str	r3, [r4, #24]
 801174e:	bd10      	pop	{r4, pc}
 8011750:	080124c8 	.word	0x080124c8
 8011754:	080116c1 	.word	0x080116c1

08011758 <__sfp>:
 8011758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175a:	4b1b      	ldr	r3, [pc, #108]	; (80117c8 <__sfp+0x70>)
 801175c:	681e      	ldr	r6, [r3, #0]
 801175e:	69b3      	ldr	r3, [r6, #24]
 8011760:	4607      	mov	r7, r0
 8011762:	b913      	cbnz	r3, 801176a <__sfp+0x12>
 8011764:	4630      	mov	r0, r6
 8011766:	f7ff ffc7 	bl	80116f8 <__sinit>
 801176a:	3648      	adds	r6, #72	; 0x48
 801176c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011770:	3b01      	subs	r3, #1
 8011772:	d503      	bpl.n	801177c <__sfp+0x24>
 8011774:	6833      	ldr	r3, [r6, #0]
 8011776:	b133      	cbz	r3, 8011786 <__sfp+0x2e>
 8011778:	6836      	ldr	r6, [r6, #0]
 801177a:	e7f7      	b.n	801176c <__sfp+0x14>
 801177c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011780:	b16d      	cbz	r5, 801179e <__sfp+0x46>
 8011782:	3468      	adds	r4, #104	; 0x68
 8011784:	e7f4      	b.n	8011770 <__sfp+0x18>
 8011786:	2104      	movs	r1, #4
 8011788:	4638      	mov	r0, r7
 801178a:	f7ff ff9f 	bl	80116cc <__sfmoreglue>
 801178e:	6030      	str	r0, [r6, #0]
 8011790:	2800      	cmp	r0, #0
 8011792:	d1f1      	bne.n	8011778 <__sfp+0x20>
 8011794:	230c      	movs	r3, #12
 8011796:	603b      	str	r3, [r7, #0]
 8011798:	4604      	mov	r4, r0
 801179a:	4620      	mov	r0, r4
 801179c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801179e:	4b0b      	ldr	r3, [pc, #44]	; (80117cc <__sfp+0x74>)
 80117a0:	6665      	str	r5, [r4, #100]	; 0x64
 80117a2:	e9c4 5500 	strd	r5, r5, [r4]
 80117a6:	60a5      	str	r5, [r4, #8]
 80117a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80117ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80117b0:	2208      	movs	r2, #8
 80117b2:	4629      	mov	r1, r5
 80117b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117b8:	f7fe fac7 	bl	800fd4a <memset>
 80117bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117c4:	e7e9      	b.n	801179a <__sfp+0x42>
 80117c6:	bf00      	nop
 80117c8:	080124c8 	.word	0x080124c8
 80117cc:	ffff0001 	.word	0xffff0001

080117d0 <_fwalk_reent>:
 80117d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117d4:	4680      	mov	r8, r0
 80117d6:	4689      	mov	r9, r1
 80117d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80117dc:	2600      	movs	r6, #0
 80117de:	b914      	cbnz	r4, 80117e6 <_fwalk_reent+0x16>
 80117e0:	4630      	mov	r0, r6
 80117e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80117ea:	3f01      	subs	r7, #1
 80117ec:	d501      	bpl.n	80117f2 <_fwalk_reent+0x22>
 80117ee:	6824      	ldr	r4, [r4, #0]
 80117f0:	e7f5      	b.n	80117de <_fwalk_reent+0xe>
 80117f2:	89ab      	ldrh	r3, [r5, #12]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d907      	bls.n	8011808 <_fwalk_reent+0x38>
 80117f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80117fc:	3301      	adds	r3, #1
 80117fe:	d003      	beq.n	8011808 <_fwalk_reent+0x38>
 8011800:	4629      	mov	r1, r5
 8011802:	4640      	mov	r0, r8
 8011804:	47c8      	blx	r9
 8011806:	4306      	orrs	r6, r0
 8011808:	3568      	adds	r5, #104	; 0x68
 801180a:	e7ee      	b.n	80117ea <_fwalk_reent+0x1a>

0801180c <_localeconv_r>:
 801180c:	4b04      	ldr	r3, [pc, #16]	; (8011820 <_localeconv_r+0x14>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	6a18      	ldr	r0, [r3, #32]
 8011812:	4b04      	ldr	r3, [pc, #16]	; (8011824 <_localeconv_r+0x18>)
 8011814:	2800      	cmp	r0, #0
 8011816:	bf08      	it	eq
 8011818:	4618      	moveq	r0, r3
 801181a:	30f0      	adds	r0, #240	; 0xf0
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop
 8011820:	2000000c 	.word	0x2000000c
 8011824:	20000070 	.word	0x20000070

08011828 <__swhatbuf_r>:
 8011828:	b570      	push	{r4, r5, r6, lr}
 801182a:	460e      	mov	r6, r1
 801182c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011830:	2900      	cmp	r1, #0
 8011832:	b096      	sub	sp, #88	; 0x58
 8011834:	4614      	mov	r4, r2
 8011836:	461d      	mov	r5, r3
 8011838:	da07      	bge.n	801184a <__swhatbuf_r+0x22>
 801183a:	2300      	movs	r3, #0
 801183c:	602b      	str	r3, [r5, #0]
 801183e:	89b3      	ldrh	r3, [r6, #12]
 8011840:	061a      	lsls	r2, r3, #24
 8011842:	d410      	bmi.n	8011866 <__swhatbuf_r+0x3e>
 8011844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011848:	e00e      	b.n	8011868 <__swhatbuf_r+0x40>
 801184a:	466a      	mov	r2, sp
 801184c:	f000 fda0 	bl	8012390 <_fstat_r>
 8011850:	2800      	cmp	r0, #0
 8011852:	dbf2      	blt.n	801183a <__swhatbuf_r+0x12>
 8011854:	9a01      	ldr	r2, [sp, #4]
 8011856:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801185a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801185e:	425a      	negs	r2, r3
 8011860:	415a      	adcs	r2, r3
 8011862:	602a      	str	r2, [r5, #0]
 8011864:	e7ee      	b.n	8011844 <__swhatbuf_r+0x1c>
 8011866:	2340      	movs	r3, #64	; 0x40
 8011868:	2000      	movs	r0, #0
 801186a:	6023      	str	r3, [r4, #0]
 801186c:	b016      	add	sp, #88	; 0x58
 801186e:	bd70      	pop	{r4, r5, r6, pc}

08011870 <__smakebuf_r>:
 8011870:	898b      	ldrh	r3, [r1, #12]
 8011872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011874:	079d      	lsls	r5, r3, #30
 8011876:	4606      	mov	r6, r0
 8011878:	460c      	mov	r4, r1
 801187a:	d507      	bpl.n	801188c <__smakebuf_r+0x1c>
 801187c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011880:	6023      	str	r3, [r4, #0]
 8011882:	6123      	str	r3, [r4, #16]
 8011884:	2301      	movs	r3, #1
 8011886:	6163      	str	r3, [r4, #20]
 8011888:	b002      	add	sp, #8
 801188a:	bd70      	pop	{r4, r5, r6, pc}
 801188c:	ab01      	add	r3, sp, #4
 801188e:	466a      	mov	r2, sp
 8011890:	f7ff ffca 	bl	8011828 <__swhatbuf_r>
 8011894:	9900      	ldr	r1, [sp, #0]
 8011896:	4605      	mov	r5, r0
 8011898:	4630      	mov	r0, r6
 801189a:	f000 fb69 	bl	8011f70 <_malloc_r>
 801189e:	b948      	cbnz	r0, 80118b4 <__smakebuf_r+0x44>
 80118a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118a4:	059a      	lsls	r2, r3, #22
 80118a6:	d4ef      	bmi.n	8011888 <__smakebuf_r+0x18>
 80118a8:	f023 0303 	bic.w	r3, r3, #3
 80118ac:	f043 0302 	orr.w	r3, r3, #2
 80118b0:	81a3      	strh	r3, [r4, #12]
 80118b2:	e7e3      	b.n	801187c <__smakebuf_r+0xc>
 80118b4:	4b0d      	ldr	r3, [pc, #52]	; (80118ec <__smakebuf_r+0x7c>)
 80118b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80118b8:	89a3      	ldrh	r3, [r4, #12]
 80118ba:	6020      	str	r0, [r4, #0]
 80118bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118c0:	81a3      	strh	r3, [r4, #12]
 80118c2:	9b00      	ldr	r3, [sp, #0]
 80118c4:	6163      	str	r3, [r4, #20]
 80118c6:	9b01      	ldr	r3, [sp, #4]
 80118c8:	6120      	str	r0, [r4, #16]
 80118ca:	b15b      	cbz	r3, 80118e4 <__smakebuf_r+0x74>
 80118cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118d0:	4630      	mov	r0, r6
 80118d2:	f000 fd6f 	bl	80123b4 <_isatty_r>
 80118d6:	b128      	cbz	r0, 80118e4 <__smakebuf_r+0x74>
 80118d8:	89a3      	ldrh	r3, [r4, #12]
 80118da:	f023 0303 	bic.w	r3, r3, #3
 80118de:	f043 0301 	orr.w	r3, r3, #1
 80118e2:	81a3      	strh	r3, [r4, #12]
 80118e4:	89a3      	ldrh	r3, [r4, #12]
 80118e6:	431d      	orrs	r5, r3
 80118e8:	81a5      	strh	r5, [r4, #12]
 80118ea:	e7cd      	b.n	8011888 <__smakebuf_r+0x18>
 80118ec:	080116c1 	.word	0x080116c1

080118f0 <malloc>:
 80118f0:	4b02      	ldr	r3, [pc, #8]	; (80118fc <malloc+0xc>)
 80118f2:	4601      	mov	r1, r0
 80118f4:	6818      	ldr	r0, [r3, #0]
 80118f6:	f000 bb3b 	b.w	8011f70 <_malloc_r>
 80118fa:	bf00      	nop
 80118fc:	2000000c 	.word	0x2000000c

08011900 <_Balloc>:
 8011900:	b570      	push	{r4, r5, r6, lr}
 8011902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011904:	4604      	mov	r4, r0
 8011906:	460e      	mov	r6, r1
 8011908:	b93d      	cbnz	r5, 801191a <_Balloc+0x1a>
 801190a:	2010      	movs	r0, #16
 801190c:	f7ff fff0 	bl	80118f0 <malloc>
 8011910:	6260      	str	r0, [r4, #36]	; 0x24
 8011912:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011916:	6005      	str	r5, [r0, #0]
 8011918:	60c5      	str	r5, [r0, #12]
 801191a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801191c:	68eb      	ldr	r3, [r5, #12]
 801191e:	b183      	cbz	r3, 8011942 <_Balloc+0x42>
 8011920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011928:	b9b8      	cbnz	r0, 801195a <_Balloc+0x5a>
 801192a:	2101      	movs	r1, #1
 801192c:	fa01 f506 	lsl.w	r5, r1, r6
 8011930:	1d6a      	adds	r2, r5, #5
 8011932:	0092      	lsls	r2, r2, #2
 8011934:	4620      	mov	r0, r4
 8011936:	f000 fabf 	bl	8011eb8 <_calloc_r>
 801193a:	b160      	cbz	r0, 8011956 <_Balloc+0x56>
 801193c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011940:	e00e      	b.n	8011960 <_Balloc+0x60>
 8011942:	2221      	movs	r2, #33	; 0x21
 8011944:	2104      	movs	r1, #4
 8011946:	4620      	mov	r0, r4
 8011948:	f000 fab6 	bl	8011eb8 <_calloc_r>
 801194c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801194e:	60e8      	str	r0, [r5, #12]
 8011950:	68db      	ldr	r3, [r3, #12]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d1e4      	bne.n	8011920 <_Balloc+0x20>
 8011956:	2000      	movs	r0, #0
 8011958:	bd70      	pop	{r4, r5, r6, pc}
 801195a:	6802      	ldr	r2, [r0, #0]
 801195c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011960:	2300      	movs	r3, #0
 8011962:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011966:	e7f7      	b.n	8011958 <_Balloc+0x58>

08011968 <_Bfree>:
 8011968:	b570      	push	{r4, r5, r6, lr}
 801196a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801196c:	4606      	mov	r6, r0
 801196e:	460d      	mov	r5, r1
 8011970:	b93c      	cbnz	r4, 8011982 <_Bfree+0x1a>
 8011972:	2010      	movs	r0, #16
 8011974:	f7ff ffbc 	bl	80118f0 <malloc>
 8011978:	6270      	str	r0, [r6, #36]	; 0x24
 801197a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801197e:	6004      	str	r4, [r0, #0]
 8011980:	60c4      	str	r4, [r0, #12]
 8011982:	b13d      	cbz	r5, 8011994 <_Bfree+0x2c>
 8011984:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011986:	686a      	ldr	r2, [r5, #4]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801198e:	6029      	str	r1, [r5, #0]
 8011990:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011994:	bd70      	pop	{r4, r5, r6, pc}

08011996 <__multadd>:
 8011996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801199a:	690d      	ldr	r5, [r1, #16]
 801199c:	461f      	mov	r7, r3
 801199e:	4606      	mov	r6, r0
 80119a0:	460c      	mov	r4, r1
 80119a2:	f101 0c14 	add.w	ip, r1, #20
 80119a6:	2300      	movs	r3, #0
 80119a8:	f8dc 0000 	ldr.w	r0, [ip]
 80119ac:	b281      	uxth	r1, r0
 80119ae:	fb02 7101 	mla	r1, r2, r1, r7
 80119b2:	0c0f      	lsrs	r7, r1, #16
 80119b4:	0c00      	lsrs	r0, r0, #16
 80119b6:	fb02 7000 	mla	r0, r2, r0, r7
 80119ba:	b289      	uxth	r1, r1
 80119bc:	3301      	adds	r3, #1
 80119be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80119c2:	429d      	cmp	r5, r3
 80119c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80119c8:	f84c 1b04 	str.w	r1, [ip], #4
 80119cc:	dcec      	bgt.n	80119a8 <__multadd+0x12>
 80119ce:	b1d7      	cbz	r7, 8011a06 <__multadd+0x70>
 80119d0:	68a3      	ldr	r3, [r4, #8]
 80119d2:	42ab      	cmp	r3, r5
 80119d4:	dc12      	bgt.n	80119fc <__multadd+0x66>
 80119d6:	6861      	ldr	r1, [r4, #4]
 80119d8:	4630      	mov	r0, r6
 80119da:	3101      	adds	r1, #1
 80119dc:	f7ff ff90 	bl	8011900 <_Balloc>
 80119e0:	6922      	ldr	r2, [r4, #16]
 80119e2:	3202      	adds	r2, #2
 80119e4:	f104 010c 	add.w	r1, r4, #12
 80119e8:	4680      	mov	r8, r0
 80119ea:	0092      	lsls	r2, r2, #2
 80119ec:	300c      	adds	r0, #12
 80119ee:	f7fe f9a1 	bl	800fd34 <memcpy>
 80119f2:	4621      	mov	r1, r4
 80119f4:	4630      	mov	r0, r6
 80119f6:	f7ff ffb7 	bl	8011968 <_Bfree>
 80119fa:	4644      	mov	r4, r8
 80119fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011a00:	3501      	adds	r5, #1
 8011a02:	615f      	str	r7, [r3, #20]
 8011a04:	6125      	str	r5, [r4, #16]
 8011a06:	4620      	mov	r0, r4
 8011a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a0c <__hi0bits>:
 8011a0c:	0c02      	lsrs	r2, r0, #16
 8011a0e:	0412      	lsls	r2, r2, #16
 8011a10:	4603      	mov	r3, r0
 8011a12:	b9b2      	cbnz	r2, 8011a42 <__hi0bits+0x36>
 8011a14:	0403      	lsls	r3, r0, #16
 8011a16:	2010      	movs	r0, #16
 8011a18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011a1c:	bf04      	itt	eq
 8011a1e:	021b      	lsleq	r3, r3, #8
 8011a20:	3008      	addeq	r0, #8
 8011a22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011a26:	bf04      	itt	eq
 8011a28:	011b      	lsleq	r3, r3, #4
 8011a2a:	3004      	addeq	r0, #4
 8011a2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011a30:	bf04      	itt	eq
 8011a32:	009b      	lsleq	r3, r3, #2
 8011a34:	3002      	addeq	r0, #2
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	db06      	blt.n	8011a48 <__hi0bits+0x3c>
 8011a3a:	005b      	lsls	r3, r3, #1
 8011a3c:	d503      	bpl.n	8011a46 <__hi0bits+0x3a>
 8011a3e:	3001      	adds	r0, #1
 8011a40:	4770      	bx	lr
 8011a42:	2000      	movs	r0, #0
 8011a44:	e7e8      	b.n	8011a18 <__hi0bits+0xc>
 8011a46:	2020      	movs	r0, #32
 8011a48:	4770      	bx	lr

08011a4a <__lo0bits>:
 8011a4a:	6803      	ldr	r3, [r0, #0]
 8011a4c:	f013 0207 	ands.w	r2, r3, #7
 8011a50:	4601      	mov	r1, r0
 8011a52:	d00b      	beq.n	8011a6c <__lo0bits+0x22>
 8011a54:	07da      	lsls	r2, r3, #31
 8011a56:	d423      	bmi.n	8011aa0 <__lo0bits+0x56>
 8011a58:	0798      	lsls	r0, r3, #30
 8011a5a:	bf49      	itett	mi
 8011a5c:	085b      	lsrmi	r3, r3, #1
 8011a5e:	089b      	lsrpl	r3, r3, #2
 8011a60:	2001      	movmi	r0, #1
 8011a62:	600b      	strmi	r3, [r1, #0]
 8011a64:	bf5c      	itt	pl
 8011a66:	600b      	strpl	r3, [r1, #0]
 8011a68:	2002      	movpl	r0, #2
 8011a6a:	4770      	bx	lr
 8011a6c:	b298      	uxth	r0, r3
 8011a6e:	b9a8      	cbnz	r0, 8011a9c <__lo0bits+0x52>
 8011a70:	0c1b      	lsrs	r3, r3, #16
 8011a72:	2010      	movs	r0, #16
 8011a74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011a78:	bf04      	itt	eq
 8011a7a:	0a1b      	lsreq	r3, r3, #8
 8011a7c:	3008      	addeq	r0, #8
 8011a7e:	071a      	lsls	r2, r3, #28
 8011a80:	bf04      	itt	eq
 8011a82:	091b      	lsreq	r3, r3, #4
 8011a84:	3004      	addeq	r0, #4
 8011a86:	079a      	lsls	r2, r3, #30
 8011a88:	bf04      	itt	eq
 8011a8a:	089b      	lsreq	r3, r3, #2
 8011a8c:	3002      	addeq	r0, #2
 8011a8e:	07da      	lsls	r2, r3, #31
 8011a90:	d402      	bmi.n	8011a98 <__lo0bits+0x4e>
 8011a92:	085b      	lsrs	r3, r3, #1
 8011a94:	d006      	beq.n	8011aa4 <__lo0bits+0x5a>
 8011a96:	3001      	adds	r0, #1
 8011a98:	600b      	str	r3, [r1, #0]
 8011a9a:	4770      	bx	lr
 8011a9c:	4610      	mov	r0, r2
 8011a9e:	e7e9      	b.n	8011a74 <__lo0bits+0x2a>
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	4770      	bx	lr
 8011aa4:	2020      	movs	r0, #32
 8011aa6:	4770      	bx	lr

08011aa8 <__i2b>:
 8011aa8:	b510      	push	{r4, lr}
 8011aaa:	460c      	mov	r4, r1
 8011aac:	2101      	movs	r1, #1
 8011aae:	f7ff ff27 	bl	8011900 <_Balloc>
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	6144      	str	r4, [r0, #20]
 8011ab6:	6102      	str	r2, [r0, #16]
 8011ab8:	bd10      	pop	{r4, pc}

08011aba <__multiply>:
 8011aba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011abe:	4614      	mov	r4, r2
 8011ac0:	690a      	ldr	r2, [r1, #16]
 8011ac2:	6923      	ldr	r3, [r4, #16]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	bfb8      	it	lt
 8011ac8:	460b      	movlt	r3, r1
 8011aca:	4688      	mov	r8, r1
 8011acc:	bfbc      	itt	lt
 8011ace:	46a0      	movlt	r8, r4
 8011ad0:	461c      	movlt	r4, r3
 8011ad2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011ad6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011ada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ade:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ae2:	eb07 0609 	add.w	r6, r7, r9
 8011ae6:	42b3      	cmp	r3, r6
 8011ae8:	bfb8      	it	lt
 8011aea:	3101      	addlt	r1, #1
 8011aec:	f7ff ff08 	bl	8011900 <_Balloc>
 8011af0:	f100 0514 	add.w	r5, r0, #20
 8011af4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011af8:	462b      	mov	r3, r5
 8011afa:	2200      	movs	r2, #0
 8011afc:	4573      	cmp	r3, lr
 8011afe:	d316      	bcc.n	8011b2e <__multiply+0x74>
 8011b00:	f104 0214 	add.w	r2, r4, #20
 8011b04:	f108 0114 	add.w	r1, r8, #20
 8011b08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011b0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011b10:	9300      	str	r3, [sp, #0]
 8011b12:	9b00      	ldr	r3, [sp, #0]
 8011b14:	9201      	str	r2, [sp, #4]
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d80c      	bhi.n	8011b34 <__multiply+0x7a>
 8011b1a:	2e00      	cmp	r6, #0
 8011b1c:	dd03      	ble.n	8011b26 <__multiply+0x6c>
 8011b1e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d05d      	beq.n	8011be2 <__multiply+0x128>
 8011b26:	6106      	str	r6, [r0, #16]
 8011b28:	b003      	add	sp, #12
 8011b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b2e:	f843 2b04 	str.w	r2, [r3], #4
 8011b32:	e7e3      	b.n	8011afc <__multiply+0x42>
 8011b34:	f8b2 b000 	ldrh.w	fp, [r2]
 8011b38:	f1bb 0f00 	cmp.w	fp, #0
 8011b3c:	d023      	beq.n	8011b86 <__multiply+0xcc>
 8011b3e:	4689      	mov	r9, r1
 8011b40:	46ac      	mov	ip, r5
 8011b42:	f04f 0800 	mov.w	r8, #0
 8011b46:	f859 4b04 	ldr.w	r4, [r9], #4
 8011b4a:	f8dc a000 	ldr.w	sl, [ip]
 8011b4e:	b2a3      	uxth	r3, r4
 8011b50:	fa1f fa8a 	uxth.w	sl, sl
 8011b54:	fb0b a303 	mla	r3, fp, r3, sl
 8011b58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011b5c:	f8dc 4000 	ldr.w	r4, [ip]
 8011b60:	4443      	add	r3, r8
 8011b62:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011b66:	fb0b 840a 	mla	r4, fp, sl, r8
 8011b6a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011b6e:	46e2      	mov	sl, ip
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011b76:	454f      	cmp	r7, r9
 8011b78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011b7c:	f84a 3b04 	str.w	r3, [sl], #4
 8011b80:	d82b      	bhi.n	8011bda <__multiply+0x120>
 8011b82:	f8cc 8004 	str.w	r8, [ip, #4]
 8011b86:	9b01      	ldr	r3, [sp, #4]
 8011b88:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011b8c:	3204      	adds	r2, #4
 8011b8e:	f1ba 0f00 	cmp.w	sl, #0
 8011b92:	d020      	beq.n	8011bd6 <__multiply+0x11c>
 8011b94:	682b      	ldr	r3, [r5, #0]
 8011b96:	4689      	mov	r9, r1
 8011b98:	46a8      	mov	r8, r5
 8011b9a:	f04f 0b00 	mov.w	fp, #0
 8011b9e:	f8b9 c000 	ldrh.w	ip, [r9]
 8011ba2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011ba6:	fb0a 440c 	mla	r4, sl, ip, r4
 8011baa:	445c      	add	r4, fp
 8011bac:	46c4      	mov	ip, r8
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011bb4:	f84c 3b04 	str.w	r3, [ip], #4
 8011bb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011bbc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011bc0:	0c1b      	lsrs	r3, r3, #16
 8011bc2:	fb0a b303 	mla	r3, sl, r3, fp
 8011bc6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011bca:	454f      	cmp	r7, r9
 8011bcc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011bd0:	d805      	bhi.n	8011bde <__multiply+0x124>
 8011bd2:	f8c8 3004 	str.w	r3, [r8, #4]
 8011bd6:	3504      	adds	r5, #4
 8011bd8:	e79b      	b.n	8011b12 <__multiply+0x58>
 8011bda:	46d4      	mov	ip, sl
 8011bdc:	e7b3      	b.n	8011b46 <__multiply+0x8c>
 8011bde:	46e0      	mov	r8, ip
 8011be0:	e7dd      	b.n	8011b9e <__multiply+0xe4>
 8011be2:	3e01      	subs	r6, #1
 8011be4:	e799      	b.n	8011b1a <__multiply+0x60>
	...

08011be8 <__pow5mult>:
 8011be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bec:	4615      	mov	r5, r2
 8011bee:	f012 0203 	ands.w	r2, r2, #3
 8011bf2:	4606      	mov	r6, r0
 8011bf4:	460f      	mov	r7, r1
 8011bf6:	d007      	beq.n	8011c08 <__pow5mult+0x20>
 8011bf8:	3a01      	subs	r2, #1
 8011bfa:	4c21      	ldr	r4, [pc, #132]	; (8011c80 <__pow5mult+0x98>)
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c02:	f7ff fec8 	bl	8011996 <__multadd>
 8011c06:	4607      	mov	r7, r0
 8011c08:	10ad      	asrs	r5, r5, #2
 8011c0a:	d035      	beq.n	8011c78 <__pow5mult+0x90>
 8011c0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011c0e:	b93c      	cbnz	r4, 8011c20 <__pow5mult+0x38>
 8011c10:	2010      	movs	r0, #16
 8011c12:	f7ff fe6d 	bl	80118f0 <malloc>
 8011c16:	6270      	str	r0, [r6, #36]	; 0x24
 8011c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c1c:	6004      	str	r4, [r0, #0]
 8011c1e:	60c4      	str	r4, [r0, #12]
 8011c20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c28:	b94c      	cbnz	r4, 8011c3e <__pow5mult+0x56>
 8011c2a:	f240 2171 	movw	r1, #625	; 0x271
 8011c2e:	4630      	mov	r0, r6
 8011c30:	f7ff ff3a 	bl	8011aa8 <__i2b>
 8011c34:	2300      	movs	r3, #0
 8011c36:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	6003      	str	r3, [r0, #0]
 8011c3e:	f04f 0800 	mov.w	r8, #0
 8011c42:	07eb      	lsls	r3, r5, #31
 8011c44:	d50a      	bpl.n	8011c5c <__pow5mult+0x74>
 8011c46:	4639      	mov	r1, r7
 8011c48:	4622      	mov	r2, r4
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f7ff ff35 	bl	8011aba <__multiply>
 8011c50:	4639      	mov	r1, r7
 8011c52:	4681      	mov	r9, r0
 8011c54:	4630      	mov	r0, r6
 8011c56:	f7ff fe87 	bl	8011968 <_Bfree>
 8011c5a:	464f      	mov	r7, r9
 8011c5c:	106d      	asrs	r5, r5, #1
 8011c5e:	d00b      	beq.n	8011c78 <__pow5mult+0x90>
 8011c60:	6820      	ldr	r0, [r4, #0]
 8011c62:	b938      	cbnz	r0, 8011c74 <__pow5mult+0x8c>
 8011c64:	4622      	mov	r2, r4
 8011c66:	4621      	mov	r1, r4
 8011c68:	4630      	mov	r0, r6
 8011c6a:	f7ff ff26 	bl	8011aba <__multiply>
 8011c6e:	6020      	str	r0, [r4, #0]
 8011c70:	f8c0 8000 	str.w	r8, [r0]
 8011c74:	4604      	mov	r4, r0
 8011c76:	e7e4      	b.n	8011c42 <__pow5mult+0x5a>
 8011c78:	4638      	mov	r0, r7
 8011c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c7e:	bf00      	nop
 8011c80:	08012660 	.word	0x08012660

08011c84 <__lshift>:
 8011c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c88:	460c      	mov	r4, r1
 8011c8a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011c8e:	6923      	ldr	r3, [r4, #16]
 8011c90:	6849      	ldr	r1, [r1, #4]
 8011c92:	eb0a 0903 	add.w	r9, sl, r3
 8011c96:	68a3      	ldr	r3, [r4, #8]
 8011c98:	4607      	mov	r7, r0
 8011c9a:	4616      	mov	r6, r2
 8011c9c:	f109 0501 	add.w	r5, r9, #1
 8011ca0:	42ab      	cmp	r3, r5
 8011ca2:	db32      	blt.n	8011d0a <__lshift+0x86>
 8011ca4:	4638      	mov	r0, r7
 8011ca6:	f7ff fe2b 	bl	8011900 <_Balloc>
 8011caa:	2300      	movs	r3, #0
 8011cac:	4680      	mov	r8, r0
 8011cae:	f100 0114 	add.w	r1, r0, #20
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	4553      	cmp	r3, sl
 8011cb6:	db2b      	blt.n	8011d10 <__lshift+0x8c>
 8011cb8:	6920      	ldr	r0, [r4, #16]
 8011cba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011cbe:	f104 0314 	add.w	r3, r4, #20
 8011cc2:	f016 021f 	ands.w	r2, r6, #31
 8011cc6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011cca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011cce:	d025      	beq.n	8011d1c <__lshift+0x98>
 8011cd0:	f1c2 0e20 	rsb	lr, r2, #32
 8011cd4:	2000      	movs	r0, #0
 8011cd6:	681e      	ldr	r6, [r3, #0]
 8011cd8:	468a      	mov	sl, r1
 8011cda:	4096      	lsls	r6, r2
 8011cdc:	4330      	orrs	r0, r6
 8011cde:	f84a 0b04 	str.w	r0, [sl], #4
 8011ce2:	f853 0b04 	ldr.w	r0, [r3], #4
 8011ce6:	459c      	cmp	ip, r3
 8011ce8:	fa20 f00e 	lsr.w	r0, r0, lr
 8011cec:	d814      	bhi.n	8011d18 <__lshift+0x94>
 8011cee:	6048      	str	r0, [r1, #4]
 8011cf0:	b108      	cbz	r0, 8011cf6 <__lshift+0x72>
 8011cf2:	f109 0502 	add.w	r5, r9, #2
 8011cf6:	3d01      	subs	r5, #1
 8011cf8:	4638      	mov	r0, r7
 8011cfa:	f8c8 5010 	str.w	r5, [r8, #16]
 8011cfe:	4621      	mov	r1, r4
 8011d00:	f7ff fe32 	bl	8011968 <_Bfree>
 8011d04:	4640      	mov	r0, r8
 8011d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d0a:	3101      	adds	r1, #1
 8011d0c:	005b      	lsls	r3, r3, #1
 8011d0e:	e7c7      	b.n	8011ca0 <__lshift+0x1c>
 8011d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011d14:	3301      	adds	r3, #1
 8011d16:	e7cd      	b.n	8011cb4 <__lshift+0x30>
 8011d18:	4651      	mov	r1, sl
 8011d1a:	e7dc      	b.n	8011cd6 <__lshift+0x52>
 8011d1c:	3904      	subs	r1, #4
 8011d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d22:	f841 2f04 	str.w	r2, [r1, #4]!
 8011d26:	459c      	cmp	ip, r3
 8011d28:	d8f9      	bhi.n	8011d1e <__lshift+0x9a>
 8011d2a:	e7e4      	b.n	8011cf6 <__lshift+0x72>

08011d2c <__mcmp>:
 8011d2c:	6903      	ldr	r3, [r0, #16]
 8011d2e:	690a      	ldr	r2, [r1, #16]
 8011d30:	1a9b      	subs	r3, r3, r2
 8011d32:	b530      	push	{r4, r5, lr}
 8011d34:	d10c      	bne.n	8011d50 <__mcmp+0x24>
 8011d36:	0092      	lsls	r2, r2, #2
 8011d38:	3014      	adds	r0, #20
 8011d3a:	3114      	adds	r1, #20
 8011d3c:	1884      	adds	r4, r0, r2
 8011d3e:	4411      	add	r1, r2
 8011d40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011d44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011d48:	4295      	cmp	r5, r2
 8011d4a:	d003      	beq.n	8011d54 <__mcmp+0x28>
 8011d4c:	d305      	bcc.n	8011d5a <__mcmp+0x2e>
 8011d4e:	2301      	movs	r3, #1
 8011d50:	4618      	mov	r0, r3
 8011d52:	bd30      	pop	{r4, r5, pc}
 8011d54:	42a0      	cmp	r0, r4
 8011d56:	d3f3      	bcc.n	8011d40 <__mcmp+0x14>
 8011d58:	e7fa      	b.n	8011d50 <__mcmp+0x24>
 8011d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8011d5e:	e7f7      	b.n	8011d50 <__mcmp+0x24>

08011d60 <__mdiff>:
 8011d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d64:	460d      	mov	r5, r1
 8011d66:	4607      	mov	r7, r0
 8011d68:	4611      	mov	r1, r2
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	4614      	mov	r4, r2
 8011d6e:	f7ff ffdd 	bl	8011d2c <__mcmp>
 8011d72:	1e06      	subs	r6, r0, #0
 8011d74:	d108      	bne.n	8011d88 <__mdiff+0x28>
 8011d76:	4631      	mov	r1, r6
 8011d78:	4638      	mov	r0, r7
 8011d7a:	f7ff fdc1 	bl	8011900 <_Balloc>
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d88:	bfa4      	itt	ge
 8011d8a:	4623      	movge	r3, r4
 8011d8c:	462c      	movge	r4, r5
 8011d8e:	4638      	mov	r0, r7
 8011d90:	6861      	ldr	r1, [r4, #4]
 8011d92:	bfa6      	itte	ge
 8011d94:	461d      	movge	r5, r3
 8011d96:	2600      	movge	r6, #0
 8011d98:	2601      	movlt	r6, #1
 8011d9a:	f7ff fdb1 	bl	8011900 <_Balloc>
 8011d9e:	692b      	ldr	r3, [r5, #16]
 8011da0:	60c6      	str	r6, [r0, #12]
 8011da2:	6926      	ldr	r6, [r4, #16]
 8011da4:	f105 0914 	add.w	r9, r5, #20
 8011da8:	f104 0214 	add.w	r2, r4, #20
 8011dac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011db0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011db4:	f100 0514 	add.w	r5, r0, #20
 8011db8:	f04f 0e00 	mov.w	lr, #0
 8011dbc:	f852 ab04 	ldr.w	sl, [r2], #4
 8011dc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8011dc4:	fa1e f18a 	uxtah	r1, lr, sl
 8011dc8:	b2a3      	uxth	r3, r4
 8011dca:	1ac9      	subs	r1, r1, r3
 8011dcc:	0c23      	lsrs	r3, r4, #16
 8011dce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011dd2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011dd6:	b289      	uxth	r1, r1
 8011dd8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011ddc:	45c8      	cmp	r8, r9
 8011dde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011de2:	4694      	mov	ip, r2
 8011de4:	f845 3b04 	str.w	r3, [r5], #4
 8011de8:	d8e8      	bhi.n	8011dbc <__mdiff+0x5c>
 8011dea:	45bc      	cmp	ip, r7
 8011dec:	d304      	bcc.n	8011df8 <__mdiff+0x98>
 8011dee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011df2:	b183      	cbz	r3, 8011e16 <__mdiff+0xb6>
 8011df4:	6106      	str	r6, [r0, #16]
 8011df6:	e7c5      	b.n	8011d84 <__mdiff+0x24>
 8011df8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011dfc:	fa1e f381 	uxtah	r3, lr, r1
 8011e00:	141a      	asrs	r2, r3, #16
 8011e02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e0c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011e10:	f845 3b04 	str.w	r3, [r5], #4
 8011e14:	e7e9      	b.n	8011dea <__mdiff+0x8a>
 8011e16:	3e01      	subs	r6, #1
 8011e18:	e7e9      	b.n	8011dee <__mdiff+0x8e>

08011e1a <__d2b>:
 8011e1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e1e:	460e      	mov	r6, r1
 8011e20:	2101      	movs	r1, #1
 8011e22:	ec59 8b10 	vmov	r8, r9, d0
 8011e26:	4615      	mov	r5, r2
 8011e28:	f7ff fd6a 	bl	8011900 <_Balloc>
 8011e2c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011e30:	4607      	mov	r7, r0
 8011e32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e36:	bb34      	cbnz	r4, 8011e86 <__d2b+0x6c>
 8011e38:	9301      	str	r3, [sp, #4]
 8011e3a:	f1b8 0300 	subs.w	r3, r8, #0
 8011e3e:	d027      	beq.n	8011e90 <__d2b+0x76>
 8011e40:	a802      	add	r0, sp, #8
 8011e42:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011e46:	f7ff fe00 	bl	8011a4a <__lo0bits>
 8011e4a:	9900      	ldr	r1, [sp, #0]
 8011e4c:	b1f0      	cbz	r0, 8011e8c <__d2b+0x72>
 8011e4e:	9a01      	ldr	r2, [sp, #4]
 8011e50:	f1c0 0320 	rsb	r3, r0, #32
 8011e54:	fa02 f303 	lsl.w	r3, r2, r3
 8011e58:	430b      	orrs	r3, r1
 8011e5a:	40c2      	lsrs	r2, r0
 8011e5c:	617b      	str	r3, [r7, #20]
 8011e5e:	9201      	str	r2, [sp, #4]
 8011e60:	9b01      	ldr	r3, [sp, #4]
 8011e62:	61bb      	str	r3, [r7, #24]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	bf14      	ite	ne
 8011e68:	2102      	movne	r1, #2
 8011e6a:	2101      	moveq	r1, #1
 8011e6c:	6139      	str	r1, [r7, #16]
 8011e6e:	b1c4      	cbz	r4, 8011ea2 <__d2b+0x88>
 8011e70:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011e74:	4404      	add	r4, r0
 8011e76:	6034      	str	r4, [r6, #0]
 8011e78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011e7c:	6028      	str	r0, [r5, #0]
 8011e7e:	4638      	mov	r0, r7
 8011e80:	b003      	add	sp, #12
 8011e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e8a:	e7d5      	b.n	8011e38 <__d2b+0x1e>
 8011e8c:	6179      	str	r1, [r7, #20]
 8011e8e:	e7e7      	b.n	8011e60 <__d2b+0x46>
 8011e90:	a801      	add	r0, sp, #4
 8011e92:	f7ff fdda 	bl	8011a4a <__lo0bits>
 8011e96:	9b01      	ldr	r3, [sp, #4]
 8011e98:	617b      	str	r3, [r7, #20]
 8011e9a:	2101      	movs	r1, #1
 8011e9c:	6139      	str	r1, [r7, #16]
 8011e9e:	3020      	adds	r0, #32
 8011ea0:	e7e5      	b.n	8011e6e <__d2b+0x54>
 8011ea2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011ea6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011eaa:	6030      	str	r0, [r6, #0]
 8011eac:	6918      	ldr	r0, [r3, #16]
 8011eae:	f7ff fdad 	bl	8011a0c <__hi0bits>
 8011eb2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011eb6:	e7e1      	b.n	8011e7c <__d2b+0x62>

08011eb8 <_calloc_r>:
 8011eb8:	b538      	push	{r3, r4, r5, lr}
 8011eba:	fb02 f401 	mul.w	r4, r2, r1
 8011ebe:	4621      	mov	r1, r4
 8011ec0:	f000 f856 	bl	8011f70 <_malloc_r>
 8011ec4:	4605      	mov	r5, r0
 8011ec6:	b118      	cbz	r0, 8011ed0 <_calloc_r+0x18>
 8011ec8:	4622      	mov	r2, r4
 8011eca:	2100      	movs	r1, #0
 8011ecc:	f7fd ff3d 	bl	800fd4a <memset>
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	bd38      	pop	{r3, r4, r5, pc}

08011ed4 <_free_r>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	2900      	cmp	r1, #0
 8011eda:	d045      	beq.n	8011f68 <_free_r+0x94>
 8011edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ee0:	1f0c      	subs	r4, r1, #4
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	bfb8      	it	lt
 8011ee6:	18e4      	addlt	r4, r4, r3
 8011ee8:	f000 fa98 	bl	801241c <__malloc_lock>
 8011eec:	4a1f      	ldr	r2, [pc, #124]	; (8011f6c <_free_r+0x98>)
 8011eee:	6813      	ldr	r3, [r2, #0]
 8011ef0:	4610      	mov	r0, r2
 8011ef2:	b933      	cbnz	r3, 8011f02 <_free_r+0x2e>
 8011ef4:	6063      	str	r3, [r4, #4]
 8011ef6:	6014      	str	r4, [r2, #0]
 8011ef8:	4628      	mov	r0, r5
 8011efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011efe:	f000 ba8e 	b.w	801241e <__malloc_unlock>
 8011f02:	42a3      	cmp	r3, r4
 8011f04:	d90c      	bls.n	8011f20 <_free_r+0x4c>
 8011f06:	6821      	ldr	r1, [r4, #0]
 8011f08:	1862      	adds	r2, r4, r1
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	bf04      	itt	eq
 8011f0e:	681a      	ldreq	r2, [r3, #0]
 8011f10:	685b      	ldreq	r3, [r3, #4]
 8011f12:	6063      	str	r3, [r4, #4]
 8011f14:	bf04      	itt	eq
 8011f16:	1852      	addeq	r2, r2, r1
 8011f18:	6022      	streq	r2, [r4, #0]
 8011f1a:	6004      	str	r4, [r0, #0]
 8011f1c:	e7ec      	b.n	8011ef8 <_free_r+0x24>
 8011f1e:	4613      	mov	r3, r2
 8011f20:	685a      	ldr	r2, [r3, #4]
 8011f22:	b10a      	cbz	r2, 8011f28 <_free_r+0x54>
 8011f24:	42a2      	cmp	r2, r4
 8011f26:	d9fa      	bls.n	8011f1e <_free_r+0x4a>
 8011f28:	6819      	ldr	r1, [r3, #0]
 8011f2a:	1858      	adds	r0, r3, r1
 8011f2c:	42a0      	cmp	r0, r4
 8011f2e:	d10b      	bne.n	8011f48 <_free_r+0x74>
 8011f30:	6820      	ldr	r0, [r4, #0]
 8011f32:	4401      	add	r1, r0
 8011f34:	1858      	adds	r0, r3, r1
 8011f36:	4282      	cmp	r2, r0
 8011f38:	6019      	str	r1, [r3, #0]
 8011f3a:	d1dd      	bne.n	8011ef8 <_free_r+0x24>
 8011f3c:	6810      	ldr	r0, [r2, #0]
 8011f3e:	6852      	ldr	r2, [r2, #4]
 8011f40:	605a      	str	r2, [r3, #4]
 8011f42:	4401      	add	r1, r0
 8011f44:	6019      	str	r1, [r3, #0]
 8011f46:	e7d7      	b.n	8011ef8 <_free_r+0x24>
 8011f48:	d902      	bls.n	8011f50 <_free_r+0x7c>
 8011f4a:	230c      	movs	r3, #12
 8011f4c:	602b      	str	r3, [r5, #0]
 8011f4e:	e7d3      	b.n	8011ef8 <_free_r+0x24>
 8011f50:	6820      	ldr	r0, [r4, #0]
 8011f52:	1821      	adds	r1, r4, r0
 8011f54:	428a      	cmp	r2, r1
 8011f56:	bf04      	itt	eq
 8011f58:	6811      	ldreq	r1, [r2, #0]
 8011f5a:	6852      	ldreq	r2, [r2, #4]
 8011f5c:	6062      	str	r2, [r4, #4]
 8011f5e:	bf04      	itt	eq
 8011f60:	1809      	addeq	r1, r1, r0
 8011f62:	6021      	streq	r1, [r4, #0]
 8011f64:	605c      	str	r4, [r3, #4]
 8011f66:	e7c7      	b.n	8011ef8 <_free_r+0x24>
 8011f68:	bd38      	pop	{r3, r4, r5, pc}
 8011f6a:	bf00      	nop
 8011f6c:	20000418 	.word	0x20000418

08011f70 <_malloc_r>:
 8011f70:	b570      	push	{r4, r5, r6, lr}
 8011f72:	1ccd      	adds	r5, r1, #3
 8011f74:	f025 0503 	bic.w	r5, r5, #3
 8011f78:	3508      	adds	r5, #8
 8011f7a:	2d0c      	cmp	r5, #12
 8011f7c:	bf38      	it	cc
 8011f7e:	250c      	movcc	r5, #12
 8011f80:	2d00      	cmp	r5, #0
 8011f82:	4606      	mov	r6, r0
 8011f84:	db01      	blt.n	8011f8a <_malloc_r+0x1a>
 8011f86:	42a9      	cmp	r1, r5
 8011f88:	d903      	bls.n	8011f92 <_malloc_r+0x22>
 8011f8a:	230c      	movs	r3, #12
 8011f8c:	6033      	str	r3, [r6, #0]
 8011f8e:	2000      	movs	r0, #0
 8011f90:	bd70      	pop	{r4, r5, r6, pc}
 8011f92:	f000 fa43 	bl	801241c <__malloc_lock>
 8011f96:	4a21      	ldr	r2, [pc, #132]	; (801201c <_malloc_r+0xac>)
 8011f98:	6814      	ldr	r4, [r2, #0]
 8011f9a:	4621      	mov	r1, r4
 8011f9c:	b991      	cbnz	r1, 8011fc4 <_malloc_r+0x54>
 8011f9e:	4c20      	ldr	r4, [pc, #128]	; (8012020 <_malloc_r+0xb0>)
 8011fa0:	6823      	ldr	r3, [r4, #0]
 8011fa2:	b91b      	cbnz	r3, 8011fac <_malloc_r+0x3c>
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	f000 f97d 	bl	80122a4 <_sbrk_r>
 8011faa:	6020      	str	r0, [r4, #0]
 8011fac:	4629      	mov	r1, r5
 8011fae:	4630      	mov	r0, r6
 8011fb0:	f000 f978 	bl	80122a4 <_sbrk_r>
 8011fb4:	1c43      	adds	r3, r0, #1
 8011fb6:	d124      	bne.n	8012002 <_malloc_r+0x92>
 8011fb8:	230c      	movs	r3, #12
 8011fba:	6033      	str	r3, [r6, #0]
 8011fbc:	4630      	mov	r0, r6
 8011fbe:	f000 fa2e 	bl	801241e <__malloc_unlock>
 8011fc2:	e7e4      	b.n	8011f8e <_malloc_r+0x1e>
 8011fc4:	680b      	ldr	r3, [r1, #0]
 8011fc6:	1b5b      	subs	r3, r3, r5
 8011fc8:	d418      	bmi.n	8011ffc <_malloc_r+0x8c>
 8011fca:	2b0b      	cmp	r3, #11
 8011fcc:	d90f      	bls.n	8011fee <_malloc_r+0x7e>
 8011fce:	600b      	str	r3, [r1, #0]
 8011fd0:	50cd      	str	r5, [r1, r3]
 8011fd2:	18cc      	adds	r4, r1, r3
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f000 fa22 	bl	801241e <__malloc_unlock>
 8011fda:	f104 000b 	add.w	r0, r4, #11
 8011fde:	1d23      	adds	r3, r4, #4
 8011fe0:	f020 0007 	bic.w	r0, r0, #7
 8011fe4:	1ac3      	subs	r3, r0, r3
 8011fe6:	d0d3      	beq.n	8011f90 <_malloc_r+0x20>
 8011fe8:	425a      	negs	r2, r3
 8011fea:	50e2      	str	r2, [r4, r3]
 8011fec:	e7d0      	b.n	8011f90 <_malloc_r+0x20>
 8011fee:	428c      	cmp	r4, r1
 8011ff0:	684b      	ldr	r3, [r1, #4]
 8011ff2:	bf16      	itet	ne
 8011ff4:	6063      	strne	r3, [r4, #4]
 8011ff6:	6013      	streq	r3, [r2, #0]
 8011ff8:	460c      	movne	r4, r1
 8011ffa:	e7eb      	b.n	8011fd4 <_malloc_r+0x64>
 8011ffc:	460c      	mov	r4, r1
 8011ffe:	6849      	ldr	r1, [r1, #4]
 8012000:	e7cc      	b.n	8011f9c <_malloc_r+0x2c>
 8012002:	1cc4      	adds	r4, r0, #3
 8012004:	f024 0403 	bic.w	r4, r4, #3
 8012008:	42a0      	cmp	r0, r4
 801200a:	d005      	beq.n	8012018 <_malloc_r+0xa8>
 801200c:	1a21      	subs	r1, r4, r0
 801200e:	4630      	mov	r0, r6
 8012010:	f000 f948 	bl	80122a4 <_sbrk_r>
 8012014:	3001      	adds	r0, #1
 8012016:	d0cf      	beq.n	8011fb8 <_malloc_r+0x48>
 8012018:	6025      	str	r5, [r4, #0]
 801201a:	e7db      	b.n	8011fd4 <_malloc_r+0x64>
 801201c:	20000418 	.word	0x20000418
 8012020:	2000041c 	.word	0x2000041c

08012024 <__sfputc_r>:
 8012024:	6893      	ldr	r3, [r2, #8]
 8012026:	3b01      	subs	r3, #1
 8012028:	2b00      	cmp	r3, #0
 801202a:	b410      	push	{r4}
 801202c:	6093      	str	r3, [r2, #8]
 801202e:	da08      	bge.n	8012042 <__sfputc_r+0x1e>
 8012030:	6994      	ldr	r4, [r2, #24]
 8012032:	42a3      	cmp	r3, r4
 8012034:	db01      	blt.n	801203a <__sfputc_r+0x16>
 8012036:	290a      	cmp	r1, #10
 8012038:	d103      	bne.n	8012042 <__sfputc_r+0x1e>
 801203a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801203e:	f7fe bb65 	b.w	801070c <__swbuf_r>
 8012042:	6813      	ldr	r3, [r2, #0]
 8012044:	1c58      	adds	r0, r3, #1
 8012046:	6010      	str	r0, [r2, #0]
 8012048:	7019      	strb	r1, [r3, #0]
 801204a:	4608      	mov	r0, r1
 801204c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012050:	4770      	bx	lr

08012052 <__sfputs_r>:
 8012052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012054:	4606      	mov	r6, r0
 8012056:	460f      	mov	r7, r1
 8012058:	4614      	mov	r4, r2
 801205a:	18d5      	adds	r5, r2, r3
 801205c:	42ac      	cmp	r4, r5
 801205e:	d101      	bne.n	8012064 <__sfputs_r+0x12>
 8012060:	2000      	movs	r0, #0
 8012062:	e007      	b.n	8012074 <__sfputs_r+0x22>
 8012064:	463a      	mov	r2, r7
 8012066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801206a:	4630      	mov	r0, r6
 801206c:	f7ff ffda 	bl	8012024 <__sfputc_r>
 8012070:	1c43      	adds	r3, r0, #1
 8012072:	d1f3      	bne.n	801205c <__sfputs_r+0xa>
 8012074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012078 <_vfiprintf_r>:
 8012078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207c:	460c      	mov	r4, r1
 801207e:	b09d      	sub	sp, #116	; 0x74
 8012080:	4617      	mov	r7, r2
 8012082:	461d      	mov	r5, r3
 8012084:	4606      	mov	r6, r0
 8012086:	b118      	cbz	r0, 8012090 <_vfiprintf_r+0x18>
 8012088:	6983      	ldr	r3, [r0, #24]
 801208a:	b90b      	cbnz	r3, 8012090 <_vfiprintf_r+0x18>
 801208c:	f7ff fb34 	bl	80116f8 <__sinit>
 8012090:	4b7c      	ldr	r3, [pc, #496]	; (8012284 <_vfiprintf_r+0x20c>)
 8012092:	429c      	cmp	r4, r3
 8012094:	d158      	bne.n	8012148 <_vfiprintf_r+0xd0>
 8012096:	6874      	ldr	r4, [r6, #4]
 8012098:	89a3      	ldrh	r3, [r4, #12]
 801209a:	0718      	lsls	r0, r3, #28
 801209c:	d55e      	bpl.n	801215c <_vfiprintf_r+0xe4>
 801209e:	6923      	ldr	r3, [r4, #16]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d05b      	beq.n	801215c <_vfiprintf_r+0xe4>
 80120a4:	2300      	movs	r3, #0
 80120a6:	9309      	str	r3, [sp, #36]	; 0x24
 80120a8:	2320      	movs	r3, #32
 80120aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120ae:	2330      	movs	r3, #48	; 0x30
 80120b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120b4:	9503      	str	r5, [sp, #12]
 80120b6:	f04f 0b01 	mov.w	fp, #1
 80120ba:	46b8      	mov	r8, r7
 80120bc:	4645      	mov	r5, r8
 80120be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80120c2:	b10b      	cbz	r3, 80120c8 <_vfiprintf_r+0x50>
 80120c4:	2b25      	cmp	r3, #37	; 0x25
 80120c6:	d154      	bne.n	8012172 <_vfiprintf_r+0xfa>
 80120c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80120cc:	d00b      	beq.n	80120e6 <_vfiprintf_r+0x6e>
 80120ce:	4653      	mov	r3, sl
 80120d0:	463a      	mov	r2, r7
 80120d2:	4621      	mov	r1, r4
 80120d4:	4630      	mov	r0, r6
 80120d6:	f7ff ffbc 	bl	8012052 <__sfputs_r>
 80120da:	3001      	adds	r0, #1
 80120dc:	f000 80c2 	beq.w	8012264 <_vfiprintf_r+0x1ec>
 80120e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120e2:	4453      	add	r3, sl
 80120e4:	9309      	str	r3, [sp, #36]	; 0x24
 80120e6:	f898 3000 	ldrb.w	r3, [r8]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	f000 80ba 	beq.w	8012264 <_vfiprintf_r+0x1ec>
 80120f0:	2300      	movs	r3, #0
 80120f2:	f04f 32ff 	mov.w	r2, #4294967295
 80120f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120fa:	9304      	str	r3, [sp, #16]
 80120fc:	9307      	str	r3, [sp, #28]
 80120fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012102:	931a      	str	r3, [sp, #104]	; 0x68
 8012104:	46a8      	mov	r8, r5
 8012106:	2205      	movs	r2, #5
 8012108:	f818 1b01 	ldrb.w	r1, [r8], #1
 801210c:	485e      	ldr	r0, [pc, #376]	; (8012288 <_vfiprintf_r+0x210>)
 801210e:	f7f5 ff9f 	bl	8008050 <memchr>
 8012112:	9b04      	ldr	r3, [sp, #16]
 8012114:	bb78      	cbnz	r0, 8012176 <_vfiprintf_r+0xfe>
 8012116:	06d9      	lsls	r1, r3, #27
 8012118:	bf44      	itt	mi
 801211a:	2220      	movmi	r2, #32
 801211c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012120:	071a      	lsls	r2, r3, #28
 8012122:	bf44      	itt	mi
 8012124:	222b      	movmi	r2, #43	; 0x2b
 8012126:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801212a:	782a      	ldrb	r2, [r5, #0]
 801212c:	2a2a      	cmp	r2, #42	; 0x2a
 801212e:	d02a      	beq.n	8012186 <_vfiprintf_r+0x10e>
 8012130:	9a07      	ldr	r2, [sp, #28]
 8012132:	46a8      	mov	r8, r5
 8012134:	2000      	movs	r0, #0
 8012136:	250a      	movs	r5, #10
 8012138:	4641      	mov	r1, r8
 801213a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801213e:	3b30      	subs	r3, #48	; 0x30
 8012140:	2b09      	cmp	r3, #9
 8012142:	d969      	bls.n	8012218 <_vfiprintf_r+0x1a0>
 8012144:	b360      	cbz	r0, 80121a0 <_vfiprintf_r+0x128>
 8012146:	e024      	b.n	8012192 <_vfiprintf_r+0x11a>
 8012148:	4b50      	ldr	r3, [pc, #320]	; (801228c <_vfiprintf_r+0x214>)
 801214a:	429c      	cmp	r4, r3
 801214c:	d101      	bne.n	8012152 <_vfiprintf_r+0xda>
 801214e:	68b4      	ldr	r4, [r6, #8]
 8012150:	e7a2      	b.n	8012098 <_vfiprintf_r+0x20>
 8012152:	4b4f      	ldr	r3, [pc, #316]	; (8012290 <_vfiprintf_r+0x218>)
 8012154:	429c      	cmp	r4, r3
 8012156:	bf08      	it	eq
 8012158:	68f4      	ldreq	r4, [r6, #12]
 801215a:	e79d      	b.n	8012098 <_vfiprintf_r+0x20>
 801215c:	4621      	mov	r1, r4
 801215e:	4630      	mov	r0, r6
 8012160:	f7fe fb26 	bl	80107b0 <__swsetup_r>
 8012164:	2800      	cmp	r0, #0
 8012166:	d09d      	beq.n	80120a4 <_vfiprintf_r+0x2c>
 8012168:	f04f 30ff 	mov.w	r0, #4294967295
 801216c:	b01d      	add	sp, #116	; 0x74
 801216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012172:	46a8      	mov	r8, r5
 8012174:	e7a2      	b.n	80120bc <_vfiprintf_r+0x44>
 8012176:	4a44      	ldr	r2, [pc, #272]	; (8012288 <_vfiprintf_r+0x210>)
 8012178:	1a80      	subs	r0, r0, r2
 801217a:	fa0b f000 	lsl.w	r0, fp, r0
 801217e:	4318      	orrs	r0, r3
 8012180:	9004      	str	r0, [sp, #16]
 8012182:	4645      	mov	r5, r8
 8012184:	e7be      	b.n	8012104 <_vfiprintf_r+0x8c>
 8012186:	9a03      	ldr	r2, [sp, #12]
 8012188:	1d11      	adds	r1, r2, #4
 801218a:	6812      	ldr	r2, [r2, #0]
 801218c:	9103      	str	r1, [sp, #12]
 801218e:	2a00      	cmp	r2, #0
 8012190:	db01      	blt.n	8012196 <_vfiprintf_r+0x11e>
 8012192:	9207      	str	r2, [sp, #28]
 8012194:	e004      	b.n	80121a0 <_vfiprintf_r+0x128>
 8012196:	4252      	negs	r2, r2
 8012198:	f043 0302 	orr.w	r3, r3, #2
 801219c:	9207      	str	r2, [sp, #28]
 801219e:	9304      	str	r3, [sp, #16]
 80121a0:	f898 3000 	ldrb.w	r3, [r8]
 80121a4:	2b2e      	cmp	r3, #46	; 0x2e
 80121a6:	d10e      	bne.n	80121c6 <_vfiprintf_r+0x14e>
 80121a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80121ac:	2b2a      	cmp	r3, #42	; 0x2a
 80121ae:	d138      	bne.n	8012222 <_vfiprintf_r+0x1aa>
 80121b0:	9b03      	ldr	r3, [sp, #12]
 80121b2:	1d1a      	adds	r2, r3, #4
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	9203      	str	r2, [sp, #12]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	bfb8      	it	lt
 80121bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80121c0:	f108 0802 	add.w	r8, r8, #2
 80121c4:	9305      	str	r3, [sp, #20]
 80121c6:	4d33      	ldr	r5, [pc, #204]	; (8012294 <_vfiprintf_r+0x21c>)
 80121c8:	f898 1000 	ldrb.w	r1, [r8]
 80121cc:	2203      	movs	r2, #3
 80121ce:	4628      	mov	r0, r5
 80121d0:	f7f5 ff3e 	bl	8008050 <memchr>
 80121d4:	b140      	cbz	r0, 80121e8 <_vfiprintf_r+0x170>
 80121d6:	2340      	movs	r3, #64	; 0x40
 80121d8:	1b40      	subs	r0, r0, r5
 80121da:	fa03 f000 	lsl.w	r0, r3, r0
 80121de:	9b04      	ldr	r3, [sp, #16]
 80121e0:	4303      	orrs	r3, r0
 80121e2:	f108 0801 	add.w	r8, r8, #1
 80121e6:	9304      	str	r3, [sp, #16]
 80121e8:	f898 1000 	ldrb.w	r1, [r8]
 80121ec:	482a      	ldr	r0, [pc, #168]	; (8012298 <_vfiprintf_r+0x220>)
 80121ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121f2:	2206      	movs	r2, #6
 80121f4:	f108 0701 	add.w	r7, r8, #1
 80121f8:	f7f5 ff2a 	bl	8008050 <memchr>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d037      	beq.n	8012270 <_vfiprintf_r+0x1f8>
 8012200:	4b26      	ldr	r3, [pc, #152]	; (801229c <_vfiprintf_r+0x224>)
 8012202:	bb1b      	cbnz	r3, 801224c <_vfiprintf_r+0x1d4>
 8012204:	9b03      	ldr	r3, [sp, #12]
 8012206:	3307      	adds	r3, #7
 8012208:	f023 0307 	bic.w	r3, r3, #7
 801220c:	3308      	adds	r3, #8
 801220e:	9303      	str	r3, [sp, #12]
 8012210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012212:	444b      	add	r3, r9
 8012214:	9309      	str	r3, [sp, #36]	; 0x24
 8012216:	e750      	b.n	80120ba <_vfiprintf_r+0x42>
 8012218:	fb05 3202 	mla	r2, r5, r2, r3
 801221c:	2001      	movs	r0, #1
 801221e:	4688      	mov	r8, r1
 8012220:	e78a      	b.n	8012138 <_vfiprintf_r+0xc0>
 8012222:	2300      	movs	r3, #0
 8012224:	f108 0801 	add.w	r8, r8, #1
 8012228:	9305      	str	r3, [sp, #20]
 801222a:	4619      	mov	r1, r3
 801222c:	250a      	movs	r5, #10
 801222e:	4640      	mov	r0, r8
 8012230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012234:	3a30      	subs	r2, #48	; 0x30
 8012236:	2a09      	cmp	r2, #9
 8012238:	d903      	bls.n	8012242 <_vfiprintf_r+0x1ca>
 801223a:	2b00      	cmp	r3, #0
 801223c:	d0c3      	beq.n	80121c6 <_vfiprintf_r+0x14e>
 801223e:	9105      	str	r1, [sp, #20]
 8012240:	e7c1      	b.n	80121c6 <_vfiprintf_r+0x14e>
 8012242:	fb05 2101 	mla	r1, r5, r1, r2
 8012246:	2301      	movs	r3, #1
 8012248:	4680      	mov	r8, r0
 801224a:	e7f0      	b.n	801222e <_vfiprintf_r+0x1b6>
 801224c:	ab03      	add	r3, sp, #12
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	4622      	mov	r2, r4
 8012252:	4b13      	ldr	r3, [pc, #76]	; (80122a0 <_vfiprintf_r+0x228>)
 8012254:	a904      	add	r1, sp, #16
 8012256:	4630      	mov	r0, r6
 8012258:	f7fd fe14 	bl	800fe84 <_printf_float>
 801225c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012260:	4681      	mov	r9, r0
 8012262:	d1d5      	bne.n	8012210 <_vfiprintf_r+0x198>
 8012264:	89a3      	ldrh	r3, [r4, #12]
 8012266:	065b      	lsls	r3, r3, #25
 8012268:	f53f af7e 	bmi.w	8012168 <_vfiprintf_r+0xf0>
 801226c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801226e:	e77d      	b.n	801216c <_vfiprintf_r+0xf4>
 8012270:	ab03      	add	r3, sp, #12
 8012272:	9300      	str	r3, [sp, #0]
 8012274:	4622      	mov	r2, r4
 8012276:	4b0a      	ldr	r3, [pc, #40]	; (80122a0 <_vfiprintf_r+0x228>)
 8012278:	a904      	add	r1, sp, #16
 801227a:	4630      	mov	r0, r6
 801227c:	f7fe f8b8 	bl	80103f0 <_printf_i>
 8012280:	e7ec      	b.n	801225c <_vfiprintf_r+0x1e4>
 8012282:	bf00      	nop
 8012284:	08012530 	.word	0x08012530
 8012288:	0801266c 	.word	0x0801266c
 801228c:	08012550 	.word	0x08012550
 8012290:	08012510 	.word	0x08012510
 8012294:	08012672 	.word	0x08012672
 8012298:	08012676 	.word	0x08012676
 801229c:	0800fe85 	.word	0x0800fe85
 80122a0:	08012053 	.word	0x08012053

080122a4 <_sbrk_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	4c06      	ldr	r4, [pc, #24]	; (80122c0 <_sbrk_r+0x1c>)
 80122a8:	2300      	movs	r3, #0
 80122aa:	4605      	mov	r5, r0
 80122ac:	4608      	mov	r0, r1
 80122ae:	6023      	str	r3, [r4, #0]
 80122b0:	f7f8 ff92 	bl	800b1d8 <_sbrk>
 80122b4:	1c43      	adds	r3, r0, #1
 80122b6:	d102      	bne.n	80122be <_sbrk_r+0x1a>
 80122b8:	6823      	ldr	r3, [r4, #0]
 80122ba:	b103      	cbz	r3, 80122be <_sbrk_r+0x1a>
 80122bc:	602b      	str	r3, [r5, #0]
 80122be:	bd38      	pop	{r3, r4, r5, pc}
 80122c0:	200007b0 	.word	0x200007b0

080122c4 <__sread>:
 80122c4:	b510      	push	{r4, lr}
 80122c6:	460c      	mov	r4, r1
 80122c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122cc:	f000 f8a8 	bl	8012420 <_read_r>
 80122d0:	2800      	cmp	r0, #0
 80122d2:	bfab      	itete	ge
 80122d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122d6:	89a3      	ldrhlt	r3, [r4, #12]
 80122d8:	181b      	addge	r3, r3, r0
 80122da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122de:	bfac      	ite	ge
 80122e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80122e2:	81a3      	strhlt	r3, [r4, #12]
 80122e4:	bd10      	pop	{r4, pc}

080122e6 <__swrite>:
 80122e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ea:	461f      	mov	r7, r3
 80122ec:	898b      	ldrh	r3, [r1, #12]
 80122ee:	05db      	lsls	r3, r3, #23
 80122f0:	4605      	mov	r5, r0
 80122f2:	460c      	mov	r4, r1
 80122f4:	4616      	mov	r6, r2
 80122f6:	d505      	bpl.n	8012304 <__swrite+0x1e>
 80122f8:	2302      	movs	r3, #2
 80122fa:	2200      	movs	r2, #0
 80122fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012300:	f000 f868 	bl	80123d4 <_lseek_r>
 8012304:	89a3      	ldrh	r3, [r4, #12]
 8012306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801230a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801230e:	81a3      	strh	r3, [r4, #12]
 8012310:	4632      	mov	r2, r6
 8012312:	463b      	mov	r3, r7
 8012314:	4628      	mov	r0, r5
 8012316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801231a:	f000 b817 	b.w	801234c <_write_r>

0801231e <__sseek>:
 801231e:	b510      	push	{r4, lr}
 8012320:	460c      	mov	r4, r1
 8012322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012326:	f000 f855 	bl	80123d4 <_lseek_r>
 801232a:	1c43      	adds	r3, r0, #1
 801232c:	89a3      	ldrh	r3, [r4, #12]
 801232e:	bf15      	itete	ne
 8012330:	6560      	strne	r0, [r4, #84]	; 0x54
 8012332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801233a:	81a3      	strheq	r3, [r4, #12]
 801233c:	bf18      	it	ne
 801233e:	81a3      	strhne	r3, [r4, #12]
 8012340:	bd10      	pop	{r4, pc}

08012342 <__sclose>:
 8012342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012346:	f000 b813 	b.w	8012370 <_close_r>
	...

0801234c <_write_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4c07      	ldr	r4, [pc, #28]	; (801236c <_write_r+0x20>)
 8012350:	4605      	mov	r5, r0
 8012352:	4608      	mov	r0, r1
 8012354:	4611      	mov	r1, r2
 8012356:	2200      	movs	r2, #0
 8012358:	6022      	str	r2, [r4, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	f7f8 feeb 	bl	800b136 <_write>
 8012360:	1c43      	adds	r3, r0, #1
 8012362:	d102      	bne.n	801236a <_write_r+0x1e>
 8012364:	6823      	ldr	r3, [r4, #0]
 8012366:	b103      	cbz	r3, 801236a <_write_r+0x1e>
 8012368:	602b      	str	r3, [r5, #0]
 801236a:	bd38      	pop	{r3, r4, r5, pc}
 801236c:	200007b0 	.word	0x200007b0

08012370 <_close_r>:
 8012370:	b538      	push	{r3, r4, r5, lr}
 8012372:	4c06      	ldr	r4, [pc, #24]	; (801238c <_close_r+0x1c>)
 8012374:	2300      	movs	r3, #0
 8012376:	4605      	mov	r5, r0
 8012378:	4608      	mov	r0, r1
 801237a:	6023      	str	r3, [r4, #0]
 801237c:	f7f8 fef7 	bl	800b16e <_close>
 8012380:	1c43      	adds	r3, r0, #1
 8012382:	d102      	bne.n	801238a <_close_r+0x1a>
 8012384:	6823      	ldr	r3, [r4, #0]
 8012386:	b103      	cbz	r3, 801238a <_close_r+0x1a>
 8012388:	602b      	str	r3, [r5, #0]
 801238a:	bd38      	pop	{r3, r4, r5, pc}
 801238c:	200007b0 	.word	0x200007b0

08012390 <_fstat_r>:
 8012390:	b538      	push	{r3, r4, r5, lr}
 8012392:	4c07      	ldr	r4, [pc, #28]	; (80123b0 <_fstat_r+0x20>)
 8012394:	2300      	movs	r3, #0
 8012396:	4605      	mov	r5, r0
 8012398:	4608      	mov	r0, r1
 801239a:	4611      	mov	r1, r2
 801239c:	6023      	str	r3, [r4, #0]
 801239e:	f7f8 fef2 	bl	800b186 <_fstat>
 80123a2:	1c43      	adds	r3, r0, #1
 80123a4:	d102      	bne.n	80123ac <_fstat_r+0x1c>
 80123a6:	6823      	ldr	r3, [r4, #0]
 80123a8:	b103      	cbz	r3, 80123ac <_fstat_r+0x1c>
 80123aa:	602b      	str	r3, [r5, #0]
 80123ac:	bd38      	pop	{r3, r4, r5, pc}
 80123ae:	bf00      	nop
 80123b0:	200007b0 	.word	0x200007b0

080123b4 <_isatty_r>:
 80123b4:	b538      	push	{r3, r4, r5, lr}
 80123b6:	4c06      	ldr	r4, [pc, #24]	; (80123d0 <_isatty_r+0x1c>)
 80123b8:	2300      	movs	r3, #0
 80123ba:	4605      	mov	r5, r0
 80123bc:	4608      	mov	r0, r1
 80123be:	6023      	str	r3, [r4, #0]
 80123c0:	f7f8 fef1 	bl	800b1a6 <_isatty>
 80123c4:	1c43      	adds	r3, r0, #1
 80123c6:	d102      	bne.n	80123ce <_isatty_r+0x1a>
 80123c8:	6823      	ldr	r3, [r4, #0]
 80123ca:	b103      	cbz	r3, 80123ce <_isatty_r+0x1a>
 80123cc:	602b      	str	r3, [r5, #0]
 80123ce:	bd38      	pop	{r3, r4, r5, pc}
 80123d0:	200007b0 	.word	0x200007b0

080123d4 <_lseek_r>:
 80123d4:	b538      	push	{r3, r4, r5, lr}
 80123d6:	4c07      	ldr	r4, [pc, #28]	; (80123f4 <_lseek_r+0x20>)
 80123d8:	4605      	mov	r5, r0
 80123da:	4608      	mov	r0, r1
 80123dc:	4611      	mov	r1, r2
 80123de:	2200      	movs	r2, #0
 80123e0:	6022      	str	r2, [r4, #0]
 80123e2:	461a      	mov	r2, r3
 80123e4:	f7f8 feea 	bl	800b1bc <_lseek>
 80123e8:	1c43      	adds	r3, r0, #1
 80123ea:	d102      	bne.n	80123f2 <_lseek_r+0x1e>
 80123ec:	6823      	ldr	r3, [r4, #0]
 80123ee:	b103      	cbz	r3, 80123f2 <_lseek_r+0x1e>
 80123f0:	602b      	str	r3, [r5, #0]
 80123f2:	bd38      	pop	{r3, r4, r5, pc}
 80123f4:	200007b0 	.word	0x200007b0

080123f8 <__ascii_mbtowc>:
 80123f8:	b082      	sub	sp, #8
 80123fa:	b901      	cbnz	r1, 80123fe <__ascii_mbtowc+0x6>
 80123fc:	a901      	add	r1, sp, #4
 80123fe:	b142      	cbz	r2, 8012412 <__ascii_mbtowc+0x1a>
 8012400:	b14b      	cbz	r3, 8012416 <__ascii_mbtowc+0x1e>
 8012402:	7813      	ldrb	r3, [r2, #0]
 8012404:	600b      	str	r3, [r1, #0]
 8012406:	7812      	ldrb	r2, [r2, #0]
 8012408:	1c10      	adds	r0, r2, #0
 801240a:	bf18      	it	ne
 801240c:	2001      	movne	r0, #1
 801240e:	b002      	add	sp, #8
 8012410:	4770      	bx	lr
 8012412:	4610      	mov	r0, r2
 8012414:	e7fb      	b.n	801240e <__ascii_mbtowc+0x16>
 8012416:	f06f 0001 	mvn.w	r0, #1
 801241a:	e7f8      	b.n	801240e <__ascii_mbtowc+0x16>

0801241c <__malloc_lock>:
 801241c:	4770      	bx	lr

0801241e <__malloc_unlock>:
 801241e:	4770      	bx	lr

08012420 <_read_r>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	4c07      	ldr	r4, [pc, #28]	; (8012440 <_read_r+0x20>)
 8012424:	4605      	mov	r5, r0
 8012426:	4608      	mov	r0, r1
 8012428:	4611      	mov	r1, r2
 801242a:	2200      	movs	r2, #0
 801242c:	6022      	str	r2, [r4, #0]
 801242e:	461a      	mov	r2, r3
 8012430:	f7f8 fe64 	bl	800b0fc <_read>
 8012434:	1c43      	adds	r3, r0, #1
 8012436:	d102      	bne.n	801243e <_read_r+0x1e>
 8012438:	6823      	ldr	r3, [r4, #0]
 801243a:	b103      	cbz	r3, 801243e <_read_r+0x1e>
 801243c:	602b      	str	r3, [r5, #0]
 801243e:	bd38      	pop	{r3, r4, r5, pc}
 8012440:	200007b0 	.word	0x200007b0

08012444 <__ascii_wctomb>:
 8012444:	b149      	cbz	r1, 801245a <__ascii_wctomb+0x16>
 8012446:	2aff      	cmp	r2, #255	; 0xff
 8012448:	bf85      	ittet	hi
 801244a:	238a      	movhi	r3, #138	; 0x8a
 801244c:	6003      	strhi	r3, [r0, #0]
 801244e:	700a      	strbls	r2, [r1, #0]
 8012450:	f04f 30ff 	movhi.w	r0, #4294967295
 8012454:	bf98      	it	ls
 8012456:	2001      	movls	r0, #1
 8012458:	4770      	bx	lr
 801245a:	4608      	mov	r0, r1
 801245c:	4770      	bx	lr
	...

08012460 <_init>:
 8012460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012462:	bf00      	nop
 8012464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012466:	bc08      	pop	{r3}
 8012468:	469e      	mov	lr, r3
 801246a:	4770      	bx	lr

0801246c <_fini>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	bf00      	nop
 8012470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012472:	bc08      	pop	{r3}
 8012474:	469e      	mov	lr, r3
 8012476:	4770      	bx	lr
