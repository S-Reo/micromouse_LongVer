
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         00010948  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000490  08018948  08018948  00028948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08018dd8  08018dd8  0003025c  2**0
                  CONTENTS
  5 .ARM          00000008  08018dd8  08018dd8  00028dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08018de0  08018de0  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08018de0  08018de0  00028de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08018de4  08018de4  00028de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000025c  20000000  08018de8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004e24  20000260  08019044  00030260  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005084  08019044  00035084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014996  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002ce2  00000000  00000000  00044c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014d8  00000000  00000000  00047908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001380  00000000  00000000  00048de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00021b3e  00000000  00000000  0004a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f5dd  00000000  00000000  0006bc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c8657  00000000  00000000  0007b27b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001438d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006528  00000000  00000000  00143950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000260 	.word	0x20000260
 800801c:	00000000 	.word	0x00000000
 8008020:	08018930 	.word	0x08018930

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000264 	.word	0x20000264
 800803c:	08018930 	.word	0x08018930

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Side_Wall_Control>:
float R_velocity, L_velocity;
float Target_R_velo, Target_L_velo;
float wall_target_error;

//壁制御
void Side_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b089      	sub	sp, #36	; 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8008dc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8008dc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8008dca:	edc7 1a02 	vstr	s3, [r7, #8]
 8008dce:	ed87 2a01 	vstr	s4, [r7, #4]
 8008dd2:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8008de2:	4b4c      	ldr	r3, [pc, #304]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d107      	bne.n	8008dfa <Side_Wall_Control+0x42>
		ei =0;
 8008dea:	4b4b      	ldr	r3, [pc, #300]	; (8008f18 <Side_Wall_Control+0x160>)
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008df2:	4b4a      	ldr	r3, [pc, #296]	; (8008f1c <Side_Wall_Control+0x164>)
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008dfa:	4b46      	ldr	r3, [pc, #280]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	701a      	strb	r2, [r3, #0]

	e = wall_target_error + target - now;//r - l
 8008e00:	4b47      	ldr	r3, [pc, #284]	; (8008f20 <Side_Wall_Control+0x168>)
 8008e02:	ed93 7a00 	vldr	s14, [r3]
 8008e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 8008e1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e26:	4b3c      	ldr	r3, [pc, #240]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e28:	edd3 7a00 	vldr	s15, [r3]
 8008e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e30:	4b39      	ldr	r3, [pc, #228]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e32:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008e36:	4b39      	ldr	r3, [pc, #228]	; (8008f1c <Side_Wall_Control+0x164>)
 8008e38:	edd3 7a00 	vldr	s15, [r3]
 8008e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e40:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4c:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8008e50:	4a32      	ldr	r2, [pc, #200]	; (8008f1c <Side_Wall_Control+0x164>)
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	6013      	str	r3, [r2, #0]

	R_wall =  (int16_t)round(KP*e + KI*ei + KD*ed);
 8008e56:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e62:	4b2d      	ldr	r3, [pc, #180]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e64:	edd3 6a00 	vldr	s13, [r3]
 8008e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e74:	edd7 6a00 	vldr	s13, [r7]
 8008e78:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e84:	ee17 0a90 	vmov	r0, s15
 8008e88:	f7ff fa96 	bl	80083b8 <__aeabi_f2d>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	ec44 3b10 	vmov	d0, r3, r4
 8008e94:	f00d f944 	bl	8016120 <round>
 8008e98:	ec54 3b10 	vmov	r3, r4, d0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	f7ff fd92 	bl	80089c8 <__aeabi_d2iz>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	b21a      	sxth	r2, r3
 8008ea8:	4b1e      	ldr	r3, [pc, #120]	; (8008f24 <Side_Wall_Control+0x16c>)
 8008eaa:	801a      	strh	r2, [r3, #0]
	L_wall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008eac:	ed97 7a02 	vldr	s14, [r7, #8]
 8008eb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8008eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eb8:	4b17      	ldr	r3, [pc, #92]	; (8008f18 <Side_Wall_Control+0x160>)
 8008eba:	edd3 6a00 	vldr	s13, [r3]
 8008ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008eca:	edd7 6a00 	vldr	s13, [r7]
 8008ece:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eda:	ee17 0a90 	vmov	r0, s15
 8008ede:	f7ff fa6b 	bl	80083b8 <__aeabi_f2d>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	ec44 3b10 	vmov	d0, r3, r4
 8008eea:	f00d f919 	bl	8016120 <round>
 8008eee:	ec54 3b10 	vmov	r3, r4, d0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	f7ff fd67 	bl	80089c8 <__aeabi_d2iz>
 8008efa:	4603      	mov	r3, r0
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	425b      	negs	r3, r3
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	b21a      	sxth	r2, r3
 8008f06:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <Side_Wall_Control+0x170>)
 8008f08:	801a      	strh	r2, [r3, #0]

}
 8008f0a:	bf00      	nop
 8008f0c:	3724      	adds	r7, #36	; 0x24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd90      	pop	{r4, r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2000027c 	.word	0x2000027c
 8008f18:	20000280 	.word	0x20000280
 8008f1c:	20000284 	.word	0x20000284
 8008f20:	2000438c 	.word	0x2000438c
 8008f24:	2000438a 	.word	0x2000438a
 8008f28:	200043a0 	.word	0x200043a0

08008f2c <Left_Wall_Control>:

void Left_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008f2c:	b590      	push	{r4, r7, lr}
 8008f2e:	b089      	sub	sp, #36	; 0x24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	ed87 0a05 	vstr	s0, [r7, #20]
 8008f36:	edc7 0a04 	vstr	s1, [r7, #16]
 8008f3a:	ed87 1a03 	vstr	s2, [r7, #12]
 8008f3e:	edc7 1a02 	vstr	s3, [r7, #8]
 8008f42:	ed87 2a01 	vstr	s4, [r7, #4]
 8008f46:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	f04f 0300 	mov.w	r3, #0
 8008f54:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8008f56:	4b51      	ldr	r3, [pc, #324]	; (800909c <Left_Wall_Control+0x170>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d107      	bne.n	8008f6e <Left_Wall_Control+0x42>
		ei =0;
 8008f5e:	4b50      	ldr	r3, [pc, #320]	; (80090a0 <Left_Wall_Control+0x174>)
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008f66:	4b4f      	ldr	r3, [pc, #316]	; (80090a4 <Left_Wall_Control+0x178>)
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008f6e:	4b4b      	ldr	r3, [pc, #300]	; (800909c <Left_Wall_Control+0x170>)
 8008f70:	2201      	movs	r2, #1
 8008f72:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 8008f74:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f78:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f80:	ee17 0a90 	vmov	r0, s15
 8008f84:	f7ff fa18 	bl	80083b8 <__aeabi_f2d>
 8008f88:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008f8c:	4b46      	ldr	r3, [pc, #280]	; (80090a8 <Left_Wall_Control+0x17c>)
 8008f8e:	f7ff fa6b 	bl	8008468 <__aeabi_dmul>
 8008f92:	4603      	mov	r3, r0
 8008f94:	460c      	mov	r4, r1
 8008f96:	4618      	mov	r0, r3
 8008f98:	4621      	mov	r1, r4
 8008f9a:	f7ff fd3d 	bl	8008a18 <__aeabi_d2f>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	61fb      	str	r3, [r7, #28]
	ei += e * T;
 8008fa2:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8008faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fae:	4b3c      	ldr	r3, [pc, #240]	; (80090a0 <Left_Wall_Control+0x174>)
 8008fb0:	edd3 7a00 	vldr	s15, [r3]
 8008fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb8:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <Left_Wall_Control+0x174>)
 8008fba:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008fbe:	4b39      	ldr	r3, [pc, #228]	; (80090a4 <Left_Wall_Control+0x178>)
 8008fc0:	edd3 7a00 	vldr	s15, [r3]
 8008fc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fc8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008fcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8008fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd4:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8008fd8:	4a32      	ldr	r2, [pc, #200]	; (80090a4 <Left_Wall_Control+0x178>)
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	6013      	str	r3, [r2, #0]
	L_leftwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008fde:	ed97 7a02 	vldr	s14, [r7, #8]
 8008fe2:	edd7 7a07 	vldr	s15, [r7, #28]
 8008fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fea:	4b2d      	ldr	r3, [pc, #180]	; (80090a0 <Left_Wall_Control+0x174>)
 8008fec:	edd3 6a00 	vldr	s13, [r3]
 8008ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ffc:	edd7 6a00 	vldr	s13, [r7]
 8009000:	edd7 7a06 	vldr	s15, [r7, #24]
 8009004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800900c:	ee17 0a90 	vmov	r0, s15
 8009010:	f7ff f9d2 	bl	80083b8 <__aeabi_f2d>
 8009014:	4603      	mov	r3, r0
 8009016:	460c      	mov	r4, r1
 8009018:	ec44 3b10 	vmov	d0, r3, r4
 800901c:	f00d f880 	bl	8016120 <round>
 8009020:	ec54 3b10 	vmov	r3, r4, d0
 8009024:	4618      	mov	r0, r3
 8009026:	4621      	mov	r1, r4
 8009028:	f7ff fcce 	bl	80089c8 <__aeabi_d2iz>
 800902c:	4603      	mov	r3, r0
 800902e:	b21b      	sxth	r3, r3
 8009030:	b29b      	uxth	r3, r3
 8009032:	425b      	negs	r3, r3
 8009034:	b29b      	uxth	r3, r3
 8009036:	b21a      	sxth	r2, r3
 8009038:	4b1c      	ldr	r3, [pc, #112]	; (80090ac <Left_Wall_Control+0x180>)
 800903a:	801a      	strh	r2, [r3, #0]
	R_leftwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 800903c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009040:	edd7 7a07 	vldr	s15, [r7, #28]
 8009044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009048:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <Left_Wall_Control+0x174>)
 800904a:	edd3 6a00 	vldr	s13, [r3]
 800904e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800905a:	edd7 6a00 	vldr	s13, [r7]
 800905e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800906a:	ee17 0a90 	vmov	r0, s15
 800906e:	f7ff f9a3 	bl	80083b8 <__aeabi_f2d>
 8009072:	4603      	mov	r3, r0
 8009074:	460c      	mov	r4, r1
 8009076:	ec44 3b10 	vmov	d0, r3, r4
 800907a:	f00d f851 	bl	8016120 <round>
 800907e:	ec54 3b10 	vmov	r3, r4, d0
 8009082:	4618      	mov	r0, r3
 8009084:	4621      	mov	r1, r4
 8009086:	f7ff fc9f 	bl	80089c8 <__aeabi_d2iz>
 800908a:	4603      	mov	r3, r0
 800908c:	b21a      	sxth	r2, r3
 800908e:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <Left_Wall_Control+0x184>)
 8009090:	801a      	strh	r2, [r3, #0]
}
 8009092:	bf00      	nop
 8009094:	3724      	adds	r7, #36	; 0x24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd90      	pop	{r4, r7, pc}
 800909a:	bf00      	nop
 800909c:	2000027c 	.word	0x2000027c
 80090a0:	20000288 	.word	0x20000288
 80090a4:	2000028c 	.word	0x2000028c
 80090a8:	3ff33333 	.word	0x3ff33333
 80090ac:	20004386 	.word	0x20004386
 80090b0:	200043ac 	.word	0x200043ac

080090b4 <Right_Wall_Control>:

void Right_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b089      	sub	sp, #36	; 0x24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80090be:	edc7 0a04 	vstr	s1, [r7, #16]
 80090c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80090c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80090ca:	ed87 2a01 	vstr	s4, [r7, #4]
 80090ce:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80090d2:	f04f 0300 	mov.w	r3, #0
 80090d6:	61fb      	str	r3, [r7, #28]
 80090d8:	f04f 0300 	mov.w	r3, #0
 80090dc:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80090de:	4b51      	ldr	r3, [pc, #324]	; (8009224 <Right_Wall_Control+0x170>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d107      	bne.n	80090f6 <Right_Wall_Control+0x42>
		ei =0;
 80090e6:	4b50      	ldr	r3, [pc, #320]	; (8009228 <Right_Wall_Control+0x174>)
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80090ee:	4b4f      	ldr	r3, [pc, #316]	; (800922c <Right_Wall_Control+0x178>)
 80090f0:	f04f 0200 	mov.w	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80090f6:	4b4b      	ldr	r3, [pc, #300]	; (8009224 <Right_Wall_Control+0x170>)
 80090f8:	2201      	movs	r2, #1
 80090fa:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 80090fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8009100:	edd7 7a04 	vldr	s15, [r7, #16]
 8009104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009108:	ee17 0a90 	vmov	r0, s15
 800910c:	f7ff f954 	bl	80083b8 <__aeabi_f2d>
 8009110:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8009114:	4b46      	ldr	r3, [pc, #280]	; (8009230 <Right_Wall_Control+0x17c>)
 8009116:	f7ff f9a7 	bl	8008468 <__aeabi_dmul>
 800911a:	4603      	mov	r3, r0
 800911c:	460c      	mov	r4, r1
 800911e:	4618      	mov	r0, r3
 8009120:	4621      	mov	r1, r4
 8009122:	f7ff fc79 	bl	8008a18 <__aeabi_d2f>
 8009126:	4603      	mov	r3, r0
 8009128:	61fb      	str	r3, [r7, #28]
	ei += e * T;
 800912a:	ed97 7a07 	vldr	s14, [r7, #28]
 800912e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009136:	4b3c      	ldr	r3, [pc, #240]	; (8009228 <Right_Wall_Control+0x174>)
 8009138:	edd3 7a00 	vldr	s15, [r3]
 800913c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009140:	4b39      	ldr	r3, [pc, #228]	; (8009228 <Right_Wall_Control+0x174>)
 8009142:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8009146:	4b39      	ldr	r3, [pc, #228]	; (800922c <Right_Wall_Control+0x178>)
 8009148:	edd3 7a00 	vldr	s15, [r3]
 800914c:	ed97 7a07 	vldr	s14, [r7, #28]
 8009150:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009154:	ed97 7a03 	vldr	s14, [r7, #12]
 8009158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800915c:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8009160:	4a32      	ldr	r2, [pc, #200]	; (800922c <Right_Wall_Control+0x178>)
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	6013      	str	r3, [r2, #0]
	L_rightwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009166:	ed97 7a02 	vldr	s14, [r7, #8]
 800916a:	edd7 7a07 	vldr	s15, [r7, #28]
 800916e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009172:	4b2d      	ldr	r3, [pc, #180]	; (8009228 <Right_Wall_Control+0x174>)
 8009174:	edd3 6a00 	vldr	s13, [r3]
 8009178:	edd7 7a01 	vldr	s15, [r7, #4]
 800917c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009184:	edd7 6a00 	vldr	s13, [r7]
 8009188:	edd7 7a06 	vldr	s15, [r7, #24]
 800918c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009194:	ee17 0a90 	vmov	r0, s15
 8009198:	f7ff f90e 	bl	80083b8 <__aeabi_f2d>
 800919c:	4603      	mov	r3, r0
 800919e:	460c      	mov	r4, r1
 80091a0:	ec44 3b10 	vmov	d0, r3, r4
 80091a4:	f00c ffbc 	bl	8016120 <round>
 80091a8:	ec54 3b10 	vmov	r3, r4, d0
 80091ac:	4618      	mov	r0, r3
 80091ae:	4621      	mov	r1, r4
 80091b0:	f7ff fc0a 	bl	80089c8 <__aeabi_d2iz>
 80091b4:	4603      	mov	r3, r0
 80091b6:	b21a      	sxth	r2, r3
 80091b8:	4b1e      	ldr	r3, [pc, #120]	; (8009234 <Right_Wall_Control+0x180>)
 80091ba:	801a      	strh	r2, [r3, #0]
	R_rightwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 80091bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80091c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80091c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091c8:	4b17      	ldr	r3, [pc, #92]	; (8009228 <Right_Wall_Control+0x174>)
 80091ca:	edd3 6a00 	vldr	s13, [r3]
 80091ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80091d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091da:	edd7 6a00 	vldr	s13, [r7]
 80091de:	edd7 7a06 	vldr	s15, [r7, #24]
 80091e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091ea:	ee17 0a90 	vmov	r0, s15
 80091ee:	f7ff f8e3 	bl	80083b8 <__aeabi_f2d>
 80091f2:	4603      	mov	r3, r0
 80091f4:	460c      	mov	r4, r1
 80091f6:	ec44 3b10 	vmov	d0, r3, r4
 80091fa:	f00c ff91 	bl	8016120 <round>
 80091fe:	ec54 3b10 	vmov	r3, r4, d0
 8009202:	4618      	mov	r0, r3
 8009204:	4621      	mov	r1, r4
 8009206:	f7ff fbdf 	bl	80089c8 <__aeabi_d2iz>
 800920a:	4603      	mov	r3, r0
 800920c:	b21b      	sxth	r3, r3
 800920e:	b29b      	uxth	r3, r3
 8009210:	425b      	negs	r3, r3
 8009212:	b29b      	uxth	r3, r3
 8009214:	b21a      	sxth	r2, r3
 8009216:	4b08      	ldr	r3, [pc, #32]	; (8009238 <Right_Wall_Control+0x184>)
 8009218:	801a      	strh	r2, [r3, #0]
}
 800921a:	bf00      	nop
 800921c:	3724      	adds	r7, #36	; 0x24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd90      	pop	{r4, r7, pc}
 8009222:	bf00      	nop
 8009224:	2000027c 	.word	0x2000027c
 8009228:	20000290 	.word	0x20000290
 800922c:	20000294 	.word	0x20000294
 8009230:	3ff33333 	.word	0x3ff33333
 8009234:	20004378 	.word	0x20004378
 8009238:	20004394 	.word	0x20004394

0800923c <Velocity_Control>:

//速度制御
void Velocity_Control(float target, float now, float T, float KP, float KI, float KD){ //TIM3,4
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b089      	sub	sp, #36	; 0x24
 8009240:	af00      	add	r7, sp, #0
 8009242:	ed87 0a05 	vstr	s0, [r7, #20]
 8009246:	edc7 0a04 	vstr	s1, [r7, #16]
 800924a:	ed87 1a03 	vstr	s2, [r7, #12]
 800924e:	edc7 1a02 	vstr	s3, [r7, #8]
 8009252:	ed87 2a01 	vstr	s4, [r7, #4]
 8009256:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	61fb      	str	r3, [r7, #28]
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8009266:	4b47      	ldr	r3, [pc, #284]	; (8009384 <Velocity_Control+0x148>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d107      	bne.n	800927e <Velocity_Control+0x42>
		ei =0;
 800926e:	4b46      	ldr	r3, [pc, #280]	; (8009388 <Velocity_Control+0x14c>)
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8009276:	4b45      	ldr	r3, [pc, #276]	; (800938c <Velocity_Control+0x150>)
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 800927e:	4b41      	ldr	r3, [pc, #260]	; (8009384 <Velocity_Control+0x148>)
 8009280:	2201      	movs	r2, #1
 8009282:	701a      	strb	r2, [r3, #0]
	e = target - now;
 8009284:	ed97 7a05 	vldr	s14, [r7, #20]
 8009288:	edd7 7a04 	vldr	s15, [r7, #16]
 800928c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009290:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 8009294:	ed97 7a07 	vldr	s14, [r7, #28]
 8009298:	edd7 7a03 	vldr	s15, [r7, #12]
 800929c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092a0:	4b39      	ldr	r3, [pc, #228]	; (8009388 <Velocity_Control+0x14c>)
 80092a2:	edd3 7a00 	vldr	s15, [r3]
 80092a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092aa:	4b37      	ldr	r3, [pc, #220]	; (8009388 <Velocity_Control+0x14c>)
 80092ac:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 80092b0:	4b36      	ldr	r3, [pc, #216]	; (800938c <Velocity_Control+0x150>)
 80092b2:	edd3 7a00 	vldr	s15, [r3]
 80092b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80092ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80092be:	ed97 7a03 	vldr	s14, [r7, #12]
 80092c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c6:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 80092ca:	4a30      	ldr	r2, [pc, #192]	; (800938c <Velocity_Control+0x150>)
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	6013      	str	r3, [r2, #0]

    //o PID制御して、PWMの出力に反映
	R_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80092d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80092d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80092d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092dc:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <Velocity_Control+0x14c>)
 80092de:	edd3 6a00 	vldr	s13, [r3]
 80092e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80092e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092ee:	edd7 6a00 	vldr	s13, [r7]
 80092f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80092f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092fe:	ee17 0a90 	vmov	r0, s15
 8009302:	f7ff f859 	bl	80083b8 <__aeabi_f2d>
 8009306:	4603      	mov	r3, r0
 8009308:	460c      	mov	r4, r1
 800930a:	ec44 3b10 	vmov	d0, r3, r4
 800930e:	f00c ff07 	bl	8016120 <round>
 8009312:	ec54 3b10 	vmov	r3, r4, d0
 8009316:	4618      	mov	r0, r3
 8009318:	4621      	mov	r1, r4
 800931a:	f7ff fb55 	bl	80089c8 <__aeabi_d2iz>
 800931e:	4603      	mov	r3, r0
 8009320:	b21a      	sxth	r2, r3
 8009322:	4b1b      	ldr	r3, [pc, #108]	; (8009390 <Velocity_Control+0x154>)
 8009324:	801a      	strh	r2, [r3, #0]
	L_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009326:	ed97 7a02 	vldr	s14, [r7, #8]
 800932a:	edd7 7a07 	vldr	s15, [r7, #28]
 800932e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <Velocity_Control+0x14c>)
 8009334:	edd3 6a00 	vldr	s13, [r3]
 8009338:	edd7 7a01 	vldr	s15, [r7, #4]
 800933c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009344:	edd7 6a00 	vldr	s13, [r7]
 8009348:	edd7 7a06 	vldr	s15, [r7, #24]
 800934c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009354:	ee17 0a90 	vmov	r0, s15
 8009358:	f7ff f82e 	bl	80083b8 <__aeabi_f2d>
 800935c:	4603      	mov	r3, r0
 800935e:	460c      	mov	r4, r1
 8009360:	ec44 3b10 	vmov	d0, r3, r4
 8009364:	f00c fedc 	bl	8016120 <round>
 8009368:	ec54 3b10 	vmov	r3, r4, d0
 800936c:	4618      	mov	r0, r3
 800936e:	4621      	mov	r1, r4
 8009370:	f7ff fb2a 	bl	80089c8 <__aeabi_d2iz>
 8009374:	4603      	mov	r3, r0
 8009376:	b21a      	sxth	r2, r3
 8009378:	4b06      	ldr	r3, [pc, #24]	; (8009394 <Velocity_Control+0x158>)
 800937a:	801a      	strh	r2, [r3, #0]

	//o代入は個でよさそう
}
 800937c:	bf00      	nop
 800937e:	3724      	adds	r7, #36	; 0x24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd90      	pop	{r4, r7, pc}
 8009384:	2000027c 	.word	0x2000027c
 8009388:	20000298 	.word	0x20000298
 800938c:	2000029c 	.word	0x2000029c
 8009390:	20004390 	.word	0x20004390
 8009394:	20004384 	.word	0x20004384

08009398 <Right_Velo_Control>:

void Right_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b089      	sub	sp, #36	; 0x24
 800939c:	af00      	add	r7, sp, #0
 800939e:	ed87 0a05 	vstr	s0, [r7, #20]
 80093a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80093a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80093aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80093ae:	ed87 2a01 	vstr	s4, [r7, #4]
 80093b2:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
 80093bc:	f04f 0300 	mov.w	r3, #0
 80093c0:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80093c2:	4b32      	ldr	r3, [pc, #200]	; (800948c <Right_Velo_Control+0xf4>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d107      	bne.n	80093da <Right_Velo_Control+0x42>
		ei =0;
 80093ca:	4b31      	ldr	r3, [pc, #196]	; (8009490 <Right_Velo_Control+0xf8>)
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80093d2:	4b30      	ldr	r3, [pc, #192]	; (8009494 <Right_Velo_Control+0xfc>)
 80093d4:	f04f 0200 	mov.w	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80093da:	4b2c      	ldr	r3, [pc, #176]	; (800948c <Right_Velo_Control+0xf4>)
 80093dc:	2201      	movs	r2, #1
 80093de:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80093e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80093e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80093e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093ec:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 80093f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80093f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80093f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093fc:	4b24      	ldr	r3, [pc, #144]	; (8009490 <Right_Velo_Control+0xf8>)
 80093fe:	edd3 7a00 	vldr	s15, [r3]
 8009402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009406:	4b22      	ldr	r3, [pc, #136]	; (8009490 <Right_Velo_Control+0xf8>)
 8009408:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800940c:	4b21      	ldr	r3, [pc, #132]	; (8009494 <Right_Velo_Control+0xfc>)
 800940e:	edd3 7a00 	vldr	s15, [r3]
 8009412:	ed97 7a07 	vldr	s14, [r7, #28]
 8009416:	ee77 6a67 	vsub.f32	s13, s14, s15
 800941a:	ed97 7a03 	vldr	s14, [r7, #12]
 800941e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009422:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8009426:	4a1b      	ldr	r2, [pc, #108]	; (8009494 <Right_Velo_Control+0xfc>)
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	6013      	str	r3, [r2, #0]

	R_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 800942c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009430:	edd7 7a07 	vldr	s15, [r7, #28]
 8009434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009438:	4b15      	ldr	r3, [pc, #84]	; (8009490 <Right_Velo_Control+0xf8>)
 800943a:	edd3 6a00 	vldr	s13, [r3]
 800943e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800944a:	edd7 6a00 	vldr	s13, [r7]
 800944e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800945a:	ee17 0a90 	vmov	r0, s15
 800945e:	f7fe ffab 	bl	80083b8 <__aeabi_f2d>
 8009462:	4603      	mov	r3, r0
 8009464:	460c      	mov	r4, r1
 8009466:	ec44 3b10 	vmov	d0, r3, r4
 800946a:	f00c fe59 	bl	8016120 <round>
 800946e:	ec54 3b10 	vmov	r3, r4, d0
 8009472:	4618      	mov	r0, r3
 8009474:	4621      	mov	r1, r4
 8009476:	f7ff faa7 	bl	80089c8 <__aeabi_d2iz>
 800947a:	4603      	mov	r3, r0
 800947c:	b21a      	sxth	r2, r3
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <Right_Velo_Control+0x100>)
 8009480:	801a      	strh	r2, [r3, #0]
}
 8009482:	bf00      	nop
 8009484:	3724      	adds	r7, #36	; 0x24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd90      	pop	{r4, r7, pc}
 800948a:	bf00      	nop
 800948c:	2000027c 	.word	0x2000027c
 8009490:	200002a0 	.word	0x200002a0
 8009494:	200002a4 	.word	0x200002a4
 8009498:	2000437c 	.word	0x2000437c

0800949c <Left_Velo_Control>:

void Left_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b089      	sub	sp, #36	; 0x24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	ed87 0a05 	vstr	s0, [r7, #20]
 80094a6:	edc7 0a04 	vstr	s1, [r7, #16]
 80094aa:	ed87 1a03 	vstr	s2, [r7, #12]
 80094ae:	edc7 1a02 	vstr	s3, [r7, #8]
 80094b2:	ed87 2a01 	vstr	s4, [r7, #4]
 80094b6:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	f04f 0300 	mov.w	r3, #0
 80094c4:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80094c6:	4b32      	ldr	r3, [pc, #200]	; (8009590 <Left_Velo_Control+0xf4>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d107      	bne.n	80094de <Left_Velo_Control+0x42>
		ei =0;
 80094ce:	4b31      	ldr	r3, [pc, #196]	; (8009594 <Left_Velo_Control+0xf8>)
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80094d6:	4b30      	ldr	r3, [pc, #192]	; (8009598 <Left_Velo_Control+0xfc>)
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80094de:	4b2c      	ldr	r3, [pc, #176]	; (8009590 <Left_Velo_Control+0xf4>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80094e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80094e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80094ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094f0:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 80094f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80094f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80094fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009500:	4b24      	ldr	r3, [pc, #144]	; (8009594 <Left_Velo_Control+0xf8>)
 8009502:	edd3 7a00 	vldr	s15, [r3]
 8009506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800950a:	4b22      	ldr	r3, [pc, #136]	; (8009594 <Left_Velo_Control+0xf8>)
 800950c:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 8009510:	4b21      	ldr	r3, [pc, #132]	; (8009598 <Left_Velo_Control+0xfc>)
 8009512:	edd3 7a00 	vldr	s15, [r3]
 8009516:	ed97 7a07 	vldr	s14, [r7, #28]
 800951a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800951e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009526:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 800952a:	4a1b      	ldr	r2, [pc, #108]	; (8009598 <Left_Velo_Control+0xfc>)
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	6013      	str	r3, [r2, #0]

	L_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009530:	ed97 7a02 	vldr	s14, [r7, #8]
 8009534:	edd7 7a07 	vldr	s15, [r7, #28]
 8009538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800953c:	4b15      	ldr	r3, [pc, #84]	; (8009594 <Left_Velo_Control+0xf8>)
 800953e:	edd3 6a00 	vldr	s13, [r3]
 8009542:	edd7 7a01 	vldr	s15, [r7, #4]
 8009546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800954a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800954e:	edd7 6a00 	vldr	s13, [r7]
 8009552:	edd7 7a06 	vldr	s15, [r7, #24]
 8009556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800955a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955e:	ee17 0a90 	vmov	r0, s15
 8009562:	f7fe ff29 	bl	80083b8 <__aeabi_f2d>
 8009566:	4603      	mov	r3, r0
 8009568:	460c      	mov	r4, r1
 800956a:	ec44 3b10 	vmov	d0, r3, r4
 800956e:	f00c fdd7 	bl	8016120 <round>
 8009572:	ec54 3b10 	vmov	r3, r4, d0
 8009576:	4618      	mov	r0, r3
 8009578:	4621      	mov	r1, r4
 800957a:	f7ff fa25 	bl	80089c8 <__aeabi_d2iz>
 800957e:	4603      	mov	r3, r0
 8009580:	b21a      	sxth	r2, r3
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <Left_Velo_Control+0x100>)
 8009584:	801a      	strh	r2, [r3, #0]
}
 8009586:	bf00      	nop
 8009588:	3724      	adds	r7, #36	; 0x24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd90      	pop	{r4, r7, pc}
 800958e:	bf00      	nop
 8009590:	2000027c 	.word	0x2000027c
 8009594:	200002a8 	.word	0x200002a8
 8009598:	200002ac 	.word	0x200002ac
 800959c:	200043a2 	.word	0x200043a2

080095a0 <Enc_Velo_Control>:
	R_rotate = (int16_t)round(KP*e_R + KI*ei_R + KD*ed_R);
	L_rotate = (int16_t)round(KP*e_L + KI*ei_L + KD*ed_L);

}

void Enc_Velo_Control(float T, float KP, float KI, float KD){
 80095a0:	b590      	push	{r4, r7, lr}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80095aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80095ae:	ed87 1a01 	vstr	s2, [r7, #4]
 80095b2:	edc7 1a00 	vstr	s3, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80095b6:	f04f 0300 	mov.w	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	f04f 0300 	mov.w	r3, #0
 80095c0:	613b      	str	r3, [r7, #16]
	if(error_reset == 0){
 80095c2:	4b4a      	ldr	r3, [pc, #296]	; (80096ec <Enc_Velo_Control+0x14c>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d107      	bne.n	80095da <Enc_Velo_Control+0x3a>
		ei =0;
 80095ca:	4b49      	ldr	r3, [pc, #292]	; (80096f0 <Enc_Velo_Control+0x150>)
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80095d2:	4b48      	ldr	r3, [pc, #288]	; (80096f4 <Enc_Velo_Control+0x154>)
 80095d4:	f04f 0200 	mov.w	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80095da:	4b44      	ldr	r3, [pc, #272]	; (80096ec <Enc_Velo_Control+0x14c>)
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
	e = L_velocity - R_velocity;
 80095e0:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <Enc_Velo_Control+0x158>)
 80095e2:	ed93 7a00 	vldr	s14, [r3]
 80095e6:	4b45      	ldr	r3, [pc, #276]	; (80096fc <Enc_Velo_Control+0x15c>)
 80095e8:	edd3 7a00 	vldr	s15, [r3]
 80095ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095f0:	edc7 7a05 	vstr	s15, [r7, #20]
	ei += e * T;
 80095f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80095f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80095fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009600:	4b3b      	ldr	r3, [pc, #236]	; (80096f0 <Enc_Velo_Control+0x150>)
 8009602:	edd3 7a00 	vldr	s15, [r3]
 8009606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800960a:	4b39      	ldr	r3, [pc, #228]	; (80096f0 <Enc_Velo_Control+0x150>)
 800960c:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 8009610:	4b38      	ldr	r3, [pc, #224]	; (80096f4 <Enc_Velo_Control+0x154>)
 8009612:	edd3 7a00 	vldr	s15, [r3]
 8009616:	ed97 7a05 	vldr	s14, [r7, #20]
 800961a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800961e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009626:	edc7 7a04 	vstr	s15, [r7, #16]
	e0 = e;
 800962a:	4a32      	ldr	r2, [pc, #200]	; (80096f4 <Enc_Velo_Control+0x154>)
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	6013      	str	r3, [r2, #0]

	R_env_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009630:	ed97 7a02 	vldr	s14, [r7, #8]
 8009634:	edd7 7a05 	vldr	s15, [r7, #20]
 8009638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800963c:	4b2c      	ldr	r3, [pc, #176]	; (80096f0 <Enc_Velo_Control+0x150>)
 800963e:	edd3 6a00 	vldr	s13, [r3]
 8009642:	edd7 7a01 	vldr	s15, [r7, #4]
 8009646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800964a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800964e:	edd7 6a00 	vldr	s13, [r7]
 8009652:	edd7 7a04 	vldr	s15, [r7, #16]
 8009656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800965a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800965e:	ee17 0a90 	vmov	r0, s15
 8009662:	f7fe fea9 	bl	80083b8 <__aeabi_f2d>
 8009666:	4603      	mov	r3, r0
 8009668:	460c      	mov	r4, r1
 800966a:	ec44 3b10 	vmov	d0, r3, r4
 800966e:	f00c fd57 	bl	8016120 <round>
 8009672:	ec54 3b10 	vmov	r3, r4, d0
 8009676:	4618      	mov	r0, r3
 8009678:	4621      	mov	r1, r4
 800967a:	f7ff f9a5 	bl	80089c8 <__aeabi_d2iz>
 800967e:	4603      	mov	r3, r0
 8009680:	b21a      	sxth	r2, r3
 8009682:	4b1f      	ldr	r3, [pc, #124]	; (8009700 <Enc_Velo_Control+0x160>)
 8009684:	801a      	strh	r2, [r3, #0]
	L_env_control = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8009686:	ed97 7a02 	vldr	s14, [r7, #8]
 800968a:	edd7 7a05 	vldr	s15, [r7, #20]
 800968e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009692:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <Enc_Velo_Control+0x150>)
 8009694:	edd3 6a00 	vldr	s13, [r3]
 8009698:	edd7 7a01 	vldr	s15, [r7, #4]
 800969c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096a4:	edd7 6a00 	vldr	s13, [r7]
 80096a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80096ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096b4:	ee17 0a90 	vmov	r0, s15
 80096b8:	f7fe fe7e 	bl	80083b8 <__aeabi_f2d>
 80096bc:	4603      	mov	r3, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	ec44 3b10 	vmov	d0, r3, r4
 80096c4:	f00c fd2c 	bl	8016120 <round>
 80096c8:	ec54 3b10 	vmov	r3, r4, d0
 80096cc:	4618      	mov	r0, r3
 80096ce:	4621      	mov	r1, r4
 80096d0:	f7ff f97a 	bl	80089c8 <__aeabi_d2iz>
 80096d4:	4603      	mov	r3, r0
 80096d6:	b21b      	sxth	r3, r3
 80096d8:	b29b      	uxth	r3, r3
 80096da:	425b      	negs	r3, r3
 80096dc:	b29b      	uxth	r3, r3
 80096de:	b21a      	sxth	r2, r3
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <Enc_Velo_Control+0x164>)
 80096e2:	801a      	strh	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	371c      	adds	r7, #28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd90      	pop	{r4, r7, pc}
 80096ec:	2000027c 	.word	0x2000027c
 80096f0:	200002b0 	.word	0x200002b0
 80096f4:	200002b4 	.word	0x200002b4
 80096f8:	2000439c 	.word	0x2000439c
 80096fc:	200043a8 	.word	0x200043a8
 8009700:	20004388 	.word	0x20004388
 8009704:	2000437a 	.word	0x2000437a

08009708 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009718:	b2db      	uxtb	r3, r3
 800971a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800971c:	2200      	movs	r2, #0
 800971e:	2104      	movs	r1, #4
 8009720:	480d      	ldr	r0, [pc, #52]	; (8009758 <read_byte+0x50>)
 8009722:	f009 fc3d 	bl	8012fa0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009726:	f107 010f 	add.w	r1, r7, #15
 800972a:	2364      	movs	r3, #100	; 0x64
 800972c:	2201      	movs	r2, #1
 800972e:	480b      	ldr	r0, [pc, #44]	; (800975c <read_byte+0x54>)
 8009730:	f00a f916 	bl	8013960 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8009734:	f107 010e 	add.w	r1, r7, #14
 8009738:	2364      	movs	r3, #100	; 0x64
 800973a:	2201      	movs	r2, #1
 800973c:	4807      	ldr	r0, [pc, #28]	; (800975c <read_byte+0x54>)
 800973e:	f00a fa43 	bl	8013bc8 <HAL_SPI_Receive>
	CS_SET;
 8009742:	2201      	movs	r2, #1
 8009744:	2104      	movs	r1, #4
 8009746:	4804      	ldr	r0, [pc, #16]	; (8009758 <read_byte+0x50>)
 8009748:	f009 fc2a 	bl	8012fa0 <HAL_GPIO_WritePin>

	return val;
 800974c:	7bbb      	ldrb	r3, [r7, #14]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40020c00 	.word	0x40020c00
 800975c:	2000452c 	.word	0x2000452c

08009760 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	460a      	mov	r2, r1
 800976a:	71fb      	strb	r3, [r7, #7]
 800976c:	4613      	mov	r3, r2
 800976e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009776:	b2db      	uxtb	r3, r3
 8009778:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800977a:	2200      	movs	r2, #0
 800977c:	2104      	movs	r1, #4
 800977e:	480c      	ldr	r0, [pc, #48]	; (80097b0 <write_byte+0x50>)
 8009780:	f009 fc0e 	bl	8012fa0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009784:	f107 010f 	add.w	r1, r7, #15
 8009788:	2364      	movs	r3, #100	; 0x64
 800978a:	2201      	movs	r2, #1
 800978c:	4809      	ldr	r0, [pc, #36]	; (80097b4 <write_byte+0x54>)
 800978e:	f00a f8e7 	bl	8013960 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8009792:	1db9      	adds	r1, r7, #6
 8009794:	2364      	movs	r3, #100	; 0x64
 8009796:	2201      	movs	r2, #1
 8009798:	4806      	ldr	r0, [pc, #24]	; (80097b4 <write_byte+0x54>)
 800979a:	f00a f8e1 	bl	8013960 <HAL_SPI_Transmit>
	CS_SET;
 800979e:	2201      	movs	r2, #1
 80097a0:	2104      	movs	r1, #4
 80097a2:	4803      	ldr	r0, [pc, #12]	; (80097b0 <write_byte+0x50>)
 80097a4:	f009 fbfc 	bl	8012fa0 <HAL_GPIO_WritePin>
}
 80097a8:	bf00      	nop
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40020c00 	.word	0x40020c00
 80097b4:	2000452c 	.word	0x2000452c

080097b8 <IMU_init>:

uint8_t IMU_init() {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80097be:	2000      	movs	r0, #0
 80097c0:	f7ff ffa2 	bl	8009708 <read_byte>
 80097c4:	4603      	mov	r3, r0
 80097c6:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 80097c8:	79bb      	ldrb	r3, [r7, #6]
 80097ca:	2be0      	cmp	r3, #224	; 0xe0
 80097cc:	d119      	bne.n	8009802 <IMU_init+0x4a>
		ret = 1;
 80097ce:	2301      	movs	r3, #1
 80097d0:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80097d2:	2101      	movs	r1, #1
 80097d4:	2006      	movs	r0, #6
 80097d6:	f7ff ffc3 	bl	8009760 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80097da:	2110      	movs	r1, #16
 80097dc:	2003      	movs	r0, #3
 80097de:	f7ff ffbf 	bl	8009760 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80097e2:	2120      	movs	r1, #32
 80097e4:	207f      	movs	r0, #127	; 0x7f
 80097e6:	f7ff ffbb 	bl	8009760 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 80097ea:	2117      	movs	r1, #23
 80097ec:	2001      	movs	r0, #1
 80097ee:	f7ff ffb7 	bl	8009760 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 80097f2:	2106      	movs	r1, #6
 80097f4:	2014      	movs	r0, #20
 80097f6:	f7ff ffb3 	bl	8009760 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80097fa:	2100      	movs	r1, #0
 80097fc:	207f      	movs	r0, #127	; 0x7f
 80097fe:	f7ff ffaf 	bl	8009760 <write_byte>
	}
	return ret;
 8009802:	79fb      	ldrb	r3, [r7, #7]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <read_gyro_data>:

void read_gyro_data() {
 800980c:	b598      	push	{r3, r4, r7, lr}
 800980e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8009810:	2033      	movs	r0, #51	; 0x33
 8009812:	f7ff ff79 	bl	8009708 <read_byte>
 8009816:	4603      	mov	r3, r0
 8009818:	021b      	lsls	r3, r3, #8
 800981a:	b21c      	sxth	r4, r3
 800981c:	2034      	movs	r0, #52	; 0x34
 800981e:	f7ff ff73 	bl	8009708 <read_byte>
 8009822:	4603      	mov	r3, r0
 8009824:	b21b      	sxth	r3, r3
 8009826:	4323      	orrs	r3, r4
 8009828:	b21a      	sxth	r2, r3
 800982a:	4b11      	ldr	r3, [pc, #68]	; (8009870 <read_gyro_data+0x64>)
 800982c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800982e:	2035      	movs	r0, #53	; 0x35
 8009830:	f7ff ff6a 	bl	8009708 <read_byte>
 8009834:	4603      	mov	r3, r0
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	b21c      	sxth	r4, r3
 800983a:	2036      	movs	r0, #54	; 0x36
 800983c:	f7ff ff64 	bl	8009708 <read_byte>
 8009840:	4603      	mov	r3, r0
 8009842:	b21b      	sxth	r3, r3
 8009844:	4323      	orrs	r3, r4
 8009846:	b21a      	sxth	r2, r3
 8009848:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <read_gyro_data+0x68>)
 800984a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 800984c:	2037      	movs	r0, #55	; 0x37
 800984e:	f7ff ff5b 	bl	8009708 <read_byte>
 8009852:	4603      	mov	r3, r0
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	b21c      	sxth	r4, r3
 8009858:	2038      	movs	r0, #56	; 0x38
 800985a:	f7ff ff55 	bl	8009708 <read_byte>
 800985e:	4603      	mov	r3, r0
 8009860:	b21b      	sxth	r3, r3
 8009862:	4323      	orrs	r3, r4
 8009864:	b21a      	sxth	r2, r3
 8009866:	4b04      	ldr	r3, [pc, #16]	; (8009878 <read_gyro_data+0x6c>)
 8009868:	801a      	strh	r2, [r3, #0]
}
 800986a:	bf00      	nop
 800986c:	bd98      	pop	{r3, r4, r7, pc}
 800986e:	bf00      	nop
 8009870:	200043b6 	.word	0x200043b6
 8009874:	200043b4 	.word	0x200043b4
 8009878:	200043ae 	.word	0x200043ae

0800987c <read_accel_data>:

void read_accel_data() {
 800987c:	b598      	push	{r3, r4, r7, lr}
 800987e:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8009880:	202d      	movs	r0, #45	; 0x2d
 8009882:	f7ff ff41 	bl	8009708 <read_byte>
 8009886:	4603      	mov	r3, r0
 8009888:	021b      	lsls	r3, r3, #8
 800988a:	b21c      	sxth	r4, r3
 800988c:	202e      	movs	r0, #46	; 0x2e
 800988e:	f7ff ff3b 	bl	8009708 <read_byte>
 8009892:	4603      	mov	r3, r0
 8009894:	b21b      	sxth	r3, r3
 8009896:	4323      	orrs	r3, r4
 8009898:	b21a      	sxth	r2, r3
 800989a:	4b11      	ldr	r3, [pc, #68]	; (80098e0 <read_accel_data+0x64>)
 800989c:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 800989e:	202f      	movs	r0, #47	; 0x2f
 80098a0:	f7ff ff32 	bl	8009708 <read_byte>
 80098a4:	4603      	mov	r3, r0
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	b21c      	sxth	r4, r3
 80098aa:	2030      	movs	r0, #48	; 0x30
 80098ac:	f7ff ff2c 	bl	8009708 <read_byte>
 80098b0:	4603      	mov	r3, r0
 80098b2:	b21b      	sxth	r3, r3
 80098b4:	4323      	orrs	r3, r4
 80098b6:	b21a      	sxth	r2, r3
 80098b8:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <read_accel_data+0x68>)
 80098ba:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 80098bc:	2031      	movs	r0, #49	; 0x31
 80098be:	f7ff ff23 	bl	8009708 <read_byte>
 80098c2:	4603      	mov	r3, r0
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	b21c      	sxth	r4, r3
 80098c8:	2032      	movs	r0, #50	; 0x32
 80098ca:	f7ff ff1d 	bl	8009708 <read_byte>
 80098ce:	4603      	mov	r3, r0
 80098d0:	b21b      	sxth	r3, r3
 80098d2:	4323      	orrs	r3, r4
 80098d4:	b21a      	sxth	r2, r3
 80098d6:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <read_accel_data+0x6c>)
 80098d8:	801a      	strh	r2, [r3, #0]
}
 80098da:	bf00      	nop
 80098dc:	bd98      	pop	{r3, r4, r7, pc}
 80098de:	bf00      	nop
 80098e0:	200043b2 	.word	0x200043b2
 80098e4:	200043b8 	.word	0x200043b8
 80098e8:	200043b0 	.word	0x200043b0

080098ec <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80098f4:	1d39      	adds	r1, r7, #4
 80098f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098fa:	2201      	movs	r2, #1
 80098fc:	4803      	ldr	r0, [pc, #12]	; (800990c <__io_putchar+0x20>)
 80098fe:	f00b ffaf 	bl	8015860 <HAL_UART_Transmit>
	return ch;
 8009902:	687b      	ldr	r3, [r7, #4]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200045d4 	.word	0x200045d4

08009910 <Motor_Count_Clear>:
	*R_counter = round(4200/8 * R_Volt);
	*L_counter = round(4200/8 * L_Volt);

}

void Motor_Count_Clear(){
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
	 L_motor = L_v_control =  L_wall = L_leftwall = L_rightwall = L_rotate = L_angular_velocity = L_env_control = L_velo_control = 0;
 8009914:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <Motor_Count_Clear+0xbc>)
 8009916:	2200      	movs	r2, #0
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	4b2c      	ldr	r3, [pc, #176]	; (80099cc <Motor_Count_Clear+0xbc>)
 800991c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009920:	4b2b      	ldr	r3, [pc, #172]	; (80099d0 <Motor_Count_Clear+0xc0>)
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <Motor_Count_Clear+0xc0>)
 8009926:	f9b3 2000 	ldrsh.w	r2, [r3]
 800992a:	4b2a      	ldr	r3, [pc, #168]	; (80099d4 <Motor_Count_Clear+0xc4>)
 800992c:	801a      	strh	r2, [r3, #0]
 800992e:	4b29      	ldr	r3, [pc, #164]	; (80099d4 <Motor_Count_Clear+0xc4>)
 8009930:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009934:	4b28      	ldr	r3, [pc, #160]	; (80099d8 <Motor_Count_Clear+0xc8>)
 8009936:	801a      	strh	r2, [r3, #0]
 8009938:	4b27      	ldr	r3, [pc, #156]	; (80099d8 <Motor_Count_Clear+0xc8>)
 800993a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800993e:	4b27      	ldr	r3, [pc, #156]	; (80099dc <Motor_Count_Clear+0xcc>)
 8009940:	801a      	strh	r2, [r3, #0]
 8009942:	4b26      	ldr	r3, [pc, #152]	; (80099dc <Motor_Count_Clear+0xcc>)
 8009944:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009948:	4b25      	ldr	r3, [pc, #148]	; (80099e0 <Motor_Count_Clear+0xd0>)
 800994a:	801a      	strh	r2, [r3, #0]
 800994c:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <Motor_Count_Clear+0xd0>)
 800994e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009952:	4b24      	ldr	r3, [pc, #144]	; (80099e4 <Motor_Count_Clear+0xd4>)
 8009954:	801a      	strh	r2, [r3, #0]
 8009956:	4b23      	ldr	r3, [pc, #140]	; (80099e4 <Motor_Count_Clear+0xd4>)
 8009958:	f9b3 2000 	ldrsh.w	r2, [r3]
 800995c:	4b22      	ldr	r3, [pc, #136]	; (80099e8 <Motor_Count_Clear+0xd8>)
 800995e:	801a      	strh	r2, [r3, #0]
 8009960:	4b21      	ldr	r3, [pc, #132]	; (80099e8 <Motor_Count_Clear+0xd8>)
 8009962:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009966:	4b21      	ldr	r3, [pc, #132]	; (80099ec <Motor_Count_Clear+0xdc>)
 8009968:	801a      	strh	r2, [r3, #0]
	 R_motor = R_v_control = R_wall = R_leftwall = R_rightwall = R_rotate = R_angular_velocity = R_env_control = R_velo_control = 0;
 800996a:	4b21      	ldr	r3, [pc, #132]	; (80099f0 <Motor_Count_Clear+0xe0>)
 800996c:	2200      	movs	r2, #0
 800996e:	801a      	strh	r2, [r3, #0]
 8009970:	4b1f      	ldr	r3, [pc, #124]	; (80099f0 <Motor_Count_Clear+0xe0>)
 8009972:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009976:	4b1f      	ldr	r3, [pc, #124]	; (80099f4 <Motor_Count_Clear+0xe4>)
 8009978:	801a      	strh	r2, [r3, #0]
 800997a:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <Motor_Count_Clear+0xe4>)
 800997c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009980:	4b1d      	ldr	r3, [pc, #116]	; (80099f8 <Motor_Count_Clear+0xe8>)
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	4b1c      	ldr	r3, [pc, #112]	; (80099f8 <Motor_Count_Clear+0xe8>)
 8009986:	f9b3 2000 	ldrsh.w	r2, [r3]
 800998a:	4b1c      	ldr	r3, [pc, #112]	; (80099fc <Motor_Count_Clear+0xec>)
 800998c:	801a      	strh	r2, [r3, #0]
 800998e:	4b1b      	ldr	r3, [pc, #108]	; (80099fc <Motor_Count_Clear+0xec>)
 8009990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009994:	4b1a      	ldr	r3, [pc, #104]	; (8009a00 <Motor_Count_Clear+0xf0>)
 8009996:	801a      	strh	r2, [r3, #0]
 8009998:	4b19      	ldr	r3, [pc, #100]	; (8009a00 <Motor_Count_Clear+0xf0>)
 800999a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800999e:	4b19      	ldr	r3, [pc, #100]	; (8009a04 <Motor_Count_Clear+0xf4>)
 80099a0:	801a      	strh	r2, [r3, #0]
 80099a2:	4b18      	ldr	r3, [pc, #96]	; (8009a04 <Motor_Count_Clear+0xf4>)
 80099a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099a8:	4b17      	ldr	r3, [pc, #92]	; (8009a08 <Motor_Count_Clear+0xf8>)
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <Motor_Count_Clear+0xf8>)
 80099ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <Motor_Count_Clear+0xfc>)
 80099b4:	801a      	strh	r2, [r3, #0]
 80099b6:	4b15      	ldr	r3, [pc, #84]	; (8009a0c <Motor_Count_Clear+0xfc>)
 80099b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099bc:	4b14      	ldr	r3, [pc, #80]	; (8009a10 <Motor_Count_Clear+0x100>)
 80099be:	801a      	strh	r2, [r3, #0]
}
 80099c0:	bf00      	nop
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	200043a2 	.word	0x200043a2
 80099d0:	2000437a 	.word	0x2000437a
 80099d4:	20004392 	.word	0x20004392
 80099d8:	20004398 	.word	0x20004398
 80099dc:	20004378 	.word	0x20004378
 80099e0:	20004386 	.word	0x20004386
 80099e4:	200043a0 	.word	0x200043a0
 80099e8:	20004384 	.word	0x20004384
 80099ec:	20004ff0 	.word	0x20004ff0
 80099f0:	2000437c 	.word	0x2000437c
 80099f4:	20004388 	.word	0x20004388
 80099f8:	20004396 	.word	0x20004396
 80099fc:	2000439a 	.word	0x2000439a
 8009a00:	20004394 	.word	0x20004394
 8009a04:	200043ac 	.word	0x200043ac
 8009a08:	2000438a 	.word	0x2000438a
 8009a0c:	20004390 	.word	0x20004390
 8009a10:	2000449c 	.word	0x2000449c

08009a14 <Tim_Count>:

void Tim_Count(){
 8009a14:	b598      	push	{r3, r4, r7, lr}
 8009a16:	af00      	add	r7, sp, #0


	if(mode.select%2 != 1){
 8009a18:	4b19      	ldr	r3, [pc, #100]	; (8009a80 <Tim_Count+0x6c>)
 8009a1a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	bfb8      	it	lt
 8009a26:	425b      	neglt	r3, r3
 8009a28:	b25b      	sxtb	r3, r3
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d025      	beq.n	8009a7a <Tim_Count+0x66>
		timer += 1;
 8009a2e:	4b15      	ldr	r3, [pc, #84]	; (8009a84 <Tim_Count+0x70>)
 8009a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <Tim_Count+0x74>)
 8009a3a:	f7fe fb5f 	bl	80080fc <__adddf3>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	4a10      	ldr	r2, [pc, #64]	; (8009a84 <Tim_Count+0x70>)
 8009a44:	e9c2 3400 	strd	r3, r4, [r2]
		if(timer == 1000){
 8009a48:	4b0e      	ldr	r3, [pc, #56]	; (8009a84 <Tim_Count+0x70>)
 8009a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a4e:	f04f 0200 	mov.w	r2, #0
 8009a52:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <Tim_Count+0x78>)
 8009a54:	f7fe ff70 	bl	8008938 <__aeabi_dcmpeq>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d100      	bne.n	8009a60 <Tim_Count+0x4c>
			self_timer ++;
		}
	}

}
 8009a5e:	e00c      	b.n	8009a7a <Tim_Count+0x66>
			self_timer ++;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <Tim_Count+0x7c>)
 8009a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a66:	f04f 0200 	mov.w	r2, #0
 8009a6a:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <Tim_Count+0x74>)
 8009a6c:	f7fe fb46 	bl	80080fc <__adddf3>
 8009a70:	4603      	mov	r3, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4a06      	ldr	r2, [pc, #24]	; (8009a90 <Tim_Count+0x7c>)
 8009a76:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009a7a:	bf00      	nop
 8009a7c:	bd98      	pop	{r3, r4, r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000074 	.word	0x20000074
 8009a84:	200002e8 	.word	0x200002e8
 8009a88:	3ff00000 	.word	0x3ff00000
 8009a8c:	408f4000 	.word	0x408f4000
 8009a90:	200002e0 	.word	0x200002e0

08009a94 <map_init>:

void map_init(){
 8009a94:	b4b0      	push	{r4, r5, r7}
 8009a96:	af00      	add	r7, sp, #0
	static int i = 0, j=0;

	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009a98:	4b3c      	ldr	r3, [pc, #240]	; (8009b8c <map_init+0xf8>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e06c      	b.n	8009b7a <map_init+0xe6>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009aa0:	4b3b      	ldr	r3, [pc, #236]	; (8009b90 <map_init+0xfc>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	e05f      	b.n	8009b68 <map_init+0xd4>
			wall[i][j].north
			= wall[i][j].east
			= wall[i][j].south
			= wall[i][j].west = UNKNOWN;
 8009aa8:	4b38      	ldr	r3, [pc, #224]	; (8009b8c <map_init+0xf8>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	4b38      	ldr	r3, [pc, #224]	; (8009b90 <map_init+0xfc>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	4c38      	ldr	r4, [pc, #224]	; (8009b94 <map_init+0x100>)
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	1819      	adds	r1, r3, r0
 8009aba:	f814 3011 	ldrb.w	r3, [r4, r1, lsl #1]
 8009abe:	2502      	movs	r5, #2
 8009ac0:	f365 1387 	bfi	r3, r5, #6, #2
 8009ac4:	f804 3011 	strb.w	r3, [r4, r1, lsl #1]
			= wall[i][j].south
 8009ac8:	4b30      	ldr	r3, [pc, #192]	; (8009b8c <map_init+0xf8>)
 8009aca:	6819      	ldr	r1, [r3, #0]
 8009acc:	4b30      	ldr	r3, [pc, #192]	; (8009b90 <map_init+0xfc>)
 8009ace:	681c      	ldr	r4, [r3, #0]
			= wall[i][j].west = UNKNOWN;
 8009ad0:	4d30      	ldr	r5, [pc, #192]	; (8009b94 <map_init+0x100>)
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	4413      	add	r3, r2
 8009ad8:	4403      	add	r3, r0
 8009ada:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009ade:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009ae2:	b2dd      	uxtb	r5, r3
 8009ae4:	482b      	ldr	r0, [pc, #172]	; (8009b94 <map_init+0x100>)
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	440b      	add	r3, r1
 8009aec:	191a      	adds	r2, r3, r4
 8009aee:	f810 3012 	ldrb.w	r3, [r0, r2, lsl #1]
 8009af2:	f365 1305 	bfi	r3, r5, #4, #2
 8009af6:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
			= wall[i][j].east
 8009afa:	4b24      	ldr	r3, [pc, #144]	; (8009b8c <map_init+0xf8>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <map_init+0xfc>)
 8009b00:	6818      	ldr	r0, [r3, #0]
			= wall[i][j].south
 8009b02:	4d24      	ldr	r5, [pc, #144]	; (8009b94 <map_init+0x100>)
 8009b04:	460b      	mov	r3, r1
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	440b      	add	r3, r1
 8009b0a:	4423      	add	r3, r4
 8009b0c:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009b10:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009b14:	b2dd      	uxtb	r5, r3
 8009b16:	4c1f      	ldr	r4, [pc, #124]	; (8009b94 <map_init+0x100>)
 8009b18:	4613      	mov	r3, r2
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	4413      	add	r3, r2
 8009b1e:	1819      	adds	r1, r3, r0
 8009b20:	f814 3011 	ldrb.w	r3, [r4, r1, lsl #1]
 8009b24:	f365 0383 	bfi	r3, r5, #2, #2
 8009b28:	f804 3011 	strb.w	r3, [r4, r1, lsl #1]
			wall[i][j].north
 8009b2c:	4b17      	ldr	r3, [pc, #92]	; (8009b8c <map_init+0xf8>)
 8009b2e:	681c      	ldr	r4, [r3, #0]
 8009b30:	4b17      	ldr	r3, [pc, #92]	; (8009b90 <map_init+0xfc>)
 8009b32:	681d      	ldr	r5, [r3, #0]
			= wall[i][j].east
 8009b34:	4917      	ldr	r1, [pc, #92]	; (8009b94 <map_init+0x100>)
 8009b36:	4613      	mov	r3, r2
 8009b38:	00db      	lsls	r3, r3, #3
 8009b3a:	4413      	add	r3, r2
 8009b3c:	4403      	add	r3, r0
 8009b3e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009b42:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009b46:	b2d8      	uxtb	r0, r3
 8009b48:	4912      	ldr	r1, [pc, #72]	; (8009b94 <map_init+0x100>)
 8009b4a:	4623      	mov	r3, r4
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	4423      	add	r3, r4
 8009b50:	195a      	adds	r2, r3, r5
 8009b52:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009b56:	f360 0301 	bfi	r3, r0, #0, #2
 8009b5a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <map_init+0xfc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	4a0a      	ldr	r2, [pc, #40]	; (8009b90 <map_init+0xfc>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	4b09      	ldr	r3, [pc, #36]	; (8009b90 <map_init+0xfc>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	dd9b      	ble.n	8009aa8 <map_init+0x14>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <map_init+0xf8>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	4a05      	ldr	r2, [pc, #20]	; (8009b8c <map_init+0xf8>)
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <map_init+0xf8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	dd8e      	ble.n	8009aa0 <map_init+0xc>

		}

	}
}
 8009b82:	bf00      	nop
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bcb0      	pop	{r4, r5, r7}
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	20004318 	.word	0x20004318
 8009b90:	2000431c 	.word	0x2000431c
 8009b94:	20004f0c 	.word	0x20004f0c

08009b98 <mapcopy>:

void mapcopy(){
 8009b98:	b490      	push	{r4, r7}
 8009b9a:	af00      	add	r7, sp, #0
		}

	}
#endif

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009b9c:	4b4f      	ldr	r3, [pc, #316]	; (8009cdc <mapcopy+0x144>)
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e065      	b.n	8009c70 <mapcopy+0xd8>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009ba4:	4b4e      	ldr	r3, [pc, #312]	; (8009ce0 <mapcopy+0x148>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e058      	b.n	8009c5e <mapcopy+0xc6>
			work_ram[k] = wall[i][j].north;
 8009bac:	4b4c      	ldr	r3, [pc, #304]	; (8009ce0 <mapcopy+0x148>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	4b4a      	ldr	r3, [pc, #296]	; (8009cdc <mapcopy+0x144>)
 8009bb2:	6819      	ldr	r1, [r3, #0]
 8009bb4:	484b      	ldr	r0, [pc, #300]	; (8009ce4 <mapcopy+0x14c>)
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	4413      	add	r3, r2
 8009bbc:	440b      	add	r3, r1
 8009bbe:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009bc2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	4b47      	ldr	r3, [pc, #284]	; (8009ce8 <mapcopy+0x150>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4a47      	ldr	r2, [pc, #284]	; (8009cec <mapcopy+0x154>)
 8009bd0:	54d1      	strb	r1, [r2, r3]
			work_ram[k+1] = wall[i][j].east;
 8009bd2:	4b43      	ldr	r3, [pc, #268]	; (8009ce0 <mapcopy+0x148>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b41      	ldr	r3, [pc, #260]	; (8009cdc <mapcopy+0x144>)
 8009bd8:	6819      	ldr	r1, [r3, #0]
 8009bda:	4842      	ldr	r0, [pc, #264]	; (8009ce4 <mapcopy+0x14c>)
 8009bdc:	4613      	mov	r3, r2
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	4413      	add	r3, r2
 8009be2:	440b      	add	r3, r1
 8009be4:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009be8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	4b3e      	ldr	r3, [pc, #248]	; (8009ce8 <mapcopy+0x150>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	4a3d      	ldr	r2, [pc, #244]	; (8009cec <mapcopy+0x154>)
 8009bf8:	54d1      	strb	r1, [r2, r3]
			work_ram[k+2] = wall[i][j].south;
 8009bfa:	4b39      	ldr	r3, [pc, #228]	; (8009ce0 <mapcopy+0x148>)
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	4b37      	ldr	r3, [pc, #220]	; (8009cdc <mapcopy+0x144>)
 8009c00:	6819      	ldr	r1, [r3, #0]
 8009c02:	4838      	ldr	r0, [pc, #224]	; (8009ce4 <mapcopy+0x14c>)
 8009c04:	4613      	mov	r3, r2
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	4413      	add	r3, r2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009c10:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	4b34      	ldr	r3, [pc, #208]	; (8009ce8 <mapcopy+0x150>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3302      	adds	r3, #2
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4a33      	ldr	r2, [pc, #204]	; (8009cec <mapcopy+0x154>)
 8009c20:	54d1      	strb	r1, [r2, r3]
			work_ram[k+3] = wall[i][j].west;
 8009c22:	4b2f      	ldr	r3, [pc, #188]	; (8009ce0 <mapcopy+0x148>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b2d      	ldr	r3, [pc, #180]	; (8009cdc <mapcopy+0x144>)
 8009c28:	6819      	ldr	r1, [r3, #0]
 8009c2a:	482e      	ldr	r0, [pc, #184]	; (8009ce4 <mapcopy+0x14c>)
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	4413      	add	r3, r2
 8009c32:	440b      	add	r3, r1
 8009c34:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009c38:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ce8 <mapcopy+0x150>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3303      	adds	r3, #3
 8009c44:	4611      	mov	r1, r2
 8009c46:	4a29      	ldr	r2, [pc, #164]	; (8009cec <mapcopy+0x154>)
 8009c48:	54d1      	strb	r1, [r2, r3]
			k+=4;
 8009c4a:	4b27      	ldr	r3, [pc, #156]	; (8009ce8 <mapcopy+0x150>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4a25      	ldr	r2, [pc, #148]	; (8009ce8 <mapcopy+0x150>)
 8009c52:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c54:	4b22      	ldr	r3, [pc, #136]	; (8009ce0 <mapcopy+0x148>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	4a21      	ldr	r2, [pc, #132]	; (8009ce0 <mapcopy+0x148>)
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	4b20      	ldr	r3, [pc, #128]	; (8009ce0 <mapcopy+0x148>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b08      	cmp	r3, #8
 8009c64:	dda2      	ble.n	8009bac <mapcopy+0x14>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c66:	4b1d      	ldr	r3, [pc, #116]	; (8009cdc <mapcopy+0x144>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <mapcopy+0x144>)
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <mapcopy+0x144>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	da95      	bge.n	8009ba4 <mapcopy+0xc>
		//�?��?は4*NOS*NOS番目 - 1 まで?��?ま?��?
		//kは60まで行ったあと?��?4*NOS*NOS になって値が�??��らず終わ?��?

	}

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c78:	4b18      	ldr	r3, [pc, #96]	; (8009cdc <mapcopy+0x144>)
 8009c7a:	2208      	movs	r2, #8
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	e025      	b.n	8009ccc <mapcopy+0x134>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c80:	4b17      	ldr	r3, [pc, #92]	; (8009ce0 <mapcopy+0x148>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	e018      	b.n	8009cba <mapcopy+0x122>
			work_ram[k] = walk_map[i][j];
 8009c88:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <mapcopy+0x148>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <mapcopy+0x144>)
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <mapcopy+0x150>)
 8009c92:	6819      	ldr	r1, [r3, #0]
 8009c94:	4c16      	ldr	r4, [pc, #88]	; (8009cf0 <mapcopy+0x158>)
 8009c96:	4613      	mov	r3, r2
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	4413      	add	r3, r2
 8009c9c:	4423      	add	r3, r4
 8009c9e:	4403      	add	r3, r0
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	4b12      	ldr	r3, [pc, #72]	; (8009cec <mapcopy+0x154>)
 8009ca4:	545a      	strb	r2, [r3, r1]
			k+=1;
 8009ca6:	4b10      	ldr	r3, [pc, #64]	; (8009ce8 <mapcopy+0x150>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3301      	adds	r3, #1
 8009cac:	4a0e      	ldr	r2, [pc, #56]	; (8009ce8 <mapcopy+0x150>)
 8009cae:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <mapcopy+0x148>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ce0 <mapcopy+0x148>)
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <mapcopy+0x148>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	dde2      	ble.n	8009c88 <mapcopy+0xf0>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009cc2:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <mapcopy+0x144>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	4a04      	ldr	r2, [pc, #16]	; (8009cdc <mapcopy+0x144>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	4b03      	ldr	r3, [pc, #12]	; (8009cdc <mapcopy+0x144>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	dad5      	bge.n	8009c80 <mapcopy+0xe8>
//	if(i <= 10){
//		work_ram[i][0] = wall[1][1].east;
//		i++;
//	}
//wall[4][4].south = 64? why
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc90      	pop	{r4, r7}
 8009cda:	4770      	bx	lr
 8009cdc:	20004320 	.word	0x20004320
 8009ce0:	20004324 	.word	0x20004324
 8009ce4:	20004f0c 	.word	0x20004f0c
 8009ce8:	20004328 	.word	0x20004328
 8009cec:	20000318 	.word	0x20000318
 8009cf0:	20004a60 	.word	0x20004a60

08009cf4 <mapprint>:

void mapprint(){
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0

	static int i = 0, j=0,k=0;
#if 1
	//迷路?��?報
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009cf8:	4b48      	ldr	r3, [pc, #288]	; (8009e1c <mapprint+0x128>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	e053      	b.n	8009da8 <mapprint+0xb4>
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009d00:	4b47      	ldr	r3, [pc, #284]	; (8009e20 <mapprint+0x12c>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	e043      	b.n	8009d90 <mapprint+0x9c>
			printf("%u",work_ram[k]);
 8009d08:	4b46      	ldr	r3, [pc, #280]	; (8009e24 <mapprint+0x130>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a46      	ldr	r2, [pc, #280]	; (8009e28 <mapprint+0x134>)
 8009d0e:	5cd3      	ldrb	r3, [r2, r3]
 8009d10:	4619      	mov	r1, r3
 8009d12:	4846      	ldr	r0, [pc, #280]	; (8009e2c <mapprint+0x138>)
 8009d14:	f00c fee8 	bl	8016ae8 <iprintf>
			if((k+1)%(NUMBER_OF_SQUARES * 4) != 0){
 8009d18:	4b42      	ldr	r3, [pc, #264]	; (8009e24 <mapprint+0x130>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	1c59      	adds	r1, r3, #1
 8009d1e:	4b44      	ldr	r3, [pc, #272]	; (8009e30 <mapprint+0x13c>)
 8009d20:	fb83 2301 	smull	r2, r3, r3, r1
 8009d24:	10da      	asrs	r2, r3, #3
 8009d26:	17cb      	asrs	r3, r1, #31
 8009d28:	1ad2      	subs	r2, r2, r3
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	1aca      	subs	r2, r1, r3
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	d00e      	beq.n	8009d56 <mapprint+0x62>
			if((k+1) >= 4 && (k+1)%4 == 0)
 8009d38:	4b3a      	ldr	r3, [pc, #232]	; (8009e24 <mapprint+0x130>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	dd09      	ble.n	8009d56 <mapprint+0x62>
 8009d42:	4b38      	ldr	r3, [pc, #224]	; (8009e24 <mapprint+0x130>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	f003 0303 	and.w	r3, r3, #3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d102      	bne.n	8009d56 <mapprint+0x62>
				printf("  ");
 8009d50:	4838      	ldr	r0, [pc, #224]	; (8009e34 <mapprint+0x140>)
 8009d52:	f00c fec9 	bl	8016ae8 <iprintf>
			}
			if((k+1)%(NUMBER_OF_SQUARES * 4) == 0){
 8009d56:	4b33      	ldr	r3, [pc, #204]	; (8009e24 <mapprint+0x130>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	1c59      	adds	r1, r3, #1
 8009d5c:	4b34      	ldr	r3, [pc, #208]	; (8009e30 <mapprint+0x13c>)
 8009d5e:	fb83 2301 	smull	r2, r3, r3, r1
 8009d62:	10da      	asrs	r2, r3, #3
 8009d64:	17cb      	asrs	r3, r1, #31
 8009d66:	1ad2      	subs	r2, r2, r3
 8009d68:	4613      	mov	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	1aca      	subs	r2, r1, r3
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	d102      	bne.n	8009d7c <mapprint+0x88>
				printf("\r\n");
 8009d76:	4830      	ldr	r0, [pc, #192]	; (8009e38 <mapprint+0x144>)
 8009d78:	f00c ff2a 	bl	8016bd0 <puts>
			}
			k++;
 8009d7c:	4b29      	ldr	r3, [pc, #164]	; (8009e24 <mapprint+0x130>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3301      	adds	r3, #1
 8009d82:	4a28      	ldr	r2, [pc, #160]	; (8009e24 <mapprint+0x130>)
 8009d84:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009d86:	4b26      	ldr	r3, [pc, #152]	; (8009e20 <mapprint+0x12c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	4a24      	ldr	r2, [pc, #144]	; (8009e20 <mapprint+0x12c>)
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	4b23      	ldr	r3, [pc, #140]	; (8009e20 <mapprint+0x12c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b23      	cmp	r3, #35	; 0x23
 8009d96:	ddb7      	ble.n	8009d08 <mapprint+0x14>
		}
		printf("\r\n");
 8009d98:	4827      	ldr	r0, [pc, #156]	; (8009e38 <mapprint+0x144>)
 8009d9a:	f00c ff19 	bl	8016bd0 <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d9e:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <mapprint+0x128>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3301      	adds	r3, #1
 8009da4:	4a1d      	ldr	r2, [pc, #116]	; (8009e1c <mapprint+0x128>)
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <mapprint+0x128>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b08      	cmp	r3, #8
 8009dae:	dda7      	ble.n	8009d00 <mapprint+0xc>
	}

	printf("\r\n");
 8009db0:	4821      	ldr	r0, [pc, #132]	; (8009e38 <mapprint+0x144>)
 8009db2:	f00c ff0d 	bl	8016bd0 <puts>
	printf("\r\n");
 8009db6:	4820      	ldr	r0, [pc, #128]	; (8009e38 <mapprint+0x144>)
 8009db8:	f00c ff0a 	bl	8016bd0 <puts>


	//歩数マッ?��?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009dbc:	4b17      	ldr	r3, [pc, #92]	; (8009e1c <mapprint+0x128>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	e024      	b.n	8009e0e <mapprint+0x11a>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009dc4:	4b16      	ldr	r3, [pc, #88]	; (8009e20 <mapprint+0x12c>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	e011      	b.n	8009df0 <mapprint+0xfc>
			printf("%u  ",work_ram[k]);
 8009dcc:	4b15      	ldr	r3, [pc, #84]	; (8009e24 <mapprint+0x130>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a15      	ldr	r2, [pc, #84]	; (8009e28 <mapprint+0x134>)
 8009dd2:	5cd3      	ldrb	r3, [r2, r3]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4819      	ldr	r0, [pc, #100]	; (8009e3c <mapprint+0x148>)
 8009dd8:	f00c fe86 	bl	8016ae8 <iprintf>
			k++;
 8009ddc:	4b11      	ldr	r3, [pc, #68]	; (8009e24 <mapprint+0x130>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	4a10      	ldr	r2, [pc, #64]	; (8009e24 <mapprint+0x130>)
 8009de4:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009de6:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <mapprint+0x12c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3301      	adds	r3, #1
 8009dec:	4a0c      	ldr	r2, [pc, #48]	; (8009e20 <mapprint+0x12c>)
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <mapprint+0x12c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b08      	cmp	r3, #8
 8009df6:	dde9      	ble.n	8009dcc <mapprint+0xd8>
		}
		printf("\r\n");
 8009df8:	480f      	ldr	r0, [pc, #60]	; (8009e38 <mapprint+0x144>)
 8009dfa:	f00c fee9 	bl	8016bd0 <puts>
		printf("\r\n");
 8009dfe:	480e      	ldr	r0, [pc, #56]	; (8009e38 <mapprint+0x144>)
 8009e00:	f00c fee6 	bl	8016bd0 <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e04:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <mapprint+0x128>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	4a04      	ldr	r2, [pc, #16]	; (8009e1c <mapprint+0x128>)
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <mapprint+0x128>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b08      	cmp	r3, #8
 8009e14:	ddd6      	ble.n	8009dc4 <mapprint+0xd0>
	}
#endif
//	for(int i=0; i <=10; i++)
//	printf("保存データ :: %d \r\n",work_ram[i][0]);

}
 8009e16:	bf00      	nop
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	2000432c 	.word	0x2000432c
 8009e20:	20004330 	.word	0x20004330
 8009e24:	20004334 	.word	0x20004334
 8009e28:	20000318 	.word	0x20000318
 8009e2c:	08018948 	.word	0x08018948
 8009e30:	38e38e39 	.word	0x38e38e39
 8009e34:	0801894c 	.word	0x0801894c
 8009e38:	08018950 	.word	0x08018950
 8009e3c:	08018954 	.word	0x08018954

08009e40 <Flash_clear>:
// Flashのsectoe1を消去
bool Flash_clear()
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8009e46:	f008 fc8f 	bl	8012768 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009e52:	2302      	movs	r3, #2
 8009e54:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8009e56:	2301      	movs	r3, #1
 8009e58:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと???��?��??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009e5a:	1d3a      	adds	r2, r7, #4
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f008 fde0 	bl	8012a28 <HAL_FLASHEx_Erase>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8009e6c:	f008 fc9e 	bl	80127ac <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8009e70:	7ffb      	ldrb	r3, [r7, #31]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d105      	bne.n	8009e82 <Flash_clear+0x42>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7c:	d101      	bne.n	8009e82 <Flash_clear+0x42>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <Flash_clear+0x44>
 8009e82:	2300      	movs	r3, #0
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	b2db      	uxtb	r3, r3
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <Flash_load>:

// Flashのsector1のてwork_ramに読み出
// work_ramの先アドレスを返す
uint8_t* Flash_load() //uint8_t*
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);//BACKUP_FLASH_SECTOR_SIZE
 8009e98:	4a05      	ldr	r2, [pc, #20]	; (8009eb0 <Flash_load+0x1c>)
 8009e9a:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <Flash_load+0x20>)
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	f00c f9af 	bl	8016208 <memcpy>
    return work_ram;
 8009eaa:	4b01      	ldr	r3, [pc, #4]	; (8009eb0 <Flash_load+0x1c>)
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20000318 	.word	0x20000318
 8009eb4:	08004000 	.word	0x08004000

08009eb8 <Flash_store>:

// Flashのsector1を消去後�????��?��??��?��タを書き込
bool Flash_store()
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 8009ebe:	f7ff ffbf 	bl	8009e40 <Flash_clear>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f083 0301 	eor.w	r3, r3, #1
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <Flash_store+0x1a>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e02f      	b.n	8009f32 <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8009ed2:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <Flash_store+0x84>)
 8009ed4:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8009ed6:	f008 fc47 	bl	8012768 <HAL_FLASH_Unlock>

    // work_ramにある4バイトごとまとめて書き込
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8009eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ede:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60bb      	str	r3, [r7, #8]
 8009ee4:	e017      	b.n	8009f16 <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 8009eec:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 8009ef8:	f04f 0400 	mov.w	r4, #0
 8009efc:	461a      	mov	r2, r3
 8009efe:	4623      	mov	r3, r4
 8009f00:	2002      	movs	r0, #2
 8009f02:	f008 fb29 	bl	8012558 <HAL_FLASH_Program>
 8009f06:	4603      	mov	r3, r0
 8009f08:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d107      	bne.n	8009f20 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60bb      	str	r3, [r7, #8]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d3e3      	bcc.n	8009ee6 <Flash_store+0x2e>
 8009f1e:	e000      	b.n	8009f22 <Flash_store+0x6a>
        if (result != HAL_OK) break;
 8009f20:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8009f22:	f008 fc43 	bl	80127ac <HAL_FLASH_Lock>

    return result == HAL_OK;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd90      	pop	{r4, r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000318 	.word	0x20000318
 8009f40:	08004000 	.word	0x08004000

08009f44 <Emitter_ON>:
        printf("\r\n");
        HAL_Delay(T3);
}


void Emitter_ON(){  // 赤外線エミッタに出力比�?トグルモードを相補で
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4804      	ldr	r0, [pc, #16]	; (8009f5c <Emitter_ON+0x18>)
 8009f4c:	f00a faa8 	bl	80144a0 <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009f50:	2100      	movs	r1, #0
 8009f52:	4802      	ldr	r0, [pc, #8]	; (8009f5c <Emitter_ON+0x18>)
 8009f54:	f00b fadb 	bl	801550e <HAL_TIMEx_OCN_Start_IT>
#endif
}
 8009f58:	bf00      	nop
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	200043c8 	.word	0x200043c8

08009f60 <ADC_Start>:
#if 1
  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
#endif
}
void ADC_Start(){  //AD値のDMA
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog1, 3) != HAL_OK){
 8009f64:	2203      	movs	r2, #3
 8009f66:	490a      	ldr	r1, [pc, #40]	; (8009f90 <ADC_Start+0x30>)
 8009f68:	480a      	ldr	r0, [pc, #40]	; (8009f94 <ADC_Start+0x34>)
 8009f6a:	f007 fabb 	bl	80114e4 <HAL_ADC_Start_DMA>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <ADC_Start+0x18>
  		        Error_Handler();
 8009f74:	f006 fb8c 	bl	8010690 <Error_Handler>
  		    }

  if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog2, 2) != HAL_OK){
 8009f78:	2202      	movs	r2, #2
 8009f7a:	4907      	ldr	r1, [pc, #28]	; (8009f98 <ADC_Start+0x38>)
 8009f7c:	4807      	ldr	r0, [pc, #28]	; (8009f9c <ADC_Start+0x3c>)
 8009f7e:	f007 fab1 	bl	80114e4 <HAL_ADC_Start_DMA>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <ADC_Start+0x2c>
  		    	Error_Handler();
 8009f88:	f006 fb82 	bl	8010690 <Error_Handler>
 }
#endif
}
 8009f8c:	bf00      	nop
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000300 	.word	0x20000300
 8009f94:	20004588 	.word	0x20004588
 8009f98:	20000308 	.word	0x20000308
 8009f9c:	2000444c 	.word	0x2000444c

08009fa0 <Encoder_Start>:
  if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK){
  		    	Error_Handler();
            }
#endif
}
void Encoder_Start(){  //TIM3_Left, TIM4_Right
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8009fa4:	213c      	movs	r1, #60	; 0x3c
 8009fa6:	4804      	ldr	r0, [pc, #16]	; (8009fb8 <Encoder_Start+0x18>)
 8009fa8:	f00a fc5c 	bl	8014864 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8009fac:	213c      	movs	r1, #60	; 0x3c
 8009fae:	4803      	ldr	r0, [pc, #12]	; (8009fbc <Encoder_Start+0x1c>)
 8009fb0:	f00a fc58 	bl	8014864 <HAL_TIM_Encoder_Start>
}
 8009fb4:	bf00      	nop
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	200044e8 	.word	0x200044e8
 8009fbc:	2000440c 	.word	0x2000440c

08009fc0 <Motor_PWM_Start>:
void Encoder_Stop(){

}
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 8009fc4:	210c      	movs	r1, #12
 8009fc6:	4809      	ldr	r0, [pc, #36]	; (8009fec <Motor_PWM_Start+0x2c>)
 8009fc8:	f00a fb24 	bl	8014614 <HAL_TIM_PWM_Start>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <Motor_PWM_Start+0x16>
	 	    	            Error_Handler();
 8009fd2:	f006 fb5d 	bl	8010690 <Error_Handler>
	 	    	        }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK){
 8009fd6:	2104      	movs	r1, #4
 8009fd8:	4805      	ldr	r0, [pc, #20]	; (8009ff0 <Motor_PWM_Start+0x30>)
 8009fda:	f00a fb1b 	bl	8014614 <HAL_TIM_PWM_Start>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <Motor_PWM_Start+0x28>
	 	    	            Error_Handler();
 8009fe4:	f006 fb54 	bl	8010690 <Error_Handler>
	 	    	        }


#endif
}
 8009fe8:	bf00      	nop
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20004fb0 	.word	0x20004fb0
 8009ff0:	200044a4 	.word	0x200044a4

08009ff4 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK){
 8009ff8:	210c      	movs	r1, #12
 8009ffa:	4809      	ldr	r0, [pc, #36]	; (800a020 <Motor_PWM_Stop+0x2c>)
 8009ffc:	f00a fb48 	bl	8014690 <HAL_TIM_PWM_Stop>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <Motor_PWM_Stop+0x16>
	 	    	            Error_Handler();
 800a006:	f006 fb43 	bl	8010690 <Error_Handler>
	 }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a00a:	2104      	movs	r1, #4
 800a00c:	4805      	ldr	r0, [pc, #20]	; (800a024 <Motor_PWM_Stop+0x30>)
 800a00e:	f00a fb3f 	bl	8014690 <HAL_TIM_PWM_Stop>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <Motor_PWM_Stop+0x28>
	 	    	            Error_Handler();
 800a018:	f006 fb3a 	bl	8010690 <Error_Handler>
	 }

#endif
}
 800a01c:	bf00      	nop
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20004fb0 	.word	0x20004fb0
 800a024:	200044a4 	.word	0x200044a4

0800a028 <Init>:
void PWM_Log(){
//左右のモータのカウント�?�を�?��?�に格�?


}
void Init() { // 諸
 800a028:	b580      	push	{r7, lr}
 800a02a:	af00      	add	r7, sp, #0

	Emitter_ON();
 800a02c:	f7ff ff8a 	bl	8009f44 <Emitter_ON>
	ADC_Start();
 800a030:	f7ff ff96 	bl	8009f60 <ADC_Start>
	IMU_init();
 800a034:	f7ff fbc0 	bl	80097b8 <IMU_init>
	Motor_PWM_Start();
 800a038:	f7ff ffc2 	bl	8009fc0 <Motor_PWM_Start>
	 if (HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1) != HAL_OK){
	 	  	  	          Error_Handler();
	 }

#endif
}
 800a03c:	bf00      	nop
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <IMU_Get_Data>:
/*---- DEFINING FUNCTION ----*/
double lowpass_filter(float x, float x0, float r)
{
	return ((r)*(x) + (1.0 - (r))* (x0));
}
double IMU_Get_Data(){// IMUの値を取
 800a040:	b5b0      	push	{r4, r5, r7, lr}
 800a042:	af00      	add	r7, sp, #0
#if 1
	//int i = 0;
	static double  /*imu_pre_angle=0,*/ imu_accel=0, imu_pre_accel=0;

    read_gyro_data();
 800a044:	f7ff fbe2 	bl	800980c <read_gyro_data>
    read_accel_data();
 800a048:	f7ff fc18 	bl	800987c <read_accel_data>

    //atan2(za,xa);
	imu_accel =  ( ( (double)zg - offset/*2.0*/ )/16.4) * PI /180;
 800a04c:	4b56      	ldr	r3, [pc, #344]	; (800a1a8 <IMU_Get_Data+0x168>)
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	b21b      	sxth	r3, r3
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe f99e 	bl	8008394 <__aeabi_i2d>
 800a058:	4b54      	ldr	r3, [pc, #336]	; (800a1ac <IMU_Get_Data+0x16c>)
 800a05a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a05e:	461a      	mov	r2, r3
 800a060:	4623      	mov	r3, r4
 800a062:	f7fe f849 	bl	80080f8 <__aeabi_dsub>
 800a066:	4603      	mov	r3, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	4618      	mov	r0, r3
 800a06c:	4621      	mov	r1, r4
 800a06e:	a348      	add	r3, pc, #288	; (adr r3, 800a190 <IMU_Get_Data+0x150>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f7fe fb22 	bl	80086bc <__aeabi_ddiv>
 800a078:	4603      	mov	r3, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	4618      	mov	r0, r3
 800a07e:	4621      	mov	r1, r4
 800a080:	a345      	add	r3, pc, #276	; (adr r3, 800a198 <IMU_Get_Data+0x158>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7fe f9ef 	bl	8008468 <__aeabi_dmul>
 800a08a:	4603      	mov	r3, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	4618      	mov	r0, r3
 800a090:	4621      	mov	r1, r4
 800a092:	f04f 0200 	mov.w	r2, #0
 800a096:	4b46      	ldr	r3, [pc, #280]	; (800a1b0 <IMU_Get_Data+0x170>)
 800a098:	f7fe fb10 	bl	80086bc <__aeabi_ddiv>
 800a09c:	4603      	mov	r3, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	4a44      	ldr	r2, [pc, #272]	; (800a1b4 <IMU_Get_Data+0x174>)
 800a0a2:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle += (imu_pre_accel + imu_accel) * T1 / 2;
 800a0a6:	4b44      	ldr	r3, [pc, #272]	; (800a1b8 <IMU_Get_Data+0x178>)
 800a0a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0ac:	4b41      	ldr	r3, [pc, #260]	; (800a1b4 <IMU_Get_Data+0x174>)
 800a0ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	4623      	mov	r3, r4
 800a0b6:	f7fe f821 	bl	80080fc <__adddf3>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	460c      	mov	r4, r1
 800a0be:	4618      	mov	r0, r3
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	a337      	add	r3, pc, #220	; (adr r3, 800a1a0 <IMU_Get_Data+0x160>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f7fe f9ce 	bl	8008468 <__aeabi_dmul>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0dc:	f7fe faee 	bl	80086bc <__aeabi_ddiv>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4b34      	ldr	r3, [pc, #208]	; (800a1bc <IMU_Get_Data+0x17c>)
 800a0ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	f7fe f803 	bl	80080fc <__adddf3>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	4a30      	ldr	r2, [pc, #192]	; (800a1bc <IMU_Get_Data+0x17c>)
 800a0fc:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle -= drift_fix * PI /180;
 800a100:	4b2e      	ldr	r3, [pc, #184]	; (800a1bc <IMU_Get_Data+0x17c>)
 800a102:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a106:	4b2e      	ldr	r3, [pc, #184]	; (800a1c0 <IMU_Get_Data+0x180>)
 800a108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a10c:	a322      	add	r3, pc, #136	; (adr r3, 800a198 <IMU_Get_Data+0x158>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	f7fe f9a9 	bl	8008468 <__aeabi_dmul>
 800a116:	4602      	mov	r2, r0
 800a118:	460b      	mov	r3, r1
 800a11a:	4610      	mov	r0, r2
 800a11c:	4619      	mov	r1, r3
 800a11e:	f04f 0200 	mov.w	r2, #0
 800a122:	4b23      	ldr	r3, [pc, #140]	; (800a1b0 <IMU_Get_Data+0x170>)
 800a124:	f7fe faca 	bl	80086bc <__aeabi_ddiv>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	4620      	mov	r0, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	f7fd ffe2 	bl	80080f8 <__aeabi_dsub>
 800a134:	4603      	mov	r3, r0
 800a136:	460c      	mov	r4, r1
 800a138:	4a20      	ldr	r2, [pc, #128]	; (800a1bc <IMU_Get_Data+0x17c>)
 800a13a:	e9c2 3400 	strd	r3, r4, [r2]
	imu_pre_accel = imu_accel;
 800a13e:	4b1d      	ldr	r3, [pc, #116]	; (800a1b4 <IMU_Get_Data+0x174>)
 800a140:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a144:	4a1c      	ldr	r2, [pc, #112]	; (800a1b8 <IMU_Get_Data+0x178>)
 800a146:	e9c2 3400 	strd	r3, r4, [r2]
	//imu_pre_angle = imu_angle;

	//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
	Body_angle = imu_angle * 180 / PI;
 800a14a:	4b1c      	ldr	r3, [pc, #112]	; (800a1bc <IMU_Get_Data+0x17c>)
 800a14c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a150:	f04f 0200 	mov.w	r2, #0
 800a154:	4b16      	ldr	r3, [pc, #88]	; (800a1b0 <IMU_Get_Data+0x170>)
 800a156:	f7fe f987 	bl	8008468 <__aeabi_dmul>
 800a15a:	4603      	mov	r3, r0
 800a15c:	460c      	mov	r4, r1
 800a15e:	4618      	mov	r0, r3
 800a160:	4621      	mov	r1, r4
 800a162:	a30d      	add	r3, pc, #52	; (adr r3, 800a198 <IMU_Get_Data+0x158>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	f7fe faa8 	bl	80086bc <__aeabi_ddiv>
 800a16c:	4603      	mov	r3, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4a14      	ldr	r2, [pc, #80]	; (800a1c4 <IMU_Get_Data+0x184>)
 800a172:	e9c2 3400 	strd	r3, r4, [r2]

	  return imu_accel;
 800a176:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <IMU_Get_Data+0x174>)
 800a178:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a17c:	ec44 3b17 	vmov	d7, r3, r4
		//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
		Body_angle = imu_angle * 180 / PI;

		  return LPF;
#endif
}
 800a180:	eeb0 0a47 	vmov.f32	s0, s14
 800a184:	eef0 0a67 	vmov.f32	s1, s15
 800a188:	bdb0      	pop	{r4, r5, r7, pc}
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w
 800a190:	66666666 	.word	0x66666666
 800a194:	40306666 	.word	0x40306666
 800a198:	54442d18 	.word	0x54442d18
 800a19c:	400921fb 	.word	0x400921fb
 800a1a0:	d2f1a9fc 	.word	0xd2f1a9fc
 800a1a4:	3f50624d 	.word	0x3f50624d
 800a1a8:	200043ae 	.word	0x200043ae
 800a1ac:	200002d8 	.word	0x200002d8
 800a1b0:	40668000 	.word	0x40668000
 800a1b4:	20004338 	.word	0x20004338
 800a1b8:	20004340 	.word	0x20004340
 800a1bc:	200002c8 	.word	0x200002c8
 800a1c0:	20000018 	.word	0x20000018
 800a1c4:	200002c0 	.word	0x200002c0

0800a1c8 <IMU_Control>:
void IMU_Control(double target, double now, double T, double KP, double KI, double KD){
 800a1c8:	b5b0      	push	{r4, r5, r7, lr}
 800a1ca:	b090      	sub	sp, #64	; 0x40
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800a1d2:	ed87 1b08 	vstr	d1, [r7, #32]
 800a1d6:	ed87 2b06 	vstr	d2, [r7, #24]
 800a1da:	ed87 3b04 	vstr	d3, [r7, #16]
 800a1de:	ed87 4b02 	vstr	d4, [r7, #8]
 800a1e2:	ed87 5b00 	vstr	d5, [r7]

	static double  ei=0, e0=0;
	double e=0,ed=0;
 800a1e6:	f04f 0300 	mov.w	r3, #0
 800a1ea:	f04f 0400 	mov.w	r4, #0
 800a1ee:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800a1f2:	f04f 0300 	mov.w	r3, #0
 800a1f6:	f04f 0400 	mov.w	r4, #0
 800a1fa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(mode.imu == 0 || (Target_velocity == 0 && Target_Rad_velo == 0)){
 800a1fe:	4b71      	ldr	r3, [pc, #452]	; (800a3c4 <IMU_Control+0x1fc>)
 800a200:	799b      	ldrb	r3, [r3, #6]
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00f      	beq.n	800a22c <IMU_Control+0x64>
 800a20c:	4b6e      	ldr	r3, [pc, #440]	; (800a3c8 <IMU_Control+0x200>)
 800a20e:	edd3 7a00 	vldr	s15, [r3]
 800a212:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21a:	d115      	bne.n	800a248 <IMU_Control+0x80>
 800a21c:	4b6b      	ldr	r3, [pc, #428]	; (800a3cc <IMU_Control+0x204>)
 800a21e:	edd3 7a00 	vldr	s15, [r3]
 800a222:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22a:	d10d      	bne.n	800a248 <IMU_Control+0x80>

		ei = 0;
 800a22c:	4a68      	ldr	r2, [pc, #416]	; (800a3d0 <IMU_Control+0x208>)
 800a22e:	f04f 0300 	mov.w	r3, #0
 800a232:	f04f 0400 	mov.w	r4, #0
 800a236:	e9c2 3400 	strd	r3, r4, [r2]
		e0=0;
 800a23a:	4a66      	ldr	r2, [pc, #408]	; (800a3d4 <IMU_Control+0x20c>)
 800a23c:	f04f 0300 	mov.w	r3, #0
 800a240:	f04f 0400 	mov.w	r4, #0
 800a244:	e9c2 3400 	strd	r3, r4, [r2]
	}
	mode.imu = 1;
 800a248:	4a5e      	ldr	r2, [pc, #376]	; (800a3c4 <IMU_Control+0x1fc>)
 800a24a:	7993      	ldrb	r3, [r2, #6]
 800a24c:	f043 0301 	orr.w	r3, r3, #1
 800a250:	7193      	strb	r3, [r2, #6]

	e = target - now;
 800a252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a256:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a25a:	f7fd ff4d 	bl	80080f8 <__aeabi_dsub>
 800a25e:	4603      	mov	r3, r0
 800a260:	460c      	mov	r4, r1
 800a262:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	ei += e * T;
 800a266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a26a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a26e:	f7fe f8fb 	bl	8008468 <__aeabi_dmul>
 800a272:	4603      	mov	r3, r0
 800a274:	460c      	mov	r4, r1
 800a276:	4618      	mov	r0, r3
 800a278:	4621      	mov	r1, r4
 800a27a:	4b55      	ldr	r3, [pc, #340]	; (800a3d0 <IMU_Control+0x208>)
 800a27c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a280:	461a      	mov	r2, r3
 800a282:	4623      	mov	r3, r4
 800a284:	f7fd ff3a 	bl	80080fc <__adddf3>
 800a288:	4603      	mov	r3, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	4a50      	ldr	r2, [pc, #320]	; (800a3d0 <IMU_Control+0x208>)
 800a28e:	e9c2 3400 	strd	r3, r4, [r2]
	ed = (e- e0) / T;
 800a292:	4b50      	ldr	r3, [pc, #320]	; (800a3d4 <IMU_Control+0x20c>)
 800a294:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a298:	461a      	mov	r2, r3
 800a29a:	4623      	mov	r3, r4
 800a29c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a2a0:	f7fd ff2a 	bl	80080f8 <__aeabi_dsub>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2b0:	f7fe fa04 	bl	80086bc <__aeabi_ddiv>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	e0 = e;
 800a2bc:	4a45      	ldr	r2, [pc, #276]	; (800a3d4 <IMU_Control+0x20c>)
 800a2be:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800a2c2:	e9c2 3400 	strd	r3, r4, [r2]

	L_angular_velocity = -(int16_t)round(KP*e + KI*ei + KD*ed);
 800a2c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a2ce:	f7fe f8cb 	bl	8008468 <__aeabi_dmul>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	4625      	mov	r5, r4
 800a2d8:	461c      	mov	r4, r3
 800a2da:	4b3d      	ldr	r3, [pc, #244]	; (800a3d0 <IMU_Control+0x208>)
 800a2dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2e4:	f7fe f8c0 	bl	8008468 <__aeabi_dmul>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7fd ff04 	bl	80080fc <__adddf3>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	4625      	mov	r5, r4
 800a2fa:	461c      	mov	r4, r3
 800a2fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a300:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a304:	f7fe f8b0 	bl	8008468 <__aeabi_dmul>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4620      	mov	r0, r4
 800a30e:	4629      	mov	r1, r5
 800a310:	f7fd fef4 	bl	80080fc <__adddf3>
 800a314:	4603      	mov	r3, r0
 800a316:	460c      	mov	r4, r1
 800a318:	ec44 3b17 	vmov	d7, r3, r4
 800a31c:	eeb0 0a47 	vmov.f32	s0, s14
 800a320:	eef0 0a67 	vmov.f32	s1, s15
 800a324:	f00b fefc 	bl	8016120 <round>
 800a328:	ec54 3b10 	vmov	r3, r4, d0
 800a32c:	4618      	mov	r0, r3
 800a32e:	4621      	mov	r1, r4
 800a330:	f7fe fb4a 	bl	80089c8 <__aeabi_d2iz>
 800a334:	4603      	mov	r3, r0
 800a336:	b21b      	sxth	r3, r3
 800a338:	b29b      	uxth	r3, r3
 800a33a:	425b      	negs	r3, r3
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	b21a      	sxth	r2, r3
 800a340:	4b25      	ldr	r3, [pc, #148]	; (800a3d8 <IMU_Control+0x210>)
 800a342:	801a      	strh	r2, [r3, #0]
	R_angular_velocity =  (int16_t)round(KP*e + KI*ei + KD*ed);
 800a344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a348:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a34c:	f7fe f88c 	bl	8008468 <__aeabi_dmul>
 800a350:	4603      	mov	r3, r0
 800a352:	460c      	mov	r4, r1
 800a354:	4625      	mov	r5, r4
 800a356:	461c      	mov	r4, r3
 800a358:	4b1d      	ldr	r3, [pc, #116]	; (800a3d0 <IMU_Control+0x208>)
 800a35a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a35e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a362:	f7fe f881 	bl	8008468 <__aeabi_dmul>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4620      	mov	r0, r4
 800a36c:	4629      	mov	r1, r5
 800a36e:	f7fd fec5 	bl	80080fc <__adddf3>
 800a372:	4603      	mov	r3, r0
 800a374:	460c      	mov	r4, r1
 800a376:	4625      	mov	r5, r4
 800a378:	461c      	mov	r4, r3
 800a37a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a37e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a382:	f7fe f871 	bl	8008468 <__aeabi_dmul>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7fd feb5 	bl	80080fc <__adddf3>
 800a392:	4603      	mov	r3, r0
 800a394:	460c      	mov	r4, r1
 800a396:	ec44 3b17 	vmov	d7, r3, r4
 800a39a:	eeb0 0a47 	vmov.f32	s0, s14
 800a39e:	eef0 0a67 	vmov.f32	s1, s15
 800a3a2:	f00b febd 	bl	8016120 <round>
 800a3a6:	ec54 3b10 	vmov	r3, r4, d0
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	f7fe fb0b 	bl	80089c8 <__aeabi_d2iz>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	b21a      	sxth	r2, r3
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <IMU_Control+0x214>)
 800a3b8:	801a      	strh	r2, [r3, #0]

	//b 車体度0は前回の速度制御
}
 800a3ba:	bf00      	nop
 800a3bc:	3740      	adds	r7, #64	; 0x40
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20000074 	.word	0x20000074
 800a3c8:	200002b8 	.word	0x200002b8
 800a3cc:	200002bc 	.word	0x200002bc
 800a3d0:	20004348 	.word	0x20004348
 800a3d4:	20004350 	.word	0x20004350
 800a3d8:	20004392 	.word	0x20004392
 800a3dc:	20004396 	.word	0x20004396

0800a3e0 <IMU_Calib>:
void IMU_Calib(){
 800a3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e2:	b089      	sub	sp, #36	; 0x24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	466b      	mov	r3, sp
 800a3e8:	461e      	mov	r6, r3

	HAL_Delay(1000);
 800a3ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a3ee:	f006 fed3 	bl	8011198 <HAL_Delay>

	int16_t num = 2000;
 800a3f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a3f6:	81fb      	strh	r3, [r7, #14]
	double zg_vals[num];
 800a3f8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	3b01      	subs	r3, #1
 800a400:	60bb      	str	r3, [r7, #8]
 800a402:	4603      	mov	r3, r0
 800a404:	4619      	mov	r1, r3
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	f04f 0300 	mov.w	r3, #0
 800a40e:	f04f 0400 	mov.w	r4, #0
 800a412:	0194      	lsls	r4, r2, #6
 800a414:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a418:	018b      	lsls	r3, r1, #6
 800a41a:	4603      	mov	r3, r0
 800a41c:	4619      	mov	r1, r3
 800a41e:	f04f 0200 	mov.w	r2, #0
 800a422:	f04f 0300 	mov.w	r3, #0
 800a426:	f04f 0400 	mov.w	r4, #0
 800a42a:	0194      	lsls	r4, r2, #6
 800a42c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a430:	018b      	lsls	r3, r1, #6
 800a432:	4603      	mov	r3, r0
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	3307      	adds	r3, #7
 800a438:	3307      	adds	r3, #7
 800a43a:	08db      	lsrs	r3, r3, #3
 800a43c:	00db      	lsls	r3, r3, #3
 800a43e:	ebad 0d03 	sub.w	sp, sp, r3
 800a442:	466b      	mov	r3, sp
 800a444:	3307      	adds	r3, #7
 800a446:	08db      	lsrs	r3, r3, #3
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	607b      	str	r3, [r7, #4]
	double sum;
	for(uint16_t i = 0; i < num; i++){
 800a44c:	2300      	movs	r3, #0
 800a44e:	83fb      	strh	r3, [r7, #30]
 800a450:	e023      	b.n	800a49a <IMU_Calib+0xba>
		zg_vals[i] = (double)zg;
 800a452:	4b20      	ldr	r3, [pc, #128]	; (800a4d4 <IMU_Calib+0xf4>)
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b21b      	sxth	r3, r3
 800a458:	8bfd      	ldrh	r5, [r7, #30]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fd ff9a 	bl	8008394 <__aeabi_i2d>
 800a460:	4603      	mov	r3, r0
 800a462:	460c      	mov	r4, r1
 800a464:	6879      	ldr	r1, [r7, #4]
 800a466:	00ea      	lsls	r2, r5, #3
 800a468:	440a      	add	r2, r1
 800a46a:	e9c2 3400 	strd	r3, r4, [r2]
		sum += zg_vals[i];
 800a46e:	8bfb      	ldrh	r3, [r7, #30]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	4413      	add	r3, r2
 800a476:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a47a:	461a      	mov	r2, r3
 800a47c:	4623      	mov	r3, r4
 800a47e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a482:	f7fd fe3b 	bl	80080fc <__adddf3>
 800a486:	4603      	mov	r3, r0
 800a488:	460c      	mov	r4, r1
 800a48a:	e9c7 3404 	strd	r3, r4, [r7, #16]
		HAL_Delay(2);
 800a48e:	2002      	movs	r0, #2
 800a490:	f006 fe82 	bl	8011198 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 800a494:	8bfb      	ldrh	r3, [r7, #30]
 800a496:	3301      	adds	r3, #1
 800a498:	83fb      	strh	r3, [r7, #30]
 800a49a:	8bfa      	ldrh	r2, [r7, #30]
 800a49c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	dbd6      	blt.n	800a452 <IMU_Calib+0x72>
	}

	offset = sum / num;
 800a4a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fd ff73 	bl	8008394 <__aeabi_i2d>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4623      	mov	r3, r4
 800a4b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a4ba:	f7fe f8ff 	bl	80086bc <__aeabi_ddiv>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	4a05      	ldr	r2, [pc, #20]	; (800a4d8 <IMU_Calib+0xf8>)
 800a4c4:	e9c2 3400 	strd	r3, r4, [r2]
 800a4c8:	46b5      	mov	sp, r6
}
 800a4ca:	bf00      	nop
 800a4cc:	3724      	adds	r7, #36	; 0x24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200043ae 	.word	0x200043ae
 800a4d8:	200002d8 	.word	0x200002d8

0800a4dc <LED_Change>:

void LED_Change(){
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
	//Switch
	switch(mode.LED){
 800a4e0:	4b5a      	ldr	r3, [pc, #360]	; (800a64c <LED_Change+0x170>)
 800a4e2:	f993 3000 	ldrsb.w	r3, [r3]
 800a4e6:	2b07      	cmp	r3, #7
 800a4e8:	f200 80ac 	bhi.w	800a644 <LED_Change+0x168>
 800a4ec:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <LED_Change+0x18>)
 800a4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f2:	bf00      	nop
 800a4f4:	0800a515 	.word	0x0800a515
 800a4f8:	0800a53b 	.word	0x0800a53b
 800a4fc:	0800a561 	.word	0x0800a561
 800a500:	0800a587 	.word	0x0800a587
 800a504:	0800a5ad 	.word	0x0800a5ad
 800a508:	0800a5d3 	.word	0x0800a5d3
 800a50c:	0800a5f9 	.word	0x0800a5f9
 800a510:	0800a61f 	.word	0x0800a61f
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a514:	2200      	movs	r2, #0
 800a516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a51a:	484d      	ldr	r0, [pc, #308]	; (800a650 <LED_Change+0x174>)
 800a51c:	f008 fd40 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a520:	2200      	movs	r2, #0
 800a522:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a526:	484a      	ldr	r0, [pc, #296]	; (800a650 <LED_Change+0x174>)
 800a528:	f008 fd3a 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a52c:	2200      	movs	r2, #0
 800a52e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a532:	4848      	ldr	r0, [pc, #288]	; (800a654 <LED_Change+0x178>)
 800a534:	f008 fd34 	bl	8012fa0 <HAL_GPIO_WritePin>
		break;
 800a538:	e085      	b.n	800a646 <LED_Change+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a53a:	2201      	movs	r2, #1
 800a53c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a540:	4843      	ldr	r0, [pc, #268]	; (800a650 <LED_Change+0x174>)
 800a542:	f008 fd2d 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a546:	2200      	movs	r2, #0
 800a548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a54c:	4840      	ldr	r0, [pc, #256]	; (800a650 <LED_Change+0x174>)
 800a54e:	f008 fd27 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a552:	2200      	movs	r2, #0
 800a554:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a558:	483e      	ldr	r0, [pc, #248]	; (800a654 <LED_Change+0x178>)
 800a55a:	f008 fd21 	bl	8012fa0 <HAL_GPIO_WritePin>
		break;
 800a55e:	e072      	b.n	800a646 <LED_Change+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a560:	2200      	movs	r2, #0
 800a562:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a566:	483a      	ldr	r0, [pc, #232]	; (800a650 <LED_Change+0x174>)
 800a568:	f008 fd1a 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a56c:	2201      	movs	r2, #1
 800a56e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a572:	4837      	ldr	r0, [pc, #220]	; (800a650 <LED_Change+0x174>)
 800a574:	f008 fd14 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a578:	2200      	movs	r2, #0
 800a57a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a57e:	4835      	ldr	r0, [pc, #212]	; (800a654 <LED_Change+0x178>)
 800a580:	f008 fd0e 	bl	8012fa0 <HAL_GPIO_WritePin>

		break;
 800a584:	e05f      	b.n	800a646 <LED_Change+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a586:	2201      	movs	r2, #1
 800a588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a58c:	4830      	ldr	r0, [pc, #192]	; (800a650 <LED_Change+0x174>)
 800a58e:	f008 fd07 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a592:	2201      	movs	r2, #1
 800a594:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a598:	482d      	ldr	r0, [pc, #180]	; (800a650 <LED_Change+0x174>)
 800a59a:	f008 fd01 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5a4:	482b      	ldr	r0, [pc, #172]	; (800a654 <LED_Change+0x178>)
 800a5a6:	f008 fcfb 	bl	8012fa0 <HAL_GPIO_WritePin>
		break;
 800a5aa:	e04c      	b.n	800a646 <LED_Change+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5b2:	4827      	ldr	r0, [pc, #156]	; (800a650 <LED_Change+0x174>)
 800a5b4:	f008 fcf4 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5be:	4824      	ldr	r0, [pc, #144]	; (800a650 <LED_Change+0x174>)
 800a5c0:	f008 fcee 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5ca:	4822      	ldr	r0, [pc, #136]	; (800a654 <LED_Change+0x178>)
 800a5cc:	f008 fce8 	bl	8012fa0 <HAL_GPIO_WritePin>
		break;
 800a5d0:	e039      	b.n	800a646 <LED_Change+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5d8:	481d      	ldr	r0, [pc, #116]	; (800a650 <LED_Change+0x174>)
 800a5da:	f008 fce1 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5e4:	481a      	ldr	r0, [pc, #104]	; (800a650 <LED_Change+0x174>)
 800a5e6:	f008 fcdb 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5f0:	4818      	ldr	r0, [pc, #96]	; (800a654 <LED_Change+0x178>)
 800a5f2:	f008 fcd5 	bl	8012fa0 <HAL_GPIO_WritePin>
		break;
 800a5f6:	e026      	b.n	800a646 <LED_Change+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5fe:	4814      	ldr	r0, [pc, #80]	; (800a650 <LED_Change+0x174>)
 800a600:	f008 fcce 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a604:	2201      	movs	r2, #1
 800a606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a60a:	4811      	ldr	r0, [pc, #68]	; (800a650 <LED_Change+0x174>)
 800a60c:	f008 fcc8 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a610:	2201      	movs	r2, #1
 800a612:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a616:	480f      	ldr	r0, [pc, #60]	; (800a654 <LED_Change+0x178>)
 800a618:	f008 fcc2 	bl	8012fa0 <HAL_GPIO_WritePin>

		break;
 800a61c:	e013      	b.n	800a646 <LED_Change+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a61e:	2201      	movs	r2, #1
 800a620:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a624:	480a      	ldr	r0, [pc, #40]	; (800a650 <LED_Change+0x174>)
 800a626:	f008 fcbb 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a62a:	2201      	movs	r2, #1
 800a62c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a630:	4807      	ldr	r0, [pc, #28]	; (800a650 <LED_Change+0x174>)
 800a632:	f008 fcb5 	bl	8012fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a636:	2201      	movs	r2, #1
 800a638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a63c:	4805      	ldr	r0, [pc, #20]	; (800a654 <LED_Change+0x178>)
 800a63e:	f008 fcaf 	bl	8012fa0 <HAL_GPIO_WritePin>

		break;
 800a642:	e000      	b.n	800a646 <LED_Change+0x16a>
	default: break;
 800a644:	bf00      	nop

	}
}
 800a646:	bf00      	nop
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000074 	.word	0x20000074
 800a650:	40020800 	.word	0x40020800
 800a654:	40020400 	.word	0x40020400

0800a658 <Motor_Switch>:
void Motor_Switch(int16_t L, int16_t R){
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	460a      	mov	r2, r1
 800a662:	80fb      	strh	r3, [r7, #6]
 800a664:	4613      	mov	r3, r2
 800a666:	80bb      	strh	r3, [r7, #4]
	if (L > 0 ){
 800a668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	dd05      	ble.n	800a67c <Motor_Switch+0x24>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //A2が左SET:1で正転
 800a670:	2201      	movs	r2, #1
 800a672:	2104      	movs	r1, #4
 800a674:	4822      	ldr	r0, [pc, #136]	; (800a700 <Motor_Switch+0xa8>)
 800a676:	f008 fc93 	bl	8012fa0 <HAL_GPIO_WritePin>
 800a67a:	e00c      	b.n	800a696 <Motor_Switch+0x3e>

	}
	else  if (L < 0){
 800a67c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a680:	2b00      	cmp	r3, #0
 800a682:	da08      	bge.n	800a696 <Motor_Switch+0x3e>
		//to +
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800a684:	2200      	movs	r2, #0
 800a686:	2104      	movs	r1, #4
 800a688:	481d      	ldr	r0, [pc, #116]	; (800a700 <Motor_Switch+0xa8>)
 800a68a:	f008 fc89 	bl	8012fa0 <HAL_GPIO_WritePin>
		L = -L;
 800a68e:	88fb      	ldrh	r3, [r7, #6]
 800a690:	425b      	negs	r3, r3
 800a692:	b29b      	uxth	r3, r3
 800a694:	80fb      	strh	r3, [r7, #6]
	}
	if (R > 0){
 800a696:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	dd05      	ble.n	800a6aa <Motor_Switch+0x52>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	4817      	ldr	r0, [pc, #92]	; (800a700 <Motor_Switch+0xa8>)
 800a6a4:	f008 fc7c 	bl	8012fa0 <HAL_GPIO_WritePin>
 800a6a8:	e00c      	b.n	800a6c4 <Motor_Switch+0x6c>

	}

	else if (R < 0){
 800a6aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	da08      	bge.n	800a6c4 <Motor_Switch+0x6c>
	  	//to +
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //A0が右,SET:1で正転
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	4812      	ldr	r0, [pc, #72]	; (800a700 <Motor_Switch+0xa8>)
 800a6b8:	f008 fc72 	bl	8012fa0 <HAL_GPIO_WritePin>
	  	R = -R;
 800a6bc:	88bb      	ldrh	r3, [r7, #4]
 800a6be:	425b      	negs	r3, r3
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	80bb      	strh	r3, [r7, #4]
	}

	if(L > 4000) L = 4000;//3200
 800a6c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6c8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800a6cc:	dd02      	ble.n	800a6d4 <Motor_Switch+0x7c>
 800a6ce:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a6d2:	80fb      	strh	r3, [r7, #6]
	if(R > 4000) R= 4000;//定�?�6V未�?
 800a6d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a6d8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800a6dc:	dd02      	ble.n	800a6e4 <Motor_Switch+0x8c>
 800a6de:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a6e2:	80bb      	strh	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, L); //tim2ch4が左
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <Motor_Switch+0xac>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6ec:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, R); //tim5ch2が右
 800a6ee:	4b06      	ldr	r3, [pc, #24]	; (800a708 <Motor_Switch+0xb0>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a6f6:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	40020000 	.word	0x40020000
 800a704:	20004fb0 	.word	0x20004fb0
 800a708:	200044a4 	.word	0x200044a4

0800a70c <ADC_Get_Data>:

void ADC_Get_Data(){
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0

	static int count = 0;

	    sl_ad1_10 = analog1[0];
 800a710:	4b80      	ldr	r3, [pc, #512]	; (800a914 <ADC_Get_Data+0x208>)
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	b21a      	sxth	r2, r3
 800a716:	4b80      	ldr	r3, [pc, #512]	; (800a918 <ADC_Get_Data+0x20c>)
 800a718:	801a      	strh	r2, [r3, #0]
		fr_ad1_14 = analog1[1];
 800a71a:	4b7e      	ldr	r3, [pc, #504]	; (800a914 <ADC_Get_Data+0x208>)
 800a71c:	885b      	ldrh	r3, [r3, #2]
 800a71e:	b21a      	sxth	r2, r3
 800a720:	4b7e      	ldr	r3, [pc, #504]	; (800a91c <ADC_Get_Data+0x210>)
 800a722:	801a      	strh	r2, [r3, #0]
		fl_ad2_11 = analog2[0];
 800a724:	4b7e      	ldr	r3, [pc, #504]	; (800a920 <ADC_Get_Data+0x214>)
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	b21a      	sxth	r2, r3
 800a72a:	4b7e      	ldr	r3, [pc, #504]	; (800a924 <ADC_Get_Data+0x218>)
 800a72c:	801a      	strh	r2, [r3, #0]
		sr_ad2_15 = analog2[1];
 800a72e:	4b7c      	ldr	r3, [pc, #496]	; (800a920 <ADC_Get_Data+0x214>)
 800a730:	885b      	ldrh	r3, [r3, #2]
 800a732:	b21a      	sxth	r2, r3
 800a734:	4b7c      	ldr	r3, [pc, #496]	; (800a928 <ADC_Get_Data+0x21c>)
 800a736:	801a      	strh	r2, [r3, #0]

	    sl_error = abs(sl_path - sl_ad1_10);
 800a738:	4b7c      	ldr	r3, [pc, #496]	; (800a92c <ADC_Get_Data+0x220>)
 800a73a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a73e:	461a      	mov	r2, r3
 800a740:	4b75      	ldr	r3, [pc, #468]	; (800a918 <ADC_Get_Data+0x20c>)
 800a742:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	bfb8      	it	lt
 800a74c:	425b      	neglt	r3, r3
 800a74e:	b21a      	sxth	r2, r3
 800a750:	4b77      	ldr	r3, [pc, #476]	; (800a930 <ADC_Get_Data+0x224>)
 800a752:	801a      	strh	r2, [r3, #0]
		fr_error = abs(fr_path - fr_ad1_14);
 800a754:	4b77      	ldr	r3, [pc, #476]	; (800a934 <ADC_Get_Data+0x228>)
 800a756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a75a:	461a      	mov	r2, r3
 800a75c:	4b6f      	ldr	r3, [pc, #444]	; (800a91c <ADC_Get_Data+0x210>)
 800a75e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	bfb8      	it	lt
 800a768:	425b      	neglt	r3, r3
 800a76a:	b21a      	sxth	r2, r3
 800a76c:	4b72      	ldr	r3, [pc, #456]	; (800a938 <ADC_Get_Data+0x22c>)
 800a76e:	801a      	strh	r2, [r3, #0]
	    fl_error = abs(fl_path - fl_ad2_11);
 800a770:	4b72      	ldr	r3, [pc, #456]	; (800a93c <ADC_Get_Data+0x230>)
 800a772:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a776:	461a      	mov	r2, r3
 800a778:	4b6a      	ldr	r3, [pc, #424]	; (800a924 <ADC_Get_Data+0x218>)
 800a77a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	bfb8      	it	lt
 800a784:	425b      	neglt	r3, r3
 800a786:	b21a      	sxth	r2, r3
 800a788:	4b6d      	ldr	r3, [pc, #436]	; (800a940 <ADC_Get_Data+0x234>)
 800a78a:	801a      	strh	r2, [r3, #0]
	    sr_error = abs(sr_path - sr_ad2_15);
 800a78c:	4b6d      	ldr	r3, [pc, #436]	; (800a944 <ADC_Get_Data+0x238>)
 800a78e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a792:	461a      	mov	r2, r3
 800a794:	4b64      	ldr	r3, [pc, #400]	; (800a928 <ADC_Get_Data+0x21c>)
 800a796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	bfb8      	it	lt
 800a7a0:	425b      	neglt	r3, r3
 800a7a2:	b21a      	sxth	r2, r3
 800a7a4:	4b68      	ldr	r3, [pc, #416]	; (800a948 <ADC_Get_Data+0x23c>)
 800a7a6:	801a      	strh	r2, [r3, #0]

	    sl_path = sl_ad1_10;
 800a7a8:	4b5b      	ldr	r3, [pc, #364]	; (800a918 <ADC_Get_Data+0x20c>)
 800a7aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7ae:	4b5f      	ldr	r3, [pc, #380]	; (800a92c <ADC_Get_Data+0x220>)
 800a7b0:	801a      	strh	r2, [r3, #0]
	    fr_path = fr_ad1_14;
 800a7b2:	4b5a      	ldr	r3, [pc, #360]	; (800a91c <ADC_Get_Data+0x210>)
 800a7b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7b8:	4b5e      	ldr	r3, [pc, #376]	; (800a934 <ADC_Get_Data+0x228>)
 800a7ba:	801a      	strh	r2, [r3, #0]
	    fl_path = fl_ad2_11;
 800a7bc:	4b59      	ldr	r3, [pc, #356]	; (800a924 <ADC_Get_Data+0x218>)
 800a7be:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7c2:	4b5e      	ldr	r3, [pc, #376]	; (800a93c <ADC_Get_Data+0x230>)
 800a7c4:	801a      	strh	r2, [r3, #0]
		sr_path = sr_ad2_15;
 800a7c6:	4b58      	ldr	r3, [pc, #352]	; (800a928 <ADC_Get_Data+0x21c>)
 800a7c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7cc:	4b5d      	ldr	r3, [pc, #372]	; (800a944 <ADC_Get_Data+0x238>)
 800a7ce:	801a      	strh	r2, [r3, #0]

		battery_V = analog1[2];
 800a7d0:	4b50      	ldr	r3, [pc, #320]	; (800a914 <ADC_Get_Data+0x208>)
 800a7d2:	889b      	ldrh	r3, [r3, #4]
 800a7d4:	ee07 3a90 	vmov	s15, r3
 800a7d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7dc:	4b5b      	ldr	r3, [pc, #364]	; (800a94c <ADC_Get_Data+0x240>)
 800a7de:	edc3 7a00 	vstr	s15, [r3]
#if 1
		sl_integrate += sl_error;
 800a7e2:	4b5b      	ldr	r3, [pc, #364]	; (800a950 <ADC_Get_Data+0x244>)
 800a7e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	4b51      	ldr	r3, [pc, #324]	; (800a930 <ADC_Get_Data+0x224>)
 800a7ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	4413      	add	r3, r2
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	b21a      	sxth	r2, r3
 800a7f8:	4b55      	ldr	r3, [pc, #340]	; (800a950 <ADC_Get_Data+0x244>)
 800a7fa:	801a      	strh	r2, [r3, #0]
		fr_integrate += fr_error;
 800a7fc:	4b55      	ldr	r3, [pc, #340]	; (800a954 <ADC_Get_Data+0x248>)
 800a7fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a802:	b29a      	uxth	r2, r3
 800a804:	4b4c      	ldr	r3, [pc, #304]	; (800a938 <ADC_Get_Data+0x22c>)
 800a806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	4413      	add	r3, r2
 800a80e:	b29b      	uxth	r3, r3
 800a810:	b21a      	sxth	r2, r3
 800a812:	4b50      	ldr	r3, [pc, #320]	; (800a954 <ADC_Get_Data+0x248>)
 800a814:	801a      	strh	r2, [r3, #0]
		fl_integrate += fl_error;
 800a816:	4b50      	ldr	r3, [pc, #320]	; (800a958 <ADC_Get_Data+0x24c>)
 800a818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	4b48      	ldr	r3, [pc, #288]	; (800a940 <ADC_Get_Data+0x234>)
 800a820:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a824:	b29b      	uxth	r3, r3
 800a826:	4413      	add	r3, r2
 800a828:	b29b      	uxth	r3, r3
 800a82a:	b21a      	sxth	r2, r3
 800a82c:	4b4a      	ldr	r3, [pc, #296]	; (800a958 <ADC_Get_Data+0x24c>)
 800a82e:	801a      	strh	r2, [r3, #0]
		sr_integrate += sr_error;
 800a830:	4b4a      	ldr	r3, [pc, #296]	; (800a95c <ADC_Get_Data+0x250>)
 800a832:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a836:	b29a      	uxth	r2, r3
 800a838:	4b43      	ldr	r3, [pc, #268]	; (800a948 <ADC_Get_Data+0x23c>)
 800a83a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	4413      	add	r3, r2
 800a842:	b29b      	uxth	r3, r3
 800a844:	b21a      	sxth	r2, r3
 800a846:	4b45      	ldr	r3, [pc, #276]	; (800a95c <ADC_Get_Data+0x250>)
 800a848:	801a      	strh	r2, [r3, #0]

		count ++;
 800a84a:	4b45      	ldr	r3, [pc, #276]	; (800a960 <ADC_Get_Data+0x254>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3301      	adds	r3, #1
 800a850:	4a43      	ldr	r2, [pc, #268]	; (800a960 <ADC_Get_Data+0x254>)
 800a852:	6013      	str	r3, [r2, #0]
		if(count == 10){
 800a854:	4b42      	ldr	r3, [pc, #264]	; (800a960 <ADC_Get_Data+0x254>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b0a      	cmp	r3, #10
 800a85a:	d156      	bne.n	800a90a <ADC_Get_Data+0x1fe>
			sl_average = (float)sl_integrate / count;
 800a85c:	4b3c      	ldr	r3, [pc, #240]	; (800a950 <ADC_Get_Data+0x244>)
 800a85e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a862:	ee07 3a90 	vmov	s15, r3
 800a866:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a86a:	4b3d      	ldr	r3, [pc, #244]	; (800a960 <ADC_Get_Data+0x254>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a87a:	4b3a      	ldr	r3, [pc, #232]	; (800a964 <ADC_Get_Data+0x258>)
 800a87c:	edc3 7a00 	vstr	s15, [r3]
			fr_average = (float)fr_integrate / count;
 800a880:	4b34      	ldr	r3, [pc, #208]	; (800a954 <ADC_Get_Data+0x248>)
 800a882:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a88e:	4b34      	ldr	r3, [pc, #208]	; (800a960 <ADC_Get_Data+0x254>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a89a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a89e:	4b32      	ldr	r3, [pc, #200]	; (800a968 <ADC_Get_Data+0x25c>)
 800a8a0:	edc3 7a00 	vstr	s15, [r3]
			fl_average = (float)fl_integrate / count;
 800a8a4:	4b2c      	ldr	r3, [pc, #176]	; (800a958 <ADC_Get_Data+0x24c>)
 800a8a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8aa:	ee07 3a90 	vmov	s15, r3
 800a8ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8b2:	4b2b      	ldr	r3, [pc, #172]	; (800a960 <ADC_Get_Data+0x254>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8c2:	4b2a      	ldr	r3, [pc, #168]	; (800a96c <ADC_Get_Data+0x260>)
 800a8c4:	edc3 7a00 	vstr	s15, [r3]
			sr_average = (float)sr_integrate / count;
 800a8c8:	4b24      	ldr	r3, [pc, #144]	; (800a95c <ADC_Get_Data+0x250>)
 800a8ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8d6:	4b22      	ldr	r3, [pc, #136]	; (800a960 <ADC_Get_Data+0x254>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e6:	4b22      	ldr	r3, [pc, #136]	; (800a970 <ADC_Get_Data+0x264>)
 800a8e8:	edc3 7a00 	vstr	s15, [r3]


			sl_integrate = 0;
 800a8ec:	4b18      	ldr	r3, [pc, #96]	; (800a950 <ADC_Get_Data+0x244>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	801a      	strh	r2, [r3, #0]
			fr_integrate = 0;
 800a8f2:	4b18      	ldr	r3, [pc, #96]	; (800a954 <ADC_Get_Data+0x248>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	801a      	strh	r2, [r3, #0]
			fl_integrate = 0;
 800a8f8:	4b17      	ldr	r3, [pc, #92]	; (800a958 <ADC_Get_Data+0x24c>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	801a      	strh	r2, [r3, #0]
			sr_integrate = 0;
 800a8fe:	4b17      	ldr	r3, [pc, #92]	; (800a95c <ADC_Get_Data+0x250>)
 800a900:	2200      	movs	r2, #0
 800a902:	801a      	strh	r2, [r3, #0]

			count = 0;
 800a904:	4b16      	ldr	r3, [pc, #88]	; (800a960 <ADC_Get_Data+0x254>)
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]
		}

#endif
}
 800a90a:	bf00      	nop
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20000300 	.word	0x20000300
 800a918:	20004494 	.word	0x20004494
 800a91c:	20000028 	.word	0x20000028
 800a920:	20000308 	.word	0x20000308
 800a924:	2000030e 	.word	0x2000030e
 800a928:	20004ff2 	.word	0x20004ff2
 800a92c:	20004498 	.word	0x20004498
 800a930:	20004496 	.word	0x20004496
 800a934:	20000312 	.word	0x20000312
 800a938:	20000314 	.word	0x20000314
 800a93c:	20000310 	.word	0x20000310
 800a940:	20000316 	.word	0x20000316
 800a944:	200043c0 	.word	0x200043c0
 800a948:	200044e4 	.word	0x200044e4
 800a94c:	20005058 	.word	0x20005058
 800a950:	2000449e 	.word	0x2000449e
 800a954:	200045d0 	.word	0x200045d0
 800a958:	20004584 	.word	0x20004584
 800a95c:	20004528 	.word	0x20004528
 800a960:	20004358 	.word	0x20004358
 800a964:	20005054 	.word	0x20005054
 800a968:	20004f08 	.word	0x20004f08
 800a96c:	200043c4 	.word	0x200043c4
 800a970:	200044a0 	.word	0x200044a0

0800a974 <Velocity_Get>:
float Velocity_Get(float EN, float T){ // TIM2,TIM5の割り込み周
 800a974:	b480      	push	{r7}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	ed87 0a01 	vstr	s0, [r7, #4]
 800a97e:	edc7 0a00 	vstr	s1, [r7]

 float Circumference, TirePulse_of_Circumference, velocity;

    Circumference = TIRE_DEAMETER * PI; // 周
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <Velocity_Get+0x4c>)
 800a984:	617b      	str	r3, [r7, #20]
    TirePulse_of_Circumference = ENCODER_PULSE * REDUCATION_RATIO; // タイヤ周のパルス
 800a986:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 800a98a:	613b      	str	r3, [r7, #16]
    velocity = EN * (Circumference /TirePulse_of_Circumference)/ T; //a 1パルスで進距離 * パルス数/制御周
 800a98c:	edd7 6a05 	vldr	s13, [r7, #20]
 800a990:	edd7 7a04 	vldr	s15, [r7, #16]
 800a994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a998:	edd7 7a01 	vldr	s15, [r7, #4]
 800a99c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a9a0:	ed97 7a00 	vldr	s14, [r7]
 800a9a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9a8:	edc7 7a03 	vstr	s15, [r7, #12]

    return velocity;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	ee07 3a90 	vmov	s15, r3

	 //TIM3 or 4 // 0.0012329102 = ( 20.2mm *) / (4096 * 4)
}
 800a9b2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9b6:	371c      	adds	r7, #28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	4282b0b5 	.word	0x4282b0b5

0800a9c4 <Encoder_Reset>:


}


void Encoder_Reset(){
 800a9c4:	b480      	push	{r7}
 800a9c6:	af00      	add	r7, sp, #0
    TIM3 -> CNT = 30000 - 1;
 800a9c8:	4b06      	ldr	r3, [pc, #24]	; (800a9e4 <Encoder_Reset+0x20>)
 800a9ca:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9ce:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = 30000 - 1;
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <Encoder_Reset+0x24>)
 800a9d2:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9d6:	625a      	str	r2, [r3, #36]	; 0x24

}
 800a9d8:	bf00      	nop
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40000400 	.word	0x40000400
 800a9e8:	40000800 	.word	0x40000800

0800a9ec <Encoder_Count>:
int16_t Encoder_Count(int16_t mode){
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	80fb      	strh	r3, [r7, #6]

	if(mode == 0){
 800a9f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d102      	bne.n	800aa04 <Encoder_Count+0x18>

		mode = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	80fb      	strh	r3, [r7, #6]
 800aa02:	e030      	b.n	800aa66 <Encoder_Count+0x7a>
	  }
	  else if(mode == 1){
 800aa04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d12c      	bne.n	800aa66 <Encoder_Count+0x7a>
	    EN3_L.integrate += EN3_L.count;
 800aa0c:	4b1a      	ldr	r3, [pc, #104]	; (800aa78 <Encoder_Count+0x8c>)
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	4b19      	ldr	r3, [pc, #100]	; (800aa78 <Encoder_Count+0x8c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4413      	add	r3, r2
 800aa16:	4a18      	ldr	r2, [pc, #96]	; (800aa78 <Encoder_Count+0x8c>)
 800aa18:	6053      	str	r3, [r2, #4]
	    EN4_R.integrate += EN4_R.count;
 800aa1a:	4b18      	ldr	r3, [pc, #96]	; (800aa7c <Encoder_Count+0x90>)
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	4b17      	ldr	r3, [pc, #92]	; (800aa7c <Encoder_Count+0x90>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4413      	add	r3, r2
 800aa24:	4a15      	ldr	r2, [pc, #84]	; (800aa7c <Encoder_Count+0x90>)
 800aa26:	6053      	str	r3, [r2, #4]
	    EN_Body.integrate = (float)(EN3_L.integrate + EN4_R.integrate)/2;
 800aa28:	4b13      	ldr	r3, [pc, #76]	; (800aa78 <Encoder_Count+0x8c>)
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <Encoder_Count+0x90>)
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4413      	add	r3, r2
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa3a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aa3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa46:	ee17 2a90 	vmov	r2, s15
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	; (800aa80 <Encoder_Count+0x94>)
 800aa4c:	605a      	str	r2, [r3, #4]
	    All_Pulse_cut += EN3_L.count + EN4_R.count;
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <Encoder_Count+0x8c>)
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <Encoder_Count+0x90>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	441a      	add	r2, r3
 800aa58:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <Encoder_Count+0x98>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <Encoder_Count+0x98>)
 800aa60:	6013      	str	r3, [r2, #0]
	    mode =1;
 800aa62:	2301      	movs	r3, #1
 800aa64:	80fb      	strh	r3, [r7, #6]

	  }
	return mode;
 800aa66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	20000050 	.word	0x20000050
 800aa7c:	2000005c 	.word	0x2000005c
 800aa80:	20000068 	.word	0x20000068
 800aa84:	200002f8 	.word	0x200002f8

0800aa88 <wait>:
//o 走行用の関数
//Motion.cとMotion.hにまとめる
//時間�?ち関数

void wait(double wait_second)
{
 800aa88:	b590      	push	{r4, r7, lr}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	ed87 0b00 	vstr	d0, [r7]
	//グローバル変数のtimerを使�?
	//�?らな�?制御を�??って�?つ。か、つけっぱなし�??
	//つけっぱなし�?�パターン
	//�?った�?��?�時間 - 現在の時間
	//�?ちたい時間
	double starting_point_of_time = elapsed_time;
 800aa92:	4b0f      	ldr	r3, [pc, #60]	; (800aad0 <wait+0x48>)
 800aa94:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa98:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(starting_point_of_time + wait_second > elapsed_time)
 800aa9c:	bf00      	nop
 800aa9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aaa6:	f7fd fb29 	bl	80080fc <__adddf3>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	460c      	mov	r4, r1
 800aaae:	4618      	mov	r0, r3
 800aab0:	4621      	mov	r1, r4
 800aab2:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <wait+0x48>)
 800aab4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aab8:	461a      	mov	r2, r3
 800aaba:	4623      	mov	r3, r4
 800aabc:	f7fd ff64 	bl	8008988 <__aeabi_dcmpgt>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1eb      	bne.n	800aa9e <wait+0x16>
	{

	}

	//�?らな�?制御を�??るパターン
}
 800aac6:	bf00      	nop
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd90      	pop	{r4, r7, pc}
 800aace:	bf00      	nop
 800aad0:	200002f0 	.word	0x200002f0
 800aad4:	00000000 	.word	0x00000000

0800aad8 <Start_Accel>:


void Start_Accel(){
 800aad8:	b580      	push	{r7, lr}
 800aada:	af00      	add	r7, sp, #0
	error_reset = 0;
 800aadc:	4b22      	ldr	r3, [pc, #136]	; (800ab68 <Start_Accel+0x90>)
 800aade:	2200      	movs	r2, #0
 800aae0:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800aae2:	f7fe ff15 	bl	8009910 <Motor_Count_Clear>
	//IMU_init();

    EN3_L.integrate = 0;
 800aae6:	4b21      	ldr	r3, [pc, #132]	; (800ab6c <Start_Accel+0x94>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800aaec:	4b20      	ldr	r3, [pc, #128]	; (800ab70 <Start_Accel+0x98>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800aaf2:	4b20      	ldr	r3, [pc, #128]	; (800ab74 <Start_Accel+0x9c>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800aaf8:	4b1f      	ldr	r3, [pc, #124]	; (800ab78 <Start_Accel+0xa0>)
 800aafa:	2201      	movs	r2, #1
 800aafc:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800aafe:	e005      	b.n	800ab0c <Start_Accel+0x34>
		mode.control = 4;
 800ab00:	4b1d      	ldr	r3, [pc, #116]	; (800ab78 <Start_Accel+0xa0>)
 800ab02:	2204      	movs	r2, #4
 800ab04:	715a      	strb	r2, [r3, #5]
		mode.accel= 1;
 800ab06:	4b1c      	ldr	r3, [pc, #112]	; (800ab78 <Start_Accel+0xa0>)
 800ab08:	2201      	movs	r2, #1
 800ab0a:	705a      	strb	r2, [r3, #1]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800ab0c:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <Start_Accel+0x94>)
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	4b17      	ldr	r3, [pc, #92]	; (800ab70 <Start_Accel+0x98>)
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	4413      	add	r3, r2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	db0f      	blt.n	800ab3a <Start_Accel+0x62>
 800ab1a:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <Start_Accel+0x94>)
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	4b14      	ldr	r3, [pc, #80]	; (800ab70 <Start_Accel+0x98>)
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	4413      	add	r3, r2
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7fd fc35 	bl	8008394 <__aeabi_i2d>
 800ab2a:	a30d      	add	r3, pc, #52	; (adr r3, 800ab60 <Start_Accel+0x88>)
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f7fd ff0c 	bl	800894c <__aeabi_dcmplt>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1e2      	bne.n	800ab00 <Start_Accel+0x28>
	}
	mode.accel = 0;
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <Start_Accel+0xa0>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ab40:	4b0e      	ldr	r3, [pc, #56]	; (800ab7c <Start_Accel+0xa4>)
 800ab42:	4a0f      	ldr	r2, [pc, #60]	; (800ab80 <Start_Accel+0xa8>)
 800ab44:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ab46:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <Start_Accel+0x94>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ab4c:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <Start_Accel+0x98>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ab52:	4b08      	ldr	r3, [pc, #32]	; (800ab74 <Start_Accel+0x9c>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	605a      	str	r2, [r3, #4]

}
 800ab58:	bf00      	nop
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	f3af 8000 	nop.w
 800ab60:	e2f785a2 	.word	0xe2f785a2
 800ab64:	40fe3d4b 	.word	0x40fe3d4b
 800ab68:	2000027c 	.word	0x2000027c
 800ab6c:	20000050 	.word	0x20000050
 800ab70:	2000005c 	.word	0x2000005c
 800ab74:	20000068 	.word	0x20000068
 800ab78:	20000074 	.word	0x20000074
 800ab7c:	200002b8 	.word	0x200002b8
 800ab80:	43960000 	.word	0x43960000
 800ab84:	00000000 	.word	0x00000000

0800ab88 <Accelerate>:

void Accelerate(){
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0

	error_reset = 0;
 800ab8c:	4b4a      	ldr	r3, [pc, #296]	; (800acb8 <Accelerate+0x130>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ab92:	f7fe febd 	bl	8009910 <Motor_Count_Clear>
	//IMU_init();

	mode.control = 3;
 800ab96:	4b49      	ldr	r3, [pc, #292]	; (800acbc <Accelerate+0x134>)
 800ab98:	2203      	movs	r2, #3
 800ab9a:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800ab9c:	4b48      	ldr	r3, [pc, #288]	; (800acc0 <Accelerate+0x138>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800aba2:	4b48      	ldr	r3, [pc, #288]	; (800acc4 <Accelerate+0x13c>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800aba8:	4b47      	ldr	r3, [pc, #284]	; (800acc8 <Accelerate+0x140>)
 800abaa:	2200      	movs	r2, #0
 800abac:	605a      	str	r2, [r3, #4]
	mode.enc = 1;
 800abae:	4b43      	ldr	r3, [pc, #268]	; (800acbc <Accelerate+0x134>)
 800abb0:	2201      	movs	r2, #1
 800abb2:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800abb4:	e04d      	b.n	800ac52 <Accelerate+0xca>

		mode.accel = 2;
 800abb6:	4b41      	ldr	r3, [pc, #260]	; (800acbc <Accelerate+0x134>)
 800abb8:	2202      	movs	r2, #2
 800abba:	705a      	strb	r2, [r3, #1]
#if 1
		if(WALL_JUDGE_PULSE * 2 < EN3_L.integrate + EN4_R.integrate){
 800abbc:	4b40      	ldr	r3, [pc, #256]	; (800acc0 <Accelerate+0x138>)
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	4b40      	ldr	r3, [pc, #256]	; (800acc4 <Accelerate+0x13c>)
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fd fbe4 	bl	8008394 <__aeabi_i2d>
 800abcc:	a336      	add	r3, pc, #216	; (adr r3, 800aca8 <Accelerate+0x120>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7fd fed9 	bl	8008988 <__aeabi_dcmpgt>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d037      	beq.n	800ac4c <Accelerate+0xc4>
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800abdc:	4b3b      	ldr	r3, [pc, #236]	; (800accc <Accelerate+0x144>)
 800abde:	edd3 7a00 	vldr	s15, [r3]
 800abe2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800acd0 <Accelerate+0x148>
 800abe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abee:	dd0d      	ble.n	800ac0c <Accelerate+0x84>
 800abf0:	4b38      	ldr	r3, [pc, #224]	; (800acd4 <Accelerate+0x14c>)
 800abf2:	edd3 7a00 	vldr	s15, [r3]
 800abf6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800acd8 <Accelerate+0x150>
 800abfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac02:	dd03      	ble.n	800ac0c <Accelerate+0x84>
				  mode.control = 0;
 800ac04:	4b2d      	ldr	r3, [pc, #180]	; (800acbc <Accelerate+0x134>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	715a      	strb	r2, [r3, #5]
 800ac0a:	e022      	b.n	800ac52 <Accelerate+0xca>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800ac0c:	4b31      	ldr	r3, [pc, #196]	; (800acd4 <Accelerate+0x14c>)
 800ac0e:	edd3 7a00 	vldr	s15, [r3]
 800ac12:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800acd8 <Accelerate+0x150>
 800ac16:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1e:	dd03      	ble.n	800ac28 <Accelerate+0xa0>
				  mode.control = 1;
 800ac20:	4b26      	ldr	r3, [pc, #152]	; (800acbc <Accelerate+0x134>)
 800ac22:	2201      	movs	r2, #1
 800ac24:	715a      	strb	r2, [r3, #5]
 800ac26:	e014      	b.n	800ac52 <Accelerate+0xca>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800ac28:	4b28      	ldr	r3, [pc, #160]	; (800accc <Accelerate+0x144>)
 800ac2a:	edd3 7a00 	vldr	s15, [r3]
 800ac2e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800acd0 <Accelerate+0x148>
 800ac32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3a:	dd03      	ble.n	800ac44 <Accelerate+0xbc>
				  mode.control = 2;
 800ac3c:	4b1f      	ldr	r3, [pc, #124]	; (800acbc <Accelerate+0x134>)
 800ac3e:	2202      	movs	r2, #2
 800ac40:	715a      	strb	r2, [r3, #5]
 800ac42:	e006      	b.n	800ac52 <Accelerate+0xca>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800ac44:	4b1d      	ldr	r3, [pc, #116]	; (800acbc <Accelerate+0x134>)
 800ac46:	2204      	movs	r2, #4
 800ac48:	715a      	strb	r2, [r3, #5]
 800ac4a:	e002      	b.n	800ac52 <Accelerate+0xca>
		}
		else mode.control = 4;
 800ac4c:	4b1b      	ldr	r3, [pc, #108]	; (800acbc <Accelerate+0x134>)
 800ac4e:	2204      	movs	r2, #4
 800ac50:	715a      	strb	r2, [r3, #5]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ac52:	4b1b      	ldr	r3, [pc, #108]	; (800acc0 <Accelerate+0x138>)
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4b1b      	ldr	r3, [pc, #108]	; (800acc4 <Accelerate+0x13c>)
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	db0f      	blt.n	800ac80 <Accelerate+0xf8>
 800ac60:	4b17      	ldr	r3, [pc, #92]	; (800acc0 <Accelerate+0x138>)
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	4b17      	ldr	r3, [pc, #92]	; (800acc4 <Accelerate+0x13c>)
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fd fb92 	bl	8008394 <__aeabi_i2d>
 800ac70:	a30f      	add	r3, pc, #60	; (adr r3, 800acb0 <Accelerate+0x128>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f7fd fe69 	bl	800894c <__aeabi_dcmplt>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d19a      	bne.n	800abb6 <Accelerate+0x2e>
	}
#else
	mode.control = 3;
}
#endif
	mode.accel = 0;
 800ac80:	4b0e      	ldr	r3, [pc, #56]	; (800acbc <Accelerate+0x134>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ac86:	4b15      	ldr	r3, [pc, #84]	; (800acdc <Accelerate+0x154>)
 800ac88:	4a15      	ldr	r2, [pc, #84]	; (800ace0 <Accelerate+0x158>)
 800ac8a:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <Accelerate+0x138>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac92:	4b0c      	ldr	r3, [pc, #48]	; (800acc4 <Accelerate+0x13c>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac98:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <Accelerate+0x140>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	605a      	str	r2, [r3, #4]

}
 800ac9e:	bf00      	nop
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	f3af 8000 	nop.w
 800aca8:	97a63862 	.word	0x97a63862
 800acac:	40e87c41 	.word	0x40e87c41
 800acb0:	3baf32bf 	.word	0x3baf32bf
 800acb4:	40f6096e 	.word	0x40f6096e
 800acb8:	2000027c 	.word	0x2000027c
 800acbc:	20000074 	.word	0x20000074
 800acc0:	20000050 	.word	0x20000050
 800acc4:	2000005c 	.word	0x2000005c
 800acc8:	20000068 	.word	0x20000068
 800accc:	20004f08 	.word	0x20004f08
 800acd0:	42c80000 	.word	0x42c80000
 800acd4:	200043c4 	.word	0x200043c4
 800acd8:	430c0000 	.word	0x430c0000
 800acdc:	200002b8 	.word	0x200002b8
 800ace0:	43960000 	.word	0x43960000
 800ace4:	00000000 	.word	0x00000000

0800ace8 <Decelerate>:
void Decelerate(){
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0


	//IMU_init();
	//mode.control = 4;

	mode.control = 3;
 800acec:	4b4c      	ldr	r3, [pc, #304]	; (800ae20 <Decelerate+0x138>)
 800acee:	2203      	movs	r2, #3
 800acf0:	715a      	strb	r2, [r3, #5]
	//printf("%d\r\n",EN3_L.integrate + EN4_R.integrate);
	while( (EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2) &&  ( (sl_average + sr_average )/2 < 1850)){
 800acf2:	e055      	b.n	800ada0 <Decelerate+0xb8>
		mode.accel = 3;
 800acf4:	4b4a      	ldr	r3, [pc, #296]	; (800ae20 <Decelerate+0x138>)
 800acf6:	2203      	movs	r2, #3
 800acf8:	705a      	strb	r2, [r3, #1]
		printf("%d , %d\r\n",EN3_L.integrate , EN4_R.integrate);
 800acfa:	4b4a      	ldr	r3, [pc, #296]	; (800ae24 <Decelerate+0x13c>)
 800acfc:	6859      	ldr	r1, [r3, #4]
 800acfe:	4b4a      	ldr	r3, [pc, #296]	; (800ae28 <Decelerate+0x140>)
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	461a      	mov	r2, r3
 800ad04:	4849      	ldr	r0, [pc, #292]	; (800ae2c <Decelerate+0x144>)
 800ad06:	f00b feef 	bl	8016ae8 <iprintf>
#if 1
		if(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 - (WALL_JUDGE_PULSE  * 2 *3/5) ){//ここの閾値の意味:減�?�する距離は半区画 -
 800ad0a:	4b46      	ldr	r3, [pc, #280]	; (800ae24 <Decelerate+0x13c>)
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	4b46      	ldr	r3, [pc, #280]	; (800ae28 <Decelerate+0x140>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	4413      	add	r3, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fd fb3d 	bl	8008394 <__aeabi_i2d>
 800ad1a:	a33d      	add	r3, pc, #244	; (adr r3, 800ae10 <Decelerate+0x128>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f7fd fe14 	bl	800894c <__aeabi_dcmplt>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d037      	beq.n	800ad9a <Decelerate+0xb2>
		  if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800ad2a:	4b41      	ldr	r3, [pc, #260]	; (800ae30 <Decelerate+0x148>)
 800ad2c:	edd3 7a00 	vldr	s15, [r3]
 800ad30:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ae34 <Decelerate+0x14c>
 800ad34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad3c:	dd0d      	ble.n	800ad5a <Decelerate+0x72>
 800ad3e:	4b3e      	ldr	r3, [pc, #248]	; (800ae38 <Decelerate+0x150>)
 800ad40:	edd3 7a00 	vldr	s15, [r3]
 800ad44:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800ae3c <Decelerate+0x154>
 800ad48:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad50:	dd03      	ble.n	800ad5a <Decelerate+0x72>
			  mode.control = 0;
 800ad52:	4b33      	ldr	r3, [pc, #204]	; (800ae20 <Decelerate+0x138>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	715a      	strb	r2, [r3, #5]
 800ad58:	e022      	b.n	800ada0 <Decelerate+0xb8>

			 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
	      }
		  else if(fl_average > LEFT_WALL){
 800ad5a:	4b37      	ldr	r3, [pc, #220]	; (800ae38 <Decelerate+0x150>)
 800ad5c:	edd3 7a00 	vldr	s15, [r3]
 800ad60:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ae3c <Decelerate+0x154>
 800ad64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6c:	dd03      	ble.n	800ad76 <Decelerate+0x8e>
			  mode.control = 1;
 800ad6e:	4b2c      	ldr	r3, [pc, #176]	; (800ae20 <Decelerate+0x138>)
 800ad70:	2201      	movs	r2, #1
 800ad72:	715a      	strb	r2, [r3, #5]
 800ad74:	e014      	b.n	800ada0 <Decelerate+0xb8>
			 // Left_Wall_Control();
	      }
		  else if(fr_average > RIGHT_WALL){
 800ad76:	4b2e      	ldr	r3, [pc, #184]	; (800ae30 <Decelerate+0x148>)
 800ad78:	edd3 7a00 	vldr	s15, [r3]
 800ad7c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800ae34 <Decelerate+0x14c>
 800ad80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad88:	dd03      	ble.n	800ad92 <Decelerate+0xaa>
			  mode.control = 2;
 800ad8a:	4b25      	ldr	r3, [pc, #148]	; (800ae20 <Decelerate+0x138>)
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	715a      	strb	r2, [r3, #5]
 800ad90:	e006      	b.n	800ada0 <Decelerate+0xb8>
						 // Right_Wall_Control();
	      }
		  else mode.control = 4;
 800ad92:	4b23      	ldr	r3, [pc, #140]	; (800ae20 <Decelerate+0x138>)
 800ad94:	2204      	movs	r2, #4
 800ad96:	715a      	strb	r2, [r3, #5]
 800ad98:	e002      	b.n	800ada0 <Decelerate+0xb8>
		}
		else mode.control = 4;
 800ad9a:	4b21      	ldr	r3, [pc, #132]	; (800ae20 <Decelerate+0x138>)
 800ad9c:	2204      	movs	r2, #4
 800ad9e:	715a      	strb	r2, [r3, #5]
	while( (EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2) &&  ( (sl_average + sr_average )/2 < 1850)){
 800ada0:	4b20      	ldr	r3, [pc, #128]	; (800ae24 <Decelerate+0x13c>)
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	4b20      	ldr	r3, [pc, #128]	; (800ae28 <Decelerate+0x140>)
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	4413      	add	r3, r2
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fd faf2 	bl	8008394 <__aeabi_i2d>
 800adb0:	a319      	add	r3, pc, #100	; (adr r3, 800ae18 <Decelerate+0x130>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7fd fdc9 	bl	800894c <__aeabi_dcmplt>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d012      	beq.n	800ade6 <Decelerate+0xfe>
 800adc0:	4b1f      	ldr	r3, [pc, #124]	; (800ae40 <Decelerate+0x158>)
 800adc2:	ed93 7a00 	vldr	s14, [r3]
 800adc6:	4b1f      	ldr	r3, [pc, #124]	; (800ae44 <Decelerate+0x15c>)
 800adc8:	edd3 7a00 	vldr	s15, [r3]
 800adcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800add0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800add4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800add8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800ae48 <Decelerate+0x160>
 800addc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade4:	d486      	bmi.n	800acf4 <Decelerate+0xc>
#else
	mode.control = 3;
}
#endif

	mode.accel = 0;
 800ade6:	4b0e      	ldr	r3, [pc, #56]	; (800ae20 <Decelerate+0x138>)
 800ade8:	2200      	movs	r2, #0
 800adea:	705a      	strb	r2, [r3, #1]
	mode.control = 5;
 800adec:	4b0c      	ldr	r3, [pc, #48]	; (800ae20 <Decelerate+0x138>)
 800adee:	2205      	movs	r2, #5
 800adf0:	715a      	strb	r2, [r3, #5]
	Target_velocity = 0;
 800adf2:	4b16      	ldr	r3, [pc, #88]	; (800ae4c <Decelerate+0x164>)
 800adf4:	f04f 0200 	mov.w	r2, #0
 800adf8:	601a      	str	r2, [r3, #0]
	mode.enc = 0;
 800adfa:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <Decelerate+0x138>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	70da      	strb	r2, [r3, #3]
	error_reset = 0;
 800ae00:	4b13      	ldr	r3, [pc, #76]	; (800ae50 <Decelerate+0x168>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ae06:	f7fe fd83 	bl	8009910 <Motor_Count_Clear>


	//printf("減�??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��した????��?��??��?��???��?��??��?��?\r\n");
}
 800ae0a:	bf00      	nop
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	4f9443a9 	.word	0x4f9443a9
 800ae14:	40ed61e8 	.word	0x40ed61e8
 800ae18:	3baf32bf 	.word	0x3baf32bf
 800ae1c:	40f6096e 	.word	0x40f6096e
 800ae20:	20000074 	.word	0x20000074
 800ae24:	20000050 	.word	0x20000050
 800ae28:	2000005c 	.word	0x2000005c
 800ae2c:	080189e4 	.word	0x080189e4
 800ae30:	20004f08 	.word	0x20004f08
 800ae34:	42c80000 	.word	0x42c80000
 800ae38:	200043c4 	.word	0x200043c4
 800ae3c:	430c0000 	.word	0x430c0000
 800ae40:	20005054 	.word	0x20005054
 800ae44:	200044a0 	.word	0x200044a0
 800ae48:	44e74000 	.word	0x44e74000
 800ae4c:	200002b8 	.word	0x200002b8
 800ae50:	2000027c 	.word	0x2000027c
 800ae54:	00000000 	.word	0x00000000

0800ae58 <straight>:

			return Velocity;


}
void straight(){ //uint8_t block_num
 800ae58:	b5b0      	push	{r4, r5, r7, lr}
 800ae5a:	af00      	add	r7, sp, #0
//    EN3_L.integrate = 0;
//    EN4_R.integrate = 0;
//	  EN_Body.integrate = 0;
//    mode.enc = 1;

  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800ae5c:	e07e      	b.n	800af5c <straight+0x104>
#if 1
	  if(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 *0.45 || Target_pulse * 2 - (WALL_JUDGE_PULSE * 12/5) < EN3_L.integrate + EN4_R.integrate){
 800ae5e:	4b54      	ldr	r3, [pc, #336]	; (800afb0 <straight+0x158>)
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	4b54      	ldr	r3, [pc, #336]	; (800afb4 <straight+0x15c>)
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	4413      	add	r3, r2
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fd fa93 	bl	8008394 <__aeabi_i2d>
 800ae6e:	4604      	mov	r4, r0
 800ae70:	460d      	mov	r5, r1
 800ae72:	4b51      	ldr	r3, [pc, #324]	; (800afb8 <straight+0x160>)
 800ae74:	edd3 7a00 	vldr	s15, [r3]
 800ae78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ae7c:	ee17 0a90 	vmov	r0, s15
 800ae80:	f7fd fa9a 	bl	80083b8 <__aeabi_f2d>
 800ae84:	a346      	add	r3, pc, #280	; (adr r3, 800afa0 <straight+0x148>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7fd faed 	bl	8008468 <__aeabi_dmul>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4620      	mov	r0, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7fd fd59 	bl	800894c <__aeabi_dcmplt>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d122      	bne.n	800aee6 <straight+0x8e>
 800aea0:	4b45      	ldr	r3, [pc, #276]	; (800afb8 <straight+0x160>)
 800aea2:	edd3 7a00 	vldr	s15, [r3]
 800aea6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aeaa:	ee17 0a90 	vmov	r0, s15
 800aeae:	f7fd fa83 	bl	80083b8 <__aeabi_f2d>
 800aeb2:	a33d      	add	r3, pc, #244	; (adr r3, 800afa8 <straight+0x150>)
 800aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb8:	f7fd f91e 	bl	80080f8 <__aeabi_dsub>
 800aebc:	4603      	mov	r3, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	4625      	mov	r5, r4
 800aec2:	461c      	mov	r4, r3
 800aec4:	4b3a      	ldr	r3, [pc, #232]	; (800afb0 <straight+0x158>)
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	4b3a      	ldr	r3, [pc, #232]	; (800afb4 <straight+0x15c>)
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	4413      	add	r3, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fd fa60 	bl	8008394 <__aeabi_i2d>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4620      	mov	r0, r4
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7fd fd36 	bl	800894c <__aeabi_dcmplt>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d037      	beq.n	800af56 <straight+0xfe>

			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800aee6:	4b35      	ldr	r3, [pc, #212]	; (800afbc <straight+0x164>)
 800aee8:	edd3 7a00 	vldr	s15, [r3]
 800aeec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800afc0 <straight+0x168>
 800aef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef8:	dd0d      	ble.n	800af16 <straight+0xbe>
 800aefa:	4b32      	ldr	r3, [pc, #200]	; (800afc4 <straight+0x16c>)
 800aefc:	edd3 7a00 	vldr	s15, [r3]
 800af00:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800afc8 <straight+0x170>
 800af04:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0c:	dd03      	ble.n	800af16 <straight+0xbe>
				  mode.control = 0;
 800af0e:	4b2f      	ldr	r3, [pc, #188]	; (800afcc <straight+0x174>)
 800af10:	2200      	movs	r2, #0
 800af12:	715a      	strb	r2, [r3, #5]
 800af14:	e01e      	b.n	800af54 <straight+0xfc>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800af16:	4b2b      	ldr	r3, [pc, #172]	; (800afc4 <straight+0x16c>)
 800af18:	edd3 7a00 	vldr	s15, [r3]
 800af1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800afc8 <straight+0x170>
 800af20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af28:	dd03      	ble.n	800af32 <straight+0xda>
				  mode.control = 1;
 800af2a:	4b28      	ldr	r3, [pc, #160]	; (800afcc <straight+0x174>)
 800af2c:	2201      	movs	r2, #1
 800af2e:	715a      	strb	r2, [r3, #5]
 800af30:	e014      	b.n	800af5c <straight+0x104>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800af32:	4b22      	ldr	r3, [pc, #136]	; (800afbc <straight+0x164>)
 800af34:	edd3 7a00 	vldr	s15, [r3]
 800af38:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800afc0 <straight+0x168>
 800af3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af44:	dd03      	ble.n	800af4e <straight+0xf6>
				  mode.control = 2;
 800af46:	4b21      	ldr	r3, [pc, #132]	; (800afcc <straight+0x174>)
 800af48:	2202      	movs	r2, #2
 800af4a:	715a      	strb	r2, [r3, #5]
 800af4c:	e006      	b.n	800af5c <straight+0x104>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800af4e:	4b1f      	ldr	r3, [pc, #124]	; (800afcc <straight+0x174>)
 800af50:	2204      	movs	r2, #4
 800af52:	715a      	strb	r2, [r3, #5]
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800af54:	e002      	b.n	800af5c <straight+0x104>
	  }
	  else
		  mode.control = 4;
 800af56:	4b1d      	ldr	r3, [pc, #116]	; (800afcc <straight+0x174>)
 800af58:	2204      	movs	r2, #4
 800af5a:	715a      	strb	r2, [r3, #5]
  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800af5c:	4b14      	ldr	r3, [pc, #80]	; (800afb0 <straight+0x158>)
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	4b14      	ldr	r3, [pc, #80]	; (800afb4 <straight+0x15c>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	4413      	add	r3, r2
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af6e:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <straight+0x160>)
 800af70:	edd3 7a00 	vldr	s15, [r3]
 800af74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af80:	f53f af6d 	bmi.w	800ae5e <straight+0x6>
#else

		  mode.control = 3;
  }
#endif
      EN3_L.integrate = 0;
 800af84:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <straight+0x158>)
 800af86:	2200      	movs	r2, #0
 800af88:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800af8a:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <straight+0x15c>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	605a      	str	r2, [r3, #4]
      EN_Body.integrate = 0;
 800af90:	4b0f      	ldr	r3, [pc, #60]	; (800afd0 <straight+0x178>)
 800af92:	2200      	movs	r2, #0
 800af94:	605a      	str	r2, [r3, #4]
    }

    printf("3区画進んだ???��?��??��?��? : %d \r\n",check);

#endif
}
 800af96:	bf00      	nop
 800af98:	bdb0      	pop	{r4, r5, r7, pc}
 800af9a:	bf00      	nop
 800af9c:	f3af 8000 	nop.w
 800afa0:	cccccccd 	.word	0xcccccccd
 800afa4:	3fdccccc 	.word	0x3fdccccc
 800afa8:	4f9443aa 	.word	0x4f9443aa
 800afac:	40ed61e8 	.word	0x40ed61e8
 800afb0:	20000050 	.word	0x20000050
 800afb4:	2000005c 	.word	0x2000005c
 800afb8:	20000000 	.word	0x20000000
 800afbc:	20004f08 	.word	0x20004f08
 800afc0:	42c80000 	.word	0x42c80000
 800afc4:	200043c4 	.word	0x200043c4
 800afc8:	430c0000 	.word	0x430c0000
 800afcc:	20000074 	.word	0x20000074
 800afd0:	20000068 	.word	0x20000068
 800afd4:	00000000 	.word	0x00000000

0800afd8 <IMU_turn>:

			return Velocity;

}

void IMU_turn(int8_t target_angle, double target_angle_velo){
 800afd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800afdc:	ed2d 8b02 	vpush	{d8}
 800afe0:	b084      	sub	sp, #16
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	4603      	mov	r3, r0
 800afe6:	ed87 0b00 	vstr	d0, [r7]
 800afea:	73fb      	strb	r3, [r7, #15]
	    Motor_PWM_Start();
 800afec:	f7fe ffe8 	bl	8009fc0 <Motor_PWM_Start>
	    if(target_angle < 0){
 800aff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	da37      	bge.n	800b068 <IMU_turn+0x90>
	     while(target_angle < Body_angle){
 800aff8:	e027      	b.n	800b04a <IMU_turn+0x72>

		   IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800affa:	4b47      	ldr	r3, [pc, #284]	; (800b118 <IMU_turn+0x140>)
 800affc:	ed93 8b00 	vldr	d8, [r3]
 800b000:	4b46      	ldr	r3, [pc, #280]	; (800b11c <IMU_turn+0x144>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4618      	mov	r0, r3
 800b006:	f7fd f9d7 	bl	80083b8 <__aeabi_f2d>
 800b00a:	4604      	mov	r4, r0
 800b00c:	460d      	mov	r5, r1
 800b00e:	4b43      	ldr	r3, [pc, #268]	; (800b11c <IMU_turn+0x144>)
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	4618      	mov	r0, r3
 800b014:	f7fd f9d0 	bl	80083b8 <__aeabi_f2d>
 800b018:	4680      	mov	r8, r0
 800b01a:	4689      	mov	r9, r1
 800b01c:	4b3f      	ldr	r3, [pc, #252]	; (800b11c <IMU_turn+0x144>)
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	4618      	mov	r0, r3
 800b022:	f7fd f9c9 	bl	80083b8 <__aeabi_f2d>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	ec43 2b15 	vmov	d5, r2, r3
 800b02e:	ec49 8b14 	vmov	d4, r8, r9
 800b032:	ec45 4b13 	vmov	d3, r4, r5
 800b036:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800b110 <IMU_turn+0x138>
 800b03a:	eeb0 1a48 	vmov.f32	s2, s16
 800b03e:	eef0 1a68 	vmov.f32	s3, s17
 800b042:	ed97 0b00 	vldr	d0, [r7]
 800b046:	f7ff f8bf 	bl	800a1c8 <IMU_Control>
	     while(target_angle < Body_angle){
 800b04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fd f9a0 	bl	8008394 <__aeabi_i2d>
 800b054:	4b32      	ldr	r3, [pc, #200]	; (800b120 <IMU_turn+0x148>)
 800b056:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b05a:	461a      	mov	r2, r3
 800b05c:	4623      	mov	r3, r4
 800b05e:	f7fd fc75 	bl	800894c <__aeabi_dcmplt>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1c8      	bne.n	800affa <IMU_turn+0x22>
		//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    if(target_angle > 0){
 800b068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dd37      	ble.n	800b0e0 <IMU_turn+0x108>
	     while(target_angle > Body_angle){
 800b070:	e027      	b.n	800b0c2 <IMU_turn+0xea>

	       IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b072:	4b29      	ldr	r3, [pc, #164]	; (800b118 <IMU_turn+0x140>)
 800b074:	ed93 8b00 	vldr	d8, [r3]
 800b078:	4b28      	ldr	r3, [pc, #160]	; (800b11c <IMU_turn+0x144>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fd f99b 	bl	80083b8 <__aeabi_f2d>
 800b082:	4604      	mov	r4, r0
 800b084:	460d      	mov	r5, r1
 800b086:	4b25      	ldr	r3, [pc, #148]	; (800b11c <IMU_turn+0x144>)
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fd f994 	bl	80083b8 <__aeabi_f2d>
 800b090:	4680      	mov	r8, r0
 800b092:	4689      	mov	r9, r1
 800b094:	4b21      	ldr	r3, [pc, #132]	; (800b11c <IMU_turn+0x144>)
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fd f98d 	bl	80083b8 <__aeabi_f2d>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	ec43 2b15 	vmov	d5, r2, r3
 800b0a6:	ec49 8b14 	vmov	d4, r8, r9
 800b0aa:	ec45 4b13 	vmov	d3, r4, r5
 800b0ae:	ed9f 2b18 	vldr	d2, [pc, #96]	; 800b110 <IMU_turn+0x138>
 800b0b2:	eeb0 1a48 	vmov.f32	s2, s16
 800b0b6:	eef0 1a68 	vmov.f32	s3, s17
 800b0ba:	ed97 0b00 	vldr	d0, [r7]
 800b0be:	f7ff f883 	bl	800a1c8 <IMU_Control>
	     while(target_angle > Body_angle){
 800b0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fd f964 	bl	8008394 <__aeabi_i2d>
 800b0cc:	4b14      	ldr	r3, [pc, #80]	; (800b120 <IMU_turn+0x148>)
 800b0ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4623      	mov	r3, r4
 800b0d6:	f7fd fc57 	bl	8008988 <__aeabi_dcmpgt>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1c8      	bne.n	800b072 <IMU_turn+0x9a>
	    			//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    mode.enc = 0;
 800b0e0:	4b10      	ldr	r3, [pc, #64]	; (800b124 <IMU_turn+0x14c>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	70da      	strb	r2, [r3, #3]
	    imu_angle = 0;
 800b0e6:	4a10      	ldr	r2, [pc, #64]	; (800b128 <IMU_turn+0x150>)
 800b0e8:	f04f 0300 	mov.w	r3, #0
 800b0ec:	f04f 0400 	mov.w	r4, #0
 800b0f0:	e9c2 3400 	strd	r3, r4, [r2]
	    Body_angle = 0;
 800b0f4:	4a0a      	ldr	r2, [pc, #40]	; (800b120 <IMU_turn+0x148>)
 800b0f6:	f04f 0300 	mov.w	r3, #0
 800b0fa:	f04f 0400 	mov.w	r4, #0
 800b0fe:	e9c2 3400 	strd	r3, r4, [r2]

	//Motor_PWM_Stop();

}
 800b102:	bf00      	nop
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	ecbd 8b02 	vpop	{d8}
 800b10c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b110:	d2f1a9fc 	.word	0xd2f1a9fc
 800b114:	3f50624d 	.word	0x3f50624d
 800b118:	200002d0 	.word	0x200002d0
 800b11c:	20000044 	.word	0x20000044
 800b120:	200002c0 	.word	0x200002c0
 800b124:	20000074 	.word	0x20000074
 800b128:	200002c8 	.word	0x200002c8

0800b12c <turn_right>:

void turn_right(){
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0

	//左右の車輪速度制御
	//or 角�?�度制御で旋回
	  uint8_t counter=0;
 800b132:	2300      	movs	r3, #0
 800b134:	71fb      	strb	r3, [r7, #7]
	  //printf("turnはじめ\r\n");
	   while(counter < 1){
 800b136:	e045      	b.n	800b1c4 <turn_right+0x98>

			Target_velocity = 0;
 800b138:	4b28      	ldr	r3, [pc, #160]	; (800b1dc <turn_right+0xb0>)
 800b13a:	f04f 0200 	mov.w	r2, #0
 800b13e:	601a      	str	r2, [r3, #0]

			error_reset = 0;
 800b140:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <turn_right+0xb4>)
 800b142:	2200      	movs	r2, #0
 800b144:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b146:	f7fe fbe3 	bl	8009910 <Motor_Count_Clear>
	    EN3_L.integrate = 0;
 800b14a:	4b26      	ldr	r3, [pc, #152]	; (800b1e4 <turn_right+0xb8>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	605a      	str	r2, [r3, #4]
	    EN4_R.integrate = 0;
 800b150:	4b25      	ldr	r3, [pc, #148]	; (800b1e8 <turn_right+0xbc>)
 800b152:	2200      	movs	r2, #0
 800b154:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b156:	4b25      	ldr	r3, [pc, #148]	; (800b1ec <turn_right+0xc0>)
 800b158:	2200      	movs	r2, #0
 800b15a:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b15c:	4b24      	ldr	r3, [pc, #144]	; (800b1f0 <turn_right+0xc4>)
 800b15e:	2201      	movs	r2, #1
 800b160:	70da      	strb	r2, [r3, #3]
		  //int pulse_check ;
		///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b162:	e005      	b.n	800b170 <turn_right+0x44>

		  mode.control = 3;
 800b164:	4b22      	ldr	r3, [pc, #136]	; (800b1f0 <turn_right+0xc4>)
 800b166:	2203      	movs	r2, #3
 800b168:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = -5;//Rotate(Target_Rad_velo, -5, Target_pul_quarter, EN3_L.integrate);
 800b16a:	4b22      	ldr	r3, [pc, #136]	; (800b1f4 <turn_right+0xc8>)
 800b16c:	4a22      	ldr	r2, [pc, #136]	; (800b1f8 <turn_right+0xcc>)
 800b16e:	601a      	str	r2, [r3, #0]
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b170:	4b1c      	ldr	r3, [pc, #112]	; (800b1e4 <turn_right+0xb8>)
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	4b1c      	ldr	r3, [pc, #112]	; (800b1e8 <turn_right+0xbc>)
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	ee07 3a90 	vmov	s15, r3
 800b17e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b182:	4b1e      	ldr	r3, [pc, #120]	; (800b1fc <turn_right+0xd0>)
 800b184:	edd3 7a00 	vldr	s15, [r3]
 800b188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b18c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b194:	d9e6      	bls.n	800b164 <turn_right+0x38>
//		  Target_Rad_velo = -10;
		  //pulse_check = EN3_L.integrate + (-1)*EN4_R.integrate;
		  //printf("turn中 %d\r\n",pulse_check);
	    	}

	      mode.enc = 0;
 800b196:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <turn_right+0xc4>)
 800b198:	2200      	movs	r2, #0
 800b19a:	70da      	strb	r2, [r3, #3]
	      Target_Rad_velo = 0;
 800b19c:	4b15      	ldr	r3, [pc, #84]	; (800b1f4 <turn_right+0xc8>)
 800b19e:	f04f 0200 	mov.w	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]
//	      mode.control = 4;
//	      Target_Rad_velo = 0;
	      Target_velocity = 0;
 800b1a4:	4b0d      	ldr	r3, [pc, #52]	; (800b1dc <turn_right+0xb0>)
 800b1a6:	f04f 0200 	mov.w	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
//			  printf("turn中 %d, <= 目標パルス %f\r\n",pulse_check ,Target_pul_quarter*2);
//
//
//		  }
	      //Target_rotate =0;
	      EN3_L.integrate = 0;
 800b1ac:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <turn_right+0xb8>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	; (800b1e8 <turn_right+0xbc>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	605a      	str	r2, [r3, #4]
	      EN_Body.integrate = 0;
 800b1b8:	4b0c      	ldr	r3, [pc, #48]	; (800b1ec <turn_right+0xc0>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	605a      	str	r2, [r3, #4]
	      counter++;
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	71fb      	strb	r3, [r7, #7]
	   while(counter < 1){
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d0b6      	beq.n	800b138 <turn_right+0xc>
	     }
		error_reset = 0;
 800b1ca:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <turn_right+0xb4>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b1d0:	f7fe fb9e 	bl	8009910 <Motor_Count_Clear>




}
 800b1d4:	bf00      	nop
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	200002b8 	.word	0x200002b8
 800b1e0:	2000027c 	.word	0x2000027c
 800b1e4:	20000050 	.word	0x20000050
 800b1e8:	2000005c 	.word	0x2000005c
 800b1ec:	20000068 	.word	0x20000068
 800b1f0:	20000074 	.word	0x20000074
 800b1f4:	200002bc 	.word	0x200002bc
 800b1f8:	c0a00000 	.word	0xc0a00000
 800b1fc:	20000004 	.word	0x20000004

0800b200 <turn_left>:

void turn_left(){
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b206:	2300      	movs	r3, #0
 800b208:	71fb      	strb	r3, [r7, #7]
	  //static int check = 0, check2 = 0;

    while(counter < 1){
 800b20a:	e045      	b.n	800b298 <turn_left+0x98>

			Target_velocity = 0;
 800b20c:	4b28      	ldr	r3, [pc, #160]	; (800b2b0 <turn_left+0xb0>)
 800b20e:	f04f 0200 	mov.w	r2, #0
 800b212:	601a      	str	r2, [r3, #0]
			error_reset = 0;
 800b214:	4b27      	ldr	r3, [pc, #156]	; (800b2b4 <turn_left+0xb4>)
 800b216:	2200      	movs	r2, #0
 800b218:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b21a:	f7fe fb79 	bl	8009910 <Motor_Count_Clear>
	      EN3_L.integrate = 0;
 800b21e:	4b26      	ldr	r3, [pc, #152]	; (800b2b8 <turn_left+0xb8>)
 800b220:	2200      	movs	r2, #0
 800b222:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b224:	4b25      	ldr	r3, [pc, #148]	; (800b2bc <turn_left+0xbc>)
 800b226:	2200      	movs	r2, #0
 800b228:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b22a:	4b25      	ldr	r3, [pc, #148]	; (800b2c0 <turn_left+0xc0>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b230:	4b24      	ldr	r3, [pc, #144]	; (800b2c4 <turn_left+0xc4>)
 800b232:	2201      	movs	r2, #1
 800b234:	70da      	strb	r2, [r3, #3]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b236:	e005      	b.n	800b244 <turn_left+0x44>

		  mode.control = 3;
 800b238:	4b22      	ldr	r3, [pc, #136]	; (800b2c4 <turn_left+0xc4>)
 800b23a:	2203      	movs	r2, #3
 800b23c:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = 5;//Rotate(Target_Rad_velo, 5, Target_pul_quarter, EN4_R.integrate);
 800b23e:	4b22      	ldr	r3, [pc, #136]	; (800b2c8 <turn_left+0xc8>)
 800b240:	4a22      	ldr	r2, [pc, #136]	; (800b2cc <turn_left+0xcc>)
 800b242:	601a      	str	r2, [r3, #0]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b244:	4b1d      	ldr	r3, [pc, #116]	; (800b2bc <turn_left+0xbc>)
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <turn_left+0xb8>)
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	ee07 3a90 	vmov	s15, r3
 800b252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b256:	4b1e      	ldr	r3, [pc, #120]	; (800b2d0 <turn_left+0xd0>)
 800b258:	edd3 7a00 	vldr	s15, [r3]
 800b25c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b268:	d9e6      	bls.n	800b238 <turn_left+0x38>
//	      check = EN3_L.integrate;
//	      check2 = EN4_R.integrate;
//		mode.control = 3;
//		Target_Rad_velo = 10;
	}
    mode.enc = 0;
 800b26a:	4b16      	ldr	r3, [pc, #88]	; (800b2c4 <turn_left+0xc4>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	70da      	strb	r2, [r3, #3]
    Target_Rad_velo = 0;
 800b270:	4b15      	ldr	r3, [pc, #84]	; (800b2c8 <turn_left+0xc8>)
 800b272:	f04f 0200 	mov.w	r2, #0
 800b276:	601a      	str	r2, [r3, #0]
//	mode.control = 4;
//	Target_Rad_velo = 0;
    Target_velocity = 0;
 800b278:	4b0d      	ldr	r3, [pc, #52]	; (800b2b0 <turn_left+0xb0>)
 800b27a:	f04f 0200 	mov.w	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
    //Target_rotate =0;
    EN3_L.integrate = 0;
 800b280:	4b0d      	ldr	r3, [pc, #52]	; (800b2b8 <turn_left+0xb8>)
 800b282:	2200      	movs	r2, #0
 800b284:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b286:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <turn_left+0xbc>)
 800b288:	2200      	movs	r2, #0
 800b28a:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b28c:	4b0c      	ldr	r3, [pc, #48]	; (800b2c0 <turn_left+0xc0>)
 800b28e:	2200      	movs	r2, #0
 800b290:	605a      	str	r2, [r3, #4]
    counter++;
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	3301      	adds	r3, #1
 800b296:	71fb      	strb	r3, [r7, #7]
    while(counter < 1){
 800b298:	79fb      	ldrb	r3, [r7, #7]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0b6      	beq.n	800b20c <turn_left+0xc>
   }
	error_reset = 0;
 800b29e:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <turn_left+0xb4>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b2a4:	f7fe fb34 	bl	8009910 <Motor_Count_Clear>
//    printf("左に90°回転時左 : %d \r\n",check);
//    printf("左に90°回転時右 : %d \r\n",check2);
//    printf("\r\n");

}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	200002b8 	.word	0x200002b8
 800b2b4:	2000027c 	.word	0x2000027c
 800b2b8:	20000050 	.word	0x20000050
 800b2bc:	2000005c 	.word	0x2000005c
 800b2c0:	20000068 	.word	0x20000068
 800b2c4:	20000074 	.word	0x20000074
 800b2c8:	200002bc 	.word	0x200002bc
 800b2cc:	40a00000 	.word	0x40a00000
 800b2d0:	20000004 	.word	0x20000004
 800b2d4:	00000000 	.word	0x00000000

0800b2d8 <slow_turn_R>:

void slow_turn_R(){
 800b2d8:	b598      	push	{r3, r4, r7, lr}
 800b2da:	af00      	add	r7, sp, #0

		mode.control = 6;
 800b2dc:	4b50      	ldr	r3, [pc, #320]	; (800b420 <slow_turn_R+0x148>)
 800b2de:	2206      	movs	r2, #6
 800b2e0:	715a      	strb	r2, [r3, #5]

		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b2e2:	e002      	b.n	800b2ea <slow_turn_R+0x12>
			mode.accel = 6;
 800b2e4:	4b4e      	ldr	r3, [pc, #312]	; (800b420 <slow_turn_R+0x148>)
 800b2e6:	2206      	movs	r2, #6
 800b2e8:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b2ea:	4b4e      	ldr	r3, [pc, #312]	; (800b424 <slow_turn_R+0x14c>)
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	4b4e      	ldr	r3, [pc, #312]	; (800b428 <slow_turn_R+0x150>)
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fd f84d 	bl	8008394 <__aeabi_i2d>
 800b2fa:	a33f      	add	r3, pc, #252	; (adr r3, 800b3f8 <slow_turn_R+0x120>)
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	f7fd fb24 	bl	800894c <__aeabi_dcmplt>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1ec      	bne.n	800b2e4 <slow_turn_R+0xc>

		}
		mode.accel = 0;
 800b30a:	4b45      	ldr	r3, [pc, #276]	; (800b420 <slow_turn_R+0x148>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	705a      	strb	r2, [r3, #1]

		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b310:	e021      	b.n	800b356 <slow_turn_R+0x7e>
			Target_velocity = CURVE_SPEED;
 800b312:	4b46      	ldr	r3, [pc, #280]	; (800b42c <slow_turn_R+0x154>)
 800b314:	4a46      	ldr	r2, [pc, #280]	; (800b430 <slow_turn_R+0x158>)
 800b316:	601a      	str	r2, [r3, #0]
			Target_L_velo = CURVE_SPEED  * (90+TREAD_WIDTH)/90;//130/90;//124.6/90;
 800b318:	4b46      	ldr	r3, [pc, #280]	; (800b434 <slow_turn_R+0x15c>)
 800b31a:	4a47      	ldr	r2, [pc, #284]	; (800b438 <slow_turn_R+0x160>)
 800b31c:	601a      	str	r2, [r3, #0]
			Target_R_velo = Target_L_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);//50/130;//55.4 / 124.6;
 800b31e:	4b45      	ldr	r3, [pc, #276]	; (800b434 <slow_turn_R+0x15c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4618      	mov	r0, r3
 800b324:	f7fd f848 	bl	80083b8 <__aeabi_f2d>
 800b328:	a335      	add	r3, pc, #212	; (adr r3, 800b400 <slow_turn_R+0x128>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	f7fd f89b 	bl	8008468 <__aeabi_dmul>
 800b332:	4603      	mov	r3, r0
 800b334:	460c      	mov	r4, r1
 800b336:	4618      	mov	r0, r3
 800b338:	4621      	mov	r1, r4
 800b33a:	a333      	add	r3, pc, #204	; (adr r3, 800b408 <slow_turn_R+0x130>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7fd f9bc 	bl	80086bc <__aeabi_ddiv>
 800b344:	4603      	mov	r3, r0
 800b346:	460c      	mov	r4, r1
 800b348:	4618      	mov	r0, r3
 800b34a:	4621      	mov	r1, r4
 800b34c:	f7fd fb64 	bl	8008a18 <__aeabi_d2f>
 800b350:	4602      	mov	r2, r0
 800b352:	4b3a      	ldr	r3, [pc, #232]	; (800b43c <slow_turn_R+0x164>)
 800b354:	601a      	str	r2, [r3, #0]
		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b356:	4b33      	ldr	r3, [pc, #204]	; (800b424 <slow_turn_R+0x14c>)
 800b358:	685a      	ldr	r2, [r3, #4]
 800b35a:	4b33      	ldr	r3, [pc, #204]	; (800b428 <slow_turn_R+0x150>)
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4413      	add	r3, r2
 800b360:	4618      	mov	r0, r3
 800b362:	f7fd f817 	bl	8008394 <__aeabi_i2d>
 800b366:	a324      	add	r3, pc, #144	; (adr r3, 800b3f8 <slow_turn_R+0x120>)
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	f7fd fb02 	bl	8008974 <__aeabi_dcmpge>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00f      	beq.n	800b396 <slow_turn_R+0xbe>
 800b376:	4b2b      	ldr	r3, [pc, #172]	; (800b424 <slow_turn_R+0x14c>)
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	4b2b      	ldr	r3, [pc, #172]	; (800b428 <slow_turn_R+0x150>)
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	4413      	add	r3, r2
 800b380:	4618      	mov	r0, r3
 800b382:	f7fd f807 	bl	8008394 <__aeabi_i2d>
 800b386:	a322      	add	r3, pc, #136	; (adr r3, 800b410 <slow_turn_R+0x138>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7fd fade 	bl	800894c <__aeabi_dcmplt>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1bd      	bne.n	800b312 <slow_turn_R+0x3a>

		}
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b396:	e002      	b.n	800b39e <slow_turn_R+0xc6>
			mode.accel = 7;
 800b398:	4b21      	ldr	r3, [pc, #132]	; (800b420 <slow_turn_R+0x148>)
 800b39a:	2207      	movs	r2, #7
 800b39c:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b39e:	4b21      	ldr	r3, [pc, #132]	; (800b424 <slow_turn_R+0x14c>)
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	4b21      	ldr	r3, [pc, #132]	; (800b428 <slow_turn_R+0x150>)
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fc fff3 	bl	8008394 <__aeabi_i2d>
 800b3ae:	a31a      	add	r3, pc, #104	; (adr r3, 800b418 <slow_turn_R+0x140>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f7fd faca 	bl	800894c <__aeabi_dcmplt>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1ec      	bne.n	800b398 <slow_turn_R+0xc0>

		}
		mode.accel = 0;
 800b3be:	4b18      	ldr	r3, [pc, #96]	; (800b420 <slow_turn_R+0x148>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	705a      	strb	r2, [r3, #1]
//		if(Body_angle < -90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b3c4:	4b16      	ldr	r3, [pc, #88]	; (800b420 <slow_turn_R+0x148>)
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b3ca:	4b16      	ldr	r3, [pc, #88]	; (800b424 <slow_turn_R+0x14c>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b3d0:	4b15      	ldr	r3, [pc, #84]	; (800b428 <slow_turn_R+0x150>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b3d6:	4b1a      	ldr	r3, [pc, #104]	; (800b440 <slow_turn_R+0x168>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b3dc:	4b15      	ldr	r3, [pc, #84]	; (800b434 <slow_turn_R+0x15c>)
 800b3de:	f04f 0200 	mov.w	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b3e4:	4b15      	ldr	r3, [pc, #84]	; (800b43c <slow_turn_R+0x164>)
 800b3e6:	f04f 0200 	mov.w	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b3ec:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <slow_turn_R+0x154>)
 800b3ee:	4a15      	ldr	r2, [pc, #84]	; (800b444 <slow_turn_R+0x16c>)
 800b3f0:	601a      	str	r2, [r3, #0]
}
 800b3f2:	bf00      	nop
 800b3f4:	bd98      	pop	{r3, r4, r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	234f4839 	.word	0x234f4839
 800b3fc:	40c7f082 	.word	0x40c7f082
 800b400:	cccccccd 	.word	0xcccccccd
 800b404:	404acccc 	.word	0x404acccc
 800b408:	9999999a 	.word	0x9999999a
 800b40c:	405f9999 	.word	0x405f9999
 800b410:	9433a0d1 	.word	0x9433a0d1
 800b414:	40ff9f79 	.word	0x40ff9f79
 800b418:	ec4ec4ec 	.word	0xec4ec4ec
 800b41c:	41014ec4 	.word	0x41014ec4
 800b420:	20000074 	.word	0x20000074
 800b424:	20000050 	.word	0x20000050
 800b428:	2000005c 	.word	0x2000005c
 800b42c:	200002b8 	.word	0x200002b8
 800b430:	43340000 	.word	0x43340000
 800b434:	200043a4 	.word	0x200043a4
 800b438:	437ccccd 	.word	0x437ccccd
 800b43c:	20004380 	.word	0x20004380
 800b440:	20000068 	.word	0x20000068
 800b444:	43960000 	.word	0x43960000

0800b448 <slow_turn_L>:

void slow_turn_L(){
 800b448:	b598      	push	{r3, r4, r7, lr}
 800b44a:	af00      	add	r7, sp, #0
	//左右輪制御
	mode.control = 6;
 800b44c:	4b50      	ldr	r3, [pc, #320]	; (800b590 <slow_turn_L+0x148>)
 800b44e:	2206      	movs	r2, #6
 800b450:	715a      	strb	r2, [r3, #5]

	//等加速度�?速減�??
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b452:	e002      	b.n	800b45a <slow_turn_L+0x12>
		mode.accel = 4;
 800b454:	4b4e      	ldr	r3, [pc, #312]	; (800b590 <slow_turn_L+0x148>)
 800b456:	2204      	movs	r2, #4
 800b458:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b45a:	4b4e      	ldr	r3, [pc, #312]	; (800b594 <slow_turn_L+0x14c>)
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	4b4e      	ldr	r3, [pc, #312]	; (800b598 <slow_turn_L+0x150>)
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	4413      	add	r3, r2
 800b464:	4618      	mov	r0, r3
 800b466:	f7fc ff95 	bl	8008394 <__aeabi_i2d>
 800b46a:	a33f      	add	r3, pc, #252	; (adr r3, 800b568 <slow_turn_L+0x120>)
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f7fd fa6c 	bl	800894c <__aeabi_dcmplt>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1ec      	bne.n	800b454 <slow_turn_L+0xc>

	}
	//�?速やめる
	mode.accel = 0;
 800b47a:	4b45      	ldr	r3, [pc, #276]	; (800b590 <slow_turn_L+0x148>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	705a      	strb	r2, [r3, #1]

	//等�?�カー�?
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b480:	e021      	b.n	800b4c6 <slow_turn_L+0x7e>
		Target_velocity = CURVE_SPEED;
 800b482:	4b46      	ldr	r3, [pc, #280]	; (800b59c <slow_turn_L+0x154>)
 800b484:	4a46      	ldr	r2, [pc, #280]	; (800b5a0 <slow_turn_L+0x158>)
 800b486:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED   * (90+TREAD_WIDTH)/90;
 800b488:	4b46      	ldr	r3, [pc, #280]	; (800b5a4 <slow_turn_L+0x15c>)
 800b48a:	4a47      	ldr	r2, [pc, #284]	; (800b5a8 <slow_turn_L+0x160>)
 800b48c:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);
 800b48e:	4b45      	ldr	r3, [pc, #276]	; (800b5a4 <slow_turn_L+0x15c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f7fc ff90 	bl	80083b8 <__aeabi_f2d>
 800b498:	a335      	add	r3, pc, #212	; (adr r3, 800b570 <slow_turn_L+0x128>)
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f7fc ffe3 	bl	8008468 <__aeabi_dmul>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	a333      	add	r3, pc, #204	; (adr r3, 800b578 <slow_turn_L+0x130>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7fd f904 	bl	80086bc <__aeabi_ddiv>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	f7fd faac 	bl	8008a18 <__aeabi_d2f>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	4b3a      	ldr	r3, [pc, #232]	; (800b5ac <slow_turn_L+0x164>)
 800b4c4:	601a      	str	r2, [r3, #0]
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b4c6:	4b33      	ldr	r3, [pc, #204]	; (800b594 <slow_turn_L+0x14c>)
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	4b33      	ldr	r3, [pc, #204]	; (800b598 <slow_turn_L+0x150>)
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fc ff5f 	bl	8008394 <__aeabi_i2d>
 800b4d6:	a324      	add	r3, pc, #144	; (adr r3, 800b568 <slow_turn_L+0x120>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7fd fa4a 	bl	8008974 <__aeabi_dcmpge>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00f      	beq.n	800b506 <slow_turn_L+0xbe>
 800b4e6:	4b2b      	ldr	r3, [pc, #172]	; (800b594 <slow_turn_L+0x14c>)
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	4b2b      	ldr	r3, [pc, #172]	; (800b598 <slow_turn_L+0x150>)
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fc ff4f 	bl	8008394 <__aeabi_i2d>
 800b4f6:	a322      	add	r3, pc, #136	; (adr r3, 800b580 <slow_turn_L+0x138>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f7fd fa26 	bl	800894c <__aeabi_dcmplt>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1bd      	bne.n	800b482 <slow_turn_L+0x3a>
		//タイヤ�?が�?くなってから比率を変えて�?なかった�?��?
	}
	//等加速度�?速減�??
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b506:	e002      	b.n	800b50e <slow_turn_L+0xc6>
		mode.accel = 5;
 800b508:	4b21      	ldr	r3, [pc, #132]	; (800b590 <slow_turn_L+0x148>)
 800b50a:	2205      	movs	r2, #5
 800b50c:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b50e:	4b21      	ldr	r3, [pc, #132]	; (800b594 <slow_turn_L+0x14c>)
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	4b21      	ldr	r3, [pc, #132]	; (800b598 <slow_turn_L+0x150>)
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4413      	add	r3, r2
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fc ff3b 	bl	8008394 <__aeabi_i2d>
 800b51e:	a31a      	add	r3, pc, #104	; (adr r3, 800b588 <slow_turn_L+0x140>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7fd fa12 	bl	800894c <__aeabi_dcmplt>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1ec      	bne.n	800b508 <slow_turn_L+0xc0>

	}
	//�?減�?�やめる
	mode.accel = 0;
 800b52e:	4b18      	ldr	r3, [pc, #96]	; (800b590 <slow_turn_L+0x148>)
 800b530:	2200      	movs	r2, #0
 800b532:	705a      	strb	r2, [r3, #1]
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b534:	4b16      	ldr	r3, [pc, #88]	; (800b590 <slow_turn_L+0x148>)
 800b536:	2204      	movs	r2, #4
 800b538:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b53a:	4b16      	ldr	r3, [pc, #88]	; (800b594 <slow_turn_L+0x14c>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b540:	4b15      	ldr	r3, [pc, #84]	; (800b598 <slow_turn_L+0x150>)
 800b542:	2200      	movs	r2, #0
 800b544:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b546:	4b1a      	ldr	r3, [pc, #104]	; (800b5b0 <slow_turn_L+0x168>)
 800b548:	2200      	movs	r2, #0
 800b54a:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b54c:	4b17      	ldr	r3, [pc, #92]	; (800b5ac <slow_turn_L+0x164>)
 800b54e:	f04f 0200 	mov.w	r2, #0
 800b552:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b554:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <slow_turn_L+0x15c>)
 800b556:	f04f 0200 	mov.w	r2, #0
 800b55a:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b55c:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <slow_turn_L+0x154>)
 800b55e:	4a15      	ldr	r2, [pc, #84]	; (800b5b4 <slow_turn_L+0x16c>)
 800b560:	601a      	str	r2, [r3, #0]
}
 800b562:	bf00      	nop
 800b564:	bd98      	pop	{r3, r4, r7, pc}
 800b566:	bf00      	nop
 800b568:	234f4839 	.word	0x234f4839
 800b56c:	40c7f082 	.word	0x40c7f082
 800b570:	cccccccd 	.word	0xcccccccd
 800b574:	404acccc 	.word	0x404acccc
 800b578:	9999999a 	.word	0x9999999a
 800b57c:	405f9999 	.word	0x405f9999
 800b580:	9433a0d1 	.word	0x9433a0d1
 800b584:	40ff9f79 	.word	0x40ff9f79
 800b588:	ec4ec4ec 	.word	0xec4ec4ec
 800b58c:	41014ec4 	.word	0x41014ec4
 800b590:	20000074 	.word	0x20000074
 800b594:	20000050 	.word	0x20000050
 800b598:	2000005c 	.word	0x2000005c
 800b59c:	200002b8 	.word	0x200002b8
 800b5a0:	43340000 	.word	0x43340000
 800b5a4:	20004380 	.word	0x20004380
 800b5a8:	437ccccd 	.word	0x437ccccd
 800b5ac:	200043a4 	.word	0x200043a4
 800b5b0:	20000068 	.word	0x20000068
 800b5b4:	43960000 	.word	0x43960000

0800b5b8 <shinchi_turn_R>:

void shinchi_turn_R(){
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b5bc:	e070      	b.n	800b6a0 <shinchi_turn_R+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b5be:	4b54      	ldr	r3, [pc, #336]	; (800b710 <shinchi_turn_R+0x158>)
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	4b54      	ldr	r3, [pc, #336]	; (800b714 <shinchi_turn_R+0x15c>)
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fc fee3 	bl	8008394 <__aeabi_i2d>
 800b5ce:	a34a      	add	r3, pc, #296	; (adr r3, 800b6f8 <shinchi_turn_R+0x140>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7fd f9ba 	bl	800894c <__aeabi_dcmplt>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d005      	beq.n	800b5ea <shinchi_turn_R+0x32>
			mode.control = 4;
 800b5de:	4b4e      	ldr	r3, [pc, #312]	; (800b718 <shinchi_turn_R+0x160>)
 800b5e0:	2204      	movs	r2, #4
 800b5e2:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b5e4:	4b4d      	ldr	r3, [pc, #308]	; (800b71c <shinchi_turn_R+0x164>)
 800b5e6:	4a4e      	ldr	r2, [pc, #312]	; (800b720 <shinchi_turn_R+0x168>)
 800b5e8:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b5ea:	4b49      	ldr	r3, [pc, #292]	; (800b710 <shinchi_turn_R+0x158>)
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	4b49      	ldr	r3, [pc, #292]	; (800b714 <shinchi_turn_R+0x15c>)
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fc fecd 	bl	8008394 <__aeabi_i2d>
 800b5fa:	a33f      	add	r3, pc, #252	; (adr r3, 800b6f8 <shinchi_turn_R+0x140>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7fd f9b8 	bl	8008974 <__aeabi_dcmpge>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d022      	beq.n	800b650 <shinchi_turn_R+0x98>
 800b60a:	4b41      	ldr	r3, [pc, #260]	; (800b710 <shinchi_turn_R+0x158>)
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	4b41      	ldr	r3, [pc, #260]	; (800b714 <shinchi_turn_R+0x15c>)
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	4413      	add	r3, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f7fc febd 	bl	8008394 <__aeabi_i2d>
 800b61a:	a339      	add	r3, pc, #228	; (adr r3, 800b700 <shinchi_turn_R+0x148>)
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	f7fd f994 	bl	800894c <__aeabi_dcmplt>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d012      	beq.n	800b650 <shinchi_turn_R+0x98>
		mode.control = 6;
 800b62a:	4b3b      	ldr	r3, [pc, #236]	; (800b718 <shinchi_turn_R+0x160>)
 800b62c:	2206      	movs	r2, #6
 800b62e:	715a      	strb	r2, [r3, #5]
		//IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
		Target_velocity = CURVE_SPEED;
 800b630:	4b3a      	ldr	r3, [pc, #232]	; (800b71c <shinchi_turn_R+0x164>)
 800b632:	4a3b      	ldr	r2, [pc, #236]	; (800b720 <shinchi_turn_R+0x168>)
 800b634:	601a      	str	r2, [r3, #0]
		Target_L_velo = CURVE_SPEED  * 2;
 800b636:	4b3b      	ldr	r3, [pc, #236]	; (800b724 <shinchi_turn_R+0x16c>)
 800b638:	4a3b      	ldr	r2, [pc, #236]	; (800b728 <shinchi_turn_R+0x170>)
 800b63a:	601a      	str	r2, [r3, #0]
		Target_R_velo = Target_L_velo * 0;
 800b63c:	4b39      	ldr	r3, [pc, #228]	; (800b724 <shinchi_turn_R+0x16c>)
 800b63e:	edd3 7a00 	vldr	s15, [r3]
 800b642:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b72c <shinchi_turn_R+0x174>
 800b646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b64a:	4b39      	ldr	r3, [pc, #228]	; (800b730 <shinchi_turn_R+0x178>)
 800b64c:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b650:	4b2f      	ldr	r3, [pc, #188]	; (800b710 <shinchi_turn_R+0x158>)
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	4b2f      	ldr	r3, [pc, #188]	; (800b714 <shinchi_turn_R+0x15c>)
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	4413      	add	r3, r2
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fc fe9a 	bl	8008394 <__aeabi_i2d>
 800b660:	a327      	add	r3, pc, #156	; (adr r3, 800b700 <shinchi_turn_R+0x148>)
 800b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b666:	f7fd f985 	bl	8008974 <__aeabi_dcmpge>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d100      	bne.n	800b672 <shinchi_turn_R+0xba>
 800b670:	e016      	b.n	800b6a0 <shinchi_turn_R+0xe8>
 800b672:	4b27      	ldr	r3, [pc, #156]	; (800b710 <shinchi_turn_R+0x158>)
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	4b27      	ldr	r3, [pc, #156]	; (800b714 <shinchi_turn_R+0x15c>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	4413      	add	r3, r2
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fc fe89 	bl	8008394 <__aeabi_i2d>
 800b682:	a321      	add	r3, pc, #132	; (adr r3, 800b708 <shinchi_turn_R+0x150>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7fd f960 	bl	800894c <__aeabi_dcmplt>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d100      	bne.n	800b694 <shinchi_turn_R+0xdc>
 800b692:	e005      	b.n	800b6a0 <shinchi_turn_R+0xe8>
			mode.control = 4;
 800b694:	4b20      	ldr	r3, [pc, #128]	; (800b718 <shinchi_turn_R+0x160>)
 800b696:	2204      	movs	r2, #4
 800b698:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b69a:	4b20      	ldr	r3, [pc, #128]	; (800b71c <shinchi_turn_R+0x164>)
 800b69c:	4a20      	ldr	r2, [pc, #128]	; (800b720 <shinchi_turn_R+0x168>)
 800b69e:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b6a0:	4b1b      	ldr	r3, [pc, #108]	; (800b710 <shinchi_turn_R+0x158>)
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	4b1b      	ldr	r3, [pc, #108]	; (800b714 <shinchi_turn_R+0x15c>)
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fc fe72 	bl	8008394 <__aeabi_i2d>
 800b6b0:	a315      	add	r3, pc, #84	; (adr r3, 800b708 <shinchi_turn_R+0x150>)
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	f7fd f949 	bl	800894c <__aeabi_dcmplt>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f47f af7e 	bne.w	800b5be <shinchi_turn_R+0x6>
//			IMU_init();
//			break;
//		}

	}
	mode.control = 4;
 800b6c2:	4b15      	ldr	r3, [pc, #84]	; (800b718 <shinchi_turn_R+0x160>)
 800b6c4:	2204      	movs	r2, #4
 800b6c6:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b6c8:	4b11      	ldr	r3, [pc, #68]	; (800b710 <shinchi_turn_R+0x158>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b6ce:	4b11      	ldr	r3, [pc, #68]	; (800b714 <shinchi_turn_R+0x15c>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b6d4:	4b17      	ldr	r3, [pc, #92]	; (800b734 <shinchi_turn_R+0x17c>)
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b6da:	4b12      	ldr	r3, [pc, #72]	; (800b724 <shinchi_turn_R+0x16c>)
 800b6dc:	f04f 0200 	mov.w	r2, #0
 800b6e0:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b6e2:	4b13      	ldr	r3, [pc, #76]	; (800b730 <shinchi_turn_R+0x178>)
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b6ea:	4b0c      	ldr	r3, [pc, #48]	; (800b71c <shinchi_turn_R+0x164>)
 800b6ec:	4a12      	ldr	r2, [pc, #72]	; (800b738 <shinchi_turn_R+0x180>)
 800b6ee:	601a      	str	r2, [r3, #0]

}
 800b6f0:	bf00      	nop
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	f3af 8000 	nop.w
 800b6f8:	174dd60b 	.word	0x174dd60b
 800b6fc:	40ea3f92 	.word	0x40ea3f92
 800b700:	0ba6eb06 	.word	0x0ba6eb06
 800b704:	40fb1fc9 	.word	0x40fb1fc9
 800b708:	0ba6eb06 	.word	0x0ba6eb06
 800b70c:	41041fc9 	.word	0x41041fc9
 800b710:	20000050 	.word	0x20000050
 800b714:	2000005c 	.word	0x2000005c
 800b718:	20000074 	.word	0x20000074
 800b71c:	200002b8 	.word	0x200002b8
 800b720:	43340000 	.word	0x43340000
 800b724:	200043a4 	.word	0x200043a4
 800b728:	43b40000 	.word	0x43b40000
 800b72c:	00000000 	.word	0x00000000
 800b730:	20004380 	.word	0x20004380
 800b734:	20000068 	.word	0x20000068
 800b738:	43960000 	.word	0x43960000
 800b73c:	00000000 	.word	0x00000000

0800b740 <shinchi_turn_L>:
void shinchi_turn_L(){
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b744:	e070      	b.n	800b828 <shinchi_turn_L+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b746:	4b54      	ldr	r3, [pc, #336]	; (800b898 <shinchi_turn_L+0x158>)
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	4b54      	ldr	r3, [pc, #336]	; (800b89c <shinchi_turn_L+0x15c>)
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	4413      	add	r3, r2
 800b750:	4618      	mov	r0, r3
 800b752:	f7fc fe1f 	bl	8008394 <__aeabi_i2d>
 800b756:	a34a      	add	r3, pc, #296	; (adr r3, 800b880 <shinchi_turn_L+0x140>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7fd f8f6 	bl	800894c <__aeabi_dcmplt>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d005      	beq.n	800b772 <shinchi_turn_L+0x32>
			mode.control = 4;
 800b766:	4b4e      	ldr	r3, [pc, #312]	; (800b8a0 <shinchi_turn_L+0x160>)
 800b768:	2204      	movs	r2, #4
 800b76a:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b76c:	4b4d      	ldr	r3, [pc, #308]	; (800b8a4 <shinchi_turn_L+0x164>)
 800b76e:	4a4e      	ldr	r2, [pc, #312]	; (800b8a8 <shinchi_turn_L+0x168>)
 800b770:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b772:	4b49      	ldr	r3, [pc, #292]	; (800b898 <shinchi_turn_L+0x158>)
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	4b49      	ldr	r3, [pc, #292]	; (800b89c <shinchi_turn_L+0x15c>)
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	4413      	add	r3, r2
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7fc fe09 	bl	8008394 <__aeabi_i2d>
 800b782:	a33f      	add	r3, pc, #252	; (adr r3, 800b880 <shinchi_turn_L+0x140>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	f7fd f8f4 	bl	8008974 <__aeabi_dcmpge>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d022      	beq.n	800b7d8 <shinchi_turn_L+0x98>
 800b792:	4b41      	ldr	r3, [pc, #260]	; (800b898 <shinchi_turn_L+0x158>)
 800b794:	685a      	ldr	r2, [r3, #4]
 800b796:	4b41      	ldr	r3, [pc, #260]	; (800b89c <shinchi_turn_L+0x15c>)
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	4413      	add	r3, r2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fc fdf9 	bl	8008394 <__aeabi_i2d>
 800b7a2:	a339      	add	r3, pc, #228	; (adr r3, 800b888 <shinchi_turn_L+0x148>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f7fd f8d0 	bl	800894c <__aeabi_dcmplt>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d012      	beq.n	800b7d8 <shinchi_turn_L+0x98>
		mode.control = 6;
 800b7b2:	4b3b      	ldr	r3, [pc, #236]	; (800b8a0 <shinchi_turn_L+0x160>)
 800b7b4:	2206      	movs	r2, #6
 800b7b6:	715a      	strb	r2, [r3, #5]
		Target_velocity = CURVE_SPEED;
 800b7b8:	4b3a      	ldr	r3, [pc, #232]	; (800b8a4 <shinchi_turn_L+0x164>)
 800b7ba:	4a3b      	ldr	r2, [pc, #236]	; (800b8a8 <shinchi_turn_L+0x168>)
 800b7bc:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED  * 2;
 800b7be:	4b3b      	ldr	r3, [pc, #236]	; (800b8ac <shinchi_turn_L+0x16c>)
 800b7c0:	4a3b      	ldr	r2, [pc, #236]	; (800b8b0 <shinchi_turn_L+0x170>)
 800b7c2:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 0;
 800b7c4:	4b39      	ldr	r3, [pc, #228]	; (800b8ac <shinchi_turn_L+0x16c>)
 800b7c6:	edd3 7a00 	vldr	s15, [r3]
 800b7ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b8b4 <shinchi_turn_L+0x174>
 800b7ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7d2:	4b39      	ldr	r3, [pc, #228]	; (800b8b8 <shinchi_turn_L+0x178>)
 800b7d4:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b7d8:	4b2f      	ldr	r3, [pc, #188]	; (800b898 <shinchi_turn_L+0x158>)
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	4b2f      	ldr	r3, [pc, #188]	; (800b89c <shinchi_turn_L+0x15c>)
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fc fdd6 	bl	8008394 <__aeabi_i2d>
 800b7e8:	a327      	add	r3, pc, #156	; (adr r3, 800b888 <shinchi_turn_L+0x148>)
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	f7fd f8c1 	bl	8008974 <__aeabi_dcmpge>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d100      	bne.n	800b7fa <shinchi_turn_L+0xba>
 800b7f8:	e016      	b.n	800b828 <shinchi_turn_L+0xe8>
 800b7fa:	4b27      	ldr	r3, [pc, #156]	; (800b898 <shinchi_turn_L+0x158>)
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	4b27      	ldr	r3, [pc, #156]	; (800b89c <shinchi_turn_L+0x15c>)
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	4413      	add	r3, r2
 800b804:	4618      	mov	r0, r3
 800b806:	f7fc fdc5 	bl	8008394 <__aeabi_i2d>
 800b80a:	a321      	add	r3, pc, #132	; (adr r3, 800b890 <shinchi_turn_L+0x150>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7fd f89c 	bl	800894c <__aeabi_dcmplt>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d100      	bne.n	800b81c <shinchi_turn_L+0xdc>
 800b81a:	e005      	b.n	800b828 <shinchi_turn_L+0xe8>
			mode.control = 4;
 800b81c:	4b20      	ldr	r3, [pc, #128]	; (800b8a0 <shinchi_turn_L+0x160>)
 800b81e:	2204      	movs	r2, #4
 800b820:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b822:	4b20      	ldr	r3, [pc, #128]	; (800b8a4 <shinchi_turn_L+0x164>)
 800b824:	4a20      	ldr	r2, [pc, #128]	; (800b8a8 <shinchi_turn_L+0x168>)
 800b826:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b828:	4b1b      	ldr	r3, [pc, #108]	; (800b898 <shinchi_turn_L+0x158>)
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	4b1b      	ldr	r3, [pc, #108]	; (800b89c <shinchi_turn_L+0x15c>)
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	4413      	add	r3, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f7fc fdae 	bl	8008394 <__aeabi_i2d>
 800b838:	a315      	add	r3, pc, #84	; (adr r3, 800b890 <shinchi_turn_L+0x150>)
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f7fd f885 	bl	800894c <__aeabi_dcmplt>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	f47f af7e 	bne.w	800b746 <shinchi_turn_L+0x6>
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}
	}
	mode.control = 4;
 800b84a:	4b15      	ldr	r3, [pc, #84]	; (800b8a0 <shinchi_turn_L+0x160>)
 800b84c:	2204      	movs	r2, #4
 800b84e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b850:	4b11      	ldr	r3, [pc, #68]	; (800b898 <shinchi_turn_L+0x158>)
 800b852:	2200      	movs	r2, #0
 800b854:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b856:	4b11      	ldr	r3, [pc, #68]	; (800b89c <shinchi_turn_L+0x15c>)
 800b858:	2200      	movs	r2, #0
 800b85a:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b85c:	4b17      	ldr	r3, [pc, #92]	; (800b8bc <shinchi_turn_L+0x17c>)
 800b85e:	2200      	movs	r2, #0
 800b860:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b862:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <shinchi_turn_L+0x178>)
 800b864:	f04f 0200 	mov.w	r2, #0
 800b868:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b86a:	4b10      	ldr	r3, [pc, #64]	; (800b8ac <shinchi_turn_L+0x16c>)
 800b86c:	f04f 0200 	mov.w	r2, #0
 800b870:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b872:	4b0c      	ldr	r3, [pc, #48]	; (800b8a4 <shinchi_turn_L+0x164>)
 800b874:	4a12      	ldr	r2, [pc, #72]	; (800b8c0 <shinchi_turn_L+0x180>)
 800b876:	601a      	str	r2, [r3, #0]
}
 800b878:	bf00      	nop
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	f3af 8000 	nop.w
 800b880:	174dd60b 	.word	0x174dd60b
 800b884:	40ea3f92 	.word	0x40ea3f92
 800b888:	0ba6eb06 	.word	0x0ba6eb06
 800b88c:	40fb1fc9 	.word	0x40fb1fc9
 800b890:	0ba6eb06 	.word	0x0ba6eb06
 800b894:	41041fc9 	.word	0x41041fc9
 800b898:	20000050 	.word	0x20000050
 800b89c:	2000005c 	.word	0x2000005c
 800b8a0:	20000074 	.word	0x20000074
 800b8a4:	200002b8 	.word	0x200002b8
 800b8a8:	43340000 	.word	0x43340000
 800b8ac:	20004380 	.word	0x20004380
 800b8b0:	43b40000 	.word	0x43b40000
 800b8b4:	00000000 	.word	0x00000000
 800b8b8:	200043a4 	.word	0x200043a4
 800b8bc:	20000068 	.word	0x20000068
 800b8c0:	43960000 	.word	0x43960000

0800b8c4 <rotate180>:
void rotate180(){
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
  uint8_t counter=0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  //static int check = 0, check2 = 0;

   while(counter < 1){
 800b8ce:	e054      	b.n	800b97a <rotate180+0xb6>

		Target_velocity = 0;
 800b8d0:	4b30      	ldr	r3, [pc, #192]	; (800b994 <rotate180+0xd0>)
 800b8d2:	f04f 0200 	mov.w	r2, #0
 800b8d6:	601a      	str	r2, [r3, #0]
		error_reset = 0;
 800b8d8:	4b2f      	ldr	r3, [pc, #188]	; (800b998 <rotate180+0xd4>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b8de:	f7fe f817 	bl	8009910 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b8e2:	4b2e      	ldr	r3, [pc, #184]	; (800b99c <rotate180+0xd8>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b8e8:	4b2d      	ldr	r3, [pc, #180]	; (800b9a0 <rotate180+0xdc>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	605a      	str	r2, [r3, #4]
	  EN_Body.integrate = 0;
 800b8ee:	4b2d      	ldr	r3, [pc, #180]	; (800b9a4 <rotate180+0xe0>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	605a      	str	r2, [r3, #4]
	  mode.enc = 1;
 800b8f4:	4b2c      	ldr	r3, [pc, #176]	; (800b9a8 <rotate180+0xe4>)
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	70da      	strb	r2, [r3, #3]
	///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b8fa:	e005      	b.n	800b908 <rotate180+0x44>
	  mode.control = 3;
 800b8fc:	4b2a      	ldr	r3, [pc, #168]	; (800b9a8 <rotate180+0xe4>)
 800b8fe:	2203      	movs	r2, #3
 800b900:	715a      	strb	r2, [r3, #5]
	  Target_Rad_velo = -6;//Rotate(Target_Rad_velo, -5, Target_pul_quarter*2, EN3_L.integrate);
 800b902:	4b2a      	ldr	r3, [pc, #168]	; (800b9ac <rotate180+0xe8>)
 800b904:	4a2a      	ldr	r2, [pc, #168]	; (800b9b0 <rotate180+0xec>)
 800b906:	601a      	str	r2, [r3, #0]
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b908:	4b24      	ldr	r3, [pc, #144]	; (800b99c <rotate180+0xd8>)
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	ee07 3a90 	vmov	s15, r3
 800b910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b914:	4b27      	ldr	r3, [pc, #156]	; (800b9b4 <rotate180+0xf0>)
 800b916:	edd3 7a00 	vldr	s15, [r3]
 800b91a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b91e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b926:	d9e9      	bls.n	800b8fc <rotate180+0x38>
 800b928:	4b1d      	ldr	r3, [pc, #116]	; (800b9a0 <rotate180+0xdc>)
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	ee07 3a90 	vmov	s15, r3
 800b930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b934:	4b1f      	ldr	r3, [pc, #124]	; (800b9b4 <rotate180+0xf0>)
 800b936:	edd3 7a00 	vldr	s15, [r3]
 800b93a:	eef1 7a67 	vneg.f32	s15, s15
 800b93e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b94a:	dad7      	bge.n	800b8fc <rotate180+0x38>
	  //Rotate_Control(Target_rotate,T1, velocity.KP, velocity.KI, velocity.KD);

//    	check = EN3_L.integrate;
//    	check2 = EN4_R.integrate;
    	}
      mode.enc = 0;
 800b94c:	4b16      	ldr	r3, [pc, #88]	; (800b9a8 <rotate180+0xe4>)
 800b94e:	2200      	movs	r2, #0
 800b950:	70da      	strb	r2, [r3, #3]
      Target_velocity = 0;
 800b952:	4b10      	ldr	r3, [pc, #64]	; (800b994 <rotate180+0xd0>)
 800b954:	f04f 0200 	mov.w	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
      Target_Rad_velo =0;
 800b95a:	4b14      	ldr	r3, [pc, #80]	; (800b9ac <rotate180+0xe8>)
 800b95c:	f04f 0200 	mov.w	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
      EN3_L.integrate = 0;
 800b962:	4b0e      	ldr	r3, [pc, #56]	; (800b99c <rotate180+0xd8>)
 800b964:	2200      	movs	r2, #0
 800b966:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b968:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <rotate180+0xdc>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	605a      	str	r2, [r3, #4]
  	  EN_Body.integrate = 0;
 800b96e:	4b0d      	ldr	r3, [pc, #52]	; (800b9a4 <rotate180+0xe0>)
 800b970:	2200      	movs	r2, #0
 800b972:	605a      	str	r2, [r3, #4]

      counter++;
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	3301      	adds	r3, #1
 800b978:	71fb      	strb	r3, [r7, #7]
   while(counter < 1){
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0a7      	beq.n	800b8d0 <rotate180+0xc>
     }
	error_reset = 0;
 800b980:	4b05      	ldr	r3, [pc, #20]	; (800b998 <rotate180+0xd4>)
 800b982:	2200      	movs	r2, #0
 800b984:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b986:	f7fd ffc3 	bl	8009910 <Motor_Count_Clear>
//    	    printf("180°回転時左 : %d \r\n",check);
//    	    printf("180°回転時右 : %d \r\n",check2);
//    	    printf("\r\n");

}
 800b98a:	bf00      	nop
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	200002b8 	.word	0x200002b8
 800b998:	2000027c 	.word	0x2000027c
 800b99c:	20000050 	.word	0x20000050
 800b9a0:	2000005c 	.word	0x2000005c
 800b9a4:	20000068 	.word	0x20000068
 800b9a8:	20000074 	.word	0x20000074
 800b9ac:	200002bc 	.word	0x200002bc
 800b9b0:	c0c00000 	.word	0xc0c00000
 800b9b4:	20000004 	.word	0x20000004

0800b9b8 <back_calib>:
	EN_Body.integrate = 0;
	error_reset = 0;
	Motor_Count_Clear();

}
void back_calib(){
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
	error_reset = 0;
 800b9be:	4b2a      	ldr	r3, [pc, #168]	; (800ba68 <back_calib+0xb0>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b9c4:	f7fd ffa4 	bl	8009910 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b9c8:	4b28      	ldr	r3, [pc, #160]	; (800ba6c <back_calib+0xb4>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b9ce:	4b28      	ldr	r3, [pc, #160]	; (800ba70 <back_calib+0xb8>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b9d4:	4b27      	ldr	r3, [pc, #156]	; (800ba74 <back_calib+0xbc>)
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800b9da:	4b27      	ldr	r3, [pc, #156]	; (800ba78 <back_calib+0xc0>)
 800b9dc:	2201      	movs	r2, #1
 800b9de:	70da      	strb	r2, [r3, #3]
    //50mmバック

    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800b9e0:	e005      	b.n	800b9ee <back_calib+0x36>
    	Target_velocity = -90;
 800b9e2:	4b26      	ldr	r3, [pc, #152]	; (800ba7c <back_calib+0xc4>)
 800b9e4:	4a26      	ldr	r2, [pc, #152]	; (800ba80 <back_calib+0xc8>)
 800b9e6:	601a      	str	r2, [r3, #0]
    	mode.control = 4;
 800b9e8:	4b23      	ldr	r3, [pc, #140]	; (800ba78 <back_calib+0xc0>)
 800b9ea:	2204      	movs	r2, #4
 800b9ec:	715a      	strb	r2, [r3, #5]
    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800b9ee:	4b1f      	ldr	r3, [pc, #124]	; (800ba6c <back_calib+0xb4>)
 800b9f0:	685a      	ldr	r2, [r3, #4]
 800b9f2:	4b1f      	ldr	r3, [pc, #124]	; (800ba70 <back_calib+0xb8>)
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fc fccb 	bl	8008394 <__aeabi_i2d>
 800b9fe:	a318      	add	r3, pc, #96	; (adr r3, 800ba60 <back_calib+0xa8>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f7fc ffc0 	bl	8008988 <__aeabi_dcmpgt>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1e9      	bne.n	800b9e2 <back_calib+0x2a>
    }
    Target_velocity = 0;
 800ba0e:	4b1b      	ldr	r3, [pc, #108]	; (800ba7c <back_calib+0xc4>)
 800ba10:	f04f 0200 	mov.w	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
    mode.control = 5;
 800ba16:	4b18      	ldr	r3, [pc, #96]	; (800ba78 <back_calib+0xc0>)
 800ba18:	2205      	movs	r2, #5
 800ba1a:	715a      	strb	r2, [r3, #5]
    mode.enc = 0;
 800ba1c:	4b16      	ldr	r3, [pc, #88]	; (800ba78 <back_calib+0xc0>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	70da      	strb	r2, [r3, #3]
    EN3_L.integrate = 0;
 800ba22:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <back_calib+0xb4>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ba28:	4b11      	ldr	r3, [pc, #68]	; (800ba70 <back_calib+0xb8>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ba2e:	4b11      	ldr	r3, [pc, #68]	; (800ba74 <back_calib+0xbc>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	605a      	str	r2, [r3, #4]
	error_reset = 0;
 800ba34:	4b0c      	ldr	r3, [pc, #48]	; (800ba68 <back_calib+0xb0>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba3a:	f7fd ff69 	bl	8009910 <Motor_Count_Clear>
    for(int i=0;i < WAIT*4;i++);
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	e002      	b.n	800ba4a <back_calib+0x92>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3301      	adds	r3, #1
 800ba48:	607b      	str	r3, [r7, #4]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a0d      	ldr	r2, [pc, #52]	; (800ba84 <back_calib+0xcc>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	ddf8      	ble.n	800ba44 <back_calib+0x8c>

}
 800ba52:	bf00      	nop
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	f3af 8000 	nop.w
 800ba60:	067eb10e 	.word	0x067eb10e
 800ba64:	c0e54d62 	.word	0xc0e54d62
 800ba68:	2000027c 	.word	0x2000027c
 800ba6c:	20000050 	.word	0x20000050
 800ba70:	2000005c 	.word	0x2000005c
 800ba74:	20000068 	.word	0x20000068
 800ba78:	20000074 	.word	0x20000074
 800ba7c:	200002b8 	.word	0x200002b8
 800ba80:	c2b40000 	.word	0xc2b40000
 800ba84:	0001d4bf 	.word	0x0001d4bf

0800ba88 <R_turn_select>:
	//経過時間計測オ�?



}
void R_turn_select(){
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800ba8c:	4b1e      	ldr	r3, [pc, #120]	; (800bb08 <R_turn_select+0x80>)
 800ba8e:	7a5b      	ldrb	r3, [r3, #9]
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d82d      	bhi.n	800baf0 <R_turn_select+0x68>
 800ba94:	a201      	add	r2, pc, #4	; (adr r2, 800ba9c <R_turn_select+0x14>)
 800ba96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9a:	bf00      	nop
 800ba9c:	0800baad 	.word	0x0800baad
 800baa0:	0800bacb 	.word	0x0800bacb
 800baa4:	0800bad1 	.word	0x0800bad1
 800baa8:	0800bad7 	.word	0x0800bad7
  case 0:
	  Decelerate();
 800baac:	f7ff f91c 	bl	800ace8 <Decelerate>
	  wait(0.3);
 800bab0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800baf8 <R_turn_select+0x70>
 800bab4:	f7fe ffe8 	bl	800aa88 <wait>
	  turn_right();
 800bab8:	f7ff fb38 	bl	800b12c <turn_right>
	  wait(0.3);
 800babc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800baf8 <R_turn_select+0x70>
 800bac0:	f7fe ffe2 	bl	800aa88 <wait>
      Accelerate();
 800bac4:	f7ff f860 	bl	800ab88 <Accelerate>
      break;
 800bac8:	e012      	b.n	800baf0 <R_turn_select+0x68>
  case 1:
	  slow_turn_R();
 800baca:	f7ff fc05 	bl	800b2d8 <slow_turn_R>
	  break;
 800bace:	e00f      	b.n	800baf0 <R_turn_select+0x68>
  case 2:
	  shinchi_turn_R();
 800bad0:	f7ff fd72 	bl	800b5b8 <shinchi_turn_R>
	  break;
 800bad4:	e00c      	b.n	800baf0 <R_turn_select+0x68>
  case 3:
      Decelerate();
 800bad6:	f7ff f907 	bl	800ace8 <Decelerate>
      IMU_turn(-90,-5);
 800bada:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bb00 <R_turn_select+0x78>
 800bade:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800bae2:	f7ff fa79 	bl	800afd8 <IMU_turn>
      IMU_init();
 800bae6:	f7fd fe67 	bl	80097b8 <IMU_init>
      Accelerate();
 800baea:	f7ff f84d 	bl	800ab88 <Accelerate>
      break;
 800baee:	bf00      	nop
  }
}
 800baf0:	bf00      	nop
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	f3af 8000 	nop.w
 800baf8:	33333333 	.word	0x33333333
 800bafc:	3fd33333 	.word	0x3fd33333
 800bb00:	00000000 	.word	0x00000000
 800bb04:	c0140000 	.word	0xc0140000
 800bb08:	20000074 	.word	0x20000074
 800bb0c:	00000000 	.word	0x00000000

0800bb10 <L_turn_select>:
void L_turn_select(){
 800bb10:	b580      	push	{r7, lr}
 800bb12:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bb14:	4b1e      	ldr	r3, [pc, #120]	; (800bb90 <L_turn_select+0x80>)
 800bb16:	7a5b      	ldrb	r3, [r3, #9]
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d82c      	bhi.n	800bb76 <L_turn_select+0x66>
 800bb1c:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <L_turn_select+0x14>)
 800bb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb22:	bf00      	nop
 800bb24:	0800bb35 	.word	0x0800bb35
 800bb28:	0800bb53 	.word	0x0800bb53
 800bb2c:	0800bb59 	.word	0x0800bb59
 800bb30:	0800bb5f 	.word	0x0800bb5f
  case 0:
	  //�?減�?��?信地旋回
	  Decelerate();
 800bb34:	f7ff f8d8 	bl	800ace8 <Decelerate>
	  wait(0.3);
 800bb38:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bb80 <L_turn_select+0x70>
 800bb3c:	f7fe ffa4 	bl	800aa88 <wait>
	  turn_left();
 800bb40:	f7ff fb5e 	bl	800b200 <turn_left>
	  wait(0.3);
 800bb44:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bb80 <L_turn_select+0x70>
 800bb48:	f7fe ff9e 	bl	800aa88 <wait>
      Accelerate();
 800bb4c:	f7ff f81c 	bl	800ab88 <Accelerate>
      break;
 800bb50:	e011      	b.n	800bb76 <L_turn_select+0x66>
  case 1:
	  //緩旋回
	  slow_turn_L();
 800bb52:	f7ff fc79 	bl	800b448 <slow_turn_L>
	  break;
 800bb56:	e00e      	b.n	800bb76 <L_turn_select+0x66>
  case 2:
	  //�?輪旋回
	  shinchi_turn_L();
 800bb58:	f7ff fdf2 	bl	800b740 <shinchi_turn_L>
	  break;
 800bb5c:	e00b      	b.n	800bb76 <L_turn_select+0x66>
  case 3:
	  //IMUで等角�?�度�?信地旋回
      Decelerate();
 800bb5e:	f7ff f8c3 	bl	800ace8 <Decelerate>
      IMU_turn(90,5);
 800bb62:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bb88 <L_turn_select+0x78>
 800bb66:	205a      	movs	r0, #90	; 0x5a
 800bb68:	f7ff fa36 	bl	800afd8 <IMU_turn>
      IMU_init();
 800bb6c:	f7fd fe24 	bl	80097b8 <IMU_init>
      Accelerate();
 800bb70:	f7ff f80a 	bl	800ab88 <Accelerate>
      break;
 800bb74:	bf00      	nop
  }
}
 800bb76:	bf00      	nop
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	f3af 8000 	nop.w
 800bb80:	33333333 	.word	0x33333333
 800bb84:	3fd33333 	.word	0x3fd33333
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	40140000 	.word	0x40140000
 800bb90:	20000074 	.word	0x20000074

0800bb94 <Execution_Select>:
/*---- DEFINING FUNCTION ----*/

void Execution_Select(){
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
//
//	    }

	   //printf("%d\r\n",mode.select);

	while(sr_error < 250/*mode.select%2 == 1*/){
 800bb98:	e054      	b.n	800bc44 <Execution_Select+0xb0>

	  	    EN3_L.count = TIM3 -> CNT;
 800bb9a:	4b3a      	ldr	r3, [pc, #232]	; (800bc84 <Execution_Select+0xf0>)
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	461a      	mov	r2, r3
 800bba0:	4b39      	ldr	r3, [pc, #228]	; (800bc88 <Execution_Select+0xf4>)
 800bba2:	601a      	str	r2, [r3, #0]
	  	   // EN3_L.count = -(EN3_L.count - (30000-1));
	  	    //printf("%d\r\n",EN3_L.count);
	  		printf("右前センサ : %d\r\n",sr_error);
 800bba4:	4b39      	ldr	r3, [pc, #228]	; (800bc8c <Execution_Select+0xf8>)
 800bba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4838      	ldr	r0, [pc, #224]	; (800bc90 <Execution_Select+0xfc>)
 800bbae:	f00a ff9b 	bl	8016ae8 <iprintf>
	  	    //EN3_L.integrate += EN3_L.count;


		if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= EN3_L.count ){
 800bbb2:	4b35      	ldr	r3, [pc, #212]	; (800bc88 <Execution_Select+0xf4>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f24b 522e 	movw	r2, #46382	; 0xb52e
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	dd1e      	ble.n	800bbfc <Execution_Select+0x68>
				  mode.LED += 1;
 800bbbe:	4b35      	ldr	r3, [pc, #212]	; (800bc94 <Execution_Select+0x100>)
 800bbc0:	f993 3000 	ldrsb.w	r3, [r3]
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	b25a      	sxtb	r2, r3
 800bbcc:	4b31      	ldr	r3, [pc, #196]	; (800bc94 <Execution_Select+0x100>)
 800bbce:	701a      	strb	r2, [r3, #0]
				  if(mode.LED > 7)
 800bbd0:	4b30      	ldr	r3, [pc, #192]	; (800bc94 <Execution_Select+0x100>)
 800bbd2:	f993 3000 	ldrsb.w	r3, [r3]
 800bbd6:	2b07      	cmp	r3, #7
 800bbd8:	dd02      	ble.n	800bbe0 <Execution_Select+0x4c>
				  mode.LED = 0;
 800bbda:	4b2e      	ldr	r3, [pc, #184]	; (800bc94 <Execution_Select+0x100>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]
				  LED_Change();
 800bbe0:	f7fe fc7c 	bl	800a4dc <LED_Change>

				  Encoder_Reset();
 800bbe4:	f7fe feee 	bl	800a9c4 <Encoder_Reset>
			  //mode.execution = mode.LED;
				  mode.execution = mode.LED;
 800bbe8:	4b2a      	ldr	r3, [pc, #168]	; (800bc94 <Execution_Select+0x100>)
 800bbea:	f993 2000 	ldrsb.w	r2, [r3]
 800bbee:	4b29      	ldr	r3, [pc, #164]	; (800bc94 <Execution_Select+0x100>)
 800bbf0:	709a      	strb	r2, [r3, #2]
				  HAL_Delay(500);
 800bbf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bbf6:	f005 facf 	bl	8011198 <HAL_Delay>
 800bbfa:	e023      	b.n	800bc44 <Execution_Select+0xb0>

		  }
		  else if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= EN3_L.count){
 800bbfc:	4b22      	ldr	r3, [pc, #136]	; (800bc88 <Execution_Select+0xf4>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f243 522f 	movw	r2, #13615	; 0x352f
 800bc04:	4293      	cmp	r3, r2
 800bc06:	dc1d      	bgt.n	800bc44 <Execution_Select+0xb0>
			  mode.LED -= 1;
 800bc08:	4b22      	ldr	r3, [pc, #136]	; (800bc94 <Execution_Select+0x100>)
 800bc0a:	f993 3000 	ldrsb.w	r3, [r3]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	3b01      	subs	r3, #1
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	b25a      	sxtb	r2, r3
 800bc16:	4b1f      	ldr	r3, [pc, #124]	; (800bc94 <Execution_Select+0x100>)
 800bc18:	701a      	strb	r2, [r3, #0]
			  if(mode.LED < 0)
 800bc1a:	4b1e      	ldr	r3, [pc, #120]	; (800bc94 <Execution_Select+0x100>)
 800bc1c:	f993 3000 	ldrsb.w	r3, [r3]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	da02      	bge.n	800bc2a <Execution_Select+0x96>
					  mode.LED = 7;
 800bc24:	4b1b      	ldr	r3, [pc, #108]	; (800bc94 <Execution_Select+0x100>)
 800bc26:	2207      	movs	r2, #7
 800bc28:	701a      	strb	r2, [r3, #0]
			  LED_Change();
 800bc2a:	f7fe fc57 	bl	800a4dc <LED_Change>

			  Encoder_Reset();
 800bc2e:	f7fe fec9 	bl	800a9c4 <Encoder_Reset>
			  //mode.execution = mode.LED;
			  mode.execution = mode.LED;
 800bc32:	4b18      	ldr	r3, [pc, #96]	; (800bc94 <Execution_Select+0x100>)
 800bc34:	f993 2000 	ldrsb.w	r2, [r3]
 800bc38:	4b16      	ldr	r3, [pc, #88]	; (800bc94 <Execution_Select+0x100>)
 800bc3a:	709a      	strb	r2, [r3, #2]
			  HAL_Delay(500);
 800bc3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bc40:	f005 faaa 	bl	8011198 <HAL_Delay>
	while(sr_error < 250/*mode.select%2 == 1*/){
 800bc44:	4b11      	ldr	r3, [pc, #68]	; (800bc8c <Execution_Select+0xf8>)
 800bc46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc4a:	2bf9      	cmp	r3, #249	; 0xf9
 800bc4c:	dda5      	ble.n	800bb9a <Execution_Select+0x6>
		  }

	}

		  printf("開始\r\n");
 800bc4e:	4812      	ldr	r0, [pc, #72]	; (800bc98 <Execution_Select+0x104>)
 800bc50:	f00a ffbe 	bl	8016bd0 <puts>
		      //HAL_Delay(500);
	  		  Init(); // mycodeInit(); // mycode
 800bc54:	f7fe f9e8 	bl	800a028 <Init>
	  		  TIM3 -> CNT = 30000 - 1;
 800bc58:	4b0a      	ldr	r3, [pc, #40]	; (800bc84 <Execution_Select+0xf0>)
 800bc5a:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc5e:	625a      	str	r2, [r3, #36]	; 0x24
	  		  TIM4 -> CNT = 30000 - 1;
 800bc60:	4b0e      	ldr	r3, [pc, #56]	; (800bc9c <Execution_Select+0x108>)
 800bc62:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc66:	625a      	str	r2, [r3, #36]	; 0x24
	  		  //HAL_TIM_Base_Start_IT(&htim8);
	  		  HAL_TIM_Base_Start_IT(&htim1);
 800bc68:	480d      	ldr	r0, [pc, #52]	; (800bca0 <Execution_Select+0x10c>)
 800bc6a:	f008 fb94 	bl	8014396 <HAL_TIM_Base_Start_IT>
	  		  mode.select += 1;
 800bc6e:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <Execution_Select+0x100>)
 800bc70:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	3301      	adds	r3, #1
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	b25a      	sxtb	r2, r3
 800bc7c:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <Execution_Select+0x100>)
 800bc7e:	711a      	strb	r2, [r3, #4]
  }
 800bc80:	bf00      	nop
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	40000400 	.word	0x40000400
 800bc88:	20000050 	.word	0x20000050
 800bc8c:	200044e4 	.word	0x200044e4
 800bc90:	080189f0 	.word	0x080189f0
 800bc94:	20000074 	.word	0x20000074
 800bc98:	08018a08 	.word	0x08018a08
 800bc9c:	40000800 	.word	0x40000800
 800bca0:	20004ae0 	.word	0x20004ae0

0800bca4 <Walk_Map_Update>:
void Gain_Change(){

}


void Walk_Map_Update(){
 800bca4:	b490      	push	{r4, r7}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60bb      	str	r3, [r7, #8]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	607b      	str	r3, [r7, #4]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	603b      	str	r3, [r7, #0]

	//区画数に応じて"?��?大歩数 + ゴールのマス?��?-1"に初期?��?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	e015      	b.n	800bcec <Walk_Map_Update+0x48>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	60bb      	str	r3, [r7, #8]
 800bcc4:	e00c      	b.n	800bce0 <Walk_Map_Update+0x3c>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800bcc6:	49aa      	ldr	r1, [pc, #680]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	4613      	mov	r3, r2
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	4413      	add	r3, r2
 800bcd0:	18ca      	adds	r2, r1, r3
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	2250      	movs	r2, #80	; 0x50
 800bcd8:	701a      	strb	r2, [r3, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	60bb      	str	r3, [r7, #8]
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	2b08      	cmp	r3, #8
 800bce4:	ddef      	ble.n	800bcc6 <Walk_Map_Update+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3301      	adds	r3, #1
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b08      	cmp	r3, #8
 800bcf0:	dde6      	ble.n	800bcc0 <Walk_Map_Update+0x1c>
		}
	}

	//ゴール区画?��?0に初期?��?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	60fb      	str	r3, [r7, #12]
 800bcf6:	e015      	b.n	800bd24 <Walk_Map_Update+0x80>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	60bb      	str	r3, [r7, #8]
 800bcfc:	e00c      	b.n	800bd18 <Walk_Map_Update+0x74>
			walk_map[i][j] = 0;
 800bcfe:	499c      	ldr	r1, [pc, #624]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	4613      	mov	r3, r2
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	4413      	add	r3, r2
 800bd08:	18ca      	adds	r2, r1, r3
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	701a      	strb	r2, [r3, #0]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	3301      	adds	r3, #1
 800bd16:	60bb      	str	r3, [r7, #8]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	ddef      	ble.n	800bcfe <Walk_Map_Update+0x5a>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	3301      	adds	r3, #1
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	dde6      	ble.n	800bcf8 <Walk_Map_Update+0x54>
		}
	}

	//壁が無?��?として�?��??��区画に歩数を割り当てる�??
	do{
		flag = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bd2e:	2300      	movs	r3, #0
 800bd30:	60fb      	str	r3, [r7, #12]
 800bd32:	e10c      	b.n	800bf4e <Walk_Map_Update+0x2aa>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bd34:	2300      	movs	r3, #0
 800bd36:	60bb      	str	r3, [r7, #8]
 800bd38:	e102      	b.n	800bf40 <Walk_Map_Update+0x29c>
				  //map?��?"?��?大歩数 + ゴールのマス?��?-1"でなければ値を代入?��?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800bd3a:	498d      	ldr	r1, [pc, #564]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	00db      	lsls	r3, r3, #3
 800bd42:	4413      	add	r3, r2
 800bd44:	18ca      	adds	r2, r1, r3
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	4413      	add	r3, r2
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	4293      	cmp	r3, r2
 800bd52:	f040 80f2 	bne.w	800bf3a <Walk_Map_Update+0x296>

					  if(wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800bd56:	4987      	ldr	r1, [pc, #540]	; (800bf74 <Walk_Map_Update+0x2d0>)
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	4413      	add	r3, r2
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	4413      	add	r3, r2
 800bd64:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bd68:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d02d      	beq.n	800bdce <Walk_Map_Update+0x12a>
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	1c59      	adds	r1, r3, #1
 800bd76:	487e      	ldr	r0, [pc, #504]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	4413      	add	r3, r2
 800bd80:	4403      	add	r3, r0
 800bd82:	440b      	add	r3, r1
 800bd84:	7819      	ldrb	r1, [r3, #0]
 800bd86:	487a      	ldr	r0, [pc, #488]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	4413      	add	r3, r2
 800bd90:	18c2      	adds	r2, r0, r3
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	4413      	add	r3, r2
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	d918      	bls.n	800bdce <Walk_Map_Update+0x12a>
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2b07      	cmp	r3, #7
 800bda0:	dc15      	bgt.n	800bdce <Walk_Map_Update+0x12a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800bda2:	4973      	ldr	r1, [pc, #460]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	4613      	mov	r3, r2
 800bda8:	00db      	lsls	r3, r3, #3
 800bdaa:	4413      	add	r3, r2
 800bdac:	18ca      	adds	r2, r1, r3
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	1c51      	adds	r1, r2, #1
 800bdb8:	3301      	adds	r3, #1
 800bdba:	b2dc      	uxtb	r4, r3
 800bdbc:	486c      	ldr	r0, [pc, #432]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	00db      	lsls	r3, r3, #3
 800bdc4:	4413      	add	r3, r2
 800bdc6:	4403      	add	r3, r0
 800bdc8:	440b      	add	r3, r1
 800bdca:	4622      	mov	r2, r4
 800bdcc:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800bdce:	4969      	ldr	r1, [pc, #420]	; (800bf74 <Walk_Map_Update+0x2d0>)
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	00db      	lsls	r3, r3, #3
 800bdd6:	4413      	add	r3, r2
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	4413      	add	r3, r2
 800bddc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bde0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d02d      	beq.n	800be46 <Walk_Map_Update+0x1a2>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	1c5a      	adds	r2, r3, #1
 800bdee:	4960      	ldr	r1, [pc, #384]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	4413      	add	r3, r2
 800bdf6:	18ca      	adds	r2, r1, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	7819      	ldrb	r1, [r3, #0]
 800bdfe:	485c      	ldr	r0, [pc, #368]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4613      	mov	r3, r2
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	4413      	add	r3, r2
 800be08:	18c2      	adds	r2, r0, r3
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	4413      	add	r3, r2
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	4299      	cmp	r1, r3
 800be12:	d918      	bls.n	800be46 <Walk_Map_Update+0x1a2>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2b07      	cmp	r3, #7
 800be18:	dc15      	bgt.n	800be46 <Walk_Map_Update+0x1a2>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800be1a:	4955      	ldr	r1, [pc, #340]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4613      	mov	r3, r2
 800be20:	00db      	lsls	r3, r3, #3
 800be22:	4413      	add	r3, r2
 800be24:	18ca      	adds	r2, r1, r3
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	4413      	add	r3, r2
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	3201      	adds	r2, #1
 800be30:	3301      	adds	r3, #1
 800be32:	b2d8      	uxtb	r0, r3
 800be34:	494e      	ldr	r1, [pc, #312]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800be36:	4613      	mov	r3, r2
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	4413      	add	r3, r2
 800be3c:	18ca      	adds	r2, r1, r3
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	4413      	add	r3, r2
 800be42:	4602      	mov	r2, r0
 800be44:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800be46:	494b      	ldr	r1, [pc, #300]	; (800bf74 <Walk_Map_Update+0x2d0>)
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4613      	mov	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	4413      	add	r3, r2
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	4413      	add	r3, r2
 800be54:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be58:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d02d      	beq.n	800bebe <Walk_Map_Update+0x21a>
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	1e59      	subs	r1, r3, #1
 800be66:	4842      	ldr	r0, [pc, #264]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4613      	mov	r3, r2
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	4413      	add	r3, r2
 800be70:	4403      	add	r3, r0
 800be72:	440b      	add	r3, r1
 800be74:	7819      	ldrb	r1, [r3, #0]
 800be76:	483e      	ldr	r0, [pc, #248]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4613      	mov	r3, r2
 800be7c:	00db      	lsls	r3, r3, #3
 800be7e:	4413      	add	r3, r2
 800be80:	18c2      	adds	r2, r0, r3
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	4413      	add	r3, r2
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	4299      	cmp	r1, r3
 800be8a:	d918      	bls.n	800bebe <Walk_Map_Update+0x21a>
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dd15      	ble.n	800bebe <Walk_Map_Update+0x21a>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800be92:	4937      	ldr	r1, [pc, #220]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	4613      	mov	r3, r2
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	4413      	add	r3, r2
 800be9c:	18ca      	adds	r2, r1, r3
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	4413      	add	r3, r2
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	1e51      	subs	r1, r2, #1
 800bea8:	3301      	adds	r3, #1
 800beaa:	b2dc      	uxtb	r4, r3
 800beac:	4830      	ldr	r0, [pc, #192]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	4613      	mov	r3, r2
 800beb2:	00db      	lsls	r3, r3, #3
 800beb4:	4413      	add	r3, r2
 800beb6:	4403      	add	r3, r0
 800beb8:	440b      	add	r3, r1
 800beba:	4622      	mov	r2, r4
 800bebc:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800bebe:	492d      	ldr	r1, [pc, #180]	; (800bf74 <Walk_Map_Update+0x2d0>)
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	4613      	mov	r3, r2
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	4413      	add	r3, r2
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	4413      	add	r3, r2
 800becc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bed0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d02d      	beq.n	800bf36 <Walk_Map_Update+0x292>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	1e5a      	subs	r2, r3, #1
 800bede:	4924      	ldr	r1, [pc, #144]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bee0:	4613      	mov	r3, r2
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	4413      	add	r3, r2
 800bee6:	18ca      	adds	r2, r1, r3
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	4413      	add	r3, r2
 800beec:	7819      	ldrb	r1, [r3, #0]
 800beee:	4820      	ldr	r0, [pc, #128]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4613      	mov	r3, r2
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	4413      	add	r3, r2
 800bef8:	18c2      	adds	r2, r0, r3
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	4413      	add	r3, r2
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	4299      	cmp	r1, r3
 800bf02:	d918      	bls.n	800bf36 <Walk_Map_Update+0x292>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dd15      	ble.n	800bf36 <Walk_Map_Update+0x292>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800bf0a:	4919      	ldr	r1, [pc, #100]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	4413      	add	r3, r2
 800bf14:	18ca      	adds	r2, r1, r3
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	4413      	add	r3, r2
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	3a01      	subs	r2, #1
 800bf20:	3301      	adds	r3, #1
 800bf22:	b2d8      	uxtb	r0, r3
 800bf24:	4912      	ldr	r1, [pc, #72]	; (800bf70 <Walk_Map_Update+0x2cc>)
 800bf26:	4613      	mov	r3, r2
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	4413      	add	r3, r2
 800bf2c:	18ca      	adds	r2, r1, r3
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	4413      	add	r3, r2
 800bf32:	4602      	mov	r2, r0
 800bf34:	701a      	strb	r2, [r3, #0]
					  }

					  flag = 1;
 800bf36:	2301      	movs	r3, #1
 800bf38:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	60bb      	str	r3, [r7, #8]
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2b08      	cmp	r3, #8
 800bf44:	f77f aef9 	ble.w	800bd3a <Walk_Map_Update+0x96>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	60fb      	str	r3, [r7, #12]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b08      	cmp	r3, #8
 800bf52:	f77f aeef 	ble.w	800bd34 <Walk_Map_Update+0x90>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し?��?
		  hosu++;
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	603b      	str	r3, [r7, #0]
	}while(flag);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f47f aee3 	bne.w	800bd2a <Walk_Map_Update+0x86>

}
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bc90      	pop	{r4, r7}
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	20004a60 	.word	0x20004a60
 800bf74:	20004f0c 	.word	0x20004f0c

0800bf78 <Tire_Maintenance>:
//
//	}
}


void Tire_Maintenance(){
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800bf7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bf80:	f005 f90a 	bl	8011198 <HAL_Delay>
	Accelerate();
 800bf84:	f7fe fe00 	bl	800ab88 <Accelerate>
	straight();
 800bf88:	f7fe ff66 	bl	800ae58 <straight>
	straight();
 800bf8c:	f7fe ff64 	bl	800ae58 <straight>
	Decelerate();
 800bf90:	f7fe feaa 	bl	800ace8 <Decelerate>
	Motor_PWM_Stop();
 800bf94:	f7fe f82e 	bl	8009ff4 <Motor_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800bf98:	480a      	ldr	r0, [pc, #40]	; (800bfc4 <Tire_Maintenance+0x4c>)
 800bf9a:	f008 fa20 	bl	80143de <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800bf9e:	480a      	ldr	r0, [pc, #40]	; (800bfc8 <Tire_Maintenance+0x50>)
 800bfa0:	f008 fa1d 	bl	80143de <HAL_TIM_Base_Stop_IT>
	while(1){
		printf("リセ?��?トな?��? : %d\r\n", All_Pulse_anytime);
 800bfa4:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <Tire_Maintenance+0x54>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	4809      	ldr	r0, [pc, #36]	; (800bfd0 <Tire_Maintenance+0x58>)
 800bfac:	f00a fd9c 	bl	8016ae8 <iprintf>
		printf("リセ?��?トあ?��? : %d\r\n", All_Pulse_cut);
 800bfb0:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <Tire_Maintenance+0x5c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	4808      	ldr	r0, [pc, #32]	; (800bfd8 <Tire_Maintenance+0x60>)
 800bfb8:	f00a fd96 	bl	8016ae8 <iprintf>
		printf("\r\n");
 800bfbc:	4807      	ldr	r0, [pc, #28]	; (800bfdc <Tire_Maintenance+0x64>)
 800bfbe:	f00a fe07 	bl	8016bd0 <puts>
		printf("リセ?��?トな?��? : %d\r\n", All_Pulse_anytime);
 800bfc2:	e7ef      	b.n	800bfa4 <Tire_Maintenance+0x2c>
 800bfc4:	20004ae0 	.word	0x20004ae0
 800bfc8:	200043c8 	.word	0x200043c8
 800bfcc:	200002fc 	.word	0x200002fc
 800bfd0:	08018a10 	.word	0x08018a10
 800bfd4:	200002f8 	.word	0x200002f8
 800bfd8:	08018a34 	.word	0x08018a34
 800bfdc:	08018950 	.word	0x08018950

0800bfe0 <wall_set>:
	}

}
void wall_set(){
 800bfe0:	b490      	push	{r4, r7}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	  wall_dir[my_direction] = (sl_average + sr_average)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800bfe6:	4b96      	ldr	r3, [pc, #600]	; (800c240 <wall_set+0x260>)
 800bfe8:	ed93 7a00 	vldr	s14, [r3]
 800bfec:	4b95      	ldr	r3, [pc, #596]	; (800c244 <wall_set+0x264>)
 800bfee:	edd3 7a00 	vldr	s15, [r3]
 800bff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bff6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bffe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c002:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00a:	bfcc      	ite	gt
 800c00c:	2301      	movgt	r3, #1
 800c00e:	2300      	movle	r3, #0
 800c010:	b2da      	uxtb	r2, r3
 800c012:	4b8d      	ldr	r3, [pc, #564]	; (800c248 <wall_set+0x268>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	f107 0108 	add.w	r1, r7, #8
 800c01a:	440b      	add	r3, r1
 800c01c:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(my_direction + 1)%4] = fr_average > RIGHT_WALL  ?  WALL :  NOWALL;
 800c020:	4b8a      	ldr	r3, [pc, #552]	; (800c24c <wall_set+0x26c>)
 800c022:	edd3 7a00 	vldr	s15, [r3]
 800c026:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c250 <wall_set+0x270>
 800c02a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c032:	bfcc      	ite	gt
 800c034:	2301      	movgt	r3, #1
 800c036:	2300      	movle	r3, #0
 800c038:	b2d9      	uxtb	r1, r3
 800c03a:	4b83      	ldr	r3, [pc, #524]	; (800c248 <wall_set+0x268>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	3301      	adds	r3, #1
 800c040:	425a      	negs	r2, r3
 800c042:	f003 0303 	and.w	r3, r3, #3
 800c046:	f002 0203 	and.w	r2, r2, #3
 800c04a:	bf58      	it	pl
 800c04c:	4253      	negpl	r3, r2
 800c04e:	460a      	mov	r2, r1
 800c050:	f107 0108 	add.w	r1, r7, #8
 800c054:	440b      	add	r3, r1
 800c056:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 2)%4] = NOWALL;
 800c05a:	4b7b      	ldr	r3, [pc, #492]	; (800c248 <wall_set+0x268>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	3302      	adds	r3, #2
 800c060:	425a      	negs	r2, r3
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	f002 0203 	and.w	r2, r2, #3
 800c06a:	bf58      	it	pl
 800c06c:	4253      	negpl	r3, r2
 800c06e:	f107 0208 	add.w	r2, r7, #8
 800c072:	4413      	add	r3, r2
 800c074:	2200      	movs	r2, #0
 800c076:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 3)%4] = fl_average > LEFT_WALL ?  WALL :  NOWALL;
 800c07a:	4b76      	ldr	r3, [pc, #472]	; (800c254 <wall_set+0x274>)
 800c07c:	edd3 7a00 	vldr	s15, [r3]
 800c080:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800c258 <wall_set+0x278>
 800c084:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08c:	bfcc      	ite	gt
 800c08e:	2301      	movgt	r3, #1
 800c090:	2300      	movle	r3, #0
 800c092:	b2d9      	uxtb	r1, r3
 800c094:	4b6c      	ldr	r3, [pc, #432]	; (800c248 <wall_set+0x268>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	3303      	adds	r3, #3
 800c09a:	425a      	negs	r2, r3
 800c09c:	f003 0303 	and.w	r3, r3, #3
 800c0a0:	f002 0203 	and.w	r2, r2, #3
 800c0a4:	bf58      	it	pl
 800c0a6:	4253      	negpl	r3, r2
 800c0a8:	460a      	mov	r2, r1
 800c0aa:	f107 0108 	add.w	r1, r7, #8
 800c0ae:	440b      	add	r3, r1
 800c0b0:	f803 2c04 	strb.w	r2, [r3, #-4]

	  wall[x][y].north = wall_dir[0];
 800c0b4:	7939      	ldrb	r1, [r7, #4]
 800c0b6:	4b69      	ldr	r3, [pc, #420]	; (800c25c <wall_set+0x27c>)
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4b68      	ldr	r3, [pc, #416]	; (800c260 <wall_set+0x280>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	461c      	mov	r4, r3
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	f003 0303 	and.w	r3, r3, #3
 800c0c8:	b2d8      	uxtb	r0, r3
 800c0ca:	4966      	ldr	r1, [pc, #408]	; (800c264 <wall_set+0x284>)
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	00db      	lsls	r3, r3, #3
 800c0d0:	4413      	add	r3, r2
 800c0d2:	191a      	adds	r2, r3, r4
 800c0d4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c0d8:	f360 0301 	bfi	r3, r0, #0, #2
 800c0dc:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].east = wall_dir[1];
 800c0e0:	7979      	ldrb	r1, [r7, #5]
 800c0e2:	4b5e      	ldr	r3, [pc, #376]	; (800c25c <wall_set+0x27c>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	4b5d      	ldr	r3, [pc, #372]	; (800c260 <wall_set+0x280>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	461c      	mov	r4, r3
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	f003 0303 	and.w	r3, r3, #3
 800c0f4:	b2d8      	uxtb	r0, r3
 800c0f6:	495b      	ldr	r1, [pc, #364]	; (800c264 <wall_set+0x284>)
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	00db      	lsls	r3, r3, #3
 800c0fc:	4413      	add	r3, r2
 800c0fe:	191a      	adds	r2, r3, r4
 800c100:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c104:	f360 0383 	bfi	r3, r0, #2, #2
 800c108:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].south = wall_dir[2];
 800c10c:	79b9      	ldrb	r1, [r7, #6]
 800c10e:	4b53      	ldr	r3, [pc, #332]	; (800c25c <wall_set+0x27c>)
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	4b52      	ldr	r3, [pc, #328]	; (800c260 <wall_set+0x280>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	461c      	mov	r4, r3
 800c11a:	460b      	mov	r3, r1
 800c11c:	f003 0303 	and.w	r3, r3, #3
 800c120:	b2d8      	uxtb	r0, r3
 800c122:	4950      	ldr	r1, [pc, #320]	; (800c264 <wall_set+0x284>)
 800c124:	4613      	mov	r3, r2
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	4413      	add	r3, r2
 800c12a:	191a      	adds	r2, r3, r4
 800c12c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c130:	f360 1305 	bfi	r3, r0, #4, #2
 800c134:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].west = wall_dir[3];
 800c138:	79f9      	ldrb	r1, [r7, #7]
 800c13a:	4b48      	ldr	r3, [pc, #288]	; (800c25c <wall_set+0x27c>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	4b47      	ldr	r3, [pc, #284]	; (800c260 <wall_set+0x280>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	461c      	mov	r4, r3
 800c146:	460b      	mov	r3, r1
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	b2d8      	uxtb	r0, r3
 800c14e:	4945      	ldr	r1, [pc, #276]	; (800c264 <wall_set+0x284>)
 800c150:	4613      	mov	r3, r2
 800c152:	00db      	lsls	r3, r3, #3
 800c154:	4413      	add	r3, r2
 800c156:	191a      	adds	r2, r3, r4
 800c158:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c15c:	f360 1387 	bfi	r3, r0, #6, #2
 800c160:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  if(y < (NUMBER_OF_SQUARES-1) )wall[x][y+1].south = wall_dir[0];
 800c164:	4b3e      	ldr	r3, [pc, #248]	; (800c260 <wall_set+0x280>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b07      	cmp	r3, #7
 800c16a:	d815      	bhi.n	800c198 <wall_set+0x1b8>
 800c16c:	7939      	ldrb	r1, [r7, #4]
 800c16e:	4b3b      	ldr	r3, [pc, #236]	; (800c25c <wall_set+0x27c>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	461c      	mov	r4, r3
 800c174:	4b3a      	ldr	r3, [pc, #232]	; (800c260 <wall_set+0x280>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	460b      	mov	r3, r1
 800c17c:	f003 0303 	and.w	r3, r3, #3
 800c180:	b2d8      	uxtb	r0, r3
 800c182:	4938      	ldr	r1, [pc, #224]	; (800c264 <wall_set+0x284>)
 800c184:	4623      	mov	r3, r4
 800c186:	00db      	lsls	r3, r3, #3
 800c188:	4423      	add	r3, r4
 800c18a:	441a      	add	r2, r3
 800c18c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c190:	f360 1305 	bfi	r3, r0, #4, #2
 800c194:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x < (NUMBER_OF_SQUARES-1) )wall[x+1][y].west = wall_dir[1];
 800c198:	4b30      	ldr	r3, [pc, #192]	; (800c25c <wall_set+0x27c>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b07      	cmp	r3, #7
 800c19e:	d815      	bhi.n	800c1cc <wall_set+0x1ec>
 800c1a0:	7979      	ldrb	r1, [r7, #5]
 800c1a2:	4b2e      	ldr	r3, [pc, #184]	; (800c25c <wall_set+0x27c>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	4b2d      	ldr	r3, [pc, #180]	; (800c260 <wall_set+0x280>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	461c      	mov	r4, r3
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	f003 0303 	and.w	r3, r3, #3
 800c1b4:	b2d8      	uxtb	r0, r3
 800c1b6:	492b      	ldr	r1, [pc, #172]	; (800c264 <wall_set+0x284>)
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	4413      	add	r3, r2
 800c1be:	191a      	adds	r2, r3, r4
 800c1c0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1c4:	f360 1387 	bfi	r3, r0, #6, #2
 800c1c8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(y > 0 ) wall[x][y-1].north = wall_dir[2];
 800c1cc:	4b24      	ldr	r3, [pc, #144]	; (800c260 <wall_set+0x280>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d015      	beq.n	800c200 <wall_set+0x220>
 800c1d4:	79b9      	ldrb	r1, [r7, #6]
 800c1d6:	4b21      	ldr	r3, [pc, #132]	; (800c25c <wall_set+0x27c>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	461c      	mov	r4, r3
 800c1dc:	4b20      	ldr	r3, [pc, #128]	; (800c260 <wall_set+0x280>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	1e5a      	subs	r2, r3, #1
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	f003 0303 	and.w	r3, r3, #3
 800c1e8:	b2d8      	uxtb	r0, r3
 800c1ea:	491e      	ldr	r1, [pc, #120]	; (800c264 <wall_set+0x284>)
 800c1ec:	4623      	mov	r3, r4
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	4423      	add	r3, r4
 800c1f2:	441a      	add	r2, r3
 800c1f4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1f8:	f360 0301 	bfi	r3, r0, #0, #2
 800c1fc:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x > 0 ) wall[x-1][y].east = wall_dir[3];
 800c200:	4b16      	ldr	r3, [pc, #88]	; (800c25c <wall_set+0x27c>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d015      	beq.n	800c234 <wall_set+0x254>
 800c208:	79f9      	ldrb	r1, [r7, #7]
 800c20a:	4b14      	ldr	r3, [pc, #80]	; (800c25c <wall_set+0x27c>)
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	1e5a      	subs	r2, r3, #1
 800c210:	4b13      	ldr	r3, [pc, #76]	; (800c260 <wall_set+0x280>)
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	461c      	mov	r4, r3
 800c216:	460b      	mov	r3, r1
 800c218:	f003 0303 	and.w	r3, r3, #3
 800c21c:	b2d8      	uxtb	r0, r3
 800c21e:	4911      	ldr	r1, [pc, #68]	; (800c264 <wall_set+0x284>)
 800c220:	4613      	mov	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	4413      	add	r3, r2
 800c226:	191a      	adds	r2, r3, r4
 800c228:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c22c:	f360 0383 	bfi	r3, r0, #2, #2
 800c230:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

}
 800c234:	bf00      	nop
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bc90      	pop	{r4, r7}
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	20005054 	.word	0x20005054
 800c244:	200044a0 	.word	0x200044a0
 800c248:	2000449a 	.word	0x2000449a
 800c24c:	20004f08 	.word	0x20004f08
 800c250:	42c80000 	.word	0x42c80000
 800c254:	200043c4 	.word	0x200043c4
 800c258:	430c0000 	.word	0x430c0000
 800c25c:	2000030c 	.word	0x2000030c
 800c260:	2000030d 	.word	0x2000030d
 800c264:	20004f0c 	.word	0x20004f0c

0800c268 <judge>:
void judge(){
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
	#define ACCE_DECE  //?��?区画ずつ?��?減�??. 旋回はエンコー?��?
	//#define SLOW //緩旋回.IMUあり
	//#define SHINCHI //?��?輪信地旋回
	//#define IMU //?��?区画ずつ?��?減�??. 旋回はIMU
	/*----*/
    	  switch(my_direction){
 800c26c:	4baa      	ldr	r3, [pc, #680]	; (800c518 <judge+0x2b0>)
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b03      	cmp	r3, #3
 800c272:	f200 81e7 	bhi.w	800c644 <judge+0x3dc>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <judge+0x14>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c28d 	.word	0x0800c28d
 800c280:	0800c375 	.word	0x0800c375
 800c284:	0800c45d 	.word	0x0800c45d
 800c288:	0800c55d 	.word	0x0800c55d
    	  case north:

    		  if(wall[x][y].west == NOWALL){
 800c28c:	4ba3      	ldr	r3, [pc, #652]	; (800c51c <judge+0x2b4>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	4619      	mov	r1, r3
 800c292:	4ba3      	ldr	r3, [pc, #652]	; (800c520 <judge+0x2b8>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	4618      	mov	r0, r3
 800c298:	4aa2      	ldr	r2, [pc, #648]	; (800c524 <judge+0x2bc>)
 800c29a:	460b      	mov	r3, r1
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	440b      	add	r3, r1
 800c2a0:	4403      	add	r3, r0
 800c2a2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c2a6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10b      	bne.n	800c2c8 <judge+0x60>
    			  L_turn_select();
 800c2b0:	f7ff fc2e 	bl	800bb10 <L_turn_select>
    			  my_direction = west;
 800c2b4:	4b98      	ldr	r3, [pc, #608]	; (800c518 <judge+0x2b0>)
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	701a      	strb	r2, [r3, #0]
    		      x--;
 800c2ba:	4b98      	ldr	r3, [pc, #608]	; (800c51c <judge+0x2b4>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	4b96      	ldr	r3, [pc, #600]	; (800c51c <judge+0x2b4>)
 800c2c4:	701a      	strb	r2, [r3, #0]
    	       	  y--;
    		  }



    		  break;
 800c2c6:	e1be      	b.n	800c646 <judge+0x3de>
    		  else if(wall[x][y].north == NOWALL){
 800c2c8:	4b94      	ldr	r3, [pc, #592]	; (800c51c <judge+0x2b4>)
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	4b94      	ldr	r3, [pc, #592]	; (800c520 <judge+0x2b8>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	4a93      	ldr	r2, [pc, #588]	; (800c524 <judge+0x2bc>)
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	440b      	add	r3, r1
 800c2dc:	4403      	add	r3, r0
 800c2de:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c2e2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10b      	bne.n	800c304 <judge+0x9c>
    			  straight();
 800c2ec:	f7fe fdb4 	bl	800ae58 <straight>
    			  my_direction = north;
 800c2f0:	4b89      	ldr	r3, [pc, #548]	; (800c518 <judge+0x2b0>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
    			  y++;
 800c2f6:	4b8a      	ldr	r3, [pc, #552]	; (800c520 <judge+0x2b8>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	4b88      	ldr	r3, [pc, #544]	; (800c520 <judge+0x2b8>)
 800c300:	701a      	strb	r2, [r3, #0]
    		  break;
 800c302:	e1a0      	b.n	800c646 <judge+0x3de>
    		  else if(wall[x][y].east == NOWALL){
 800c304:	4b85      	ldr	r3, [pc, #532]	; (800c51c <judge+0x2b4>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	4619      	mov	r1, r3
 800c30a:	4b85      	ldr	r3, [pc, #532]	; (800c520 <judge+0x2b8>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	4618      	mov	r0, r3
 800c310:	4a84      	ldr	r2, [pc, #528]	; (800c524 <judge+0x2bc>)
 800c312:	460b      	mov	r3, r1
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	440b      	add	r3, r1
 800c318:	4403      	add	r3, r0
 800c31a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c31e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10b      	bne.n	800c340 <judge+0xd8>
    			  R_turn_select();
 800c328:	f7ff fbae 	bl	800ba88 <R_turn_select>
    	          my_direction = east;
 800c32c:	4b7a      	ldr	r3, [pc, #488]	; (800c518 <judge+0x2b0>)
 800c32e:	2201      	movs	r2, #1
 800c330:	701a      	strb	r2, [r3, #0]
    	          x++;
 800c332:	4b7a      	ldr	r3, [pc, #488]	; (800c51c <judge+0x2b4>)
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	3301      	adds	r3, #1
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	4b78      	ldr	r3, [pc, #480]	; (800c51c <judge+0x2b4>)
 800c33c:	701a      	strb	r2, [r3, #0]
    		  break;
 800c33e:	e182      	b.n	800c646 <judge+0x3de>
    	          Decelerate();
 800c340:	f7fe fcd2 	bl	800ace8 <Decelerate>
    	          wait(0.3);
 800c344:	ed9f 0b72 	vldr	d0, [pc, #456]	; 800c510 <judge+0x2a8>
 800c348:	f7fe fb9e 	bl	800aa88 <wait>
    	  	      rotate180();
 800c34c:	f7ff faba 	bl	800b8c4 <rotate180>
    	  	      wait(0.3);
 800c350:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 800c510 <judge+0x2a8>
 800c354:	f7fe fb98 	bl	800aa88 <wait>
    	  	      back_calib();
 800c358:	f7ff fb2e 	bl	800b9b8 <back_calib>
    	       	  Start_Accel();
 800c35c:	f7fe fbbc 	bl	800aad8 <Start_Accel>
    	       	  my_direction = south;
 800c360:	4b6d      	ldr	r3, [pc, #436]	; (800c518 <judge+0x2b0>)
 800c362:	2202      	movs	r2, #2
 800c364:	701a      	strb	r2, [r3, #0]
    	       	  y--;
 800c366:	4b6e      	ldr	r3, [pc, #440]	; (800c520 <judge+0x2b8>)
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	4b6c      	ldr	r3, [pc, #432]	; (800c520 <judge+0x2b8>)
 800c370:	701a      	strb	r2, [r3, #0]
    		  break;
 800c372:	e168      	b.n	800c646 <judge+0x3de>
    	  case east:
    		  if(wall[x][y].north== NOWALL){
 800c374:	4b69      	ldr	r3, [pc, #420]	; (800c51c <judge+0x2b4>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	4619      	mov	r1, r3
 800c37a:	4b69      	ldr	r3, [pc, #420]	; (800c520 <judge+0x2b8>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	4618      	mov	r0, r3
 800c380:	4a68      	ldr	r2, [pc, #416]	; (800c524 <judge+0x2bc>)
 800c382:	460b      	mov	r3, r1
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	440b      	add	r3, r1
 800c388:	4403      	add	r3, r0
 800c38a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c38e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10b      	bne.n	800c3b0 <judge+0x148>
    			  L_turn_select();
 800c398:	f7ff fbba 	bl	800bb10 <L_turn_select>
    			  my_direction = north;
 800c39c:	4b5e      	ldr	r3, [pc, #376]	; (800c518 <judge+0x2b0>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	701a      	strb	r2, [r3, #0]
    			  y++;
 800c3a2:	4b5f      	ldr	r3, [pc, #380]	; (800c520 <judge+0x2b8>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	4b5d      	ldr	r3, [pc, #372]	; (800c520 <judge+0x2b8>)
 800c3ac:	701a      	strb	r2, [r3, #0]
  	       	  Start_Accel();
      			  my_direction = west;
      		      x--;
    		  }

    		  break;
 800c3ae:	e14a      	b.n	800c646 <judge+0x3de>
    		  else if(wall[x][y].east == NOWALL){
 800c3b0:	4b5a      	ldr	r3, [pc, #360]	; (800c51c <judge+0x2b4>)
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4b5a      	ldr	r3, [pc, #360]	; (800c520 <judge+0x2b8>)
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	4a59      	ldr	r2, [pc, #356]	; (800c524 <judge+0x2bc>)
 800c3be:	460b      	mov	r3, r1
 800c3c0:	00db      	lsls	r3, r3, #3
 800c3c2:	440b      	add	r3, r1
 800c3c4:	4403      	add	r3, r0
 800c3c6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c3ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10b      	bne.n	800c3ec <judge+0x184>
    			  straight();
 800c3d4:	f7fe fd40 	bl	800ae58 <straight>
    	          my_direction = east;
 800c3d8:	4b4f      	ldr	r3, [pc, #316]	; (800c518 <judge+0x2b0>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	701a      	strb	r2, [r3, #0]
    	          x++;
 800c3de:	4b4f      	ldr	r3, [pc, #316]	; (800c51c <judge+0x2b4>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	4b4d      	ldr	r3, [pc, #308]	; (800c51c <judge+0x2b4>)
 800c3e8:	701a      	strb	r2, [r3, #0]
    		  break;
 800c3ea:	e12c      	b.n	800c646 <judge+0x3de>
    		  else if(wall[x][y].south == NOWALL){
 800c3ec:	4b4b      	ldr	r3, [pc, #300]	; (800c51c <judge+0x2b4>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4b4b      	ldr	r3, [pc, #300]	; (800c520 <judge+0x2b8>)
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	4a4a      	ldr	r2, [pc, #296]	; (800c524 <judge+0x2bc>)
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	440b      	add	r3, r1
 800c400:	4403      	add	r3, r0
 800c402:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c406:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10b      	bne.n	800c428 <judge+0x1c0>
    			  R_turn_select();
 800c410:	f7ff fb3a 	bl	800ba88 <R_turn_select>
    	       	  my_direction = south;
 800c414:	4b40      	ldr	r3, [pc, #256]	; (800c518 <judge+0x2b0>)
 800c416:	2202      	movs	r2, #2
 800c418:	701a      	strb	r2, [r3, #0]
    	       	  y--;
 800c41a:	4b41      	ldr	r3, [pc, #260]	; (800c520 <judge+0x2b8>)
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	3b01      	subs	r3, #1
 800c420:	b2da      	uxtb	r2, r3
 800c422:	4b3f      	ldr	r3, [pc, #252]	; (800c520 <judge+0x2b8>)
 800c424:	701a      	strb	r2, [r3, #0]
    		  break;
 800c426:	e10e      	b.n	800c646 <judge+0x3de>
    	          Decelerate();
 800c428:	f7fe fc5e 	bl	800ace8 <Decelerate>
    	          wait(0.3);
 800c42c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 800c510 <judge+0x2a8>
 800c430:	f7fe fb2a 	bl	800aa88 <wait>
    	  	      rotate180();
 800c434:	f7ff fa46 	bl	800b8c4 <rotate180>
    	  	      wait(0.3);
 800c438:	ed9f 0b35 	vldr	d0, [pc, #212]	; 800c510 <judge+0x2a8>
 800c43c:	f7fe fb24 	bl	800aa88 <wait>
    	  	      back_calib();
 800c440:	f7ff faba 	bl	800b9b8 <back_calib>
  	       	  Start_Accel();
 800c444:	f7fe fb48 	bl	800aad8 <Start_Accel>
      			  my_direction = west;
 800c448:	4b33      	ldr	r3, [pc, #204]	; (800c518 <judge+0x2b0>)
 800c44a:	2203      	movs	r2, #3
 800c44c:	701a      	strb	r2, [r3, #0]
      		      x--;
 800c44e:	4b33      	ldr	r3, [pc, #204]	; (800c51c <judge+0x2b4>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	3b01      	subs	r3, #1
 800c454:	b2da      	uxtb	r2, r3
 800c456:	4b31      	ldr	r3, [pc, #196]	; (800c51c <judge+0x2b4>)
 800c458:	701a      	strb	r2, [r3, #0]
    		  break;
 800c45a:	e0f4      	b.n	800c646 <judge+0x3de>
    	  case south:
    		  if(wall[x][y].east == NOWALL){
 800c45c:	4b2f      	ldr	r3, [pc, #188]	; (800c51c <judge+0x2b4>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	4619      	mov	r1, r3
 800c462:	4b2f      	ldr	r3, [pc, #188]	; (800c520 <judge+0x2b8>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	4618      	mov	r0, r3
 800c468:	4a2e      	ldr	r2, [pc, #184]	; (800c524 <judge+0x2bc>)
 800c46a:	460b      	mov	r3, r1
 800c46c:	00db      	lsls	r3, r3, #3
 800c46e:	440b      	add	r3, r1
 800c470:	4403      	add	r3, r0
 800c472:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c476:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10b      	bne.n	800c498 <judge+0x230>
    			  L_turn_select();
 800c480:	f7ff fb46 	bl	800bb10 <L_turn_select>
    	          my_direction = east;
 800c484:	4b24      	ldr	r3, [pc, #144]	; (800c518 <judge+0x2b0>)
 800c486:	2201      	movs	r2, #1
 800c488:	701a      	strb	r2, [r3, #0]
    	          x++;
 800c48a:	4b24      	ldr	r3, [pc, #144]	; (800c51c <judge+0x2b4>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	3301      	adds	r3, #1
 800c490:	b2da      	uxtb	r2, r3
 800c492:	4b22      	ldr	r3, [pc, #136]	; (800c51c <judge+0x2b4>)
 800c494:	701a      	strb	r2, [r3, #0]
  	       	  Start_Accel();
      			  my_direction = north;
      			  y++;
    		  }

    		  break;
 800c496:	e0d6      	b.n	800c646 <judge+0x3de>
    		  else if(wall[x][y].south == NOWALL){
 800c498:	4b20      	ldr	r3, [pc, #128]	; (800c51c <judge+0x2b4>)
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	4619      	mov	r1, r3
 800c49e:	4b20      	ldr	r3, [pc, #128]	; (800c520 <judge+0x2b8>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	4a1f      	ldr	r2, [pc, #124]	; (800c524 <judge+0x2bc>)
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	440b      	add	r3, r1
 800c4ac:	4403      	add	r3, r0
 800c4ae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c4b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10b      	bne.n	800c4d4 <judge+0x26c>
    			  straight();
 800c4bc:	f7fe fccc 	bl	800ae58 <straight>
    	       	  my_direction = south;
 800c4c0:	4b15      	ldr	r3, [pc, #84]	; (800c518 <judge+0x2b0>)
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	701a      	strb	r2, [r3, #0]
    	       	  y--;
 800c4c6:	4b16      	ldr	r3, [pc, #88]	; (800c520 <judge+0x2b8>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	4b14      	ldr	r3, [pc, #80]	; (800c520 <judge+0x2b8>)
 800c4d0:	701a      	strb	r2, [r3, #0]
    		  break;
 800c4d2:	e0b8      	b.n	800c646 <judge+0x3de>
    		  else if(wall[x][y].west == NOWALL){
 800c4d4:	4b11      	ldr	r3, [pc, #68]	; (800c51c <judge+0x2b4>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4b11      	ldr	r3, [pc, #68]	; (800c520 <judge+0x2b8>)
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	4a10      	ldr	r2, [pc, #64]	; (800c524 <judge+0x2bc>)
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	440b      	add	r3, r1
 800c4e8:	4403      	add	r3, r0
 800c4ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c4ee:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d117      	bne.n	800c528 <judge+0x2c0>
    			  R_turn_select();
 800c4f8:	f7ff fac6 	bl	800ba88 <R_turn_select>
      			  my_direction = west;
 800c4fc:	4b06      	ldr	r3, [pc, #24]	; (800c518 <judge+0x2b0>)
 800c4fe:	2203      	movs	r2, #3
 800c500:	701a      	strb	r2, [r3, #0]
      		      x--;
 800c502:	4b06      	ldr	r3, [pc, #24]	; (800c51c <judge+0x2b4>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	3b01      	subs	r3, #1
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	4b04      	ldr	r3, [pc, #16]	; (800c51c <judge+0x2b4>)
 800c50c:	701a      	strb	r2, [r3, #0]
    		  break;
 800c50e:	e09a      	b.n	800c646 <judge+0x3de>
 800c510:	33333333 	.word	0x33333333
 800c514:	3fd33333 	.word	0x3fd33333
 800c518:	2000449a 	.word	0x2000449a
 800c51c:	2000030c 	.word	0x2000030c
 800c520:	2000030d 	.word	0x2000030d
 800c524:	20004f0c 	.word	0x20004f0c
    	          Decelerate();
 800c528:	f7fe fbde 	bl	800ace8 <Decelerate>
    	          wait(0.3);
 800c52c:	ed9f 0b48 	vldr	d0, [pc, #288]	; 800c650 <judge+0x3e8>
 800c530:	f7fe faaa 	bl	800aa88 <wait>
    	  	      rotate180();
 800c534:	f7ff f9c6 	bl	800b8c4 <rotate180>
    	  	      wait(0.3);
 800c538:	ed9f 0b45 	vldr	d0, [pc, #276]	; 800c650 <judge+0x3e8>
 800c53c:	f7fe faa4 	bl	800aa88 <wait>
    	  	      back_calib();
 800c540:	f7ff fa3a 	bl	800b9b8 <back_calib>
  	       	  Start_Accel();
 800c544:	f7fe fac8 	bl	800aad8 <Start_Accel>
      			  my_direction = north;
 800c548:	4b43      	ldr	r3, [pc, #268]	; (800c658 <judge+0x3f0>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	701a      	strb	r2, [r3, #0]
      			  y++;
 800c54e:	4b43      	ldr	r3, [pc, #268]	; (800c65c <judge+0x3f4>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	3301      	adds	r3, #1
 800c554:	b2da      	uxtb	r2, r3
 800c556:	4b41      	ldr	r3, [pc, #260]	; (800c65c <judge+0x3f4>)
 800c558:	701a      	strb	r2, [r3, #0]
    		  break;
 800c55a:	e074      	b.n	800c646 <judge+0x3de>
    	  case west:
    		  if(wall[x][y].south == NOWALL){
 800c55c:	4b40      	ldr	r3, [pc, #256]	; (800c660 <judge+0x3f8>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	4619      	mov	r1, r3
 800c562:	4b3e      	ldr	r3, [pc, #248]	; (800c65c <judge+0x3f4>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	4618      	mov	r0, r3
 800c568:	4a3e      	ldr	r2, [pc, #248]	; (800c664 <judge+0x3fc>)
 800c56a:	460b      	mov	r3, r1
 800c56c:	00db      	lsls	r3, r3, #3
 800c56e:	440b      	add	r3, r1
 800c570:	4403      	add	r3, r0
 800c572:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c576:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10b      	bne.n	800c598 <judge+0x330>
    			  L_turn_select();
 800c580:	f7ff fac6 	bl	800bb10 <L_turn_select>
    	       	  my_direction = south;
 800c584:	4b34      	ldr	r3, [pc, #208]	; (800c658 <judge+0x3f0>)
 800c586:	2202      	movs	r2, #2
 800c588:	701a      	strb	r2, [r3, #0]
    	       	  y--;
 800c58a:	4b34      	ldr	r3, [pc, #208]	; (800c65c <judge+0x3f4>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	3b01      	subs	r3, #1
 800c590:	b2da      	uxtb	r2, r3
 800c592:	4b32      	ldr	r3, [pc, #200]	; (800c65c <judge+0x3f4>)
 800c594:	701a      	strb	r2, [r3, #0]
    	       	  Start_Accel();
    	          my_direction = east;
    	          x++;
    		  }

    		  break;
 800c596:	e056      	b.n	800c646 <judge+0x3de>
    		  else if(wall[x][y].west == NOWALL){
 800c598:	4b31      	ldr	r3, [pc, #196]	; (800c660 <judge+0x3f8>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	4619      	mov	r1, r3
 800c59e:	4b2f      	ldr	r3, [pc, #188]	; (800c65c <judge+0x3f4>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	4a2f      	ldr	r2, [pc, #188]	; (800c664 <judge+0x3fc>)
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	440b      	add	r3, r1
 800c5ac:	4403      	add	r3, r0
 800c5ae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c5b2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10b      	bne.n	800c5d4 <judge+0x36c>
    			  straight();
 800c5bc:	f7fe fc4c 	bl	800ae58 <straight>
    			  my_direction = west;
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <judge+0x3f0>)
 800c5c2:	2203      	movs	r2, #3
 800c5c4:	701a      	strb	r2, [r3, #0]
    		      x--;
 800c5c6:	4b26      	ldr	r3, [pc, #152]	; (800c660 <judge+0x3f8>)
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	4b24      	ldr	r3, [pc, #144]	; (800c660 <judge+0x3f8>)
 800c5d0:	701a      	strb	r2, [r3, #0]
    		  break;
 800c5d2:	e038      	b.n	800c646 <judge+0x3de>
    		  else if(wall[x][y].north == NOWALL){
 800c5d4:	4b22      	ldr	r3, [pc, #136]	; (800c660 <judge+0x3f8>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4b20      	ldr	r3, [pc, #128]	; (800c65c <judge+0x3f4>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	4a20      	ldr	r2, [pc, #128]	; (800c664 <judge+0x3fc>)
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	440b      	add	r3, r1
 800c5e8:	4403      	add	r3, r0
 800c5ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c5ee:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10b      	bne.n	800c610 <judge+0x3a8>
    			  R_turn_select();
 800c5f8:	f7ff fa46 	bl	800ba88 <R_turn_select>
      			  my_direction = north;
 800c5fc:	4b16      	ldr	r3, [pc, #88]	; (800c658 <judge+0x3f0>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	701a      	strb	r2, [r3, #0]
      			  y++;
 800c602:	4b16      	ldr	r3, [pc, #88]	; (800c65c <judge+0x3f4>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	3301      	adds	r3, #1
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	4b14      	ldr	r3, [pc, #80]	; (800c65c <judge+0x3f4>)
 800c60c:	701a      	strb	r2, [r3, #0]
    		  break;
 800c60e:	e01a      	b.n	800c646 <judge+0x3de>
    	          Decelerate();
 800c610:	f7fe fb6a 	bl	800ace8 <Decelerate>
    	          wait(0.3);;
 800c614:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c650 <judge+0x3e8>
 800c618:	f7fe fa36 	bl	800aa88 <wait>
    	  	      rotate180();
 800c61c:	f7ff f952 	bl	800b8c4 <rotate180>
    	  	      wait(0.3);;
 800c620:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800c650 <judge+0x3e8>
 800c624:	f7fe fa30 	bl	800aa88 <wait>
    	  	      back_calib();
 800c628:	f7ff f9c6 	bl	800b9b8 <back_calib>
    	       	  Start_Accel();
 800c62c:	f7fe fa54 	bl	800aad8 <Start_Accel>
    	          my_direction = east;
 800c630:	4b09      	ldr	r3, [pc, #36]	; (800c658 <judge+0x3f0>)
 800c632:	2201      	movs	r2, #1
 800c634:	701a      	strb	r2, [r3, #0]
    	          x++;
 800c636:	4b0a      	ldr	r3, [pc, #40]	; (800c660 <judge+0x3f8>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	3301      	adds	r3, #1
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	4b08      	ldr	r3, [pc, #32]	; (800c660 <judge+0x3f8>)
 800c640:	701a      	strb	r2, [r3, #0]
    		  break;
 800c642:	e000      	b.n	800c646 <judge+0x3de>
    	  default:
    		  break;
 800c644:	bf00      	nop
    	  }//swtich end
}
 800c646:	bf00      	nop
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	f3af 8000 	nop.w
 800c650:	33333333 	.word	0x33333333
 800c654:	3fd33333 	.word	0x3fd33333
 800c658:	2000449a 	.word	0x2000449a
 800c65c:	2000030d 	.word	0x2000030d
 800c660:	2000030c 	.word	0x2000030c
 800c664:	20004f0c 	.word	0x20004f0c

0800c668 <left_buck>:
       //Flash_store();
    	}
#endif
}
void left_buck()
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	af00      	add	r7, sp, #0


    while( !((x>=0) && (x<=0)) || !( (y>=0) && (y<=0) ) ){//ゴール座標でな??��?��?と??��?��?
 800c66c:	e005      	b.n	800c67a <left_buck+0x12>

  	  wall_set(); //相対方向から絶対方向に変換
 800c66e:	f7ff fcb7 	bl	800bfe0 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800c672:	f7ff fb17 	bl	800bca4 <Walk_Map_Update>

  	  judge();//今�???��?��方角とセンサ値によって、アクションを変える�??
 800c676:	f7ff fdf7 	bl	800c268 <judge>
    while( !((x>=0) && (x<=0)) || !( (y>=0) && (y<=0) ) ){//ゴール座標でな??��?��?と??��?��?
 800c67a:	4b05      	ldr	r3, [pc, #20]	; (800c690 <left_buck+0x28>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1f5      	bne.n	800c66e <left_buck+0x6>
 800c682:	4b04      	ldr	r3, [pc, #16]	; (800c694 <left_buck+0x2c>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1f1      	bne.n	800c66e <left_buck+0x6>

    }
}
 800c68a:	bf00      	nop
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	2000030c 	.word	0x2000030c
 800c694:	2000030d 	.word	0x2000030d

0800c698 <goal_area_search>:

void goal_area_search(){
 800c698:	b580      	push	{r7, lr}
 800c69a:	b0be      	sub	sp, #248	; 0xf8
 800c69c:	af00      	add	r7, sp, #0

	char orbit;

	//壁更新
	wall_set();
 800c69e:	f7ff fc9f 	bl	800bfe0 <wall_set>

	//マップ更新
	Walk_Map_Update();
 800c6a2:	f7ff faff 	bl	800bca4 <Walk_Map_Update>


	switch(my_direction){
 800c6a6:	4bcc      	ldr	r3, [pc, #816]	; (800c9d8 <goal_area_search+0x340>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	f200 86f7 	bhi.w	800d49e <goal_area_search+0xe06>
 800c6b0:	a201      	add	r2, pc, #4	; (adr r2, 800c6b8 <goal_area_search+0x20>)
 800c6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b6:	bf00      	nop
 800c6b8:	0800c6c9 	.word	0x0800c6c9
 800c6bc:	0800ca7d 	.word	0x0800ca7d
 800c6c0:	0800ce27 	.word	0x0800ce27
 800c6c4:	0800d163 	.word	0x0800d163
	case north:

		//現在の座�? == ゴールの�?2マス
		//xが小さ�?ほ�?なら�?�右回り
		//直進
		Accelerate();
 800c6c8:	f7fe fa5e 	bl	800ab88 <Accelerate>
		Decelerate();
 800c6cc:	f7fe fb0c 	bl	800ace8 <Decelerate>
		y++;
 800c6d0:	4bc2      	ldr	r3, [pc, #776]	; (800c9dc <goal_area_search+0x344>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	4bc0      	ldr	r3, [pc, #768]	; (800c9dc <goal_area_search+0x344>)
 800c6da:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c6dc:	f7ff fc80 	bl	800bfe0 <wall_set>
		//�?つ
		for(int i=0;i < WAIT*0.5;i++);
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c6e6:	e004      	b.n	800c6f2 <goal_area_search+0x5a>
 800c6e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c6f2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c6f6:	f7fb fe4d 	bl	8008394 <__aeabi_i2d>
 800c6fa:	a3b5      	add	r3, pc, #724	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	f7fc f924 	bl	800894c <__aeabi_dcmplt>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1ee      	bne.n	800c6e8 <goal_area_search+0x50>

		if(x == X_GOAL_LESSER){
 800c70a:	4bb5      	ldr	r3, [pc, #724]	; (800c9e0 <goal_area_search+0x348>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d103      	bne.n	800c71a <goal_area_search+0x82>
			orbit = 'R';
 800c712:	2352      	movs	r3, #82	; 0x52
 800c714:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c718:	e006      	b.n	800c728 <goal_area_search+0x90>
		}
		//xが大きい方なら�?�左回り
		else if(x == X_GOAL_LARGER){
 800c71a:	4bb1      	ldr	r3, [pc, #708]	; (800c9e0 <goal_area_search+0x348>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d102      	bne.n	800c728 <goal_area_search+0x90>
			orbit = 'L';
 800c722:	234c      	movs	r3, #76	; 0x4c
 800c724:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}

		if(orbit == 'R'){
 800c728:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c72c:	2b52      	cmp	r3, #82	; 0x52
 800c72e:	f040 80c9 	bne.w	800c8c4 <goal_area_search+0x22c>
			//右回り
			turn_right();
 800c732:	f7fe fcfb 	bl	800b12c <turn_right>
			my_direction = east;
 800c736:	4ba8      	ldr	r3, [pc, #672]	; (800c9d8 <goal_area_search+0x340>)
 800c738:	2201      	movs	r2, #1
 800c73a:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c73c:	2300      	movs	r3, #0
 800c73e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c742:	e004      	b.n	800c74e <goal_area_search+0xb6>
 800c744:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c748:	3301      	adds	r3, #1
 800c74a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c74e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800c752:	f7fb fe1f 	bl	8008394 <__aeabi_i2d>
 800c756:	a39e      	add	r3, pc, #632	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7fc f8f6 	bl	800894c <__aeabi_dcmplt>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1ee      	bne.n	800c744 <goal_area_search+0xac>
			//直進
			Accelerate();
 800c766:	f7fe fa0f 	bl	800ab88 <Accelerate>
			Decelerate();
 800c76a:	f7fe fabd 	bl	800ace8 <Decelerate>
			x++;
 800c76e:	4b9c      	ldr	r3, [pc, #624]	; (800c9e0 <goal_area_search+0x348>)
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	b2da      	uxtb	r2, r3
 800c776:	4b9a      	ldr	r3, [pc, #616]	; (800c9e0 <goal_area_search+0x348>)
 800c778:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c77a:	f7ff fc31 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c77e:	2300      	movs	r3, #0
 800c780:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c784:	e004      	b.n	800c790 <goal_area_search+0xf8>
 800c786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c78a:	3301      	adds	r3, #1
 800c78c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c790:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800c794:	f7fb fdfe 	bl	8008394 <__aeabi_i2d>
 800c798:	a38d      	add	r3, pc, #564	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f7fc f8d5 	bl	800894c <__aeabi_dcmplt>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1ee      	bne.n	800c786 <goal_area_search+0xee>


			//右回り
			turn_right();
 800c7a8:	f7fe fcc0 	bl	800b12c <turn_right>
			my_direction = south;
 800c7ac:	4b8a      	ldr	r3, [pc, #552]	; (800c9d8 <goal_area_search+0x340>)
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c7b8:	e004      	b.n	800c7c4 <goal_area_search+0x12c>
 800c7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7be:	3301      	adds	r3, #1
 800c7c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c7c4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800c7c8:	f7fb fde4 	bl	8008394 <__aeabi_i2d>
 800c7cc:	a380      	add	r3, pc, #512	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7fc f8bb 	bl	800894c <__aeabi_dcmplt>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1ee      	bne.n	800c7ba <goal_area_search+0x122>
			//直進
			Accelerate();
 800c7dc:	f7fe f9d4 	bl	800ab88 <Accelerate>
			Decelerate();
 800c7e0:	f7fe fa82 	bl	800ace8 <Decelerate>
			y--;
 800c7e4:	4b7d      	ldr	r3, [pc, #500]	; (800c9dc <goal_area_search+0x344>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	4b7b      	ldr	r3, [pc, #492]	; (800c9dc <goal_area_search+0x344>)
 800c7ee:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c7f0:	f7ff fbf6 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c7fa:	e004      	b.n	800c806 <goal_area_search+0x16e>
 800c7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c800:	3301      	adds	r3, #1
 800c802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c806:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c80a:	f7fb fdc3 	bl	8008394 <__aeabi_i2d>
 800c80e:	a370      	add	r3, pc, #448	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	f7fc f89a 	bl	800894c <__aeabi_dcmplt>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1ee      	bne.n	800c7fc <goal_area_search+0x164>

			//右回転
			turn_right();
 800c81e:	f7fe fc85 	bl	800b12c <turn_right>
			my_direction = west;
 800c822:	4b6d      	ldr	r3, [pc, #436]	; (800c9d8 <goal_area_search+0x340>)
 800c824:	2203      	movs	r2, #3
 800c826:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c828:	2300      	movs	r3, #0
 800c82a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c82e:	e004      	b.n	800c83a <goal_area_search+0x1a2>
 800c830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c834:	3301      	adds	r3, #1
 800c836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c83a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800c83e:	f7fb fda9 	bl	8008394 <__aeabi_i2d>
 800c842:	a363      	add	r3, pc, #396	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f7fc f880 	bl	800894c <__aeabi_dcmplt>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1ee      	bne.n	800c830 <goal_area_search+0x198>
			//直進
			Accelerate();
 800c852:	f7fe f999 	bl	800ab88 <Accelerate>
			Decelerate();
 800c856:	f7fe fa47 	bl	800ace8 <Decelerate>
			y--;
 800c85a:	4b60      	ldr	r3, [pc, #384]	; (800c9dc <goal_area_search+0x344>)
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	3b01      	subs	r3, #1
 800c860:	b2da      	uxtb	r2, r3
 800c862:	4b5e      	ldr	r3, [pc, #376]	; (800c9dc <goal_area_search+0x344>)
 800c864:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c866:	2300      	movs	r3, #0
 800c868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c86c:	e004      	b.n	800c878 <goal_area_search+0x1e0>
 800c86e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c872:	3301      	adds	r3, #1
 800c874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c878:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c87c:	f7fb fd8a 	bl	8008394 <__aeabi_i2d>
 800c880:	a353      	add	r3, pc, #332	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7fc f861 	bl	800894c <__aeabi_dcmplt>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1ee      	bne.n	800c86e <goal_area_search+0x1d6>
			//左回転
			turn_left();
 800c890:	f7fe fcb6 	bl	800b200 <turn_left>
			my_direction = south;
 800c894:	4b50      	ldr	r3, [pc, #320]	; (800c9d8 <goal_area_search+0x340>)
 800c896:	2202      	movs	r2, #2
 800c898:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c89a:	2300      	movs	r3, #0
 800c89c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c8a0:	e004      	b.n	800c8ac <goal_area_search+0x214>
 800c8a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c8ac:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c8b0:	f7fb fd70 	bl	8008394 <__aeabi_i2d>
 800c8b4:	a346      	add	r3, pc, #280	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	f7fc f847 	bl	800894c <__aeabi_dcmplt>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1ee      	bne.n	800c8a2 <goal_area_search+0x20a>
		}

		if(orbit == 'L'){
 800c8c4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c8c8:	2b4c      	cmp	r3, #76	; 0x4c
 800c8ca:	f040 85ea 	bne.w	800d4a2 <goal_area_search+0xe0a>
			//左回り
			turn_left();
 800c8ce:	f7fe fc97 	bl	800b200 <turn_left>
			my_direction = west;
 800c8d2:	4b41      	ldr	r3, [pc, #260]	; (800c9d8 <goal_area_search+0x340>)
 800c8d4:	2203      	movs	r2, #3
 800c8d6:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c8d8:	2300      	movs	r3, #0
 800c8da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8de:	e004      	b.n	800c8ea <goal_area_search+0x252>
 800c8e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8ea:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800c8ee:	f7fb fd51 	bl	8008394 <__aeabi_i2d>
 800c8f2:	a337      	add	r3, pc, #220	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	f7fc f828 	bl	800894c <__aeabi_dcmplt>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1ee      	bne.n	800c8e0 <goal_area_search+0x248>
			//直進
			Accelerate();
 800c902:	f7fe f941 	bl	800ab88 <Accelerate>
			Decelerate();
 800c906:	f7fe f9ef 	bl	800ace8 <Decelerate>
			x--;
 800c90a:	4b35      	ldr	r3, [pc, #212]	; (800c9e0 <goal_area_search+0x348>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	3b01      	subs	r3, #1
 800c910:	b2da      	uxtb	r2, r3
 800c912:	4b33      	ldr	r3, [pc, #204]	; (800c9e0 <goal_area_search+0x348>)
 800c914:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c916:	f7ff fb63 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c91a:	2300      	movs	r3, #0
 800c91c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c920:	e004      	b.n	800c92c <goal_area_search+0x294>
 800c922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c926:	3301      	adds	r3, #1
 800c928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c92c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c930:	f7fb fd30 	bl	8008394 <__aeabi_i2d>
 800c934:	a326      	add	r3, pc, #152	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	f7fc f807 	bl	800894c <__aeabi_dcmplt>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1ee      	bne.n	800c922 <goal_area_search+0x28a>

			turn_left();
 800c944:	f7fe fc5c 	bl	800b200 <turn_left>
			my_direction = south;
 800c948:	4b23      	ldr	r3, [pc, #140]	; (800c9d8 <goal_area_search+0x340>)
 800c94a:	2202      	movs	r2, #2
 800c94c:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c94e:	2300      	movs	r3, #0
 800c950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c954:	e004      	b.n	800c960 <goal_area_search+0x2c8>
 800c956:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c95a:	3301      	adds	r3, #1
 800c95c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c960:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800c964:	f7fb fd16 	bl	8008394 <__aeabi_i2d>
 800c968:	a319      	add	r3, pc, #100	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	f7fb ffed 	bl	800894c <__aeabi_dcmplt>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1ee      	bne.n	800c956 <goal_area_search+0x2be>
			//直進
			Accelerate();
 800c978:	f7fe f906 	bl	800ab88 <Accelerate>
			Decelerate();
 800c97c:	f7fe f9b4 	bl	800ace8 <Decelerate>
			y--;
 800c980:	4b16      	ldr	r3, [pc, #88]	; (800c9dc <goal_area_search+0x344>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	3b01      	subs	r3, #1
 800c986:	b2da      	uxtb	r2, r3
 800c988:	4b14      	ldr	r3, [pc, #80]	; (800c9dc <goal_area_search+0x344>)
 800c98a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c98c:	f7ff fb28 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c990:	2300      	movs	r3, #0
 800c992:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c996:	e004      	b.n	800c9a2 <goal_area_search+0x30a>
 800c998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c99c:	3301      	adds	r3, #1
 800c99e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9a2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800c9a6:	f7fb fcf5 	bl	8008394 <__aeabi_i2d>
 800c9aa:	a309      	add	r3, pc, #36	; (adr r3, 800c9d0 <goal_area_search+0x338>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f7fb ffcc 	bl	800894c <__aeabi_dcmplt>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1ee      	bne.n	800c998 <goal_area_search+0x300>

			//左回転
			turn_left();
 800c9ba:	f7fe fc21 	bl	800b200 <turn_left>
			my_direction = east;
 800c9be:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <goal_area_search+0x340>)
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9ca:	e010      	b.n	800c9ee <goal_area_search+0x356>
 800c9cc:	f3af 8000 	nop.w
 800c9d0:	00000000 	.word	0x00000000
 800c9d4:	40cd4c00 	.word	0x40cd4c00
 800c9d8:	2000449a 	.word	0x2000449a
 800c9dc:	2000030d 	.word	0x2000030d
 800c9e0:	2000030c 	.word	0x2000030c
 800c9e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9ee:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800c9f2:	f7fb fccf 	bl	8008394 <__aeabi_i2d>
 800c9f6:	a3d6      	add	r3, pc, #856	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7fb ffa6 	bl	800894c <__aeabi_dcmplt>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1ee      	bne.n	800c9e4 <goal_area_search+0x34c>
			//直進
			Accelerate();
 800ca06:	f7fe f8bf 	bl	800ab88 <Accelerate>
			Decelerate();
 800ca0a:	f7fe f96d 	bl	800ace8 <Decelerate>
			x++;
 800ca0e:	4bd2      	ldr	r3, [pc, #840]	; (800cd58 <goal_area_search+0x6c0>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	3301      	adds	r3, #1
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	4bd0      	ldr	r3, [pc, #832]	; (800cd58 <goal_area_search+0x6c0>)
 800ca18:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca20:	e004      	b.n	800ca2c <goal_area_search+0x394>
 800ca22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca26:	3301      	adds	r3, #1
 800ca28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca2c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ca30:	f7fb fcb0 	bl	8008394 <__aeabi_i2d>
 800ca34:	a3c6      	add	r3, pc, #792	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	f7fb ff87 	bl	800894c <__aeabi_dcmplt>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1ee      	bne.n	800ca22 <goal_area_search+0x38a>
			//右回転
			turn_right();
 800ca44:	f7fe fb72 	bl	800b12c <turn_right>
			my_direction = north;
 800ca48:	4bc4      	ldr	r3, [pc, #784]	; (800cd5c <goal_area_search+0x6c4>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca54:	e004      	b.n	800ca60 <goal_area_search+0x3c8>
 800ca56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca60:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800ca64:	f7fb fc96 	bl	8008394 <__aeabi_i2d>
 800ca68:	a3b9      	add	r3, pc, #740	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	f7fb ff6d 	bl	800894c <__aeabi_dcmplt>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1ee      	bne.n	800ca56 <goal_area_search+0x3be>
		}

		break;
 800ca78:	f000 bd13 	b.w	800d4a2 <goal_area_search+0xe0a>
	case east:
		//直進
		Accelerate();
 800ca7c:	f7fe f884 	bl	800ab88 <Accelerate>
		Decelerate();
 800ca80:	f7fe f932 	bl	800ace8 <Decelerate>
		x++;
 800ca84:	4bb4      	ldr	r3, [pc, #720]	; (800cd58 <goal_area_search+0x6c0>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	4bb2      	ldr	r3, [pc, #712]	; (800cd58 <goal_area_search+0x6c0>)
 800ca8e:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800ca90:	f7ff faa6 	bl	800bfe0 <wall_set>
		//�?つ
		for(int i=0;i < WAIT*0.5;i++);
 800ca94:	2300      	movs	r3, #0
 800ca96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca9a:	e004      	b.n	800caa6 <goal_area_search+0x40e>
 800ca9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800caa0:	3301      	adds	r3, #1
 800caa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800caa6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800caaa:	f7fb fc73 	bl	8008394 <__aeabi_i2d>
 800caae:	a3a8      	add	r3, pc, #672	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f7fb ff4a 	bl	800894c <__aeabi_dcmplt>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1ee      	bne.n	800ca9c <goal_area_search+0x404>

		//現在の座�? == ゴールの左2マス
		if(y == Y_GOAL_LESSER){
 800cabe:	4ba8      	ldr	r3, [pc, #672]	; (800cd60 <goal_area_search+0x6c8>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d103      	bne.n	800cace <goal_area_search+0x436>
			orbit = 'L';
 800cac6:	234c      	movs	r3, #76	; 0x4c
 800cac8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800cacc:	e006      	b.n	800cadc <goal_area_search+0x444>
		}
		//yが大きい方なら�?�左回り
		else if(y == Y_GOAL_LARGER){
 800cace:	4ba4      	ldr	r3, [pc, #656]	; (800cd60 <goal_area_search+0x6c8>)
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d102      	bne.n	800cadc <goal_area_search+0x444>
			orbit = 'R';
 800cad6:	2352      	movs	r3, #82	; 0x52
 800cad8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800cadc:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cae0:	2b52      	cmp	r3, #82	; 0x52
 800cae2:	f040 80c9 	bne.w	800cc78 <goal_area_search+0x5e0>
			//右回り
			turn_right();
 800cae6:	f7fe fb21 	bl	800b12c <turn_right>
			my_direction = south;
 800caea:	4b9c      	ldr	r3, [pc, #624]	; (800cd5c <goal_area_search+0x6c4>)
 800caec:	2202      	movs	r2, #2
 800caee:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800caf0:	2300      	movs	r3, #0
 800caf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800caf6:	e004      	b.n	800cb02 <goal_area_search+0x46a>
 800caf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cafc:	3301      	adds	r3, #1
 800cafe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb02:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800cb06:	f7fb fc45 	bl	8008394 <__aeabi_i2d>
 800cb0a:	a391      	add	r3, pc, #580	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb10:	f7fb ff1c 	bl	800894c <__aeabi_dcmplt>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1ee      	bne.n	800caf8 <goal_area_search+0x460>
			//直進
			Accelerate();
 800cb1a:	f7fe f835 	bl	800ab88 <Accelerate>
			Decelerate();
 800cb1e:	f7fe f8e3 	bl	800ace8 <Decelerate>
			y--;
 800cb22:	4b8f      	ldr	r3, [pc, #572]	; (800cd60 <goal_area_search+0x6c8>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	3b01      	subs	r3, #1
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	4b8d      	ldr	r3, [pc, #564]	; (800cd60 <goal_area_search+0x6c8>)
 800cb2c:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cb2e:	f7ff fa57 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb32:	2300      	movs	r3, #0
 800cb34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb38:	e004      	b.n	800cb44 <goal_area_search+0x4ac>
 800cb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb3e:	3301      	adds	r3, #1
 800cb40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb44:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800cb48:	f7fb fc24 	bl	8008394 <__aeabi_i2d>
 800cb4c:	a380      	add	r3, pc, #512	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7fb fefb 	bl	800894c <__aeabi_dcmplt>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1ee      	bne.n	800cb3a <goal_area_search+0x4a2>

			//右回り
			turn_right();
 800cb5c:	f7fe fae6 	bl	800b12c <turn_right>
			my_direction = west;
 800cb60:	4b7e      	ldr	r3, [pc, #504]	; (800cd5c <goal_area_search+0x6c4>)
 800cb62:	2203      	movs	r2, #3
 800cb64:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb66:	2300      	movs	r3, #0
 800cb68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cb6c:	e004      	b.n	800cb78 <goal_area_search+0x4e0>
 800cb6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cb72:	3301      	adds	r3, #1
 800cb74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cb78:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800cb7c:	f7fb fc0a 	bl	8008394 <__aeabi_i2d>
 800cb80:	a373      	add	r3, pc, #460	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	f7fb fee1 	bl	800894c <__aeabi_dcmplt>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1ee      	bne.n	800cb6e <goal_area_search+0x4d6>
			//直進
			Accelerate();
 800cb90:	f7fd fffa 	bl	800ab88 <Accelerate>
			Decelerate();
 800cb94:	f7fe f8a8 	bl	800ace8 <Decelerate>
			x--;
 800cb98:	4b6f      	ldr	r3, [pc, #444]	; (800cd58 <goal_area_search+0x6c0>)
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	4b6d      	ldr	r3, [pc, #436]	; (800cd58 <goal_area_search+0x6c0>)
 800cba2:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cba4:	f7ff fa1c 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cbae:	e004      	b.n	800cbba <goal_area_search+0x522>
 800cbb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cbba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800cbbe:	f7fb fbe9 	bl	8008394 <__aeabi_i2d>
 800cbc2:	a363      	add	r3, pc, #396	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	f7fb fec0 	bl	800894c <__aeabi_dcmplt>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1ee      	bne.n	800cbb0 <goal_area_search+0x518>

			//右回転
			turn_right();
 800cbd2:	f7fe faab 	bl	800b12c <turn_right>
			my_direction = north;
 800cbd6:	4b61      	ldr	r3, [pc, #388]	; (800cd5c <goal_area_search+0x6c4>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cbe2:	e004      	b.n	800cbee <goal_area_search+0x556>
 800cbe4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cbe8:	3301      	adds	r3, #1
 800cbea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cbee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800cbf2:	f7fb fbcf 	bl	8008394 <__aeabi_i2d>
 800cbf6:	a356      	add	r3, pc, #344	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfc:	f7fb fea6 	bl	800894c <__aeabi_dcmplt>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1ee      	bne.n	800cbe4 <goal_area_search+0x54c>
			//直進
			Accelerate();
 800cc06:	f7fd ffbf 	bl	800ab88 <Accelerate>
			Decelerate();
 800cc0a:	f7fe f86d 	bl	800ace8 <Decelerate>
			y++;
 800cc0e:	4b54      	ldr	r3, [pc, #336]	; (800cd60 <goal_area_search+0x6c8>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	3301      	adds	r3, #1
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	4b52      	ldr	r3, [pc, #328]	; (800cd60 <goal_area_search+0x6c8>)
 800cc18:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc20:	e004      	b.n	800cc2c <goal_area_search+0x594>
 800cc22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cc26:	3301      	adds	r3, #1
 800cc28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc2c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800cc30:	f7fb fbb0 	bl	8008394 <__aeabi_i2d>
 800cc34:	a346      	add	r3, pc, #280	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3a:	f7fb fe87 	bl	800894c <__aeabi_dcmplt>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d1ee      	bne.n	800cc22 <goal_area_search+0x58a>
			//左回転
			turn_left();
 800cc44:	f7fe fadc 	bl	800b200 <turn_left>
			my_direction = west;
 800cc48:	4b44      	ldr	r3, [pc, #272]	; (800cd5c <goal_area_search+0x6c4>)
 800cc4a:	2203      	movs	r2, #3
 800cc4c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc54:	e004      	b.n	800cc60 <goal_area_search+0x5c8>
 800cc56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc60:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800cc64:	f7fb fb96 	bl	8008394 <__aeabi_i2d>
 800cc68:	a339      	add	r3, pc, #228	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	f7fb fe6d 	bl	800894c <__aeabi_dcmplt>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1ee      	bne.n	800cc56 <goal_area_search+0x5be>
		}

		if(orbit == 'L'){
 800cc78:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cc7c:	2b4c      	cmp	r3, #76	; 0x4c
 800cc7e:	f040 8412 	bne.w	800d4a6 <goal_area_search+0xe0e>
			//左回り
			turn_left();
 800cc82:	f7fe fabd 	bl	800b200 <turn_left>
			my_direction = north;
 800cc86:	4b35      	ldr	r3, [pc, #212]	; (800cd5c <goal_area_search+0x6c4>)
 800cc88:	2200      	movs	r2, #0
 800cc8a:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc92:	e004      	b.n	800cc9e <goal_area_search+0x606>
 800cc94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc98:	3301      	adds	r3, #1
 800cc9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc9e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800cca2:	f7fb fb77 	bl	8008394 <__aeabi_i2d>
 800cca6:	a32a      	add	r3, pc, #168	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccac:	f7fb fe4e 	bl	800894c <__aeabi_dcmplt>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1ee      	bne.n	800cc94 <goal_area_search+0x5fc>
			//直進
			Accelerate();
 800ccb6:	f7fd ff67 	bl	800ab88 <Accelerate>
			Decelerate();
 800ccba:	f7fe f815 	bl	800ace8 <Decelerate>
			y++;
 800ccbe:	4b28      	ldr	r3, [pc, #160]	; (800cd60 <goal_area_search+0x6c8>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	4b26      	ldr	r3, [pc, #152]	; (800cd60 <goal_area_search+0x6c8>)
 800ccc8:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ccca:	f7ff f989 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ccd4:	e004      	b.n	800cce0 <goal_area_search+0x648>
 800ccd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccda:	3301      	adds	r3, #1
 800ccdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cce0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cce4:	f7fb fb56 	bl	8008394 <__aeabi_i2d>
 800cce8:	a319      	add	r3, pc, #100	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	f7fb fe2d 	bl	800894c <__aeabi_dcmplt>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1ee      	bne.n	800ccd6 <goal_area_search+0x63e>

			turn_left();
 800ccf8:	f7fe fa82 	bl	800b200 <turn_left>
			my_direction = west;
 800ccfc:	4b17      	ldr	r3, [pc, #92]	; (800cd5c <goal_area_search+0x6c4>)
 800ccfe:	2203      	movs	r2, #3
 800cd00:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cd02:	2300      	movs	r3, #0
 800cd04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cd08:	e004      	b.n	800cd14 <goal_area_search+0x67c>
 800cd0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd0e:	3301      	adds	r3, #1
 800cd10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cd14:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800cd18:	f7fb fb3c 	bl	8008394 <__aeabi_i2d>
 800cd1c:	a30c      	add	r3, pc, #48	; (adr r3, 800cd50 <goal_area_search+0x6b8>)
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	f7fb fe13 	bl	800894c <__aeabi_dcmplt>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1ee      	bne.n	800cd0a <goal_area_search+0x672>
			//直進
			Accelerate();
 800cd2c:	f7fd ff2c 	bl	800ab88 <Accelerate>
			Decelerate();
 800cd30:	f7fd ffda 	bl	800ace8 <Decelerate>
			x--;
 800cd34:	4b08      	ldr	r3, [pc, #32]	; (800cd58 <goal_area_search+0x6c0>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	4b06      	ldr	r3, [pc, #24]	; (800cd58 <goal_area_search+0x6c0>)
 800cd3e:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cd40:	f7ff f94e 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cd44:	2300      	movs	r3, #0
 800cd46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd4a:	e010      	b.n	800cd6e <goal_area_search+0x6d6>
 800cd4c:	f3af 8000 	nop.w
 800cd50:	00000000 	.word	0x00000000
 800cd54:	40cd4c00 	.word	0x40cd4c00
 800cd58:	2000030c 	.word	0x2000030c
 800cd5c:	2000449a 	.word	0x2000449a
 800cd60:	2000030d 	.word	0x2000030d
 800cd64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cd68:	3301      	adds	r3, #1
 800cd6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd6e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800cd72:	f7fb fb0f 	bl	8008394 <__aeabi_i2d>
 800cd76:	a3bc      	add	r3, pc, #752	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7fb fde6 	bl	800894c <__aeabi_dcmplt>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1ee      	bne.n	800cd64 <goal_area_search+0x6cc>

			//左回転
			turn_left();
 800cd86:	f7fe fa3b 	bl	800b200 <turn_left>
			my_direction = south;
 800cd8a:	4bb9      	ldr	r3, [pc, #740]	; (800d070 <goal_area_search+0x9d8>)
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cd90:	2300      	movs	r3, #0
 800cd92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd96:	e004      	b.n	800cda2 <goal_area_search+0x70a>
 800cd98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cda2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800cda6:	f7fb faf5 	bl	8008394 <__aeabi_i2d>
 800cdaa:	a3af      	add	r3, pc, #700	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	f7fb fdcc 	bl	800894c <__aeabi_dcmplt>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1ee      	bne.n	800cd98 <goal_area_search+0x700>
			//直進
			Accelerate();
 800cdba:	f7fd fee5 	bl	800ab88 <Accelerate>
			Decelerate();
 800cdbe:	f7fd ff93 	bl	800ace8 <Decelerate>
			y--;
 800cdc2:	4bac      	ldr	r3, [pc, #688]	; (800d074 <goal_area_search+0x9dc>)
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	4baa      	ldr	r3, [pc, #680]	; (800d074 <goal_area_search+0x9dc>)
 800cdcc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdd4:	e004      	b.n	800cde0 <goal_area_search+0x748>
 800cdd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdda:	3301      	adds	r3, #1
 800cddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cde0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cde4:	f7fb fad6 	bl	8008394 <__aeabi_i2d>
 800cde8:	a39f      	add	r3, pc, #636	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f7fb fdad 	bl	800894c <__aeabi_dcmplt>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1ee      	bne.n	800cdd6 <goal_area_search+0x73e>
			//右回転
			turn_right();
 800cdf8:	f7fe f998 	bl	800b12c <turn_right>
			my_direction = west;
 800cdfc:	4b9c      	ldr	r3, [pc, #624]	; (800d070 <goal_area_search+0x9d8>)
 800cdfe:	2203      	movs	r2, #3
 800ce00:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ce02:	2300      	movs	r3, #0
 800ce04:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ce06:	e002      	b.n	800ce0e <goal_area_search+0x776>
 800ce08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ce0e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ce10:	f7fb fac0 	bl	8008394 <__aeabi_i2d>
 800ce14:	a394      	add	r3, pc, #592	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	f7fb fd97 	bl	800894c <__aeabi_dcmplt>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1f1      	bne.n	800ce08 <goal_area_search+0x770>


		}
		break;
 800ce24:	e33f      	b.n	800d4a6 <goal_area_search+0xe0e>
	case south:
		//直進
		Accelerate();
 800ce26:	f7fd feaf 	bl	800ab88 <Accelerate>
		Decelerate();
 800ce2a:	f7fd ff5d 	bl	800ace8 <Decelerate>
		y--;
 800ce2e:	4b91      	ldr	r3, [pc, #580]	; (800d074 <goal_area_search+0x9dc>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	4b8f      	ldr	r3, [pc, #572]	; (800d074 <goal_area_search+0x9dc>)
 800ce38:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800ce3a:	f7ff f8d1 	bl	800bfe0 <wall_set>
		//�?つ
		for(int i=0;i < WAIT*0.5;i++);
 800ce3e:	2300      	movs	r3, #0
 800ce40:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce42:	e002      	b.n	800ce4a <goal_area_search+0x7b2>
 800ce44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce46:	3301      	adds	r3, #1
 800ce48:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce4a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ce4c:	f7fb faa2 	bl	8008394 <__aeabi_i2d>
 800ce50:	a385      	add	r3, pc, #532	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	f7fb fd79 	bl	800894c <__aeabi_dcmplt>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1f1      	bne.n	800ce44 <goal_area_search+0x7ac>

		//現在の座�? == ゴールの�?2マス
		if(x == X_GOAL_LESSER){
 800ce60:	4b85      	ldr	r3, [pc, #532]	; (800d078 <goal_area_search+0x9e0>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d103      	bne.n	800ce70 <goal_area_search+0x7d8>
			orbit = 'L';
 800ce68:	234c      	movs	r3, #76	; 0x4c
 800ce6a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800ce6e:	e006      	b.n	800ce7e <goal_area_search+0x7e6>
		}
		//xが大きい方なら�?�左回り
		else if(x == X_GOAL_LARGER){
 800ce70:	4b81      	ldr	r3, [pc, #516]	; (800d078 <goal_area_search+0x9e0>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d102      	bne.n	800ce7e <goal_area_search+0x7e6>
			orbit = 'R';
 800ce78:	2352      	movs	r3, #82	; 0x52
 800ce7a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800ce7e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800ce82:	2b52      	cmp	r3, #82	; 0x52
 800ce84:	f040 80ad 	bne.w	800cfe2 <goal_area_search+0x94a>
			//右回り
			turn_right();
 800ce88:	f7fe f950 	bl	800b12c <turn_right>
			my_direction = west;
 800ce8c:	4b78      	ldr	r3, [pc, #480]	; (800d070 <goal_area_search+0x9d8>)
 800ce8e:	2203      	movs	r2, #3
 800ce90:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce92:	2300      	movs	r3, #0
 800ce94:	677b      	str	r3, [r7, #116]	; 0x74
 800ce96:	e002      	b.n	800ce9e <goal_area_search+0x806>
 800ce98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	677b      	str	r3, [r7, #116]	; 0x74
 800ce9e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cea0:	f7fb fa78 	bl	8008394 <__aeabi_i2d>
 800cea4:	a370      	add	r3, pc, #448	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	f7fb fd4f 	bl	800894c <__aeabi_dcmplt>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1f1      	bne.n	800ce98 <goal_area_search+0x800>
			//直進
			Accelerate();
 800ceb4:	f7fd fe68 	bl	800ab88 <Accelerate>
			Decelerate();
 800ceb8:	f7fd ff16 	bl	800ace8 <Decelerate>
			x--;
 800cebc:	4b6e      	ldr	r3, [pc, #440]	; (800d078 <goal_area_search+0x9e0>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	4b6c      	ldr	r3, [pc, #432]	; (800d078 <goal_area_search+0x9e0>)
 800cec6:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cec8:	f7ff f88a 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cecc:	2300      	movs	r3, #0
 800cece:	673b      	str	r3, [r7, #112]	; 0x70
 800ced0:	e002      	b.n	800ced8 <goal_area_search+0x840>
 800ced2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ced4:	3301      	adds	r3, #1
 800ced6:	673b      	str	r3, [r7, #112]	; 0x70
 800ced8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ceda:	f7fb fa5b 	bl	8008394 <__aeabi_i2d>
 800cede:	a362      	add	r3, pc, #392	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7fb fd32 	bl	800894c <__aeabi_dcmplt>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1f1      	bne.n	800ced2 <goal_area_search+0x83a>

			//右回り
			turn_right();
 800ceee:	f7fe f91d 	bl	800b12c <turn_right>
			my_direction = north;
 800cef2:	4b5f      	ldr	r3, [pc, #380]	; (800d070 <goal_area_search+0x9d8>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cef8:	2300      	movs	r3, #0
 800cefa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cefc:	e002      	b.n	800cf04 <goal_area_search+0x86c>
 800cefe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf00:	3301      	adds	r3, #1
 800cf02:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf06:	f7fb fa45 	bl	8008394 <__aeabi_i2d>
 800cf0a:	a357      	add	r3, pc, #348	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf10:	f7fb fd1c 	bl	800894c <__aeabi_dcmplt>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1f1      	bne.n	800cefe <goal_area_search+0x866>
			//直進
			Accelerate();
 800cf1a:	f7fd fe35 	bl	800ab88 <Accelerate>
			Decelerate();
 800cf1e:	f7fd fee3 	bl	800ace8 <Decelerate>
			y++;
 800cf22:	4b54      	ldr	r3, [pc, #336]	; (800d074 <goal_area_search+0x9dc>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	3301      	adds	r3, #1
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	4b52      	ldr	r3, [pc, #328]	; (800d074 <goal_area_search+0x9dc>)
 800cf2c:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cf2e:	f7ff f857 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cf32:	2300      	movs	r3, #0
 800cf34:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf36:	e002      	b.n	800cf3e <goal_area_search+0x8a6>
 800cf38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf3e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cf40:	f7fb fa28 	bl	8008394 <__aeabi_i2d>
 800cf44:	a348      	add	r3, pc, #288	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4a:	f7fb fcff 	bl	800894c <__aeabi_dcmplt>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d1f1      	bne.n	800cf38 <goal_area_search+0x8a0>

			//右回転
			turn_right();
 800cf54:	f7fe f8ea 	bl	800b12c <turn_right>
			my_direction = east;
 800cf58:	4b45      	ldr	r3, [pc, #276]	; (800d070 <goal_area_search+0x9d8>)
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf5e:	2300      	movs	r3, #0
 800cf60:	667b      	str	r3, [r7, #100]	; 0x64
 800cf62:	e002      	b.n	800cf6a <goal_area_search+0x8d2>
 800cf64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf66:	3301      	adds	r3, #1
 800cf68:	667b      	str	r3, [r7, #100]	; 0x64
 800cf6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cf6c:	f7fb fa12 	bl	8008394 <__aeabi_i2d>
 800cf70:	a33d      	add	r3, pc, #244	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf76:	f7fb fce9 	bl	800894c <__aeabi_dcmplt>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1f1      	bne.n	800cf64 <goal_area_search+0x8cc>
			//直進
			Accelerate();
 800cf80:	f7fd fe02 	bl	800ab88 <Accelerate>
			Decelerate();
 800cf84:	f7fd feb0 	bl	800ace8 <Decelerate>
			x++;
 800cf88:	4b3b      	ldr	r3, [pc, #236]	; (800d078 <goal_area_search+0x9e0>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	4b39      	ldr	r3, [pc, #228]	; (800d078 <goal_area_search+0x9e0>)
 800cf92:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf94:	2300      	movs	r3, #0
 800cf96:	663b      	str	r3, [r7, #96]	; 0x60
 800cf98:	e002      	b.n	800cfa0 <goal_area_search+0x908>
 800cf9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	663b      	str	r3, [r7, #96]	; 0x60
 800cfa0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cfa2:	f7fb f9f7 	bl	8008394 <__aeabi_i2d>
 800cfa6:	a330      	add	r3, pc, #192	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfac:	f7fb fcce 	bl	800894c <__aeabi_dcmplt>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1f1      	bne.n	800cf9a <goal_area_search+0x902>
			//左回転
			turn_left();
 800cfb6:	f7fe f923 	bl	800b200 <turn_left>
			my_direction = north;
 800cfba:	4b2d      	ldr	r3, [pc, #180]	; (800d070 <goal_area_search+0x9d8>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfc4:	e002      	b.n	800cfcc <goal_area_search+0x934>
 800cfc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc8:	3301      	adds	r3, #1
 800cfca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfcc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cfce:	f7fb f9e1 	bl	8008394 <__aeabi_i2d>
 800cfd2:	a325      	add	r3, pc, #148	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800cfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd8:	f7fb fcb8 	bl	800894c <__aeabi_dcmplt>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1f1      	bne.n	800cfc6 <goal_area_search+0x92e>
		}

		if(orbit == 'L'){
 800cfe2:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cfe6:	2b4c      	cmp	r3, #76	; 0x4c
 800cfe8:	f040 825f 	bne.w	800d4aa <goal_area_search+0xe12>
			//左回り
			turn_left();
 800cfec:	f7fe f908 	bl	800b200 <turn_left>
			my_direction = east;
 800cff0:	4b1f      	ldr	r3, [pc, #124]	; (800d070 <goal_area_search+0x9d8>)
 800cff2:	2201      	movs	r2, #1
 800cff4:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cff6:	2300      	movs	r3, #0
 800cff8:	65bb      	str	r3, [r7, #88]	; 0x58
 800cffa:	e002      	b.n	800d002 <goal_area_search+0x96a>
 800cffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cffe:	3301      	adds	r3, #1
 800d000:	65bb      	str	r3, [r7, #88]	; 0x58
 800d002:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d004:	f7fb f9c6 	bl	8008394 <__aeabi_i2d>
 800d008:	a317      	add	r3, pc, #92	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	f7fb fc9d 	bl	800894c <__aeabi_dcmplt>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1f1      	bne.n	800cffc <goal_area_search+0x964>
			//直進
			Accelerate();
 800d018:	f7fd fdb6 	bl	800ab88 <Accelerate>
			Decelerate();
 800d01c:	f7fd fe64 	bl	800ace8 <Decelerate>
			x++;
 800d020:	4b15      	ldr	r3, [pc, #84]	; (800d078 <goal_area_search+0x9e0>)
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	3301      	adds	r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	4b13      	ldr	r3, [pc, #76]	; (800d078 <goal_area_search+0x9e0>)
 800d02a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d02c:	f7fe ffd8 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d030:	2300      	movs	r3, #0
 800d032:	657b      	str	r3, [r7, #84]	; 0x54
 800d034:	e002      	b.n	800d03c <goal_area_search+0x9a4>
 800d036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d038:	3301      	adds	r3, #1
 800d03a:	657b      	str	r3, [r7, #84]	; 0x54
 800d03c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d03e:	f7fb f9a9 	bl	8008394 <__aeabi_i2d>
 800d042:	a309      	add	r3, pc, #36	; (adr r3, 800d068 <goal_area_search+0x9d0>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	f7fb fc80 	bl	800894c <__aeabi_dcmplt>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1f1      	bne.n	800d036 <goal_area_search+0x99e>

			turn_left();
 800d052:	f7fe f8d5 	bl	800b200 <turn_left>
			my_direction = north;
 800d056:	4b06      	ldr	r3, [pc, #24]	; (800d070 <goal_area_search+0x9d8>)
 800d058:	2200      	movs	r2, #0
 800d05a:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d05c:	2300      	movs	r3, #0
 800d05e:	653b      	str	r3, [r7, #80]	; 0x50
 800d060:	e00f      	b.n	800d082 <goal_area_search+0x9ea>
 800d062:	bf00      	nop
 800d064:	f3af 8000 	nop.w
 800d068:	00000000 	.word	0x00000000
 800d06c:	40cd4c00 	.word	0x40cd4c00
 800d070:	2000449a 	.word	0x2000449a
 800d074:	2000030d 	.word	0x2000030d
 800d078:	2000030c 	.word	0x2000030c
 800d07c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d07e:	3301      	adds	r3, #1
 800d080:	653b      	str	r3, [r7, #80]	; 0x50
 800d082:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d084:	f7fb f986 	bl	8008394 <__aeabi_i2d>
 800d088:	a3bb      	add	r3, pc, #748	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08e:	f7fb fc5d 	bl	800894c <__aeabi_dcmplt>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1f1      	bne.n	800d07c <goal_area_search+0x9e4>
			//直進
			Accelerate();
 800d098:	f7fd fd76 	bl	800ab88 <Accelerate>
			Decelerate();
 800d09c:	f7fd fe24 	bl	800ace8 <Decelerate>
			y++;
 800d0a0:	4bb7      	ldr	r3, [pc, #732]	; (800d380 <goal_area_search+0xce8>)
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	4bb5      	ldr	r3, [pc, #724]	; (800d380 <goal_area_search+0xce8>)
 800d0aa:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d0ac:	f7fe ff98 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0b4:	e002      	b.n	800d0bc <goal_area_search+0xa24>
 800d0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d0be:	f7fb f969 	bl	8008394 <__aeabi_i2d>
 800d0c2:	a3ad      	add	r3, pc, #692	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	f7fb fc40 	bl	800894c <__aeabi_dcmplt>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1f1      	bne.n	800d0b6 <goal_area_search+0xa1e>

			//左回転
			turn_left();
 800d0d2:	f7fe f895 	bl	800b200 <turn_left>
			my_direction = west;
 800d0d6:	4bab      	ldr	r3, [pc, #684]	; (800d384 <goal_area_search+0xcec>)
 800d0d8:	2203      	movs	r2, #3
 800d0da:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d0dc:	2300      	movs	r3, #0
 800d0de:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0e0:	e002      	b.n	800d0e8 <goal_area_search+0xa50>
 800d0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d0ea:	f7fb f953 	bl	8008394 <__aeabi_i2d>
 800d0ee:	a3a2      	add	r3, pc, #648	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	f7fb fc2a 	bl	800894c <__aeabi_dcmplt>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1f1      	bne.n	800d0e2 <goal_area_search+0xa4a>
			//直進
			Accelerate();
 800d0fe:	f7fd fd43 	bl	800ab88 <Accelerate>
			Decelerate();
 800d102:	f7fd fdf1 	bl	800ace8 <Decelerate>
			x--;
 800d106:	4ba0      	ldr	r3, [pc, #640]	; (800d388 <goal_area_search+0xcf0>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	3b01      	subs	r3, #1
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	4b9e      	ldr	r3, [pc, #632]	; (800d388 <goal_area_search+0xcf0>)
 800d110:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d112:	2300      	movs	r3, #0
 800d114:	647b      	str	r3, [r7, #68]	; 0x44
 800d116:	e002      	b.n	800d11e <goal_area_search+0xa86>
 800d118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d11a:	3301      	adds	r3, #1
 800d11c:	647b      	str	r3, [r7, #68]	; 0x44
 800d11e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d120:	f7fb f938 	bl	8008394 <__aeabi_i2d>
 800d124:	a394      	add	r3, pc, #592	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	f7fb fc0f 	bl	800894c <__aeabi_dcmplt>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1f1      	bne.n	800d118 <goal_area_search+0xa80>
			//右回転
			turn_right();
 800d134:	f7fd fffa 	bl	800b12c <turn_right>
			my_direction = north;
 800d138:	4b92      	ldr	r3, [pc, #584]	; (800d384 <goal_area_search+0xcec>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d13e:	2300      	movs	r3, #0
 800d140:	643b      	str	r3, [r7, #64]	; 0x40
 800d142:	e002      	b.n	800d14a <goal_area_search+0xab2>
 800d144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d146:	3301      	adds	r3, #1
 800d148:	643b      	str	r3, [r7, #64]	; 0x40
 800d14a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d14c:	f7fb f922 	bl	8008394 <__aeabi_i2d>
 800d150:	a389      	add	r3, pc, #548	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	f7fb fbf9 	bl	800894c <__aeabi_dcmplt>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1f1      	bne.n	800d144 <goal_area_search+0xaac>
		}
		break;
 800d160:	e1a3      	b.n	800d4aa <goal_area_search+0xe12>
	case west:
		//直進
		Accelerate();
 800d162:	f7fd fd11 	bl	800ab88 <Accelerate>
		Decelerate();
 800d166:	f7fd fdbf 	bl	800ace8 <Decelerate>
		x--;
 800d16a:	4b87      	ldr	r3, [pc, #540]	; (800d388 <goal_area_search+0xcf0>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	3b01      	subs	r3, #1
 800d170:	b2da      	uxtb	r2, r3
 800d172:	4b85      	ldr	r3, [pc, #532]	; (800d388 <goal_area_search+0xcf0>)
 800d174:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800d176:	f7fe ff33 	bl	800bfe0 <wall_set>
		//�?つ
		for(int i=0;i < WAIT*0.5;i++);
 800d17a:	2300      	movs	r3, #0
 800d17c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d17e:	e002      	b.n	800d186 <goal_area_search+0xaee>
 800d180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d182:	3301      	adds	r3, #1
 800d184:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d186:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d188:	f7fb f904 	bl	8008394 <__aeabi_i2d>
 800d18c:	a37a      	add	r3, pc, #488	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d192:	f7fb fbdb 	bl	800894c <__aeabi_dcmplt>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1f1      	bne.n	800d180 <goal_area_search+0xae8>

		//現在の座�? == ゴールの右2マス
		if(y == Y_GOAL_LESSER){
 800d19c:	4b78      	ldr	r3, [pc, #480]	; (800d380 <goal_area_search+0xce8>)
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b03      	cmp	r3, #3
 800d1a2:	d103      	bne.n	800d1ac <goal_area_search+0xb14>
			orbit = 'R';
 800d1a4:	2352      	movs	r3, #82	; 0x52
 800d1a6:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800d1aa:	e006      	b.n	800d1ba <goal_area_search+0xb22>
		}
		//xが大きい方なら�?�左回り
		else if(y == Y_GOAL_LARGER){
 800d1ac:	4b74      	ldr	r3, [pc, #464]	; (800d380 <goal_area_search+0xce8>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	2b03      	cmp	r3, #3
 800d1b2:	d102      	bne.n	800d1ba <goal_area_search+0xb22>
			orbit = 'L';
 800d1b4:	234c      	movs	r3, #76	; 0x4c
 800d1b6:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800d1ba:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800d1be:	2b52      	cmp	r3, #82	; 0x52
 800d1c0:	f040 80ad 	bne.w	800d31e <goal_area_search+0xc86>
			//右回り
			turn_right();
 800d1c4:	f7fd ffb2 	bl	800b12c <turn_right>
			my_direction = north;
 800d1c8:	4b6e      	ldr	r3, [pc, #440]	; (800d384 <goal_area_search+0xcec>)
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1d2:	e002      	b.n	800d1da <goal_area_search+0xb42>
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1dc:	f7fb f8da 	bl	8008394 <__aeabi_i2d>
 800d1e0:	a365      	add	r3, pc, #404	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	f7fb fbb1 	bl	800894c <__aeabi_dcmplt>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1f1      	bne.n	800d1d4 <goal_area_search+0xb3c>
			//直進
			Accelerate();
 800d1f0:	f7fd fcca 	bl	800ab88 <Accelerate>
			Decelerate();
 800d1f4:	f7fd fd78 	bl	800ace8 <Decelerate>
			y++;
 800d1f8:	4b61      	ldr	r3, [pc, #388]	; (800d380 <goal_area_search+0xce8>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	4b5f      	ldr	r3, [pc, #380]	; (800d380 <goal_area_search+0xce8>)
 800d202:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d204:	f7fe feec 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d208:	2300      	movs	r3, #0
 800d20a:	637b      	str	r3, [r7, #52]	; 0x34
 800d20c:	e002      	b.n	800d214 <goal_area_search+0xb7c>
 800d20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d210:	3301      	adds	r3, #1
 800d212:	637b      	str	r3, [r7, #52]	; 0x34
 800d214:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d216:	f7fb f8bd 	bl	8008394 <__aeabi_i2d>
 800d21a:	a357      	add	r3, pc, #348	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	f7fb fb94 	bl	800894c <__aeabi_dcmplt>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1f1      	bne.n	800d20e <goal_area_search+0xb76>

			//右回り
			turn_right();
 800d22a:	f7fd ff7f 	bl	800b12c <turn_right>
			my_direction = east;
 800d22e:	4b55      	ldr	r3, [pc, #340]	; (800d384 <goal_area_search+0xcec>)
 800d230:	2201      	movs	r2, #1
 800d232:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d234:	2300      	movs	r3, #0
 800d236:	633b      	str	r3, [r7, #48]	; 0x30
 800d238:	e002      	b.n	800d240 <goal_area_search+0xba8>
 800d23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23c:	3301      	adds	r3, #1
 800d23e:	633b      	str	r3, [r7, #48]	; 0x30
 800d240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d242:	f7fb f8a7 	bl	8008394 <__aeabi_i2d>
 800d246:	a34c      	add	r3, pc, #304	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	f7fb fb7e 	bl	800894c <__aeabi_dcmplt>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1f1      	bne.n	800d23a <goal_area_search+0xba2>
			//直進
			Accelerate();
 800d256:	f7fd fc97 	bl	800ab88 <Accelerate>
			Decelerate();
 800d25a:	f7fd fd45 	bl	800ace8 <Decelerate>
			x++;
 800d25e:	4b4a      	ldr	r3, [pc, #296]	; (800d388 <goal_area_search+0xcf0>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	3301      	adds	r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	4b48      	ldr	r3, [pc, #288]	; (800d388 <goal_area_search+0xcf0>)
 800d268:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d26a:	f7fe feb9 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d26e:	2300      	movs	r3, #0
 800d270:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d272:	e002      	b.n	800d27a <goal_area_search+0xbe2>
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	3301      	adds	r3, #1
 800d278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d27c:	f7fb f88a 	bl	8008394 <__aeabi_i2d>
 800d280:	a33d      	add	r3, pc, #244	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	f7fb fb61 	bl	800894c <__aeabi_dcmplt>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1f1      	bne.n	800d274 <goal_area_search+0xbdc>

			//右回転
			turn_right();
 800d290:	f7fd ff4c 	bl	800b12c <turn_right>
			my_direction = south;
 800d294:	4b3b      	ldr	r3, [pc, #236]	; (800d384 <goal_area_search+0xcec>)
 800d296:	2202      	movs	r2, #2
 800d298:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d29a:	2300      	movs	r3, #0
 800d29c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d29e:	e002      	b.n	800d2a6 <goal_area_search+0xc0e>
 800d2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a8:	f7fb f874 	bl	8008394 <__aeabi_i2d>
 800d2ac:	a332      	add	r3, pc, #200	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b2:	f7fb fb4b 	bl	800894c <__aeabi_dcmplt>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1f1      	bne.n	800d2a0 <goal_area_search+0xc08>
			//直進
			Accelerate();
 800d2bc:	f7fd fc64 	bl	800ab88 <Accelerate>
			Decelerate();
 800d2c0:	f7fd fd12 	bl	800ace8 <Decelerate>
			y--;
 800d2c4:	4b2e      	ldr	r3, [pc, #184]	; (800d380 <goal_area_search+0xce8>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	4b2c      	ldr	r3, [pc, #176]	; (800d380 <goal_area_search+0xce8>)
 800d2ce:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d2d4:	e002      	b.n	800d2dc <goal_area_search+0xc44>
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	3301      	adds	r3, #1
 800d2da:	627b      	str	r3, [r7, #36]	; 0x24
 800d2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2de:	f7fb f859 	bl	8008394 <__aeabi_i2d>
 800d2e2:	a325      	add	r3, pc, #148	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e8:	f7fb fb30 	bl	800894c <__aeabi_dcmplt>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1f1      	bne.n	800d2d6 <goal_area_search+0xc3e>
			//左回転
			turn_left();
 800d2f2:	f7fd ff85 	bl	800b200 <turn_left>
			my_direction = east;
 800d2f6:	4b23      	ldr	r3, [pc, #140]	; (800d384 <goal_area_search+0xcec>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	623b      	str	r3, [r7, #32]
 800d300:	e002      	b.n	800d308 <goal_area_search+0xc70>
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	3301      	adds	r3, #1
 800d306:	623b      	str	r3, [r7, #32]
 800d308:	6a38      	ldr	r0, [r7, #32]
 800d30a:	f7fb f843 	bl	8008394 <__aeabi_i2d>
 800d30e:	a31a      	add	r3, pc, #104	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	f7fb fb1a 	bl	800894c <__aeabi_dcmplt>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1f1      	bne.n	800d302 <goal_area_search+0xc6a>
		}

		if(orbit == 'L'){
 800d31e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800d322:	2b4c      	cmp	r3, #76	; 0x4c
 800d324:	f040 80c3 	bne.w	800d4ae <goal_area_search+0xe16>
			//左回り
			turn_left();
 800d328:	f7fd ff6a 	bl	800b200 <turn_left>
			my_direction = south;
 800d32c:	4b15      	ldr	r3, [pc, #84]	; (800d384 <goal_area_search+0xcec>)
 800d32e:	2202      	movs	r2, #2
 800d330:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d332:	2300      	movs	r3, #0
 800d334:	61fb      	str	r3, [r7, #28]
 800d336:	e002      	b.n	800d33e <goal_area_search+0xca6>
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	3301      	adds	r3, #1
 800d33c:	61fb      	str	r3, [r7, #28]
 800d33e:	69f8      	ldr	r0, [r7, #28]
 800d340:	f7fb f828 	bl	8008394 <__aeabi_i2d>
 800d344:	a30c      	add	r3, pc, #48	; (adr r3, 800d378 <goal_area_search+0xce0>)
 800d346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34a:	f7fb faff 	bl	800894c <__aeabi_dcmplt>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1f1      	bne.n	800d338 <goal_area_search+0xca0>
			//直進
			Accelerate();
 800d354:	f7fd fc18 	bl	800ab88 <Accelerate>
			Decelerate();
 800d358:	f7fd fcc6 	bl	800ace8 <Decelerate>
			y--;
 800d35c:	4b08      	ldr	r3, [pc, #32]	; (800d380 <goal_area_search+0xce8>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	3b01      	subs	r3, #1
 800d362:	b2da      	uxtb	r2, r3
 800d364:	4b06      	ldr	r3, [pc, #24]	; (800d380 <goal_area_search+0xce8>)
 800d366:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d368:	f7fe fe3a 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d36c:	2300      	movs	r3, #0
 800d36e:	61bb      	str	r3, [r7, #24]
 800d370:	e00f      	b.n	800d392 <goal_area_search+0xcfa>
 800d372:	bf00      	nop
 800d374:	f3af 8000 	nop.w
 800d378:	00000000 	.word	0x00000000
 800d37c:	40cd4c00 	.word	0x40cd4c00
 800d380:	2000030d 	.word	0x2000030d
 800d384:	2000449a 	.word	0x2000449a
 800d388:	2000030c 	.word	0x2000030c
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	3301      	adds	r3, #1
 800d390:	61bb      	str	r3, [r7, #24]
 800d392:	69b8      	ldr	r0, [r7, #24]
 800d394:	f7fa fffe 	bl	8008394 <__aeabi_i2d>
 800d398:	a349      	add	r3, pc, #292	; (adr r3, 800d4c0 <goal_area_search+0xe28>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7fb fad5 	bl	800894c <__aeabi_dcmplt>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1f1      	bne.n	800d38c <goal_area_search+0xcf4>

			turn_left();
 800d3a8:	f7fd ff2a 	bl	800b200 <turn_left>
			my_direction = east;
 800d3ac:	4b46      	ldr	r3, [pc, #280]	; (800d4c8 <goal_area_search+0xe30>)
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	617b      	str	r3, [r7, #20]
 800d3b6:	e002      	b.n	800d3be <goal_area_search+0xd26>
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	6978      	ldr	r0, [r7, #20]
 800d3c0:	f7fa ffe8 	bl	8008394 <__aeabi_i2d>
 800d3c4:	a33e      	add	r3, pc, #248	; (adr r3, 800d4c0 <goal_area_search+0xe28>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7fb fabf 	bl	800894c <__aeabi_dcmplt>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1f1      	bne.n	800d3b8 <goal_area_search+0xd20>
			//直進
			Accelerate();
 800d3d4:	f7fd fbd8 	bl	800ab88 <Accelerate>
			Decelerate();
 800d3d8:	f7fd fc86 	bl	800ace8 <Decelerate>
			x++;
 800d3dc:	4b3b      	ldr	r3, [pc, #236]	; (800d4cc <goal_area_search+0xe34>)
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	4b39      	ldr	r3, [pc, #228]	; (800d4cc <goal_area_search+0xe34>)
 800d3e6:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d3e8:	f7fe fdfa 	bl	800bfe0 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	613b      	str	r3, [r7, #16]
 800d3f0:	e002      	b.n	800d3f8 <goal_area_search+0xd60>
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	613b      	str	r3, [r7, #16]
 800d3f8:	6938      	ldr	r0, [r7, #16]
 800d3fa:	f7fa ffcb 	bl	8008394 <__aeabi_i2d>
 800d3fe:	a330      	add	r3, pc, #192	; (adr r3, 800d4c0 <goal_area_search+0xe28>)
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	f7fb faa2 	bl	800894c <__aeabi_dcmplt>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1f1      	bne.n	800d3f2 <goal_area_search+0xd5a>

			//左回転
			turn_left();
 800d40e:	f7fd fef7 	bl	800b200 <turn_left>
			my_direction = north;
 800d412:	4b2d      	ldr	r3, [pc, #180]	; (800d4c8 <goal_area_search+0xe30>)
 800d414:	2200      	movs	r2, #0
 800d416:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d418:	2300      	movs	r3, #0
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	e002      	b.n	800d424 <goal_area_search+0xd8c>
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	3301      	adds	r3, #1
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f7fa ffb5 	bl	8008394 <__aeabi_i2d>
 800d42a:	a325      	add	r3, pc, #148	; (adr r3, 800d4c0 <goal_area_search+0xe28>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	f7fb fa8c 	bl	800894c <__aeabi_dcmplt>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1f1      	bne.n	800d41e <goal_area_search+0xd86>
			//直進
			Accelerate();
 800d43a:	f7fd fba5 	bl	800ab88 <Accelerate>
			Decelerate();
 800d43e:	f7fd fc53 	bl	800ace8 <Decelerate>
			y++;
 800d442:	4b23      	ldr	r3, [pc, #140]	; (800d4d0 <goal_area_search+0xe38>)
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	3301      	adds	r3, #1
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	4b21      	ldr	r3, [pc, #132]	; (800d4d0 <goal_area_search+0xe38>)
 800d44c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d44e:	2300      	movs	r3, #0
 800d450:	60bb      	str	r3, [r7, #8]
 800d452:	e002      	b.n	800d45a <goal_area_search+0xdc2>
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	3301      	adds	r3, #1
 800d458:	60bb      	str	r3, [r7, #8]
 800d45a:	68b8      	ldr	r0, [r7, #8]
 800d45c:	f7fa ff9a 	bl	8008394 <__aeabi_i2d>
 800d460:	a317      	add	r3, pc, #92	; (adr r3, 800d4c0 <goal_area_search+0xe28>)
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	f7fb fa71 	bl	800894c <__aeabi_dcmplt>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1f1      	bne.n	800d454 <goal_area_search+0xdbc>
			//右回転
			turn_right();
 800d470:	f7fd fe5c 	bl	800b12c <turn_right>
			my_direction = east;
 800d474:	4b14      	ldr	r3, [pc, #80]	; (800d4c8 <goal_area_search+0xe30>)
 800d476:	2201      	movs	r2, #1
 800d478:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d47a:	2300      	movs	r3, #0
 800d47c:	607b      	str	r3, [r7, #4]
 800d47e:	e002      	b.n	800d486 <goal_area_search+0xdee>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3301      	adds	r3, #1
 800d484:	607b      	str	r3, [r7, #4]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7fa ff84 	bl	8008394 <__aeabi_i2d>
 800d48c:	a30c      	add	r3, pc, #48	; (adr r3, 800d4c0 <goal_area_search+0xe28>)
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	f7fb fa5b 	bl	800894c <__aeabi_dcmplt>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1f1      	bne.n	800d480 <goal_area_search+0xde8>
		}
		break;
 800d49c:	e007      	b.n	800d4ae <goal_area_search+0xe16>
	default :
		break;
 800d49e:	bf00      	nop
 800d4a0:	e006      	b.n	800d4b0 <goal_area_search+0xe18>
		break;
 800d4a2:	bf00      	nop
 800d4a4:	e004      	b.n	800d4b0 <goal_area_search+0xe18>
		break;
 800d4a6:	bf00      	nop
 800d4a8:	e002      	b.n	800d4b0 <goal_area_search+0xe18>
		break;
 800d4aa:	bf00      	nop
 800d4ac:	e000      	b.n	800d4b0 <goal_area_search+0xe18>
		break;
 800d4ae:	bf00      	nop
	}

	//マップ更新
	Walk_Map_Update();
 800d4b0:	f7fe fbf8 	bl	800bca4 <Walk_Map_Update>



	//向きが反転して、xもしく�?�yが変わ�?

}
 800d4b4:	bf00      	nop
 800d4b6:	37f8      	adds	r7, #248	; 0xf8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	f3af 8000 	nop.w
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	40cd4c00 	.word	0x40cd4c00
 800d4c8:	2000449a 	.word	0x2000449a
 800d4cc:	2000030c 	.word	0x2000030c
 800d4d0:	2000030d 	.word	0x2000030d
 800d4d4:	00000000 	.word	0x00000000

0800d4d8 <Adachi_judge>:

//足立法探索
void Adachi_judge(){
 800d4d8:	b598      	push	{r3, r4, r7, lr}
 800d4da:	af00      	add	r7, sp, #0

	/*------旋回モード選�?-----*/
	mode.turn = 0;
 800d4dc:	4b9a      	ldr	r3, [pc, #616]	; (800d748 <Adachi_judge+0x270>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�??��評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800d4e2:	4b9a      	ldr	r3, [pc, #616]	; (800d74c <Adachi_judge+0x274>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	f200 83ac 	bhi.w	800dc44 <Adachi_judge+0x76c>
 800d4ec:	a201      	add	r2, pc, #4	; (adr r2, 800d4f4 <Adachi_judge+0x1c>)
 800d4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f2:	bf00      	nop
 800d4f4:	0800d505 	.word	0x0800d505
 800d4f8:	0800d6c5 	.word	0x0800d6c5
 800d4fc:	0800d8a5 	.word	0x0800d8a5
 800d500:	0800da85 	.word	0x0800da85
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d504:	4b92      	ldr	r3, [pc, #584]	; (800d750 <Adachi_judge+0x278>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	4619      	mov	r1, r3
 800d50a:	4b92      	ldr	r3, [pc, #584]	; (800d754 <Adachi_judge+0x27c>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	4618      	mov	r0, r3
 800d510:	4a91      	ldr	r2, [pc, #580]	; (800d758 <Adachi_judge+0x280>)
 800d512:	460b      	mov	r3, r1
 800d514:	00db      	lsls	r3, r3, #3
 800d516:	440b      	add	r3, r1
 800d518:	4403      	add	r3, r0
 800d51a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d51e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d522:	b2db      	uxtb	r3, r3
 800d524:	2b00      	cmp	r3, #0
 800d526:	d12b      	bne.n	800d580 <Adachi_judge+0xa8>
 800d528:	4b89      	ldr	r3, [pc, #548]	; (800d750 <Adachi_judge+0x278>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	4618      	mov	r0, r3
 800d52e:	4b89      	ldr	r3, [pc, #548]	; (800d754 <Adachi_judge+0x27c>)
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	4989      	ldr	r1, [pc, #548]	; (800d75c <Adachi_judge+0x284>)
 800d536:	4603      	mov	r3, r0
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	4403      	add	r3, r0
 800d53c:	440b      	add	r3, r1
 800d53e:	4413      	add	r3, r2
 800d540:	781a      	ldrb	r2, [r3, #0]
 800d542:	4b83      	ldr	r3, [pc, #524]	; (800d750 <Adachi_judge+0x278>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	4618      	mov	r0, r3
 800d548:	4b82      	ldr	r3, [pc, #520]	; (800d754 <Adachi_judge+0x27c>)
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	461c      	mov	r4, r3
 800d54e:	4983      	ldr	r1, [pc, #524]	; (800d75c <Adachi_judge+0x284>)
 800d550:	4603      	mov	r3, r0
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	4403      	add	r3, r0
 800d556:	440b      	add	r3, r1
 800d558:	4423      	add	r3, r4
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d20f      	bcs.n	800d580 <Adachi_judge+0xa8>
 800d560:	4b7c      	ldr	r3, [pc, #496]	; (800d754 <Adachi_judge+0x27c>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2b07      	cmp	r3, #7
 800d566:	d80b      	bhi.n	800d580 <Adachi_judge+0xa8>
			  //前北
			  straight();
 800d568:	f7fd fc76 	bl	800ae58 <straight>
			  my_direction = north;
 800d56c:	4b77      	ldr	r3, [pc, #476]	; (800d74c <Adachi_judge+0x274>)
 800d56e:	2200      	movs	r2, #0
 800d570:	701a      	strb	r2, [r3, #0]
			  y++;
 800d572:	4b78      	ldr	r3, [pc, #480]	; (800d754 <Adachi_judge+0x27c>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	3301      	adds	r3, #1
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	4b76      	ldr	r3, [pc, #472]	; (800d754 <Adachi_judge+0x27c>)
 800d57c:	701a      	strb	r2, [r3, #0]
 800d57e:	e0a0      	b.n	800d6c2 <Adachi_judge+0x1ea>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d580:	4b73      	ldr	r3, [pc, #460]	; (800d750 <Adachi_judge+0x278>)
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	4619      	mov	r1, r3
 800d586:	4b73      	ldr	r3, [pc, #460]	; (800d754 <Adachi_judge+0x27c>)
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	4618      	mov	r0, r3
 800d58c:	4a72      	ldr	r2, [pc, #456]	; (800d758 <Adachi_judge+0x280>)
 800d58e:	460b      	mov	r3, r1
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	440b      	add	r3, r1
 800d594:	4403      	add	r3, r0
 800d596:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d59a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d12b      	bne.n	800d5fc <Adachi_judge+0x124>
 800d5a4:	4b6a      	ldr	r3, [pc, #424]	; (800d750 <Adachi_judge+0x278>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	1e5a      	subs	r2, r3, #1
 800d5aa:	4b6a      	ldr	r3, [pc, #424]	; (800d754 <Adachi_judge+0x27c>)
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	496a      	ldr	r1, [pc, #424]	; (800d75c <Adachi_judge+0x284>)
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	00db      	lsls	r3, r3, #3
 800d5b6:	4413      	add	r3, r2
 800d5b8:	440b      	add	r3, r1
 800d5ba:	4403      	add	r3, r0
 800d5bc:	781a      	ldrb	r2, [r3, #0]
 800d5be:	4b64      	ldr	r3, [pc, #400]	; (800d750 <Adachi_judge+0x278>)
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	4b63      	ldr	r3, [pc, #396]	; (800d754 <Adachi_judge+0x27c>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	461c      	mov	r4, r3
 800d5ca:	4964      	ldr	r1, [pc, #400]	; (800d75c <Adachi_judge+0x284>)
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	4403      	add	r3, r0
 800d5d2:	440b      	add	r3, r1
 800d5d4:	4423      	add	r3, r4
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d20f      	bcs.n	800d5fc <Adachi_judge+0x124>
 800d5dc:	4b5c      	ldr	r3, [pc, #368]	; (800d750 <Adachi_judge+0x278>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00b      	beq.n	800d5fc <Adachi_judge+0x124>
			  //左西
			  L_turn_select();
 800d5e4:	f7fe fa94 	bl	800bb10 <L_turn_select>
			  my_direction = west;
 800d5e8:	4b58      	ldr	r3, [pc, #352]	; (800d74c <Adachi_judge+0x274>)
 800d5ea:	2203      	movs	r2, #3
 800d5ec:	701a      	strb	r2, [r3, #0]
		      x--;
 800d5ee:	4b58      	ldr	r3, [pc, #352]	; (800d750 <Adachi_judge+0x278>)
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	4b56      	ldr	r3, [pc, #344]	; (800d750 <Adachi_judge+0x278>)
 800d5f8:	701a      	strb	r2, [r3, #0]
 800d5fa:	e062      	b.n	800d6c2 <Adachi_judge+0x1ea>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800d5fc:	4b54      	ldr	r3, [pc, #336]	; (800d750 <Adachi_judge+0x278>)
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	4619      	mov	r1, r3
 800d602:	4b54      	ldr	r3, [pc, #336]	; (800d754 <Adachi_judge+0x27c>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	4618      	mov	r0, r3
 800d608:	4a53      	ldr	r2, [pc, #332]	; (800d758 <Adachi_judge+0x280>)
 800d60a:	460b      	mov	r3, r1
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	440b      	add	r3, r1
 800d610:	4403      	add	r3, r0
 800d612:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d616:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d12b      	bne.n	800d678 <Adachi_judge+0x1a0>
 800d620:	4b4b      	ldr	r3, [pc, #300]	; (800d750 <Adachi_judge+0x278>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	4b4b      	ldr	r3, [pc, #300]	; (800d754 <Adachi_judge+0x27c>)
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	494b      	ldr	r1, [pc, #300]	; (800d75c <Adachi_judge+0x284>)
 800d62e:	4613      	mov	r3, r2
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	4413      	add	r3, r2
 800d634:	440b      	add	r3, r1
 800d636:	4403      	add	r3, r0
 800d638:	781a      	ldrb	r2, [r3, #0]
 800d63a:	4b45      	ldr	r3, [pc, #276]	; (800d750 <Adachi_judge+0x278>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	4618      	mov	r0, r3
 800d640:	4b44      	ldr	r3, [pc, #272]	; (800d754 <Adachi_judge+0x27c>)
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	461c      	mov	r4, r3
 800d646:	4945      	ldr	r1, [pc, #276]	; (800d75c <Adachi_judge+0x284>)
 800d648:	4603      	mov	r3, r0
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	4403      	add	r3, r0
 800d64e:	440b      	add	r3, r1
 800d650:	4423      	add	r3, r4
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	429a      	cmp	r2, r3
 800d656:	d20f      	bcs.n	800d678 <Adachi_judge+0x1a0>
 800d658:	4b3d      	ldr	r3, [pc, #244]	; (800d750 <Adachi_judge+0x278>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b07      	cmp	r3, #7
 800d65e:	d80b      	bhi.n	800d678 <Adachi_judge+0x1a0>
			  //右東
			  R_turn_select();
 800d660:	f7fe fa12 	bl	800ba88 <R_turn_select>
	          my_direction = east;
 800d664:	4b39      	ldr	r3, [pc, #228]	; (800d74c <Adachi_judge+0x274>)
 800d666:	2201      	movs	r2, #1
 800d668:	701a      	strb	r2, [r3, #0]
	          x++;
 800d66a:	4b39      	ldr	r3, [pc, #228]	; (800d750 <Adachi_judge+0x278>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	3301      	adds	r3, #1
 800d670:	b2da      	uxtb	r2, r3
 800d672:	4b37      	ldr	r3, [pc, #220]	; (800d750 <Adachi_judge+0x278>)
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	e024      	b.n	800d6c2 <Adachi_judge+0x1ea>
		  }
		  else {
			  //後南
	          Decelerate();
 800d678:	f7fd fb36 	bl	800ace8 <Decelerate>
	          wait(0.3);
 800d67c:	ed9f 0b30 	vldr	d0, [pc, #192]	; 800d740 <Adachi_judge+0x268>
 800d680:	f7fd fa02 	bl	800aa88 <wait>

	          if(mode.execution == 1)
 800d684:	4b30      	ldr	r3, [pc, #192]	; (800d748 <Adachi_judge+0x270>)
 800d686:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d101      	bne.n	800d692 <Adachi_judge+0x1ba>
	        	  Motor_PWM_Stop();
 800d68e:	f7fc fcb1 	bl	8009ff4 <Motor_PWM_Stop>

	  	      rotate180();
 800d692:	f7fe f917 	bl	800b8c4 <rotate180>
	  	      wait(0.3);;
 800d696:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 800d740 <Adachi_judge+0x268>
 800d69a:	f7fd f9f5 	bl	800aa88 <wait>
	  	      back_calib();
 800d69e:	f7fe f98b 	bl	800b9b8 <back_calib>
	  	      wait(0.3);
 800d6a2:	ed9f 0b27 	vldr	d0, [pc, #156]	; 800d740 <Adachi_judge+0x268>
 800d6a6:	f7fd f9ef 	bl	800aa88 <wait>
	       	  Start_Accel();
 800d6aa:	f7fd fa15 	bl	800aad8 <Start_Accel>
	       	  my_direction = south;
 800d6ae:	4b27      	ldr	r3, [pc, #156]	; (800d74c <Adachi_judge+0x274>)
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d6b4:	4b27      	ldr	r3, [pc, #156]	; (800d754 <Adachi_judge+0x27c>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	b2da      	uxtb	r2, r3
 800d6bc:	4b25      	ldr	r3, [pc, #148]	; (800d754 <Adachi_judge+0x27c>)
 800d6be:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d6c0:	e2c1      	b.n	800dc46 <Adachi_judge+0x76e>
 800d6c2:	e2c0      	b.n	800dc46 <Adachi_judge+0x76e>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d6c4:	4b22      	ldr	r3, [pc, #136]	; (800d750 <Adachi_judge+0x278>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	4b22      	ldr	r3, [pc, #136]	; (800d754 <Adachi_judge+0x27c>)
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	4a21      	ldr	r2, [pc, #132]	; (800d758 <Adachi_judge+0x280>)
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	00db      	lsls	r3, r3, #3
 800d6d6:	440b      	add	r3, r1
 800d6d8:	4403      	add	r3, r0
 800d6da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d6de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d13b      	bne.n	800d760 <Adachi_judge+0x288>
 800d6e8:	4b19      	ldr	r3, [pc, #100]	; (800d750 <Adachi_judge+0x278>)
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	1c5a      	adds	r2, r3, #1
 800d6ee:	4b19      	ldr	r3, [pc, #100]	; (800d754 <Adachi_judge+0x27c>)
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	4919      	ldr	r1, [pc, #100]	; (800d75c <Adachi_judge+0x284>)
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	4413      	add	r3, r2
 800d6fc:	440b      	add	r3, r1
 800d6fe:	4403      	add	r3, r0
 800d700:	781a      	ldrb	r2, [r3, #0]
 800d702:	4b13      	ldr	r3, [pc, #76]	; (800d750 <Adachi_judge+0x278>)
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	4618      	mov	r0, r3
 800d708:	4b12      	ldr	r3, [pc, #72]	; (800d754 <Adachi_judge+0x27c>)
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	461c      	mov	r4, r3
 800d70e:	4913      	ldr	r1, [pc, #76]	; (800d75c <Adachi_judge+0x284>)
 800d710:	4603      	mov	r3, r0
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	4403      	add	r3, r0
 800d716:	440b      	add	r3, r1
 800d718:	4423      	add	r3, r4
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d21f      	bcs.n	800d760 <Adachi_judge+0x288>
 800d720:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <Adachi_judge+0x278>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2b07      	cmp	r3, #7
 800d726:	d81b      	bhi.n	800d760 <Adachi_judge+0x288>
			  //前東
			  straight();
 800d728:	f7fd fb96 	bl	800ae58 <straight>
	       	  my_direction = east;
 800d72c:	4b07      	ldr	r3, [pc, #28]	; (800d74c <Adachi_judge+0x274>)
 800d72e:	2201      	movs	r2, #1
 800d730:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d732:	4b07      	ldr	r3, [pc, #28]	; (800d750 <Adachi_judge+0x278>)
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	3301      	adds	r3, #1
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	4b05      	ldr	r3, [pc, #20]	; (800d750 <Adachi_judge+0x278>)
 800d73c:	701a      	strb	r2, [r3, #0]
 800d73e:	e0b0      	b.n	800d8a2 <Adachi_judge+0x3ca>
 800d740:	33333333 	.word	0x33333333
 800d744:	3fd33333 	.word	0x3fd33333
 800d748:	20000074 	.word	0x20000074
 800d74c:	2000449a 	.word	0x2000449a
 800d750:	2000030c 	.word	0x2000030c
 800d754:	2000030d 	.word	0x2000030d
 800d758:	20004f0c 	.word	0x20004f0c
 800d75c:	20004a60 	.word	0x20004a60
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d760:	4baf      	ldr	r3, [pc, #700]	; (800da20 <Adachi_judge+0x548>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	4619      	mov	r1, r3
 800d766:	4baf      	ldr	r3, [pc, #700]	; (800da24 <Adachi_judge+0x54c>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	4618      	mov	r0, r3
 800d76c:	4aae      	ldr	r2, [pc, #696]	; (800da28 <Adachi_judge+0x550>)
 800d76e:	460b      	mov	r3, r1
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	440b      	add	r3, r1
 800d774:	4403      	add	r3, r0
 800d776:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d77a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b00      	cmp	r3, #0
 800d782:	d12b      	bne.n	800d7dc <Adachi_judge+0x304>
 800d784:	4ba6      	ldr	r3, [pc, #664]	; (800da20 <Adachi_judge+0x548>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	4618      	mov	r0, r3
 800d78a:	4ba6      	ldr	r3, [pc, #664]	; (800da24 <Adachi_judge+0x54c>)
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	1c5a      	adds	r2, r3, #1
 800d790:	49a6      	ldr	r1, [pc, #664]	; (800da2c <Adachi_judge+0x554>)
 800d792:	4603      	mov	r3, r0
 800d794:	00db      	lsls	r3, r3, #3
 800d796:	4403      	add	r3, r0
 800d798:	440b      	add	r3, r1
 800d79a:	4413      	add	r3, r2
 800d79c:	781a      	ldrb	r2, [r3, #0]
 800d79e:	4ba0      	ldr	r3, [pc, #640]	; (800da20 <Adachi_judge+0x548>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	4b9f      	ldr	r3, [pc, #636]	; (800da24 <Adachi_judge+0x54c>)
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	461c      	mov	r4, r3
 800d7aa:	49a0      	ldr	r1, [pc, #640]	; (800da2c <Adachi_judge+0x554>)
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	4403      	add	r3, r0
 800d7b2:	440b      	add	r3, r1
 800d7b4:	4423      	add	r3, r4
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d20f      	bcs.n	800d7dc <Adachi_judge+0x304>
 800d7bc:	4b99      	ldr	r3, [pc, #612]	; (800da24 <Adachi_judge+0x54c>)
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	2b07      	cmp	r3, #7
 800d7c2:	d80b      	bhi.n	800d7dc <Adachi_judge+0x304>
			  //左?��?
			  L_turn_select();
 800d7c4:	f7fe f9a4 	bl	800bb10 <L_turn_select>
	       	  my_direction = north;
 800d7c8:	4b99      	ldr	r3, [pc, #612]	; (800da30 <Adachi_judge+0x558>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d7ce:	4b95      	ldr	r3, [pc, #596]	; (800da24 <Adachi_judge+0x54c>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	4b93      	ldr	r3, [pc, #588]	; (800da24 <Adachi_judge+0x54c>)
 800d7d8:	701a      	strb	r2, [r3, #0]
 800d7da:	e062      	b.n	800d8a2 <Adachi_judge+0x3ca>
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d7dc:	4b90      	ldr	r3, [pc, #576]	; (800da20 <Adachi_judge+0x548>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	4b90      	ldr	r3, [pc, #576]	; (800da24 <Adachi_judge+0x54c>)
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	4a8f      	ldr	r2, [pc, #572]	; (800da28 <Adachi_judge+0x550>)
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	00db      	lsls	r3, r3, #3
 800d7ee:	440b      	add	r3, r1
 800d7f0:	4403      	add	r3, r0
 800d7f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d7f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d12b      	bne.n	800d858 <Adachi_judge+0x380>
 800d800:	4b87      	ldr	r3, [pc, #540]	; (800da20 <Adachi_judge+0x548>)
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	4618      	mov	r0, r3
 800d806:	4b87      	ldr	r3, [pc, #540]	; (800da24 <Adachi_judge+0x54c>)
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	1e5a      	subs	r2, r3, #1
 800d80c:	4987      	ldr	r1, [pc, #540]	; (800da2c <Adachi_judge+0x554>)
 800d80e:	4603      	mov	r3, r0
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	4403      	add	r3, r0
 800d814:	440b      	add	r3, r1
 800d816:	4413      	add	r3, r2
 800d818:	781a      	ldrb	r2, [r3, #0]
 800d81a:	4b81      	ldr	r3, [pc, #516]	; (800da20 <Adachi_judge+0x548>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	4618      	mov	r0, r3
 800d820:	4b80      	ldr	r3, [pc, #512]	; (800da24 <Adachi_judge+0x54c>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	461c      	mov	r4, r3
 800d826:	4981      	ldr	r1, [pc, #516]	; (800da2c <Adachi_judge+0x554>)
 800d828:	4603      	mov	r3, r0
 800d82a:	00db      	lsls	r3, r3, #3
 800d82c:	4403      	add	r3, r0
 800d82e:	440b      	add	r3, r1
 800d830:	4423      	add	r3, r4
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	429a      	cmp	r2, r3
 800d836:	d20f      	bcs.n	800d858 <Adachi_judge+0x380>
 800d838:	4b7a      	ldr	r3, [pc, #488]	; (800da24 <Adachi_judge+0x54c>)
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00b      	beq.n	800d858 <Adachi_judge+0x380>
			  //右?��?
			  R_turn_select();
 800d840:	f7fe f922 	bl	800ba88 <R_turn_select>
	       	  my_direction = south;
 800d844:	4b7a      	ldr	r3, [pc, #488]	; (800da30 <Adachi_judge+0x558>)
 800d846:	2202      	movs	r2, #2
 800d848:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d84a:	4b76      	ldr	r3, [pc, #472]	; (800da24 <Adachi_judge+0x54c>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	3b01      	subs	r3, #1
 800d850:	b2da      	uxtb	r2, r3
 800d852:	4b74      	ldr	r3, [pc, #464]	; (800da24 <Adachi_judge+0x54c>)
 800d854:	701a      	strb	r2, [r3, #0]
 800d856:	e024      	b.n	800d8a2 <Adachi_judge+0x3ca>
		  }
		  else {
			  //後西
	          Decelerate();
 800d858:	f7fd fa46 	bl	800ace8 <Decelerate>
	          wait(0.3);
 800d85c:	ed9f 0b6e 	vldr	d0, [pc, #440]	; 800da18 <Adachi_judge+0x540>
 800d860:	f7fd f912 	bl	800aa88 <wait>

	          if(mode.execution == 1)
 800d864:	4b73      	ldr	r3, [pc, #460]	; (800da34 <Adachi_judge+0x55c>)
 800d866:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d101      	bne.n	800d872 <Adachi_judge+0x39a>
	        	  Motor_PWM_Stop();
 800d86e:	f7fc fbc1 	bl	8009ff4 <Motor_PWM_Stop>

	  	      rotate180();
 800d872:	f7fe f827 	bl	800b8c4 <rotate180>
	  	      wait(0.3);
 800d876:	ed9f 0b68 	vldr	d0, [pc, #416]	; 800da18 <Adachi_judge+0x540>
 800d87a:	f7fd f905 	bl	800aa88 <wait>
	  	      back_calib();
 800d87e:	f7fe f89b 	bl	800b9b8 <back_calib>
	  	      wait(0.3);
 800d882:	ed9f 0b65 	vldr	d0, [pc, #404]	; 800da18 <Adachi_judge+0x540>
 800d886:	f7fd f8ff 	bl	800aa88 <wait>
	       	  Start_Accel();
 800d88a:	f7fd f925 	bl	800aad8 <Start_Accel>

	       	  my_direction = west;
 800d88e:	4b68      	ldr	r3, [pc, #416]	; (800da30 <Adachi_judge+0x558>)
 800d890:	2203      	movs	r2, #3
 800d892:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d894:	4b62      	ldr	r3, [pc, #392]	; (800da20 <Adachi_judge+0x548>)
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	3b01      	subs	r3, #1
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	4b60      	ldr	r3, [pc, #384]	; (800da20 <Adachi_judge+0x548>)
 800d89e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d8a0:	e1d1      	b.n	800dc46 <Adachi_judge+0x76e>
 800d8a2:	e1d0      	b.n	800dc46 <Adachi_judge+0x76e>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d8a4:	4b5e      	ldr	r3, [pc, #376]	; (800da20 <Adachi_judge+0x548>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4b5e      	ldr	r3, [pc, #376]	; (800da24 <Adachi_judge+0x54c>)
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	4a5d      	ldr	r2, [pc, #372]	; (800da28 <Adachi_judge+0x550>)
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	00db      	lsls	r3, r3, #3
 800d8b6:	440b      	add	r3, r1
 800d8b8:	4403      	add	r3, r0
 800d8ba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d8be:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d12b      	bne.n	800d920 <Adachi_judge+0x448>
 800d8c8:	4b55      	ldr	r3, [pc, #340]	; (800da20 <Adachi_judge+0x548>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	4b55      	ldr	r3, [pc, #340]	; (800da24 <Adachi_judge+0x54c>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	1e5a      	subs	r2, r3, #1
 800d8d4:	4955      	ldr	r1, [pc, #340]	; (800da2c <Adachi_judge+0x554>)
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	4403      	add	r3, r0
 800d8dc:	440b      	add	r3, r1
 800d8de:	4413      	add	r3, r2
 800d8e0:	781a      	ldrb	r2, [r3, #0]
 800d8e2:	4b4f      	ldr	r3, [pc, #316]	; (800da20 <Adachi_judge+0x548>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	4b4e      	ldr	r3, [pc, #312]	; (800da24 <Adachi_judge+0x54c>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	461c      	mov	r4, r3
 800d8ee:	494f      	ldr	r1, [pc, #316]	; (800da2c <Adachi_judge+0x554>)
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	00db      	lsls	r3, r3, #3
 800d8f4:	4403      	add	r3, r0
 800d8f6:	440b      	add	r3, r1
 800d8f8:	4423      	add	r3, r4
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d20f      	bcs.n	800d920 <Adachi_judge+0x448>
 800d900:	4b48      	ldr	r3, [pc, #288]	; (800da24 <Adachi_judge+0x54c>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00b      	beq.n	800d920 <Adachi_judge+0x448>
			  //前南
			  straight();
 800d908:	f7fd faa6 	bl	800ae58 <straight>
	       	  my_direction = south;
 800d90c:	4b48      	ldr	r3, [pc, #288]	; (800da30 <Adachi_judge+0x558>)
 800d90e:	2202      	movs	r2, #2
 800d910:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d912:	4b44      	ldr	r3, [pc, #272]	; (800da24 <Adachi_judge+0x54c>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	3b01      	subs	r3, #1
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	4b42      	ldr	r3, [pc, #264]	; (800da24 <Adachi_judge+0x54c>)
 800d91c:	701a      	strb	r2, [r3, #0]
 800d91e:	e0b0      	b.n	800da82 <Adachi_judge+0x5aa>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d920:	4b3f      	ldr	r3, [pc, #252]	; (800da20 <Adachi_judge+0x548>)
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	4619      	mov	r1, r3
 800d926:	4b3f      	ldr	r3, [pc, #252]	; (800da24 <Adachi_judge+0x54c>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	4618      	mov	r0, r3
 800d92c:	4a3e      	ldr	r2, [pc, #248]	; (800da28 <Adachi_judge+0x550>)
 800d92e:	460b      	mov	r3, r1
 800d930:	00db      	lsls	r3, r3, #3
 800d932:	440b      	add	r3, r1
 800d934:	4403      	add	r3, r0
 800d936:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d93a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d12b      	bne.n	800d99c <Adachi_judge+0x4c4>
 800d944:	4b36      	ldr	r3, [pc, #216]	; (800da20 <Adachi_judge+0x548>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	4b36      	ldr	r3, [pc, #216]	; (800da24 <Adachi_judge+0x54c>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	4618      	mov	r0, r3
 800d950:	4936      	ldr	r1, [pc, #216]	; (800da2c <Adachi_judge+0x554>)
 800d952:	4613      	mov	r3, r2
 800d954:	00db      	lsls	r3, r3, #3
 800d956:	4413      	add	r3, r2
 800d958:	440b      	add	r3, r1
 800d95a:	4403      	add	r3, r0
 800d95c:	781a      	ldrb	r2, [r3, #0]
 800d95e:	4b30      	ldr	r3, [pc, #192]	; (800da20 <Adachi_judge+0x548>)
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	4618      	mov	r0, r3
 800d964:	4b2f      	ldr	r3, [pc, #188]	; (800da24 <Adachi_judge+0x54c>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	461c      	mov	r4, r3
 800d96a:	4930      	ldr	r1, [pc, #192]	; (800da2c <Adachi_judge+0x554>)
 800d96c:	4603      	mov	r3, r0
 800d96e:	00db      	lsls	r3, r3, #3
 800d970:	4403      	add	r3, r0
 800d972:	440b      	add	r3, r1
 800d974:	4423      	add	r3, r4
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d20f      	bcs.n	800d99c <Adachi_judge+0x4c4>
 800d97c:	4b28      	ldr	r3, [pc, #160]	; (800da20 <Adachi_judge+0x548>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b07      	cmp	r3, #7
 800d982:	d80b      	bhi.n	800d99c <Adachi_judge+0x4c4>
			  //左東
			  L_turn_select();
 800d984:	f7fe f8c4 	bl	800bb10 <L_turn_select>
	       	  my_direction = east;
 800d988:	4b29      	ldr	r3, [pc, #164]	; (800da30 <Adachi_judge+0x558>)
 800d98a:	2201      	movs	r2, #1
 800d98c:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d98e:	4b24      	ldr	r3, [pc, #144]	; (800da20 <Adachi_judge+0x548>)
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	3301      	adds	r3, #1
 800d994:	b2da      	uxtb	r2, r3
 800d996:	4b22      	ldr	r3, [pc, #136]	; (800da20 <Adachi_judge+0x548>)
 800d998:	701a      	strb	r2, [r3, #0]
 800d99a:	e072      	b.n	800da82 <Adachi_judge+0x5aa>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d99c:	4b20      	ldr	r3, [pc, #128]	; (800da20 <Adachi_judge+0x548>)
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	4b20      	ldr	r3, [pc, #128]	; (800da24 <Adachi_judge+0x54c>)
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	4a1f      	ldr	r2, [pc, #124]	; (800da28 <Adachi_judge+0x550>)
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	440b      	add	r3, r1
 800d9b0:	4403      	add	r3, r0
 800d9b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d9b6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d13b      	bne.n	800da38 <Adachi_judge+0x560>
 800d9c0:	4b17      	ldr	r3, [pc, #92]	; (800da20 <Adachi_judge+0x548>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	1e5a      	subs	r2, r3, #1
 800d9c6:	4b17      	ldr	r3, [pc, #92]	; (800da24 <Adachi_judge+0x54c>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	4917      	ldr	r1, [pc, #92]	; (800da2c <Adachi_judge+0x554>)
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	00db      	lsls	r3, r3, #3
 800d9d2:	4413      	add	r3, r2
 800d9d4:	440b      	add	r3, r1
 800d9d6:	4403      	add	r3, r0
 800d9d8:	781a      	ldrb	r2, [r3, #0]
 800d9da:	4b11      	ldr	r3, [pc, #68]	; (800da20 <Adachi_judge+0x548>)
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	4b10      	ldr	r3, [pc, #64]	; (800da24 <Adachi_judge+0x54c>)
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	461c      	mov	r4, r3
 800d9e6:	4911      	ldr	r1, [pc, #68]	; (800da2c <Adachi_judge+0x554>)
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	4403      	add	r3, r0
 800d9ee:	440b      	add	r3, r1
 800d9f0:	4423      	add	r3, r4
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d21f      	bcs.n	800da38 <Adachi_judge+0x560>
 800d9f8:	4b09      	ldr	r3, [pc, #36]	; (800da20 <Adachi_judge+0x548>)
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d01b      	beq.n	800da38 <Adachi_judge+0x560>
			  //右西
			  R_turn_select();
 800da00:	f7fe f842 	bl	800ba88 <R_turn_select>
	       	  my_direction = west;
 800da04:	4b0a      	ldr	r3, [pc, #40]	; (800da30 <Adachi_judge+0x558>)
 800da06:	2203      	movs	r2, #3
 800da08:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800da0a:	4b05      	ldr	r3, [pc, #20]	; (800da20 <Adachi_judge+0x548>)
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	3b01      	subs	r3, #1
 800da10:	b2da      	uxtb	r2, r3
 800da12:	4b03      	ldr	r3, [pc, #12]	; (800da20 <Adachi_judge+0x548>)
 800da14:	701a      	strb	r2, [r3, #0]
 800da16:	e034      	b.n	800da82 <Adachi_judge+0x5aa>
 800da18:	33333333 	.word	0x33333333
 800da1c:	3fd33333 	.word	0x3fd33333
 800da20:	2000030c 	.word	0x2000030c
 800da24:	2000030d 	.word	0x2000030d
 800da28:	20004f0c 	.word	0x20004f0c
 800da2c:	20004a60 	.word	0x20004a60
 800da30:	2000449a 	.word	0x2000449a
 800da34:	20000074 	.word	0x20000074
		  }
		  else {
			  //後北
	          Decelerate();
 800da38:	f7fd f956 	bl	800ace8 <Decelerate>
	          wait(0.3);;
 800da3c:	ed9f 0b84 	vldr	d0, [pc, #528]	; 800dc50 <Adachi_judge+0x778>
 800da40:	f7fd f822 	bl	800aa88 <wait>

	          if(mode.execution == 1)
 800da44:	4b84      	ldr	r3, [pc, #528]	; (800dc58 <Adachi_judge+0x780>)
 800da46:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d101      	bne.n	800da52 <Adachi_judge+0x57a>
	        	  Motor_PWM_Stop();
 800da4e:	f7fc fad1 	bl	8009ff4 <Motor_PWM_Stop>

	  	      rotate180();
 800da52:	f7fd ff37 	bl	800b8c4 <rotate180>
	  	      wait(0.3);;
 800da56:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 800dc50 <Adachi_judge+0x778>
 800da5a:	f7fd f815 	bl	800aa88 <wait>
	  	      back_calib();
 800da5e:	f7fd ffab 	bl	800b9b8 <back_calib>
	  	      wait(0.3);
 800da62:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 800dc50 <Adachi_judge+0x778>
 800da66:	f7fd f80f 	bl	800aa88 <wait>
	       	  Start_Accel();
 800da6a:	f7fd f835 	bl	800aad8 <Start_Accel>

	       	  my_direction = north;
 800da6e:	4b7b      	ldr	r3, [pc, #492]	; (800dc5c <Adachi_judge+0x784>)
 800da70:	2200      	movs	r2, #0
 800da72:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800da74:	4b7a      	ldr	r3, [pc, #488]	; (800dc60 <Adachi_judge+0x788>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	3301      	adds	r3, #1
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	4b78      	ldr	r3, [pc, #480]	; (800dc60 <Adachi_judge+0x788>)
 800da7e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800da80:	e0e1      	b.n	800dc46 <Adachi_judge+0x76e>
 800da82:	e0e0      	b.n	800dc46 <Adachi_judge+0x76e>

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800da84:	4b77      	ldr	r3, [pc, #476]	; (800dc64 <Adachi_judge+0x78c>)
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	4619      	mov	r1, r3
 800da8a:	4b75      	ldr	r3, [pc, #468]	; (800dc60 <Adachi_judge+0x788>)
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	4618      	mov	r0, r3
 800da90:	4a75      	ldr	r2, [pc, #468]	; (800dc68 <Adachi_judge+0x790>)
 800da92:	460b      	mov	r3, r1
 800da94:	00db      	lsls	r3, r3, #3
 800da96:	440b      	add	r3, r1
 800da98:	4403      	add	r3, r0
 800da9a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800da9e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d12b      	bne.n	800db00 <Adachi_judge+0x628>
 800daa8:	4b6e      	ldr	r3, [pc, #440]	; (800dc64 <Adachi_judge+0x78c>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	1e5a      	subs	r2, r3, #1
 800daae:	4b6c      	ldr	r3, [pc, #432]	; (800dc60 <Adachi_judge+0x788>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	4618      	mov	r0, r3
 800dab4:	496d      	ldr	r1, [pc, #436]	; (800dc6c <Adachi_judge+0x794>)
 800dab6:	4613      	mov	r3, r2
 800dab8:	00db      	lsls	r3, r3, #3
 800daba:	4413      	add	r3, r2
 800dabc:	440b      	add	r3, r1
 800dabe:	4403      	add	r3, r0
 800dac0:	781a      	ldrb	r2, [r3, #0]
 800dac2:	4b68      	ldr	r3, [pc, #416]	; (800dc64 <Adachi_judge+0x78c>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	4618      	mov	r0, r3
 800dac8:	4b65      	ldr	r3, [pc, #404]	; (800dc60 <Adachi_judge+0x788>)
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	461c      	mov	r4, r3
 800dace:	4967      	ldr	r1, [pc, #412]	; (800dc6c <Adachi_judge+0x794>)
 800dad0:	4603      	mov	r3, r0
 800dad2:	00db      	lsls	r3, r3, #3
 800dad4:	4403      	add	r3, r0
 800dad6:	440b      	add	r3, r1
 800dad8:	4423      	add	r3, r4
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d20f      	bcs.n	800db00 <Adachi_judge+0x628>
 800dae0:	4b60      	ldr	r3, [pc, #384]	; (800dc64 <Adachi_judge+0x78c>)
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00b      	beq.n	800db00 <Adachi_judge+0x628>
			  //前西
			  straight();
 800dae8:	f7fd f9b6 	bl	800ae58 <straight>
	       	  my_direction = west;
 800daec:	4b5b      	ldr	r3, [pc, #364]	; (800dc5c <Adachi_judge+0x784>)
 800daee:	2203      	movs	r2, #3
 800daf0:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800daf2:	4b5c      	ldr	r3, [pc, #368]	; (800dc64 <Adachi_judge+0x78c>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	3b01      	subs	r3, #1
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	4b5a      	ldr	r3, [pc, #360]	; (800dc64 <Adachi_judge+0x78c>)
 800dafc:	701a      	strb	r2, [r3, #0]
 800dafe:	e0a0      	b.n	800dc42 <Adachi_judge+0x76a>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800db00:	4b58      	ldr	r3, [pc, #352]	; (800dc64 <Adachi_judge+0x78c>)
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	4619      	mov	r1, r3
 800db06:	4b56      	ldr	r3, [pc, #344]	; (800dc60 <Adachi_judge+0x788>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	4618      	mov	r0, r3
 800db0c:	4a56      	ldr	r2, [pc, #344]	; (800dc68 <Adachi_judge+0x790>)
 800db0e:	460b      	mov	r3, r1
 800db10:	00db      	lsls	r3, r3, #3
 800db12:	440b      	add	r3, r1
 800db14:	4403      	add	r3, r0
 800db16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800db1a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b00      	cmp	r3, #0
 800db22:	d12b      	bne.n	800db7c <Adachi_judge+0x6a4>
 800db24:	4b4f      	ldr	r3, [pc, #316]	; (800dc64 <Adachi_judge+0x78c>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	4618      	mov	r0, r3
 800db2a:	4b4d      	ldr	r3, [pc, #308]	; (800dc60 <Adachi_judge+0x788>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	1e5a      	subs	r2, r3, #1
 800db30:	494e      	ldr	r1, [pc, #312]	; (800dc6c <Adachi_judge+0x794>)
 800db32:	4603      	mov	r3, r0
 800db34:	00db      	lsls	r3, r3, #3
 800db36:	4403      	add	r3, r0
 800db38:	440b      	add	r3, r1
 800db3a:	4413      	add	r3, r2
 800db3c:	781a      	ldrb	r2, [r3, #0]
 800db3e:	4b49      	ldr	r3, [pc, #292]	; (800dc64 <Adachi_judge+0x78c>)
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	4618      	mov	r0, r3
 800db44:	4b46      	ldr	r3, [pc, #280]	; (800dc60 <Adachi_judge+0x788>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	461c      	mov	r4, r3
 800db4a:	4948      	ldr	r1, [pc, #288]	; (800dc6c <Adachi_judge+0x794>)
 800db4c:	4603      	mov	r3, r0
 800db4e:	00db      	lsls	r3, r3, #3
 800db50:	4403      	add	r3, r0
 800db52:	440b      	add	r3, r1
 800db54:	4423      	add	r3, r4
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d20f      	bcs.n	800db7c <Adachi_judge+0x6a4>
 800db5c:	4b40      	ldr	r3, [pc, #256]	; (800dc60 <Adachi_judge+0x788>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00b      	beq.n	800db7c <Adachi_judge+0x6a4>
			  //左?��?
			  L_turn_select();
 800db64:	f7fd ffd4 	bl	800bb10 <L_turn_select>
	       	  my_direction = south;
 800db68:	4b3c      	ldr	r3, [pc, #240]	; (800dc5c <Adachi_judge+0x784>)
 800db6a:	2202      	movs	r2, #2
 800db6c:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800db6e:	4b3c      	ldr	r3, [pc, #240]	; (800dc60 <Adachi_judge+0x788>)
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	3b01      	subs	r3, #1
 800db74:	b2da      	uxtb	r2, r3
 800db76:	4b3a      	ldr	r3, [pc, #232]	; (800dc60 <Adachi_judge+0x788>)
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	e062      	b.n	800dc42 <Adachi_judge+0x76a>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800db7c:	4b39      	ldr	r3, [pc, #228]	; (800dc64 <Adachi_judge+0x78c>)
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	4619      	mov	r1, r3
 800db82:	4b37      	ldr	r3, [pc, #220]	; (800dc60 <Adachi_judge+0x788>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	4618      	mov	r0, r3
 800db88:	4a37      	ldr	r2, [pc, #220]	; (800dc68 <Adachi_judge+0x790>)
 800db8a:	460b      	mov	r3, r1
 800db8c:	00db      	lsls	r3, r3, #3
 800db8e:	440b      	add	r3, r1
 800db90:	4403      	add	r3, r0
 800db92:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800db96:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d12b      	bne.n	800dbf8 <Adachi_judge+0x720>
 800dba0:	4b30      	ldr	r3, [pc, #192]	; (800dc64 <Adachi_judge+0x78c>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	4618      	mov	r0, r3
 800dba6:	4b2e      	ldr	r3, [pc, #184]	; (800dc60 <Adachi_judge+0x788>)
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	1c5a      	adds	r2, r3, #1
 800dbac:	492f      	ldr	r1, [pc, #188]	; (800dc6c <Adachi_judge+0x794>)
 800dbae:	4603      	mov	r3, r0
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	4403      	add	r3, r0
 800dbb4:	440b      	add	r3, r1
 800dbb6:	4413      	add	r3, r2
 800dbb8:	781a      	ldrb	r2, [r3, #0]
 800dbba:	4b2a      	ldr	r3, [pc, #168]	; (800dc64 <Adachi_judge+0x78c>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	4b27      	ldr	r3, [pc, #156]	; (800dc60 <Adachi_judge+0x788>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	461c      	mov	r4, r3
 800dbc6:	4929      	ldr	r1, [pc, #164]	; (800dc6c <Adachi_judge+0x794>)
 800dbc8:	4603      	mov	r3, r0
 800dbca:	00db      	lsls	r3, r3, #3
 800dbcc:	4403      	add	r3, r0
 800dbce:	440b      	add	r3, r1
 800dbd0:	4423      	add	r3, r4
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d20f      	bcs.n	800dbf8 <Adachi_judge+0x720>
 800dbd8:	4b21      	ldr	r3, [pc, #132]	; (800dc60 <Adachi_judge+0x788>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	2b07      	cmp	r3, #7
 800dbde:	d80b      	bhi.n	800dbf8 <Adachi_judge+0x720>
			  //右?��?
			  R_turn_select();
 800dbe0:	f7fd ff52 	bl	800ba88 <R_turn_select>
	       	  my_direction = north;
 800dbe4:	4b1d      	ldr	r3, [pc, #116]	; (800dc5c <Adachi_judge+0x784>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800dbea:	4b1d      	ldr	r3, [pc, #116]	; (800dc60 <Adachi_judge+0x788>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	4b1b      	ldr	r3, [pc, #108]	; (800dc60 <Adachi_judge+0x788>)
 800dbf4:	701a      	strb	r2, [r3, #0]
 800dbf6:	e024      	b.n	800dc42 <Adachi_judge+0x76a>
		  }
		  else {
			  //後東
	          Decelerate();
 800dbf8:	f7fd f876 	bl	800ace8 <Decelerate>
	          wait(0.3);;
 800dbfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800dc50 <Adachi_judge+0x778>
 800dc00:	f7fc ff42 	bl	800aa88 <wait>

	          if(mode.execution == 1)
 800dc04:	4b14      	ldr	r3, [pc, #80]	; (800dc58 <Adachi_judge+0x780>)
 800dc06:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d101      	bne.n	800dc12 <Adachi_judge+0x73a>
	        	  Motor_PWM_Stop();
 800dc0e:	f7fc f9f1 	bl	8009ff4 <Motor_PWM_Stop>

	  	      rotate180();
 800dc12:	f7fd fe57 	bl	800b8c4 <rotate180>
	  	      wait(0.3);;
 800dc16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dc50 <Adachi_judge+0x778>
 800dc1a:	f7fc ff35 	bl	800aa88 <wait>
	  	      back_calib();
 800dc1e:	f7fd fecb 	bl	800b9b8 <back_calib>
	  	      wait(0.3);
 800dc22:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800dc50 <Adachi_judge+0x778>
 800dc26:	f7fc ff2f 	bl	800aa88 <wait>
	       	  Start_Accel();
 800dc2a:	f7fc ff55 	bl	800aad8 <Start_Accel>

	       	  my_direction = east;
 800dc2e:	4b0b      	ldr	r3, [pc, #44]	; (800dc5c <Adachi_judge+0x784>)
 800dc30:	2201      	movs	r2, #1
 800dc32:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800dc34:	4b0b      	ldr	r3, [pc, #44]	; (800dc64 <Adachi_judge+0x78c>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	4b09      	ldr	r3, [pc, #36]	; (800dc64 <Adachi_judge+0x78c>)
 800dc3e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800dc40:	e001      	b.n	800dc46 <Adachi_judge+0x76e>
 800dc42:	e000      	b.n	800dc46 <Adachi_judge+0x76e>

	  default:
		  break;
 800dc44:	bf00      	nop
	  }//swtich end
}
 800dc46:	bf00      	nop
 800dc48:	bd98      	pop	{r3, r4, r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	f3af 8000 	nop.w
 800dc50:	33333333 	.word	0x33333333
 800dc54:	3fd33333 	.word	0x3fd33333
 800dc58:	20000074 	.word	0x20000074
 800dc5c:	2000449a 	.word	0x2000449a
 800dc60:	2000030d 	.word	0x2000030d
 800dc64:	2000030c 	.word	0x2000030c
 800dc68:	20004f0c 	.word	0x20004f0c
 800dc6c:	20004a60 	.word	0x20004a60

0800dc70 <Adachi_search>:

	  default:
		  break;
	  }//swtich end
}
void Adachi_search(){
 800dc70:	b580      	push	{r7, lr}
 800dc72:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	//マップ�??��初期?��?
	map_init();
 800dc74:	f7fb ff0e 	bl	8009a94 <map_init>
	//座標�??��初期?��?
	x = y = 0;
 800dc78:	4b64      	ldr	r3, [pc, #400]	; (800de0c <Adachi_search+0x19c>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	701a      	strb	r2, [r3, #0]
 800dc7e:	4b63      	ldr	r3, [pc, #396]	; (800de0c <Adachi_search+0x19c>)
 800dc80:	781a      	ldrb	r2, [r3, #0]
 800dc82:	4b63      	ldr	r3, [pc, #396]	; (800de10 <Adachi_search+0x1a0>)
 800dc84:	701a      	strb	r2, [r3, #0]
	//方向�??��初期?��?
	my_direction=north;
 800dc86:	4b63      	ldr	r3, [pc, #396]	; (800de14 <Adachi_search+0x1a4>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期?��?
	wall_set();
 800dc8c:	f7fe f9a8 	bl	800bfe0 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ?��??��?
	wall[x][y].south = WALL;
 800dc90:	4b5f      	ldr	r3, [pc, #380]	; (800de10 <Adachi_search+0x1a0>)
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	461a      	mov	r2, r3
 800dc96:	4b5d      	ldr	r3, [pc, #372]	; (800de0c <Adachi_search+0x19c>)
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	495e      	ldr	r1, [pc, #376]	; (800de18 <Adachi_search+0x1a8>)
 800dc9e:	4613      	mov	r3, r2
 800dca0:	00db      	lsls	r3, r3, #3
 800dca2:	4413      	add	r3, r2
 800dca4:	181a      	adds	r2, r3, r0
 800dca6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800dcaa:	2001      	movs	r0, #1
 800dcac:	f360 1305 	bfi	r3, r0, #4, #2
 800dcb0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�??��更新(ここでは初期?��?)
	Walk_Map_Update();
 800dcb4:	f7fd fff6 	bl	800bca4 <Walk_Map_Update>

	//?��?初�??��直進
	Start_Accel();
 800dcb8:	f7fc ff0e 	bl	800aad8 <Start_Accel>

	x = 0;
 800dcbc:	4b54      	ldr	r3, [pc, #336]	; (800de10 <Adachi_search+0x1a0>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800dcc2:	4b52      	ldr	r3, [pc, #328]	; (800de0c <Adachi_search+0x19c>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	b2da      	uxtb	r2, r3
 800dcca:	4b50      	ldr	r3, [pc, #320]	; (800de0c <Adachi_search+0x19c>)
 800dccc:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800dcce:	e005      	b.n	800dcdc <Adachi_search+0x6c>
		//壁更新
		wall_set();
 800dcd0:	f7fe f986 	bl	800bfe0 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800dcd4:	f7fd ffe6 	bl	800bca4 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800dcd8:	f7ff fbfe 	bl	800d4d8 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800dcdc:	4b4c      	ldr	r3, [pc, #304]	; (800de10 <Adachi_search+0x1a0>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d9f5      	bls.n	800dcd0 <Adachi_search+0x60>
 800dce4:	4b4a      	ldr	r3, [pc, #296]	; (800de10 <Adachi_search+0x1a0>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	2b03      	cmp	r3, #3
 800dcea:	d8f1      	bhi.n	800dcd0 <Adachi_search+0x60>
 800dcec:	4b47      	ldr	r3, [pc, #284]	; (800de0c <Adachi_search+0x19c>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	d9ed      	bls.n	800dcd0 <Adachi_search+0x60>
 800dcf4:	4b45      	ldr	r3, [pc, #276]	; (800de0c <Adachi_search+0x19c>)
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b03      	cmp	r3, #3
 800dcfa:	d8e9      	bhi.n	800dcd0 <Adachi_search+0x60>
	}

	//after-gall#2
	      Decelerate();
 800dcfc:	f7fc fff4 	bl	800ace8 <Decelerate>
	      wall_set();
 800dd00:	f7fe f96e 	bl	800bfe0 <wall_set>
	      Walk_Map_Update();
 800dd04:	f7fd ffce 	bl	800bca4 <Walk_Map_Update>
	      mode.LED = 7;
 800dd08:	4b44      	ldr	r3, [pc, #272]	; (800de1c <Adachi_search+0x1ac>)
 800dd0a:	2207      	movs	r2, #7
 800dd0c:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800dd0e:	f7fc fbe5 	bl	800a4dc <LED_Change>
	      HAL_Delay(1000);
 800dd12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dd16:	f003 fa3f 	bl	8011198 <HAL_Delay>

//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800dd1a:	4b40      	ldr	r3, [pc, #256]	; (800de1c <Adachi_search+0x1ac>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800dd20:	f7fc fbdc 	bl	800a4dc <LED_Change>
	      mapcopy();
 800dd24:	f7fb ff38 	bl	8009b98 <mapcopy>
	      Flash_store();
 800dd28:	f7fc f8c6 	bl	8009eb8 <Flash_store>

	      rotate180();
 800dd2c:	f7fd fdca 	bl	800b8c4 <rotate180>
	      back_calib();
 800dd30:	f7fd fe42 	bl	800b9b8 <back_calib>

	      switch(my_direction)
 800dd34:	4b37      	ldr	r3, [pc, #220]	; (800de14 <Adachi_search+0x1a4>)
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	2b03      	cmp	r3, #3
 800dd3a:	d81b      	bhi.n	800dd74 <Adachi_search+0x104>
 800dd3c:	a201      	add	r2, pc, #4	; (adr r2, 800dd44 <Adachi_search+0xd4>)
 800dd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd42:	bf00      	nop
 800dd44:	0800dd55 	.word	0x0800dd55
 800dd48:	0800dd5d 	.word	0x0800dd5d
 800dd4c:	0800dd65 	.word	0x0800dd65
 800dd50:	0800dd6d 	.word	0x0800dd6d
	      {
	      case north:
	    	  my_direction = south;
 800dd54:	4b2f      	ldr	r3, [pc, #188]	; (800de14 <Adachi_search+0x1a4>)
 800dd56:	2202      	movs	r2, #2
 800dd58:	701a      	strb	r2, [r3, #0]
	    	  break;
 800dd5a:	e00c      	b.n	800dd76 <Adachi_search+0x106>
	      case east:
	    	  my_direction = west;
 800dd5c:	4b2d      	ldr	r3, [pc, #180]	; (800de14 <Adachi_search+0x1a4>)
 800dd5e:	2203      	movs	r2, #3
 800dd60:	701a      	strb	r2, [r3, #0]
	    	  break;
 800dd62:	e008      	b.n	800dd76 <Adachi_search+0x106>
	      case south:
	    	  my_direction = north;
 800dd64:	4b2b      	ldr	r3, [pc, #172]	; (800de14 <Adachi_search+0x1a4>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	701a      	strb	r2, [r3, #0]
	    	  break;
 800dd6a:	e004      	b.n	800dd76 <Adachi_search+0x106>
	      case west:
	    	  my_direction = east;
 800dd6c:	4b29      	ldr	r3, [pc, #164]	; (800de14 <Adachi_search+0x1a4>)
 800dd6e:	2201      	movs	r2, #1
 800dd70:	701a      	strb	r2, [r3, #0]
	    	  break;
 800dd72:	e000      	b.n	800dd76 <Adachi_search+0x106>
	      default:
	    	  break;
 800dd74:	bf00      	nop
	      }
	      Start_Accel();
 800dd76:	f7fc feaf 	bl	800aad8 <Start_Accel>
	      switch(my_direction)
 800dd7a:	4b26      	ldr	r3, [pc, #152]	; (800de14 <Adachi_search+0x1a4>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	2b03      	cmp	r3, #3
 800dd80:	d826      	bhi.n	800ddd0 <Adachi_search+0x160>
 800dd82:	a201      	add	r2, pc, #4	; (adr r2, 800dd88 <Adachi_search+0x118>)
 800dd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd88:	0800dd99 	.word	0x0800dd99
 800dd8c:	0800dda7 	.word	0x0800dda7
 800dd90:	0800ddb5 	.word	0x0800ddb5
 800dd94:	0800ddc3 	.word	0x0800ddc3
	      {
	      case north:
	    	  y++;
 800dd98:	4b1c      	ldr	r3, [pc, #112]	; (800de0c <Adachi_search+0x19c>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	4b1a      	ldr	r3, [pc, #104]	; (800de0c <Adachi_search+0x19c>)
 800dda2:	701a      	strb	r2, [r3, #0]
	    	  break;
 800dda4:	e015      	b.n	800ddd2 <Adachi_search+0x162>
	      case east:
	    	 x++;
 800dda6:	4b1a      	ldr	r3, [pc, #104]	; (800de10 <Adachi_search+0x1a0>)
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	4b18      	ldr	r3, [pc, #96]	; (800de10 <Adachi_search+0x1a0>)
 800ddb0:	701a      	strb	r2, [r3, #0]
	    	  break;
 800ddb2:	e00e      	b.n	800ddd2 <Adachi_search+0x162>
	      case south:
	    	  y--;
 800ddb4:	4b15      	ldr	r3, [pc, #84]	; (800de0c <Adachi_search+0x19c>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	4b13      	ldr	r3, [pc, #76]	; (800de0c <Adachi_search+0x19c>)
 800ddbe:	701a      	strb	r2, [r3, #0]
	    	  break;
 800ddc0:	e007      	b.n	800ddd2 <Adachi_search+0x162>
	      case west:
	    	  x--;
 800ddc2:	4b13      	ldr	r3, [pc, #76]	; (800de10 <Adachi_search+0x1a0>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	4b11      	ldr	r3, [pc, #68]	; (800de10 <Adachi_search+0x1a0>)
 800ddcc:	701a      	strb	r2, [r3, #0]
	    	  break;
 800ddce:	e000      	b.n	800ddd2 <Adachi_search+0x162>
	      default:
	    	  break;
 800ddd0:	bf00      	nop
	      }


	      left_buck();
 800ddd2:	f7fe fc49 	bl	800c668 <left_buck>
	      Decelerate();
 800ddd6:	f7fc ff87 	bl	800ace8 <Decelerate>
	      wall_set();
 800ddda:	f7fe f901 	bl	800bfe0 <wall_set>
	      Walk_Map_Update();
 800ddde:	f7fd ff61 	bl	800bca4 <Walk_Map_Update>
	      mode.LED = 7;
 800dde2:	4b0e      	ldr	r3, [pc, #56]	; (800de1c <Adachi_search+0x1ac>)
 800dde4:	2207      	movs	r2, #7
 800dde6:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800dde8:	f7fc fb78 	bl	800a4dc <LED_Change>
	      HAL_Delay(1000);
 800ddec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ddf0:	f003 f9d2 	bl	8011198 <HAL_Delay>

//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800ddf4:	4b09      	ldr	r3, [pc, #36]	; (800de1c <Adachi_search+0x1ac>)
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800ddfa:	f7fc fb6f 	bl	800a4dc <LED_Change>
	      mapcopy();
 800ddfe:	f7fb fecb 	bl	8009b98 <mapcopy>
	      Flash_store();
 800de02:	f7fc f859 	bl	8009eb8 <Flash_store>
//	      Flash_store();
	      //mode.execution = 3;
	      while(1)
	      {

	    	  Motor_PWM_Stop();
 800de06:	f7fc f8f5 	bl	8009ff4 <Motor_PWM_Stop>
 800de0a:	e7fc      	b.n	800de06 <Adachi_search+0x196>
 800de0c:	2000030d 	.word	0x2000030d
 800de10:	2000030c 	.word	0x2000030c
 800de14:	2000449a 	.word	0x2000449a
 800de18:	20004f0c 	.word	0x20004f0c
 800de1c:	20000074 	.word	0x20000074

0800de20 <Map_Load>:
	      }
}
void Map_Load(){
 800de20:	b598      	push	{r3, r4, r7, lr}
 800de22:	af00      	add	r7, sp, #0
	//ROMの迷路?��?ータをRAMに入れる
	Flash_load();
 800de24:	f7fc f836 	bl	8009e94 <Flash_load>

	//work_ram[]の?��?ータをwall[][]とwalk_map[][]に入れる
	static int i = 0, j=0,k=0;

	//壁情報
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800de28:	4b57      	ldr	r3, [pc, #348]	; (800df88 <Map_Load+0x168>)
 800de2a:	2208      	movs	r2, #8
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	e075      	b.n	800df1c <Map_Load+0xfc>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800de30:	4b56      	ldr	r3, [pc, #344]	; (800df8c <Map_Load+0x16c>)
 800de32:	2200      	movs	r2, #0
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	e068      	b.n	800df0a <Map_Load+0xea>
			wall[i][j].north = work_ram[k];
 800de38:	4b55      	ldr	r3, [pc, #340]	; (800df90 <Map_Load+0x170>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a55      	ldr	r2, [pc, #340]	; (800df94 <Map_Load+0x174>)
 800de3e:	5cd1      	ldrb	r1, [r2, r3]
 800de40:	4b52      	ldr	r3, [pc, #328]	; (800df8c <Map_Load+0x16c>)
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	4b50      	ldr	r3, [pc, #320]	; (800df88 <Map_Load+0x168>)
 800de46:	681c      	ldr	r4, [r3, #0]
 800de48:	460b      	mov	r3, r1
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	b2d8      	uxtb	r0, r3
 800de50:	4951      	ldr	r1, [pc, #324]	; (800df98 <Map_Load+0x178>)
 800de52:	4613      	mov	r3, r2
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	4413      	add	r3, r2
 800de58:	191a      	adds	r2, r3, r4
 800de5a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800de5e:	f360 0301 	bfi	r3, r0, #0, #2
 800de62:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].east = work_ram[k+1];
 800de66:	4b4a      	ldr	r3, [pc, #296]	; (800df90 <Map_Load+0x170>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	3301      	adds	r3, #1
 800de6c:	4a49      	ldr	r2, [pc, #292]	; (800df94 <Map_Load+0x174>)
 800de6e:	5cd1      	ldrb	r1, [r2, r3]
 800de70:	4b46      	ldr	r3, [pc, #280]	; (800df8c <Map_Load+0x16c>)
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	4b44      	ldr	r3, [pc, #272]	; (800df88 <Map_Load+0x168>)
 800de76:	681c      	ldr	r4, [r3, #0]
 800de78:	460b      	mov	r3, r1
 800de7a:	f003 0303 	and.w	r3, r3, #3
 800de7e:	b2d8      	uxtb	r0, r3
 800de80:	4945      	ldr	r1, [pc, #276]	; (800df98 <Map_Load+0x178>)
 800de82:	4613      	mov	r3, r2
 800de84:	00db      	lsls	r3, r3, #3
 800de86:	4413      	add	r3, r2
 800de88:	191a      	adds	r2, r3, r4
 800de8a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800de8e:	f360 0383 	bfi	r3, r0, #2, #2
 800de92:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].south = work_ram[k+2];
 800de96:	4b3e      	ldr	r3, [pc, #248]	; (800df90 <Map_Load+0x170>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	3302      	adds	r3, #2
 800de9c:	4a3d      	ldr	r2, [pc, #244]	; (800df94 <Map_Load+0x174>)
 800de9e:	5cd1      	ldrb	r1, [r2, r3]
 800dea0:	4b3a      	ldr	r3, [pc, #232]	; (800df8c <Map_Load+0x16c>)
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	4b38      	ldr	r3, [pc, #224]	; (800df88 <Map_Load+0x168>)
 800dea6:	681c      	ldr	r4, [r3, #0]
 800dea8:	460b      	mov	r3, r1
 800deaa:	f003 0303 	and.w	r3, r3, #3
 800deae:	b2d8      	uxtb	r0, r3
 800deb0:	4939      	ldr	r1, [pc, #228]	; (800df98 <Map_Load+0x178>)
 800deb2:	4613      	mov	r3, r2
 800deb4:	00db      	lsls	r3, r3, #3
 800deb6:	4413      	add	r3, r2
 800deb8:	191a      	adds	r2, r3, r4
 800deba:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800debe:	f360 1305 	bfi	r3, r0, #4, #2
 800dec2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].west = work_ram[k+3];
 800dec6:	4b32      	ldr	r3, [pc, #200]	; (800df90 <Map_Load+0x170>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	3303      	adds	r3, #3
 800decc:	4a31      	ldr	r2, [pc, #196]	; (800df94 <Map_Load+0x174>)
 800dece:	5cd1      	ldrb	r1, [r2, r3]
 800ded0:	4b2e      	ldr	r3, [pc, #184]	; (800df8c <Map_Load+0x16c>)
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	4b2c      	ldr	r3, [pc, #176]	; (800df88 <Map_Load+0x168>)
 800ded6:	681c      	ldr	r4, [r3, #0]
 800ded8:	460b      	mov	r3, r1
 800deda:	f003 0303 	and.w	r3, r3, #3
 800dede:	b2d8      	uxtb	r0, r3
 800dee0:	492d      	ldr	r1, [pc, #180]	; (800df98 <Map_Load+0x178>)
 800dee2:	4613      	mov	r3, r2
 800dee4:	00db      	lsls	r3, r3, #3
 800dee6:	4413      	add	r3, r2
 800dee8:	191a      	adds	r2, r3, r4
 800deea:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800deee:	f360 1387 	bfi	r3, r0, #6, #2
 800def2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			k+=4;
 800def6:	4b26      	ldr	r3, [pc, #152]	; (800df90 <Map_Load+0x170>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	3304      	adds	r3, #4
 800defc:	4a24      	ldr	r2, [pc, #144]	; (800df90 <Map_Load+0x170>)
 800defe:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800df00:	4b22      	ldr	r3, [pc, #136]	; (800df8c <Map_Load+0x16c>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3301      	adds	r3, #1
 800df06:	4a21      	ldr	r2, [pc, #132]	; (800df8c <Map_Load+0x16c>)
 800df08:	6013      	str	r3, [r2, #0]
 800df0a:	4b20      	ldr	r3, [pc, #128]	; (800df8c <Map_Load+0x16c>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b08      	cmp	r3, #8
 800df10:	dd92      	ble.n	800de38 <Map_Load+0x18>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800df12:	4b1d      	ldr	r3, [pc, #116]	; (800df88 <Map_Load+0x168>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3b01      	subs	r3, #1
 800df18:	4a1b      	ldr	r2, [pc, #108]	; (800df88 <Map_Load+0x168>)
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	4b1a      	ldr	r3, [pc, #104]	; (800df88 <Map_Load+0x168>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	da85      	bge.n	800de30 <Map_Load+0x10>
		//kは60まで行ったあと?��?4*NOS*NOS になって値が�??��らず終わ?��?

	}

	//歩数マッ?��?
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800df24:	4b18      	ldr	r3, [pc, #96]	; (800df88 <Map_Load+0x168>)
 800df26:	2208      	movs	r2, #8
 800df28:	601a      	str	r2, [r3, #0]
 800df2a:	e026      	b.n	800df7a <Map_Load+0x15a>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800df2c:	4b17      	ldr	r3, [pc, #92]	; (800df8c <Map_Load+0x16c>)
 800df2e:	2200      	movs	r2, #0
 800df30:	601a      	str	r2, [r3, #0]
 800df32:	e019      	b.n	800df68 <Map_Load+0x148>
			walk_map[i][j] = work_ram[k];
 800df34:	4b16      	ldr	r3, [pc, #88]	; (800df90 <Map_Load+0x170>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a14      	ldr	r2, [pc, #80]	; (800df8c <Map_Load+0x16c>)
 800df3a:	6812      	ldr	r2, [r2, #0]
 800df3c:	4912      	ldr	r1, [pc, #72]	; (800df88 <Map_Load+0x168>)
 800df3e:	6809      	ldr	r1, [r1, #0]
 800df40:	4814      	ldr	r0, [pc, #80]	; (800df94 <Map_Load+0x174>)
 800df42:	5cc4      	ldrb	r4, [r0, r3]
 800df44:	4815      	ldr	r0, [pc, #84]	; (800df9c <Map_Load+0x17c>)
 800df46:	4613      	mov	r3, r2
 800df48:	00db      	lsls	r3, r3, #3
 800df4a:	4413      	add	r3, r2
 800df4c:	4403      	add	r3, r0
 800df4e:	440b      	add	r3, r1
 800df50:	4622      	mov	r2, r4
 800df52:	701a      	strb	r2, [r3, #0]
			k+=1;
 800df54:	4b0e      	ldr	r3, [pc, #56]	; (800df90 <Map_Load+0x170>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	3301      	adds	r3, #1
 800df5a:	4a0d      	ldr	r2, [pc, #52]	; (800df90 <Map_Load+0x170>)
 800df5c:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800df5e:	4b0b      	ldr	r3, [pc, #44]	; (800df8c <Map_Load+0x16c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	3301      	adds	r3, #1
 800df64:	4a09      	ldr	r2, [pc, #36]	; (800df8c <Map_Load+0x16c>)
 800df66:	6013      	str	r3, [r2, #0]
 800df68:	4b08      	ldr	r3, [pc, #32]	; (800df8c <Map_Load+0x16c>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b08      	cmp	r3, #8
 800df6e:	dde1      	ble.n	800df34 <Map_Load+0x114>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800df70:	4b05      	ldr	r3, [pc, #20]	; (800df88 <Map_Load+0x168>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	3b01      	subs	r3, #1
 800df76:	4a04      	ldr	r2, [pc, #16]	; (800df88 <Map_Load+0x168>)
 800df78:	6013      	str	r3, [r2, #0]
 800df7a:	4b03      	ldr	r3, [pc, #12]	; (800df88 <Map_Load+0x168>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	dad4      	bge.n	800df2c <Map_Load+0x10c>
		}
	}

}
 800df82:	bf00      	nop
 800df84:	bd98      	pop	{r3, r4, r7, pc}
 800df86:	bf00      	nop
 800df88:	2000435c 	.word	0x2000435c
 800df8c:	20004360 	.word	0x20004360
 800df90:	20004364 	.word	0x20004364
 800df94:	20000318 	.word	0x20000318
 800df98:	20004f0c 	.word	0x20004f0c
 800df9c:	20004a60 	.word	0x20004a60

0800dfa0 <Adachi_judge2>:
void Adachi_judge2(){
 800dfa0:	b598      	push	{r3, r4, r7, lr}
 800dfa2:	af00      	add	r7, sp, #0

	/*------旋回モード選�?-----*/
	mode.turn = 0;
 800dfa4:	4b98      	ldr	r3, [pc, #608]	; (800e208 <Adachi_judge2+0x268>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�??��評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800dfaa:	4b98      	ldr	r3, [pc, #608]	; (800e20c <Adachi_judge2+0x26c>)
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b03      	cmp	r3, #3
 800dfb0:	f200 8394 	bhi.w	800e6dc <Adachi_judge2+0x73c>
 800dfb4:	a201      	add	r2, pc, #4	; (adr r2, 800dfbc <Adachi_judge2+0x1c>)
 800dfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfba:	bf00      	nop
 800dfbc:	0800dfcd 	.word	0x0800dfcd
 800dfc0:	0800e17f 	.word	0x0800e17f
 800dfc4:	0800e357 	.word	0x0800e357
 800dfc8:	0800e52b 	.word	0x0800e52b
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800dfcc:	4b90      	ldr	r3, [pc, #576]	; (800e210 <Adachi_judge2+0x270>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	4b90      	ldr	r3, [pc, #576]	; (800e214 <Adachi_judge2+0x274>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	4a8f      	ldr	r2, [pc, #572]	; (800e218 <Adachi_judge2+0x278>)
 800dfda:	460b      	mov	r3, r1
 800dfdc:	00db      	lsls	r3, r3, #3
 800dfde:	440b      	add	r3, r1
 800dfe0:	4403      	add	r3, r0
 800dfe2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dfe6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d12b      	bne.n	800e048 <Adachi_judge2+0xa8>
 800dff0:	4b87      	ldr	r3, [pc, #540]	; (800e210 <Adachi_judge2+0x270>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	4b87      	ldr	r3, [pc, #540]	; (800e214 <Adachi_judge2+0x274>)
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	1c5a      	adds	r2, r3, #1
 800dffc:	4987      	ldr	r1, [pc, #540]	; (800e21c <Adachi_judge2+0x27c>)
 800dffe:	4603      	mov	r3, r0
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	4403      	add	r3, r0
 800e004:	440b      	add	r3, r1
 800e006:	4413      	add	r3, r2
 800e008:	781a      	ldrb	r2, [r3, #0]
 800e00a:	4b81      	ldr	r3, [pc, #516]	; (800e210 <Adachi_judge2+0x270>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	4618      	mov	r0, r3
 800e010:	4b80      	ldr	r3, [pc, #512]	; (800e214 <Adachi_judge2+0x274>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	461c      	mov	r4, r3
 800e016:	4981      	ldr	r1, [pc, #516]	; (800e21c <Adachi_judge2+0x27c>)
 800e018:	4603      	mov	r3, r0
 800e01a:	00db      	lsls	r3, r3, #3
 800e01c:	4403      	add	r3, r0
 800e01e:	440b      	add	r3, r1
 800e020:	4423      	add	r3, r4
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	429a      	cmp	r2, r3
 800e026:	d20f      	bcs.n	800e048 <Adachi_judge2+0xa8>
 800e028:	4b7a      	ldr	r3, [pc, #488]	; (800e214 <Adachi_judge2+0x274>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b07      	cmp	r3, #7
 800e02e:	d80b      	bhi.n	800e048 <Adachi_judge2+0xa8>
			  //前北
			  straight();
 800e030:	f7fc ff12 	bl	800ae58 <straight>
			  my_direction = north;
 800e034:	4b75      	ldr	r3, [pc, #468]	; (800e20c <Adachi_judge2+0x26c>)
 800e036:	2200      	movs	r2, #0
 800e038:	701a      	strb	r2, [r3, #0]
			  y++;
 800e03a:	4b76      	ldr	r3, [pc, #472]	; (800e214 <Adachi_judge2+0x274>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	3301      	adds	r3, #1
 800e040:	b2da      	uxtb	r2, r3
 800e042:	4b74      	ldr	r3, [pc, #464]	; (800e214 <Adachi_judge2+0x274>)
 800e044:	701a      	strb	r2, [r3, #0]
 800e046:	e099      	b.n	800e17c <Adachi_judge2+0x1dc>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e048:	4b71      	ldr	r3, [pc, #452]	; (800e210 <Adachi_judge2+0x270>)
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	4619      	mov	r1, r3
 800e04e:	4b71      	ldr	r3, [pc, #452]	; (800e214 <Adachi_judge2+0x274>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	4618      	mov	r0, r3
 800e054:	4a70      	ldr	r2, [pc, #448]	; (800e218 <Adachi_judge2+0x278>)
 800e056:	460b      	mov	r3, r1
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	440b      	add	r3, r1
 800e05c:	4403      	add	r3, r0
 800e05e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e062:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d12b      	bne.n	800e0c4 <Adachi_judge2+0x124>
 800e06c:	4b68      	ldr	r3, [pc, #416]	; (800e210 <Adachi_judge2+0x270>)
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	1e5a      	subs	r2, r3, #1
 800e072:	4b68      	ldr	r3, [pc, #416]	; (800e214 <Adachi_judge2+0x274>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	4618      	mov	r0, r3
 800e078:	4968      	ldr	r1, [pc, #416]	; (800e21c <Adachi_judge2+0x27c>)
 800e07a:	4613      	mov	r3, r2
 800e07c:	00db      	lsls	r3, r3, #3
 800e07e:	4413      	add	r3, r2
 800e080:	440b      	add	r3, r1
 800e082:	4403      	add	r3, r0
 800e084:	781a      	ldrb	r2, [r3, #0]
 800e086:	4b62      	ldr	r3, [pc, #392]	; (800e210 <Adachi_judge2+0x270>)
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	4618      	mov	r0, r3
 800e08c:	4b61      	ldr	r3, [pc, #388]	; (800e214 <Adachi_judge2+0x274>)
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	461c      	mov	r4, r3
 800e092:	4962      	ldr	r1, [pc, #392]	; (800e21c <Adachi_judge2+0x27c>)
 800e094:	4603      	mov	r3, r0
 800e096:	00db      	lsls	r3, r3, #3
 800e098:	4403      	add	r3, r0
 800e09a:	440b      	add	r3, r1
 800e09c:	4423      	add	r3, r4
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d20f      	bcs.n	800e0c4 <Adachi_judge2+0x124>
 800e0a4:	4b5a      	ldr	r3, [pc, #360]	; (800e210 <Adachi_judge2+0x270>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00b      	beq.n	800e0c4 <Adachi_judge2+0x124>
			  //左西
			  L_turn_select();
 800e0ac:	f7fd fd30 	bl	800bb10 <L_turn_select>
			  my_direction = west;
 800e0b0:	4b56      	ldr	r3, [pc, #344]	; (800e20c <Adachi_judge2+0x26c>)
 800e0b2:	2203      	movs	r2, #3
 800e0b4:	701a      	strb	r2, [r3, #0]
		      x--;
 800e0b6:	4b56      	ldr	r3, [pc, #344]	; (800e210 <Adachi_judge2+0x270>)
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	4b54      	ldr	r3, [pc, #336]	; (800e210 <Adachi_judge2+0x270>)
 800e0c0:	701a      	strb	r2, [r3, #0]
 800e0c2:	e05b      	b.n	800e17c <Adachi_judge2+0x1dc>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800e0c4:	4b52      	ldr	r3, [pc, #328]	; (800e210 <Adachi_judge2+0x270>)
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	4b52      	ldr	r3, [pc, #328]	; (800e214 <Adachi_judge2+0x274>)
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	4a51      	ldr	r2, [pc, #324]	; (800e218 <Adachi_judge2+0x278>)
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	00db      	lsls	r3, r3, #3
 800e0d6:	440b      	add	r3, r1
 800e0d8:	4403      	add	r3, r0
 800e0da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e0de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d12b      	bne.n	800e140 <Adachi_judge2+0x1a0>
 800e0e8:	4b49      	ldr	r3, [pc, #292]	; (800e210 <Adachi_judge2+0x270>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	1c5a      	adds	r2, r3, #1
 800e0ee:	4b49      	ldr	r3, [pc, #292]	; (800e214 <Adachi_judge2+0x274>)
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	4949      	ldr	r1, [pc, #292]	; (800e21c <Adachi_judge2+0x27c>)
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	4413      	add	r3, r2
 800e0fc:	440b      	add	r3, r1
 800e0fe:	4403      	add	r3, r0
 800e100:	781a      	ldrb	r2, [r3, #0]
 800e102:	4b43      	ldr	r3, [pc, #268]	; (800e210 <Adachi_judge2+0x270>)
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	4618      	mov	r0, r3
 800e108:	4b42      	ldr	r3, [pc, #264]	; (800e214 <Adachi_judge2+0x274>)
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	461c      	mov	r4, r3
 800e10e:	4943      	ldr	r1, [pc, #268]	; (800e21c <Adachi_judge2+0x27c>)
 800e110:	4603      	mov	r3, r0
 800e112:	00db      	lsls	r3, r3, #3
 800e114:	4403      	add	r3, r0
 800e116:	440b      	add	r3, r1
 800e118:	4423      	add	r3, r4
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d20f      	bcs.n	800e140 <Adachi_judge2+0x1a0>
 800e120:	4b3b      	ldr	r3, [pc, #236]	; (800e210 <Adachi_judge2+0x270>)
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	2b07      	cmp	r3, #7
 800e126:	d80b      	bhi.n	800e140 <Adachi_judge2+0x1a0>
			  //右東
			  R_turn_select();
 800e128:	f7fd fcae 	bl	800ba88 <R_turn_select>
	          my_direction = east;
 800e12c:	4b37      	ldr	r3, [pc, #220]	; (800e20c <Adachi_judge2+0x26c>)
 800e12e:	2201      	movs	r2, #1
 800e130:	701a      	strb	r2, [r3, #0]
	          x++;
 800e132:	4b37      	ldr	r3, [pc, #220]	; (800e210 <Adachi_judge2+0x270>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	3301      	adds	r3, #1
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	4b35      	ldr	r3, [pc, #212]	; (800e210 <Adachi_judge2+0x270>)
 800e13c:	701a      	strb	r2, [r3, #0]
 800e13e:	e01d      	b.n	800e17c <Adachi_judge2+0x1dc>
		  }
		  else {
			  //後南
	          Decelerate();
 800e140:	f7fc fdd2 	bl	800ace8 <Decelerate>
	          wait(0.3);
 800e144:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800e200 <Adachi_judge2+0x260>
 800e148:	f7fc fc9e 	bl	800aa88 <wait>

//	          if(mode.execution == 1)
//	        	  Motor_PWM_Stop();

	  	      rotate180();
 800e14c:	f7fd fbba 	bl	800b8c4 <rotate180>
	  	      wait(0.3);;
 800e150:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 800e200 <Adachi_judge2+0x260>
 800e154:	f7fc fc98 	bl	800aa88 <wait>
	  	      back_calib();
 800e158:	f7fd fc2e 	bl	800b9b8 <back_calib>
	  	      wait(0.3);
 800e15c:	ed9f 0b28 	vldr	d0, [pc, #160]	; 800e200 <Adachi_judge2+0x260>
 800e160:	f7fc fc92 	bl	800aa88 <wait>
	       	  Start_Accel();
 800e164:	f7fc fcb8 	bl	800aad8 <Start_Accel>
	       	  my_direction = south;
 800e168:	4b28      	ldr	r3, [pc, #160]	; (800e20c <Adachi_judge2+0x26c>)
 800e16a:	2202      	movs	r2, #2
 800e16c:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800e16e:	4b29      	ldr	r3, [pc, #164]	; (800e214 <Adachi_judge2+0x274>)
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	3b01      	subs	r3, #1
 800e174:	b2da      	uxtb	r2, r3
 800e176:	4b27      	ldr	r3, [pc, #156]	; (800e214 <Adachi_judge2+0x274>)
 800e178:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800e17a:	e2b0      	b.n	800e6de <Adachi_judge2+0x73e>
 800e17c:	e2af      	b.n	800e6de <Adachi_judge2+0x73e>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e17e:	4b24      	ldr	r3, [pc, #144]	; (800e210 <Adachi_judge2+0x270>)
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	4619      	mov	r1, r3
 800e184:	4b23      	ldr	r3, [pc, #140]	; (800e214 <Adachi_judge2+0x274>)
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	4618      	mov	r0, r3
 800e18a:	4a23      	ldr	r2, [pc, #140]	; (800e218 <Adachi_judge2+0x278>)
 800e18c:	460b      	mov	r3, r1
 800e18e:	00db      	lsls	r3, r3, #3
 800e190:	440b      	add	r3, r1
 800e192:	4403      	add	r3, r0
 800e194:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e198:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d13e      	bne.n	800e220 <Adachi_judge2+0x280>
 800e1a2:	4b1b      	ldr	r3, [pc, #108]	; (800e210 <Adachi_judge2+0x270>)
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	1c5a      	adds	r2, r3, #1
 800e1a8:	4b1a      	ldr	r3, [pc, #104]	; (800e214 <Adachi_judge2+0x274>)
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	491b      	ldr	r1, [pc, #108]	; (800e21c <Adachi_judge2+0x27c>)
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	00db      	lsls	r3, r3, #3
 800e1b4:	4413      	add	r3, r2
 800e1b6:	440b      	add	r3, r1
 800e1b8:	4403      	add	r3, r0
 800e1ba:	781a      	ldrb	r2, [r3, #0]
 800e1bc:	4b14      	ldr	r3, [pc, #80]	; (800e210 <Adachi_judge2+0x270>)
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	4b14      	ldr	r3, [pc, #80]	; (800e214 <Adachi_judge2+0x274>)
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	461c      	mov	r4, r3
 800e1c8:	4914      	ldr	r1, [pc, #80]	; (800e21c <Adachi_judge2+0x27c>)
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	00db      	lsls	r3, r3, #3
 800e1ce:	4403      	add	r3, r0
 800e1d0:	440b      	add	r3, r1
 800e1d2:	4423      	add	r3, r4
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d222      	bcs.n	800e220 <Adachi_judge2+0x280>
 800e1da:	4b0d      	ldr	r3, [pc, #52]	; (800e210 <Adachi_judge2+0x270>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	2b07      	cmp	r3, #7
 800e1e0:	d81e      	bhi.n	800e220 <Adachi_judge2+0x280>
			  //前東
			  straight();
 800e1e2:	f7fc fe39 	bl	800ae58 <straight>
	       	  my_direction = east;
 800e1e6:	4b09      	ldr	r3, [pc, #36]	; (800e20c <Adachi_judge2+0x26c>)
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800e1ec:	4b08      	ldr	r3, [pc, #32]	; (800e210 <Adachi_judge2+0x270>)
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	4b06      	ldr	r3, [pc, #24]	; (800e210 <Adachi_judge2+0x270>)
 800e1f6:	701a      	strb	r2, [r3, #0]
 800e1f8:	e0ac      	b.n	800e354 <Adachi_judge2+0x3b4>
 800e1fa:	bf00      	nop
 800e1fc:	f3af 8000 	nop.w
 800e200:	33333333 	.word	0x33333333
 800e204:	3fd33333 	.word	0x3fd33333
 800e208:	20000074 	.word	0x20000074
 800e20c:	2000449a 	.word	0x2000449a
 800e210:	2000030c 	.word	0x2000030c
 800e214:	2000030d 	.word	0x2000030d
 800e218:	20004f0c 	.word	0x20004f0c
 800e21c:	20004a60 	.word	0x20004a60
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e220:	4bad      	ldr	r3, [pc, #692]	; (800e4d8 <Adachi_judge2+0x538>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	4619      	mov	r1, r3
 800e226:	4bad      	ldr	r3, [pc, #692]	; (800e4dc <Adachi_judge2+0x53c>)
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	4618      	mov	r0, r3
 800e22c:	4aac      	ldr	r2, [pc, #688]	; (800e4e0 <Adachi_judge2+0x540>)
 800e22e:	460b      	mov	r3, r1
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	440b      	add	r3, r1
 800e234:	4403      	add	r3, r0
 800e236:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e23a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b00      	cmp	r3, #0
 800e242:	d12b      	bne.n	800e29c <Adachi_judge2+0x2fc>
 800e244:	4ba4      	ldr	r3, [pc, #656]	; (800e4d8 <Adachi_judge2+0x538>)
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	4618      	mov	r0, r3
 800e24a:	4ba4      	ldr	r3, [pc, #656]	; (800e4dc <Adachi_judge2+0x53c>)
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	1c5a      	adds	r2, r3, #1
 800e250:	49a4      	ldr	r1, [pc, #656]	; (800e4e4 <Adachi_judge2+0x544>)
 800e252:	4603      	mov	r3, r0
 800e254:	00db      	lsls	r3, r3, #3
 800e256:	4403      	add	r3, r0
 800e258:	440b      	add	r3, r1
 800e25a:	4413      	add	r3, r2
 800e25c:	781a      	ldrb	r2, [r3, #0]
 800e25e:	4b9e      	ldr	r3, [pc, #632]	; (800e4d8 <Adachi_judge2+0x538>)
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	4618      	mov	r0, r3
 800e264:	4b9d      	ldr	r3, [pc, #628]	; (800e4dc <Adachi_judge2+0x53c>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	461c      	mov	r4, r3
 800e26a:	499e      	ldr	r1, [pc, #632]	; (800e4e4 <Adachi_judge2+0x544>)
 800e26c:	4603      	mov	r3, r0
 800e26e:	00db      	lsls	r3, r3, #3
 800e270:	4403      	add	r3, r0
 800e272:	440b      	add	r3, r1
 800e274:	4423      	add	r3, r4
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d20f      	bcs.n	800e29c <Adachi_judge2+0x2fc>
 800e27c:	4b97      	ldr	r3, [pc, #604]	; (800e4dc <Adachi_judge2+0x53c>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	2b07      	cmp	r3, #7
 800e282:	d80b      	bhi.n	800e29c <Adachi_judge2+0x2fc>
			  //左?��?
			  L_turn_select();
 800e284:	f7fd fc44 	bl	800bb10 <L_turn_select>
	       	  my_direction = north;
 800e288:	4b97      	ldr	r3, [pc, #604]	; (800e4e8 <Adachi_judge2+0x548>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800e28e:	4b93      	ldr	r3, [pc, #588]	; (800e4dc <Adachi_judge2+0x53c>)
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	3301      	adds	r3, #1
 800e294:	b2da      	uxtb	r2, r3
 800e296:	4b91      	ldr	r3, [pc, #580]	; (800e4dc <Adachi_judge2+0x53c>)
 800e298:	701a      	strb	r2, [r3, #0]
 800e29a:	e05b      	b.n	800e354 <Adachi_judge2+0x3b4>
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e29c:	4b8e      	ldr	r3, [pc, #568]	; (800e4d8 <Adachi_judge2+0x538>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	4b8e      	ldr	r3, [pc, #568]	; (800e4dc <Adachi_judge2+0x53c>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	4a8d      	ldr	r2, [pc, #564]	; (800e4e0 <Adachi_judge2+0x540>)
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	00db      	lsls	r3, r3, #3
 800e2ae:	440b      	add	r3, r1
 800e2b0:	4403      	add	r3, r0
 800e2b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e2b6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d12b      	bne.n	800e318 <Adachi_judge2+0x378>
 800e2c0:	4b85      	ldr	r3, [pc, #532]	; (800e4d8 <Adachi_judge2+0x538>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	4b85      	ldr	r3, [pc, #532]	; (800e4dc <Adachi_judge2+0x53c>)
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	1e5a      	subs	r2, r3, #1
 800e2cc:	4985      	ldr	r1, [pc, #532]	; (800e4e4 <Adachi_judge2+0x544>)
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	00db      	lsls	r3, r3, #3
 800e2d2:	4403      	add	r3, r0
 800e2d4:	440b      	add	r3, r1
 800e2d6:	4413      	add	r3, r2
 800e2d8:	781a      	ldrb	r2, [r3, #0]
 800e2da:	4b7f      	ldr	r3, [pc, #508]	; (800e4d8 <Adachi_judge2+0x538>)
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	4b7e      	ldr	r3, [pc, #504]	; (800e4dc <Adachi_judge2+0x53c>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	461c      	mov	r4, r3
 800e2e6:	497f      	ldr	r1, [pc, #508]	; (800e4e4 <Adachi_judge2+0x544>)
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	4403      	add	r3, r0
 800e2ee:	440b      	add	r3, r1
 800e2f0:	4423      	add	r3, r4
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d20f      	bcs.n	800e318 <Adachi_judge2+0x378>
 800e2f8:	4b78      	ldr	r3, [pc, #480]	; (800e4dc <Adachi_judge2+0x53c>)
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00b      	beq.n	800e318 <Adachi_judge2+0x378>
			  //右?��?
			  R_turn_select();
 800e300:	f7fd fbc2 	bl	800ba88 <R_turn_select>
	       	  my_direction = south;
 800e304:	4b78      	ldr	r3, [pc, #480]	; (800e4e8 <Adachi_judge2+0x548>)
 800e306:	2202      	movs	r2, #2
 800e308:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800e30a:	4b74      	ldr	r3, [pc, #464]	; (800e4dc <Adachi_judge2+0x53c>)
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	3b01      	subs	r3, #1
 800e310:	b2da      	uxtb	r2, r3
 800e312:	4b72      	ldr	r3, [pc, #456]	; (800e4dc <Adachi_judge2+0x53c>)
 800e314:	701a      	strb	r2, [r3, #0]
 800e316:	e01d      	b.n	800e354 <Adachi_judge2+0x3b4>
		  }
		  else {
			  //後西
	          Decelerate();
 800e318:	f7fc fce6 	bl	800ace8 <Decelerate>
	          wait(0.3);
 800e31c:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 800e4d0 <Adachi_judge2+0x530>
 800e320:	f7fc fbb2 	bl	800aa88 <wait>

//	          if(mode.execution == 1)
//	        	  Motor_PWM_Stop();

	  	      rotate180();
 800e324:	f7fd face 	bl	800b8c4 <rotate180>
	  	      wait(0.3);
 800e328:	ed9f 0b69 	vldr	d0, [pc, #420]	; 800e4d0 <Adachi_judge2+0x530>
 800e32c:	f7fc fbac 	bl	800aa88 <wait>
	  	      back_calib();
 800e330:	f7fd fb42 	bl	800b9b8 <back_calib>
	  	      wait(0.3);
 800e334:	ed9f 0b66 	vldr	d0, [pc, #408]	; 800e4d0 <Adachi_judge2+0x530>
 800e338:	f7fc fba6 	bl	800aa88 <wait>
	       	  Start_Accel();
 800e33c:	f7fc fbcc 	bl	800aad8 <Start_Accel>

	       	  my_direction = west;
 800e340:	4b69      	ldr	r3, [pc, #420]	; (800e4e8 <Adachi_judge2+0x548>)
 800e342:	2203      	movs	r2, #3
 800e344:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800e346:	4b64      	ldr	r3, [pc, #400]	; (800e4d8 <Adachi_judge2+0x538>)
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	3b01      	subs	r3, #1
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	4b62      	ldr	r3, [pc, #392]	; (800e4d8 <Adachi_judge2+0x538>)
 800e350:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800e352:	e1c4      	b.n	800e6de <Adachi_judge2+0x73e>
 800e354:	e1c3      	b.n	800e6de <Adachi_judge2+0x73e>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e356:	4b60      	ldr	r3, [pc, #384]	; (800e4d8 <Adachi_judge2+0x538>)
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	4619      	mov	r1, r3
 800e35c:	4b5f      	ldr	r3, [pc, #380]	; (800e4dc <Adachi_judge2+0x53c>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	4618      	mov	r0, r3
 800e362:	4a5f      	ldr	r2, [pc, #380]	; (800e4e0 <Adachi_judge2+0x540>)
 800e364:	460b      	mov	r3, r1
 800e366:	00db      	lsls	r3, r3, #3
 800e368:	440b      	add	r3, r1
 800e36a:	4403      	add	r3, r0
 800e36c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e370:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d12b      	bne.n	800e3d2 <Adachi_judge2+0x432>
 800e37a:	4b57      	ldr	r3, [pc, #348]	; (800e4d8 <Adachi_judge2+0x538>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	4618      	mov	r0, r3
 800e380:	4b56      	ldr	r3, [pc, #344]	; (800e4dc <Adachi_judge2+0x53c>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	1e5a      	subs	r2, r3, #1
 800e386:	4957      	ldr	r1, [pc, #348]	; (800e4e4 <Adachi_judge2+0x544>)
 800e388:	4603      	mov	r3, r0
 800e38a:	00db      	lsls	r3, r3, #3
 800e38c:	4403      	add	r3, r0
 800e38e:	440b      	add	r3, r1
 800e390:	4413      	add	r3, r2
 800e392:	781a      	ldrb	r2, [r3, #0]
 800e394:	4b50      	ldr	r3, [pc, #320]	; (800e4d8 <Adachi_judge2+0x538>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	4618      	mov	r0, r3
 800e39a:	4b50      	ldr	r3, [pc, #320]	; (800e4dc <Adachi_judge2+0x53c>)
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	461c      	mov	r4, r3
 800e3a0:	4950      	ldr	r1, [pc, #320]	; (800e4e4 <Adachi_judge2+0x544>)
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	00db      	lsls	r3, r3, #3
 800e3a6:	4403      	add	r3, r0
 800e3a8:	440b      	add	r3, r1
 800e3aa:	4423      	add	r3, r4
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d20f      	bcs.n	800e3d2 <Adachi_judge2+0x432>
 800e3b2:	4b4a      	ldr	r3, [pc, #296]	; (800e4dc <Adachi_judge2+0x53c>)
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00b      	beq.n	800e3d2 <Adachi_judge2+0x432>
			  //前南
			  straight();
 800e3ba:	f7fc fd4d 	bl	800ae58 <straight>
	       	  my_direction = south;
 800e3be:	4b4a      	ldr	r3, [pc, #296]	; (800e4e8 <Adachi_judge2+0x548>)
 800e3c0:	2202      	movs	r2, #2
 800e3c2:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800e3c4:	4b45      	ldr	r3, [pc, #276]	; (800e4dc <Adachi_judge2+0x53c>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	4b43      	ldr	r3, [pc, #268]	; (800e4dc <Adachi_judge2+0x53c>)
 800e3ce:	701a      	strb	r2, [r3, #0]
 800e3d0:	e0aa      	b.n	800e528 <Adachi_judge2+0x588>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e3d2:	4b41      	ldr	r3, [pc, #260]	; (800e4d8 <Adachi_judge2+0x538>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	4b40      	ldr	r3, [pc, #256]	; (800e4dc <Adachi_judge2+0x53c>)
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	4a40      	ldr	r2, [pc, #256]	; (800e4e0 <Adachi_judge2+0x540>)
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	00db      	lsls	r3, r3, #3
 800e3e4:	440b      	add	r3, r1
 800e3e6:	4403      	add	r3, r0
 800e3e8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e3ec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d12b      	bne.n	800e44e <Adachi_judge2+0x4ae>
 800e3f6:	4b38      	ldr	r3, [pc, #224]	; (800e4d8 <Adachi_judge2+0x538>)
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	1c5a      	adds	r2, r3, #1
 800e3fc:	4b37      	ldr	r3, [pc, #220]	; (800e4dc <Adachi_judge2+0x53c>)
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	4618      	mov	r0, r3
 800e402:	4938      	ldr	r1, [pc, #224]	; (800e4e4 <Adachi_judge2+0x544>)
 800e404:	4613      	mov	r3, r2
 800e406:	00db      	lsls	r3, r3, #3
 800e408:	4413      	add	r3, r2
 800e40a:	440b      	add	r3, r1
 800e40c:	4403      	add	r3, r0
 800e40e:	781a      	ldrb	r2, [r3, #0]
 800e410:	4b31      	ldr	r3, [pc, #196]	; (800e4d8 <Adachi_judge2+0x538>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	4b31      	ldr	r3, [pc, #196]	; (800e4dc <Adachi_judge2+0x53c>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	461c      	mov	r4, r3
 800e41c:	4931      	ldr	r1, [pc, #196]	; (800e4e4 <Adachi_judge2+0x544>)
 800e41e:	4603      	mov	r3, r0
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	4403      	add	r3, r0
 800e424:	440b      	add	r3, r1
 800e426:	4423      	add	r3, r4
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d20f      	bcs.n	800e44e <Adachi_judge2+0x4ae>
 800e42e:	4b2a      	ldr	r3, [pc, #168]	; (800e4d8 <Adachi_judge2+0x538>)
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2b07      	cmp	r3, #7
 800e434:	d80b      	bhi.n	800e44e <Adachi_judge2+0x4ae>
			  //左東
			  L_turn_select();
 800e436:	f7fd fb6b 	bl	800bb10 <L_turn_select>
	       	  my_direction = east;
 800e43a:	4b2b      	ldr	r3, [pc, #172]	; (800e4e8 <Adachi_judge2+0x548>)
 800e43c:	2201      	movs	r2, #1
 800e43e:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800e440:	4b25      	ldr	r3, [pc, #148]	; (800e4d8 <Adachi_judge2+0x538>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	3301      	adds	r3, #1
 800e446:	b2da      	uxtb	r2, r3
 800e448:	4b23      	ldr	r3, [pc, #140]	; (800e4d8 <Adachi_judge2+0x538>)
 800e44a:	701a      	strb	r2, [r3, #0]
 800e44c:	e06c      	b.n	800e528 <Adachi_judge2+0x588>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e44e:	4b22      	ldr	r3, [pc, #136]	; (800e4d8 <Adachi_judge2+0x538>)
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	4619      	mov	r1, r3
 800e454:	4b21      	ldr	r3, [pc, #132]	; (800e4dc <Adachi_judge2+0x53c>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	4618      	mov	r0, r3
 800e45a:	4a21      	ldr	r2, [pc, #132]	; (800e4e0 <Adachi_judge2+0x540>)
 800e45c:	460b      	mov	r3, r1
 800e45e:	00db      	lsls	r3, r3, #3
 800e460:	440b      	add	r3, r1
 800e462:	4403      	add	r3, r0
 800e464:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e468:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d13c      	bne.n	800e4ec <Adachi_judge2+0x54c>
 800e472:	4b19      	ldr	r3, [pc, #100]	; (800e4d8 <Adachi_judge2+0x538>)
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	1e5a      	subs	r2, r3, #1
 800e478:	4b18      	ldr	r3, [pc, #96]	; (800e4dc <Adachi_judge2+0x53c>)
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	4618      	mov	r0, r3
 800e47e:	4919      	ldr	r1, [pc, #100]	; (800e4e4 <Adachi_judge2+0x544>)
 800e480:	4613      	mov	r3, r2
 800e482:	00db      	lsls	r3, r3, #3
 800e484:	4413      	add	r3, r2
 800e486:	440b      	add	r3, r1
 800e488:	4403      	add	r3, r0
 800e48a:	781a      	ldrb	r2, [r3, #0]
 800e48c:	4b12      	ldr	r3, [pc, #72]	; (800e4d8 <Adachi_judge2+0x538>)
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	4b12      	ldr	r3, [pc, #72]	; (800e4dc <Adachi_judge2+0x53c>)
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	461c      	mov	r4, r3
 800e498:	4912      	ldr	r1, [pc, #72]	; (800e4e4 <Adachi_judge2+0x544>)
 800e49a:	4603      	mov	r3, r0
 800e49c:	00db      	lsls	r3, r3, #3
 800e49e:	4403      	add	r3, r0
 800e4a0:	440b      	add	r3, r1
 800e4a2:	4423      	add	r3, r4
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d220      	bcs.n	800e4ec <Adachi_judge2+0x54c>
 800e4aa:	4b0b      	ldr	r3, [pc, #44]	; (800e4d8 <Adachi_judge2+0x538>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d01c      	beq.n	800e4ec <Adachi_judge2+0x54c>
			  //右西
			  R_turn_select();
 800e4b2:	f7fd fae9 	bl	800ba88 <R_turn_select>
	       	  my_direction = west;
 800e4b6:	4b0c      	ldr	r3, [pc, #48]	; (800e4e8 <Adachi_judge2+0x548>)
 800e4b8:	2203      	movs	r2, #3
 800e4ba:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800e4bc:	4b06      	ldr	r3, [pc, #24]	; (800e4d8 <Adachi_judge2+0x538>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	4b04      	ldr	r3, [pc, #16]	; (800e4d8 <Adachi_judge2+0x538>)
 800e4c6:	701a      	strb	r2, [r3, #0]
 800e4c8:	e02e      	b.n	800e528 <Adachi_judge2+0x588>
 800e4ca:	bf00      	nop
 800e4cc:	f3af 8000 	nop.w
 800e4d0:	33333333 	.word	0x33333333
 800e4d4:	3fd33333 	.word	0x3fd33333
 800e4d8:	2000030c 	.word	0x2000030c
 800e4dc:	2000030d 	.word	0x2000030d
 800e4e0:	20004f0c 	.word	0x20004f0c
 800e4e4:	20004a60 	.word	0x20004a60
 800e4e8:	2000449a 	.word	0x2000449a
		  }
		  else {
			  //後北
	          Decelerate();
 800e4ec:	f7fc fbfc 	bl	800ace8 <Decelerate>
	          wait(0.3);;
 800e4f0:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 800e6e8 <Adachi_judge2+0x748>
 800e4f4:	f7fc fac8 	bl	800aa88 <wait>

//	          if(mode.execution == 1)
//	        	  Motor_PWM_Stop();

	  	      rotate180();
 800e4f8:	f7fd f9e4 	bl	800b8c4 <rotate180>
	  	      wait(0.3);;
 800e4fc:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 800e6e8 <Adachi_judge2+0x748>
 800e500:	f7fc fac2 	bl	800aa88 <wait>
	  	      back_calib();
 800e504:	f7fd fa58 	bl	800b9b8 <back_calib>
	  	      wait(0.3);
 800e508:	ed9f 0b77 	vldr	d0, [pc, #476]	; 800e6e8 <Adachi_judge2+0x748>
 800e50c:	f7fc fabc 	bl	800aa88 <wait>
	       	  Start_Accel();
 800e510:	f7fc fae2 	bl	800aad8 <Start_Accel>

	       	  my_direction = north;
 800e514:	4b76      	ldr	r3, [pc, #472]	; (800e6f0 <Adachi_judge2+0x750>)
 800e516:	2200      	movs	r2, #0
 800e518:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800e51a:	4b76      	ldr	r3, [pc, #472]	; (800e6f4 <Adachi_judge2+0x754>)
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	3301      	adds	r3, #1
 800e520:	b2da      	uxtb	r2, r3
 800e522:	4b74      	ldr	r3, [pc, #464]	; (800e6f4 <Adachi_judge2+0x754>)
 800e524:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800e526:	e0da      	b.n	800e6de <Adachi_judge2+0x73e>
 800e528:	e0d9      	b.n	800e6de <Adachi_judge2+0x73e>

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e52a:	4b73      	ldr	r3, [pc, #460]	; (800e6f8 <Adachi_judge2+0x758>)
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	4619      	mov	r1, r3
 800e530:	4b70      	ldr	r3, [pc, #448]	; (800e6f4 <Adachi_judge2+0x754>)
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	4618      	mov	r0, r3
 800e536:	4a71      	ldr	r2, [pc, #452]	; (800e6fc <Adachi_judge2+0x75c>)
 800e538:	460b      	mov	r3, r1
 800e53a:	00db      	lsls	r3, r3, #3
 800e53c:	440b      	add	r3, r1
 800e53e:	4403      	add	r3, r0
 800e540:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e544:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d12b      	bne.n	800e5a6 <Adachi_judge2+0x606>
 800e54e:	4b6a      	ldr	r3, [pc, #424]	; (800e6f8 <Adachi_judge2+0x758>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	1e5a      	subs	r2, r3, #1
 800e554:	4b67      	ldr	r3, [pc, #412]	; (800e6f4 <Adachi_judge2+0x754>)
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	4618      	mov	r0, r3
 800e55a:	4969      	ldr	r1, [pc, #420]	; (800e700 <Adachi_judge2+0x760>)
 800e55c:	4613      	mov	r3, r2
 800e55e:	00db      	lsls	r3, r3, #3
 800e560:	4413      	add	r3, r2
 800e562:	440b      	add	r3, r1
 800e564:	4403      	add	r3, r0
 800e566:	781a      	ldrb	r2, [r3, #0]
 800e568:	4b63      	ldr	r3, [pc, #396]	; (800e6f8 <Adachi_judge2+0x758>)
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	4618      	mov	r0, r3
 800e56e:	4b61      	ldr	r3, [pc, #388]	; (800e6f4 <Adachi_judge2+0x754>)
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	461c      	mov	r4, r3
 800e574:	4962      	ldr	r1, [pc, #392]	; (800e700 <Adachi_judge2+0x760>)
 800e576:	4603      	mov	r3, r0
 800e578:	00db      	lsls	r3, r3, #3
 800e57a:	4403      	add	r3, r0
 800e57c:	440b      	add	r3, r1
 800e57e:	4423      	add	r3, r4
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	429a      	cmp	r2, r3
 800e584:	d20f      	bcs.n	800e5a6 <Adachi_judge2+0x606>
 800e586:	4b5c      	ldr	r3, [pc, #368]	; (800e6f8 <Adachi_judge2+0x758>)
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00b      	beq.n	800e5a6 <Adachi_judge2+0x606>
			  //前西
			  straight();
 800e58e:	f7fc fc63 	bl	800ae58 <straight>
	       	  my_direction = west;
 800e592:	4b57      	ldr	r3, [pc, #348]	; (800e6f0 <Adachi_judge2+0x750>)
 800e594:	2203      	movs	r2, #3
 800e596:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800e598:	4b57      	ldr	r3, [pc, #348]	; (800e6f8 <Adachi_judge2+0x758>)
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	b2da      	uxtb	r2, r3
 800e5a0:	4b55      	ldr	r3, [pc, #340]	; (800e6f8 <Adachi_judge2+0x758>)
 800e5a2:	701a      	strb	r2, [r3, #0]
 800e5a4:	e099      	b.n	800e6da <Adachi_judge2+0x73a>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e5a6:	4b54      	ldr	r3, [pc, #336]	; (800e6f8 <Adachi_judge2+0x758>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	4b51      	ldr	r3, [pc, #324]	; (800e6f4 <Adachi_judge2+0x754>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	4a52      	ldr	r2, [pc, #328]	; (800e6fc <Adachi_judge2+0x75c>)
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	440b      	add	r3, r1
 800e5ba:	4403      	add	r3, r0
 800e5bc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e5c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d12b      	bne.n	800e622 <Adachi_judge2+0x682>
 800e5ca:	4b4b      	ldr	r3, [pc, #300]	; (800e6f8 <Adachi_judge2+0x758>)
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	4b48      	ldr	r3, [pc, #288]	; (800e6f4 <Adachi_judge2+0x754>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	1e5a      	subs	r2, r3, #1
 800e5d6:	494a      	ldr	r1, [pc, #296]	; (800e700 <Adachi_judge2+0x760>)
 800e5d8:	4603      	mov	r3, r0
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	4403      	add	r3, r0
 800e5de:	440b      	add	r3, r1
 800e5e0:	4413      	add	r3, r2
 800e5e2:	781a      	ldrb	r2, [r3, #0]
 800e5e4:	4b44      	ldr	r3, [pc, #272]	; (800e6f8 <Adachi_judge2+0x758>)
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	4b42      	ldr	r3, [pc, #264]	; (800e6f4 <Adachi_judge2+0x754>)
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	461c      	mov	r4, r3
 800e5f0:	4943      	ldr	r1, [pc, #268]	; (800e700 <Adachi_judge2+0x760>)
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	00db      	lsls	r3, r3, #3
 800e5f6:	4403      	add	r3, r0
 800e5f8:	440b      	add	r3, r1
 800e5fa:	4423      	add	r3, r4
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d20f      	bcs.n	800e622 <Adachi_judge2+0x682>
 800e602:	4b3c      	ldr	r3, [pc, #240]	; (800e6f4 <Adachi_judge2+0x754>)
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00b      	beq.n	800e622 <Adachi_judge2+0x682>
			  //左?��?
			  L_turn_select();
 800e60a:	f7fd fa81 	bl	800bb10 <L_turn_select>
	       	  my_direction = south;
 800e60e:	4b38      	ldr	r3, [pc, #224]	; (800e6f0 <Adachi_judge2+0x750>)
 800e610:	2202      	movs	r2, #2
 800e612:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800e614:	4b37      	ldr	r3, [pc, #220]	; (800e6f4 <Adachi_judge2+0x754>)
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	3b01      	subs	r3, #1
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	4b35      	ldr	r3, [pc, #212]	; (800e6f4 <Adachi_judge2+0x754>)
 800e61e:	701a      	strb	r2, [r3, #0]
 800e620:	e05b      	b.n	800e6da <Adachi_judge2+0x73a>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e622:	4b35      	ldr	r3, [pc, #212]	; (800e6f8 <Adachi_judge2+0x758>)
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	4619      	mov	r1, r3
 800e628:	4b32      	ldr	r3, [pc, #200]	; (800e6f4 <Adachi_judge2+0x754>)
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	4618      	mov	r0, r3
 800e62e:	4a33      	ldr	r2, [pc, #204]	; (800e6fc <Adachi_judge2+0x75c>)
 800e630:	460b      	mov	r3, r1
 800e632:	00db      	lsls	r3, r3, #3
 800e634:	440b      	add	r3, r1
 800e636:	4403      	add	r3, r0
 800e638:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e63c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	d12b      	bne.n	800e69e <Adachi_judge2+0x6fe>
 800e646:	4b2c      	ldr	r3, [pc, #176]	; (800e6f8 <Adachi_judge2+0x758>)
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	4618      	mov	r0, r3
 800e64c:	4b29      	ldr	r3, [pc, #164]	; (800e6f4 <Adachi_judge2+0x754>)
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	1c5a      	adds	r2, r3, #1
 800e652:	492b      	ldr	r1, [pc, #172]	; (800e700 <Adachi_judge2+0x760>)
 800e654:	4603      	mov	r3, r0
 800e656:	00db      	lsls	r3, r3, #3
 800e658:	4403      	add	r3, r0
 800e65a:	440b      	add	r3, r1
 800e65c:	4413      	add	r3, r2
 800e65e:	781a      	ldrb	r2, [r3, #0]
 800e660:	4b25      	ldr	r3, [pc, #148]	; (800e6f8 <Adachi_judge2+0x758>)
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	4618      	mov	r0, r3
 800e666:	4b23      	ldr	r3, [pc, #140]	; (800e6f4 <Adachi_judge2+0x754>)
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	461c      	mov	r4, r3
 800e66c:	4924      	ldr	r1, [pc, #144]	; (800e700 <Adachi_judge2+0x760>)
 800e66e:	4603      	mov	r3, r0
 800e670:	00db      	lsls	r3, r3, #3
 800e672:	4403      	add	r3, r0
 800e674:	440b      	add	r3, r1
 800e676:	4423      	add	r3, r4
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d20f      	bcs.n	800e69e <Adachi_judge2+0x6fe>
 800e67e:	4b1d      	ldr	r3, [pc, #116]	; (800e6f4 <Adachi_judge2+0x754>)
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	2b07      	cmp	r3, #7
 800e684:	d80b      	bhi.n	800e69e <Adachi_judge2+0x6fe>
			  //右?��?
			  R_turn_select();
 800e686:	f7fd f9ff 	bl	800ba88 <R_turn_select>
	       	  my_direction = north;
 800e68a:	4b19      	ldr	r3, [pc, #100]	; (800e6f0 <Adachi_judge2+0x750>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800e690:	4b18      	ldr	r3, [pc, #96]	; (800e6f4 <Adachi_judge2+0x754>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	3301      	adds	r3, #1
 800e696:	b2da      	uxtb	r2, r3
 800e698:	4b16      	ldr	r3, [pc, #88]	; (800e6f4 <Adachi_judge2+0x754>)
 800e69a:	701a      	strb	r2, [r3, #0]
 800e69c:	e01d      	b.n	800e6da <Adachi_judge2+0x73a>
		  }
		  else {
			  //後東
	          Decelerate();
 800e69e:	f7fc fb23 	bl	800ace8 <Decelerate>
	          wait(0.3);;
 800e6a2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800e6e8 <Adachi_judge2+0x748>
 800e6a6:	f7fc f9ef 	bl	800aa88 <wait>

//	          if(mode.execution == 1)
//	        	  Motor_PWM_Stop();

	  	      rotate180();
 800e6aa:	f7fd f90b 	bl	800b8c4 <rotate180>
	  	      wait(0.3);;
 800e6ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e6e8 <Adachi_judge2+0x748>
 800e6b2:	f7fc f9e9 	bl	800aa88 <wait>
	  	      back_calib();
 800e6b6:	f7fd f97f 	bl	800b9b8 <back_calib>
	  	      wait(0.3);
 800e6ba:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800e6e8 <Adachi_judge2+0x748>
 800e6be:	f7fc f9e3 	bl	800aa88 <wait>
	       	  Start_Accel();
 800e6c2:	f7fc fa09 	bl	800aad8 <Start_Accel>

	       	  my_direction = east;
 800e6c6:	4b0a      	ldr	r3, [pc, #40]	; (800e6f0 <Adachi_judge2+0x750>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800e6cc:	4b0a      	ldr	r3, [pc, #40]	; (800e6f8 <Adachi_judge2+0x758>)
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	b2da      	uxtb	r2, r3
 800e6d4:	4b08      	ldr	r3, [pc, #32]	; (800e6f8 <Adachi_judge2+0x758>)
 800e6d6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800e6d8:	e001      	b.n	800e6de <Adachi_judge2+0x73e>
 800e6da:	e000      	b.n	800e6de <Adachi_judge2+0x73e>

	  default:
		  break;
 800e6dc:	bf00      	nop
	  }//swtich end
}
 800e6de:	bf00      	nop
 800e6e0:	bd98      	pop	{r3, r4, r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	f3af 8000 	nop.w
 800e6e8:	33333333 	.word	0x33333333
 800e6ec:	3fd33333 	.word	0x3fd33333
 800e6f0:	2000449a 	.word	0x2000449a
 800e6f4:	2000030d 	.word	0x2000030d
 800e6f8:	2000030c 	.word	0x2000030c
 800e6fc:	20004f0c 	.word	0x20004f0c
 800e700:	20004a60 	.word	0x20004a60
 800e704:	00000000 	.word	0x00000000

0800e708 <Adachi_search2>:
void Adachi_search2(){
 800e708:	b580      	push	{r7, lr}
 800e70a:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	Map_Load();
 800e70c:	f7ff fb88 	bl	800de20 <Map_Load>

	//座標�??��初期?��?
	x = y = 0;
 800e710:	4b33      	ldr	r3, [pc, #204]	; (800e7e0 <Adachi_search2+0xd8>)
 800e712:	2200      	movs	r2, #0
 800e714:	701a      	strb	r2, [r3, #0]
 800e716:	4b32      	ldr	r3, [pc, #200]	; (800e7e0 <Adachi_search2+0xd8>)
 800e718:	781a      	ldrb	r2, [r3, #0]
 800e71a:	4b32      	ldr	r3, [pc, #200]	; (800e7e4 <Adachi_search2+0xdc>)
 800e71c:	701a      	strb	r2, [r3, #0]
	//方向�??��初期?��?
	my_direction=north;
 800e71e:	4b32      	ldr	r3, [pc, #200]	; (800e7e8 <Adachi_search2+0xe0>)
 800e720:	2200      	movs	r2, #0
 800e722:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期?��?
	wall_set();
 800e724:	f7fd fc5c 	bl	800bfe0 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ?��??��?
	wall[x][y].south = WALL;
 800e728:	4b2e      	ldr	r3, [pc, #184]	; (800e7e4 <Adachi_search2+0xdc>)
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	461a      	mov	r2, r3
 800e72e:	4b2c      	ldr	r3, [pc, #176]	; (800e7e0 <Adachi_search2+0xd8>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	4618      	mov	r0, r3
 800e734:	492d      	ldr	r1, [pc, #180]	; (800e7ec <Adachi_search2+0xe4>)
 800e736:	4613      	mov	r3, r2
 800e738:	00db      	lsls	r3, r3, #3
 800e73a:	4413      	add	r3, r2
 800e73c:	181a      	adds	r2, r3, r0
 800e73e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e742:	2001      	movs	r0, #1
 800e744:	f360 1305 	bfi	r3, r0, #4, #2
 800e748:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�??��更新(ここでは初期?��?)
	Walk_Map_Update();
 800e74c:	f7fd faaa 	bl	800bca4 <Walk_Map_Update>

	//?��?初�??��直進
	Start_Accel();
 800e750:	f7fc f9c2 	bl	800aad8 <Start_Accel>

	x = 0;
 800e754:	4b23      	ldr	r3, [pc, #140]	; (800e7e4 <Adachi_search2+0xdc>)
 800e756:	2200      	movs	r2, #0
 800e758:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800e75a:	4b21      	ldr	r3, [pc, #132]	; (800e7e0 <Adachi_search2+0xd8>)
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	3301      	adds	r3, #1
 800e760:	b2da      	uxtb	r2, r3
 800e762:	4b1f      	ldr	r3, [pc, #124]	; (800e7e0 <Adachi_search2+0xd8>)
 800e764:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e766:	e005      	b.n	800e774 <Adachi_search2+0x6c>
		//壁更新
		wall_set();
 800e768:	f7fd fc3a 	bl	800bfe0 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800e76c:	f7fd fa9a 	bl	800bca4 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge2();
 800e770:	f7ff fc16 	bl	800dfa0 <Adachi_judge2>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e774:	4b1b      	ldr	r3, [pc, #108]	; (800e7e4 <Adachi_search2+0xdc>)
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	2b02      	cmp	r3, #2
 800e77a:	d9f5      	bls.n	800e768 <Adachi_search2+0x60>
 800e77c:	4b19      	ldr	r3, [pc, #100]	; (800e7e4 <Adachi_search2+0xdc>)
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	2b03      	cmp	r3, #3
 800e782:	d8f1      	bhi.n	800e768 <Adachi_search2+0x60>
 800e784:	4b16      	ldr	r3, [pc, #88]	; (800e7e0 <Adachi_search2+0xd8>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	2b02      	cmp	r3, #2
 800e78a:	d9ed      	bls.n	800e768 <Adachi_search2+0x60>
 800e78c:	4b14      	ldr	r3, [pc, #80]	; (800e7e0 <Adachi_search2+0xd8>)
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	2b03      	cmp	r3, #3
 800e792:	d8e9      	bhi.n	800e768 <Adachi_search2+0x60>
	}

	//after-gall#2
	      Decelerate();
 800e794:	f7fc faa8 	bl	800ace8 <Decelerate>
	      mode.LED = 7;
 800e798:	4b15      	ldr	r3, [pc, #84]	; (800e7f0 <Adachi_search2+0xe8>)
 800e79a:	2207      	movs	r2, #7
 800e79c:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e79e:	f7fb fe9d 	bl	800a4dc <LED_Change>
	      HAL_Delay(1000);
 800e7a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e7a6:	f002 fcf7 	bl	8011198 <HAL_Delay>
//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800e7aa:	4b11      	ldr	r3, [pc, #68]	; (800e7f0 <Adachi_search2+0xe8>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e7b0:	f7fb fe94 	bl	800a4dc <LED_Change>
	      mapcopy();
 800e7b4:	f7fb f9f0 	bl	8009b98 <mapcopy>
	      Flash_store();
 800e7b8:	f7fb fb7e 	bl	8009eb8 <Flash_store>

	      //ゴールエリア巡�? 2�?2を想�?
	      goal_area_search();
 800e7bc:	f7fd ff6c 	bl	800c698 <goal_area_search>
	  	  Decelerate();
	      rotate180();
	      wait(0.3);
	      back_calib();
#endif
	      wait(0.3);
 800e7c0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800e7d8 <Adachi_search2+0xd0>
 800e7c4:	f7fc f960 	bl	800aa88 <wait>
	      mapcopy();
 800e7c8:	f7fb f9e6 	bl	8009b98 <mapcopy>
	      Flash_store();
 800e7cc:	f7fb fb74 	bl	8009eb8 <Flash_store>
	      //mode.execution = 3;
	      Motor_PWM_Stop();
 800e7d0:	f7fb fc10 	bl	8009ff4 <Motor_PWM_Stop>
}
 800e7d4:	bf00      	nop
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	33333333 	.word	0x33333333
 800e7dc:	3fd33333 	.word	0x3fd33333
 800e7e0:	2000030d 	.word	0x2000030d
 800e7e4:	2000030c 	.word	0x2000030c
 800e7e8:	2000449a 	.word	0x2000449a
 800e7ec:	20004f0c 	.word	0x20004f0c
 800e7f0:	20000074 	.word	0x20000074
 800e7f4:	00000000 	.word	0x00000000

0800e7f8 <Shortest_Run_Judge>:


void Shortest_Run_Judge(){
 800e7f8:	b598      	push	{r3, r4, r7, lr}
 800e7fa:	af00      	add	r7, sp, #0
	/*------旋回モード選�?-----*/
	mode.turn = 0;
 800e7fc:	4b98      	ldr	r3, [pc, #608]	; (800ea60 <Shortest_Run_Judge+0x268>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	725a      	strb	r2, [r3, #9]
	// 2 : �?輪旋回                  //
	// 3 : IMUで�?信地旋回       //
	/*----------------------------*/


	switch(my_direction){
 800e802:	4b98      	ldr	r3, [pc, #608]	; (800ea64 <Shortest_Run_Judge+0x26c>)
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	2b03      	cmp	r3, #3
 800e808:	f200 8398 	bhi.w	800ef3c <Shortest_Run_Judge+0x744>
 800e80c:	a201      	add	r2, pc, #4	; (adr r2, 800e814 <Shortest_Run_Judge+0x1c>)
 800e80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e812:	bf00      	nop
 800e814:	0800e825 	.word	0x0800e825
 800e818:	0800e9d9 	.word	0x0800e9d9
 800e81c:	0800ebb1 	.word	0x0800ebb1
 800e820:	0800ed89 	.word	0x0800ed89
	  		  case north:
	  			  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e824:	4b90      	ldr	r3, [pc, #576]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	4619      	mov	r1, r3
 800e82a:	4b90      	ldr	r3, [pc, #576]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	4618      	mov	r0, r3
 800e830:	4a8f      	ldr	r2, [pc, #572]	; (800ea70 <Shortest_Run_Judge+0x278>)
 800e832:	460b      	mov	r3, r1
 800e834:	00db      	lsls	r3, r3, #3
 800e836:	440b      	add	r3, r1
 800e838:	4403      	add	r3, r0
 800e83a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e83e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e842:	b2db      	uxtb	r3, r3
 800e844:	2b00      	cmp	r3, #0
 800e846:	d12b      	bne.n	800e8a0 <Shortest_Run_Judge+0xa8>
 800e848:	4b87      	ldr	r3, [pc, #540]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	4618      	mov	r0, r3
 800e84e:	4b87      	ldr	r3, [pc, #540]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	1c5a      	adds	r2, r3, #1
 800e854:	4987      	ldr	r1, [pc, #540]	; (800ea74 <Shortest_Run_Judge+0x27c>)
 800e856:	4603      	mov	r3, r0
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	4403      	add	r3, r0
 800e85c:	440b      	add	r3, r1
 800e85e:	4413      	add	r3, r2
 800e860:	781a      	ldrb	r2, [r3, #0]
 800e862:	4b81      	ldr	r3, [pc, #516]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	4618      	mov	r0, r3
 800e868:	4b80      	ldr	r3, [pc, #512]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	461c      	mov	r4, r3
 800e86e:	4981      	ldr	r1, [pc, #516]	; (800ea74 <Shortest_Run_Judge+0x27c>)
 800e870:	4603      	mov	r3, r0
 800e872:	00db      	lsls	r3, r3, #3
 800e874:	4403      	add	r3, r0
 800e876:	440b      	add	r3, r1
 800e878:	4423      	add	r3, r4
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d20f      	bcs.n	800e8a0 <Shortest_Run_Judge+0xa8>
 800e880:	4b7a      	ldr	r3, [pc, #488]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	2b07      	cmp	r3, #7
 800e886:	d80b      	bhi.n	800e8a0 <Shortest_Run_Judge+0xa8>
	  				  //前北
	  				  straight();
 800e888:	f7fc fae6 	bl	800ae58 <straight>
	  				  my_direction = north;
 800e88c:	4b75      	ldr	r3, [pc, #468]	; (800ea64 <Shortest_Run_Judge+0x26c>)
 800e88e:	2200      	movs	r2, #0
 800e890:	701a      	strb	r2, [r3, #0]
	  				  y++;
 800e892:	4b76      	ldr	r3, [pc, #472]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	3301      	adds	r3, #1
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	4b74      	ldr	r3, [pc, #464]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	e09a      	b.n	800e9d6 <Shortest_Run_Judge+0x1de>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e8a0:	4b71      	ldr	r3, [pc, #452]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4b71      	ldr	r3, [pc, #452]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	4a70      	ldr	r2, [pc, #448]	; (800ea70 <Shortest_Run_Judge+0x278>)
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	00db      	lsls	r3, r3, #3
 800e8b2:	440b      	add	r3, r1
 800e8b4:	4403      	add	r3, r0
 800e8b6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e8ba:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d12b      	bne.n	800e91c <Shortest_Run_Judge+0x124>
 800e8c4:	4b68      	ldr	r3, [pc, #416]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	1e5a      	subs	r2, r3, #1
 800e8ca:	4b68      	ldr	r3, [pc, #416]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	4968      	ldr	r1, [pc, #416]	; (800ea74 <Shortest_Run_Judge+0x27c>)
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	00db      	lsls	r3, r3, #3
 800e8d6:	4413      	add	r3, r2
 800e8d8:	440b      	add	r3, r1
 800e8da:	4403      	add	r3, r0
 800e8dc:	781a      	ldrb	r2, [r3, #0]
 800e8de:	4b62      	ldr	r3, [pc, #392]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	4b61      	ldr	r3, [pc, #388]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	461c      	mov	r4, r3
 800e8ea:	4962      	ldr	r1, [pc, #392]	; (800ea74 <Shortest_Run_Judge+0x27c>)
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	00db      	lsls	r3, r3, #3
 800e8f0:	4403      	add	r3, r0
 800e8f2:	440b      	add	r3, r1
 800e8f4:	4423      	add	r3, r4
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d20f      	bcs.n	800e91c <Shortest_Run_Judge+0x124>
 800e8fc:	4b5a      	ldr	r3, [pc, #360]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00b      	beq.n	800e91c <Shortest_Run_Judge+0x124>
	  				  //左西
	  				  L_turn_select();
 800e904:	f7fd f904 	bl	800bb10 <L_turn_select>
	  				  my_direction = west;
 800e908:	4b56      	ldr	r3, [pc, #344]	; (800ea64 <Shortest_Run_Judge+0x26c>)
 800e90a:	2203      	movs	r2, #3
 800e90c:	701a      	strb	r2, [r3, #0]
	  			      x--;
 800e90e:	4b56      	ldr	r3, [pc, #344]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	3b01      	subs	r3, #1
 800e914:	b2da      	uxtb	r2, r3
 800e916:	4b54      	ldr	r3, [pc, #336]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e918:	701a      	strb	r2, [r3, #0]
 800e91a:	e05c      	b.n	800e9d6 <Shortest_Run_Judge+0x1de>
	  			  }
	  			  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800e91c:	4b52      	ldr	r3, [pc, #328]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	4619      	mov	r1, r3
 800e922:	4b52      	ldr	r3, [pc, #328]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	4618      	mov	r0, r3
 800e928:	4a51      	ldr	r2, [pc, #324]	; (800ea70 <Shortest_Run_Judge+0x278>)
 800e92a:	460b      	mov	r3, r1
 800e92c:	00db      	lsls	r3, r3, #3
 800e92e:	440b      	add	r3, r1
 800e930:	4403      	add	r3, r0
 800e932:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e936:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d12b      	bne.n	800e998 <Shortest_Run_Judge+0x1a0>
 800e940:	4b49      	ldr	r3, [pc, #292]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	1c5a      	adds	r2, r3, #1
 800e946:	4b49      	ldr	r3, [pc, #292]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	4618      	mov	r0, r3
 800e94c:	4949      	ldr	r1, [pc, #292]	; (800ea74 <Shortest_Run_Judge+0x27c>)
 800e94e:	4613      	mov	r3, r2
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	4413      	add	r3, r2
 800e954:	440b      	add	r3, r1
 800e956:	4403      	add	r3, r0
 800e958:	781a      	ldrb	r2, [r3, #0]
 800e95a:	4b43      	ldr	r3, [pc, #268]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	4618      	mov	r0, r3
 800e960:	4b42      	ldr	r3, [pc, #264]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	461c      	mov	r4, r3
 800e966:	4943      	ldr	r1, [pc, #268]	; (800ea74 <Shortest_Run_Judge+0x27c>)
 800e968:	4603      	mov	r3, r0
 800e96a:	00db      	lsls	r3, r3, #3
 800e96c:	4403      	add	r3, r0
 800e96e:	440b      	add	r3, r1
 800e970:	4423      	add	r3, r4
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	429a      	cmp	r2, r3
 800e976:	d20f      	bcs.n	800e998 <Shortest_Run_Judge+0x1a0>
 800e978:	4b3b      	ldr	r3, [pc, #236]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	2b07      	cmp	r3, #7
 800e97e:	d80b      	bhi.n	800e998 <Shortest_Run_Judge+0x1a0>
	  				  //右東
	  				  R_turn_select();
 800e980:	f7fd f882 	bl	800ba88 <R_turn_select>
	  		          my_direction = east;
 800e984:	4b37      	ldr	r3, [pc, #220]	; (800ea64 <Shortest_Run_Judge+0x26c>)
 800e986:	2201      	movs	r2, #1
 800e988:	701a      	strb	r2, [r3, #0]
	  		          x++;
 800e98a:	4b37      	ldr	r3, [pc, #220]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	3301      	adds	r3, #1
 800e990:	b2da      	uxtb	r2, r3
 800e992:	4b35      	ldr	r3, [pc, #212]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e994:	701a      	strb	r2, [r3, #0]
 800e996:	e01e      	b.n	800e9d6 <Shortest_Run_Judge+0x1de>
	  			  }

	  			  else {
	  				  //後南
	  		          Decelerate();
 800e998:	f7fc f9a6 	bl	800ace8 <Decelerate>
	  		          wait(0.3);;
 800e99c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800ea58 <Shortest_Run_Judge+0x260>
 800e9a0:	f7fc f872 	bl	800aa88 <wait>

	  		          if(mode.execution == 1)
 800e9a4:	4b2e      	ldr	r3, [pc, #184]	; (800ea60 <Shortest_Run_Judge+0x268>)
 800e9a6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d101      	bne.n	800e9b2 <Shortest_Run_Judge+0x1ba>
	  		        	  Motor_PWM_Stop();
 800e9ae:	f7fb fb21 	bl	8009ff4 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e9b2:	f7fc ff87 	bl	800b8c4 <rotate180>
	  		  	      wait(0.3);;
 800e9b6:	ed9f 0b28 	vldr	d0, [pc, #160]	; 800ea58 <Shortest_Run_Judge+0x260>
 800e9ba:	f7fc f865 	bl	800aa88 <wait>
	  		       	  Accelerate();
 800e9be:	f7fc f8e3 	bl	800ab88 <Accelerate>
	  		       	  my_direction = south;
 800e9c2:	4b28      	ldr	r3, [pc, #160]	; (800ea64 <Shortest_Run_Judge+0x26c>)
 800e9c4:	2202      	movs	r2, #2
 800e9c6:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e9c8:	4b28      	ldr	r3, [pc, #160]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	b2da      	uxtb	r2, r3
 800e9d0:	4b26      	ldr	r3, [pc, #152]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e9d2:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e9d4:	e2b3      	b.n	800ef3e <Shortest_Run_Judge+0x746>
 800e9d6:	e2b2      	b.n	800ef3e <Shortest_Run_Judge+0x746>

	  		  case east:

	  			  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e9d8:	4b23      	ldr	r3, [pc, #140]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	4b23      	ldr	r3, [pc, #140]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	4a22      	ldr	r2, [pc, #136]	; (800ea70 <Shortest_Run_Judge+0x278>)
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	00db      	lsls	r3, r3, #3
 800e9ea:	440b      	add	r3, r1
 800e9ec:	4403      	add	r3, r0
 800e9ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e9f2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d13d      	bne.n	800ea78 <Shortest_Run_Judge+0x280>
 800e9fc:	4b1a      	ldr	r3, [pc, #104]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	1c5a      	adds	r2, r3, #1
 800ea02:	4b1a      	ldr	r3, [pc, #104]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	4618      	mov	r0, r3
 800ea08:	491a      	ldr	r1, [pc, #104]	; (800ea74 <Shortest_Run_Judge+0x27c>)
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	00db      	lsls	r3, r3, #3
 800ea0e:	4413      	add	r3, r2
 800ea10:	440b      	add	r3, r1
 800ea12:	4403      	add	r3, r0
 800ea14:	781a      	ldrb	r2, [r3, #0]
 800ea16:	4b14      	ldr	r3, [pc, #80]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	4b13      	ldr	r3, [pc, #76]	; (800ea6c <Shortest_Run_Judge+0x274>)
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	461c      	mov	r4, r3
 800ea22:	4914      	ldr	r1, [pc, #80]	; (800ea74 <Shortest_Run_Judge+0x27c>)
 800ea24:	4603      	mov	r3, r0
 800ea26:	00db      	lsls	r3, r3, #3
 800ea28:	4403      	add	r3, r0
 800ea2a:	440b      	add	r3, r1
 800ea2c:	4423      	add	r3, r4
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d221      	bcs.n	800ea78 <Shortest_Run_Judge+0x280>
 800ea34:	4b0c      	ldr	r3, [pc, #48]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	2b07      	cmp	r3, #7
 800ea3a:	d81d      	bhi.n	800ea78 <Shortest_Run_Judge+0x280>
	  				  //前東
	  				  straight();
 800ea3c:	f7fc fa0c 	bl	800ae58 <straight>
	  		       	  my_direction = east;
 800ea40:	4b08      	ldr	r3, [pc, #32]	; (800ea64 <Shortest_Run_Judge+0x26c>)
 800ea42:	2201      	movs	r2, #1
 800ea44:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800ea46:	4b08      	ldr	r3, [pc, #32]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	4b06      	ldr	r3, [pc, #24]	; (800ea68 <Shortest_Run_Judge+0x270>)
 800ea50:	701a      	strb	r2, [r3, #0]
 800ea52:	e0ac      	b.n	800ebae <Shortest_Run_Judge+0x3b6>
 800ea54:	f3af 8000 	nop.w
 800ea58:	33333333 	.word	0x33333333
 800ea5c:	3fd33333 	.word	0x3fd33333
 800ea60:	20000074 	.word	0x20000074
 800ea64:	2000449a 	.word	0x2000449a
 800ea68:	2000030c 	.word	0x2000030c
 800ea6c:	2000030d 	.word	0x2000030d
 800ea70:	20004f0c 	.word	0x20004f0c
 800ea74:	20004a60 	.word	0x20004a60
	  			  }
	  			  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800ea78:	4bad      	ldr	r3, [pc, #692]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4bad      	ldr	r3, [pc, #692]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	4618      	mov	r0, r3
 800ea84:	4aac      	ldr	r2, [pc, #688]	; (800ed38 <Shortest_Run_Judge+0x540>)
 800ea86:	460b      	mov	r3, r1
 800ea88:	00db      	lsls	r3, r3, #3
 800ea8a:	440b      	add	r3, r1
 800ea8c:	4403      	add	r3, r0
 800ea8e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ea92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d12b      	bne.n	800eaf4 <Shortest_Run_Judge+0x2fc>
 800ea9c:	4ba4      	ldr	r3, [pc, #656]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	4ba4      	ldr	r3, [pc, #656]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	1c5a      	adds	r2, r3, #1
 800eaa8:	49a4      	ldr	r1, [pc, #656]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800eaaa:	4603      	mov	r3, r0
 800eaac:	00db      	lsls	r3, r3, #3
 800eaae:	4403      	add	r3, r0
 800eab0:	440b      	add	r3, r1
 800eab2:	4413      	add	r3, r2
 800eab4:	781a      	ldrb	r2, [r3, #0]
 800eab6:	4b9e      	ldr	r3, [pc, #632]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	4618      	mov	r0, r3
 800eabc:	4b9d      	ldr	r3, [pc, #628]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	461c      	mov	r4, r3
 800eac2:	499e      	ldr	r1, [pc, #632]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800eac4:	4603      	mov	r3, r0
 800eac6:	00db      	lsls	r3, r3, #3
 800eac8:	4403      	add	r3, r0
 800eaca:	440b      	add	r3, r1
 800eacc:	4423      	add	r3, r4
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d20f      	bcs.n	800eaf4 <Shortest_Run_Judge+0x2fc>
 800ead4:	4b97      	ldr	r3, [pc, #604]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	2b07      	cmp	r3, #7
 800eada:	d80b      	bhi.n	800eaf4 <Shortest_Run_Judge+0x2fc>
	  				  //左?��?
	  				  L_turn_select();
 800eadc:	f7fd f818 	bl	800bb10 <L_turn_select>
	  		       	  my_direction = north;
 800eae0:	4b97      	ldr	r3, [pc, #604]	; (800ed40 <Shortest_Run_Judge+0x548>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800eae6:	4b93      	ldr	r3, [pc, #588]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	3301      	adds	r3, #1
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	4b91      	ldr	r3, [pc, #580]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eaf0:	701a      	strb	r2, [r3, #0]
 800eaf2:	e05c      	b.n	800ebae <Shortest_Run_Judge+0x3b6>
	  			  }
	  			  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800eaf4:	4b8e      	ldr	r3, [pc, #568]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	4b8e      	ldr	r3, [pc, #568]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	4618      	mov	r0, r3
 800eb00:	4a8d      	ldr	r2, [pc, #564]	; (800ed38 <Shortest_Run_Judge+0x540>)
 800eb02:	460b      	mov	r3, r1
 800eb04:	00db      	lsls	r3, r3, #3
 800eb06:	440b      	add	r3, r1
 800eb08:	4403      	add	r3, r0
 800eb0a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800eb0e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d12b      	bne.n	800eb70 <Shortest_Run_Judge+0x378>
 800eb18:	4b85      	ldr	r3, [pc, #532]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	4b85      	ldr	r3, [pc, #532]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	1e5a      	subs	r2, r3, #1
 800eb24:	4985      	ldr	r1, [pc, #532]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800eb26:	4603      	mov	r3, r0
 800eb28:	00db      	lsls	r3, r3, #3
 800eb2a:	4403      	add	r3, r0
 800eb2c:	440b      	add	r3, r1
 800eb2e:	4413      	add	r3, r2
 800eb30:	781a      	ldrb	r2, [r3, #0]
 800eb32:	4b7f      	ldr	r3, [pc, #508]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	4618      	mov	r0, r3
 800eb38:	4b7e      	ldr	r3, [pc, #504]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	461c      	mov	r4, r3
 800eb3e:	497f      	ldr	r1, [pc, #508]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800eb40:	4603      	mov	r3, r0
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	4403      	add	r3, r0
 800eb46:	440b      	add	r3, r1
 800eb48:	4423      	add	r3, r4
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d20f      	bcs.n	800eb70 <Shortest_Run_Judge+0x378>
 800eb50:	4b78      	ldr	r3, [pc, #480]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00b      	beq.n	800eb70 <Shortest_Run_Judge+0x378>
	  				  //右?��?
	  				  R_turn_select();
 800eb58:	f7fc ff96 	bl	800ba88 <R_turn_select>
	  		       	  my_direction = south;
 800eb5c:	4b78      	ldr	r3, [pc, #480]	; (800ed40 <Shortest_Run_Judge+0x548>)
 800eb5e:	2202      	movs	r2, #2
 800eb60:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800eb62:	4b74      	ldr	r3, [pc, #464]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	4b72      	ldr	r3, [pc, #456]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800eb6c:	701a      	strb	r2, [r3, #0]
 800eb6e:	e01e      	b.n	800ebae <Shortest_Run_Judge+0x3b6>
	  			  }
	  			  else {
	  				  //後西
	  		          Decelerate();
 800eb70:	f7fc f8ba 	bl	800ace8 <Decelerate>
	  		          wait(0.3);;
 800eb74:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 800ed28 <Shortest_Run_Judge+0x530>
 800eb78:	f7fb ff86 	bl	800aa88 <wait>

	  		          if(mode.execution == 1)
 800eb7c:	4b71      	ldr	r3, [pc, #452]	; (800ed44 <Shortest_Run_Judge+0x54c>)
 800eb7e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d101      	bne.n	800eb8a <Shortest_Run_Judge+0x392>
	  		        	  Motor_PWM_Stop();
 800eb86:	f7fb fa35 	bl	8009ff4 <Motor_PWM_Stop>

	  		  	      rotate180();
 800eb8a:	f7fc fe9b 	bl	800b8c4 <rotate180>
	  		  	      wait(0.3);;
 800eb8e:	ed9f 0b66 	vldr	d0, [pc, #408]	; 800ed28 <Shortest_Run_Judge+0x530>
 800eb92:	f7fb ff79 	bl	800aa88 <wait>
	  		       	  Accelerate();
 800eb96:	f7fb fff7 	bl	800ab88 <Accelerate>

	  		       	  my_direction = west;
 800eb9a:	4b69      	ldr	r3, [pc, #420]	; (800ed40 <Shortest_Run_Judge+0x548>)
 800eb9c:	2203      	movs	r2, #3
 800eb9e:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800eba0:	4b63      	ldr	r3, [pc, #396]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	3b01      	subs	r3, #1
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	4b61      	ldr	r3, [pc, #388]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ebaa:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800ebac:	e1c7      	b.n	800ef3e <Shortest_Run_Judge+0x746>
 800ebae:	e1c6      	b.n	800ef3e <Shortest_Run_Judge+0x746>

	  		  case south:

	  			  if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800ebb0:	4b5f      	ldr	r3, [pc, #380]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	4b5f      	ldr	r3, [pc, #380]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	4a5e      	ldr	r2, [pc, #376]	; (800ed38 <Shortest_Run_Judge+0x540>)
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	00db      	lsls	r3, r3, #3
 800ebc2:	440b      	add	r3, r1
 800ebc4:	4403      	add	r3, r0
 800ebc6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ebca:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d12b      	bne.n	800ec2c <Shortest_Run_Judge+0x434>
 800ebd4:	4b56      	ldr	r3, [pc, #344]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	4b56      	ldr	r3, [pc, #344]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	1e5a      	subs	r2, r3, #1
 800ebe0:	4956      	ldr	r1, [pc, #344]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	00db      	lsls	r3, r3, #3
 800ebe6:	4403      	add	r3, r0
 800ebe8:	440b      	add	r3, r1
 800ebea:	4413      	add	r3, r2
 800ebec:	781a      	ldrb	r2, [r3, #0]
 800ebee:	4b50      	ldr	r3, [pc, #320]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	4b4f      	ldr	r3, [pc, #316]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	461c      	mov	r4, r3
 800ebfa:	4950      	ldr	r1, [pc, #320]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	4403      	add	r3, r0
 800ec02:	440b      	add	r3, r1
 800ec04:	4423      	add	r3, r4
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d20f      	bcs.n	800ec2c <Shortest_Run_Judge+0x434>
 800ec0c:	4b49      	ldr	r3, [pc, #292]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00b      	beq.n	800ec2c <Shortest_Run_Judge+0x434>
	  				  //前南
	  				  straight();
 800ec14:	f7fc f920 	bl	800ae58 <straight>
	  		       	  my_direction = south;
 800ec18:	4b49      	ldr	r3, [pc, #292]	; (800ed40 <Shortest_Run_Judge+0x548>)
 800ec1a:	2202      	movs	r2, #2
 800ec1c:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800ec1e:	4b45      	ldr	r3, [pc, #276]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	3b01      	subs	r3, #1
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	4b43      	ldr	r3, [pc, #268]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ec28:	701a      	strb	r2, [r3, #0]
 800ec2a:	e0ac      	b.n	800ed86 <Shortest_Run_Judge+0x58e>
	  			  }
	  			  else if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800ec2c:	4b40      	ldr	r3, [pc, #256]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	4619      	mov	r1, r3
 800ec32:	4b40      	ldr	r3, [pc, #256]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	4618      	mov	r0, r3
 800ec38:	4a3f      	ldr	r2, [pc, #252]	; (800ed38 <Shortest_Run_Judge+0x540>)
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	00db      	lsls	r3, r3, #3
 800ec3e:	440b      	add	r3, r1
 800ec40:	4403      	add	r3, r0
 800ec42:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ec46:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d12b      	bne.n	800eca8 <Shortest_Run_Judge+0x4b0>
 800ec50:	4b37      	ldr	r3, [pc, #220]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	1c5a      	adds	r2, r3, #1
 800ec56:	4b37      	ldr	r3, [pc, #220]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	4937      	ldr	r1, [pc, #220]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800ec5e:	4613      	mov	r3, r2
 800ec60:	00db      	lsls	r3, r3, #3
 800ec62:	4413      	add	r3, r2
 800ec64:	440b      	add	r3, r1
 800ec66:	4403      	add	r3, r0
 800ec68:	781a      	ldrb	r2, [r3, #0]
 800ec6a:	4b31      	ldr	r3, [pc, #196]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	4b30      	ldr	r3, [pc, #192]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	461c      	mov	r4, r3
 800ec76:	4931      	ldr	r1, [pc, #196]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800ec78:	4603      	mov	r3, r0
 800ec7a:	00db      	lsls	r3, r3, #3
 800ec7c:	4403      	add	r3, r0
 800ec7e:	440b      	add	r3, r1
 800ec80:	4423      	add	r3, r4
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d20f      	bcs.n	800eca8 <Shortest_Run_Judge+0x4b0>
 800ec88:	4b29      	ldr	r3, [pc, #164]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	2b07      	cmp	r3, #7
 800ec8e:	d80b      	bhi.n	800eca8 <Shortest_Run_Judge+0x4b0>
	  				  //左東
	  				  L_turn_select();
 800ec90:	f7fc ff3e 	bl	800bb10 <L_turn_select>
	  		       	  my_direction = east;
 800ec94:	4b2a      	ldr	r3, [pc, #168]	; (800ed40 <Shortest_Run_Judge+0x548>)
 800ec96:	2201      	movs	r2, #1
 800ec98:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800ec9a:	4b25      	ldr	r3, [pc, #148]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	b2da      	uxtb	r2, r3
 800eca2:	4b23      	ldr	r3, [pc, #140]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800eca4:	701a      	strb	r2, [r3, #0]
 800eca6:	e06e      	b.n	800ed86 <Shortest_Run_Judge+0x58e>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800eca8:	4b21      	ldr	r3, [pc, #132]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	4619      	mov	r1, r3
 800ecae:	4b21      	ldr	r3, [pc, #132]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	4a20      	ldr	r2, [pc, #128]	; (800ed38 <Shortest_Run_Judge+0x540>)
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	00db      	lsls	r3, r3, #3
 800ecba:	440b      	add	r3, r1
 800ecbc:	4403      	add	r3, r0
 800ecbe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ecc2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d13d      	bne.n	800ed48 <Shortest_Run_Judge+0x550>
 800eccc:	4b18      	ldr	r3, [pc, #96]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	1e5a      	subs	r2, r3, #1
 800ecd2:	4b18      	ldr	r3, [pc, #96]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	4918      	ldr	r1, [pc, #96]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800ecda:	4613      	mov	r3, r2
 800ecdc:	00db      	lsls	r3, r3, #3
 800ecde:	4413      	add	r3, r2
 800ece0:	440b      	add	r3, r1
 800ece2:	4403      	add	r3, r0
 800ece4:	781a      	ldrb	r2, [r3, #0]
 800ece6:	4b12      	ldr	r3, [pc, #72]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	4618      	mov	r0, r3
 800ecec:	4b11      	ldr	r3, [pc, #68]	; (800ed34 <Shortest_Run_Judge+0x53c>)
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	461c      	mov	r4, r3
 800ecf2:	4912      	ldr	r1, [pc, #72]	; (800ed3c <Shortest_Run_Judge+0x544>)
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	00db      	lsls	r3, r3, #3
 800ecf8:	4403      	add	r3, r0
 800ecfa:	440b      	add	r3, r1
 800ecfc:	4423      	add	r3, r4
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d221      	bcs.n	800ed48 <Shortest_Run_Judge+0x550>
 800ed04:	4b0a      	ldr	r3, [pc, #40]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d01d      	beq.n	800ed48 <Shortest_Run_Judge+0x550>
	  				  //右西
	  				  R_turn_select();
 800ed0c:	f7fc febc 	bl	800ba88 <R_turn_select>
	  		       	  my_direction = west;
 800ed10:	4b0b      	ldr	r3, [pc, #44]	; (800ed40 <Shortest_Run_Judge+0x548>)
 800ed12:	2203      	movs	r2, #3
 800ed14:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800ed16:	4b06      	ldr	r3, [pc, #24]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	b2da      	uxtb	r2, r3
 800ed1e:	4b04      	ldr	r3, [pc, #16]	; (800ed30 <Shortest_Run_Judge+0x538>)
 800ed20:	701a      	strb	r2, [r3, #0]
 800ed22:	e030      	b.n	800ed86 <Shortest_Run_Judge+0x58e>
 800ed24:	f3af 8000 	nop.w
 800ed28:	33333333 	.word	0x33333333
 800ed2c:	3fd33333 	.word	0x3fd33333
 800ed30:	2000030c 	.word	0x2000030c
 800ed34:	2000030d 	.word	0x2000030d
 800ed38:	20004f0c 	.word	0x20004f0c
 800ed3c:	20004a60 	.word	0x20004a60
 800ed40:	2000449a 	.word	0x2000449a
 800ed44:	20000074 	.word	0x20000074
	  			  }
	  			  else {
	  				  //後北
	  		          Decelerate();
 800ed48:	f7fb ffce 	bl	800ace8 <Decelerate>
	  		          wait(0.3);;
 800ed4c:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 800ef48 <Shortest_Run_Judge+0x750>
 800ed50:	f7fb fe9a 	bl	800aa88 <wait>

	  		          if(mode.execution == 1)
 800ed54:	4b7e      	ldr	r3, [pc, #504]	; (800ef50 <Shortest_Run_Judge+0x758>)
 800ed56:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d101      	bne.n	800ed62 <Shortest_Run_Judge+0x56a>
	  		        	  Motor_PWM_Stop();
 800ed5e:	f7fb f949 	bl	8009ff4 <Motor_PWM_Stop>

	  		  	      rotate180();
 800ed62:	f7fc fdaf 	bl	800b8c4 <rotate180>
	  		  	      wait(0.3);;
 800ed66:	ed9f 0b78 	vldr	d0, [pc, #480]	; 800ef48 <Shortest_Run_Judge+0x750>
 800ed6a:	f7fb fe8d 	bl	800aa88 <wait>
	  		       	  Accelerate();
 800ed6e:	f7fb ff0b 	bl	800ab88 <Accelerate>

	  		       	  my_direction = north;
 800ed72:	4b78      	ldr	r3, [pc, #480]	; (800ef54 <Shortest_Run_Judge+0x75c>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800ed78:	4b77      	ldr	r3, [pc, #476]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	4b75      	ldr	r3, [pc, #468]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ed82:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800ed84:	e0db      	b.n	800ef3e <Shortest_Run_Judge+0x746>
 800ed86:	e0da      	b.n	800ef3e <Shortest_Run_Judge+0x746>

	  		  case west:

	  			  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800ed88:	4b74      	ldr	r3, [pc, #464]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	4b72      	ldr	r3, [pc, #456]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	4a72      	ldr	r2, [pc, #456]	; (800ef60 <Shortest_Run_Judge+0x768>)
 800ed96:	460b      	mov	r3, r1
 800ed98:	00db      	lsls	r3, r3, #3
 800ed9a:	440b      	add	r3, r1
 800ed9c:	4403      	add	r3, r0
 800ed9e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800eda2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d12b      	bne.n	800ee04 <Shortest_Run_Judge+0x60c>
 800edac:	4b6b      	ldr	r3, [pc, #428]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	1e5a      	subs	r2, r3, #1
 800edb2:	4b69      	ldr	r3, [pc, #420]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	4618      	mov	r0, r3
 800edb8:	496a      	ldr	r1, [pc, #424]	; (800ef64 <Shortest_Run_Judge+0x76c>)
 800edba:	4613      	mov	r3, r2
 800edbc:	00db      	lsls	r3, r3, #3
 800edbe:	4413      	add	r3, r2
 800edc0:	440b      	add	r3, r1
 800edc2:	4403      	add	r3, r0
 800edc4:	781a      	ldrb	r2, [r3, #0]
 800edc6:	4b65      	ldr	r3, [pc, #404]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	4618      	mov	r0, r3
 800edcc:	4b62      	ldr	r3, [pc, #392]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	461c      	mov	r4, r3
 800edd2:	4964      	ldr	r1, [pc, #400]	; (800ef64 <Shortest_Run_Judge+0x76c>)
 800edd4:	4603      	mov	r3, r0
 800edd6:	00db      	lsls	r3, r3, #3
 800edd8:	4403      	add	r3, r0
 800edda:	440b      	add	r3, r1
 800eddc:	4423      	add	r3, r4
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d20f      	bcs.n	800ee04 <Shortest_Run_Judge+0x60c>
 800ede4:	4b5d      	ldr	r3, [pc, #372]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00b      	beq.n	800ee04 <Shortest_Run_Judge+0x60c>
	  				  //前西
	  				  straight();
 800edec:	f7fc f834 	bl	800ae58 <straight>
	  		       	  my_direction = west;
 800edf0:	4b58      	ldr	r3, [pc, #352]	; (800ef54 <Shortest_Run_Judge+0x75c>)
 800edf2:	2203      	movs	r2, #3
 800edf4:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800edf6:	4b59      	ldr	r3, [pc, #356]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	3b01      	subs	r3, #1
 800edfc:	b2da      	uxtb	r2, r3
 800edfe:	4b57      	ldr	r3, [pc, #348]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ee00:	701a      	strb	r2, [r3, #0]
 800ee02:	e09a      	b.n	800ef3a <Shortest_Run_Judge+0x742>
	  			  }
	  			  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800ee04:	4b55      	ldr	r3, [pc, #340]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	4b53      	ldr	r3, [pc, #332]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	4a53      	ldr	r2, [pc, #332]	; (800ef60 <Shortest_Run_Judge+0x768>)
 800ee12:	460b      	mov	r3, r1
 800ee14:	00db      	lsls	r3, r3, #3
 800ee16:	440b      	add	r3, r1
 800ee18:	4403      	add	r3, r0
 800ee1a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ee1e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d12b      	bne.n	800ee80 <Shortest_Run_Judge+0x688>
 800ee28:	4b4c      	ldr	r3, [pc, #304]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	4b4a      	ldr	r3, [pc, #296]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	1e5a      	subs	r2, r3, #1
 800ee34:	494b      	ldr	r1, [pc, #300]	; (800ef64 <Shortest_Run_Judge+0x76c>)
 800ee36:	4603      	mov	r3, r0
 800ee38:	00db      	lsls	r3, r3, #3
 800ee3a:	4403      	add	r3, r0
 800ee3c:	440b      	add	r3, r1
 800ee3e:	4413      	add	r3, r2
 800ee40:	781a      	ldrb	r2, [r3, #0]
 800ee42:	4b46      	ldr	r3, [pc, #280]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	4618      	mov	r0, r3
 800ee48:	4b43      	ldr	r3, [pc, #268]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	461c      	mov	r4, r3
 800ee4e:	4945      	ldr	r1, [pc, #276]	; (800ef64 <Shortest_Run_Judge+0x76c>)
 800ee50:	4603      	mov	r3, r0
 800ee52:	00db      	lsls	r3, r3, #3
 800ee54:	4403      	add	r3, r0
 800ee56:	440b      	add	r3, r1
 800ee58:	4423      	add	r3, r4
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d20f      	bcs.n	800ee80 <Shortest_Run_Judge+0x688>
 800ee60:	4b3d      	ldr	r3, [pc, #244]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00b      	beq.n	800ee80 <Shortest_Run_Judge+0x688>
	  				  //左?��?
	  				  L_turn_select();
 800ee68:	f7fc fe52 	bl	800bb10 <L_turn_select>
	  		       	  my_direction = south;
 800ee6c:	4b39      	ldr	r3, [pc, #228]	; (800ef54 <Shortest_Run_Judge+0x75c>)
 800ee6e:	2202      	movs	r2, #2
 800ee70:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800ee72:	4b39      	ldr	r3, [pc, #228]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	3b01      	subs	r3, #1
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	4b37      	ldr	r3, [pc, #220]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ee7c:	701a      	strb	r2, [r3, #0]
 800ee7e:	e05c      	b.n	800ef3a <Shortest_Run_Judge+0x742>
	  			  }
	  			  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800ee80:	4b36      	ldr	r3, [pc, #216]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	4619      	mov	r1, r3
 800ee86:	4b34      	ldr	r3, [pc, #208]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	4a34      	ldr	r2, [pc, #208]	; (800ef60 <Shortest_Run_Judge+0x768>)
 800ee8e:	460b      	mov	r3, r1
 800ee90:	00db      	lsls	r3, r3, #3
 800ee92:	440b      	add	r3, r1
 800ee94:	4403      	add	r3, r0
 800ee96:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ee9a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d12b      	bne.n	800eefc <Shortest_Run_Judge+0x704>
 800eea4:	4b2d      	ldr	r3, [pc, #180]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	4b2b      	ldr	r3, [pc, #172]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	1c5a      	adds	r2, r3, #1
 800eeb0:	492c      	ldr	r1, [pc, #176]	; (800ef64 <Shortest_Run_Judge+0x76c>)
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	00db      	lsls	r3, r3, #3
 800eeb6:	4403      	add	r3, r0
 800eeb8:	440b      	add	r3, r1
 800eeba:	4413      	add	r3, r2
 800eebc:	781a      	ldrb	r2, [r3, #0]
 800eebe:	4b27      	ldr	r3, [pc, #156]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	4618      	mov	r0, r3
 800eec4:	4b24      	ldr	r3, [pc, #144]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	461c      	mov	r4, r3
 800eeca:	4926      	ldr	r1, [pc, #152]	; (800ef64 <Shortest_Run_Judge+0x76c>)
 800eecc:	4603      	mov	r3, r0
 800eece:	00db      	lsls	r3, r3, #3
 800eed0:	4403      	add	r3, r0
 800eed2:	440b      	add	r3, r1
 800eed4:	4423      	add	r3, r4
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d20f      	bcs.n	800eefc <Shortest_Run_Judge+0x704>
 800eedc:	4b1e      	ldr	r3, [pc, #120]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	2b07      	cmp	r3, #7
 800eee2:	d80b      	bhi.n	800eefc <Shortest_Run_Judge+0x704>
	  				  //右?��?
	  				  R_turn_select();
 800eee4:	f7fc fdd0 	bl	800ba88 <R_turn_select>
	  		       	  my_direction = north;
 800eee8:	4b1a      	ldr	r3, [pc, #104]	; (800ef54 <Shortest_Run_Judge+0x75c>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800eeee:	4b1a      	ldr	r3, [pc, #104]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	3301      	adds	r3, #1
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	4b18      	ldr	r3, [pc, #96]	; (800ef58 <Shortest_Run_Judge+0x760>)
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	e01e      	b.n	800ef3a <Shortest_Run_Judge+0x742>
	  			  }
	  			  else {
	  				  //後東
	  		          Decelerate();
 800eefc:	f7fb fef4 	bl	800ace8 <Decelerate>
	  		          wait(0.3);;
 800ef00:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800ef48 <Shortest_Run_Judge+0x750>
 800ef04:	f7fb fdc0 	bl	800aa88 <wait>

	  		          if(mode.execution == 1)
 800ef08:	4b11      	ldr	r3, [pc, #68]	; (800ef50 <Shortest_Run_Judge+0x758>)
 800ef0a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d101      	bne.n	800ef16 <Shortest_Run_Judge+0x71e>
	  		        	  Motor_PWM_Stop();
 800ef12:	f7fb f86f 	bl	8009ff4 <Motor_PWM_Stop>

	  		  	      rotate180();
 800ef16:	f7fc fcd5 	bl	800b8c4 <rotate180>
	  		  	      wait(0.3);;
 800ef1a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800ef48 <Shortest_Run_Judge+0x750>
 800ef1e:	f7fb fdb3 	bl	800aa88 <wait>
	  		       	  Accelerate();
 800ef22:	f7fb fe31 	bl	800ab88 <Accelerate>

	  		       	  my_direction = east;
 800ef26:	4b0b      	ldr	r3, [pc, #44]	; (800ef54 <Shortest_Run_Judge+0x75c>)
 800ef28:	2201      	movs	r2, #1
 800ef2a:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800ef2c:	4b0b      	ldr	r3, [pc, #44]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	3301      	adds	r3, #1
 800ef32:	b2da      	uxtb	r2, r3
 800ef34:	4b09      	ldr	r3, [pc, #36]	; (800ef5c <Shortest_Run_Judge+0x764>)
 800ef36:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800ef38:	e001      	b.n	800ef3e <Shortest_Run_Judge+0x746>
 800ef3a:	e000      	b.n	800ef3e <Shortest_Run_Judge+0x746>

	  		  default:
	  			  break;
 800ef3c:	bf00      	nop
	  		  }//swtich end
}
 800ef3e:	bf00      	nop
 800ef40:	bd98      	pop	{r3, r4, r7, pc}
 800ef42:	bf00      	nop
 800ef44:	f3af 8000 	nop.w
 800ef48:	33333333 	.word	0x33333333
 800ef4c:	3fd33333 	.word	0x3fd33333
 800ef50:	20000074 	.word	0x20000074
 800ef54:	2000449a 	.word	0x2000449a
 800ef58:	2000030d 	.word	0x2000030d
 800ef5c:	2000030c 	.word	0x2000030c
 800ef60:	20004f0c 	.word	0x20004f0c
 800ef64:	20004a60 	.word	0x20004a60

0800ef68 <Shortest_Run>:
void Shortest_Run(){
 800ef68:	b598      	push	{r3, r4, r7, lr}
 800ef6a:	af00      	add	r7, sp, #0

	//ROMの迷路?��?ータをRAMに入れる
	Map_Load();
 800ef6c:	f7fe ff58 	bl	800de20 <Map_Load>

	//座標�??��初期?��?
	x = y = 0;
 800ef70:	4b35      	ldr	r3, [pc, #212]	; (800f048 <Shortest_Run+0xe0>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	701a      	strb	r2, [r3, #0]
 800ef76:	4b34      	ldr	r3, [pc, #208]	; (800f048 <Shortest_Run+0xe0>)
 800ef78:	781a      	ldrb	r2, [r3, #0]
 800ef7a:	4b34      	ldr	r3, [pc, #208]	; (800f04c <Shortest_Run+0xe4>)
 800ef7c:	701a      	strb	r2, [r3, #0]
	//方向�??��初期?��?
	my_direction=north;
 800ef7e:	4b34      	ldr	r3, [pc, #208]	; (800f050 <Shortest_Run+0xe8>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	701a      	strb	r2, [r3, #0]

	//?��?初�??��直進
	Start_Accel();
 800ef84:	f7fb fda8 	bl	800aad8 <Start_Accel>

	x = 0;
 800ef88:	4b30      	ldr	r3, [pc, #192]	; (800f04c <Shortest_Run+0xe4>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800ef8e:	4b2e      	ldr	r3, [pc, #184]	; (800f048 <Shortest_Run+0xe0>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	3301      	adds	r3, #1
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	4b2c      	ldr	r3, [pc, #176]	; (800f048 <Shortest_Run+0xe0>)
 800ef98:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800ef9a:	e001      	b.n	800efa0 <Shortest_Run+0x38>
		Shortest_Run_Judge();
 800ef9c:	f7ff fc2c 	bl	800e7f8 <Shortest_Run_Judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800efa0:	4b2a      	ldr	r3, [pc, #168]	; (800f04c <Shortest_Run+0xe4>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b02      	cmp	r3, #2
 800efa6:	d9f9      	bls.n	800ef9c <Shortest_Run+0x34>
 800efa8:	4b28      	ldr	r3, [pc, #160]	; (800f04c <Shortest_Run+0xe4>)
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	2b03      	cmp	r3, #3
 800efae:	d8f5      	bhi.n	800ef9c <Shortest_Run+0x34>
 800efb0:	4b25      	ldr	r3, [pc, #148]	; (800f048 <Shortest_Run+0xe0>)
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	d9f1      	bls.n	800ef9c <Shortest_Run+0x34>
 800efb8:	4b23      	ldr	r3, [pc, #140]	; (800f048 <Shortest_Run+0xe0>)
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d8ed      	bhi.n	800ef9c <Shortest_Run+0x34>

	}
	goal_time[0] = timer*T1;
 800efc0:	4b24      	ldr	r3, [pc, #144]	; (800f054 <Shortest_Run+0xec>)
 800efc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efc6:	a31e      	add	r3, pc, #120	; (adr r3, 800f040 <Shortest_Run+0xd8>)
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	f7f9 fa4c 	bl	8008468 <__aeabi_dmul>
 800efd0:	4603      	mov	r3, r0
 800efd2:	460c      	mov	r4, r1
 800efd4:	4a20      	ldr	r2, [pc, #128]	; (800f058 <Shortest_Run+0xf0>)
 800efd6:	e9c2 3400 	strd	r3, r4, [r2]
	goal_time[1] = self_timer;
 800efda:	4b20      	ldr	r3, [pc, #128]	; (800f05c <Shortest_Run+0xf4>)
 800efdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800efe0:	4a1d      	ldr	r2, [pc, #116]	; (800f058 <Shortest_Run+0xf0>)
 800efe2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	      Decelerate();
 800efe6:	f7fb fe7f 	bl	800ace8 <Decelerate>
	      //wall_set();
	      Motor_PWM_Stop();
 800efea:	f7fb f803 	bl	8009ff4 <Motor_PWM_Stop>
	      mode.LED = 7;
 800efee:	4b1c      	ldr	r3, [pc, #112]	; (800f060 <Shortest_Run+0xf8>)
 800eff0:	2207      	movs	r2, #7
 800eff2:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800eff4:	f7fb fa72 	bl	800a4dc <LED_Change>
	      HAL_Delay(1000);
 800eff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800effc:	f002 f8cc 	bl	8011198 <HAL_Delay>
	      mapcopy();
 800f000:	f7fa fdca 	bl	8009b98 <mapcopy>
	      Flash_store();
 800f004:	f7fa ff58 	bl	8009eb8 <Flash_store>
	      mode.LED = 0;
 800f008:	4b15      	ldr	r3, [pc, #84]	; (800f060 <Shortest_Run+0xf8>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800f00e:	f7fb fa65 	bl	800a4dc <LED_Change>
	      while(1){
	    	  printf("小数のほ�? : %lf \r\n",goal_time[0]);
 800f012:	4b11      	ldr	r3, [pc, #68]	; (800f058 <Shortest_Run+0xf0>)
 800f014:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f018:	461a      	mov	r2, r3
 800f01a:	4623      	mov	r3, r4
 800f01c:	4811      	ldr	r0, [pc, #68]	; (800f064 <Shortest_Run+0xfc>)
 800f01e:	f007 fd63 	bl	8016ae8 <iprintf>
	    	  printf("整数のほ�? : %lf \r\n",goal_time[1]);
 800f022:	4b0d      	ldr	r3, [pc, #52]	; (800f058 <Shortest_Run+0xf0>)
 800f024:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800f028:	461a      	mov	r2, r3
 800f02a:	4623      	mov	r3, r4
 800f02c:	480e      	ldr	r0, [pc, #56]	; (800f068 <Shortest_Run+0x100>)
 800f02e:	f007 fd5b 	bl	8016ae8 <iprintf>
	    	  printf("\r\n");
 800f032:	480e      	ldr	r0, [pc, #56]	; (800f06c <Shortest_Run+0x104>)
 800f034:	f007 fdcc 	bl	8016bd0 <puts>
	    	  printf("小数のほ�? : %lf \r\n",goal_time[0]);
 800f038:	e7eb      	b.n	800f012 <Shortest_Run+0xaa>
 800f03a:	bf00      	nop
 800f03c:	f3af 8000 	nop.w
 800f040:	d2f1a9fc 	.word	0xd2f1a9fc
 800f044:	3f50624d 	.word	0x3f50624d
 800f048:	2000030d 	.word	0x2000030d
 800f04c:	2000030c 	.word	0x2000030c
 800f050:	2000449a 	.word	0x2000449a
 800f054:	200002e8 	.word	0x200002e8
 800f058:	20004ab8 	.word	0x20004ab8
 800f05c:	200002e0 	.word	0x200002e0
 800f060:	20000074 	.word	0x20000074
 800f064:	08018a70 	.word	0x08018a70
 800f068:	08018a8c 	.word	0x08018a8c
 800f06c:	08018950 	.word	0x08018950

0800f070 <HAL_ADC_ConvCpltCallback>:
	      }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* Adchandle) {
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]

}
 800f078:	bf00      	nop
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr
 800f084:	0000      	movs	r0, r0
	...

0800f088 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 割り込み0.05ms 20kHz
{
 800f088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f08c:	ed2d 8b02 	vpush	{d8}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
	//static double angular_velo=CURVE_SPEED*2/90;
	//static int k=0;
	static int k=0;
  if(htim == &htim1){
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4ab7      	ldr	r2, [pc, #732]	; (800f378 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	f040 84c0 	bne.w	800fa20 <HAL_TIM_PeriodElapsedCallback+0x998>
	  elapsed_time += T1;
 800f0a0:	4bb6      	ldr	r3, [pc, #728]	; (800f37c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800f0a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0a6:	a3b2      	add	r3, pc, #712	; (adr r3, 800f370 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	f7f9 f826 	bl	80080fc <__adddf3>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	4ab1      	ldr	r2, [pc, #708]	; (800f37c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800f0b6:	e9c2 3400 	strd	r3, r4, [r2]
	  switch(mode.interrupt){
 800f0ba:	4bb1      	ldr	r3, [pc, #708]	; (800f380 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800f0bc:	7a1b      	ldrb	r3, [r3, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d004      	beq.n	800f0cc <HAL_TIM_PeriodElapsedCallback+0x44>
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	f000 83cb 	beq.w	800f85e <HAL_TIM_PeriodElapsedCallback+0x7d6>
			}
			//モータ出力更新
			Motor_Switch(L_motor,R_motor);
			break;
		default:
			break;
 800f0c8:	f000 bcab 	b.w	800fa22 <HAL_TIM_PeriodElapsedCallback+0x99a>
      	EN3_L.count = TIM3 -> CNT;
 800f0cc:	4bad      	ldr	r3, [pc, #692]	; (800f384 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800f0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	4bad      	ldr	r3, [pc, #692]	; (800f388 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800f0d4:	601a      	str	r2, [r3, #0]
	    EN4_R.count = TIM4 -> CNT;
 800f0d6:	4bad      	ldr	r3, [pc, #692]	; (800f38c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800f0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0da:	461a      	mov	r2, r3
 800f0dc:	4bac      	ldr	r3, [pc, #688]	; (800f390 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800f0de:	601a      	str	r2, [r3, #0]
	    EN3_L.count = -(EN3_L.count - (30000-1));
 800f0e0:	4ba9      	ldr	r3, [pc, #676]	; (800f388 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f0e8:	332f      	adds	r3, #47	; 0x2f
 800f0ea:	4aa7      	ldr	r2, [pc, #668]	; (800f388 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800f0ec:	6013      	str	r3, [r2, #0]
	    EN4_R.count = -(EN4_R.count - (30000-1));
 800f0ee:	4ba8      	ldr	r3, [pc, #672]	; (800f390 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f0f6:	332f      	adds	r3, #47	; 0x2f
 800f0f8:	4aa5      	ldr	r2, [pc, #660]	; (800f390 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800f0fa:	6013      	str	r3, [r2, #0]
	    mode.enc = Encoder_Count(mode.enc);
 800f0fc:	4ba0      	ldr	r3, [pc, #640]	; (800f380 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800f0fe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f102:	b21b      	sxth	r3, r3
 800f104:	4618      	mov	r0, r3
 800f106:	f7fb fc71 	bl	800a9ec <Encoder_Count>
 800f10a:	4603      	mov	r3, r0
 800f10c:	b25a      	sxtb	r2, r3
 800f10e:	4b9c      	ldr	r3, [pc, #624]	; (800f380 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800f110:	70da      	strb	r2, [r3, #3]
	    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800f112:	4b9f      	ldr	r3, [pc, #636]	; (800f390 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	4b9c      	ldr	r3, [pc, #624]	; (800f388 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	441a      	add	r2, r3
 800f11c:	4b9d      	ldr	r3, [pc, #628]	; (800f394 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4413      	add	r3, r2
 800f122:	4a9c      	ldr	r2, [pc, #624]	; (800f394 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800f124:	6013      	str	r3, [r2, #0]
	    Encoder_Reset();
 800f126:	f7fb fc4d 	bl	800a9c4 <Encoder_Reset>
	    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800f12a:	4b97      	ldr	r3, [pc, #604]	; (800f388 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	ee07 3a90 	vmov	s15, r3
 800f132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f136:	eddf 0a98 	vldr	s1, [pc, #608]	; 800f398 <HAL_TIM_PeriodElapsedCallback+0x310>
 800f13a:	eeb0 0a67 	vmov.f32	s0, s15
 800f13e:	f7fb fc19 	bl	800a974 <Velocity_Get>
 800f142:	eef0 7a40 	vmov.f32	s15, s0
 800f146:	4b95      	ldr	r3, [pc, #596]	; (800f39c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800f148:	edc3 7a00 	vstr	s15, [r3]
		R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800f14c:	4b90      	ldr	r3, [pc, #576]	; (800f390 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	ee07 3a90 	vmov	s15, r3
 800f154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f158:	eddf 0a8f 	vldr	s1, [pc, #572]	; 800f398 <HAL_TIM_PeriodElapsedCallback+0x310>
 800f15c:	eeb0 0a67 	vmov.f32	s0, s15
 800f160:	f7fb fc08 	bl	800a974 <Velocity_Get>
 800f164:	eef0 7a40 	vmov.f32	s15, s0
 800f168:	4b8d      	ldr	r3, [pc, #564]	; (800f3a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800f16a:	edc3 7a00 	vstr	s15, [r3]
	    Body_velocity = (L_velocity + R_velocity) / 2; // (進んだパルス * パルスあたりに
 800f16e:	4b8b      	ldr	r3, [pc, #556]	; (800f39c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800f170:	ed93 7a00 	vldr	s14, [r3]
 800f174:	4b8a      	ldr	r3, [pc, #552]	; (800f3a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800f176:	edd3 7a00 	vldr	s15, [r3]
 800f17a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f17e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f186:	4b87      	ldr	r3, [pc, #540]	; (800f3a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800f188:	edc3 7a00 	vstr	s15, [r3]
	    imu_data = IMU_Get_Data();
 800f18c:	f7fa ff58 	bl	800a040 <IMU_Get_Data>
 800f190:	eeb0 7a40 	vmov.f32	s14, s0
 800f194:	eef0 7a60 	vmov.f32	s15, s1
 800f198:	4b83      	ldr	r3, [pc, #524]	; (800f3a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800f19a:	ed83 7b00 	vstr	d7, [r3]
	    switch(mode.control){
 800f19e:	4b78      	ldr	r3, [pc, #480]	; (800f380 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800f1a0:	795b      	ldrb	r3, [r3, #5]
 800f1a2:	2b06      	cmp	r3, #6
 800f1a4:	f200 8191 	bhi.w	800f4ca <HAL_TIM_PeriodElapsedCallback+0x442>
 800f1a8:	a201      	add	r2, pc, #4	; (adr r2, 800f1b0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800f1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ae:	bf00      	nop
 800f1b0:	0800f1cd 	.word	0x0800f1cd
 800f1b4:	0800f239 	.word	0x0800f239
 800f1b8:	0800f2a5 	.word	0x0800f2a5
 800f1bc:	0800f311 	.word	0x0800f311
 800f1c0:	0800f3d1 	.word	0x0800f3d1
 800f1c4:	0800f449 	.word	0x0800f449
 800f1c8:	0800f455 	.word	0x0800f455
	    	   Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
 800f1cc:	4b77      	ldr	r3, [pc, #476]	; (800f3ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800f1ce:	edd3 7a00 	vldr	s15, [r3]
 800f1d2:	4b77      	ldr	r3, [pc, #476]	; (800f3b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800f1d4:	ed93 7a00 	vldr	s14, [r3]
 800f1d8:	4b76      	ldr	r3, [pc, #472]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f1da:	edd3 6a00 	vldr	s13, [r3]
 800f1de:	4b75      	ldr	r3, [pc, #468]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f1e0:	ed93 6a01 	vldr	s12, [r3, #4]
 800f1e4:	4b73      	ldr	r3, [pc, #460]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f1e6:	edd3 5a02 	vldr	s11, [r3, #8]
 800f1ea:	eef0 2a65 	vmov.f32	s5, s11
 800f1ee:	eeb0 2a46 	vmov.f32	s4, s12
 800f1f2:	eef0 1a66 	vmov.f32	s3, s13
 800f1f6:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800f3b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 800f1fa:	eef0 0a47 	vmov.f32	s1, s14
 800f1fe:	eeb0 0a67 	vmov.f32	s0, s15
 800f202:	f7f9 fdd9 	bl	8008db8 <Side_Wall_Control>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800f206:	4b6d      	ldr	r3, [pc, #436]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f208:	edd3 7a00 	vldr	s15, [r3]
 800f20c:	4b6b      	ldr	r3, [pc, #428]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f20e:	ed93 7a01 	vldr	s14, [r3, #4]
 800f212:	4b6a      	ldr	r3, [pc, #424]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f214:	edd3 6a02 	vldr	s13, [r3, #8]
 800f218:	eef0 1a66 	vmov.f32	s3, s13
 800f21c:	eeb0 1a47 	vmov.f32	s2, s14
 800f220:	eef0 0a67 	vmov.f32	s1, s15
 800f224:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800f398 <HAL_TIM_PeriodElapsedCallback+0x310>
 800f228:	f7fa f9ba 	bl	80095a0 <Enc_Velo_Control>
	    	   mode.imu = 0;
 800f22c:	4a54      	ldr	r2, [pc, #336]	; (800f380 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800f22e:	7993      	ldrb	r3, [r2, #6]
 800f230:	f36f 0300 	bfc	r3, #0, #1
 800f234:	7193      	strb	r3, [r2, #6]
	    	   break;
 800f236:	e149      	b.n	800f4cc <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   Left_Wall_Control(distance_wall_left, fl_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800f238:	4b61      	ldr	r3, [pc, #388]	; (800f3c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800f23a:	edd3 7a00 	vldr	s15, [r3]
 800f23e:	4b5c      	ldr	r3, [pc, #368]	; (800f3b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800f240:	ed93 7a00 	vldr	s14, [r3]
 800f244:	4b5b      	ldr	r3, [pc, #364]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f246:	edd3 6a00 	vldr	s13, [r3]
 800f24a:	4b5a      	ldr	r3, [pc, #360]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f24c:	ed93 6a01 	vldr	s12, [r3, #4]
 800f250:	4b58      	ldr	r3, [pc, #352]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f252:	edd3 5a02 	vldr	s11, [r3, #8]
 800f256:	eef0 2a65 	vmov.f32	s5, s11
 800f25a:	eeb0 2a46 	vmov.f32	s4, s12
 800f25e:	eef0 1a66 	vmov.f32	s3, s13
 800f262:	ed9f 1a55 	vldr	s2, [pc, #340]	; 800f3b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 800f266:	eef0 0a47 	vmov.f32	s1, s14
 800f26a:	eeb0 0a67 	vmov.f32	s0, s15
 800f26e:	f7f9 fe5d 	bl	8008f2c <Left_Wall_Control>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800f272:	4b52      	ldr	r3, [pc, #328]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f274:	edd3 7a00 	vldr	s15, [r3]
 800f278:	4b50      	ldr	r3, [pc, #320]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f27a:	ed93 7a01 	vldr	s14, [r3, #4]
 800f27e:	4b4f      	ldr	r3, [pc, #316]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f280:	edd3 6a02 	vldr	s13, [r3, #8]
 800f284:	eef0 1a66 	vmov.f32	s3, s13
 800f288:	eeb0 1a47 	vmov.f32	s2, s14
 800f28c:	eef0 0a67 	vmov.f32	s1, s15
 800f290:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800f398 <HAL_TIM_PeriodElapsedCallback+0x310>
 800f294:	f7fa f984 	bl	80095a0 <Enc_Velo_Control>
	    	   mode.imu = 0;
 800f298:	4a39      	ldr	r2, [pc, #228]	; (800f380 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800f29a:	7993      	ldrb	r3, [r2, #6]
 800f29c:	f36f 0300 	bfc	r3, #0, #1
 800f2a0:	7193      	strb	r3, [r2, #6]
	    	   break;
 800f2a2:	e113      	b.n	800f4cc <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   Right_Wall_Control(distance_wall_right, fr_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800f2a4:	4b47      	ldr	r3, [pc, #284]	; (800f3c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800f2a6:	edd3 7a00 	vldr	s15, [r3]
 800f2aa:	4b40      	ldr	r3, [pc, #256]	; (800f3ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800f2ac:	ed93 7a00 	vldr	s14, [r3]
 800f2b0:	4b40      	ldr	r3, [pc, #256]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f2b2:	edd3 6a00 	vldr	s13, [r3]
 800f2b6:	4b3f      	ldr	r3, [pc, #252]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f2b8:	ed93 6a01 	vldr	s12, [r3, #4]
 800f2bc:	4b3d      	ldr	r3, [pc, #244]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800f2be:	edd3 5a02 	vldr	s11, [r3, #8]
 800f2c2:	eef0 2a65 	vmov.f32	s5, s11
 800f2c6:	eeb0 2a46 	vmov.f32	s4, s12
 800f2ca:	eef0 1a66 	vmov.f32	s3, s13
 800f2ce:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 800f3b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 800f2d2:	eef0 0a47 	vmov.f32	s1, s14
 800f2d6:	eeb0 0a67 	vmov.f32	s0, s15
 800f2da:	f7f9 feeb 	bl	80090b4 <Right_Wall_Control>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800f2de:	4b37      	ldr	r3, [pc, #220]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f2e0:	edd3 7a00 	vldr	s15, [r3]
 800f2e4:	4b35      	ldr	r3, [pc, #212]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f2e6:	ed93 7a01 	vldr	s14, [r3, #4]
 800f2ea:	4b34      	ldr	r3, [pc, #208]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800f2ec:	edd3 6a02 	vldr	s13, [r3, #8]
 800f2f0:	eef0 1a66 	vmov.f32	s3, s13
 800f2f4:	eeb0 1a47 	vmov.f32	s2, s14
 800f2f8:	eef0 0a67 	vmov.f32	s1, s15
 800f2fc:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800f398 <HAL_TIM_PeriodElapsedCallback+0x310>
 800f300:	f7fa f94e 	bl	80095a0 <Enc_Velo_Control>
	    	   mode.imu = 0;
 800f304:	4a1e      	ldr	r2, [pc, #120]	; (800f380 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800f306:	7993      	ldrb	r3, [r2, #6]
 800f308:	f36f 0300 	bfc	r3, #0, #1
 800f30c:	7193      	strb	r3, [r2, #6]
	    	   break;
 800f30e:	e0dd      	b.n	800f4cc <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800f310:	4b2d      	ldr	r3, [pc, #180]	; (800f3c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4618      	mov	r0, r3
 800f316:	f7f9 f84f 	bl	80083b8 <__aeabi_f2d>
 800f31a:	4604      	mov	r4, r0
 800f31c:	460d      	mov	r5, r1
 800f31e:	4b22      	ldr	r3, [pc, #136]	; (800f3a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800f320:	ed93 8b00 	vldr	d8, [r3]
 800f324:	4b29      	ldr	r3, [pc, #164]	; (800f3cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7f9 f845 	bl	80083b8 <__aeabi_f2d>
 800f32e:	4680      	mov	r8, r0
 800f330:	4689      	mov	r9, r1
 800f332:	4b26      	ldr	r3, [pc, #152]	; (800f3cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	4618      	mov	r0, r3
 800f338:	f7f9 f83e 	bl	80083b8 <__aeabi_f2d>
 800f33c:	4682      	mov	sl, r0
 800f33e:	468b      	mov	fp, r1
 800f340:	4b22      	ldr	r3, [pc, #136]	; (800f3cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	4618      	mov	r0, r3
 800f346:	f7f9 f837 	bl	80083b8 <__aeabi_f2d>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	ec43 2b15 	vmov	d5, r2, r3
 800f352:	ec4b ab14 	vmov	d4, sl, fp
 800f356:	ec49 8b13 	vmov	d3, r8, r9
 800f35a:	ed9f 2b05 	vldr	d2, [pc, #20]	; 800f370 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 800f35e:	eeb0 1a48 	vmov.f32	s2, s16
 800f362:	eef0 1a68 	vmov.f32	s3, s17
 800f366:	ec45 4b10 	vmov	d0, r4, r5
 800f36a:	f7fa ff2d 	bl	800a1c8 <IMU_Control>
	    	   break;
 800f36e:	e0ad      	b.n	800f4cc <HAL_TIM_PeriodElapsedCallback+0x444>
 800f370:	d2f1a9fc 	.word	0xd2f1a9fc
 800f374:	3f50624d 	.word	0x3f50624d
 800f378:	20004ae0 	.word	0x20004ae0
 800f37c:	200002f0 	.word	0x200002f0
 800f380:	20000074 	.word	0x20000074
 800f384:	40000400 	.word	0x40000400
 800f388:	20000050 	.word	0x20000050
 800f38c:	40000800 	.word	0x40000800
 800f390:	2000005c 	.word	0x2000005c
 800f394:	200002fc 	.word	0x200002fc
 800f398:	3a83126f 	.word	0x3a83126f
 800f39c:	2000439c 	.word	0x2000439c
 800f3a0:	200043a8 	.word	0x200043a8
 800f3a4:	20004408 	.word	0x20004408
 800f3a8:	200002d0 	.word	0x200002d0
 800f3ac:	20004f08 	.word	0x20004f08
 800f3b0:	200043c4 	.word	0x200043c4
 800f3b4:	2000002c 	.word	0x2000002c
 800f3b8:	3851b717 	.word	0x3851b717
 800f3bc:	20000038 	.word	0x20000038
 800f3c0:	20000024 	.word	0x20000024
 800f3c4:	20000020 	.word	0x20000020
 800f3c8:	200002bc 	.word	0x200002bc
 800f3cc:	20000044 	.word	0x20000044
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800f3d0:	4bab      	ldr	r3, [pc, #684]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f3d2:	edd3 7a00 	vldr	s15, [r3]
 800f3d6:	4baa      	ldr	r3, [pc, #680]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f3d8:	ed93 7a01 	vldr	s14, [r3, #4]
 800f3dc:	4ba8      	ldr	r3, [pc, #672]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f3de:	edd3 6a02 	vldr	s13, [r3, #8]
 800f3e2:	eef0 1a66 	vmov.f32	s3, s13
 800f3e6:	eeb0 1a47 	vmov.f32	s2, s14
 800f3ea:	eef0 0a67 	vmov.f32	s1, s15
 800f3ee:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 800f684 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 800f3f2:	f7fa f8d5 	bl	80095a0 <Enc_Velo_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800f3f6:	4ba4      	ldr	r3, [pc, #656]	; (800f688 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800f3f8:	ed93 8b00 	vldr	d8, [r3]
 800f3fc:	4ba3      	ldr	r3, [pc, #652]	; (800f68c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4618      	mov	r0, r3
 800f402:	f7f8 ffd9 	bl	80083b8 <__aeabi_f2d>
 800f406:	4604      	mov	r4, r0
 800f408:	460d      	mov	r5, r1
 800f40a:	4ba0      	ldr	r3, [pc, #640]	; (800f68c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7f8 ffd2 	bl	80083b8 <__aeabi_f2d>
 800f414:	4680      	mov	r8, r0
 800f416:	4689      	mov	r9, r1
 800f418:	4b9c      	ldr	r3, [pc, #624]	; (800f68c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7f8 ffcb 	bl	80083b8 <__aeabi_f2d>
 800f422:	4602      	mov	r2, r0
 800f424:	460b      	mov	r3, r1
 800f426:	ec43 2b15 	vmov	d5, r2, r3
 800f42a:	ec49 8b14 	vmov	d4, r8, r9
 800f42e:	ec45 4b13 	vmov	d3, r4, r5
 800f432:	ed9f 2b8d 	vldr	d2, [pc, #564]	; 800f668 <HAL_TIM_PeriodElapsedCallback+0x5e0>
 800f436:	eeb0 1a48 	vmov.f32	s2, s16
 800f43a:	eef0 1a68 	vmov.f32	s3, s17
 800f43e:	ed9f 0b8c 	vldr	d0, [pc, #560]	; 800f670 <HAL_TIM_PeriodElapsedCallback+0x5e8>
 800f442:	f7fa fec1 	bl	800a1c8 <IMU_Control>
	    	   break;
 800f446:	e041      	b.n	800f4cc <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   mode.imu = 0;
 800f448:	4a91      	ldr	r2, [pc, #580]	; (800f690 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f44a:	7993      	ldrb	r3, [r2, #6]
 800f44c:	f36f 0300 	bfc	r3, #0, #1
 800f450:	7193      	strb	r3, [r2, #6]
	    	   break;
 800f452:	e03b      	b.n	800f4cc <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   Right_Velo_Control(Target_R_velo, R_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800f454:	4b8f      	ldr	r3, [pc, #572]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f456:	edd3 7a00 	vldr	s15, [r3]
 800f45a:	4b8f      	ldr	r3, [pc, #572]	; (800f698 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800f45c:	ed93 7a00 	vldr	s14, [r3]
 800f460:	4b87      	ldr	r3, [pc, #540]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f462:	edd3 6a00 	vldr	s13, [r3]
 800f466:	4b86      	ldr	r3, [pc, #536]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f468:	ed93 6a01 	vldr	s12, [r3, #4]
 800f46c:	4b84      	ldr	r3, [pc, #528]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f46e:	edd3 5a02 	vldr	s11, [r3, #8]
 800f472:	eef0 2a65 	vmov.f32	s5, s11
 800f476:	eeb0 2a46 	vmov.f32	s4, s12
 800f47a:	eef0 1a66 	vmov.f32	s3, s13
 800f47e:	ed9f 1a81 	vldr	s2, [pc, #516]	; 800f684 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 800f482:	eef0 0a47 	vmov.f32	s1, s14
 800f486:	eeb0 0a67 	vmov.f32	s0, s15
 800f48a:	f7f9 ff85 	bl	8009398 <Right_Velo_Control>
	    	   Left_Velo_Control(Target_L_velo, L_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800f48e:	4b83      	ldr	r3, [pc, #524]	; (800f69c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f490:	edd3 7a00 	vldr	s15, [r3]
 800f494:	4b82      	ldr	r3, [pc, #520]	; (800f6a0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800f496:	ed93 7a00 	vldr	s14, [r3]
 800f49a:	4b79      	ldr	r3, [pc, #484]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f49c:	edd3 6a00 	vldr	s13, [r3]
 800f4a0:	4b77      	ldr	r3, [pc, #476]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f4a2:	ed93 6a01 	vldr	s12, [r3, #4]
 800f4a6:	4b76      	ldr	r3, [pc, #472]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f4a8:	edd3 5a02 	vldr	s11, [r3, #8]
 800f4ac:	eef0 2a65 	vmov.f32	s5, s11
 800f4b0:	eeb0 2a46 	vmov.f32	s4, s12
 800f4b4:	eef0 1a66 	vmov.f32	s3, s13
 800f4b8:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800f684 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 800f4bc:	eef0 0a47 	vmov.f32	s1, s14
 800f4c0:	eeb0 0a67 	vmov.f32	s0, s15
 800f4c4:	f7f9 ffea 	bl	800949c <Left_Velo_Control>
	    	   break;
 800f4c8:	e000      	b.n	800f4cc <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   break;
 800f4ca:	bf00      	nop
	    if( mode.accel == 1 ){
 800f4cc:	4b70      	ldr	r3, [pc, #448]	; (800f690 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f4ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d116      	bne.n	800f504 <HAL_TIM_PeriodElapsedCallback+0x47c>
		  if(Target_velocity < SEARCH_SPEED){
 800f4d6:	4b73      	ldr	r3, [pc, #460]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f4d8:	edd3 7a00 	vldr	s15, [r3]
 800f4dc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800f6a8 <HAL_TIM_PeriodElapsedCallback+0x620>
 800f4e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e8:	f140 810b 	bpl.w	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
			Target_velocity += a_start;
 800f4ec:	4b6d      	ldr	r3, [pc, #436]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f4ee:	ed93 7a00 	vldr	s14, [r3]
 800f4f2:	4b6e      	ldr	r3, [pc, #440]	; (800f6ac <HAL_TIM_PeriodElapsedCallback+0x624>)
 800f4f4:	edd3 7a00 	vldr	s15, [r3]
 800f4f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4fc:	4b69      	ldr	r3, [pc, #420]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f4fe:	edc3 7a00 	vstr	s15, [r3]
 800f502:	e0fe      	b.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 2 ){
 800f504:	4b62      	ldr	r3, [pc, #392]	; (800f690 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f506:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f50a:	2b02      	cmp	r3, #2
 800f50c:	d116      	bne.n	800f53c <HAL_TIM_PeriodElapsedCallback+0x4b4>
		  if(Target_velocity < SEARCH_SPEED){
 800f50e:	4b65      	ldr	r3, [pc, #404]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f510:	edd3 7a00 	vldr	s15, [r3]
 800f514:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800f6a8 <HAL_TIM_PeriodElapsedCallback+0x620>
 800f518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f520:	f140 80ef 	bpl.w	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
			Target_velocity += a;
 800f524:	4b5f      	ldr	r3, [pc, #380]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f526:	ed93 7a00 	vldr	s14, [r3]
 800f52a:	4b61      	ldr	r3, [pc, #388]	; (800f6b0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800f52c:	edd3 7a00 	vldr	s15, [r3]
 800f530:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f534:	4b5b      	ldr	r3, [pc, #364]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f536:	edc3 7a00 	vstr	s15, [r3]
 800f53a:	e0e2      	b.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 3 ){
 800f53c:	4b54      	ldr	r3, [pc, #336]	; (800f690 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f53e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f542:	2b03      	cmp	r3, #3
 800f544:	d116      	bne.n	800f574 <HAL_TIM_PeriodElapsedCallback+0x4ec>
		  if(Target_velocity > 2){
 800f546:	4b57      	ldr	r3, [pc, #348]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f548:	edd3 7a00 	vldr	s15, [r3]
 800f54c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f550:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f558:	f340 80d3 	ble.w	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
			Target_velocity -= a;
 800f55c:	4b51      	ldr	r3, [pc, #324]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f55e:	ed93 7a00 	vldr	s14, [r3]
 800f562:	4b53      	ldr	r3, [pc, #332]	; (800f6b0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800f564:	edd3 7a00 	vldr	s15, [r3]
 800f568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f56c:	4b4d      	ldr	r3, [pc, #308]	; (800f6a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f56e:	edc3 7a00 	vstr	s15, [r3]
 800f572:	e0c6      	b.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 4 ){ //左に旋回?��??��?
 800f574:	4b46      	ldr	r3, [pc, #280]	; (800f690 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f576:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f57a:	2b04      	cmp	r3, #4
 800f57c:	d124      	bne.n	800f5c8 <HAL_TIM_PeriodElapsedCallback+0x540>
	      if(Target_R_velo < SEARCH_SPEED * (90+TREAD_WIDTH)/90){
 800f57e:	4b45      	ldr	r3, [pc, #276]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4618      	mov	r0, r3
 800f584:	f7f8 ff18 	bl	80083b8 <__aeabi_f2d>
 800f588:	a33b      	add	r3, pc, #236	; (adr r3, 800f678 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f9 f9dd 	bl	800894c <__aeabi_dcmplt>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	f000 80b4 	beq.w	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	    	Target_R_velo += a_curve;
 800f59a:	4b3e      	ldr	r3, [pc, #248]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f59c:	ed93 7a00 	vldr	s14, [r3]
 800f5a0:	4b44      	ldr	r3, [pc, #272]	; (800f6b4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f5a2:	edd3 7a00 	vldr	s15, [r3]
 800f5a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5aa:	4b3a      	ldr	r3, [pc, #232]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f5ac:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800f5b0:	4b3a      	ldr	r3, [pc, #232]	; (800f69c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f5b2:	ed93 7a00 	vldr	s14, [r3]
 800f5b6:	4b3f      	ldr	r3, [pc, #252]	; (800f6b4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f5b8:	edd3 7a00 	vldr	s15, [r3]
 800f5bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5c0:	4b36      	ldr	r3, [pc, #216]	; (800f69c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f5c2:	edc3 7a00 	vstr	s15, [r3]
 800f5c6:	e09c      	b.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 5 ){//左に旋回減�??
 800f5c8:	4b31      	ldr	r3, [pc, #196]	; (800f690 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f5ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f5ce:	2b05      	cmp	r3, #5
 800f5d0:	d121      	bne.n	800f616 <HAL_TIM_PeriodElapsedCallback+0x58e>
		      if(Target_R_velo > SEARCH_SPEED){
 800f5d2:	4b30      	ldr	r3, [pc, #192]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f5d4:	edd3 7a00 	vldr	s15, [r3]
 800f5d8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f6a8 <HAL_TIM_PeriodElapsedCallback+0x620>
 800f5dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e4:	f340 808d 	ble.w	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
		    	Target_R_velo -= a_curve;
 800f5e8:	4b2a      	ldr	r3, [pc, #168]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f5ea:	ed93 7a00 	vldr	s14, [r3]
 800f5ee:	4b31      	ldr	r3, [pc, #196]	; (800f6b4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f5f0:	edd3 7a00 	vldr	s15, [r3]
 800f5f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5f8:	4b26      	ldr	r3, [pc, #152]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f5fa:	edc3 7a00 	vstr	s15, [r3]
		    	Target_L_velo += a_curve;
 800f5fe:	4b27      	ldr	r3, [pc, #156]	; (800f69c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f600:	ed93 7a00 	vldr	s14, [r3]
 800f604:	4b2b      	ldr	r3, [pc, #172]	; (800f6b4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f606:	edd3 7a00 	vldr	s15, [r3]
 800f60a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f60e:	4b23      	ldr	r3, [pc, #140]	; (800f69c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f610:	edc3 7a00 	vstr	s15, [r3]
 800f614:	e075      	b.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 6 ){//右に旋回?��??��?
 800f616:	4b1e      	ldr	r3, [pc, #120]	; (800f690 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f618:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f61c:	2b06      	cmp	r3, #6
 800f61e:	d14b      	bne.n	800f6b8 <HAL_TIM_PeriodElapsedCallback+0x630>
	      if(Target_L_velo < SEARCH_SPEED * (90+TREAD_WIDTH)/90){
 800f620:	4b1e      	ldr	r3, [pc, #120]	; (800f69c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4618      	mov	r0, r3
 800f626:	f7f8 fec7 	bl	80083b8 <__aeabi_f2d>
 800f62a:	a313      	add	r3, pc, #76	; (adr r3, 800f678 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800f62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f630:	f7f9 f98c 	bl	800894c <__aeabi_dcmplt>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d063      	beq.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	    	Target_R_velo -= a_curve;
 800f63a:	4b16      	ldr	r3, [pc, #88]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f63c:	ed93 7a00 	vldr	s14, [r3]
 800f640:	4b1c      	ldr	r3, [pc, #112]	; (800f6b4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f642:	edd3 7a00 	vldr	s15, [r3]
 800f646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f64a:	4b12      	ldr	r3, [pc, #72]	; (800f694 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f64c:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo += a_curve;
 800f650:	4b12      	ldr	r3, [pc, #72]	; (800f69c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f652:	ed93 7a00 	vldr	s14, [r3]
 800f656:	4b17      	ldr	r3, [pc, #92]	; (800f6b4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f658:	edd3 7a00 	vldr	s15, [r3]
 800f65c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f660:	4b0e      	ldr	r3, [pc, #56]	; (800f69c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f662:	edc3 7a00 	vstr	s15, [r3]
 800f666:	e04c      	b.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
 800f668:	d2f1a9fc 	.word	0xd2f1a9fc
 800f66c:	3f50624d 	.word	0x3f50624d
	...
 800f678:	55555555 	.word	0x55555555
 800f67c:	407a5555 	.word	0x407a5555
 800f680:	20000038 	.word	0x20000038
 800f684:	3a83126f 	.word	0x3a83126f
 800f688:	200002d0 	.word	0x200002d0
 800f68c:	20000044 	.word	0x20000044
 800f690:	20000074 	.word	0x20000074
 800f694:	20004380 	.word	0x20004380
 800f698:	200043a8 	.word	0x200043a8
 800f69c:	200043a4 	.word	0x200043a4
 800f6a0:	2000439c 	.word	0x2000439c
 800f6a4:	200002b8 	.word	0x200002b8
 800f6a8:	43960000 	.word	0x43960000
 800f6ac:	20000008 	.word	0x20000008
 800f6b0:	2000000c 	.word	0x2000000c
 800f6b4:	20000010 	.word	0x20000010
	    else if( mode.accel == 7 ){//右に旋回減�??
 800f6b8:	4bb1      	ldr	r3, [pc, #708]	; (800f980 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800f6ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f6be:	2b07      	cmp	r3, #7
 800f6c0:	d11f      	bne.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	      if(Target_L_velo > SEARCH_SPEED){
 800f6c2:	4bb0      	ldr	r3, [pc, #704]	; (800f984 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f6c4:	edd3 7a00 	vldr	s15, [r3]
 800f6c8:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800f988 <HAL_TIM_PeriodElapsedCallback+0x900>
 800f6cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d4:	dd15      	ble.n	800f702 <HAL_TIM_PeriodElapsedCallback+0x67a>
	    	Target_R_velo += a_curve;
 800f6d6:	4bad      	ldr	r3, [pc, #692]	; (800f98c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800f6d8:	ed93 7a00 	vldr	s14, [r3]
 800f6dc:	4bac      	ldr	r3, [pc, #688]	; (800f990 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800f6de:	edd3 7a00 	vldr	s15, [r3]
 800f6e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6e6:	4ba9      	ldr	r3, [pc, #676]	; (800f98c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800f6e8:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800f6ec:	4ba5      	ldr	r3, [pc, #660]	; (800f984 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f6ee:	ed93 7a00 	vldr	s14, [r3]
 800f6f2:	4ba7      	ldr	r3, [pc, #668]	; (800f990 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800f6f4:	edd3 7a00 	vldr	s15, [r3]
 800f6f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6fc:	4ba1      	ldr	r3, [pc, #644]	; (800f984 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f6fe:	edc3 7a00 	vstr	s15, [r3]
	    Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI, velocity.KD);
 800f702:	4ba4      	ldr	r3, [pc, #656]	; (800f994 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800f704:	edd3 7a00 	vldr	s15, [r3]
 800f708:	4ba3      	ldr	r3, [pc, #652]	; (800f998 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800f70a:	ed93 7a00 	vldr	s14, [r3]
 800f70e:	4ba3      	ldr	r3, [pc, #652]	; (800f99c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800f710:	edd3 6a00 	vldr	s13, [r3]
 800f714:	4ba1      	ldr	r3, [pc, #644]	; (800f99c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800f716:	ed93 6a01 	vldr	s12, [r3, #4]
 800f71a:	4ba0      	ldr	r3, [pc, #640]	; (800f99c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800f71c:	edd3 5a02 	vldr	s11, [r3, #8]
 800f720:	eef0 2a65 	vmov.f32	s5, s11
 800f724:	eeb0 2a46 	vmov.f32	s4, s12
 800f728:	eef0 1a66 	vmov.f32	s3, s13
 800f72c:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 800f9a0 <HAL_TIM_PeriodElapsedCallback+0x918>
 800f730:	eef0 0a47 	vmov.f32	s1, s14
 800f734:	eeb0 0a67 	vmov.f32	s0, s15
 800f738:	f7f9 fd80 	bl	800923c <Velocity_Control>
		L_motor = L_v_control + L_wall + L_leftwall + L_rightwall + L_rotate + L_angular_velocity + L_env_control + L_velo_control;
 800f73c:	4b99      	ldr	r3, [pc, #612]	; (800f9a4 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800f73e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f742:	b29a      	uxth	r2, r3
 800f744:	4b98      	ldr	r3, [pc, #608]	; (800f9a8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800f746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	4413      	add	r3, r2
 800f74e:	b29a      	uxth	r2, r3
 800f750:	4b96      	ldr	r3, [pc, #600]	; (800f9ac <HAL_TIM_PeriodElapsedCallback+0x924>)
 800f752:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f756:	b29b      	uxth	r3, r3
 800f758:	4413      	add	r3, r2
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	4b94      	ldr	r3, [pc, #592]	; (800f9b0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800f75e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f762:	b29b      	uxth	r3, r3
 800f764:	4413      	add	r3, r2
 800f766:	b29a      	uxth	r2, r3
 800f768:	4b92      	ldr	r3, [pc, #584]	; (800f9b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f76a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f76e:	b29b      	uxth	r3, r3
 800f770:	4413      	add	r3, r2
 800f772:	b29a      	uxth	r2, r3
 800f774:	4b90      	ldr	r3, [pc, #576]	; (800f9b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800f776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	4413      	add	r3, r2
 800f77e:	b29a      	uxth	r2, r3
 800f780:	4b8e      	ldr	r3, [pc, #568]	; (800f9bc <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f782:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f786:	b29b      	uxth	r3, r3
 800f788:	4413      	add	r3, r2
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	4b8c      	ldr	r3, [pc, #560]	; (800f9c0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800f78e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f792:	b29b      	uxth	r3, r3
 800f794:	4413      	add	r3, r2
 800f796:	b29b      	uxth	r3, r3
 800f798:	b21a      	sxth	r2, r3
 800f79a:	4b8a      	ldr	r3, [pc, #552]	; (800f9c4 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800f79c:	801a      	strh	r2, [r3, #0]
		R_motor = R_v_control + R_wall + R_leftwall + R_rightwall + R_rotate + R_angular_velocity + R_env_control + R_velo_control;
 800f79e:	4b8a      	ldr	r3, [pc, #552]	; (800f9c8 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f7a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	4b89      	ldr	r3, [pc, #548]	; (800f9cc <HAL_TIM_PeriodElapsedCallback+0x944>)
 800f7a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	4413      	add	r3, r2
 800f7b0:	b29a      	uxth	r2, r3
 800f7b2:	4b87      	ldr	r3, [pc, #540]	; (800f9d0 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800f7b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	4413      	add	r3, r2
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	4b85      	ldr	r3, [pc, #532]	; (800f9d4 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800f7c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	4413      	add	r3, r2
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	4b83      	ldr	r3, [pc, #524]	; (800f9d8 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800f7cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	4413      	add	r3, r2
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	4b81      	ldr	r3, [pc, #516]	; (800f9dc <HAL_TIM_PeriodElapsedCallback+0x954>)
 800f7d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	4413      	add	r3, r2
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	4b7f      	ldr	r3, [pc, #508]	; (800f9e0 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800f7e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	4413      	add	r3, r2
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	4b7d      	ldr	r3, [pc, #500]	; (800f9e4 <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800f7f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	4413      	add	r3, r2
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	b21a      	sxth	r2, r3
 800f7fc:	4b7a      	ldr	r3, [pc, #488]	; (800f9e8 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800f7fe:	801a      	strh	r2, [r3, #0]
		if(timer <= 2000){
 800f800:	4b7a      	ldr	r3, [pc, #488]	; (800f9ec <HAL_TIM_PeriodElapsedCallback+0x964>)
 800f802:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f806:	f04f 0200 	mov.w	r2, #0
 800f80a:	4b79      	ldr	r3, [pc, #484]	; (800f9f0 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800f80c:	f7f9 f8a8 	bl	8008960 <__aeabi_dcmple>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d018      	beq.n	800f848 <HAL_TIM_PeriodElapsedCallback+0x7c0>
			if((int)timer % 5== 0){
 800f816:	4b75      	ldr	r3, [pc, #468]	; (800f9ec <HAL_TIM_PeriodElapsedCallback+0x964>)
 800f818:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f81c:	4618      	mov	r0, r3
 800f81e:	4621      	mov	r1, r4
 800f820:	f7f9 f8d2 	bl	80089c8 <__aeabi_d2iz>
 800f824:	4601      	mov	r1, r0
 800f826:	4b73      	ldr	r3, [pc, #460]	; (800f9f4 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800f828:	fb83 2301 	smull	r2, r3, r3, r1
 800f82c:	105a      	asrs	r2, r3, #1
 800f82e:	17cb      	asrs	r3, r1, #31
 800f830:	1ad2      	subs	r2, r2, r3
 800f832:	4613      	mov	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4413      	add	r3, r2
 800f838:	1aca      	subs	r2, r1, r3
 800f83a:	2a00      	cmp	r2, #0
 800f83c:	d104      	bne.n	800f848 <HAL_TIM_PeriodElapsedCallback+0x7c0>
		     k++;
 800f83e:	4b6e      	ldr	r3, [pc, #440]	; (800f9f8 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	3301      	adds	r3, #1
 800f844:	4a6c      	ldr	r2, [pc, #432]	; (800f9f8 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800f846:	6013      	str	r3, [r2, #0]
		Motor_Switch(L_motor,R_motor);
 800f848:	4b5e      	ldr	r3, [pc, #376]	; (800f9c4 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800f84a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f84e:	4b66      	ldr	r3, [pc, #408]	; (800f9e8 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800f850:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f854:	4619      	mov	r1, r3
 800f856:	4610      	mov	r0, r2
 800f858:	f7fa fefe 	bl	800a658 <Motor_Switch>
		break;
 800f85c:	e0e1      	b.n	800fa22 <HAL_TIM_PeriodElapsedCallback+0x99a>
			Tim_Count();
 800f85e:	f7fa f8d9 	bl	8009a14 <Tim_Count>
	      	EN3_L.count = TIM3 -> CNT;
 800f862:	4b66      	ldr	r3, [pc, #408]	; (800f9fc <HAL_TIM_PeriodElapsedCallback+0x974>)
 800f864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f866:	461a      	mov	r2, r3
 800f868:	4b65      	ldr	r3, [pc, #404]	; (800fa00 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f86a:	601a      	str	r2, [r3, #0]
		    EN4_R.count = TIM4 -> CNT;
 800f86c:	4b65      	ldr	r3, [pc, #404]	; (800fa04 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800f86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f870:	461a      	mov	r2, r3
 800f872:	4b65      	ldr	r3, [pc, #404]	; (800fa08 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f874:	601a      	str	r2, [r3, #0]
		    EN3_L.count = -(EN3_L.count - (30000-1));
 800f876:	4b62      	ldr	r3, [pc, #392]	; (800fa00 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f87e:	332f      	adds	r3, #47	; 0x2f
 800f880:	4a5f      	ldr	r2, [pc, #380]	; (800fa00 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f882:	6013      	str	r3, [r2, #0]
		    EN4_R.count = -(EN4_R.count - (30000-1));
 800f884:	4b60      	ldr	r3, [pc, #384]	; (800fa08 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f88c:	332f      	adds	r3, #47	; 0x2f
 800f88e:	4a5e      	ldr	r2, [pc, #376]	; (800fa08 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f890:	6013      	str	r3, [r2, #0]
		    mode.enc = Encoder_Count(mode.enc);
 800f892:	4b3b      	ldr	r3, [pc, #236]	; (800f980 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800f894:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f898:	b21b      	sxth	r3, r3
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fb f8a6 	bl	800a9ec <Encoder_Count>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	b25a      	sxtb	r2, r3
 800f8a4:	4b36      	ldr	r3, [pc, #216]	; (800f980 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800f8a6:	70da      	strb	r2, [r3, #3]
		    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800f8a8:	4b57      	ldr	r3, [pc, #348]	; (800fa08 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	4b54      	ldr	r3, [pc, #336]	; (800fa00 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	441a      	add	r2, r3
 800f8b2:	4b56      	ldr	r3, [pc, #344]	; (800fa0c <HAL_TIM_PeriodElapsedCallback+0x984>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	4a54      	ldr	r2, [pc, #336]	; (800fa0c <HAL_TIM_PeriodElapsedCallback+0x984>)
 800f8ba:	6013      	str	r3, [r2, #0]
		    Encoder_Reset();
 800f8bc:	f7fb f882 	bl	800a9c4 <Encoder_Reset>
		    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800f8c0:	4b4f      	ldr	r3, [pc, #316]	; (800fa00 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	ee07 3a90 	vmov	s15, r3
 800f8c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8cc:	eddf 0a34 	vldr	s1, [pc, #208]	; 800f9a0 <HAL_TIM_PeriodElapsedCallback+0x918>
 800f8d0:	eeb0 0a67 	vmov.f32	s0, s15
 800f8d4:	f7fb f84e 	bl	800a974 <Velocity_Get>
 800f8d8:	eef0 7a40 	vmov.f32	s15, s0
 800f8dc:	4b4c      	ldr	r3, [pc, #304]	; (800fa10 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800f8de:	edc3 7a00 	vstr	s15, [r3]
			R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800f8e2:	4b49      	ldr	r3, [pc, #292]	; (800fa08 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	ee07 3a90 	vmov	s15, r3
 800f8ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8ee:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800f9a0 <HAL_TIM_PeriodElapsedCallback+0x918>
 800f8f2:	eeb0 0a67 	vmov.f32	s0, s15
 800f8f6:	f7fb f83d 	bl	800a974 <Velocity_Get>
 800f8fa:	eef0 7a40 	vmov.f32	s15, s0
 800f8fe:	4b45      	ldr	r3, [pc, #276]	; (800fa14 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 800f900:	edc3 7a00 	vstr	s15, [r3]
			imu_data = IMU_Get_Data();
 800f904:	f7fa fb9c 	bl	800a040 <IMU_Get_Data>
 800f908:	eeb0 7a40 	vmov.f32	s14, s0
 800f90c:	eef0 7a60 	vmov.f32	s15, s1
 800f910:	4b41      	ldr	r3, [pc, #260]	; (800fa18 <HAL_TIM_PeriodElapsedCallback+0x990>)
 800f912:	ed83 7b00 	vstr	d7, [r3]
			if(timer <= 48000){
 800f916:	4b35      	ldr	r3, [pc, #212]	; (800f9ec <HAL_TIM_PeriodElapsedCallback+0x964>)
 800f918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f91c:	a316      	add	r3, pc, #88	; (adr r3, 800f978 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800f91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f922:	f7f9 f81d 	bl	8008960 <__aeabi_dcmple>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d01a      	beq.n	800f962 <HAL_TIM_PeriodElapsedCallback+0x8da>
				if((int)timer % 60 == 0){
 800f92c:	4b2f      	ldr	r3, [pc, #188]	; (800f9ec <HAL_TIM_PeriodElapsedCallback+0x964>)
 800f92e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f932:	4618      	mov	r0, r3
 800f934:	4621      	mov	r1, r4
 800f936:	f7f9 f847 	bl	80089c8 <__aeabi_d2iz>
 800f93a:	4601      	mov	r1, r0
 800f93c:	4b37      	ldr	r3, [pc, #220]	; (800fa1c <HAL_TIM_PeriodElapsedCallback+0x994>)
 800f93e:	fb83 2301 	smull	r2, r3, r3, r1
 800f942:	440b      	add	r3, r1
 800f944:	115a      	asrs	r2, r3, #5
 800f946:	17cb      	asrs	r3, r1, #31
 800f948:	1ad2      	subs	r2, r2, r3
 800f94a:	4613      	mov	r3, r2
 800f94c:	011b      	lsls	r3, r3, #4
 800f94e:	1a9b      	subs	r3, r3, r2
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	1aca      	subs	r2, r1, r3
 800f954:	2a00      	cmp	r2, #0
 800f956:	d104      	bne.n	800f962 <HAL_TIM_PeriodElapsedCallback+0x8da>
			     k++;
 800f958:	4b27      	ldr	r3, [pc, #156]	; (800f9f8 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	3301      	adds	r3, #1
 800f95e:	4a26      	ldr	r2, [pc, #152]	; (800f9f8 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800f960:	6013      	str	r3, [r2, #0]
			Motor_Switch(L_motor,R_motor);
 800f962:	4b18      	ldr	r3, [pc, #96]	; (800f9c4 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800f964:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f968:	4b1f      	ldr	r3, [pc, #124]	; (800f9e8 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800f96a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f96e:	4619      	mov	r1, r3
 800f970:	4610      	mov	r0, r2
 800f972:	f7fa fe71 	bl	800a658 <Motor_Switch>
			break;
 800f976:	e054      	b.n	800fa22 <HAL_TIM_PeriodElapsedCallback+0x99a>
 800f978:	00000000 	.word	0x00000000
 800f97c:	40e77000 	.word	0x40e77000
 800f980:	20000074 	.word	0x20000074
 800f984:	200043a4 	.word	0x200043a4
 800f988:	43960000 	.word	0x43960000
 800f98c:	20004380 	.word	0x20004380
 800f990:	20000010 	.word	0x20000010
 800f994:	200002b8 	.word	0x200002b8
 800f998:	20004408 	.word	0x20004408
 800f99c:	20000038 	.word	0x20000038
 800f9a0:	3a83126f 	.word	0x3a83126f
 800f9a4:	20004384 	.word	0x20004384
 800f9a8:	200043a0 	.word	0x200043a0
 800f9ac:	20004386 	.word	0x20004386
 800f9b0:	20004378 	.word	0x20004378
 800f9b4:	20004398 	.word	0x20004398
 800f9b8:	20004392 	.word	0x20004392
 800f9bc:	2000437a 	.word	0x2000437a
 800f9c0:	200043a2 	.word	0x200043a2
 800f9c4:	20004ff0 	.word	0x20004ff0
 800f9c8:	20004390 	.word	0x20004390
 800f9cc:	2000438a 	.word	0x2000438a
 800f9d0:	200043ac 	.word	0x200043ac
 800f9d4:	20004394 	.word	0x20004394
 800f9d8:	2000439a 	.word	0x2000439a
 800f9dc:	20004396 	.word	0x20004396
 800f9e0:	20004388 	.word	0x20004388
 800f9e4:	2000437c 	.word	0x2000437c
 800f9e8:	2000449c 	.word	0x2000449c
 800f9ec:	200002e8 	.word	0x200002e8
 800f9f0:	409f4000 	.word	0x409f4000
 800f9f4:	66666667 	.word	0x66666667
 800f9f8:	20004368 	.word	0x20004368
 800f9fc:	40000400 	.word	0x40000400
 800fa00:	20000050 	.word	0x20000050
 800fa04:	40000800 	.word	0x40000800
 800fa08:	2000005c 	.word	0x2000005c
 800fa0c:	200002fc 	.word	0x200002fc
 800fa10:	2000439c 	.word	0x2000439c
 800fa14:	200043a8 	.word	0x200043a8
 800fa18:	200002d0 	.word	0x200002d0
 800fa1c:	88888889 	.word	0x88888889
	  }

  }
 800fa20:	bf00      	nop

  if(htim == &htim8){
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a05      	ldr	r2, [pc, #20]	; (800fa3c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d101      	bne.n	800fa2e <HAL_TIM_PeriodElapsedCallback+0x9a6>


	  ADC_Get_Data();
 800fa2a:	f7fa fe6f 	bl	800a70c <ADC_Get_Data>


  }
}
 800fa2e:	bf00      	nop
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	ecbd 8b02 	vpop	{d8}
 800fa38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fa3c:	200043c8 	.word	0x200043c8

0800fa40 <Exe_num0>:


/*---- DEFINING FUNCTION ----*/

//実行時に�?り替えるモー�?
void Exe_num0(){
 800fa40:	b580      	push	{r7, lr}
 800fa42:	af00      	add	r7, sp, #0
//	mode.control = 0;
//	Target_velocity=SEARCH_SPEED;
//
//	Target_Rad_velo=0;

	Adachi_search();
 800fa44:	f7fe f914 	bl	800dc70 <Adachi_search>

}
 800fa48:	bf00      	nop
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <Exe_num1>:
void Exe_num1(){
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	af00      	add	r7, sp, #0
	Adachi_search2();
 800fa50:	f7fe fe5a 	bl	800e708 <Adachi_search2>

}
 800fa54:	bf00      	nop
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <Exe_num2>:
void Exe_num2(){
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	af00      	add	r7, sp, #0
//        	  if(timer == 10)
//        		  printf("小数のほ�? : %lf \r\n",timer);
//        	  if(self_timer == 10000)
//        		  printf("整数のほ�? : %lf \r\n",self_timer/1000);

	Shortest_Run();
 800fa5c:	f7ff fa84 	bl	800ef68 <Shortest_Run>
        	  //start_calib();

}
 800fa60:	bf00      	nop
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <Exe_num3>:
void Exe_num3(){
 800fa64:	b580      	push	{r7, lr}
 800fa66:	af00      	add	r7, sp, #0
	  //printf("helloあい�?えお\r\n");


        	  Flash_load();
 800fa68:	f7fa fa14 	bl	8009e94 <Flash_load>
          	  HAL_Delay(2000);
 800fa6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800fa70:	f001 fb92 	bl	8011198 <HAL_Delay>

          	  mapprint();
 800fa74:	f7fa f93e 	bl	8009cf4 <mapprint>
          	  while(1);
 800fa78:	e7fe      	b.n	800fa78 <Exe_num3+0x14>

0800fa7a <Exe_num4>:
			  //printf("%d\r\n",zg);
//        		  printf("%f\r\n",Body_angle);
//        		  HAL_Delay(1);

}
void Exe_num4(){
 800fa7a:	b580      	push	{r7, lr}
 800fa7c:	af00      	add	r7, sp, #0
	Tire_Maintenance();
 800fa7e:	f7fc fa7b 	bl	800bf78 <Tire_Maintenance>
//       	  mode.enc = 1;
//        	  printf("左 : %d \r\n",EN3_L.integrate);
//        	  printf("右 : %d \r\n",EN4_R.integrate);
//        	  printf("\r\n");

}
 800fa82:	bf00      	nop
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <Exe_num5>:
void Exe_num5(){
 800fa86:	b580      	push	{r7, lr}
 800fa88:	af00      	add	r7, sp, #0
		  //printf("%f\r\n",identify[k]);

		 // printf("%f\t %f\r\n",identify[k],identify[k+5000]);
		 // printf("%f\r\n",identify[k]);

		  turn_right();
 800fa8a:	f7fb fb4f 	bl	800b12c <turn_right>
		  while(1);
 800fa8e:	e7fe      	b.n	800fa8e <Exe_num5+0x8>

0800fa90 <Exe_num6>:
    printf("\r\n");
#endif

#endif
}
void Exe_num6(){
 800fa90:	b598      	push	{r3, r4, r7, lr}
 800fa92:	af00      	add	r7, sp, #0
//        	  Target_Rad_velo= 0;

        	  //Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);

#if 1
	      printf("左 : %f\r\n",fl_average);
 800fa94:	4b18      	ldr	r3, [pc, #96]	; (800faf8 <Exe_num6+0x68>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7f8 fc8d 	bl	80083b8 <__aeabi_f2d>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	460c      	mov	r4, r1
 800faa2:	461a      	mov	r2, r3
 800faa4:	4623      	mov	r3, r4
 800faa6:	4815      	ldr	r0, [pc, #84]	; (800fafc <Exe_num6+0x6c>)
 800faa8:	f007 f81e 	bl	8016ae8 <iprintf>
	      printf("右 : %f\r\n",fr_average);
 800faac:	4b14      	ldr	r3, [pc, #80]	; (800fb00 <Exe_num6+0x70>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7f8 fc81 	bl	80083b8 <__aeabi_f2d>
 800fab6:	4603      	mov	r3, r0
 800fab8:	460c      	mov	r4, r1
 800faba:	461a      	mov	r2, r3
 800fabc:	4623      	mov	r3, r4
 800fabe:	4811      	ldr	r0, [pc, #68]	; (800fb04 <Exe_num6+0x74>)
 800fac0:	f007 f812 	bl	8016ae8 <iprintf>
	      printf("前左 : %f\r\n",sl_average);
 800fac4:	4b10      	ldr	r3, [pc, #64]	; (800fb08 <Exe_num6+0x78>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4618      	mov	r0, r3
 800faca:	f7f8 fc75 	bl	80083b8 <__aeabi_f2d>
 800face:	4603      	mov	r3, r0
 800fad0:	460c      	mov	r4, r1
 800fad2:	461a      	mov	r2, r3
 800fad4:	4623      	mov	r3, r4
 800fad6:	480d      	ldr	r0, [pc, #52]	; (800fb0c <Exe_num6+0x7c>)
 800fad8:	f007 f806 	bl	8016ae8 <iprintf>
	      printf("前右 : %f\r\n",sr_average);
 800fadc:	4b0c      	ldr	r3, [pc, #48]	; (800fb10 <Exe_num6+0x80>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7f8 fc69 	bl	80083b8 <__aeabi_f2d>
 800fae6:	4603      	mov	r3, r0
 800fae8:	460c      	mov	r4, r1
 800faea:	461a      	mov	r2, r3
 800faec:	4623      	mov	r3, r4
 800faee:	4809      	ldr	r0, [pc, #36]	; (800fb14 <Exe_num6+0x84>)
 800faf0:	f006 fffa 	bl	8016ae8 <iprintf>

#endif


//		Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI*, velocity.KD);
}
 800faf4:	bf00      	nop
 800faf6:	bd98      	pop	{r3, r4, r7, pc}
 800faf8:	200043c4 	.word	0x200043c4
 800fafc:	08018aa8 	.word	0x08018aa8
 800fb00:	20004f08 	.word	0x20004f08
 800fb04:	08018ab4 	.word	0x08018ab4
 800fb08:	20005054 	.word	0x20005054
 800fb0c:	08018ac0 	.word	0x08018ac0
 800fb10:	200044a0 	.word	0x200044a0
 800fb14:	08018ad0 	.word	0x08018ad0

0800fb18 <Exe_num7>:
void Exe_num7(){
 800fb18:	b598      	push	{r3, r4, r7, lr}
 800fb1a:	af00      	add	r7, sp, #0

	printf("右前センサ : %f\r\n",sr_average);
 800fb1c:	4b06      	ldr	r3, [pc, #24]	; (800fb38 <Exe_num7+0x20>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7f8 fc49 	bl	80083b8 <__aeabi_f2d>
 800fb26:	4603      	mov	r3, r0
 800fb28:	460c      	mov	r4, r1
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	4623      	mov	r3, r4
 800fb2e:	4803      	ldr	r0, [pc, #12]	; (800fb3c <Exe_num7+0x24>)
 800fb30:	f006 ffda 	bl	8016ae8 <iprintf>
//        		      printf("右 : %f\r\n",fr_average);
//        		  }
		  mode.control = 2;
		  Target_velocity = test_velo_7;
#endif
}
 800fb34:	bf00      	nop
 800fb36:	bd98      	pop	{r3, r4, r7, pc}
 800fb38:	200044a0 	.word	0x200044a0
 800fb3c:	08018ae0 	.word	0x08018ae0

0800fb40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fb44:	f001 fab6 	bl	80110b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800fb48:	f000 f88c 	bl	800fc64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800fb4c:	f000 fcd6 	bl	80104fc <MX_GPIO_Init>
  MX_DMA_Init();
 800fb50:	f000 fcac 	bl	80104ac <MX_DMA_Init>
  MX_ADC1_Init();
 800fb54:	f000 f8f0 	bl	800fd38 <MX_ADC1_Init>
  MX_ADC2_Init();
 800fb58:	f000 f95c 	bl	800fe14 <MX_ADC2_Init>
  MX_TIM3_Init();
 800fb5c:	f000 fab6 	bl	80100cc <MX_TIM3_Init>
  MX_TIM2_Init();
 800fb60:	f000 fa3e 	bl	800ffe0 <MX_TIM2_Init>
  MX_SPI3_Init();
 800fb64:	f000 f9b6 	bl	800fed4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800fb68:	f000 fc76 	bl	8010458 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800fb6c:	f000 fb56 	bl	801021c <MX_TIM5_Init>
  MX_TIM4_Init();
 800fb70:	f000 fb00 	bl	8010174 <MX_TIM4_Init>
  MX_TIM8_Init();
 800fb74:	f000 fbc8 	bl	8010308 <MX_TIM8_Init>
  MX_TIM1_Init();
 800fb78:	f000 f9e2 	bl	800ff40 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Encoder_Start();
 800fb7c:	f7fa fa10 	bl	8009fa0 <Encoder_Start>
  Encoder_Reset();
 800fb80:	f7fa ff20 	bl	800a9c4 <Encoder_Reset>

  //スイッチ替わりにセンサを使うので
  Emitter_ON();
 800fb84:	f7fa f9de 	bl	8009f44 <Emitter_ON>
  ADC_Start();
 800fb88:	f7fa f9ea 	bl	8009f60 <ADC_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 800fb8c:	482d      	ldr	r0, [pc, #180]	; (800fc44 <main+0x104>)
 800fb8e:	f004 fc02 	bl	8014396 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //LED
 800fb92:	2201      	movs	r2, #1
 800fb94:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb98:	482b      	ldr	r0, [pc, #172]	; (800fc48 <main+0x108>)
 800fb9a:	f003 fa01 	bl	8012fa0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800fb9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fba2:	f001 faf9 	bl	8011198 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); //LED
 800fba6:	2200      	movs	r2, #0
 800fba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fbac:	4826      	ldr	r0, [pc, #152]	; (800fc48 <main+0x108>)
 800fbae:	f003 f9f7 	bl	8012fa0 <HAL_GPIO_WritePin>



  while (1)
  {
	  Execution_Select();
 800fbb2:	f7fb ffef 	bl	800bb94 <Execution_Select>

//      printf("EN3_L.integrate : %d \r\n", EN3_L.integrate);
//      printf("EN4_R.integrate : %d \r\n", EN4_R.integrate);
//      printf("EN_Body.integrate : %d \r\n", EN_Body.integrate);
	  //誤差補正のオフセ�?ト�?�決�?
	  IMU_Calib();
 800fbb6:	f7fa fc13 	bl	800a3e0 <IMU_Calib>
	  distance_wall_right=fr_average;
 800fbba:	4b24      	ldr	r3, [pc, #144]	; (800fc4c <main+0x10c>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a24      	ldr	r2, [pc, #144]	; (800fc50 <main+0x110>)
 800fbc0:	6013      	str	r3, [r2, #0]
	  distance_wall_left=fl_average;
 800fbc2:	4b24      	ldr	r3, [pc, #144]	; (800fc54 <main+0x114>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4a24      	ldr	r2, [pc, #144]	; (800fc58 <main+0x118>)
 800fbc8:	6013      	str	r3, [r2, #0]
	  wall_target_error = distance_wall_left - distance_wall_right;
 800fbca:	4b23      	ldr	r3, [pc, #140]	; (800fc58 <main+0x118>)
 800fbcc:	ed93 7a00 	vldr	s14, [r3]
 800fbd0:	4b1f      	ldr	r3, [pc, #124]	; (800fc50 <main+0x110>)
 800fbd2:	edd3 7a00 	vldr	s15, [r3]
 800fbd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbda:	4b20      	ldr	r3, [pc, #128]	; (800fc5c <main+0x11c>)
 800fbdc:	edc3 7a00 	vstr	s15, [r3]

	  while(1){


switch(mode.execution){
 800fbe0:	4b1f      	ldr	r3, [pc, #124]	; (800fc60 <main+0x120>)
 800fbe2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800fbe6:	2b07      	cmp	r3, #7
 800fbe8:	d82a      	bhi.n	800fc40 <main+0x100>
 800fbea:	a201      	add	r2, pc, #4	; (adr r2, 800fbf0 <main+0xb0>)
 800fbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf0:	0800fc11 	.word	0x0800fc11
 800fbf4:	0800fc17 	.word	0x0800fc17
 800fbf8:	0800fc1d 	.word	0x0800fc1d
 800fbfc:	0800fc23 	.word	0x0800fc23
 800fc00:	0800fc29 	.word	0x0800fc29
 800fc04:	0800fc2f 	.word	0x0800fc2f
 800fc08:	0800fc35 	.word	0x0800fc35
 800fc0c:	0800fc3b 	.word	0x0800fc3b
          case 0:
        	  Exe_num0();
 800fc10:	f7ff ff16 	bl	800fa40 <Exe_num0>
        	  break;
 800fc14:	e015      	b.n	800fc42 <main+0x102>
	  /*------------------------------------------*/
          case 1:
        	  Exe_num1();
 800fc16:	f7ff ff19 	bl	800fa4c <Exe_num1>
              break;
 800fc1a:	e012      	b.n	800fc42 <main+0x102>
	  /*------------------------------------------*/
          case 2:
        	  Exe_num2();
 800fc1c:	f7ff ff1c 	bl	800fa58 <Exe_num2>
	          break;
 800fc20:	e00f      	b.n	800fc42 <main+0x102>
	  /*------------------------------------------*/
          case 3:
        	  Exe_num3();
 800fc22:	f7ff ff1f 	bl	800fa64 <Exe_num3>
              break;
 800fc26:	e00c      	b.n	800fc42 <main+0x102>
	  /*------------------------------------------*/
          case 4:
        	  Exe_num4();
 800fc28:	f7ff ff27 	bl	800fa7a <Exe_num4>
        	  break;
 800fc2c:	e009      	b.n	800fc42 <main+0x102>
	  /*------------------------------------------*/
          case 5:
        	  Exe_num5();
 800fc2e:	f7ff ff2a 	bl	800fa86 <Exe_num5>
	          break;
 800fc32:	e006      	b.n	800fc42 <main+0x102>
	  /*------------------------------------------*/
          case 6:
        	  Exe_num6();
 800fc34:	f7ff ff2c 	bl	800fa90 <Exe_num6>
		    break;
 800fc38:	e003      	b.n	800fc42 <main+0x102>
	  /*------------------------------------------*/
          case 7:
        	  Exe_num7();
 800fc3a:	f7ff ff6d 	bl	800fb18 <Exe_num7>
	  	      break;
 800fc3e:	e000      	b.n	800fc42 <main+0x102>
          default:
        	  break;
 800fc40:	bf00      	nop
switch(mode.execution){
 800fc42:	e7cd      	b.n	800fbe0 <main+0xa0>
 800fc44:	200043c8 	.word	0x200043c8
 800fc48:	40020800 	.word	0x40020800
 800fc4c:	20004f08 	.word	0x20004f08
 800fc50:	20000020 	.word	0x20000020
 800fc54:	200043c4 	.word	0x200043c4
 800fc58:	20000024 	.word	0x20000024
 800fc5c:	2000438c 	.word	0x2000438c
 800fc60:	20000074 	.word	0x20000074

0800fc64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b094      	sub	sp, #80	; 0x50
 800fc68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800fc6a:	f107 0320 	add.w	r3, r7, #32
 800fc6e:	2230      	movs	r2, #48	; 0x30
 800fc70:	2100      	movs	r1, #0
 800fc72:	4618      	mov	r0, r3
 800fc74:	f006 fad3 	bl	801621e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800fc78:	f107 030c 	add.w	r3, r7, #12
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	601a      	str	r2, [r3, #0]
 800fc80:	605a      	str	r2, [r3, #4]
 800fc82:	609a      	str	r2, [r3, #8]
 800fc84:	60da      	str	r2, [r3, #12]
 800fc86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fc88:	2300      	movs	r3, #0
 800fc8a:	60bb      	str	r3, [r7, #8]
 800fc8c:	4b28      	ldr	r3, [pc, #160]	; (800fd30 <SystemClock_Config+0xcc>)
 800fc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc90:	4a27      	ldr	r2, [pc, #156]	; (800fd30 <SystemClock_Config+0xcc>)
 800fc92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc96:	6413      	str	r3, [r2, #64]	; 0x40
 800fc98:	4b25      	ldr	r3, [pc, #148]	; (800fd30 <SystemClock_Config+0xcc>)
 800fc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fca0:	60bb      	str	r3, [r7, #8]
 800fca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fca4:	2300      	movs	r3, #0
 800fca6:	607b      	str	r3, [r7, #4]
 800fca8:	4b22      	ldr	r3, [pc, #136]	; (800fd34 <SystemClock_Config+0xd0>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4a21      	ldr	r2, [pc, #132]	; (800fd34 <SystemClock_Config+0xd0>)
 800fcae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fcb2:	6013      	str	r3, [r2, #0]
 800fcb4:	4b1f      	ldr	r3, [pc, #124]	; (800fd34 <SystemClock_Config+0xd0>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fcbc:	607b      	str	r3, [r7, #4]
 800fcbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800fcc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fcc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fcca:	2302      	movs	r3, #2
 800fccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800fcce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800fcd4:	2304      	movs	r3, #4
 800fcd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800fcd8:	23a8      	movs	r3, #168	; 0xa8
 800fcda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800fcdc:	2302      	movs	r3, #2
 800fcde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800fce0:	2304      	movs	r3, #4
 800fce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fce4:	f107 0320 	add.w	r3, r7, #32
 800fce8:	4618      	mov	r0, r3
 800fcea:	f003 f973 	bl	8012fd4 <HAL_RCC_OscConfig>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800fcf4:	f000 fccc 	bl	8010690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800fcf8:	230f      	movs	r3, #15
 800fcfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fcfc:	2302      	movs	r3, #2
 800fcfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fd00:	2300      	movs	r3, #0
 800fd02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800fd04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800fd08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800fd0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800fd10:	f107 030c 	add.w	r3, r7, #12
 800fd14:	2105      	movs	r1, #5
 800fd16:	4618      	mov	r0, r3
 800fd18:	f003 fbcc 	bl	80134b4 <HAL_RCC_ClockConfig>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d001      	beq.n	800fd26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800fd22:	f000 fcb5 	bl	8010690 <Error_Handler>
  }
}
 800fd26:	bf00      	nop
 800fd28:	3750      	adds	r7, #80	; 0x50
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	40023800 	.word	0x40023800
 800fd34:	40007000 	.word	0x40007000

0800fd38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800fd3e:	463b      	mov	r3, r7
 800fd40:	2200      	movs	r2, #0
 800fd42:	601a      	str	r2, [r3, #0]
 800fd44:	605a      	str	r2, [r3, #4]
 800fd46:	609a      	str	r2, [r3, #8]
 800fd48:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800fd4a:	4b2f      	ldr	r3, [pc, #188]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd4c:	4a2f      	ldr	r2, [pc, #188]	; (800fe0c <MX_ADC1_Init+0xd4>)
 800fd4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800fd50:	4b2d      	ldr	r3, [pc, #180]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fd56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800fd58:	4b2b      	ldr	r3, [pc, #172]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800fd5e:	4b2a      	ldr	r3, [pc, #168]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd60:	2201      	movs	r2, #1
 800fd62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800fd64:	4b28      	ldr	r3, [pc, #160]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd66:	2201      	movs	r2, #1
 800fd68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800fd6a:	4b27      	ldr	r3, [pc, #156]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fd72:	4b25      	ldr	r3, [pc, #148]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd74:	2200      	movs	r2, #0
 800fd76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800fd78:	4b23      	ldr	r3, [pc, #140]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd7a:	4a25      	ldr	r2, [pc, #148]	; (800fe10 <MX_ADC1_Init+0xd8>)
 800fd7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800fd7e:	4b22      	ldr	r3, [pc, #136]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800fd84:	4b20      	ldr	r3, [pc, #128]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd86:	2203      	movs	r2, #3
 800fd88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800fd8a:	4b1f      	ldr	r3, [pc, #124]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fd92:	4b1d      	ldr	r3, [pc, #116]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd94:	2201      	movs	r2, #1
 800fd96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800fd98:	481b      	ldr	r0, [pc, #108]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fd9a:	f001 fa1f 	bl	80111dc <HAL_ADC_Init>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d001      	beq.n	800fda8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800fda4:	f000 fc74 	bl	8010690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800fda8:	230a      	movs	r3, #10
 800fdaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800fdac:	2301      	movs	r3, #1
 800fdae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800fdb4:	463b      	mov	r3, r7
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	4813      	ldr	r0, [pc, #76]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fdba:	f001 fca3 	bl	8011704 <HAL_ADC_ConfigChannel>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d001      	beq.n	800fdc8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800fdc4:	f000 fc64 	bl	8010690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800fdc8:	230e      	movs	r3, #14
 800fdca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800fdcc:	2302      	movs	r3, #2
 800fdce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800fdd0:	463b      	mov	r3, r7
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	480c      	ldr	r0, [pc, #48]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fdd6:	f001 fc95 	bl	8011704 <HAL_ADC_ConfigChannel>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800fde0:	f000 fc56 	bl	8010690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800fde4:	2309      	movs	r3, #9
 800fde6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800fde8:	2303      	movs	r3, #3
 800fdea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800fdec:	463b      	mov	r3, r7
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4805      	ldr	r0, [pc, #20]	; (800fe08 <MX_ADC1_Init+0xd0>)
 800fdf2:	f001 fc87 	bl	8011704 <HAL_ADC_ConfigChannel>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800fdfc:	f000 fc48 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800fe00:	bf00      	nop
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	20004588 	.word	0x20004588
 800fe0c:	40012000 	.word	0x40012000
 800fe10:	0f000001 	.word	0x0f000001

0800fe14 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800fe1a:	463b      	mov	r3, r7
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	601a      	str	r2, [r3, #0]
 800fe20:	605a      	str	r2, [r3, #4]
 800fe22:	609a      	str	r2, [r3, #8]
 800fe24:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800fe26:	4b28      	ldr	r3, [pc, #160]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe28:	4a28      	ldr	r2, [pc, #160]	; (800fecc <MX_ADC2_Init+0xb8>)
 800fe2a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800fe2c:	4b26      	ldr	r3, [pc, #152]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fe32:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800fe34:	4b24      	ldr	r3, [pc, #144]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800fe3a:	4b23      	ldr	r3, [pc, #140]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800fe40:	4b21      	ldr	r3, [pc, #132]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe42:	2201      	movs	r2, #1
 800fe44:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800fe46:	4b20      	ldr	r3, [pc, #128]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fe4e:	4b1e      	ldr	r3, [pc, #120]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe50:	2200      	movs	r2, #0
 800fe52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800fe54:	4b1c      	ldr	r3, [pc, #112]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe56:	4a1e      	ldr	r2, [pc, #120]	; (800fed0 <MX_ADC2_Init+0xbc>)
 800fe58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800fe5a:	4b1b      	ldr	r3, [pc, #108]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800fe60:	4b19      	ldr	r3, [pc, #100]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe62:	2202      	movs	r2, #2
 800fe64:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800fe66:	4b18      	ldr	r3, [pc, #96]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe68:	2201      	movs	r2, #1
 800fe6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fe6e:	4b16      	ldr	r3, [pc, #88]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe70:	2201      	movs	r2, #1
 800fe72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800fe74:	4814      	ldr	r0, [pc, #80]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe76:	f001 f9b1 	bl	80111dc <HAL_ADC_Init>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d001      	beq.n	800fe84 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800fe80:	f000 fc06 	bl	8010690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800fe84:	230b      	movs	r3, #11
 800fe86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800fe8c:	2303      	movs	r3, #3
 800fe8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800fe90:	463b      	mov	r3, r7
 800fe92:	4619      	mov	r1, r3
 800fe94:	480c      	ldr	r0, [pc, #48]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800fe96:	f001 fc35 	bl	8011704 <HAL_ADC_ConfigChannel>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800fea0:	f000 fbf6 	bl	8010690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800fea4:	230f      	movs	r3, #15
 800fea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800fea8:	2302      	movs	r3, #2
 800feaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800feac:	463b      	mov	r3, r7
 800feae:	4619      	mov	r1, r3
 800feb0:	4805      	ldr	r0, [pc, #20]	; (800fec8 <MX_ADC2_Init+0xb4>)
 800feb2:	f001 fc27 	bl	8011704 <HAL_ADC_ConfigChannel>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d001      	beq.n	800fec0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800febc:	f000 fbe8 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800fec0:	bf00      	nop
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	2000444c 	.word	0x2000444c
 800fecc:	40012100 	.word	0x40012100
 800fed0:	0f000001 	.word	0x0f000001

0800fed4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800fed8:	4b17      	ldr	r3, [pc, #92]	; (800ff38 <MX_SPI3_Init+0x64>)
 800feda:	4a18      	ldr	r2, [pc, #96]	; (800ff3c <MX_SPI3_Init+0x68>)
 800fedc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800fede:	4b16      	ldr	r3, [pc, #88]	; (800ff38 <MX_SPI3_Init+0x64>)
 800fee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fee4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800fee6:	4b14      	ldr	r3, [pc, #80]	; (800ff38 <MX_SPI3_Init+0x64>)
 800fee8:	2200      	movs	r2, #0
 800feea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800feec:	4b12      	ldr	r3, [pc, #72]	; (800ff38 <MX_SPI3_Init+0x64>)
 800feee:	2200      	movs	r2, #0
 800fef0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800fef2:	4b11      	ldr	r3, [pc, #68]	; (800ff38 <MX_SPI3_Init+0x64>)
 800fef4:	2202      	movs	r2, #2
 800fef6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fef8:	4b0f      	ldr	r3, [pc, #60]	; (800ff38 <MX_SPI3_Init+0x64>)
 800fefa:	2201      	movs	r2, #1
 800fefc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800fefe:	4b0e      	ldr	r3, [pc, #56]	; (800ff38 <MX_SPI3_Init+0x64>)
 800ff00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800ff06:	4b0c      	ldr	r3, [pc, #48]	; (800ff38 <MX_SPI3_Init+0x64>)
 800ff08:	2228      	movs	r2, #40	; 0x28
 800ff0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ff0c:	4b0a      	ldr	r3, [pc, #40]	; (800ff38 <MX_SPI3_Init+0x64>)
 800ff0e:	2200      	movs	r2, #0
 800ff10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ff12:	4b09      	ldr	r3, [pc, #36]	; (800ff38 <MX_SPI3_Init+0x64>)
 800ff14:	2200      	movs	r2, #0
 800ff16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff18:	4b07      	ldr	r3, [pc, #28]	; (800ff38 <MX_SPI3_Init+0x64>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800ff1e:	4b06      	ldr	r3, [pc, #24]	; (800ff38 <MX_SPI3_Init+0x64>)
 800ff20:	220a      	movs	r2, #10
 800ff22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ff24:	4804      	ldr	r0, [pc, #16]	; (800ff38 <MX_SPI3_Init+0x64>)
 800ff26:	f003 fcb7 	bl	8013898 <HAL_SPI_Init>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d001      	beq.n	800ff34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800ff30:	f000 fbae 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ff34:	bf00      	nop
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	2000452c 	.word	0x2000452c
 800ff3c:	40003c00 	.word	0x40003c00

0800ff40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b086      	sub	sp, #24
 800ff44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ff46:	f107 0308 	add.w	r3, r7, #8
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	601a      	str	r2, [r3, #0]
 800ff4e:	605a      	str	r2, [r3, #4]
 800ff50:	609a      	str	r2, [r3, #8]
 800ff52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ff54:	463b      	mov	r3, r7
 800ff56:	2200      	movs	r2, #0
 800ff58:	601a      	str	r2, [r3, #0]
 800ff5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ff5c:	4b1e      	ldr	r3, [pc, #120]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ff5e:	4a1f      	ldr	r2, [pc, #124]	; (800ffdc <MX_TIM1_Init+0x9c>)
 800ff60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800ff62:	4b1d      	ldr	r3, [pc, #116]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ff64:	22a7      	movs	r2, #167	; 0xa7
 800ff66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ff68:	4b1b      	ldr	r3, [pc, #108]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800ff6e:	4b1a      	ldr	r3, [pc, #104]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ff70:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ff74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff76:	4b18      	ldr	r3, [pc, #96]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ff7c:	4b16      	ldr	r3, [pc, #88]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ff82:	4b15      	ldr	r3, [pc, #84]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ff88:	4813      	ldr	r0, [pc, #76]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ff8a:	f004 f9d9 	bl	8014340 <HAL_TIM_Base_Init>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d001      	beq.n	800ff98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800ff94:	f000 fb7c 	bl	8010690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ff9e:	f107 0308 	add.w	r3, r7, #8
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	480c      	ldr	r0, [pc, #48]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ffa6:	f004 fec3 	bl	8014d30 <HAL_TIM_ConfigClockSource>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d001      	beq.n	800ffb4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800ffb0:	f000 fb6e 	bl	8010690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ffbc:	463b      	mov	r3, r7
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	4805      	ldr	r0, [pc, #20]	; (800ffd8 <MX_TIM1_Init+0x98>)
 800ffc2:	f005 faf9 	bl	80155b8 <HAL_TIMEx_MasterConfigSynchronization>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d001      	beq.n	800ffd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800ffcc:	f000 fb60 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ffd0:	bf00      	nop
 800ffd2:	3718      	adds	r7, #24
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	20004ae0 	.word	0x20004ae0
 800ffdc:	40010000 	.word	0x40010000

0800ffe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b08e      	sub	sp, #56	; 0x38
 800ffe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ffe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ffea:	2200      	movs	r2, #0
 800ffec:	601a      	str	r2, [r3, #0]
 800ffee:	605a      	str	r2, [r3, #4]
 800fff0:	609a      	str	r2, [r3, #8]
 800fff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fff4:	f107 0320 	add.w	r3, r7, #32
 800fff8:	2200      	movs	r2, #0
 800fffa:	601a      	str	r2, [r3, #0]
 800fffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fffe:	1d3b      	adds	r3, r7, #4
 8010000:	2200      	movs	r2, #0
 8010002:	601a      	str	r2, [r3, #0]
 8010004:	605a      	str	r2, [r3, #4]
 8010006:	609a      	str	r2, [r3, #8]
 8010008:	60da      	str	r2, [r3, #12]
 801000a:	611a      	str	r2, [r3, #16]
 801000c:	615a      	str	r2, [r3, #20]
 801000e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8010010:	4b2d      	ldr	r3, [pc, #180]	; (80100c8 <MX_TIM2_Init+0xe8>)
 8010012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8010018:	4b2b      	ldr	r3, [pc, #172]	; (80100c8 <MX_TIM2_Init+0xe8>)
 801001a:	2200      	movs	r2, #0
 801001c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801001e:	4b2a      	ldr	r3, [pc, #168]	; (80100c8 <MX_TIM2_Init+0xe8>)
 8010020:	2200      	movs	r2, #0
 8010022:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 8010024:	4b28      	ldr	r3, [pc, #160]	; (80100c8 <MX_TIM2_Init+0xe8>)
 8010026:	f241 0267 	movw	r2, #4199	; 0x1067
 801002a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801002c:	4b26      	ldr	r3, [pc, #152]	; (80100c8 <MX_TIM2_Init+0xe8>)
 801002e:	2200      	movs	r2, #0
 8010030:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010032:	4b25      	ldr	r3, [pc, #148]	; (80100c8 <MX_TIM2_Init+0xe8>)
 8010034:	2200      	movs	r2, #0
 8010036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8010038:	4823      	ldr	r0, [pc, #140]	; (80100c8 <MX_TIM2_Init+0xe8>)
 801003a:	f004 f981 	bl	8014340 <HAL_TIM_Base_Init>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d001      	beq.n	8010048 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8010044:	f000 fb24 	bl	8010690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801004c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801004e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010052:	4619      	mov	r1, r3
 8010054:	481c      	ldr	r0, [pc, #112]	; (80100c8 <MX_TIM2_Init+0xe8>)
 8010056:	f004 fe6b 	bl	8014d30 <HAL_TIM_ConfigClockSource>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d001      	beq.n	8010064 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8010060:	f000 fb16 	bl	8010690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8010064:	4818      	ldr	r0, [pc, #96]	; (80100c8 <MX_TIM2_Init+0xe8>)
 8010066:	f004 fa9f 	bl	80145a8 <HAL_TIM_PWM_Init>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d001      	beq.n	8010074 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8010070:	f000 fb0e 	bl	8010690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010074:	2300      	movs	r3, #0
 8010076:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010078:	2300      	movs	r3, #0
 801007a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801007c:	f107 0320 	add.w	r3, r7, #32
 8010080:	4619      	mov	r1, r3
 8010082:	4811      	ldr	r0, [pc, #68]	; (80100c8 <MX_TIM2_Init+0xe8>)
 8010084:	f005 fa98 	bl	80155b8 <HAL_TIMEx_MasterConfigSynchronization>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d001      	beq.n	8010092 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 801008e:	f000 faff 	bl	8010690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010092:	2360      	movs	r3, #96	; 0x60
 8010094:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8010096:	2300      	movs	r3, #0
 8010098:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801009a:	2300      	movs	r3, #0
 801009c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801009e:	2300      	movs	r3, #0
 80100a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80100a2:	1d3b      	adds	r3, r7, #4
 80100a4:	220c      	movs	r2, #12
 80100a6:	4619      	mov	r1, r3
 80100a8:	4807      	ldr	r0, [pc, #28]	; (80100c8 <MX_TIM2_Init+0xe8>)
 80100aa:	f004 fd7b 	bl	8014ba4 <HAL_TIM_PWM_ConfigChannel>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d001      	beq.n	80100b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80100b4:	f000 faec 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80100b8:	4803      	ldr	r0, [pc, #12]	; (80100c8 <MX_TIM2_Init+0xe8>)
 80100ba:	f000 fd89 	bl	8010bd0 <HAL_TIM_MspPostInit>

}
 80100be:	bf00      	nop
 80100c0:	3738      	adds	r7, #56	; 0x38
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	20004fb0 	.word	0x20004fb0

080100cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b08c      	sub	sp, #48	; 0x30
 80100d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80100d2:	f107 030c 	add.w	r3, r7, #12
 80100d6:	2224      	movs	r2, #36	; 0x24
 80100d8:	2100      	movs	r1, #0
 80100da:	4618      	mov	r0, r3
 80100dc:	f006 f89f 	bl	801621e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80100e0:	1d3b      	adds	r3, r7, #4
 80100e2:	2200      	movs	r2, #0
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80100e8:	4b20      	ldr	r3, [pc, #128]	; (801016c <MX_TIM3_Init+0xa0>)
 80100ea:	4a21      	ldr	r2, [pc, #132]	; (8010170 <MX_TIM3_Init+0xa4>)
 80100ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80100ee:	4b1f      	ldr	r3, [pc, #124]	; (801016c <MX_TIM3_Init+0xa0>)
 80100f0:	2200      	movs	r2, #0
 80100f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80100f4:	4b1d      	ldr	r3, [pc, #116]	; (801016c <MX_TIM3_Init+0xa0>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80100fa:	4b1c      	ldr	r3, [pc, #112]	; (801016c <MX_TIM3_Init+0xa0>)
 80100fc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8010100:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010102:	4b1a      	ldr	r3, [pc, #104]	; (801016c <MX_TIM3_Init+0xa0>)
 8010104:	2200      	movs	r2, #0
 8010106:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010108:	4b18      	ldr	r3, [pc, #96]	; (801016c <MX_TIM3_Init+0xa0>)
 801010a:	2200      	movs	r2, #0
 801010c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 801010e:	2303      	movs	r3, #3
 8010110:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8010112:	2300      	movs	r3, #0
 8010114:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8010116:	2301      	movs	r3, #1
 8010118:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 801011a:	2300      	movs	r3, #0
 801011c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8010122:	2300      	movs	r3, #0
 8010124:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8010126:	2301      	movs	r3, #1
 8010128:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 801012a:	2300      	movs	r3, #0
 801012c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 801012e:	2300      	movs	r3, #0
 8010130:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8010132:	f107 030c 	add.w	r3, r7, #12
 8010136:	4619      	mov	r1, r3
 8010138:	480c      	ldr	r0, [pc, #48]	; (801016c <MX_TIM3_Init+0xa0>)
 801013a:	f004 fb01 	bl	8014740 <HAL_TIM_Encoder_Init>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d001      	beq.n	8010148 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8010144:	f000 faa4 	bl	8010690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010148:	2300      	movs	r3, #0
 801014a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801014c:	2300      	movs	r3, #0
 801014e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8010150:	1d3b      	adds	r3, r7, #4
 8010152:	4619      	mov	r1, r3
 8010154:	4805      	ldr	r0, [pc, #20]	; (801016c <MX_TIM3_Init+0xa0>)
 8010156:	f005 fa2f 	bl	80155b8 <HAL_TIMEx_MasterConfigSynchronization>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d001      	beq.n	8010164 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8010160:	f000 fa96 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8010164:	bf00      	nop
 8010166:	3730      	adds	r7, #48	; 0x30
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	200044e8 	.word	0x200044e8
 8010170:	40000400 	.word	0x40000400

08010174 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b08c      	sub	sp, #48	; 0x30
 8010178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 801017a:	f107 030c 	add.w	r3, r7, #12
 801017e:	2224      	movs	r2, #36	; 0x24
 8010180:	2100      	movs	r1, #0
 8010182:	4618      	mov	r0, r3
 8010184:	f006 f84b 	bl	801621e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010188:	1d3b      	adds	r3, r7, #4
 801018a:	2200      	movs	r2, #0
 801018c:	601a      	str	r2, [r3, #0]
 801018e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8010190:	4b20      	ldr	r3, [pc, #128]	; (8010214 <MX_TIM4_Init+0xa0>)
 8010192:	4a21      	ldr	r2, [pc, #132]	; (8010218 <MX_TIM4_Init+0xa4>)
 8010194:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8010196:	4b1f      	ldr	r3, [pc, #124]	; (8010214 <MX_TIM4_Init+0xa0>)
 8010198:	2200      	movs	r2, #0
 801019a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801019c:	4b1d      	ldr	r3, [pc, #116]	; (8010214 <MX_TIM4_Init+0xa0>)
 801019e:	2200      	movs	r2, #0
 80101a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 80101a2:	4b1c      	ldr	r3, [pc, #112]	; (8010214 <MX_TIM4_Init+0xa0>)
 80101a4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80101a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80101aa:	4b1a      	ldr	r3, [pc, #104]	; (8010214 <MX_TIM4_Init+0xa0>)
 80101ac:	2200      	movs	r2, #0
 80101ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80101b0:	4b18      	ldr	r3, [pc, #96]	; (8010214 <MX_TIM4_Init+0xa0>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80101b6:	2303      	movs	r3, #3
 80101b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80101ba:	2300      	movs	r3, #0
 80101bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80101be:	2301      	movs	r3, #1
 80101c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80101c2:	2300      	movs	r3, #0
 80101c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80101c6:	2300      	movs	r3, #0
 80101c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80101ca:	2300      	movs	r3, #0
 80101cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80101ce:	2301      	movs	r3, #1
 80101d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80101d2:	2300      	movs	r3, #0
 80101d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80101d6:	2300      	movs	r3, #0
 80101d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80101da:	f107 030c 	add.w	r3, r7, #12
 80101de:	4619      	mov	r1, r3
 80101e0:	480c      	ldr	r0, [pc, #48]	; (8010214 <MX_TIM4_Init+0xa0>)
 80101e2:	f004 faad 	bl	8014740 <HAL_TIM_Encoder_Init>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d001      	beq.n	80101f0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80101ec:	f000 fa50 	bl	8010690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80101f0:	2300      	movs	r3, #0
 80101f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80101f4:	2300      	movs	r3, #0
 80101f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80101f8:	1d3b      	adds	r3, r7, #4
 80101fa:	4619      	mov	r1, r3
 80101fc:	4805      	ldr	r0, [pc, #20]	; (8010214 <MX_TIM4_Init+0xa0>)
 80101fe:	f005 f9db 	bl	80155b8 <HAL_TIMEx_MasterConfigSynchronization>
 8010202:	4603      	mov	r3, r0
 8010204:	2b00      	cmp	r3, #0
 8010206:	d001      	beq.n	801020c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8010208:	f000 fa42 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 801020c:	bf00      	nop
 801020e:	3730      	adds	r7, #48	; 0x30
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	2000440c 	.word	0x2000440c
 8010218:	40000800 	.word	0x40000800

0801021c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b08e      	sub	sp, #56	; 0x38
 8010220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010226:	2200      	movs	r2, #0
 8010228:	601a      	str	r2, [r3, #0]
 801022a:	605a      	str	r2, [r3, #4]
 801022c:	609a      	str	r2, [r3, #8]
 801022e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010230:	f107 0320 	add.w	r3, r7, #32
 8010234:	2200      	movs	r2, #0
 8010236:	601a      	str	r2, [r3, #0]
 8010238:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801023a:	1d3b      	adds	r3, r7, #4
 801023c:	2200      	movs	r2, #0
 801023e:	601a      	str	r2, [r3, #0]
 8010240:	605a      	str	r2, [r3, #4]
 8010242:	609a      	str	r2, [r3, #8]
 8010244:	60da      	str	r2, [r3, #12]
 8010246:	611a      	str	r2, [r3, #16]
 8010248:	615a      	str	r2, [r3, #20]
 801024a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 801024c:	4b2c      	ldr	r3, [pc, #176]	; (8010300 <MX_TIM5_Init+0xe4>)
 801024e:	4a2d      	ldr	r2, [pc, #180]	; (8010304 <MX_TIM5_Init+0xe8>)
 8010250:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8010252:	4b2b      	ldr	r3, [pc, #172]	; (8010300 <MX_TIM5_Init+0xe4>)
 8010254:	2200      	movs	r2, #0
 8010256:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010258:	4b29      	ldr	r3, [pc, #164]	; (8010300 <MX_TIM5_Init+0xe4>)
 801025a:	2200      	movs	r2, #0
 801025c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 801025e:	4b28      	ldr	r3, [pc, #160]	; (8010300 <MX_TIM5_Init+0xe4>)
 8010260:	f241 0267 	movw	r2, #4199	; 0x1067
 8010264:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010266:	4b26      	ldr	r3, [pc, #152]	; (8010300 <MX_TIM5_Init+0xe4>)
 8010268:	2200      	movs	r2, #0
 801026a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801026c:	4b24      	ldr	r3, [pc, #144]	; (8010300 <MX_TIM5_Init+0xe4>)
 801026e:	2200      	movs	r2, #0
 8010270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8010272:	4823      	ldr	r0, [pc, #140]	; (8010300 <MX_TIM5_Init+0xe4>)
 8010274:	f004 f864 	bl	8014340 <HAL_TIM_Base_Init>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d001      	beq.n	8010282 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801027e:	f000 fa07 	bl	8010690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010286:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8010288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801028c:	4619      	mov	r1, r3
 801028e:	481c      	ldr	r0, [pc, #112]	; (8010300 <MX_TIM5_Init+0xe4>)
 8010290:	f004 fd4e 	bl	8014d30 <HAL_TIM_ConfigClockSource>
 8010294:	4603      	mov	r3, r0
 8010296:	2b00      	cmp	r3, #0
 8010298:	d001      	beq.n	801029e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 801029a:	f000 f9f9 	bl	8010690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801029e:	4818      	ldr	r0, [pc, #96]	; (8010300 <MX_TIM5_Init+0xe4>)
 80102a0:	f004 f982 	bl	80145a8 <HAL_TIM_PWM_Init>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80102aa:	f000 f9f1 	bl	8010690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80102ae:	2300      	movs	r3, #0
 80102b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80102b2:	2300      	movs	r3, #0
 80102b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80102b6:	f107 0320 	add.w	r3, r7, #32
 80102ba:	4619      	mov	r1, r3
 80102bc:	4810      	ldr	r0, [pc, #64]	; (8010300 <MX_TIM5_Init+0xe4>)
 80102be:	f005 f97b 	bl	80155b8 <HAL_TIMEx_MasterConfigSynchronization>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d001      	beq.n	80102cc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80102c8:	f000 f9e2 	bl	8010690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80102cc:	2360      	movs	r3, #96	; 0x60
 80102ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80102d0:	2300      	movs	r3, #0
 80102d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80102d4:	2300      	movs	r3, #0
 80102d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80102d8:	2300      	movs	r3, #0
 80102da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80102dc:	1d3b      	adds	r3, r7, #4
 80102de:	2204      	movs	r2, #4
 80102e0:	4619      	mov	r1, r3
 80102e2:	4807      	ldr	r0, [pc, #28]	; (8010300 <MX_TIM5_Init+0xe4>)
 80102e4:	f004 fc5e 	bl	8014ba4 <HAL_TIM_PWM_ConfigChannel>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d001      	beq.n	80102f2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80102ee:	f000 f9cf 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80102f2:	4803      	ldr	r0, [pc, #12]	; (8010300 <MX_TIM5_Init+0xe4>)
 80102f4:	f000 fc6c 	bl	8010bd0 <HAL_TIM_MspPostInit>

}
 80102f8:	bf00      	nop
 80102fa:	3738      	adds	r7, #56	; 0x38
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	200044a4 	.word	0x200044a4
 8010304:	40000c00 	.word	0x40000c00

08010308 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b096      	sub	sp, #88	; 0x58
 801030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801030e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010312:	2200      	movs	r2, #0
 8010314:	601a      	str	r2, [r3, #0]
 8010316:	605a      	str	r2, [r3, #4]
 8010318:	609a      	str	r2, [r3, #8]
 801031a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801031c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010320:	2200      	movs	r2, #0
 8010322:	601a      	str	r2, [r3, #0]
 8010324:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]
 801032e:	605a      	str	r2, [r3, #4]
 8010330:	609a      	str	r2, [r3, #8]
 8010332:	60da      	str	r2, [r3, #12]
 8010334:	611a      	str	r2, [r3, #16]
 8010336:	615a      	str	r2, [r3, #20]
 8010338:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801033a:	1d3b      	adds	r3, r7, #4
 801033c:	2220      	movs	r2, #32
 801033e:	2100      	movs	r1, #0
 8010340:	4618      	mov	r0, r3
 8010342:	f005 ff6c 	bl	801621e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8010346:	4b42      	ldr	r3, [pc, #264]	; (8010450 <MX_TIM8_Init+0x148>)
 8010348:	4a42      	ldr	r2, [pc, #264]	; (8010454 <MX_TIM8_Init+0x14c>)
 801034a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 801034c:	4b40      	ldr	r3, [pc, #256]	; (8010450 <MX_TIM8_Init+0x148>)
 801034e:	22a7      	movs	r2, #167	; 0xa7
 8010350:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010352:	4b3f      	ldr	r3, [pc, #252]	; (8010450 <MX_TIM8_Init+0x148>)
 8010354:	2200      	movs	r2, #0
 8010356:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8010358:	4b3d      	ldr	r3, [pc, #244]	; (8010450 <MX_TIM8_Init+0x148>)
 801035a:	2231      	movs	r2, #49	; 0x31
 801035c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801035e:	4b3c      	ldr	r3, [pc, #240]	; (8010450 <MX_TIM8_Init+0x148>)
 8010360:	2200      	movs	r2, #0
 8010362:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8010364:	4b3a      	ldr	r3, [pc, #232]	; (8010450 <MX_TIM8_Init+0x148>)
 8010366:	2200      	movs	r2, #0
 8010368:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801036a:	4b39      	ldr	r3, [pc, #228]	; (8010450 <MX_TIM8_Init+0x148>)
 801036c:	2280      	movs	r2, #128	; 0x80
 801036e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8010370:	4837      	ldr	r0, [pc, #220]	; (8010450 <MX_TIM8_Init+0x148>)
 8010372:	f003 ffe5 	bl	8014340 <HAL_TIM_Base_Init>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d001      	beq.n	8010380 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 801037c:	f000 f988 	bl	8010690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010384:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8010386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801038a:	4619      	mov	r1, r3
 801038c:	4830      	ldr	r0, [pc, #192]	; (8010450 <MX_TIM8_Init+0x148>)
 801038e:	f004 fccf 	bl	8014d30 <HAL_TIM_ConfigClockSource>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d001      	beq.n	801039c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8010398:	f000 f97a 	bl	8010690 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 801039c:	482c      	ldr	r0, [pc, #176]	; (8010450 <MX_TIM8_Init+0x148>)
 801039e:	f004 f849 	bl	8014434 <HAL_TIM_OC_Init>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d001      	beq.n	80103ac <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80103a8:	f000 f972 	bl	8010690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80103ac:	2300      	movs	r3, #0
 80103ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80103b0:	2300      	movs	r3, #0
 80103b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80103b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80103b8:	4619      	mov	r1, r3
 80103ba:	4825      	ldr	r0, [pc, #148]	; (8010450 <MX_TIM8_Init+0x148>)
 80103bc:	f005 f8fc 	bl	80155b8 <HAL_TIMEx_MasterConfigSynchronization>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d001      	beq.n	80103ca <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80103c6:	f000 f963 	bl	8010690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80103ca:	2330      	movs	r3, #48	; 0x30
 80103cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 80103ce:	2318      	movs	r3, #24
 80103d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80103d2:	2300      	movs	r3, #0
 80103d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80103d6:	2300      	movs	r3, #0
 80103d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80103da:	2300      	movs	r3, #0
 80103dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80103de:	2300      	movs	r3, #0
 80103e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80103e2:	2300      	movs	r3, #0
 80103e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80103e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103ea:	2200      	movs	r2, #0
 80103ec:	4619      	mov	r1, r3
 80103ee:	4818      	ldr	r0, [pc, #96]	; (8010450 <MX_TIM8_Init+0x148>)
 80103f0:	f004 fb78 	bl	8014ae4 <HAL_TIM_OC_ConfigChannel>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80103fa:	f000 f949 	bl	8010690 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 80103fe:	4b14      	ldr	r3, [pc, #80]	; (8010450 <MX_TIM8_Init+0x148>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	699a      	ldr	r2, [r3, #24]
 8010404:	4b12      	ldr	r3, [pc, #72]	; (8010450 <MX_TIM8_Init+0x148>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f042 0208 	orr.w	r2, r2, #8
 801040c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801040e:	2300      	movs	r3, #0
 8010410:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8010412:	2300      	movs	r3, #0
 8010414:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8010416:	2300      	movs	r3, #0
 8010418:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801041a:	2300      	movs	r3, #0
 801041c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801041e:	2300      	movs	r3, #0
 8010420:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8010422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010426:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8010428:	2300      	movs	r3, #0
 801042a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801042c:	1d3b      	adds	r3, r7, #4
 801042e:	4619      	mov	r1, r3
 8010430:	4807      	ldr	r0, [pc, #28]	; (8010450 <MX_TIM8_Init+0x148>)
 8010432:	f005 f93d 	bl	80156b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8010436:	4603      	mov	r3, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 801043c:	f000 f928 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8010440:	4803      	ldr	r0, [pc, #12]	; (8010450 <MX_TIM8_Init+0x148>)
 8010442:	f000 fbc5 	bl	8010bd0 <HAL_TIM_MspPostInit>

}
 8010446:	bf00      	nop
 8010448:	3758      	adds	r7, #88	; 0x58
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	200043c8 	.word	0x200043c8
 8010454:	40010400 	.word	0x40010400

08010458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801045c:	4b11      	ldr	r3, [pc, #68]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 801045e:	4a12      	ldr	r2, [pc, #72]	; (80104a8 <MX_USART1_UART_Init+0x50>)
 8010460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8010462:	4b10      	ldr	r3, [pc, #64]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 8010464:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8010468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801046a:	4b0e      	ldr	r3, [pc, #56]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 801046c:	2200      	movs	r2, #0
 801046e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010470:	4b0c      	ldr	r3, [pc, #48]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 8010472:	2200      	movs	r2, #0
 8010474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010476:	4b0b      	ldr	r3, [pc, #44]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 8010478:	2200      	movs	r2, #0
 801047a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801047c:	4b09      	ldr	r3, [pc, #36]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 801047e:	220c      	movs	r2, #12
 8010480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010482:	4b08      	ldr	r3, [pc, #32]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 8010484:	2200      	movs	r2, #0
 8010486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010488:	4b06      	ldr	r3, [pc, #24]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 801048a:	2200      	movs	r2, #0
 801048c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801048e:	4805      	ldr	r0, [pc, #20]	; (80104a4 <MX_USART1_UART_Init+0x4c>)
 8010490:	f005 f999 	bl	80157c6 <HAL_UART_Init>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 801049a:	f000 f8f9 	bl	8010690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801049e:	bf00      	nop
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	200045d4 	.word	0x200045d4
 80104a8:	40011000 	.word	0x40011000

080104ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80104b2:	2300      	movs	r3, #0
 80104b4:	607b      	str	r3, [r7, #4]
 80104b6:	4b10      	ldr	r3, [pc, #64]	; (80104f8 <MX_DMA_Init+0x4c>)
 80104b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104ba:	4a0f      	ldr	r2, [pc, #60]	; (80104f8 <MX_DMA_Init+0x4c>)
 80104bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80104c0:	6313      	str	r3, [r2, #48]	; 0x30
 80104c2:	4b0d      	ldr	r3, [pc, #52]	; (80104f8 <MX_DMA_Init+0x4c>)
 80104c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80104ca:	607b      	str	r3, [r7, #4]
 80104cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80104ce:	2200      	movs	r2, #0
 80104d0:	2100      	movs	r1, #0
 80104d2:	2038      	movs	r0, #56	; 0x38
 80104d4:	f001 fc9b 	bl	8011e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80104d8:	2038      	movs	r0, #56	; 0x38
 80104da:	f001 fcb4 	bl	8011e46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80104de:	2200      	movs	r2, #0
 80104e0:	2100      	movs	r1, #0
 80104e2:	203a      	movs	r0, #58	; 0x3a
 80104e4:	f001 fc93 	bl	8011e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80104e8:	203a      	movs	r0, #58	; 0x3a
 80104ea:	f001 fcac 	bl	8011e46 <HAL_NVIC_EnableIRQ>

}
 80104ee:	bf00      	nop
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	40023800 	.word	0x40023800

080104fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b08a      	sub	sp, #40	; 0x28
 8010500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010502:	f107 0314 	add.w	r3, r7, #20
 8010506:	2200      	movs	r2, #0
 8010508:	601a      	str	r2, [r3, #0]
 801050a:	605a      	str	r2, [r3, #4]
 801050c:	609a      	str	r2, [r3, #8]
 801050e:	60da      	str	r2, [r3, #12]
 8010510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010512:	2300      	movs	r3, #0
 8010514:	613b      	str	r3, [r7, #16]
 8010516:	4b59      	ldr	r3, [pc, #356]	; (801067c <MX_GPIO_Init+0x180>)
 8010518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801051a:	4a58      	ldr	r2, [pc, #352]	; (801067c <MX_GPIO_Init+0x180>)
 801051c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010520:	6313      	str	r3, [r2, #48]	; 0x30
 8010522:	4b56      	ldr	r3, [pc, #344]	; (801067c <MX_GPIO_Init+0x180>)
 8010524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801052a:	613b      	str	r3, [r7, #16]
 801052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801052e:	2300      	movs	r3, #0
 8010530:	60fb      	str	r3, [r7, #12]
 8010532:	4b52      	ldr	r3, [pc, #328]	; (801067c <MX_GPIO_Init+0x180>)
 8010534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010536:	4a51      	ldr	r2, [pc, #324]	; (801067c <MX_GPIO_Init+0x180>)
 8010538:	f043 0304 	orr.w	r3, r3, #4
 801053c:	6313      	str	r3, [r2, #48]	; 0x30
 801053e:	4b4f      	ldr	r3, [pc, #316]	; (801067c <MX_GPIO_Init+0x180>)
 8010540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010542:	f003 0304 	and.w	r3, r3, #4
 8010546:	60fb      	str	r3, [r7, #12]
 8010548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801054a:	2300      	movs	r3, #0
 801054c:	60bb      	str	r3, [r7, #8]
 801054e:	4b4b      	ldr	r3, [pc, #300]	; (801067c <MX_GPIO_Init+0x180>)
 8010550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010552:	4a4a      	ldr	r2, [pc, #296]	; (801067c <MX_GPIO_Init+0x180>)
 8010554:	f043 0301 	orr.w	r3, r3, #1
 8010558:	6313      	str	r3, [r2, #48]	; 0x30
 801055a:	4b48      	ldr	r3, [pc, #288]	; (801067c <MX_GPIO_Init+0x180>)
 801055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801055e:	f003 0301 	and.w	r3, r3, #1
 8010562:	60bb      	str	r3, [r7, #8]
 8010564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010566:	2300      	movs	r3, #0
 8010568:	607b      	str	r3, [r7, #4]
 801056a:	4b44      	ldr	r3, [pc, #272]	; (801067c <MX_GPIO_Init+0x180>)
 801056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801056e:	4a43      	ldr	r2, [pc, #268]	; (801067c <MX_GPIO_Init+0x180>)
 8010570:	f043 0302 	orr.w	r3, r3, #2
 8010574:	6313      	str	r3, [r2, #48]	; 0x30
 8010576:	4b41      	ldr	r3, [pc, #260]	; (801067c <MX_GPIO_Init+0x180>)
 8010578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801057a:	f003 0302 	and.w	r3, r3, #2
 801057e:	607b      	str	r3, [r7, #4]
 8010580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010582:	2300      	movs	r3, #0
 8010584:	603b      	str	r3, [r7, #0]
 8010586:	4b3d      	ldr	r3, [pc, #244]	; (801067c <MX_GPIO_Init+0x180>)
 8010588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058a:	4a3c      	ldr	r2, [pc, #240]	; (801067c <MX_GPIO_Init+0x180>)
 801058c:	f043 0308 	orr.w	r3, r3, #8
 8010590:	6313      	str	r3, [r2, #48]	; 0x30
 8010592:	4b3a      	ldr	r3, [pc, #232]	; (801067c <MX_GPIO_Init+0x180>)
 8010594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010596:	f003 0308 	and.w	r3, r3, #8
 801059a:	603b      	str	r3, [r7, #0]
 801059c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 801059e:	2200      	movs	r2, #0
 80105a0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80105a4:	4836      	ldr	r0, [pc, #216]	; (8010680 <MX_GPIO_Init+0x184>)
 80105a6:	f002 fcfb 	bl	8012fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 80105aa:	2200      	movs	r2, #0
 80105ac:	2105      	movs	r1, #5
 80105ae:	4835      	ldr	r0, [pc, #212]	; (8010684 <MX_GPIO_Init+0x188>)
 80105b0:	f002 fcf6 	bl	8012fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80105b4:	2200      	movs	r2, #0
 80105b6:	2104      	movs	r1, #4
 80105b8:	4833      	ldr	r0, [pc, #204]	; (8010688 <MX_GPIO_Init+0x18c>)
 80105ba:	f002 fcf1 	bl	8012fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80105be:	2200      	movs	r2, #0
 80105c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80105c4:	4831      	ldr	r0, [pc, #196]	; (801068c <MX_GPIO_Init+0x190>)
 80105c6:	f002 fceb 	bl	8012fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 80105ca:	f44f 7341 	mov.w	r3, #772	; 0x304
 80105ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105d0:	2301      	movs	r3, #1
 80105d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105d4:	2300      	movs	r3, #0
 80105d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105d8:	2300      	movs	r3, #0
 80105da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80105dc:	f107 0314 	add.w	r3, r7, #20
 80105e0:	4619      	mov	r1, r3
 80105e2:	4827      	ldr	r0, [pc, #156]	; (8010680 <MX_GPIO_Init+0x184>)
 80105e4:	f002 fb42 	bl	8012c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80105e8:	2305      	movs	r3, #5
 80105ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105ec:	2301      	movs	r3, #1
 80105ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105f0:	2300      	movs	r3, #0
 80105f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105f4:	2300      	movs	r3, #0
 80105f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105f8:	f107 0314 	add.w	r3, r7, #20
 80105fc:	4619      	mov	r1, r3
 80105fe:	4821      	ldr	r0, [pc, #132]	; (8010684 <MX_GPIO_Init+0x188>)
 8010600:	f002 fb34 	bl	8012c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8010604:	f241 0304 	movw	r3, #4100	; 0x1004
 8010608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801060a:	2300      	movs	r3, #0
 801060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801060e:	2300      	movs	r3, #0
 8010610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010612:	f107 0314 	add.w	r3, r7, #20
 8010616:	4619      	mov	r1, r3
 8010618:	481c      	ldr	r0, [pc, #112]	; (801068c <MX_GPIO_Init+0x190>)
 801061a:	f002 fb27 	bl	8012c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 801061e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010624:	2300      	movs	r3, #0
 8010626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010628:	2300      	movs	r3, #0
 801062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801062c:	f107 0314 	add.w	r3, r7, #20
 8010630:	4619      	mov	r1, r3
 8010632:	4814      	ldr	r0, [pc, #80]	; (8010684 <MX_GPIO_Init+0x188>)
 8010634:	f002 fb1a 	bl	8012c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010638:	2304      	movs	r3, #4
 801063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801063c:	2301      	movs	r3, #1
 801063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010640:	2300      	movs	r3, #0
 8010642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010644:	2300      	movs	r3, #0
 8010646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010648:	f107 0314 	add.w	r3, r7, #20
 801064c:	4619      	mov	r1, r3
 801064e:	480e      	ldr	r0, [pc, #56]	; (8010688 <MX_GPIO_Init+0x18c>)
 8010650:	f002 fb0c 	bl	8012c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801065a:	2301      	movs	r3, #1
 801065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801065e:	2300      	movs	r3, #0
 8010660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010662:	2300      	movs	r3, #0
 8010664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010666:	f107 0314 	add.w	r3, r7, #20
 801066a:	4619      	mov	r1, r3
 801066c:	4807      	ldr	r0, [pc, #28]	; (801068c <MX_GPIO_Init+0x190>)
 801066e:	f002 fafd 	bl	8012c6c <HAL_GPIO_Init>

}
 8010672:	bf00      	nop
 8010674:	3728      	adds	r7, #40	; 0x28
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	40023800 	.word	0x40023800
 8010680:	40020800 	.word	0x40020800
 8010684:	40020000 	.word	0x40020000
 8010688:	40020c00 	.word	0x40020c00
 801068c:	40020400 	.word	0x40020400

08010690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010690:	b480      	push	{r7}
 8010692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010694:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010696:	e7fe      	b.n	8010696 <Error_Handler+0x6>

08010698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801069e:	2300      	movs	r3, #0
 80106a0:	607b      	str	r3, [r7, #4]
 80106a2:	4b13      	ldr	r3, [pc, #76]	; (80106f0 <HAL_MspInit+0x58>)
 80106a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106a6:	4a12      	ldr	r2, [pc, #72]	; (80106f0 <HAL_MspInit+0x58>)
 80106a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80106ac:	6453      	str	r3, [r2, #68]	; 0x44
 80106ae:	4b10      	ldr	r3, [pc, #64]	; (80106f0 <HAL_MspInit+0x58>)
 80106b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106b6:	607b      	str	r3, [r7, #4]
 80106b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80106ba:	2300      	movs	r3, #0
 80106bc:	603b      	str	r3, [r7, #0]
 80106be:	4b0c      	ldr	r3, [pc, #48]	; (80106f0 <HAL_MspInit+0x58>)
 80106c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106c2:	4a0b      	ldr	r2, [pc, #44]	; (80106f0 <HAL_MspInit+0x58>)
 80106c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106c8:	6413      	str	r3, [r2, #64]	; 0x40
 80106ca:	4b09      	ldr	r3, [pc, #36]	; (80106f0 <HAL_MspInit+0x58>)
 80106cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106d2:	603b      	str	r3, [r7, #0]
 80106d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80106d6:	2200      	movs	r2, #0
 80106d8:	2100      	movs	r1, #0
 80106da:	2004      	movs	r0, #4
 80106dc:	f001 fb97 	bl	8011e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80106e0:	2004      	movs	r0, #4
 80106e2:	f001 fbb0 	bl	8011e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80106e6:	bf00      	nop
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	40023800 	.word	0x40023800

080106f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b08c      	sub	sp, #48	; 0x30
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106fc:	f107 031c 	add.w	r3, r7, #28
 8010700:	2200      	movs	r2, #0
 8010702:	601a      	str	r2, [r3, #0]
 8010704:	605a      	str	r2, [r3, #4]
 8010706:	609a      	str	r2, [r3, #8]
 8010708:	60da      	str	r2, [r3, #12]
 801070a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4a73      	ldr	r2, [pc, #460]	; (80108e0 <HAL_ADC_MspInit+0x1ec>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d17a      	bne.n	801080c <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8010716:	2300      	movs	r3, #0
 8010718:	61bb      	str	r3, [r7, #24]
 801071a:	4b72      	ldr	r3, [pc, #456]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 801071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801071e:	4a71      	ldr	r2, [pc, #452]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010724:	6453      	str	r3, [r2, #68]	; 0x44
 8010726:	4b6f      	ldr	r3, [pc, #444]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801072a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801072e:	61bb      	str	r3, [r7, #24]
 8010730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010732:	2300      	movs	r3, #0
 8010734:	617b      	str	r3, [r7, #20]
 8010736:	4b6b      	ldr	r3, [pc, #428]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801073a:	4a6a      	ldr	r2, [pc, #424]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 801073c:	f043 0304 	orr.w	r3, r3, #4
 8010740:	6313      	str	r3, [r2, #48]	; 0x30
 8010742:	4b68      	ldr	r3, [pc, #416]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010746:	f003 0304 	and.w	r3, r3, #4
 801074a:	617b      	str	r3, [r7, #20]
 801074c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801074e:	2300      	movs	r3, #0
 8010750:	613b      	str	r3, [r7, #16]
 8010752:	4b64      	ldr	r3, [pc, #400]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010756:	4a63      	ldr	r2, [pc, #396]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010758:	f043 0302 	orr.w	r3, r3, #2
 801075c:	6313      	str	r3, [r2, #48]	; 0x30
 801075e:	4b61      	ldr	r3, [pc, #388]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010762:	f003 0302 	and.w	r3, r3, #2
 8010766:	613b      	str	r3, [r7, #16]
 8010768:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 801076a:	2311      	movs	r3, #17
 801076c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801076e:	2303      	movs	r3, #3
 8010770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010772:	2300      	movs	r3, #0
 8010774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010776:	f107 031c 	add.w	r3, r7, #28
 801077a:	4619      	mov	r1, r3
 801077c:	485a      	ldr	r0, [pc, #360]	; (80108e8 <HAL_ADC_MspInit+0x1f4>)
 801077e:	f002 fa75 	bl	8012c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010782:	2302      	movs	r3, #2
 8010784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010786:	2303      	movs	r3, #3
 8010788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801078a:	2300      	movs	r3, #0
 801078c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801078e:	f107 031c 	add.w	r3, r7, #28
 8010792:	4619      	mov	r1, r3
 8010794:	4855      	ldr	r0, [pc, #340]	; (80108ec <HAL_ADC_MspInit+0x1f8>)
 8010796:	f002 fa69 	bl	8012c6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 801079a:	4b55      	ldr	r3, [pc, #340]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 801079c:	4a55      	ldr	r2, [pc, #340]	; (80108f4 <HAL_ADC_MspInit+0x200>)
 801079e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80107a0:	4b53      	ldr	r3, [pc, #332]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107a2:	2200      	movs	r2, #0
 80107a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80107a6:	4b52      	ldr	r3, [pc, #328]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80107ac:	4b50      	ldr	r3, [pc, #320]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80107b2:	4b4f      	ldr	r3, [pc, #316]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80107b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80107ba:	4b4d      	ldr	r3, [pc, #308]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80107c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80107c2:	4b4b      	ldr	r3, [pc, #300]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80107c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80107ca:	4b49      	ldr	r3, [pc, #292]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80107d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80107d2:	4b47      	ldr	r3, [pc, #284]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80107d8:	4b45      	ldr	r3, [pc, #276]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107da:	2200      	movs	r2, #0
 80107dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80107de:	4844      	ldr	r0, [pc, #272]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107e0:	f001 fb4c 	bl	8011e7c <HAL_DMA_Init>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d001      	beq.n	80107ee <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80107ea:	f7ff ff51 	bl	8010690 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4a3f      	ldr	r2, [pc, #252]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107f2:	639a      	str	r2, [r3, #56]	; 0x38
 80107f4:	4a3e      	ldr	r2, [pc, #248]	; (80108f0 <HAL_ADC_MspInit+0x1fc>)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80107fa:	2200      	movs	r2, #0
 80107fc:	2100      	movs	r1, #0
 80107fe:	2012      	movs	r0, #18
 8010800:	f001 fb05 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8010804:	2012      	movs	r0, #18
 8010806:	f001 fb1e 	bl	8011e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 801080a:	e065      	b.n	80108d8 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a39      	ldr	r2, [pc, #228]	; (80108f8 <HAL_ADC_MspInit+0x204>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d160      	bne.n	80108d8 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8010816:	2300      	movs	r3, #0
 8010818:	60fb      	str	r3, [r7, #12]
 801081a:	4b32      	ldr	r3, [pc, #200]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 801081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801081e:	4a31      	ldr	r2, [pc, #196]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010824:	6453      	str	r3, [r2, #68]	; 0x44
 8010826:	4b2f      	ldr	r3, [pc, #188]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801082a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801082e:	60fb      	str	r3, [r7, #12]
 8010830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010832:	2300      	movs	r3, #0
 8010834:	60bb      	str	r3, [r7, #8]
 8010836:	4b2b      	ldr	r3, [pc, #172]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801083a:	4a2a      	ldr	r2, [pc, #168]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 801083c:	f043 0304 	orr.w	r3, r3, #4
 8010840:	6313      	str	r3, [r2, #48]	; 0x30
 8010842:	4b28      	ldr	r3, [pc, #160]	; (80108e4 <HAL_ADC_MspInit+0x1f0>)
 8010844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010846:	f003 0304 	and.w	r3, r3, #4
 801084a:	60bb      	str	r3, [r7, #8]
 801084c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 801084e:	2322      	movs	r3, #34	; 0x22
 8010850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010852:	2303      	movs	r3, #3
 8010854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010856:	2300      	movs	r3, #0
 8010858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801085a:	f107 031c 	add.w	r3, r7, #28
 801085e:	4619      	mov	r1, r3
 8010860:	4821      	ldr	r0, [pc, #132]	; (80108e8 <HAL_ADC_MspInit+0x1f4>)
 8010862:	f002 fa03 	bl	8012c6c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8010866:	4b25      	ldr	r3, [pc, #148]	; (80108fc <HAL_ADC_MspInit+0x208>)
 8010868:	4a25      	ldr	r2, [pc, #148]	; (8010900 <HAL_ADC_MspInit+0x20c>)
 801086a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 801086c:	4b23      	ldr	r3, [pc, #140]	; (80108fc <HAL_ADC_MspInit+0x208>)
 801086e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010872:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010874:	4b21      	ldr	r3, [pc, #132]	; (80108fc <HAL_ADC_MspInit+0x208>)
 8010876:	2200      	movs	r2, #0
 8010878:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 801087a:	4b20      	ldr	r3, [pc, #128]	; (80108fc <HAL_ADC_MspInit+0x208>)
 801087c:	2200      	movs	r2, #0
 801087e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8010880:	4b1e      	ldr	r3, [pc, #120]	; (80108fc <HAL_ADC_MspInit+0x208>)
 8010882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010886:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010888:	4b1c      	ldr	r3, [pc, #112]	; (80108fc <HAL_ADC_MspInit+0x208>)
 801088a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801088e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010890:	4b1a      	ldr	r3, [pc, #104]	; (80108fc <HAL_ADC_MspInit+0x208>)
 8010892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010896:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8010898:	4b18      	ldr	r3, [pc, #96]	; (80108fc <HAL_ADC_MspInit+0x208>)
 801089a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801089e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80108a0:	4b16      	ldr	r3, [pc, #88]	; (80108fc <HAL_ADC_MspInit+0x208>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80108a6:	4b15      	ldr	r3, [pc, #84]	; (80108fc <HAL_ADC_MspInit+0x208>)
 80108a8:	2200      	movs	r2, #0
 80108aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80108ac:	4813      	ldr	r0, [pc, #76]	; (80108fc <HAL_ADC_MspInit+0x208>)
 80108ae:	f001 fae5 	bl	8011e7c <HAL_DMA_Init>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d001      	beq.n	80108bc <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 80108b8:	f7ff feea 	bl	8010690 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4a0f      	ldr	r2, [pc, #60]	; (80108fc <HAL_ADC_MspInit+0x208>)
 80108c0:	639a      	str	r2, [r3, #56]	; 0x38
 80108c2:	4a0e      	ldr	r2, [pc, #56]	; (80108fc <HAL_ADC_MspInit+0x208>)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80108c8:	2200      	movs	r2, #0
 80108ca:	2100      	movs	r1, #0
 80108cc:	2012      	movs	r0, #18
 80108ce:	f001 fa9e 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80108d2:	2012      	movs	r0, #18
 80108d4:	f001 fab7 	bl	8011e46 <HAL_NVIC_EnableIRQ>
}
 80108d8:	bf00      	nop
 80108da:	3730      	adds	r7, #48	; 0x30
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	40012000 	.word	0x40012000
 80108e4:	40023800 	.word	0x40023800
 80108e8:	40020800 	.word	0x40020800
 80108ec:	40020400 	.word	0x40020400
 80108f0:	20004a00 	.word	0x20004a00
 80108f4:	40026410 	.word	0x40026410
 80108f8:	40012100 	.word	0x40012100
 80108fc:	20004ff4 	.word	0x20004ff4
 8010900:	40026440 	.word	0x40026440

08010904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b08a      	sub	sp, #40	; 0x28
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801090c:	f107 0314 	add.w	r3, r7, #20
 8010910:	2200      	movs	r2, #0
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	605a      	str	r2, [r3, #4]
 8010916:	609a      	str	r2, [r3, #8]
 8010918:	60da      	str	r2, [r3, #12]
 801091a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a19      	ldr	r2, [pc, #100]	; (8010988 <HAL_SPI_MspInit+0x84>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d12c      	bne.n	8010980 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010926:	2300      	movs	r3, #0
 8010928:	613b      	str	r3, [r7, #16]
 801092a:	4b18      	ldr	r3, [pc, #96]	; (801098c <HAL_SPI_MspInit+0x88>)
 801092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801092e:	4a17      	ldr	r2, [pc, #92]	; (801098c <HAL_SPI_MspInit+0x88>)
 8010930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010934:	6413      	str	r3, [r2, #64]	; 0x40
 8010936:	4b15      	ldr	r3, [pc, #84]	; (801098c <HAL_SPI_MspInit+0x88>)
 8010938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801093a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801093e:	613b      	str	r3, [r7, #16]
 8010940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010942:	2300      	movs	r3, #0
 8010944:	60fb      	str	r3, [r7, #12]
 8010946:	4b11      	ldr	r3, [pc, #68]	; (801098c <HAL_SPI_MspInit+0x88>)
 8010948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801094a:	4a10      	ldr	r2, [pc, #64]	; (801098c <HAL_SPI_MspInit+0x88>)
 801094c:	f043 0304 	orr.w	r3, r3, #4
 8010950:	6313      	str	r3, [r2, #48]	; 0x30
 8010952:	4b0e      	ldr	r3, [pc, #56]	; (801098c <HAL_SPI_MspInit+0x88>)
 8010954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010956:	f003 0304 	and.w	r3, r3, #4
 801095a:	60fb      	str	r3, [r7, #12]
 801095c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 801095e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010964:	2302      	movs	r3, #2
 8010966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010968:	2300      	movs	r3, #0
 801096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801096c:	2303      	movs	r3, #3
 801096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010970:	2306      	movs	r3, #6
 8010972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010974:	f107 0314 	add.w	r3, r7, #20
 8010978:	4619      	mov	r1, r3
 801097a:	4805      	ldr	r0, [pc, #20]	; (8010990 <HAL_SPI_MspInit+0x8c>)
 801097c:	f002 f976 	bl	8012c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8010980:	bf00      	nop
 8010982:	3728      	adds	r7, #40	; 0x28
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	40003c00 	.word	0x40003c00
 801098c:	40023800 	.word	0x40023800
 8010990:	40020800 	.word	0x40020800

08010994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b086      	sub	sp, #24
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4a40      	ldr	r2, [pc, #256]	; (8010aa4 <HAL_TIM_Base_MspInit+0x110>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d116      	bne.n	80109d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80109a6:	2300      	movs	r3, #0
 80109a8:	617b      	str	r3, [r7, #20]
 80109aa:	4b3f      	ldr	r3, [pc, #252]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 80109ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ae:	4a3e      	ldr	r2, [pc, #248]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 80109b0:	f043 0301 	orr.w	r3, r3, #1
 80109b4:	6453      	str	r3, [r2, #68]	; 0x44
 80109b6:	4b3c      	ldr	r3, [pc, #240]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 80109b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ba:	f003 0301 	and.w	r3, r3, #1
 80109be:	617b      	str	r3, [r7, #20]
 80109c0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80109c2:	2200      	movs	r2, #0
 80109c4:	2101      	movs	r1, #1
 80109c6:	2019      	movs	r0, #25
 80109c8:	f001 fa21 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80109cc:	2019      	movs	r0, #25
 80109ce:	f001 fa3a 	bl	8011e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80109d2:	e062      	b.n	8010a9a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109dc:	d116      	bne.n	8010a0c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80109de:	2300      	movs	r3, #0
 80109e0:	613b      	str	r3, [r7, #16]
 80109e2:	4b31      	ldr	r3, [pc, #196]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 80109e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e6:	4a30      	ldr	r2, [pc, #192]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 80109e8:	f043 0301 	orr.w	r3, r3, #1
 80109ec:	6413      	str	r3, [r2, #64]	; 0x40
 80109ee:	4b2e      	ldr	r3, [pc, #184]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 80109f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f2:	f003 0301 	and.w	r3, r3, #1
 80109f6:	613b      	str	r3, [r7, #16]
 80109f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80109fa:	2200      	movs	r2, #0
 80109fc:	2100      	movs	r1, #0
 80109fe:	201c      	movs	r0, #28
 8010a00:	f001 fa05 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8010a04:	201c      	movs	r0, #28
 8010a06:	f001 fa1e 	bl	8011e46 <HAL_NVIC_EnableIRQ>
}
 8010a0a:	e046      	b.n	8010a9a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4a26      	ldr	r2, [pc, #152]	; (8010aac <HAL_TIM_Base_MspInit+0x118>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d116      	bne.n	8010a44 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8010a16:	2300      	movs	r3, #0
 8010a18:	60fb      	str	r3, [r7, #12]
 8010a1a:	4b23      	ldr	r3, [pc, #140]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 8010a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1e:	4a22      	ldr	r2, [pc, #136]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 8010a20:	f043 0308 	orr.w	r3, r3, #8
 8010a24:	6413      	str	r3, [r2, #64]	; 0x40
 8010a26:	4b20      	ldr	r3, [pc, #128]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 8010a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a2a:	f003 0308 	and.w	r3, r3, #8
 8010a2e:	60fb      	str	r3, [r7, #12]
 8010a30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8010a32:	2200      	movs	r2, #0
 8010a34:	2100      	movs	r1, #0
 8010a36:	2032      	movs	r0, #50	; 0x32
 8010a38:	f001 f9e9 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8010a3c:	2032      	movs	r0, #50	; 0x32
 8010a3e:	f001 fa02 	bl	8011e46 <HAL_NVIC_EnableIRQ>
}
 8010a42:	e02a      	b.n	8010a9a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a19      	ldr	r2, [pc, #100]	; (8010ab0 <HAL_TIM_Base_MspInit+0x11c>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d125      	bne.n	8010a9a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8010a4e:	2300      	movs	r3, #0
 8010a50:	60bb      	str	r3, [r7, #8]
 8010a52:	4b15      	ldr	r3, [pc, #84]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 8010a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a56:	4a14      	ldr	r2, [pc, #80]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 8010a58:	f043 0302 	orr.w	r3, r3, #2
 8010a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8010a5e:	4b12      	ldr	r3, [pc, #72]	; (8010aa8 <HAL_TIM_Base_MspInit+0x114>)
 8010a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a62:	f003 0302 	and.w	r3, r3, #2
 8010a66:	60bb      	str	r3, [r7, #8]
 8010a68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2102      	movs	r1, #2
 8010a6e:	202c      	movs	r0, #44	; 0x2c
 8010a70:	f001 f9cd 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8010a74:	202c      	movs	r0, #44	; 0x2c
 8010a76:	f001 f9e6 	bl	8011e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	202d      	movs	r0, #45	; 0x2d
 8010a80:	f001 f9c5 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8010a84:	202d      	movs	r0, #45	; 0x2d
 8010a86:	f001 f9de 	bl	8011e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	202e      	movs	r0, #46	; 0x2e
 8010a90:	f001 f9bd 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8010a94:	202e      	movs	r0, #46	; 0x2e
 8010a96:	f001 f9d6 	bl	8011e46 <HAL_NVIC_EnableIRQ>
}
 8010a9a:	bf00      	nop
 8010a9c:	3718      	adds	r7, #24
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	40010000 	.word	0x40010000
 8010aa8:	40023800 	.word	0x40023800
 8010aac:	40000c00 	.word	0x40000c00
 8010ab0:	40010400 	.word	0x40010400

08010ab4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b08c      	sub	sp, #48	; 0x30
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010abc:	f107 031c 	add.w	r3, r7, #28
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	601a      	str	r2, [r3, #0]
 8010ac4:	605a      	str	r2, [r3, #4]
 8010ac6:	609a      	str	r2, [r3, #8]
 8010ac8:	60da      	str	r2, [r3, #12]
 8010aca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a3a      	ldr	r2, [pc, #232]	; (8010bbc <HAL_TIM_Encoder_MspInit+0x108>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d134      	bne.n	8010b40 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	61bb      	str	r3, [r7, #24]
 8010ada:	4b39      	ldr	r3, [pc, #228]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ade:	4a38      	ldr	r2, [pc, #224]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010ae0:	f043 0302 	orr.w	r3, r3, #2
 8010ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8010ae6:	4b36      	ldr	r3, [pc, #216]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aea:	f003 0302 	and.w	r3, r3, #2
 8010aee:	61bb      	str	r3, [r7, #24]
 8010af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010af2:	2300      	movs	r3, #0
 8010af4:	617b      	str	r3, [r7, #20]
 8010af6:	4b32      	ldr	r3, [pc, #200]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010afa:	4a31      	ldr	r2, [pc, #196]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010afc:	f043 0301 	orr.w	r3, r3, #1
 8010b00:	6313      	str	r3, [r2, #48]	; 0x30
 8010b02:	4b2f      	ldr	r3, [pc, #188]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b06:	f003 0301 	and.w	r3, r3, #1
 8010b0a:	617b      	str	r3, [r7, #20]
 8010b0c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010b0e:	23c0      	movs	r3, #192	; 0xc0
 8010b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b12:	2302      	movs	r3, #2
 8010b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b16:	2300      	movs	r3, #0
 8010b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8010b1e:	2302      	movs	r3, #2
 8010b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b22:	f107 031c 	add.w	r3, r7, #28
 8010b26:	4619      	mov	r1, r3
 8010b28:	4826      	ldr	r0, [pc, #152]	; (8010bc4 <HAL_TIM_Encoder_MspInit+0x110>)
 8010b2a:	f002 f89f 	bl	8012c6c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8010b2e:	2200      	movs	r2, #0
 8010b30:	2100      	movs	r1, #0
 8010b32:	201d      	movs	r0, #29
 8010b34:	f001 f96b 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8010b38:	201d      	movs	r0, #29
 8010b3a:	f001 f984 	bl	8011e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8010b3e:	e038      	b.n	8010bb2 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4a20      	ldr	r2, [pc, #128]	; (8010bc8 <HAL_TIM_Encoder_MspInit+0x114>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d133      	bne.n	8010bb2 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	613b      	str	r3, [r7, #16]
 8010b4e:	4b1c      	ldr	r3, [pc, #112]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b52:	4a1b      	ldr	r2, [pc, #108]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010b54:	f043 0304 	orr.w	r3, r3, #4
 8010b58:	6413      	str	r3, [r2, #64]	; 0x40
 8010b5a:	4b19      	ldr	r3, [pc, #100]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b5e:	f003 0304 	and.w	r3, r3, #4
 8010b62:	613b      	str	r3, [r7, #16]
 8010b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b66:	2300      	movs	r3, #0
 8010b68:	60fb      	str	r3, [r7, #12]
 8010b6a:	4b15      	ldr	r3, [pc, #84]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b6e:	4a14      	ldr	r2, [pc, #80]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010b70:	f043 0302 	orr.w	r3, r3, #2
 8010b74:	6313      	str	r3, [r2, #48]	; 0x30
 8010b76:	4b12      	ldr	r3, [pc, #72]	; (8010bc0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b7a:	f003 0302 	and.w	r3, r3, #2
 8010b7e:	60fb      	str	r3, [r7, #12]
 8010b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010b82:	23c0      	movs	r3, #192	; 0xc0
 8010b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b86:	2302      	movs	r3, #2
 8010b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8010b92:	2302      	movs	r3, #2
 8010b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b96:	f107 031c 	add.w	r3, r7, #28
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	480b      	ldr	r0, [pc, #44]	; (8010bcc <HAL_TIM_Encoder_MspInit+0x118>)
 8010b9e:	f002 f865 	bl	8012c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	201e      	movs	r0, #30
 8010ba8:	f001 f931 	bl	8011e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8010bac:	201e      	movs	r0, #30
 8010bae:	f001 f94a 	bl	8011e46 <HAL_NVIC_EnableIRQ>
}
 8010bb2:	bf00      	nop
 8010bb4:	3730      	adds	r7, #48	; 0x30
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	40000400 	.word	0x40000400
 8010bc0:	40023800 	.word	0x40023800
 8010bc4:	40020000 	.word	0x40020000
 8010bc8:	40000800 	.word	0x40000800
 8010bcc:	40020400 	.word	0x40020400

08010bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b08c      	sub	sp, #48	; 0x30
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010bd8:	f107 031c 	add.w	r3, r7, #28
 8010bdc:	2200      	movs	r2, #0
 8010bde:	601a      	str	r2, [r3, #0]
 8010be0:	605a      	str	r2, [r3, #4]
 8010be2:	609a      	str	r2, [r3, #8]
 8010be4:	60da      	str	r2, [r3, #12]
 8010be6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bf0:	d11e      	bne.n	8010c30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	61bb      	str	r3, [r7, #24]
 8010bf6:	4b43      	ldr	r3, [pc, #268]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bfa:	4a42      	ldr	r2, [pc, #264]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010bfc:	f043 0301 	orr.w	r3, r3, #1
 8010c00:	6313      	str	r3, [r2, #48]	; 0x30
 8010c02:	4b40      	ldr	r3, [pc, #256]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c06:	f003 0301 	and.w	r3, r3, #1
 8010c0a:	61bb      	str	r3, [r7, #24]
 8010c0c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8010c0e:	2308      	movs	r3, #8
 8010c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c12:	2302      	movs	r3, #2
 8010c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c1a:	2303      	movs	r3, #3
 8010c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c22:	f107 031c 	add.w	r3, r7, #28
 8010c26:	4619      	mov	r1, r3
 8010c28:	4837      	ldr	r0, [pc, #220]	; (8010d08 <HAL_TIM_MspPostInit+0x138>)
 8010c2a:	f002 f81f 	bl	8012c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8010c2e:	e064      	b.n	8010cfa <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4a35      	ldr	r2, [pc, #212]	; (8010d0c <HAL_TIM_MspPostInit+0x13c>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d11e      	bne.n	8010c78 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	617b      	str	r3, [r7, #20]
 8010c3e:	4b31      	ldr	r3, [pc, #196]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c42:	4a30      	ldr	r2, [pc, #192]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010c44:	f043 0301 	orr.w	r3, r3, #1
 8010c48:	6313      	str	r3, [r2, #48]	; 0x30
 8010c4a:	4b2e      	ldr	r3, [pc, #184]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c4e:	f003 0301 	and.w	r3, r3, #1
 8010c52:	617b      	str	r3, [r7, #20]
 8010c54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010c56:	2302      	movs	r3, #2
 8010c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c5a:	2302      	movs	r3, #2
 8010c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c62:	2300      	movs	r3, #0
 8010c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8010c66:	2302      	movs	r3, #2
 8010c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c6a:	f107 031c 	add.w	r3, r7, #28
 8010c6e:	4619      	mov	r1, r3
 8010c70:	4825      	ldr	r0, [pc, #148]	; (8010d08 <HAL_TIM_MspPostInit+0x138>)
 8010c72:	f001 fffb 	bl	8012c6c <HAL_GPIO_Init>
}
 8010c76:	e040      	b.n	8010cfa <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4a24      	ldr	r2, [pc, #144]	; (8010d10 <HAL_TIM_MspPostInit+0x140>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d13b      	bne.n	8010cfa <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c82:	2300      	movs	r3, #0
 8010c84:	613b      	str	r3, [r7, #16]
 8010c86:	4b1f      	ldr	r3, [pc, #124]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c8a:	4a1e      	ldr	r2, [pc, #120]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010c8c:	f043 0301 	orr.w	r3, r3, #1
 8010c90:	6313      	str	r3, [r2, #48]	; 0x30
 8010c92:	4b1c      	ldr	r3, [pc, #112]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c96:	f003 0301 	and.w	r3, r3, #1
 8010c9a:	613b      	str	r3, [r7, #16]
 8010c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	60fb      	str	r3, [r7, #12]
 8010ca2:	4b18      	ldr	r3, [pc, #96]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ca6:	4a17      	ldr	r2, [pc, #92]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010ca8:	f043 0304 	orr.w	r3, r3, #4
 8010cac:	6313      	str	r3, [r2, #48]	; 0x30
 8010cae:	4b15      	ldr	r3, [pc, #84]	; (8010d04 <HAL_TIM_MspPostInit+0x134>)
 8010cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cb2:	f003 0304 	and.w	r3, r3, #4
 8010cb6:	60fb      	str	r3, [r7, #12]
 8010cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8010cba:	2320      	movs	r3, #32
 8010cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010cbe:	2302      	movs	r3, #2
 8010cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010cca:	2303      	movs	r3, #3
 8010ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cce:	f107 031c 	add.w	r3, r7, #28
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	480c      	ldr	r0, [pc, #48]	; (8010d08 <HAL_TIM_MspPostInit+0x138>)
 8010cd6:	f001 ffc9 	bl	8012c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8010cda:	2340      	movs	r3, #64	; 0x40
 8010cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010cde:	2302      	movs	r3, #2
 8010ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010cea:	2303      	movs	r3, #3
 8010cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010cee:	f107 031c 	add.w	r3, r7, #28
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	4807      	ldr	r0, [pc, #28]	; (8010d14 <HAL_TIM_MspPostInit+0x144>)
 8010cf6:	f001 ffb9 	bl	8012c6c <HAL_GPIO_Init>
}
 8010cfa:	bf00      	nop
 8010cfc:	3730      	adds	r7, #48	; 0x30
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	40023800 	.word	0x40023800
 8010d08:	40020000 	.word	0x40020000
 8010d0c:	40000c00 	.word	0x40000c00
 8010d10:	40010400 	.word	0x40010400
 8010d14:	40020800 	.word	0x40020800

08010d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b08a      	sub	sp, #40	; 0x28
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d20:	f107 0314 	add.w	r3, r7, #20
 8010d24:	2200      	movs	r2, #0
 8010d26:	601a      	str	r2, [r3, #0]
 8010d28:	605a      	str	r2, [r3, #4]
 8010d2a:	609a      	str	r2, [r3, #8]
 8010d2c:	60da      	str	r2, [r3, #12]
 8010d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a19      	ldr	r2, [pc, #100]	; (8010d9c <HAL_UART_MspInit+0x84>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d12c      	bne.n	8010d94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	613b      	str	r3, [r7, #16]
 8010d3e:	4b18      	ldr	r3, [pc, #96]	; (8010da0 <HAL_UART_MspInit+0x88>)
 8010d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d42:	4a17      	ldr	r2, [pc, #92]	; (8010da0 <HAL_UART_MspInit+0x88>)
 8010d44:	f043 0310 	orr.w	r3, r3, #16
 8010d48:	6453      	str	r3, [r2, #68]	; 0x44
 8010d4a:	4b15      	ldr	r3, [pc, #84]	; (8010da0 <HAL_UART_MspInit+0x88>)
 8010d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d4e:	f003 0310 	and.w	r3, r3, #16
 8010d52:	613b      	str	r3, [r7, #16]
 8010d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d56:	2300      	movs	r3, #0
 8010d58:	60fb      	str	r3, [r7, #12]
 8010d5a:	4b11      	ldr	r3, [pc, #68]	; (8010da0 <HAL_UART_MspInit+0x88>)
 8010d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d5e:	4a10      	ldr	r2, [pc, #64]	; (8010da0 <HAL_UART_MspInit+0x88>)
 8010d60:	f043 0301 	orr.w	r3, r3, #1
 8010d64:	6313      	str	r3, [r2, #48]	; 0x30
 8010d66:	4b0e      	ldr	r3, [pc, #56]	; (8010da0 <HAL_UART_MspInit+0x88>)
 8010d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d6a:	f003 0301 	and.w	r3, r3, #1
 8010d6e:	60fb      	str	r3, [r7, #12]
 8010d70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8010d72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d78:	2302      	movs	r3, #2
 8010d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d80:	2303      	movs	r3, #3
 8010d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010d84:	2307      	movs	r3, #7
 8010d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d88:	f107 0314 	add.w	r3, r7, #20
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	4805      	ldr	r0, [pc, #20]	; (8010da4 <HAL_UART_MspInit+0x8c>)
 8010d90:	f001 ff6c 	bl	8012c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8010d94:	bf00      	nop
 8010d96:	3728      	adds	r7, #40	; 0x28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	40011000 	.word	0x40011000
 8010da0:	40023800 	.word	0x40023800
 8010da4:	40020000 	.word	0x40020000

08010da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010da8:	b480      	push	{r7}
 8010daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010dac:	e7fe      	b.n	8010dac <NMI_Handler+0x4>

08010dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010dae:	b480      	push	{r7}
 8010db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010db2:	e7fe      	b.n	8010db2 <HardFault_Handler+0x4>

08010db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010db4:	b480      	push	{r7}
 8010db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010db8:	e7fe      	b.n	8010db8 <MemManage_Handler+0x4>

08010dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010dba:	b480      	push	{r7}
 8010dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010dbe:	e7fe      	b.n	8010dbe <BusFault_Handler+0x4>

08010dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010dc4:	e7fe      	b.n	8010dc4 <UsageFault_Handler+0x4>

08010dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010dc6:	b480      	push	{r7}
 8010dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010dca:	bf00      	nop
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010dd8:	bf00      	nop
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010de2:	b480      	push	{r7}
 8010de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010de6:	bf00      	nop
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010df4:	f000 f9b0 	bl	8011158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010df8:	bf00      	nop
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8010e00:	f001 fbfe 	bl	8012600 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8010e04:	bf00      	nop
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8010e0c:	4803      	ldr	r0, [pc, #12]	; (8010e1c <ADC_IRQHandler+0x14>)
 8010e0e:	f000 fa28 	bl	8011262 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8010e12:	4803      	ldr	r0, [pc, #12]	; (8010e20 <ADC_IRQHandler+0x18>)
 8010e14:	f000 fa25 	bl	8011262 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8010e18:	bf00      	nop
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	20004588 	.word	0x20004588
 8010e20:	2000444c 	.word	0x2000444c

08010e24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8010e28:	4802      	ldr	r0, [pc, #8]	; (8010e34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8010e2a:	f003 fd52 	bl	80148d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8010e2e:	bf00      	nop
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	20004ae0 	.word	0x20004ae0

08010e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8010e3c:	4802      	ldr	r0, [pc, #8]	; (8010e48 <TIM2_IRQHandler+0x10>)
 8010e3e:	f003 fd48 	bl	80148d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8010e42:	bf00      	nop
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	20004fb0 	.word	0x20004fb0

08010e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8010e50:	4802      	ldr	r0, [pc, #8]	; (8010e5c <TIM3_IRQHandler+0x10>)
 8010e52:	f003 fd3e 	bl	80148d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8010e56:	bf00      	nop
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	200044e8 	.word	0x200044e8

08010e60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8010e64:	4802      	ldr	r0, [pc, #8]	; (8010e70 <TIM4_IRQHandler+0x10>)
 8010e66:	f003 fd34 	bl	80148d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8010e6a:	bf00      	nop
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	2000440c 	.word	0x2000440c

08010e74 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010e78:	4802      	ldr	r0, [pc, #8]	; (8010e84 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8010e7a:	f003 fd2a 	bl	80148d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8010e7e:	bf00      	nop
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	200043c8 	.word	0x200043c8

08010e88 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010e8c:	4802      	ldr	r0, [pc, #8]	; (8010e98 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8010e8e:	f003 fd20 	bl	80148d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8010e92:	bf00      	nop
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	200043c8 	.word	0x200043c8

08010e9c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010ea0:	4802      	ldr	r0, [pc, #8]	; (8010eac <TIM8_CC_IRQHandler+0x10>)
 8010ea2:	f003 fd16 	bl	80148d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8010ea6:	bf00      	nop
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	200043c8 	.word	0x200043c8

08010eb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8010eb4:	4802      	ldr	r0, [pc, #8]	; (8010ec0 <TIM5_IRQHandler+0x10>)
 8010eb6:	f003 fd0c 	bl	80148d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8010eba:	bf00      	nop
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	200044a4 	.word	0x200044a4

08010ec4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010ec8:	4802      	ldr	r0, [pc, #8]	; (8010ed4 <DMA2_Stream0_IRQHandler+0x10>)
 8010eca:	f001 f8dd 	bl	8012088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8010ece:	bf00      	nop
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20004a00 	.word	0x20004a00

08010ed8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8010edc:	4802      	ldr	r0, [pc, #8]	; (8010ee8 <DMA2_Stream2_IRQHandler+0x10>)
 8010ede:	f001 f8d3 	bl	8012088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8010ee2:	bf00      	nop
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	20004ff4 	.word	0x20004ff4

08010eec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010ef8:	2300      	movs	r3, #0
 8010efa:	617b      	str	r3, [r7, #20]
 8010efc:	e00a      	b.n	8010f14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010efe:	f3af 8000 	nop.w
 8010f02:	4601      	mov	r1, r0
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	1c5a      	adds	r2, r3, #1
 8010f08:	60ba      	str	r2, [r7, #8]
 8010f0a:	b2ca      	uxtb	r2, r1
 8010f0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	3301      	adds	r3, #1
 8010f12:	617b      	str	r3, [r7, #20]
 8010f14:	697a      	ldr	r2, [r7, #20]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	dbf0      	blt.n	8010efe <_read+0x12>
	}

return len;
 8010f1c:	687b      	ldr	r3, [r7, #4]
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3718      	adds	r7, #24
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}

08010f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010f26:	b580      	push	{r7, lr}
 8010f28:	b086      	sub	sp, #24
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	60f8      	str	r0, [r7, #12]
 8010f2e:	60b9      	str	r1, [r7, #8]
 8010f30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f32:	2300      	movs	r3, #0
 8010f34:	617b      	str	r3, [r7, #20]
 8010f36:	e009      	b.n	8010f4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	60ba      	str	r2, [r7, #8]
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7f8 fcd3 	bl	80098ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	617b      	str	r3, [r7, #20]
 8010f4c:	697a      	ldr	r2, [r7, #20]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	dbf1      	blt.n	8010f38 <_write+0x12>
	}
	return len;
 8010f54:	687b      	ldr	r3, [r7, #4]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3718      	adds	r7, #24
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <_close>:

int _close(int file)
{
 8010f5e:	b480      	push	{r7}
 8010f60:	b083      	sub	sp, #12
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
	return -1;
 8010f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	370c      	adds	r7, #12
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010f76:	b480      	push	{r7}
 8010f78:	b083      	sub	sp, #12
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
 8010f7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010f86:	605a      	str	r2, [r3, #4]
	return 0;
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	370c      	adds	r7, #12
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr

08010f96 <_isatty>:

int _isatty(int file)
{
 8010f96:	b480      	push	{r7}
 8010f98:	b083      	sub	sp, #12
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6078      	str	r0, [r7, #4]
	return 1;
 8010f9e:	2301      	movs	r3, #1
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	370c      	adds	r7, #12
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010fac:	b480      	push	{r7}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
	return 0;
 8010fb8:	2300      	movs	r3, #0
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3714      	adds	r7, #20
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr
	...

08010fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b086      	sub	sp, #24
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010fd0:	4a14      	ldr	r2, [pc, #80]	; (8011024 <_sbrk+0x5c>)
 8010fd2:	4b15      	ldr	r3, [pc, #84]	; (8011028 <_sbrk+0x60>)
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010fdc:	4b13      	ldr	r3, [pc, #76]	; (801102c <_sbrk+0x64>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d102      	bne.n	8010fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010fe4:	4b11      	ldr	r3, [pc, #68]	; (801102c <_sbrk+0x64>)
 8010fe6:	4a12      	ldr	r2, [pc, #72]	; (8011030 <_sbrk+0x68>)
 8010fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010fea:	4b10      	ldr	r3, [pc, #64]	; (801102c <_sbrk+0x64>)
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	693a      	ldr	r2, [r7, #16]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d207      	bcs.n	8011008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010ff8:	f005 f8dc 	bl	80161b4 <__errno>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	230c      	movs	r3, #12
 8011000:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8011002:	f04f 33ff 	mov.w	r3, #4294967295
 8011006:	e009      	b.n	801101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011008:	4b08      	ldr	r3, [pc, #32]	; (801102c <_sbrk+0x64>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801100e:	4b07      	ldr	r3, [pc, #28]	; (801102c <_sbrk+0x64>)
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4413      	add	r3, r2
 8011016:	4a05      	ldr	r2, [pc, #20]	; (801102c <_sbrk+0x64>)
 8011018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801101a:	68fb      	ldr	r3, [r7, #12]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3718      	adds	r7, #24
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20020000 	.word	0x20020000
 8011028:	00000400 	.word	0x00000400
 801102c:	2000436c 	.word	0x2000436c
 8011030:	20005088 	.word	0x20005088

08011034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011034:	b480      	push	{r7}
 8011036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011038:	4b08      	ldr	r3, [pc, #32]	; (801105c <SystemInit+0x28>)
 801103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801103e:	4a07      	ldr	r2, [pc, #28]	; (801105c <SystemInit+0x28>)
 8011040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011048:	4b04      	ldr	r3, [pc, #16]	; (801105c <SystemInit+0x28>)
 801104a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801104e:	609a      	str	r2, [r3, #8]
#endif
}
 8011050:	bf00      	nop
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop
 801105c:	e000ed00 	.word	0xe000ed00

08011060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011098 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011066:	e003      	b.n	8011070 <LoopCopyDataInit>

08011068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011068:	4b0c      	ldr	r3, [pc, #48]	; (801109c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801106a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801106c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801106e:	3104      	adds	r1, #4

08011070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011070:	480b      	ldr	r0, [pc, #44]	; (80110a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011072:	4b0c      	ldr	r3, [pc, #48]	; (80110a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011078:	d3f6      	bcc.n	8011068 <CopyDataInit>
  ldr  r2, =_sbss
 801107a:	4a0b      	ldr	r2, [pc, #44]	; (80110a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801107c:	e002      	b.n	8011084 <LoopFillZerobss>

0801107e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801107e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011080:	f842 3b04 	str.w	r3, [r2], #4

08011084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011084:	4b09      	ldr	r3, [pc, #36]	; (80110ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011088:	d3f9      	bcc.n	801107e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801108a:	f7ff ffd3 	bl	8011034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801108e:	f005 f897 	bl	80161c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011092:	f7fe fd55 	bl	800fb40 <main>
  bx  lr    
 8011096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011098:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801109c:	08018de8 	.word	0x08018de8
  ldr  r0, =_sdata
 80110a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80110a4:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 80110a8:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 80110ac:	20005084 	.word	0x20005084

080110b0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80110b0:	e7fe      	b.n	80110b0 <CAN1_RX0_IRQHandler>
	...

080110b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80110b8:	4b0e      	ldr	r3, [pc, #56]	; (80110f4 <HAL_Init+0x40>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4a0d      	ldr	r2, [pc, #52]	; (80110f4 <HAL_Init+0x40>)
 80110be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80110c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80110c4:	4b0b      	ldr	r3, [pc, #44]	; (80110f4 <HAL_Init+0x40>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4a0a      	ldr	r2, [pc, #40]	; (80110f4 <HAL_Init+0x40>)
 80110ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80110ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80110d0:	4b08      	ldr	r3, [pc, #32]	; (80110f4 <HAL_Init+0x40>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4a07      	ldr	r2, [pc, #28]	; (80110f4 <HAL_Init+0x40>)
 80110d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80110da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80110dc:	2003      	movs	r0, #3
 80110de:	f000 fe8b 	bl	8011df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80110e2:	2000      	movs	r0, #0
 80110e4:	f000 f808 	bl	80110f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80110e8:	f7ff fad6 	bl	8010698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80110ec:	2300      	movs	r3, #0
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	40023c00 	.word	0x40023c00

080110f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011100:	4b12      	ldr	r3, [pc, #72]	; (801114c <HAL_InitTick+0x54>)
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	4b12      	ldr	r3, [pc, #72]	; (8011150 <HAL_InitTick+0x58>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	4619      	mov	r1, r3
 801110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011112:	fbb2 f3f3 	udiv	r3, r2, r3
 8011116:	4618      	mov	r0, r3
 8011118:	f000 fea3 	bl	8011e62 <HAL_SYSTICK_Config>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d001      	beq.n	8011126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011122:	2301      	movs	r3, #1
 8011124:	e00e      	b.n	8011144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2b0f      	cmp	r3, #15
 801112a:	d80a      	bhi.n	8011142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801112c:	2200      	movs	r2, #0
 801112e:	6879      	ldr	r1, [r7, #4]
 8011130:	f04f 30ff 	mov.w	r0, #4294967295
 8011134:	f000 fe6b 	bl	8011e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011138:	4a06      	ldr	r2, [pc, #24]	; (8011154 <HAL_InitTick+0x5c>)
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801113e:	2300      	movs	r3, #0
 8011140:	e000      	b.n	8011144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011142:	2301      	movs	r3, #1
}
 8011144:	4618      	mov	r0, r3
 8011146:	3708      	adds	r7, #8
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20000080 	.word	0x20000080
 8011150:	20000088 	.word	0x20000088
 8011154:	20000084 	.word	0x20000084

08011158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011158:	b480      	push	{r7}
 801115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801115c:	4b06      	ldr	r3, [pc, #24]	; (8011178 <HAL_IncTick+0x20>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	461a      	mov	r2, r3
 8011162:	4b06      	ldr	r3, [pc, #24]	; (801117c <HAL_IncTick+0x24>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4413      	add	r3, r2
 8011168:	4a04      	ldr	r2, [pc, #16]	; (801117c <HAL_IncTick+0x24>)
 801116a:	6013      	str	r3, [r2, #0]
}
 801116c:	bf00      	nop
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop
 8011178:	20000088 	.word	0x20000088
 801117c:	2000505c 	.word	0x2000505c

08011180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011180:	b480      	push	{r7}
 8011182:	af00      	add	r7, sp, #0
  return uwTick;
 8011184:	4b03      	ldr	r3, [pc, #12]	; (8011194 <HAL_GetTick+0x14>)
 8011186:	681b      	ldr	r3, [r3, #0]
}
 8011188:	4618      	mov	r0, r3
 801118a:	46bd      	mov	sp, r7
 801118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011190:	4770      	bx	lr
 8011192:	bf00      	nop
 8011194:	2000505c 	.word	0x2000505c

08011198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80111a0:	f7ff ffee 	bl	8011180 <HAL_GetTick>
 80111a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b0:	d005      	beq.n	80111be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80111b2:	4b09      	ldr	r3, [pc, #36]	; (80111d8 <HAL_Delay+0x40>)
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	461a      	mov	r2, r3
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	4413      	add	r3, r2
 80111bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80111be:	bf00      	nop
 80111c0:	f7ff ffde 	bl	8011180 <HAL_GetTick>
 80111c4:	4602      	mov	r2, r0
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	1ad3      	subs	r3, r2, r3
 80111ca:	68fa      	ldr	r2, [r7, #12]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d8f7      	bhi.n	80111c0 <HAL_Delay+0x28>
  {
  }
}
 80111d0:	bf00      	nop
 80111d2:	3710      	adds	r7, #16
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	20000088 	.word	0x20000088

080111dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80111e4:	2300      	movs	r3, #0
 80111e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d101      	bne.n	80111f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80111ee:	2301      	movs	r3, #1
 80111f0:	e033      	b.n	801125a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d109      	bne.n	801120e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7ff fa7a 	bl	80106f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2200      	movs	r2, #0
 8011204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011212:	f003 0310 	and.w	r3, r3, #16
 8011216:	2b00      	cmp	r3, #0
 8011218:	d118      	bne.n	801124c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801121e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8011222:	f023 0302 	bic.w	r3, r3, #2
 8011226:	f043 0202 	orr.w	r2, r3, #2
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 fb8a 	bl	8011948 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801123e:	f023 0303 	bic.w	r3, r3, #3
 8011242:	f043 0201 	orr.w	r2, r3, #1
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	641a      	str	r2, [r3, #64]	; 0x40
 801124a:	e001      	b.n	8011250 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801124c:	2301      	movs	r3, #1
 801124e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2200      	movs	r2, #0
 8011254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8011258:	7bfb      	ldrb	r3, [r7, #15]
}
 801125a:	4618      	mov	r0, r3
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}

08011262 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8011262:	b580      	push	{r7, lr}
 8011264:	b084      	sub	sp, #16
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 801126a:	2300      	movs	r3, #0
 801126c:	60fb      	str	r3, [r7, #12]
 801126e:	2300      	movs	r3, #0
 8011270:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f003 0302 	and.w	r3, r3, #2
 801127c:	2b02      	cmp	r3, #2
 801127e:	bf0c      	ite	eq
 8011280:	2301      	moveq	r3, #1
 8011282:	2300      	movne	r3, #0
 8011284:	b2db      	uxtb	r3, r3
 8011286:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	f003 0320 	and.w	r3, r3, #32
 8011292:	2b20      	cmp	r3, #32
 8011294:	bf0c      	ite	eq
 8011296:	2301      	moveq	r3, #1
 8011298:	2300      	movne	r3, #0
 801129a:	b2db      	uxtb	r3, r3
 801129c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d049      	beq.n	8011338 <HAL_ADC_IRQHandler+0xd6>
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d046      	beq.n	8011338 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ae:	f003 0310 	and.w	r3, r3, #16
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d105      	bne.n	80112c2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d12b      	bne.n	8011328 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d127      	bne.n	8011328 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d006      	beq.n	80112f4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	689b      	ldr	r3, [r3, #8]
 80112ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d119      	bne.n	8011328 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	685a      	ldr	r2, [r3, #4]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f022 0220 	bic.w	r2, r2, #32
 8011302:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011318:	2b00      	cmp	r3, #0
 801131a:	d105      	bne.n	8011328 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011320:	f043 0201 	orr.w	r2, r3, #1
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7fd fea1 	bl	800f070 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f06f 0212 	mvn.w	r2, #18
 8011336:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	f003 0304 	and.w	r3, r3, #4
 8011342:	2b04      	cmp	r3, #4
 8011344:	bf0c      	ite	eq
 8011346:	2301      	moveq	r3, #1
 8011348:	2300      	movne	r3, #0
 801134a:	b2db      	uxtb	r3, r3
 801134c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011358:	2b80      	cmp	r3, #128	; 0x80
 801135a:	bf0c      	ite	eq
 801135c:	2301      	moveq	r3, #1
 801135e:	2300      	movne	r3, #0
 8011360:	b2db      	uxtb	r3, r3
 8011362:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d057      	beq.n	801141a <HAL_ADC_IRQHandler+0x1b8>
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d054      	beq.n	801141a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011374:	f003 0310 	and.w	r3, r3, #16
 8011378:	2b00      	cmp	r3, #0
 801137a:	d105      	bne.n	8011388 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011380:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	689b      	ldr	r3, [r3, #8]
 801138e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8011392:	2b00      	cmp	r3, #0
 8011394:	d139      	bne.n	801140a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801139c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d006      	beq.n	80113b2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	689b      	ldr	r3, [r3, #8]
 80113aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d12b      	bne.n	801140a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d124      	bne.n	801140a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d11d      	bne.n	801140a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d119      	bne.n	801140a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80113e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d105      	bne.n	801140a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011402:	f043 0201 	orr.w	r2, r3, #1
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 fc1a 	bl	8011c44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f06f 020c 	mvn.w	r2, #12
 8011418:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f003 0301 	and.w	r3, r3, #1
 8011424:	2b01      	cmp	r3, #1
 8011426:	bf0c      	ite	eq
 8011428:	2301      	moveq	r3, #1
 801142a:	2300      	movne	r3, #0
 801142c:	b2db      	uxtb	r3, r3
 801142e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801143a:	2b40      	cmp	r3, #64	; 0x40
 801143c:	bf0c      	ite	eq
 801143e:	2301      	moveq	r3, #1
 8011440:	2300      	movne	r3, #0
 8011442:	b2db      	uxtb	r3, r3
 8011444:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d017      	beq.n	801147c <HAL_ADC_IRQHandler+0x21a>
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d014      	beq.n	801147c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f003 0301 	and.w	r3, r3, #1
 801145c:	2b01      	cmp	r3, #1
 801145e:	d10d      	bne.n	801147c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011464:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 f935 	bl	80116dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f06f 0201 	mvn.w	r2, #1
 801147a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	f003 0320 	and.w	r3, r3, #32
 8011486:	2b20      	cmp	r3, #32
 8011488:	bf0c      	ite	eq
 801148a:	2301      	moveq	r3, #1
 801148c:	2300      	movne	r3, #0
 801148e:	b2db      	uxtb	r3, r3
 8011490:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801149c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80114a0:	bf0c      	ite	eq
 80114a2:	2301      	moveq	r3, #1
 80114a4:	2300      	movne	r3, #0
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d015      	beq.n	80114dc <HAL_ADC_IRQHandler+0x27a>
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d012      	beq.n	80114dc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ba:	f043 0202 	orr.w	r2, r3, #2
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f06f 0220 	mvn.w	r2, #32
 80114ca:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f000 f90f 	bl	80116f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f06f 0220 	mvn.w	r2, #32
 80114da:	601a      	str	r2, [r3, #0]
  }
}
 80114dc:	bf00      	nop
 80114de:	3710      	adds	r7, #16
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80114f0:	2300      	movs	r3, #0
 80114f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d101      	bne.n	8011502 <HAL_ADC_Start_DMA+0x1e>
 80114fe:	2302      	movs	r3, #2
 8011500:	e0cc      	b.n	801169c <HAL_ADC_Start_DMA+0x1b8>
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2201      	movs	r2, #1
 8011506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	689b      	ldr	r3, [r3, #8]
 8011510:	f003 0301 	and.w	r3, r3, #1
 8011514:	2b01      	cmp	r3, #1
 8011516:	d018      	beq.n	801154a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	689a      	ldr	r2, [r3, #8]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	f042 0201 	orr.w	r2, r2, #1
 8011526:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8011528:	4b5e      	ldr	r3, [pc, #376]	; (80116a4 <HAL_ADC_Start_DMA+0x1c0>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	4a5e      	ldr	r2, [pc, #376]	; (80116a8 <HAL_ADC_Start_DMA+0x1c4>)
 801152e:	fba2 2303 	umull	r2, r3, r2, r3
 8011532:	0c9a      	lsrs	r2, r3, #18
 8011534:	4613      	mov	r3, r2
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	4413      	add	r3, r2
 801153a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801153c:	e002      	b.n	8011544 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	3b01      	subs	r3, #1
 8011542:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d1f9      	bne.n	801153e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	f003 0301 	and.w	r3, r3, #1
 8011554:	2b01      	cmp	r3, #1
 8011556:	f040 80a0 	bne.w	801169a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801155e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8011562:	f023 0301 	bic.w	r3, r3, #1
 8011566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011578:	2b00      	cmp	r3, #0
 801157a:	d007      	beq.n	801158c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011584:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011598:	d106      	bne.n	80115a8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801159e:	f023 0206 	bic.w	r2, r3, #6
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	645a      	str	r2, [r3, #68]	; 0x44
 80115a6:	e002      	b.n	80115ae <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2200      	movs	r2, #0
 80115ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	2200      	movs	r2, #0
 80115b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80115b6:	4b3d      	ldr	r3, [pc, #244]	; (80116ac <HAL_ADC_Start_DMA+0x1c8>)
 80115b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115be:	4a3c      	ldr	r2, [pc, #240]	; (80116b0 <HAL_ADC_Start_DMA+0x1cc>)
 80115c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115c6:	4a3b      	ldr	r2, [pc, #236]	; (80116b4 <HAL_ADC_Start_DMA+0x1d0>)
 80115c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ce:	4a3a      	ldr	r2, [pc, #232]	; (80116b8 <HAL_ADC_Start_DMA+0x1d4>)
 80115d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80115da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	685a      	ldr	r2, [r3, #4]
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80115ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	689a      	ldr	r2, [r3, #8]
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80115fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	334c      	adds	r3, #76	; 0x4c
 8011606:	4619      	mov	r1, r3
 8011608:	68ba      	ldr	r2, [r7, #8]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f000 fce4 	bl	8011fd8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	f003 031f 	and.w	r3, r3, #31
 8011618:	2b00      	cmp	r3, #0
 801161a:	d12a      	bne.n	8011672 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4a26      	ldr	r2, [pc, #152]	; (80116bc <HAL_ADC_Start_DMA+0x1d8>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d015      	beq.n	8011652 <HAL_ADC_Start_DMA+0x16e>
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4a25      	ldr	r2, [pc, #148]	; (80116c0 <HAL_ADC_Start_DMA+0x1dc>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d105      	bne.n	801163c <HAL_ADC_Start_DMA+0x158>
 8011630:	4b1e      	ldr	r3, [pc, #120]	; (80116ac <HAL_ADC_Start_DMA+0x1c8>)
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	f003 031f 	and.w	r3, r3, #31
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00a      	beq.n	8011652 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	4a20      	ldr	r2, [pc, #128]	; (80116c4 <HAL_ADC_Start_DMA+0x1e0>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d129      	bne.n	801169a <HAL_ADC_Start_DMA+0x1b6>
 8011646:	4b19      	ldr	r3, [pc, #100]	; (80116ac <HAL_ADC_Start_DMA+0x1c8>)
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	f003 031f 	and.w	r3, r3, #31
 801164e:	2b0f      	cmp	r3, #15
 8011650:	d823      	bhi.n	801169a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	689b      	ldr	r3, [r3, #8]
 8011658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801165c:	2b00      	cmp	r3, #0
 801165e:	d11c      	bne.n	801169a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	689a      	ldr	r2, [r3, #8]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801166e:	609a      	str	r2, [r3, #8]
 8011670:	e013      	b.n	801169a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4a11      	ldr	r2, [pc, #68]	; (80116bc <HAL_ADC_Start_DMA+0x1d8>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d10e      	bne.n	801169a <HAL_ADC_Start_DMA+0x1b6>
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	689b      	ldr	r3, [r3, #8]
 8011682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011686:	2b00      	cmp	r3, #0
 8011688:	d107      	bne.n	801169a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	689a      	ldr	r2, [r3, #8]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011698:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 801169a:	2300      	movs	r3, #0
}
 801169c:	4618      	mov	r0, r3
 801169e:	3718      	adds	r7, #24
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	20000080 	.word	0x20000080
 80116a8:	431bde83 	.word	0x431bde83
 80116ac:	40012300 	.word	0x40012300
 80116b0:	08011b41 	.word	0x08011b41
 80116b4:	08011bfb 	.word	0x08011bfb
 80116b8:	08011c17 	.word	0x08011c17
 80116bc:	40012000 	.word	0x40012000
 80116c0:	40012100 	.word	0x40012100
 80116c4:	40012200 	.word	0x40012200

080116c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b083      	sub	sp, #12
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80116d0:	bf00      	nop
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr

080116dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80116dc:	b480      	push	{r7}
 80116de:	b083      	sub	sp, #12
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80116e4:	bf00      	nop
 80116e6:	370c      	adds	r7, #12
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr

080116f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b083      	sub	sp, #12
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80116f8:	bf00      	nop
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr

08011704 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801170e:	2300      	movs	r3, #0
 8011710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011718:	2b01      	cmp	r3, #1
 801171a:	d101      	bne.n	8011720 <HAL_ADC_ConfigChannel+0x1c>
 801171c:	2302      	movs	r3, #2
 801171e:	e105      	b.n	801192c <HAL_ADC_ConfigChannel+0x228>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2201      	movs	r2, #1
 8011724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2b09      	cmp	r3, #9
 801172e:	d925      	bls.n	801177c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	68d9      	ldr	r1, [r3, #12]
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	b29b      	uxth	r3, r3
 801173c:	461a      	mov	r2, r3
 801173e:	4613      	mov	r3, r2
 8011740:	005b      	lsls	r3, r3, #1
 8011742:	4413      	add	r3, r2
 8011744:	3b1e      	subs	r3, #30
 8011746:	2207      	movs	r2, #7
 8011748:	fa02 f303 	lsl.w	r3, r2, r3
 801174c:	43da      	mvns	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	400a      	ands	r2, r1
 8011754:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	68d9      	ldr	r1, [r3, #12]
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	689a      	ldr	r2, [r3, #8]
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	b29b      	uxth	r3, r3
 8011766:	4618      	mov	r0, r3
 8011768:	4603      	mov	r3, r0
 801176a:	005b      	lsls	r3, r3, #1
 801176c:	4403      	add	r3, r0
 801176e:	3b1e      	subs	r3, #30
 8011770:	409a      	lsls	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	430a      	orrs	r2, r1
 8011778:	60da      	str	r2, [r3, #12]
 801177a:	e022      	b.n	80117c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	6919      	ldr	r1, [r3, #16]
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	b29b      	uxth	r3, r3
 8011788:	461a      	mov	r2, r3
 801178a:	4613      	mov	r3, r2
 801178c:	005b      	lsls	r3, r3, #1
 801178e:	4413      	add	r3, r2
 8011790:	2207      	movs	r2, #7
 8011792:	fa02 f303 	lsl.w	r3, r2, r3
 8011796:	43da      	mvns	r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	400a      	ands	r2, r1
 801179e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	6919      	ldr	r1, [r3, #16]
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	689a      	ldr	r2, [r3, #8]
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	4618      	mov	r0, r3
 80117b2:	4603      	mov	r3, r0
 80117b4:	005b      	lsls	r3, r3, #1
 80117b6:	4403      	add	r3, r0
 80117b8:	409a      	lsls	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	430a      	orrs	r2, r1
 80117c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	2b06      	cmp	r3, #6
 80117c8:	d824      	bhi.n	8011814 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	4613      	mov	r3, r2
 80117d6:	009b      	lsls	r3, r3, #2
 80117d8:	4413      	add	r3, r2
 80117da:	3b05      	subs	r3, #5
 80117dc:	221f      	movs	r2, #31
 80117de:	fa02 f303 	lsl.w	r3, r2, r3
 80117e2:	43da      	mvns	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	400a      	ands	r2, r1
 80117ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	4618      	mov	r0, r3
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	685a      	ldr	r2, [r3, #4]
 80117fe:	4613      	mov	r3, r2
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	4413      	add	r3, r2
 8011804:	3b05      	subs	r3, #5
 8011806:	fa00 f203 	lsl.w	r2, r0, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	430a      	orrs	r2, r1
 8011810:	635a      	str	r2, [r3, #52]	; 0x34
 8011812:	e04c      	b.n	80118ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	2b0c      	cmp	r3, #12
 801181a:	d824      	bhi.n	8011866 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	685a      	ldr	r2, [r3, #4]
 8011826:	4613      	mov	r3, r2
 8011828:	009b      	lsls	r3, r3, #2
 801182a:	4413      	add	r3, r2
 801182c:	3b23      	subs	r3, #35	; 0x23
 801182e:	221f      	movs	r2, #31
 8011830:	fa02 f303 	lsl.w	r3, r2, r3
 8011834:	43da      	mvns	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	400a      	ands	r2, r1
 801183c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	b29b      	uxth	r3, r3
 801184a:	4618      	mov	r0, r3
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	685a      	ldr	r2, [r3, #4]
 8011850:	4613      	mov	r3, r2
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	4413      	add	r3, r2
 8011856:	3b23      	subs	r3, #35	; 0x23
 8011858:	fa00 f203 	lsl.w	r2, r0, r3
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	430a      	orrs	r2, r1
 8011862:	631a      	str	r2, [r3, #48]	; 0x30
 8011864:	e023      	b.n	80118ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	685a      	ldr	r2, [r3, #4]
 8011870:	4613      	mov	r3, r2
 8011872:	009b      	lsls	r3, r3, #2
 8011874:	4413      	add	r3, r2
 8011876:	3b41      	subs	r3, #65	; 0x41
 8011878:	221f      	movs	r2, #31
 801187a:	fa02 f303 	lsl.w	r3, r2, r3
 801187e:	43da      	mvns	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	400a      	ands	r2, r1
 8011886:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	b29b      	uxth	r3, r3
 8011894:	4618      	mov	r0, r3
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	685a      	ldr	r2, [r3, #4]
 801189a:	4613      	mov	r3, r2
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	4413      	add	r3, r2
 80118a0:	3b41      	subs	r3, #65	; 0x41
 80118a2:	fa00 f203 	lsl.w	r2, r0, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	430a      	orrs	r2, r1
 80118ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80118ae:	4b22      	ldr	r3, [pc, #136]	; (8011938 <HAL_ADC_ConfigChannel+0x234>)
 80118b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	4a21      	ldr	r2, [pc, #132]	; (801193c <HAL_ADC_ConfigChannel+0x238>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d109      	bne.n	80118d0 <HAL_ADC_ConfigChannel+0x1cc>
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b12      	cmp	r3, #18
 80118c2:	d105      	bne.n	80118d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4a19      	ldr	r2, [pc, #100]	; (801193c <HAL_ADC_ConfigChannel+0x238>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d123      	bne.n	8011922 <HAL_ADC_ConfigChannel+0x21e>
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	2b10      	cmp	r3, #16
 80118e0:	d003      	beq.n	80118ea <HAL_ADC_ConfigChannel+0x1e6>
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	2b11      	cmp	r3, #17
 80118e8:	d11b      	bne.n	8011922 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2b10      	cmp	r3, #16
 80118fc:	d111      	bne.n	8011922 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80118fe:	4b10      	ldr	r3, [pc, #64]	; (8011940 <HAL_ADC_ConfigChannel+0x23c>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	4a10      	ldr	r2, [pc, #64]	; (8011944 <HAL_ADC_ConfigChannel+0x240>)
 8011904:	fba2 2303 	umull	r2, r3, r2, r3
 8011908:	0c9a      	lsrs	r2, r3, #18
 801190a:	4613      	mov	r3, r2
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	4413      	add	r3, r2
 8011910:	005b      	lsls	r3, r3, #1
 8011912:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011914:	e002      	b.n	801191c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	3b01      	subs	r3, #1
 801191a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d1f9      	bne.n	8011916 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2200      	movs	r2, #0
 8011926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801192a:	2300      	movs	r3, #0
}
 801192c:	4618      	mov	r0, r3
 801192e:	3714      	adds	r7, #20
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr
 8011938:	40012300 	.word	0x40012300
 801193c:	40012000 	.word	0x40012000
 8011940:	20000080 	.word	0x20000080
 8011944:	431bde83 	.word	0x431bde83

08011948 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011950:	4b79      	ldr	r3, [pc, #484]	; (8011b38 <ADC_Init+0x1f0>)
 8011952:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	685a      	ldr	r2, [r3, #4]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	431a      	orrs	r2, r3
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	685a      	ldr	r2, [r3, #4]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801197c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	6859      	ldr	r1, [r3, #4]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	691b      	ldr	r3, [r3, #16]
 8011988:	021a      	lsls	r2, r3, #8
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	430a      	orrs	r2, r1
 8011990:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	685a      	ldr	r2, [r3, #4]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80119a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	6859      	ldr	r1, [r3, #4]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	689a      	ldr	r2, [r3, #8]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	430a      	orrs	r2, r1
 80119b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	689a      	ldr	r2, [r3, #8]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80119c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	6899      	ldr	r1, [r3, #8]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	68da      	ldr	r2, [r3, #12]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	430a      	orrs	r2, r1
 80119d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119da:	4a58      	ldr	r2, [pc, #352]	; (8011b3c <ADC_Init+0x1f4>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d022      	beq.n	8011a26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	689a      	ldr	r2, [r3, #8]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80119ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	6899      	ldr	r1, [r3, #8]
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	430a      	orrs	r2, r1
 8011a00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	689a      	ldr	r2, [r3, #8]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6899      	ldr	r1, [r3, #8]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	430a      	orrs	r2, r1
 8011a22:	609a      	str	r2, [r3, #8]
 8011a24:	e00f      	b.n	8011a46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	689a      	ldr	r2, [r3, #8]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011a34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	689a      	ldr	r2, [r3, #8]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011a44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	689a      	ldr	r2, [r3, #8]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f022 0202 	bic.w	r2, r2, #2
 8011a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	6899      	ldr	r1, [r3, #8]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	7e1b      	ldrb	r3, [r3, #24]
 8011a60:	005a      	lsls	r2, r3, #1
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	430a      	orrs	r2, r1
 8011a68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01b      	beq.n	8011aac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	685a      	ldr	r2, [r3, #4]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011a82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	685a      	ldr	r2, [r3, #4]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8011a92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	6859      	ldr	r1, [r3, #4]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	035a      	lsls	r2, r3, #13
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	430a      	orrs	r2, r1
 8011aa8:	605a      	str	r2, [r3, #4]
 8011aaa:	e007      	b.n	8011abc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	685a      	ldr	r2, [r3, #4]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011aba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	69db      	ldr	r3, [r3, #28]
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	051a      	lsls	r2, r3, #20
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	689a      	ldr	r2, [r3, #8]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	6899      	ldr	r1, [r3, #8]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011afe:	025a      	lsls	r2, r3, #9
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	430a      	orrs	r2, r1
 8011b06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	689a      	ldr	r2, [r3, #8]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	6899      	ldr	r1, [r3, #8]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	695b      	ldr	r3, [r3, #20]
 8011b22:	029a      	lsls	r2, r3, #10
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	430a      	orrs	r2, r1
 8011b2a:	609a      	str	r2, [r3, #8]
}
 8011b2c:	bf00      	nop
 8011b2e:	3714      	adds	r7, #20
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	40012300 	.word	0x40012300
 8011b3c:	0f000001 	.word	0x0f000001

08011b40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d13c      	bne.n	8011bd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	689b      	ldr	r3, [r3, #8]
 8011b6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d12b      	bne.n	8011bcc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d127      	bne.n	8011bcc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d006      	beq.n	8011b98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d119      	bne.n	8011bcc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	685a      	ldr	r2, [r3, #4]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f022 0220 	bic.w	r2, r2, #32
 8011ba6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d105      	bne.n	8011bcc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc4:	f043 0201 	orr.w	r2, r3, #1
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f7fd fa4f 	bl	800f070 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8011bd2:	e00e      	b.n	8011bf2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bd8:	f003 0310 	and.w	r3, r3, #16
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d003      	beq.n	8011be8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8011be0:	68f8      	ldr	r0, [r7, #12]
 8011be2:	f7ff fd85 	bl	80116f0 <HAL_ADC_ErrorCallback>
}
 8011be6:	e004      	b.n	8011bf2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	4798      	blx	r3
}
 8011bf2:	bf00      	nop
 8011bf4:	3710      	adds	r7, #16
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}

08011bfa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b084      	sub	sp, #16
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8011c08:	68f8      	ldr	r0, [r7, #12]
 8011c0a:	f7ff fd5d 	bl	80116c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011c0e:	bf00      	nop
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b084      	sub	sp, #16
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2240      	movs	r2, #64	; 0x40
 8011c28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c2e:	f043 0204 	orr.w	r2, r3, #4
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8011c36:	68f8      	ldr	r0, [r7, #12]
 8011c38:	f7ff fd5a 	bl	80116f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011c3c:	bf00      	nop
 8011c3e:	3710      	adds	r7, #16
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8011c4c:	bf00      	nop
 8011c4e:	370c      	adds	r7, #12
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b085      	sub	sp, #20
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f003 0307 	and.w	r3, r3, #7
 8011c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011c68:	4b0c      	ldr	r3, [pc, #48]	; (8011c9c <__NVIC_SetPriorityGrouping+0x44>)
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011c74:	4013      	ands	r3, r2
 8011c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011c8a:	4a04      	ldr	r2, [pc, #16]	; (8011c9c <__NVIC_SetPriorityGrouping+0x44>)
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	60d3      	str	r3, [r2, #12]
}
 8011c90:	bf00      	nop
 8011c92:	3714      	adds	r7, #20
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr
 8011c9c:	e000ed00 	.word	0xe000ed00

08011ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011ca4:	4b04      	ldr	r3, [pc, #16]	; (8011cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	0a1b      	lsrs	r3, r3, #8
 8011caa:	f003 0307 	and.w	r3, r3, #7
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr
 8011cb8:	e000ed00 	.word	0xe000ed00

08011cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	db0b      	blt.n	8011ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011cce:	79fb      	ldrb	r3, [r7, #7]
 8011cd0:	f003 021f 	and.w	r2, r3, #31
 8011cd4:	4907      	ldr	r1, [pc, #28]	; (8011cf4 <__NVIC_EnableIRQ+0x38>)
 8011cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cda:	095b      	lsrs	r3, r3, #5
 8011cdc:	2001      	movs	r0, #1
 8011cde:	fa00 f202 	lsl.w	r2, r0, r2
 8011ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011ce6:	bf00      	nop
 8011ce8:	370c      	adds	r7, #12
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	e000e100 	.word	0xe000e100

08011cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	4603      	mov	r3, r0
 8011d00:	6039      	str	r1, [r7, #0]
 8011d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	db0a      	blt.n	8011d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	490c      	ldr	r1, [pc, #48]	; (8011d44 <__NVIC_SetPriority+0x4c>)
 8011d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d16:	0112      	lsls	r2, r2, #4
 8011d18:	b2d2      	uxtb	r2, r2
 8011d1a:	440b      	add	r3, r1
 8011d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011d20:	e00a      	b.n	8011d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	4908      	ldr	r1, [pc, #32]	; (8011d48 <__NVIC_SetPriority+0x50>)
 8011d28:	79fb      	ldrb	r3, [r7, #7]
 8011d2a:	f003 030f 	and.w	r3, r3, #15
 8011d2e:	3b04      	subs	r3, #4
 8011d30:	0112      	lsls	r2, r2, #4
 8011d32:	b2d2      	uxtb	r2, r2
 8011d34:	440b      	add	r3, r1
 8011d36:	761a      	strb	r2, [r3, #24]
}
 8011d38:	bf00      	nop
 8011d3a:	370c      	adds	r7, #12
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr
 8011d44:	e000e100 	.word	0xe000e100
 8011d48:	e000ed00 	.word	0xe000ed00

08011d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b089      	sub	sp, #36	; 0x24
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f003 0307 	and.w	r3, r3, #7
 8011d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	f1c3 0307 	rsb	r3, r3, #7
 8011d66:	2b04      	cmp	r3, #4
 8011d68:	bf28      	it	cs
 8011d6a:	2304      	movcs	r3, #4
 8011d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011d6e:	69fb      	ldr	r3, [r7, #28]
 8011d70:	3304      	adds	r3, #4
 8011d72:	2b06      	cmp	r3, #6
 8011d74:	d902      	bls.n	8011d7c <NVIC_EncodePriority+0x30>
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	3b03      	subs	r3, #3
 8011d7a:	e000      	b.n	8011d7e <NVIC_EncodePriority+0x32>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011d80:	f04f 32ff 	mov.w	r2, #4294967295
 8011d84:	69bb      	ldr	r3, [r7, #24]
 8011d86:	fa02 f303 	lsl.w	r3, r2, r3
 8011d8a:	43da      	mvns	r2, r3
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	401a      	ands	r2, r3
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011d94:	f04f 31ff 	mov.w	r1, #4294967295
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8011d9e:	43d9      	mvns	r1, r3
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011da4:	4313      	orrs	r3, r2
         );
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3724      	adds	r7, #36	; 0x24
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr
	...

08011db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011dc4:	d301      	bcc.n	8011dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	e00f      	b.n	8011dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011dca:	4a0a      	ldr	r2, [pc, #40]	; (8011df4 <SysTick_Config+0x40>)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	3b01      	subs	r3, #1
 8011dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011dd2:	210f      	movs	r1, #15
 8011dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd8:	f7ff ff8e 	bl	8011cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011ddc:	4b05      	ldr	r3, [pc, #20]	; (8011df4 <SysTick_Config+0x40>)
 8011dde:	2200      	movs	r2, #0
 8011de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011de2:	4b04      	ldr	r3, [pc, #16]	; (8011df4 <SysTick_Config+0x40>)
 8011de4:	2207      	movs	r2, #7
 8011de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011de8:	2300      	movs	r3, #0
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3708      	adds	r7, #8
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	e000e010 	.word	0xe000e010

08011df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7ff ff29 	bl	8011c58 <__NVIC_SetPriorityGrouping>
}
 8011e06:	bf00      	nop
 8011e08:	3708      	adds	r7, #8
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}

08011e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011e0e:	b580      	push	{r7, lr}
 8011e10:	b086      	sub	sp, #24
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	4603      	mov	r3, r0
 8011e16:	60b9      	str	r1, [r7, #8]
 8011e18:	607a      	str	r2, [r7, #4]
 8011e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011e20:	f7ff ff3e 	bl	8011ca0 <__NVIC_GetPriorityGrouping>
 8011e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	68b9      	ldr	r1, [r7, #8]
 8011e2a:	6978      	ldr	r0, [r7, #20]
 8011e2c:	f7ff ff8e 	bl	8011d4c <NVIC_EncodePriority>
 8011e30:	4602      	mov	r2, r0
 8011e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e36:	4611      	mov	r1, r2
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7ff ff5d 	bl	8011cf8 <__NVIC_SetPriority>
}
 8011e3e:	bf00      	nop
 8011e40:	3718      	adds	r7, #24
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b082      	sub	sp, #8
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7ff ff31 	bl	8011cbc <__NVIC_EnableIRQ>
}
 8011e5a:	bf00      	nop
 8011e5c:	3708      	adds	r7, #8
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}

08011e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b082      	sub	sp, #8
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f7ff ffa2 	bl	8011db4 <SysTick_Config>
 8011e70:	4603      	mov	r3, r0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
	...

08011e7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011e84:	2300      	movs	r3, #0
 8011e86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011e88:	f7ff f97a 	bl	8011180 <HAL_GetTick>
 8011e8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d101      	bne.n	8011e98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011e94:	2301      	movs	r3, #1
 8011e96:	e099      	b.n	8011fcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2202      	movs	r2, #2
 8011ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	f022 0201 	bic.w	r2, r2, #1
 8011eb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011eb8:	e00f      	b.n	8011eda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011eba:	f7ff f961 	bl	8011180 <HAL_GetTick>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	1ad3      	subs	r3, r2, r3
 8011ec4:	2b05      	cmp	r3, #5
 8011ec6:	d908      	bls.n	8011eda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2220      	movs	r2, #32
 8011ecc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2203      	movs	r2, #3
 8011ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011ed6:	2303      	movs	r3, #3
 8011ed8:	e078      	b.n	8011fcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f003 0301 	and.w	r3, r3, #1
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d1e8      	bne.n	8011eba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011ef0:	697a      	ldr	r2, [r7, #20]
 8011ef2:	4b38      	ldr	r3, [pc, #224]	; (8011fd4 <HAL_DMA_Init+0x158>)
 8011ef4:	4013      	ands	r3, r2
 8011ef6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	685a      	ldr	r2, [r3, #4]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	689b      	ldr	r3, [r3, #8]
 8011f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	691b      	ldr	r3, [r3, #16]
 8011f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	699b      	ldr	r3, [r3, #24]
 8011f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6a1b      	ldr	r3, [r3, #32]
 8011f24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011f26:	697a      	ldr	r2, [r7, #20]
 8011f28:	4313      	orrs	r3, r2
 8011f2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f30:	2b04      	cmp	r3, #4
 8011f32:	d107      	bne.n	8011f44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f3c:	4313      	orrs	r3, r2
 8011f3e:	697a      	ldr	r2, [r7, #20]
 8011f40:	4313      	orrs	r3, r2
 8011f42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	697a      	ldr	r2, [r7, #20]
 8011f4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	695b      	ldr	r3, [r3, #20]
 8011f52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	f023 0307 	bic.w	r3, r3, #7
 8011f5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f60:	697a      	ldr	r2, [r7, #20]
 8011f62:	4313      	orrs	r3, r2
 8011f64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6a:	2b04      	cmp	r3, #4
 8011f6c:	d117      	bne.n	8011f9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f72:	697a      	ldr	r2, [r7, #20]
 8011f74:	4313      	orrs	r3, r2
 8011f76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d00e      	beq.n	8011f9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f000 fa6f 	bl	8012464 <DMA_CheckFifoParam>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d008      	beq.n	8011f9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2240      	movs	r2, #64	; 0x40
 8011f90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2201      	movs	r2, #1
 8011f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	e016      	b.n	8011fcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	697a      	ldr	r2, [r7, #20]
 8011fa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 fa26 	bl	80123f8 <DMA_CalcBaseAndBitshift>
 8011fac:	4603      	mov	r3, r0
 8011fae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fb4:	223f      	movs	r2, #63	; 0x3f
 8011fb6:	409a      	lsls	r2, r3
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011fca:	2300      	movs	r3, #0
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3718      	adds	r7, #24
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	f010803f 	.word	0xf010803f

08011fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b086      	sub	sp, #24
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	60f8      	str	r0, [r7, #12]
 8011fe0:	60b9      	str	r1, [r7, #8]
 8011fe2:	607a      	str	r2, [r7, #4]
 8011fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ff6:	2b01      	cmp	r3, #1
 8011ff8:	d101      	bne.n	8011ffe <HAL_DMA_Start_IT+0x26>
 8011ffa:	2302      	movs	r3, #2
 8011ffc:	e040      	b.n	8012080 <HAL_DMA_Start_IT+0xa8>
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	2201      	movs	r2, #1
 8012002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801200c:	b2db      	uxtb	r3, r3
 801200e:	2b01      	cmp	r3, #1
 8012010:	d12f      	bne.n	8012072 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2202      	movs	r2, #2
 8012016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2200      	movs	r2, #0
 801201e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	68b9      	ldr	r1, [r7, #8]
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f000 f9b8 	bl	801239c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012030:	223f      	movs	r2, #63	; 0x3f
 8012032:	409a      	lsls	r2, r3
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	681a      	ldr	r2, [r3, #0]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f042 0216 	orr.w	r2, r2, #22
 8012046:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801204c:	2b00      	cmp	r3, #0
 801204e:	d007      	beq.n	8012060 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f042 0208 	orr.w	r2, r2, #8
 801205e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f042 0201 	orr.w	r2, r2, #1
 801206e:	601a      	str	r2, [r3, #0]
 8012070:	e005      	b.n	801207e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2200      	movs	r2, #0
 8012076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801207a:	2302      	movs	r3, #2
 801207c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801207e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012080:	4618      	mov	r0, r3
 8012082:	3718      	adds	r7, #24
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b086      	sub	sp, #24
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012090:	2300      	movs	r3, #0
 8012092:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012094:	4b92      	ldr	r3, [pc, #584]	; (80122e0 <HAL_DMA_IRQHandler+0x258>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4a92      	ldr	r2, [pc, #584]	; (80122e4 <HAL_DMA_IRQHandler+0x25c>)
 801209a:	fba2 2303 	umull	r2, r3, r2, r3
 801209e:	0a9b      	lsrs	r3, r3, #10
 80120a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120b2:	2208      	movs	r2, #8
 80120b4:	409a      	lsls	r2, r3
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	4013      	ands	r3, r2
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d01a      	beq.n	80120f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	f003 0304 	and.w	r3, r3, #4
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d013      	beq.n	80120f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	681a      	ldr	r2, [r3, #0]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f022 0204 	bic.w	r2, r2, #4
 80120da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120e0:	2208      	movs	r2, #8
 80120e2:	409a      	lsls	r2, r3
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120ec:	f043 0201 	orr.w	r2, r3, #1
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120f8:	2201      	movs	r2, #1
 80120fa:	409a      	lsls	r2, r3
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	4013      	ands	r3, r2
 8012100:	2b00      	cmp	r3, #0
 8012102:	d012      	beq.n	801212a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	695b      	ldr	r3, [r3, #20]
 801210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00b      	beq.n	801212a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012116:	2201      	movs	r2, #1
 8012118:	409a      	lsls	r2, r3
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012122:	f043 0202 	orr.w	r2, r3, #2
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801212e:	2204      	movs	r2, #4
 8012130:	409a      	lsls	r2, r3
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	4013      	ands	r3, r2
 8012136:	2b00      	cmp	r3, #0
 8012138:	d012      	beq.n	8012160 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f003 0302 	and.w	r3, r3, #2
 8012144:	2b00      	cmp	r3, #0
 8012146:	d00b      	beq.n	8012160 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801214c:	2204      	movs	r2, #4
 801214e:	409a      	lsls	r2, r3
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012158:	f043 0204 	orr.w	r2, r3, #4
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012164:	2210      	movs	r2, #16
 8012166:	409a      	lsls	r2, r3
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	4013      	ands	r3, r2
 801216c:	2b00      	cmp	r3, #0
 801216e:	d043      	beq.n	80121f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f003 0308 	and.w	r3, r3, #8
 801217a:	2b00      	cmp	r3, #0
 801217c:	d03c      	beq.n	80121f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012182:	2210      	movs	r2, #16
 8012184:	409a      	lsls	r2, r3
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012194:	2b00      	cmp	r3, #0
 8012196:	d018      	beq.n	80121ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d108      	bne.n	80121b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d024      	beq.n	80121f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	4798      	blx	r3
 80121b6:	e01f      	b.n	80121f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d01b      	beq.n	80121f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	4798      	blx	r3
 80121c8:	e016      	b.n	80121f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d107      	bne.n	80121e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	f022 0208 	bic.w	r2, r2, #8
 80121e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d003      	beq.n	80121f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121fc:	2220      	movs	r2, #32
 80121fe:	409a      	lsls	r2, r3
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	4013      	ands	r3, r2
 8012204:	2b00      	cmp	r3, #0
 8012206:	f000 808e 	beq.w	8012326 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f003 0310 	and.w	r3, r3, #16
 8012214:	2b00      	cmp	r3, #0
 8012216:	f000 8086 	beq.w	8012326 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801221e:	2220      	movs	r2, #32
 8012220:	409a      	lsls	r2, r3
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801222c:	b2db      	uxtb	r3, r3
 801222e:	2b05      	cmp	r3, #5
 8012230:	d136      	bne.n	80122a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	681a      	ldr	r2, [r3, #0]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	f022 0216 	bic.w	r2, r2, #22
 8012240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	695a      	ldr	r2, [r3, #20]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012250:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012256:	2b00      	cmp	r3, #0
 8012258:	d103      	bne.n	8012262 <HAL_DMA_IRQHandler+0x1da>
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801225e:	2b00      	cmp	r3, #0
 8012260:	d007      	beq.n	8012272 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f022 0208 	bic.w	r2, r2, #8
 8012270:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012276:	223f      	movs	r2, #63	; 0x3f
 8012278:	409a      	lsls	r2, r3
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2200      	movs	r2, #0
 8012282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2201      	movs	r2, #1
 801228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012292:	2b00      	cmp	r3, #0
 8012294:	d07d      	beq.n	8012392 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	4798      	blx	r3
        }
        return;
 801229e:	e078      	b.n	8012392 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d01c      	beq.n	80122e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d108      	bne.n	80122ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d030      	beq.n	8012326 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	4798      	blx	r3
 80122cc:	e02b      	b.n	8012326 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d027      	beq.n	8012326 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	4798      	blx	r3
 80122de:	e022      	b.n	8012326 <HAL_DMA_IRQHandler+0x29e>
 80122e0:	20000080 	.word	0x20000080
 80122e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d10f      	bne.n	8012316 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f022 0210 	bic.w	r2, r2, #16
 8012304:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2200      	movs	r2, #0
 801230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2201      	movs	r2, #1
 8012312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801231a:	2b00      	cmp	r3, #0
 801231c:	d003      	beq.n	8012326 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801232a:	2b00      	cmp	r3, #0
 801232c:	d032      	beq.n	8012394 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012332:	f003 0301 	and.w	r3, r3, #1
 8012336:	2b00      	cmp	r3, #0
 8012338:	d022      	beq.n	8012380 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2205      	movs	r2, #5
 801233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f022 0201 	bic.w	r2, r2, #1
 8012350:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	3301      	adds	r3, #1
 8012356:	60bb      	str	r3, [r7, #8]
 8012358:	697a      	ldr	r2, [r7, #20]
 801235a:	429a      	cmp	r2, r3
 801235c:	d307      	bcc.n	801236e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	f003 0301 	and.w	r3, r3, #1
 8012368:	2b00      	cmp	r3, #0
 801236a:	d1f2      	bne.n	8012352 <HAL_DMA_IRQHandler+0x2ca>
 801236c:	e000      	b.n	8012370 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801236e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2200      	movs	r2, #0
 8012374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2201      	movs	r2, #1
 801237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012384:	2b00      	cmp	r3, #0
 8012386:	d005      	beq.n	8012394 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	4798      	blx	r3
 8012390:	e000      	b.n	8012394 <HAL_DMA_IRQHandler+0x30c>
        return;
 8012392:	bf00      	nop
    }
  }
}
 8012394:	3718      	adds	r7, #24
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop

0801239c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801239c:	b480      	push	{r7}
 801239e:	b085      	sub	sp, #20
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	60f8      	str	r0, [r7, #12]
 80123a4:	60b9      	str	r1, [r7, #8]
 80123a6:	607a      	str	r2, [r7, #4]
 80123a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80123b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	683a      	ldr	r2, [r7, #0]
 80123c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	689b      	ldr	r3, [r3, #8]
 80123c6:	2b40      	cmp	r3, #64	; 0x40
 80123c8:	d108      	bne.n	80123dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	68ba      	ldr	r2, [r7, #8]
 80123d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80123da:	e007      	b.n	80123ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	68ba      	ldr	r2, [r7, #8]
 80123e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	60da      	str	r2, [r3, #12]
}
 80123ec:	bf00      	nop
 80123ee:	3714      	adds	r7, #20
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	b2db      	uxtb	r3, r3
 8012406:	3b10      	subs	r3, #16
 8012408:	4a14      	ldr	r2, [pc, #80]	; (801245c <DMA_CalcBaseAndBitshift+0x64>)
 801240a:	fba2 2303 	umull	r2, r3, r2, r3
 801240e:	091b      	lsrs	r3, r3, #4
 8012410:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8012412:	4a13      	ldr	r2, [pc, #76]	; (8012460 <DMA_CalcBaseAndBitshift+0x68>)
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	4413      	add	r3, r2
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	461a      	mov	r2, r3
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2b03      	cmp	r3, #3
 8012424:	d909      	bls.n	801243a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801242e:	f023 0303 	bic.w	r3, r3, #3
 8012432:	1d1a      	adds	r2, r3, #4
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	659a      	str	r2, [r3, #88]	; 0x58
 8012438:	e007      	b.n	801244a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012442:	f023 0303 	bic.w	r3, r3, #3
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801244e:	4618      	mov	r0, r3
 8012450:	3714      	adds	r7, #20
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr
 801245a:	bf00      	nop
 801245c:	aaaaaaab 	.word	0xaaaaaaab
 8012460:	08018b10 	.word	0x08018b10

08012464 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012464:	b480      	push	{r7}
 8012466:	b085      	sub	sp, #20
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801246c:	2300      	movs	r3, #0
 801246e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012474:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	699b      	ldr	r3, [r3, #24]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d11f      	bne.n	80124be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	2b03      	cmp	r3, #3
 8012482:	d855      	bhi.n	8012530 <DMA_CheckFifoParam+0xcc>
 8012484:	a201      	add	r2, pc, #4	; (adr r2, 801248c <DMA_CheckFifoParam+0x28>)
 8012486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801248a:	bf00      	nop
 801248c:	0801249d 	.word	0x0801249d
 8012490:	080124af 	.word	0x080124af
 8012494:	0801249d 	.word	0x0801249d
 8012498:	08012531 	.word	0x08012531
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d045      	beq.n	8012534 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80124a8:	2301      	movs	r3, #1
 80124aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80124ac:	e042      	b.n	8012534 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80124b6:	d13f      	bne.n	8012538 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80124b8:	2301      	movs	r3, #1
 80124ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80124bc:	e03c      	b.n	8012538 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	699b      	ldr	r3, [r3, #24]
 80124c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80124c6:	d121      	bne.n	801250c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	2b03      	cmp	r3, #3
 80124cc:	d836      	bhi.n	801253c <DMA_CheckFifoParam+0xd8>
 80124ce:	a201      	add	r2, pc, #4	; (adr r2, 80124d4 <DMA_CheckFifoParam+0x70>)
 80124d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124d4:	080124e5 	.word	0x080124e5
 80124d8:	080124eb 	.word	0x080124eb
 80124dc:	080124e5 	.word	0x080124e5
 80124e0:	080124fd 	.word	0x080124fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80124e4:	2301      	movs	r3, #1
 80124e6:	73fb      	strb	r3, [r7, #15]
      break;
 80124e8:	e02f      	b.n	801254a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d024      	beq.n	8012540 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80124f6:	2301      	movs	r3, #1
 80124f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80124fa:	e021      	b.n	8012540 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012500:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012504:	d11e      	bne.n	8012544 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8012506:	2301      	movs	r3, #1
 8012508:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801250a:	e01b      	b.n	8012544 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	2b02      	cmp	r3, #2
 8012510:	d902      	bls.n	8012518 <DMA_CheckFifoParam+0xb4>
 8012512:	2b03      	cmp	r3, #3
 8012514:	d003      	beq.n	801251e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8012516:	e018      	b.n	801254a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8012518:	2301      	movs	r3, #1
 801251a:	73fb      	strb	r3, [r7, #15]
      break;
 801251c:	e015      	b.n	801254a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00e      	beq.n	8012548 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 801252a:	2301      	movs	r3, #1
 801252c:	73fb      	strb	r3, [r7, #15]
      break;
 801252e:	e00b      	b.n	8012548 <DMA_CheckFifoParam+0xe4>
      break;
 8012530:	bf00      	nop
 8012532:	e00a      	b.n	801254a <DMA_CheckFifoParam+0xe6>
      break;
 8012534:	bf00      	nop
 8012536:	e008      	b.n	801254a <DMA_CheckFifoParam+0xe6>
      break;
 8012538:	bf00      	nop
 801253a:	e006      	b.n	801254a <DMA_CheckFifoParam+0xe6>
      break;
 801253c:	bf00      	nop
 801253e:	e004      	b.n	801254a <DMA_CheckFifoParam+0xe6>
      break;
 8012540:	bf00      	nop
 8012542:	e002      	b.n	801254a <DMA_CheckFifoParam+0xe6>
      break;   
 8012544:	bf00      	nop
 8012546:	e000      	b.n	801254a <DMA_CheckFifoParam+0xe6>
      break;
 8012548:	bf00      	nop
    }
  } 
  
  return status; 
 801254a:	7bfb      	ldrb	r3, [r7, #15]
}
 801254c:	4618      	mov	r0, r3
 801254e:	3714      	adds	r7, #20
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr

08012558 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b086      	sub	sp, #24
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012566:	2301      	movs	r3, #1
 8012568:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801256a:	4b23      	ldr	r3, [pc, #140]	; (80125f8 <HAL_FLASH_Program+0xa0>)
 801256c:	7e1b      	ldrb	r3, [r3, #24]
 801256e:	2b01      	cmp	r3, #1
 8012570:	d101      	bne.n	8012576 <HAL_FLASH_Program+0x1e>
 8012572:	2302      	movs	r3, #2
 8012574:	e03b      	b.n	80125ee <HAL_FLASH_Program+0x96>
 8012576:	4b20      	ldr	r3, [pc, #128]	; (80125f8 <HAL_FLASH_Program+0xa0>)
 8012578:	2201      	movs	r2, #1
 801257a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801257c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012580:	f000 f924 	bl	80127cc <FLASH_WaitForLastOperation>
 8012584:	4603      	mov	r3, r0
 8012586:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8012588:	7dfb      	ldrb	r3, [r7, #23]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d12b      	bne.n	80125e6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d105      	bne.n	80125a0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8012594:	783b      	ldrb	r3, [r7, #0]
 8012596:	4619      	mov	r1, r3
 8012598:	68b8      	ldr	r0, [r7, #8]
 801259a:	f000 f9cd 	bl	8012938 <FLASH_Program_Byte>
 801259e:	e016      	b.n	80125ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2b01      	cmp	r3, #1
 80125a4:	d105      	bne.n	80125b2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80125a6:	883b      	ldrh	r3, [r7, #0]
 80125a8:	4619      	mov	r1, r3
 80125aa:	68b8      	ldr	r0, [r7, #8]
 80125ac:	f000 f9a0 	bl	80128f0 <FLASH_Program_HalfWord>
 80125b0:	e00d      	b.n	80125ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2b02      	cmp	r3, #2
 80125b6:	d105      	bne.n	80125c4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	4619      	mov	r1, r3
 80125bc:	68b8      	ldr	r0, [r7, #8]
 80125be:	f000 f975 	bl	80128ac <FLASH_Program_Word>
 80125c2:	e004      	b.n	80125ce <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80125c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125c8:	68b8      	ldr	r0, [r7, #8]
 80125ca:	f000 f93f 	bl	801284c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80125ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80125d2:	f000 f8fb 	bl	80127cc <FLASH_WaitForLastOperation>
 80125d6:	4603      	mov	r3, r0
 80125d8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80125da:	4b08      	ldr	r3, [pc, #32]	; (80125fc <HAL_FLASH_Program+0xa4>)
 80125dc:	691b      	ldr	r3, [r3, #16]
 80125de:	4a07      	ldr	r2, [pc, #28]	; (80125fc <HAL_FLASH_Program+0xa4>)
 80125e0:	f023 0301 	bic.w	r3, r3, #1
 80125e4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80125e6:	4b04      	ldr	r3, [pc, #16]	; (80125f8 <HAL_FLASH_Program+0xa0>)
 80125e8:	2200      	movs	r2, #0
 80125ea:	761a      	strb	r2, [r3, #24]
  
  return status;
 80125ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3718      	adds	r7, #24
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	20005060 	.word	0x20005060
 80125fc:	40023c00 	.word	0x40023c00

08012600 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b082      	sub	sp, #8
 8012604:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8012606:	2300      	movs	r3, #0
 8012608:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801260a:	4b4b      	ldr	r3, [pc, #300]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8012612:	2b00      	cmp	r3, #0
 8012614:	d020      	beq.n	8012658 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8012616:	4b49      	ldr	r3, [pc, #292]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	b2db      	uxtb	r3, r3
 801261c:	2b01      	cmp	r3, #1
 801261e:	d107      	bne.n	8012630 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8012620:	4b46      	ldr	r3, [pc, #280]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8012626:	4b45      	ldr	r3, [pc, #276]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012628:	f04f 32ff 	mov.w	r2, #4294967295
 801262c:	60da      	str	r2, [r3, #12]
 801262e:	e00b      	b.n	8012648 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8012630:	4b42      	ldr	r3, [pc, #264]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	b2db      	uxtb	r3, r3
 8012636:	2b02      	cmp	r3, #2
 8012638:	d103      	bne.n	8012642 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 801263a:	4b40      	ldr	r3, [pc, #256]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 801263c:	691b      	ldr	r3, [r3, #16]
 801263e:	607b      	str	r3, [r7, #4]
 8012640:	e002      	b.n	8012648 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8012642:	4b3e      	ldr	r3, [pc, #248]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012644:	695b      	ldr	r3, [r3, #20]
 8012646:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8012648:	f000 f998 	bl	801297c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 f881 	bl	8012754 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8012652:	4b3a      	ldr	r3, [pc, #232]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012654:	2200      	movs	r2, #0
 8012656:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012658:	4b37      	ldr	r3, [pc, #220]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	f003 0301 	and.w	r3, r3, #1
 8012660:	2b00      	cmp	r3, #0
 8012662:	d04a      	beq.n	80126fa <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012664:	4b34      	ldr	r3, [pc, #208]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 8012666:	2201      	movs	r2, #1
 8012668:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 801266a:	4b34      	ldr	r3, [pc, #208]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	b2db      	uxtb	r3, r3
 8012670:	2b01      	cmp	r3, #1
 8012672:	d12d      	bne.n	80126d0 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8012674:	4b31      	ldr	r3, [pc, #196]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	3b01      	subs	r3, #1
 801267a:	4a30      	ldr	r2, [pc, #192]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 801267c:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 801267e:	4b2f      	ldr	r3, [pc, #188]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d015      	beq.n	80126b2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8012686:	4b2d      	ldr	r3, [pc, #180]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012688:	68db      	ldr	r3, [r3, #12]
 801268a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f000 f857 	bl	8012740 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8012692:	4b2a      	ldr	r3, [pc, #168]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 8012694:	68db      	ldr	r3, [r3, #12]
 8012696:	3301      	adds	r3, #1
 8012698:	4a28      	ldr	r2, [pc, #160]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 801269a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 801269c:	4b27      	ldr	r3, [pc, #156]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80126a2:	4b26      	ldr	r3, [pc, #152]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 80126a4:	7a1b      	ldrb	r3, [r3, #8]
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	4619      	mov	r1, r3
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f000 fa50 	bl	8012b50 <FLASH_Erase_Sector>
 80126b0:	e023      	b.n	80126fa <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80126b2:	f04f 33ff 	mov.w	r3, #4294967295
 80126b6:	607b      	str	r3, [r7, #4]
 80126b8:	4a20      	ldr	r2, [pc, #128]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80126be:	4b1f      	ldr	r3, [pc, #124]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 80126c0:	2200      	movs	r2, #0
 80126c2:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80126c4:	f000 fa8c 	bl	8012be0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f000 f839 	bl	8012740 <HAL_FLASH_EndOfOperationCallback>
 80126ce:	e014      	b.n	80126fa <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80126d0:	4b1a      	ldr	r3, [pc, #104]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	2b02      	cmp	r3, #2
 80126d8:	d107      	bne.n	80126ea <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80126da:	f000 fa81 	bl	8012be0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80126de:	4b17      	ldr	r3, [pc, #92]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 80126e0:	691b      	ldr	r3, [r3, #16]
 80126e2:	4618      	mov	r0, r3
 80126e4:	f000 f82c 	bl	8012740 <HAL_FLASH_EndOfOperationCallback>
 80126e8:	e004      	b.n	80126f4 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80126ea:	4b14      	ldr	r3, [pc, #80]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 80126ec:	695b      	ldr	r3, [r3, #20]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f000 f826 	bl	8012740 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80126f4:	4b11      	ldr	r3, [pc, #68]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 80126f6:	2200      	movs	r2, #0
 80126f8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80126fa:	4b10      	ldr	r3, [pc, #64]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	2b00      	cmp	r3, #0
 8012702:	d114      	bne.n	801272e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8012704:	4b0c      	ldr	r3, [pc, #48]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 8012706:	691b      	ldr	r3, [r3, #16]
 8012708:	4a0b      	ldr	r2, [pc, #44]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 801270a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801270e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8012710:	4b09      	ldr	r3, [pc, #36]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 8012712:	691b      	ldr	r3, [r3, #16]
 8012714:	4a08      	ldr	r2, [pc, #32]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 8012716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801271a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 801271c:	4b06      	ldr	r3, [pc, #24]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 801271e:	691b      	ldr	r3, [r3, #16]
 8012720:	4a05      	ldr	r2, [pc, #20]	; (8012738 <HAL_FLASH_IRQHandler+0x138>)
 8012722:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8012726:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8012728:	4b04      	ldr	r3, [pc, #16]	; (801273c <HAL_FLASH_IRQHandler+0x13c>)
 801272a:	2200      	movs	r2, #0
 801272c:	761a      	strb	r2, [r3, #24]
  }
}
 801272e:	bf00      	nop
 8012730:	3708      	adds	r7, #8
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	40023c00 	.word	0x40023c00
 801273c:	20005060 	.word	0x20005060

08012740 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8012748:	bf00      	nop
 801274a:	370c      	adds	r7, #12
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr

08012754 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 801275c:	bf00      	nop
 801275e:	370c      	adds	r7, #12
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801276e:	2300      	movs	r3, #0
 8012770:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012772:	4b0b      	ldr	r3, [pc, #44]	; (80127a0 <HAL_FLASH_Unlock+0x38>)
 8012774:	691b      	ldr	r3, [r3, #16]
 8012776:	2b00      	cmp	r3, #0
 8012778:	da0b      	bge.n	8012792 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801277a:	4b09      	ldr	r3, [pc, #36]	; (80127a0 <HAL_FLASH_Unlock+0x38>)
 801277c:	4a09      	ldr	r2, [pc, #36]	; (80127a4 <HAL_FLASH_Unlock+0x3c>)
 801277e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012780:	4b07      	ldr	r3, [pc, #28]	; (80127a0 <HAL_FLASH_Unlock+0x38>)
 8012782:	4a09      	ldr	r2, [pc, #36]	; (80127a8 <HAL_FLASH_Unlock+0x40>)
 8012784:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012786:	4b06      	ldr	r3, [pc, #24]	; (80127a0 <HAL_FLASH_Unlock+0x38>)
 8012788:	691b      	ldr	r3, [r3, #16]
 801278a:	2b00      	cmp	r3, #0
 801278c:	da01      	bge.n	8012792 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801278e:	2301      	movs	r3, #1
 8012790:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8012792:	79fb      	ldrb	r3, [r7, #7]
}
 8012794:	4618      	mov	r0, r3
 8012796:	370c      	adds	r7, #12
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr
 80127a0:	40023c00 	.word	0x40023c00
 80127a4:	45670123 	.word	0x45670123
 80127a8:	cdef89ab 	.word	0xcdef89ab

080127ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80127ac:	b480      	push	{r7}
 80127ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80127b0:	4b05      	ldr	r3, [pc, #20]	; (80127c8 <HAL_FLASH_Lock+0x1c>)
 80127b2:	691b      	ldr	r3, [r3, #16]
 80127b4:	4a04      	ldr	r2, [pc, #16]	; (80127c8 <HAL_FLASH_Lock+0x1c>)
 80127b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80127ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80127bc:	2300      	movs	r3, #0
}
 80127be:	4618      	mov	r0, r3
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr
 80127c8:	40023c00 	.word	0x40023c00

080127cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80127d4:	2300      	movs	r3, #0
 80127d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80127d8:	4b1a      	ldr	r3, [pc, #104]	; (8012844 <FLASH_WaitForLastOperation+0x78>)
 80127da:	2200      	movs	r2, #0
 80127dc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80127de:	f7fe fccf 	bl	8011180 <HAL_GetTick>
 80127e2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80127e4:	e010      	b.n	8012808 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ec:	d00c      	beq.n	8012808 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d007      	beq.n	8012804 <FLASH_WaitForLastOperation+0x38>
 80127f4:	f7fe fcc4 	bl	8011180 <HAL_GetTick>
 80127f8:	4602      	mov	r2, r0
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	1ad3      	subs	r3, r2, r3
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	429a      	cmp	r2, r3
 8012802:	d201      	bcs.n	8012808 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8012804:	2303      	movs	r3, #3
 8012806:	e019      	b.n	801283c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012808:	4b0f      	ldr	r3, [pc, #60]	; (8012848 <FLASH_WaitForLastOperation+0x7c>)
 801280a:	68db      	ldr	r3, [r3, #12]
 801280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012810:	2b00      	cmp	r3, #0
 8012812:	d1e8      	bne.n	80127e6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012814:	4b0c      	ldr	r3, [pc, #48]	; (8012848 <FLASH_WaitForLastOperation+0x7c>)
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	f003 0301 	and.w	r3, r3, #1
 801281c:	2b00      	cmp	r3, #0
 801281e:	d002      	beq.n	8012826 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012820:	4b09      	ldr	r3, [pc, #36]	; (8012848 <FLASH_WaitForLastOperation+0x7c>)
 8012822:	2201      	movs	r2, #1
 8012824:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8012826:	4b08      	ldr	r3, [pc, #32]	; (8012848 <FLASH_WaitForLastOperation+0x7c>)
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801282e:	2b00      	cmp	r3, #0
 8012830:	d003      	beq.n	801283a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8012832:	f000 f8a3 	bl	801297c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012836:	2301      	movs	r3, #1
 8012838:	e000      	b.n	801283c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801283a:	2300      	movs	r3, #0
  
}  
 801283c:	4618      	mov	r0, r3
 801283e:	3710      	adds	r7, #16
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}
 8012844:	20005060 	.word	0x20005060
 8012848:	40023c00 	.word	0x40023c00

0801284c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801284c:	b490      	push	{r4, r7}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012858:	4b13      	ldr	r3, [pc, #76]	; (80128a8 <FLASH_Program_DoubleWord+0x5c>)
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	4a12      	ldr	r2, [pc, #72]	; (80128a8 <FLASH_Program_DoubleWord+0x5c>)
 801285e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012862:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8012864:	4b10      	ldr	r3, [pc, #64]	; (80128a8 <FLASH_Program_DoubleWord+0x5c>)
 8012866:	691b      	ldr	r3, [r3, #16]
 8012868:	4a0f      	ldr	r2, [pc, #60]	; (80128a8 <FLASH_Program_DoubleWord+0x5c>)
 801286a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801286e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012870:	4b0d      	ldr	r3, [pc, #52]	; (80128a8 <FLASH_Program_DoubleWord+0x5c>)
 8012872:	691b      	ldr	r3, [r3, #16]
 8012874:	4a0c      	ldr	r2, [pc, #48]	; (80128a8 <FLASH_Program_DoubleWord+0x5c>)
 8012876:	f043 0301 	orr.w	r3, r3, #1
 801287a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	683a      	ldr	r2, [r7, #0]
 8012880:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8012882:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8012886:	e9d7 1200 	ldrd	r1, r2, [r7]
 801288a:	f04f 0300 	mov.w	r3, #0
 801288e:	f04f 0400 	mov.w	r4, #0
 8012892:	0013      	movs	r3, r2
 8012894:	2400      	movs	r4, #0
 8012896:	68fa      	ldr	r2, [r7, #12]
 8012898:	3204      	adds	r2, #4
 801289a:	6013      	str	r3, [r2, #0]
}
 801289c:	bf00      	nop
 801289e:	3710      	adds	r7, #16
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bc90      	pop	{r4, r7}
 80128a4:	4770      	bx	lr
 80128a6:	bf00      	nop
 80128a8:	40023c00 	.word	0x40023c00

080128ac <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80128b6:	4b0d      	ldr	r3, [pc, #52]	; (80128ec <FLASH_Program_Word+0x40>)
 80128b8:	691b      	ldr	r3, [r3, #16]
 80128ba:	4a0c      	ldr	r2, [pc, #48]	; (80128ec <FLASH_Program_Word+0x40>)
 80128bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80128c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80128c2:	4b0a      	ldr	r3, [pc, #40]	; (80128ec <FLASH_Program_Word+0x40>)
 80128c4:	691b      	ldr	r3, [r3, #16]
 80128c6:	4a09      	ldr	r2, [pc, #36]	; (80128ec <FLASH_Program_Word+0x40>)
 80128c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80128cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80128ce:	4b07      	ldr	r3, [pc, #28]	; (80128ec <FLASH_Program_Word+0x40>)
 80128d0:	691b      	ldr	r3, [r3, #16]
 80128d2:	4a06      	ldr	r2, [pc, #24]	; (80128ec <FLASH_Program_Word+0x40>)
 80128d4:	f043 0301 	orr.w	r3, r3, #1
 80128d8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	683a      	ldr	r2, [r7, #0]
 80128de:	601a      	str	r2, [r3, #0]
}
 80128e0:	bf00      	nop
 80128e2:	370c      	adds	r7, #12
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr
 80128ec:	40023c00 	.word	0x40023c00

080128f0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80128f0:	b480      	push	{r7}
 80128f2:	b083      	sub	sp, #12
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	460b      	mov	r3, r1
 80128fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80128fc:	4b0d      	ldr	r3, [pc, #52]	; (8012934 <FLASH_Program_HalfWord+0x44>)
 80128fe:	691b      	ldr	r3, [r3, #16]
 8012900:	4a0c      	ldr	r2, [pc, #48]	; (8012934 <FLASH_Program_HalfWord+0x44>)
 8012902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012906:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8012908:	4b0a      	ldr	r3, [pc, #40]	; (8012934 <FLASH_Program_HalfWord+0x44>)
 801290a:	691b      	ldr	r3, [r3, #16]
 801290c:	4a09      	ldr	r2, [pc, #36]	; (8012934 <FLASH_Program_HalfWord+0x44>)
 801290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012912:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012914:	4b07      	ldr	r3, [pc, #28]	; (8012934 <FLASH_Program_HalfWord+0x44>)
 8012916:	691b      	ldr	r3, [r3, #16]
 8012918:	4a06      	ldr	r2, [pc, #24]	; (8012934 <FLASH_Program_HalfWord+0x44>)
 801291a:	f043 0301 	orr.w	r3, r3, #1
 801291e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	887a      	ldrh	r2, [r7, #2]
 8012924:	801a      	strh	r2, [r3, #0]
}
 8012926:	bf00      	nop
 8012928:	370c      	adds	r7, #12
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
 8012932:	bf00      	nop
 8012934:	40023c00 	.word	0x40023c00

08012938 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	460b      	mov	r3, r1
 8012942:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012944:	4b0c      	ldr	r3, [pc, #48]	; (8012978 <FLASH_Program_Byte+0x40>)
 8012946:	691b      	ldr	r3, [r3, #16]
 8012948:	4a0b      	ldr	r2, [pc, #44]	; (8012978 <FLASH_Program_Byte+0x40>)
 801294a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801294e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8012950:	4b09      	ldr	r3, [pc, #36]	; (8012978 <FLASH_Program_Byte+0x40>)
 8012952:	4a09      	ldr	r2, [pc, #36]	; (8012978 <FLASH_Program_Byte+0x40>)
 8012954:	691b      	ldr	r3, [r3, #16]
 8012956:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012958:	4b07      	ldr	r3, [pc, #28]	; (8012978 <FLASH_Program_Byte+0x40>)
 801295a:	691b      	ldr	r3, [r3, #16]
 801295c:	4a06      	ldr	r2, [pc, #24]	; (8012978 <FLASH_Program_Byte+0x40>)
 801295e:	f043 0301 	orr.w	r3, r3, #1
 8012962:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	78fa      	ldrb	r2, [r7, #3]
 8012968:	701a      	strb	r2, [r3, #0]
}
 801296a:	bf00      	nop
 801296c:	370c      	adds	r7, #12
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop
 8012978:	40023c00 	.word	0x40023c00

0801297c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 801297c:	b480      	push	{r7}
 801297e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8012980:	4b27      	ldr	r3, [pc, #156]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	f003 0310 	and.w	r3, r3, #16
 8012988:	2b00      	cmp	r3, #0
 801298a:	d008      	beq.n	801299e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801298c:	4b25      	ldr	r3, [pc, #148]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 801298e:	69db      	ldr	r3, [r3, #28]
 8012990:	f043 0310 	orr.w	r3, r3, #16
 8012994:	4a23      	ldr	r2, [pc, #140]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 8012996:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8012998:	4b21      	ldr	r3, [pc, #132]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 801299a:	2210      	movs	r2, #16
 801299c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801299e:	4b20      	ldr	r3, [pc, #128]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	f003 0320 	and.w	r3, r3, #32
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d008      	beq.n	80129bc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80129aa:	4b1e      	ldr	r3, [pc, #120]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 80129ac:	69db      	ldr	r3, [r3, #28]
 80129ae:	f043 0308 	orr.w	r3, r3, #8
 80129b2:	4a1c      	ldr	r2, [pc, #112]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 80129b4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80129b6:	4b1a      	ldr	r3, [pc, #104]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 80129b8:	2220      	movs	r2, #32
 80129ba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80129bc:	4b18      	ldr	r3, [pc, #96]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d008      	beq.n	80129da <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80129c8:	4b16      	ldr	r3, [pc, #88]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 80129ca:	69db      	ldr	r3, [r3, #28]
 80129cc:	f043 0304 	orr.w	r3, r3, #4
 80129d0:	4a14      	ldr	r2, [pc, #80]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 80129d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80129d4:	4b12      	ldr	r3, [pc, #72]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 80129d6:	2240      	movs	r2, #64	; 0x40
 80129d8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80129da:	4b11      	ldr	r3, [pc, #68]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 80129dc:	68db      	ldr	r3, [r3, #12]
 80129de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d008      	beq.n	80129f8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80129e6:	4b0f      	ldr	r3, [pc, #60]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 80129e8:	69db      	ldr	r3, [r3, #28]
 80129ea:	f043 0302 	orr.w	r3, r3, #2
 80129ee:	4a0d      	ldr	r2, [pc, #52]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 80129f0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80129f2:	4b0b      	ldr	r3, [pc, #44]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 80129f4:	2280      	movs	r2, #128	; 0x80
 80129f6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80129f8:	4b09      	ldr	r3, [pc, #36]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	f003 0302 	and.w	r3, r3, #2
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d008      	beq.n	8012a16 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012a04:	4b07      	ldr	r3, [pc, #28]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 8012a06:	69db      	ldr	r3, [r3, #28]
 8012a08:	f043 0320 	orr.w	r3, r3, #32
 8012a0c:	4a05      	ldr	r2, [pc, #20]	; (8012a24 <FLASH_SetErrorCode+0xa8>)
 8012a0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012a10:	4b03      	ldr	r3, [pc, #12]	; (8012a20 <FLASH_SetErrorCode+0xa4>)
 8012a12:	2202      	movs	r2, #2
 8012a14:	60da      	str	r2, [r3, #12]
  }
}
 8012a16:	bf00      	nop
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr
 8012a20:	40023c00 	.word	0x40023c00
 8012a24:	20005060 	.word	0x20005060

08012a28 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012a32:	2301      	movs	r3, #1
 8012a34:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8012a36:	2300      	movs	r3, #0
 8012a38:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012a3a:	4b31      	ldr	r3, [pc, #196]	; (8012b00 <HAL_FLASHEx_Erase+0xd8>)
 8012a3c:	7e1b      	ldrb	r3, [r3, #24]
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d101      	bne.n	8012a46 <HAL_FLASHEx_Erase+0x1e>
 8012a42:	2302      	movs	r3, #2
 8012a44:	e058      	b.n	8012af8 <HAL_FLASHEx_Erase+0xd0>
 8012a46:	4b2e      	ldr	r3, [pc, #184]	; (8012b00 <HAL_FLASHEx_Erase+0xd8>)
 8012a48:	2201      	movs	r2, #1
 8012a4a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012a4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012a50:	f7ff febc 	bl	80127cc <FLASH_WaitForLastOperation>
 8012a54:	4603      	mov	r3, r0
 8012a56:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8012a58:	7bfb      	ldrb	r3, [r7, #15]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d148      	bne.n	8012af0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	f04f 32ff 	mov.w	r2, #4294967295
 8012a64:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	d115      	bne.n	8012a9a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	691b      	ldr	r3, [r3, #16]
 8012a72:	b2da      	uxtb	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	685b      	ldr	r3, [r3, #4]
 8012a78:	4619      	mov	r1, r3
 8012a7a:	4610      	mov	r0, r2
 8012a7c:	f000 f844 	bl	8012b08 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012a80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012a84:	f7ff fea2 	bl	80127cc <FLASH_WaitForLastOperation>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8012a8c:	4b1d      	ldr	r3, [pc, #116]	; (8012b04 <HAL_FLASHEx_Erase+0xdc>)
 8012a8e:	691b      	ldr	r3, [r3, #16]
 8012a90:	4a1c      	ldr	r2, [pc, #112]	; (8012b04 <HAL_FLASHEx_Erase+0xdc>)
 8012a92:	f023 0304 	bic.w	r3, r3, #4
 8012a96:	6113      	str	r3, [r2, #16]
 8012a98:	e028      	b.n	8012aec <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	689b      	ldr	r3, [r3, #8]
 8012a9e:	60bb      	str	r3, [r7, #8]
 8012aa0:	e01c      	b.n	8012adc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	691b      	ldr	r3, [r3, #16]
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	68b8      	ldr	r0, [r7, #8]
 8012aac:	f000 f850 	bl	8012b50 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012ab0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012ab4:	f7ff fe8a 	bl	80127cc <FLASH_WaitForLastOperation>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012abc:	4b11      	ldr	r3, [pc, #68]	; (8012b04 <HAL_FLASHEx_Erase+0xdc>)
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	4a10      	ldr	r2, [pc, #64]	; (8012b04 <HAL_FLASHEx_Erase+0xdc>)
 8012ac2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8012ac6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8012ac8:	7bfb      	ldrb	r3, [r7, #15]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d003      	beq.n	8012ad6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	68ba      	ldr	r2, [r7, #8]
 8012ad2:	601a      	str	r2, [r3, #0]
          break;
 8012ad4:	e00a      	b.n	8012aec <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	60bb      	str	r3, [r7, #8]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	68da      	ldr	r2, [r3, #12]
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	689b      	ldr	r3, [r3, #8]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	68ba      	ldr	r2, [r7, #8]
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d3da      	bcc.n	8012aa2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8012aec:	f000 f878 	bl	8012be0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012af0:	4b03      	ldr	r3, [pc, #12]	; (8012b00 <HAL_FLASHEx_Erase+0xd8>)
 8012af2:	2200      	movs	r2, #0
 8012af4:	761a      	strb	r2, [r3, #24]

  return status;
 8012af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3710      	adds	r7, #16
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	20005060 	.word	0x20005060
 8012b04:	40023c00 	.word	0x40023c00

08012b08 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	4603      	mov	r3, r0
 8012b10:	6039      	str	r1, [r7, #0]
 8012b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012b14:	4b0d      	ldr	r3, [pc, #52]	; (8012b4c <FLASH_MassErase+0x44>)
 8012b16:	691b      	ldr	r3, [r3, #16]
 8012b18:	4a0c      	ldr	r2, [pc, #48]	; (8012b4c <FLASH_MassErase+0x44>)
 8012b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012b20:	4b0a      	ldr	r3, [pc, #40]	; (8012b4c <FLASH_MassErase+0x44>)
 8012b22:	691b      	ldr	r3, [r3, #16]
 8012b24:	4a09      	ldr	r2, [pc, #36]	; (8012b4c <FLASH_MassErase+0x44>)
 8012b26:	f043 0304 	orr.w	r3, r3, #4
 8012b2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012b2c:	4b07      	ldr	r3, [pc, #28]	; (8012b4c <FLASH_MassErase+0x44>)
 8012b2e:	691a      	ldr	r2, [r3, #16]
 8012b30:	79fb      	ldrb	r3, [r7, #7]
 8012b32:	021b      	lsls	r3, r3, #8
 8012b34:	4313      	orrs	r3, r2
 8012b36:	4a05      	ldr	r2, [pc, #20]	; (8012b4c <FLASH_MassErase+0x44>)
 8012b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b3c:	6113      	str	r3, [r2, #16]
}
 8012b3e:	bf00      	nop
 8012b40:	370c      	adds	r7, #12
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	40023c00 	.word	0x40023c00

08012b50 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8012b50:	b480      	push	{r7}
 8012b52:	b085      	sub	sp, #20
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	460b      	mov	r3, r1
 8012b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8012b60:	78fb      	ldrb	r3, [r7, #3]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d102      	bne.n	8012b6c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8012b66:	2300      	movs	r3, #0
 8012b68:	60fb      	str	r3, [r7, #12]
 8012b6a:	e010      	b.n	8012b8e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8012b6c:	78fb      	ldrb	r3, [r7, #3]
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d103      	bne.n	8012b7a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8012b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b76:	60fb      	str	r3, [r7, #12]
 8012b78:	e009      	b.n	8012b8e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8012b7a:	78fb      	ldrb	r3, [r7, #3]
 8012b7c:	2b02      	cmp	r3, #2
 8012b7e:	d103      	bne.n	8012b88 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8012b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b84:	60fb      	str	r3, [r7, #12]
 8012b86:	e002      	b.n	8012b8e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8012b88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012b8c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012b8e:	4b13      	ldr	r3, [pc, #76]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012b90:	691b      	ldr	r3, [r3, #16]
 8012b92:	4a12      	ldr	r2, [pc, #72]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8012b9a:	4b10      	ldr	r3, [pc, #64]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012b9c:	691a      	ldr	r2, [r3, #16]
 8012b9e:	490f      	ldr	r1, [pc, #60]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8012ba6:	4b0d      	ldr	r3, [pc, #52]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012ba8:	691b      	ldr	r3, [r3, #16]
 8012baa:	4a0c      	ldr	r2, [pc, #48]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012bac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8012bb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8012bb2:	4b0a      	ldr	r3, [pc, #40]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012bb4:	691a      	ldr	r2, [r3, #16]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	00db      	lsls	r3, r3, #3
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	4a07      	ldr	r2, [pc, #28]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012bbe:	f043 0302 	orr.w	r3, r3, #2
 8012bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8012bc4:	4b05      	ldr	r3, [pc, #20]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012bc6:	691b      	ldr	r3, [r3, #16]
 8012bc8:	4a04      	ldr	r2, [pc, #16]	; (8012bdc <FLASH_Erase_Sector+0x8c>)
 8012bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012bce:	6113      	str	r3, [r2, #16]
}
 8012bd0:	bf00      	nop
 8012bd2:	3714      	adds	r7, #20
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr
 8012bdc:	40023c00 	.word	0x40023c00

08012be0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012be0:	b480      	push	{r7}
 8012be2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8012be4:	4b20      	ldr	r3, [pc, #128]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d017      	beq.n	8012c20 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012bf0:	4b1d      	ldr	r3, [pc, #116]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	4a1c      	ldr	r2, [pc, #112]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012bf6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012bfa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012bfc:	4b1a      	ldr	r3, [pc, #104]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4a19      	ldr	r2, [pc, #100]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012c06:	6013      	str	r3, [r2, #0]
 8012c08:	4b17      	ldr	r3, [pc, #92]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4a16      	ldr	r2, [pc, #88]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012c12:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012c14:	4b14      	ldr	r3, [pc, #80]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	4a13      	ldr	r2, [pc, #76]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012c1e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012c20:	4b11      	ldr	r3, [pc, #68]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d017      	beq.n	8012c5c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012c2c:	4b0e      	ldr	r3, [pc, #56]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a0d      	ldr	r2, [pc, #52]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012c36:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8012c38:	4b0b      	ldr	r3, [pc, #44]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	4a0a      	ldr	r2, [pc, #40]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012c42:	6013      	str	r3, [r2, #0]
 8012c44:	4b08      	ldr	r3, [pc, #32]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	4a07      	ldr	r2, [pc, #28]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c4e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012c50:	4b05      	ldr	r3, [pc, #20]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4a04      	ldr	r2, [pc, #16]	; (8012c68 <FLASH_FlushCaches+0x88>)
 8012c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012c5a:	6013      	str	r3, [r2, #0]
  }
}
 8012c5c:	bf00      	nop
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c64:	4770      	bx	lr
 8012c66:	bf00      	nop
 8012c68:	40023c00 	.word	0x40023c00

08012c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b089      	sub	sp, #36	; 0x24
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012c76:	2300      	movs	r3, #0
 8012c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012c82:	2300      	movs	r3, #0
 8012c84:	61fb      	str	r3, [r7, #28]
 8012c86:	e16b      	b.n	8012f60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012c88:	2201      	movs	r2, #1
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8012c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	697a      	ldr	r2, [r7, #20]
 8012c98:	4013      	ands	r3, r2
 8012c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012c9c:	693a      	ldr	r2, [r7, #16]
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	f040 815a 	bne.w	8012f5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	2b01      	cmp	r3, #1
 8012cac:	d00b      	beq.n	8012cc6 <HAL_GPIO_Init+0x5a>
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	2b02      	cmp	r3, #2
 8012cb4:	d007      	beq.n	8012cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012cba:	2b11      	cmp	r3, #17
 8012cbc:	d003      	beq.n	8012cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	2b12      	cmp	r3, #18
 8012cc4:	d130      	bne.n	8012d28 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	689b      	ldr	r3, [r3, #8]
 8012cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	005b      	lsls	r3, r3, #1
 8012cd0:	2203      	movs	r2, #3
 8012cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8012cd6:	43db      	mvns	r3, r3
 8012cd8:	69ba      	ldr	r2, [r7, #24]
 8012cda:	4013      	ands	r3, r2
 8012cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	68da      	ldr	r2, [r3, #12]
 8012ce2:	69fb      	ldr	r3, [r7, #28]
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8012cea:	69ba      	ldr	r2, [r7, #24]
 8012cec:	4313      	orrs	r3, r2
 8012cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	69ba      	ldr	r2, [r7, #24]
 8012cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	685b      	ldr	r3, [r3, #4]
 8012cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	fa02 f303 	lsl.w	r3, r2, r3
 8012d04:	43db      	mvns	r3, r3
 8012d06:	69ba      	ldr	r2, [r7, #24]
 8012d08:	4013      	ands	r3, r2
 8012d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	685b      	ldr	r3, [r3, #4]
 8012d10:	091b      	lsrs	r3, r3, #4
 8012d12:	f003 0201 	and.w	r2, r3, #1
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	fa02 f303 	lsl.w	r3, r2, r3
 8012d1c:	69ba      	ldr	r2, [r7, #24]
 8012d1e:	4313      	orrs	r3, r2
 8012d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	69ba      	ldr	r2, [r7, #24]
 8012d26:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	68db      	ldr	r3, [r3, #12]
 8012d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	2203      	movs	r2, #3
 8012d34:	fa02 f303 	lsl.w	r3, r2, r3
 8012d38:	43db      	mvns	r3, r3
 8012d3a:	69ba      	ldr	r2, [r7, #24]
 8012d3c:	4013      	ands	r3, r2
 8012d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	689a      	ldr	r2, [r3, #8]
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	005b      	lsls	r3, r3, #1
 8012d48:	fa02 f303 	lsl.w	r3, r2, r3
 8012d4c:	69ba      	ldr	r2, [r7, #24]
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	69ba      	ldr	r2, [r7, #24]
 8012d56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	2b02      	cmp	r3, #2
 8012d5e:	d003      	beq.n	8012d68 <HAL_GPIO_Init+0xfc>
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	2b12      	cmp	r3, #18
 8012d66:	d123      	bne.n	8012db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	08da      	lsrs	r2, r3, #3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3208      	adds	r2, #8
 8012d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	f003 0307 	and.w	r3, r3, #7
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	220f      	movs	r2, #15
 8012d80:	fa02 f303 	lsl.w	r3, r2, r3
 8012d84:	43db      	mvns	r3, r3
 8012d86:	69ba      	ldr	r2, [r7, #24]
 8012d88:	4013      	ands	r3, r2
 8012d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	691a      	ldr	r2, [r3, #16]
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	f003 0307 	and.w	r3, r3, #7
 8012d96:	009b      	lsls	r3, r3, #2
 8012d98:	fa02 f303 	lsl.w	r3, r2, r3
 8012d9c:	69ba      	ldr	r2, [r7, #24]
 8012d9e:	4313      	orrs	r3, r2
 8012da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	08da      	lsrs	r2, r3, #3
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	3208      	adds	r2, #8
 8012daa:	69b9      	ldr	r1, [r7, #24]
 8012dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	005b      	lsls	r3, r3, #1
 8012dba:	2203      	movs	r2, #3
 8012dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8012dc0:	43db      	mvns	r3, r3
 8012dc2:	69ba      	ldr	r2, [r7, #24]
 8012dc4:	4013      	ands	r3, r2
 8012dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	f003 0203 	and.w	r2, r3, #3
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	005b      	lsls	r3, r3, #1
 8012dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8012dd8:	69ba      	ldr	r2, [r7, #24]
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	69ba      	ldr	r2, [r7, #24]
 8012de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f000 80b4 	beq.w	8012f5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012df2:	2300      	movs	r3, #0
 8012df4:	60fb      	str	r3, [r7, #12]
 8012df6:	4b5f      	ldr	r3, [pc, #380]	; (8012f74 <HAL_GPIO_Init+0x308>)
 8012df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dfa:	4a5e      	ldr	r2, [pc, #376]	; (8012f74 <HAL_GPIO_Init+0x308>)
 8012dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012e00:	6453      	str	r3, [r2, #68]	; 0x44
 8012e02:	4b5c      	ldr	r3, [pc, #368]	; (8012f74 <HAL_GPIO_Init+0x308>)
 8012e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012e0a:	60fb      	str	r3, [r7, #12]
 8012e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012e0e:	4a5a      	ldr	r2, [pc, #360]	; (8012f78 <HAL_GPIO_Init+0x30c>)
 8012e10:	69fb      	ldr	r3, [r7, #28]
 8012e12:	089b      	lsrs	r3, r3, #2
 8012e14:	3302      	adds	r3, #2
 8012e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	f003 0303 	and.w	r3, r3, #3
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	220f      	movs	r2, #15
 8012e26:	fa02 f303 	lsl.w	r3, r2, r3
 8012e2a:	43db      	mvns	r3, r3
 8012e2c:	69ba      	ldr	r2, [r7, #24]
 8012e2e:	4013      	ands	r3, r2
 8012e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	4a51      	ldr	r2, [pc, #324]	; (8012f7c <HAL_GPIO_Init+0x310>)
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d02b      	beq.n	8012e92 <HAL_GPIO_Init+0x226>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	4a50      	ldr	r2, [pc, #320]	; (8012f80 <HAL_GPIO_Init+0x314>)
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d025      	beq.n	8012e8e <HAL_GPIO_Init+0x222>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4a4f      	ldr	r2, [pc, #316]	; (8012f84 <HAL_GPIO_Init+0x318>)
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d01f      	beq.n	8012e8a <HAL_GPIO_Init+0x21e>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	4a4e      	ldr	r2, [pc, #312]	; (8012f88 <HAL_GPIO_Init+0x31c>)
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d019      	beq.n	8012e86 <HAL_GPIO_Init+0x21a>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	4a4d      	ldr	r2, [pc, #308]	; (8012f8c <HAL_GPIO_Init+0x320>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d013      	beq.n	8012e82 <HAL_GPIO_Init+0x216>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	4a4c      	ldr	r2, [pc, #304]	; (8012f90 <HAL_GPIO_Init+0x324>)
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d00d      	beq.n	8012e7e <HAL_GPIO_Init+0x212>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4a4b      	ldr	r2, [pc, #300]	; (8012f94 <HAL_GPIO_Init+0x328>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d007      	beq.n	8012e7a <HAL_GPIO_Init+0x20e>
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	4a4a      	ldr	r2, [pc, #296]	; (8012f98 <HAL_GPIO_Init+0x32c>)
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d101      	bne.n	8012e76 <HAL_GPIO_Init+0x20a>
 8012e72:	2307      	movs	r3, #7
 8012e74:	e00e      	b.n	8012e94 <HAL_GPIO_Init+0x228>
 8012e76:	2308      	movs	r3, #8
 8012e78:	e00c      	b.n	8012e94 <HAL_GPIO_Init+0x228>
 8012e7a:	2306      	movs	r3, #6
 8012e7c:	e00a      	b.n	8012e94 <HAL_GPIO_Init+0x228>
 8012e7e:	2305      	movs	r3, #5
 8012e80:	e008      	b.n	8012e94 <HAL_GPIO_Init+0x228>
 8012e82:	2304      	movs	r3, #4
 8012e84:	e006      	b.n	8012e94 <HAL_GPIO_Init+0x228>
 8012e86:	2303      	movs	r3, #3
 8012e88:	e004      	b.n	8012e94 <HAL_GPIO_Init+0x228>
 8012e8a:	2302      	movs	r3, #2
 8012e8c:	e002      	b.n	8012e94 <HAL_GPIO_Init+0x228>
 8012e8e:	2301      	movs	r3, #1
 8012e90:	e000      	b.n	8012e94 <HAL_GPIO_Init+0x228>
 8012e92:	2300      	movs	r3, #0
 8012e94:	69fa      	ldr	r2, [r7, #28]
 8012e96:	f002 0203 	and.w	r2, r2, #3
 8012e9a:	0092      	lsls	r2, r2, #2
 8012e9c:	4093      	lsls	r3, r2
 8012e9e:	69ba      	ldr	r2, [r7, #24]
 8012ea0:	4313      	orrs	r3, r2
 8012ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012ea4:	4934      	ldr	r1, [pc, #208]	; (8012f78 <HAL_GPIO_Init+0x30c>)
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	089b      	lsrs	r3, r3, #2
 8012eaa:	3302      	adds	r3, #2
 8012eac:	69ba      	ldr	r2, [r7, #24]
 8012eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012eb2:	4b3a      	ldr	r3, [pc, #232]	; (8012f9c <HAL_GPIO_Init+0x330>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	43db      	mvns	r3, r3
 8012ebc:	69ba      	ldr	r2, [r7, #24]
 8012ebe:	4013      	ands	r3, r2
 8012ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d003      	beq.n	8012ed6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012ece:	69ba      	ldr	r2, [r7, #24]
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012ed6:	4a31      	ldr	r2, [pc, #196]	; (8012f9c <HAL_GPIO_Init+0x330>)
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012edc:	4b2f      	ldr	r3, [pc, #188]	; (8012f9c <HAL_GPIO_Init+0x330>)
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	43db      	mvns	r3, r3
 8012ee6:	69ba      	ldr	r2, [r7, #24]
 8012ee8:	4013      	ands	r3, r2
 8012eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d003      	beq.n	8012f00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012ef8:	69ba      	ldr	r2, [r7, #24]
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	4313      	orrs	r3, r2
 8012efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012f00:	4a26      	ldr	r2, [pc, #152]	; (8012f9c <HAL_GPIO_Init+0x330>)
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012f06:	4b25      	ldr	r3, [pc, #148]	; (8012f9c <HAL_GPIO_Init+0x330>)
 8012f08:	689b      	ldr	r3, [r3, #8]
 8012f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	43db      	mvns	r3, r3
 8012f10:	69ba      	ldr	r2, [r7, #24]
 8012f12:	4013      	ands	r3, r2
 8012f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d003      	beq.n	8012f2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012f22:	69ba      	ldr	r2, [r7, #24]
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	4313      	orrs	r3, r2
 8012f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012f2a:	4a1c      	ldr	r2, [pc, #112]	; (8012f9c <HAL_GPIO_Init+0x330>)
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012f30:	4b1a      	ldr	r3, [pc, #104]	; (8012f9c <HAL_GPIO_Init+0x330>)
 8012f32:	68db      	ldr	r3, [r3, #12]
 8012f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	43db      	mvns	r3, r3
 8012f3a:	69ba      	ldr	r2, [r7, #24]
 8012f3c:	4013      	ands	r3, r2
 8012f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d003      	beq.n	8012f54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012f4c:	69ba      	ldr	r2, [r7, #24]
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	4313      	orrs	r3, r2
 8012f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012f54:	4a11      	ldr	r2, [pc, #68]	; (8012f9c <HAL_GPIO_Init+0x330>)
 8012f56:	69bb      	ldr	r3, [r7, #24]
 8012f58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	61fb      	str	r3, [r7, #28]
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	2b0f      	cmp	r3, #15
 8012f64:	f67f ae90 	bls.w	8012c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012f68:	bf00      	nop
 8012f6a:	3724      	adds	r7, #36	; 0x24
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr
 8012f74:	40023800 	.word	0x40023800
 8012f78:	40013800 	.word	0x40013800
 8012f7c:	40020000 	.word	0x40020000
 8012f80:	40020400 	.word	0x40020400
 8012f84:	40020800 	.word	0x40020800
 8012f88:	40020c00 	.word	0x40020c00
 8012f8c:	40021000 	.word	0x40021000
 8012f90:	40021400 	.word	0x40021400
 8012f94:	40021800 	.word	0x40021800
 8012f98:	40021c00 	.word	0x40021c00
 8012f9c:	40013c00 	.word	0x40013c00

08012fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	807b      	strh	r3, [r7, #2]
 8012fac:	4613      	mov	r3, r2
 8012fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012fb0:	787b      	ldrb	r3, [r7, #1]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d003      	beq.n	8012fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012fb6:	887a      	ldrh	r2, [r7, #2]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012fbc:	e003      	b.n	8012fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012fbe:	887b      	ldrh	r3, [r7, #2]
 8012fc0:	041a      	lsls	r2, r3, #16
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	619a      	str	r2, [r3, #24]
}
 8012fc6:	bf00      	nop
 8012fc8:	370c      	adds	r7, #12
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd0:	4770      	bx	lr
	...

08012fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d101      	bne.n	8012fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	e25b      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	f003 0301 	and.w	r3, r3, #1
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d075      	beq.n	80130de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012ff2:	4ba3      	ldr	r3, [pc, #652]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8012ff4:	689b      	ldr	r3, [r3, #8]
 8012ff6:	f003 030c 	and.w	r3, r3, #12
 8012ffa:	2b04      	cmp	r3, #4
 8012ffc:	d00c      	beq.n	8013018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012ffe:	4ba0      	ldr	r3, [pc, #640]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013000:	689b      	ldr	r3, [r3, #8]
 8013002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013006:	2b08      	cmp	r3, #8
 8013008:	d112      	bne.n	8013030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801300a:	4b9d      	ldr	r3, [pc, #628]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013016:	d10b      	bne.n	8013030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013018:	4b99      	ldr	r3, [pc, #612]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013020:	2b00      	cmp	r3, #0
 8013022:	d05b      	beq.n	80130dc <HAL_RCC_OscConfig+0x108>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d157      	bne.n	80130dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801302c:	2301      	movs	r3, #1
 801302e:	e236      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013038:	d106      	bne.n	8013048 <HAL_RCC_OscConfig+0x74>
 801303a:	4b91      	ldr	r3, [pc, #580]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4a90      	ldr	r2, [pc, #576]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013044:	6013      	str	r3, [r2, #0]
 8013046:	e01d      	b.n	8013084 <HAL_RCC_OscConfig+0xb0>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013050:	d10c      	bne.n	801306c <HAL_RCC_OscConfig+0x98>
 8013052:	4b8b      	ldr	r3, [pc, #556]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	4a8a      	ldr	r2, [pc, #552]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801305c:	6013      	str	r3, [r2, #0]
 801305e:	4b88      	ldr	r3, [pc, #544]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4a87      	ldr	r2, [pc, #540]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013068:	6013      	str	r3, [r2, #0]
 801306a:	e00b      	b.n	8013084 <HAL_RCC_OscConfig+0xb0>
 801306c:	4b84      	ldr	r3, [pc, #528]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	4a83      	ldr	r2, [pc, #524]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013076:	6013      	str	r3, [r2, #0]
 8013078:	4b81      	ldr	r3, [pc, #516]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4a80      	ldr	r2, [pc, #512]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 801307e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d013      	beq.n	80130b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801308c:	f7fe f878 	bl	8011180 <HAL_GetTick>
 8013090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013092:	e008      	b.n	80130a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013094:	f7fe f874 	bl	8011180 <HAL_GetTick>
 8013098:	4602      	mov	r2, r0
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	1ad3      	subs	r3, r2, r3
 801309e:	2b64      	cmp	r3, #100	; 0x64
 80130a0:	d901      	bls.n	80130a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80130a2:	2303      	movs	r3, #3
 80130a4:	e1fb      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80130a6:	4b76      	ldr	r3, [pc, #472]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d0f0      	beq.n	8013094 <HAL_RCC_OscConfig+0xc0>
 80130b2:	e014      	b.n	80130de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80130b4:	f7fe f864 	bl	8011180 <HAL_GetTick>
 80130b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80130ba:	e008      	b.n	80130ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80130bc:	f7fe f860 	bl	8011180 <HAL_GetTick>
 80130c0:	4602      	mov	r2, r0
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	1ad3      	subs	r3, r2, r3
 80130c6:	2b64      	cmp	r3, #100	; 0x64
 80130c8:	d901      	bls.n	80130ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80130ca:	2303      	movs	r3, #3
 80130cc:	e1e7      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80130ce:	4b6c      	ldr	r3, [pc, #432]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d1f0      	bne.n	80130bc <HAL_RCC_OscConfig+0xe8>
 80130da:	e000      	b.n	80130de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80130dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	f003 0302 	and.w	r3, r3, #2
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d063      	beq.n	80131b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80130ea:	4b65      	ldr	r3, [pc, #404]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 80130ec:	689b      	ldr	r3, [r3, #8]
 80130ee:	f003 030c 	and.w	r3, r3, #12
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00b      	beq.n	801310e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80130f6:	4b62      	ldr	r3, [pc, #392]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 80130f8:	689b      	ldr	r3, [r3, #8]
 80130fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80130fe:	2b08      	cmp	r3, #8
 8013100:	d11c      	bne.n	801313c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013102:	4b5f      	ldr	r3, [pc, #380]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801310a:	2b00      	cmp	r3, #0
 801310c:	d116      	bne.n	801313c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801310e:	4b5c      	ldr	r3, [pc, #368]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	f003 0302 	and.w	r3, r3, #2
 8013116:	2b00      	cmp	r3, #0
 8013118:	d005      	beq.n	8013126 <HAL_RCC_OscConfig+0x152>
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	68db      	ldr	r3, [r3, #12]
 801311e:	2b01      	cmp	r3, #1
 8013120:	d001      	beq.n	8013126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013122:	2301      	movs	r3, #1
 8013124:	e1bb      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013126:	4b56      	ldr	r3, [pc, #344]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	691b      	ldr	r3, [r3, #16]
 8013132:	00db      	lsls	r3, r3, #3
 8013134:	4952      	ldr	r1, [pc, #328]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013136:	4313      	orrs	r3, r2
 8013138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801313a:	e03a      	b.n	80131b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	68db      	ldr	r3, [r3, #12]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d020      	beq.n	8013186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013144:	4b4f      	ldr	r3, [pc, #316]	; (8013284 <HAL_RCC_OscConfig+0x2b0>)
 8013146:	2201      	movs	r2, #1
 8013148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801314a:	f7fe f819 	bl	8011180 <HAL_GetTick>
 801314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013150:	e008      	b.n	8013164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013152:	f7fe f815 	bl	8011180 <HAL_GetTick>
 8013156:	4602      	mov	r2, r0
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	1ad3      	subs	r3, r2, r3
 801315c:	2b02      	cmp	r3, #2
 801315e:	d901      	bls.n	8013164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013160:	2303      	movs	r3, #3
 8013162:	e19c      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013164:	4b46      	ldr	r3, [pc, #280]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	f003 0302 	and.w	r3, r3, #2
 801316c:	2b00      	cmp	r3, #0
 801316e:	d0f0      	beq.n	8013152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013170:	4b43      	ldr	r3, [pc, #268]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	00db      	lsls	r3, r3, #3
 801317e:	4940      	ldr	r1, [pc, #256]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013180:	4313      	orrs	r3, r2
 8013182:	600b      	str	r3, [r1, #0]
 8013184:	e015      	b.n	80131b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013186:	4b3f      	ldr	r3, [pc, #252]	; (8013284 <HAL_RCC_OscConfig+0x2b0>)
 8013188:	2200      	movs	r2, #0
 801318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801318c:	f7fd fff8 	bl	8011180 <HAL_GetTick>
 8013190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013192:	e008      	b.n	80131a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013194:	f7fd fff4 	bl	8011180 <HAL_GetTick>
 8013198:	4602      	mov	r2, r0
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	2b02      	cmp	r3, #2
 80131a0:	d901      	bls.n	80131a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80131a2:	2303      	movs	r3, #3
 80131a4:	e17b      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80131a6:	4b36      	ldr	r3, [pc, #216]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	f003 0302 	and.w	r3, r3, #2
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d1f0      	bne.n	8013194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f003 0308 	and.w	r3, r3, #8
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d030      	beq.n	8013220 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	695b      	ldr	r3, [r3, #20]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d016      	beq.n	80131f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80131c6:	4b30      	ldr	r3, [pc, #192]	; (8013288 <HAL_RCC_OscConfig+0x2b4>)
 80131c8:	2201      	movs	r2, #1
 80131ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80131cc:	f7fd ffd8 	bl	8011180 <HAL_GetTick>
 80131d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80131d2:	e008      	b.n	80131e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80131d4:	f7fd ffd4 	bl	8011180 <HAL_GetTick>
 80131d8:	4602      	mov	r2, r0
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	1ad3      	subs	r3, r2, r3
 80131de:	2b02      	cmp	r3, #2
 80131e0:	d901      	bls.n	80131e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80131e2:	2303      	movs	r3, #3
 80131e4:	e15b      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80131e6:	4b26      	ldr	r3, [pc, #152]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 80131e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131ea:	f003 0302 	and.w	r3, r3, #2
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d0f0      	beq.n	80131d4 <HAL_RCC_OscConfig+0x200>
 80131f2:	e015      	b.n	8013220 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80131f4:	4b24      	ldr	r3, [pc, #144]	; (8013288 <HAL_RCC_OscConfig+0x2b4>)
 80131f6:	2200      	movs	r2, #0
 80131f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80131fa:	f7fd ffc1 	bl	8011180 <HAL_GetTick>
 80131fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013200:	e008      	b.n	8013214 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013202:	f7fd ffbd 	bl	8011180 <HAL_GetTick>
 8013206:	4602      	mov	r2, r0
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	1ad3      	subs	r3, r2, r3
 801320c:	2b02      	cmp	r3, #2
 801320e:	d901      	bls.n	8013214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013210:	2303      	movs	r3, #3
 8013212:	e144      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013214:	4b1a      	ldr	r3, [pc, #104]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013218:	f003 0302 	and.w	r3, r3, #2
 801321c:	2b00      	cmp	r3, #0
 801321e:	d1f0      	bne.n	8013202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	f003 0304 	and.w	r3, r3, #4
 8013228:	2b00      	cmp	r3, #0
 801322a:	f000 80a0 	beq.w	801336e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801322e:	2300      	movs	r3, #0
 8013230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013232:	4b13      	ldr	r3, [pc, #76]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801323a:	2b00      	cmp	r3, #0
 801323c:	d10f      	bne.n	801325e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801323e:	2300      	movs	r3, #0
 8013240:	60bb      	str	r3, [r7, #8]
 8013242:	4b0f      	ldr	r3, [pc, #60]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013246:	4a0e      	ldr	r2, [pc, #56]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801324c:	6413      	str	r3, [r2, #64]	; 0x40
 801324e:	4b0c      	ldr	r3, [pc, #48]	; (8013280 <HAL_RCC_OscConfig+0x2ac>)
 8013250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013256:	60bb      	str	r3, [r7, #8]
 8013258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801325a:	2301      	movs	r3, #1
 801325c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801325e:	4b0b      	ldr	r3, [pc, #44]	; (801328c <HAL_RCC_OscConfig+0x2b8>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013266:	2b00      	cmp	r3, #0
 8013268:	d121      	bne.n	80132ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801326a:	4b08      	ldr	r3, [pc, #32]	; (801328c <HAL_RCC_OscConfig+0x2b8>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	4a07      	ldr	r2, [pc, #28]	; (801328c <HAL_RCC_OscConfig+0x2b8>)
 8013270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013276:	f7fd ff83 	bl	8011180 <HAL_GetTick>
 801327a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801327c:	e011      	b.n	80132a2 <HAL_RCC_OscConfig+0x2ce>
 801327e:	bf00      	nop
 8013280:	40023800 	.word	0x40023800
 8013284:	42470000 	.word	0x42470000
 8013288:	42470e80 	.word	0x42470e80
 801328c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013290:	f7fd ff76 	bl	8011180 <HAL_GetTick>
 8013294:	4602      	mov	r2, r0
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	1ad3      	subs	r3, r2, r3
 801329a:	2b02      	cmp	r3, #2
 801329c:	d901      	bls.n	80132a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801329e:	2303      	movs	r3, #3
 80132a0:	e0fd      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80132a2:	4b81      	ldr	r3, [pc, #516]	; (80134a8 <HAL_RCC_OscConfig+0x4d4>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d0f0      	beq.n	8013290 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	689b      	ldr	r3, [r3, #8]
 80132b2:	2b01      	cmp	r3, #1
 80132b4:	d106      	bne.n	80132c4 <HAL_RCC_OscConfig+0x2f0>
 80132b6:	4b7d      	ldr	r3, [pc, #500]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132ba:	4a7c      	ldr	r2, [pc, #496]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132bc:	f043 0301 	orr.w	r3, r3, #1
 80132c0:	6713      	str	r3, [r2, #112]	; 0x70
 80132c2:	e01c      	b.n	80132fe <HAL_RCC_OscConfig+0x32a>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	2b05      	cmp	r3, #5
 80132ca:	d10c      	bne.n	80132e6 <HAL_RCC_OscConfig+0x312>
 80132cc:	4b77      	ldr	r3, [pc, #476]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132d0:	4a76      	ldr	r2, [pc, #472]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132d2:	f043 0304 	orr.w	r3, r3, #4
 80132d6:	6713      	str	r3, [r2, #112]	; 0x70
 80132d8:	4b74      	ldr	r3, [pc, #464]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132dc:	4a73      	ldr	r2, [pc, #460]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132de:	f043 0301 	orr.w	r3, r3, #1
 80132e2:	6713      	str	r3, [r2, #112]	; 0x70
 80132e4:	e00b      	b.n	80132fe <HAL_RCC_OscConfig+0x32a>
 80132e6:	4b71      	ldr	r3, [pc, #452]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132ea:	4a70      	ldr	r2, [pc, #448]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132ec:	f023 0301 	bic.w	r3, r3, #1
 80132f0:	6713      	str	r3, [r2, #112]	; 0x70
 80132f2:	4b6e      	ldr	r3, [pc, #440]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132f6:	4a6d      	ldr	r2, [pc, #436]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80132f8:	f023 0304 	bic.w	r3, r3, #4
 80132fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	689b      	ldr	r3, [r3, #8]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d015      	beq.n	8013332 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013306:	f7fd ff3b 	bl	8011180 <HAL_GetTick>
 801330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801330c:	e00a      	b.n	8013324 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801330e:	f7fd ff37 	bl	8011180 <HAL_GetTick>
 8013312:	4602      	mov	r2, r0
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	f241 3288 	movw	r2, #5000	; 0x1388
 801331c:	4293      	cmp	r3, r2
 801331e:	d901      	bls.n	8013324 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013320:	2303      	movs	r3, #3
 8013322:	e0bc      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013324:	4b61      	ldr	r3, [pc, #388]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 8013326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013328:	f003 0302 	and.w	r3, r3, #2
 801332c:	2b00      	cmp	r3, #0
 801332e:	d0ee      	beq.n	801330e <HAL_RCC_OscConfig+0x33a>
 8013330:	e014      	b.n	801335c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013332:	f7fd ff25 	bl	8011180 <HAL_GetTick>
 8013336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013338:	e00a      	b.n	8013350 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801333a:	f7fd ff21 	bl	8011180 <HAL_GetTick>
 801333e:	4602      	mov	r2, r0
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	1ad3      	subs	r3, r2, r3
 8013344:	f241 3288 	movw	r2, #5000	; 0x1388
 8013348:	4293      	cmp	r3, r2
 801334a:	d901      	bls.n	8013350 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801334c:	2303      	movs	r3, #3
 801334e:	e0a6      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013350:	4b56      	ldr	r3, [pc, #344]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 8013352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013354:	f003 0302 	and.w	r3, r3, #2
 8013358:	2b00      	cmp	r3, #0
 801335a:	d1ee      	bne.n	801333a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801335c:	7dfb      	ldrb	r3, [r7, #23]
 801335e:	2b01      	cmp	r3, #1
 8013360:	d105      	bne.n	801336e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013362:	4b52      	ldr	r3, [pc, #328]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 8013364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013366:	4a51      	ldr	r2, [pc, #324]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 8013368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801336c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	699b      	ldr	r3, [r3, #24]
 8013372:	2b00      	cmp	r3, #0
 8013374:	f000 8092 	beq.w	801349c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013378:	4b4c      	ldr	r3, [pc, #304]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 801337a:	689b      	ldr	r3, [r3, #8]
 801337c:	f003 030c 	and.w	r3, r3, #12
 8013380:	2b08      	cmp	r3, #8
 8013382:	d05c      	beq.n	801343e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	699b      	ldr	r3, [r3, #24]
 8013388:	2b02      	cmp	r3, #2
 801338a:	d141      	bne.n	8013410 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801338c:	4b48      	ldr	r3, [pc, #288]	; (80134b0 <HAL_RCC_OscConfig+0x4dc>)
 801338e:	2200      	movs	r2, #0
 8013390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013392:	f7fd fef5 	bl	8011180 <HAL_GetTick>
 8013396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013398:	e008      	b.n	80133ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801339a:	f7fd fef1 	bl	8011180 <HAL_GetTick>
 801339e:	4602      	mov	r2, r0
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	1ad3      	subs	r3, r2, r3
 80133a4:	2b02      	cmp	r3, #2
 80133a6:	d901      	bls.n	80133ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80133a8:	2303      	movs	r3, #3
 80133aa:	e078      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80133ac:	4b3f      	ldr	r3, [pc, #252]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d1f0      	bne.n	801339a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	69da      	ldr	r2, [r3, #28]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	6a1b      	ldr	r3, [r3, #32]
 80133c0:	431a      	orrs	r2, r3
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c6:	019b      	lsls	r3, r3, #6
 80133c8:	431a      	orrs	r2, r3
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133ce:	085b      	lsrs	r3, r3, #1
 80133d0:	3b01      	subs	r3, #1
 80133d2:	041b      	lsls	r3, r3, #16
 80133d4:	431a      	orrs	r2, r3
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133da:	061b      	lsls	r3, r3, #24
 80133dc:	4933      	ldr	r1, [pc, #204]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 80133de:	4313      	orrs	r3, r2
 80133e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80133e2:	4b33      	ldr	r3, [pc, #204]	; (80134b0 <HAL_RCC_OscConfig+0x4dc>)
 80133e4:	2201      	movs	r2, #1
 80133e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80133e8:	f7fd feca 	bl	8011180 <HAL_GetTick>
 80133ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80133ee:	e008      	b.n	8013402 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80133f0:	f7fd fec6 	bl	8011180 <HAL_GetTick>
 80133f4:	4602      	mov	r2, r0
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	1ad3      	subs	r3, r2, r3
 80133fa:	2b02      	cmp	r3, #2
 80133fc:	d901      	bls.n	8013402 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80133fe:	2303      	movs	r3, #3
 8013400:	e04d      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013402:	4b2a      	ldr	r3, [pc, #168]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801340a:	2b00      	cmp	r3, #0
 801340c:	d0f0      	beq.n	80133f0 <HAL_RCC_OscConfig+0x41c>
 801340e:	e045      	b.n	801349c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013410:	4b27      	ldr	r3, [pc, #156]	; (80134b0 <HAL_RCC_OscConfig+0x4dc>)
 8013412:	2200      	movs	r2, #0
 8013414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013416:	f7fd feb3 	bl	8011180 <HAL_GetTick>
 801341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801341c:	e008      	b.n	8013430 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801341e:	f7fd feaf 	bl	8011180 <HAL_GetTick>
 8013422:	4602      	mov	r2, r0
 8013424:	693b      	ldr	r3, [r7, #16]
 8013426:	1ad3      	subs	r3, r2, r3
 8013428:	2b02      	cmp	r3, #2
 801342a:	d901      	bls.n	8013430 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801342c:	2303      	movs	r3, #3
 801342e:	e036      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013430:	4b1e      	ldr	r3, [pc, #120]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013438:	2b00      	cmp	r3, #0
 801343a:	d1f0      	bne.n	801341e <HAL_RCC_OscConfig+0x44a>
 801343c:	e02e      	b.n	801349c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	699b      	ldr	r3, [r3, #24]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d101      	bne.n	801344a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013446:	2301      	movs	r3, #1
 8013448:	e029      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801344a:	4b18      	ldr	r3, [pc, #96]	; (80134ac <HAL_RCC_OscConfig+0x4d8>)
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	69db      	ldr	r3, [r3, #28]
 801345a:	429a      	cmp	r2, r3
 801345c:	d11c      	bne.n	8013498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013468:	429a      	cmp	r2, r3
 801346a:	d115      	bne.n	8013498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801346c:	68fa      	ldr	r2, [r7, #12]
 801346e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013472:	4013      	ands	r3, r2
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013478:	4293      	cmp	r3, r2
 801347a:	d10d      	bne.n	8013498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013486:	429a      	cmp	r2, r3
 8013488:	d106      	bne.n	8013498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013494:	429a      	cmp	r2, r3
 8013496:	d001      	beq.n	801349c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8013498:	2301      	movs	r3, #1
 801349a:	e000      	b.n	801349e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801349c:	2300      	movs	r3, #0
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3718      	adds	r7, #24
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop
 80134a8:	40007000 	.word	0x40007000
 80134ac:	40023800 	.word	0x40023800
 80134b0:	42470060 	.word	0x42470060

080134b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b084      	sub	sp, #16
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d101      	bne.n	80134c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80134c4:	2301      	movs	r3, #1
 80134c6:	e0cc      	b.n	8013662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80134c8:	4b68      	ldr	r3, [pc, #416]	; (801366c <HAL_RCC_ClockConfig+0x1b8>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	f003 030f 	and.w	r3, r3, #15
 80134d0:	683a      	ldr	r2, [r7, #0]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d90c      	bls.n	80134f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80134d6:	4b65      	ldr	r3, [pc, #404]	; (801366c <HAL_RCC_ClockConfig+0x1b8>)
 80134d8:	683a      	ldr	r2, [r7, #0]
 80134da:	b2d2      	uxtb	r2, r2
 80134dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80134de:	4b63      	ldr	r3, [pc, #396]	; (801366c <HAL_RCC_ClockConfig+0x1b8>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	f003 030f 	and.w	r3, r3, #15
 80134e6:	683a      	ldr	r2, [r7, #0]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d001      	beq.n	80134f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80134ec:	2301      	movs	r3, #1
 80134ee:	e0b8      	b.n	8013662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f003 0302 	and.w	r3, r3, #2
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d020      	beq.n	801353e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	f003 0304 	and.w	r3, r3, #4
 8013504:	2b00      	cmp	r3, #0
 8013506:	d005      	beq.n	8013514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013508:	4b59      	ldr	r3, [pc, #356]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 801350a:	689b      	ldr	r3, [r3, #8]
 801350c:	4a58      	ldr	r2, [pc, #352]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 801350e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f003 0308 	and.w	r3, r3, #8
 801351c:	2b00      	cmp	r3, #0
 801351e:	d005      	beq.n	801352c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013520:	4b53      	ldr	r3, [pc, #332]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013522:	689b      	ldr	r3, [r3, #8]
 8013524:	4a52      	ldr	r2, [pc, #328]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801352a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801352c:	4b50      	ldr	r3, [pc, #320]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 801352e:	689b      	ldr	r3, [r3, #8]
 8013530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	494d      	ldr	r1, [pc, #308]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 801353a:	4313      	orrs	r3, r2
 801353c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f003 0301 	and.w	r3, r3, #1
 8013546:	2b00      	cmp	r3, #0
 8013548:	d044      	beq.n	80135d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	2b01      	cmp	r3, #1
 8013550:	d107      	bne.n	8013562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013552:	4b47      	ldr	r3, [pc, #284]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801355a:	2b00      	cmp	r3, #0
 801355c:	d119      	bne.n	8013592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801355e:	2301      	movs	r3, #1
 8013560:	e07f      	b.n	8013662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	2b02      	cmp	r3, #2
 8013568:	d003      	beq.n	8013572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801356e:	2b03      	cmp	r3, #3
 8013570:	d107      	bne.n	8013582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013572:	4b3f      	ldr	r3, [pc, #252]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801357a:	2b00      	cmp	r3, #0
 801357c:	d109      	bne.n	8013592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801357e:	2301      	movs	r3, #1
 8013580:	e06f      	b.n	8013662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013582:	4b3b      	ldr	r3, [pc, #236]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f003 0302 	and.w	r3, r3, #2
 801358a:	2b00      	cmp	r3, #0
 801358c:	d101      	bne.n	8013592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801358e:	2301      	movs	r3, #1
 8013590:	e067      	b.n	8013662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013592:	4b37      	ldr	r3, [pc, #220]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013594:	689b      	ldr	r3, [r3, #8]
 8013596:	f023 0203 	bic.w	r2, r3, #3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	685b      	ldr	r3, [r3, #4]
 801359e:	4934      	ldr	r1, [pc, #208]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 80135a0:	4313      	orrs	r3, r2
 80135a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80135a4:	f7fd fdec 	bl	8011180 <HAL_GetTick>
 80135a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80135aa:	e00a      	b.n	80135c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80135ac:	f7fd fde8 	bl	8011180 <HAL_GetTick>
 80135b0:	4602      	mov	r2, r0
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	1ad3      	subs	r3, r2, r3
 80135b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d901      	bls.n	80135c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80135be:	2303      	movs	r3, #3
 80135c0:	e04f      	b.n	8013662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80135c2:	4b2b      	ldr	r3, [pc, #172]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 80135c4:	689b      	ldr	r3, [r3, #8]
 80135c6:	f003 020c 	and.w	r2, r3, #12
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d1eb      	bne.n	80135ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80135d4:	4b25      	ldr	r3, [pc, #148]	; (801366c <HAL_RCC_ClockConfig+0x1b8>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f003 030f 	and.w	r3, r3, #15
 80135dc:	683a      	ldr	r2, [r7, #0]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d20c      	bcs.n	80135fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80135e2:	4b22      	ldr	r3, [pc, #136]	; (801366c <HAL_RCC_ClockConfig+0x1b8>)
 80135e4:	683a      	ldr	r2, [r7, #0]
 80135e6:	b2d2      	uxtb	r2, r2
 80135e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80135ea:	4b20      	ldr	r3, [pc, #128]	; (801366c <HAL_RCC_ClockConfig+0x1b8>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	f003 030f 	and.w	r3, r3, #15
 80135f2:	683a      	ldr	r2, [r7, #0]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d001      	beq.n	80135fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80135f8:	2301      	movs	r3, #1
 80135fa:	e032      	b.n	8013662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	f003 0304 	and.w	r3, r3, #4
 8013604:	2b00      	cmp	r3, #0
 8013606:	d008      	beq.n	801361a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013608:	4b19      	ldr	r3, [pc, #100]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	68db      	ldr	r3, [r3, #12]
 8013614:	4916      	ldr	r1, [pc, #88]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013616:	4313      	orrs	r3, r2
 8013618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f003 0308 	and.w	r3, r3, #8
 8013622:	2b00      	cmp	r3, #0
 8013624:	d009      	beq.n	801363a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013626:	4b12      	ldr	r3, [pc, #72]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	691b      	ldr	r3, [r3, #16]
 8013632:	00db      	lsls	r3, r3, #3
 8013634:	490e      	ldr	r1, [pc, #56]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013636:	4313      	orrs	r3, r2
 8013638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801363a:	f000 f821 	bl	8013680 <HAL_RCC_GetSysClockFreq>
 801363e:	4601      	mov	r1, r0
 8013640:	4b0b      	ldr	r3, [pc, #44]	; (8013670 <HAL_RCC_ClockConfig+0x1bc>)
 8013642:	689b      	ldr	r3, [r3, #8]
 8013644:	091b      	lsrs	r3, r3, #4
 8013646:	f003 030f 	and.w	r3, r3, #15
 801364a:	4a0a      	ldr	r2, [pc, #40]	; (8013674 <HAL_RCC_ClockConfig+0x1c0>)
 801364c:	5cd3      	ldrb	r3, [r2, r3]
 801364e:	fa21 f303 	lsr.w	r3, r1, r3
 8013652:	4a09      	ldr	r2, [pc, #36]	; (8013678 <HAL_RCC_ClockConfig+0x1c4>)
 8013654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013656:	4b09      	ldr	r3, [pc, #36]	; (801367c <HAL_RCC_ClockConfig+0x1c8>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	4618      	mov	r0, r3
 801365c:	f7fd fd4c 	bl	80110f8 <HAL_InitTick>

  return HAL_OK;
 8013660:	2300      	movs	r3, #0
}
 8013662:	4618      	mov	r0, r3
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	40023c00 	.word	0x40023c00
 8013670:	40023800 	.word	0x40023800
 8013674:	08018af8 	.word	0x08018af8
 8013678:	20000080 	.word	0x20000080
 801367c:	20000084 	.word	0x20000084

08013680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013682:	b085      	sub	sp, #20
 8013684:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013686:	2300      	movs	r3, #0
 8013688:	607b      	str	r3, [r7, #4]
 801368a:	2300      	movs	r3, #0
 801368c:	60fb      	str	r3, [r7, #12]
 801368e:	2300      	movs	r3, #0
 8013690:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013692:	2300      	movs	r3, #0
 8013694:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013696:	4b63      	ldr	r3, [pc, #396]	; (8013824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	f003 030c 	and.w	r3, r3, #12
 801369e:	2b04      	cmp	r3, #4
 80136a0:	d007      	beq.n	80136b2 <HAL_RCC_GetSysClockFreq+0x32>
 80136a2:	2b08      	cmp	r3, #8
 80136a4:	d008      	beq.n	80136b8 <HAL_RCC_GetSysClockFreq+0x38>
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	f040 80b4 	bne.w	8013814 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80136ac:	4b5e      	ldr	r3, [pc, #376]	; (8013828 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80136ae:	60bb      	str	r3, [r7, #8]
       break;
 80136b0:	e0b3      	b.n	801381a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80136b2:	4b5e      	ldr	r3, [pc, #376]	; (801382c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80136b4:	60bb      	str	r3, [r7, #8]
      break;
 80136b6:	e0b0      	b.n	801381a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80136b8:	4b5a      	ldr	r3, [pc, #360]	; (8013824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80136ba:	685b      	ldr	r3, [r3, #4]
 80136bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80136c2:	4b58      	ldr	r3, [pc, #352]	; (8013824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80136c4:	685b      	ldr	r3, [r3, #4]
 80136c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d04a      	beq.n	8013764 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80136ce:	4b55      	ldr	r3, [pc, #340]	; (8013824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	099b      	lsrs	r3, r3, #6
 80136d4:	f04f 0400 	mov.w	r4, #0
 80136d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80136dc:	f04f 0200 	mov.w	r2, #0
 80136e0:	ea03 0501 	and.w	r5, r3, r1
 80136e4:	ea04 0602 	and.w	r6, r4, r2
 80136e8:	4629      	mov	r1, r5
 80136ea:	4632      	mov	r2, r6
 80136ec:	f04f 0300 	mov.w	r3, #0
 80136f0:	f04f 0400 	mov.w	r4, #0
 80136f4:	0154      	lsls	r4, r2, #5
 80136f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80136fa:	014b      	lsls	r3, r1, #5
 80136fc:	4619      	mov	r1, r3
 80136fe:	4622      	mov	r2, r4
 8013700:	1b49      	subs	r1, r1, r5
 8013702:	eb62 0206 	sbc.w	r2, r2, r6
 8013706:	f04f 0300 	mov.w	r3, #0
 801370a:	f04f 0400 	mov.w	r4, #0
 801370e:	0194      	lsls	r4, r2, #6
 8013710:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8013714:	018b      	lsls	r3, r1, #6
 8013716:	1a5b      	subs	r3, r3, r1
 8013718:	eb64 0402 	sbc.w	r4, r4, r2
 801371c:	f04f 0100 	mov.w	r1, #0
 8013720:	f04f 0200 	mov.w	r2, #0
 8013724:	00e2      	lsls	r2, r4, #3
 8013726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801372a:	00d9      	lsls	r1, r3, #3
 801372c:	460b      	mov	r3, r1
 801372e:	4614      	mov	r4, r2
 8013730:	195b      	adds	r3, r3, r5
 8013732:	eb44 0406 	adc.w	r4, r4, r6
 8013736:	f04f 0100 	mov.w	r1, #0
 801373a:	f04f 0200 	mov.w	r2, #0
 801373e:	0262      	lsls	r2, r4, #9
 8013740:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8013744:	0259      	lsls	r1, r3, #9
 8013746:	460b      	mov	r3, r1
 8013748:	4614      	mov	r4, r2
 801374a:	4618      	mov	r0, r3
 801374c:	4621      	mov	r1, r4
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f04f 0400 	mov.w	r4, #0
 8013754:	461a      	mov	r2, r3
 8013756:	4623      	mov	r3, r4
 8013758:	f7f5 f9ae 	bl	8008ab8 <__aeabi_uldivmod>
 801375c:	4603      	mov	r3, r0
 801375e:	460c      	mov	r4, r1
 8013760:	60fb      	str	r3, [r7, #12]
 8013762:	e049      	b.n	80137f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013764:	4b2f      	ldr	r3, [pc, #188]	; (8013824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	099b      	lsrs	r3, r3, #6
 801376a:	f04f 0400 	mov.w	r4, #0
 801376e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013772:	f04f 0200 	mov.w	r2, #0
 8013776:	ea03 0501 	and.w	r5, r3, r1
 801377a:	ea04 0602 	and.w	r6, r4, r2
 801377e:	4629      	mov	r1, r5
 8013780:	4632      	mov	r2, r6
 8013782:	f04f 0300 	mov.w	r3, #0
 8013786:	f04f 0400 	mov.w	r4, #0
 801378a:	0154      	lsls	r4, r2, #5
 801378c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013790:	014b      	lsls	r3, r1, #5
 8013792:	4619      	mov	r1, r3
 8013794:	4622      	mov	r2, r4
 8013796:	1b49      	subs	r1, r1, r5
 8013798:	eb62 0206 	sbc.w	r2, r2, r6
 801379c:	f04f 0300 	mov.w	r3, #0
 80137a0:	f04f 0400 	mov.w	r4, #0
 80137a4:	0194      	lsls	r4, r2, #6
 80137a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80137aa:	018b      	lsls	r3, r1, #6
 80137ac:	1a5b      	subs	r3, r3, r1
 80137ae:	eb64 0402 	sbc.w	r4, r4, r2
 80137b2:	f04f 0100 	mov.w	r1, #0
 80137b6:	f04f 0200 	mov.w	r2, #0
 80137ba:	00e2      	lsls	r2, r4, #3
 80137bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80137c0:	00d9      	lsls	r1, r3, #3
 80137c2:	460b      	mov	r3, r1
 80137c4:	4614      	mov	r4, r2
 80137c6:	195b      	adds	r3, r3, r5
 80137c8:	eb44 0406 	adc.w	r4, r4, r6
 80137cc:	f04f 0100 	mov.w	r1, #0
 80137d0:	f04f 0200 	mov.w	r2, #0
 80137d4:	02a2      	lsls	r2, r4, #10
 80137d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80137da:	0299      	lsls	r1, r3, #10
 80137dc:	460b      	mov	r3, r1
 80137de:	4614      	mov	r4, r2
 80137e0:	4618      	mov	r0, r3
 80137e2:	4621      	mov	r1, r4
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f04f 0400 	mov.w	r4, #0
 80137ea:	461a      	mov	r2, r3
 80137ec:	4623      	mov	r3, r4
 80137ee:	f7f5 f963 	bl	8008ab8 <__aeabi_uldivmod>
 80137f2:	4603      	mov	r3, r0
 80137f4:	460c      	mov	r4, r1
 80137f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80137f8:	4b0a      	ldr	r3, [pc, #40]	; (8013824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80137fa:	685b      	ldr	r3, [r3, #4]
 80137fc:	0c1b      	lsrs	r3, r3, #16
 80137fe:	f003 0303 	and.w	r3, r3, #3
 8013802:	3301      	adds	r3, #1
 8013804:	005b      	lsls	r3, r3, #1
 8013806:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013808:	68fa      	ldr	r2, [r7, #12]
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013810:	60bb      	str	r3, [r7, #8]
      break;
 8013812:	e002      	b.n	801381a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013814:	4b04      	ldr	r3, [pc, #16]	; (8013828 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8013816:	60bb      	str	r3, [r7, #8]
      break;
 8013818:	bf00      	nop
    }
  }
  return sysclockfreq;
 801381a:	68bb      	ldr	r3, [r7, #8]
}
 801381c:	4618      	mov	r0, r3
 801381e:	3714      	adds	r7, #20
 8013820:	46bd      	mov	sp, r7
 8013822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013824:	40023800 	.word	0x40023800
 8013828:	00f42400 	.word	0x00f42400
 801382c:	007a1200 	.word	0x007a1200

08013830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013830:	b480      	push	{r7}
 8013832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013834:	4b03      	ldr	r3, [pc, #12]	; (8013844 <HAL_RCC_GetHCLKFreq+0x14>)
 8013836:	681b      	ldr	r3, [r3, #0]
}
 8013838:	4618      	mov	r0, r3
 801383a:	46bd      	mov	sp, r7
 801383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013840:	4770      	bx	lr
 8013842:	bf00      	nop
 8013844:	20000080 	.word	0x20000080

08013848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801384c:	f7ff fff0 	bl	8013830 <HAL_RCC_GetHCLKFreq>
 8013850:	4601      	mov	r1, r0
 8013852:	4b05      	ldr	r3, [pc, #20]	; (8013868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	0a9b      	lsrs	r3, r3, #10
 8013858:	f003 0307 	and.w	r3, r3, #7
 801385c:	4a03      	ldr	r2, [pc, #12]	; (801386c <HAL_RCC_GetPCLK1Freq+0x24>)
 801385e:	5cd3      	ldrb	r3, [r2, r3]
 8013860:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013864:	4618      	mov	r0, r3
 8013866:	bd80      	pop	{r7, pc}
 8013868:	40023800 	.word	0x40023800
 801386c:	08018b08 	.word	0x08018b08

08013870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013874:	f7ff ffdc 	bl	8013830 <HAL_RCC_GetHCLKFreq>
 8013878:	4601      	mov	r1, r0
 801387a:	4b05      	ldr	r3, [pc, #20]	; (8013890 <HAL_RCC_GetPCLK2Freq+0x20>)
 801387c:	689b      	ldr	r3, [r3, #8]
 801387e:	0b5b      	lsrs	r3, r3, #13
 8013880:	f003 0307 	and.w	r3, r3, #7
 8013884:	4a03      	ldr	r2, [pc, #12]	; (8013894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013886:	5cd3      	ldrb	r3, [r2, r3]
 8013888:	fa21 f303 	lsr.w	r3, r1, r3
}
 801388c:	4618      	mov	r0, r3
 801388e:	bd80      	pop	{r7, pc}
 8013890:	40023800 	.word	0x40023800
 8013894:	08018b08 	.word	0x08018b08

08013898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d101      	bne.n	80138aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80138a6:	2301      	movs	r3, #1
 80138a8:	e056      	b.n	8013958 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2200      	movs	r2, #0
 80138ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138b6:	b2db      	uxtb	r3, r3
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d106      	bne.n	80138ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f7fd f81d 	bl	8010904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	2202      	movs	r2, #2
 80138ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80138e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	431a      	orrs	r2, r3
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	68db      	ldr	r3, [r3, #12]
 80138f0:	431a      	orrs	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	691b      	ldr	r3, [r3, #16]
 80138f6:	431a      	orrs	r2, r3
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	695b      	ldr	r3, [r3, #20]
 80138fc:	431a      	orrs	r2, r3
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	699b      	ldr	r3, [r3, #24]
 8013902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013906:	431a      	orrs	r2, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	69db      	ldr	r3, [r3, #28]
 801390c:	431a      	orrs	r2, r3
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a1b      	ldr	r3, [r3, #32]
 8013912:	ea42 0103 	orr.w	r1, r2, r3
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	430a      	orrs	r2, r1
 8013920:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	699b      	ldr	r3, [r3, #24]
 8013926:	0c1b      	lsrs	r3, r3, #16
 8013928:	f003 0104 	and.w	r1, r3, #4
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	430a      	orrs	r2, r1
 8013936:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	69da      	ldr	r2, [r3, #28]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013946:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2200      	movs	r2, #0
 801394c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2201      	movs	r2, #1
 8013952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013956:	2300      	movs	r3, #0
}
 8013958:	4618      	mov	r0, r3
 801395a:	3708      	adds	r7, #8
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b088      	sub	sp, #32
 8013964:	af00      	add	r7, sp, #0
 8013966:	60f8      	str	r0, [r7, #12]
 8013968:	60b9      	str	r1, [r7, #8]
 801396a:	603b      	str	r3, [r7, #0]
 801396c:	4613      	mov	r3, r2
 801396e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013970:	2300      	movs	r3, #0
 8013972:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801397a:	2b01      	cmp	r3, #1
 801397c:	d101      	bne.n	8013982 <HAL_SPI_Transmit+0x22>
 801397e:	2302      	movs	r3, #2
 8013980:	e11e      	b.n	8013bc0 <HAL_SPI_Transmit+0x260>
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2201      	movs	r2, #1
 8013986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801398a:	f7fd fbf9 	bl	8011180 <HAL_GetTick>
 801398e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013990:	88fb      	ldrh	r3, [r7, #6]
 8013992:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801399a:	b2db      	uxtb	r3, r3
 801399c:	2b01      	cmp	r3, #1
 801399e:	d002      	beq.n	80139a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80139a0:	2302      	movs	r3, #2
 80139a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80139a4:	e103      	b.n	8013bae <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d002      	beq.n	80139b2 <HAL_SPI_Transmit+0x52>
 80139ac:	88fb      	ldrh	r3, [r7, #6]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d102      	bne.n	80139b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80139b2:	2301      	movs	r3, #1
 80139b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80139b6:	e0fa      	b.n	8013bae <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2203      	movs	r2, #3
 80139bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	2200      	movs	r2, #0
 80139c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	68ba      	ldr	r2, [r7, #8]
 80139ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	88fa      	ldrh	r2, [r7, #6]
 80139d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	88fa      	ldrh	r2, [r7, #6]
 80139d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	2200      	movs	r2, #0
 80139dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2200      	movs	r2, #0
 80139e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2200      	movs	r2, #0
 80139e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2200      	movs	r2, #0
 80139ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	2200      	movs	r2, #0
 80139f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	689b      	ldr	r3, [r3, #8]
 80139fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139fe:	d107      	bne.n	8013a10 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	681a      	ldr	r2, [r3, #0]
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013a0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a1a:	2b40      	cmp	r3, #64	; 0x40
 8013a1c:	d007      	beq.n	8013a2e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013a2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	68db      	ldr	r3, [r3, #12]
 8013a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013a36:	d14b      	bne.n	8013ad0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d002      	beq.n	8013a46 <HAL_SPI_Transmit+0xe6>
 8013a40:	8afb      	ldrh	r3, [r7, #22]
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d13e      	bne.n	8013ac4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a4a:	881a      	ldrh	r2, [r3, #0]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a56:	1c9a      	adds	r2, r3, #2
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	3b01      	subs	r3, #1
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013a6a:	e02b      	b.n	8013ac4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	689b      	ldr	r3, [r3, #8]
 8013a72:	f003 0302 	and.w	r3, r3, #2
 8013a76:	2b02      	cmp	r3, #2
 8013a78:	d112      	bne.n	8013aa0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a7e:	881a      	ldrh	r2, [r3, #0]
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a8a:	1c9a      	adds	r2, r3, #2
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a94:	b29b      	uxth	r3, r3
 8013a96:	3b01      	subs	r3, #1
 8013a98:	b29a      	uxth	r2, r3
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8013a9e:	e011      	b.n	8013ac4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013aa0:	f7fd fb6e 	bl	8011180 <HAL_GetTick>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	69bb      	ldr	r3, [r7, #24]
 8013aa8:	1ad3      	subs	r3, r2, r3
 8013aaa:	683a      	ldr	r2, [r7, #0]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d803      	bhi.n	8013ab8 <HAL_SPI_Transmit+0x158>
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ab6:	d102      	bne.n	8013abe <HAL_SPI_Transmit+0x15e>
 8013ab8:	683b      	ldr	r3, [r7, #0]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d102      	bne.n	8013ac4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8013abe:	2303      	movs	r3, #3
 8013ac0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013ac2:	e074      	b.n	8013bae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d1ce      	bne.n	8013a6c <HAL_SPI_Transmit+0x10c>
 8013ace:	e04c      	b.n	8013b6a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d002      	beq.n	8013ade <HAL_SPI_Transmit+0x17e>
 8013ad8:	8afb      	ldrh	r3, [r7, #22]
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d140      	bne.n	8013b60 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	330c      	adds	r3, #12
 8013ae8:	7812      	ldrb	r2, [r2, #0]
 8013aea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013af0:	1c5a      	adds	r2, r3, #1
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	3b01      	subs	r3, #1
 8013afe:	b29a      	uxth	r2, r3
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013b04:	e02c      	b.n	8013b60 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	f003 0302 	and.w	r3, r3, #2
 8013b10:	2b02      	cmp	r3, #2
 8013b12:	d113      	bne.n	8013b3c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	330c      	adds	r3, #12
 8013b1e:	7812      	ldrb	r2, [r2, #0]
 8013b20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b26:	1c5a      	adds	r2, r3, #1
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b30:	b29b      	uxth	r3, r3
 8013b32:	3b01      	subs	r3, #1
 8013b34:	b29a      	uxth	r2, r3
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	86da      	strh	r2, [r3, #54]	; 0x36
 8013b3a:	e011      	b.n	8013b60 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013b3c:	f7fd fb20 	bl	8011180 <HAL_GetTick>
 8013b40:	4602      	mov	r2, r0
 8013b42:	69bb      	ldr	r3, [r7, #24]
 8013b44:	1ad3      	subs	r3, r2, r3
 8013b46:	683a      	ldr	r2, [r7, #0]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d803      	bhi.n	8013b54 <HAL_SPI_Transmit+0x1f4>
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b52:	d102      	bne.n	8013b5a <HAL_SPI_Transmit+0x1fa>
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d102      	bne.n	8013b60 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8013b5a:	2303      	movs	r3, #3
 8013b5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013b5e:	e026      	b.n	8013bae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d1cd      	bne.n	8013b06 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013b6a:	69ba      	ldr	r2, [r7, #24]
 8013b6c:	6839      	ldr	r1, [r7, #0]
 8013b6e:	68f8      	ldr	r0, [r7, #12]
 8013b70:	f000 fba4 	bl	80142bc <SPI_EndRxTxTransaction>
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d002      	beq.n	8013b80 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2220      	movs	r2, #32
 8013b7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	689b      	ldr	r3, [r3, #8]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d10a      	bne.n	8013b9e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013b88:	2300      	movs	r3, #0
 8013b8a:	613b      	str	r3, [r7, #16]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	68db      	ldr	r3, [r3, #12]
 8013b92:	613b      	str	r3, [r7, #16]
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	689b      	ldr	r3, [r3, #8]
 8013b9a:	613b      	str	r3, [r7, #16]
 8013b9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d002      	beq.n	8013bac <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	77fb      	strb	r3, [r7, #31]
 8013baa:	e000      	b.n	8013bae <HAL_SPI_Transmit+0x24e>
  }

error:
 8013bac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013bbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3720      	adds	r7, #32
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}

08013bc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b088      	sub	sp, #32
 8013bcc:	af02      	add	r7, sp, #8
 8013bce:	60f8      	str	r0, [r7, #12]
 8013bd0:	60b9      	str	r1, [r7, #8]
 8013bd2:	603b      	str	r3, [r7, #0]
 8013bd4:	4613      	mov	r3, r2
 8013bd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	685b      	ldr	r3, [r3, #4]
 8013be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013be4:	d112      	bne.n	8013c0c <HAL_SPI_Receive+0x44>
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	689b      	ldr	r3, [r3, #8]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d10e      	bne.n	8013c0c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2204      	movs	r2, #4
 8013bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013bf6:	88fa      	ldrh	r2, [r7, #6]
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	4613      	mov	r3, r2
 8013bfe:	68ba      	ldr	r2, [r7, #8]
 8013c00:	68b9      	ldr	r1, [r7, #8]
 8013c02:	68f8      	ldr	r0, [r7, #12]
 8013c04:	f000 f8e9 	bl	8013dda <HAL_SPI_TransmitReceive>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	e0e2      	b.n	8013dd2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013c12:	2b01      	cmp	r3, #1
 8013c14:	d101      	bne.n	8013c1a <HAL_SPI_Receive+0x52>
 8013c16:	2302      	movs	r3, #2
 8013c18:	e0db      	b.n	8013dd2 <HAL_SPI_Receive+0x20a>
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013c22:	f7fd faad 	bl	8011180 <HAL_GetTick>
 8013c26:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d002      	beq.n	8013c3a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013c34:	2302      	movs	r3, #2
 8013c36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013c38:	e0c2      	b.n	8013dc0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d002      	beq.n	8013c46 <HAL_SPI_Receive+0x7e>
 8013c40:	88fb      	ldrh	r3, [r7, #6]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d102      	bne.n	8013c4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013c46:	2301      	movs	r3, #1
 8013c48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013c4a:	e0b9      	b.n	8013dc0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	2204      	movs	r2, #4
 8013c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	2200      	movs	r2, #0
 8013c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	68ba      	ldr	r2, [r7, #8]
 8013c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	88fa      	ldrh	r2, [r7, #6]
 8013c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	88fa      	ldrh	r2, [r7, #6]
 8013c6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	2200      	movs	r2, #0
 8013c76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2200      	movs	r2, #0
 8013c82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	2200      	movs	r2, #0
 8013c88:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	689b      	ldr	r3, [r3, #8]
 8013c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c92:	d107      	bne.n	8013ca4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013ca2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cae:	2b40      	cmp	r3, #64	; 0x40
 8013cb0:	d007      	beq.n	8013cc2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013cc0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d162      	bne.n	8013d90 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013cca:	e02e      	b.n	8013d2a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	689b      	ldr	r3, [r3, #8]
 8013cd2:	f003 0301 	and.w	r3, r3, #1
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d115      	bne.n	8013d06 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f103 020c 	add.w	r2, r3, #12
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ce6:	7812      	ldrb	r2, [r2, #0]
 8013ce8:	b2d2      	uxtb	r2, r2
 8013cea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cf0:	1c5a      	adds	r2, r3, #1
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013cfa:	b29b      	uxth	r3, r3
 8013cfc:	3b01      	subs	r3, #1
 8013cfe:	b29a      	uxth	r2, r3
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013d04:	e011      	b.n	8013d2a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013d06:	f7fd fa3b 	bl	8011180 <HAL_GetTick>
 8013d0a:	4602      	mov	r2, r0
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	1ad3      	subs	r3, r2, r3
 8013d10:	683a      	ldr	r2, [r7, #0]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d803      	bhi.n	8013d1e <HAL_SPI_Receive+0x156>
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d1c:	d102      	bne.n	8013d24 <HAL_SPI_Receive+0x15c>
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d102      	bne.n	8013d2a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8013d24:	2303      	movs	r3, #3
 8013d26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013d28:	e04a      	b.n	8013dc0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d1cb      	bne.n	8013ccc <HAL_SPI_Receive+0x104>
 8013d34:	e031      	b.n	8013d9a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	689b      	ldr	r3, [r3, #8]
 8013d3c:	f003 0301 	and.w	r3, r3, #1
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d113      	bne.n	8013d6c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	68da      	ldr	r2, [r3, #12]
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d4e:	b292      	uxth	r2, r2
 8013d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d56:	1c9a      	adds	r2, r3, #2
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	3b01      	subs	r3, #1
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013d6a:	e011      	b.n	8013d90 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013d6c:	f7fd fa08 	bl	8011180 <HAL_GetTick>
 8013d70:	4602      	mov	r2, r0
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	1ad3      	subs	r3, r2, r3
 8013d76:	683a      	ldr	r2, [r7, #0]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d803      	bhi.n	8013d84 <HAL_SPI_Receive+0x1bc>
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d82:	d102      	bne.n	8013d8a <HAL_SPI_Receive+0x1c2>
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d102      	bne.n	8013d90 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8013d8a:	2303      	movs	r3, #3
 8013d8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013d8e:	e017      	b.n	8013dc0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d1cd      	bne.n	8013d36 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013d9a:	693a      	ldr	r2, [r7, #16]
 8013d9c:	6839      	ldr	r1, [r7, #0]
 8013d9e:	68f8      	ldr	r0, [r7, #12]
 8013da0:	f000 fa27 	bl	80141f2 <SPI_EndRxTransaction>
 8013da4:	4603      	mov	r3, r0
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d002      	beq.n	8013db0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2220      	movs	r2, #32
 8013dae:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d002      	beq.n	8013dbe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8013db8:	2301      	movs	r3, #1
 8013dba:	75fb      	strb	r3, [r7, #23]
 8013dbc:	e000      	b.n	8013dc0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8013dbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3718      	adds	r7, #24
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b08c      	sub	sp, #48	; 0x30
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	60f8      	str	r0, [r7, #12]
 8013de2:	60b9      	str	r1, [r7, #8]
 8013de4:	607a      	str	r2, [r7, #4]
 8013de6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013de8:	2301      	movs	r3, #1
 8013dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013dec:	2300      	movs	r3, #0
 8013dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d101      	bne.n	8013e00 <HAL_SPI_TransmitReceive+0x26>
 8013dfc:	2302      	movs	r3, #2
 8013dfe:	e18a      	b.n	8014116 <HAL_SPI_TransmitReceive+0x33c>
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2201      	movs	r2, #1
 8013e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013e08:	f7fd f9ba 	bl	8011180 <HAL_GetTick>
 8013e0c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013e1e:	887b      	ldrh	r3, [r7, #2]
 8013e20:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d00f      	beq.n	8013e4a <HAL_SPI_TransmitReceive+0x70>
 8013e2a:	69fb      	ldr	r3, [r7, #28]
 8013e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e30:	d107      	bne.n	8013e42 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	689b      	ldr	r3, [r3, #8]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d103      	bne.n	8013e42 <HAL_SPI_TransmitReceive+0x68>
 8013e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e3e:	2b04      	cmp	r3, #4
 8013e40:	d003      	beq.n	8013e4a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013e42:	2302      	movs	r3, #2
 8013e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013e48:	e15b      	b.n	8014102 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d005      	beq.n	8013e5c <HAL_SPI_TransmitReceive+0x82>
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d002      	beq.n	8013e5c <HAL_SPI_TransmitReceive+0x82>
 8013e56:	887b      	ldrh	r3, [r7, #2]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d103      	bne.n	8013e64 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013e62:	e14e      	b.n	8014102 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e6a:	b2db      	uxtb	r3, r3
 8013e6c:	2b04      	cmp	r3, #4
 8013e6e:	d003      	beq.n	8013e78 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2205      	movs	r2, #5
 8013e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	887a      	ldrh	r2, [r7, #2]
 8013e88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	887a      	ldrh	r2, [r7, #2]
 8013e8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	68ba      	ldr	r2, [r7, #8]
 8013e94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	887a      	ldrh	r2, [r7, #2]
 8013e9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	887a      	ldrh	r2, [r7, #2]
 8013ea0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013eb8:	2b40      	cmp	r3, #64	; 0x40
 8013eba:	d007      	beq.n	8013ecc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ed4:	d178      	bne.n	8013fc8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d002      	beq.n	8013ee4 <HAL_SPI_TransmitReceive+0x10a>
 8013ede:	8b7b      	ldrh	r3, [r7, #26]
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	d166      	bne.n	8013fb2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ee8:	881a      	ldrh	r2, [r3, #0]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ef4:	1c9a      	adds	r2, r3, #2
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	3b01      	subs	r3, #1
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013f08:	e053      	b.n	8013fb2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	689b      	ldr	r3, [r3, #8]
 8013f10:	f003 0302 	and.w	r3, r3, #2
 8013f14:	2b02      	cmp	r3, #2
 8013f16:	d11b      	bne.n	8013f50 <HAL_SPI_TransmitReceive+0x176>
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d016      	beq.n	8013f50 <HAL_SPI_TransmitReceive+0x176>
 8013f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d113      	bne.n	8013f50 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f2c:	881a      	ldrh	r2, [r3, #0]
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f38:	1c9a      	adds	r2, r3, #2
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	3b01      	subs	r3, #1
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	689b      	ldr	r3, [r3, #8]
 8013f56:	f003 0301 	and.w	r3, r3, #1
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d119      	bne.n	8013f92 <HAL_SPI_TransmitReceive+0x1b8>
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d014      	beq.n	8013f92 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	68da      	ldr	r2, [r3, #12]
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f72:	b292      	uxth	r2, r2
 8013f74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f7a:	1c9a      	adds	r2, r3, #2
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	3b01      	subs	r3, #1
 8013f88:	b29a      	uxth	r2, r3
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013f8e:	2301      	movs	r3, #1
 8013f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013f92:	f7fd f8f5 	bl	8011180 <HAL_GetTick>
 8013f96:	4602      	mov	r2, r0
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	1ad3      	subs	r3, r2, r3
 8013f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d807      	bhi.n	8013fb2 <HAL_SPI_TransmitReceive+0x1d8>
 8013fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fa8:	d003      	beq.n	8013fb2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013faa:	2303      	movs	r3, #3
 8013fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013fb0:	e0a7      	b.n	8014102 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1a6      	bne.n	8013f0a <HAL_SPI_TransmitReceive+0x130>
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d1a1      	bne.n	8013f0a <HAL_SPI_TransmitReceive+0x130>
 8013fc6:	e07c      	b.n	80140c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	685b      	ldr	r3, [r3, #4]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d002      	beq.n	8013fd6 <HAL_SPI_TransmitReceive+0x1fc>
 8013fd0:	8b7b      	ldrh	r3, [r7, #26]
 8013fd2:	2b01      	cmp	r3, #1
 8013fd4:	d16b      	bne.n	80140ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	330c      	adds	r3, #12
 8013fe0:	7812      	ldrb	r2, [r2, #0]
 8013fe2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fe8:	1c5a      	adds	r2, r3, #1
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	3b01      	subs	r3, #1
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013ffc:	e057      	b.n	80140ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	f003 0302 	and.w	r3, r3, #2
 8014008:	2b02      	cmp	r3, #2
 801400a:	d11c      	bne.n	8014046 <HAL_SPI_TransmitReceive+0x26c>
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014010:	b29b      	uxth	r3, r3
 8014012:	2b00      	cmp	r3, #0
 8014014:	d017      	beq.n	8014046 <HAL_SPI_TransmitReceive+0x26c>
 8014016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014018:	2b01      	cmp	r3, #1
 801401a:	d114      	bne.n	8014046 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	330c      	adds	r3, #12
 8014026:	7812      	ldrb	r2, [r2, #0]
 8014028:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801402e:	1c5a      	adds	r2, r3, #1
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014038:	b29b      	uxth	r3, r3
 801403a:	3b01      	subs	r3, #1
 801403c:	b29a      	uxth	r2, r3
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014042:	2300      	movs	r3, #0
 8014044:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	689b      	ldr	r3, [r3, #8]
 801404c:	f003 0301 	and.w	r3, r3, #1
 8014050:	2b01      	cmp	r3, #1
 8014052:	d119      	bne.n	8014088 <HAL_SPI_TransmitReceive+0x2ae>
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014058:	b29b      	uxth	r3, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	d014      	beq.n	8014088 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	68da      	ldr	r2, [r3, #12]
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014068:	b2d2      	uxtb	r2, r2
 801406a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014070:	1c5a      	adds	r2, r3, #1
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801407a:	b29b      	uxth	r3, r3
 801407c:	3b01      	subs	r3, #1
 801407e:	b29a      	uxth	r2, r3
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014084:	2301      	movs	r3, #1
 8014086:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014088:	f7fd f87a 	bl	8011180 <HAL_GetTick>
 801408c:	4602      	mov	r2, r0
 801408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014090:	1ad3      	subs	r3, r2, r3
 8014092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014094:	429a      	cmp	r2, r3
 8014096:	d803      	bhi.n	80140a0 <HAL_SPI_TransmitReceive+0x2c6>
 8014098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801409e:	d102      	bne.n	80140a6 <HAL_SPI_TransmitReceive+0x2cc>
 80140a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d103      	bne.n	80140ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80140a6:	2303      	movs	r3, #3
 80140a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80140ac:	e029      	b.n	8014102 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d1a2      	bne.n	8013ffe <HAL_SPI_TransmitReceive+0x224>
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140bc:	b29b      	uxth	r3, r3
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d19d      	bne.n	8013ffe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80140c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140c6:	68f8      	ldr	r0, [r7, #12]
 80140c8:	f000 f8f8 	bl	80142bc <SPI_EndRxTxTransaction>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d006      	beq.n	80140e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80140d2:	2301      	movs	r3, #1
 80140d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	2220      	movs	r2, #32
 80140dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80140de:	e010      	b.n	8014102 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	689b      	ldr	r3, [r3, #8]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d10b      	bne.n	8014100 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80140e8:	2300      	movs	r3, #0
 80140ea:	617b      	str	r3, [r7, #20]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	68db      	ldr	r3, [r3, #12]
 80140f2:	617b      	str	r3, [r7, #20]
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	689b      	ldr	r3, [r3, #8]
 80140fa:	617b      	str	r3, [r7, #20]
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	e000      	b.n	8014102 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8014100:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	2201      	movs	r2, #1
 8014106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2200      	movs	r2, #0
 801410e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014112:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014116:	4618      	mov	r0, r3
 8014118:	3730      	adds	r7, #48	; 0x30
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}

0801411e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801411e:	b580      	push	{r7, lr}
 8014120:	b084      	sub	sp, #16
 8014122:	af00      	add	r7, sp, #0
 8014124:	60f8      	str	r0, [r7, #12]
 8014126:	60b9      	str	r1, [r7, #8]
 8014128:	603b      	str	r3, [r7, #0]
 801412a:	4613      	mov	r3, r2
 801412c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801412e:	e04c      	b.n	80141ca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014136:	d048      	beq.n	80141ca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8014138:	f7fd f822 	bl	8011180 <HAL_GetTick>
 801413c:	4602      	mov	r2, r0
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	1ad3      	subs	r3, r2, r3
 8014142:	683a      	ldr	r2, [r7, #0]
 8014144:	429a      	cmp	r2, r3
 8014146:	d902      	bls.n	801414e <SPI_WaitFlagStateUntilTimeout+0x30>
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d13d      	bne.n	80141ca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	685a      	ldr	r2, [r3, #4]
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801415c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014166:	d111      	bne.n	801418c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014170:	d004      	beq.n	801417c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	689b      	ldr	r3, [r3, #8]
 8014176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801417a:	d107      	bne.n	801418c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801418a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014194:	d10f      	bne.n	80141b6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	681a      	ldr	r2, [r3, #0]
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80141a4:	601a      	str	r2, [r3, #0]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80141b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2201      	movs	r2, #1
 80141ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2200      	movs	r2, #0
 80141c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80141c6:	2303      	movs	r3, #3
 80141c8:	e00f      	b.n	80141ea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	689a      	ldr	r2, [r3, #8]
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	4013      	ands	r3, r2
 80141d4:	68ba      	ldr	r2, [r7, #8]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	bf0c      	ite	eq
 80141da:	2301      	moveq	r3, #1
 80141dc:	2300      	movne	r3, #0
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	461a      	mov	r2, r3
 80141e2:	79fb      	ldrb	r3, [r7, #7]
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d1a3      	bne.n	8014130 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80141e8:	2300      	movs	r3, #0
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3710      	adds	r7, #16
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}

080141f2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80141f2:	b580      	push	{r7, lr}
 80141f4:	b086      	sub	sp, #24
 80141f6:	af02      	add	r7, sp, #8
 80141f8:	60f8      	str	r0, [r7, #12]
 80141fa:	60b9      	str	r1, [r7, #8]
 80141fc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	685b      	ldr	r3, [r3, #4]
 8014202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014206:	d111      	bne.n	801422c <SPI_EndRxTransaction+0x3a>
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	689b      	ldr	r3, [r3, #8]
 801420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014210:	d004      	beq.n	801421c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	689b      	ldr	r3, [r3, #8]
 8014216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801421a:	d107      	bne.n	801422c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801422a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014234:	d12a      	bne.n	801428c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	689b      	ldr	r3, [r3, #8]
 801423a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801423e:	d012      	beq.n	8014266 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	9300      	str	r3, [sp, #0]
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	2200      	movs	r2, #0
 8014248:	2180      	movs	r1, #128	; 0x80
 801424a:	68f8      	ldr	r0, [r7, #12]
 801424c:	f7ff ff67 	bl	801411e <SPI_WaitFlagStateUntilTimeout>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d02d      	beq.n	80142b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801425a:	f043 0220 	orr.w	r2, r3, #32
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014262:	2303      	movs	r3, #3
 8014264:	e026      	b.n	80142b4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	9300      	str	r3, [sp, #0]
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	2200      	movs	r2, #0
 801426e:	2101      	movs	r1, #1
 8014270:	68f8      	ldr	r0, [r7, #12]
 8014272:	f7ff ff54 	bl	801411e <SPI_WaitFlagStateUntilTimeout>
 8014276:	4603      	mov	r3, r0
 8014278:	2b00      	cmp	r3, #0
 801427a:	d01a      	beq.n	80142b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014280:	f043 0220 	orr.w	r2, r3, #32
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014288:	2303      	movs	r3, #3
 801428a:	e013      	b.n	80142b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	9300      	str	r3, [sp, #0]
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	2200      	movs	r2, #0
 8014294:	2101      	movs	r1, #1
 8014296:	68f8      	ldr	r0, [r7, #12]
 8014298:	f7ff ff41 	bl	801411e <SPI_WaitFlagStateUntilTimeout>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d007      	beq.n	80142b2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142a6:	f043 0220 	orr.w	r2, r3, #32
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80142ae:	2303      	movs	r3, #3
 80142b0:	e000      	b.n	80142b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80142b2:	2300      	movs	r3, #0
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3710      	adds	r7, #16
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}

080142bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b088      	sub	sp, #32
 80142c0:	af02      	add	r7, sp, #8
 80142c2:	60f8      	str	r0, [r7, #12]
 80142c4:	60b9      	str	r1, [r7, #8]
 80142c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80142c8:	4b1b      	ldr	r3, [pc, #108]	; (8014338 <SPI_EndRxTxTransaction+0x7c>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	4a1b      	ldr	r2, [pc, #108]	; (801433c <SPI_EndRxTxTransaction+0x80>)
 80142ce:	fba2 2303 	umull	r2, r3, r2, r3
 80142d2:	0d5b      	lsrs	r3, r3, #21
 80142d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80142d8:	fb02 f303 	mul.w	r3, r2, r3
 80142dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80142e6:	d112      	bne.n	801430e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	9300      	str	r3, [sp, #0]
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	2200      	movs	r2, #0
 80142f0:	2180      	movs	r1, #128	; 0x80
 80142f2:	68f8      	ldr	r0, [r7, #12]
 80142f4:	f7ff ff13 	bl	801411e <SPI_WaitFlagStateUntilTimeout>
 80142f8:	4603      	mov	r3, r0
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d016      	beq.n	801432c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014302:	f043 0220 	orr.w	r2, r3, #32
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801430a:	2303      	movs	r3, #3
 801430c:	e00f      	b.n	801432e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d00a      	beq.n	801432a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	3b01      	subs	r3, #1
 8014318:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	689b      	ldr	r3, [r3, #8]
 8014320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014324:	2b80      	cmp	r3, #128	; 0x80
 8014326:	d0f2      	beq.n	801430e <SPI_EndRxTxTransaction+0x52>
 8014328:	e000      	b.n	801432c <SPI_EndRxTxTransaction+0x70>
        break;
 801432a:	bf00      	nop
  }

  return HAL_OK;
 801432c:	2300      	movs	r3, #0
}
 801432e:	4618      	mov	r0, r3
 8014330:	3718      	adds	r7, #24
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	20000080 	.word	0x20000080
 801433c:	165e9f81 	.word	0x165e9f81

08014340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d101      	bne.n	8014352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801434e:	2301      	movs	r3, #1
 8014350:	e01d      	b.n	801438e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014358:	b2db      	uxtb	r3, r3
 801435a:	2b00      	cmp	r3, #0
 801435c:	d106      	bne.n	801436c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2200      	movs	r2, #0
 8014362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f7fc fb14 	bl	8010994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	2202      	movs	r2, #2
 8014370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	3304      	adds	r3, #4
 801437c:	4619      	mov	r1, r3
 801437e:	4610      	mov	r0, r2
 8014380:	f000 fdb6 	bl	8014ef0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2201      	movs	r2, #1
 8014388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801438c:	2300      	movs	r3, #0
}
 801438e:	4618      	mov	r0, r3
 8014390:	3708      	adds	r7, #8
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}

08014396 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014396:	b480      	push	{r7}
 8014398:	b085      	sub	sp, #20
 801439a:	af00      	add	r7, sp, #0
 801439c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	68da      	ldr	r2, [r3, #12]
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f042 0201 	orr.w	r2, r2, #1
 80143ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	689b      	ldr	r3, [r3, #8]
 80143b4:	f003 0307 	and.w	r3, r3, #7
 80143b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2b06      	cmp	r3, #6
 80143be:	d007      	beq.n	80143d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	681a      	ldr	r2, [r3, #0]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	f042 0201 	orr.w	r2, r2, #1
 80143ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3714      	adds	r7, #20
 80143d6:	46bd      	mov	sp, r7
 80143d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143dc:	4770      	bx	lr

080143de <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80143de:	b480      	push	{r7}
 80143e0:	b083      	sub	sp, #12
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	68da      	ldr	r2, [r3, #12]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	f022 0201 	bic.w	r2, r2, #1
 80143f4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	6a1a      	ldr	r2, [r3, #32]
 80143fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8014400:	4013      	ands	r3, r2
 8014402:	2b00      	cmp	r3, #0
 8014404:	d10f      	bne.n	8014426 <HAL_TIM_Base_Stop_IT+0x48>
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	6a1a      	ldr	r2, [r3, #32]
 801440c:	f240 4344 	movw	r3, #1092	; 0x444
 8014410:	4013      	ands	r3, r2
 8014412:	2b00      	cmp	r3, #0
 8014414:	d107      	bne.n	8014426 <HAL_TIM_Base_Stop_IT+0x48>
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	f022 0201 	bic.w	r2, r2, #1
 8014424:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014426:	2300      	movs	r3, #0
}
 8014428:	4618      	mov	r0, r3
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d101      	bne.n	8014446 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8014442:	2301      	movs	r3, #1
 8014444:	e01d      	b.n	8014482 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801444c:	b2db      	uxtb	r3, r3
 801444e:	2b00      	cmp	r3, #0
 8014450:	d106      	bne.n	8014460 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2200      	movs	r2, #0
 8014456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f000 f815 	bl	801448a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2202      	movs	r2, #2
 8014464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	3304      	adds	r3, #4
 8014470:	4619      	mov	r1, r3
 8014472:	4610      	mov	r0, r2
 8014474:	f000 fd3c 	bl	8014ef0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2201      	movs	r2, #1
 801447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014480:	2300      	movs	r3, #0
}
 8014482:	4618      	mov	r0, r3
 8014484:	3708      	adds	r7, #8
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}

0801448a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 801448a:	b480      	push	{r7}
 801448c:	b083      	sub	sp, #12
 801448e:	af00      	add	r7, sp, #0
 8014490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8014492:	bf00      	nop
 8014494:	370c      	adds	r7, #12
 8014496:	46bd      	mov	sp, r7
 8014498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449c:	4770      	bx	lr
	...

080144a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	2b0c      	cmp	r3, #12
 80144ae:	d841      	bhi.n	8014534 <HAL_TIM_OC_Start_IT+0x94>
 80144b0:	a201      	add	r2, pc, #4	; (adr r2, 80144b8 <HAL_TIM_OC_Start_IT+0x18>)
 80144b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144b6:	bf00      	nop
 80144b8:	080144ed 	.word	0x080144ed
 80144bc:	08014535 	.word	0x08014535
 80144c0:	08014535 	.word	0x08014535
 80144c4:	08014535 	.word	0x08014535
 80144c8:	080144ff 	.word	0x080144ff
 80144cc:	08014535 	.word	0x08014535
 80144d0:	08014535 	.word	0x08014535
 80144d4:	08014535 	.word	0x08014535
 80144d8:	08014511 	.word	0x08014511
 80144dc:	08014535 	.word	0x08014535
 80144e0:	08014535 	.word	0x08014535
 80144e4:	08014535 	.word	0x08014535
 80144e8:	08014523 	.word	0x08014523
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	68da      	ldr	r2, [r3, #12]
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	f042 0202 	orr.w	r2, r2, #2
 80144fa:	60da      	str	r2, [r3, #12]
      break;
 80144fc:	e01b      	b.n	8014536 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	68da      	ldr	r2, [r3, #12]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f042 0204 	orr.w	r2, r2, #4
 801450c:	60da      	str	r2, [r3, #12]
      break;
 801450e:	e012      	b.n	8014536 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	68da      	ldr	r2, [r3, #12]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	f042 0208 	orr.w	r2, r2, #8
 801451e:	60da      	str	r2, [r3, #12]
      break;
 8014520:	e009      	b.n	8014536 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	68da      	ldr	r2, [r3, #12]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	f042 0210 	orr.w	r2, r2, #16
 8014530:	60da      	str	r2, [r3, #12]
      break;
 8014532:	e000      	b.n	8014536 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8014534:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2201      	movs	r2, #1
 801453c:	6839      	ldr	r1, [r7, #0]
 801453e:	4618      	mov	r0, r3
 8014540:	f000 ffc0 	bl	80154c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	4a15      	ldr	r2, [pc, #84]	; (80145a0 <HAL_TIM_OC_Start_IT+0x100>)
 801454a:	4293      	cmp	r3, r2
 801454c:	d004      	beq.n	8014558 <HAL_TIM_OC_Start_IT+0xb8>
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	4a14      	ldr	r2, [pc, #80]	; (80145a4 <HAL_TIM_OC_Start_IT+0x104>)
 8014554:	4293      	cmp	r3, r2
 8014556:	d101      	bne.n	801455c <HAL_TIM_OC_Start_IT+0xbc>
 8014558:	2301      	movs	r3, #1
 801455a:	e000      	b.n	801455e <HAL_TIM_OC_Start_IT+0xbe>
 801455c:	2300      	movs	r3, #0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d007      	beq.n	8014572 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014570:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	689b      	ldr	r3, [r3, #8]
 8014578:	f003 0307 	and.w	r3, r3, #7
 801457c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2b06      	cmp	r3, #6
 8014582:	d007      	beq.n	8014594 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	681a      	ldr	r2, [r3, #0]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	f042 0201 	orr.w	r2, r2, #1
 8014592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014594:	2300      	movs	r3, #0
}
 8014596:	4618      	mov	r0, r3
 8014598:	3710      	adds	r7, #16
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop
 80145a0:	40010000 	.word	0x40010000
 80145a4:	40010400 	.word	0x40010400

080145a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d101      	bne.n	80145ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80145b6:	2301      	movs	r3, #1
 80145b8:	e01d      	b.n	80145f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80145c0:	b2db      	uxtb	r3, r3
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d106      	bne.n	80145d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2200      	movs	r2, #0
 80145ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f000 f815 	bl	80145fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2202      	movs	r2, #2
 80145d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	3304      	adds	r3, #4
 80145e4:	4619      	mov	r1, r3
 80145e6:	4610      	mov	r0, r2
 80145e8:	f000 fc82 	bl	8014ef0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2201      	movs	r2, #1
 80145f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80145f4:	2300      	movs	r3, #0
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}

080145fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80145fe:	b480      	push	{r7}
 8014600:	b083      	sub	sp, #12
 8014602:	af00      	add	r7, sp, #0
 8014604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014606:	bf00      	nop
 8014608:	370c      	adds	r7, #12
 801460a:	46bd      	mov	sp, r7
 801460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014610:	4770      	bx	lr
	...

08014614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b084      	sub	sp, #16
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	2201      	movs	r2, #1
 8014624:	6839      	ldr	r1, [r7, #0]
 8014626:	4618      	mov	r0, r3
 8014628:	f000 ff4c 	bl	80154c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	4a15      	ldr	r2, [pc, #84]	; (8014688 <HAL_TIM_PWM_Start+0x74>)
 8014632:	4293      	cmp	r3, r2
 8014634:	d004      	beq.n	8014640 <HAL_TIM_PWM_Start+0x2c>
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	4a14      	ldr	r2, [pc, #80]	; (801468c <HAL_TIM_PWM_Start+0x78>)
 801463c:	4293      	cmp	r3, r2
 801463e:	d101      	bne.n	8014644 <HAL_TIM_PWM_Start+0x30>
 8014640:	2301      	movs	r3, #1
 8014642:	e000      	b.n	8014646 <HAL_TIM_PWM_Start+0x32>
 8014644:	2300      	movs	r3, #0
 8014646:	2b00      	cmp	r3, #0
 8014648:	d007      	beq.n	801465a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014658:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	689b      	ldr	r3, [r3, #8]
 8014660:	f003 0307 	and.w	r3, r3, #7
 8014664:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	2b06      	cmp	r3, #6
 801466a:	d007      	beq.n	801467c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	681a      	ldr	r2, [r3, #0]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	f042 0201 	orr.w	r2, r2, #1
 801467a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801467c:	2300      	movs	r3, #0
}
 801467e:	4618      	mov	r0, r3
 8014680:	3710      	adds	r7, #16
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
 8014686:	bf00      	nop
 8014688:	40010000 	.word	0x40010000
 801468c:	40010400 	.word	0x40010400

08014690 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2200      	movs	r2, #0
 80146a0:	6839      	ldr	r1, [r7, #0]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f000 ff0e 	bl	80154c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	4a22      	ldr	r2, [pc, #136]	; (8014738 <HAL_TIM_PWM_Stop+0xa8>)
 80146ae:	4293      	cmp	r3, r2
 80146b0:	d004      	beq.n	80146bc <HAL_TIM_PWM_Stop+0x2c>
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	4a21      	ldr	r2, [pc, #132]	; (801473c <HAL_TIM_PWM_Stop+0xac>)
 80146b8:	4293      	cmp	r3, r2
 80146ba:	d101      	bne.n	80146c0 <HAL_TIM_PWM_Stop+0x30>
 80146bc:	2301      	movs	r3, #1
 80146be:	e000      	b.n	80146c2 <HAL_TIM_PWM_Stop+0x32>
 80146c0:	2300      	movs	r3, #0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d017      	beq.n	80146f6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	6a1a      	ldr	r2, [r3, #32]
 80146cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80146d0:	4013      	ands	r3, r2
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d10f      	bne.n	80146f6 <HAL_TIM_PWM_Stop+0x66>
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	6a1a      	ldr	r2, [r3, #32]
 80146dc:	f240 4344 	movw	r3, #1092	; 0x444
 80146e0:	4013      	ands	r3, r2
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d107      	bne.n	80146f6 <HAL_TIM_PWM_Stop+0x66>
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80146f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	6a1a      	ldr	r2, [r3, #32]
 80146fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8014700:	4013      	ands	r3, r2
 8014702:	2b00      	cmp	r3, #0
 8014704:	d10f      	bne.n	8014726 <HAL_TIM_PWM_Stop+0x96>
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	6a1a      	ldr	r2, [r3, #32]
 801470c:	f240 4344 	movw	r3, #1092	; 0x444
 8014710:	4013      	ands	r3, r2
 8014712:	2b00      	cmp	r3, #0
 8014714:	d107      	bne.n	8014726 <HAL_TIM_PWM_Stop+0x96>
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	f022 0201 	bic.w	r2, r2, #1
 8014724:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2201      	movs	r2, #1
 801472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801472e:	2300      	movs	r3, #0
}
 8014730:	4618      	mov	r0, r3
 8014732:	3708      	adds	r7, #8
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}
 8014738:	40010000 	.word	0x40010000
 801473c:	40010400 	.word	0x40010400

08014740 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b086      	sub	sp, #24
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d101      	bne.n	8014754 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8014750:	2301      	movs	r3, #1
 8014752:	e083      	b.n	801485c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801475a:	b2db      	uxtb	r3, r3
 801475c:	2b00      	cmp	r3, #0
 801475e:	d106      	bne.n	801476e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f7fc f9a3 	bl	8010ab4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2202      	movs	r2, #2
 8014772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	689b      	ldr	r3, [r3, #8]
 801477c:	687a      	ldr	r2, [r7, #4]
 801477e:	6812      	ldr	r2, [r2, #0]
 8014780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014784:	f023 0307 	bic.w	r3, r3, #7
 8014788:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	3304      	adds	r3, #4
 8014792:	4619      	mov	r1, r3
 8014794:	4610      	mov	r0, r2
 8014796:	f000 fbab 	bl	8014ef0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	689b      	ldr	r3, [r3, #8]
 80147a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	699b      	ldr	r3, [r3, #24]
 80147a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	6a1b      	ldr	r3, [r3, #32]
 80147b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	697a      	ldr	r2, [r7, #20]
 80147b8:	4313      	orrs	r3, r2
 80147ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80147c2:	f023 0303 	bic.w	r3, r3, #3
 80147c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	689a      	ldr	r2, [r3, #8]
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	699b      	ldr	r3, [r3, #24]
 80147d0:	021b      	lsls	r3, r3, #8
 80147d2:	4313      	orrs	r3, r2
 80147d4:	693a      	ldr	r2, [r7, #16]
 80147d6:	4313      	orrs	r3, r2
 80147d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80147e0:	f023 030c 	bic.w	r3, r3, #12
 80147e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80147ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80147f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	68da      	ldr	r2, [r3, #12]
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	69db      	ldr	r3, [r3, #28]
 80147fa:	021b      	lsls	r3, r3, #8
 80147fc:	4313      	orrs	r3, r2
 80147fe:	693a      	ldr	r2, [r7, #16]
 8014800:	4313      	orrs	r3, r2
 8014802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	691b      	ldr	r3, [r3, #16]
 8014808:	011a      	lsls	r2, r3, #4
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	6a1b      	ldr	r3, [r3, #32]
 801480e:	031b      	lsls	r3, r3, #12
 8014810:	4313      	orrs	r3, r2
 8014812:	693a      	ldr	r2, [r7, #16]
 8014814:	4313      	orrs	r3, r2
 8014816:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801481e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8014826:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	685a      	ldr	r2, [r3, #4]
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	695b      	ldr	r3, [r3, #20]
 8014830:	011b      	lsls	r3, r3, #4
 8014832:	4313      	orrs	r3, r2
 8014834:	68fa      	ldr	r2, [r7, #12]
 8014836:	4313      	orrs	r3, r2
 8014838:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	697a      	ldr	r2, [r7, #20]
 8014840:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	693a      	ldr	r2, [r7, #16]
 8014848:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2201      	movs	r2, #1
 8014856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801485a:	2300      	movs	r3, #0
}
 801485c:	4618      	mov	r0, r3
 801485e:	3718      	adds	r7, #24
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b082      	sub	sp, #8
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
 801486c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d002      	beq.n	801487a <HAL_TIM_Encoder_Start+0x16>
 8014874:	2b04      	cmp	r3, #4
 8014876:	d008      	beq.n	801488a <HAL_TIM_Encoder_Start+0x26>
 8014878:	e00f      	b.n	801489a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	2201      	movs	r2, #1
 8014880:	2100      	movs	r1, #0
 8014882:	4618      	mov	r0, r3
 8014884:	f000 fe1e 	bl	80154c4 <TIM_CCxChannelCmd>
      break;
 8014888:	e016      	b.n	80148b8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2201      	movs	r2, #1
 8014890:	2104      	movs	r1, #4
 8014892:	4618      	mov	r0, r3
 8014894:	f000 fe16 	bl	80154c4 <TIM_CCxChannelCmd>
      break;
 8014898:	e00e      	b.n	80148b8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	2201      	movs	r2, #1
 80148a0:	2100      	movs	r1, #0
 80148a2:	4618      	mov	r0, r3
 80148a4:	f000 fe0e 	bl	80154c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	2201      	movs	r2, #1
 80148ae:	2104      	movs	r1, #4
 80148b0:	4618      	mov	r0, r3
 80148b2:	f000 fe07 	bl	80154c4 <TIM_CCxChannelCmd>
      break;
 80148b6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	f042 0201 	orr.w	r2, r2, #1
 80148c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80148c8:	2300      	movs	r3, #0
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3708      	adds	r7, #8
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}

080148d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80148d2:	b580      	push	{r7, lr}
 80148d4:	b082      	sub	sp, #8
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	691b      	ldr	r3, [r3, #16]
 80148e0:	f003 0302 	and.w	r3, r3, #2
 80148e4:	2b02      	cmp	r3, #2
 80148e6:	d122      	bne.n	801492e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	68db      	ldr	r3, [r3, #12]
 80148ee:	f003 0302 	and.w	r3, r3, #2
 80148f2:	2b02      	cmp	r3, #2
 80148f4:	d11b      	bne.n	801492e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	f06f 0202 	mvn.w	r2, #2
 80148fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2201      	movs	r2, #1
 8014904:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	699b      	ldr	r3, [r3, #24]
 801490c:	f003 0303 	and.w	r3, r3, #3
 8014910:	2b00      	cmp	r3, #0
 8014912:	d003      	beq.n	801491c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f000 facc 	bl	8014eb2 <HAL_TIM_IC_CaptureCallback>
 801491a:	e005      	b.n	8014928 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f000 fabe 	bl	8014e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f000 facf 	bl	8014ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2200      	movs	r2, #0
 801492c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	691b      	ldr	r3, [r3, #16]
 8014934:	f003 0304 	and.w	r3, r3, #4
 8014938:	2b04      	cmp	r3, #4
 801493a:	d122      	bne.n	8014982 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	68db      	ldr	r3, [r3, #12]
 8014942:	f003 0304 	and.w	r3, r3, #4
 8014946:	2b04      	cmp	r3, #4
 8014948:	d11b      	bne.n	8014982 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	f06f 0204 	mvn.w	r2, #4
 8014952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2202      	movs	r2, #2
 8014958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	699b      	ldr	r3, [r3, #24]
 8014960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014964:	2b00      	cmp	r3, #0
 8014966:	d003      	beq.n	8014970 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f000 faa2 	bl	8014eb2 <HAL_TIM_IC_CaptureCallback>
 801496e:	e005      	b.n	801497c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f000 fa94 	bl	8014e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f000 faa5 	bl	8014ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2200      	movs	r2, #0
 8014980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	691b      	ldr	r3, [r3, #16]
 8014988:	f003 0308 	and.w	r3, r3, #8
 801498c:	2b08      	cmp	r3, #8
 801498e:	d122      	bne.n	80149d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	68db      	ldr	r3, [r3, #12]
 8014996:	f003 0308 	and.w	r3, r3, #8
 801499a:	2b08      	cmp	r3, #8
 801499c:	d11b      	bne.n	80149d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	f06f 0208 	mvn.w	r2, #8
 80149a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2204      	movs	r2, #4
 80149ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	69db      	ldr	r3, [r3, #28]
 80149b4:	f003 0303 	and.w	r3, r3, #3
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d003      	beq.n	80149c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f000 fa78 	bl	8014eb2 <HAL_TIM_IC_CaptureCallback>
 80149c2:	e005      	b.n	80149d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f000 fa6a 	bl	8014e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f000 fa7b 	bl	8014ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2200      	movs	r2, #0
 80149d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	691b      	ldr	r3, [r3, #16]
 80149dc:	f003 0310 	and.w	r3, r3, #16
 80149e0:	2b10      	cmp	r3, #16
 80149e2:	d122      	bne.n	8014a2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68db      	ldr	r3, [r3, #12]
 80149ea:	f003 0310 	and.w	r3, r3, #16
 80149ee:	2b10      	cmp	r3, #16
 80149f0:	d11b      	bne.n	8014a2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	f06f 0210 	mvn.w	r2, #16
 80149fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2208      	movs	r2, #8
 8014a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	69db      	ldr	r3, [r3, #28]
 8014a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d003      	beq.n	8014a18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f000 fa4e 	bl	8014eb2 <HAL_TIM_IC_CaptureCallback>
 8014a16:	e005      	b.n	8014a24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f000 fa40 	bl	8014e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f000 fa51 	bl	8014ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2200      	movs	r2, #0
 8014a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	691b      	ldr	r3, [r3, #16]
 8014a30:	f003 0301 	and.w	r3, r3, #1
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d10e      	bne.n	8014a56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	68db      	ldr	r3, [r3, #12]
 8014a3e:	f003 0301 	and.w	r3, r3, #1
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	d107      	bne.n	8014a56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	f06f 0201 	mvn.w	r2, #1
 8014a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f7fa fb19 	bl	800f088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	691b      	ldr	r3, [r3, #16]
 8014a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a60:	2b80      	cmp	r3, #128	; 0x80
 8014a62:	d10e      	bne.n	8014a82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	68db      	ldr	r3, [r3, #12]
 8014a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a6e:	2b80      	cmp	r3, #128	; 0x80
 8014a70:	d107      	bne.n	8014a82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f000 fe73 	bl	8015768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	691b      	ldr	r3, [r3, #16]
 8014a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a8c:	2b40      	cmp	r3, #64	; 0x40
 8014a8e:	d10e      	bne.n	8014aae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a9a:	2b40      	cmp	r3, #64	; 0x40
 8014a9c:	d107      	bne.n	8014aae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f000 fa16 	bl	8014eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	691b      	ldr	r3, [r3, #16]
 8014ab4:	f003 0320 	and.w	r3, r3, #32
 8014ab8:	2b20      	cmp	r3, #32
 8014aba:	d10e      	bne.n	8014ada <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	68db      	ldr	r3, [r3, #12]
 8014ac2:	f003 0320 	and.w	r3, r3, #32
 8014ac6:	2b20      	cmp	r3, #32
 8014ac8:	d107      	bne.n	8014ada <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	f06f 0220 	mvn.w	r2, #32
 8014ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f000 fe3d 	bl	8015754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014ada:	bf00      	nop
 8014adc:	3708      	adds	r7, #8
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
	...

08014ae4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b084      	sub	sp, #16
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	60f8      	str	r0, [r7, #12]
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	d101      	bne.n	8014afe <HAL_TIM_OC_ConfigChannel+0x1a>
 8014afa:	2302      	movs	r3, #2
 8014afc:	e04e      	b.n	8014b9c <HAL_TIM_OC_ConfigChannel+0xb8>
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2201      	movs	r2, #1
 8014b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2202      	movs	r2, #2
 8014b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2b0c      	cmp	r3, #12
 8014b12:	d839      	bhi.n	8014b88 <HAL_TIM_OC_ConfigChannel+0xa4>
 8014b14:	a201      	add	r2, pc, #4	; (adr r2, 8014b1c <HAL_TIM_OC_ConfigChannel+0x38>)
 8014b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b1a:	bf00      	nop
 8014b1c:	08014b51 	.word	0x08014b51
 8014b20:	08014b89 	.word	0x08014b89
 8014b24:	08014b89 	.word	0x08014b89
 8014b28:	08014b89 	.word	0x08014b89
 8014b2c:	08014b5f 	.word	0x08014b5f
 8014b30:	08014b89 	.word	0x08014b89
 8014b34:	08014b89 	.word	0x08014b89
 8014b38:	08014b89 	.word	0x08014b89
 8014b3c:	08014b6d 	.word	0x08014b6d
 8014b40:	08014b89 	.word	0x08014b89
 8014b44:	08014b89 	.word	0x08014b89
 8014b48:	08014b89 	.word	0x08014b89
 8014b4c:	08014b7b 	.word	0x08014b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	68b9      	ldr	r1, [r7, #8]
 8014b56:	4618      	mov	r0, r3
 8014b58:	f000 fa6a 	bl	8015030 <TIM_OC1_SetConfig>
      break;
 8014b5c:	e015      	b.n	8014b8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	68b9      	ldr	r1, [r7, #8]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f000 fad3 	bl	8015110 <TIM_OC2_SetConfig>
      break;
 8014b6a:	e00e      	b.n	8014b8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	68b9      	ldr	r1, [r7, #8]
 8014b72:	4618      	mov	r0, r3
 8014b74:	f000 fb42 	bl	80151fc <TIM_OC3_SetConfig>
      break;
 8014b78:	e007      	b.n	8014b8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	68b9      	ldr	r1, [r7, #8]
 8014b80:	4618      	mov	r0, r3
 8014b82:	f000 fbaf 	bl	80152e4 <TIM_OC4_SetConfig>
      break;
 8014b86:	e000      	b.n	8014b8a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8014b88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2201      	movs	r2, #1
 8014b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2200      	movs	r2, #0
 8014b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014b9a:	2300      	movs	r3, #0
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3710      	adds	r7, #16
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}

08014ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014bb6:	2b01      	cmp	r3, #1
 8014bb8:	d101      	bne.n	8014bbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8014bba:	2302      	movs	r3, #2
 8014bbc:	e0b4      	b.n	8014d28 <HAL_TIM_PWM_ConfigChannel+0x184>
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2202      	movs	r2, #2
 8014bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2b0c      	cmp	r3, #12
 8014bd2:	f200 809f 	bhi.w	8014d14 <HAL_TIM_PWM_ConfigChannel+0x170>
 8014bd6:	a201      	add	r2, pc, #4	; (adr r2, 8014bdc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8014bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bdc:	08014c11 	.word	0x08014c11
 8014be0:	08014d15 	.word	0x08014d15
 8014be4:	08014d15 	.word	0x08014d15
 8014be8:	08014d15 	.word	0x08014d15
 8014bec:	08014c51 	.word	0x08014c51
 8014bf0:	08014d15 	.word	0x08014d15
 8014bf4:	08014d15 	.word	0x08014d15
 8014bf8:	08014d15 	.word	0x08014d15
 8014bfc:	08014c93 	.word	0x08014c93
 8014c00:	08014d15 	.word	0x08014d15
 8014c04:	08014d15 	.word	0x08014d15
 8014c08:	08014d15 	.word	0x08014d15
 8014c0c:	08014cd3 	.word	0x08014cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	68b9      	ldr	r1, [r7, #8]
 8014c16:	4618      	mov	r0, r3
 8014c18:	f000 fa0a 	bl	8015030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	699a      	ldr	r2, [r3, #24]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	f042 0208 	orr.w	r2, r2, #8
 8014c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	699a      	ldr	r2, [r3, #24]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	f022 0204 	bic.w	r2, r2, #4
 8014c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	6999      	ldr	r1, [r3, #24]
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	691a      	ldr	r2, [r3, #16]
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	430a      	orrs	r2, r1
 8014c4c:	619a      	str	r2, [r3, #24]
      break;
 8014c4e:	e062      	b.n	8014d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	68b9      	ldr	r1, [r7, #8]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f000 fa5a 	bl	8015110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	699a      	ldr	r2, [r3, #24]
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	699a      	ldr	r2, [r3, #24]
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	6999      	ldr	r1, [r3, #24]
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	691b      	ldr	r3, [r3, #16]
 8014c86:	021a      	lsls	r2, r3, #8
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	430a      	orrs	r2, r1
 8014c8e:	619a      	str	r2, [r3, #24]
      break;
 8014c90:	e041      	b.n	8014d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	68b9      	ldr	r1, [r7, #8]
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f000 faaf 	bl	80151fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	69da      	ldr	r2, [r3, #28]
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	f042 0208 	orr.w	r2, r2, #8
 8014cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	69da      	ldr	r2, [r3, #28]
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	f022 0204 	bic.w	r2, r2, #4
 8014cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	69d9      	ldr	r1, [r3, #28]
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	691a      	ldr	r2, [r3, #16]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	430a      	orrs	r2, r1
 8014cce:	61da      	str	r2, [r3, #28]
      break;
 8014cd0:	e021      	b.n	8014d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	68b9      	ldr	r1, [r7, #8]
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f000 fb03 	bl	80152e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	69da      	ldr	r2, [r3, #28]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	69da      	ldr	r2, [r3, #28]
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	69d9      	ldr	r1, [r3, #28]
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	691b      	ldr	r3, [r3, #16]
 8014d08:	021a      	lsls	r2, r3, #8
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	430a      	orrs	r2, r1
 8014d10:	61da      	str	r2, [r3, #28]
      break;
 8014d12:	e000      	b.n	8014d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8014d14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2201      	movs	r2, #1
 8014d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2200      	movs	r2, #0
 8014d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014d26:	2300      	movs	r3, #0
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3710      	adds	r7, #16
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}

08014d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b084      	sub	sp, #16
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014d40:	2b01      	cmp	r3, #1
 8014d42:	d101      	bne.n	8014d48 <HAL_TIM_ConfigClockSource+0x18>
 8014d44:	2302      	movs	r3, #2
 8014d46:	e0a6      	b.n	8014e96 <HAL_TIM_ConfigClockSource+0x166>
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2202      	movs	r2, #2
 8014d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	689b      	ldr	r3, [r3, #8]
 8014d5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014d66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014d6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	68fa      	ldr	r2, [r7, #12]
 8014d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	2b40      	cmp	r3, #64	; 0x40
 8014d7e:	d067      	beq.n	8014e50 <HAL_TIM_ConfigClockSource+0x120>
 8014d80:	2b40      	cmp	r3, #64	; 0x40
 8014d82:	d80b      	bhi.n	8014d9c <HAL_TIM_ConfigClockSource+0x6c>
 8014d84:	2b10      	cmp	r3, #16
 8014d86:	d073      	beq.n	8014e70 <HAL_TIM_ConfigClockSource+0x140>
 8014d88:	2b10      	cmp	r3, #16
 8014d8a:	d802      	bhi.n	8014d92 <HAL_TIM_ConfigClockSource+0x62>
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d06f      	beq.n	8014e70 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8014d90:	e078      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014d92:	2b20      	cmp	r3, #32
 8014d94:	d06c      	beq.n	8014e70 <HAL_TIM_ConfigClockSource+0x140>
 8014d96:	2b30      	cmp	r3, #48	; 0x30
 8014d98:	d06a      	beq.n	8014e70 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8014d9a:	e073      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014d9c:	2b70      	cmp	r3, #112	; 0x70
 8014d9e:	d00d      	beq.n	8014dbc <HAL_TIM_ConfigClockSource+0x8c>
 8014da0:	2b70      	cmp	r3, #112	; 0x70
 8014da2:	d804      	bhi.n	8014dae <HAL_TIM_ConfigClockSource+0x7e>
 8014da4:	2b50      	cmp	r3, #80	; 0x50
 8014da6:	d033      	beq.n	8014e10 <HAL_TIM_ConfigClockSource+0xe0>
 8014da8:	2b60      	cmp	r3, #96	; 0x60
 8014daa:	d041      	beq.n	8014e30 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8014dac:	e06a      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014db2:	d066      	beq.n	8014e82 <HAL_TIM_ConfigClockSource+0x152>
 8014db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014db8:	d017      	beq.n	8014dea <HAL_TIM_ConfigClockSource+0xba>
      break;
 8014dba:	e063      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	6818      	ldr	r0, [r3, #0]
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	6899      	ldr	r1, [r3, #8]
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	685a      	ldr	r2, [r3, #4]
 8014dc8:	683b      	ldr	r3, [r7, #0]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	f000 fb5a 	bl	8015484 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	689b      	ldr	r3, [r3, #8]
 8014dd6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014dde:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	68fa      	ldr	r2, [r7, #12]
 8014de6:	609a      	str	r2, [r3, #8]
      break;
 8014de8:	e04c      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	6818      	ldr	r0, [r3, #0]
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	6899      	ldr	r1, [r3, #8]
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	685a      	ldr	r2, [r3, #4]
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	68db      	ldr	r3, [r3, #12]
 8014dfa:	f000 fb43 	bl	8015484 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	689a      	ldr	r2, [r3, #8]
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014e0c:	609a      	str	r2, [r3, #8]
      break;
 8014e0e:	e039      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6818      	ldr	r0, [r3, #0]
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	6859      	ldr	r1, [r3, #4]
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	68db      	ldr	r3, [r3, #12]
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	f000 fab7 	bl	8015390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	2150      	movs	r1, #80	; 0x50
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f000 fb10 	bl	801544e <TIM_ITRx_SetConfig>
      break;
 8014e2e:	e029      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6818      	ldr	r0, [r3, #0]
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	6859      	ldr	r1, [r3, #4]
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	68db      	ldr	r3, [r3, #12]
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	f000 fad6 	bl	80153ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2160      	movs	r1, #96	; 0x60
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f000 fb00 	bl	801544e <TIM_ITRx_SetConfig>
      break;
 8014e4e:	e019      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	6818      	ldr	r0, [r3, #0]
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	6859      	ldr	r1, [r3, #4]
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	68db      	ldr	r3, [r3, #12]
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	f000 fa97 	bl	8015390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	2140      	movs	r1, #64	; 0x40
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f000 faf0 	bl	801544e <TIM_ITRx_SetConfig>
      break;
 8014e6e:	e009      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	4619      	mov	r1, r3
 8014e7a:	4610      	mov	r0, r2
 8014e7c:	f000 fae7 	bl	801544e <TIM_ITRx_SetConfig>
      break;
 8014e80:	e000      	b.n	8014e84 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8014e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	2201      	movs	r2, #1
 8014e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014e94:	2300      	movs	r3, #0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014e9e:	b480      	push	{r7}
 8014ea0:	b083      	sub	sp, #12
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014ea6:	bf00      	nop
 8014ea8:	370c      	adds	r7, #12
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr

08014eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014eb2:	b480      	push	{r7}
 8014eb4:	b083      	sub	sp, #12
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014eba:	bf00      	nop
 8014ebc:	370c      	adds	r7, #12
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec4:	4770      	bx	lr

08014ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014ec6:	b480      	push	{r7}
 8014ec8:	b083      	sub	sp, #12
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014ece:	bf00      	nop
 8014ed0:	370c      	adds	r7, #12
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed8:	4770      	bx	lr

08014eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014eda:	b480      	push	{r7}
 8014edc:	b083      	sub	sp, #12
 8014ede:	af00      	add	r7, sp, #0
 8014ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014ee2:	bf00      	nop
 8014ee4:	370c      	adds	r7, #12
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eec:	4770      	bx	lr
	...

08014ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b085      	sub	sp, #20
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	4a40      	ldr	r2, [pc, #256]	; (8015004 <TIM_Base_SetConfig+0x114>)
 8014f04:	4293      	cmp	r3, r2
 8014f06:	d013      	beq.n	8014f30 <TIM_Base_SetConfig+0x40>
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f0e:	d00f      	beq.n	8014f30 <TIM_Base_SetConfig+0x40>
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	4a3d      	ldr	r2, [pc, #244]	; (8015008 <TIM_Base_SetConfig+0x118>)
 8014f14:	4293      	cmp	r3, r2
 8014f16:	d00b      	beq.n	8014f30 <TIM_Base_SetConfig+0x40>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	4a3c      	ldr	r2, [pc, #240]	; (801500c <TIM_Base_SetConfig+0x11c>)
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	d007      	beq.n	8014f30 <TIM_Base_SetConfig+0x40>
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	4a3b      	ldr	r2, [pc, #236]	; (8015010 <TIM_Base_SetConfig+0x120>)
 8014f24:	4293      	cmp	r3, r2
 8014f26:	d003      	beq.n	8014f30 <TIM_Base_SetConfig+0x40>
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	4a3a      	ldr	r2, [pc, #232]	; (8015014 <TIM_Base_SetConfig+0x124>)
 8014f2c:	4293      	cmp	r3, r2
 8014f2e:	d108      	bne.n	8014f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	68fa      	ldr	r2, [r7, #12]
 8014f3e:	4313      	orrs	r3, r2
 8014f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	4a2f      	ldr	r2, [pc, #188]	; (8015004 <TIM_Base_SetConfig+0x114>)
 8014f46:	4293      	cmp	r3, r2
 8014f48:	d02b      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f50:	d027      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	4a2c      	ldr	r2, [pc, #176]	; (8015008 <TIM_Base_SetConfig+0x118>)
 8014f56:	4293      	cmp	r3, r2
 8014f58:	d023      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4a2b      	ldr	r2, [pc, #172]	; (801500c <TIM_Base_SetConfig+0x11c>)
 8014f5e:	4293      	cmp	r3, r2
 8014f60:	d01f      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	4a2a      	ldr	r2, [pc, #168]	; (8015010 <TIM_Base_SetConfig+0x120>)
 8014f66:	4293      	cmp	r3, r2
 8014f68:	d01b      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	4a29      	ldr	r2, [pc, #164]	; (8015014 <TIM_Base_SetConfig+0x124>)
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d017      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	4a28      	ldr	r2, [pc, #160]	; (8015018 <TIM_Base_SetConfig+0x128>)
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d013      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	4a27      	ldr	r2, [pc, #156]	; (801501c <TIM_Base_SetConfig+0x12c>)
 8014f7e:	4293      	cmp	r3, r2
 8014f80:	d00f      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	4a26      	ldr	r2, [pc, #152]	; (8015020 <TIM_Base_SetConfig+0x130>)
 8014f86:	4293      	cmp	r3, r2
 8014f88:	d00b      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	4a25      	ldr	r2, [pc, #148]	; (8015024 <TIM_Base_SetConfig+0x134>)
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	d007      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	4a24      	ldr	r2, [pc, #144]	; (8015028 <TIM_Base_SetConfig+0x138>)
 8014f96:	4293      	cmp	r3, r2
 8014f98:	d003      	beq.n	8014fa2 <TIM_Base_SetConfig+0xb2>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	4a23      	ldr	r2, [pc, #140]	; (801502c <TIM_Base_SetConfig+0x13c>)
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	d108      	bne.n	8014fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	68db      	ldr	r3, [r3, #12]
 8014fae:	68fa      	ldr	r2, [r7, #12]
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	695b      	ldr	r3, [r3, #20]
 8014fbe:	4313      	orrs	r3, r2
 8014fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	689a      	ldr	r2, [r3, #8]
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	681a      	ldr	r2, [r3, #0]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	4a0a      	ldr	r2, [pc, #40]	; (8015004 <TIM_Base_SetConfig+0x114>)
 8014fdc:	4293      	cmp	r3, r2
 8014fde:	d003      	beq.n	8014fe8 <TIM_Base_SetConfig+0xf8>
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	4a0c      	ldr	r2, [pc, #48]	; (8015014 <TIM_Base_SetConfig+0x124>)
 8014fe4:	4293      	cmp	r3, r2
 8014fe6:	d103      	bne.n	8014ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	691a      	ldr	r2, [r3, #16]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2201      	movs	r2, #1
 8014ff4:	615a      	str	r2, [r3, #20]
}
 8014ff6:	bf00      	nop
 8014ff8:	3714      	adds	r7, #20
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015000:	4770      	bx	lr
 8015002:	bf00      	nop
 8015004:	40010000 	.word	0x40010000
 8015008:	40000400 	.word	0x40000400
 801500c:	40000800 	.word	0x40000800
 8015010:	40000c00 	.word	0x40000c00
 8015014:	40010400 	.word	0x40010400
 8015018:	40014000 	.word	0x40014000
 801501c:	40014400 	.word	0x40014400
 8015020:	40014800 	.word	0x40014800
 8015024:	40001800 	.word	0x40001800
 8015028:	40001c00 	.word	0x40001c00
 801502c:	40002000 	.word	0x40002000

08015030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015030:	b480      	push	{r7}
 8015032:	b087      	sub	sp, #28
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
 8015038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6a1b      	ldr	r3, [r3, #32]
 801503e:	f023 0201 	bic.w	r2, r3, #1
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6a1b      	ldr	r3, [r3, #32]
 801504a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	699b      	ldr	r3, [r3, #24]
 8015056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f023 0303 	bic.w	r3, r3, #3
 8015066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	68fa      	ldr	r2, [r7, #12]
 801506e:	4313      	orrs	r3, r2
 8015070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	f023 0302 	bic.w	r3, r3, #2
 8015078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	689b      	ldr	r3, [r3, #8]
 801507e:	697a      	ldr	r2, [r7, #20]
 8015080:	4313      	orrs	r3, r2
 8015082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	4a20      	ldr	r2, [pc, #128]	; (8015108 <TIM_OC1_SetConfig+0xd8>)
 8015088:	4293      	cmp	r3, r2
 801508a:	d003      	beq.n	8015094 <TIM_OC1_SetConfig+0x64>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	4a1f      	ldr	r2, [pc, #124]	; (801510c <TIM_OC1_SetConfig+0xdc>)
 8015090:	4293      	cmp	r3, r2
 8015092:	d10c      	bne.n	80150ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015094:	697b      	ldr	r3, [r7, #20]
 8015096:	f023 0308 	bic.w	r3, r3, #8
 801509a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	697a      	ldr	r2, [r7, #20]
 80150a2:	4313      	orrs	r3, r2
 80150a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	f023 0304 	bic.w	r3, r3, #4
 80150ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	4a15      	ldr	r2, [pc, #84]	; (8015108 <TIM_OC1_SetConfig+0xd8>)
 80150b2:	4293      	cmp	r3, r2
 80150b4:	d003      	beq.n	80150be <TIM_OC1_SetConfig+0x8e>
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	4a14      	ldr	r2, [pc, #80]	; (801510c <TIM_OC1_SetConfig+0xdc>)
 80150ba:	4293      	cmp	r3, r2
 80150bc:	d111      	bne.n	80150e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80150c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80150cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	695b      	ldr	r3, [r3, #20]
 80150d2:	693a      	ldr	r2, [r7, #16]
 80150d4:	4313      	orrs	r3, r2
 80150d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	699b      	ldr	r3, [r3, #24]
 80150dc:	693a      	ldr	r2, [r7, #16]
 80150de:	4313      	orrs	r3, r2
 80150e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	693a      	ldr	r2, [r7, #16]
 80150e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	68fa      	ldr	r2, [r7, #12]
 80150ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	685a      	ldr	r2, [r3, #4]
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	697a      	ldr	r2, [r7, #20]
 80150fa:	621a      	str	r2, [r3, #32]
}
 80150fc:	bf00      	nop
 80150fe:	371c      	adds	r7, #28
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr
 8015108:	40010000 	.word	0x40010000
 801510c:	40010400 	.word	0x40010400

08015110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015110:	b480      	push	{r7}
 8015112:	b087      	sub	sp, #28
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6a1b      	ldr	r3, [r3, #32]
 801511e:	f023 0210 	bic.w	r2, r3, #16
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	6a1b      	ldr	r3, [r3, #32]
 801512a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	685b      	ldr	r3, [r3, #4]
 8015130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	699b      	ldr	r3, [r3, #24]
 8015136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801513e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	021b      	lsls	r3, r3, #8
 801514e:	68fa      	ldr	r2, [r7, #12]
 8015150:	4313      	orrs	r3, r2
 8015152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	f023 0320 	bic.w	r3, r3, #32
 801515a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	689b      	ldr	r3, [r3, #8]
 8015160:	011b      	lsls	r3, r3, #4
 8015162:	697a      	ldr	r2, [r7, #20]
 8015164:	4313      	orrs	r3, r2
 8015166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	4a22      	ldr	r2, [pc, #136]	; (80151f4 <TIM_OC2_SetConfig+0xe4>)
 801516c:	4293      	cmp	r3, r2
 801516e:	d003      	beq.n	8015178 <TIM_OC2_SetConfig+0x68>
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	4a21      	ldr	r2, [pc, #132]	; (80151f8 <TIM_OC2_SetConfig+0xe8>)
 8015174:	4293      	cmp	r3, r2
 8015176:	d10d      	bne.n	8015194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801517e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	68db      	ldr	r3, [r3, #12]
 8015184:	011b      	lsls	r3, r3, #4
 8015186:	697a      	ldr	r2, [r7, #20]
 8015188:	4313      	orrs	r3, r2
 801518a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	4a17      	ldr	r2, [pc, #92]	; (80151f4 <TIM_OC2_SetConfig+0xe4>)
 8015198:	4293      	cmp	r3, r2
 801519a:	d003      	beq.n	80151a4 <TIM_OC2_SetConfig+0x94>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	4a16      	ldr	r2, [pc, #88]	; (80151f8 <TIM_OC2_SetConfig+0xe8>)
 80151a0:	4293      	cmp	r3, r2
 80151a2:	d113      	bne.n	80151cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80151aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80151b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	695b      	ldr	r3, [r3, #20]
 80151b8:	009b      	lsls	r3, r3, #2
 80151ba:	693a      	ldr	r2, [r7, #16]
 80151bc:	4313      	orrs	r3, r2
 80151be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	699b      	ldr	r3, [r3, #24]
 80151c4:	009b      	lsls	r3, r3, #2
 80151c6:	693a      	ldr	r2, [r7, #16]
 80151c8:	4313      	orrs	r3, r2
 80151ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	693a      	ldr	r2, [r7, #16]
 80151d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	685a      	ldr	r2, [r3, #4]
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	697a      	ldr	r2, [r7, #20]
 80151e4:	621a      	str	r2, [r3, #32]
}
 80151e6:	bf00      	nop
 80151e8:	371c      	adds	r7, #28
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr
 80151f2:	bf00      	nop
 80151f4:	40010000 	.word	0x40010000
 80151f8:	40010400 	.word	0x40010400

080151fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80151fc:	b480      	push	{r7}
 80151fe:	b087      	sub	sp, #28
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	6a1b      	ldr	r3, [r3, #32]
 801520a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6a1b      	ldr	r3, [r3, #32]
 8015216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	69db      	ldr	r3, [r3, #28]
 8015222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	f023 0303 	bic.w	r3, r3, #3
 8015232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	68fa      	ldr	r2, [r7, #12]
 801523a:	4313      	orrs	r3, r2
 801523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	689b      	ldr	r3, [r3, #8]
 801524a:	021b      	lsls	r3, r3, #8
 801524c:	697a      	ldr	r2, [r7, #20]
 801524e:	4313      	orrs	r3, r2
 8015250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	4a21      	ldr	r2, [pc, #132]	; (80152dc <TIM_OC3_SetConfig+0xe0>)
 8015256:	4293      	cmp	r3, r2
 8015258:	d003      	beq.n	8015262 <TIM_OC3_SetConfig+0x66>
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	4a20      	ldr	r2, [pc, #128]	; (80152e0 <TIM_OC3_SetConfig+0xe4>)
 801525e:	4293      	cmp	r3, r2
 8015260:	d10d      	bne.n	801527e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	68db      	ldr	r3, [r3, #12]
 801526e:	021b      	lsls	r3, r3, #8
 8015270:	697a      	ldr	r2, [r7, #20]
 8015272:	4313      	orrs	r3, r2
 8015274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015276:	697b      	ldr	r3, [r7, #20]
 8015278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801527c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	4a16      	ldr	r2, [pc, #88]	; (80152dc <TIM_OC3_SetConfig+0xe0>)
 8015282:	4293      	cmp	r3, r2
 8015284:	d003      	beq.n	801528e <TIM_OC3_SetConfig+0x92>
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	4a15      	ldr	r2, [pc, #84]	; (80152e0 <TIM_OC3_SetConfig+0xe4>)
 801528a:	4293      	cmp	r3, r2
 801528c:	d113      	bne.n	80152b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	695b      	ldr	r3, [r3, #20]
 80152a2:	011b      	lsls	r3, r3, #4
 80152a4:	693a      	ldr	r2, [r7, #16]
 80152a6:	4313      	orrs	r3, r2
 80152a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	699b      	ldr	r3, [r3, #24]
 80152ae:	011b      	lsls	r3, r3, #4
 80152b0:	693a      	ldr	r2, [r7, #16]
 80152b2:	4313      	orrs	r3, r2
 80152b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	693a      	ldr	r2, [r7, #16]
 80152ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	685a      	ldr	r2, [r3, #4]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	697a      	ldr	r2, [r7, #20]
 80152ce:	621a      	str	r2, [r3, #32]
}
 80152d0:	bf00      	nop
 80152d2:	371c      	adds	r7, #28
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr
 80152dc:	40010000 	.word	0x40010000
 80152e0:	40010400 	.word	0x40010400

080152e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b087      	sub	sp, #28
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6a1b      	ldr	r3, [r3, #32]
 80152f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6a1b      	ldr	r3, [r3, #32]
 80152fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	69db      	ldr	r3, [r3, #28]
 801530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801531a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	021b      	lsls	r3, r3, #8
 8015322:	68fa      	ldr	r2, [r7, #12]
 8015324:	4313      	orrs	r3, r2
 8015326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801532e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	689b      	ldr	r3, [r3, #8]
 8015334:	031b      	lsls	r3, r3, #12
 8015336:	693a      	ldr	r2, [r7, #16]
 8015338:	4313      	orrs	r3, r2
 801533a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	4a12      	ldr	r2, [pc, #72]	; (8015388 <TIM_OC4_SetConfig+0xa4>)
 8015340:	4293      	cmp	r3, r2
 8015342:	d003      	beq.n	801534c <TIM_OC4_SetConfig+0x68>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	4a11      	ldr	r2, [pc, #68]	; (801538c <TIM_OC4_SetConfig+0xa8>)
 8015348:	4293      	cmp	r3, r2
 801534a:	d109      	bne.n	8015360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	695b      	ldr	r3, [r3, #20]
 8015358:	019b      	lsls	r3, r3, #6
 801535a:	697a      	ldr	r2, [r7, #20]
 801535c:	4313      	orrs	r3, r2
 801535e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	697a      	ldr	r2, [r7, #20]
 8015364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	68fa      	ldr	r2, [r7, #12]
 801536a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	685a      	ldr	r2, [r3, #4]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	693a      	ldr	r2, [r7, #16]
 8015378:	621a      	str	r2, [r3, #32]
}
 801537a:	bf00      	nop
 801537c:	371c      	adds	r7, #28
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr
 8015386:	bf00      	nop
 8015388:	40010000 	.word	0x40010000
 801538c:	40010400 	.word	0x40010400

08015390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015390:	b480      	push	{r7}
 8015392:	b087      	sub	sp, #28
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	60b9      	str	r1, [r7, #8]
 801539a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	6a1b      	ldr	r3, [r3, #32]
 80153a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	6a1b      	ldr	r3, [r3, #32]
 80153a6:	f023 0201 	bic.w	r2, r3, #1
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	699b      	ldr	r3, [r3, #24]
 80153b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80153ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	011b      	lsls	r3, r3, #4
 80153c0:	693a      	ldr	r2, [r7, #16]
 80153c2:	4313      	orrs	r3, r2
 80153c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	f023 030a 	bic.w	r3, r3, #10
 80153cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80153ce:	697a      	ldr	r2, [r7, #20]
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	4313      	orrs	r3, r2
 80153d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	693a      	ldr	r2, [r7, #16]
 80153da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	697a      	ldr	r2, [r7, #20]
 80153e0:	621a      	str	r2, [r3, #32]
}
 80153e2:	bf00      	nop
 80153e4:	371c      	adds	r7, #28
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr

080153ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80153ee:	b480      	push	{r7}
 80153f0:	b087      	sub	sp, #28
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	60f8      	str	r0, [r7, #12]
 80153f6:	60b9      	str	r1, [r7, #8]
 80153f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	6a1b      	ldr	r3, [r3, #32]
 80153fe:	f023 0210 	bic.w	r2, r3, #16
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	699b      	ldr	r3, [r3, #24]
 801540a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	6a1b      	ldr	r3, [r3, #32]
 8015410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015412:	697b      	ldr	r3, [r7, #20]
 8015414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	031b      	lsls	r3, r3, #12
 801541e:	697a      	ldr	r2, [r7, #20]
 8015420:	4313      	orrs	r3, r2
 8015422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801542a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	011b      	lsls	r3, r3, #4
 8015430:	693a      	ldr	r2, [r7, #16]
 8015432:	4313      	orrs	r3, r2
 8015434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	697a      	ldr	r2, [r7, #20]
 801543a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	693a      	ldr	r2, [r7, #16]
 8015440:	621a      	str	r2, [r3, #32]
}
 8015442:	bf00      	nop
 8015444:	371c      	adds	r7, #28
 8015446:	46bd      	mov	sp, r7
 8015448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544c:	4770      	bx	lr

0801544e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801544e:	b480      	push	{r7}
 8015450:	b085      	sub	sp, #20
 8015452:	af00      	add	r7, sp, #0
 8015454:	6078      	str	r0, [r7, #4]
 8015456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	689b      	ldr	r3, [r3, #8]
 801545c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015466:	683a      	ldr	r2, [r7, #0]
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	4313      	orrs	r3, r2
 801546c:	f043 0307 	orr.w	r3, r3, #7
 8015470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	68fa      	ldr	r2, [r7, #12]
 8015476:	609a      	str	r2, [r3, #8]
}
 8015478:	bf00      	nop
 801547a:	3714      	adds	r7, #20
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015484:	b480      	push	{r7}
 8015486:	b087      	sub	sp, #28
 8015488:	af00      	add	r7, sp, #0
 801548a:	60f8      	str	r0, [r7, #12]
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
 8015490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	689b      	ldr	r3, [r3, #8]
 8015496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801549e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	021a      	lsls	r2, r3, #8
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	431a      	orrs	r2, r3
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	4313      	orrs	r3, r2
 80154ac:	697a      	ldr	r2, [r7, #20]
 80154ae:	4313      	orrs	r3, r2
 80154b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	697a      	ldr	r2, [r7, #20]
 80154b6:	609a      	str	r2, [r3, #8]
}
 80154b8:	bf00      	nop
 80154ba:	371c      	adds	r7, #28
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr

080154c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80154c4:	b480      	push	{r7}
 80154c6:	b087      	sub	sp, #28
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	f003 031f 	and.w	r3, r3, #31
 80154d6:	2201      	movs	r2, #1
 80154d8:	fa02 f303 	lsl.w	r3, r2, r3
 80154dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	6a1a      	ldr	r2, [r3, #32]
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	43db      	mvns	r3, r3
 80154e6:	401a      	ands	r2, r3
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	6a1a      	ldr	r2, [r3, #32]
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	f003 031f 	and.w	r3, r3, #31
 80154f6:	6879      	ldr	r1, [r7, #4]
 80154f8:	fa01 f303 	lsl.w	r3, r1, r3
 80154fc:	431a      	orrs	r2, r3
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	621a      	str	r2, [r3, #32]
}
 8015502:	bf00      	nop
 8015504:	371c      	adds	r7, #28
 8015506:	46bd      	mov	sp, r7
 8015508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550c:	4770      	bx	lr

0801550e <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801550e:	b580      	push	{r7, lr}
 8015510:	b084      	sub	sp, #16
 8015512:	af00      	add	r7, sp, #0
 8015514:	6078      	str	r0, [r7, #4]
 8015516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	2b04      	cmp	r3, #4
 801551c:	d00d      	beq.n	801553a <HAL_TIMEx_OCN_Start_IT+0x2c>
 801551e:	2b08      	cmp	r3, #8
 8015520:	d014      	beq.n	801554c <HAL_TIMEx_OCN_Start_IT+0x3e>
 8015522:	2b00      	cmp	r3, #0
 8015524:	d000      	beq.n	8015528 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8015526:	e01a      	b.n	801555e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	68da      	ldr	r2, [r3, #12]
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	f042 0202 	orr.w	r2, r2, #2
 8015536:	60da      	str	r2, [r3, #12]
      break;
 8015538:	e011      	b.n	801555e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	68da      	ldr	r2, [r3, #12]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	f042 0204 	orr.w	r2, r2, #4
 8015548:	60da      	str	r2, [r3, #12]
      break;
 801554a:	e008      	b.n	801555e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	68da      	ldr	r2, [r3, #12]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	f042 0208 	orr.w	r2, r2, #8
 801555a:	60da      	str	r2, [r3, #12]
      break;
 801555c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	68da      	ldr	r2, [r3, #12]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801556c:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2204      	movs	r2, #4
 8015574:	6839      	ldr	r1, [r7, #0]
 8015576:	4618      	mov	r0, r3
 8015578:	f000 f900 	bl	801577c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801558a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	689b      	ldr	r3, [r3, #8]
 8015592:	f003 0307 	and.w	r3, r3, #7
 8015596:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	2b06      	cmp	r3, #6
 801559c:	d007      	beq.n	80155ae <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	681a      	ldr	r2, [r3, #0]
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	f042 0201 	orr.w	r2, r2, #1
 80155ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80155ae:	2300      	movs	r3, #0
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3710      	adds	r7, #16
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80155b8:	b480      	push	{r7}
 80155ba:	b085      	sub	sp, #20
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d101      	bne.n	80155d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80155cc:	2302      	movs	r3, #2
 80155ce:	e05a      	b.n	8015686 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2201      	movs	r2, #1
 80155d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2202      	movs	r2, #2
 80155dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	689b      	ldr	r3, [r3, #8]
 80155ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80155f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	68fa      	ldr	r2, [r7, #12]
 80155fe:	4313      	orrs	r3, r2
 8015600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	68fa      	ldr	r2, [r7, #12]
 8015608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	4a21      	ldr	r2, [pc, #132]	; (8015694 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8015610:	4293      	cmp	r3, r2
 8015612:	d022      	beq.n	801565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801561c:	d01d      	beq.n	801565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	4a1d      	ldr	r2, [pc, #116]	; (8015698 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015624:	4293      	cmp	r3, r2
 8015626:	d018      	beq.n	801565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	4a1b      	ldr	r2, [pc, #108]	; (801569c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801562e:	4293      	cmp	r3, r2
 8015630:	d013      	beq.n	801565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	4a1a      	ldr	r2, [pc, #104]	; (80156a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015638:	4293      	cmp	r3, r2
 801563a:	d00e      	beq.n	801565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	4a18      	ldr	r2, [pc, #96]	; (80156a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8015642:	4293      	cmp	r3, r2
 8015644:	d009      	beq.n	801565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	4a17      	ldr	r2, [pc, #92]	; (80156a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801564c:	4293      	cmp	r3, r2
 801564e:	d004      	beq.n	801565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	4a15      	ldr	r2, [pc, #84]	; (80156ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8015656:	4293      	cmp	r3, r2
 8015658:	d10c      	bne.n	8015674 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	4313      	orrs	r3, r2
 801566a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	68ba      	ldr	r2, [r7, #8]
 8015672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2201      	movs	r2, #1
 8015678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2200      	movs	r2, #0
 8015680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015684:	2300      	movs	r3, #0
}
 8015686:	4618      	mov	r0, r3
 8015688:	3714      	adds	r7, #20
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr
 8015692:	bf00      	nop
 8015694:	40010000 	.word	0x40010000
 8015698:	40000400 	.word	0x40000400
 801569c:	40000800 	.word	0x40000800
 80156a0:	40000c00 	.word	0x40000c00
 80156a4:	40010400 	.word	0x40010400
 80156a8:	40014000 	.word	0x40014000
 80156ac:	40001800 	.word	0x40001800

080156b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80156b0:	b480      	push	{r7}
 80156b2:	b085      	sub	sp, #20
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80156ba:	2300      	movs	r3, #0
 80156bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80156c4:	2b01      	cmp	r3, #1
 80156c6:	d101      	bne.n	80156cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80156c8:	2302      	movs	r3, #2
 80156ca:	e03d      	b.n	8015748 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2201      	movs	r2, #1
 80156d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	68db      	ldr	r3, [r3, #12]
 80156de:	4313      	orrs	r3, r2
 80156e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	689b      	ldr	r3, [r3, #8]
 80156ec:	4313      	orrs	r3, r2
 80156ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	4313      	orrs	r3, r2
 80156fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	4313      	orrs	r3, r2
 801570a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	691b      	ldr	r3, [r3, #16]
 8015716:	4313      	orrs	r3, r2
 8015718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	695b      	ldr	r3, [r3, #20]
 8015724:	4313      	orrs	r3, r2
 8015726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	69db      	ldr	r3, [r3, #28]
 8015732:	4313      	orrs	r3, r2
 8015734:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	68fa      	ldr	r2, [r7, #12]
 801573c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2200      	movs	r2, #0
 8015742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015746:	2300      	movs	r3, #0
}
 8015748:	4618      	mov	r0, r3
 801574a:	3714      	adds	r7, #20
 801574c:	46bd      	mov	sp, r7
 801574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015752:	4770      	bx	lr

08015754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015754:	b480      	push	{r7}
 8015756:	b083      	sub	sp, #12
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801575c:	bf00      	nop
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015770:	bf00      	nop
 8015772:	370c      	adds	r7, #12
 8015774:	46bd      	mov	sp, r7
 8015776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577a:	4770      	bx	lr

0801577c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 801577c:	b480      	push	{r7}
 801577e:	b087      	sub	sp, #28
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	f003 031f 	and.w	r3, r3, #31
 801578e:	2204      	movs	r2, #4
 8015790:	fa02 f303 	lsl.w	r3, r2, r3
 8015794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	6a1a      	ldr	r2, [r3, #32]
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	43db      	mvns	r3, r3
 801579e:	401a      	ands	r2, r3
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	6a1a      	ldr	r2, [r3, #32]
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	f003 031f 	and.w	r3, r3, #31
 80157ae:	6879      	ldr	r1, [r7, #4]
 80157b0:	fa01 f303 	lsl.w	r3, r1, r3
 80157b4:	431a      	orrs	r2, r3
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	621a      	str	r2, [r3, #32]
}
 80157ba:	bf00      	nop
 80157bc:	371c      	adds	r7, #28
 80157be:	46bd      	mov	sp, r7
 80157c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c4:	4770      	bx	lr

080157c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80157c6:	b580      	push	{r7, lr}
 80157c8:	b082      	sub	sp, #8
 80157ca:	af00      	add	r7, sp, #0
 80157cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d101      	bne.n	80157d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80157d4:	2301      	movs	r3, #1
 80157d6:	e03f      	b.n	8015858 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d106      	bne.n	80157f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2200      	movs	r2, #0
 80157e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f7fb fa93 	bl	8010d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2224      	movs	r2, #36	; 0x24
 80157f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	68da      	ldr	r2, [r3, #12]
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015808:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f000 f90c 	bl	8015a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	691a      	ldr	r2, [r3, #16]
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801581e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	695a      	ldr	r2, [r3, #20]
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801582e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	68da      	ldr	r2, [r3, #12]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801583e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	2200      	movs	r2, #0
 8015844:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2220      	movs	r2, #32
 801584a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2220      	movs	r2, #32
 8015852:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8015856:	2300      	movs	r3, #0
}
 8015858:	4618      	mov	r0, r3
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b088      	sub	sp, #32
 8015864:	af02      	add	r7, sp, #8
 8015866:	60f8      	str	r0, [r7, #12]
 8015868:	60b9      	str	r1, [r7, #8]
 801586a:	603b      	str	r3, [r7, #0]
 801586c:	4613      	mov	r3, r2
 801586e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8015870:	2300      	movs	r3, #0
 8015872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801587a:	b2db      	uxtb	r3, r3
 801587c:	2b20      	cmp	r3, #32
 801587e:	f040 8083 	bne.w	8015988 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d002      	beq.n	801588e <HAL_UART_Transmit+0x2e>
 8015888:	88fb      	ldrh	r3, [r7, #6]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d101      	bne.n	8015892 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801588e:	2301      	movs	r3, #1
 8015890:	e07b      	b.n	801598a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015898:	2b01      	cmp	r3, #1
 801589a:	d101      	bne.n	80158a0 <HAL_UART_Transmit+0x40>
 801589c:	2302      	movs	r3, #2
 801589e:	e074      	b.n	801598a <HAL_UART_Transmit+0x12a>
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	2201      	movs	r2, #1
 80158a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2200      	movs	r2, #0
 80158ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2221      	movs	r2, #33	; 0x21
 80158b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80158b6:	f7fb fc63 	bl	8011180 <HAL_GetTick>
 80158ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	88fa      	ldrh	r2, [r7, #6]
 80158c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	88fa      	ldrh	r2, [r7, #6]
 80158c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2200      	movs	r2, #0
 80158cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80158d0:	e042      	b.n	8015958 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	3b01      	subs	r3, #1
 80158da:	b29a      	uxth	r2, r3
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	689b      	ldr	r3, [r3, #8]
 80158e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158e8:	d122      	bne.n	8015930 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	697b      	ldr	r3, [r7, #20]
 80158f0:	2200      	movs	r2, #0
 80158f2:	2180      	movs	r1, #128	; 0x80
 80158f4:	68f8      	ldr	r0, [r7, #12]
 80158f6:	f000 f84c 	bl	8015992 <UART_WaitOnFlagUntilTimeout>
 80158fa:	4603      	mov	r3, r0
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d001      	beq.n	8015904 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8015900:	2303      	movs	r3, #3
 8015902:	e042      	b.n	801598a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8015904:	68bb      	ldr	r3, [r7, #8]
 8015906:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	881b      	ldrh	r3, [r3, #0]
 801590c:	461a      	mov	r2, r3
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015916:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	691b      	ldr	r3, [r3, #16]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d103      	bne.n	8015928 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	3302      	adds	r3, #2
 8015924:	60bb      	str	r3, [r7, #8]
 8015926:	e017      	b.n	8015958 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	3301      	adds	r3, #1
 801592c:	60bb      	str	r3, [r7, #8]
 801592e:	e013      	b.n	8015958 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	9300      	str	r3, [sp, #0]
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	2200      	movs	r2, #0
 8015938:	2180      	movs	r1, #128	; 0x80
 801593a:	68f8      	ldr	r0, [r7, #12]
 801593c:	f000 f829 	bl	8015992 <UART_WaitOnFlagUntilTimeout>
 8015940:	4603      	mov	r3, r0
 8015942:	2b00      	cmp	r3, #0
 8015944:	d001      	beq.n	801594a <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8015946:	2303      	movs	r3, #3
 8015948:	e01f      	b.n	801598a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	1c5a      	adds	r2, r3, #1
 801594e:	60ba      	str	r2, [r7, #8]
 8015950:	781a      	ldrb	r2, [r3, #0]
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801595c:	b29b      	uxth	r3, r3
 801595e:	2b00      	cmp	r3, #0
 8015960:	d1b7      	bne.n	80158d2 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	9300      	str	r3, [sp, #0]
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	2200      	movs	r2, #0
 801596a:	2140      	movs	r1, #64	; 0x40
 801596c:	68f8      	ldr	r0, [r7, #12]
 801596e:	f000 f810 	bl	8015992 <UART_WaitOnFlagUntilTimeout>
 8015972:	4603      	mov	r3, r0
 8015974:	2b00      	cmp	r3, #0
 8015976:	d001      	beq.n	801597c <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8015978:	2303      	movs	r3, #3
 801597a:	e006      	b.n	801598a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2220      	movs	r2, #32
 8015980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8015984:	2300      	movs	r3, #0
 8015986:	e000      	b.n	801598a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8015988:	2302      	movs	r3, #2
  }
}
 801598a:	4618      	mov	r0, r3
 801598c:	3718      	adds	r7, #24
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}

08015992 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8015992:	b580      	push	{r7, lr}
 8015994:	b084      	sub	sp, #16
 8015996:	af00      	add	r7, sp, #0
 8015998:	60f8      	str	r0, [r7, #12]
 801599a:	60b9      	str	r1, [r7, #8]
 801599c:	603b      	str	r3, [r7, #0]
 801599e:	4613      	mov	r3, r2
 80159a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80159a2:	e02c      	b.n	80159fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80159a4:	69bb      	ldr	r3, [r7, #24]
 80159a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159aa:	d028      	beq.n	80159fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80159ac:	69bb      	ldr	r3, [r7, #24]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d007      	beq.n	80159c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80159b2:	f7fb fbe5 	bl	8011180 <HAL_GetTick>
 80159b6:	4602      	mov	r2, r0
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	1ad3      	subs	r3, r2, r3
 80159bc:	69ba      	ldr	r2, [r7, #24]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d21d      	bcs.n	80159fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	68da      	ldr	r2, [r3, #12]
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80159d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	695a      	ldr	r2, [r3, #20]
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f022 0201 	bic.w	r2, r2, #1
 80159e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2220      	movs	r2, #32
 80159e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	2220      	movs	r2, #32
 80159ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	2200      	movs	r2, #0
 80159f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80159fa:	2303      	movs	r3, #3
 80159fc:	e00f      	b.n	8015a1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	681a      	ldr	r2, [r3, #0]
 8015a04:	68bb      	ldr	r3, [r7, #8]
 8015a06:	4013      	ands	r3, r2
 8015a08:	68ba      	ldr	r2, [r7, #8]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	bf0c      	ite	eq
 8015a0e:	2301      	moveq	r3, #1
 8015a10:	2300      	movne	r3, #0
 8015a12:	b2db      	uxtb	r3, r3
 8015a14:	461a      	mov	r2, r3
 8015a16:	79fb      	ldrb	r3, [r7, #7]
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d0c3      	beq.n	80159a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8015a1c:	2300      	movs	r3, #0
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	3710      	adds	r7, #16
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}
	...

08015a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a2c:	b085      	sub	sp, #20
 8015a2e:	af00      	add	r7, sp, #0
 8015a30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	691b      	ldr	r3, [r3, #16]
 8015a38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	68da      	ldr	r2, [r3, #12]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	430a      	orrs	r2, r1
 8015a46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	689a      	ldr	r2, [r3, #8]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	691b      	ldr	r3, [r3, #16]
 8015a50:	431a      	orrs	r2, r3
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	695b      	ldr	r3, [r3, #20]
 8015a56:	431a      	orrs	r2, r3
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	69db      	ldr	r3, [r3, #28]
 8015a5c:	4313      	orrs	r3, r2
 8015a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	68db      	ldr	r3, [r3, #12]
 8015a66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8015a6a:	f023 030c 	bic.w	r3, r3, #12
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	6812      	ldr	r2, [r2, #0]
 8015a72:	68f9      	ldr	r1, [r7, #12]
 8015a74:	430b      	orrs	r3, r1
 8015a76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	695b      	ldr	r3, [r3, #20]
 8015a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	699a      	ldr	r2, [r3, #24]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	430a      	orrs	r2, r1
 8015a8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	69db      	ldr	r3, [r3, #28]
 8015a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a96:	f040 818b 	bne.w	8015db0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	4ac1      	ldr	r2, [pc, #772]	; (8015da4 <UART_SetConfig+0x37c>)
 8015aa0:	4293      	cmp	r3, r2
 8015aa2:	d005      	beq.n	8015ab0 <UART_SetConfig+0x88>
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	4abf      	ldr	r2, [pc, #764]	; (8015da8 <UART_SetConfig+0x380>)
 8015aaa:	4293      	cmp	r3, r2
 8015aac:	f040 80bd 	bne.w	8015c2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015ab0:	f7fd fede 	bl	8013870 <HAL_RCC_GetPCLK2Freq>
 8015ab4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	461d      	mov	r5, r3
 8015aba:	f04f 0600 	mov.w	r6, #0
 8015abe:	46a8      	mov	r8, r5
 8015ac0:	46b1      	mov	r9, r6
 8015ac2:	eb18 0308 	adds.w	r3, r8, r8
 8015ac6:	eb49 0409 	adc.w	r4, r9, r9
 8015aca:	4698      	mov	r8, r3
 8015acc:	46a1      	mov	r9, r4
 8015ace:	eb18 0805 	adds.w	r8, r8, r5
 8015ad2:	eb49 0906 	adc.w	r9, r9, r6
 8015ad6:	f04f 0100 	mov.w	r1, #0
 8015ada:	f04f 0200 	mov.w	r2, #0
 8015ade:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015ae2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015ae6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015aea:	4688      	mov	r8, r1
 8015aec:	4691      	mov	r9, r2
 8015aee:	eb18 0005 	adds.w	r0, r8, r5
 8015af2:	eb49 0106 	adc.w	r1, r9, r6
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	461d      	mov	r5, r3
 8015afc:	f04f 0600 	mov.w	r6, #0
 8015b00:	196b      	adds	r3, r5, r5
 8015b02:	eb46 0406 	adc.w	r4, r6, r6
 8015b06:	461a      	mov	r2, r3
 8015b08:	4623      	mov	r3, r4
 8015b0a:	f7f2 ffd5 	bl	8008ab8 <__aeabi_uldivmod>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	460c      	mov	r4, r1
 8015b12:	461a      	mov	r2, r3
 8015b14:	4ba5      	ldr	r3, [pc, #660]	; (8015dac <UART_SetConfig+0x384>)
 8015b16:	fba3 2302 	umull	r2, r3, r3, r2
 8015b1a:	095b      	lsrs	r3, r3, #5
 8015b1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	461d      	mov	r5, r3
 8015b24:	f04f 0600 	mov.w	r6, #0
 8015b28:	46a9      	mov	r9, r5
 8015b2a:	46b2      	mov	sl, r6
 8015b2c:	eb19 0309 	adds.w	r3, r9, r9
 8015b30:	eb4a 040a 	adc.w	r4, sl, sl
 8015b34:	4699      	mov	r9, r3
 8015b36:	46a2      	mov	sl, r4
 8015b38:	eb19 0905 	adds.w	r9, r9, r5
 8015b3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8015b40:	f04f 0100 	mov.w	r1, #0
 8015b44:	f04f 0200 	mov.w	r2, #0
 8015b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015b4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015b50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015b54:	4689      	mov	r9, r1
 8015b56:	4692      	mov	sl, r2
 8015b58:	eb19 0005 	adds.w	r0, r9, r5
 8015b5c:	eb4a 0106 	adc.w	r1, sl, r6
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	461d      	mov	r5, r3
 8015b66:	f04f 0600 	mov.w	r6, #0
 8015b6a:	196b      	adds	r3, r5, r5
 8015b6c:	eb46 0406 	adc.w	r4, r6, r6
 8015b70:	461a      	mov	r2, r3
 8015b72:	4623      	mov	r3, r4
 8015b74:	f7f2 ffa0 	bl	8008ab8 <__aeabi_uldivmod>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	460c      	mov	r4, r1
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	4b8b      	ldr	r3, [pc, #556]	; (8015dac <UART_SetConfig+0x384>)
 8015b80:	fba3 1302 	umull	r1, r3, r3, r2
 8015b84:	095b      	lsrs	r3, r3, #5
 8015b86:	2164      	movs	r1, #100	; 0x64
 8015b88:	fb01 f303 	mul.w	r3, r1, r3
 8015b8c:	1ad3      	subs	r3, r2, r3
 8015b8e:	00db      	lsls	r3, r3, #3
 8015b90:	3332      	adds	r3, #50	; 0x32
 8015b92:	4a86      	ldr	r2, [pc, #536]	; (8015dac <UART_SetConfig+0x384>)
 8015b94:	fba2 2303 	umull	r2, r3, r2, r3
 8015b98:	095b      	lsrs	r3, r3, #5
 8015b9a:	005b      	lsls	r3, r3, #1
 8015b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015ba0:	4498      	add	r8, r3
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	461d      	mov	r5, r3
 8015ba6:	f04f 0600 	mov.w	r6, #0
 8015baa:	46a9      	mov	r9, r5
 8015bac:	46b2      	mov	sl, r6
 8015bae:	eb19 0309 	adds.w	r3, r9, r9
 8015bb2:	eb4a 040a 	adc.w	r4, sl, sl
 8015bb6:	4699      	mov	r9, r3
 8015bb8:	46a2      	mov	sl, r4
 8015bba:	eb19 0905 	adds.w	r9, r9, r5
 8015bbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8015bc2:	f04f 0100 	mov.w	r1, #0
 8015bc6:	f04f 0200 	mov.w	r2, #0
 8015bca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015bce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015bd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015bd6:	4689      	mov	r9, r1
 8015bd8:	4692      	mov	sl, r2
 8015bda:	eb19 0005 	adds.w	r0, r9, r5
 8015bde:	eb4a 0106 	adc.w	r1, sl, r6
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	461d      	mov	r5, r3
 8015be8:	f04f 0600 	mov.w	r6, #0
 8015bec:	196b      	adds	r3, r5, r5
 8015bee:	eb46 0406 	adc.w	r4, r6, r6
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	4623      	mov	r3, r4
 8015bf6:	f7f2 ff5f 	bl	8008ab8 <__aeabi_uldivmod>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	460c      	mov	r4, r1
 8015bfe:	461a      	mov	r2, r3
 8015c00:	4b6a      	ldr	r3, [pc, #424]	; (8015dac <UART_SetConfig+0x384>)
 8015c02:	fba3 1302 	umull	r1, r3, r3, r2
 8015c06:	095b      	lsrs	r3, r3, #5
 8015c08:	2164      	movs	r1, #100	; 0x64
 8015c0a:	fb01 f303 	mul.w	r3, r1, r3
 8015c0e:	1ad3      	subs	r3, r2, r3
 8015c10:	00db      	lsls	r3, r3, #3
 8015c12:	3332      	adds	r3, #50	; 0x32
 8015c14:	4a65      	ldr	r2, [pc, #404]	; (8015dac <UART_SetConfig+0x384>)
 8015c16:	fba2 2303 	umull	r2, r3, r2, r3
 8015c1a:	095b      	lsrs	r3, r3, #5
 8015c1c:	f003 0207 	and.w	r2, r3, #7
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	4442      	add	r2, r8
 8015c26:	609a      	str	r2, [r3, #8]
 8015c28:	e26f      	b.n	801610a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015c2a:	f7fd fe0d 	bl	8013848 <HAL_RCC_GetPCLK1Freq>
 8015c2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	461d      	mov	r5, r3
 8015c34:	f04f 0600 	mov.w	r6, #0
 8015c38:	46a8      	mov	r8, r5
 8015c3a:	46b1      	mov	r9, r6
 8015c3c:	eb18 0308 	adds.w	r3, r8, r8
 8015c40:	eb49 0409 	adc.w	r4, r9, r9
 8015c44:	4698      	mov	r8, r3
 8015c46:	46a1      	mov	r9, r4
 8015c48:	eb18 0805 	adds.w	r8, r8, r5
 8015c4c:	eb49 0906 	adc.w	r9, r9, r6
 8015c50:	f04f 0100 	mov.w	r1, #0
 8015c54:	f04f 0200 	mov.w	r2, #0
 8015c58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015c5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015c60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015c64:	4688      	mov	r8, r1
 8015c66:	4691      	mov	r9, r2
 8015c68:	eb18 0005 	adds.w	r0, r8, r5
 8015c6c:	eb49 0106 	adc.w	r1, r9, r6
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	461d      	mov	r5, r3
 8015c76:	f04f 0600 	mov.w	r6, #0
 8015c7a:	196b      	adds	r3, r5, r5
 8015c7c:	eb46 0406 	adc.w	r4, r6, r6
 8015c80:	461a      	mov	r2, r3
 8015c82:	4623      	mov	r3, r4
 8015c84:	f7f2 ff18 	bl	8008ab8 <__aeabi_uldivmod>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	460c      	mov	r4, r1
 8015c8c:	461a      	mov	r2, r3
 8015c8e:	4b47      	ldr	r3, [pc, #284]	; (8015dac <UART_SetConfig+0x384>)
 8015c90:	fba3 2302 	umull	r2, r3, r3, r2
 8015c94:	095b      	lsrs	r3, r3, #5
 8015c96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015c9a:	68bb      	ldr	r3, [r7, #8]
 8015c9c:	461d      	mov	r5, r3
 8015c9e:	f04f 0600 	mov.w	r6, #0
 8015ca2:	46a9      	mov	r9, r5
 8015ca4:	46b2      	mov	sl, r6
 8015ca6:	eb19 0309 	adds.w	r3, r9, r9
 8015caa:	eb4a 040a 	adc.w	r4, sl, sl
 8015cae:	4699      	mov	r9, r3
 8015cb0:	46a2      	mov	sl, r4
 8015cb2:	eb19 0905 	adds.w	r9, r9, r5
 8015cb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8015cba:	f04f 0100 	mov.w	r1, #0
 8015cbe:	f04f 0200 	mov.w	r2, #0
 8015cc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015cc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015cca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015cce:	4689      	mov	r9, r1
 8015cd0:	4692      	mov	sl, r2
 8015cd2:	eb19 0005 	adds.w	r0, r9, r5
 8015cd6:	eb4a 0106 	adc.w	r1, sl, r6
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	461d      	mov	r5, r3
 8015ce0:	f04f 0600 	mov.w	r6, #0
 8015ce4:	196b      	adds	r3, r5, r5
 8015ce6:	eb46 0406 	adc.w	r4, r6, r6
 8015cea:	461a      	mov	r2, r3
 8015cec:	4623      	mov	r3, r4
 8015cee:	f7f2 fee3 	bl	8008ab8 <__aeabi_uldivmod>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	460c      	mov	r4, r1
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	4b2c      	ldr	r3, [pc, #176]	; (8015dac <UART_SetConfig+0x384>)
 8015cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8015cfe:	095b      	lsrs	r3, r3, #5
 8015d00:	2164      	movs	r1, #100	; 0x64
 8015d02:	fb01 f303 	mul.w	r3, r1, r3
 8015d06:	1ad3      	subs	r3, r2, r3
 8015d08:	00db      	lsls	r3, r3, #3
 8015d0a:	3332      	adds	r3, #50	; 0x32
 8015d0c:	4a27      	ldr	r2, [pc, #156]	; (8015dac <UART_SetConfig+0x384>)
 8015d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8015d12:	095b      	lsrs	r3, r3, #5
 8015d14:	005b      	lsls	r3, r3, #1
 8015d16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015d1a:	4498      	add	r8, r3
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	461d      	mov	r5, r3
 8015d20:	f04f 0600 	mov.w	r6, #0
 8015d24:	46a9      	mov	r9, r5
 8015d26:	46b2      	mov	sl, r6
 8015d28:	eb19 0309 	adds.w	r3, r9, r9
 8015d2c:	eb4a 040a 	adc.w	r4, sl, sl
 8015d30:	4699      	mov	r9, r3
 8015d32:	46a2      	mov	sl, r4
 8015d34:	eb19 0905 	adds.w	r9, r9, r5
 8015d38:	eb4a 0a06 	adc.w	sl, sl, r6
 8015d3c:	f04f 0100 	mov.w	r1, #0
 8015d40:	f04f 0200 	mov.w	r2, #0
 8015d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015d48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015d4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015d50:	4689      	mov	r9, r1
 8015d52:	4692      	mov	sl, r2
 8015d54:	eb19 0005 	adds.w	r0, r9, r5
 8015d58:	eb4a 0106 	adc.w	r1, sl, r6
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	461d      	mov	r5, r3
 8015d62:	f04f 0600 	mov.w	r6, #0
 8015d66:	196b      	adds	r3, r5, r5
 8015d68:	eb46 0406 	adc.w	r4, r6, r6
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	4623      	mov	r3, r4
 8015d70:	f7f2 fea2 	bl	8008ab8 <__aeabi_uldivmod>
 8015d74:	4603      	mov	r3, r0
 8015d76:	460c      	mov	r4, r1
 8015d78:	461a      	mov	r2, r3
 8015d7a:	4b0c      	ldr	r3, [pc, #48]	; (8015dac <UART_SetConfig+0x384>)
 8015d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8015d80:	095b      	lsrs	r3, r3, #5
 8015d82:	2164      	movs	r1, #100	; 0x64
 8015d84:	fb01 f303 	mul.w	r3, r1, r3
 8015d88:	1ad3      	subs	r3, r2, r3
 8015d8a:	00db      	lsls	r3, r3, #3
 8015d8c:	3332      	adds	r3, #50	; 0x32
 8015d8e:	4a07      	ldr	r2, [pc, #28]	; (8015dac <UART_SetConfig+0x384>)
 8015d90:	fba2 2303 	umull	r2, r3, r2, r3
 8015d94:	095b      	lsrs	r3, r3, #5
 8015d96:	f003 0207 	and.w	r2, r3, #7
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	4442      	add	r2, r8
 8015da0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8015da2:	e1b2      	b.n	801610a <UART_SetConfig+0x6e2>
 8015da4:	40011000 	.word	0x40011000
 8015da8:	40011400 	.word	0x40011400
 8015dac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	4ad7      	ldr	r2, [pc, #860]	; (8016114 <UART_SetConfig+0x6ec>)
 8015db6:	4293      	cmp	r3, r2
 8015db8:	d005      	beq.n	8015dc6 <UART_SetConfig+0x39e>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	4ad6      	ldr	r2, [pc, #856]	; (8016118 <UART_SetConfig+0x6f0>)
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	f040 80d1 	bne.w	8015f68 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8015dc6:	f7fd fd53 	bl	8013870 <HAL_RCC_GetPCLK2Freq>
 8015dca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	469a      	mov	sl, r3
 8015dd0:	f04f 0b00 	mov.w	fp, #0
 8015dd4:	46d0      	mov	r8, sl
 8015dd6:	46d9      	mov	r9, fp
 8015dd8:	eb18 0308 	adds.w	r3, r8, r8
 8015ddc:	eb49 0409 	adc.w	r4, r9, r9
 8015de0:	4698      	mov	r8, r3
 8015de2:	46a1      	mov	r9, r4
 8015de4:	eb18 080a 	adds.w	r8, r8, sl
 8015de8:	eb49 090b 	adc.w	r9, r9, fp
 8015dec:	f04f 0100 	mov.w	r1, #0
 8015df0:	f04f 0200 	mov.w	r2, #0
 8015df4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015df8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015dfc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015e00:	4688      	mov	r8, r1
 8015e02:	4691      	mov	r9, r2
 8015e04:	eb1a 0508 	adds.w	r5, sl, r8
 8015e08:	eb4b 0609 	adc.w	r6, fp, r9
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	4619      	mov	r1, r3
 8015e12:	f04f 0200 	mov.w	r2, #0
 8015e16:	f04f 0300 	mov.w	r3, #0
 8015e1a:	f04f 0400 	mov.w	r4, #0
 8015e1e:	0094      	lsls	r4, r2, #2
 8015e20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015e24:	008b      	lsls	r3, r1, #2
 8015e26:	461a      	mov	r2, r3
 8015e28:	4623      	mov	r3, r4
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	4631      	mov	r1, r6
 8015e2e:	f7f2 fe43 	bl	8008ab8 <__aeabi_uldivmod>
 8015e32:	4603      	mov	r3, r0
 8015e34:	460c      	mov	r4, r1
 8015e36:	461a      	mov	r2, r3
 8015e38:	4bb8      	ldr	r3, [pc, #736]	; (801611c <UART_SetConfig+0x6f4>)
 8015e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8015e3e:	095b      	lsrs	r3, r3, #5
 8015e40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	469b      	mov	fp, r3
 8015e48:	f04f 0c00 	mov.w	ip, #0
 8015e4c:	46d9      	mov	r9, fp
 8015e4e:	46e2      	mov	sl, ip
 8015e50:	eb19 0309 	adds.w	r3, r9, r9
 8015e54:	eb4a 040a 	adc.w	r4, sl, sl
 8015e58:	4699      	mov	r9, r3
 8015e5a:	46a2      	mov	sl, r4
 8015e5c:	eb19 090b 	adds.w	r9, r9, fp
 8015e60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015e64:	f04f 0100 	mov.w	r1, #0
 8015e68:	f04f 0200 	mov.w	r2, #0
 8015e6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015e70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015e74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015e78:	4689      	mov	r9, r1
 8015e7a:	4692      	mov	sl, r2
 8015e7c:	eb1b 0509 	adds.w	r5, fp, r9
 8015e80:	eb4c 060a 	adc.w	r6, ip, sl
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	685b      	ldr	r3, [r3, #4]
 8015e88:	4619      	mov	r1, r3
 8015e8a:	f04f 0200 	mov.w	r2, #0
 8015e8e:	f04f 0300 	mov.w	r3, #0
 8015e92:	f04f 0400 	mov.w	r4, #0
 8015e96:	0094      	lsls	r4, r2, #2
 8015e98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015e9c:	008b      	lsls	r3, r1, #2
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	4623      	mov	r3, r4
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	4631      	mov	r1, r6
 8015ea6:	f7f2 fe07 	bl	8008ab8 <__aeabi_uldivmod>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	460c      	mov	r4, r1
 8015eae:	461a      	mov	r2, r3
 8015eb0:	4b9a      	ldr	r3, [pc, #616]	; (801611c <UART_SetConfig+0x6f4>)
 8015eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8015eb6:	095b      	lsrs	r3, r3, #5
 8015eb8:	2164      	movs	r1, #100	; 0x64
 8015eba:	fb01 f303 	mul.w	r3, r1, r3
 8015ebe:	1ad3      	subs	r3, r2, r3
 8015ec0:	011b      	lsls	r3, r3, #4
 8015ec2:	3332      	adds	r3, #50	; 0x32
 8015ec4:	4a95      	ldr	r2, [pc, #596]	; (801611c <UART_SetConfig+0x6f4>)
 8015ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8015eca:	095b      	lsrs	r3, r3, #5
 8015ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ed0:	4498      	add	r8, r3
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	469b      	mov	fp, r3
 8015ed6:	f04f 0c00 	mov.w	ip, #0
 8015eda:	46d9      	mov	r9, fp
 8015edc:	46e2      	mov	sl, ip
 8015ede:	eb19 0309 	adds.w	r3, r9, r9
 8015ee2:	eb4a 040a 	adc.w	r4, sl, sl
 8015ee6:	4699      	mov	r9, r3
 8015ee8:	46a2      	mov	sl, r4
 8015eea:	eb19 090b 	adds.w	r9, r9, fp
 8015eee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015ef2:	f04f 0100 	mov.w	r1, #0
 8015ef6:	f04f 0200 	mov.w	r2, #0
 8015efa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015efe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015f02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015f06:	4689      	mov	r9, r1
 8015f08:	4692      	mov	sl, r2
 8015f0a:	eb1b 0509 	adds.w	r5, fp, r9
 8015f0e:	eb4c 060a 	adc.w	r6, ip, sl
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	685b      	ldr	r3, [r3, #4]
 8015f16:	4619      	mov	r1, r3
 8015f18:	f04f 0200 	mov.w	r2, #0
 8015f1c:	f04f 0300 	mov.w	r3, #0
 8015f20:	f04f 0400 	mov.w	r4, #0
 8015f24:	0094      	lsls	r4, r2, #2
 8015f26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015f2a:	008b      	lsls	r3, r1, #2
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	4623      	mov	r3, r4
 8015f30:	4628      	mov	r0, r5
 8015f32:	4631      	mov	r1, r6
 8015f34:	f7f2 fdc0 	bl	8008ab8 <__aeabi_uldivmod>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	460c      	mov	r4, r1
 8015f3c:	461a      	mov	r2, r3
 8015f3e:	4b77      	ldr	r3, [pc, #476]	; (801611c <UART_SetConfig+0x6f4>)
 8015f40:	fba3 1302 	umull	r1, r3, r3, r2
 8015f44:	095b      	lsrs	r3, r3, #5
 8015f46:	2164      	movs	r1, #100	; 0x64
 8015f48:	fb01 f303 	mul.w	r3, r1, r3
 8015f4c:	1ad3      	subs	r3, r2, r3
 8015f4e:	011b      	lsls	r3, r3, #4
 8015f50:	3332      	adds	r3, #50	; 0x32
 8015f52:	4a72      	ldr	r2, [pc, #456]	; (801611c <UART_SetConfig+0x6f4>)
 8015f54:	fba2 2303 	umull	r2, r3, r2, r3
 8015f58:	095b      	lsrs	r3, r3, #5
 8015f5a:	f003 020f 	and.w	r2, r3, #15
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	4442      	add	r2, r8
 8015f64:	609a      	str	r2, [r3, #8]
 8015f66:	e0d0      	b.n	801610a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8015f68:	f7fd fc6e 	bl	8013848 <HAL_RCC_GetPCLK1Freq>
 8015f6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015f6e:	68bb      	ldr	r3, [r7, #8]
 8015f70:	469a      	mov	sl, r3
 8015f72:	f04f 0b00 	mov.w	fp, #0
 8015f76:	46d0      	mov	r8, sl
 8015f78:	46d9      	mov	r9, fp
 8015f7a:	eb18 0308 	adds.w	r3, r8, r8
 8015f7e:	eb49 0409 	adc.w	r4, r9, r9
 8015f82:	4698      	mov	r8, r3
 8015f84:	46a1      	mov	r9, r4
 8015f86:	eb18 080a 	adds.w	r8, r8, sl
 8015f8a:	eb49 090b 	adc.w	r9, r9, fp
 8015f8e:	f04f 0100 	mov.w	r1, #0
 8015f92:	f04f 0200 	mov.w	r2, #0
 8015f96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015f9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015f9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015fa2:	4688      	mov	r8, r1
 8015fa4:	4691      	mov	r9, r2
 8015fa6:	eb1a 0508 	adds.w	r5, sl, r8
 8015faa:	eb4b 0609 	adc.w	r6, fp, r9
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	4619      	mov	r1, r3
 8015fb4:	f04f 0200 	mov.w	r2, #0
 8015fb8:	f04f 0300 	mov.w	r3, #0
 8015fbc:	f04f 0400 	mov.w	r4, #0
 8015fc0:	0094      	lsls	r4, r2, #2
 8015fc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015fc6:	008b      	lsls	r3, r1, #2
 8015fc8:	461a      	mov	r2, r3
 8015fca:	4623      	mov	r3, r4
 8015fcc:	4628      	mov	r0, r5
 8015fce:	4631      	mov	r1, r6
 8015fd0:	f7f2 fd72 	bl	8008ab8 <__aeabi_uldivmod>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	460c      	mov	r4, r1
 8015fd8:	461a      	mov	r2, r3
 8015fda:	4b50      	ldr	r3, [pc, #320]	; (801611c <UART_SetConfig+0x6f4>)
 8015fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8015fe0:	095b      	lsrs	r3, r3, #5
 8015fe2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	469b      	mov	fp, r3
 8015fea:	f04f 0c00 	mov.w	ip, #0
 8015fee:	46d9      	mov	r9, fp
 8015ff0:	46e2      	mov	sl, ip
 8015ff2:	eb19 0309 	adds.w	r3, r9, r9
 8015ff6:	eb4a 040a 	adc.w	r4, sl, sl
 8015ffa:	4699      	mov	r9, r3
 8015ffc:	46a2      	mov	sl, r4
 8015ffe:	eb19 090b 	adds.w	r9, r9, fp
 8016002:	eb4a 0a0c 	adc.w	sl, sl, ip
 8016006:	f04f 0100 	mov.w	r1, #0
 801600a:	f04f 0200 	mov.w	r2, #0
 801600e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016012:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016016:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801601a:	4689      	mov	r9, r1
 801601c:	4692      	mov	sl, r2
 801601e:	eb1b 0509 	adds.w	r5, fp, r9
 8016022:	eb4c 060a 	adc.w	r6, ip, sl
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	4619      	mov	r1, r3
 801602c:	f04f 0200 	mov.w	r2, #0
 8016030:	f04f 0300 	mov.w	r3, #0
 8016034:	f04f 0400 	mov.w	r4, #0
 8016038:	0094      	lsls	r4, r2, #2
 801603a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801603e:	008b      	lsls	r3, r1, #2
 8016040:	461a      	mov	r2, r3
 8016042:	4623      	mov	r3, r4
 8016044:	4628      	mov	r0, r5
 8016046:	4631      	mov	r1, r6
 8016048:	f7f2 fd36 	bl	8008ab8 <__aeabi_uldivmod>
 801604c:	4603      	mov	r3, r0
 801604e:	460c      	mov	r4, r1
 8016050:	461a      	mov	r2, r3
 8016052:	4b32      	ldr	r3, [pc, #200]	; (801611c <UART_SetConfig+0x6f4>)
 8016054:	fba3 1302 	umull	r1, r3, r3, r2
 8016058:	095b      	lsrs	r3, r3, #5
 801605a:	2164      	movs	r1, #100	; 0x64
 801605c:	fb01 f303 	mul.w	r3, r1, r3
 8016060:	1ad3      	subs	r3, r2, r3
 8016062:	011b      	lsls	r3, r3, #4
 8016064:	3332      	adds	r3, #50	; 0x32
 8016066:	4a2d      	ldr	r2, [pc, #180]	; (801611c <UART_SetConfig+0x6f4>)
 8016068:	fba2 2303 	umull	r2, r3, r2, r3
 801606c:	095b      	lsrs	r3, r3, #5
 801606e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016072:	4498      	add	r8, r3
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	469b      	mov	fp, r3
 8016078:	f04f 0c00 	mov.w	ip, #0
 801607c:	46d9      	mov	r9, fp
 801607e:	46e2      	mov	sl, ip
 8016080:	eb19 0309 	adds.w	r3, r9, r9
 8016084:	eb4a 040a 	adc.w	r4, sl, sl
 8016088:	4699      	mov	r9, r3
 801608a:	46a2      	mov	sl, r4
 801608c:	eb19 090b 	adds.w	r9, r9, fp
 8016090:	eb4a 0a0c 	adc.w	sl, sl, ip
 8016094:	f04f 0100 	mov.w	r1, #0
 8016098:	f04f 0200 	mov.w	r2, #0
 801609c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80160a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80160a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80160a8:	4689      	mov	r9, r1
 80160aa:	4692      	mov	sl, r2
 80160ac:	eb1b 0509 	adds.w	r5, fp, r9
 80160b0:	eb4c 060a 	adc.w	r6, ip, sl
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	4619      	mov	r1, r3
 80160ba:	f04f 0200 	mov.w	r2, #0
 80160be:	f04f 0300 	mov.w	r3, #0
 80160c2:	f04f 0400 	mov.w	r4, #0
 80160c6:	0094      	lsls	r4, r2, #2
 80160c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80160cc:	008b      	lsls	r3, r1, #2
 80160ce:	461a      	mov	r2, r3
 80160d0:	4623      	mov	r3, r4
 80160d2:	4628      	mov	r0, r5
 80160d4:	4631      	mov	r1, r6
 80160d6:	f7f2 fcef 	bl	8008ab8 <__aeabi_uldivmod>
 80160da:	4603      	mov	r3, r0
 80160dc:	460c      	mov	r4, r1
 80160de:	461a      	mov	r2, r3
 80160e0:	4b0e      	ldr	r3, [pc, #56]	; (801611c <UART_SetConfig+0x6f4>)
 80160e2:	fba3 1302 	umull	r1, r3, r3, r2
 80160e6:	095b      	lsrs	r3, r3, #5
 80160e8:	2164      	movs	r1, #100	; 0x64
 80160ea:	fb01 f303 	mul.w	r3, r1, r3
 80160ee:	1ad3      	subs	r3, r2, r3
 80160f0:	011b      	lsls	r3, r3, #4
 80160f2:	3332      	adds	r3, #50	; 0x32
 80160f4:	4a09      	ldr	r2, [pc, #36]	; (801611c <UART_SetConfig+0x6f4>)
 80160f6:	fba2 2303 	umull	r2, r3, r2, r3
 80160fa:	095b      	lsrs	r3, r3, #5
 80160fc:	f003 020f 	and.w	r2, r3, #15
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	4442      	add	r2, r8
 8016106:	609a      	str	r2, [r3, #8]
}
 8016108:	e7ff      	b.n	801610a <UART_SetConfig+0x6e2>
 801610a:	bf00      	nop
 801610c:	3714      	adds	r7, #20
 801610e:	46bd      	mov	sp, r7
 8016110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016114:	40011000 	.word	0x40011000
 8016118:	40011400 	.word	0x40011400
 801611c:	51eb851f 	.word	0x51eb851f

08016120 <round>:
 8016120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016122:	ec57 6b10 	vmov	r6, r7, d0
 8016126:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801612a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801612e:	2c13      	cmp	r4, #19
 8016130:	463b      	mov	r3, r7
 8016132:	463d      	mov	r5, r7
 8016134:	dc17      	bgt.n	8016166 <round+0x46>
 8016136:	2c00      	cmp	r4, #0
 8016138:	da09      	bge.n	801614e <round+0x2e>
 801613a:	3401      	adds	r4, #1
 801613c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8016140:	d103      	bne.n	801614a <round+0x2a>
 8016142:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016146:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801614a:	2100      	movs	r1, #0
 801614c:	e02c      	b.n	80161a8 <round+0x88>
 801614e:	4a18      	ldr	r2, [pc, #96]	; (80161b0 <round+0x90>)
 8016150:	4122      	asrs	r2, r4
 8016152:	4217      	tst	r7, r2
 8016154:	d100      	bne.n	8016158 <round+0x38>
 8016156:	b19e      	cbz	r6, 8016180 <round+0x60>
 8016158:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801615c:	4123      	asrs	r3, r4
 801615e:	442b      	add	r3, r5
 8016160:	ea23 0302 	bic.w	r3, r3, r2
 8016164:	e7f1      	b.n	801614a <round+0x2a>
 8016166:	2c33      	cmp	r4, #51	; 0x33
 8016168:	dd0d      	ble.n	8016186 <round+0x66>
 801616a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801616e:	d107      	bne.n	8016180 <round+0x60>
 8016170:	4630      	mov	r0, r6
 8016172:	4639      	mov	r1, r7
 8016174:	ee10 2a10 	vmov	r2, s0
 8016178:	f7f1 ffc0 	bl	80080fc <__adddf3>
 801617c:	4606      	mov	r6, r0
 801617e:	460f      	mov	r7, r1
 8016180:	ec47 6b10 	vmov	d0, r6, r7
 8016184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016186:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801618a:	f04f 30ff 	mov.w	r0, #4294967295
 801618e:	40d0      	lsrs	r0, r2
 8016190:	4206      	tst	r6, r0
 8016192:	d0f5      	beq.n	8016180 <round+0x60>
 8016194:	2201      	movs	r2, #1
 8016196:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801619a:	fa02 f404 	lsl.w	r4, r2, r4
 801619e:	1931      	adds	r1, r6, r4
 80161a0:	bf28      	it	cs
 80161a2:	189b      	addcs	r3, r3, r2
 80161a4:	ea21 0100 	bic.w	r1, r1, r0
 80161a8:	461f      	mov	r7, r3
 80161aa:	460e      	mov	r6, r1
 80161ac:	e7e8      	b.n	8016180 <round+0x60>
 80161ae:	bf00      	nop
 80161b0:	000fffff 	.word	0x000fffff

080161b4 <__errno>:
 80161b4:	4b01      	ldr	r3, [pc, #4]	; (80161bc <__errno+0x8>)
 80161b6:	6818      	ldr	r0, [r3, #0]
 80161b8:	4770      	bx	lr
 80161ba:	bf00      	nop
 80161bc:	2000008c 	.word	0x2000008c

080161c0 <__libc_init_array>:
 80161c0:	b570      	push	{r4, r5, r6, lr}
 80161c2:	4e0d      	ldr	r6, [pc, #52]	; (80161f8 <__libc_init_array+0x38>)
 80161c4:	4c0d      	ldr	r4, [pc, #52]	; (80161fc <__libc_init_array+0x3c>)
 80161c6:	1ba4      	subs	r4, r4, r6
 80161c8:	10a4      	asrs	r4, r4, #2
 80161ca:	2500      	movs	r5, #0
 80161cc:	42a5      	cmp	r5, r4
 80161ce:	d109      	bne.n	80161e4 <__libc_init_array+0x24>
 80161d0:	4e0b      	ldr	r6, [pc, #44]	; (8016200 <__libc_init_array+0x40>)
 80161d2:	4c0c      	ldr	r4, [pc, #48]	; (8016204 <__libc_init_array+0x44>)
 80161d4:	f002 fbac 	bl	8018930 <_init>
 80161d8:	1ba4      	subs	r4, r4, r6
 80161da:	10a4      	asrs	r4, r4, #2
 80161dc:	2500      	movs	r5, #0
 80161de:	42a5      	cmp	r5, r4
 80161e0:	d105      	bne.n	80161ee <__libc_init_array+0x2e>
 80161e2:	bd70      	pop	{r4, r5, r6, pc}
 80161e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80161e8:	4798      	blx	r3
 80161ea:	3501      	adds	r5, #1
 80161ec:	e7ee      	b.n	80161cc <__libc_init_array+0xc>
 80161ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80161f2:	4798      	blx	r3
 80161f4:	3501      	adds	r5, #1
 80161f6:	e7f2      	b.n	80161de <__libc_init_array+0x1e>
 80161f8:	08018de0 	.word	0x08018de0
 80161fc:	08018de0 	.word	0x08018de0
 8016200:	08018de0 	.word	0x08018de0
 8016204:	08018de4 	.word	0x08018de4

08016208 <memcpy>:
 8016208:	b510      	push	{r4, lr}
 801620a:	1e43      	subs	r3, r0, #1
 801620c:	440a      	add	r2, r1
 801620e:	4291      	cmp	r1, r2
 8016210:	d100      	bne.n	8016214 <memcpy+0xc>
 8016212:	bd10      	pop	{r4, pc}
 8016214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016218:	f803 4f01 	strb.w	r4, [r3, #1]!
 801621c:	e7f7      	b.n	801620e <memcpy+0x6>

0801621e <memset>:
 801621e:	4402      	add	r2, r0
 8016220:	4603      	mov	r3, r0
 8016222:	4293      	cmp	r3, r2
 8016224:	d100      	bne.n	8016228 <memset+0xa>
 8016226:	4770      	bx	lr
 8016228:	f803 1b01 	strb.w	r1, [r3], #1
 801622c:	e7f9      	b.n	8016222 <memset+0x4>

0801622e <__cvt>:
 801622e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016232:	ec55 4b10 	vmov	r4, r5, d0
 8016236:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016238:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801623c:	2d00      	cmp	r5, #0
 801623e:	460e      	mov	r6, r1
 8016240:	4691      	mov	r9, r2
 8016242:	4619      	mov	r1, r3
 8016244:	bfb8      	it	lt
 8016246:	4622      	movlt	r2, r4
 8016248:	462b      	mov	r3, r5
 801624a:	f027 0720 	bic.w	r7, r7, #32
 801624e:	bfbb      	ittet	lt
 8016250:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016254:	461d      	movlt	r5, r3
 8016256:	2300      	movge	r3, #0
 8016258:	232d      	movlt	r3, #45	; 0x2d
 801625a:	bfb8      	it	lt
 801625c:	4614      	movlt	r4, r2
 801625e:	2f46      	cmp	r7, #70	; 0x46
 8016260:	700b      	strb	r3, [r1, #0]
 8016262:	d004      	beq.n	801626e <__cvt+0x40>
 8016264:	2f45      	cmp	r7, #69	; 0x45
 8016266:	d100      	bne.n	801626a <__cvt+0x3c>
 8016268:	3601      	adds	r6, #1
 801626a:	2102      	movs	r1, #2
 801626c:	e000      	b.n	8016270 <__cvt+0x42>
 801626e:	2103      	movs	r1, #3
 8016270:	ab03      	add	r3, sp, #12
 8016272:	9301      	str	r3, [sp, #4]
 8016274:	ab02      	add	r3, sp, #8
 8016276:	9300      	str	r3, [sp, #0]
 8016278:	4632      	mov	r2, r6
 801627a:	4653      	mov	r3, sl
 801627c:	ec45 4b10 	vmov	d0, r4, r5
 8016280:	f000 fdfa 	bl	8016e78 <_dtoa_r>
 8016284:	2f47      	cmp	r7, #71	; 0x47
 8016286:	4680      	mov	r8, r0
 8016288:	d102      	bne.n	8016290 <__cvt+0x62>
 801628a:	f019 0f01 	tst.w	r9, #1
 801628e:	d026      	beq.n	80162de <__cvt+0xb0>
 8016290:	2f46      	cmp	r7, #70	; 0x46
 8016292:	eb08 0906 	add.w	r9, r8, r6
 8016296:	d111      	bne.n	80162bc <__cvt+0x8e>
 8016298:	f898 3000 	ldrb.w	r3, [r8]
 801629c:	2b30      	cmp	r3, #48	; 0x30
 801629e:	d10a      	bne.n	80162b6 <__cvt+0x88>
 80162a0:	2200      	movs	r2, #0
 80162a2:	2300      	movs	r3, #0
 80162a4:	4620      	mov	r0, r4
 80162a6:	4629      	mov	r1, r5
 80162a8:	f7f2 fb46 	bl	8008938 <__aeabi_dcmpeq>
 80162ac:	b918      	cbnz	r0, 80162b6 <__cvt+0x88>
 80162ae:	f1c6 0601 	rsb	r6, r6, #1
 80162b2:	f8ca 6000 	str.w	r6, [sl]
 80162b6:	f8da 3000 	ldr.w	r3, [sl]
 80162ba:	4499      	add	r9, r3
 80162bc:	2200      	movs	r2, #0
 80162be:	2300      	movs	r3, #0
 80162c0:	4620      	mov	r0, r4
 80162c2:	4629      	mov	r1, r5
 80162c4:	f7f2 fb38 	bl	8008938 <__aeabi_dcmpeq>
 80162c8:	b938      	cbnz	r0, 80162da <__cvt+0xac>
 80162ca:	2230      	movs	r2, #48	; 0x30
 80162cc:	9b03      	ldr	r3, [sp, #12]
 80162ce:	454b      	cmp	r3, r9
 80162d0:	d205      	bcs.n	80162de <__cvt+0xb0>
 80162d2:	1c59      	adds	r1, r3, #1
 80162d4:	9103      	str	r1, [sp, #12]
 80162d6:	701a      	strb	r2, [r3, #0]
 80162d8:	e7f8      	b.n	80162cc <__cvt+0x9e>
 80162da:	f8cd 900c 	str.w	r9, [sp, #12]
 80162de:	9b03      	ldr	r3, [sp, #12]
 80162e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162e2:	eba3 0308 	sub.w	r3, r3, r8
 80162e6:	4640      	mov	r0, r8
 80162e8:	6013      	str	r3, [r2, #0]
 80162ea:	b004      	add	sp, #16
 80162ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080162f0 <__exponent>:
 80162f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162f2:	2900      	cmp	r1, #0
 80162f4:	4604      	mov	r4, r0
 80162f6:	bfba      	itte	lt
 80162f8:	4249      	neglt	r1, r1
 80162fa:	232d      	movlt	r3, #45	; 0x2d
 80162fc:	232b      	movge	r3, #43	; 0x2b
 80162fe:	2909      	cmp	r1, #9
 8016300:	f804 2b02 	strb.w	r2, [r4], #2
 8016304:	7043      	strb	r3, [r0, #1]
 8016306:	dd20      	ble.n	801634a <__exponent+0x5a>
 8016308:	f10d 0307 	add.w	r3, sp, #7
 801630c:	461f      	mov	r7, r3
 801630e:	260a      	movs	r6, #10
 8016310:	fb91 f5f6 	sdiv	r5, r1, r6
 8016314:	fb06 1115 	mls	r1, r6, r5, r1
 8016318:	3130      	adds	r1, #48	; 0x30
 801631a:	2d09      	cmp	r5, #9
 801631c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016320:	f103 32ff 	add.w	r2, r3, #4294967295
 8016324:	4629      	mov	r1, r5
 8016326:	dc09      	bgt.n	801633c <__exponent+0x4c>
 8016328:	3130      	adds	r1, #48	; 0x30
 801632a:	3b02      	subs	r3, #2
 801632c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016330:	42bb      	cmp	r3, r7
 8016332:	4622      	mov	r2, r4
 8016334:	d304      	bcc.n	8016340 <__exponent+0x50>
 8016336:	1a10      	subs	r0, r2, r0
 8016338:	b003      	add	sp, #12
 801633a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801633c:	4613      	mov	r3, r2
 801633e:	e7e7      	b.n	8016310 <__exponent+0x20>
 8016340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016344:	f804 2b01 	strb.w	r2, [r4], #1
 8016348:	e7f2      	b.n	8016330 <__exponent+0x40>
 801634a:	2330      	movs	r3, #48	; 0x30
 801634c:	4419      	add	r1, r3
 801634e:	7083      	strb	r3, [r0, #2]
 8016350:	1d02      	adds	r2, r0, #4
 8016352:	70c1      	strb	r1, [r0, #3]
 8016354:	e7ef      	b.n	8016336 <__exponent+0x46>
	...

08016358 <_printf_float>:
 8016358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635c:	b08d      	sub	sp, #52	; 0x34
 801635e:	460c      	mov	r4, r1
 8016360:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8016364:	4616      	mov	r6, r2
 8016366:	461f      	mov	r7, r3
 8016368:	4605      	mov	r5, r0
 801636a:	f001 fcb7 	bl	8017cdc <_localeconv_r>
 801636e:	6803      	ldr	r3, [r0, #0]
 8016370:	9304      	str	r3, [sp, #16]
 8016372:	4618      	mov	r0, r3
 8016374:	f7f1 fe64 	bl	8008040 <strlen>
 8016378:	2300      	movs	r3, #0
 801637a:	930a      	str	r3, [sp, #40]	; 0x28
 801637c:	f8d8 3000 	ldr.w	r3, [r8]
 8016380:	9005      	str	r0, [sp, #20]
 8016382:	3307      	adds	r3, #7
 8016384:	f023 0307 	bic.w	r3, r3, #7
 8016388:	f103 0208 	add.w	r2, r3, #8
 801638c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016390:	f8d4 b000 	ldr.w	fp, [r4]
 8016394:	f8c8 2000 	str.w	r2, [r8]
 8016398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801639c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80163a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80163a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80163a8:	9307      	str	r3, [sp, #28]
 80163aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80163ae:	f04f 32ff 	mov.w	r2, #4294967295
 80163b2:	4ba7      	ldr	r3, [pc, #668]	; (8016650 <_printf_float+0x2f8>)
 80163b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163b8:	f7f2 faf0 	bl	800899c <__aeabi_dcmpun>
 80163bc:	bb70      	cbnz	r0, 801641c <_printf_float+0xc4>
 80163be:	f04f 32ff 	mov.w	r2, #4294967295
 80163c2:	4ba3      	ldr	r3, [pc, #652]	; (8016650 <_printf_float+0x2f8>)
 80163c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163c8:	f7f2 faca 	bl	8008960 <__aeabi_dcmple>
 80163cc:	bb30      	cbnz	r0, 801641c <_printf_float+0xc4>
 80163ce:	2200      	movs	r2, #0
 80163d0:	2300      	movs	r3, #0
 80163d2:	4640      	mov	r0, r8
 80163d4:	4649      	mov	r1, r9
 80163d6:	f7f2 fab9 	bl	800894c <__aeabi_dcmplt>
 80163da:	b110      	cbz	r0, 80163e2 <_printf_float+0x8a>
 80163dc:	232d      	movs	r3, #45	; 0x2d
 80163de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163e2:	4a9c      	ldr	r2, [pc, #624]	; (8016654 <_printf_float+0x2fc>)
 80163e4:	4b9c      	ldr	r3, [pc, #624]	; (8016658 <_printf_float+0x300>)
 80163e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80163ea:	bf8c      	ite	hi
 80163ec:	4690      	movhi	r8, r2
 80163ee:	4698      	movls	r8, r3
 80163f0:	2303      	movs	r3, #3
 80163f2:	f02b 0204 	bic.w	r2, fp, #4
 80163f6:	6123      	str	r3, [r4, #16]
 80163f8:	6022      	str	r2, [r4, #0]
 80163fa:	f04f 0900 	mov.w	r9, #0
 80163fe:	9700      	str	r7, [sp, #0]
 8016400:	4633      	mov	r3, r6
 8016402:	aa0b      	add	r2, sp, #44	; 0x2c
 8016404:	4621      	mov	r1, r4
 8016406:	4628      	mov	r0, r5
 8016408:	f000 f9e6 	bl	80167d8 <_printf_common>
 801640c:	3001      	adds	r0, #1
 801640e:	f040 808d 	bne.w	801652c <_printf_float+0x1d4>
 8016412:	f04f 30ff 	mov.w	r0, #4294967295
 8016416:	b00d      	add	sp, #52	; 0x34
 8016418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801641c:	4642      	mov	r2, r8
 801641e:	464b      	mov	r3, r9
 8016420:	4640      	mov	r0, r8
 8016422:	4649      	mov	r1, r9
 8016424:	f7f2 faba 	bl	800899c <__aeabi_dcmpun>
 8016428:	b110      	cbz	r0, 8016430 <_printf_float+0xd8>
 801642a:	4a8c      	ldr	r2, [pc, #560]	; (801665c <_printf_float+0x304>)
 801642c:	4b8c      	ldr	r3, [pc, #560]	; (8016660 <_printf_float+0x308>)
 801642e:	e7da      	b.n	80163e6 <_printf_float+0x8e>
 8016430:	6861      	ldr	r1, [r4, #4]
 8016432:	1c4b      	adds	r3, r1, #1
 8016434:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8016438:	a80a      	add	r0, sp, #40	; 0x28
 801643a:	d13e      	bne.n	80164ba <_printf_float+0x162>
 801643c:	2306      	movs	r3, #6
 801643e:	6063      	str	r3, [r4, #4]
 8016440:	2300      	movs	r3, #0
 8016442:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016446:	ab09      	add	r3, sp, #36	; 0x24
 8016448:	9300      	str	r3, [sp, #0]
 801644a:	ec49 8b10 	vmov	d0, r8, r9
 801644e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016452:	6022      	str	r2, [r4, #0]
 8016454:	f8cd a004 	str.w	sl, [sp, #4]
 8016458:	6861      	ldr	r1, [r4, #4]
 801645a:	4628      	mov	r0, r5
 801645c:	f7ff fee7 	bl	801622e <__cvt>
 8016460:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8016464:	2b47      	cmp	r3, #71	; 0x47
 8016466:	4680      	mov	r8, r0
 8016468:	d109      	bne.n	801647e <_printf_float+0x126>
 801646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801646c:	1cd8      	adds	r0, r3, #3
 801646e:	db02      	blt.n	8016476 <_printf_float+0x11e>
 8016470:	6862      	ldr	r2, [r4, #4]
 8016472:	4293      	cmp	r3, r2
 8016474:	dd47      	ble.n	8016506 <_printf_float+0x1ae>
 8016476:	f1aa 0a02 	sub.w	sl, sl, #2
 801647a:	fa5f fa8a 	uxtb.w	sl, sl
 801647e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016482:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016484:	d824      	bhi.n	80164d0 <_printf_float+0x178>
 8016486:	3901      	subs	r1, #1
 8016488:	4652      	mov	r2, sl
 801648a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801648e:	9109      	str	r1, [sp, #36]	; 0x24
 8016490:	f7ff ff2e 	bl	80162f0 <__exponent>
 8016494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016496:	1813      	adds	r3, r2, r0
 8016498:	2a01      	cmp	r2, #1
 801649a:	4681      	mov	r9, r0
 801649c:	6123      	str	r3, [r4, #16]
 801649e:	dc02      	bgt.n	80164a6 <_printf_float+0x14e>
 80164a0:	6822      	ldr	r2, [r4, #0]
 80164a2:	07d1      	lsls	r1, r2, #31
 80164a4:	d501      	bpl.n	80164aa <_printf_float+0x152>
 80164a6:	3301      	adds	r3, #1
 80164a8:	6123      	str	r3, [r4, #16]
 80164aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d0a5      	beq.n	80163fe <_printf_float+0xa6>
 80164b2:	232d      	movs	r3, #45	; 0x2d
 80164b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80164b8:	e7a1      	b.n	80163fe <_printf_float+0xa6>
 80164ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80164be:	f000 8177 	beq.w	80167b0 <_printf_float+0x458>
 80164c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80164c6:	d1bb      	bne.n	8016440 <_printf_float+0xe8>
 80164c8:	2900      	cmp	r1, #0
 80164ca:	d1b9      	bne.n	8016440 <_printf_float+0xe8>
 80164cc:	2301      	movs	r3, #1
 80164ce:	e7b6      	b.n	801643e <_printf_float+0xe6>
 80164d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80164d4:	d119      	bne.n	801650a <_printf_float+0x1b2>
 80164d6:	2900      	cmp	r1, #0
 80164d8:	6863      	ldr	r3, [r4, #4]
 80164da:	dd0c      	ble.n	80164f6 <_printf_float+0x19e>
 80164dc:	6121      	str	r1, [r4, #16]
 80164de:	b913      	cbnz	r3, 80164e6 <_printf_float+0x18e>
 80164e0:	6822      	ldr	r2, [r4, #0]
 80164e2:	07d2      	lsls	r2, r2, #31
 80164e4:	d502      	bpl.n	80164ec <_printf_float+0x194>
 80164e6:	3301      	adds	r3, #1
 80164e8:	440b      	add	r3, r1
 80164ea:	6123      	str	r3, [r4, #16]
 80164ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80164f0:	f04f 0900 	mov.w	r9, #0
 80164f4:	e7d9      	b.n	80164aa <_printf_float+0x152>
 80164f6:	b913      	cbnz	r3, 80164fe <_printf_float+0x1a6>
 80164f8:	6822      	ldr	r2, [r4, #0]
 80164fa:	07d0      	lsls	r0, r2, #31
 80164fc:	d501      	bpl.n	8016502 <_printf_float+0x1aa>
 80164fe:	3302      	adds	r3, #2
 8016500:	e7f3      	b.n	80164ea <_printf_float+0x192>
 8016502:	2301      	movs	r3, #1
 8016504:	e7f1      	b.n	80164ea <_printf_float+0x192>
 8016506:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801650a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801650e:	4293      	cmp	r3, r2
 8016510:	db05      	blt.n	801651e <_printf_float+0x1c6>
 8016512:	6822      	ldr	r2, [r4, #0]
 8016514:	6123      	str	r3, [r4, #16]
 8016516:	07d1      	lsls	r1, r2, #31
 8016518:	d5e8      	bpl.n	80164ec <_printf_float+0x194>
 801651a:	3301      	adds	r3, #1
 801651c:	e7e5      	b.n	80164ea <_printf_float+0x192>
 801651e:	2b00      	cmp	r3, #0
 8016520:	bfd4      	ite	le
 8016522:	f1c3 0302 	rsble	r3, r3, #2
 8016526:	2301      	movgt	r3, #1
 8016528:	4413      	add	r3, r2
 801652a:	e7de      	b.n	80164ea <_printf_float+0x192>
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	055a      	lsls	r2, r3, #21
 8016530:	d407      	bmi.n	8016542 <_printf_float+0x1ea>
 8016532:	6923      	ldr	r3, [r4, #16]
 8016534:	4642      	mov	r2, r8
 8016536:	4631      	mov	r1, r6
 8016538:	4628      	mov	r0, r5
 801653a:	47b8      	blx	r7
 801653c:	3001      	adds	r0, #1
 801653e:	d12b      	bne.n	8016598 <_printf_float+0x240>
 8016540:	e767      	b.n	8016412 <_printf_float+0xba>
 8016542:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016546:	f240 80dc 	bls.w	8016702 <_printf_float+0x3aa>
 801654a:	2200      	movs	r2, #0
 801654c:	2300      	movs	r3, #0
 801654e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016552:	f7f2 f9f1 	bl	8008938 <__aeabi_dcmpeq>
 8016556:	2800      	cmp	r0, #0
 8016558:	d033      	beq.n	80165c2 <_printf_float+0x26a>
 801655a:	2301      	movs	r3, #1
 801655c:	4a41      	ldr	r2, [pc, #260]	; (8016664 <_printf_float+0x30c>)
 801655e:	4631      	mov	r1, r6
 8016560:	4628      	mov	r0, r5
 8016562:	47b8      	blx	r7
 8016564:	3001      	adds	r0, #1
 8016566:	f43f af54 	beq.w	8016412 <_printf_float+0xba>
 801656a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801656e:	429a      	cmp	r2, r3
 8016570:	db02      	blt.n	8016578 <_printf_float+0x220>
 8016572:	6823      	ldr	r3, [r4, #0]
 8016574:	07d8      	lsls	r0, r3, #31
 8016576:	d50f      	bpl.n	8016598 <_printf_float+0x240>
 8016578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801657c:	4631      	mov	r1, r6
 801657e:	4628      	mov	r0, r5
 8016580:	47b8      	blx	r7
 8016582:	3001      	adds	r0, #1
 8016584:	f43f af45 	beq.w	8016412 <_printf_float+0xba>
 8016588:	f04f 0800 	mov.w	r8, #0
 801658c:	f104 091a 	add.w	r9, r4, #26
 8016590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016592:	3b01      	subs	r3, #1
 8016594:	4543      	cmp	r3, r8
 8016596:	dc09      	bgt.n	80165ac <_printf_float+0x254>
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	079b      	lsls	r3, r3, #30
 801659c:	f100 8103 	bmi.w	80167a6 <_printf_float+0x44e>
 80165a0:	68e0      	ldr	r0, [r4, #12]
 80165a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165a4:	4298      	cmp	r0, r3
 80165a6:	bfb8      	it	lt
 80165a8:	4618      	movlt	r0, r3
 80165aa:	e734      	b.n	8016416 <_printf_float+0xbe>
 80165ac:	2301      	movs	r3, #1
 80165ae:	464a      	mov	r2, r9
 80165b0:	4631      	mov	r1, r6
 80165b2:	4628      	mov	r0, r5
 80165b4:	47b8      	blx	r7
 80165b6:	3001      	adds	r0, #1
 80165b8:	f43f af2b 	beq.w	8016412 <_printf_float+0xba>
 80165bc:	f108 0801 	add.w	r8, r8, #1
 80165c0:	e7e6      	b.n	8016590 <_printf_float+0x238>
 80165c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	dc2b      	bgt.n	8016620 <_printf_float+0x2c8>
 80165c8:	2301      	movs	r3, #1
 80165ca:	4a26      	ldr	r2, [pc, #152]	; (8016664 <_printf_float+0x30c>)
 80165cc:	4631      	mov	r1, r6
 80165ce:	4628      	mov	r0, r5
 80165d0:	47b8      	blx	r7
 80165d2:	3001      	adds	r0, #1
 80165d4:	f43f af1d 	beq.w	8016412 <_printf_float+0xba>
 80165d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165da:	b923      	cbnz	r3, 80165e6 <_printf_float+0x28e>
 80165dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165de:	b913      	cbnz	r3, 80165e6 <_printf_float+0x28e>
 80165e0:	6823      	ldr	r3, [r4, #0]
 80165e2:	07d9      	lsls	r1, r3, #31
 80165e4:	d5d8      	bpl.n	8016598 <_printf_float+0x240>
 80165e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165ea:	4631      	mov	r1, r6
 80165ec:	4628      	mov	r0, r5
 80165ee:	47b8      	blx	r7
 80165f0:	3001      	adds	r0, #1
 80165f2:	f43f af0e 	beq.w	8016412 <_printf_float+0xba>
 80165f6:	f04f 0900 	mov.w	r9, #0
 80165fa:	f104 0a1a 	add.w	sl, r4, #26
 80165fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016600:	425b      	negs	r3, r3
 8016602:	454b      	cmp	r3, r9
 8016604:	dc01      	bgt.n	801660a <_printf_float+0x2b2>
 8016606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016608:	e794      	b.n	8016534 <_printf_float+0x1dc>
 801660a:	2301      	movs	r3, #1
 801660c:	4652      	mov	r2, sl
 801660e:	4631      	mov	r1, r6
 8016610:	4628      	mov	r0, r5
 8016612:	47b8      	blx	r7
 8016614:	3001      	adds	r0, #1
 8016616:	f43f aefc 	beq.w	8016412 <_printf_float+0xba>
 801661a:	f109 0901 	add.w	r9, r9, #1
 801661e:	e7ee      	b.n	80165fe <_printf_float+0x2a6>
 8016620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016624:	429a      	cmp	r2, r3
 8016626:	bfa8      	it	ge
 8016628:	461a      	movge	r2, r3
 801662a:	2a00      	cmp	r2, #0
 801662c:	4691      	mov	r9, r2
 801662e:	dd07      	ble.n	8016640 <_printf_float+0x2e8>
 8016630:	4613      	mov	r3, r2
 8016632:	4631      	mov	r1, r6
 8016634:	4642      	mov	r2, r8
 8016636:	4628      	mov	r0, r5
 8016638:	47b8      	blx	r7
 801663a:	3001      	adds	r0, #1
 801663c:	f43f aee9 	beq.w	8016412 <_printf_float+0xba>
 8016640:	f104 031a 	add.w	r3, r4, #26
 8016644:	f04f 0b00 	mov.w	fp, #0
 8016648:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801664c:	9306      	str	r3, [sp, #24]
 801664e:	e015      	b.n	801667c <_printf_float+0x324>
 8016650:	7fefffff 	.word	0x7fefffff
 8016654:	08018b20 	.word	0x08018b20
 8016658:	08018b1c 	.word	0x08018b1c
 801665c:	08018b28 	.word	0x08018b28
 8016660:	08018b24 	.word	0x08018b24
 8016664:	08018b2c 	.word	0x08018b2c
 8016668:	2301      	movs	r3, #1
 801666a:	9a06      	ldr	r2, [sp, #24]
 801666c:	4631      	mov	r1, r6
 801666e:	4628      	mov	r0, r5
 8016670:	47b8      	blx	r7
 8016672:	3001      	adds	r0, #1
 8016674:	f43f aecd 	beq.w	8016412 <_printf_float+0xba>
 8016678:	f10b 0b01 	add.w	fp, fp, #1
 801667c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016680:	ebaa 0309 	sub.w	r3, sl, r9
 8016684:	455b      	cmp	r3, fp
 8016686:	dcef      	bgt.n	8016668 <_printf_float+0x310>
 8016688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801668c:	429a      	cmp	r2, r3
 801668e:	44d0      	add	r8, sl
 8016690:	db15      	blt.n	80166be <_printf_float+0x366>
 8016692:	6823      	ldr	r3, [r4, #0]
 8016694:	07da      	lsls	r2, r3, #31
 8016696:	d412      	bmi.n	80166be <_printf_float+0x366>
 8016698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801669a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801669c:	eba3 020a 	sub.w	r2, r3, sl
 80166a0:	eba3 0a01 	sub.w	sl, r3, r1
 80166a4:	4592      	cmp	sl, r2
 80166a6:	bfa8      	it	ge
 80166a8:	4692      	movge	sl, r2
 80166aa:	f1ba 0f00 	cmp.w	sl, #0
 80166ae:	dc0e      	bgt.n	80166ce <_printf_float+0x376>
 80166b0:	f04f 0800 	mov.w	r8, #0
 80166b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80166b8:	f104 091a 	add.w	r9, r4, #26
 80166bc:	e019      	b.n	80166f2 <_printf_float+0x39a>
 80166be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166c2:	4631      	mov	r1, r6
 80166c4:	4628      	mov	r0, r5
 80166c6:	47b8      	blx	r7
 80166c8:	3001      	adds	r0, #1
 80166ca:	d1e5      	bne.n	8016698 <_printf_float+0x340>
 80166cc:	e6a1      	b.n	8016412 <_printf_float+0xba>
 80166ce:	4653      	mov	r3, sl
 80166d0:	4642      	mov	r2, r8
 80166d2:	4631      	mov	r1, r6
 80166d4:	4628      	mov	r0, r5
 80166d6:	47b8      	blx	r7
 80166d8:	3001      	adds	r0, #1
 80166da:	d1e9      	bne.n	80166b0 <_printf_float+0x358>
 80166dc:	e699      	b.n	8016412 <_printf_float+0xba>
 80166de:	2301      	movs	r3, #1
 80166e0:	464a      	mov	r2, r9
 80166e2:	4631      	mov	r1, r6
 80166e4:	4628      	mov	r0, r5
 80166e6:	47b8      	blx	r7
 80166e8:	3001      	adds	r0, #1
 80166ea:	f43f ae92 	beq.w	8016412 <_printf_float+0xba>
 80166ee:	f108 0801 	add.w	r8, r8, #1
 80166f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80166f6:	1a9b      	subs	r3, r3, r2
 80166f8:	eba3 030a 	sub.w	r3, r3, sl
 80166fc:	4543      	cmp	r3, r8
 80166fe:	dcee      	bgt.n	80166de <_printf_float+0x386>
 8016700:	e74a      	b.n	8016598 <_printf_float+0x240>
 8016702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016704:	2a01      	cmp	r2, #1
 8016706:	dc01      	bgt.n	801670c <_printf_float+0x3b4>
 8016708:	07db      	lsls	r3, r3, #31
 801670a:	d53a      	bpl.n	8016782 <_printf_float+0x42a>
 801670c:	2301      	movs	r3, #1
 801670e:	4642      	mov	r2, r8
 8016710:	4631      	mov	r1, r6
 8016712:	4628      	mov	r0, r5
 8016714:	47b8      	blx	r7
 8016716:	3001      	adds	r0, #1
 8016718:	f43f ae7b 	beq.w	8016412 <_printf_float+0xba>
 801671c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016720:	4631      	mov	r1, r6
 8016722:	4628      	mov	r0, r5
 8016724:	47b8      	blx	r7
 8016726:	3001      	adds	r0, #1
 8016728:	f108 0801 	add.w	r8, r8, #1
 801672c:	f43f ae71 	beq.w	8016412 <_printf_float+0xba>
 8016730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016732:	2200      	movs	r2, #0
 8016734:	f103 3aff 	add.w	sl, r3, #4294967295
 8016738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801673c:	2300      	movs	r3, #0
 801673e:	f7f2 f8fb 	bl	8008938 <__aeabi_dcmpeq>
 8016742:	b9c8      	cbnz	r0, 8016778 <_printf_float+0x420>
 8016744:	4653      	mov	r3, sl
 8016746:	4642      	mov	r2, r8
 8016748:	4631      	mov	r1, r6
 801674a:	4628      	mov	r0, r5
 801674c:	47b8      	blx	r7
 801674e:	3001      	adds	r0, #1
 8016750:	d10e      	bne.n	8016770 <_printf_float+0x418>
 8016752:	e65e      	b.n	8016412 <_printf_float+0xba>
 8016754:	2301      	movs	r3, #1
 8016756:	4652      	mov	r2, sl
 8016758:	4631      	mov	r1, r6
 801675a:	4628      	mov	r0, r5
 801675c:	47b8      	blx	r7
 801675e:	3001      	adds	r0, #1
 8016760:	f43f ae57 	beq.w	8016412 <_printf_float+0xba>
 8016764:	f108 0801 	add.w	r8, r8, #1
 8016768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801676a:	3b01      	subs	r3, #1
 801676c:	4543      	cmp	r3, r8
 801676e:	dcf1      	bgt.n	8016754 <_printf_float+0x3fc>
 8016770:	464b      	mov	r3, r9
 8016772:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016776:	e6de      	b.n	8016536 <_printf_float+0x1de>
 8016778:	f04f 0800 	mov.w	r8, #0
 801677c:	f104 0a1a 	add.w	sl, r4, #26
 8016780:	e7f2      	b.n	8016768 <_printf_float+0x410>
 8016782:	2301      	movs	r3, #1
 8016784:	e7df      	b.n	8016746 <_printf_float+0x3ee>
 8016786:	2301      	movs	r3, #1
 8016788:	464a      	mov	r2, r9
 801678a:	4631      	mov	r1, r6
 801678c:	4628      	mov	r0, r5
 801678e:	47b8      	blx	r7
 8016790:	3001      	adds	r0, #1
 8016792:	f43f ae3e 	beq.w	8016412 <_printf_float+0xba>
 8016796:	f108 0801 	add.w	r8, r8, #1
 801679a:	68e3      	ldr	r3, [r4, #12]
 801679c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801679e:	1a9b      	subs	r3, r3, r2
 80167a0:	4543      	cmp	r3, r8
 80167a2:	dcf0      	bgt.n	8016786 <_printf_float+0x42e>
 80167a4:	e6fc      	b.n	80165a0 <_printf_float+0x248>
 80167a6:	f04f 0800 	mov.w	r8, #0
 80167aa:	f104 0919 	add.w	r9, r4, #25
 80167ae:	e7f4      	b.n	801679a <_printf_float+0x442>
 80167b0:	2900      	cmp	r1, #0
 80167b2:	f43f ae8b 	beq.w	80164cc <_printf_float+0x174>
 80167b6:	2300      	movs	r3, #0
 80167b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80167bc:	ab09      	add	r3, sp, #36	; 0x24
 80167be:	9300      	str	r3, [sp, #0]
 80167c0:	ec49 8b10 	vmov	d0, r8, r9
 80167c4:	6022      	str	r2, [r4, #0]
 80167c6:	f8cd a004 	str.w	sl, [sp, #4]
 80167ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80167ce:	4628      	mov	r0, r5
 80167d0:	f7ff fd2d 	bl	801622e <__cvt>
 80167d4:	4680      	mov	r8, r0
 80167d6:	e648      	b.n	801646a <_printf_float+0x112>

080167d8 <_printf_common>:
 80167d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167dc:	4691      	mov	r9, r2
 80167de:	461f      	mov	r7, r3
 80167e0:	688a      	ldr	r2, [r1, #8]
 80167e2:	690b      	ldr	r3, [r1, #16]
 80167e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80167e8:	4293      	cmp	r3, r2
 80167ea:	bfb8      	it	lt
 80167ec:	4613      	movlt	r3, r2
 80167ee:	f8c9 3000 	str.w	r3, [r9]
 80167f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80167f6:	4606      	mov	r6, r0
 80167f8:	460c      	mov	r4, r1
 80167fa:	b112      	cbz	r2, 8016802 <_printf_common+0x2a>
 80167fc:	3301      	adds	r3, #1
 80167fe:	f8c9 3000 	str.w	r3, [r9]
 8016802:	6823      	ldr	r3, [r4, #0]
 8016804:	0699      	lsls	r1, r3, #26
 8016806:	bf42      	ittt	mi
 8016808:	f8d9 3000 	ldrmi.w	r3, [r9]
 801680c:	3302      	addmi	r3, #2
 801680e:	f8c9 3000 	strmi.w	r3, [r9]
 8016812:	6825      	ldr	r5, [r4, #0]
 8016814:	f015 0506 	ands.w	r5, r5, #6
 8016818:	d107      	bne.n	801682a <_printf_common+0x52>
 801681a:	f104 0a19 	add.w	sl, r4, #25
 801681e:	68e3      	ldr	r3, [r4, #12]
 8016820:	f8d9 2000 	ldr.w	r2, [r9]
 8016824:	1a9b      	subs	r3, r3, r2
 8016826:	42ab      	cmp	r3, r5
 8016828:	dc28      	bgt.n	801687c <_printf_common+0xa4>
 801682a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801682e:	6822      	ldr	r2, [r4, #0]
 8016830:	3300      	adds	r3, #0
 8016832:	bf18      	it	ne
 8016834:	2301      	movne	r3, #1
 8016836:	0692      	lsls	r2, r2, #26
 8016838:	d42d      	bmi.n	8016896 <_printf_common+0xbe>
 801683a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801683e:	4639      	mov	r1, r7
 8016840:	4630      	mov	r0, r6
 8016842:	47c0      	blx	r8
 8016844:	3001      	adds	r0, #1
 8016846:	d020      	beq.n	801688a <_printf_common+0xb2>
 8016848:	6823      	ldr	r3, [r4, #0]
 801684a:	68e5      	ldr	r5, [r4, #12]
 801684c:	f8d9 2000 	ldr.w	r2, [r9]
 8016850:	f003 0306 	and.w	r3, r3, #6
 8016854:	2b04      	cmp	r3, #4
 8016856:	bf08      	it	eq
 8016858:	1aad      	subeq	r5, r5, r2
 801685a:	68a3      	ldr	r3, [r4, #8]
 801685c:	6922      	ldr	r2, [r4, #16]
 801685e:	bf0c      	ite	eq
 8016860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016864:	2500      	movne	r5, #0
 8016866:	4293      	cmp	r3, r2
 8016868:	bfc4      	itt	gt
 801686a:	1a9b      	subgt	r3, r3, r2
 801686c:	18ed      	addgt	r5, r5, r3
 801686e:	f04f 0900 	mov.w	r9, #0
 8016872:	341a      	adds	r4, #26
 8016874:	454d      	cmp	r5, r9
 8016876:	d11a      	bne.n	80168ae <_printf_common+0xd6>
 8016878:	2000      	movs	r0, #0
 801687a:	e008      	b.n	801688e <_printf_common+0xb6>
 801687c:	2301      	movs	r3, #1
 801687e:	4652      	mov	r2, sl
 8016880:	4639      	mov	r1, r7
 8016882:	4630      	mov	r0, r6
 8016884:	47c0      	blx	r8
 8016886:	3001      	adds	r0, #1
 8016888:	d103      	bne.n	8016892 <_printf_common+0xba>
 801688a:	f04f 30ff 	mov.w	r0, #4294967295
 801688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016892:	3501      	adds	r5, #1
 8016894:	e7c3      	b.n	801681e <_printf_common+0x46>
 8016896:	18e1      	adds	r1, r4, r3
 8016898:	1c5a      	adds	r2, r3, #1
 801689a:	2030      	movs	r0, #48	; 0x30
 801689c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80168a0:	4422      	add	r2, r4
 80168a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80168a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80168aa:	3302      	adds	r3, #2
 80168ac:	e7c5      	b.n	801683a <_printf_common+0x62>
 80168ae:	2301      	movs	r3, #1
 80168b0:	4622      	mov	r2, r4
 80168b2:	4639      	mov	r1, r7
 80168b4:	4630      	mov	r0, r6
 80168b6:	47c0      	blx	r8
 80168b8:	3001      	adds	r0, #1
 80168ba:	d0e6      	beq.n	801688a <_printf_common+0xb2>
 80168bc:	f109 0901 	add.w	r9, r9, #1
 80168c0:	e7d8      	b.n	8016874 <_printf_common+0x9c>
	...

080168c4 <_printf_i>:
 80168c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80168cc:	460c      	mov	r4, r1
 80168ce:	7e09      	ldrb	r1, [r1, #24]
 80168d0:	b085      	sub	sp, #20
 80168d2:	296e      	cmp	r1, #110	; 0x6e
 80168d4:	4617      	mov	r7, r2
 80168d6:	4606      	mov	r6, r0
 80168d8:	4698      	mov	r8, r3
 80168da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80168dc:	f000 80b3 	beq.w	8016a46 <_printf_i+0x182>
 80168e0:	d822      	bhi.n	8016928 <_printf_i+0x64>
 80168e2:	2963      	cmp	r1, #99	; 0x63
 80168e4:	d036      	beq.n	8016954 <_printf_i+0x90>
 80168e6:	d80a      	bhi.n	80168fe <_printf_i+0x3a>
 80168e8:	2900      	cmp	r1, #0
 80168ea:	f000 80b9 	beq.w	8016a60 <_printf_i+0x19c>
 80168ee:	2958      	cmp	r1, #88	; 0x58
 80168f0:	f000 8083 	beq.w	80169fa <_printf_i+0x136>
 80168f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80168f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80168fc:	e032      	b.n	8016964 <_printf_i+0xa0>
 80168fe:	2964      	cmp	r1, #100	; 0x64
 8016900:	d001      	beq.n	8016906 <_printf_i+0x42>
 8016902:	2969      	cmp	r1, #105	; 0x69
 8016904:	d1f6      	bne.n	80168f4 <_printf_i+0x30>
 8016906:	6820      	ldr	r0, [r4, #0]
 8016908:	6813      	ldr	r3, [r2, #0]
 801690a:	0605      	lsls	r5, r0, #24
 801690c:	f103 0104 	add.w	r1, r3, #4
 8016910:	d52a      	bpl.n	8016968 <_printf_i+0xa4>
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	6011      	str	r1, [r2, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	da03      	bge.n	8016922 <_printf_i+0x5e>
 801691a:	222d      	movs	r2, #45	; 0x2d
 801691c:	425b      	negs	r3, r3
 801691e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016922:	486f      	ldr	r0, [pc, #444]	; (8016ae0 <_printf_i+0x21c>)
 8016924:	220a      	movs	r2, #10
 8016926:	e039      	b.n	801699c <_printf_i+0xd8>
 8016928:	2973      	cmp	r1, #115	; 0x73
 801692a:	f000 809d 	beq.w	8016a68 <_printf_i+0x1a4>
 801692e:	d808      	bhi.n	8016942 <_printf_i+0x7e>
 8016930:	296f      	cmp	r1, #111	; 0x6f
 8016932:	d020      	beq.n	8016976 <_printf_i+0xb2>
 8016934:	2970      	cmp	r1, #112	; 0x70
 8016936:	d1dd      	bne.n	80168f4 <_printf_i+0x30>
 8016938:	6823      	ldr	r3, [r4, #0]
 801693a:	f043 0320 	orr.w	r3, r3, #32
 801693e:	6023      	str	r3, [r4, #0]
 8016940:	e003      	b.n	801694a <_printf_i+0x86>
 8016942:	2975      	cmp	r1, #117	; 0x75
 8016944:	d017      	beq.n	8016976 <_printf_i+0xb2>
 8016946:	2978      	cmp	r1, #120	; 0x78
 8016948:	d1d4      	bne.n	80168f4 <_printf_i+0x30>
 801694a:	2378      	movs	r3, #120	; 0x78
 801694c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016950:	4864      	ldr	r0, [pc, #400]	; (8016ae4 <_printf_i+0x220>)
 8016952:	e055      	b.n	8016a00 <_printf_i+0x13c>
 8016954:	6813      	ldr	r3, [r2, #0]
 8016956:	1d19      	adds	r1, r3, #4
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	6011      	str	r1, [r2, #0]
 801695c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016964:	2301      	movs	r3, #1
 8016966:	e08c      	b.n	8016a82 <_printf_i+0x1be>
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	6011      	str	r1, [r2, #0]
 801696c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016970:	bf18      	it	ne
 8016972:	b21b      	sxthne	r3, r3
 8016974:	e7cf      	b.n	8016916 <_printf_i+0x52>
 8016976:	6813      	ldr	r3, [r2, #0]
 8016978:	6825      	ldr	r5, [r4, #0]
 801697a:	1d18      	adds	r0, r3, #4
 801697c:	6010      	str	r0, [r2, #0]
 801697e:	0628      	lsls	r0, r5, #24
 8016980:	d501      	bpl.n	8016986 <_printf_i+0xc2>
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	e002      	b.n	801698c <_printf_i+0xc8>
 8016986:	0668      	lsls	r0, r5, #25
 8016988:	d5fb      	bpl.n	8016982 <_printf_i+0xbe>
 801698a:	881b      	ldrh	r3, [r3, #0]
 801698c:	4854      	ldr	r0, [pc, #336]	; (8016ae0 <_printf_i+0x21c>)
 801698e:	296f      	cmp	r1, #111	; 0x6f
 8016990:	bf14      	ite	ne
 8016992:	220a      	movne	r2, #10
 8016994:	2208      	moveq	r2, #8
 8016996:	2100      	movs	r1, #0
 8016998:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801699c:	6865      	ldr	r5, [r4, #4]
 801699e:	60a5      	str	r5, [r4, #8]
 80169a0:	2d00      	cmp	r5, #0
 80169a2:	f2c0 8095 	blt.w	8016ad0 <_printf_i+0x20c>
 80169a6:	6821      	ldr	r1, [r4, #0]
 80169a8:	f021 0104 	bic.w	r1, r1, #4
 80169ac:	6021      	str	r1, [r4, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d13d      	bne.n	8016a2e <_printf_i+0x16a>
 80169b2:	2d00      	cmp	r5, #0
 80169b4:	f040 808e 	bne.w	8016ad4 <_printf_i+0x210>
 80169b8:	4665      	mov	r5, ip
 80169ba:	2a08      	cmp	r2, #8
 80169bc:	d10b      	bne.n	80169d6 <_printf_i+0x112>
 80169be:	6823      	ldr	r3, [r4, #0]
 80169c0:	07db      	lsls	r3, r3, #31
 80169c2:	d508      	bpl.n	80169d6 <_printf_i+0x112>
 80169c4:	6923      	ldr	r3, [r4, #16]
 80169c6:	6862      	ldr	r2, [r4, #4]
 80169c8:	429a      	cmp	r2, r3
 80169ca:	bfde      	ittt	le
 80169cc:	2330      	movle	r3, #48	; 0x30
 80169ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80169d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80169d6:	ebac 0305 	sub.w	r3, ip, r5
 80169da:	6123      	str	r3, [r4, #16]
 80169dc:	f8cd 8000 	str.w	r8, [sp]
 80169e0:	463b      	mov	r3, r7
 80169e2:	aa03      	add	r2, sp, #12
 80169e4:	4621      	mov	r1, r4
 80169e6:	4630      	mov	r0, r6
 80169e8:	f7ff fef6 	bl	80167d8 <_printf_common>
 80169ec:	3001      	adds	r0, #1
 80169ee:	d14d      	bne.n	8016a8c <_printf_i+0x1c8>
 80169f0:	f04f 30ff 	mov.w	r0, #4294967295
 80169f4:	b005      	add	sp, #20
 80169f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169fa:	4839      	ldr	r0, [pc, #228]	; (8016ae0 <_printf_i+0x21c>)
 80169fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016a00:	6813      	ldr	r3, [r2, #0]
 8016a02:	6821      	ldr	r1, [r4, #0]
 8016a04:	1d1d      	adds	r5, r3, #4
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	6015      	str	r5, [r2, #0]
 8016a0a:	060a      	lsls	r2, r1, #24
 8016a0c:	d50b      	bpl.n	8016a26 <_printf_i+0x162>
 8016a0e:	07ca      	lsls	r2, r1, #31
 8016a10:	bf44      	itt	mi
 8016a12:	f041 0120 	orrmi.w	r1, r1, #32
 8016a16:	6021      	strmi	r1, [r4, #0]
 8016a18:	b91b      	cbnz	r3, 8016a22 <_printf_i+0x15e>
 8016a1a:	6822      	ldr	r2, [r4, #0]
 8016a1c:	f022 0220 	bic.w	r2, r2, #32
 8016a20:	6022      	str	r2, [r4, #0]
 8016a22:	2210      	movs	r2, #16
 8016a24:	e7b7      	b.n	8016996 <_printf_i+0xd2>
 8016a26:	064d      	lsls	r5, r1, #25
 8016a28:	bf48      	it	mi
 8016a2a:	b29b      	uxthmi	r3, r3
 8016a2c:	e7ef      	b.n	8016a0e <_printf_i+0x14a>
 8016a2e:	4665      	mov	r5, ip
 8016a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8016a34:	fb02 3311 	mls	r3, r2, r1, r3
 8016a38:	5cc3      	ldrb	r3, [r0, r3]
 8016a3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016a3e:	460b      	mov	r3, r1
 8016a40:	2900      	cmp	r1, #0
 8016a42:	d1f5      	bne.n	8016a30 <_printf_i+0x16c>
 8016a44:	e7b9      	b.n	80169ba <_printf_i+0xf6>
 8016a46:	6813      	ldr	r3, [r2, #0]
 8016a48:	6825      	ldr	r5, [r4, #0]
 8016a4a:	6961      	ldr	r1, [r4, #20]
 8016a4c:	1d18      	adds	r0, r3, #4
 8016a4e:	6010      	str	r0, [r2, #0]
 8016a50:	0628      	lsls	r0, r5, #24
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	d501      	bpl.n	8016a5a <_printf_i+0x196>
 8016a56:	6019      	str	r1, [r3, #0]
 8016a58:	e002      	b.n	8016a60 <_printf_i+0x19c>
 8016a5a:	066a      	lsls	r2, r5, #25
 8016a5c:	d5fb      	bpl.n	8016a56 <_printf_i+0x192>
 8016a5e:	8019      	strh	r1, [r3, #0]
 8016a60:	2300      	movs	r3, #0
 8016a62:	6123      	str	r3, [r4, #16]
 8016a64:	4665      	mov	r5, ip
 8016a66:	e7b9      	b.n	80169dc <_printf_i+0x118>
 8016a68:	6813      	ldr	r3, [r2, #0]
 8016a6a:	1d19      	adds	r1, r3, #4
 8016a6c:	6011      	str	r1, [r2, #0]
 8016a6e:	681d      	ldr	r5, [r3, #0]
 8016a70:	6862      	ldr	r2, [r4, #4]
 8016a72:	2100      	movs	r1, #0
 8016a74:	4628      	mov	r0, r5
 8016a76:	f7f1 faeb 	bl	8008050 <memchr>
 8016a7a:	b108      	cbz	r0, 8016a80 <_printf_i+0x1bc>
 8016a7c:	1b40      	subs	r0, r0, r5
 8016a7e:	6060      	str	r0, [r4, #4]
 8016a80:	6863      	ldr	r3, [r4, #4]
 8016a82:	6123      	str	r3, [r4, #16]
 8016a84:	2300      	movs	r3, #0
 8016a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a8a:	e7a7      	b.n	80169dc <_printf_i+0x118>
 8016a8c:	6923      	ldr	r3, [r4, #16]
 8016a8e:	462a      	mov	r2, r5
 8016a90:	4639      	mov	r1, r7
 8016a92:	4630      	mov	r0, r6
 8016a94:	47c0      	blx	r8
 8016a96:	3001      	adds	r0, #1
 8016a98:	d0aa      	beq.n	80169f0 <_printf_i+0x12c>
 8016a9a:	6823      	ldr	r3, [r4, #0]
 8016a9c:	079b      	lsls	r3, r3, #30
 8016a9e:	d413      	bmi.n	8016ac8 <_printf_i+0x204>
 8016aa0:	68e0      	ldr	r0, [r4, #12]
 8016aa2:	9b03      	ldr	r3, [sp, #12]
 8016aa4:	4298      	cmp	r0, r3
 8016aa6:	bfb8      	it	lt
 8016aa8:	4618      	movlt	r0, r3
 8016aaa:	e7a3      	b.n	80169f4 <_printf_i+0x130>
 8016aac:	2301      	movs	r3, #1
 8016aae:	464a      	mov	r2, r9
 8016ab0:	4639      	mov	r1, r7
 8016ab2:	4630      	mov	r0, r6
 8016ab4:	47c0      	blx	r8
 8016ab6:	3001      	adds	r0, #1
 8016ab8:	d09a      	beq.n	80169f0 <_printf_i+0x12c>
 8016aba:	3501      	adds	r5, #1
 8016abc:	68e3      	ldr	r3, [r4, #12]
 8016abe:	9a03      	ldr	r2, [sp, #12]
 8016ac0:	1a9b      	subs	r3, r3, r2
 8016ac2:	42ab      	cmp	r3, r5
 8016ac4:	dcf2      	bgt.n	8016aac <_printf_i+0x1e8>
 8016ac6:	e7eb      	b.n	8016aa0 <_printf_i+0x1dc>
 8016ac8:	2500      	movs	r5, #0
 8016aca:	f104 0919 	add.w	r9, r4, #25
 8016ace:	e7f5      	b.n	8016abc <_printf_i+0x1f8>
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d1ac      	bne.n	8016a2e <_printf_i+0x16a>
 8016ad4:	7803      	ldrb	r3, [r0, #0]
 8016ad6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ada:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ade:	e76c      	b.n	80169ba <_printf_i+0xf6>
 8016ae0:	08018b2e 	.word	0x08018b2e
 8016ae4:	08018b3f 	.word	0x08018b3f

08016ae8 <iprintf>:
 8016ae8:	b40f      	push	{r0, r1, r2, r3}
 8016aea:	4b0a      	ldr	r3, [pc, #40]	; (8016b14 <iprintf+0x2c>)
 8016aec:	b513      	push	{r0, r1, r4, lr}
 8016aee:	681c      	ldr	r4, [r3, #0]
 8016af0:	b124      	cbz	r4, 8016afc <iprintf+0x14>
 8016af2:	69a3      	ldr	r3, [r4, #24]
 8016af4:	b913      	cbnz	r3, 8016afc <iprintf+0x14>
 8016af6:	4620      	mov	r0, r4
 8016af8:	f001 f866 	bl	8017bc8 <__sinit>
 8016afc:	ab05      	add	r3, sp, #20
 8016afe:	9a04      	ldr	r2, [sp, #16]
 8016b00:	68a1      	ldr	r1, [r4, #8]
 8016b02:	9301      	str	r3, [sp, #4]
 8016b04:	4620      	mov	r0, r4
 8016b06:	f001 fd1f 	bl	8018548 <_vfiprintf_r>
 8016b0a:	b002      	add	sp, #8
 8016b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b10:	b004      	add	sp, #16
 8016b12:	4770      	bx	lr
 8016b14:	2000008c 	.word	0x2000008c

08016b18 <_puts_r>:
 8016b18:	b570      	push	{r4, r5, r6, lr}
 8016b1a:	460e      	mov	r6, r1
 8016b1c:	4605      	mov	r5, r0
 8016b1e:	b118      	cbz	r0, 8016b28 <_puts_r+0x10>
 8016b20:	6983      	ldr	r3, [r0, #24]
 8016b22:	b90b      	cbnz	r3, 8016b28 <_puts_r+0x10>
 8016b24:	f001 f850 	bl	8017bc8 <__sinit>
 8016b28:	69ab      	ldr	r3, [r5, #24]
 8016b2a:	68ac      	ldr	r4, [r5, #8]
 8016b2c:	b913      	cbnz	r3, 8016b34 <_puts_r+0x1c>
 8016b2e:	4628      	mov	r0, r5
 8016b30:	f001 f84a 	bl	8017bc8 <__sinit>
 8016b34:	4b23      	ldr	r3, [pc, #140]	; (8016bc4 <_puts_r+0xac>)
 8016b36:	429c      	cmp	r4, r3
 8016b38:	d117      	bne.n	8016b6a <_puts_r+0x52>
 8016b3a:	686c      	ldr	r4, [r5, #4]
 8016b3c:	89a3      	ldrh	r3, [r4, #12]
 8016b3e:	071b      	lsls	r3, r3, #28
 8016b40:	d51d      	bpl.n	8016b7e <_puts_r+0x66>
 8016b42:	6923      	ldr	r3, [r4, #16]
 8016b44:	b1db      	cbz	r3, 8016b7e <_puts_r+0x66>
 8016b46:	3e01      	subs	r6, #1
 8016b48:	68a3      	ldr	r3, [r4, #8]
 8016b4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016b4e:	3b01      	subs	r3, #1
 8016b50:	60a3      	str	r3, [r4, #8]
 8016b52:	b9e9      	cbnz	r1, 8016b90 <_puts_r+0x78>
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	da2e      	bge.n	8016bb6 <_puts_r+0x9e>
 8016b58:	4622      	mov	r2, r4
 8016b5a:	210a      	movs	r1, #10
 8016b5c:	4628      	mov	r0, r5
 8016b5e:	f000 f83f 	bl	8016be0 <__swbuf_r>
 8016b62:	3001      	adds	r0, #1
 8016b64:	d011      	beq.n	8016b8a <_puts_r+0x72>
 8016b66:	200a      	movs	r0, #10
 8016b68:	e011      	b.n	8016b8e <_puts_r+0x76>
 8016b6a:	4b17      	ldr	r3, [pc, #92]	; (8016bc8 <_puts_r+0xb0>)
 8016b6c:	429c      	cmp	r4, r3
 8016b6e:	d101      	bne.n	8016b74 <_puts_r+0x5c>
 8016b70:	68ac      	ldr	r4, [r5, #8]
 8016b72:	e7e3      	b.n	8016b3c <_puts_r+0x24>
 8016b74:	4b15      	ldr	r3, [pc, #84]	; (8016bcc <_puts_r+0xb4>)
 8016b76:	429c      	cmp	r4, r3
 8016b78:	bf08      	it	eq
 8016b7a:	68ec      	ldreq	r4, [r5, #12]
 8016b7c:	e7de      	b.n	8016b3c <_puts_r+0x24>
 8016b7e:	4621      	mov	r1, r4
 8016b80:	4628      	mov	r0, r5
 8016b82:	f000 f87f 	bl	8016c84 <__swsetup_r>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d0dd      	beq.n	8016b46 <_puts_r+0x2e>
 8016b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b8e:	bd70      	pop	{r4, r5, r6, pc}
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	da04      	bge.n	8016b9e <_puts_r+0x86>
 8016b94:	69a2      	ldr	r2, [r4, #24]
 8016b96:	429a      	cmp	r2, r3
 8016b98:	dc06      	bgt.n	8016ba8 <_puts_r+0x90>
 8016b9a:	290a      	cmp	r1, #10
 8016b9c:	d004      	beq.n	8016ba8 <_puts_r+0x90>
 8016b9e:	6823      	ldr	r3, [r4, #0]
 8016ba0:	1c5a      	adds	r2, r3, #1
 8016ba2:	6022      	str	r2, [r4, #0]
 8016ba4:	7019      	strb	r1, [r3, #0]
 8016ba6:	e7cf      	b.n	8016b48 <_puts_r+0x30>
 8016ba8:	4622      	mov	r2, r4
 8016baa:	4628      	mov	r0, r5
 8016bac:	f000 f818 	bl	8016be0 <__swbuf_r>
 8016bb0:	3001      	adds	r0, #1
 8016bb2:	d1c9      	bne.n	8016b48 <_puts_r+0x30>
 8016bb4:	e7e9      	b.n	8016b8a <_puts_r+0x72>
 8016bb6:	6823      	ldr	r3, [r4, #0]
 8016bb8:	200a      	movs	r0, #10
 8016bba:	1c5a      	adds	r2, r3, #1
 8016bbc:	6022      	str	r2, [r4, #0]
 8016bbe:	7018      	strb	r0, [r3, #0]
 8016bc0:	e7e5      	b.n	8016b8e <_puts_r+0x76>
 8016bc2:	bf00      	nop
 8016bc4:	08018b80 	.word	0x08018b80
 8016bc8:	08018ba0 	.word	0x08018ba0
 8016bcc:	08018b60 	.word	0x08018b60

08016bd0 <puts>:
 8016bd0:	4b02      	ldr	r3, [pc, #8]	; (8016bdc <puts+0xc>)
 8016bd2:	4601      	mov	r1, r0
 8016bd4:	6818      	ldr	r0, [r3, #0]
 8016bd6:	f7ff bf9f 	b.w	8016b18 <_puts_r>
 8016bda:	bf00      	nop
 8016bdc:	2000008c 	.word	0x2000008c

08016be0 <__swbuf_r>:
 8016be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016be2:	460e      	mov	r6, r1
 8016be4:	4614      	mov	r4, r2
 8016be6:	4605      	mov	r5, r0
 8016be8:	b118      	cbz	r0, 8016bf2 <__swbuf_r+0x12>
 8016bea:	6983      	ldr	r3, [r0, #24]
 8016bec:	b90b      	cbnz	r3, 8016bf2 <__swbuf_r+0x12>
 8016bee:	f000 ffeb 	bl	8017bc8 <__sinit>
 8016bf2:	4b21      	ldr	r3, [pc, #132]	; (8016c78 <__swbuf_r+0x98>)
 8016bf4:	429c      	cmp	r4, r3
 8016bf6:	d12a      	bne.n	8016c4e <__swbuf_r+0x6e>
 8016bf8:	686c      	ldr	r4, [r5, #4]
 8016bfa:	69a3      	ldr	r3, [r4, #24]
 8016bfc:	60a3      	str	r3, [r4, #8]
 8016bfe:	89a3      	ldrh	r3, [r4, #12]
 8016c00:	071a      	lsls	r2, r3, #28
 8016c02:	d52e      	bpl.n	8016c62 <__swbuf_r+0x82>
 8016c04:	6923      	ldr	r3, [r4, #16]
 8016c06:	b363      	cbz	r3, 8016c62 <__swbuf_r+0x82>
 8016c08:	6923      	ldr	r3, [r4, #16]
 8016c0a:	6820      	ldr	r0, [r4, #0]
 8016c0c:	1ac0      	subs	r0, r0, r3
 8016c0e:	6963      	ldr	r3, [r4, #20]
 8016c10:	b2f6      	uxtb	r6, r6
 8016c12:	4283      	cmp	r3, r0
 8016c14:	4637      	mov	r7, r6
 8016c16:	dc04      	bgt.n	8016c22 <__swbuf_r+0x42>
 8016c18:	4621      	mov	r1, r4
 8016c1a:	4628      	mov	r0, r5
 8016c1c:	f000 ff6a 	bl	8017af4 <_fflush_r>
 8016c20:	bb28      	cbnz	r0, 8016c6e <__swbuf_r+0x8e>
 8016c22:	68a3      	ldr	r3, [r4, #8]
 8016c24:	3b01      	subs	r3, #1
 8016c26:	60a3      	str	r3, [r4, #8]
 8016c28:	6823      	ldr	r3, [r4, #0]
 8016c2a:	1c5a      	adds	r2, r3, #1
 8016c2c:	6022      	str	r2, [r4, #0]
 8016c2e:	701e      	strb	r6, [r3, #0]
 8016c30:	6963      	ldr	r3, [r4, #20]
 8016c32:	3001      	adds	r0, #1
 8016c34:	4283      	cmp	r3, r0
 8016c36:	d004      	beq.n	8016c42 <__swbuf_r+0x62>
 8016c38:	89a3      	ldrh	r3, [r4, #12]
 8016c3a:	07db      	lsls	r3, r3, #31
 8016c3c:	d519      	bpl.n	8016c72 <__swbuf_r+0x92>
 8016c3e:	2e0a      	cmp	r6, #10
 8016c40:	d117      	bne.n	8016c72 <__swbuf_r+0x92>
 8016c42:	4621      	mov	r1, r4
 8016c44:	4628      	mov	r0, r5
 8016c46:	f000 ff55 	bl	8017af4 <_fflush_r>
 8016c4a:	b190      	cbz	r0, 8016c72 <__swbuf_r+0x92>
 8016c4c:	e00f      	b.n	8016c6e <__swbuf_r+0x8e>
 8016c4e:	4b0b      	ldr	r3, [pc, #44]	; (8016c7c <__swbuf_r+0x9c>)
 8016c50:	429c      	cmp	r4, r3
 8016c52:	d101      	bne.n	8016c58 <__swbuf_r+0x78>
 8016c54:	68ac      	ldr	r4, [r5, #8]
 8016c56:	e7d0      	b.n	8016bfa <__swbuf_r+0x1a>
 8016c58:	4b09      	ldr	r3, [pc, #36]	; (8016c80 <__swbuf_r+0xa0>)
 8016c5a:	429c      	cmp	r4, r3
 8016c5c:	bf08      	it	eq
 8016c5e:	68ec      	ldreq	r4, [r5, #12]
 8016c60:	e7cb      	b.n	8016bfa <__swbuf_r+0x1a>
 8016c62:	4621      	mov	r1, r4
 8016c64:	4628      	mov	r0, r5
 8016c66:	f000 f80d 	bl	8016c84 <__swsetup_r>
 8016c6a:	2800      	cmp	r0, #0
 8016c6c:	d0cc      	beq.n	8016c08 <__swbuf_r+0x28>
 8016c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8016c72:	4638      	mov	r0, r7
 8016c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c76:	bf00      	nop
 8016c78:	08018b80 	.word	0x08018b80
 8016c7c:	08018ba0 	.word	0x08018ba0
 8016c80:	08018b60 	.word	0x08018b60

08016c84 <__swsetup_r>:
 8016c84:	4b32      	ldr	r3, [pc, #200]	; (8016d50 <__swsetup_r+0xcc>)
 8016c86:	b570      	push	{r4, r5, r6, lr}
 8016c88:	681d      	ldr	r5, [r3, #0]
 8016c8a:	4606      	mov	r6, r0
 8016c8c:	460c      	mov	r4, r1
 8016c8e:	b125      	cbz	r5, 8016c9a <__swsetup_r+0x16>
 8016c90:	69ab      	ldr	r3, [r5, #24]
 8016c92:	b913      	cbnz	r3, 8016c9a <__swsetup_r+0x16>
 8016c94:	4628      	mov	r0, r5
 8016c96:	f000 ff97 	bl	8017bc8 <__sinit>
 8016c9a:	4b2e      	ldr	r3, [pc, #184]	; (8016d54 <__swsetup_r+0xd0>)
 8016c9c:	429c      	cmp	r4, r3
 8016c9e:	d10f      	bne.n	8016cc0 <__swsetup_r+0x3c>
 8016ca0:	686c      	ldr	r4, [r5, #4]
 8016ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ca6:	b29a      	uxth	r2, r3
 8016ca8:	0715      	lsls	r5, r2, #28
 8016caa:	d42c      	bmi.n	8016d06 <__swsetup_r+0x82>
 8016cac:	06d0      	lsls	r0, r2, #27
 8016cae:	d411      	bmi.n	8016cd4 <__swsetup_r+0x50>
 8016cb0:	2209      	movs	r2, #9
 8016cb2:	6032      	str	r2, [r6, #0]
 8016cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cb8:	81a3      	strh	r3, [r4, #12]
 8016cba:	f04f 30ff 	mov.w	r0, #4294967295
 8016cbe:	e03e      	b.n	8016d3e <__swsetup_r+0xba>
 8016cc0:	4b25      	ldr	r3, [pc, #148]	; (8016d58 <__swsetup_r+0xd4>)
 8016cc2:	429c      	cmp	r4, r3
 8016cc4:	d101      	bne.n	8016cca <__swsetup_r+0x46>
 8016cc6:	68ac      	ldr	r4, [r5, #8]
 8016cc8:	e7eb      	b.n	8016ca2 <__swsetup_r+0x1e>
 8016cca:	4b24      	ldr	r3, [pc, #144]	; (8016d5c <__swsetup_r+0xd8>)
 8016ccc:	429c      	cmp	r4, r3
 8016cce:	bf08      	it	eq
 8016cd0:	68ec      	ldreq	r4, [r5, #12]
 8016cd2:	e7e6      	b.n	8016ca2 <__swsetup_r+0x1e>
 8016cd4:	0751      	lsls	r1, r2, #29
 8016cd6:	d512      	bpl.n	8016cfe <__swsetup_r+0x7a>
 8016cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016cda:	b141      	cbz	r1, 8016cee <__swsetup_r+0x6a>
 8016cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ce0:	4299      	cmp	r1, r3
 8016ce2:	d002      	beq.n	8016cea <__swsetup_r+0x66>
 8016ce4:	4630      	mov	r0, r6
 8016ce6:	f001 fb5d 	bl	80183a4 <_free_r>
 8016cea:	2300      	movs	r3, #0
 8016cec:	6363      	str	r3, [r4, #52]	; 0x34
 8016cee:	89a3      	ldrh	r3, [r4, #12]
 8016cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016cf4:	81a3      	strh	r3, [r4, #12]
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	6063      	str	r3, [r4, #4]
 8016cfa:	6923      	ldr	r3, [r4, #16]
 8016cfc:	6023      	str	r3, [r4, #0]
 8016cfe:	89a3      	ldrh	r3, [r4, #12]
 8016d00:	f043 0308 	orr.w	r3, r3, #8
 8016d04:	81a3      	strh	r3, [r4, #12]
 8016d06:	6923      	ldr	r3, [r4, #16]
 8016d08:	b94b      	cbnz	r3, 8016d1e <__swsetup_r+0x9a>
 8016d0a:	89a3      	ldrh	r3, [r4, #12]
 8016d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d14:	d003      	beq.n	8016d1e <__swsetup_r+0x9a>
 8016d16:	4621      	mov	r1, r4
 8016d18:	4630      	mov	r0, r6
 8016d1a:	f001 f811 	bl	8017d40 <__smakebuf_r>
 8016d1e:	89a2      	ldrh	r2, [r4, #12]
 8016d20:	f012 0301 	ands.w	r3, r2, #1
 8016d24:	d00c      	beq.n	8016d40 <__swsetup_r+0xbc>
 8016d26:	2300      	movs	r3, #0
 8016d28:	60a3      	str	r3, [r4, #8]
 8016d2a:	6963      	ldr	r3, [r4, #20]
 8016d2c:	425b      	negs	r3, r3
 8016d2e:	61a3      	str	r3, [r4, #24]
 8016d30:	6923      	ldr	r3, [r4, #16]
 8016d32:	b953      	cbnz	r3, 8016d4a <__swsetup_r+0xc6>
 8016d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016d3c:	d1ba      	bne.n	8016cb4 <__swsetup_r+0x30>
 8016d3e:	bd70      	pop	{r4, r5, r6, pc}
 8016d40:	0792      	lsls	r2, r2, #30
 8016d42:	bf58      	it	pl
 8016d44:	6963      	ldrpl	r3, [r4, #20]
 8016d46:	60a3      	str	r3, [r4, #8]
 8016d48:	e7f2      	b.n	8016d30 <__swsetup_r+0xac>
 8016d4a:	2000      	movs	r0, #0
 8016d4c:	e7f7      	b.n	8016d3e <__swsetup_r+0xba>
 8016d4e:	bf00      	nop
 8016d50:	2000008c 	.word	0x2000008c
 8016d54:	08018b80 	.word	0x08018b80
 8016d58:	08018ba0 	.word	0x08018ba0
 8016d5c:	08018b60 	.word	0x08018b60

08016d60 <quorem>:
 8016d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d64:	6903      	ldr	r3, [r0, #16]
 8016d66:	690c      	ldr	r4, [r1, #16]
 8016d68:	42a3      	cmp	r3, r4
 8016d6a:	4680      	mov	r8, r0
 8016d6c:	f2c0 8082 	blt.w	8016e74 <quorem+0x114>
 8016d70:	3c01      	subs	r4, #1
 8016d72:	f101 0714 	add.w	r7, r1, #20
 8016d76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016d7a:	f100 0614 	add.w	r6, r0, #20
 8016d7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016d82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016d86:	eb06 030c 	add.w	r3, r6, ip
 8016d8a:	3501      	adds	r5, #1
 8016d8c:	eb07 090c 	add.w	r9, r7, ip
 8016d90:	9301      	str	r3, [sp, #4]
 8016d92:	fbb0 f5f5 	udiv	r5, r0, r5
 8016d96:	b395      	cbz	r5, 8016dfe <quorem+0x9e>
 8016d98:	f04f 0a00 	mov.w	sl, #0
 8016d9c:	4638      	mov	r0, r7
 8016d9e:	46b6      	mov	lr, r6
 8016da0:	46d3      	mov	fp, sl
 8016da2:	f850 2b04 	ldr.w	r2, [r0], #4
 8016da6:	b293      	uxth	r3, r2
 8016da8:	fb05 a303 	mla	r3, r5, r3, sl
 8016dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	ebab 0303 	sub.w	r3, fp, r3
 8016db6:	0c12      	lsrs	r2, r2, #16
 8016db8:	f8de b000 	ldr.w	fp, [lr]
 8016dbc:	fb05 a202 	mla	r2, r5, r2, sl
 8016dc0:	fa13 f38b 	uxtah	r3, r3, fp
 8016dc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016dc8:	fa1f fb82 	uxth.w	fp, r2
 8016dcc:	f8de 2000 	ldr.w	r2, [lr]
 8016dd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016dd8:	b29b      	uxth	r3, r3
 8016dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016dde:	4581      	cmp	r9, r0
 8016de0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016de4:	f84e 3b04 	str.w	r3, [lr], #4
 8016de8:	d2db      	bcs.n	8016da2 <quorem+0x42>
 8016dea:	f856 300c 	ldr.w	r3, [r6, ip]
 8016dee:	b933      	cbnz	r3, 8016dfe <quorem+0x9e>
 8016df0:	9b01      	ldr	r3, [sp, #4]
 8016df2:	3b04      	subs	r3, #4
 8016df4:	429e      	cmp	r6, r3
 8016df6:	461a      	mov	r2, r3
 8016df8:	d330      	bcc.n	8016e5c <quorem+0xfc>
 8016dfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8016dfe:	4640      	mov	r0, r8
 8016e00:	f001 f9fc 	bl	80181fc <__mcmp>
 8016e04:	2800      	cmp	r0, #0
 8016e06:	db25      	blt.n	8016e54 <quorem+0xf4>
 8016e08:	3501      	adds	r5, #1
 8016e0a:	4630      	mov	r0, r6
 8016e0c:	f04f 0c00 	mov.w	ip, #0
 8016e10:	f857 2b04 	ldr.w	r2, [r7], #4
 8016e14:	f8d0 e000 	ldr.w	lr, [r0]
 8016e18:	b293      	uxth	r3, r2
 8016e1a:	ebac 0303 	sub.w	r3, ip, r3
 8016e1e:	0c12      	lsrs	r2, r2, #16
 8016e20:	fa13 f38e 	uxtah	r3, r3, lr
 8016e24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e32:	45b9      	cmp	r9, r7
 8016e34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016e38:	f840 3b04 	str.w	r3, [r0], #4
 8016e3c:	d2e8      	bcs.n	8016e10 <quorem+0xb0>
 8016e3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016e42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e46:	b92a      	cbnz	r2, 8016e54 <quorem+0xf4>
 8016e48:	3b04      	subs	r3, #4
 8016e4a:	429e      	cmp	r6, r3
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	d30b      	bcc.n	8016e68 <quorem+0x108>
 8016e50:	f8c8 4010 	str.w	r4, [r8, #16]
 8016e54:	4628      	mov	r0, r5
 8016e56:	b003      	add	sp, #12
 8016e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e5c:	6812      	ldr	r2, [r2, #0]
 8016e5e:	3b04      	subs	r3, #4
 8016e60:	2a00      	cmp	r2, #0
 8016e62:	d1ca      	bne.n	8016dfa <quorem+0x9a>
 8016e64:	3c01      	subs	r4, #1
 8016e66:	e7c5      	b.n	8016df4 <quorem+0x94>
 8016e68:	6812      	ldr	r2, [r2, #0]
 8016e6a:	3b04      	subs	r3, #4
 8016e6c:	2a00      	cmp	r2, #0
 8016e6e:	d1ef      	bne.n	8016e50 <quorem+0xf0>
 8016e70:	3c01      	subs	r4, #1
 8016e72:	e7ea      	b.n	8016e4a <quorem+0xea>
 8016e74:	2000      	movs	r0, #0
 8016e76:	e7ee      	b.n	8016e56 <quorem+0xf6>

08016e78 <_dtoa_r>:
 8016e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e7c:	ec57 6b10 	vmov	r6, r7, d0
 8016e80:	b097      	sub	sp, #92	; 0x5c
 8016e82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016e84:	9106      	str	r1, [sp, #24]
 8016e86:	4604      	mov	r4, r0
 8016e88:	920b      	str	r2, [sp, #44]	; 0x2c
 8016e8a:	9312      	str	r3, [sp, #72]	; 0x48
 8016e8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016e90:	e9cd 6700 	strd	r6, r7, [sp]
 8016e94:	b93d      	cbnz	r5, 8016ea6 <_dtoa_r+0x2e>
 8016e96:	2010      	movs	r0, #16
 8016e98:	f000 ff92 	bl	8017dc0 <malloc>
 8016e9c:	6260      	str	r0, [r4, #36]	; 0x24
 8016e9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016ea2:	6005      	str	r5, [r0, #0]
 8016ea4:	60c5      	str	r5, [r0, #12]
 8016ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ea8:	6819      	ldr	r1, [r3, #0]
 8016eaa:	b151      	cbz	r1, 8016ec2 <_dtoa_r+0x4a>
 8016eac:	685a      	ldr	r2, [r3, #4]
 8016eae:	604a      	str	r2, [r1, #4]
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	4093      	lsls	r3, r2
 8016eb4:	608b      	str	r3, [r1, #8]
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	f000 ffbe 	bl	8017e38 <_Bfree>
 8016ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	601a      	str	r2, [r3, #0]
 8016ec2:	1e3b      	subs	r3, r7, #0
 8016ec4:	bfbb      	ittet	lt
 8016ec6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016eca:	9301      	strlt	r3, [sp, #4]
 8016ecc:	2300      	movge	r3, #0
 8016ece:	2201      	movlt	r2, #1
 8016ed0:	bfac      	ite	ge
 8016ed2:	f8c8 3000 	strge.w	r3, [r8]
 8016ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8016eda:	4baf      	ldr	r3, [pc, #700]	; (8017198 <_dtoa_r+0x320>)
 8016edc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016ee0:	ea33 0308 	bics.w	r3, r3, r8
 8016ee4:	d114      	bne.n	8016f10 <_dtoa_r+0x98>
 8016ee6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ee8:	f242 730f 	movw	r3, #9999	; 0x270f
 8016eec:	6013      	str	r3, [r2, #0]
 8016eee:	9b00      	ldr	r3, [sp, #0]
 8016ef0:	b923      	cbnz	r3, 8016efc <_dtoa_r+0x84>
 8016ef2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	f000 8542 	beq.w	8017980 <_dtoa_r+0xb08>
 8016efc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016efe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80171ac <_dtoa_r+0x334>
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	f000 8544 	beq.w	8017990 <_dtoa_r+0xb18>
 8016f08:	f10b 0303 	add.w	r3, fp, #3
 8016f0c:	f000 bd3e 	b.w	801798c <_dtoa_r+0xb14>
 8016f10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016f14:	2200      	movs	r2, #0
 8016f16:	2300      	movs	r3, #0
 8016f18:	4630      	mov	r0, r6
 8016f1a:	4639      	mov	r1, r7
 8016f1c:	f7f1 fd0c 	bl	8008938 <__aeabi_dcmpeq>
 8016f20:	4681      	mov	r9, r0
 8016f22:	b168      	cbz	r0, 8016f40 <_dtoa_r+0xc8>
 8016f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f26:	2301      	movs	r3, #1
 8016f28:	6013      	str	r3, [r2, #0]
 8016f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	f000 8524 	beq.w	801797a <_dtoa_r+0xb02>
 8016f32:	4b9a      	ldr	r3, [pc, #616]	; (801719c <_dtoa_r+0x324>)
 8016f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f36:	f103 3bff 	add.w	fp, r3, #4294967295
 8016f3a:	6013      	str	r3, [r2, #0]
 8016f3c:	f000 bd28 	b.w	8017990 <_dtoa_r+0xb18>
 8016f40:	aa14      	add	r2, sp, #80	; 0x50
 8016f42:	a915      	add	r1, sp, #84	; 0x54
 8016f44:	ec47 6b10 	vmov	d0, r6, r7
 8016f48:	4620      	mov	r0, r4
 8016f4a:	f001 f9ce 	bl	80182ea <__d2b>
 8016f4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016f52:	9004      	str	r0, [sp, #16]
 8016f54:	2d00      	cmp	r5, #0
 8016f56:	d07c      	beq.n	8017052 <_dtoa_r+0x1da>
 8016f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016f5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016f60:	46b2      	mov	sl, r6
 8016f62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016f6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016f6e:	2200      	movs	r2, #0
 8016f70:	4b8b      	ldr	r3, [pc, #556]	; (80171a0 <_dtoa_r+0x328>)
 8016f72:	4650      	mov	r0, sl
 8016f74:	4659      	mov	r1, fp
 8016f76:	f7f1 f8bf 	bl	80080f8 <__aeabi_dsub>
 8016f7a:	a381      	add	r3, pc, #516	; (adr r3, 8017180 <_dtoa_r+0x308>)
 8016f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f80:	f7f1 fa72 	bl	8008468 <__aeabi_dmul>
 8016f84:	a380      	add	r3, pc, #512	; (adr r3, 8017188 <_dtoa_r+0x310>)
 8016f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f8a:	f7f1 f8b7 	bl	80080fc <__adddf3>
 8016f8e:	4606      	mov	r6, r0
 8016f90:	4628      	mov	r0, r5
 8016f92:	460f      	mov	r7, r1
 8016f94:	f7f1 f9fe 	bl	8008394 <__aeabi_i2d>
 8016f98:	a37d      	add	r3, pc, #500	; (adr r3, 8017190 <_dtoa_r+0x318>)
 8016f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f9e:	f7f1 fa63 	bl	8008468 <__aeabi_dmul>
 8016fa2:	4602      	mov	r2, r0
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	4630      	mov	r0, r6
 8016fa8:	4639      	mov	r1, r7
 8016faa:	f7f1 f8a7 	bl	80080fc <__adddf3>
 8016fae:	4606      	mov	r6, r0
 8016fb0:	460f      	mov	r7, r1
 8016fb2:	f7f1 fd09 	bl	80089c8 <__aeabi_d2iz>
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	4682      	mov	sl, r0
 8016fba:	2300      	movs	r3, #0
 8016fbc:	4630      	mov	r0, r6
 8016fbe:	4639      	mov	r1, r7
 8016fc0:	f7f1 fcc4 	bl	800894c <__aeabi_dcmplt>
 8016fc4:	b148      	cbz	r0, 8016fda <_dtoa_r+0x162>
 8016fc6:	4650      	mov	r0, sl
 8016fc8:	f7f1 f9e4 	bl	8008394 <__aeabi_i2d>
 8016fcc:	4632      	mov	r2, r6
 8016fce:	463b      	mov	r3, r7
 8016fd0:	f7f1 fcb2 	bl	8008938 <__aeabi_dcmpeq>
 8016fd4:	b908      	cbnz	r0, 8016fda <_dtoa_r+0x162>
 8016fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fda:	f1ba 0f16 	cmp.w	sl, #22
 8016fde:	d859      	bhi.n	8017094 <_dtoa_r+0x21c>
 8016fe0:	4970      	ldr	r1, [pc, #448]	; (80171a4 <_dtoa_r+0x32c>)
 8016fe2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fee:	f7f1 fccb 	bl	8008988 <__aeabi_dcmpgt>
 8016ff2:	2800      	cmp	r0, #0
 8016ff4:	d050      	beq.n	8017098 <_dtoa_r+0x220>
 8016ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017000:	1b5d      	subs	r5, r3, r5
 8017002:	f1b5 0801 	subs.w	r8, r5, #1
 8017006:	bf49      	itett	mi
 8017008:	f1c5 0301 	rsbmi	r3, r5, #1
 801700c:	2300      	movpl	r3, #0
 801700e:	9305      	strmi	r3, [sp, #20]
 8017010:	f04f 0800 	movmi.w	r8, #0
 8017014:	bf58      	it	pl
 8017016:	9305      	strpl	r3, [sp, #20]
 8017018:	f1ba 0f00 	cmp.w	sl, #0
 801701c:	db3e      	blt.n	801709c <_dtoa_r+0x224>
 801701e:	2300      	movs	r3, #0
 8017020:	44d0      	add	r8, sl
 8017022:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017026:	9307      	str	r3, [sp, #28]
 8017028:	9b06      	ldr	r3, [sp, #24]
 801702a:	2b09      	cmp	r3, #9
 801702c:	f200 8090 	bhi.w	8017150 <_dtoa_r+0x2d8>
 8017030:	2b05      	cmp	r3, #5
 8017032:	bfc4      	itt	gt
 8017034:	3b04      	subgt	r3, #4
 8017036:	9306      	strgt	r3, [sp, #24]
 8017038:	9b06      	ldr	r3, [sp, #24]
 801703a:	f1a3 0302 	sub.w	r3, r3, #2
 801703e:	bfcc      	ite	gt
 8017040:	2500      	movgt	r5, #0
 8017042:	2501      	movle	r5, #1
 8017044:	2b03      	cmp	r3, #3
 8017046:	f200 808f 	bhi.w	8017168 <_dtoa_r+0x2f0>
 801704a:	e8df f003 	tbb	[pc, r3]
 801704e:	7f7d      	.short	0x7f7d
 8017050:	7131      	.short	0x7131
 8017052:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017056:	441d      	add	r5, r3
 8017058:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801705c:	2820      	cmp	r0, #32
 801705e:	dd13      	ble.n	8017088 <_dtoa_r+0x210>
 8017060:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017064:	9b00      	ldr	r3, [sp, #0]
 8017066:	fa08 f800 	lsl.w	r8, r8, r0
 801706a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801706e:	fa23 f000 	lsr.w	r0, r3, r0
 8017072:	ea48 0000 	orr.w	r0, r8, r0
 8017076:	f7f1 f97d 	bl	8008374 <__aeabi_ui2d>
 801707a:	2301      	movs	r3, #1
 801707c:	4682      	mov	sl, r0
 801707e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017082:	3d01      	subs	r5, #1
 8017084:	9313      	str	r3, [sp, #76]	; 0x4c
 8017086:	e772      	b.n	8016f6e <_dtoa_r+0xf6>
 8017088:	9b00      	ldr	r3, [sp, #0]
 801708a:	f1c0 0020 	rsb	r0, r0, #32
 801708e:	fa03 f000 	lsl.w	r0, r3, r0
 8017092:	e7f0      	b.n	8017076 <_dtoa_r+0x1fe>
 8017094:	2301      	movs	r3, #1
 8017096:	e7b1      	b.n	8016ffc <_dtoa_r+0x184>
 8017098:	900f      	str	r0, [sp, #60]	; 0x3c
 801709a:	e7b0      	b.n	8016ffe <_dtoa_r+0x186>
 801709c:	9b05      	ldr	r3, [sp, #20]
 801709e:	eba3 030a 	sub.w	r3, r3, sl
 80170a2:	9305      	str	r3, [sp, #20]
 80170a4:	f1ca 0300 	rsb	r3, sl, #0
 80170a8:	9307      	str	r3, [sp, #28]
 80170aa:	2300      	movs	r3, #0
 80170ac:	930e      	str	r3, [sp, #56]	; 0x38
 80170ae:	e7bb      	b.n	8017028 <_dtoa_r+0x1b0>
 80170b0:	2301      	movs	r3, #1
 80170b2:	930a      	str	r3, [sp, #40]	; 0x28
 80170b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	dd59      	ble.n	801716e <_dtoa_r+0x2f6>
 80170ba:	9302      	str	r3, [sp, #8]
 80170bc:	4699      	mov	r9, r3
 80170be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80170c0:	2200      	movs	r2, #0
 80170c2:	6072      	str	r2, [r6, #4]
 80170c4:	2204      	movs	r2, #4
 80170c6:	f102 0014 	add.w	r0, r2, #20
 80170ca:	4298      	cmp	r0, r3
 80170cc:	6871      	ldr	r1, [r6, #4]
 80170ce:	d953      	bls.n	8017178 <_dtoa_r+0x300>
 80170d0:	4620      	mov	r0, r4
 80170d2:	f000 fe7d 	bl	8017dd0 <_Balloc>
 80170d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170d8:	6030      	str	r0, [r6, #0]
 80170da:	f1b9 0f0e 	cmp.w	r9, #14
 80170de:	f8d3 b000 	ldr.w	fp, [r3]
 80170e2:	f200 80e6 	bhi.w	80172b2 <_dtoa_r+0x43a>
 80170e6:	2d00      	cmp	r5, #0
 80170e8:	f000 80e3 	beq.w	80172b2 <_dtoa_r+0x43a>
 80170ec:	ed9d 7b00 	vldr	d7, [sp]
 80170f0:	f1ba 0f00 	cmp.w	sl, #0
 80170f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80170f8:	dd74      	ble.n	80171e4 <_dtoa_r+0x36c>
 80170fa:	4a2a      	ldr	r2, [pc, #168]	; (80171a4 <_dtoa_r+0x32c>)
 80170fc:	f00a 030f 	and.w	r3, sl, #15
 8017100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017104:	ed93 7b00 	vldr	d7, [r3]
 8017108:	ea4f 162a 	mov.w	r6, sl, asr #4
 801710c:	06f0      	lsls	r0, r6, #27
 801710e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017112:	d565      	bpl.n	80171e0 <_dtoa_r+0x368>
 8017114:	4b24      	ldr	r3, [pc, #144]	; (80171a8 <_dtoa_r+0x330>)
 8017116:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801711a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801711e:	f7f1 facd 	bl	80086bc <__aeabi_ddiv>
 8017122:	e9cd 0100 	strd	r0, r1, [sp]
 8017126:	f006 060f 	and.w	r6, r6, #15
 801712a:	2503      	movs	r5, #3
 801712c:	4f1e      	ldr	r7, [pc, #120]	; (80171a8 <_dtoa_r+0x330>)
 801712e:	e04c      	b.n	80171ca <_dtoa_r+0x352>
 8017130:	2301      	movs	r3, #1
 8017132:	930a      	str	r3, [sp, #40]	; 0x28
 8017134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017136:	4453      	add	r3, sl
 8017138:	f103 0901 	add.w	r9, r3, #1
 801713c:	9302      	str	r3, [sp, #8]
 801713e:	464b      	mov	r3, r9
 8017140:	2b01      	cmp	r3, #1
 8017142:	bfb8      	it	lt
 8017144:	2301      	movlt	r3, #1
 8017146:	e7ba      	b.n	80170be <_dtoa_r+0x246>
 8017148:	2300      	movs	r3, #0
 801714a:	e7b2      	b.n	80170b2 <_dtoa_r+0x23a>
 801714c:	2300      	movs	r3, #0
 801714e:	e7f0      	b.n	8017132 <_dtoa_r+0x2ba>
 8017150:	2501      	movs	r5, #1
 8017152:	2300      	movs	r3, #0
 8017154:	9306      	str	r3, [sp, #24]
 8017156:	950a      	str	r5, [sp, #40]	; 0x28
 8017158:	f04f 33ff 	mov.w	r3, #4294967295
 801715c:	9302      	str	r3, [sp, #8]
 801715e:	4699      	mov	r9, r3
 8017160:	2200      	movs	r2, #0
 8017162:	2312      	movs	r3, #18
 8017164:	920b      	str	r2, [sp, #44]	; 0x2c
 8017166:	e7aa      	b.n	80170be <_dtoa_r+0x246>
 8017168:	2301      	movs	r3, #1
 801716a:	930a      	str	r3, [sp, #40]	; 0x28
 801716c:	e7f4      	b.n	8017158 <_dtoa_r+0x2e0>
 801716e:	2301      	movs	r3, #1
 8017170:	9302      	str	r3, [sp, #8]
 8017172:	4699      	mov	r9, r3
 8017174:	461a      	mov	r2, r3
 8017176:	e7f5      	b.n	8017164 <_dtoa_r+0x2ec>
 8017178:	3101      	adds	r1, #1
 801717a:	6071      	str	r1, [r6, #4]
 801717c:	0052      	lsls	r2, r2, #1
 801717e:	e7a2      	b.n	80170c6 <_dtoa_r+0x24e>
 8017180:	636f4361 	.word	0x636f4361
 8017184:	3fd287a7 	.word	0x3fd287a7
 8017188:	8b60c8b3 	.word	0x8b60c8b3
 801718c:	3fc68a28 	.word	0x3fc68a28
 8017190:	509f79fb 	.word	0x509f79fb
 8017194:	3fd34413 	.word	0x3fd34413
 8017198:	7ff00000 	.word	0x7ff00000
 801719c:	08018b2d 	.word	0x08018b2d
 80171a0:	3ff80000 	.word	0x3ff80000
 80171a4:	08018be8 	.word	0x08018be8
 80171a8:	08018bc0 	.word	0x08018bc0
 80171ac:	08018b59 	.word	0x08018b59
 80171b0:	07f1      	lsls	r1, r6, #31
 80171b2:	d508      	bpl.n	80171c6 <_dtoa_r+0x34e>
 80171b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80171b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171bc:	f7f1 f954 	bl	8008468 <__aeabi_dmul>
 80171c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80171c4:	3501      	adds	r5, #1
 80171c6:	1076      	asrs	r6, r6, #1
 80171c8:	3708      	adds	r7, #8
 80171ca:	2e00      	cmp	r6, #0
 80171cc:	d1f0      	bne.n	80171b0 <_dtoa_r+0x338>
 80171ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80171d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171d6:	f7f1 fa71 	bl	80086bc <__aeabi_ddiv>
 80171da:	e9cd 0100 	strd	r0, r1, [sp]
 80171de:	e01a      	b.n	8017216 <_dtoa_r+0x39e>
 80171e0:	2502      	movs	r5, #2
 80171e2:	e7a3      	b.n	801712c <_dtoa_r+0x2b4>
 80171e4:	f000 80a0 	beq.w	8017328 <_dtoa_r+0x4b0>
 80171e8:	f1ca 0600 	rsb	r6, sl, #0
 80171ec:	4b9f      	ldr	r3, [pc, #636]	; (801746c <_dtoa_r+0x5f4>)
 80171ee:	4fa0      	ldr	r7, [pc, #640]	; (8017470 <_dtoa_r+0x5f8>)
 80171f0:	f006 020f 	and.w	r2, r6, #15
 80171f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017200:	f7f1 f932 	bl	8008468 <__aeabi_dmul>
 8017204:	e9cd 0100 	strd	r0, r1, [sp]
 8017208:	1136      	asrs	r6, r6, #4
 801720a:	2300      	movs	r3, #0
 801720c:	2502      	movs	r5, #2
 801720e:	2e00      	cmp	r6, #0
 8017210:	d17f      	bne.n	8017312 <_dtoa_r+0x49a>
 8017212:	2b00      	cmp	r3, #0
 8017214:	d1e1      	bne.n	80171da <_dtoa_r+0x362>
 8017216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017218:	2b00      	cmp	r3, #0
 801721a:	f000 8087 	beq.w	801732c <_dtoa_r+0x4b4>
 801721e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017222:	2200      	movs	r2, #0
 8017224:	4b93      	ldr	r3, [pc, #588]	; (8017474 <_dtoa_r+0x5fc>)
 8017226:	4630      	mov	r0, r6
 8017228:	4639      	mov	r1, r7
 801722a:	f7f1 fb8f 	bl	800894c <__aeabi_dcmplt>
 801722e:	2800      	cmp	r0, #0
 8017230:	d07c      	beq.n	801732c <_dtoa_r+0x4b4>
 8017232:	f1b9 0f00 	cmp.w	r9, #0
 8017236:	d079      	beq.n	801732c <_dtoa_r+0x4b4>
 8017238:	9b02      	ldr	r3, [sp, #8]
 801723a:	2b00      	cmp	r3, #0
 801723c:	dd35      	ble.n	80172aa <_dtoa_r+0x432>
 801723e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017242:	9308      	str	r3, [sp, #32]
 8017244:	4639      	mov	r1, r7
 8017246:	2200      	movs	r2, #0
 8017248:	4b8b      	ldr	r3, [pc, #556]	; (8017478 <_dtoa_r+0x600>)
 801724a:	4630      	mov	r0, r6
 801724c:	f7f1 f90c 	bl	8008468 <__aeabi_dmul>
 8017250:	e9cd 0100 	strd	r0, r1, [sp]
 8017254:	9f02      	ldr	r7, [sp, #8]
 8017256:	3501      	adds	r5, #1
 8017258:	4628      	mov	r0, r5
 801725a:	f7f1 f89b 	bl	8008394 <__aeabi_i2d>
 801725e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017262:	f7f1 f901 	bl	8008468 <__aeabi_dmul>
 8017266:	2200      	movs	r2, #0
 8017268:	4b84      	ldr	r3, [pc, #528]	; (801747c <_dtoa_r+0x604>)
 801726a:	f7f0 ff47 	bl	80080fc <__adddf3>
 801726e:	4605      	mov	r5, r0
 8017270:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017274:	2f00      	cmp	r7, #0
 8017276:	d15d      	bne.n	8017334 <_dtoa_r+0x4bc>
 8017278:	2200      	movs	r2, #0
 801727a:	4b81      	ldr	r3, [pc, #516]	; (8017480 <_dtoa_r+0x608>)
 801727c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017280:	f7f0 ff3a 	bl	80080f8 <__aeabi_dsub>
 8017284:	462a      	mov	r2, r5
 8017286:	4633      	mov	r3, r6
 8017288:	e9cd 0100 	strd	r0, r1, [sp]
 801728c:	f7f1 fb7c 	bl	8008988 <__aeabi_dcmpgt>
 8017290:	2800      	cmp	r0, #0
 8017292:	f040 8288 	bne.w	80177a6 <_dtoa_r+0x92e>
 8017296:	462a      	mov	r2, r5
 8017298:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801729c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172a0:	f7f1 fb54 	bl	800894c <__aeabi_dcmplt>
 80172a4:	2800      	cmp	r0, #0
 80172a6:	f040 827c 	bne.w	80177a2 <_dtoa_r+0x92a>
 80172aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80172ae:	e9cd 2300 	strd	r2, r3, [sp]
 80172b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	f2c0 8150 	blt.w	801755a <_dtoa_r+0x6e2>
 80172ba:	f1ba 0f0e 	cmp.w	sl, #14
 80172be:	f300 814c 	bgt.w	801755a <_dtoa_r+0x6e2>
 80172c2:	4b6a      	ldr	r3, [pc, #424]	; (801746c <_dtoa_r+0x5f4>)
 80172c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80172c8:	ed93 7b00 	vldr	d7, [r3]
 80172cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80172d4:	f280 80d8 	bge.w	8017488 <_dtoa_r+0x610>
 80172d8:	f1b9 0f00 	cmp.w	r9, #0
 80172dc:	f300 80d4 	bgt.w	8017488 <_dtoa_r+0x610>
 80172e0:	f040 825e 	bne.w	80177a0 <_dtoa_r+0x928>
 80172e4:	2200      	movs	r2, #0
 80172e6:	4b66      	ldr	r3, [pc, #408]	; (8017480 <_dtoa_r+0x608>)
 80172e8:	ec51 0b17 	vmov	r0, r1, d7
 80172ec:	f7f1 f8bc 	bl	8008468 <__aeabi_dmul>
 80172f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172f4:	f7f1 fb3e 	bl	8008974 <__aeabi_dcmpge>
 80172f8:	464f      	mov	r7, r9
 80172fa:	464e      	mov	r6, r9
 80172fc:	2800      	cmp	r0, #0
 80172fe:	f040 8234 	bne.w	801776a <_dtoa_r+0x8f2>
 8017302:	2331      	movs	r3, #49	; 0x31
 8017304:	f10b 0501 	add.w	r5, fp, #1
 8017308:	f88b 3000 	strb.w	r3, [fp]
 801730c:	f10a 0a01 	add.w	sl, sl, #1
 8017310:	e22f      	b.n	8017772 <_dtoa_r+0x8fa>
 8017312:	07f2      	lsls	r2, r6, #31
 8017314:	d505      	bpl.n	8017322 <_dtoa_r+0x4aa>
 8017316:	e9d7 2300 	ldrd	r2, r3, [r7]
 801731a:	f7f1 f8a5 	bl	8008468 <__aeabi_dmul>
 801731e:	3501      	adds	r5, #1
 8017320:	2301      	movs	r3, #1
 8017322:	1076      	asrs	r6, r6, #1
 8017324:	3708      	adds	r7, #8
 8017326:	e772      	b.n	801720e <_dtoa_r+0x396>
 8017328:	2502      	movs	r5, #2
 801732a:	e774      	b.n	8017216 <_dtoa_r+0x39e>
 801732c:	f8cd a020 	str.w	sl, [sp, #32]
 8017330:	464f      	mov	r7, r9
 8017332:	e791      	b.n	8017258 <_dtoa_r+0x3e0>
 8017334:	4b4d      	ldr	r3, [pc, #308]	; (801746c <_dtoa_r+0x5f4>)
 8017336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801733a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017340:	2b00      	cmp	r3, #0
 8017342:	d047      	beq.n	80173d4 <_dtoa_r+0x55c>
 8017344:	4602      	mov	r2, r0
 8017346:	460b      	mov	r3, r1
 8017348:	2000      	movs	r0, #0
 801734a:	494e      	ldr	r1, [pc, #312]	; (8017484 <_dtoa_r+0x60c>)
 801734c:	f7f1 f9b6 	bl	80086bc <__aeabi_ddiv>
 8017350:	462a      	mov	r2, r5
 8017352:	4633      	mov	r3, r6
 8017354:	f7f0 fed0 	bl	80080f8 <__aeabi_dsub>
 8017358:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801735c:	465d      	mov	r5, fp
 801735e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017362:	f7f1 fb31 	bl	80089c8 <__aeabi_d2iz>
 8017366:	4606      	mov	r6, r0
 8017368:	f7f1 f814 	bl	8008394 <__aeabi_i2d>
 801736c:	4602      	mov	r2, r0
 801736e:	460b      	mov	r3, r1
 8017370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017374:	f7f0 fec0 	bl	80080f8 <__aeabi_dsub>
 8017378:	3630      	adds	r6, #48	; 0x30
 801737a:	f805 6b01 	strb.w	r6, [r5], #1
 801737e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017382:	e9cd 0100 	strd	r0, r1, [sp]
 8017386:	f7f1 fae1 	bl	800894c <__aeabi_dcmplt>
 801738a:	2800      	cmp	r0, #0
 801738c:	d163      	bne.n	8017456 <_dtoa_r+0x5de>
 801738e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017392:	2000      	movs	r0, #0
 8017394:	4937      	ldr	r1, [pc, #220]	; (8017474 <_dtoa_r+0x5fc>)
 8017396:	f7f0 feaf 	bl	80080f8 <__aeabi_dsub>
 801739a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801739e:	f7f1 fad5 	bl	800894c <__aeabi_dcmplt>
 80173a2:	2800      	cmp	r0, #0
 80173a4:	f040 80b7 	bne.w	8017516 <_dtoa_r+0x69e>
 80173a8:	eba5 030b 	sub.w	r3, r5, fp
 80173ac:	429f      	cmp	r7, r3
 80173ae:	f77f af7c 	ble.w	80172aa <_dtoa_r+0x432>
 80173b2:	2200      	movs	r2, #0
 80173b4:	4b30      	ldr	r3, [pc, #192]	; (8017478 <_dtoa_r+0x600>)
 80173b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80173ba:	f7f1 f855 	bl	8008468 <__aeabi_dmul>
 80173be:	2200      	movs	r2, #0
 80173c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80173c4:	4b2c      	ldr	r3, [pc, #176]	; (8017478 <_dtoa_r+0x600>)
 80173c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173ca:	f7f1 f84d 	bl	8008468 <__aeabi_dmul>
 80173ce:	e9cd 0100 	strd	r0, r1, [sp]
 80173d2:	e7c4      	b.n	801735e <_dtoa_r+0x4e6>
 80173d4:	462a      	mov	r2, r5
 80173d6:	4633      	mov	r3, r6
 80173d8:	f7f1 f846 	bl	8008468 <__aeabi_dmul>
 80173dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80173e0:	eb0b 0507 	add.w	r5, fp, r7
 80173e4:	465e      	mov	r6, fp
 80173e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173ea:	f7f1 faed 	bl	80089c8 <__aeabi_d2iz>
 80173ee:	4607      	mov	r7, r0
 80173f0:	f7f0 ffd0 	bl	8008394 <__aeabi_i2d>
 80173f4:	3730      	adds	r7, #48	; 0x30
 80173f6:	4602      	mov	r2, r0
 80173f8:	460b      	mov	r3, r1
 80173fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173fe:	f7f0 fe7b 	bl	80080f8 <__aeabi_dsub>
 8017402:	f806 7b01 	strb.w	r7, [r6], #1
 8017406:	42ae      	cmp	r6, r5
 8017408:	e9cd 0100 	strd	r0, r1, [sp]
 801740c:	f04f 0200 	mov.w	r2, #0
 8017410:	d126      	bne.n	8017460 <_dtoa_r+0x5e8>
 8017412:	4b1c      	ldr	r3, [pc, #112]	; (8017484 <_dtoa_r+0x60c>)
 8017414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017418:	f7f0 fe70 	bl	80080fc <__adddf3>
 801741c:	4602      	mov	r2, r0
 801741e:	460b      	mov	r3, r1
 8017420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017424:	f7f1 fab0 	bl	8008988 <__aeabi_dcmpgt>
 8017428:	2800      	cmp	r0, #0
 801742a:	d174      	bne.n	8017516 <_dtoa_r+0x69e>
 801742c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017430:	2000      	movs	r0, #0
 8017432:	4914      	ldr	r1, [pc, #80]	; (8017484 <_dtoa_r+0x60c>)
 8017434:	f7f0 fe60 	bl	80080f8 <__aeabi_dsub>
 8017438:	4602      	mov	r2, r0
 801743a:	460b      	mov	r3, r1
 801743c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017440:	f7f1 fa84 	bl	800894c <__aeabi_dcmplt>
 8017444:	2800      	cmp	r0, #0
 8017446:	f43f af30 	beq.w	80172aa <_dtoa_r+0x432>
 801744a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801744e:	2b30      	cmp	r3, #48	; 0x30
 8017450:	f105 32ff 	add.w	r2, r5, #4294967295
 8017454:	d002      	beq.n	801745c <_dtoa_r+0x5e4>
 8017456:	f8dd a020 	ldr.w	sl, [sp, #32]
 801745a:	e04a      	b.n	80174f2 <_dtoa_r+0x67a>
 801745c:	4615      	mov	r5, r2
 801745e:	e7f4      	b.n	801744a <_dtoa_r+0x5d2>
 8017460:	4b05      	ldr	r3, [pc, #20]	; (8017478 <_dtoa_r+0x600>)
 8017462:	f7f1 f801 	bl	8008468 <__aeabi_dmul>
 8017466:	e9cd 0100 	strd	r0, r1, [sp]
 801746a:	e7bc      	b.n	80173e6 <_dtoa_r+0x56e>
 801746c:	08018be8 	.word	0x08018be8
 8017470:	08018bc0 	.word	0x08018bc0
 8017474:	3ff00000 	.word	0x3ff00000
 8017478:	40240000 	.word	0x40240000
 801747c:	401c0000 	.word	0x401c0000
 8017480:	40140000 	.word	0x40140000
 8017484:	3fe00000 	.word	0x3fe00000
 8017488:	e9dd 6700 	ldrd	r6, r7, [sp]
 801748c:	465d      	mov	r5, fp
 801748e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017492:	4630      	mov	r0, r6
 8017494:	4639      	mov	r1, r7
 8017496:	f7f1 f911 	bl	80086bc <__aeabi_ddiv>
 801749a:	f7f1 fa95 	bl	80089c8 <__aeabi_d2iz>
 801749e:	4680      	mov	r8, r0
 80174a0:	f7f0 ff78 	bl	8008394 <__aeabi_i2d>
 80174a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174a8:	f7f0 ffde 	bl	8008468 <__aeabi_dmul>
 80174ac:	4602      	mov	r2, r0
 80174ae:	460b      	mov	r3, r1
 80174b0:	4630      	mov	r0, r6
 80174b2:	4639      	mov	r1, r7
 80174b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80174b8:	f7f0 fe1e 	bl	80080f8 <__aeabi_dsub>
 80174bc:	f805 6b01 	strb.w	r6, [r5], #1
 80174c0:	eba5 060b 	sub.w	r6, r5, fp
 80174c4:	45b1      	cmp	r9, r6
 80174c6:	4602      	mov	r2, r0
 80174c8:	460b      	mov	r3, r1
 80174ca:	d139      	bne.n	8017540 <_dtoa_r+0x6c8>
 80174cc:	f7f0 fe16 	bl	80080fc <__adddf3>
 80174d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174d4:	4606      	mov	r6, r0
 80174d6:	460f      	mov	r7, r1
 80174d8:	f7f1 fa56 	bl	8008988 <__aeabi_dcmpgt>
 80174dc:	b9c8      	cbnz	r0, 8017512 <_dtoa_r+0x69a>
 80174de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174e2:	4630      	mov	r0, r6
 80174e4:	4639      	mov	r1, r7
 80174e6:	f7f1 fa27 	bl	8008938 <__aeabi_dcmpeq>
 80174ea:	b110      	cbz	r0, 80174f2 <_dtoa_r+0x67a>
 80174ec:	f018 0f01 	tst.w	r8, #1
 80174f0:	d10f      	bne.n	8017512 <_dtoa_r+0x69a>
 80174f2:	9904      	ldr	r1, [sp, #16]
 80174f4:	4620      	mov	r0, r4
 80174f6:	f000 fc9f 	bl	8017e38 <_Bfree>
 80174fa:	2300      	movs	r3, #0
 80174fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174fe:	702b      	strb	r3, [r5, #0]
 8017500:	f10a 0301 	add.w	r3, sl, #1
 8017504:	6013      	str	r3, [r2, #0]
 8017506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017508:	2b00      	cmp	r3, #0
 801750a:	f000 8241 	beq.w	8017990 <_dtoa_r+0xb18>
 801750e:	601d      	str	r5, [r3, #0]
 8017510:	e23e      	b.n	8017990 <_dtoa_r+0xb18>
 8017512:	f8cd a020 	str.w	sl, [sp, #32]
 8017516:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801751a:	2a39      	cmp	r2, #57	; 0x39
 801751c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017520:	d108      	bne.n	8017534 <_dtoa_r+0x6bc>
 8017522:	459b      	cmp	fp, r3
 8017524:	d10a      	bne.n	801753c <_dtoa_r+0x6c4>
 8017526:	9b08      	ldr	r3, [sp, #32]
 8017528:	3301      	adds	r3, #1
 801752a:	9308      	str	r3, [sp, #32]
 801752c:	2330      	movs	r3, #48	; 0x30
 801752e:	f88b 3000 	strb.w	r3, [fp]
 8017532:	465b      	mov	r3, fp
 8017534:	781a      	ldrb	r2, [r3, #0]
 8017536:	3201      	adds	r2, #1
 8017538:	701a      	strb	r2, [r3, #0]
 801753a:	e78c      	b.n	8017456 <_dtoa_r+0x5de>
 801753c:	461d      	mov	r5, r3
 801753e:	e7ea      	b.n	8017516 <_dtoa_r+0x69e>
 8017540:	2200      	movs	r2, #0
 8017542:	4b9b      	ldr	r3, [pc, #620]	; (80177b0 <_dtoa_r+0x938>)
 8017544:	f7f0 ff90 	bl	8008468 <__aeabi_dmul>
 8017548:	2200      	movs	r2, #0
 801754a:	2300      	movs	r3, #0
 801754c:	4606      	mov	r6, r0
 801754e:	460f      	mov	r7, r1
 8017550:	f7f1 f9f2 	bl	8008938 <__aeabi_dcmpeq>
 8017554:	2800      	cmp	r0, #0
 8017556:	d09a      	beq.n	801748e <_dtoa_r+0x616>
 8017558:	e7cb      	b.n	80174f2 <_dtoa_r+0x67a>
 801755a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801755c:	2a00      	cmp	r2, #0
 801755e:	f000 808b 	beq.w	8017678 <_dtoa_r+0x800>
 8017562:	9a06      	ldr	r2, [sp, #24]
 8017564:	2a01      	cmp	r2, #1
 8017566:	dc6e      	bgt.n	8017646 <_dtoa_r+0x7ce>
 8017568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801756a:	2a00      	cmp	r2, #0
 801756c:	d067      	beq.n	801763e <_dtoa_r+0x7c6>
 801756e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017572:	9f07      	ldr	r7, [sp, #28]
 8017574:	9d05      	ldr	r5, [sp, #20]
 8017576:	9a05      	ldr	r2, [sp, #20]
 8017578:	2101      	movs	r1, #1
 801757a:	441a      	add	r2, r3
 801757c:	4620      	mov	r0, r4
 801757e:	9205      	str	r2, [sp, #20]
 8017580:	4498      	add	r8, r3
 8017582:	f000 fcf9 	bl	8017f78 <__i2b>
 8017586:	4606      	mov	r6, r0
 8017588:	2d00      	cmp	r5, #0
 801758a:	dd0c      	ble.n	80175a6 <_dtoa_r+0x72e>
 801758c:	f1b8 0f00 	cmp.w	r8, #0
 8017590:	dd09      	ble.n	80175a6 <_dtoa_r+0x72e>
 8017592:	4545      	cmp	r5, r8
 8017594:	9a05      	ldr	r2, [sp, #20]
 8017596:	462b      	mov	r3, r5
 8017598:	bfa8      	it	ge
 801759a:	4643      	movge	r3, r8
 801759c:	1ad2      	subs	r2, r2, r3
 801759e:	9205      	str	r2, [sp, #20]
 80175a0:	1aed      	subs	r5, r5, r3
 80175a2:	eba8 0803 	sub.w	r8, r8, r3
 80175a6:	9b07      	ldr	r3, [sp, #28]
 80175a8:	b1eb      	cbz	r3, 80175e6 <_dtoa_r+0x76e>
 80175aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d067      	beq.n	8017680 <_dtoa_r+0x808>
 80175b0:	b18f      	cbz	r7, 80175d6 <_dtoa_r+0x75e>
 80175b2:	4631      	mov	r1, r6
 80175b4:	463a      	mov	r2, r7
 80175b6:	4620      	mov	r0, r4
 80175b8:	f000 fd7e 	bl	80180b8 <__pow5mult>
 80175bc:	9a04      	ldr	r2, [sp, #16]
 80175be:	4601      	mov	r1, r0
 80175c0:	4606      	mov	r6, r0
 80175c2:	4620      	mov	r0, r4
 80175c4:	f000 fce1 	bl	8017f8a <__multiply>
 80175c8:	9904      	ldr	r1, [sp, #16]
 80175ca:	9008      	str	r0, [sp, #32]
 80175cc:	4620      	mov	r0, r4
 80175ce:	f000 fc33 	bl	8017e38 <_Bfree>
 80175d2:	9b08      	ldr	r3, [sp, #32]
 80175d4:	9304      	str	r3, [sp, #16]
 80175d6:	9b07      	ldr	r3, [sp, #28]
 80175d8:	1bda      	subs	r2, r3, r7
 80175da:	d004      	beq.n	80175e6 <_dtoa_r+0x76e>
 80175dc:	9904      	ldr	r1, [sp, #16]
 80175de:	4620      	mov	r0, r4
 80175e0:	f000 fd6a 	bl	80180b8 <__pow5mult>
 80175e4:	9004      	str	r0, [sp, #16]
 80175e6:	2101      	movs	r1, #1
 80175e8:	4620      	mov	r0, r4
 80175ea:	f000 fcc5 	bl	8017f78 <__i2b>
 80175ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175f0:	4607      	mov	r7, r0
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	f000 81d0 	beq.w	8017998 <_dtoa_r+0xb20>
 80175f8:	461a      	mov	r2, r3
 80175fa:	4601      	mov	r1, r0
 80175fc:	4620      	mov	r0, r4
 80175fe:	f000 fd5b 	bl	80180b8 <__pow5mult>
 8017602:	9b06      	ldr	r3, [sp, #24]
 8017604:	2b01      	cmp	r3, #1
 8017606:	4607      	mov	r7, r0
 8017608:	dc40      	bgt.n	801768c <_dtoa_r+0x814>
 801760a:	9b00      	ldr	r3, [sp, #0]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d139      	bne.n	8017684 <_dtoa_r+0x80c>
 8017610:	9b01      	ldr	r3, [sp, #4]
 8017612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017616:	2b00      	cmp	r3, #0
 8017618:	d136      	bne.n	8017688 <_dtoa_r+0x810>
 801761a:	9b01      	ldr	r3, [sp, #4]
 801761c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017620:	0d1b      	lsrs	r3, r3, #20
 8017622:	051b      	lsls	r3, r3, #20
 8017624:	b12b      	cbz	r3, 8017632 <_dtoa_r+0x7ba>
 8017626:	9b05      	ldr	r3, [sp, #20]
 8017628:	3301      	adds	r3, #1
 801762a:	9305      	str	r3, [sp, #20]
 801762c:	f108 0801 	add.w	r8, r8, #1
 8017630:	2301      	movs	r3, #1
 8017632:	9307      	str	r3, [sp, #28]
 8017634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017636:	2b00      	cmp	r3, #0
 8017638:	d12a      	bne.n	8017690 <_dtoa_r+0x818>
 801763a:	2001      	movs	r0, #1
 801763c:	e030      	b.n	80176a0 <_dtoa_r+0x828>
 801763e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017640:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017644:	e795      	b.n	8017572 <_dtoa_r+0x6fa>
 8017646:	9b07      	ldr	r3, [sp, #28]
 8017648:	f109 37ff 	add.w	r7, r9, #4294967295
 801764c:	42bb      	cmp	r3, r7
 801764e:	bfbf      	itttt	lt
 8017650:	9b07      	ldrlt	r3, [sp, #28]
 8017652:	9707      	strlt	r7, [sp, #28]
 8017654:	1afa      	sublt	r2, r7, r3
 8017656:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017658:	bfbb      	ittet	lt
 801765a:	189b      	addlt	r3, r3, r2
 801765c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801765e:	1bdf      	subge	r7, r3, r7
 8017660:	2700      	movlt	r7, #0
 8017662:	f1b9 0f00 	cmp.w	r9, #0
 8017666:	bfb5      	itete	lt
 8017668:	9b05      	ldrlt	r3, [sp, #20]
 801766a:	9d05      	ldrge	r5, [sp, #20]
 801766c:	eba3 0509 	sublt.w	r5, r3, r9
 8017670:	464b      	movge	r3, r9
 8017672:	bfb8      	it	lt
 8017674:	2300      	movlt	r3, #0
 8017676:	e77e      	b.n	8017576 <_dtoa_r+0x6fe>
 8017678:	9f07      	ldr	r7, [sp, #28]
 801767a:	9d05      	ldr	r5, [sp, #20]
 801767c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801767e:	e783      	b.n	8017588 <_dtoa_r+0x710>
 8017680:	9a07      	ldr	r2, [sp, #28]
 8017682:	e7ab      	b.n	80175dc <_dtoa_r+0x764>
 8017684:	2300      	movs	r3, #0
 8017686:	e7d4      	b.n	8017632 <_dtoa_r+0x7ba>
 8017688:	9b00      	ldr	r3, [sp, #0]
 801768a:	e7d2      	b.n	8017632 <_dtoa_r+0x7ba>
 801768c:	2300      	movs	r3, #0
 801768e:	9307      	str	r3, [sp, #28]
 8017690:	693b      	ldr	r3, [r7, #16]
 8017692:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017696:	6918      	ldr	r0, [r3, #16]
 8017698:	f000 fc20 	bl	8017edc <__hi0bits>
 801769c:	f1c0 0020 	rsb	r0, r0, #32
 80176a0:	4440      	add	r0, r8
 80176a2:	f010 001f 	ands.w	r0, r0, #31
 80176a6:	d047      	beq.n	8017738 <_dtoa_r+0x8c0>
 80176a8:	f1c0 0320 	rsb	r3, r0, #32
 80176ac:	2b04      	cmp	r3, #4
 80176ae:	dd3b      	ble.n	8017728 <_dtoa_r+0x8b0>
 80176b0:	9b05      	ldr	r3, [sp, #20]
 80176b2:	f1c0 001c 	rsb	r0, r0, #28
 80176b6:	4403      	add	r3, r0
 80176b8:	9305      	str	r3, [sp, #20]
 80176ba:	4405      	add	r5, r0
 80176bc:	4480      	add	r8, r0
 80176be:	9b05      	ldr	r3, [sp, #20]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	dd05      	ble.n	80176d0 <_dtoa_r+0x858>
 80176c4:	461a      	mov	r2, r3
 80176c6:	9904      	ldr	r1, [sp, #16]
 80176c8:	4620      	mov	r0, r4
 80176ca:	f000 fd43 	bl	8018154 <__lshift>
 80176ce:	9004      	str	r0, [sp, #16]
 80176d0:	f1b8 0f00 	cmp.w	r8, #0
 80176d4:	dd05      	ble.n	80176e2 <_dtoa_r+0x86a>
 80176d6:	4639      	mov	r1, r7
 80176d8:	4642      	mov	r2, r8
 80176da:	4620      	mov	r0, r4
 80176dc:	f000 fd3a 	bl	8018154 <__lshift>
 80176e0:	4607      	mov	r7, r0
 80176e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176e4:	b353      	cbz	r3, 801773c <_dtoa_r+0x8c4>
 80176e6:	4639      	mov	r1, r7
 80176e8:	9804      	ldr	r0, [sp, #16]
 80176ea:	f000 fd87 	bl	80181fc <__mcmp>
 80176ee:	2800      	cmp	r0, #0
 80176f0:	da24      	bge.n	801773c <_dtoa_r+0x8c4>
 80176f2:	2300      	movs	r3, #0
 80176f4:	220a      	movs	r2, #10
 80176f6:	9904      	ldr	r1, [sp, #16]
 80176f8:	4620      	mov	r0, r4
 80176fa:	f000 fbb4 	bl	8017e66 <__multadd>
 80176fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017700:	9004      	str	r0, [sp, #16]
 8017702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017706:	2b00      	cmp	r3, #0
 8017708:	f000 814d 	beq.w	80179a6 <_dtoa_r+0xb2e>
 801770c:	2300      	movs	r3, #0
 801770e:	4631      	mov	r1, r6
 8017710:	220a      	movs	r2, #10
 8017712:	4620      	mov	r0, r4
 8017714:	f000 fba7 	bl	8017e66 <__multadd>
 8017718:	9b02      	ldr	r3, [sp, #8]
 801771a:	2b00      	cmp	r3, #0
 801771c:	4606      	mov	r6, r0
 801771e:	dc4f      	bgt.n	80177c0 <_dtoa_r+0x948>
 8017720:	9b06      	ldr	r3, [sp, #24]
 8017722:	2b02      	cmp	r3, #2
 8017724:	dd4c      	ble.n	80177c0 <_dtoa_r+0x948>
 8017726:	e011      	b.n	801774c <_dtoa_r+0x8d4>
 8017728:	d0c9      	beq.n	80176be <_dtoa_r+0x846>
 801772a:	9a05      	ldr	r2, [sp, #20]
 801772c:	331c      	adds	r3, #28
 801772e:	441a      	add	r2, r3
 8017730:	9205      	str	r2, [sp, #20]
 8017732:	441d      	add	r5, r3
 8017734:	4498      	add	r8, r3
 8017736:	e7c2      	b.n	80176be <_dtoa_r+0x846>
 8017738:	4603      	mov	r3, r0
 801773a:	e7f6      	b.n	801772a <_dtoa_r+0x8b2>
 801773c:	f1b9 0f00 	cmp.w	r9, #0
 8017740:	dc38      	bgt.n	80177b4 <_dtoa_r+0x93c>
 8017742:	9b06      	ldr	r3, [sp, #24]
 8017744:	2b02      	cmp	r3, #2
 8017746:	dd35      	ble.n	80177b4 <_dtoa_r+0x93c>
 8017748:	f8cd 9008 	str.w	r9, [sp, #8]
 801774c:	9b02      	ldr	r3, [sp, #8]
 801774e:	b963      	cbnz	r3, 801776a <_dtoa_r+0x8f2>
 8017750:	4639      	mov	r1, r7
 8017752:	2205      	movs	r2, #5
 8017754:	4620      	mov	r0, r4
 8017756:	f000 fb86 	bl	8017e66 <__multadd>
 801775a:	4601      	mov	r1, r0
 801775c:	4607      	mov	r7, r0
 801775e:	9804      	ldr	r0, [sp, #16]
 8017760:	f000 fd4c 	bl	80181fc <__mcmp>
 8017764:	2800      	cmp	r0, #0
 8017766:	f73f adcc 	bgt.w	8017302 <_dtoa_r+0x48a>
 801776a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801776c:	465d      	mov	r5, fp
 801776e:	ea6f 0a03 	mvn.w	sl, r3
 8017772:	f04f 0900 	mov.w	r9, #0
 8017776:	4639      	mov	r1, r7
 8017778:	4620      	mov	r0, r4
 801777a:	f000 fb5d 	bl	8017e38 <_Bfree>
 801777e:	2e00      	cmp	r6, #0
 8017780:	f43f aeb7 	beq.w	80174f2 <_dtoa_r+0x67a>
 8017784:	f1b9 0f00 	cmp.w	r9, #0
 8017788:	d005      	beq.n	8017796 <_dtoa_r+0x91e>
 801778a:	45b1      	cmp	r9, r6
 801778c:	d003      	beq.n	8017796 <_dtoa_r+0x91e>
 801778e:	4649      	mov	r1, r9
 8017790:	4620      	mov	r0, r4
 8017792:	f000 fb51 	bl	8017e38 <_Bfree>
 8017796:	4631      	mov	r1, r6
 8017798:	4620      	mov	r0, r4
 801779a:	f000 fb4d 	bl	8017e38 <_Bfree>
 801779e:	e6a8      	b.n	80174f2 <_dtoa_r+0x67a>
 80177a0:	2700      	movs	r7, #0
 80177a2:	463e      	mov	r6, r7
 80177a4:	e7e1      	b.n	801776a <_dtoa_r+0x8f2>
 80177a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80177aa:	463e      	mov	r6, r7
 80177ac:	e5a9      	b.n	8017302 <_dtoa_r+0x48a>
 80177ae:	bf00      	nop
 80177b0:	40240000 	.word	0x40240000
 80177b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	f000 80fa 	beq.w	80179b4 <_dtoa_r+0xb3c>
 80177c0:	2d00      	cmp	r5, #0
 80177c2:	dd05      	ble.n	80177d0 <_dtoa_r+0x958>
 80177c4:	4631      	mov	r1, r6
 80177c6:	462a      	mov	r2, r5
 80177c8:	4620      	mov	r0, r4
 80177ca:	f000 fcc3 	bl	8018154 <__lshift>
 80177ce:	4606      	mov	r6, r0
 80177d0:	9b07      	ldr	r3, [sp, #28]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d04c      	beq.n	8017870 <_dtoa_r+0x9f8>
 80177d6:	6871      	ldr	r1, [r6, #4]
 80177d8:	4620      	mov	r0, r4
 80177da:	f000 faf9 	bl	8017dd0 <_Balloc>
 80177de:	6932      	ldr	r2, [r6, #16]
 80177e0:	3202      	adds	r2, #2
 80177e2:	4605      	mov	r5, r0
 80177e4:	0092      	lsls	r2, r2, #2
 80177e6:	f106 010c 	add.w	r1, r6, #12
 80177ea:	300c      	adds	r0, #12
 80177ec:	f7fe fd0c 	bl	8016208 <memcpy>
 80177f0:	2201      	movs	r2, #1
 80177f2:	4629      	mov	r1, r5
 80177f4:	4620      	mov	r0, r4
 80177f6:	f000 fcad 	bl	8018154 <__lshift>
 80177fa:	9b00      	ldr	r3, [sp, #0]
 80177fc:	f8cd b014 	str.w	fp, [sp, #20]
 8017800:	f003 0301 	and.w	r3, r3, #1
 8017804:	46b1      	mov	r9, r6
 8017806:	9307      	str	r3, [sp, #28]
 8017808:	4606      	mov	r6, r0
 801780a:	4639      	mov	r1, r7
 801780c:	9804      	ldr	r0, [sp, #16]
 801780e:	f7ff faa7 	bl	8016d60 <quorem>
 8017812:	4649      	mov	r1, r9
 8017814:	4605      	mov	r5, r0
 8017816:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801781a:	9804      	ldr	r0, [sp, #16]
 801781c:	f000 fcee 	bl	80181fc <__mcmp>
 8017820:	4632      	mov	r2, r6
 8017822:	9000      	str	r0, [sp, #0]
 8017824:	4639      	mov	r1, r7
 8017826:	4620      	mov	r0, r4
 8017828:	f000 fd02 	bl	8018230 <__mdiff>
 801782c:	68c3      	ldr	r3, [r0, #12]
 801782e:	4602      	mov	r2, r0
 8017830:	bb03      	cbnz	r3, 8017874 <_dtoa_r+0x9fc>
 8017832:	4601      	mov	r1, r0
 8017834:	9008      	str	r0, [sp, #32]
 8017836:	9804      	ldr	r0, [sp, #16]
 8017838:	f000 fce0 	bl	80181fc <__mcmp>
 801783c:	9a08      	ldr	r2, [sp, #32]
 801783e:	4603      	mov	r3, r0
 8017840:	4611      	mov	r1, r2
 8017842:	4620      	mov	r0, r4
 8017844:	9308      	str	r3, [sp, #32]
 8017846:	f000 faf7 	bl	8017e38 <_Bfree>
 801784a:	9b08      	ldr	r3, [sp, #32]
 801784c:	b9a3      	cbnz	r3, 8017878 <_dtoa_r+0xa00>
 801784e:	9a06      	ldr	r2, [sp, #24]
 8017850:	b992      	cbnz	r2, 8017878 <_dtoa_r+0xa00>
 8017852:	9a07      	ldr	r2, [sp, #28]
 8017854:	b982      	cbnz	r2, 8017878 <_dtoa_r+0xa00>
 8017856:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801785a:	d029      	beq.n	80178b0 <_dtoa_r+0xa38>
 801785c:	9b00      	ldr	r3, [sp, #0]
 801785e:	2b00      	cmp	r3, #0
 8017860:	dd01      	ble.n	8017866 <_dtoa_r+0x9ee>
 8017862:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017866:	9b05      	ldr	r3, [sp, #20]
 8017868:	1c5d      	adds	r5, r3, #1
 801786a:	f883 8000 	strb.w	r8, [r3]
 801786e:	e782      	b.n	8017776 <_dtoa_r+0x8fe>
 8017870:	4630      	mov	r0, r6
 8017872:	e7c2      	b.n	80177fa <_dtoa_r+0x982>
 8017874:	2301      	movs	r3, #1
 8017876:	e7e3      	b.n	8017840 <_dtoa_r+0x9c8>
 8017878:	9a00      	ldr	r2, [sp, #0]
 801787a:	2a00      	cmp	r2, #0
 801787c:	db04      	blt.n	8017888 <_dtoa_r+0xa10>
 801787e:	d125      	bne.n	80178cc <_dtoa_r+0xa54>
 8017880:	9a06      	ldr	r2, [sp, #24]
 8017882:	bb1a      	cbnz	r2, 80178cc <_dtoa_r+0xa54>
 8017884:	9a07      	ldr	r2, [sp, #28]
 8017886:	bb0a      	cbnz	r2, 80178cc <_dtoa_r+0xa54>
 8017888:	2b00      	cmp	r3, #0
 801788a:	ddec      	ble.n	8017866 <_dtoa_r+0x9ee>
 801788c:	2201      	movs	r2, #1
 801788e:	9904      	ldr	r1, [sp, #16]
 8017890:	4620      	mov	r0, r4
 8017892:	f000 fc5f 	bl	8018154 <__lshift>
 8017896:	4639      	mov	r1, r7
 8017898:	9004      	str	r0, [sp, #16]
 801789a:	f000 fcaf 	bl	80181fc <__mcmp>
 801789e:	2800      	cmp	r0, #0
 80178a0:	dc03      	bgt.n	80178aa <_dtoa_r+0xa32>
 80178a2:	d1e0      	bne.n	8017866 <_dtoa_r+0x9ee>
 80178a4:	f018 0f01 	tst.w	r8, #1
 80178a8:	d0dd      	beq.n	8017866 <_dtoa_r+0x9ee>
 80178aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80178ae:	d1d8      	bne.n	8017862 <_dtoa_r+0x9ea>
 80178b0:	9b05      	ldr	r3, [sp, #20]
 80178b2:	9a05      	ldr	r2, [sp, #20]
 80178b4:	1c5d      	adds	r5, r3, #1
 80178b6:	2339      	movs	r3, #57	; 0x39
 80178b8:	7013      	strb	r3, [r2, #0]
 80178ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80178be:	2b39      	cmp	r3, #57	; 0x39
 80178c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80178c4:	d04f      	beq.n	8017966 <_dtoa_r+0xaee>
 80178c6:	3301      	adds	r3, #1
 80178c8:	7013      	strb	r3, [r2, #0]
 80178ca:	e754      	b.n	8017776 <_dtoa_r+0x8fe>
 80178cc:	9a05      	ldr	r2, [sp, #20]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	f102 0501 	add.w	r5, r2, #1
 80178d4:	dd06      	ble.n	80178e4 <_dtoa_r+0xa6c>
 80178d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80178da:	d0e9      	beq.n	80178b0 <_dtoa_r+0xa38>
 80178dc:	f108 0801 	add.w	r8, r8, #1
 80178e0:	9b05      	ldr	r3, [sp, #20]
 80178e2:	e7c2      	b.n	801786a <_dtoa_r+0x9f2>
 80178e4:	9a02      	ldr	r2, [sp, #8]
 80178e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80178ea:	eba5 030b 	sub.w	r3, r5, fp
 80178ee:	4293      	cmp	r3, r2
 80178f0:	d021      	beq.n	8017936 <_dtoa_r+0xabe>
 80178f2:	2300      	movs	r3, #0
 80178f4:	220a      	movs	r2, #10
 80178f6:	9904      	ldr	r1, [sp, #16]
 80178f8:	4620      	mov	r0, r4
 80178fa:	f000 fab4 	bl	8017e66 <__multadd>
 80178fe:	45b1      	cmp	r9, r6
 8017900:	9004      	str	r0, [sp, #16]
 8017902:	f04f 0300 	mov.w	r3, #0
 8017906:	f04f 020a 	mov.w	r2, #10
 801790a:	4649      	mov	r1, r9
 801790c:	4620      	mov	r0, r4
 801790e:	d105      	bne.n	801791c <_dtoa_r+0xaa4>
 8017910:	f000 faa9 	bl	8017e66 <__multadd>
 8017914:	4681      	mov	r9, r0
 8017916:	4606      	mov	r6, r0
 8017918:	9505      	str	r5, [sp, #20]
 801791a:	e776      	b.n	801780a <_dtoa_r+0x992>
 801791c:	f000 faa3 	bl	8017e66 <__multadd>
 8017920:	4631      	mov	r1, r6
 8017922:	4681      	mov	r9, r0
 8017924:	2300      	movs	r3, #0
 8017926:	220a      	movs	r2, #10
 8017928:	4620      	mov	r0, r4
 801792a:	f000 fa9c 	bl	8017e66 <__multadd>
 801792e:	4606      	mov	r6, r0
 8017930:	e7f2      	b.n	8017918 <_dtoa_r+0xaa0>
 8017932:	f04f 0900 	mov.w	r9, #0
 8017936:	2201      	movs	r2, #1
 8017938:	9904      	ldr	r1, [sp, #16]
 801793a:	4620      	mov	r0, r4
 801793c:	f000 fc0a 	bl	8018154 <__lshift>
 8017940:	4639      	mov	r1, r7
 8017942:	9004      	str	r0, [sp, #16]
 8017944:	f000 fc5a 	bl	80181fc <__mcmp>
 8017948:	2800      	cmp	r0, #0
 801794a:	dcb6      	bgt.n	80178ba <_dtoa_r+0xa42>
 801794c:	d102      	bne.n	8017954 <_dtoa_r+0xadc>
 801794e:	f018 0f01 	tst.w	r8, #1
 8017952:	d1b2      	bne.n	80178ba <_dtoa_r+0xa42>
 8017954:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017958:	2b30      	cmp	r3, #48	; 0x30
 801795a:	f105 32ff 	add.w	r2, r5, #4294967295
 801795e:	f47f af0a 	bne.w	8017776 <_dtoa_r+0x8fe>
 8017962:	4615      	mov	r5, r2
 8017964:	e7f6      	b.n	8017954 <_dtoa_r+0xadc>
 8017966:	4593      	cmp	fp, r2
 8017968:	d105      	bne.n	8017976 <_dtoa_r+0xafe>
 801796a:	2331      	movs	r3, #49	; 0x31
 801796c:	f10a 0a01 	add.w	sl, sl, #1
 8017970:	f88b 3000 	strb.w	r3, [fp]
 8017974:	e6ff      	b.n	8017776 <_dtoa_r+0x8fe>
 8017976:	4615      	mov	r5, r2
 8017978:	e79f      	b.n	80178ba <_dtoa_r+0xa42>
 801797a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80179e0 <_dtoa_r+0xb68>
 801797e:	e007      	b.n	8017990 <_dtoa_r+0xb18>
 8017980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017982:	f8df b060 	ldr.w	fp, [pc, #96]	; 80179e4 <_dtoa_r+0xb6c>
 8017986:	b11b      	cbz	r3, 8017990 <_dtoa_r+0xb18>
 8017988:	f10b 0308 	add.w	r3, fp, #8
 801798c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801798e:	6013      	str	r3, [r2, #0]
 8017990:	4658      	mov	r0, fp
 8017992:	b017      	add	sp, #92	; 0x5c
 8017994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017998:	9b06      	ldr	r3, [sp, #24]
 801799a:	2b01      	cmp	r3, #1
 801799c:	f77f ae35 	ble.w	801760a <_dtoa_r+0x792>
 80179a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179a2:	9307      	str	r3, [sp, #28]
 80179a4:	e649      	b.n	801763a <_dtoa_r+0x7c2>
 80179a6:	9b02      	ldr	r3, [sp, #8]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	dc03      	bgt.n	80179b4 <_dtoa_r+0xb3c>
 80179ac:	9b06      	ldr	r3, [sp, #24]
 80179ae:	2b02      	cmp	r3, #2
 80179b0:	f73f aecc 	bgt.w	801774c <_dtoa_r+0x8d4>
 80179b4:	465d      	mov	r5, fp
 80179b6:	4639      	mov	r1, r7
 80179b8:	9804      	ldr	r0, [sp, #16]
 80179ba:	f7ff f9d1 	bl	8016d60 <quorem>
 80179be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80179c2:	f805 8b01 	strb.w	r8, [r5], #1
 80179c6:	9a02      	ldr	r2, [sp, #8]
 80179c8:	eba5 030b 	sub.w	r3, r5, fp
 80179cc:	429a      	cmp	r2, r3
 80179ce:	ddb0      	ble.n	8017932 <_dtoa_r+0xaba>
 80179d0:	2300      	movs	r3, #0
 80179d2:	220a      	movs	r2, #10
 80179d4:	9904      	ldr	r1, [sp, #16]
 80179d6:	4620      	mov	r0, r4
 80179d8:	f000 fa45 	bl	8017e66 <__multadd>
 80179dc:	9004      	str	r0, [sp, #16]
 80179de:	e7ea      	b.n	80179b6 <_dtoa_r+0xb3e>
 80179e0:	08018b2c 	.word	0x08018b2c
 80179e4:	08018b50 	.word	0x08018b50

080179e8 <__sflush_r>:
 80179e8:	898a      	ldrh	r2, [r1, #12]
 80179ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179ee:	4605      	mov	r5, r0
 80179f0:	0710      	lsls	r0, r2, #28
 80179f2:	460c      	mov	r4, r1
 80179f4:	d458      	bmi.n	8017aa8 <__sflush_r+0xc0>
 80179f6:	684b      	ldr	r3, [r1, #4]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	dc05      	bgt.n	8017a08 <__sflush_r+0x20>
 80179fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	dc02      	bgt.n	8017a08 <__sflush_r+0x20>
 8017a02:	2000      	movs	r0, #0
 8017a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a0a:	2e00      	cmp	r6, #0
 8017a0c:	d0f9      	beq.n	8017a02 <__sflush_r+0x1a>
 8017a0e:	2300      	movs	r3, #0
 8017a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a14:	682f      	ldr	r7, [r5, #0]
 8017a16:	6a21      	ldr	r1, [r4, #32]
 8017a18:	602b      	str	r3, [r5, #0]
 8017a1a:	d032      	beq.n	8017a82 <__sflush_r+0x9a>
 8017a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a1e:	89a3      	ldrh	r3, [r4, #12]
 8017a20:	075a      	lsls	r2, r3, #29
 8017a22:	d505      	bpl.n	8017a30 <__sflush_r+0x48>
 8017a24:	6863      	ldr	r3, [r4, #4]
 8017a26:	1ac0      	subs	r0, r0, r3
 8017a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a2a:	b10b      	cbz	r3, 8017a30 <__sflush_r+0x48>
 8017a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a2e:	1ac0      	subs	r0, r0, r3
 8017a30:	2300      	movs	r3, #0
 8017a32:	4602      	mov	r2, r0
 8017a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a36:	6a21      	ldr	r1, [r4, #32]
 8017a38:	4628      	mov	r0, r5
 8017a3a:	47b0      	blx	r6
 8017a3c:	1c43      	adds	r3, r0, #1
 8017a3e:	89a3      	ldrh	r3, [r4, #12]
 8017a40:	d106      	bne.n	8017a50 <__sflush_r+0x68>
 8017a42:	6829      	ldr	r1, [r5, #0]
 8017a44:	291d      	cmp	r1, #29
 8017a46:	d848      	bhi.n	8017ada <__sflush_r+0xf2>
 8017a48:	4a29      	ldr	r2, [pc, #164]	; (8017af0 <__sflush_r+0x108>)
 8017a4a:	40ca      	lsrs	r2, r1
 8017a4c:	07d6      	lsls	r6, r2, #31
 8017a4e:	d544      	bpl.n	8017ada <__sflush_r+0xf2>
 8017a50:	2200      	movs	r2, #0
 8017a52:	6062      	str	r2, [r4, #4]
 8017a54:	04d9      	lsls	r1, r3, #19
 8017a56:	6922      	ldr	r2, [r4, #16]
 8017a58:	6022      	str	r2, [r4, #0]
 8017a5a:	d504      	bpl.n	8017a66 <__sflush_r+0x7e>
 8017a5c:	1c42      	adds	r2, r0, #1
 8017a5e:	d101      	bne.n	8017a64 <__sflush_r+0x7c>
 8017a60:	682b      	ldr	r3, [r5, #0]
 8017a62:	b903      	cbnz	r3, 8017a66 <__sflush_r+0x7e>
 8017a64:	6560      	str	r0, [r4, #84]	; 0x54
 8017a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a68:	602f      	str	r7, [r5, #0]
 8017a6a:	2900      	cmp	r1, #0
 8017a6c:	d0c9      	beq.n	8017a02 <__sflush_r+0x1a>
 8017a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a72:	4299      	cmp	r1, r3
 8017a74:	d002      	beq.n	8017a7c <__sflush_r+0x94>
 8017a76:	4628      	mov	r0, r5
 8017a78:	f000 fc94 	bl	80183a4 <_free_r>
 8017a7c:	2000      	movs	r0, #0
 8017a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8017a80:	e7c0      	b.n	8017a04 <__sflush_r+0x1c>
 8017a82:	2301      	movs	r3, #1
 8017a84:	4628      	mov	r0, r5
 8017a86:	47b0      	blx	r6
 8017a88:	1c41      	adds	r1, r0, #1
 8017a8a:	d1c8      	bne.n	8017a1e <__sflush_r+0x36>
 8017a8c:	682b      	ldr	r3, [r5, #0]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d0c5      	beq.n	8017a1e <__sflush_r+0x36>
 8017a92:	2b1d      	cmp	r3, #29
 8017a94:	d001      	beq.n	8017a9a <__sflush_r+0xb2>
 8017a96:	2b16      	cmp	r3, #22
 8017a98:	d101      	bne.n	8017a9e <__sflush_r+0xb6>
 8017a9a:	602f      	str	r7, [r5, #0]
 8017a9c:	e7b1      	b.n	8017a02 <__sflush_r+0x1a>
 8017a9e:	89a3      	ldrh	r3, [r4, #12]
 8017aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017aa4:	81a3      	strh	r3, [r4, #12]
 8017aa6:	e7ad      	b.n	8017a04 <__sflush_r+0x1c>
 8017aa8:	690f      	ldr	r7, [r1, #16]
 8017aaa:	2f00      	cmp	r7, #0
 8017aac:	d0a9      	beq.n	8017a02 <__sflush_r+0x1a>
 8017aae:	0793      	lsls	r3, r2, #30
 8017ab0:	680e      	ldr	r6, [r1, #0]
 8017ab2:	bf08      	it	eq
 8017ab4:	694b      	ldreq	r3, [r1, #20]
 8017ab6:	600f      	str	r7, [r1, #0]
 8017ab8:	bf18      	it	ne
 8017aba:	2300      	movne	r3, #0
 8017abc:	eba6 0807 	sub.w	r8, r6, r7
 8017ac0:	608b      	str	r3, [r1, #8]
 8017ac2:	f1b8 0f00 	cmp.w	r8, #0
 8017ac6:	dd9c      	ble.n	8017a02 <__sflush_r+0x1a>
 8017ac8:	4643      	mov	r3, r8
 8017aca:	463a      	mov	r2, r7
 8017acc:	6a21      	ldr	r1, [r4, #32]
 8017ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	47b0      	blx	r6
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	dc06      	bgt.n	8017ae6 <__sflush_r+0xfe>
 8017ad8:	89a3      	ldrh	r3, [r4, #12]
 8017ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ade:	81a3      	strh	r3, [r4, #12]
 8017ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ae4:	e78e      	b.n	8017a04 <__sflush_r+0x1c>
 8017ae6:	4407      	add	r7, r0
 8017ae8:	eba8 0800 	sub.w	r8, r8, r0
 8017aec:	e7e9      	b.n	8017ac2 <__sflush_r+0xda>
 8017aee:	bf00      	nop
 8017af0:	20400001 	.word	0x20400001

08017af4 <_fflush_r>:
 8017af4:	b538      	push	{r3, r4, r5, lr}
 8017af6:	690b      	ldr	r3, [r1, #16]
 8017af8:	4605      	mov	r5, r0
 8017afa:	460c      	mov	r4, r1
 8017afc:	b1db      	cbz	r3, 8017b36 <_fflush_r+0x42>
 8017afe:	b118      	cbz	r0, 8017b08 <_fflush_r+0x14>
 8017b00:	6983      	ldr	r3, [r0, #24]
 8017b02:	b90b      	cbnz	r3, 8017b08 <_fflush_r+0x14>
 8017b04:	f000 f860 	bl	8017bc8 <__sinit>
 8017b08:	4b0c      	ldr	r3, [pc, #48]	; (8017b3c <_fflush_r+0x48>)
 8017b0a:	429c      	cmp	r4, r3
 8017b0c:	d109      	bne.n	8017b22 <_fflush_r+0x2e>
 8017b0e:	686c      	ldr	r4, [r5, #4]
 8017b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b14:	b17b      	cbz	r3, 8017b36 <_fflush_r+0x42>
 8017b16:	4621      	mov	r1, r4
 8017b18:	4628      	mov	r0, r5
 8017b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b1e:	f7ff bf63 	b.w	80179e8 <__sflush_r>
 8017b22:	4b07      	ldr	r3, [pc, #28]	; (8017b40 <_fflush_r+0x4c>)
 8017b24:	429c      	cmp	r4, r3
 8017b26:	d101      	bne.n	8017b2c <_fflush_r+0x38>
 8017b28:	68ac      	ldr	r4, [r5, #8]
 8017b2a:	e7f1      	b.n	8017b10 <_fflush_r+0x1c>
 8017b2c:	4b05      	ldr	r3, [pc, #20]	; (8017b44 <_fflush_r+0x50>)
 8017b2e:	429c      	cmp	r4, r3
 8017b30:	bf08      	it	eq
 8017b32:	68ec      	ldreq	r4, [r5, #12]
 8017b34:	e7ec      	b.n	8017b10 <_fflush_r+0x1c>
 8017b36:	2000      	movs	r0, #0
 8017b38:	bd38      	pop	{r3, r4, r5, pc}
 8017b3a:	bf00      	nop
 8017b3c:	08018b80 	.word	0x08018b80
 8017b40:	08018ba0 	.word	0x08018ba0
 8017b44:	08018b60 	.word	0x08018b60

08017b48 <std>:
 8017b48:	2300      	movs	r3, #0
 8017b4a:	b510      	push	{r4, lr}
 8017b4c:	4604      	mov	r4, r0
 8017b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8017b52:	6083      	str	r3, [r0, #8]
 8017b54:	8181      	strh	r1, [r0, #12]
 8017b56:	6643      	str	r3, [r0, #100]	; 0x64
 8017b58:	81c2      	strh	r2, [r0, #14]
 8017b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b5e:	6183      	str	r3, [r0, #24]
 8017b60:	4619      	mov	r1, r3
 8017b62:	2208      	movs	r2, #8
 8017b64:	305c      	adds	r0, #92	; 0x5c
 8017b66:	f7fe fb5a 	bl	801621e <memset>
 8017b6a:	4b05      	ldr	r3, [pc, #20]	; (8017b80 <std+0x38>)
 8017b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8017b6e:	4b05      	ldr	r3, [pc, #20]	; (8017b84 <std+0x3c>)
 8017b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8017b72:	4b05      	ldr	r3, [pc, #20]	; (8017b88 <std+0x40>)
 8017b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017b76:	4b05      	ldr	r3, [pc, #20]	; (8017b8c <std+0x44>)
 8017b78:	6224      	str	r4, [r4, #32]
 8017b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8017b7c:	bd10      	pop	{r4, pc}
 8017b7e:	bf00      	nop
 8017b80:	08018795 	.word	0x08018795
 8017b84:	080187b7 	.word	0x080187b7
 8017b88:	080187ef 	.word	0x080187ef
 8017b8c:	08018813 	.word	0x08018813

08017b90 <_cleanup_r>:
 8017b90:	4901      	ldr	r1, [pc, #4]	; (8017b98 <_cleanup_r+0x8>)
 8017b92:	f000 b885 	b.w	8017ca0 <_fwalk_reent>
 8017b96:	bf00      	nop
 8017b98:	08017af5 	.word	0x08017af5

08017b9c <__sfmoreglue>:
 8017b9c:	b570      	push	{r4, r5, r6, lr}
 8017b9e:	1e4a      	subs	r2, r1, #1
 8017ba0:	2568      	movs	r5, #104	; 0x68
 8017ba2:	4355      	muls	r5, r2
 8017ba4:	460e      	mov	r6, r1
 8017ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017baa:	f000 fc49 	bl	8018440 <_malloc_r>
 8017bae:	4604      	mov	r4, r0
 8017bb0:	b140      	cbz	r0, 8017bc4 <__sfmoreglue+0x28>
 8017bb2:	2100      	movs	r1, #0
 8017bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8017bb8:	300c      	adds	r0, #12
 8017bba:	60a0      	str	r0, [r4, #8]
 8017bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017bc0:	f7fe fb2d 	bl	801621e <memset>
 8017bc4:	4620      	mov	r0, r4
 8017bc6:	bd70      	pop	{r4, r5, r6, pc}

08017bc8 <__sinit>:
 8017bc8:	6983      	ldr	r3, [r0, #24]
 8017bca:	b510      	push	{r4, lr}
 8017bcc:	4604      	mov	r4, r0
 8017bce:	bb33      	cbnz	r3, 8017c1e <__sinit+0x56>
 8017bd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017bd4:	6503      	str	r3, [r0, #80]	; 0x50
 8017bd6:	4b12      	ldr	r3, [pc, #72]	; (8017c20 <__sinit+0x58>)
 8017bd8:	4a12      	ldr	r2, [pc, #72]	; (8017c24 <__sinit+0x5c>)
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	6282      	str	r2, [r0, #40]	; 0x28
 8017bde:	4298      	cmp	r0, r3
 8017be0:	bf04      	itt	eq
 8017be2:	2301      	moveq	r3, #1
 8017be4:	6183      	streq	r3, [r0, #24]
 8017be6:	f000 f81f 	bl	8017c28 <__sfp>
 8017bea:	6060      	str	r0, [r4, #4]
 8017bec:	4620      	mov	r0, r4
 8017bee:	f000 f81b 	bl	8017c28 <__sfp>
 8017bf2:	60a0      	str	r0, [r4, #8]
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	f000 f817 	bl	8017c28 <__sfp>
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	60e0      	str	r0, [r4, #12]
 8017bfe:	2104      	movs	r1, #4
 8017c00:	6860      	ldr	r0, [r4, #4]
 8017c02:	f7ff ffa1 	bl	8017b48 <std>
 8017c06:	2201      	movs	r2, #1
 8017c08:	2109      	movs	r1, #9
 8017c0a:	68a0      	ldr	r0, [r4, #8]
 8017c0c:	f7ff ff9c 	bl	8017b48 <std>
 8017c10:	2202      	movs	r2, #2
 8017c12:	2112      	movs	r1, #18
 8017c14:	68e0      	ldr	r0, [r4, #12]
 8017c16:	f7ff ff97 	bl	8017b48 <std>
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	61a3      	str	r3, [r4, #24]
 8017c1e:	bd10      	pop	{r4, pc}
 8017c20:	08018b18 	.word	0x08018b18
 8017c24:	08017b91 	.word	0x08017b91

08017c28 <__sfp>:
 8017c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c2a:	4b1b      	ldr	r3, [pc, #108]	; (8017c98 <__sfp+0x70>)
 8017c2c:	681e      	ldr	r6, [r3, #0]
 8017c2e:	69b3      	ldr	r3, [r6, #24]
 8017c30:	4607      	mov	r7, r0
 8017c32:	b913      	cbnz	r3, 8017c3a <__sfp+0x12>
 8017c34:	4630      	mov	r0, r6
 8017c36:	f7ff ffc7 	bl	8017bc8 <__sinit>
 8017c3a:	3648      	adds	r6, #72	; 0x48
 8017c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017c40:	3b01      	subs	r3, #1
 8017c42:	d503      	bpl.n	8017c4c <__sfp+0x24>
 8017c44:	6833      	ldr	r3, [r6, #0]
 8017c46:	b133      	cbz	r3, 8017c56 <__sfp+0x2e>
 8017c48:	6836      	ldr	r6, [r6, #0]
 8017c4a:	e7f7      	b.n	8017c3c <__sfp+0x14>
 8017c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017c50:	b16d      	cbz	r5, 8017c6e <__sfp+0x46>
 8017c52:	3468      	adds	r4, #104	; 0x68
 8017c54:	e7f4      	b.n	8017c40 <__sfp+0x18>
 8017c56:	2104      	movs	r1, #4
 8017c58:	4638      	mov	r0, r7
 8017c5a:	f7ff ff9f 	bl	8017b9c <__sfmoreglue>
 8017c5e:	6030      	str	r0, [r6, #0]
 8017c60:	2800      	cmp	r0, #0
 8017c62:	d1f1      	bne.n	8017c48 <__sfp+0x20>
 8017c64:	230c      	movs	r3, #12
 8017c66:	603b      	str	r3, [r7, #0]
 8017c68:	4604      	mov	r4, r0
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c6e:	4b0b      	ldr	r3, [pc, #44]	; (8017c9c <__sfp+0x74>)
 8017c70:	6665      	str	r5, [r4, #100]	; 0x64
 8017c72:	e9c4 5500 	strd	r5, r5, [r4]
 8017c76:	60a5      	str	r5, [r4, #8]
 8017c78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017c7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017c80:	2208      	movs	r2, #8
 8017c82:	4629      	mov	r1, r5
 8017c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017c88:	f7fe fac9 	bl	801621e <memset>
 8017c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017c94:	e7e9      	b.n	8017c6a <__sfp+0x42>
 8017c96:	bf00      	nop
 8017c98:	08018b18 	.word	0x08018b18
 8017c9c:	ffff0001 	.word	0xffff0001

08017ca0 <_fwalk_reent>:
 8017ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ca4:	4680      	mov	r8, r0
 8017ca6:	4689      	mov	r9, r1
 8017ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017cac:	2600      	movs	r6, #0
 8017cae:	b914      	cbnz	r4, 8017cb6 <_fwalk_reent+0x16>
 8017cb0:	4630      	mov	r0, r6
 8017cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017cba:	3f01      	subs	r7, #1
 8017cbc:	d501      	bpl.n	8017cc2 <_fwalk_reent+0x22>
 8017cbe:	6824      	ldr	r4, [r4, #0]
 8017cc0:	e7f5      	b.n	8017cae <_fwalk_reent+0xe>
 8017cc2:	89ab      	ldrh	r3, [r5, #12]
 8017cc4:	2b01      	cmp	r3, #1
 8017cc6:	d907      	bls.n	8017cd8 <_fwalk_reent+0x38>
 8017cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017ccc:	3301      	adds	r3, #1
 8017cce:	d003      	beq.n	8017cd8 <_fwalk_reent+0x38>
 8017cd0:	4629      	mov	r1, r5
 8017cd2:	4640      	mov	r0, r8
 8017cd4:	47c8      	blx	r9
 8017cd6:	4306      	orrs	r6, r0
 8017cd8:	3568      	adds	r5, #104	; 0x68
 8017cda:	e7ee      	b.n	8017cba <_fwalk_reent+0x1a>

08017cdc <_localeconv_r>:
 8017cdc:	4b04      	ldr	r3, [pc, #16]	; (8017cf0 <_localeconv_r+0x14>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	6a18      	ldr	r0, [r3, #32]
 8017ce2:	4b04      	ldr	r3, [pc, #16]	; (8017cf4 <_localeconv_r+0x18>)
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	bf08      	it	eq
 8017ce8:	4618      	moveq	r0, r3
 8017cea:	30f0      	adds	r0, #240	; 0xf0
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop
 8017cf0:	2000008c 	.word	0x2000008c
 8017cf4:	200000f0 	.word	0x200000f0

08017cf8 <__swhatbuf_r>:
 8017cf8:	b570      	push	{r4, r5, r6, lr}
 8017cfa:	460e      	mov	r6, r1
 8017cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d00:	2900      	cmp	r1, #0
 8017d02:	b096      	sub	sp, #88	; 0x58
 8017d04:	4614      	mov	r4, r2
 8017d06:	461d      	mov	r5, r3
 8017d08:	da07      	bge.n	8017d1a <__swhatbuf_r+0x22>
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	602b      	str	r3, [r5, #0]
 8017d0e:	89b3      	ldrh	r3, [r6, #12]
 8017d10:	061a      	lsls	r2, r3, #24
 8017d12:	d410      	bmi.n	8017d36 <__swhatbuf_r+0x3e>
 8017d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d18:	e00e      	b.n	8017d38 <__swhatbuf_r+0x40>
 8017d1a:	466a      	mov	r2, sp
 8017d1c:	f000 fda0 	bl	8018860 <_fstat_r>
 8017d20:	2800      	cmp	r0, #0
 8017d22:	dbf2      	blt.n	8017d0a <__swhatbuf_r+0x12>
 8017d24:	9a01      	ldr	r2, [sp, #4]
 8017d26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d2e:	425a      	negs	r2, r3
 8017d30:	415a      	adcs	r2, r3
 8017d32:	602a      	str	r2, [r5, #0]
 8017d34:	e7ee      	b.n	8017d14 <__swhatbuf_r+0x1c>
 8017d36:	2340      	movs	r3, #64	; 0x40
 8017d38:	2000      	movs	r0, #0
 8017d3a:	6023      	str	r3, [r4, #0]
 8017d3c:	b016      	add	sp, #88	; 0x58
 8017d3e:	bd70      	pop	{r4, r5, r6, pc}

08017d40 <__smakebuf_r>:
 8017d40:	898b      	ldrh	r3, [r1, #12]
 8017d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d44:	079d      	lsls	r5, r3, #30
 8017d46:	4606      	mov	r6, r0
 8017d48:	460c      	mov	r4, r1
 8017d4a:	d507      	bpl.n	8017d5c <__smakebuf_r+0x1c>
 8017d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017d50:	6023      	str	r3, [r4, #0]
 8017d52:	6123      	str	r3, [r4, #16]
 8017d54:	2301      	movs	r3, #1
 8017d56:	6163      	str	r3, [r4, #20]
 8017d58:	b002      	add	sp, #8
 8017d5a:	bd70      	pop	{r4, r5, r6, pc}
 8017d5c:	ab01      	add	r3, sp, #4
 8017d5e:	466a      	mov	r2, sp
 8017d60:	f7ff ffca 	bl	8017cf8 <__swhatbuf_r>
 8017d64:	9900      	ldr	r1, [sp, #0]
 8017d66:	4605      	mov	r5, r0
 8017d68:	4630      	mov	r0, r6
 8017d6a:	f000 fb69 	bl	8018440 <_malloc_r>
 8017d6e:	b948      	cbnz	r0, 8017d84 <__smakebuf_r+0x44>
 8017d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d74:	059a      	lsls	r2, r3, #22
 8017d76:	d4ef      	bmi.n	8017d58 <__smakebuf_r+0x18>
 8017d78:	f023 0303 	bic.w	r3, r3, #3
 8017d7c:	f043 0302 	orr.w	r3, r3, #2
 8017d80:	81a3      	strh	r3, [r4, #12]
 8017d82:	e7e3      	b.n	8017d4c <__smakebuf_r+0xc>
 8017d84:	4b0d      	ldr	r3, [pc, #52]	; (8017dbc <__smakebuf_r+0x7c>)
 8017d86:	62b3      	str	r3, [r6, #40]	; 0x28
 8017d88:	89a3      	ldrh	r3, [r4, #12]
 8017d8a:	6020      	str	r0, [r4, #0]
 8017d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d90:	81a3      	strh	r3, [r4, #12]
 8017d92:	9b00      	ldr	r3, [sp, #0]
 8017d94:	6163      	str	r3, [r4, #20]
 8017d96:	9b01      	ldr	r3, [sp, #4]
 8017d98:	6120      	str	r0, [r4, #16]
 8017d9a:	b15b      	cbz	r3, 8017db4 <__smakebuf_r+0x74>
 8017d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017da0:	4630      	mov	r0, r6
 8017da2:	f000 fd6f 	bl	8018884 <_isatty_r>
 8017da6:	b128      	cbz	r0, 8017db4 <__smakebuf_r+0x74>
 8017da8:	89a3      	ldrh	r3, [r4, #12]
 8017daa:	f023 0303 	bic.w	r3, r3, #3
 8017dae:	f043 0301 	orr.w	r3, r3, #1
 8017db2:	81a3      	strh	r3, [r4, #12]
 8017db4:	89a3      	ldrh	r3, [r4, #12]
 8017db6:	431d      	orrs	r5, r3
 8017db8:	81a5      	strh	r5, [r4, #12]
 8017dba:	e7cd      	b.n	8017d58 <__smakebuf_r+0x18>
 8017dbc:	08017b91 	.word	0x08017b91

08017dc0 <malloc>:
 8017dc0:	4b02      	ldr	r3, [pc, #8]	; (8017dcc <malloc+0xc>)
 8017dc2:	4601      	mov	r1, r0
 8017dc4:	6818      	ldr	r0, [r3, #0]
 8017dc6:	f000 bb3b 	b.w	8018440 <_malloc_r>
 8017dca:	bf00      	nop
 8017dcc:	2000008c 	.word	0x2000008c

08017dd0 <_Balloc>:
 8017dd0:	b570      	push	{r4, r5, r6, lr}
 8017dd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017dd4:	4604      	mov	r4, r0
 8017dd6:	460e      	mov	r6, r1
 8017dd8:	b93d      	cbnz	r5, 8017dea <_Balloc+0x1a>
 8017dda:	2010      	movs	r0, #16
 8017ddc:	f7ff fff0 	bl	8017dc0 <malloc>
 8017de0:	6260      	str	r0, [r4, #36]	; 0x24
 8017de2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017de6:	6005      	str	r5, [r0, #0]
 8017de8:	60c5      	str	r5, [r0, #12]
 8017dea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017dec:	68eb      	ldr	r3, [r5, #12]
 8017dee:	b183      	cbz	r3, 8017e12 <_Balloc+0x42>
 8017df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017df2:	68db      	ldr	r3, [r3, #12]
 8017df4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017df8:	b9b8      	cbnz	r0, 8017e2a <_Balloc+0x5a>
 8017dfa:	2101      	movs	r1, #1
 8017dfc:	fa01 f506 	lsl.w	r5, r1, r6
 8017e00:	1d6a      	adds	r2, r5, #5
 8017e02:	0092      	lsls	r2, r2, #2
 8017e04:	4620      	mov	r0, r4
 8017e06:	f000 fabf 	bl	8018388 <_calloc_r>
 8017e0a:	b160      	cbz	r0, 8017e26 <_Balloc+0x56>
 8017e0c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017e10:	e00e      	b.n	8017e30 <_Balloc+0x60>
 8017e12:	2221      	movs	r2, #33	; 0x21
 8017e14:	2104      	movs	r1, #4
 8017e16:	4620      	mov	r0, r4
 8017e18:	f000 fab6 	bl	8018388 <_calloc_r>
 8017e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e1e:	60e8      	str	r0, [r5, #12]
 8017e20:	68db      	ldr	r3, [r3, #12]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d1e4      	bne.n	8017df0 <_Balloc+0x20>
 8017e26:	2000      	movs	r0, #0
 8017e28:	bd70      	pop	{r4, r5, r6, pc}
 8017e2a:	6802      	ldr	r2, [r0, #0]
 8017e2c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017e30:	2300      	movs	r3, #0
 8017e32:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017e36:	e7f7      	b.n	8017e28 <_Balloc+0x58>

08017e38 <_Bfree>:
 8017e38:	b570      	push	{r4, r5, r6, lr}
 8017e3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017e3c:	4606      	mov	r6, r0
 8017e3e:	460d      	mov	r5, r1
 8017e40:	b93c      	cbnz	r4, 8017e52 <_Bfree+0x1a>
 8017e42:	2010      	movs	r0, #16
 8017e44:	f7ff ffbc 	bl	8017dc0 <malloc>
 8017e48:	6270      	str	r0, [r6, #36]	; 0x24
 8017e4a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017e4e:	6004      	str	r4, [r0, #0]
 8017e50:	60c4      	str	r4, [r0, #12]
 8017e52:	b13d      	cbz	r5, 8017e64 <_Bfree+0x2c>
 8017e54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017e56:	686a      	ldr	r2, [r5, #4]
 8017e58:	68db      	ldr	r3, [r3, #12]
 8017e5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017e5e:	6029      	str	r1, [r5, #0]
 8017e60:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017e64:	bd70      	pop	{r4, r5, r6, pc}

08017e66 <__multadd>:
 8017e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e6a:	690d      	ldr	r5, [r1, #16]
 8017e6c:	461f      	mov	r7, r3
 8017e6e:	4606      	mov	r6, r0
 8017e70:	460c      	mov	r4, r1
 8017e72:	f101 0c14 	add.w	ip, r1, #20
 8017e76:	2300      	movs	r3, #0
 8017e78:	f8dc 0000 	ldr.w	r0, [ip]
 8017e7c:	b281      	uxth	r1, r0
 8017e7e:	fb02 7101 	mla	r1, r2, r1, r7
 8017e82:	0c0f      	lsrs	r7, r1, #16
 8017e84:	0c00      	lsrs	r0, r0, #16
 8017e86:	fb02 7000 	mla	r0, r2, r0, r7
 8017e8a:	b289      	uxth	r1, r1
 8017e8c:	3301      	adds	r3, #1
 8017e8e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017e92:	429d      	cmp	r5, r3
 8017e94:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017e98:	f84c 1b04 	str.w	r1, [ip], #4
 8017e9c:	dcec      	bgt.n	8017e78 <__multadd+0x12>
 8017e9e:	b1d7      	cbz	r7, 8017ed6 <__multadd+0x70>
 8017ea0:	68a3      	ldr	r3, [r4, #8]
 8017ea2:	42ab      	cmp	r3, r5
 8017ea4:	dc12      	bgt.n	8017ecc <__multadd+0x66>
 8017ea6:	6861      	ldr	r1, [r4, #4]
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	3101      	adds	r1, #1
 8017eac:	f7ff ff90 	bl	8017dd0 <_Balloc>
 8017eb0:	6922      	ldr	r2, [r4, #16]
 8017eb2:	3202      	adds	r2, #2
 8017eb4:	f104 010c 	add.w	r1, r4, #12
 8017eb8:	4680      	mov	r8, r0
 8017eba:	0092      	lsls	r2, r2, #2
 8017ebc:	300c      	adds	r0, #12
 8017ebe:	f7fe f9a3 	bl	8016208 <memcpy>
 8017ec2:	4621      	mov	r1, r4
 8017ec4:	4630      	mov	r0, r6
 8017ec6:	f7ff ffb7 	bl	8017e38 <_Bfree>
 8017eca:	4644      	mov	r4, r8
 8017ecc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017ed0:	3501      	adds	r5, #1
 8017ed2:	615f      	str	r7, [r3, #20]
 8017ed4:	6125      	str	r5, [r4, #16]
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017edc <__hi0bits>:
 8017edc:	0c02      	lsrs	r2, r0, #16
 8017ede:	0412      	lsls	r2, r2, #16
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	b9b2      	cbnz	r2, 8017f12 <__hi0bits+0x36>
 8017ee4:	0403      	lsls	r3, r0, #16
 8017ee6:	2010      	movs	r0, #16
 8017ee8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017eec:	bf04      	itt	eq
 8017eee:	021b      	lsleq	r3, r3, #8
 8017ef0:	3008      	addeq	r0, #8
 8017ef2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017ef6:	bf04      	itt	eq
 8017ef8:	011b      	lsleq	r3, r3, #4
 8017efa:	3004      	addeq	r0, #4
 8017efc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017f00:	bf04      	itt	eq
 8017f02:	009b      	lsleq	r3, r3, #2
 8017f04:	3002      	addeq	r0, #2
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	db06      	blt.n	8017f18 <__hi0bits+0x3c>
 8017f0a:	005b      	lsls	r3, r3, #1
 8017f0c:	d503      	bpl.n	8017f16 <__hi0bits+0x3a>
 8017f0e:	3001      	adds	r0, #1
 8017f10:	4770      	bx	lr
 8017f12:	2000      	movs	r0, #0
 8017f14:	e7e8      	b.n	8017ee8 <__hi0bits+0xc>
 8017f16:	2020      	movs	r0, #32
 8017f18:	4770      	bx	lr

08017f1a <__lo0bits>:
 8017f1a:	6803      	ldr	r3, [r0, #0]
 8017f1c:	f013 0207 	ands.w	r2, r3, #7
 8017f20:	4601      	mov	r1, r0
 8017f22:	d00b      	beq.n	8017f3c <__lo0bits+0x22>
 8017f24:	07da      	lsls	r2, r3, #31
 8017f26:	d423      	bmi.n	8017f70 <__lo0bits+0x56>
 8017f28:	0798      	lsls	r0, r3, #30
 8017f2a:	bf49      	itett	mi
 8017f2c:	085b      	lsrmi	r3, r3, #1
 8017f2e:	089b      	lsrpl	r3, r3, #2
 8017f30:	2001      	movmi	r0, #1
 8017f32:	600b      	strmi	r3, [r1, #0]
 8017f34:	bf5c      	itt	pl
 8017f36:	600b      	strpl	r3, [r1, #0]
 8017f38:	2002      	movpl	r0, #2
 8017f3a:	4770      	bx	lr
 8017f3c:	b298      	uxth	r0, r3
 8017f3e:	b9a8      	cbnz	r0, 8017f6c <__lo0bits+0x52>
 8017f40:	0c1b      	lsrs	r3, r3, #16
 8017f42:	2010      	movs	r0, #16
 8017f44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017f48:	bf04      	itt	eq
 8017f4a:	0a1b      	lsreq	r3, r3, #8
 8017f4c:	3008      	addeq	r0, #8
 8017f4e:	071a      	lsls	r2, r3, #28
 8017f50:	bf04      	itt	eq
 8017f52:	091b      	lsreq	r3, r3, #4
 8017f54:	3004      	addeq	r0, #4
 8017f56:	079a      	lsls	r2, r3, #30
 8017f58:	bf04      	itt	eq
 8017f5a:	089b      	lsreq	r3, r3, #2
 8017f5c:	3002      	addeq	r0, #2
 8017f5e:	07da      	lsls	r2, r3, #31
 8017f60:	d402      	bmi.n	8017f68 <__lo0bits+0x4e>
 8017f62:	085b      	lsrs	r3, r3, #1
 8017f64:	d006      	beq.n	8017f74 <__lo0bits+0x5a>
 8017f66:	3001      	adds	r0, #1
 8017f68:	600b      	str	r3, [r1, #0]
 8017f6a:	4770      	bx	lr
 8017f6c:	4610      	mov	r0, r2
 8017f6e:	e7e9      	b.n	8017f44 <__lo0bits+0x2a>
 8017f70:	2000      	movs	r0, #0
 8017f72:	4770      	bx	lr
 8017f74:	2020      	movs	r0, #32
 8017f76:	4770      	bx	lr

08017f78 <__i2b>:
 8017f78:	b510      	push	{r4, lr}
 8017f7a:	460c      	mov	r4, r1
 8017f7c:	2101      	movs	r1, #1
 8017f7e:	f7ff ff27 	bl	8017dd0 <_Balloc>
 8017f82:	2201      	movs	r2, #1
 8017f84:	6144      	str	r4, [r0, #20]
 8017f86:	6102      	str	r2, [r0, #16]
 8017f88:	bd10      	pop	{r4, pc}

08017f8a <__multiply>:
 8017f8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f8e:	4614      	mov	r4, r2
 8017f90:	690a      	ldr	r2, [r1, #16]
 8017f92:	6923      	ldr	r3, [r4, #16]
 8017f94:	429a      	cmp	r2, r3
 8017f96:	bfb8      	it	lt
 8017f98:	460b      	movlt	r3, r1
 8017f9a:	4688      	mov	r8, r1
 8017f9c:	bfbc      	itt	lt
 8017f9e:	46a0      	movlt	r8, r4
 8017fa0:	461c      	movlt	r4, r3
 8017fa2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017fa6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017fae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017fb2:	eb07 0609 	add.w	r6, r7, r9
 8017fb6:	42b3      	cmp	r3, r6
 8017fb8:	bfb8      	it	lt
 8017fba:	3101      	addlt	r1, #1
 8017fbc:	f7ff ff08 	bl	8017dd0 <_Balloc>
 8017fc0:	f100 0514 	add.w	r5, r0, #20
 8017fc4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017fc8:	462b      	mov	r3, r5
 8017fca:	2200      	movs	r2, #0
 8017fcc:	4573      	cmp	r3, lr
 8017fce:	d316      	bcc.n	8017ffe <__multiply+0x74>
 8017fd0:	f104 0214 	add.w	r2, r4, #20
 8017fd4:	f108 0114 	add.w	r1, r8, #20
 8017fd8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017fdc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017fe0:	9300      	str	r3, [sp, #0]
 8017fe2:	9b00      	ldr	r3, [sp, #0]
 8017fe4:	9201      	str	r2, [sp, #4]
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	d80c      	bhi.n	8018004 <__multiply+0x7a>
 8017fea:	2e00      	cmp	r6, #0
 8017fec:	dd03      	ble.n	8017ff6 <__multiply+0x6c>
 8017fee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d05d      	beq.n	80180b2 <__multiply+0x128>
 8017ff6:	6106      	str	r6, [r0, #16]
 8017ff8:	b003      	add	sp, #12
 8017ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ffe:	f843 2b04 	str.w	r2, [r3], #4
 8018002:	e7e3      	b.n	8017fcc <__multiply+0x42>
 8018004:	f8b2 b000 	ldrh.w	fp, [r2]
 8018008:	f1bb 0f00 	cmp.w	fp, #0
 801800c:	d023      	beq.n	8018056 <__multiply+0xcc>
 801800e:	4689      	mov	r9, r1
 8018010:	46ac      	mov	ip, r5
 8018012:	f04f 0800 	mov.w	r8, #0
 8018016:	f859 4b04 	ldr.w	r4, [r9], #4
 801801a:	f8dc a000 	ldr.w	sl, [ip]
 801801e:	b2a3      	uxth	r3, r4
 8018020:	fa1f fa8a 	uxth.w	sl, sl
 8018024:	fb0b a303 	mla	r3, fp, r3, sl
 8018028:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801802c:	f8dc 4000 	ldr.w	r4, [ip]
 8018030:	4443      	add	r3, r8
 8018032:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018036:	fb0b 840a 	mla	r4, fp, sl, r8
 801803a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801803e:	46e2      	mov	sl, ip
 8018040:	b29b      	uxth	r3, r3
 8018042:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018046:	454f      	cmp	r7, r9
 8018048:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801804c:	f84a 3b04 	str.w	r3, [sl], #4
 8018050:	d82b      	bhi.n	80180aa <__multiply+0x120>
 8018052:	f8cc 8004 	str.w	r8, [ip, #4]
 8018056:	9b01      	ldr	r3, [sp, #4]
 8018058:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801805c:	3204      	adds	r2, #4
 801805e:	f1ba 0f00 	cmp.w	sl, #0
 8018062:	d020      	beq.n	80180a6 <__multiply+0x11c>
 8018064:	682b      	ldr	r3, [r5, #0]
 8018066:	4689      	mov	r9, r1
 8018068:	46a8      	mov	r8, r5
 801806a:	f04f 0b00 	mov.w	fp, #0
 801806e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018072:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018076:	fb0a 440c 	mla	r4, sl, ip, r4
 801807a:	445c      	add	r4, fp
 801807c:	46c4      	mov	ip, r8
 801807e:	b29b      	uxth	r3, r3
 8018080:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018084:	f84c 3b04 	str.w	r3, [ip], #4
 8018088:	f859 3b04 	ldr.w	r3, [r9], #4
 801808c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018090:	0c1b      	lsrs	r3, r3, #16
 8018092:	fb0a b303 	mla	r3, sl, r3, fp
 8018096:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801809a:	454f      	cmp	r7, r9
 801809c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80180a0:	d805      	bhi.n	80180ae <__multiply+0x124>
 80180a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80180a6:	3504      	adds	r5, #4
 80180a8:	e79b      	b.n	8017fe2 <__multiply+0x58>
 80180aa:	46d4      	mov	ip, sl
 80180ac:	e7b3      	b.n	8018016 <__multiply+0x8c>
 80180ae:	46e0      	mov	r8, ip
 80180b0:	e7dd      	b.n	801806e <__multiply+0xe4>
 80180b2:	3e01      	subs	r6, #1
 80180b4:	e799      	b.n	8017fea <__multiply+0x60>
	...

080180b8 <__pow5mult>:
 80180b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180bc:	4615      	mov	r5, r2
 80180be:	f012 0203 	ands.w	r2, r2, #3
 80180c2:	4606      	mov	r6, r0
 80180c4:	460f      	mov	r7, r1
 80180c6:	d007      	beq.n	80180d8 <__pow5mult+0x20>
 80180c8:	3a01      	subs	r2, #1
 80180ca:	4c21      	ldr	r4, [pc, #132]	; (8018150 <__pow5mult+0x98>)
 80180cc:	2300      	movs	r3, #0
 80180ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80180d2:	f7ff fec8 	bl	8017e66 <__multadd>
 80180d6:	4607      	mov	r7, r0
 80180d8:	10ad      	asrs	r5, r5, #2
 80180da:	d035      	beq.n	8018148 <__pow5mult+0x90>
 80180dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80180de:	b93c      	cbnz	r4, 80180f0 <__pow5mult+0x38>
 80180e0:	2010      	movs	r0, #16
 80180e2:	f7ff fe6d 	bl	8017dc0 <malloc>
 80180e6:	6270      	str	r0, [r6, #36]	; 0x24
 80180e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80180ec:	6004      	str	r4, [r0, #0]
 80180ee:	60c4      	str	r4, [r0, #12]
 80180f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80180f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80180f8:	b94c      	cbnz	r4, 801810e <__pow5mult+0x56>
 80180fa:	f240 2171 	movw	r1, #625	; 0x271
 80180fe:	4630      	mov	r0, r6
 8018100:	f7ff ff3a 	bl	8017f78 <__i2b>
 8018104:	2300      	movs	r3, #0
 8018106:	f8c8 0008 	str.w	r0, [r8, #8]
 801810a:	4604      	mov	r4, r0
 801810c:	6003      	str	r3, [r0, #0]
 801810e:	f04f 0800 	mov.w	r8, #0
 8018112:	07eb      	lsls	r3, r5, #31
 8018114:	d50a      	bpl.n	801812c <__pow5mult+0x74>
 8018116:	4639      	mov	r1, r7
 8018118:	4622      	mov	r2, r4
 801811a:	4630      	mov	r0, r6
 801811c:	f7ff ff35 	bl	8017f8a <__multiply>
 8018120:	4639      	mov	r1, r7
 8018122:	4681      	mov	r9, r0
 8018124:	4630      	mov	r0, r6
 8018126:	f7ff fe87 	bl	8017e38 <_Bfree>
 801812a:	464f      	mov	r7, r9
 801812c:	106d      	asrs	r5, r5, #1
 801812e:	d00b      	beq.n	8018148 <__pow5mult+0x90>
 8018130:	6820      	ldr	r0, [r4, #0]
 8018132:	b938      	cbnz	r0, 8018144 <__pow5mult+0x8c>
 8018134:	4622      	mov	r2, r4
 8018136:	4621      	mov	r1, r4
 8018138:	4630      	mov	r0, r6
 801813a:	f7ff ff26 	bl	8017f8a <__multiply>
 801813e:	6020      	str	r0, [r4, #0]
 8018140:	f8c0 8000 	str.w	r8, [r0]
 8018144:	4604      	mov	r4, r0
 8018146:	e7e4      	b.n	8018112 <__pow5mult+0x5a>
 8018148:	4638      	mov	r0, r7
 801814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801814e:	bf00      	nop
 8018150:	08018cb0 	.word	0x08018cb0

08018154 <__lshift>:
 8018154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018158:	460c      	mov	r4, r1
 801815a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801815e:	6923      	ldr	r3, [r4, #16]
 8018160:	6849      	ldr	r1, [r1, #4]
 8018162:	eb0a 0903 	add.w	r9, sl, r3
 8018166:	68a3      	ldr	r3, [r4, #8]
 8018168:	4607      	mov	r7, r0
 801816a:	4616      	mov	r6, r2
 801816c:	f109 0501 	add.w	r5, r9, #1
 8018170:	42ab      	cmp	r3, r5
 8018172:	db32      	blt.n	80181da <__lshift+0x86>
 8018174:	4638      	mov	r0, r7
 8018176:	f7ff fe2b 	bl	8017dd0 <_Balloc>
 801817a:	2300      	movs	r3, #0
 801817c:	4680      	mov	r8, r0
 801817e:	f100 0114 	add.w	r1, r0, #20
 8018182:	461a      	mov	r2, r3
 8018184:	4553      	cmp	r3, sl
 8018186:	db2b      	blt.n	80181e0 <__lshift+0x8c>
 8018188:	6920      	ldr	r0, [r4, #16]
 801818a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801818e:	f104 0314 	add.w	r3, r4, #20
 8018192:	f016 021f 	ands.w	r2, r6, #31
 8018196:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801819a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801819e:	d025      	beq.n	80181ec <__lshift+0x98>
 80181a0:	f1c2 0e20 	rsb	lr, r2, #32
 80181a4:	2000      	movs	r0, #0
 80181a6:	681e      	ldr	r6, [r3, #0]
 80181a8:	468a      	mov	sl, r1
 80181aa:	4096      	lsls	r6, r2
 80181ac:	4330      	orrs	r0, r6
 80181ae:	f84a 0b04 	str.w	r0, [sl], #4
 80181b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80181b6:	459c      	cmp	ip, r3
 80181b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80181bc:	d814      	bhi.n	80181e8 <__lshift+0x94>
 80181be:	6048      	str	r0, [r1, #4]
 80181c0:	b108      	cbz	r0, 80181c6 <__lshift+0x72>
 80181c2:	f109 0502 	add.w	r5, r9, #2
 80181c6:	3d01      	subs	r5, #1
 80181c8:	4638      	mov	r0, r7
 80181ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80181ce:	4621      	mov	r1, r4
 80181d0:	f7ff fe32 	bl	8017e38 <_Bfree>
 80181d4:	4640      	mov	r0, r8
 80181d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181da:	3101      	adds	r1, #1
 80181dc:	005b      	lsls	r3, r3, #1
 80181de:	e7c7      	b.n	8018170 <__lshift+0x1c>
 80181e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80181e4:	3301      	adds	r3, #1
 80181e6:	e7cd      	b.n	8018184 <__lshift+0x30>
 80181e8:	4651      	mov	r1, sl
 80181ea:	e7dc      	b.n	80181a6 <__lshift+0x52>
 80181ec:	3904      	subs	r1, #4
 80181ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80181f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80181f6:	459c      	cmp	ip, r3
 80181f8:	d8f9      	bhi.n	80181ee <__lshift+0x9a>
 80181fa:	e7e4      	b.n	80181c6 <__lshift+0x72>

080181fc <__mcmp>:
 80181fc:	6903      	ldr	r3, [r0, #16]
 80181fe:	690a      	ldr	r2, [r1, #16]
 8018200:	1a9b      	subs	r3, r3, r2
 8018202:	b530      	push	{r4, r5, lr}
 8018204:	d10c      	bne.n	8018220 <__mcmp+0x24>
 8018206:	0092      	lsls	r2, r2, #2
 8018208:	3014      	adds	r0, #20
 801820a:	3114      	adds	r1, #20
 801820c:	1884      	adds	r4, r0, r2
 801820e:	4411      	add	r1, r2
 8018210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018218:	4295      	cmp	r5, r2
 801821a:	d003      	beq.n	8018224 <__mcmp+0x28>
 801821c:	d305      	bcc.n	801822a <__mcmp+0x2e>
 801821e:	2301      	movs	r3, #1
 8018220:	4618      	mov	r0, r3
 8018222:	bd30      	pop	{r4, r5, pc}
 8018224:	42a0      	cmp	r0, r4
 8018226:	d3f3      	bcc.n	8018210 <__mcmp+0x14>
 8018228:	e7fa      	b.n	8018220 <__mcmp+0x24>
 801822a:	f04f 33ff 	mov.w	r3, #4294967295
 801822e:	e7f7      	b.n	8018220 <__mcmp+0x24>

08018230 <__mdiff>:
 8018230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018234:	460d      	mov	r5, r1
 8018236:	4607      	mov	r7, r0
 8018238:	4611      	mov	r1, r2
 801823a:	4628      	mov	r0, r5
 801823c:	4614      	mov	r4, r2
 801823e:	f7ff ffdd 	bl	80181fc <__mcmp>
 8018242:	1e06      	subs	r6, r0, #0
 8018244:	d108      	bne.n	8018258 <__mdiff+0x28>
 8018246:	4631      	mov	r1, r6
 8018248:	4638      	mov	r0, r7
 801824a:	f7ff fdc1 	bl	8017dd0 <_Balloc>
 801824e:	2301      	movs	r3, #1
 8018250:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018258:	bfa4      	itt	ge
 801825a:	4623      	movge	r3, r4
 801825c:	462c      	movge	r4, r5
 801825e:	4638      	mov	r0, r7
 8018260:	6861      	ldr	r1, [r4, #4]
 8018262:	bfa6      	itte	ge
 8018264:	461d      	movge	r5, r3
 8018266:	2600      	movge	r6, #0
 8018268:	2601      	movlt	r6, #1
 801826a:	f7ff fdb1 	bl	8017dd0 <_Balloc>
 801826e:	692b      	ldr	r3, [r5, #16]
 8018270:	60c6      	str	r6, [r0, #12]
 8018272:	6926      	ldr	r6, [r4, #16]
 8018274:	f105 0914 	add.w	r9, r5, #20
 8018278:	f104 0214 	add.w	r2, r4, #20
 801827c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018280:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018284:	f100 0514 	add.w	r5, r0, #20
 8018288:	f04f 0e00 	mov.w	lr, #0
 801828c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018290:	f859 4b04 	ldr.w	r4, [r9], #4
 8018294:	fa1e f18a 	uxtah	r1, lr, sl
 8018298:	b2a3      	uxth	r3, r4
 801829a:	1ac9      	subs	r1, r1, r3
 801829c:	0c23      	lsrs	r3, r4, #16
 801829e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80182a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80182a6:	b289      	uxth	r1, r1
 80182a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80182ac:	45c8      	cmp	r8, r9
 80182ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80182b2:	4694      	mov	ip, r2
 80182b4:	f845 3b04 	str.w	r3, [r5], #4
 80182b8:	d8e8      	bhi.n	801828c <__mdiff+0x5c>
 80182ba:	45bc      	cmp	ip, r7
 80182bc:	d304      	bcc.n	80182c8 <__mdiff+0x98>
 80182be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80182c2:	b183      	cbz	r3, 80182e6 <__mdiff+0xb6>
 80182c4:	6106      	str	r6, [r0, #16]
 80182c6:	e7c5      	b.n	8018254 <__mdiff+0x24>
 80182c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80182cc:	fa1e f381 	uxtah	r3, lr, r1
 80182d0:	141a      	asrs	r2, r3, #16
 80182d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80182d6:	b29b      	uxth	r3, r3
 80182d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80182dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80182e0:	f845 3b04 	str.w	r3, [r5], #4
 80182e4:	e7e9      	b.n	80182ba <__mdiff+0x8a>
 80182e6:	3e01      	subs	r6, #1
 80182e8:	e7e9      	b.n	80182be <__mdiff+0x8e>

080182ea <__d2b>:
 80182ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80182ee:	460e      	mov	r6, r1
 80182f0:	2101      	movs	r1, #1
 80182f2:	ec59 8b10 	vmov	r8, r9, d0
 80182f6:	4615      	mov	r5, r2
 80182f8:	f7ff fd6a 	bl	8017dd0 <_Balloc>
 80182fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018300:	4607      	mov	r7, r0
 8018302:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018306:	bb34      	cbnz	r4, 8018356 <__d2b+0x6c>
 8018308:	9301      	str	r3, [sp, #4]
 801830a:	f1b8 0300 	subs.w	r3, r8, #0
 801830e:	d027      	beq.n	8018360 <__d2b+0x76>
 8018310:	a802      	add	r0, sp, #8
 8018312:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018316:	f7ff fe00 	bl	8017f1a <__lo0bits>
 801831a:	9900      	ldr	r1, [sp, #0]
 801831c:	b1f0      	cbz	r0, 801835c <__d2b+0x72>
 801831e:	9a01      	ldr	r2, [sp, #4]
 8018320:	f1c0 0320 	rsb	r3, r0, #32
 8018324:	fa02 f303 	lsl.w	r3, r2, r3
 8018328:	430b      	orrs	r3, r1
 801832a:	40c2      	lsrs	r2, r0
 801832c:	617b      	str	r3, [r7, #20]
 801832e:	9201      	str	r2, [sp, #4]
 8018330:	9b01      	ldr	r3, [sp, #4]
 8018332:	61bb      	str	r3, [r7, #24]
 8018334:	2b00      	cmp	r3, #0
 8018336:	bf14      	ite	ne
 8018338:	2102      	movne	r1, #2
 801833a:	2101      	moveq	r1, #1
 801833c:	6139      	str	r1, [r7, #16]
 801833e:	b1c4      	cbz	r4, 8018372 <__d2b+0x88>
 8018340:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018344:	4404      	add	r4, r0
 8018346:	6034      	str	r4, [r6, #0]
 8018348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801834c:	6028      	str	r0, [r5, #0]
 801834e:	4638      	mov	r0, r7
 8018350:	b003      	add	sp, #12
 8018352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801835a:	e7d5      	b.n	8018308 <__d2b+0x1e>
 801835c:	6179      	str	r1, [r7, #20]
 801835e:	e7e7      	b.n	8018330 <__d2b+0x46>
 8018360:	a801      	add	r0, sp, #4
 8018362:	f7ff fdda 	bl	8017f1a <__lo0bits>
 8018366:	9b01      	ldr	r3, [sp, #4]
 8018368:	617b      	str	r3, [r7, #20]
 801836a:	2101      	movs	r1, #1
 801836c:	6139      	str	r1, [r7, #16]
 801836e:	3020      	adds	r0, #32
 8018370:	e7e5      	b.n	801833e <__d2b+0x54>
 8018372:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018376:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801837a:	6030      	str	r0, [r6, #0]
 801837c:	6918      	ldr	r0, [r3, #16]
 801837e:	f7ff fdad 	bl	8017edc <__hi0bits>
 8018382:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018386:	e7e1      	b.n	801834c <__d2b+0x62>

08018388 <_calloc_r>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	fb02 f401 	mul.w	r4, r2, r1
 801838e:	4621      	mov	r1, r4
 8018390:	f000 f856 	bl	8018440 <_malloc_r>
 8018394:	4605      	mov	r5, r0
 8018396:	b118      	cbz	r0, 80183a0 <_calloc_r+0x18>
 8018398:	4622      	mov	r2, r4
 801839a:	2100      	movs	r1, #0
 801839c:	f7fd ff3f 	bl	801621e <memset>
 80183a0:	4628      	mov	r0, r5
 80183a2:	bd38      	pop	{r3, r4, r5, pc}

080183a4 <_free_r>:
 80183a4:	b538      	push	{r3, r4, r5, lr}
 80183a6:	4605      	mov	r5, r0
 80183a8:	2900      	cmp	r1, #0
 80183aa:	d045      	beq.n	8018438 <_free_r+0x94>
 80183ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183b0:	1f0c      	subs	r4, r1, #4
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	bfb8      	it	lt
 80183b6:	18e4      	addlt	r4, r4, r3
 80183b8:	f000 fa98 	bl	80188ec <__malloc_lock>
 80183bc:	4a1f      	ldr	r2, [pc, #124]	; (801843c <_free_r+0x98>)
 80183be:	6813      	ldr	r3, [r2, #0]
 80183c0:	4610      	mov	r0, r2
 80183c2:	b933      	cbnz	r3, 80183d2 <_free_r+0x2e>
 80183c4:	6063      	str	r3, [r4, #4]
 80183c6:	6014      	str	r4, [r2, #0]
 80183c8:	4628      	mov	r0, r5
 80183ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183ce:	f000 ba8e 	b.w	80188ee <__malloc_unlock>
 80183d2:	42a3      	cmp	r3, r4
 80183d4:	d90c      	bls.n	80183f0 <_free_r+0x4c>
 80183d6:	6821      	ldr	r1, [r4, #0]
 80183d8:	1862      	adds	r2, r4, r1
 80183da:	4293      	cmp	r3, r2
 80183dc:	bf04      	itt	eq
 80183de:	681a      	ldreq	r2, [r3, #0]
 80183e0:	685b      	ldreq	r3, [r3, #4]
 80183e2:	6063      	str	r3, [r4, #4]
 80183e4:	bf04      	itt	eq
 80183e6:	1852      	addeq	r2, r2, r1
 80183e8:	6022      	streq	r2, [r4, #0]
 80183ea:	6004      	str	r4, [r0, #0]
 80183ec:	e7ec      	b.n	80183c8 <_free_r+0x24>
 80183ee:	4613      	mov	r3, r2
 80183f0:	685a      	ldr	r2, [r3, #4]
 80183f2:	b10a      	cbz	r2, 80183f8 <_free_r+0x54>
 80183f4:	42a2      	cmp	r2, r4
 80183f6:	d9fa      	bls.n	80183ee <_free_r+0x4a>
 80183f8:	6819      	ldr	r1, [r3, #0]
 80183fa:	1858      	adds	r0, r3, r1
 80183fc:	42a0      	cmp	r0, r4
 80183fe:	d10b      	bne.n	8018418 <_free_r+0x74>
 8018400:	6820      	ldr	r0, [r4, #0]
 8018402:	4401      	add	r1, r0
 8018404:	1858      	adds	r0, r3, r1
 8018406:	4282      	cmp	r2, r0
 8018408:	6019      	str	r1, [r3, #0]
 801840a:	d1dd      	bne.n	80183c8 <_free_r+0x24>
 801840c:	6810      	ldr	r0, [r2, #0]
 801840e:	6852      	ldr	r2, [r2, #4]
 8018410:	605a      	str	r2, [r3, #4]
 8018412:	4401      	add	r1, r0
 8018414:	6019      	str	r1, [r3, #0]
 8018416:	e7d7      	b.n	80183c8 <_free_r+0x24>
 8018418:	d902      	bls.n	8018420 <_free_r+0x7c>
 801841a:	230c      	movs	r3, #12
 801841c:	602b      	str	r3, [r5, #0]
 801841e:	e7d3      	b.n	80183c8 <_free_r+0x24>
 8018420:	6820      	ldr	r0, [r4, #0]
 8018422:	1821      	adds	r1, r4, r0
 8018424:	428a      	cmp	r2, r1
 8018426:	bf04      	itt	eq
 8018428:	6811      	ldreq	r1, [r2, #0]
 801842a:	6852      	ldreq	r2, [r2, #4]
 801842c:	6062      	str	r2, [r4, #4]
 801842e:	bf04      	itt	eq
 8018430:	1809      	addeq	r1, r1, r0
 8018432:	6021      	streq	r1, [r4, #0]
 8018434:	605c      	str	r4, [r3, #4]
 8018436:	e7c7      	b.n	80183c8 <_free_r+0x24>
 8018438:	bd38      	pop	{r3, r4, r5, pc}
 801843a:	bf00      	nop
 801843c:	20004370 	.word	0x20004370

08018440 <_malloc_r>:
 8018440:	b570      	push	{r4, r5, r6, lr}
 8018442:	1ccd      	adds	r5, r1, #3
 8018444:	f025 0503 	bic.w	r5, r5, #3
 8018448:	3508      	adds	r5, #8
 801844a:	2d0c      	cmp	r5, #12
 801844c:	bf38      	it	cc
 801844e:	250c      	movcc	r5, #12
 8018450:	2d00      	cmp	r5, #0
 8018452:	4606      	mov	r6, r0
 8018454:	db01      	blt.n	801845a <_malloc_r+0x1a>
 8018456:	42a9      	cmp	r1, r5
 8018458:	d903      	bls.n	8018462 <_malloc_r+0x22>
 801845a:	230c      	movs	r3, #12
 801845c:	6033      	str	r3, [r6, #0]
 801845e:	2000      	movs	r0, #0
 8018460:	bd70      	pop	{r4, r5, r6, pc}
 8018462:	f000 fa43 	bl	80188ec <__malloc_lock>
 8018466:	4a21      	ldr	r2, [pc, #132]	; (80184ec <_malloc_r+0xac>)
 8018468:	6814      	ldr	r4, [r2, #0]
 801846a:	4621      	mov	r1, r4
 801846c:	b991      	cbnz	r1, 8018494 <_malloc_r+0x54>
 801846e:	4c20      	ldr	r4, [pc, #128]	; (80184f0 <_malloc_r+0xb0>)
 8018470:	6823      	ldr	r3, [r4, #0]
 8018472:	b91b      	cbnz	r3, 801847c <_malloc_r+0x3c>
 8018474:	4630      	mov	r0, r6
 8018476:	f000 f97d 	bl	8018774 <_sbrk_r>
 801847a:	6020      	str	r0, [r4, #0]
 801847c:	4629      	mov	r1, r5
 801847e:	4630      	mov	r0, r6
 8018480:	f000 f978 	bl	8018774 <_sbrk_r>
 8018484:	1c43      	adds	r3, r0, #1
 8018486:	d124      	bne.n	80184d2 <_malloc_r+0x92>
 8018488:	230c      	movs	r3, #12
 801848a:	6033      	str	r3, [r6, #0]
 801848c:	4630      	mov	r0, r6
 801848e:	f000 fa2e 	bl	80188ee <__malloc_unlock>
 8018492:	e7e4      	b.n	801845e <_malloc_r+0x1e>
 8018494:	680b      	ldr	r3, [r1, #0]
 8018496:	1b5b      	subs	r3, r3, r5
 8018498:	d418      	bmi.n	80184cc <_malloc_r+0x8c>
 801849a:	2b0b      	cmp	r3, #11
 801849c:	d90f      	bls.n	80184be <_malloc_r+0x7e>
 801849e:	600b      	str	r3, [r1, #0]
 80184a0:	50cd      	str	r5, [r1, r3]
 80184a2:	18cc      	adds	r4, r1, r3
 80184a4:	4630      	mov	r0, r6
 80184a6:	f000 fa22 	bl	80188ee <__malloc_unlock>
 80184aa:	f104 000b 	add.w	r0, r4, #11
 80184ae:	1d23      	adds	r3, r4, #4
 80184b0:	f020 0007 	bic.w	r0, r0, #7
 80184b4:	1ac3      	subs	r3, r0, r3
 80184b6:	d0d3      	beq.n	8018460 <_malloc_r+0x20>
 80184b8:	425a      	negs	r2, r3
 80184ba:	50e2      	str	r2, [r4, r3]
 80184bc:	e7d0      	b.n	8018460 <_malloc_r+0x20>
 80184be:	428c      	cmp	r4, r1
 80184c0:	684b      	ldr	r3, [r1, #4]
 80184c2:	bf16      	itet	ne
 80184c4:	6063      	strne	r3, [r4, #4]
 80184c6:	6013      	streq	r3, [r2, #0]
 80184c8:	460c      	movne	r4, r1
 80184ca:	e7eb      	b.n	80184a4 <_malloc_r+0x64>
 80184cc:	460c      	mov	r4, r1
 80184ce:	6849      	ldr	r1, [r1, #4]
 80184d0:	e7cc      	b.n	801846c <_malloc_r+0x2c>
 80184d2:	1cc4      	adds	r4, r0, #3
 80184d4:	f024 0403 	bic.w	r4, r4, #3
 80184d8:	42a0      	cmp	r0, r4
 80184da:	d005      	beq.n	80184e8 <_malloc_r+0xa8>
 80184dc:	1a21      	subs	r1, r4, r0
 80184de:	4630      	mov	r0, r6
 80184e0:	f000 f948 	bl	8018774 <_sbrk_r>
 80184e4:	3001      	adds	r0, #1
 80184e6:	d0cf      	beq.n	8018488 <_malloc_r+0x48>
 80184e8:	6025      	str	r5, [r4, #0]
 80184ea:	e7db      	b.n	80184a4 <_malloc_r+0x64>
 80184ec:	20004370 	.word	0x20004370
 80184f0:	20004374 	.word	0x20004374

080184f4 <__sfputc_r>:
 80184f4:	6893      	ldr	r3, [r2, #8]
 80184f6:	3b01      	subs	r3, #1
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	b410      	push	{r4}
 80184fc:	6093      	str	r3, [r2, #8]
 80184fe:	da08      	bge.n	8018512 <__sfputc_r+0x1e>
 8018500:	6994      	ldr	r4, [r2, #24]
 8018502:	42a3      	cmp	r3, r4
 8018504:	db01      	blt.n	801850a <__sfputc_r+0x16>
 8018506:	290a      	cmp	r1, #10
 8018508:	d103      	bne.n	8018512 <__sfputc_r+0x1e>
 801850a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801850e:	f7fe bb67 	b.w	8016be0 <__swbuf_r>
 8018512:	6813      	ldr	r3, [r2, #0]
 8018514:	1c58      	adds	r0, r3, #1
 8018516:	6010      	str	r0, [r2, #0]
 8018518:	7019      	strb	r1, [r3, #0]
 801851a:	4608      	mov	r0, r1
 801851c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018520:	4770      	bx	lr

08018522 <__sfputs_r>:
 8018522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018524:	4606      	mov	r6, r0
 8018526:	460f      	mov	r7, r1
 8018528:	4614      	mov	r4, r2
 801852a:	18d5      	adds	r5, r2, r3
 801852c:	42ac      	cmp	r4, r5
 801852e:	d101      	bne.n	8018534 <__sfputs_r+0x12>
 8018530:	2000      	movs	r0, #0
 8018532:	e007      	b.n	8018544 <__sfputs_r+0x22>
 8018534:	463a      	mov	r2, r7
 8018536:	f814 1b01 	ldrb.w	r1, [r4], #1
 801853a:	4630      	mov	r0, r6
 801853c:	f7ff ffda 	bl	80184f4 <__sfputc_r>
 8018540:	1c43      	adds	r3, r0, #1
 8018542:	d1f3      	bne.n	801852c <__sfputs_r+0xa>
 8018544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018548 <_vfiprintf_r>:
 8018548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801854c:	460c      	mov	r4, r1
 801854e:	b09d      	sub	sp, #116	; 0x74
 8018550:	4617      	mov	r7, r2
 8018552:	461d      	mov	r5, r3
 8018554:	4606      	mov	r6, r0
 8018556:	b118      	cbz	r0, 8018560 <_vfiprintf_r+0x18>
 8018558:	6983      	ldr	r3, [r0, #24]
 801855a:	b90b      	cbnz	r3, 8018560 <_vfiprintf_r+0x18>
 801855c:	f7ff fb34 	bl	8017bc8 <__sinit>
 8018560:	4b7c      	ldr	r3, [pc, #496]	; (8018754 <_vfiprintf_r+0x20c>)
 8018562:	429c      	cmp	r4, r3
 8018564:	d158      	bne.n	8018618 <_vfiprintf_r+0xd0>
 8018566:	6874      	ldr	r4, [r6, #4]
 8018568:	89a3      	ldrh	r3, [r4, #12]
 801856a:	0718      	lsls	r0, r3, #28
 801856c:	d55e      	bpl.n	801862c <_vfiprintf_r+0xe4>
 801856e:	6923      	ldr	r3, [r4, #16]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d05b      	beq.n	801862c <_vfiprintf_r+0xe4>
 8018574:	2300      	movs	r3, #0
 8018576:	9309      	str	r3, [sp, #36]	; 0x24
 8018578:	2320      	movs	r3, #32
 801857a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801857e:	2330      	movs	r3, #48	; 0x30
 8018580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018584:	9503      	str	r5, [sp, #12]
 8018586:	f04f 0b01 	mov.w	fp, #1
 801858a:	46b8      	mov	r8, r7
 801858c:	4645      	mov	r5, r8
 801858e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018592:	b10b      	cbz	r3, 8018598 <_vfiprintf_r+0x50>
 8018594:	2b25      	cmp	r3, #37	; 0x25
 8018596:	d154      	bne.n	8018642 <_vfiprintf_r+0xfa>
 8018598:	ebb8 0a07 	subs.w	sl, r8, r7
 801859c:	d00b      	beq.n	80185b6 <_vfiprintf_r+0x6e>
 801859e:	4653      	mov	r3, sl
 80185a0:	463a      	mov	r2, r7
 80185a2:	4621      	mov	r1, r4
 80185a4:	4630      	mov	r0, r6
 80185a6:	f7ff ffbc 	bl	8018522 <__sfputs_r>
 80185aa:	3001      	adds	r0, #1
 80185ac:	f000 80c2 	beq.w	8018734 <_vfiprintf_r+0x1ec>
 80185b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185b2:	4453      	add	r3, sl
 80185b4:	9309      	str	r3, [sp, #36]	; 0x24
 80185b6:	f898 3000 	ldrb.w	r3, [r8]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	f000 80ba 	beq.w	8018734 <_vfiprintf_r+0x1ec>
 80185c0:	2300      	movs	r3, #0
 80185c2:	f04f 32ff 	mov.w	r2, #4294967295
 80185c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185ca:	9304      	str	r3, [sp, #16]
 80185cc:	9307      	str	r3, [sp, #28]
 80185ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80185d2:	931a      	str	r3, [sp, #104]	; 0x68
 80185d4:	46a8      	mov	r8, r5
 80185d6:	2205      	movs	r2, #5
 80185d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80185dc:	485e      	ldr	r0, [pc, #376]	; (8018758 <_vfiprintf_r+0x210>)
 80185de:	f7ef fd37 	bl	8008050 <memchr>
 80185e2:	9b04      	ldr	r3, [sp, #16]
 80185e4:	bb78      	cbnz	r0, 8018646 <_vfiprintf_r+0xfe>
 80185e6:	06d9      	lsls	r1, r3, #27
 80185e8:	bf44      	itt	mi
 80185ea:	2220      	movmi	r2, #32
 80185ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80185f0:	071a      	lsls	r2, r3, #28
 80185f2:	bf44      	itt	mi
 80185f4:	222b      	movmi	r2, #43	; 0x2b
 80185f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80185fa:	782a      	ldrb	r2, [r5, #0]
 80185fc:	2a2a      	cmp	r2, #42	; 0x2a
 80185fe:	d02a      	beq.n	8018656 <_vfiprintf_r+0x10e>
 8018600:	9a07      	ldr	r2, [sp, #28]
 8018602:	46a8      	mov	r8, r5
 8018604:	2000      	movs	r0, #0
 8018606:	250a      	movs	r5, #10
 8018608:	4641      	mov	r1, r8
 801860a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801860e:	3b30      	subs	r3, #48	; 0x30
 8018610:	2b09      	cmp	r3, #9
 8018612:	d969      	bls.n	80186e8 <_vfiprintf_r+0x1a0>
 8018614:	b360      	cbz	r0, 8018670 <_vfiprintf_r+0x128>
 8018616:	e024      	b.n	8018662 <_vfiprintf_r+0x11a>
 8018618:	4b50      	ldr	r3, [pc, #320]	; (801875c <_vfiprintf_r+0x214>)
 801861a:	429c      	cmp	r4, r3
 801861c:	d101      	bne.n	8018622 <_vfiprintf_r+0xda>
 801861e:	68b4      	ldr	r4, [r6, #8]
 8018620:	e7a2      	b.n	8018568 <_vfiprintf_r+0x20>
 8018622:	4b4f      	ldr	r3, [pc, #316]	; (8018760 <_vfiprintf_r+0x218>)
 8018624:	429c      	cmp	r4, r3
 8018626:	bf08      	it	eq
 8018628:	68f4      	ldreq	r4, [r6, #12]
 801862a:	e79d      	b.n	8018568 <_vfiprintf_r+0x20>
 801862c:	4621      	mov	r1, r4
 801862e:	4630      	mov	r0, r6
 8018630:	f7fe fb28 	bl	8016c84 <__swsetup_r>
 8018634:	2800      	cmp	r0, #0
 8018636:	d09d      	beq.n	8018574 <_vfiprintf_r+0x2c>
 8018638:	f04f 30ff 	mov.w	r0, #4294967295
 801863c:	b01d      	add	sp, #116	; 0x74
 801863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018642:	46a8      	mov	r8, r5
 8018644:	e7a2      	b.n	801858c <_vfiprintf_r+0x44>
 8018646:	4a44      	ldr	r2, [pc, #272]	; (8018758 <_vfiprintf_r+0x210>)
 8018648:	1a80      	subs	r0, r0, r2
 801864a:	fa0b f000 	lsl.w	r0, fp, r0
 801864e:	4318      	orrs	r0, r3
 8018650:	9004      	str	r0, [sp, #16]
 8018652:	4645      	mov	r5, r8
 8018654:	e7be      	b.n	80185d4 <_vfiprintf_r+0x8c>
 8018656:	9a03      	ldr	r2, [sp, #12]
 8018658:	1d11      	adds	r1, r2, #4
 801865a:	6812      	ldr	r2, [r2, #0]
 801865c:	9103      	str	r1, [sp, #12]
 801865e:	2a00      	cmp	r2, #0
 8018660:	db01      	blt.n	8018666 <_vfiprintf_r+0x11e>
 8018662:	9207      	str	r2, [sp, #28]
 8018664:	e004      	b.n	8018670 <_vfiprintf_r+0x128>
 8018666:	4252      	negs	r2, r2
 8018668:	f043 0302 	orr.w	r3, r3, #2
 801866c:	9207      	str	r2, [sp, #28]
 801866e:	9304      	str	r3, [sp, #16]
 8018670:	f898 3000 	ldrb.w	r3, [r8]
 8018674:	2b2e      	cmp	r3, #46	; 0x2e
 8018676:	d10e      	bne.n	8018696 <_vfiprintf_r+0x14e>
 8018678:	f898 3001 	ldrb.w	r3, [r8, #1]
 801867c:	2b2a      	cmp	r3, #42	; 0x2a
 801867e:	d138      	bne.n	80186f2 <_vfiprintf_r+0x1aa>
 8018680:	9b03      	ldr	r3, [sp, #12]
 8018682:	1d1a      	adds	r2, r3, #4
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	9203      	str	r2, [sp, #12]
 8018688:	2b00      	cmp	r3, #0
 801868a:	bfb8      	it	lt
 801868c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018690:	f108 0802 	add.w	r8, r8, #2
 8018694:	9305      	str	r3, [sp, #20]
 8018696:	4d33      	ldr	r5, [pc, #204]	; (8018764 <_vfiprintf_r+0x21c>)
 8018698:	f898 1000 	ldrb.w	r1, [r8]
 801869c:	2203      	movs	r2, #3
 801869e:	4628      	mov	r0, r5
 80186a0:	f7ef fcd6 	bl	8008050 <memchr>
 80186a4:	b140      	cbz	r0, 80186b8 <_vfiprintf_r+0x170>
 80186a6:	2340      	movs	r3, #64	; 0x40
 80186a8:	1b40      	subs	r0, r0, r5
 80186aa:	fa03 f000 	lsl.w	r0, r3, r0
 80186ae:	9b04      	ldr	r3, [sp, #16]
 80186b0:	4303      	orrs	r3, r0
 80186b2:	f108 0801 	add.w	r8, r8, #1
 80186b6:	9304      	str	r3, [sp, #16]
 80186b8:	f898 1000 	ldrb.w	r1, [r8]
 80186bc:	482a      	ldr	r0, [pc, #168]	; (8018768 <_vfiprintf_r+0x220>)
 80186be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80186c2:	2206      	movs	r2, #6
 80186c4:	f108 0701 	add.w	r7, r8, #1
 80186c8:	f7ef fcc2 	bl	8008050 <memchr>
 80186cc:	2800      	cmp	r0, #0
 80186ce:	d037      	beq.n	8018740 <_vfiprintf_r+0x1f8>
 80186d0:	4b26      	ldr	r3, [pc, #152]	; (801876c <_vfiprintf_r+0x224>)
 80186d2:	bb1b      	cbnz	r3, 801871c <_vfiprintf_r+0x1d4>
 80186d4:	9b03      	ldr	r3, [sp, #12]
 80186d6:	3307      	adds	r3, #7
 80186d8:	f023 0307 	bic.w	r3, r3, #7
 80186dc:	3308      	adds	r3, #8
 80186de:	9303      	str	r3, [sp, #12]
 80186e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186e2:	444b      	add	r3, r9
 80186e4:	9309      	str	r3, [sp, #36]	; 0x24
 80186e6:	e750      	b.n	801858a <_vfiprintf_r+0x42>
 80186e8:	fb05 3202 	mla	r2, r5, r2, r3
 80186ec:	2001      	movs	r0, #1
 80186ee:	4688      	mov	r8, r1
 80186f0:	e78a      	b.n	8018608 <_vfiprintf_r+0xc0>
 80186f2:	2300      	movs	r3, #0
 80186f4:	f108 0801 	add.w	r8, r8, #1
 80186f8:	9305      	str	r3, [sp, #20]
 80186fa:	4619      	mov	r1, r3
 80186fc:	250a      	movs	r5, #10
 80186fe:	4640      	mov	r0, r8
 8018700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018704:	3a30      	subs	r2, #48	; 0x30
 8018706:	2a09      	cmp	r2, #9
 8018708:	d903      	bls.n	8018712 <_vfiprintf_r+0x1ca>
 801870a:	2b00      	cmp	r3, #0
 801870c:	d0c3      	beq.n	8018696 <_vfiprintf_r+0x14e>
 801870e:	9105      	str	r1, [sp, #20]
 8018710:	e7c1      	b.n	8018696 <_vfiprintf_r+0x14e>
 8018712:	fb05 2101 	mla	r1, r5, r1, r2
 8018716:	2301      	movs	r3, #1
 8018718:	4680      	mov	r8, r0
 801871a:	e7f0      	b.n	80186fe <_vfiprintf_r+0x1b6>
 801871c:	ab03      	add	r3, sp, #12
 801871e:	9300      	str	r3, [sp, #0]
 8018720:	4622      	mov	r2, r4
 8018722:	4b13      	ldr	r3, [pc, #76]	; (8018770 <_vfiprintf_r+0x228>)
 8018724:	a904      	add	r1, sp, #16
 8018726:	4630      	mov	r0, r6
 8018728:	f7fd fe16 	bl	8016358 <_printf_float>
 801872c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018730:	4681      	mov	r9, r0
 8018732:	d1d5      	bne.n	80186e0 <_vfiprintf_r+0x198>
 8018734:	89a3      	ldrh	r3, [r4, #12]
 8018736:	065b      	lsls	r3, r3, #25
 8018738:	f53f af7e 	bmi.w	8018638 <_vfiprintf_r+0xf0>
 801873c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801873e:	e77d      	b.n	801863c <_vfiprintf_r+0xf4>
 8018740:	ab03      	add	r3, sp, #12
 8018742:	9300      	str	r3, [sp, #0]
 8018744:	4622      	mov	r2, r4
 8018746:	4b0a      	ldr	r3, [pc, #40]	; (8018770 <_vfiprintf_r+0x228>)
 8018748:	a904      	add	r1, sp, #16
 801874a:	4630      	mov	r0, r6
 801874c:	f7fe f8ba 	bl	80168c4 <_printf_i>
 8018750:	e7ec      	b.n	801872c <_vfiprintf_r+0x1e4>
 8018752:	bf00      	nop
 8018754:	08018b80 	.word	0x08018b80
 8018758:	08018cbc 	.word	0x08018cbc
 801875c:	08018ba0 	.word	0x08018ba0
 8018760:	08018b60 	.word	0x08018b60
 8018764:	08018cc2 	.word	0x08018cc2
 8018768:	08018cc6 	.word	0x08018cc6
 801876c:	08016359 	.word	0x08016359
 8018770:	08018523 	.word	0x08018523

08018774 <_sbrk_r>:
 8018774:	b538      	push	{r3, r4, r5, lr}
 8018776:	4c06      	ldr	r4, [pc, #24]	; (8018790 <_sbrk_r+0x1c>)
 8018778:	2300      	movs	r3, #0
 801877a:	4605      	mov	r5, r0
 801877c:	4608      	mov	r0, r1
 801877e:	6023      	str	r3, [r4, #0]
 8018780:	f7f8 fc22 	bl	8010fc8 <_sbrk>
 8018784:	1c43      	adds	r3, r0, #1
 8018786:	d102      	bne.n	801878e <_sbrk_r+0x1a>
 8018788:	6823      	ldr	r3, [r4, #0]
 801878a:	b103      	cbz	r3, 801878e <_sbrk_r+0x1a>
 801878c:	602b      	str	r3, [r5, #0]
 801878e:	bd38      	pop	{r3, r4, r5, pc}
 8018790:	20005080 	.word	0x20005080

08018794 <__sread>:
 8018794:	b510      	push	{r4, lr}
 8018796:	460c      	mov	r4, r1
 8018798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801879c:	f000 f8a8 	bl	80188f0 <_read_r>
 80187a0:	2800      	cmp	r0, #0
 80187a2:	bfab      	itete	ge
 80187a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80187a6:	89a3      	ldrhlt	r3, [r4, #12]
 80187a8:	181b      	addge	r3, r3, r0
 80187aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80187ae:	bfac      	ite	ge
 80187b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80187b2:	81a3      	strhlt	r3, [r4, #12]
 80187b4:	bd10      	pop	{r4, pc}

080187b6 <__swrite>:
 80187b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187ba:	461f      	mov	r7, r3
 80187bc:	898b      	ldrh	r3, [r1, #12]
 80187be:	05db      	lsls	r3, r3, #23
 80187c0:	4605      	mov	r5, r0
 80187c2:	460c      	mov	r4, r1
 80187c4:	4616      	mov	r6, r2
 80187c6:	d505      	bpl.n	80187d4 <__swrite+0x1e>
 80187c8:	2302      	movs	r3, #2
 80187ca:	2200      	movs	r2, #0
 80187cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187d0:	f000 f868 	bl	80188a4 <_lseek_r>
 80187d4:	89a3      	ldrh	r3, [r4, #12]
 80187d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80187da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80187de:	81a3      	strh	r3, [r4, #12]
 80187e0:	4632      	mov	r2, r6
 80187e2:	463b      	mov	r3, r7
 80187e4:	4628      	mov	r0, r5
 80187e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187ea:	f000 b817 	b.w	801881c <_write_r>

080187ee <__sseek>:
 80187ee:	b510      	push	{r4, lr}
 80187f0:	460c      	mov	r4, r1
 80187f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187f6:	f000 f855 	bl	80188a4 <_lseek_r>
 80187fa:	1c43      	adds	r3, r0, #1
 80187fc:	89a3      	ldrh	r3, [r4, #12]
 80187fe:	bf15      	itete	ne
 8018800:	6560      	strne	r0, [r4, #84]	; 0x54
 8018802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801880a:	81a3      	strheq	r3, [r4, #12]
 801880c:	bf18      	it	ne
 801880e:	81a3      	strhne	r3, [r4, #12]
 8018810:	bd10      	pop	{r4, pc}

08018812 <__sclose>:
 8018812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018816:	f000 b813 	b.w	8018840 <_close_r>
	...

0801881c <_write_r>:
 801881c:	b538      	push	{r3, r4, r5, lr}
 801881e:	4c07      	ldr	r4, [pc, #28]	; (801883c <_write_r+0x20>)
 8018820:	4605      	mov	r5, r0
 8018822:	4608      	mov	r0, r1
 8018824:	4611      	mov	r1, r2
 8018826:	2200      	movs	r2, #0
 8018828:	6022      	str	r2, [r4, #0]
 801882a:	461a      	mov	r2, r3
 801882c:	f7f8 fb7b 	bl	8010f26 <_write>
 8018830:	1c43      	adds	r3, r0, #1
 8018832:	d102      	bne.n	801883a <_write_r+0x1e>
 8018834:	6823      	ldr	r3, [r4, #0]
 8018836:	b103      	cbz	r3, 801883a <_write_r+0x1e>
 8018838:	602b      	str	r3, [r5, #0]
 801883a:	bd38      	pop	{r3, r4, r5, pc}
 801883c:	20005080 	.word	0x20005080

08018840 <_close_r>:
 8018840:	b538      	push	{r3, r4, r5, lr}
 8018842:	4c06      	ldr	r4, [pc, #24]	; (801885c <_close_r+0x1c>)
 8018844:	2300      	movs	r3, #0
 8018846:	4605      	mov	r5, r0
 8018848:	4608      	mov	r0, r1
 801884a:	6023      	str	r3, [r4, #0]
 801884c:	f7f8 fb87 	bl	8010f5e <_close>
 8018850:	1c43      	adds	r3, r0, #1
 8018852:	d102      	bne.n	801885a <_close_r+0x1a>
 8018854:	6823      	ldr	r3, [r4, #0]
 8018856:	b103      	cbz	r3, 801885a <_close_r+0x1a>
 8018858:	602b      	str	r3, [r5, #0]
 801885a:	bd38      	pop	{r3, r4, r5, pc}
 801885c:	20005080 	.word	0x20005080

08018860 <_fstat_r>:
 8018860:	b538      	push	{r3, r4, r5, lr}
 8018862:	4c07      	ldr	r4, [pc, #28]	; (8018880 <_fstat_r+0x20>)
 8018864:	2300      	movs	r3, #0
 8018866:	4605      	mov	r5, r0
 8018868:	4608      	mov	r0, r1
 801886a:	4611      	mov	r1, r2
 801886c:	6023      	str	r3, [r4, #0]
 801886e:	f7f8 fb82 	bl	8010f76 <_fstat>
 8018872:	1c43      	adds	r3, r0, #1
 8018874:	d102      	bne.n	801887c <_fstat_r+0x1c>
 8018876:	6823      	ldr	r3, [r4, #0]
 8018878:	b103      	cbz	r3, 801887c <_fstat_r+0x1c>
 801887a:	602b      	str	r3, [r5, #0]
 801887c:	bd38      	pop	{r3, r4, r5, pc}
 801887e:	bf00      	nop
 8018880:	20005080 	.word	0x20005080

08018884 <_isatty_r>:
 8018884:	b538      	push	{r3, r4, r5, lr}
 8018886:	4c06      	ldr	r4, [pc, #24]	; (80188a0 <_isatty_r+0x1c>)
 8018888:	2300      	movs	r3, #0
 801888a:	4605      	mov	r5, r0
 801888c:	4608      	mov	r0, r1
 801888e:	6023      	str	r3, [r4, #0]
 8018890:	f7f8 fb81 	bl	8010f96 <_isatty>
 8018894:	1c43      	adds	r3, r0, #1
 8018896:	d102      	bne.n	801889e <_isatty_r+0x1a>
 8018898:	6823      	ldr	r3, [r4, #0]
 801889a:	b103      	cbz	r3, 801889e <_isatty_r+0x1a>
 801889c:	602b      	str	r3, [r5, #0]
 801889e:	bd38      	pop	{r3, r4, r5, pc}
 80188a0:	20005080 	.word	0x20005080

080188a4 <_lseek_r>:
 80188a4:	b538      	push	{r3, r4, r5, lr}
 80188a6:	4c07      	ldr	r4, [pc, #28]	; (80188c4 <_lseek_r+0x20>)
 80188a8:	4605      	mov	r5, r0
 80188aa:	4608      	mov	r0, r1
 80188ac:	4611      	mov	r1, r2
 80188ae:	2200      	movs	r2, #0
 80188b0:	6022      	str	r2, [r4, #0]
 80188b2:	461a      	mov	r2, r3
 80188b4:	f7f8 fb7a 	bl	8010fac <_lseek>
 80188b8:	1c43      	adds	r3, r0, #1
 80188ba:	d102      	bne.n	80188c2 <_lseek_r+0x1e>
 80188bc:	6823      	ldr	r3, [r4, #0]
 80188be:	b103      	cbz	r3, 80188c2 <_lseek_r+0x1e>
 80188c0:	602b      	str	r3, [r5, #0]
 80188c2:	bd38      	pop	{r3, r4, r5, pc}
 80188c4:	20005080 	.word	0x20005080

080188c8 <__ascii_mbtowc>:
 80188c8:	b082      	sub	sp, #8
 80188ca:	b901      	cbnz	r1, 80188ce <__ascii_mbtowc+0x6>
 80188cc:	a901      	add	r1, sp, #4
 80188ce:	b142      	cbz	r2, 80188e2 <__ascii_mbtowc+0x1a>
 80188d0:	b14b      	cbz	r3, 80188e6 <__ascii_mbtowc+0x1e>
 80188d2:	7813      	ldrb	r3, [r2, #0]
 80188d4:	600b      	str	r3, [r1, #0]
 80188d6:	7812      	ldrb	r2, [r2, #0]
 80188d8:	1c10      	adds	r0, r2, #0
 80188da:	bf18      	it	ne
 80188dc:	2001      	movne	r0, #1
 80188de:	b002      	add	sp, #8
 80188e0:	4770      	bx	lr
 80188e2:	4610      	mov	r0, r2
 80188e4:	e7fb      	b.n	80188de <__ascii_mbtowc+0x16>
 80188e6:	f06f 0001 	mvn.w	r0, #1
 80188ea:	e7f8      	b.n	80188de <__ascii_mbtowc+0x16>

080188ec <__malloc_lock>:
 80188ec:	4770      	bx	lr

080188ee <__malloc_unlock>:
 80188ee:	4770      	bx	lr

080188f0 <_read_r>:
 80188f0:	b538      	push	{r3, r4, r5, lr}
 80188f2:	4c07      	ldr	r4, [pc, #28]	; (8018910 <_read_r+0x20>)
 80188f4:	4605      	mov	r5, r0
 80188f6:	4608      	mov	r0, r1
 80188f8:	4611      	mov	r1, r2
 80188fa:	2200      	movs	r2, #0
 80188fc:	6022      	str	r2, [r4, #0]
 80188fe:	461a      	mov	r2, r3
 8018900:	f7f8 faf4 	bl	8010eec <_read>
 8018904:	1c43      	adds	r3, r0, #1
 8018906:	d102      	bne.n	801890e <_read_r+0x1e>
 8018908:	6823      	ldr	r3, [r4, #0]
 801890a:	b103      	cbz	r3, 801890e <_read_r+0x1e>
 801890c:	602b      	str	r3, [r5, #0]
 801890e:	bd38      	pop	{r3, r4, r5, pc}
 8018910:	20005080 	.word	0x20005080

08018914 <__ascii_wctomb>:
 8018914:	b149      	cbz	r1, 801892a <__ascii_wctomb+0x16>
 8018916:	2aff      	cmp	r2, #255	; 0xff
 8018918:	bf85      	ittet	hi
 801891a:	238a      	movhi	r3, #138	; 0x8a
 801891c:	6003      	strhi	r3, [r0, #0]
 801891e:	700a      	strbls	r2, [r1, #0]
 8018920:	f04f 30ff 	movhi.w	r0, #4294967295
 8018924:	bf98      	it	ls
 8018926:	2001      	movls	r0, #1
 8018928:	4770      	bx	lr
 801892a:	4608      	mov	r0, r1
 801892c:	4770      	bx	lr
	...

08018930 <_init>:
 8018930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018932:	bf00      	nop
 8018934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018936:	bc08      	pop	{r3}
 8018938:	469e      	mov	lr, r3
 801893a:	4770      	bx	lr

0801893c <_fini>:
 801893c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801893e:	bf00      	nop
 8018940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018942:	bc08      	pop	{r3}
 8018944:	469e      	mov	lr, r3
 8018946:	4770      	bx	lr
