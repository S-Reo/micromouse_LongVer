
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         000124ac  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000077c  0801a4b0  0801a4b0  0002a4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801ac2c  0801ac2c  000301fc  2**0
                  CONTENTS
  6 .ARM          00000008  0801ac2c  0801ac2c  0002ac2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801ac34  0801ac34  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801ac34  0801ac34  0002ac34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801ac38  0801ac38  0002ac38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001fc  20000000  0801ac3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a24  200001fc  0801ae38  000301fc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000c20  0801ae38  00030c20  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018161  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046d8  00000000  00000000  0004838d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001650  00000000  00000000  0004ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001420  00000000  00000000  0004e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024796  00000000  00000000  0004f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c34e  00000000  00000000  00073c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9264  00000000  00000000  0008ffbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00159220  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072d4  00000000  00000000  00159270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001fc 	.word	0x200001fc
 800801c:	00000000 	.word	0x00000000
 8008020:	0801a494 	.word	0x0801a494

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000200 	.word	0x20000200
 800803c:	0801a494 	.word	0x0801a494

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	3c01      	subs	r4, #1
 800822c:	bf28      	it	cs
 800822e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008232:	d2e9      	bcs.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b9aa 	b.w	8008e64 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f83c 	bl	8008b94 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__aeabi_d2lz>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	f7ff ff0b 	bl	800894c <__aeabi_dcmplt>
 8008b36:	b928      	cbnz	r0, 8008b44 <__aeabi_d2lz+0x1c>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b40:	f000 b80a 	b.w	8008b58 <__aeabi_d2ulz>
 8008b44:	4620      	mov	r0, r4
 8008b46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8008b4a:	f000 f805 	bl	8008b58 <__aeabi_d2ulz>
 8008b4e:	4240      	negs	r0, r0
 8008b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	bf00      	nop

08008b58 <__aeabi_d2ulz>:
 8008b58:	b5d0      	push	{r4, r6, r7, lr}
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <__aeabi_d2ulz+0x34>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460f      	mov	r7, r1
 8008b62:	f7ff fc81 	bl	8008468 <__aeabi_dmul>
 8008b66:	f7ff ff57 	bl	8008a18 <__aeabi_d2uiz>
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	f7ff fc02 	bl	8008374 <__aeabi_ui2d>
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <__aeabi_d2ulz+0x38>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	f7ff fc78 	bl	8008468 <__aeabi_dmul>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7ff faba 	bl	80080f8 <__aeabi_dsub>
 8008b84:	f7ff ff48 	bl	8008a18 <__aeabi_d2uiz>
 8008b88:	4621      	mov	r1, r4
 8008b8a:	bdd0      	pop	{r4, r6, r7, pc}
 8008b8c:	3df00000 	.word	0x3df00000
 8008b90:	41f00000 	.word	0x41f00000

08008b94 <__udivmoddi4>:
 8008b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	9d08      	ldr	r5, [sp, #32]
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	468e      	mov	lr, r1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d14d      	bne.n	8008c3e <__udivmoddi4+0xaa>
 8008ba2:	428a      	cmp	r2, r1
 8008ba4:	4694      	mov	ip, r2
 8008ba6:	d969      	bls.n	8008c7c <__udivmoddi4+0xe8>
 8008ba8:	fab2 f282 	clz	r2, r2
 8008bac:	b152      	cbz	r2, 8008bc4 <__udivmoddi4+0x30>
 8008bae:	fa01 f302 	lsl.w	r3, r1, r2
 8008bb2:	f1c2 0120 	rsb	r1, r2, #32
 8008bb6:	fa20 f101 	lsr.w	r1, r0, r1
 8008bba:	fa0c fc02 	lsl.w	ip, ip, r2
 8008bbe:	ea41 0e03 	orr.w	lr, r1, r3
 8008bc2:	4094      	lsls	r4, r2
 8008bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008bc8:	0c21      	lsrs	r1, r4, #16
 8008bca:	fbbe f6f8 	udiv	r6, lr, r8
 8008bce:	fa1f f78c 	uxth.w	r7, ip
 8008bd2:	fb08 e316 	mls	r3, r8, r6, lr
 8008bd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008bda:	fb06 f107 	mul.w	r1, r6, r7
 8008bde:	4299      	cmp	r1, r3
 8008be0:	d90a      	bls.n	8008bf8 <__udivmoddi4+0x64>
 8008be2:	eb1c 0303 	adds.w	r3, ip, r3
 8008be6:	f106 30ff 	add.w	r0, r6, #4294967295
 8008bea:	f080 811f 	bcs.w	8008e2c <__udivmoddi4+0x298>
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	f240 811c 	bls.w	8008e2c <__udivmoddi4+0x298>
 8008bf4:	3e02      	subs	r6, #2
 8008bf6:	4463      	add	r3, ip
 8008bf8:	1a5b      	subs	r3, r3, r1
 8008bfa:	b2a4      	uxth	r4, r4
 8008bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008c00:	fb08 3310 	mls	r3, r8, r0, r3
 8008c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008c08:	fb00 f707 	mul.w	r7, r0, r7
 8008c0c:	42a7      	cmp	r7, r4
 8008c0e:	d90a      	bls.n	8008c26 <__udivmoddi4+0x92>
 8008c10:	eb1c 0404 	adds.w	r4, ip, r4
 8008c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c18:	f080 810a 	bcs.w	8008e30 <__udivmoddi4+0x29c>
 8008c1c:	42a7      	cmp	r7, r4
 8008c1e:	f240 8107 	bls.w	8008e30 <__udivmoddi4+0x29c>
 8008c22:	4464      	add	r4, ip
 8008c24:	3802      	subs	r0, #2
 8008c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008c2a:	1be4      	subs	r4, r4, r7
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	b11d      	cbz	r5, 8008c38 <__udivmoddi4+0xa4>
 8008c30:	40d4      	lsrs	r4, r2
 8008c32:	2300      	movs	r3, #0
 8008c34:	e9c5 4300 	strd	r4, r3, [r5]
 8008c38:	4631      	mov	r1, r6
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	428b      	cmp	r3, r1
 8008c40:	d909      	bls.n	8008c56 <__udivmoddi4+0xc2>
 8008c42:	2d00      	cmp	r5, #0
 8008c44:	f000 80ef 	beq.w	8008e26 <__udivmoddi4+0x292>
 8008c48:	2600      	movs	r6, #0
 8008c4a:	e9c5 0100 	strd	r0, r1, [r5]
 8008c4e:	4630      	mov	r0, r6
 8008c50:	4631      	mov	r1, r6
 8008c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c56:	fab3 f683 	clz	r6, r3
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	d14a      	bne.n	8008cf4 <__udivmoddi4+0x160>
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	d302      	bcc.n	8008c68 <__udivmoddi4+0xd4>
 8008c62:	4282      	cmp	r2, r0
 8008c64:	f200 80f9 	bhi.w	8008e5a <__udivmoddi4+0x2c6>
 8008c68:	1a84      	subs	r4, r0, r2
 8008c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8008c6e:	2001      	movs	r0, #1
 8008c70:	469e      	mov	lr, r3
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	d0e0      	beq.n	8008c38 <__udivmoddi4+0xa4>
 8008c76:	e9c5 4e00 	strd	r4, lr, [r5]
 8008c7a:	e7dd      	b.n	8008c38 <__udivmoddi4+0xa4>
 8008c7c:	b902      	cbnz	r2, 8008c80 <__udivmoddi4+0xec>
 8008c7e:	deff      	udf	#255	; 0xff
 8008c80:	fab2 f282 	clz	r2, r2
 8008c84:	2a00      	cmp	r2, #0
 8008c86:	f040 8092 	bne.w	8008dae <__udivmoddi4+0x21a>
 8008c8a:	eba1 010c 	sub.w	r1, r1, ip
 8008c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008c92:	fa1f fe8c 	uxth.w	lr, ip
 8008c96:	2601      	movs	r6, #1
 8008c98:	0c20      	lsrs	r0, r4, #16
 8008c9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8008c9e:	fb07 1113 	mls	r1, r7, r3, r1
 8008ca2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008ca6:	fb0e f003 	mul.w	r0, lr, r3
 8008caa:	4288      	cmp	r0, r1
 8008cac:	d908      	bls.n	8008cc0 <__udivmoddi4+0x12c>
 8008cae:	eb1c 0101 	adds.w	r1, ip, r1
 8008cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8008cb6:	d202      	bcs.n	8008cbe <__udivmoddi4+0x12a>
 8008cb8:	4288      	cmp	r0, r1
 8008cba:	f200 80cb 	bhi.w	8008e54 <__udivmoddi4+0x2c0>
 8008cbe:	4643      	mov	r3, r8
 8008cc0:	1a09      	subs	r1, r1, r0
 8008cc2:	b2a4      	uxth	r4, r4
 8008cc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8008cc8:	fb07 1110 	mls	r1, r7, r0, r1
 8008ccc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8008cd4:	45a6      	cmp	lr, r4
 8008cd6:	d908      	bls.n	8008cea <__udivmoddi4+0x156>
 8008cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8008cdc:	f100 31ff 	add.w	r1, r0, #4294967295
 8008ce0:	d202      	bcs.n	8008ce8 <__udivmoddi4+0x154>
 8008ce2:	45a6      	cmp	lr, r4
 8008ce4:	f200 80bb 	bhi.w	8008e5e <__udivmoddi4+0x2ca>
 8008ce8:	4608      	mov	r0, r1
 8008cea:	eba4 040e 	sub.w	r4, r4, lr
 8008cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008cf2:	e79c      	b.n	8008c2e <__udivmoddi4+0x9a>
 8008cf4:	f1c6 0720 	rsb	r7, r6, #32
 8008cf8:	40b3      	lsls	r3, r6
 8008cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8008cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8008d02:	fa20 f407 	lsr.w	r4, r0, r7
 8008d06:	fa01 f306 	lsl.w	r3, r1, r6
 8008d0a:	431c      	orrs	r4, r3
 8008d0c:	40f9      	lsrs	r1, r7
 8008d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008d12:	fa00 f306 	lsl.w	r3, r0, r6
 8008d16:	fbb1 f8f9 	udiv	r8, r1, r9
 8008d1a:	0c20      	lsrs	r0, r4, #16
 8008d1c:	fa1f fe8c 	uxth.w	lr, ip
 8008d20:	fb09 1118 	mls	r1, r9, r8, r1
 8008d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008d28:	fb08 f00e 	mul.w	r0, r8, lr
 8008d2c:	4288      	cmp	r0, r1
 8008d2e:	fa02 f206 	lsl.w	r2, r2, r6
 8008d32:	d90b      	bls.n	8008d4c <__udivmoddi4+0x1b8>
 8008d34:	eb1c 0101 	adds.w	r1, ip, r1
 8008d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8008d3c:	f080 8088 	bcs.w	8008e50 <__udivmoddi4+0x2bc>
 8008d40:	4288      	cmp	r0, r1
 8008d42:	f240 8085 	bls.w	8008e50 <__udivmoddi4+0x2bc>
 8008d46:	f1a8 0802 	sub.w	r8, r8, #2
 8008d4a:	4461      	add	r1, ip
 8008d4c:	1a09      	subs	r1, r1, r0
 8008d4e:	b2a4      	uxth	r4, r4
 8008d50:	fbb1 f0f9 	udiv	r0, r1, r9
 8008d54:	fb09 1110 	mls	r1, r9, r0, r1
 8008d58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8008d60:	458e      	cmp	lr, r1
 8008d62:	d908      	bls.n	8008d76 <__udivmoddi4+0x1e2>
 8008d64:	eb1c 0101 	adds.w	r1, ip, r1
 8008d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8008d6c:	d26c      	bcs.n	8008e48 <__udivmoddi4+0x2b4>
 8008d6e:	458e      	cmp	lr, r1
 8008d70:	d96a      	bls.n	8008e48 <__udivmoddi4+0x2b4>
 8008d72:	3802      	subs	r0, #2
 8008d74:	4461      	add	r1, ip
 8008d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8008d7e:	eba1 010e 	sub.w	r1, r1, lr
 8008d82:	42a1      	cmp	r1, r4
 8008d84:	46c8      	mov	r8, r9
 8008d86:	46a6      	mov	lr, r4
 8008d88:	d356      	bcc.n	8008e38 <__udivmoddi4+0x2a4>
 8008d8a:	d053      	beq.n	8008e34 <__udivmoddi4+0x2a0>
 8008d8c:	b15d      	cbz	r5, 8008da6 <__udivmoddi4+0x212>
 8008d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8008d92:	eb61 010e 	sbc.w	r1, r1, lr
 8008d96:	fa01 f707 	lsl.w	r7, r1, r7
 8008d9a:	fa22 f306 	lsr.w	r3, r2, r6
 8008d9e:	40f1      	lsrs	r1, r6
 8008da0:	431f      	orrs	r7, r3
 8008da2:	e9c5 7100 	strd	r7, r1, [r5]
 8008da6:	2600      	movs	r6, #0
 8008da8:	4631      	mov	r1, r6
 8008daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dae:	f1c2 0320 	rsb	r3, r2, #32
 8008db2:	40d8      	lsrs	r0, r3
 8008db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8008db8:	fa21 f303 	lsr.w	r3, r1, r3
 8008dbc:	4091      	lsls	r1, r2
 8008dbe:	4301      	orrs	r1, r0
 8008dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008dc4:	fa1f fe8c 	uxth.w	lr, ip
 8008dc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8008dcc:	fb07 3610 	mls	r6, r7, r0, r3
 8008dd0:	0c0b      	lsrs	r3, r1, #16
 8008dd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008dd6:	fb00 f60e 	mul.w	r6, r0, lr
 8008dda:	429e      	cmp	r6, r3
 8008ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8008de0:	d908      	bls.n	8008df4 <__udivmoddi4+0x260>
 8008de2:	eb1c 0303 	adds.w	r3, ip, r3
 8008de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8008dea:	d22f      	bcs.n	8008e4c <__udivmoddi4+0x2b8>
 8008dec:	429e      	cmp	r6, r3
 8008dee:	d92d      	bls.n	8008e4c <__udivmoddi4+0x2b8>
 8008df0:	3802      	subs	r0, #2
 8008df2:	4463      	add	r3, ip
 8008df4:	1b9b      	subs	r3, r3, r6
 8008df6:	b289      	uxth	r1, r1
 8008df8:	fbb3 f6f7 	udiv	r6, r3, r7
 8008dfc:	fb07 3316 	mls	r3, r7, r6, r3
 8008e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008e04:	fb06 f30e 	mul.w	r3, r6, lr
 8008e08:	428b      	cmp	r3, r1
 8008e0a:	d908      	bls.n	8008e1e <__udivmoddi4+0x28a>
 8008e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8008e10:	f106 38ff 	add.w	r8, r6, #4294967295
 8008e14:	d216      	bcs.n	8008e44 <__udivmoddi4+0x2b0>
 8008e16:	428b      	cmp	r3, r1
 8008e18:	d914      	bls.n	8008e44 <__udivmoddi4+0x2b0>
 8008e1a:	3e02      	subs	r6, #2
 8008e1c:	4461      	add	r1, ip
 8008e1e:	1ac9      	subs	r1, r1, r3
 8008e20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008e24:	e738      	b.n	8008c98 <__udivmoddi4+0x104>
 8008e26:	462e      	mov	r6, r5
 8008e28:	4628      	mov	r0, r5
 8008e2a:	e705      	b.n	8008c38 <__udivmoddi4+0xa4>
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	e6e3      	b.n	8008bf8 <__udivmoddi4+0x64>
 8008e30:	4618      	mov	r0, r3
 8008e32:	e6f8      	b.n	8008c26 <__udivmoddi4+0x92>
 8008e34:	454b      	cmp	r3, r9
 8008e36:	d2a9      	bcs.n	8008d8c <__udivmoddi4+0x1f8>
 8008e38:	ebb9 0802 	subs.w	r8, r9, r2
 8008e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8008e40:	3801      	subs	r0, #1
 8008e42:	e7a3      	b.n	8008d8c <__udivmoddi4+0x1f8>
 8008e44:	4646      	mov	r6, r8
 8008e46:	e7ea      	b.n	8008e1e <__udivmoddi4+0x28a>
 8008e48:	4620      	mov	r0, r4
 8008e4a:	e794      	b.n	8008d76 <__udivmoddi4+0x1e2>
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	e7d1      	b.n	8008df4 <__udivmoddi4+0x260>
 8008e50:	46d0      	mov	r8, sl
 8008e52:	e77b      	b.n	8008d4c <__udivmoddi4+0x1b8>
 8008e54:	3b02      	subs	r3, #2
 8008e56:	4461      	add	r1, ip
 8008e58:	e732      	b.n	8008cc0 <__udivmoddi4+0x12c>
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	e709      	b.n	8008c72 <__udivmoddi4+0xde>
 8008e5e:	4464      	add	r4, ip
 8008e60:	3802      	subs	r0, #2
 8008e62:	e742      	b.n	8008cea <__udivmoddi4+0x156>

08008e64 <__aeabi_idiv0>:
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop

08008e68 <InitPosition>:
//
//
//
//}
void InitPosition()
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <InitPosition+0x34>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e72:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <InitPosition+0x34>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e78:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <InitPosition+0x34>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	70da      	strb	r2, [r3, #3]
	Pos.Dir = front;
 8008e7e:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <InitPosition+0x34>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	709a      	strb	r2, [r3, #2]
	Pos.Act = Wait;
 8008e84:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <InitPosition+0x34>)
 8008e86:	2204      	movs	r2, #4
 8008e88:	711a      	strb	r2, [r3, #4]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e8a:	4b04      	ldr	r3, [pc, #16]	; (8008e9c <InitPosition+0x34>)
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	715a      	strb	r2, [r3, #5]

}
 8008e90:	bf00      	nop
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20000000 	.word	0x20000000

08008ea0 <GetWallCtrlDirection>:
int GetWallCtrlDirection()
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0

	switch(Pos.Car)
 8008ea4:	4b9a      	ldr	r3, [pc, #616]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008ea6:	78db      	ldrb	r3, [r3, #3]
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	f200 812b 	bhi.w	8009104 <GetWallCtrlDirection+0x264>
 8008eae:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <GetWallCtrlDirection+0x14>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ec5 	.word	0x08008ec5
 8008eb8:	08008f55 	.word	0x08008f55
 8008ebc:	08008fe5 	.word	0x08008fe5
 8008ec0:	08009075 	.word	0x08009075
	{
	case north:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008ec4:	4b92      	ldr	r3, [pc, #584]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	4b91      	ldr	r3, [pc, #580]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4a90      	ldr	r2, [pc, #576]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008ed2:	0103      	lsls	r3, r0, #4
 8008ed4:	440b      	add	r3, r1
 8008ed6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008eda:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d111      	bne.n	8008f08 <GetWallCtrlDirection+0x68>
 8008ee4:	4b8a      	ldr	r3, [pc, #552]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	4b89      	ldr	r3, [pc, #548]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4a88      	ldr	r2, [pc, #544]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008ef2:	0103      	lsls	r3, r0, #4
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008efa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d101      	bne.n	8008f08 <GetWallCtrlDirection+0x68>
		{
			return D_WALL_PID;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e0fe      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008f08:	4b81      	ldr	r3, [pc, #516]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	4b80      	ldr	r3, [pc, #512]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	4619      	mov	r1, r3
 8008f14:	4a7f      	ldr	r2, [pc, #508]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008f16:	0103      	lsls	r3, r0, #4
 8008f18:	440b      	add	r3, r1
 8008f1a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f1e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d101      	bne.n	8008f2c <GetWallCtrlDirection+0x8c>
		{
			return R_WALL_PID;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e0ec      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008f2c:	4b78      	ldr	r3, [pc, #480]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	4618      	mov	r0, r3
 8008f32:	4b77      	ldr	r3, [pc, #476]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f34:	785b      	ldrb	r3, [r3, #1]
 8008f36:	4619      	mov	r1, r3
 8008f38:	4a76      	ldr	r2, [pc, #472]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008f3a:	0103      	lsls	r3, r0, #4
 8008f3c:	440b      	add	r3, r1
 8008f3e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f42:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <GetWallCtrlDirection+0xb0>
		{
			return L_WALL_PID;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e0da      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008f50:	2306      	movs	r3, #6
 8008f52:	e0d8      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		break;

	case east:
		if(Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//south)
 8008f54:	4b6e      	ldr	r3, [pc, #440]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	4b6d      	ldr	r3, [pc, #436]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f5c:	785b      	ldrb	r3, [r3, #1]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4a6c      	ldr	r2, [pc, #432]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008f62:	0103      	lsls	r3, r0, #4
 8008f64:	440b      	add	r3, r1
 8008f66:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f6a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d111      	bne.n	8008f98 <GetWallCtrlDirection+0xf8>
 8008f74:	4b66      	ldr	r3, [pc, #408]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4b65      	ldr	r3, [pc, #404]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4a64      	ldr	r2, [pc, #400]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008f82:	0103      	lsls	r3, r0, #4
 8008f84:	440b      	add	r3, r1
 8008f86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f8a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d101      	bne.n	8008f98 <GetWallCtrlDirection+0xf8>
		{
			return D_WALL_PID;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e0b6      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall)
 8008f98:	4b5d      	ldr	r3, [pc, #372]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	4b5c      	ldr	r3, [pc, #368]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008fa0:	785b      	ldrb	r3, [r3, #1]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4a5b      	ldr	r2, [pc, #364]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008fa6:	0103      	lsls	r3, r0, #4
 8008fa8:	440b      	add	r3, r1
 8008faa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008fae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <GetWallCtrlDirection+0x11c>
		{
			return L_WALL_PID;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e0a4      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].south == wall)
 8008fbc:	4b54      	ldr	r3, [pc, #336]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	4b53      	ldr	r3, [pc, #332]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008fc4:	785b      	ldrb	r3, [r3, #1]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4a52      	ldr	r2, [pc, #328]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008fca:	0103      	lsls	r3, r0, #4
 8008fcc:	440b      	add	r3, r1
 8008fce:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008fd2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <GetWallCtrlDirection+0x140>
		{
			return R_WALL_PID;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e092      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008fe0:	2306      	movs	r3, #6
 8008fe2:	e090      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		break;
	case south:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008fe4:	4b4a      	ldr	r3, [pc, #296]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	4b49      	ldr	r3, [pc, #292]	; (8009110 <GetWallCtrlDirection+0x270>)
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4a48      	ldr	r2, [pc, #288]	; (8009114 <GetWallCtrlDirection+0x274>)
 8008ff2:	0103      	lsls	r3, r0, #4
 8008ff4:	440b      	add	r3, r1
 8008ff6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ffa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	d111      	bne.n	8009028 <GetWallCtrlDirection+0x188>
 8009004:	4b42      	ldr	r3, [pc, #264]	; (8009110 <GetWallCtrlDirection+0x270>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	4b41      	ldr	r3, [pc, #260]	; (8009110 <GetWallCtrlDirection+0x270>)
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	4619      	mov	r1, r3
 8009010:	4a40      	ldr	r2, [pc, #256]	; (8009114 <GetWallCtrlDirection+0x274>)
 8009012:	0103      	lsls	r3, r0, #4
 8009014:	440b      	add	r3, r1
 8009016:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800901a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <GetWallCtrlDirection+0x188>
		{
			return D_WALL_PID;
 8009024:	2301      	movs	r3, #1
 8009026:	e06e      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8009028:	4b39      	ldr	r3, [pc, #228]	; (8009110 <GetWallCtrlDirection+0x270>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	4618      	mov	r0, r3
 800902e:	4b38      	ldr	r3, [pc, #224]	; (8009110 <GetWallCtrlDirection+0x270>)
 8009030:	785b      	ldrb	r3, [r3, #1]
 8009032:	4619      	mov	r1, r3
 8009034:	4a37      	ldr	r2, [pc, #220]	; (8009114 <GetWallCtrlDirection+0x274>)
 8009036:	0103      	lsls	r3, r0, #4
 8009038:	440b      	add	r3, r1
 800903a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800903e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	d101      	bne.n	800904c <GetWallCtrlDirection+0x1ac>
		{
			return L_WALL_PID;
 8009048:	2302      	movs	r3, #2
 800904a:	e05c      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 800904c:	4b30      	ldr	r3, [pc, #192]	; (8009110 <GetWallCtrlDirection+0x270>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	4618      	mov	r0, r3
 8009052:	4b2f      	ldr	r3, [pc, #188]	; (8009110 <GetWallCtrlDirection+0x270>)
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	4619      	mov	r1, r3
 8009058:	4a2e      	ldr	r2, [pc, #184]	; (8009114 <GetWallCtrlDirection+0x274>)
 800905a:	0103      	lsls	r3, r0, #4
 800905c:	440b      	add	r3, r1
 800905e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009062:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <GetWallCtrlDirection+0x1d0>
		{
			return R_WALL_PID;
 800906c:	2303      	movs	r3, #3
 800906e:	e04a      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009070:	2306      	movs	r3, #6
 8009072:	e048      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		break;
	case west:

		if ( Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8009074:	4b26      	ldr	r3, [pc, #152]	; (8009110 <GetWallCtrlDirection+0x270>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	4b25      	ldr	r3, [pc, #148]	; (8009110 <GetWallCtrlDirection+0x270>)
 800907c:	785b      	ldrb	r3, [r3, #1]
 800907e:	4619      	mov	r1, r3
 8009080:	4a24      	ldr	r2, [pc, #144]	; (8009114 <GetWallCtrlDirection+0x274>)
 8009082:	0103      	lsls	r3, r0, #4
 8009084:	440b      	add	r3, r1
 8009086:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800908a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b01      	cmp	r3, #1
 8009092:	d111      	bne.n	80090b8 <GetWallCtrlDirection+0x218>
 8009094:	4b1e      	ldr	r3, [pc, #120]	; (8009110 <GetWallCtrlDirection+0x270>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	4b1d      	ldr	r3, [pc, #116]	; (8009110 <GetWallCtrlDirection+0x270>)
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	4619      	mov	r1, r3
 80090a0:	4a1c      	ldr	r2, [pc, #112]	; (8009114 <GetWallCtrlDirection+0x274>)
 80090a2:	0103      	lsls	r3, r0, #4
 80090a4:	440b      	add	r3, r1
 80090a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80090aa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <GetWallCtrlDirection+0x218>
		{
			return D_WALL_PID;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e026      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall )
 80090b8:	4b15      	ldr	r3, [pc, #84]	; (8009110 <GetWallCtrlDirection+0x270>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	4618      	mov	r0, r3
 80090be:	4b14      	ldr	r3, [pc, #80]	; (8009110 <GetWallCtrlDirection+0x270>)
 80090c0:	785b      	ldrb	r3, [r3, #1]
 80090c2:	4619      	mov	r1, r3
 80090c4:	4a13      	ldr	r2, [pc, #76]	; (8009114 <GetWallCtrlDirection+0x274>)
 80090c6:	0103      	lsls	r3, r0, #4
 80090c8:	440b      	add	r3, r1
 80090ca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80090ce:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <GetWallCtrlDirection+0x23c>
		{
			return R_WALL_PID;
 80090d8:	2303      	movs	r3, #3
 80090da:	e014      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].south == wall )
 80090dc:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <GetWallCtrlDirection+0x270>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	4618      	mov	r0, r3
 80090e2:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <GetWallCtrlDirection+0x270>)
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	4619      	mov	r1, r3
 80090e8:	4a0a      	ldr	r2, [pc, #40]	; (8009114 <GetWallCtrlDirection+0x274>)
 80090ea:	0103      	lsls	r3, r0, #4
 80090ec:	440b      	add	r3, r1
 80090ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80090f2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <GetWallCtrlDirection+0x260>
		{
			return L_WALL_PID;
 80090fc:	2302      	movs	r3, #2
 80090fe:	e002      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009100:	2306      	movs	r3, #6
 8009102:	e000      	b.n	8009106 <GetWallCtrlDirection+0x266>
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8009104:	2306      	movs	r3, #6
		break;
	}

}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000000 	.word	0x20000000
 8009114:	200002ec 	.word	0x200002ec

08009118 <WallSafe>:
	Pos.Car = car;
	Pos.Dir = dir;
	Pos.WallSaf = safe_or_warn;
}
void WallSafe()
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_safe;
 800911c:	4b03      	ldr	r3, [pc, #12]	; (800912c <WallSafe+0x14>)
 800911e:	2200      	movs	r2, #0
 8009120:	715a      	strb	r2, [r3, #5]
}
 8009122:	bf00      	nop
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	20000000 	.word	0x20000000

08009130 <WallWarn>:
void WallWarn()
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_warn;
 8009134:	4b03      	ldr	r3, [pc, #12]	; (8009144 <WallWarn+0x14>)
 8009136:	2201      	movs	r2, #1
 8009138:	715a      	strb	r2, [r3, #5]
}
 800913a:	bf00      	nop
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	20000000 	.word	0x20000000

08009148 <ControlWall>:
void ControlWall()
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
	//直進中で
		//端の座標なら確実に型壁制御
	//斜め走行は別でアクションを定義

	//横壁制御
	int wall_ctrl_dir = GetWallCtrlDirection();	//次の座標のも返してみて、できれば連続で制御をする。
 800914e:	f7ff fea7 	bl	8008ea0 <GetWallCtrlDirection>
 8009152:	6078      	str	r0, [r7, #4]
	//割り込み中に呼ぶかアクション中に呼ぶか。アクション中の方が座標と壁の状態が確実。いや、判定が遅れると嫌だからやっぱり割り込み。移動量はflagで。

	//PIDChangeFlagStraight(N_WALL_PID);//直進flagはどれでも無い状態。制御なし。
	PIDChangeFlag(L_WALL_PID, 0);
 8009154:	2100      	movs	r1, #0
 8009156:	2002      	movs	r0, #2
 8009158:	f004 fac0 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800915c:	2100      	movs	r1, #0
 800915e:	2003      	movs	r0, #3
 8009160:	f004 fabc 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 8009164:	2100      	movs	r1, #0
 8009166:	2001      	movs	r0, #1
 8009168:	f004 fab8 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 800916c:	2100      	movs	r1, #0
 800916e:	2000      	movs	r0, #0
 8009170:	f004 fab4 	bl	800d6dc <PIDChangeFlag>
	//アクションごとに壁制御を記述した方がいいかも

	//アクション、方向、壁安全。

	//減速の時、壁の状態
	if(Pos.Dir == front)		//区画の区切りで前方に進むと決めたあと、動作としては加速か、straight。初期状態はwaitから加速へ
 8009174:	4b7c      	ldr	r3, [pc, #496]	; (8009368 <ControlWall+0x220>)
 8009176:	789b      	ldrb	r3, [r3, #2]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d13f      	bne.n	80091fc <ControlWall+0xb4>
	{
		switch(Pos.Act)
 800917c:	4b7a      	ldr	r3, [pc, #488]	; (8009368 <ControlWall+0x220>)
 800917e:	791b      	ldrb	r3, [r3, #4]
 8009180:	2b05      	cmp	r3, #5
 8009182:	f200 80ec 	bhi.w	800935e <ControlWall+0x216>
 8009186:	a201      	add	r2, pc, #4	; (adr r2, 800918c <ControlWall+0x44>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	080091a5 	.word	0x080091a5
 8009190:	0800935f 	.word	0x0800935f
 8009194:	0800935f 	.word	0x0800935f
 8009198:	0800935f 	.word	0x0800935f
 800919c:	0800935f 	.word	0x0800935f
 80091a0:	080091af 	.word	0x080091af
		{
		case accel:
			PIDChangeFlag( A_VELO_PID , 1);
 80091a4:	2101      	movs	r1, #1
 80091a6:	2000      	movs	r0, #0
 80091a8:	f004 fa98 	bl	800d6dc <PIDChangeFlag>
			//一つ先の区画がわかっていて加速したいときに
			break;
 80091ac:	e0d8      	b.n	8009360 <ControlWall+0x218>
		case decel:
			//減速はないけど一応今後のため。
			break;
		case straight:
			//3/3おっけーかも
			if( (wall_ctrl_dir != N_WALL_PID)  && (AddVelocity == 0) )	//左右どちらかに壁があるとき
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b06      	cmp	r3, #6
 80091b2:	d01d      	beq.n	80091f0 <ControlWall+0xa8>
 80091b4:	4b6d      	ldr	r3, [pc, #436]	; (800936c <ControlWall+0x224>)
 80091b6:	edd3 7a00 	vldr	s15, [r3]
 80091ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80091be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c2:	d115      	bne.n	80091f0 <ControlWall+0xa8>
			{
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091c4:	4b68      	ldr	r3, [pc, #416]	; (8009368 <ControlWall+0x220>)
 80091c6:	795b      	ldrb	r3, [r3, #5]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d108      	bne.n	80091de <ControlWall+0x96>
				{
					PIDChangeFlag(wall_ctrl_dir, 1);
 80091cc:	2101      	movs	r1, #1
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f004 fa84 	bl	800d6dc <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 80091d4:	2100      	movs	r1, #0
 80091d6:	2000      	movs	r0, #0
 80091d8:	f004 fa80 	bl	800d6dc <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091dc:	e00d      	b.n	80091fa <ControlWall+0xb2>
				}
				else
				{
					PIDChangeFlag(wall_ctrl_dir, 0);
 80091de:	2100      	movs	r1, #0
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f004 fa7b 	bl	800d6dc <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80091e6:	2101      	movs	r1, #1
 80091e8:	2000      	movs	r0, #0
 80091ea:	f004 fa77 	bl	800d6dc <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091ee:	e004      	b.n	80091fa <ControlWall+0xb2>
				}
			}
			else
			{
				PIDChangeFlag( A_VELO_PID , 1);
 80091f0:	2101      	movs	r1, #1
 80091f2:	2000      	movs	r0, #0
 80091f4:	f004 fa72 	bl	800d6dc <PIDChangeFlag>
			}
			break;
 80091f8:	e0b2      	b.n	8009360 <ControlWall+0x218>
 80091fa:	e0b1      	b.n	8009360 <ControlWall+0x218>
		//移動量がN割りのフラグ。直進は、Uターンの加減速を含まない、ただの一区画直進なので、移動量判定でできる。と思ったら分けてた?
		//Actはstraight


	}
	else if(Pos.Dir == left)	//左に行くとき
 80091fc:	4b5a      	ldr	r3, [pc, #360]	; (8009368 <ControlWall+0x220>)
 80091fe:	789b      	ldrb	r3, [r3, #2]
 8009200:	2b03      	cmp	r3, #3
 8009202:	d140      	bne.n	8009286 <ControlWall+0x13e>
	{
		if(Pos.Act == slalom)
 8009204:	4b58      	ldr	r3, [pc, #352]	; (8009368 <ControlWall+0x220>)
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d108      	bne.n	800921e <ControlWall+0xd6>
		{
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID, 0);
			TargetAngularV = 0;
 800920c:	4b58      	ldr	r3, [pc, #352]	; (8009370 <ControlWall+0x228>)
 800920e:	f04f 0200 	mov.w	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009214:	4b57      	ldr	r3, [pc, #348]	; (8009374 <ControlWall+0x22c>)
 8009216:	f04f 0200 	mov.w	r2, #0
 800921a:	601a      	str	r2, [r3, #0]





}
 800921c:	e0a0      	b.n	8009360 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 800921e:	4b52      	ldr	r3, [pc, #328]	; (8009368 <ControlWall+0x220>)
 8009220:	791b      	ldrb	r3, [r3, #4]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d11d      	bne.n	8009262 <ControlWall+0x11a>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b06      	cmp	r3, #6
 800922a:	d015      	beq.n	8009258 <ControlWall+0x110>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800922c:	4b4e      	ldr	r3, [pc, #312]	; (8009368 <ControlWall+0x220>)
 800922e:	795b      	ldrb	r3, [r3, #5]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d108      	bne.n	8009246 <ControlWall+0xfe>
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009234:	2101      	movs	r1, #1
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f004 fa50 	bl	800d6dc <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800923c:	2100      	movs	r1, #0
 800923e:	2000      	movs	r0, #0
 8009240:	f004 fa4c 	bl	800d6dc <PIDChangeFlag>
}
 8009244:	e08c      	b.n	8009360 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 8009246:	2100      	movs	r1, #0
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f004 fa47 	bl	800d6dc <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 800924e:	2101      	movs	r1, #1
 8009250:	2000      	movs	r0, #0
 8009252:	f004 fa43 	bl	800d6dc <PIDChangeFlag>
}
 8009256:	e083      	b.n	8009360 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 8009258:	2101      	movs	r1, #1
 800925a:	2000      	movs	r0, #0
 800925c:	f004 fa3e 	bl	800d6dc <PIDChangeFlag>
}
 8009260:	e07e      	b.n	8009360 <ControlWall+0x218>
		else if(Pos.Act == accel)
 8009262:	4b41      	ldr	r3, [pc, #260]	; (8009368 <ControlWall+0x220>)
 8009264:	791b      	ldrb	r3, [r3, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d104      	bne.n	8009274 <ControlWall+0x12c>
			PIDChangeFlag( A_VELO_PID , 1);
 800926a:	2101      	movs	r1, #1
 800926c:	2000      	movs	r0, #0
 800926e:	f004 fa35 	bl	800d6dc <PIDChangeFlag>
}
 8009272:	e075      	b.n	8009360 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 8009274:	4b3c      	ldr	r3, [pc, #240]	; (8009368 <ControlWall+0x220>)
 8009276:	791b      	ldrb	r3, [r3, #4]
 8009278:	2b03      	cmp	r3, #3
 800927a:	d171      	bne.n	8009360 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 800927c:	2100      	movs	r1, #0
 800927e:	2000      	movs	r0, #0
 8009280:	f004 fa2c 	bl	800d6dc <PIDChangeFlag>
}
 8009284:	e06c      	b.n	8009360 <ControlWall+0x218>
	else if(Pos.Dir == right)
 8009286:	4b38      	ldr	r3, [pc, #224]	; (8009368 <ControlWall+0x220>)
 8009288:	789b      	ldrb	r3, [r3, #2]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d140      	bne.n	8009310 <ControlWall+0x1c8>
		if(Pos.Act == slalom)
 800928e:	4b36      	ldr	r3, [pc, #216]	; (8009368 <ControlWall+0x220>)
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d108      	bne.n	80092a8 <ControlWall+0x160>
			TargetAngularV = 0;
 8009296:	4b36      	ldr	r3, [pc, #216]	; (8009370 <ControlWall+0x228>)
 8009298:	f04f 0200 	mov.w	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800929e:	4b35      	ldr	r3, [pc, #212]	; (8009374 <ControlWall+0x22c>)
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
}
 80092a6:	e05b      	b.n	8009360 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80092a8:	4b2f      	ldr	r3, [pc, #188]	; (8009368 <ControlWall+0x220>)
 80092aa:	791b      	ldrb	r3, [r3, #4]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d11d      	bne.n	80092ec <ControlWall+0x1a4>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b06      	cmp	r3, #6
 80092b4:	d015      	beq.n	80092e2 <ControlWall+0x19a>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80092b6:	4b2c      	ldr	r3, [pc, #176]	; (8009368 <ControlWall+0x220>)
 80092b8:	795b      	ldrb	r3, [r3, #5]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d108      	bne.n	80092d0 <ControlWall+0x188>
					PIDChangeFlag(wall_ctrl_dir, 1);
 80092be:	2101      	movs	r1, #1
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f004 fa0b 	bl	800d6dc <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 80092c6:	2100      	movs	r1, #0
 80092c8:	2000      	movs	r0, #0
 80092ca:	f004 fa07 	bl	800d6dc <PIDChangeFlag>
}
 80092ce:	e047      	b.n	8009360 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 80092d0:	2100      	movs	r1, #0
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f004 fa02 	bl	800d6dc <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80092d8:	2101      	movs	r1, #1
 80092da:	2000      	movs	r0, #0
 80092dc:	f004 f9fe 	bl	800d6dc <PIDChangeFlag>
}
 80092e0:	e03e      	b.n	8009360 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 80092e2:	2101      	movs	r1, #1
 80092e4:	2000      	movs	r0, #0
 80092e6:	f004 f9f9 	bl	800d6dc <PIDChangeFlag>
}
 80092ea:	e039      	b.n	8009360 <ControlWall+0x218>
		else if(Pos.Act == accel)
 80092ec:	4b1e      	ldr	r3, [pc, #120]	; (8009368 <ControlWall+0x220>)
 80092ee:	791b      	ldrb	r3, [r3, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d104      	bne.n	80092fe <ControlWall+0x1b6>
			PIDChangeFlag( A_VELO_PID , 1);
 80092f4:	2101      	movs	r1, #1
 80092f6:	2000      	movs	r0, #0
 80092f8:	f004 f9f0 	bl	800d6dc <PIDChangeFlag>
}
 80092fc:	e030      	b.n	8009360 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 80092fe:	4b1a      	ldr	r3, [pc, #104]	; (8009368 <ControlWall+0x220>)
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	2b03      	cmp	r3, #3
 8009304:	d12c      	bne.n	8009360 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 8009306:	2100      	movs	r1, #0
 8009308:	2000      	movs	r0, #0
 800930a:	f004 f9e7 	bl	800d6dc <PIDChangeFlag>
}
 800930e:	e027      	b.n	8009360 <ControlWall+0x218>
	else if(Pos.Dir == back)
 8009310:	4b15      	ldr	r3, [pc, #84]	; (8009368 <ControlWall+0x220>)
 8009312:	789b      	ldrb	r3, [r3, #2]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d123      	bne.n	8009360 <ControlWall+0x218>
		if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 8009318:	4b13      	ldr	r3, [pc, #76]	; (8009368 <ControlWall+0x220>)
 800931a:	791b      	ldrb	r3, [r3, #4]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d115      	bne.n	800934c <ControlWall+0x204>
			if(Pos.WallSaf == wall_safe)	//フラグ作る。前に壁が無いパターンの減速は、後半の壁の状態の影響を受けることがある。35*0.5mmが目安か。
 8009320:	4b11      	ldr	r3, [pc, #68]	; (8009368 <ControlWall+0x220>)
 8009322:	795b      	ldrb	r3, [r3, #5]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d108      	bne.n	800933a <ControlWall+0x1f2>
				PIDChangeFlag(wall_ctrl_dir , 1);
 8009328:	2101      	movs	r1, #1
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f004 f9d6 	bl	800d6dc <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID, 0);
 8009330:	2100      	movs	r1, #0
 8009332:	2000      	movs	r0, #0
 8009334:	f004 f9d2 	bl	800d6dc <PIDChangeFlag>
}
 8009338:	e012      	b.n	8009360 <ControlWall+0x218>
				PIDChangeFlag(wall_ctrl_dir, 0);
 800933a:	2100      	movs	r1, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f004 f9cd 	bl	800d6dc <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 8009342:	2101      	movs	r1, #1
 8009344:	2000      	movs	r0, #0
 8009346:	f004 f9c9 	bl	800d6dc <PIDChangeFlag>
}
 800934a:	e009      	b.n	8009360 <ControlWall+0x218>
		else if(Pos.Act == accel)
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <ControlWall+0x220>)
 800934e:	791b      	ldrb	r3, [r3, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d105      	bne.n	8009360 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 1);
 8009354:	2101      	movs	r1, #1
 8009356:	2000      	movs	r0, #0
 8009358:	f004 f9c0 	bl	800d6dc <PIDChangeFlag>
}
 800935c:	e000      	b.n	8009360 <ControlWall+0x218>
			break;
 800935e:	bf00      	nop
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20000000 	.word	0x20000000
 800936c:	200002d0 	.word	0x200002d0
 8009370:	200002d8 	.word	0x200002d8
 8009374:	200002dc 	.word	0x200002dc

08009378 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
	Pos.Act = Wait;
 800937c:	4b17      	ldr	r3, [pc, #92]	; (80093dc <WaitStopAndReset+0x64>)
 800937e:	2204      	movs	r2, #4
 8009380:	711a      	strb	r2, [r3, #4]
	ControlWall();//ベイブレード対策
 8009382:	f7ff fee1 	bl	8009148 <ControlWall>
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8009386:	4b16      	ldr	r3, [pc, #88]	; (80093e0 <WaitStopAndReset+0x68>)
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	609a      	str	r2, [r3, #8]
		Acceleration = 0;
 800938e:	4b15      	ldr	r3, [pc, #84]	; (80093e4 <WaitStopAndReset+0x6c>)
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 8009396:	4b14      	ldr	r3, [pc, #80]	; (80093e8 <WaitStopAndReset+0x70>)
 8009398:	f04f 0200 	mov.w	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <WaitStopAndReset+0x74>)
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 80093a6:	4b12      	ldr	r3, [pc, #72]	; (80093f0 <WaitStopAndReset+0x78>)
 80093a8:	edd3 7a00 	vldr	s15, [r3]
 80093ac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80093f4 <WaitStopAndReset+0x7c>
 80093b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b8:	dd02      	ble.n	80093c0 <WaitStopAndReset+0x48>
			printf("回転停止中\r\n");
 80093ba:	480f      	ldr	r0, [pc, #60]	; (80093f8 <WaitStopAndReset+0x80>)
 80093bc:	f00c fc34 	bl	8015c28 <puts>

	}while(CurrentVelocity[BODY] != 0);
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <WaitStopAndReset+0x78>)
 80093c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80093c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80093ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ce:	d1da      	bne.n	8009386 <WaitStopAndReset+0xe>
	HAL_Delay(200);
 80093d0:	20c8      	movs	r0, #200	; 0xc8
 80093d2:	f006 fb75 	bl	800fac0 <HAL_Delay>
}
 80093d6:	bf00      	nop
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000000 	.word	0x20000000
 80093e0:	20000294 	.word	0x20000294
 80093e4:	200002d4 	.word	0x200002d4
 80093e8:	200002d8 	.word	0x200002d8
 80093ec:	200002dc 	.word	0x200002dc
 80093f0:	20000288 	.word	0x20000288
 80093f4:	43fa0000 	.word	0x43fa0000
 80093f8:	0801a4b0 	.word	0x0801a4b0
 80093fc:	00000000 	.word	0x00000000

08009400 <RotateAccel>:
void RotateAccel(float deg, float rotate_ang_v)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	ed87 0a01 	vstr	s0, [r7, #4]
 800940a:	edc7 0a00 	vstr	s1, [r7]
	TargetAngularV = 0;
 800940e:	4b4a      	ldr	r3, [pc, #296]	; (8009538 <RotateAccel+0x138>)
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	601a      	str	r2, [r3, #0]
	float additional_ang_v=0;
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
	additional_ang_v = rotate_ang_v;//rotate_ang_v - AngularV;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	617b      	str	r3, [r7, #20]
//
//	int keep_pulse[2] = {
//			TotalPulse[LEFT],
//			TotalPulse[RIGHT]
//	};
	float move_angle = deg * M_PI/ 180;
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7fe ffc9 	bl	80083b8 <__aeabi_f2d>
 8009426:	a342      	add	r3, pc, #264	; (adr r3, 8009530 <RotateAccel+0x130>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f7ff f81c 	bl	8008468 <__aeabi_dmul>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4610      	mov	r0, r2
 8009436:	4619      	mov	r1, r3
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	4b3f      	ldr	r3, [pc, #252]	; (800953c <RotateAccel+0x13c>)
 800943e:	f7ff f93d 	bl	80086bc <__aeabi_ddiv>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4610      	mov	r0, r2
 8009448:	4619      	mov	r1, r3
 800944a:	f7ff fb05 	bl	8008a58 <__aeabi_d2f>
 800944e:	4603      	mov	r3, r0
 8009450:	613b      	str	r3, [r7, #16]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	float debug[2] = {0};
 8009452:	f107 0308 	add.w	r3, r7, #8
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	605a      	str	r2, [r3, #4]
	debug[0] = Angle;
 800945c:	4b38      	ldr	r3, [pc, #224]	; (8009540 <RotateAccel+0x140>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	60bb      	str	r3, [r7, #8]
	if( rotate_ang_v > 0)	//右回転
 8009462:	edd7 7a00 	vldr	s15, [r7]
 8009466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800946a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946e:	dd29      	ble.n	80094c4 <RotateAccel+0xc4>
	{
		move_angle = move_angle + Angle;//Angleが負にずれ過ぎて、
 8009470:	4b33      	ldr	r3, [pc, #204]	; (8009540 <RotateAccel+0x140>)
 8009472:	edd3 7a00 	vldr	s15, [r3]
 8009476:	ed97 7a04 	vldr	s14, [r7, #16]
 800947a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800947e:	edc7 7a04 	vstr	s15, [r7, #16]
		debug[1] = move_angle;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	60fb      	str	r3, [r7, #12]
		//ここのwhileが抜けないことがある
		while( (move_angle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009486:	e012      	b.n	80094ae <RotateAccel+0xae>
		{
			AngularAcceleration = 64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8009488:	edd7 7a05 	vldr	s15, [r7, #20]
 800948c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8009544 <RotateAccel+0x144>
 8009490:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009494:	edd7 7a05 	vldr	s15, [r7, #20]
 8009498:	ee67 6a27 	vmul.f32	s13, s14, s15
 800949c:	edd7 7a01 	vldr	s15, [r7, #4]
 80094a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80094a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a8:	4b27      	ldr	r3, [pc, #156]	; (8009548 <RotateAccel+0x148>)
 80094aa:	edc3 7a00 	vstr	s15, [r3]
		while( (move_angle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80094ae:	4b24      	ldr	r3, [pc, #144]	; (8009540 <RotateAccel+0x140>)
 80094b0:	edd3 7a00 	vldr	s15, [r3]
 80094b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80094b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c0:	dce2      	bgt.n	8009488 <RotateAccel+0x88>
 80094c2:	e02d      	b.n	8009520 <RotateAccel+0x120>
			}
#endif
		}

	}
	else if( rotate_ang_v < 0)
 80094c4:	edd7 7a00 	vldr	s15, [r7]
 80094c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80094cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d0:	d526      	bpl.n	8009520 <RotateAccel+0x120>
	{
		move_angle = -move_angle + Angle;
 80094d2:	4b1b      	ldr	r3, [pc, #108]	; (8009540 <RotateAccel+0x140>)
 80094d4:	ed93 7a00 	vldr	s14, [r3]
 80094d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80094dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094e0:	edc7 7a04 	vstr	s15, [r7, #16]
		//printf("加速 負\r\n");
		while( (move_angle < Angle)/* && ( ( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) ) ) */)
 80094e4:	e012      	b.n	800950c <RotateAccel+0x10c>
		{

			AngularAcceleration = -1*64*T1*additional_ang_v*additional_ang_v / (2*deg);
 80094e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80094ea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800954c <RotateAccel+0x14c>
 80094ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80094f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80094f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80094fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80094fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009506:	4b10      	ldr	r3, [pc, #64]	; (8009548 <RotateAccel+0x148>)
 8009508:	edc3 7a00 	vstr	s15, [r3]
		while( (move_angle < Angle)/* && ( ( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) ) ) */)
 800950c:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <RotateAccel+0x140>)
 800950e:	edd3 7a00 	vldr	s15, [r3]
 8009512:	ed97 7a04 	vldr	s14, [r7, #16]
 8009516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800951a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951e:	d4e2      	bmi.n	80094e6 <RotateAccel+0xe6>

		}

	}
	AngularAcceleration = 0;
 8009520:	4b09      	ldr	r3, [pc, #36]	; (8009548 <RotateAccel+0x148>)
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
}
 8009528:	bf00      	nop
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	54442d18 	.word	0x54442d18
 8009534:	400921fb 	.word	0x400921fb
 8009538:	200002d8 	.word	0x200002d8
 800953c:	40668000 	.word	0x40668000
 8009540:	200002c8 	.word	0x200002c8
 8009544:	3d83126f 	.word	0x3d83126f
 8009548:	200002dc 	.word	0x200002dc
 800954c:	bd83126f 	.word	0xbd83126f

08009550 <RotateConst>:
void RotateConst(float deg, float rotate_ang_v)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	ed87 0a01 	vstr	s0, [r7, #4]
 800955a:	edc7 0a00 	vstr	s1, [r7]
//
//	int keep_pulse[2] = {
//			TotalPulse[LEFT],
//			TotalPulse[RIGHT]
//	};
	float move_angle = deg * M_PI/ 180;
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7fe ff2a 	bl	80083b8 <__aeabi_f2d>
 8009564:	a33e      	add	r3, pc, #248	; (adr r3, 8009660 <RotateConst+0x110>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7fe ff7d 	bl	8008468 <__aeabi_dmul>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4610      	mov	r0, r2
 8009574:	4619      	mov	r1, r3
 8009576:	f04f 0200 	mov.w	r2, #0
 800957a:	4b33      	ldr	r3, [pc, #204]	; (8009648 <RotateConst+0xf8>)
 800957c:	f7ff f89e 	bl	80086bc <__aeabi_ddiv>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4610      	mov	r0, r2
 8009586:	4619      	mov	r1, r3
 8009588:	f7ff fa66 	bl	8008a58 <__aeabi_d2f>
 800958c:	4603      	mov	r3, r0
 800958e:	60fb      	str	r3, [r7, #12]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if (rotate_ang_v > 0)
 8009590:	edd7 7a00 	vldr	s15, [r7]
 8009594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959c:	dd2b      	ble.n	80095f6 <RotateConst+0xa6>
	{
		move_angle += Angle;
 800959e:	4b2b      	ldr	r3, [pc, #172]	; (800964c <RotateConst+0xfc>)
 80095a0:	edd3 7a00 	vldr	s15, [r3]
 80095a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80095a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095ac:	edc7 7a03 	vstr	s15, [r7, #12]
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) )) )
 80095b0:	e016      	b.n	80095e0 <RotateConst+0x90>
		{
			//TargetAngularV = rotate_ang_v;
			AngularAcceleration = 0;
 80095b2:	4b27      	ldr	r3, [pc, #156]	; (8009650 <RotateConst+0x100>)
 80095b4:	f04f 0200 	mov.w	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
			if(CurrentVelocity[LEFT] > 500)
 80095ba:	4b26      	ldr	r3, [pc, #152]	; (8009654 <RotateConst+0x104>)
 80095bc:	edd3 7a00 	vldr	s15, [r3]
 80095c0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009658 <RotateConst+0x108>
 80095c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095cc:	dc00      	bgt.n	80095d0 <RotateConst+0x80>
 80095ce:	e007      	b.n	80095e0 <RotateConst+0x90>
				printf("回転定速中: %f\r\n", move_angle);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7fe fef1 	bl	80083b8 <__aeabi_f2d>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4820      	ldr	r0, [pc, #128]	; (800965c <RotateConst+0x10c>)
 80095dc:	f00c fa9e 	bl	8015b1c <iprintf>
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) )) )
 80095e0:	4b1a      	ldr	r3, [pc, #104]	; (800964c <RotateConst+0xfc>)
 80095e2:	edd3 7a00 	vldr	s15, [r3]
 80095e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80095ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f2:	dcde      	bgt.n	80095b2 <RotateConst+0x62>
 80095f4:	e01e      	b.n	8009634 <RotateConst+0xe4>

		}

	}
	else if (rotate_ang_v < 0)
 80095f6:	edd7 7a00 	vldr	s15, [r7]
 80095fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009602:	d517      	bpl.n	8009634 <RotateConst+0xe4>
	{
		move_angle = -move_angle + Angle;
 8009604:	4b11      	ldr	r3, [pc, #68]	; (800964c <RotateConst+0xfc>)
 8009606:	ed93 7a00 	vldr	s14, [r3]
 800960a:	edd7 7a03 	vldr	s15, [r7, #12]
 800960e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009612:	edc7 7a03 	vstr	s15, [r7, #12]
		//printf("定速 負\r\n");
		while( (move_angle < Angle))// &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) )) )
 8009616:	e003      	b.n	8009620 <RotateConst+0xd0>
		{
			//TargetAngularV = rotate_ang_v;

			AngularAcceleration = 0;
 8009618:	4b0d      	ldr	r3, [pc, #52]	; (8009650 <RotateConst+0x100>)
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
		while( (move_angle < Angle))// &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) )) )
 8009620:	4b0a      	ldr	r3, [pc, #40]	; (800964c <RotateConst+0xfc>)
 8009622:	edd3 7a00 	vldr	s15, [r3]
 8009626:	ed97 7a03 	vldr	s14, [r7, #12]
 800962a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800962e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009632:	d4f1      	bmi.n	8009618 <RotateConst+0xc8>
		}

	}
	AngularAcceleration = 0;
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <RotateConst+0x100>)
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	f3af 8000 	nop.w
 8009648:	40668000 	.word	0x40668000
 800964c:	200002c8 	.word	0x200002c8
 8009650:	200002dc 	.word	0x200002dc
 8009654:	20000288 	.word	0x20000288
 8009658:	43fa0000 	.word	0x43fa0000
 800965c:	0801a4c4 	.word	0x0801a4c4
 8009660:	54442d18 	.word	0x54442d18
 8009664:	400921fb 	.word	0x400921fb

08009668 <RotateDecel>:
void RotateDecel(float deg, float rotate_ang_v)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009672:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 8009676:	f04f 0300 	mov.w	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]
	additional_ang_v = rotate_ang_v;// - AngularV;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	60fb      	str	r3, [r7, #12]
//	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
//	int keep_pulse[2] = {
//			TotalPulse[LEFT],
//			TotalPulse[RIGHT]
//	};
	float move_angle = deg * M_PI / 180;
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fe fe99 	bl	80083b8 <__aeabi_f2d>
 8009686:	a361      	add	r3, pc, #388	; (adr r3, 800980c <RotateDecel+0x1a4>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f7fe feec 	bl	8008468 <__aeabi_dmul>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4610      	mov	r0, r2
 8009696:	4619      	mov	r1, r3
 8009698:	f04f 0200 	mov.w	r2, #0
 800969c:	4b50      	ldr	r3, [pc, #320]	; (80097e0 <RotateDecel+0x178>)
 800969e:	f7ff f80d 	bl	80086bc <__aeabi_ddiv>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7ff f9d5 	bl	8008a58 <__aeabi_d2f>
 80096ae:	4603      	mov	r3, r0
 80096b0:	60bb      	str	r3, [r7, #8]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 80096b2:	edd7 7a00 	vldr	s15, [r7]
 80096b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096be:	dd45      	ble.n	800974c <RotateDecel+0xe4>
	{
		move_angle += Angle;
 80096c0:	4b48      	ldr	r3, [pc, #288]	; (80097e4 <RotateDecel+0x17c>)
 80096c2:	edd3 7a00 	vldr	s15, [r3]
 80096c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80096ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096ce:	edc7 7a02 	vstr	s15, [r7, #8]

		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) )) )
 80096d2:	e030      	b.n	8009736 <RotateDecel+0xce>
		{
			AngularAcceleration = -1*64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 80096d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80096d8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80097e8 <RotateDecel+0x180>
 80096dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80096e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80096e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80096e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80096ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80096f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096f4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80097ec <RotateDecel+0x184>
 80096f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096fc:	4b3c      	ldr	r3, [pc, #240]	; (80097f0 <RotateDecel+0x188>)
 80096fe:	edc3 7a00 	vstr	s15, [r3]
			if(CurrentVelocity[LEFT] > 500)
 8009702:	4b3c      	ldr	r3, [pc, #240]	; (80097f4 <RotateDecel+0x18c>)
 8009704:	edd3 7a00 	vldr	s15, [r3]
 8009708:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80097f8 <RotateDecel+0x190>
 800970c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009714:	dd07      	ble.n	8009726 <RotateDecel+0xbe>
				printf("回転減速中: %f\r\n", move_angle);
 8009716:	68b8      	ldr	r0, [r7, #8]
 8009718:	f7fe fe4e 	bl	80083b8 <__aeabi_f2d>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4836      	ldr	r0, [pc, #216]	; (80097fc <RotateDecel+0x194>)
 8009722:	f00c f9fb 	bl	8015b1c <iprintf>

			if( AngularV <= 0)
 8009726:	4b36      	ldr	r3, [pc, #216]	; (8009800 <RotateDecel+0x198>)
 8009728:	edd3 7a00 	vldr	s15, [r3]
 800972c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009734:	d945      	bls.n	80097c2 <RotateDecel+0x15a>
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) )) )
 8009736:	4b2b      	ldr	r3, [pc, #172]	; (80097e4 <RotateDecel+0x17c>)
 8009738:	edd3 7a00 	vldr	s15, [r3]
 800973c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009748:	dcc4      	bgt.n	80096d4 <RotateDecel+0x6c>
 800974a:	e03d      	b.n	80097c8 <RotateDecel+0x160>
				break;
		}

	}
	else if( rotate_ang_v < 0)
 800974c:	edd7 7a00 	vldr	s15, [r7]
 8009750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009758:	d536      	bpl.n	80097c8 <RotateDecel+0x160>
	{
		move_angle = -move_angle + Angle;
 800975a:	4b22      	ldr	r3, [pc, #136]	; (80097e4 <RotateDecel+0x17c>)
 800975c:	ed93 7a00 	vldr	s14, [r3]
 8009760:	edd7 7a02 	vldr	s15, [r7, #8]
 8009764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009768:	edc7 7a02 	vstr	s15, [r7, #8]
		//printf("減速 負\r\n");
		while( (move_angle < Angle) )//&&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) )) )
 800976c:	e01e      	b.n	80097ac <RotateDecel+0x144>
		{
			AngularAcceleration = 64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 800976e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009772:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80097e8 <RotateDecel+0x180>
 8009776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800977a:	edd7 7a03 	vldr	s15, [r7, #12]
 800977e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009782:	edd7 7a01 	vldr	s15, [r7, #4]
 8009786:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800978a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009804 <RotateDecel+0x19c>
 8009792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009796:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <RotateDecel+0x188>)
 8009798:	edc3 7a00 	vstr	s15, [r3]

			if( AngularV >= 0)
 800979c:	4b18      	ldr	r3, [pc, #96]	; (8009800 <RotateDecel+0x198>)
 800979e:	edd3 7a00 	vldr	s15, [r3]
 80097a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097aa:	da0c      	bge.n	80097c6 <RotateDecel+0x15e>
		while( (move_angle < Angle) )//&&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) )) )
 80097ac:	4b0d      	ldr	r3, [pc, #52]	; (80097e4 <RotateDecel+0x17c>)
 80097ae:	edd3 7a00 	vldr	s15, [r3]
 80097b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80097b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097be:	d4d6      	bmi.n	800976e <RotateDecel+0x106>
 80097c0:	e002      	b.n	80097c8 <RotateDecel+0x160>
				break;
 80097c2:	bf00      	nop
 80097c4:	e000      	b.n	80097c8 <RotateDecel+0x160>
				break;
 80097c6:	bf00      	nop
		}

	}
	AngularAcceleration = 0;
 80097c8:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <RotateDecel+0x188>)
 80097ca:	f04f 0200 	mov.w	r2, #0
 80097ce:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 80097d0:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <RotateDecel+0x1a0>)
 80097d2:	f04f 0200 	mov.w	r2, #0
 80097d6:	601a      	str	r2, [r3, #0]
}
 80097d8:	bf00      	nop
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	40668000 	.word	0x40668000
 80097e4:	200002c8 	.word	0x200002c8
 80097e8:	3a83126f 	.word	0x3a83126f
 80097ec:	c2800000 	.word	0xc2800000
 80097f0:	200002dc 	.word	0x200002dc
 80097f4:	20000288 	.word	0x20000288
 80097f8:	43fa0000 	.word	0x43fa0000
 80097fc:	0801a4dc 	.word	0x0801a4dc
 8009800:	200002c4 	.word	0x200002c4
 8009804:	42800000 	.word	0x42800000
 8009808:	200002d8 	.word	0x200002d8
 800980c:	54442d18 	.word	0x54442d18
 8009810:	400921fb 	.word	0x400921fb
 8009814:	00000000 	.word	0x00000000

08009818 <Rotate>:
void Rotate(float deg, float ang_accel)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009822:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = rotate;
 8009826:	4b4a      	ldr	r3, [pc, #296]	; (8009950 <Rotate+0x138>)
 8009828:	2203      	movs	r2, #3
 800982a:	711a      	strb	r2, [r3, #4]
//	}
//	InitPulse((int*)(&(TIM3->CNT)), INITIAL_PULSE);
//	InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//	ResetCounter();

	WallWarn();
 800982c:	f7ff fc80 	bl	8009130 <WallWarn>
	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
 8009830:	f7ff fc8a 	bl	8009148 <ControlWall>
	RotateAccel(deg*30/90, ang_accel);//15
 8009834:	edd7 7a01 	vldr	s15, [r7, #4]
 8009838:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800983c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009840:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009954 <Rotate+0x13c>
 8009844:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009848:	edd7 0a00 	vldr	s1, [r7]
 800984c:	eeb0 0a47 	vmov.f32	s0, s14
 8009850:	f7ff fdd6 	bl	8009400 <RotateAccel>
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);
	RotateConst(deg*30/90, ang_accel);//25
 8009854:	edd7 7a01 	vldr	s15, [r7, #4]
 8009858:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800985c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009860:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009954 <Rotate+0x13c>
 8009864:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009868:	edd7 0a00 	vldr	s1, [r7]
 800986c:	eeb0 0a47 	vmov.f32	s0, s14
 8009870:	f7ff fe6e 	bl	8009550 <RotateConst>
	RotateDecel(deg*30/90, ang_accel);//50
 8009874:	edd7 7a01 	vldr	s15, [r7, #4]
 8009878:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800987c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009880:	eddf 6a34 	vldr	s13, [pc, #208]	; 8009954 <Rotate+0x13c>
 8009884:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009888:	edd7 0a00 	vldr	s1, [r7]
 800988c:	eeb0 0a47 	vmov.f32	s0, s14
 8009890:	f7ff feea 	bl	8009668 <RotateDecel>
//			TargetAngularV = ang_accel;
//			printf("deg:負, Angle, AngularV : %f, %f\r\n",Angle, AngularV );
//		}
//
//	}
	WaitStopAndReset();
 8009894:	f7ff fd70 	bl	8009378 <WaitStopAndReset>
	ControlWall();
 8009898:	f7ff fc56 	bl	8009148 <ControlWall>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 800989c:	edd7 7a01 	vldr	s15, [r7, #4]
 80098a0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8009958 <Rotate+0x140>
 80098a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80098a8:	ee16 0a90 	vmov	r0, s13
 80098ac:	f7fe fd84 	bl	80083b8 <__aeabi_f2d>
 80098b0:	a325      	add	r3, pc, #148	; (adr r3, 8009948 <Rotate+0x130>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f7fe fdd7 	bl	8008468 <__aeabi_dmul>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4610      	mov	r0, r2
 80098c0:	4619      	mov	r1, r3
 80098c2:	f7ff f881 	bl	80089c8 <__aeabi_d2iz>
 80098c6:	4603      	mov	r3, r0
 80098c8:	60fb      	str	r3, [r7, #12]
	if(ang_accel < 0)
 80098ca:	edd7 7a00 	vldr	s15, [r7]
 80098ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d6:	d513      	bpl.n	8009900 <Rotate+0xe8>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 80098d8:	4b20      	ldr	r3, [pc, #128]	; (800995c <Rotate+0x144>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	0fd9      	lsrs	r1, r3, #31
 80098e0:	440b      	add	r3, r1
 80098e2:	105b      	asrs	r3, r3, #1
 80098e4:	425b      	negs	r3, r3
 80098e6:	4413      	add	r3, r2
 80098e8:	4a1c      	ldr	r2, [pc, #112]	; (800995c <Rotate+0x144>)
 80098ea:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 80098ec:	4b1b      	ldr	r3, [pc, #108]	; (800995c <Rotate+0x144>)
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	0fd9      	lsrs	r1, r3, #31
 80098f4:	440b      	add	r3, r1
 80098f6:	105b      	asrs	r3, r3, #1
 80098f8:	4413      	add	r3, r2
 80098fa:	4a18      	ldr	r2, [pc, #96]	; (800995c <Rotate+0x144>)
 80098fc:	6053      	str	r3, [r2, #4]
 80098fe:	e019      	b.n	8009934 <Rotate+0x11c>
	}
	else 	if(ang_accel > 0)
 8009900:	edd7 7a00 	vldr	s15, [r7]
 8009904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990c:	dd12      	ble.n	8009934 <Rotate+0x11c>
	{
		KeepPulse[LEFT] += target_pulse/2;
 800990e:	4b13      	ldr	r3, [pc, #76]	; (800995c <Rotate+0x144>)
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	0fd9      	lsrs	r1, r3, #31
 8009916:	440b      	add	r3, r1
 8009918:	105b      	asrs	r3, r3, #1
 800991a:	4413      	add	r3, r2
 800991c:	4a0f      	ldr	r2, [pc, #60]	; (800995c <Rotate+0x144>)
 800991e:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 8009920:	4b0e      	ldr	r3, [pc, #56]	; (800995c <Rotate+0x144>)
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	0fd9      	lsrs	r1, r3, #31
 8009928:	440b      	add	r3, r1
 800992a:	105b      	asrs	r3, r3, #1
 800992c:	425b      	negs	r3, r3
 800992e:	4413      	add	r3, r2
 8009930:	4a0a      	ldr	r2, [pc, #40]	; (800995c <Rotate+0x144>)
 8009932:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 8009934:	4b09      	ldr	r3, [pc, #36]	; (800995c <Rotate+0x144>)
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	4a08      	ldr	r2, [pc, #32]	; (800995c <Rotate+0x144>)
 800993a:	6093      	str	r3, [r2, #8]

	//printf("回転終了\r\n");
}
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	f3af 8000 	nop.w
 8009948:	90c63a46 	.word	0x90c63a46
 800994c:	40fd6e3f 	.word	0x40fd6e3f
 8009950:	20000000 	.word	0x20000000
 8009954:	42b40000 	.word	0x42b40000
 8009958:	43b40000 	.word	0x43b40000
 800995c:	200002a0 	.word	0x200002a0

08009960 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009960:	b5b0      	push	{r4, r5, r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009966:	4b90      	ldr	r3, [pc, #576]	; (8009ba8 <SlalomRight+0x248>)
 8009968:	2202      	movs	r2, #2
 800996a:	711a      	strb	r2, [r3, #4]
	ControlWall();
 800996c:	f7ff fbec 	bl	8009148 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009970:	4b8e      	ldr	r3, [pc, #568]	; (8009bac <SlalomRight+0x24c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009976:	4b8e      	ldr	r3, [pc, #568]	; (8009bb0 <SlalomRight+0x250>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 800997c:	4b8c      	ldr	r3, [pc, #560]	; (8009bb0 <SlalomRight+0x250>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	61fb      	str	r3, [r7, #28]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009982:	4b8b      	ldr	r3, [pc, #556]	; (8009bb0 <SlalomRight+0x250>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	61bb      	str	r3, [r7, #24]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009988:	4b89      	ldr	r3, [pc, #548]	; (8009bb0 <SlalomRight+0x250>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fd13 	bl	80083b8 <__aeabi_f2d>
 8009992:	a381      	add	r3, pc, #516	; (adr r3, 8009b98 <SlalomRight+0x238>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7fe fd66 	bl	8008468 <__aeabi_dmul>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4610      	mov	r0, r2
 80099a2:	4619      	mov	r1, r3
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	4b82      	ldr	r3, [pc, #520]	; (8009bb4 <SlalomRight+0x254>)
 80099aa:	f7fe fe87 	bl	80086bc <__aeabi_ddiv>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4610      	mov	r0, r2
 80099b4:	4619      	mov	r1, r3
 80099b6:	f7ff f84f 	bl	8008a58 <__aeabi_d2f>
 80099ba:	4603      	mov	r3, r0
 80099bc:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80099be:	4b7c      	ldr	r3, [pc, #496]	; (8009bb0 <SlalomRight+0x250>)
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fcf8 	bl	80083b8 <__aeabi_f2d>
 80099c8:	a373      	add	r3, pc, #460	; (adr r3, 8009b98 <SlalomRight+0x238>)
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	f7fe fd4b 	bl	8008468 <__aeabi_dmul>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4610      	mov	r0, r2
 80099d8:	4619      	mov	r1, r3
 80099da:	f04f 0200 	mov.w	r2, #0
 80099de:	4b75      	ldr	r3, [pc, #468]	; (8009bb4 <SlalomRight+0x254>)
 80099e0:	f7fe fe6c 	bl	80086bc <__aeabi_ddiv>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4610      	mov	r0, r2
 80099ea:	4619      	mov	r1, r3
 80099ec:	f7ff f834 	bl	8008a58 <__aeabi_d2f>
 80099f0:	4603      	mov	r3, r0
 80099f2:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80099f4:	4b6e      	ldr	r3, [pc, #440]	; (8009bb0 <SlalomRight+0x250>)
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fcdd 	bl	80083b8 <__aeabi_f2d>
 80099fe:	a366      	add	r3, pc, #408	; (adr r3, 8009b98 <SlalomRight+0x238>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7fe fd30 	bl	8008468 <__aeabi_dmul>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	f04f 0200 	mov.w	r2, #0
 8009a14:	4b67      	ldr	r3, [pc, #412]	; (8009bb4 <SlalomRight+0x254>)
 8009a16:	f7fe fe51 	bl	80086bc <__aeabi_ddiv>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4610      	mov	r0, r2
 8009a20:	4619      	mov	r1, r3
 8009a22:	f7ff f819 	bl	8008a58 <__aeabi_d2f>
 8009a26:	4603      	mov	r3, r0
 8009a28:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 8009a2a:	4b63      	ldr	r3, [pc, #396]	; (8009bb8 <SlalomRight+0x258>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009a30:	4b62      	ldr	r3, [pc, #392]	; (8009bbc <SlalomRight+0x25c>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4b61      	ldr	r3, [pc, #388]	; (8009bbc <SlalomRight+0x25c>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4413      	add	r3, r2
 8009a3a:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009a3c:	e00a      	b.n	8009a54 <SlalomRight+0xf4>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009a3e:	4b60      	ldr	r3, [pc, #384]	; (8009bc0 <SlalomRight+0x260>)
 8009a40:	f04f 0200 	mov.w	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009a46:	4b5f      	ldr	r3, [pc, #380]	; (8009bc4 <SlalomRight+0x264>)
 8009a48:	f04f 0200 	mov.w	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009a4e:	4a5e      	ldr	r2, [pc, #376]	; (8009bc8 <SlalomRight+0x268>)
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7fe fc9d 	bl	8008394 <__aeabi_i2d>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a66:	ee17 0a90 	vmov	r0, s15
 8009a6a:	f7fe fca5 	bl	80083b8 <__aeabi_f2d>
 8009a6e:	a34c      	add	r3, pc, #304	; (adr r3, 8009ba0 <SlalomRight+0x240>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f7fe fe22 	bl	80086bc <__aeabi_ddiv>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f7fe fb3c 	bl	80080fc <__adddf3>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4614      	mov	r4, r2
 8009a8a:	461d      	mov	r5, r3
 8009a8c:	4b4b      	ldr	r3, [pc, #300]	; (8009bbc <SlalomRight+0x25c>)
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	4b4a      	ldr	r3, [pc, #296]	; (8009bbc <SlalomRight+0x25c>)
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	4413      	add	r3, r2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fc7c 	bl	8008394 <__aeabi_i2d>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	f7fe ff70 	bl	8008988 <__aeabi_dcmpgt>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1c7      	bne.n	8009a3e <SlalomRight+0xde>

			////printf("直進1\r\n");
	}
	now_angv = AngularV;
 8009aae:	4b42      	ldr	r3, [pc, #264]	; (8009bb8 <SlalomRight+0x258>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 8009ab4:	4b45      	ldr	r3, [pc, #276]	; (8009bcc <SlalomRight+0x26c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	603b      	str	r3, [r7, #0]

	while(start_angle + ang1 > Angle)
 8009aba:	e005      	b.n	8009ac8 <SlalomRight+0x168>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			AngularAcceleration = alpha_turn;
 8009abc:	4a41      	ldr	r2, [pc, #260]	; (8009bc4 <SlalomRight+0x264>)
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009ac2:	4a41      	ldr	r2, [pc, #260]	; (8009bc8 <SlalomRight+0x268>)
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009ac8:	ed97 7a00 	vldr	s14, [r7]
 8009acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ad4:	4b3d      	ldr	r3, [pc, #244]	; (8009bcc <SlalomRight+0x26c>)
 8009ad6:	edd3 7a00 	vldr	s15, [r3]
 8009ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae2:	dceb      	bgt.n	8009abc <SlalomRight+0x15c>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009ae4:	4b37      	ldr	r3, [pc, #220]	; (8009bc4 <SlalomRight+0x264>)
 8009ae6:	f04f 0200 	mov.w	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 8009aec:	4b32      	ldr	r3, [pc, #200]	; (8009bb8 <SlalomRight+0x258>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009af2:	e006      	b.n	8009b02 <SlalomRight+0x1a2>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009af4:	4b32      	ldr	r3, [pc, #200]	; (8009bc0 <SlalomRight+0x260>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a31      	ldr	r2, [pc, #196]	; (8009bc0 <SlalomRight+0x260>)
 8009afa:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009afc:	4a32      	ldr	r2, [pc, #200]	; (8009bc8 <SlalomRight+0x268>)
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > Angle)
 8009b02:	ed97 7a00 	vldr	s14, [r7]
 8009b06:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b0e:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <SlalomRight+0x26c>)
 8009b10:	edd3 7a00 	vldr	s15, [r3]
 8009b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1c:	dcea      	bgt.n	8009af4 <SlalomRight+0x194>

			}
#endif
	}

	now_angv = AngularV;
 8009b1e:	4b26      	ldr	r3, [pc, #152]	; (8009bb8 <SlalomRight+0x258>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 8009b24:	e016      	b.n	8009b54 <SlalomRight+0x1f4>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			AngularAcceleration = -alpha_turn;
 8009b26:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b2a:	eef1 7a67 	vneg.f32	s15, s15
 8009b2e:	4b25      	ldr	r3, [pc, #148]	; (8009bc4 <SlalomRight+0x264>)
 8009b30:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 8009b34:	4b22      	ldr	r3, [pc, #136]	; (8009bc0 <SlalomRight+0x260>)
 8009b36:	edd3 7a00 	vldr	s15, [r3]
 8009b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b42:	d504      	bpl.n	8009b4e <SlalomRight+0x1ee>
			{
				TargetAngularV = 0;
 8009b44:	4b1e      	ldr	r3, [pc, #120]	; (8009bc0 <SlalomRight+0x260>)
 8009b46:	f04f 0200 	mov.w	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]
				break;
 8009b4c:	e010      	b.n	8009b70 <SlalomRight+0x210>
			}
			TargetVelocity[BODY] = v_turn;
 8009b4e:	4a1e      	ldr	r2, [pc, #120]	; (8009bc8 <SlalomRight+0x268>)
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009b54:	ed97 7a00 	vldr	s14, [r7]
 8009b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b60:	4b1a      	ldr	r3, [pc, #104]	; (8009bcc <SlalomRight+0x26c>)
 8009b62:	edd3 7a00 	vldr	s15, [r3]
 8009b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6e:	dcda      	bgt.n	8009b26 <SlalomRight+0x1c6>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009b70:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <SlalomRight+0x264>)
 8009b72:	f04f 0200 	mov.w	r2, #0
 8009b76:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009b78:	4b11      	ldr	r3, [pc, #68]	; (8009bc0 <SlalomRight+0x260>)
 8009b7a:	f04f 0200 	mov.w	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009b80:	4b13      	ldr	r3, [pc, #76]	; (8009bd0 <SlalomRight+0x270>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a13      	ldr	r2, [pc, #76]	; (8009bd4 <SlalomRight+0x274>)
 8009b86:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009b88:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <SlalomRight+0x25c>)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <SlalomRight+0x25c>)
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	4413      	add	r3, r2
 8009b92:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009b94:	e035      	b.n	8009c02 <SlalomRight+0x2a2>
 8009b96:	bf00      	nop
 8009b98:	54442d18 	.word	0x54442d18
 8009b9c:	400921fb 	.word	0x400921fb
 8009ba0:	8fa963a1 	.word	0x8fa963a1
 8009ba4:	3f5023d2 	.word	0x3f5023d2
 8009ba8:	20000000 	.word	0x20000000
 8009bac:	200002cc 	.word	0x200002cc
 8009bb0:	200006ec 	.word	0x200006ec
 8009bb4:	40668000 	.word	0x40668000
 8009bb8:	200002c4 	.word	0x200002c4
 8009bbc:	200002b8 	.word	0x200002b8
 8009bc0:	200002d8 	.word	0x200002d8
 8009bc4:	200002dc 	.word	0x200002dc
 8009bc8:	20000294 	.word	0x20000294
 8009bcc:	200002c8 	.word	0x200002c8
 8009bd0:	20000260 	.word	0x20000260
 8009bd4:	2000025c 	.word	0x2000025c
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009bd8:	4b33      	ldr	r3, [pc, #204]	; (8009ca8 <SlalomRight+0x348>)
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009be0:	4a32      	ldr	r2, [pc, #200]	; (8009cac <SlalomRight+0x34c>)
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 8009be6:	4b32      	ldr	r3, [pc, #200]	; (8009cb0 <SlalomRight+0x350>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d109      	bne.n	8009c02 <SlalomRight+0x2a2>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009bee:	f001 fdc3 	bl	800b778 <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	2001      	movs	r0, #1
 8009bf8:	f001 ff2c 	bl	800ba54 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009bfc:	4b2c      	ldr	r3, [pc, #176]	; (8009cb0 <SlalomRight+0x350>)
 8009bfe:	2201      	movs	r2, #1
 8009c00:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7fe fbc6 	bl	8008394 <__aeabi_i2d>
 8009c08:	4604      	mov	r4, r0
 8009c0a:	460d      	mov	r5, r1
 8009c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c14:	ee17 0a90 	vmov	r0, s15
 8009c18:	f7fe fbce 	bl	80083b8 <__aeabi_f2d>
 8009c1c:	a31e      	add	r3, pc, #120	; (adr r3, 8009c98 <SlalomRight+0x338>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f7fe fd4b 	bl	80086bc <__aeabi_ddiv>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7fe fa65 	bl	80080fc <__adddf3>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4614      	mov	r4, r2
 8009c38:	461d      	mov	r5, r3
 8009c3a:	4b1e      	ldr	r3, [pc, #120]	; (8009cb4 <SlalomRight+0x354>)
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	4b1d      	ldr	r3, [pc, #116]	; (8009cb4 <SlalomRight+0x354>)
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	4413      	add	r3, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fba5 	bl	8008394 <__aeabi_i2d>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7fe fe99 	bl	8008988 <__aeabi_dcmpgt>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1bd      	bne.n	8009bd8 <SlalomRight+0x278>
			}
	}
	TargetAngle += 90*M_PI/180;
 8009c5c:	4b16      	ldr	r3, [pc, #88]	; (8009cb8 <SlalomRight+0x358>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe fba9 	bl	80083b8 <__aeabi_f2d>
 8009c66:	a30e      	add	r3, pc, #56	; (adr r3, 8009ca0 <SlalomRight+0x340>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f7fe fa46 	bl	80080fc <__adddf3>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4610      	mov	r0, r2
 8009c76:	4619      	mov	r1, r3
 8009c78:	f7fe feee 	bl	8008a58 <__aeabi_d2f>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	4a0e      	ldr	r2, [pc, #56]	; (8009cb8 <SlalomRight+0x358>)
 8009c80:	6013      	str	r3, [r2, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009c82:	4b0c      	ldr	r3, [pc, #48]	; (8009cb4 <SlalomRight+0x354>)
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	4a0d      	ldr	r2, [pc, #52]	; (8009cbc <SlalomRight+0x35c>)
 8009c88:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009c8a:	bf00      	nop
 8009c8c:	3728      	adds	r7, #40	; 0x28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bdb0      	pop	{r4, r5, r7, pc}
 8009c92:	bf00      	nop
 8009c94:	f3af 8000 	nop.w
 8009c98:	8fa963a1 	.word	0x8fa963a1
 8009c9c:	3f5023d2 	.word	0x3f5023d2
 8009ca0:	54442d18 	.word	0x54442d18
 8009ca4:	3ff921fb 	.word	0x3ff921fb
 8009ca8:	200002d8 	.word	0x200002d8
 8009cac:	20000294 	.word	0x20000294
 8009cb0:	2000025c 	.word	0x2000025c
 8009cb4:	200002b8 	.word	0x200002b8
 8009cb8:	200002e0 	.word	0x200002e0
 8009cbc:	200002a0 	.word	0x200002a0

08009cc0 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009cc0:	b5b0      	push	{r4, r5, r7, lr}
 8009cc2:	b08a      	sub	sp, #40	; 0x28
 8009cc4:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009cc6:	4b8c      	ldr	r3, [pc, #560]	; (8009ef8 <SlalomLeft+0x238>)
 8009cc8:	2202      	movs	r2, #2
 8009cca:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009ccc:	f7ff fa3c 	bl	8009148 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009cd0:	4b8a      	ldr	r3, [pc, #552]	; (8009efc <SlalomLeft+0x23c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009cd6:	4b8a      	ldr	r3, [pc, #552]	; (8009f00 <SlalomLeft+0x240>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009cdc:	4b88      	ldr	r3, [pc, #544]	; (8009f00 <SlalomLeft+0x240>)
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009ce2:	4b87      	ldr	r3, [pc, #540]	; (8009f00 <SlalomLeft+0x240>)
 8009ce4:	edd3 7a02 	vldr	s15, [r3, #8]
 8009ce8:	eef1 7a67 	vneg.f32	s15, s15
 8009cec:	edc7 7a06 	vstr	s15, [r7, #24]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009cf0:	4b83      	ldr	r3, [pc, #524]	; (8009f00 <SlalomLeft+0x240>)
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fe fb5f 	bl	80083b8 <__aeabi_f2d>
 8009cfa:	a37b      	add	r3, pc, #492	; (adr r3, 8009ee8 <SlalomLeft+0x228>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f7fe fbb2 	bl	8008468 <__aeabi_dmul>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	f04f 0200 	mov.w	r2, #0
 8009d10:	4b7c      	ldr	r3, [pc, #496]	; (8009f04 <SlalomLeft+0x244>)
 8009d12:	f7fe fcd3 	bl	80086bc <__aeabi_ddiv>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f7fe fe9b 	bl	8008a58 <__aeabi_d2f>
 8009d22:	4603      	mov	r3, r0
 8009d24:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009d26:	4b76      	ldr	r3, [pc, #472]	; (8009f00 <SlalomLeft+0x240>)
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fb44 	bl	80083b8 <__aeabi_f2d>
 8009d30:	a36d      	add	r3, pc, #436	; (adr r3, 8009ee8 <SlalomLeft+0x228>)
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f7fe fb97 	bl	8008468 <__aeabi_dmul>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	f04f 0200 	mov.w	r2, #0
 8009d46:	4b6f      	ldr	r3, [pc, #444]	; (8009f04 <SlalomLeft+0x244>)
 8009d48:	f7fe fcb8 	bl	80086bc <__aeabi_ddiv>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4610      	mov	r0, r2
 8009d52:	4619      	mov	r1, r3
 8009d54:	f7fe fe80 	bl	8008a58 <__aeabi_d2f>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009d5c:	4b68      	ldr	r3, [pc, #416]	; (8009f00 <SlalomLeft+0x240>)
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fb29 	bl	80083b8 <__aeabi_f2d>
 8009d66:	a360      	add	r3, pc, #384	; (adr r3, 8009ee8 <SlalomLeft+0x228>)
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f7fe fb7c 	bl	8008468 <__aeabi_dmul>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4610      	mov	r0, r2
 8009d76:	4619      	mov	r1, r3
 8009d78:	f04f 0200 	mov.w	r2, #0
 8009d7c:	4b61      	ldr	r3, [pc, #388]	; (8009f04 <SlalomLeft+0x244>)
 8009d7e:	f7fe fc9d 	bl	80086bc <__aeabi_ddiv>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4610      	mov	r0, r2
 8009d88:	4619      	mov	r1, r3
 8009d8a:	f7fe fe65 	bl	8008a58 <__aeabi_d2f>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009d92:	4b5d      	ldr	r3, [pc, #372]	; (8009f08 <SlalomLeft+0x248>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b5c      	ldr	r3, [pc, #368]	; (8009f08 <SlalomLeft+0x248>)
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009d9e:	e00a      	b.n	8009db6 <SlalomLeft+0xf6>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009da0:	4b5a      	ldr	r3, [pc, #360]	; (8009f0c <SlalomLeft+0x24c>)
 8009da2:	f04f 0200 	mov.w	r2, #0
 8009da6:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009da8:	4b59      	ldr	r3, [pc, #356]	; (8009f10 <SlalomLeft+0x250>)
 8009daa:	f04f 0200 	mov.w	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009db0:	4a58      	ldr	r2, [pc, #352]	; (8009f14 <SlalomLeft+0x254>)
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009db6:	68b8      	ldr	r0, [r7, #8]
 8009db8:	f7fe faec 	bl	8008394 <__aeabi_i2d>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8009dc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009dc8:	ee17 0a90 	vmov	r0, s15
 8009dcc:	f7fe faf4 	bl	80083b8 <__aeabi_f2d>
 8009dd0:	a347      	add	r3, pc, #284	; (adr r3, 8009ef0 <SlalomLeft+0x230>)
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f7fe fc71 	bl	80086bc <__aeabi_ddiv>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4620      	mov	r0, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	f7fe f98b 	bl	80080fc <__adddf3>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4614      	mov	r4, r2
 8009dec:	461d      	mov	r5, r3
 8009dee:	4b46      	ldr	r3, [pc, #280]	; (8009f08 <SlalomLeft+0x248>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	4b45      	ldr	r3, [pc, #276]	; (8009f08 <SlalomLeft+0x248>)
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	4413      	add	r3, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fe facb 	bl	8008394 <__aeabi_i2d>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4620      	mov	r0, r4
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7fe fdbf 	bl	8008988 <__aeabi_dcmpgt>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1c7      	bne.n	8009da0 <SlalomLeft+0xe0>

			////printf("直進1\r\n");
	}


	float start_angle = Angle;
 8009e10:	4b41      	ldr	r3, [pc, #260]	; (8009f18 <SlalomLeft+0x258>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 8009e16:	e005      	b.n	8009e24 <SlalomLeft+0x164>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			AngularAcceleration = alpha_turn;
 8009e18:	4a3d      	ldr	r2, [pc, #244]	; (8009f10 <SlalomLeft+0x250>)
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009e1e:	4a3d      	ldr	r2, [pc, #244]	; (8009f14 <SlalomLeft+0x254>)
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009e24:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e30:	4b39      	ldr	r3, [pc, #228]	; (8009f18 <SlalomLeft+0x258>)
 8009e32:	edd3 7a00 	vldr	s15, [r3]
 8009e36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e3e:	d4eb      	bmi.n	8009e18 <SlalomLeft+0x158>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009e40:	4b33      	ldr	r3, [pc, #204]	; (8009f10 <SlalomLeft+0x250>)
 8009e42:	f04f 0200 	mov.w	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009e48:	e006      	b.n	8009e58 <SlalomLeft+0x198>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009e4a:	4b30      	ldr	r3, [pc, #192]	; (8009f0c <SlalomLeft+0x24c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a2f      	ldr	r2, [pc, #188]	; (8009f0c <SlalomLeft+0x24c>)
 8009e50:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009e52:	4a30      	ldr	r2, [pc, #192]	; (8009f14 <SlalomLeft+0x254>)
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009e58:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e64:	4b2c      	ldr	r3, [pc, #176]	; (8009f18 <SlalomLeft+0x258>)
 8009e66:	edd3 7a00 	vldr	s15, [r3]
 8009e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e72:	d4ea      	bmi.n	8009e4a <SlalomLeft+0x18a>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009e74:	e016      	b.n	8009ea4 <SlalomLeft+0x1e4>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			AngularAcceleration = -alpha_turn;
 8009e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e7a:	eef1 7a67 	vneg.f32	s15, s15
 8009e7e:	4b24      	ldr	r3, [pc, #144]	; (8009f10 <SlalomLeft+0x250>)
 8009e80:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 8009e84:	4b21      	ldr	r3, [pc, #132]	; (8009f0c <SlalomLeft+0x24c>)
 8009e86:	edd3 7a00 	vldr	s15, [r3]
 8009e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e92:	dd04      	ble.n	8009e9e <SlalomLeft+0x1de>
			{
				TargetAngularV = 0;
 8009e94:	4b1d      	ldr	r3, [pc, #116]	; (8009f0c <SlalomLeft+0x24c>)
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]
				break;
 8009e9c:	e010      	b.n	8009ec0 <SlalomLeft+0x200>
			}
			TargetVelocity[BODY] = v_turn;
 8009e9e:	4a1d      	ldr	r2, [pc, #116]	; (8009f14 <SlalomLeft+0x254>)
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < Angle)
 8009ea4:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ea8:	edd7 7a03 	vldr	s15, [r7, #12]
 8009eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009eb0:	4b19      	ldr	r3, [pc, #100]	; (8009f18 <SlalomLeft+0x258>)
 8009eb2:	edd3 7a00 	vldr	s15, [r3]
 8009eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebe:	d4da      	bmi.n	8009e76 <SlalomLeft+0x1b6>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009ec0:	4b13      	ldr	r3, [pc, #76]	; (8009f10 <SlalomLeft+0x250>)
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009ec8:	4b10      	ldr	r3, [pc, #64]	; (8009f0c <SlalomLeft+0x24c>)
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009ed0:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <SlalomLeft+0x25c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a12      	ldr	r2, [pc, #72]	; (8009f20 <SlalomLeft+0x260>)
 8009ed6:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	; (8009f08 <SlalomLeft+0x248>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <SlalomLeft+0x248>)
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009ee4:	e033      	b.n	8009f4e <SlalomLeft+0x28e>
 8009ee6:	bf00      	nop
 8009ee8:	54442d18 	.word	0x54442d18
 8009eec:	400921fb 	.word	0x400921fb
 8009ef0:	8fa963a1 	.word	0x8fa963a1
 8009ef4:	3f5023d2 	.word	0x3f5023d2
 8009ef8:	20000000 	.word	0x20000000
 8009efc:	200002cc 	.word	0x200002cc
 8009f00:	200006ec 	.word	0x200006ec
 8009f04:	40668000 	.word	0x40668000
 8009f08:	200002b8 	.word	0x200002b8
 8009f0c:	200002d8 	.word	0x200002d8
 8009f10:	200002dc 	.word	0x200002dc
 8009f14:	20000294 	.word	0x20000294
 8009f18:	200002c8 	.word	0x200002c8
 8009f1c:	20000260 	.word	0x20000260
 8009f20:	2000025c 	.word	0x2000025c
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009f24:	4b32      	ldr	r3, [pc, #200]	; (8009ff0 <SlalomLeft+0x330>)
 8009f26:	f04f 0200 	mov.w	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009f2c:	4a31      	ldr	r2, [pc, #196]	; (8009ff4 <SlalomLeft+0x334>)
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 8009f32:	4b31      	ldr	r3, [pc, #196]	; (8009ff8 <SlalomLeft+0x338>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d109      	bne.n	8009f4e <SlalomLeft+0x28e>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009f3a:	f001 fc1d 	bl	800b778 <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009f3e:	2201      	movs	r2, #1
 8009f40:	2100      	movs	r1, #0
 8009f42:	2001      	movs	r0, #1
 8009f44:	f001 fd86 	bl	800ba54 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009f48:	4b2b      	ldr	r3, [pc, #172]	; (8009ff8 <SlalomLeft+0x338>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009f4e:	68b8      	ldr	r0, [r7, #8]
 8009f50:	f7fe fa20 	bl	8008394 <__aeabi_i2d>
 8009f54:	4604      	mov	r4, r0
 8009f56:	460d      	mov	r5, r1
 8009f58:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f60:	ee17 0a90 	vmov	r0, s15
 8009f64:	f7fe fa28 	bl	80083b8 <__aeabi_f2d>
 8009f68:	a31d      	add	r3, pc, #116	; (adr r3, 8009fe0 <SlalomLeft+0x320>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7fe fba5 	bl	80086bc <__aeabi_ddiv>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4620      	mov	r0, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7fe f8bf 	bl	80080fc <__adddf3>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4614      	mov	r4, r2
 8009f84:	461d      	mov	r5, r3
 8009f86:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <SlalomLeft+0x33c>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	4b1c      	ldr	r3, [pc, #112]	; (8009ffc <SlalomLeft+0x33c>)
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	4413      	add	r3, r2
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fe f9ff 	bl	8008394 <__aeabi_i2d>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7fe fcf3 	bl	8008988 <__aeabi_dcmpgt>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1bd      	bne.n	8009f24 <SlalomLeft+0x264>
			}
	}
	TargetAngle += -90*M_PI/180;
 8009fa8:	4b15      	ldr	r3, [pc, #84]	; (800a000 <SlalomLeft+0x340>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe fa03 	bl	80083b8 <__aeabi_f2d>
 8009fb2:	a30d      	add	r3, pc, #52	; (adr r3, 8009fe8 <SlalomLeft+0x328>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7fe f89e 	bl	80080f8 <__aeabi_dsub>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f7fe fd48 	bl	8008a58 <__aeabi_d2f>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	4a0d      	ldr	r2, [pc, #52]	; (800a000 <SlalomLeft+0x340>)
 8009fcc:	6013      	str	r3, [r2, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009fce:	4b0b      	ldr	r3, [pc, #44]	; (8009ffc <SlalomLeft+0x33c>)
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	4a0c      	ldr	r2, [pc, #48]	; (800a004 <SlalomLeft+0x344>)
 8009fd4:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009fd6:	bf00      	nop
 8009fd8:	3728      	adds	r7, #40	; 0x28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	8fa963a1 	.word	0x8fa963a1
 8009fe4:	3f5023d2 	.word	0x3f5023d2
 8009fe8:	54442d18 	.word	0x54442d18
 8009fec:	3ff921fb 	.word	0x3ff921fb
 8009ff0:	200002d8 	.word	0x200002d8
 8009ff4:	20000294 	.word	0x20000294
 8009ff8:	2000025c 	.word	0x2000025c
 8009ffc:	200002b8 	.word	0x200002b8
 800a000:	200002e0 	.word	0x200002e0
 800a004:	200002a0 	.word	0x200002a0

0800a008 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 800a008:	b5b0      	push	{r4, r5, r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a012:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = accel;
 800a016:	4b56      	ldr	r3, [pc, #344]	; (800a170 <Accel+0x168>)
 800a018:	2200      	movs	r2, #0
 800a01a:	711a      	strb	r2, [r3, #4]
	ControlWall();
 800a01c:	f7ff f894 	bl	8009148 <ControlWall>
	TargetAngularV = 0;
 800a020:	4b54      	ldr	r3, [pc, #336]	; (800a174 <Accel+0x16c>)
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 800a028:	f04f 0300 	mov.w	r3, #0
 800a02c:	60fb      	str	r3, [r7, #12]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800a02e:	4b52      	ldr	r3, [pc, #328]	; (800a178 <Accel+0x170>)
 800a030:	edd3 7a02 	vldr	s15, [r3, #8]
 800a034:	ed97 7a00 	vldr	s14, [r7]
 800a038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a03c:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800a040:	edd7 7a03 	vldr	s15, [r7, #12]
 800a044:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a17c <Accel+0x174>
 800a048:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a04c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a050:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a054:	edd7 7a01 	vldr	s15, [r7, #4]
 800a058:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a05c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a060:	4b47      	ldr	r3, [pc, #284]	; (800a180 <Accel+0x178>)
 800a062:	edc3 7a00 	vstr	s15, [r3]
	WallWarn();
 800a066:	f7ff f863 	bl	8009130 <WallWarn>
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800a06a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a06e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a072:	ee17 0a90 	vmov	r0, s15
 800a076:	f7fe f99f 	bl	80083b8 <__aeabi_f2d>
 800a07a:	a339      	add	r3, pc, #228	; (adr r3, 800a160 <Accel+0x158>)
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f7fe fb1c 	bl	80086bc <__aeabi_ddiv>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4610      	mov	r0, r2
 800a08a:	4619      	mov	r1, r3
 800a08c:	f7fe fc9c 	bl	80089c8 <__aeabi_d2iz>
 800a090:	4603      	mov	r3, r0
 800a092:	60bb      	str	r3, [r7, #8]

	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	Calc = SearchOrFast;//Fastでは1を代入。
 800a094:	4b3b      	ldr	r3, [pc, #236]	; (800a184 <Accel+0x17c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a3b      	ldr	r2, [pc, #236]	; (800a188 <Accel+0x180>)
 800a09a:	6013      	str	r3, [r2, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a09c:	e035      	b.n	800a10a <Accel+0x102>
	{
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a09e:	4b3b      	ldr	r3, [pc, #236]	; (800a18c <Accel+0x184>)
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe f976 	bl	8008394 <__aeabi_i2d>
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	68b8      	ldr	r0, [r7, #8]
 800a0ae:	f7fe f971 	bl	8008394 <__aeabi_i2d>
 800a0b2:	a32d      	add	r3, pc, #180	; (adr r3, 800a168 <Accel+0x160>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7fe f9d6 	bl	8008468 <__aeabi_dmul>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	f7fe f81a 	bl	80080fc <__adddf3>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	461d      	mov	r5, r3
 800a0d0:	4b2f      	ldr	r3, [pc, #188]	; (800a190 <Accel+0x188>)
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe f95d 	bl	8008394 <__aeabi_i2d>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7fe fc33 	bl	800894c <__aeabi_dcmplt>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d100      	bne.n	800a0ee <Accel+0xe6>
 800a0ec:	e00d      	b.n	800a10a <Accel+0x102>
 800a0ee:	4b26      	ldr	r3, [pc, #152]	; (800a188 <Accel+0x180>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d109      	bne.n	800a10a <Accel+0x102>
		{
			wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a0f6:	f001 fb3f 	bl	800b778 <wall_set>
			//計算して
			make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	2001      	movs	r0, #1
 800a100:	f001 fca8 	bl	800ba54 <make_map>
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
 800a104:	4b20      	ldr	r3, [pc, #128]	; (800a188 <Accel+0x180>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a10a:	4b20      	ldr	r3, [pc, #128]	; (800a18c <Accel+0x184>)
 800a10c:	689a      	ldr	r2, [r3, #8]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	441a      	add	r2, r3
 800a112:	4b1f      	ldr	r3, [pc, #124]	; (800a190 <Accel+0x188>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	429a      	cmp	r2, r3
 800a118:	dcc1      	bgt.n	800a09e <Accel+0x96>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 800a11a:	4b19      	ldr	r3, [pc, #100]	; (800a180 <Accel+0x178>)
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	601a      	str	r2, [r3, #0]
	//壁読んで、

	KeepPulse[BODY] += target_pulse;
 800a122:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <Accel+0x184>)
 800a124:	689a      	ldr	r2, [r3, #8]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	4413      	add	r3, r2
 800a12a:	4a18      	ldr	r2, [pc, #96]	; (800a18c <Accel+0x184>)
 800a12c:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a12e:	4b17      	ldr	r3, [pc, #92]	; (800a18c <Accel+0x184>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	0fd9      	lsrs	r1, r3, #31
 800a136:	440b      	add	r3, r1
 800a138:	105b      	asrs	r3, r3, #1
 800a13a:	4413      	add	r3, r2
 800a13c:	4a13      	ldr	r2, [pc, #76]	; (800a18c <Accel+0x184>)
 800a13e:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a140:	4b12      	ldr	r3, [pc, #72]	; (800a18c <Accel+0x184>)
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	0fd9      	lsrs	r1, r3, #31
 800a148:	440b      	add	r3, r1
 800a14a:	105b      	asrs	r3, r3, #1
 800a14c:	4413      	add	r3, r2
 800a14e:	4a0f      	ldr	r2, [pc, #60]	; (800a18c <Accel+0x184>)
 800a150:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800a152:	bf00      	nop
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bdb0      	pop	{r4, r5, r7, pc}
 800a15a:	bf00      	nop
 800a15c:	f3af 8000 	nop.w
 800a160:	8fa963a1 	.word	0x8fa963a1
 800a164:	3f5023d2 	.word	0x3f5023d2
 800a168:	9999999a 	.word	0x9999999a
 800a16c:	3fe99999 	.word	0x3fe99999
 800a170:	20000000 	.word	0x20000000
 800a174:	200002d8 	.word	0x200002d8
 800a178:	20000288 	.word	0x20000288
 800a17c:	3a83126f 	.word	0x3a83126f
 800a180:	200002d4 	.word	0x200002d4
 800a184:	20000260 	.word	0x20000260
 800a188:	2000025c 	.word	0x2000025c
 800a18c:	200002a0 	.word	0x200002a0
 800a190:	200002b8 	.word	0x200002b8
 800a194:	00000000 	.word	0x00000000

0800a198 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 800a198:	b5b0      	push	{r4, r5, r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a1a2:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = decel;
 800a1a6:	4b68      	ldr	r3, [pc, #416]	; (800a348 <Decel+0x1b0>)
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	711a      	strb	r2, [r3, #4]
	//int keep_pulse = TotalPulse[BODY];
	float down_speed=0;
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed;
 800a1b2:	4b66      	ldr	r3, [pc, #408]	; (800a34c <Decel+0x1b4>)
 800a1b4:	ed93 7a02 	vldr	s14, [r3, #8]
 800a1b8:	edd7 7a00 	vldr	s15, [r7]
 800a1bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1c0:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800a1c4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1c8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a350 <Decel+0x1b8>
 800a1cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a1d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1d4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a1d8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a1e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1e4:	eef1 7a67 	vneg.f32	s15, s15
 800a1e8:	4b5a      	ldr	r3, [pc, #360]	; (800a354 <Decel+0x1bc>)
 800a1ea:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	WallSafe();
 800a1ee:	f7fe ff93 	bl	8009118 <WallSafe>
	ControlWall();
 800a1f2:	f7fe ffa9 	bl	8009148 <ControlWall>
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800a1f6:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1fe:	ee17 0a90 	vmov	r0, s15
 800a202:	f7fe f8d9 	bl	80083b8 <__aeabi_f2d>
 800a206:	a34c      	add	r3, pc, #304	; (adr r3, 800a338 <Decel+0x1a0>)
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f7fe fa56 	bl	80086bc <__aeabi_ddiv>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	4610      	mov	r0, r2
 800a216:	4619      	mov	r1, r3
 800a218:	f7fe fbd6 	bl	80089c8 <__aeabi_d2iz>
 800a21c:	4603      	mov	r3, r0
 800a21e:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3600) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a220:	e052      	b.n	800a2c8 <Decel+0x130>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= 0)
 800a222:	4b4d      	ldr	r3, [pc, #308]	; (800a358 <Decel+0x1c0>)
 800a224:	edd3 7a02 	vldr	s15, [r3, #8]
 800a228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a230:	d810      	bhi.n	800a254 <Decel+0xbc>
		{
			TargetVelocity[BODY] = 0;
 800a232:	4b49      	ldr	r3, [pc, #292]	; (800a358 <Decel+0x1c0>)
 800a234:	f04f 0200 	mov.w	r2, #0
 800a238:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 800a23a:	4b46      	ldr	r3, [pc, #280]	; (800a354 <Decel+0x1bc>)
 800a23c:	f04f 0200 	mov.w	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800a242:	4b46      	ldr	r3, [pc, #280]	; (800a35c <Decel+0x1c4>)
 800a244:	f04f 0200 	mov.w	r2, #0
 800a248:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800a24a:	4b45      	ldr	r3, [pc, #276]	; (800a360 <Decel+0x1c8>)
 800a24c:	f04f 0200 	mov.w	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
			break;
 800a252:	e050      	b.n	800a2f6 <Decel+0x15e>
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800a254:	4b43      	ldr	r3, [pc, #268]	; (800a364 <Decel+0x1cc>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fe f89b 	bl	8008394 <__aeabi_i2d>
 800a25e:	4604      	mov	r4, r0
 800a260:	460d      	mov	r5, r1
 800a262:	68b8      	ldr	r0, [r7, #8]
 800a264:	f7fe f896 	bl	8008394 <__aeabi_i2d>
 800a268:	a335      	add	r3, pc, #212	; (adr r3, 800a340 <Decel+0x1a8>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7fe f8fb 	bl	8008468 <__aeabi_dmul>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7fd ff3f 	bl	80080fc <__adddf3>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	4614      	mov	r4, r2
 800a284:	461d      	mov	r5, r3
 800a286:	4b38      	ldr	r3, [pc, #224]	; (800a368 <Decel+0x1d0>)
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fe f882 	bl	8008394 <__aeabi_i2d>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7fe fb58 	bl	800894c <__aeabi_dcmplt>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d100      	bne.n	800a2a4 <Decel+0x10c>
 800a2a2:	e011      	b.n	800a2c8 <Decel+0x130>
		{
			WallWarn();
 800a2a4:	f7fe ff44 	bl	8009130 <WallWarn>
			//ControlWall();
			PIDChangeFlag(L_WALL_PID, 0);
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	2002      	movs	r0, #2
 800a2ac:	f003 fa16 	bl	800d6dc <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	2003      	movs	r0, #3
 800a2b4:	f003 fa12 	bl	800d6dc <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	f003 fa0e 	bl	800d6dc <PIDChangeFlag>
			PIDChangeFlag( A_VELO_PID , 1);
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	f003 fa0a 	bl	800d6dc <PIDChangeFlag>
	while( (	(Photo[FR]+Photo[FL]) < 3600) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a2c8:	4b28      	ldr	r3, [pc, #160]	; (800a36c <Decel+0x1d4>)
 800a2ca:	ed93 7a03 	vldr	s14, [r3, #12]
 800a2ce:	4b27      	ldr	r3, [pc, #156]	; (800a36c <Decel+0x1d4>)
 800a2d0:	edd3 7a00 	vldr	s15, [r3]
 800a2d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2d8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a370 <Decel+0x1d8>
 800a2dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e4:	d507      	bpl.n	800a2f6 <Decel+0x15e>
 800a2e6:	4b1f      	ldr	r3, [pc, #124]	; (800a364 <Decel+0x1cc>)
 800a2e8:	689a      	ldr	r2, [r3, #8]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	441a      	add	r2, r3
 800a2ee:	4b1e      	ldr	r3, [pc, #120]	; (800a368 <Decel+0x1d0>)
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	dc95      	bgt.n	800a222 <Decel+0x8a>

		}


	}
	WaitStopAndReset();
 800a2f6:	f7ff f83f 	bl	8009378 <WaitStopAndReset>
	KeepPulse[BODY] += target_pulse;
 800a2fa:	4b1a      	ldr	r3, [pc, #104]	; (800a364 <Decel+0x1cc>)
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	4413      	add	r3, r2
 800a302:	4a18      	ldr	r2, [pc, #96]	; (800a364 <Decel+0x1cc>)
 800a304:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a306:	4b17      	ldr	r3, [pc, #92]	; (800a364 <Decel+0x1cc>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	0fd9      	lsrs	r1, r3, #31
 800a30e:	440b      	add	r3, r1
 800a310:	105b      	asrs	r3, r3, #1
 800a312:	4413      	add	r3, r2
 800a314:	4a13      	ldr	r2, [pc, #76]	; (800a364 <Decel+0x1cc>)
 800a316:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a318:	4b12      	ldr	r3, [pc, #72]	; (800a364 <Decel+0x1cc>)
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	0fd9      	lsrs	r1, r3, #31
 800a320:	440b      	add	r3, r1
 800a322:	105b      	asrs	r3, r3, #1
 800a324:	4413      	add	r3, r2
 800a326:	4a0f      	ldr	r2, [pc, #60]	; (800a364 <Decel+0x1cc>)
 800a328:	6053      	str	r3, [r2, #4]


}
 800a32a:	bf00      	nop
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bdb0      	pop	{r4, r5, r7, pc}
 800a332:	bf00      	nop
 800a334:	f3af 8000 	nop.w
 800a338:	8fa963a1 	.word	0x8fa963a1
 800a33c:	3f5023d2 	.word	0x3f5023d2
 800a340:	cccccccd 	.word	0xcccccccd
 800a344:	3fe4cccc 	.word	0x3fe4cccc
 800a348:	20000000 	.word	0x20000000
 800a34c:	20000288 	.word	0x20000288
 800a350:	3a83126f 	.word	0x3a83126f
 800a354:	200002d4 	.word	0x200002d4
 800a358:	20000294 	.word	0x20000294
 800a35c:	200002d8 	.word	0x200002d8
 800a360:	200002dc 	.word	0x200002dc
 800a364:	200002a0 	.word	0x200002a0
 800a368:	200002b8 	.word	0x200002b8
 800a36c:	20000264 	.word	0x20000264
 800a370:	45610000 	.word	0x45610000
 800a374:	00000000 	.word	0x00000000

0800a378 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe f805 	bl	8008394 <__aeabi_i2d>
 800a38a:	a32b      	add	r3, pc, #172	; (adr r3, 800a438 <Calib+0xc0>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7fe f994 	bl	80086bc <__aeabi_ddiv>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4610      	mov	r0, r2
 800a39a:	4619      	mov	r1, r3
 800a39c:	f7fe fb14 	bl	80089c8 <__aeabi_d2iz>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	60fb      	str	r3, [r7, #12]
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd15      	ble.n	800a3d6 <Calib+0x5e>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a3aa:	e006      	b.n	800a3ba <Calib+0x42>
		{
			Acceleration = 0;
 800a3ac:	4b1c      	ldr	r3, [pc, #112]	; (800a420 <Calib+0xa8>)
 800a3ae:	f04f 0200 	mov.w	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = 70;
 800a3b4:	4b1b      	ldr	r3, [pc, #108]	; (800a424 <Calib+0xac>)
 800a3b6:	4a1c      	ldr	r2, [pc, #112]	; (800a428 <Calib+0xb0>)
 800a3b8:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a3ba:	4b1c      	ldr	r3, [pc, #112]	; (800a42c <Calib+0xb4>)
 800a3bc:	689a      	ldr	r2, [r3, #8]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	4b1b      	ldr	r3, [pc, #108]	; (800a430 <Calib+0xb8>)
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	dcf0      	bgt.n	800a3ac <Calib+0x34>
		}
		KeepPulse[BODY] += target_pulse;
 800a3ca:	4b18      	ldr	r3, [pc, #96]	; (800a42c <Calib+0xb4>)
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	4a16      	ldr	r2, [pc, #88]	; (800a42c <Calib+0xb4>)
 800a3d4:	6093      	str	r3, [r2, #8]

	}
	if(target_pulse < 0 )
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da15      	bge.n	800a408 <Calib+0x90>
	{
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a3dc:	e006      	b.n	800a3ec <Calib+0x74>
		{
			Acceleration = 0;
 800a3de:	4b10      	ldr	r3, [pc, #64]	; (800a420 <Calib+0xa8>)
 800a3e0:	f04f 0200 	mov.w	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = -70;
 800a3e6:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <Calib+0xac>)
 800a3e8:	4a12      	ldr	r2, [pc, #72]	; (800a434 <Calib+0xbc>)
 800a3ea:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a3ec:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <Calib+0xb4>)
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	441a      	add	r2, r3
 800a3f4:	4b0e      	ldr	r3, [pc, #56]	; (800a430 <Calib+0xb8>)
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	dbf0      	blt.n	800a3de <Calib+0x66>
		}
		KeepPulse[BODY] += target_pulse;
 800a3fc:	4b0b      	ldr	r3, [pc, #44]	; (800a42c <Calib+0xb4>)
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	4a09      	ldr	r2, [pc, #36]	; (800a42c <Calib+0xb4>)
 800a406:	6093      	str	r3, [r2, #8]
	}
	TargetVelocity[BODY] = 0;
 800a408:	4b06      	ldr	r3, [pc, #24]	; (800a424 <Calib+0xac>)
 800a40a:	f04f 0200 	mov.w	r2, #0
 800a40e:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800a410:	4b03      	ldr	r3, [pc, #12]	; (800a420 <Calib+0xa8>)
 800a412:	f04f 0200 	mov.w	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
}
 800a418:	bf00      	nop
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	200002d4 	.word	0x200002d4
 800a424:	20000294 	.word	0x20000294
 800a428:	428c0000 	.word	0x428c0000
 800a42c:	200002a0 	.word	0x200002a0
 800a430:	200002b8 	.word	0x200002b8
 800a434:	c28c0000 	.word	0xc28c0000
 800a438:	8fa963a1 	.word	0x8fa963a1
 800a43c:	3f5023d2 	.word	0x3f5023d2

0800a440 <Compensate>:
void Compensate()
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
	//誤差補正する
	//Pos.を考え中
	Pos.Act = compensate;
 800a444:	4b06      	ldr	r3, [pc, #24]	; (800a460 <Compensate+0x20>)
 800a446:	2206      	movs	r2, #6
 800a448:	711a      	strb	r2, [r3, #4]
	//前壁補正
	TargetPhoto[FL];

#else
	//バック補正
	ControlWall();
 800a44a:	f7fe fe7d 	bl	8009148 <ControlWall>
	Calib(-50);
 800a44e:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800a452:	f7ff ff91 	bl	800a378 <Calib>
	HAL_Delay(250);
 800a456:	20fa      	movs	r0, #250	; 0xfa
 800a458:	f005 fb32 	bl	800fac0 <HAL_Delay>

//	Accel(7,-70);
//	Decel(7,0);
#endif

}
 800a45c:	bf00      	nop
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20000000 	.word	0x20000000
 800a464:	00000000 	.word	0x00000000

0800a468 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 800a468:	b5b0      	push	{r4, r5, r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	ed87 0a03 	vstr	s0, [r7, #12]
 800a472:	edc7 0a02 	vstr	s1, [r7, #8]
 800a476:	ed87 1a01 	vstr	s2, [r7, #4]
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 800a47a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a47e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a482:	ee17 0a90 	vmov	r0, s15
 800a486:	f7fd ff97 	bl	80083b8 <__aeabi_f2d>
 800a48a:	a377      	add	r3, pc, #476	; (adr r3, 800a668 <GoStraight+0x200>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f7fe f914 	bl	80086bc <__aeabi_ddiv>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4610      	mov	r0, r2
 800a49a:	4619      	mov	r1, r3
 800a49c:	f7fe fa94 	bl	80089c8 <__aeabi_d2iz>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	617b      	str	r3, [r7, #20]

	if(accel != 0) //加速するとき
 800a4a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a4a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b0:	d022      	beq.n	800a4f8 <GoStraight+0x90>
	{
		WallWarn();
 800a4b2:	f7fe fe3d 	bl	8009130 <WallWarn>
		ControlWall();
 800a4b6:	f7fe fe47 	bl	8009148 <ControlWall>
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800a4ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800a4be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a4c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a4c6:	ed97 7a02 	vldr	s14, [r7, #8]
 800a4ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800a4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4d2:	eef0 0a67 	vmov.f32	s1, s15
 800a4d6:	eeb0 0a66 	vmov.f32	s0, s13
 800a4da:	f7ff fd95 	bl	800a008 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 800a4de:	bf00      	nop
 800a4e0:	4b5b      	ldr	r3, [pc, #364]	; (800a650 <GoStraight+0x1e8>)
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	0fd9      	lsrs	r1, r3, #31
 800a4e8:	440b      	add	r3, r1
 800a4ea:	105b      	asrs	r3, r3, #1
 800a4ec:	441a      	add	r2, r3
 800a4ee:	4b59      	ldr	r3, [pc, #356]	; (800a654 <GoStraight+0x1ec>)
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	dcf4      	bgt.n	800a4e0 <GoStraight+0x78>
 800a4f6:	e082      	b.n	800a5fe <GoStraight+0x196>
	//		}
		}
	}
	else
	{
		Pos.Act = straight;
 800a4f8:	4b57      	ldr	r3, [pc, #348]	; (800a658 <GoStraight+0x1f0>)
 800a4fa:	2205      	movs	r2, #5
 800a4fc:	711a      	strb	r2, [r3, #4]
		WallSafe();
 800a4fe:	f7fe fe0b 	bl	8009118 <WallSafe>
		ControlWall();
 800a502:	f7fe fe21 	bl	8009148 <ControlWall>
		Calc = SearchOrFast;
 800a506:	4b55      	ldr	r3, [pc, #340]	; (800a65c <GoStraight+0x1f4>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a55      	ldr	r2, [pc, #340]	; (800a660 <GoStraight+0x1f8>)
 800a50c:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a50e:	e06e      	b.n	800a5ee <GoStraight+0x186>
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 800a510:	4b4f      	ldr	r3, [pc, #316]	; (800a650 <GoStraight+0x1e8>)
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	4618      	mov	r0, r3
 800a516:	f7fd ff3d 	bl	8008394 <__aeabi_i2d>
 800a51a:	4604      	mov	r4, r0
 800a51c:	460d      	mov	r5, r1
 800a51e:	6978      	ldr	r0, [r7, #20]
 800a520:	f7fd ff38 	bl	8008394 <__aeabi_i2d>
 800a524:	a346      	add	r3, pc, #280	; (adr r3, 800a640 <GoStraight+0x1d8>)
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	f7fd ff9d 	bl	8008468 <__aeabi_dmul>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4620      	mov	r0, r4
 800a534:	4629      	mov	r1, r5
 800a536:	f7fd fde1 	bl	80080fc <__adddf3>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	4614      	mov	r4, r2
 800a540:	461d      	mov	r5, r3
 800a542:	4b44      	ldr	r3, [pc, #272]	; (800a654 <GoStraight+0x1ec>)
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	4618      	mov	r0, r3
 800a548:	f7fd ff24 	bl	8008394 <__aeabi_i2d>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4620      	mov	r0, r4
 800a552:	4629      	mov	r1, r5
 800a554:	f7fe f9fa 	bl	800894c <__aeabi_dcmplt>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d011      	beq.n	800a582 <GoStraight+0x11a>
			{
				WallWarn();
 800a55e:	f7fe fde7 	bl	8009130 <WallWarn>
				PIDChangeFlag(L_WALL_PID, 0);
 800a562:	2100      	movs	r1, #0
 800a564:	2002      	movs	r0, #2
 800a566:	f003 f8b9 	bl	800d6dc <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800a56a:	2100      	movs	r1, #0
 800a56c:	2003      	movs	r0, #3
 800a56e:	f003 f8b5 	bl	800d6dc <PIDChangeFlag>
				PIDChangeFlag(D_WALL_PID, 0);
 800a572:	2100      	movs	r1, #0
 800a574:	2001      	movs	r0, #1
 800a576:	f003 f8b1 	bl	800d6dc <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800a57a:	2101      	movs	r1, #1
 800a57c:	2000      	movs	r0, #0
 800a57e:	f003 f8ad 	bl	800d6dc <PIDChangeFlag>
			}
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a582:	4b33      	ldr	r3, [pc, #204]	; (800a650 <GoStraight+0x1e8>)
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	4618      	mov	r0, r3
 800a588:	f7fd ff04 	bl	8008394 <__aeabi_i2d>
 800a58c:	4604      	mov	r4, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	6978      	ldr	r0, [r7, #20]
 800a592:	f7fd feff 	bl	8008394 <__aeabi_i2d>
 800a596:	a32c      	add	r3, pc, #176	; (adr r3, 800a648 <GoStraight+0x1e0>)
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	f7fd ff64 	bl	8008468 <__aeabi_dmul>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7fd fda8 	bl	80080fc <__adddf3>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	461d      	mov	r5, r3
 800a5b4:	4b27      	ldr	r3, [pc, #156]	; (800a654 <GoStraight+0x1ec>)
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fd feeb 	bl	8008394 <__aeabi_i2d>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	f7fe f9c1 	bl	800894c <__aeabi_dcmplt>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d100      	bne.n	800a5d2 <GoStraight+0x16a>
 800a5d0:	e00d      	b.n	800a5ee <GoStraight+0x186>
 800a5d2:	4b23      	ldr	r3, [pc, #140]	; (800a660 <GoStraight+0x1f8>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d109      	bne.n	800a5ee <GoStraight+0x186>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a5da:	f001 f8cd 	bl	800b778 <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a5de:	2201      	movs	r2, #1
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	f001 fa36 	bl	800ba54 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 800a5e8:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <GoStraight+0x1f8>)
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	601a      	str	r2, [r3, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a5ee:	4b18      	ldr	r3, [pc, #96]	; (800a650 <GoStraight+0x1e8>)
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	4b17      	ldr	r3, [pc, #92]	; (800a654 <GoStraight+0x1ec>)
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	dc88      	bgt.n	800a510 <GoStraight+0xa8>
	//余分に加速した場合、あとの減速で速度を落としきれないことになっていたので、減速時にその時の速度を使うようにした。
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	int target_pulse = (int)(2*(move_distance/2)/MM_PER_PULSE);
//	int keep_pulse = TotalPulse[BODY];
	//WallWarn();
	Acceleration = 0;
 800a5fe:	4b19      	ldr	r3, [pc, #100]	; (800a664 <GoStraight+0x1fc>)
 800a600:	f04f 0200 	mov.w	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800a606:	4b12      	ldr	r3, [pc, #72]	; (800a650 <GoStraight+0x1e8>)
 800a608:	689a      	ldr	r2, [r3, #8]
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	4413      	add	r3, r2
 800a60e:	4a10      	ldr	r2, [pc, #64]	; (800a650 <GoStraight+0x1e8>)
 800a610:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a612:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <GoStraight+0x1e8>)
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	0fd9      	lsrs	r1, r3, #31
 800a61a:	440b      	add	r3, r1
 800a61c:	105b      	asrs	r3, r3, #1
 800a61e:	4413      	add	r3, r2
 800a620:	4a0b      	ldr	r2, [pc, #44]	; (800a650 <GoStraight+0x1e8>)
 800a622:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a624:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <GoStraight+0x1e8>)
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	0fd9      	lsrs	r1, r3, #31
 800a62c:	440b      	add	r3, r1
 800a62e:	105b      	asrs	r3, r3, #1
 800a630:	4413      	add	r3, r2
 800a632:	4a07      	ldr	r2, [pc, #28]	; (800a650 <GoStraight+0x1e8>)
 800a634:	6053      	str	r3, [r2, #4]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 800a636:	bf00      	nop
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bdb0      	pop	{r4, r5, r7, pc}
 800a63e:	bf00      	nop
 800a640:	9999999a 	.word	0x9999999a
 800a644:	3fd99999 	.word	0x3fd99999
 800a648:	9999999a 	.word	0x9999999a
 800a64c:	3fe99999 	.word	0x3fe99999
 800a650:	200002a0 	.word	0x200002a0
 800a654:	200002b8 	.word	0x200002b8
 800a658:	20000000 	.word	0x20000000
 800a65c:	20000260 	.word	0x20000260
 800a660:	2000025c 	.word	0x2000025c
 800a664:	200002d4 	.word	0x200002d4
 800a668:	8fa963a1 	.word	0x8fa963a1
 800a66c:	3f5023d2 	.word	0x3f5023d2

0800a670 <TurnRight>:
void TurnRight(char mode)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	2b53      	cmp	r3, #83	; 0x53
 800a67e:	d031      	beq.n	800a6e4 <TurnRight+0x74>
 800a680:	2b54      	cmp	r3, #84	; 0x54
 800a682:	d132      	bne.n	800a6ea <TurnRight+0x7a>
	{
	case 'T' :
		//減速
		Decel(45, 0);
 800a684:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800a700 <TurnRight+0x90>
 800a688:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800a704 <TurnRight+0x94>
 800a68c:	f7ff fd84 	bl	800a198 <Decel>

		//補正
		//Calib();
		Rotate( 90 , 1.5*M_PI);
 800a690:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a708 <TurnRight+0x98>
 800a694:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800a70c <TurnRight+0x9c>
 800a698:	f7ff f8be 	bl	8009818 <Rotate>

		TargetAngle += 90*M_PI/180;
 800a69c:	4b1c      	ldr	r3, [pc, #112]	; (800a710 <TurnRight+0xa0>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fd fe89 	bl	80083b8 <__aeabi_f2d>
 800a6a6:	a314      	add	r3, pc, #80	; (adr r3, 800a6f8 <TurnRight+0x88>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f7fd fd26 	bl	80080fc <__adddf3>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	f7fe f9ce 	bl	8008a58 <__aeabi_d2f>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	4a14      	ldr	r2, [pc, #80]	; (800a710 <TurnRight+0xa0>)
 800a6c0:	6013      	str	r3, [r2, #0]

		//ここも微妙。リセットするか,delayも
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(250);
 800a6c2:	20fa      	movs	r0, #250	; 0xfa
 800a6c4:	f005 f9fc 	bl	800fac0 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	f003 f806 	bl	800d6dc <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 800a6d0:	4b10      	ldr	r3, [pc, #64]	; (800a714 <TurnRight+0xa4>)
 800a6d2:	edd3 7a00 	vldr	s15, [r3]
 800a6d6:	eef0 0a67 	vmov.f32	s1, s15
 800a6da:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a704 <TurnRight+0x94>
 800a6de:	f7ff fc93 	bl	800a008 <Accel>
		break;
 800a6e2:	e003      	b.n	800a6ec <TurnRight+0x7c>
	case 'S':
		//スラローム
		SlalomRight();
 800a6e4:	f7ff f93c 	bl	8009960 <SlalomRight>
		break;
 800a6e8:	e000      	b.n	800a6ec <TurnRight+0x7c>
	default :
		break;
 800a6ea:	bf00      	nop
	}


}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	f3af 8000 	nop.w
 800a6f8:	54442d18 	.word	0x54442d18
 800a6fc:	3ff921fb 	.word	0x3ff921fb
 800a700:	00000000 	.word	0x00000000
 800a704:	42340000 	.word	0x42340000
 800a708:	4096cbe4 	.word	0x4096cbe4
 800a70c:	42b40000 	.word	0x42b40000
 800a710:	200002e0 	.word	0x200002e0
 800a714:	200002cc 	.word	0x200002cc

0800a718 <TurnLeft>:
void TurnLeft(char mode)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	2b53      	cmp	r3, #83	; 0x53
 800a726:	d031      	beq.n	800a78c <TurnLeft+0x74>
 800a728:	2b54      	cmp	r3, #84	; 0x54
 800a72a:	d132      	bne.n	800a792 <TurnLeft+0x7a>
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 800a72c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800a7a8 <TurnLeft+0x90>
 800a730:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800a7ac <TurnLeft+0x94>
 800a734:	f7ff fd30 	bl	800a198 <Decel>

		//補正
		//Calib();
		Rotate( 90 , -1.5*M_PI);
 800a738:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a7b0 <TurnLeft+0x98>
 800a73c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800a7b4 <TurnLeft+0x9c>
 800a740:	f7ff f86a 	bl	8009818 <Rotate>
		//HAL_Delay(500);
		TargetAngle += -90*M_PI/180;
 800a744:	4b1c      	ldr	r3, [pc, #112]	; (800a7b8 <TurnLeft+0xa0>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fd fe35 	bl	80083b8 <__aeabi_f2d>
 800a74e:	a314      	add	r3, pc, #80	; (adr r3, 800a7a0 <TurnLeft+0x88>)
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	f7fd fcd0 	bl	80080f8 <__aeabi_dsub>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4610      	mov	r0, r2
 800a75e:	4619      	mov	r1, r3
 800a760:	f7fe f97a 	bl	8008a58 <__aeabi_d2f>
 800a764:	4603      	mov	r3, r0
 800a766:	4a14      	ldr	r2, [pc, #80]	; (800a7b8 <TurnLeft+0xa0>)
 800a768:	6013      	str	r3, [r2, #0]
		//補正
		//Calib();
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(250);
 800a76a:	20fa      	movs	r0, #250	; 0xfa
 800a76c:	f005 f9a8 	bl	800fac0 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a770:	2101      	movs	r1, #1
 800a772:	2000      	movs	r0, #0
 800a774:	f002 ffb2 	bl	800d6dc <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 800a778:	4b10      	ldr	r3, [pc, #64]	; (800a7bc <TurnLeft+0xa4>)
 800a77a:	edd3 7a00 	vldr	s15, [r3]
 800a77e:	eef0 0a67 	vmov.f32	s1, s15
 800a782:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a7ac <TurnLeft+0x94>
 800a786:	f7ff fc3f 	bl	800a008 <Accel>
		break;
 800a78a:	e003      	b.n	800a794 <TurnLeft+0x7c>
	case 'S':
		//スラローム
		SlalomLeft();
 800a78c:	f7ff fa98 	bl	8009cc0 <SlalomLeft>
		break;
 800a790:	e000      	b.n	800a794 <TurnLeft+0x7c>
	default :
		break;
 800a792:	bf00      	nop
	}

}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	f3af 8000 	nop.w
 800a7a0:	54442d18 	.word	0x54442d18
 800a7a4:	3ff921fb 	.word	0x3ff921fb
 800a7a8:	00000000 	.word	0x00000000
 800a7ac:	42340000 	.word	0x42340000
 800a7b0:	c096cbe4 	.word	0xc096cbe4
 800a7b4:	42b40000 	.word	0x42b40000
 800a7b8:	200002e0 	.word	0x200002e0
 800a7bc:	200002cc 	.word	0x200002cc

0800a7c0 <GoBack>:
void GoBack()
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800a7c4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a830 <GoBack+0x70>
 800a7c8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a834 <GoBack+0x74>
 800a7cc:	f7ff fce4 	bl	800a198 <Decel>
//	HAL_Delay(500);
	//補正して
	//Compensate();
	//Calib();
	//回転して
	Rotate(180, 1.5*M_PI);//もしくは二回とも左。ここの加速でバグ。
 800a7d0:	eddf 0a19 	vldr	s1, [pc, #100]	; 800a838 <GoBack+0x78>
 800a7d4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a83c <GoBack+0x7c>
 800a7d8:	f7ff f81e 	bl	8009818 <Rotate>
//	PIDReset(R_VELO_PID);
//	PIDReset(A_VELO_PID);
	//HAL_Delay(200);
	//Rotate(90, 2.5);
	//HAL_Delay(500);
	TargetAngle += 180*M_PI/180;
 800a7dc:	4b18      	ldr	r3, [pc, #96]	; (800a840 <GoBack+0x80>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fd fde9 	bl	80083b8 <__aeabi_f2d>
 800a7e6:	a310      	add	r3, pc, #64	; (adr r3, 800a828 <GoBack+0x68>)
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f7fd fc86 	bl	80080fc <__adddf3>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	f7fe f92e 	bl	8008a58 <__aeabi_d2f>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	4a10      	ldr	r2, [pc, #64]	; (800a840 <GoBack+0x80>)
 800a800:	6013      	str	r3, [r2, #0]
	//加速する
//	PIDReset(L_VELO_PID);
//	PIDReset(R_VELO_PID);
//	PIDReset(A_VELO_PID);
	HAL_Delay(200);
 800a802:	20c8      	movs	r0, #200	; 0xc8
 800a804:	f005 f95c 	bl	800fac0 <HAL_Delay>
	Compensate();
 800a808:	f7ff fe1a 	bl	800a440 <Compensate>
	//PIDChangeFlag( A_VELO_PID, 1);
	Accel(61.5, ExploreVelocity);
 800a80c:	4b0d      	ldr	r3, [pc, #52]	; (800a844 <GoBack+0x84>)
 800a80e:	edd3 7a00 	vldr	s15, [r3]
 800a812:	eef0 0a67 	vmov.f32	s1, s15
 800a816:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a848 <GoBack+0x88>
 800a81a:	f7ff fbf5 	bl	800a008 <Accel>
	//ここまでで目標走行距離を完了する

}
 800a81e:	bf00      	nop
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	f3af 8000 	nop.w
 800a828:	54442d18 	.word	0x54442d18
 800a82c:	400921fb 	.word	0x400921fb
 800a830:	00000000 	.word	0x00000000
 800a834:	42340000 	.word	0x42340000
 800a838:	4096cbe4 	.word	0x4096cbe4
 800a83c:	43340000 	.word	0x43340000
 800a840:	200002e0 	.word	0x200002e0
 800a844:	200002cc 	.word	0x200002cc
 800a848:	42760000 	.word	0x42760000

0800a84c <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
void SelectAction(char turn_mode)	//前後左右であらわす
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir)
 800a856:	4b18      	ldr	r3, [pc, #96]	; (800a8b8 <SelectAction+0x6c>)
 800a858:	789b      	ldrb	r3, [r3, #2]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d826      	bhi.n	800a8ac <SelectAction+0x60>
 800a85e:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <SelectAction+0x18>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a875 	.word	0x0800a875
 800a868:	0800a893 	.word	0x0800a893
 800a86c:	0800a8a7 	.word	0x0800a8a7
 800a870:	0800a89d 	.word	0x0800a89d
	//直進
	case front:
		//直進flagオン
		//PIDChangeFlag( A_VELO_PID, 1);

		GoStraight(90, ExploreVelocity, AddVelocity);
 800a874:	4b11      	ldr	r3, [pc, #68]	; (800a8bc <SelectAction+0x70>)
 800a876:	edd3 7a00 	vldr	s15, [r3]
 800a87a:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <SelectAction+0x74>)
 800a87c:	ed93 7a00 	vldr	s14, [r3]
 800a880:	eeb0 1a47 	vmov.f32	s2, s14
 800a884:	eef0 0a67 	vmov.f32	s1, s15
 800a888:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a8c4 <SelectAction+0x78>
 800a88c:	f7ff fdec 	bl	800a468 <GoStraight>

		break;
 800a890:	e00d      	b.n	800a8ae <SelectAction+0x62>
	//右方向
	case right:	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight(turn_mode);
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff feeb 	bl	800a670 <TurnRight>
		break;
 800a89a:	e008      	b.n	800a8ae <SelectAction+0x62>
	//左方向
	case left:
		TurnLeft(turn_mode);
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff ff3a 	bl	800a718 <TurnLeft>
		break;
 800a8a4:	e003      	b.n	800a8ae <SelectAction+0x62>
	case back:
		GoBack();	//Uターン
 800a8a6:	f7ff ff8b 	bl	800a7c0 <GoBack>
		break;
 800a8aa:	e000      	b.n	800a8ae <SelectAction+0x62>


	default :
		break;
 800a8ac:	bf00      	nop

	}
}
 800a8ae:	bf00      	nop
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000000 	.word	0x20000000
 800a8bc:	200002cc 	.word	0x200002cc
 800a8c0:	200002d0 	.word	0x200002d0
 800a8c4:	42b40000 	.word	0x42b40000

0800a8c8 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 800a8f4:	4a2c      	ldr	r2, [pc, #176]	; (800a9a8 <GetWallDataAverage+0xc4>)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	bfb8      	it	lt
 800a904:	425b      	neglt	r3, r3
 800a906:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800a908:	4927      	ldr	r1, [pc, #156]	; (800a9a8 <GetWallDataAverage+0xc4>)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800a912:	4a26      	ldr	r2, [pc, #152]	; (800a9ac <GetWallDataAverage+0xc8>)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	441a      	add	r2, r3
 800a91e:	4923      	ldr	r1, [pc, #140]	; (800a9ac <GetWallDataAverage+0xc8>)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800a926:	4a22      	ldr	r2, [pc, #136]	; (800a9b0 <GetWallDataAverage+0xcc>)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	491f      	ldr	r1, [pc, #124]	; (800a9b0 <GetWallDataAverage+0xcc>)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800a938:	4a1d      	ldr	r2, [pc, #116]	; (800a9b0 <GetWallDataAverage+0xcc>)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	429a      	cmp	r2, r3
 800a944:	d121      	bne.n	800a98a <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800a946:	4a19      	ldr	r2, [pc, #100]	; (800a9ac <GetWallDataAverage+0xc8>)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a94e:	ee07 3a90 	vmov	s15, r3
 800a952:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a956:	4a16      	ldr	r2, [pc, #88]	; (800a9b0 <GetWallDataAverage+0xcc>)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a95e:	ee07 3a90 	vmov	s15, r3
 800a962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a96a:	4a12      	ldr	r2, [pc, #72]	; (800a9b4 <GetWallDataAverage+0xd0>)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800a976:	4a0d      	ldr	r2, [pc, #52]	; (800a9ac <GetWallDataAverage+0xc8>)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2100      	movs	r1, #0
 800a97c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 800a980:	4a0b      	ldr	r2, [pc, #44]	; (800a9b0 <GetWallDataAverage+0xcc>)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2100      	movs	r1, #0
 800a986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800a98a:	4a0a      	ldr	r2, [pc, #40]	; (800a9b4 <GetWallDataAverage+0xd0>)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	ee07 3a90 	vmov	s15, r3
}
 800a998:	eeb0 0a67 	vmov.f32	s0, s15
 800a99c:	371c      	adds	r7, #28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	20000218 	.word	0x20000218
 800a9ac:	20000228 	.word	0x20000228
 800a9b0:	20000238 	.word	0x20000238
 800a9b4:	20000248 	.word	0x20000248

0800a9b8 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	ed87 0a02 	vstr	s0, [r7, #8]
 800a9c4:	edc7 0a01 	vstr	s1, [r7, #4]
 800a9c8:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800a9cc:	f04f 0300 	mov.w	r3, #0
 800a9d0:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	ee07 3a90 	vmov	s15, r3
 800a9d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800a9e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a9ec:	ed97 7a00 	vldr	s14, [r7]
 800a9f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9f4:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	ee07 3a90 	vmov	s15, r3
}
 800a9fe:	eeb0 0a67 	vmov.f32	s0, s15
 800aa02:	371c      	adds	r7, #28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800aa16:	2301      	movs	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60bb      	str	r3, [r7, #8]
 800aa1e:	e007      	b.n	800aa30 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	fb02 f303 	mul.w	r3, r2, r3
 800aa28:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	60bb      	str	r3, [r7, #8]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	dbf3      	blt.n	800aa20 <IntegerPower+0x14>
	}
	return pattern_num;
 800aa38:	68fb      	ldr	r3, [r7, #12]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800aa46:	b480      	push	{r7}
 800aa48:	b08b      	sub	sp, #44	; 0x2c
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	ed87 0a03 	vstr	s0, [r7, #12]
 800aa50:	edc7 0a02 	vstr	s1, [r7, #8]
 800aa54:	ed87 1a01 	vstr	s2, [r7, #4]
 800aa58:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800aa5a:	edd7 6a03 	vldr	s13, [r7, #12]
 800aa5e:	ed97 7a01 	vldr	s14, [r7, #4]
 800aa62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa66:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800aa6a:	edd7 6a02 	vldr	s13, [r7, #8]
 800aa6e:	ed97 7a01 	vldr	s14, [r7, #4]
 800aa72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa76:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800aa7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa7e:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa82:	ee77 6a67 	vsub.f32	s13, s14, s15
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	ee07 3a90 	vmov	s15, r3
 800aa8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa94:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	623b      	str	r3, [r7, #32]
 800aaa0:	e018      	b.n	800aad4 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	ee07 3a90 	vmov	s15, r3
 800aaa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aaac:	edd7 7a05 	vldr	s15, [r7, #20]
 800aab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aab4:	edd7 7a06 	vldr	s15, [r7, #24]
 800aab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aabc:	ed97 7a07 	vldr	s14, [r7, #28]
 800aac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac8:	db01      	blt.n	800aace <GetBatteryLevel+0x88>
		{
			pattern = i;
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	3301      	adds	r3, #1
 800aad2:	623b      	str	r3, [r7, #32]
 800aad4:	6a3a      	ldr	r2, [r7, #32]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	429a      	cmp	r2, r3
 800aada:	dbe2      	blt.n	800aaa2 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aade:	4618      	mov	r0, r3
 800aae0:	372c      	adds	r7, #44	; 0x2c
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
	...

0800aaec <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 800aaf0:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <Buffering+0x24>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f00b f8b5 	bl	8015c68 <setbuf>
	  setbuf(stdin,NULL);
 800aafe:	4b04      	ldr	r3, [pc, #16]	; (800ab10 <Buffering+0x24>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	2100      	movs	r1, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f00b f8ae 	bl	8015c68 <setbuf>
}
 800ab0c:	bf00      	nop
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	20000028 	.word	0x20000028

0800ab14 <Copy_Gain>:
void Copy_Gain()
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b092      	sub	sp, #72	; 0x48
 800ab18:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 800ab1a:	4b2c      	ldr	r3, [pc, #176]	; (800abcc <Copy_Gain+0xb8>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 800ab20:	463b      	mov	r3, r7
 800ab22:	2240      	movs	r2, #64	; 0x40
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f00a f976 	bl	8014e18 <memset>
	data[0] = Pid[L_VELO_PID].KP;
 800ab2c:	4b28      	ldr	r3, [pc, #160]	; (800abd0 <Copy_Gain+0xbc>)
 800ab2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ab32:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 800ab34:	4b26      	ldr	r3, [pc, #152]	; (800abd0 <Copy_Gain+0xbc>)
 800ab36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab3a:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 800ab3c:	4b24      	ldr	r3, [pc, #144]	; (800abd0 <Copy_Gain+0xbc>)
 800ab3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab42:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 800ab44:	4b22      	ldr	r3, [pc, #136]	; (800abd0 <Copy_Gain+0xbc>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 800ab4a:	4b21      	ldr	r3, [pc, #132]	; (800abd0 <Copy_Gain+0xbc>)
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800ab50:	4b1f      	ldr	r3, [pc, #124]	; (800abd0 <Copy_Gain+0xbc>)
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 800ab56:	4b1e      	ldr	r3, [pc, #120]	; (800abd0 <Copy_Gain+0xbc>)
 800ab58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5a:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800ab5c:	4b1c      	ldr	r3, [pc, #112]	; (800abd0 <Copy_Gain+0xbc>)
 800ab5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab60:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 800ab62:	4b1b      	ldr	r3, [pc, #108]	; (800abd0 <Copy_Gain+0xbc>)
 800ab64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab66:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 800ab68:	4b19      	ldr	r3, [pc, #100]	; (800abd0 <Copy_Gain+0xbc>)
 800ab6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 800ab70:	4b17      	ldr	r3, [pc, #92]	; (800abd0 <Copy_Gain+0xbc>)
 800ab72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab76:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 800ab78:	4b15      	ldr	r3, [pc, #84]	; (800abd0 <Copy_Gain+0xbc>)
 800ab7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 800ab80:	4b13      	ldr	r3, [pc, #76]	; (800abd0 <Copy_Gain+0xbc>)
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800ab86:	4b12      	ldr	r3, [pc, #72]	; (800abd0 <Copy_Gain+0xbc>)
 800ab88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8a:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800ab8c:	4b10      	ldr	r3, [pc, #64]	; (800abd0 <Copy_Gain+0xbc>)
 800ab8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab90:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 800ab92:	2300      	movs	r3, #0
 800ab94:	643b      	str	r3, [r7, #64]	; 0x40
 800ab96:	e011      	b.n	800abbc <Copy_Gain+0xa8>
	{

		FLASH_Write_Word_F( address, data[i]);
 800ab98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	3348      	adds	r3, #72	; 0x48
 800ab9e:	443b      	add	r3, r7
 800aba0:	3b48      	subs	r3, #72	; 0x48
 800aba2:	edd3 7a00 	vldr	s15, [r3]
 800aba6:	eeb0 0a67 	vmov.f32	s0, s15
 800abaa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800abac:	f004 fb5e 	bl	800f26c <FLASH_Write_Word_F>
		address += 0x04;
 800abb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abb2:	3304      	adds	r3, #4
 800abb4:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 800abb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb8:	3301      	adds	r3, #1
 800abba:	643b      	str	r3, [r7, #64]	; 0x40
 800abbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abbe:	2b0e      	cmp	r3, #14
 800abc0:	ddea      	ble.n	800ab98 <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800abc2:	bf00      	nop
 800abc4:	bf00      	nop
 800abc6:	3748      	adds	r7, #72	; 0x48
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	0801a760 	.word	0x0801a760
 800abd0:	20000704 	.word	0x20000704

0800abd4 <Load_Gain>:
void Load_Gain()
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b094      	sub	sp, #80	; 0x50
 800abd8:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800abda:	4b57      	ldr	r3, [pc, #348]	; (800ad38 <Load_Gain+0x164>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 800abe0:	463b      	mov	r3, r7
 800abe2:	2240      	movs	r2, #64	; 0x40
 800abe4:	2100      	movs	r1, #0
 800abe6:	4618      	mov	r0, r3
 800abe8:	f00a f916 	bl	8014e18 <memset>

	//チェック
	int judge;
	uint8_t j=0;
 800abec:	2300      	movs	r3, #0
 800abee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800abf2:	2300      	movs	r3, #0
 800abf4:	647b      	str	r3, [r7, #68]	; 0x44
 800abf6:	e034      	b.n	800ac62 <Load_Gain+0x8e>
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 800abf8:	463a      	mov	r2, r7
 800abfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	4619      	mov	r1, r3
 800ac02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ac04:	f004 fb5c 	bl	800f2c0 <FLASH_Read_Word_F>
		address += 0x04;
 800ac08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 800ac0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	3350      	adds	r3, #80	; 0x50
 800ac14:	443b      	add	r3, r7
 800ac16:	3b50      	subs	r3, #80	; 0x50
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fd fbcc 	bl	80083b8 <__aeabi_f2d>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac26:	4845      	ldr	r0, [pc, #276]	; (800ad3c <Load_Gain+0x168>)
 800ac28:	f00a ff78 	bl	8015b1c <iprintf>
		//work_ram[]がデフォ値なら、そのまま
		judge = isnanf(data[i]);
 800ac2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	3350      	adds	r3, #80	; 0x50
 800ac32:	443b      	add	r3, r7
 800ac34:	3b50      	subs	r3, #80	; 0x50
 800ac36:	edd3 7a00 	vldr	s15, [r3]
 800ac3a:	eef4 7a67 	vcmp.f32	s15, s15
 800ac3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac42:	bf6c      	ite	vs
 800ac44:	2301      	movvs	r3, #1
 800ac46:	2300      	movvc	r3, #0
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	643b      	str	r3, [r7, #64]	; 0x40
		if(judge != 0)
 800ac4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <Load_Gain+0x88>
		{
			j++;
 800ac52:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ac56:	3301      	adds	r3, #1
 800ac58:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800ac5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac5e:	3301      	adds	r3, #1
 800ac60:	647b      	str	r3, [r7, #68]	; 0x44
 800ac62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac64:	2b0e      	cmp	r3, #14
 800ac66:	ddc7      	ble.n	800abf8 <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800ac68:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4834      	ldr	r0, [pc, #208]	; (800ad40 <Load_Gain+0x16c>)
 800ac70:	f00a ff54 	bl	8015b1c <iprintf>
		if(j == 15)//全てnan0であれば
 800ac74:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ac78:	2b0f      	cmp	r3, #15
 800ac7a:	d059      	beq.n	800ad30 <Load_Gain+0x15c>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800ac7c:	edd7 7a00 	vldr	s15, [r7]
 800ac80:	ed97 7a01 	vldr	s14, [r7, #4]
 800ac84:	edd7 6a02 	vldr	s13, [r7, #8]
 800ac88:	eeb0 1a66 	vmov.f32	s2, s13
 800ac8c:	eef0 0a47 	vmov.f32	s1, s14
 800ac90:	eeb0 0a67 	vmov.f32	s0, s15
 800ac94:	2004      	movs	r0, #4
 800ac96:	f002 fcf5 	bl	800d684 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800ac9a:	edd7 7a00 	vldr	s15, [r7]
 800ac9e:	ed97 7a01 	vldr	s14, [r7, #4]
 800aca2:	edd7 6a02 	vldr	s13, [r7, #8]
 800aca6:	eeb0 1a66 	vmov.f32	s2, s13
 800acaa:	eef0 0a47 	vmov.f32	s1, s14
 800acae:	eeb0 0a67 	vmov.f32	s0, s15
 800acb2:	2005      	movs	r0, #5
 800acb4:	f002 fce6 	bl	800d684 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800acb8:	edd7 7a03 	vldr	s15, [r7, #12]
 800acbc:	ed97 7a04 	vldr	s14, [r7, #16]
 800acc0:	edd7 6a05 	vldr	s13, [r7, #20]
 800acc4:	eeb0 1a66 	vmov.f32	s2, s13
 800acc8:	eef0 0a47 	vmov.f32	s1, s14
 800accc:	eeb0 0a67 	vmov.f32	s0, s15
 800acd0:	2000      	movs	r0, #0
 800acd2:	f002 fcd7 	bl	800d684 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800acd6:	edd7 7a06 	vldr	s15, [r7, #24]
 800acda:	ed97 7a07 	vldr	s14, [r7, #28]
 800acde:	edd7 6a08 	vldr	s13, [r7, #32]
 800ace2:	eeb0 1a66 	vmov.f32	s2, s13
 800ace6:	eef0 0a47 	vmov.f32	s1, s14
 800acea:	eeb0 0a67 	vmov.f32	s0, s15
 800acee:	2002      	movs	r0, #2
 800acf0:	f002 fcc8 	bl	800d684 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800acf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acfc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad00:	eeb0 1a66 	vmov.f32	s2, s13
 800ad04:	eef0 0a47 	vmov.f32	s1, s14
 800ad08:	eeb0 0a67 	vmov.f32	s0, s15
 800ad0c:	2003      	movs	r0, #3
 800ad0e:	f002 fcb9 	bl	800d684 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800ad12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ad16:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad1a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad1e:	eeb0 1a66 	vmov.f32	s2, s13
 800ad22:	eef0 0a47 	vmov.f32	s1, s14
 800ad26:	eeb0 0a67 	vmov.f32	s0, s15
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	f002 fcaa 	bl	800d684 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800ad30:	bf00      	nop
 800ad32:	3750      	adds	r7, #80	; 0x50
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	0801a760 	.word	0x0801a760
 800ad3c:	0801a4f4 	.word	0x0801a4f4
 800ad40:	0801a500 	.word	0x0801a500

0800ad44 <Change_Gain>:
void Change_Gain()
{
 800ad44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ad48:	b086      	sub	sp, #24
 800ad4a:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800ad4c:	48ab      	ldr	r0, [pc, #684]	; (800affc <Change_Gain+0x2b8>)
 800ad4e:	f007 fddc 	bl	801290a <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800ad52:	48ab      	ldr	r0, [pc, #684]	; (800b000 <Change_Gain+0x2bc>)
 800ad54:	f007 fdd9 	bl	801290a <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800ad58:	f004 fdac 	bl	800f8b4 <Motor_PWM_Stop>
	EmitterOFF();
 800ad5c:	f004 fcc4 	bl	800f6e8 <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 800ad60:	20c8      	movs	r0, #200	; 0xc8
 800ad62:	f004 fead 	bl	800fac0 <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 800ad66:	2330      	movs	r3, #48	; 0x30
 800ad68:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 800ad6a:	2330      	movs	r3, #48	; 0x30
 800ad6c:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800ad6e:	48a5      	ldr	r0, [pc, #660]	; (800b004 <Change_Gain+0x2c0>)
 800ad70:	f00a ff5a 	bl	8015c28 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800ad74:	4ba4      	ldr	r3, [pc, #656]	; (800b008 <Change_Gain+0x2c4>)
 800ad76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fd fb1c 	bl	80083b8 <__aeabi_f2d>
 800ad80:	4680      	mov	r8, r0
 800ad82:	4689      	mov	r9, r1
 800ad84:	4ba0      	ldr	r3, [pc, #640]	; (800b008 <Change_Gain+0x2c4>)
 800ad86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fd fb14 	bl	80083b8 <__aeabi_f2d>
 800ad90:	4604      	mov	r4, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	4b9c      	ldr	r3, [pc, #624]	; (800b008 <Change_Gain+0x2c4>)
 800ad96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fd fb0c 	bl	80083b8 <__aeabi_f2d>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ada8:	e9cd 4500 	strd	r4, r5, [sp]
 800adac:	4642      	mov	r2, r8
 800adae:	464b      	mov	r3, r9
 800adb0:	4896      	ldr	r0, [pc, #600]	; (800b00c <Change_Gain+0x2c8>)
 800adb2:	f00a feb3 	bl	8015b1c <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800adb6:	4b94      	ldr	r3, [pc, #592]	; (800b008 <Change_Gain+0x2c4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fd fafc 	bl	80083b8 <__aeabi_f2d>
 800adc0:	4680      	mov	r8, r0
 800adc2:	4689      	mov	r9, r1
 800adc4:	4b90      	ldr	r3, [pc, #576]	; (800b008 <Change_Gain+0x2c4>)
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fd faf5 	bl	80083b8 <__aeabi_f2d>
 800adce:	4604      	mov	r4, r0
 800add0:	460d      	mov	r5, r1
 800add2:	4b8d      	ldr	r3, [pc, #564]	; (800b008 <Change_Gain+0x2c4>)
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	4618      	mov	r0, r3
 800add8:	f7fd faee 	bl	80083b8 <__aeabi_f2d>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ade4:	e9cd 4500 	strd	r4, r5, [sp]
 800ade8:	4642      	mov	r2, r8
 800adea:	464b      	mov	r3, r9
 800adec:	4888      	ldr	r0, [pc, #544]	; (800b010 <Change_Gain+0x2cc>)
 800adee:	f00a fe95 	bl	8015b1c <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800adf2:	4b85      	ldr	r3, [pc, #532]	; (800b008 <Change_Gain+0x2c4>)
 800adf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fd fade 	bl	80083b8 <__aeabi_f2d>
 800adfc:	4680      	mov	r8, r0
 800adfe:	4689      	mov	r9, r1
 800ae00:	4b81      	ldr	r3, [pc, #516]	; (800b008 <Change_Gain+0x2c4>)
 800ae02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fd fad7 	bl	80083b8 <__aeabi_f2d>
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	460d      	mov	r5, r1
 800ae0e:	4b7e      	ldr	r3, [pc, #504]	; (800b008 <Change_Gain+0x2c4>)
 800ae10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fd fad0 	bl	80083b8 <__aeabi_f2d>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae20:	e9cd 4500 	strd	r4, r5, [sp]
 800ae24:	4642      	mov	r2, r8
 800ae26:	464b      	mov	r3, r9
 800ae28:	487a      	ldr	r0, [pc, #488]	; (800b014 <Change_Gain+0x2d0>)
 800ae2a:	f00a fe77 	bl	8015b1c <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800ae2e:	4b76      	ldr	r3, [pc, #472]	; (800b008 <Change_Gain+0x2c4>)
 800ae30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fd fabf 	bl	80083b8 <__aeabi_f2d>
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	4689      	mov	r9, r1
 800ae3e:	4b72      	ldr	r3, [pc, #456]	; (800b008 <Change_Gain+0x2c4>)
 800ae40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fd fab7 	bl	80083b8 <__aeabi_f2d>
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	460d      	mov	r5, r1
 800ae4e:	4b6e      	ldr	r3, [pc, #440]	; (800b008 <Change_Gain+0x2c4>)
 800ae50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fd faaf 	bl	80083b8 <__aeabi_f2d>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae62:	e9cd 4500 	strd	r4, r5, [sp]
 800ae66:	4642      	mov	r2, r8
 800ae68:	464b      	mov	r3, r9
 800ae6a:	486b      	ldr	r0, [pc, #428]	; (800b018 <Change_Gain+0x2d4>)
 800ae6c:	f00a fe56 	bl	8015b1c <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800ae70:	4b65      	ldr	r3, [pc, #404]	; (800b008 <Change_Gain+0x2c4>)
 800ae72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fd fa9f 	bl	80083b8 <__aeabi_f2d>
 800ae7a:	4680      	mov	r8, r0
 800ae7c:	4689      	mov	r9, r1
 800ae7e:	4b62      	ldr	r3, [pc, #392]	; (800b008 <Change_Gain+0x2c4>)
 800ae80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fd fa98 	bl	80083b8 <__aeabi_f2d>
 800ae88:	4604      	mov	r4, r0
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	4b5e      	ldr	r3, [pc, #376]	; (800b008 <Change_Gain+0x2c4>)
 800ae8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fd fa91 	bl	80083b8 <__aeabi_f2d>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae9e:	e9cd 4500 	strd	r4, r5, [sp]
 800aea2:	4642      	mov	r2, r8
 800aea4:	464b      	mov	r3, r9
 800aea6:	485d      	ldr	r0, [pc, #372]	; (800b01c <Change_Gain+0x2d8>)
 800aea8:	f00a fe38 	bl	8015b1c <iprintf>

		Buffering();
 800aeac:	f7ff fe1e 	bl	800aaec <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800aeb0:	485b      	ldr	r0, [pc, #364]	; (800b020 <Change_Gain+0x2dc>)
 800aeb2:	f00a fe33 	bl	8015b1c <iprintf>
 800aeb6:	1dfb      	adds	r3, r7, #7
 800aeb8:	4619      	mov	r1, r3
 800aeba:	485a      	ldr	r0, [pc, #360]	; (800b024 <Change_Gain+0x2e0>)
 800aebc:	f00a febc 	bl	8015c38 <iscanf>
		if(change_mode == '0')
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	2b30      	cmp	r3, #48	; 0x30
 800aec4:	f000 80f2 	beq.w	800b0ac <Change_Gain+0x368>
			break;
		}
		else
		{

			Buffering();
 800aec8:	f7ff fe10 	bl	800aaec <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800aecc:	4856      	ldr	r0, [pc, #344]	; (800b028 <Change_Gain+0x2e4>)
 800aece:	f00a fe25 	bl	8015b1c <iprintf>
 800aed2:	1dbb      	adds	r3, r7, #6
 800aed4:	4619      	mov	r1, r3
 800aed6:	4853      	ldr	r0, [pc, #332]	; (800b024 <Change_Gain+0x2e0>)
 800aed8:	f00a feae 	bl	8015c38 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	4619      	mov	r1, r3
 800aee0:	79bb      	ldrb	r3, [r7, #6]
 800aee2:	461a      	mov	r2, r3
 800aee4:	4851      	ldr	r0, [pc, #324]	; (800b02c <Change_Gain+0x2e8>)
 800aee6:	f00a fe19 	bl	8015b1c <iprintf>

			Buffering();
 800aeea:	f7ff fdff 	bl	800aaec <Buffering>
			printf("\r\n値を入力 : ");
 800aeee:	4850      	ldr	r0, [pc, #320]	; (800b030 <Change_Gain+0x2ec>)
 800aef0:	f00a fe14 	bl	8015b1c <iprintf>

			switch(change_mode)
 800aef4:	79fb      	ldrb	r3, [r7, #7]
 800aef6:	3b31      	subs	r3, #49	; 0x31
 800aef8:	2b04      	cmp	r3, #4
 800aefa:	f200 80bf 	bhi.w	800b07c <Change_Gain+0x338>
 800aefe:	a201      	add	r2, pc, #4	; (adr r2, 800af04 <Change_Gain+0x1c0>)
 800af00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af04:	0800af19 	.word	0x0800af19
 800af08:	0800af4b 	.word	0x0800af4b
 800af0c:	0800af7d 	.word	0x0800af7d
 800af10:	0800afad 	.word	0x0800afad
 800af14:	0800afdd 	.word	0x0800afdd
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 800af18:	79bb      	ldrb	r3, [r7, #6]
 800af1a:	2b70      	cmp	r3, #112	; 0x70
 800af1c:	d104      	bne.n	800af28 <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 800af1e:	4945      	ldr	r1, [pc, #276]	; (800b034 <Change_Gain+0x2f0>)
 800af20:	4845      	ldr	r0, [pc, #276]	; (800b038 <Change_Gain+0x2f4>)
 800af22:	f00a fe89 	bl	8015c38 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 800af26:	e0ad      	b.n	800b084 <Change_Gain+0x340>
				else if(pid == 'i')
 800af28:	79bb      	ldrb	r3, [r7, #6]
 800af2a:	2b69      	cmp	r3, #105	; 0x69
 800af2c:	d104      	bne.n	800af38 <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800af2e:	4943      	ldr	r1, [pc, #268]	; (800b03c <Change_Gain+0x2f8>)
 800af30:	4841      	ldr	r0, [pc, #260]	; (800b038 <Change_Gain+0x2f4>)
 800af32:	f00a fe81 	bl	8015c38 <iscanf>
				break;
 800af36:	e0a5      	b.n	800b084 <Change_Gain+0x340>
				else if(pid == 'd')
 800af38:	79bb      	ldrb	r3, [r7, #6]
 800af3a:	2b64      	cmp	r3, #100	; 0x64
 800af3c:	f040 80a2 	bne.w	800b084 <Change_Gain+0x340>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800af40:	493f      	ldr	r1, [pc, #252]	; (800b040 <Change_Gain+0x2fc>)
 800af42:	483d      	ldr	r0, [pc, #244]	; (800b038 <Change_Gain+0x2f4>)
 800af44:	f00a fe78 	bl	8015c38 <iscanf>
				break;
 800af48:	e09c      	b.n	800b084 <Change_Gain+0x340>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 800af4a:	79bb      	ldrb	r3, [r7, #6]
 800af4c:	2b70      	cmp	r3, #112	; 0x70
 800af4e:	d104      	bne.n	800af5a <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 800af50:	492d      	ldr	r1, [pc, #180]	; (800b008 <Change_Gain+0x2c4>)
 800af52:	4839      	ldr	r0, [pc, #228]	; (800b038 <Change_Gain+0x2f4>)
 800af54:	f00a fe70 	bl	8015c38 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 800af58:	e096      	b.n	800b088 <Change_Gain+0x344>
				else if(pid == 'i')
 800af5a:	79bb      	ldrb	r3, [r7, #6]
 800af5c:	2b69      	cmp	r3, #105	; 0x69
 800af5e:	d104      	bne.n	800af6a <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800af60:	4938      	ldr	r1, [pc, #224]	; (800b044 <Change_Gain+0x300>)
 800af62:	4835      	ldr	r0, [pc, #212]	; (800b038 <Change_Gain+0x2f4>)
 800af64:	f00a fe68 	bl	8015c38 <iscanf>
				break;
 800af68:	e08e      	b.n	800b088 <Change_Gain+0x344>
				else if(pid == 'd')
 800af6a:	79bb      	ldrb	r3, [r7, #6]
 800af6c:	2b64      	cmp	r3, #100	; 0x64
 800af6e:	f040 808b 	bne.w	800b088 <Change_Gain+0x344>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800af72:	4935      	ldr	r1, [pc, #212]	; (800b048 <Change_Gain+0x304>)
 800af74:	4830      	ldr	r0, [pc, #192]	; (800b038 <Change_Gain+0x2f4>)
 800af76:	f00a fe5f 	bl	8015c38 <iscanf>
				break;
 800af7a:	e085      	b.n	800b088 <Change_Gain+0x344>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 800af7c:	79bb      	ldrb	r3, [r7, #6]
 800af7e:	2b70      	cmp	r3, #112	; 0x70
 800af80:	d104      	bne.n	800af8c <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 800af82:	4932      	ldr	r1, [pc, #200]	; (800b04c <Change_Gain+0x308>)
 800af84:	482c      	ldr	r0, [pc, #176]	; (800b038 <Change_Gain+0x2f4>)
 800af86:	f00a fe57 	bl	8015c38 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 800af8a:	e07f      	b.n	800b08c <Change_Gain+0x348>
				else if(pid == 'i')
 800af8c:	79bb      	ldrb	r3, [r7, #6]
 800af8e:	2b69      	cmp	r3, #105	; 0x69
 800af90:	d104      	bne.n	800af9c <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800af92:	492f      	ldr	r1, [pc, #188]	; (800b050 <Change_Gain+0x30c>)
 800af94:	4828      	ldr	r0, [pc, #160]	; (800b038 <Change_Gain+0x2f4>)
 800af96:	f00a fe4f 	bl	8015c38 <iscanf>
				break;
 800af9a:	e077      	b.n	800b08c <Change_Gain+0x348>
				else if(pid == 'd')
 800af9c:	79bb      	ldrb	r3, [r7, #6]
 800af9e:	2b64      	cmp	r3, #100	; 0x64
 800afa0:	d174      	bne.n	800b08c <Change_Gain+0x348>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800afa2:	492c      	ldr	r1, [pc, #176]	; (800b054 <Change_Gain+0x310>)
 800afa4:	4824      	ldr	r0, [pc, #144]	; (800b038 <Change_Gain+0x2f4>)
 800afa6:	f00a fe47 	bl	8015c38 <iscanf>
				break;
 800afaa:	e06f      	b.n	800b08c <Change_Gain+0x348>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 800afac:	79bb      	ldrb	r3, [r7, #6]
 800afae:	2b70      	cmp	r3, #112	; 0x70
 800afb0:	d104      	bne.n	800afbc <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 800afb2:	4929      	ldr	r1, [pc, #164]	; (800b058 <Change_Gain+0x314>)
 800afb4:	4820      	ldr	r0, [pc, #128]	; (800b038 <Change_Gain+0x2f4>)
 800afb6:	f00a fe3f 	bl	8015c38 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 800afba:	e069      	b.n	800b090 <Change_Gain+0x34c>
				else if(pid == 'i')
 800afbc:	79bb      	ldrb	r3, [r7, #6]
 800afbe:	2b69      	cmp	r3, #105	; 0x69
 800afc0:	d104      	bne.n	800afcc <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800afc2:	4926      	ldr	r1, [pc, #152]	; (800b05c <Change_Gain+0x318>)
 800afc4:	481c      	ldr	r0, [pc, #112]	; (800b038 <Change_Gain+0x2f4>)
 800afc6:	f00a fe37 	bl	8015c38 <iscanf>
				break;
 800afca:	e061      	b.n	800b090 <Change_Gain+0x34c>
				else if(pid == 'd')
 800afcc:	79bb      	ldrb	r3, [r7, #6]
 800afce:	2b64      	cmp	r3, #100	; 0x64
 800afd0:	d15e      	bne.n	800b090 <Change_Gain+0x34c>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800afd2:	4923      	ldr	r1, [pc, #140]	; (800b060 <Change_Gain+0x31c>)
 800afd4:	4818      	ldr	r0, [pc, #96]	; (800b038 <Change_Gain+0x2f4>)
 800afd6:	f00a fe2f 	bl	8015c38 <iscanf>
				break;
 800afda:	e059      	b.n	800b090 <Change_Gain+0x34c>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800afdc:	79bb      	ldrb	r3, [r7, #6]
 800afde:	2b70      	cmp	r3, #112	; 0x70
 800afe0:	d104      	bne.n	800afec <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 800afe2:	4920      	ldr	r1, [pc, #128]	; (800b064 <Change_Gain+0x320>)
 800afe4:	4814      	ldr	r0, [pc, #80]	; (800b038 <Change_Gain+0x2f4>)
 800afe6:	f00a fe27 	bl	8015c38 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 800afea:	e053      	b.n	800b094 <Change_Gain+0x350>
				else if(pid == 'i')
 800afec:	79bb      	ldrb	r3, [r7, #6]
 800afee:	2b69      	cmp	r3, #105	; 0x69
 800aff0:	d13c      	bne.n	800b06c <Change_Gain+0x328>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800aff2:	491d      	ldr	r1, [pc, #116]	; (800b068 <Change_Gain+0x324>)
 800aff4:	4810      	ldr	r0, [pc, #64]	; (800b038 <Change_Gain+0x2f4>)
 800aff6:	f00a fe1f 	bl	8015c38 <iscanf>
				break;
 800affa:	e04b      	b.n	800b094 <Change_Gain+0x350>
 800affc:	20000a0c 	.word	0x20000a0c
 800b000:	20000b4c 	.word	0x20000b4c
 800b004:	0801a508 	.word	0x0801a508
 800b008:	20000704 	.word	0x20000704
 800b00c:	0801a520 	.word	0x0801a520
 800b010:	0801a540 	.word	0x0801a540
 800b014:	0801a55c 	.word	0x0801a55c
 800b018:	0801a578 	.word	0x0801a578
 800b01c:	0801a594 	.word	0x0801a594
 800b020:	0801a5b0 	.word	0x0801a5b0
 800b024:	0801a5c8 	.word	0x0801a5c8
 800b028:	0801a5cc 	.word	0x0801a5cc
 800b02c:	0801a5e0 	.word	0x0801a5e0
 800b030:	0801a604 	.word	0x0801a604
 800b034:	200007b4 	.word	0x200007b4
 800b038:	0801a618 	.word	0x0801a618
 800b03c:	200007b8 	.word	0x200007b8
 800b040:	200007bc 	.word	0x200007bc
 800b044:	20000708 	.word	0x20000708
 800b048:	2000070c 	.word	0x2000070c
 800b04c:	2000075c 	.word	0x2000075c
 800b050:	20000760 	.word	0x20000760
 800b054:	20000764 	.word	0x20000764
 800b058:	20000788 	.word	0x20000788
 800b05c:	2000078c 	.word	0x2000078c
 800b060:	20000790 	.word	0x20000790
 800b064:	20000730 	.word	0x20000730
 800b068:	20000734 	.word	0x20000734
				else if(pid == 'd')
 800b06c:	79bb      	ldrb	r3, [r7, #6]
 800b06e:	2b64      	cmp	r3, #100	; 0x64
 800b070:	d110      	bne.n	800b094 <Change_Gain+0x350>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800b072:	4919      	ldr	r1, [pc, #100]	; (800b0d8 <Change_Gain+0x394>)
 800b074:	4819      	ldr	r0, [pc, #100]	; (800b0dc <Change_Gain+0x398>)
 800b076:	f00a fddf 	bl	8015c38 <iscanf>
				break;
 800b07a:	e00b      	b.n	800b094 <Change_Gain+0x350>
			default :
				printf("該当しません\r\n");
 800b07c:	4818      	ldr	r0, [pc, #96]	; (800b0e0 <Change_Gain+0x39c>)
 800b07e:	f00a fdd3 	bl	8015c28 <puts>
				break;
 800b082:	e008      	b.n	800b096 <Change_Gain+0x352>
				break;
 800b084:	bf00      	nop
 800b086:	e006      	b.n	800b096 <Change_Gain+0x352>
				break;
 800b088:	bf00      	nop
 800b08a:	e004      	b.n	800b096 <Change_Gain+0x352>
				break;
 800b08c:	bf00      	nop
 800b08e:	e002      	b.n	800b096 <Change_Gain+0x352>
				break;
 800b090:	bf00      	nop
 800b092:	e000      	b.n	800b096 <Change_Gain+0x352>
				break;
 800b094:	bf00      	nop
			}
			Buffering();
 800b096:	f7ff fd29 	bl	800aaec <Buffering>
			scanf("%c",&nl);
 800b09a:	1d7b      	adds	r3, r7, #5
 800b09c:	4619      	mov	r1, r3
 800b09e:	4811      	ldr	r0, [pc, #68]	; (800b0e4 <Change_Gain+0x3a0>)
 800b0a0:	f00a fdca 	bl	8015c38 <iscanf>
			printf("\r\n");
 800b0a4:	4810      	ldr	r0, [pc, #64]	; (800b0e8 <Change_Gain+0x3a4>)
 800b0a6:	f00a fdbf 	bl	8015c28 <puts>
		printf("現在のPIDゲイン\r\n");
 800b0aa:	e660      	b.n	800ad6e <Change_Gain+0x2a>
			break;
 800b0ac:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 800b0ae:	480f      	ldr	r0, [pc, #60]	; (800b0ec <Change_Gain+0x3a8>)
 800b0b0:	f00a fdba 	bl	8015c28 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800b0b4:	f004 f957 	bl	800f366 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800b0b8:	f7ff fd2c 	bl	800ab14 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800b0bc:	2007      	movs	r0, #7
 800b0be:	f004 fb21 	bl	800f704 <ChangeLED>
	HAL_Delay(200);
 800b0c2:	20c8      	movs	r0, #200	; 0xc8
 800b0c4:	f004 fcfc 	bl	800fac0 <HAL_Delay>
	ChangeLED(0);
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	f004 fb1b 	bl	800f704 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800b0ce:	bf00      	nop
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b0d8:	20000738 	.word	0x20000738
 800b0dc:	0801a618 	.word	0x0801a618
 800b0e0:	0801a61c 	.word	0x0801a61c
 800b0e4:	0801a5c8 	.word	0x0801a5c8
 800b0e8:	0801a630 	.word	0x0801a630
 800b0ec:	0801a634 	.word	0x0801a634

0800b0f0 <HAL_TIM_PeriodElapsedCallback>:
//	}
//}

//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0f0:	b5b0      	push	{r4, r5, r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a9d      	ldr	r2, [pc, #628]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	f040 81eb 	bne.w	800b4d8 <HAL_TIM_PeriodElapsedCallback+0x3e8>
//		{
//			t = 0;
//		}
//*-----------------*/
		//ControlMotor();
		PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800b102:	4b9c      	ldr	r3, [pc, #624]	; (800b374 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800b10a:	332f      	adds	r3, #47	; 0x2f
 800b10c:	461a      	mov	r2, r3
 800b10e:	4b9a      	ldr	r3, [pc, #616]	; (800b378 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b110:	601a      	str	r2, [r3, #0]
		TIM3->CNT = INITIAL_PULSE;
 800b112:	4b98      	ldr	r3, [pc, #608]	; (800b374 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800b114:	f247 522f 	movw	r2, #29999	; 0x752f
 800b118:	625a      	str	r2, [r3, #36]	; 0x24
		PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800b11a:	4b98      	ldr	r3, [pc, #608]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800b122:	332f      	adds	r3, #47	; 0x2f
 800b124:	461a      	mov	r2, r3
 800b126:	4b94      	ldr	r3, [pc, #592]	; (800b378 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b128:	605a      	str	r2, [r3, #4]
		TIM4->CNT = INITIAL_PULSE;
 800b12a:	4b94      	ldr	r3, [pc, #592]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800b12c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b130:	625a      	str	r2, [r3, #36]	; 0x24
	//	PulseDisplacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE/*&KeepCounter[LEFT]*/);
	//	PulseDisplacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE/*&KeepCounter[RIGHT]*/);
		//速度 mm/s
		CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800b132:	4b91      	ldr	r3, [pc, #580]	; (800b378 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b13e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800b380 <HAL_TIM_PeriodElapsedCallback+0x290>
 800b142:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b146:	4b8f      	ldr	r3, [pc, #572]	; (800b384 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b148:	edc3 7a00 	vstr	s15, [r3]
		CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800b14c:	4b8a      	ldr	r3, [pc, #552]	; (800b378 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	ee07 3a90 	vmov	s15, r3
 800b154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b158:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b380 <HAL_TIM_PeriodElapsedCallback+0x290>
 800b15c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b160:	4b88      	ldr	r3, [pc, #544]	; (800b384 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b162:	edc3 7a01 	vstr	s15, [r3, #4]
		CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800b166:	4b87      	ldr	r3, [pc, #540]	; (800b384 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b168:	ed93 7a00 	vldr	s14, [r3]
 800b16c:	4b85      	ldr	r3, [pc, #532]	; (800b384 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b16e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b172:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b176:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b17a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b17e:	4b81      	ldr	r3, [pc, #516]	; (800b384 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b180:	edc3 7a02 	vstr	s15, [r3, #8]
		//移動量 mm/msを積算
		TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800b184:	4b80      	ldr	r3, [pc, #512]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	4b7b      	ldr	r3, [pc, #492]	; (800b378 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4413      	add	r3, r2
 800b18e:	4a7e      	ldr	r2, [pc, #504]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b190:	6013      	str	r3, [r2, #0]
		TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800b192:	4b7d      	ldr	r3, [pc, #500]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	4b78      	ldr	r3, [pc, #480]	; (800b378 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	4413      	add	r3, r2
 800b19c:	4a7a      	ldr	r2, [pc, #488]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b19e:	6053      	str	r3, [r2, #4]
		TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800b1a0:	4b79      	ldr	r3, [pc, #484]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	4b78      	ldr	r3, [pc, #480]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	4a77      	ldr	r2, [pc, #476]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b1ac:	6093      	str	r3, [r2, #8]
#if 1
		//static float angle=0;
		static float zg_last=0, ya_last=0;
		float zg_law, ya_law;
		//uint8_t zgb,zgf;
		ZGyro = ReadIMU(0x37, 0x38);
 800b1ae:	2138      	movs	r1, #56	; 0x38
 800b1b0:	2037      	movs	r0, #55	; 0x37
 800b1b2:	f004 f92d 	bl	800f410 <ReadIMU>
 800b1b6:	eef0 7a40 	vmov.f32	s15, s0
 800b1ba:	4b74      	ldr	r3, [pc, #464]	; (800b38c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800b1bc:	edc3 7a00 	vstr	s15, [r3]
	    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800b1c0:	4b72      	ldr	r3, [pc, #456]	; (800b38c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800b1c2:	ed93 7a00 	vldr	s14, [r3]
 800b1c6:	4b72      	ldr	r3, [pc, #456]	; (800b390 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800b1c8:	edd3 7a00 	vldr	s15, [r3]
 800b1cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1d0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800b394 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 800b1d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1d8:	edc7 7a07 	vstr	s15, [r7, #28]
	    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800b1dc:	69f8      	ldr	r0, [r7, #28]
 800b1de:	f7fd f8eb 	bl	80083b8 <__aeabi_f2d>
 800b1e2:	a35d      	add	r3, pc, #372	; (adr r3, 800b358 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	f7fd f93e 	bl	8008468 <__aeabi_dmul>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4614      	mov	r4, r2
 800b1f2:	461d      	mov	r5, r3
 800b1f4:	4b68      	ldr	r3, [pc, #416]	; (800b398 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fd f8dd 	bl	80083b8 <__aeabi_f2d>
 800b1fe:	a358      	add	r3, pc, #352	; (adr r3, 800b360 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	f7fd f930 	bl	8008468 <__aeabi_dmul>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7fc ff74 	bl	80080fc <__adddf3>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4610      	mov	r0, r2
 800b21a:	4619      	mov	r1, r3
 800b21c:	f7fd fc1c 	bl	8008a58 <__aeabi_d2f>
 800b220:	4603      	mov	r3, r0
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef1 7a67 	vneg.f32	s15, s15
 800b22a:	4b5c      	ldr	r3, [pc, #368]	; (800b39c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800b22c:	edc3 7a00 	vstr	s15, [r3]
	    zg_last = zg_law;
 800b230:	4a59      	ldr	r2, [pc, #356]	; (800b398 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	6013      	str	r3, [r2, #0]
		Angle += AngularV * T1;
 800b236:	4b59      	ldr	r3, [pc, #356]	; (800b39c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800b238:	edd3 7a00 	vldr	s15, [r3]
 800b23c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800b3a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 800b240:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b244:	4b57      	ldr	r3, [pc, #348]	; (800b3a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800b246:	edd3 7a00 	vldr	s15, [r3]
 800b24a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b24e:	4b55      	ldr	r3, [pc, #340]	; (800b3a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800b250:	edc3 7a00 	vstr	s15, [r3]
		else
		{
			TargetAngularV += AngularAcceleration;
		}
#else
		int wall_d =0,wall_l =0,wall_r =0;
 800b254:	2300      	movs	r3, #0
 800b256:	61bb      	str	r3, [r7, #24]
 800b258:	2300      	movs	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	2300      	movs	r3, #0
 800b25e:	613b      	str	r3, [r7, #16]
			int ang_out=0;
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]
		//処理を減らすには、
			if( Pos.Dir == front)
 800b264:	4b50      	ldr	r3, [pc, #320]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800b266:	789b      	ldrb	r3, [r3, #2]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f040 80d5 	bne.w	800b418 <HAL_TIM_PeriodElapsedCallback+0x328>
			{
				if( Pid[A_VELO_PID].flag == 1 )
 800b26e:	4b4f      	ldr	r3, [pc, #316]	; (800b3ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800b270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b272:	2b01      	cmp	r3, #1
 800b274:	d116      	bne.n	800b2a4 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				{
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800b276:	4b4e      	ldr	r3, [pc, #312]	; (800b3b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800b278:	edd3 7a00 	vldr	s15, [r3]
 800b27c:	4b49      	ldr	r3, [pc, #292]	; (800b3a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800b27e:	ed93 7a00 	vldr	s14, [r3]
 800b282:	eef0 0a47 	vmov.f32	s1, s14
 800b286:	eeb0 0a67 	vmov.f32	s0, s15
 800b28a:	2000      	movs	r0, #0
 800b28c:	f002 fa7a 	bl	800d784 <PIDControl>
 800b290:	60f8      	str	r0, [r7, #12]
					TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	ee07 3a90 	vmov	s15, r3
 800b298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b29c:	4b45      	ldr	r3, [pc, #276]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800b29e:	edc3 7a00 	vstr	s15, [r3]
 800b2a2:	e0b9      	b.n	800b418 <HAL_TIM_PeriodElapsedCallback+0x328>
				}
				else if( Pid[D_WALL_PID].flag == 1 )
 800b2a4:	4b41      	ldr	r3, [pc, #260]	; (800b3ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800b2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d12a      	bne.n	800b302 <HAL_TIM_PeriodElapsedCallback+0x212>
				{
					wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800b2ac:	4b42      	ldr	r3, [pc, #264]	; (800b3b8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800b2ae:	edd3 6a02 	vldr	s13, [r3, #8]
 800b2b2:	4b41      	ldr	r3, [pc, #260]	; (800b3b8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800b2b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2b8:	4b40      	ldr	r3, [pc, #256]	; (800b3bc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800b2ba:	edd3 7a00 	vldr	s15, [r3]
 800b2be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2c2:	eef0 0a67 	vmov.f32	s1, s15
 800b2c6:	eeb0 0a66 	vmov.f32	s0, s13
 800b2ca:	2001      	movs	r0, #1
 800b2cc:	f002 fa5a 	bl	800d784 <PIDControl>
 800b2d0:	61b8      	str	r0, [r7, #24]
					TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	ee07 3a90 	vmov	s15, r3
 800b2d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2dc:	ee17 0a90 	vmov	r0, s15
 800b2e0:	f7fd f86a 	bl	80083b8 <__aeabi_f2d>
 800b2e4:	a320      	add	r3, pc, #128	; (adr r3, 800b368 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7fd f8bd 	bl	8008468 <__aeabi_dmul>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	f7fd fbaf 	bl	8008a58 <__aeabi_d2f>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4a2d      	ldr	r2, [pc, #180]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800b2fe:	6013      	str	r3, [r2, #0]
 800b300:	e08a      	b.n	800b418 <HAL_TIM_PeriodElapsedCallback+0x328>
				}
				else if( Pid[L_WALL_PID].flag == 1 )
 800b302:	4b2a      	ldr	r3, [pc, #168]	; (800b3ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800b304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d15b      	bne.n	800b3c4 <HAL_TIM_PeriodElapsedCallback+0x2d4>
				{
					wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800b30c:	4b2a      	ldr	r3, [pc, #168]	; (800b3b8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800b30e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b312:	4b2b      	ldr	r3, [pc, #172]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800b314:	ed93 7a02 	vldr	s14, [r3, #8]
 800b318:	eef0 0a47 	vmov.f32	s1, s14
 800b31c:	eeb0 0a67 	vmov.f32	s0, s15
 800b320:	2002      	movs	r0, #2
 800b322:	f002 fa2f 	bl	800d784 <PIDControl>
 800b326:	6178      	str	r0, [r7, #20]
					TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b332:	ee17 0a90 	vmov	r0, s15
 800b336:	f7fd f83f 	bl	80083b8 <__aeabi_f2d>
 800b33a:	a30b      	add	r3, pc, #44	; (adr r3, 800b368 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7fd f892 	bl	8008468 <__aeabi_dmul>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4610      	mov	r0, r2
 800b34a:	4619      	mov	r1, r3
 800b34c:	f7fd fb84 	bl	8008a58 <__aeabi_d2f>
 800b350:	4603      	mov	r3, r0
 800b352:	4a18      	ldr	r2, [pc, #96]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	e05f      	b.n	800b418 <HAL_TIM_PeriodElapsedCallback+0x328>
 800b358:	47ae147b 	.word	0x47ae147b
 800b35c:	3f847ae1 	.word	0x3f847ae1
 800b360:	7ae147ae 	.word	0x7ae147ae
 800b364:	3fefae14 	.word	0x3fefae14
 800b368:	d2f1a9fc 	.word	0xd2f1a9fc
 800b36c:	3f50624d 	.word	0x3f50624d
 800b370:	20000a0c 	.word	0x20000a0c
 800b374:	40000400 	.word	0x40000400
 800b378:	200002ac 	.word	0x200002ac
 800b37c:	40000800 	.word	0x40000800
 800b380:	3f7c2fb9 	.word	0x3f7c2fb9
 800b384:	20000288 	.word	0x20000288
 800b388:	200002b8 	.word	0x200002b8
 800b38c:	20000be8 	.word	0x20000be8
 800b390:	20000be4 	.word	0x20000be4
 800b394:	3a8b7d78 	.word	0x3a8b7d78
 800b398:	20000258 	.word	0x20000258
 800b39c:	200002c4 	.word	0x200002c4
 800b3a0:	3a83126f 	.word	0x3a83126f
 800b3a4:	200002c8 	.word	0x200002c8
 800b3a8:	20000000 	.word	0x20000000
 800b3ac:	20000704 	.word	0x20000704
 800b3b0:	200002e0 	.word	0x200002e0
 800b3b4:	200002d8 	.word	0x200002d8
 800b3b8:	20000264 	.word	0x20000264
 800b3bc:	20000284 	.word	0x20000284
 800b3c0:	20000274 	.word	0x20000274

				}
				else if( Pid[R_WALL_PID].flag == 1 )
 800b3c4:	4b62      	ldr	r3, [pc, #392]	; (800b550 <HAL_TIM_PeriodElapsedCallback+0x460>)
 800b3c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d124      	bne.n	800b418 <HAL_TIM_PeriodElapsedCallback+0x328>
				{
					wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800b3ce:	4b61      	ldr	r3, [pc, #388]	; (800b554 <HAL_TIM_PeriodElapsedCallback+0x464>)
 800b3d0:	edd3 7a01 	vldr	s15, [r3, #4]
 800b3d4:	4b60      	ldr	r3, [pc, #384]	; (800b558 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800b3d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b3da:	eef0 0a47 	vmov.f32	s1, s14
 800b3de:	eeb0 0a67 	vmov.f32	s0, s15
 800b3e2:	2003      	movs	r0, #3
 800b3e4:	f002 f9ce 	bl	800d784 <PIDControl>
 800b3e8:	6138      	str	r0, [r7, #16]
					TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	ee07 3a90 	vmov	s15, r3
 800b3f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3f4:	ee17 0a90 	vmov	r0, s15
 800b3f8:	f7fc ffde 	bl	80083b8 <__aeabi_f2d>
 800b3fc:	a352      	add	r3, pc, #328	; (adr r3, 800b548 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7fd f831 	bl	8008468 <__aeabi_dmul>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4610      	mov	r0, r2
 800b40c:	4619      	mov	r1, r3
 800b40e:	f7fd fb23 	bl	8008a58 <__aeabi_d2f>
 800b412:	4603      	mov	r3, r0
 800b414:	4a51      	ldr	r2, [pc, #324]	; (800b55c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800b416:	6013      	str	r3, [r2, #0]
				}
			}
#endif
		TargetVelocity[BODY] += Acceleration;
 800b418:	4b51      	ldr	r3, [pc, #324]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b41a:	ed93 7a02 	vldr	s14, [r3, #8]
 800b41e:	4b51      	ldr	r3, [pc, #324]	; (800b564 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800b420:	edd3 7a00 	vldr	s15, [r3]
 800b424:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b428:	4b4d      	ldr	r3, [pc, #308]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b42a:	edc3 7a02 	vstr	s15, [r3, #8]
		TargetAngularV += AngularAcceleration;
 800b42e:	4b4b      	ldr	r3, [pc, #300]	; (800b55c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800b430:	ed93 7a00 	vldr	s14, [r3]
 800b434:	4b4c      	ldr	r3, [pc, #304]	; (800b568 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b436:	edd3 7a00 	vldr	s15, [r3]
 800b43a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b43e:	4b47      	ldr	r3, [pc, #284]	; (800b55c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800b440:	edc3 7a00 	vstr	s15, [r3]
		//TargetAngularV += AngularAcceleration;
		TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800b444:	4b46      	ldr	r3, [pc, #280]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b446:	ed93 7a02 	vldr	s14, [r3, #8]
 800b44a:	4b44      	ldr	r3, [pc, #272]	; (800b55c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800b44c:	edd3 7a00 	vldr	s15, [r3]
 800b450:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b56c <HAL_TIM_PeriodElapsedCallback+0x47c>
 800b454:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b458:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b45c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b460:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b464:	4b3e      	ldr	r3, [pc, #248]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b466:	edc3 7a01 	vstr	s15, [r3, #4]
		TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b46a:	4b3c      	ldr	r3, [pc, #240]	; (800b55c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800b46c:	edd3 7a00 	vldr	s15, [r3]
 800b470:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800b56c <HAL_TIM_PeriodElapsedCallback+0x47c>
 800b474:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b478:	4b39      	ldr	r3, [pc, #228]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b47a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b47e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b482:	4b37      	ldr	r3, [pc, #220]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b484:	edc3 7a00 	vstr	s15, [r3]

		VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b488:	4b35      	ldr	r3, [pc, #212]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b48a:	edd3 7a00 	vldr	s15, [r3]
 800b48e:	4b38      	ldr	r3, [pc, #224]	; (800b570 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800b490:	ed93 7a00 	vldr	s14, [r3]
 800b494:	eef0 0a47 	vmov.f32	s1, s14
 800b498:	eeb0 0a67 	vmov.f32	s0, s15
 800b49c:	2004      	movs	r0, #4
 800b49e:	f002 f971 	bl	800d784 <PIDControl>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	4a33      	ldr	r2, [pc, #204]	; (800b574 <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b4a6:	6013      	str	r3, [r2, #0]
		VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b4a8:	4b2d      	ldr	r3, [pc, #180]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b4aa:	edd3 7a01 	vldr	s15, [r3, #4]
 800b4ae:	4b30      	ldr	r3, [pc, #192]	; (800b570 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800b4b0:	ed93 7a01 	vldr	s14, [r3, #4]
 800b4b4:	eef0 0a47 	vmov.f32	s1, s14
 800b4b8:	eeb0 0a67 	vmov.f32	s0, s15
 800b4bc:	2005      	movs	r0, #5
 800b4be:	f002 f961 	bl	800d784 <PIDControl>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4a2c      	ldr	r2, [pc, #176]	; (800b578 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800b4c6:	6013      	str	r3, [r2, #0]

		//モータに出力
		Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b4c8:	4b2a      	ldr	r3, [pc, #168]	; (800b574 <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a2a      	ldr	r2, [pc, #168]	; (800b578 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800b4ce:	6812      	ldr	r2, [r2, #0]
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f004 fa08 	bl	800f8e8 <Motor_Switch>
//もう一回車体速度制御+角速度制御でやってみる。ダメだった。ブレブレ。
//PIDの関数の処理の重さはどうか。

	}

	if( htim == &htim8)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a28      	ldr	r2, [pc, #160]	; (800b57c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d12f      	bne.n	800b540 <HAL_TIM_PeriodElapsedCallback+0x450>
		//timer8 += t;

		//壁センサデータの更新だけ
		//UpdatePhotoData();
		//処理がこれだけなら影響しない。問題はTIM1の処理の重さ。1msで終えられていないから狂ってくる。
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800b4e0:	4b27      	ldr	r3, [pc, #156]	; (800b580 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	200a      	movs	r0, #10
 800b4ea:	f7ff f9fb 	bl	800a8e4 <GetWallDataAverage>
 800b4ee:	eef0 7a40 	vmov.f32	s15, s0
 800b4f2:	4b19      	ldr	r3, [pc, #100]	; (800b558 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800b4f4:	edc3 7a00 	vstr	s15, [r3]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800b4f8:	4b21      	ldr	r3, [pc, #132]	; (800b580 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	4619      	mov	r1, r3
 800b500:	200a      	movs	r0, #10
 800b502:	f7ff f9ef 	bl	800a8e4 <GetWallDataAverage>
 800b506:	eef0 7a40 	vmov.f32	s15, s0
 800b50a:	4b13      	ldr	r3, [pc, #76]	; (800b558 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800b50c:	edc3 7a01 	vstr	s15, [r3, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800b510:	4b1c      	ldr	r3, [pc, #112]	; (800b584 <HAL_TIM_PeriodElapsedCallback+0x494>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2202      	movs	r2, #2
 800b516:	4619      	mov	r1, r3
 800b518:	200a      	movs	r0, #10
 800b51a:	f7ff f9e3 	bl	800a8e4 <GetWallDataAverage>
 800b51e:	eef0 7a40 	vmov.f32	s15, s0
 800b522:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800b524:	edc3 7a02 	vstr	s15, [r3, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800b528:	4b16      	ldr	r3, [pc, #88]	; (800b584 <HAL_TIM_PeriodElapsedCallback+0x494>)
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	2203      	movs	r2, #3
 800b52e:	4619      	mov	r1, r3
 800b530:	200a      	movs	r0, #10
 800b532:	f7ff f9d7 	bl	800a8e4 <GetWallDataAverage>
 800b536:	eef0 7a40 	vmov.f32	s15, s0
 800b53a:	4b07      	ldr	r3, [pc, #28]	; (800b558 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800b53c:	edc3 7a03 	vstr	s15, [r3, #12]
//	if( htim == &htim9)
//	{
//		timer8 += t;
//
//	}
}
 800b540:	bf00      	nop
 800b542:	3720      	adds	r7, #32
 800b544:	46bd      	mov	sp, r7
 800b546:	bdb0      	pop	{r4, r5, r7, pc}
 800b548:	d2f1a9fc 	.word	0xd2f1a9fc
 800b54c:	3f50624d 	.word	0x3f50624d
 800b550:	20000704 	.word	0x20000704
 800b554:	20000274 	.word	0x20000274
 800b558:	20000264 	.word	0x20000264
 800b55c:	200002d8 	.word	0x200002d8
 800b560:	20000294 	.word	0x20000294
 800b564:	200002d4 	.word	0x200002d4
 800b568:	200002dc 	.word	0x200002dc
 800b56c:	42173333 	.word	0x42173333
 800b570:	20000288 	.word	0x20000288
 800b574:	200002e4 	.word	0x200002e4
 800b578:	200002e8 	.word	0x200002e8
 800b57c:	20000b4c 	.word	0x20000b4c
 800b580:	20000bd0 	.word	0x20000bd0
 800b584:	20000bdc 	.word	0x20000bdc

0800b588 <flash_store_init>:
//{
//
//}
//壁データの初期化
void flash_store_init()
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800b58e:	4b2d      	ldr	r3, [pc, #180]	; (800b644 <flash_store_init+0xbc>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b594:	2300      	movs	r3, #0
 800b596:	60bb      	str	r3, [r7, #8]
 800b598:	e04b      	b.n	800b632 <flash_store_init+0xaa>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b59a:	2300      	movs	r3, #0
 800b59c:	607b      	str	r3, [r7, #4]
 800b59e:	e042      	b.n	800b626 <flash_store_init+0x9e>
			{
				FLASH_Write_Word(address+0, Wall[i][j].north);
 800b5a0:	4929      	ldr	r1, [pc, #164]	; (800b648 <flash_store_init+0xc0>)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	011a      	lsls	r2, r3, #4
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b5ae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f003 fe06 	bl	800f1c8 <FLASH_Write_Word>
				FLASH_Write_Word(address+4, Wall[i][j].east);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	1d18      	adds	r0, r3, #4
 800b5c0:	4921      	ldr	r1, [pc, #132]	; (800b648 <flash_store_init+0xc0>)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	011a      	lsls	r2, r3, #4
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b5ce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	f003 fdf7 	bl	800f1c8 <FLASH_Write_Word>
				FLASH_Write_Word(address+8, Wall[i][j].south);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f103 0008 	add.w	r0, r3, #8
 800b5e0:	4919      	ldr	r1, [pc, #100]	; (800b648 <flash_store_init+0xc0>)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	011a      	lsls	r2, r3, #4
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b5ee:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f003 fde7 	bl	800f1c8 <FLASH_Write_Word>
				FLASH_Write_Word(address+12, Wall[i][j].west);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f103 000c 	add.w	r0, r3, #12
 800b600:	4911      	ldr	r1, [pc, #68]	; (800b648 <flash_store_init+0xc0>)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	011a      	lsls	r2, r3, #4
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	4413      	add	r3, r2
 800b60a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b60e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b612:	b2db      	uxtb	r3, r3
 800b614:	4619      	mov	r1, r3
 800b616:	f003 fdd7 	bl	800f1c8 <FLASH_Write_Word>
				address += 16;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3310      	adds	r3, #16
 800b61e:	60fb      	str	r3, [r7, #12]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3301      	adds	r3, #1
 800b624:	607b      	str	r3, [r7, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b0f      	cmp	r3, #15
 800b62a:	ddb9      	ble.n	800b5a0 <flash_store_init+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	3301      	adds	r3, #1
 800b630:	60bb      	str	r3, [r7, #8]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b0f      	cmp	r3, #15
 800b636:	ddb0      	ble.n	800b59a <flash_store_init+0x12>
			}
	}
}
 800b638:	bf00      	nop
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	0801a75c 	.word	0x0801a75c
 800b648:	200002ec 	.word	0x200002ec

0800b64c <wall_init>:
void wall_init(){
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b652:	2300      	movs	r3, #0
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	e03b      	b.n	800b6d0 <wall_init+0x84>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b658:	2300      	movs	r3, #0
 800b65a:	60bb      	str	r3, [r7, #8]
 800b65c:	e032      	b.n	800b6c4 <wall_init+0x78>
				Wall[i][j].north = UNKNOWN;
 800b65e:	4945      	ldr	r1, [pc, #276]	; (800b774 <wall_init+0x128>)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	011a      	lsls	r2, r3, #4
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	441a      	add	r2, r3
 800b668:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b66c:	2002      	movs	r0, #2
 800b66e:	f360 0301 	bfi	r3, r0, #0, #2
 800b672:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800b676:	493f      	ldr	r1, [pc, #252]	; (800b774 <wall_init+0x128>)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	011a      	lsls	r2, r3, #4
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	441a      	add	r2, r3
 800b680:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b684:	2002      	movs	r0, #2
 800b686:	f360 0383 	bfi	r3, r0, #2, #2
 800b68a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800b68e:	4939      	ldr	r1, [pc, #228]	; (800b774 <wall_init+0x128>)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	011a      	lsls	r2, r3, #4
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	441a      	add	r2, r3
 800b698:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b69c:	2002      	movs	r0, #2
 800b69e:	f360 1305 	bfi	r3, r0, #4, #2
 800b6a2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800b6a6:	4933      	ldr	r1, [pc, #204]	; (800b774 <wall_init+0x128>)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	011a      	lsls	r2, r3, #4
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	441a      	add	r2, r3
 800b6b0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b6b4:	2002      	movs	r0, #2
 800b6b6:	f360 1387 	bfi	r3, r0, #6, #2
 800b6ba:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	60bb      	str	r3, [r7, #8]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b0f      	cmp	r3, #15
 800b6c8:	ddc9      	ble.n	800b65e <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	60fb      	str	r3, [r7, #12]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b0f      	cmp	r3, #15
 800b6d4:	ddc0      	ble.n	800b658 <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	607b      	str	r3, [r7, #4]
 800b6da:	e02a      	b.n	800b732 <wall_init+0xe6>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800b6dc:	4a25      	ldr	r2, [pc, #148]	; (800b774 <wall_init+0x128>)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	015b      	lsls	r3, r3, #5
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f103 021e 	add.w	r2, r3, #30
 800b6e8:	7813      	ldrb	r3, [r2, #0]
 800b6ea:	2101      	movs	r1, #1
 800b6ec:	f361 0301 	bfi	r3, r1, #0, #2
 800b6f0:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800b6f2:	4920      	ldr	r1, [pc, #128]	; (800b774 <wall_init+0x128>)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b6fa:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b6fe:	2001      	movs	r0, #1
 800b700:	f360 0383 	bfi	r3, r0, #2, #2
 800b704:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800b708:	4a1a      	ldr	r2, [pc, #104]	; (800b774 <wall_init+0x128>)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	015b      	lsls	r3, r3, #5
 800b70e:	441a      	add	r2, r3
 800b710:	7813      	ldrb	r3, [r2, #0]
 800b712:	2101      	movs	r1, #1
 800b714:	f361 1305 	bfi	r3, r1, #4, #2
 800b718:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800b71a:	4916      	ldr	r1, [pc, #88]	; (800b774 <wall_init+0x128>)
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b722:	2001      	movs	r0, #1
 800b724:	f360 1387 	bfi	r3, r0, #6, #2
 800b728:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3301      	adds	r3, #1
 800b730:	607b      	str	r3, [r7, #4]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b0f      	cmp	r3, #15
 800b736:	ddd1      	ble.n	800b6dc <wall_init+0x90>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800b738:	4a0e      	ldr	r2, [pc, #56]	; (800b774 <wall_init+0x128>)
 800b73a:	7813      	ldrb	r3, [r2, #0]
 800b73c:	2101      	movs	r1, #1
 800b73e:	f361 0383 	bfi	r3, r1, #2, #2
 800b742:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800b744:	4a0b      	ldr	r2, [pc, #44]	; (800b774 <wall_init+0x128>)
 800b746:	7813      	ldrb	r3, [r2, #0]
 800b748:	f36f 0301 	bfc	r3, #0, #2
 800b74c:	7013      	strb	r3, [r2, #0]
	Wall[1][0].west = WALL;
 800b74e:	4a09      	ldr	r2, [pc, #36]	; (800b774 <wall_init+0x128>)
 800b750:	f892 3020 	ldrb.w	r3, [r2, #32]
 800b754:	2101      	movs	r1, #1
 800b756:	f361 1387 	bfi	r3, r1, #6, #2
 800b75a:	f882 3020 	strb.w	r3, [r2, #32]
	Wall[0][1].south = NOWALL;
 800b75e:	4a05      	ldr	r2, [pc, #20]	; (800b774 <wall_init+0x128>)
 800b760:	7893      	ldrb	r3, [r2, #2]
 800b762:	f36f 1305 	bfc	r3, #4, #2
 800b766:	7093      	strb	r3, [r2, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800b768:	bf00      	nop
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	200002ec 	.word	0x200002ec

0800b778 <wall_set>:
	FLASH_Write_Word(address+8, Wall[x][y].south);
	FLASH_Write_Word(address+12, Wall[x][y].west);

}
//壁の更新xyグローバル
void wall_set(){
 800b778:	b490      	push	{r4, r7}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800b77e:	4b89      	ldr	r3, [pc, #548]	; (800b9a4 <wall_set+0x22c>)
 800b780:	ed93 7a00 	vldr	s14, [r3]
 800b784:	4b87      	ldr	r3, [pc, #540]	; (800b9a4 <wall_set+0x22c>)
 800b786:	edd3 7a03 	vldr	s15, [r3, #12]
 800b78a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b78e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b796:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b9a8 <wall_set+0x230>
 800b79a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a2:	bfcc      	ite	gt
 800b7a4:	2301      	movgt	r3, #1
 800b7a6:	2300      	movle	r3, #0
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	4b80      	ldr	r3, [pc, #512]	; (800b9ac <wall_set+0x234>)
 800b7ac:	7a5b      	ldrb	r3, [r3, #9]
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	443b      	add	r3, r7
 800b7b2:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800b7b6:	4b7b      	ldr	r3, [pc, #492]	; (800b9a4 <wall_set+0x22c>)
 800b7b8:	edd3 7a01 	vldr	s15, [r3, #4]
 800b7bc:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800b9b0 <wall_set+0x238>
 800b7c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c8:	bfcc      	ite	gt
 800b7ca:	2301      	movgt	r3, #1
 800b7cc:	2300      	movle	r3, #0
 800b7ce:	b2d9      	uxtb	r1, r3
 800b7d0:	4b76      	ldr	r3, [pc, #472]	; (800b9ac <wall_set+0x234>)
 800b7d2:	7a5b      	ldrb	r3, [r3, #9]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	425a      	negs	r2, r3
 800b7d8:	f003 0303 	and.w	r3, r3, #3
 800b7dc:	f002 0203 	and.w	r2, r2, #3
 800b7e0:	bf58      	it	pl
 800b7e2:	4253      	negpl	r3, r2
 800b7e4:	460a      	mov	r2, r1
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	443b      	add	r3, r7
 800b7ea:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800b7ee:	4b6f      	ldr	r3, [pc, #444]	; (800b9ac <wall_set+0x234>)
 800b7f0:	7a5b      	ldrb	r3, [r3, #9]
 800b7f2:	3302      	adds	r3, #2
 800b7f4:	425a      	negs	r2, r3
 800b7f6:	f003 0303 	and.w	r3, r3, #3
 800b7fa:	f002 0203 	and.w	r2, r2, #3
 800b7fe:	bf58      	it	pl
 800b800:	4253      	negpl	r3, r2
 800b802:	3308      	adds	r3, #8
 800b804:	443b      	add	r3, r7
 800b806:	2200      	movs	r2, #0
 800b808:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800b80c:	4b65      	ldr	r3, [pc, #404]	; (800b9a4 <wall_set+0x22c>)
 800b80e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b812:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800b9b4 <wall_set+0x23c>
 800b816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b81e:	bfcc      	ite	gt
 800b820:	2301      	movgt	r3, #1
 800b822:	2300      	movle	r3, #0
 800b824:	b2d9      	uxtb	r1, r3
 800b826:	4b61      	ldr	r3, [pc, #388]	; (800b9ac <wall_set+0x234>)
 800b828:	7a5b      	ldrb	r3, [r3, #9]
 800b82a:	3303      	adds	r3, #3
 800b82c:	425a      	negs	r2, r3
 800b82e:	f003 0303 	and.w	r3, r3, #3
 800b832:	f002 0203 	and.w	r2, r2, #3
 800b836:	bf58      	it	pl
 800b838:	4253      	negpl	r3, r2
 800b83a:	460a      	mov	r2, r1
 800b83c:	3308      	adds	r3, #8
 800b83e:	443b      	add	r3, r7
 800b840:	f803 2c04 	strb.w	r2, [r3, #-4]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800b844:	7939      	ldrb	r1, [r7, #4]
 800b846:	4b59      	ldr	r3, [pc, #356]	; (800b9ac <wall_set+0x234>)
 800b848:	799b      	ldrb	r3, [r3, #6]
 800b84a:	461c      	mov	r4, r3
 800b84c:	4b57      	ldr	r3, [pc, #348]	; (800b9ac <wall_set+0x234>)
 800b84e:	79db      	ldrb	r3, [r3, #7]
 800b850:	461a      	mov	r2, r3
 800b852:	460b      	mov	r3, r1
 800b854:	f003 0303 	and.w	r3, r3, #3
 800b858:	b2d8      	uxtb	r0, r3
 800b85a:	4957      	ldr	r1, [pc, #348]	; (800b9b8 <wall_set+0x240>)
 800b85c:	0123      	lsls	r3, r4, #4
 800b85e:	441a      	add	r2, r3
 800b860:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b864:	f360 0301 	bfi	r3, r0, #0, #2
 800b868:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800b86c:	7979      	ldrb	r1, [r7, #5]
 800b86e:	4b4f      	ldr	r3, [pc, #316]	; (800b9ac <wall_set+0x234>)
 800b870:	799b      	ldrb	r3, [r3, #6]
 800b872:	461c      	mov	r4, r3
 800b874:	4b4d      	ldr	r3, [pc, #308]	; (800b9ac <wall_set+0x234>)
 800b876:	79db      	ldrb	r3, [r3, #7]
 800b878:	461a      	mov	r2, r3
 800b87a:	460b      	mov	r3, r1
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	b2d8      	uxtb	r0, r3
 800b882:	494d      	ldr	r1, [pc, #308]	; (800b9b8 <wall_set+0x240>)
 800b884:	0123      	lsls	r3, r4, #4
 800b886:	441a      	add	r2, r3
 800b888:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b88c:	f360 0383 	bfi	r3, r0, #2, #2
 800b890:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800b894:	79b9      	ldrb	r1, [r7, #6]
 800b896:	4b45      	ldr	r3, [pc, #276]	; (800b9ac <wall_set+0x234>)
 800b898:	799b      	ldrb	r3, [r3, #6]
 800b89a:	461c      	mov	r4, r3
 800b89c:	4b43      	ldr	r3, [pc, #268]	; (800b9ac <wall_set+0x234>)
 800b89e:	79db      	ldrb	r3, [r3, #7]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	f003 0303 	and.w	r3, r3, #3
 800b8a8:	b2d8      	uxtb	r0, r3
 800b8aa:	4943      	ldr	r1, [pc, #268]	; (800b9b8 <wall_set+0x240>)
 800b8ac:	0123      	lsls	r3, r4, #4
 800b8ae:	441a      	add	r2, r3
 800b8b0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b8b4:	f360 1305 	bfi	r3, r0, #4, #2
 800b8b8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800b8bc:	79f9      	ldrb	r1, [r7, #7]
 800b8be:	4b3b      	ldr	r3, [pc, #236]	; (800b9ac <wall_set+0x234>)
 800b8c0:	799b      	ldrb	r3, [r3, #6]
 800b8c2:	461c      	mov	r4, r3
 800b8c4:	4b39      	ldr	r3, [pc, #228]	; (800b9ac <wall_set+0x234>)
 800b8c6:	79db      	ldrb	r3, [r3, #7]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	f003 0303 	and.w	r3, r3, #3
 800b8d0:	b2d8      	uxtb	r0, r3
 800b8d2:	4939      	ldr	r1, [pc, #228]	; (800b9b8 <wall_set+0x240>)
 800b8d4:	0123      	lsls	r3, r4, #4
 800b8d6:	441a      	add	r2, r3
 800b8d8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b8dc:	f360 1387 	bfi	r3, r0, #6, #2
 800b8e0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800b8e4:	4b31      	ldr	r3, [pc, #196]	; (800b9ac <wall_set+0x234>)
 800b8e6:	79db      	ldrb	r3, [r3, #7]
 800b8e8:	2b0e      	cmp	r3, #14
 800b8ea:	d812      	bhi.n	800b912 <wall_set+0x19a>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800b8ec:	7939      	ldrb	r1, [r7, #4]
 800b8ee:	4b2f      	ldr	r3, [pc, #188]	; (800b9ac <wall_set+0x234>)
 800b8f0:	799b      	ldrb	r3, [r3, #6]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4b2d      	ldr	r3, [pc, #180]	; (800b9ac <wall_set+0x234>)
 800b8f6:	79db      	ldrb	r3, [r3, #7]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	f001 0103 	and.w	r1, r1, #3
 800b8fe:	b2c8      	uxtb	r0, r1
 800b900:	492d      	ldr	r1, [pc, #180]	; (800b9b8 <wall_set+0x240>)
 800b902:	0112      	lsls	r2, r2, #4
 800b904:	441a      	add	r2, r3
 800b906:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b90a:	f360 1305 	bfi	r3, r0, #4, #2
 800b90e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800b912:	4b26      	ldr	r3, [pc, #152]	; (800b9ac <wall_set+0x234>)
 800b914:	799b      	ldrb	r3, [r3, #6]
 800b916:	2b0e      	cmp	r3, #14
 800b918:	d811      	bhi.n	800b93e <wall_set+0x1c6>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800b91a:	7979      	ldrb	r1, [r7, #5]
 800b91c:	4b23      	ldr	r3, [pc, #140]	; (800b9ac <wall_set+0x234>)
 800b91e:	799b      	ldrb	r3, [r3, #6]
 800b920:	3301      	adds	r3, #1
 800b922:	4a22      	ldr	r2, [pc, #136]	; (800b9ac <wall_set+0x234>)
 800b924:	79d2      	ldrb	r2, [r2, #7]
 800b926:	f001 0103 	and.w	r1, r1, #3
 800b92a:	b2c8      	uxtb	r0, r1
 800b92c:	4922      	ldr	r1, [pc, #136]	; (800b9b8 <wall_set+0x240>)
 800b92e:	011b      	lsls	r3, r3, #4
 800b930:	441a      	add	r2, r3
 800b932:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b936:	f360 1387 	bfi	r3, r0, #6, #2
 800b93a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800b93e:	4b1b      	ldr	r3, [pc, #108]	; (800b9ac <wall_set+0x234>)
 800b940:	79db      	ldrb	r3, [r3, #7]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d012      	beq.n	800b96c <wall_set+0x1f4>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800b946:	79b9      	ldrb	r1, [r7, #6]
 800b948:	4b18      	ldr	r3, [pc, #96]	; (800b9ac <wall_set+0x234>)
 800b94a:	799b      	ldrb	r3, [r3, #6]
 800b94c:	461a      	mov	r2, r3
 800b94e:	4b17      	ldr	r3, [pc, #92]	; (800b9ac <wall_set+0x234>)
 800b950:	79db      	ldrb	r3, [r3, #7]
 800b952:	3b01      	subs	r3, #1
 800b954:	f001 0103 	and.w	r1, r1, #3
 800b958:	b2c8      	uxtb	r0, r1
 800b95a:	4917      	ldr	r1, [pc, #92]	; (800b9b8 <wall_set+0x240>)
 800b95c:	0112      	lsls	r2, r2, #4
 800b95e:	441a      	add	r2, r3
 800b960:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b964:	f360 0301 	bfi	r3, r0, #0, #2
 800b968:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800b96c:	4b0f      	ldr	r3, [pc, #60]	; (800b9ac <wall_set+0x234>)
 800b96e:	799b      	ldrb	r3, [r3, #6]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d011      	beq.n	800b998 <wall_set+0x220>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800b974:	79f9      	ldrb	r1, [r7, #7]
 800b976:	4b0d      	ldr	r3, [pc, #52]	; (800b9ac <wall_set+0x234>)
 800b978:	799b      	ldrb	r3, [r3, #6]
 800b97a:	3b01      	subs	r3, #1
 800b97c:	4a0b      	ldr	r2, [pc, #44]	; (800b9ac <wall_set+0x234>)
 800b97e:	79d2      	ldrb	r2, [r2, #7]
 800b980:	f001 0103 	and.w	r1, r1, #3
 800b984:	b2c8      	uxtb	r0, r1
 800b986:	490c      	ldr	r1, [pc, #48]	; (800b9b8 <wall_set+0x240>)
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	441a      	add	r2, r3
 800b98c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b990:	f360 0383 	bfi	r3, r0, #2, #2
 800b994:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bc90      	pop	{r4, r7}
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	20000264 	.word	0x20000264
 800b9a8:	428c0000 	.word	0x428c0000
 800b9ac:	20000000 	.word	0x20000000
 800b9b0:	42b40000 	.word	0x42b40000
 800b9b4:	42c80000 	.word	0x42c80000
 800b9b8:	200002ec 	.word	0x200002ec

0800b9bc <init_map>:


void init_map(int x, int y)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
//迷路の歩数Mapを初期化する。全体を0xff、引数の座標x,yは0で初期化する

	int i,j;

	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	e013      	b.n	800b9f4 <init_map+0x38>
	{
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	60bb      	str	r3, [r7, #8]
 800b9d0:	e00a      	b.n	800b9e8 <init_map+0x2c>
		{
			walk_map[i][j] = 255;	//すべて255で埋める
 800b9d2:	491f      	ldr	r1, [pc, #124]	; (800ba50 <init_map+0x94>)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	011a      	lsls	r2, r3, #4
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	4413      	add	r3, r2
 800b9dc:	22ff      	movs	r2, #255	; 0xff
 800b9de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	60bb      	str	r3, [r7, #8]
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2b0f      	cmp	r3, #15
 800b9ec:	ddf1      	ble.n	800b9d2 <init_map+0x16>
	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b0f      	cmp	r3, #15
 800b9f8:	dde8      	ble.n	800b9cc <init_map+0x10>
		}
	}

	walk_map[x][y] = 0;				//ゴール座標の歩数を０に設定
 800b9fa:	4915      	ldr	r1, [pc, #84]	; (800ba50 <init_map+0x94>)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	011a      	lsls	r2, r3, #4
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	4413      	add	r3, r2
 800ba04:	2200      	movs	r2, #0
 800ba06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x][y+1] = 0;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	4910      	ldr	r1, [pc, #64]	; (800ba50 <init_map+0x94>)
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	0112      	lsls	r2, r2, #4
 800ba14:	4413      	add	r3, r2
 800ba16:	2200      	movs	r2, #0
 800ba18:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x+1][y] = 0;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	490b      	ldr	r1, [pc, #44]	; (800ba50 <init_map+0x94>)
 800ba22:	011a      	lsls	r2, r3, #4
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	4413      	add	r3, r2
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x+1][y+1] = 0;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	3301      	adds	r3, #1
 800ba36:	4906      	ldr	r1, [pc, #24]	; (800ba50 <init_map+0x94>)
 800ba38:	0112      	lsls	r2, r2, #4
 800ba3a:	4413      	add	r3, r2
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	//歩数マップは合ってることにしよう。

}
 800ba42:	bf00      	nop
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	200004ec 	.word	0x200004ec

0800ba54 <make_map>:


void make_map(int x, int y, int mask)	//歩数マップを作成する
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	int i,j;
	_Bool change_flag;			//Map作成終了を見極めるためのフラグ

	init_map(x,y);				//Mapを初期化する
 800ba60:	68b9      	ldr	r1, [r7, #8]
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f7ff ffaa 	bl	800b9bc <init_map>

	do //(6,9)(7,10)に対して、7,11がおかしい。
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75fb      	strb	r3, [r7, #23]
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	e0d8      	b.n	800bc24 <make_map+0x1d0>
		{
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800ba72:	2300      	movs	r3, #0
 800ba74:	61bb      	str	r3, [r7, #24]
 800ba76:	e0ce      	b.n	800bc16 <make_map+0x1c2>
			{
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800ba78:	4971      	ldr	r1, [pc, #452]	; (800bc40 <make_map+0x1ec>)
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	011a      	lsls	r2, r3, #4
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	4413      	add	r3, r2
 800ba82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ba86:	2bff      	cmp	r3, #255	; 0xff
 800ba88:	f000 80c1 	beq.w	800bc0e <make_map+0x1ba>
				{
					continue;
				}

				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	2b0e      	cmp	r3, #14
 800ba90:	dc2c      	bgt.n	800baec <make_map+0x98>
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ba92:	496c      	ldr	r1, [pc, #432]	; (800bc44 <make_map+0x1f0>)
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	011a      	lsls	r2, r3, #4
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800baa0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	461a      	mov	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4013      	ands	r3, r2
 800baac:	2b00      	cmp	r3, #0
 800baae:	d11d      	bne.n	800baec <make_map+0x98>
					{
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	3301      	adds	r3, #1
 800bab4:	4962      	ldr	r1, [pc, #392]	; (800bc40 <make_map+0x1ec>)
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	0112      	lsls	r2, r2, #4
 800baba:	4413      	add	r3, r2
 800babc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bac0:	2bff      	cmp	r3, #255	; 0xff
 800bac2:	d113      	bne.n	800baec <make_map+0x98>
						{
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800bac4:	495e      	ldr	r1, [pc, #376]	; (800bc40 <make_map+0x1ec>)
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	011a      	lsls	r2, r3, #4
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	4413      	add	r3, r2
 800bace:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	3301      	adds	r3, #1
 800bad6:	3201      	adds	r2, #1
 800bad8:	b290      	uxth	r0, r2
 800bada:	4959      	ldr	r1, [pc, #356]	; (800bc40 <make_map+0x1ec>)
 800badc:	69fa      	ldr	r2, [r7, #28]
 800bade:	0112      	lsls	r2, r2, #4
 800bae0:	4413      	add	r3, r2
 800bae2:	4602      	mov	r2, r0
 800bae4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800bae8:	2301      	movs	r3, #1
 800baea:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	2b0e      	cmp	r3, #14
 800baf0:	dc2c      	bgt.n	800bb4c <make_map+0xf8>
				{
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800baf2:	4954      	ldr	r1, [pc, #336]	; (800bc44 <make_map+0x1f0>)
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	011a      	lsls	r2, r3, #4
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	4413      	add	r3, r2
 800bafc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bb00:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	461a      	mov	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d11d      	bne.n	800bb4c <make_map+0xf8>
					{
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	3301      	adds	r3, #1
 800bb14:	494a      	ldr	r1, [pc, #296]	; (800bc40 <make_map+0x1ec>)
 800bb16:	011a      	lsls	r2, r3, #4
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bb20:	2bff      	cmp	r3, #255	; 0xff
 800bb22:	d113      	bne.n	800bb4c <make_map+0xf8>
						{
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800bb24:	4946      	ldr	r1, [pc, #280]	; (800bc40 <make_map+0x1ec>)
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	011a      	lsls	r2, r3, #4
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	3301      	adds	r3, #1
 800bb36:	3201      	adds	r2, #1
 800bb38:	b290      	uxth	r0, r2
 800bb3a:	4941      	ldr	r1, [pc, #260]	; (800bc40 <make_map+0x1ec>)
 800bb3c:	011a      	lsls	r2, r3, #4
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	4413      	add	r3, r2
 800bb42:	4602      	mov	r2, r0
 800bb44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800bb48:	2301      	movs	r3, #1
 800bb4a:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(j > 0)						//範囲チェック
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	dd2c      	ble.n	800bbac <make_map+0x158>
				{
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800bb52:	493c      	ldr	r1, [pc, #240]	; (800bc44 <make_map+0x1f0>)
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	011a      	lsls	r2, r3, #4
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bb60:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	461a      	mov	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d11d      	bne.n	800bbac <make_map+0x158>
					{
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	4932      	ldr	r1, [pc, #200]	; (800bc40 <make_map+0x1ec>)
 800bb76:	69fa      	ldr	r2, [r7, #28]
 800bb78:	0112      	lsls	r2, r2, #4
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bb80:	2bff      	cmp	r3, #255	; 0xff
 800bb82:	d113      	bne.n	800bbac <make_map+0x158>
						{
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800bb84:	492e      	ldr	r1, [pc, #184]	; (800bc40 <make_map+0x1ec>)
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	011a      	lsls	r2, r3, #4
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	3201      	adds	r2, #1
 800bb98:	b290      	uxth	r0, r2
 800bb9a:	4929      	ldr	r1, [pc, #164]	; (800bc40 <make_map+0x1ec>)
 800bb9c:	69fa      	ldr	r2, [r7, #28]
 800bb9e:	0112      	lsls	r2, r2, #4
 800bba0:	4413      	add	r3, r2
 800bba2:	4602      	mov	r2, r0
 800bba4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800bba8:	2301      	movs	r3, #1
 800bbaa:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(i > 0)						//範囲チェック
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dd2e      	ble.n	800bc10 <make_map+0x1bc>
				{
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800bbb2:	4924      	ldr	r1, [pc, #144]	; (800bc44 <make_map+0x1f0>)
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	011a      	lsls	r2, r3, #4
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bbc0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4013      	ands	r3, r2
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d11f      	bne.n	800bc10 <make_map+0x1bc>
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	491a      	ldr	r1, [pc, #104]	; (800bc40 <make_map+0x1ec>)
 800bbd6:	011a      	lsls	r2, r3, #4
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bbe0:	2bff      	cmp	r3, #255	; 0xff
 800bbe2:	d115      	bne.n	800bc10 <make_map+0x1bc>
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800bbe4:	4916      	ldr	r1, [pc, #88]	; (800bc40 <make_map+0x1ec>)
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	011a      	lsls	r2, r3, #4
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	4413      	add	r3, r2
 800bbee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	3201      	adds	r2, #1
 800bbf8:	b290      	uxth	r0, r2
 800bbfa:	4911      	ldr	r1, [pc, #68]	; (800bc40 <make_map+0x1ec>)
 800bbfc:	011a      	lsls	r2, r3, #4
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	4413      	add	r3, r2
 800bc02:	4602      	mov	r2, r0
 800bc04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800bc08:	2301      	movs	r3, #1
 800bc0a:	75fb      	strb	r3, [r7, #23]
 800bc0c:	e000      	b.n	800bc10 <make_map+0x1bc>
					continue;
 800bc0e:	bf00      	nop
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	3301      	adds	r3, #1
 800bc14:	61bb      	str	r3, [r7, #24]
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	2b0f      	cmp	r3, #15
 800bc1a:	f77f af2d 	ble.w	800ba78 <make_map+0x24>
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	3301      	adds	r3, #1
 800bc22:	61fb      	str	r3, [r7, #28]
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	2b0f      	cmp	r3, #15
 800bc28:	f77f af23 	ble.w	800ba72 <make_map+0x1e>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f47f af1a 	bne.w	800ba68 <make_map+0x14>

}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	3720      	adds	r7, #32
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	200004ec 	.word	0x200004ec
 800bc44:	200002ec 	.word	0x200002ec

0800bc48 <wall_ram_print>:
	flash_store_init();

}
//壁データの表示
//北から時計回り
void wall_ram_print(){
 800bc48:	b5b0      	push	{r4, r5, r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af02      	add	r7, sp, #8

	//迷路
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800bc4e:	230f      	movs	r3, #15
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	e040      	b.n	800bcd6 <wall_ram_print+0x8e>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800bc54:	2300      	movs	r3, #0
 800bc56:	603b      	str	r3, [r7, #0]
 800bc58:	e034      	b.n	800bcc4 <wall_ram_print+0x7c>
			//メモリの読み出し
			//北東南西の順に表示
			//北東南西 北東南西 ...
			//4回毎にスペース
		    printf("%d%d%d%d ",Wall[i][j].north, Wall[i][j].east, Wall[i][j].south, Wall[i][j].west);
 800bc5a:	4925      	ldr	r1, [pc, #148]	; (800bcf0 <wall_ram_print+0xa8>)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	011a      	lsls	r2, r3, #4
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4413      	add	r3, r2
 800bc64:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bc68:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	4618      	mov	r0, r3
 800bc70:	491f      	ldr	r1, [pc, #124]	; (800bcf0 <wall_ram_print+0xa8>)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	011a      	lsls	r2, r3, #4
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4413      	add	r3, r2
 800bc7a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bc7e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	461c      	mov	r4, r3
 800bc86:	491a      	ldr	r1, [pc, #104]	; (800bcf0 <wall_ram_print+0xa8>)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	011a      	lsls	r2, r3, #4
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bc94:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	461d      	mov	r5, r3
 800bc9c:	4914      	ldr	r1, [pc, #80]	; (800bcf0 <wall_ram_print+0xa8>)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	011a      	lsls	r2, r3, #4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4413      	add	r3, r2
 800bca6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bcaa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	480e      	ldr	r0, [pc, #56]	; (800bcf4 <wall_ram_print+0xac>)
 800bcba:	f009 ff2f 	bl	8015b1c <iprintf>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	603b      	str	r3, [r7, #0]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b0f      	cmp	r3, #15
 800bcc8:	ddc7      	ble.n	800bc5a <wall_ram_print+0x12>

		}
		printf("\r\n");
 800bcca:	480b      	ldr	r0, [pc, #44]	; (800bcf8 <wall_ram_print+0xb0>)
 800bccc:	f009 ffac 	bl	8015c28 <puts>
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	607b      	str	r3, [r7, #4]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	dabb      	bge.n	800bc54 <wall_ram_print+0xc>
	}

	printf("\r\n");
 800bcdc:	4806      	ldr	r0, [pc, #24]	; (800bcf8 <wall_ram_print+0xb0>)
 800bcde:	f009 ffa3 	bl	8015c28 <puts>
	printf("\r\n");
 800bce2:	4805      	ldr	r0, [pc, #20]	; (800bcf8 <wall_ram_print+0xb0>)
 800bce4:	f009 ffa0 	bl	8015c28 <puts>
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bdb0      	pop	{r4, r5, r7, pc}
 800bcf0:	200002ec 	.word	0x200002ec
 800bcf4:	0801a658 	.word	0x0801a658
 800bcf8:	0801a644 	.word	0x0801a644

0800bcfc <flash_copy_to_ram>:
//	}

}

void flash_copy_to_ram()
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800bd02:	4b3f      	ldr	r3, [pc, #252]	; (800be00 <flash_copy_to_ram+0x104>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	61fb      	str	r3, [r7, #28]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800bd08:	2300      	movs	r3, #0
 800bd0a:	61bb      	str	r3, [r7, #24]
 800bd0c:	e06f      	b.n	800bdee <flash_copy_to_ram+0xf2>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800bd0e:	2300      	movs	r3, #0
 800bd10:	617b      	str	r3, [r7, #20]
 800bd12:	e066      	b.n	800bde2 <flash_copy_to_ram+0xe6>
			{
				uint32_t wall_data[4]={0};
 800bd14:	1d3b      	adds	r3, r7, #4
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	605a      	str	r2, [r3, #4]
 800bd1c:	609a      	str	r2, [r3, #8]
 800bd1e:	60da      	str	r2, [r3, #12]
				FLASH_Read_Word(address+0, &wall_data[0]);
 800bd20:	1d3b      	adds	r3, r7, #4
 800bd22:	4619      	mov	r1, r3
 800bd24:	69f8      	ldr	r0, [r7, #28]
 800bd26:	f003 fa77 	bl	800f218 <FLASH_Read_Word>
				FLASH_Read_Word(address+4, &wall_data[1]);
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	1d1a      	adds	r2, r3, #4
 800bd2e:	1d3b      	adds	r3, r7, #4
 800bd30:	3304      	adds	r3, #4
 800bd32:	4619      	mov	r1, r3
 800bd34:	4610      	mov	r0, r2
 800bd36:	f003 fa6f 	bl	800f218 <FLASH_Read_Word>
				FLASH_Read_Word(address+8, &wall_data[2]);
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	f103 0208 	add.w	r2, r3, #8
 800bd40:	1d3b      	adds	r3, r7, #4
 800bd42:	3308      	adds	r3, #8
 800bd44:	4619      	mov	r1, r3
 800bd46:	4610      	mov	r0, r2
 800bd48:	f003 fa66 	bl	800f218 <FLASH_Read_Word>
				FLASH_Read_Word(address+12, &wall_data[3]);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	f103 020c 	add.w	r2, r3, #12
 800bd52:	1d3b      	adds	r3, r7, #4
 800bd54:	330c      	adds	r3, #12
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f003 fa5d 	bl	800f218 <FLASH_Read_Word>
				Wall[i][j].north = wall_data[0];
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f003 0303 	and.w	r3, r3, #3
 800bd64:	b2d8      	uxtb	r0, r3
 800bd66:	4927      	ldr	r1, [pc, #156]	; (800be04 <flash_copy_to_ram+0x108>)
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	011a      	lsls	r2, r3, #4
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	441a      	add	r2, r3
 800bd70:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bd74:	f360 0301 	bfi	r3, r0, #0, #2
 800bd78:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = wall_data[1];
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	f003 0303 	and.w	r3, r3, #3
 800bd82:	b2d8      	uxtb	r0, r3
 800bd84:	491f      	ldr	r1, [pc, #124]	; (800be04 <flash_copy_to_ram+0x108>)
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	011a      	lsls	r2, r3, #4
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	441a      	add	r2, r3
 800bd8e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bd92:	f360 0383 	bfi	r3, r0, #2, #2
 800bd96:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = wall_data[2];
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f003 0303 	and.w	r3, r3, #3
 800bda0:	b2d8      	uxtb	r0, r3
 800bda2:	4918      	ldr	r1, [pc, #96]	; (800be04 <flash_copy_to_ram+0x108>)
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	011a      	lsls	r2, r3, #4
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	441a      	add	r2, r3
 800bdac:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bdb0:	f360 1305 	bfi	r3, r0, #4, #2
 800bdb4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = wall_data[3];
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f003 0303 	and.w	r3, r3, #3
 800bdbe:	b2d8      	uxtb	r0, r3
 800bdc0:	4910      	ldr	r1, [pc, #64]	; (800be04 <flash_copy_to_ram+0x108>)
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	011a      	lsls	r2, r3, #4
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	441a      	add	r2, r3
 800bdca:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bdce:	f360 1387 	bfi	r3, r0, #6, #2
 800bdd2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				address += 16;
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	3310      	adds	r3, #16
 800bdda:	61fb      	str	r3, [r7, #28]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	3301      	adds	r3, #1
 800bde0:	617b      	str	r3, [r7, #20]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b0f      	cmp	r3, #15
 800bde6:	dd95      	ble.n	800bd14 <flash_copy_to_ram+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	3301      	adds	r3, #1
 800bdec:	61bb      	str	r3, [r7, #24]
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	2b0f      	cmp	r3, #15
 800bdf2:	dd8c      	ble.n	800bd0e <flash_copy_to_ram+0x12>
			}
	}

}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop
 800bdf8:	3720      	adds	r7, #32
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	0801a75c 	.word	0x0801a75c
 800be04:	200002ec 	.word	0x200002ec

0800be08 <KyushinJudge>:
		  hosu++;
	}while(flag);

}
void KyushinJudge(char turn_mode)
{
 800be08:	b590      	push	{r4, r7, lr}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	4603      	mov	r3, r0
 800be10:	71fb      	strb	r3, [r7, #7]
	//歩数マップから進行方向を導き出すのは、アクションが終わった後、座標と方角が更新されてから。
	switch(Pos.Car)
 800be12:	4b8d      	ldr	r3, [pc, #564]	; (800c048 <KyushinJudge+0x240>)
 800be14:	78db      	ldrb	r3, [r3, #3]
 800be16:	2b03      	cmp	r3, #3
 800be18:	f200 8445 	bhi.w	800c6a6 <KyushinJudge+0x89e>
 800be1c:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <KyushinJudge+0x1c>)
 800be1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be22:	bf00      	nop
 800be24:	0800be35 	.word	0x0800be35
 800be28:	0800c055 	.word	0x0800c055
 800be2c:	0800c275 	.word	0x0800c275
 800be30:	0800c495 	.word	0x0800c495
	{
		  case north:
			  if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800be34:	4b84      	ldr	r3, [pc, #528]	; (800c048 <KyushinJudge+0x240>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	4618      	mov	r0, r3
 800be3a:	4b83      	ldr	r3, [pc, #524]	; (800c048 <KyushinJudge+0x240>)
 800be3c:	785b      	ldrb	r3, [r3, #1]
 800be3e:	4619      	mov	r1, r3
 800be40:	4a82      	ldr	r2, [pc, #520]	; (800c04c <KyushinJudge+0x244>)
 800be42:	0103      	lsls	r3, r0, #4
 800be44:	440b      	add	r3, r1
 800be46:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800be4a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b00      	cmp	r3, #0
 800be52:	d13c      	bne.n	800bece <KyushinJudge+0xc6>
 800be54:	4b7c      	ldr	r3, [pc, #496]	; (800c048 <KyushinJudge+0x240>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	461a      	mov	r2, r3
 800be5a:	4b7b      	ldr	r3, [pc, #492]	; (800c048 <KyushinJudge+0x240>)
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	3301      	adds	r3, #1
 800be60:	497b      	ldr	r1, [pc, #492]	; (800c050 <KyushinJudge+0x248>)
 800be62:	0112      	lsls	r2, r2, #4
 800be64:	4413      	add	r3, r2
 800be66:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800be6a:	4b77      	ldr	r3, [pc, #476]	; (800c048 <KyushinJudge+0x240>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	461c      	mov	r4, r3
 800be70:	4b75      	ldr	r3, [pc, #468]	; (800c048 <KyushinJudge+0x240>)
 800be72:	785b      	ldrb	r3, [r3, #1]
 800be74:	4618      	mov	r0, r3
 800be76:	4976      	ldr	r1, [pc, #472]	; (800c050 <KyushinJudge+0x248>)
 800be78:	0123      	lsls	r3, r4, #4
 800be7a:	4403      	add	r3, r0
 800be7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800be80:	429a      	cmp	r2, r3
 800be82:	d224      	bcs.n	800bece <KyushinJudge+0xc6>
 800be84:	4b70      	ldr	r3, [pc, #448]	; (800c048 <KyushinJudge+0x240>)
 800be86:	785b      	ldrb	r3, [r3, #1]
 800be88:	2b0e      	cmp	r3, #14
 800be8a:	d820      	bhi.n	800bece <KyushinJudge+0xc6>
				  //前北
				  Pos.Dir = front;
 800be8c:	4b6e      	ldr	r3, [pc, #440]	; (800c048 <KyushinJudge+0x240>)
 800be8e:	2200      	movs	r2, #0
 800be90:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800be92:	4b6d      	ldr	r3, [pc, #436]	; (800c048 <KyushinJudge+0x240>)
 800be94:	781a      	ldrb	r2, [r3, #0]
 800be96:	4b6c      	ldr	r3, [pc, #432]	; (800c048 <KyushinJudge+0x240>)
 800be98:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800be9a:	4b6b      	ldr	r3, [pc, #428]	; (800c048 <KyushinJudge+0x240>)
 800be9c:	785b      	ldrb	r3, [r3, #1]
 800be9e:	3301      	adds	r3, #1
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	4b69      	ldr	r3, [pc, #420]	; (800c048 <KyushinJudge+0x240>)
 800bea4:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800bea6:	4b68      	ldr	r3, [pc, #416]	; (800c048 <KyushinJudge+0x240>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fccc 	bl	800a84c <SelectAction>
				  Pos.Car = Pos.NextCar;
 800beb4:	4b64      	ldr	r3, [pc, #400]	; (800c048 <KyushinJudge+0x240>)
 800beb6:	7a5a      	ldrb	r2, [r3, #9]
 800beb8:	4b63      	ldr	r3, [pc, #396]	; (800c048 <KyushinJudge+0x240>)
 800beba:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800bebc:	4b62      	ldr	r3, [pc, #392]	; (800c048 <KyushinJudge+0x240>)
 800bebe:	799a      	ldrb	r2, [r3, #6]
 800bec0:	4b61      	ldr	r3, [pc, #388]	; (800c048 <KyushinJudge+0x240>)
 800bec2:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bec4:	4b60      	ldr	r3, [pc, #384]	; (800c048 <KyushinJudge+0x240>)
 800bec6:	79da      	ldrb	r2, [r3, #7]
 800bec8:	4b5f      	ldr	r3, [pc, #380]	; (800c048 <KyushinJudge+0x240>)
 800beca:	705a      	strb	r2, [r3, #1]
 800becc:	e0ba      	b.n	800c044 <KyushinJudge+0x23c>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800bece:	4b5e      	ldr	r3, [pc, #376]	; (800c048 <KyushinJudge+0x240>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	4618      	mov	r0, r3
 800bed4:	4b5c      	ldr	r3, [pc, #368]	; (800c048 <KyushinJudge+0x240>)
 800bed6:	785b      	ldrb	r3, [r3, #1]
 800bed8:	4619      	mov	r1, r3
 800beda:	4a5c      	ldr	r2, [pc, #368]	; (800c04c <KyushinJudge+0x244>)
 800bedc:	0103      	lsls	r3, r0, #4
 800bede:	440b      	add	r3, r1
 800bee0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bee4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d13c      	bne.n	800bf68 <KyushinJudge+0x160>
 800beee:	4b56      	ldr	r3, [pc, #344]	; (800c048 <KyushinJudge+0x240>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	4a54      	ldr	r2, [pc, #336]	; (800c048 <KyushinJudge+0x240>)
 800bef6:	7852      	ldrb	r2, [r2, #1]
 800bef8:	4611      	mov	r1, r2
 800befa:	4a55      	ldr	r2, [pc, #340]	; (800c050 <KyushinJudge+0x248>)
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	440b      	add	r3, r1
 800bf00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bf04:	4b50      	ldr	r3, [pc, #320]	; (800c048 <KyushinJudge+0x240>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	461c      	mov	r4, r3
 800bf0a:	4b4f      	ldr	r3, [pc, #316]	; (800c048 <KyushinJudge+0x240>)
 800bf0c:	785b      	ldrb	r3, [r3, #1]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	494f      	ldr	r1, [pc, #316]	; (800c050 <KyushinJudge+0x248>)
 800bf12:	0123      	lsls	r3, r4, #4
 800bf14:	4403      	add	r3, r0
 800bf16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d224      	bcs.n	800bf68 <KyushinJudge+0x160>
 800bf1e:	4b4a      	ldr	r3, [pc, #296]	; (800c048 <KyushinJudge+0x240>)
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d020      	beq.n	800bf68 <KyushinJudge+0x160>
				  //左西
    			  Pos.Dir = left;
 800bf26:	4b48      	ldr	r3, [pc, #288]	; (800c048 <KyushinJudge+0x240>)
 800bf28:	2203      	movs	r2, #3
 800bf2a:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X - 1;
 800bf2c:	4b46      	ldr	r3, [pc, #280]	; (800c048 <KyushinJudge+0x240>)
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	4b44      	ldr	r3, [pc, #272]	; (800c048 <KyushinJudge+0x240>)
 800bf36:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y;
 800bf38:	4b43      	ldr	r3, [pc, #268]	; (800c048 <KyushinJudge+0x240>)
 800bf3a:	785a      	ldrb	r2, [r3, #1]
 800bf3c:	4b42      	ldr	r3, [pc, #264]	; (800c048 <KyushinJudge+0x240>)
 800bf3e:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = west;
 800bf40:	4b41      	ldr	r3, [pc, #260]	; (800c048 <KyushinJudge+0x240>)
 800bf42:	2203      	movs	r2, #3
 800bf44:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800bf46:	79fb      	ldrb	r3, [r7, #7]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fe fc7f 	bl	800a84c <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800bf4e:	4b3e      	ldr	r3, [pc, #248]	; (800c048 <KyushinJudge+0x240>)
 800bf50:	7a5a      	ldrb	r2, [r3, #9]
 800bf52:	4b3d      	ldr	r3, [pc, #244]	; (800c048 <KyushinJudge+0x240>)
 800bf54:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800bf56:	4b3c      	ldr	r3, [pc, #240]	; (800c048 <KyushinJudge+0x240>)
 800bf58:	799a      	ldrb	r2, [r3, #6]
 800bf5a:	4b3b      	ldr	r3, [pc, #236]	; (800c048 <KyushinJudge+0x240>)
 800bf5c:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bf5e:	4b3a      	ldr	r3, [pc, #232]	; (800c048 <KyushinJudge+0x240>)
 800bf60:	79da      	ldrb	r2, [r3, #7]
 800bf62:	4b39      	ldr	r3, [pc, #228]	; (800c048 <KyushinJudge+0x240>)
 800bf64:	705a      	strb	r2, [r3, #1]
 800bf66:	e06d      	b.n	800c044 <KyushinJudge+0x23c>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X <  NUMBER_OF_SQUARES-1){
 800bf68:	4b37      	ldr	r3, [pc, #220]	; (800c048 <KyushinJudge+0x240>)
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	4b36      	ldr	r3, [pc, #216]	; (800c048 <KyushinJudge+0x240>)
 800bf70:	785b      	ldrb	r3, [r3, #1]
 800bf72:	4619      	mov	r1, r3
 800bf74:	4a35      	ldr	r2, [pc, #212]	; (800c04c <KyushinJudge+0x244>)
 800bf76:	0103      	lsls	r3, r0, #4
 800bf78:	440b      	add	r3, r1
 800bf7a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bf7e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d13c      	bne.n	800c002 <KyushinJudge+0x1fa>
 800bf88:	4b2f      	ldr	r3, [pc, #188]	; (800c048 <KyushinJudge+0x240>)
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	4a2e      	ldr	r2, [pc, #184]	; (800c048 <KyushinJudge+0x240>)
 800bf90:	7852      	ldrb	r2, [r2, #1]
 800bf92:	4611      	mov	r1, r2
 800bf94:	4a2e      	ldr	r2, [pc, #184]	; (800c050 <KyushinJudge+0x248>)
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	440b      	add	r3, r1
 800bf9a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bf9e:	4b2a      	ldr	r3, [pc, #168]	; (800c048 <KyushinJudge+0x240>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	461c      	mov	r4, r3
 800bfa4:	4b28      	ldr	r3, [pc, #160]	; (800c048 <KyushinJudge+0x240>)
 800bfa6:	785b      	ldrb	r3, [r3, #1]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	4929      	ldr	r1, [pc, #164]	; (800c050 <KyushinJudge+0x248>)
 800bfac:	0123      	lsls	r3, r4, #4
 800bfae:	4403      	add	r3, r0
 800bfb0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d224      	bcs.n	800c002 <KyushinJudge+0x1fa>
 800bfb8:	4b23      	ldr	r3, [pc, #140]	; (800c048 <KyushinJudge+0x240>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b0e      	cmp	r3, #14
 800bfbe:	d820      	bhi.n	800c002 <KyushinJudge+0x1fa>
				  //右東
				  Pos.Dir = right;//この方角で右と決まった時点で次の座標が決まっている
 800bfc0:	4b21      	ldr	r3, [pc, #132]	; (800c048 <KyushinJudge+0x240>)
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800bfc6:	4b20      	ldr	r3, [pc, #128]	; (800c048 <KyushinJudge+0x240>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	4b1e      	ldr	r3, [pc, #120]	; (800c048 <KyushinJudge+0x240>)
 800bfd0:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800bfd2:	4b1d      	ldr	r3, [pc, #116]	; (800c048 <KyushinJudge+0x240>)
 800bfd4:	785a      	ldrb	r2, [r3, #1]
 800bfd6:	4b1c      	ldr	r3, [pc, #112]	; (800c048 <KyushinJudge+0x240>)
 800bfd8:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800bfda:	4b1b      	ldr	r3, [pc, #108]	; (800c048 <KyushinJudge+0x240>)
 800bfdc:	2201      	movs	r2, #1
 800bfde:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fe fc32 	bl	800a84c <SelectAction>
		          Pos.Car = Pos.NextCar;
 800bfe8:	4b17      	ldr	r3, [pc, #92]	; (800c048 <KyushinJudge+0x240>)
 800bfea:	7a5a      	ldrb	r2, [r3, #9]
 800bfec:	4b16      	ldr	r3, [pc, #88]	; (800c048 <KyushinJudge+0x240>)
 800bfee:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800bff0:	4b15      	ldr	r3, [pc, #84]	; (800c048 <KyushinJudge+0x240>)
 800bff2:	799a      	ldrb	r2, [r3, #6]
 800bff4:	4b14      	ldr	r3, [pc, #80]	; (800c048 <KyushinJudge+0x240>)
 800bff6:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bff8:	4b13      	ldr	r3, [pc, #76]	; (800c048 <KyushinJudge+0x240>)
 800bffa:	79da      	ldrb	r2, [r3, #7]
 800bffc:	4b12      	ldr	r3, [pc, #72]	; (800c048 <KyushinJudge+0x240>)
 800bffe:	705a      	strb	r2, [r3, #1]
 800c000:	e020      	b.n	800c044 <KyushinJudge+0x23c>
			  }
			  else {
				  Pos.Dir = back;
 800c002:	4b11      	ldr	r3, [pc, #68]	; (800c048 <KyushinJudge+0x240>)
 800c004:	2202      	movs	r2, #2
 800c006:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c008:	4b0f      	ldr	r3, [pc, #60]	; (800c048 <KyushinJudge+0x240>)
 800c00a:	781a      	ldrb	r2, [r3, #0]
 800c00c:	4b0e      	ldr	r3, [pc, #56]	; (800c048 <KyushinJudge+0x240>)
 800c00e:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800c010:	4b0d      	ldr	r3, [pc, #52]	; (800c048 <KyushinJudge+0x240>)
 800c012:	785b      	ldrb	r3, [r3, #1]
 800c014:	3b01      	subs	r3, #1
 800c016:	b2da      	uxtb	r2, r3
 800c018:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <KyushinJudge+0x240>)
 800c01a:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800c01c:	4b0a      	ldr	r3, [pc, #40]	; (800c048 <KyushinJudge+0x240>)
 800c01e:	2202      	movs	r2, #2
 800c020:	725a      	strb	r2, [r3, #9]
				  //後南
				  SelectAction(turn_mode);
 800c022:	79fb      	ldrb	r3, [r7, #7]
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe fc11 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c02a:	4b07      	ldr	r3, [pc, #28]	; (800c048 <KyushinJudge+0x240>)
 800c02c:	7a5a      	ldrb	r2, [r3, #9]
 800c02e:	4b06      	ldr	r3, [pc, #24]	; (800c048 <KyushinJudge+0x240>)
 800c030:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c032:	4b05      	ldr	r3, [pc, #20]	; (800c048 <KyushinJudge+0x240>)
 800c034:	799a      	ldrb	r2, [r3, #6]
 800c036:	4b04      	ldr	r3, [pc, #16]	; (800c048 <KyushinJudge+0x240>)
 800c038:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c03a:	4b03      	ldr	r3, [pc, #12]	; (800c048 <KyushinJudge+0x240>)
 800c03c:	79da      	ldrb	r2, [r3, #7]
 800c03e:	4b02      	ldr	r3, [pc, #8]	; (800c048 <KyushinJudge+0x240>)
 800c040:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c042:	e331      	b.n	800c6a8 <KyushinJudge+0x8a0>
 800c044:	e330      	b.n	800c6a8 <KyushinJudge+0x8a0>
 800c046:	bf00      	nop
 800c048:	20000000 	.word	0x20000000
 800c04c:	200002ec 	.word	0x200002ec
 800c050:	200004ec 	.word	0x200004ec

		  case east:

			  if(Wall[Pos.X][Pos.Y].east == NOWALL && walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800c054:	4b84      	ldr	r3, [pc, #528]	; (800c268 <KyushinJudge+0x460>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	4b83      	ldr	r3, [pc, #524]	; (800c268 <KyushinJudge+0x460>)
 800c05c:	785b      	ldrb	r3, [r3, #1]
 800c05e:	4619      	mov	r1, r3
 800c060:	4a82      	ldr	r2, [pc, #520]	; (800c26c <KyushinJudge+0x464>)
 800c062:	0103      	lsls	r3, r0, #4
 800c064:	440b      	add	r3, r1
 800c066:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c06a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b00      	cmp	r3, #0
 800c072:	d13c      	bne.n	800c0ee <KyushinJudge+0x2e6>
 800c074:	4b7c      	ldr	r3, [pc, #496]	; (800c268 <KyushinJudge+0x460>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	3301      	adds	r3, #1
 800c07a:	4a7b      	ldr	r2, [pc, #492]	; (800c268 <KyushinJudge+0x460>)
 800c07c:	7852      	ldrb	r2, [r2, #1]
 800c07e:	4611      	mov	r1, r2
 800c080:	4a7b      	ldr	r2, [pc, #492]	; (800c270 <KyushinJudge+0x468>)
 800c082:	011b      	lsls	r3, r3, #4
 800c084:	440b      	add	r3, r1
 800c086:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c08a:	4b77      	ldr	r3, [pc, #476]	; (800c268 <KyushinJudge+0x460>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	461c      	mov	r4, r3
 800c090:	4b75      	ldr	r3, [pc, #468]	; (800c268 <KyushinJudge+0x460>)
 800c092:	785b      	ldrb	r3, [r3, #1]
 800c094:	4618      	mov	r0, r3
 800c096:	4976      	ldr	r1, [pc, #472]	; (800c270 <KyushinJudge+0x468>)
 800c098:	0123      	lsls	r3, r4, #4
 800c09a:	4403      	add	r3, r0
 800c09c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d224      	bcs.n	800c0ee <KyushinJudge+0x2e6>
 800c0a4:	4b70      	ldr	r3, [pc, #448]	; (800c268 <KyushinJudge+0x460>)
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b0e      	cmp	r3, #14
 800c0aa:	d820      	bhi.n	800c0ee <KyushinJudge+0x2e6>
				  //前東
				  Pos.Dir = front;
 800c0ac:	4b6e      	ldr	r3, [pc, #440]	; (800c268 <KyushinJudge+0x460>)
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800c0b2:	4b6d      	ldr	r3, [pc, #436]	; (800c268 <KyushinJudge+0x460>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	4b6b      	ldr	r3, [pc, #428]	; (800c268 <KyushinJudge+0x460>)
 800c0bc:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c0be:	4b6a      	ldr	r3, [pc, #424]	; (800c268 <KyushinJudge+0x460>)
 800c0c0:	785a      	ldrb	r2, [r3, #1]
 800c0c2:	4b69      	ldr	r3, [pc, #420]	; (800c268 <KyushinJudge+0x460>)
 800c0c4:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800c0c6:	4b68      	ldr	r3, [pc, #416]	; (800c268 <KyushinJudge+0x460>)
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c0cc:	79fb      	ldrb	r3, [r7, #7]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fe fbbc 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c0d4:	4b64      	ldr	r3, [pc, #400]	; (800c268 <KyushinJudge+0x460>)
 800c0d6:	7a5a      	ldrb	r2, [r3, #9]
 800c0d8:	4b63      	ldr	r3, [pc, #396]	; (800c268 <KyushinJudge+0x460>)
 800c0da:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c0dc:	4b62      	ldr	r3, [pc, #392]	; (800c268 <KyushinJudge+0x460>)
 800c0de:	799a      	ldrb	r2, [r3, #6]
 800c0e0:	4b61      	ldr	r3, [pc, #388]	; (800c268 <KyushinJudge+0x460>)
 800c0e2:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c0e4:	4b60      	ldr	r3, [pc, #384]	; (800c268 <KyushinJudge+0x460>)
 800c0e6:	79da      	ldrb	r2, [r3, #7]
 800c0e8:	4b5f      	ldr	r3, [pc, #380]	; (800c268 <KyushinJudge+0x460>)
 800c0ea:	705a      	strb	r2, [r3, #1]
 800c0ec:	e0ba      	b.n	800c264 <KyushinJudge+0x45c>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800c0ee:	4b5e      	ldr	r3, [pc, #376]	; (800c268 <KyushinJudge+0x460>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	4b5c      	ldr	r3, [pc, #368]	; (800c268 <KyushinJudge+0x460>)
 800c0f6:	785b      	ldrb	r3, [r3, #1]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4a5c      	ldr	r2, [pc, #368]	; (800c26c <KyushinJudge+0x464>)
 800c0fc:	0103      	lsls	r3, r0, #4
 800c0fe:	440b      	add	r3, r1
 800c100:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c104:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d13c      	bne.n	800c188 <KyushinJudge+0x380>
 800c10e:	4b56      	ldr	r3, [pc, #344]	; (800c268 <KyushinJudge+0x460>)
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	4b54      	ldr	r3, [pc, #336]	; (800c268 <KyushinJudge+0x460>)
 800c116:	785b      	ldrb	r3, [r3, #1]
 800c118:	3301      	adds	r3, #1
 800c11a:	4955      	ldr	r1, [pc, #340]	; (800c270 <KyushinJudge+0x468>)
 800c11c:	0112      	lsls	r2, r2, #4
 800c11e:	4413      	add	r3, r2
 800c120:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c124:	4b50      	ldr	r3, [pc, #320]	; (800c268 <KyushinJudge+0x460>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	461c      	mov	r4, r3
 800c12a:	4b4f      	ldr	r3, [pc, #316]	; (800c268 <KyushinJudge+0x460>)
 800c12c:	785b      	ldrb	r3, [r3, #1]
 800c12e:	4618      	mov	r0, r3
 800c130:	494f      	ldr	r1, [pc, #316]	; (800c270 <KyushinJudge+0x468>)
 800c132:	0123      	lsls	r3, r4, #4
 800c134:	4403      	add	r3, r0
 800c136:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d224      	bcs.n	800c188 <KyushinJudge+0x380>
 800c13e:	4b4a      	ldr	r3, [pc, #296]	; (800c268 <KyushinJudge+0x460>)
 800c140:	785b      	ldrb	r3, [r3, #1]
 800c142:	2b0e      	cmp	r3, #14
 800c144:	d820      	bhi.n	800c188 <KyushinJudge+0x380>
				  //左?��?

    			  Pos.Dir = left;
 800c146:	4b48      	ldr	r3, [pc, #288]	; (800c268 <KyushinJudge+0x460>)
 800c148:	2203      	movs	r2, #3
 800c14a:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X;
 800c14c:	4b46      	ldr	r3, [pc, #280]	; (800c268 <KyushinJudge+0x460>)
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	4b45      	ldr	r3, [pc, #276]	; (800c268 <KyushinJudge+0x460>)
 800c152:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y+1;
 800c154:	4b44      	ldr	r3, [pc, #272]	; (800c268 <KyushinJudge+0x460>)
 800c156:	785b      	ldrb	r3, [r3, #1]
 800c158:	3301      	adds	r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	4b42      	ldr	r3, [pc, #264]	; (800c268 <KyushinJudge+0x460>)
 800c15e:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = north;
 800c160:	4b41      	ldr	r3, [pc, #260]	; (800c268 <KyushinJudge+0x460>)
 800c162:	2200      	movs	r2, #0
 800c164:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800c166:	79fb      	ldrb	r3, [r7, #7]
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe fb6f 	bl	800a84c <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800c16e:	4b3e      	ldr	r3, [pc, #248]	; (800c268 <KyushinJudge+0x460>)
 800c170:	7a5a      	ldrb	r2, [r3, #9]
 800c172:	4b3d      	ldr	r3, [pc, #244]	; (800c268 <KyushinJudge+0x460>)
 800c174:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c176:	4b3c      	ldr	r3, [pc, #240]	; (800c268 <KyushinJudge+0x460>)
 800c178:	799a      	ldrb	r2, [r3, #6]
 800c17a:	4b3b      	ldr	r3, [pc, #236]	; (800c268 <KyushinJudge+0x460>)
 800c17c:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c17e:	4b3a      	ldr	r3, [pc, #232]	; (800c268 <KyushinJudge+0x460>)
 800c180:	79da      	ldrb	r2, [r3, #7]
 800c182:	4b39      	ldr	r3, [pc, #228]	; (800c268 <KyushinJudge+0x460>)
 800c184:	705a      	strb	r2, [r3, #1]
 800c186:	e06d      	b.n	800c264 <KyushinJudge+0x45c>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL && walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800c188:	4b37      	ldr	r3, [pc, #220]	; (800c268 <KyushinJudge+0x460>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	4618      	mov	r0, r3
 800c18e:	4b36      	ldr	r3, [pc, #216]	; (800c268 <KyushinJudge+0x460>)
 800c190:	785b      	ldrb	r3, [r3, #1]
 800c192:	4619      	mov	r1, r3
 800c194:	4a35      	ldr	r2, [pc, #212]	; (800c26c <KyushinJudge+0x464>)
 800c196:	0103      	lsls	r3, r0, #4
 800c198:	440b      	add	r3, r1
 800c19a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c19e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d13c      	bne.n	800c222 <KyushinJudge+0x41a>
 800c1a8:	4b2f      	ldr	r3, [pc, #188]	; (800c268 <KyushinJudge+0x460>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	4b2e      	ldr	r3, [pc, #184]	; (800c268 <KyushinJudge+0x460>)
 800c1b0:	785b      	ldrb	r3, [r3, #1]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	492e      	ldr	r1, [pc, #184]	; (800c270 <KyushinJudge+0x468>)
 800c1b6:	0112      	lsls	r2, r2, #4
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c1be:	4b2a      	ldr	r3, [pc, #168]	; (800c268 <KyushinJudge+0x460>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	461c      	mov	r4, r3
 800c1c4:	4b28      	ldr	r3, [pc, #160]	; (800c268 <KyushinJudge+0x460>)
 800c1c6:	785b      	ldrb	r3, [r3, #1]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	4929      	ldr	r1, [pc, #164]	; (800c270 <KyushinJudge+0x468>)
 800c1cc:	0123      	lsls	r3, r4, #4
 800c1ce:	4403      	add	r3, r0
 800c1d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d224      	bcs.n	800c222 <KyushinJudge+0x41a>
 800c1d8:	4b23      	ldr	r3, [pc, #140]	; (800c268 <KyushinJudge+0x460>)
 800c1da:	785b      	ldrb	r3, [r3, #1]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d020      	beq.n	800c222 <KyushinJudge+0x41a>
				  //右?��?
				  Pos.Dir = right;
 800c1e0:	4b21      	ldr	r3, [pc, #132]	; (800c268 <KyushinJudge+0x460>)
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c1e6:	4b20      	ldr	r3, [pc, #128]	; (800c268 <KyushinJudge+0x460>)
 800c1e8:	781a      	ldrb	r2, [r3, #0]
 800c1ea:	4b1f      	ldr	r3, [pc, #124]	; (800c268 <KyushinJudge+0x460>)
 800c1ec:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800c1ee:	4b1e      	ldr	r3, [pc, #120]	; (800c268 <KyushinJudge+0x460>)
 800c1f0:	785b      	ldrb	r3, [r3, #1]
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	4b1c      	ldr	r3, [pc, #112]	; (800c268 <KyushinJudge+0x460>)
 800c1f8:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800c1fa:	4b1b      	ldr	r3, [pc, #108]	; (800c268 <KyushinJudge+0x460>)
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c200:	79fb      	ldrb	r3, [r7, #7]
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fb22 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c208:	4b17      	ldr	r3, [pc, #92]	; (800c268 <KyushinJudge+0x460>)
 800c20a:	7a5a      	ldrb	r2, [r3, #9]
 800c20c:	4b16      	ldr	r3, [pc, #88]	; (800c268 <KyushinJudge+0x460>)
 800c20e:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c210:	4b15      	ldr	r3, [pc, #84]	; (800c268 <KyushinJudge+0x460>)
 800c212:	799a      	ldrb	r2, [r3, #6]
 800c214:	4b14      	ldr	r3, [pc, #80]	; (800c268 <KyushinJudge+0x460>)
 800c216:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c218:	4b13      	ldr	r3, [pc, #76]	; (800c268 <KyushinJudge+0x460>)
 800c21a:	79da      	ldrb	r2, [r3, #7]
 800c21c:	4b12      	ldr	r3, [pc, #72]	; (800c268 <KyushinJudge+0x460>)
 800c21e:	705a      	strb	r2, [r3, #1]
 800c220:	e020      	b.n	800c264 <KyushinJudge+0x45c>
			  }
			  else {
				  //後西
				  Pos.Dir = back;
 800c222:	4b11      	ldr	r3, [pc, #68]	; (800c268 <KyushinJudge+0x460>)
 800c224:	2202      	movs	r2, #2
 800c226:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800c228:	4b0f      	ldr	r3, [pc, #60]	; (800c268 <KyushinJudge+0x460>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <KyushinJudge+0x460>)
 800c232:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c234:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <KyushinJudge+0x460>)
 800c236:	785a      	ldrb	r2, [r3, #1]
 800c238:	4b0b      	ldr	r3, [pc, #44]	; (800c268 <KyushinJudge+0x460>)
 800c23a:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800c23c:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <KyushinJudge+0x460>)
 800c23e:	2203      	movs	r2, #3
 800c240:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c242:	79fb      	ldrb	r3, [r7, #7]
 800c244:	4618      	mov	r0, r3
 800c246:	f7fe fb01 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c24a:	4b07      	ldr	r3, [pc, #28]	; (800c268 <KyushinJudge+0x460>)
 800c24c:	7a5a      	ldrb	r2, [r3, #9]
 800c24e:	4b06      	ldr	r3, [pc, #24]	; (800c268 <KyushinJudge+0x460>)
 800c250:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c252:	4b05      	ldr	r3, [pc, #20]	; (800c268 <KyushinJudge+0x460>)
 800c254:	799a      	ldrb	r2, [r3, #6]
 800c256:	4b04      	ldr	r3, [pc, #16]	; (800c268 <KyushinJudge+0x460>)
 800c258:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c25a:	4b03      	ldr	r3, [pc, #12]	; (800c268 <KyushinJudge+0x460>)
 800c25c:	79da      	ldrb	r2, [r3, #7]
 800c25e:	4b02      	ldr	r3, [pc, #8]	; (800c268 <KyushinJudge+0x460>)
 800c260:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c262:	e221      	b.n	800c6a8 <KyushinJudge+0x8a0>
 800c264:	e220      	b.n	800c6a8 <KyushinJudge+0x8a0>
 800c266:	bf00      	nop
 800c268:	20000000 	.word	0x20000000
 800c26c:	200002ec 	.word	0x200002ec
 800c270:	200004ec 	.word	0x200004ec

		  case south:

			  if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800c274:	4b84      	ldr	r3, [pc, #528]	; (800c488 <KyushinJudge+0x680>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	4618      	mov	r0, r3
 800c27a:	4b83      	ldr	r3, [pc, #524]	; (800c488 <KyushinJudge+0x680>)
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	4619      	mov	r1, r3
 800c280:	4a82      	ldr	r2, [pc, #520]	; (800c48c <KyushinJudge+0x684>)
 800c282:	0103      	lsls	r3, r0, #4
 800c284:	440b      	add	r3, r1
 800c286:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c28a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b00      	cmp	r3, #0
 800c292:	d13c      	bne.n	800c30e <KyushinJudge+0x506>
 800c294:	4b7c      	ldr	r3, [pc, #496]	; (800c488 <KyushinJudge+0x680>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	461a      	mov	r2, r3
 800c29a:	4b7b      	ldr	r3, [pc, #492]	; (800c488 <KyushinJudge+0x680>)
 800c29c:	785b      	ldrb	r3, [r3, #1]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	497b      	ldr	r1, [pc, #492]	; (800c490 <KyushinJudge+0x688>)
 800c2a2:	0112      	lsls	r2, r2, #4
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c2aa:	4b77      	ldr	r3, [pc, #476]	; (800c488 <KyushinJudge+0x680>)
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	461c      	mov	r4, r3
 800c2b0:	4b75      	ldr	r3, [pc, #468]	; (800c488 <KyushinJudge+0x680>)
 800c2b2:	785b      	ldrb	r3, [r3, #1]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	4976      	ldr	r1, [pc, #472]	; (800c490 <KyushinJudge+0x688>)
 800c2b8:	0123      	lsls	r3, r4, #4
 800c2ba:	4403      	add	r3, r0
 800c2bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d224      	bcs.n	800c30e <KyushinJudge+0x506>
 800c2c4:	4b70      	ldr	r3, [pc, #448]	; (800c488 <KyushinJudge+0x680>)
 800c2c6:	785b      	ldrb	r3, [r3, #1]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d020      	beq.n	800c30e <KyushinJudge+0x506>
				  //前南
				  Pos.Dir = front;
 800c2cc:	4b6e      	ldr	r3, [pc, #440]	; (800c488 <KyushinJudge+0x680>)
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c2d2:	4b6d      	ldr	r3, [pc, #436]	; (800c488 <KyushinJudge+0x680>)
 800c2d4:	781a      	ldrb	r2, [r3, #0]
 800c2d6:	4b6c      	ldr	r3, [pc, #432]	; (800c488 <KyushinJudge+0x680>)
 800c2d8:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800c2da:	4b6b      	ldr	r3, [pc, #428]	; (800c488 <KyushinJudge+0x680>)
 800c2dc:	785b      	ldrb	r3, [r3, #1]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	4b69      	ldr	r3, [pc, #420]	; (800c488 <KyushinJudge+0x680>)
 800c2e4:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800c2e6:	4b68      	ldr	r3, [pc, #416]	; (800c488 <KyushinJudge+0x680>)
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c2ec:	79fb      	ldrb	r3, [r7, #7]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe faac 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c2f4:	4b64      	ldr	r3, [pc, #400]	; (800c488 <KyushinJudge+0x680>)
 800c2f6:	7a5a      	ldrb	r2, [r3, #9]
 800c2f8:	4b63      	ldr	r3, [pc, #396]	; (800c488 <KyushinJudge+0x680>)
 800c2fa:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c2fc:	4b62      	ldr	r3, [pc, #392]	; (800c488 <KyushinJudge+0x680>)
 800c2fe:	799a      	ldrb	r2, [r3, #6]
 800c300:	4b61      	ldr	r3, [pc, #388]	; (800c488 <KyushinJudge+0x680>)
 800c302:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c304:	4b60      	ldr	r3, [pc, #384]	; (800c488 <KyushinJudge+0x680>)
 800c306:	79da      	ldrb	r2, [r3, #7]
 800c308:	4b5f      	ldr	r3, [pc, #380]	; (800c488 <KyushinJudge+0x680>)
 800c30a:	705a      	strb	r2, [r3, #1]
 800c30c:	e0ba      	b.n	800c484 <KyushinJudge+0x67c>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800c30e:	4b5e      	ldr	r3, [pc, #376]	; (800c488 <KyushinJudge+0x680>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	4618      	mov	r0, r3
 800c314:	4b5c      	ldr	r3, [pc, #368]	; (800c488 <KyushinJudge+0x680>)
 800c316:	785b      	ldrb	r3, [r3, #1]
 800c318:	4619      	mov	r1, r3
 800c31a:	4a5c      	ldr	r2, [pc, #368]	; (800c48c <KyushinJudge+0x684>)
 800c31c:	0103      	lsls	r3, r0, #4
 800c31e:	440b      	add	r3, r1
 800c320:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c324:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d13c      	bne.n	800c3a8 <KyushinJudge+0x5a0>
 800c32e:	4b56      	ldr	r3, [pc, #344]	; (800c488 <KyushinJudge+0x680>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	3301      	adds	r3, #1
 800c334:	4a54      	ldr	r2, [pc, #336]	; (800c488 <KyushinJudge+0x680>)
 800c336:	7852      	ldrb	r2, [r2, #1]
 800c338:	4611      	mov	r1, r2
 800c33a:	4a55      	ldr	r2, [pc, #340]	; (800c490 <KyushinJudge+0x688>)
 800c33c:	011b      	lsls	r3, r3, #4
 800c33e:	440b      	add	r3, r1
 800c340:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c344:	4b50      	ldr	r3, [pc, #320]	; (800c488 <KyushinJudge+0x680>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	461c      	mov	r4, r3
 800c34a:	4b4f      	ldr	r3, [pc, #316]	; (800c488 <KyushinJudge+0x680>)
 800c34c:	785b      	ldrb	r3, [r3, #1]
 800c34e:	4618      	mov	r0, r3
 800c350:	494f      	ldr	r1, [pc, #316]	; (800c490 <KyushinJudge+0x688>)
 800c352:	0123      	lsls	r3, r4, #4
 800c354:	4403      	add	r3, r0
 800c356:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d224      	bcs.n	800c3a8 <KyushinJudge+0x5a0>
 800c35e:	4b4a      	ldr	r3, [pc, #296]	; (800c488 <KyushinJudge+0x680>)
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	2b0e      	cmp	r3, #14
 800c364:	d820      	bhi.n	800c3a8 <KyushinJudge+0x5a0>
				  //左東
    			  Pos.Dir = left;
 800c366:	4b48      	ldr	r3, [pc, #288]	; (800c488 <KyushinJudge+0x680>)
 800c368:	2203      	movs	r2, #3
 800c36a:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X + 1;
 800c36c:	4b46      	ldr	r3, [pc, #280]	; (800c488 <KyushinJudge+0x680>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	3301      	adds	r3, #1
 800c372:	b2da      	uxtb	r2, r3
 800c374:	4b44      	ldr	r3, [pc, #272]	; (800c488 <KyushinJudge+0x680>)
 800c376:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y;
 800c378:	4b43      	ldr	r3, [pc, #268]	; (800c488 <KyushinJudge+0x680>)
 800c37a:	785a      	ldrb	r2, [r3, #1]
 800c37c:	4b42      	ldr	r3, [pc, #264]	; (800c488 <KyushinJudge+0x680>)
 800c37e:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = east;
 800c380:	4b41      	ldr	r3, [pc, #260]	; (800c488 <KyushinJudge+0x680>)
 800c382:	2201      	movs	r2, #1
 800c384:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fe fa5f 	bl	800a84c <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800c38e:	4b3e      	ldr	r3, [pc, #248]	; (800c488 <KyushinJudge+0x680>)
 800c390:	7a5a      	ldrb	r2, [r3, #9]
 800c392:	4b3d      	ldr	r3, [pc, #244]	; (800c488 <KyushinJudge+0x680>)
 800c394:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c396:	4b3c      	ldr	r3, [pc, #240]	; (800c488 <KyushinJudge+0x680>)
 800c398:	799a      	ldrb	r2, [r3, #6]
 800c39a:	4b3b      	ldr	r3, [pc, #236]	; (800c488 <KyushinJudge+0x680>)
 800c39c:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c39e:	4b3a      	ldr	r3, [pc, #232]	; (800c488 <KyushinJudge+0x680>)
 800c3a0:	79da      	ldrb	r2, [r3, #7]
 800c3a2:	4b39      	ldr	r3, [pc, #228]	; (800c488 <KyushinJudge+0x680>)
 800c3a4:	705a      	strb	r2, [r3, #1]
 800c3a6:	e06d      	b.n	800c484 <KyushinJudge+0x67c>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800c3a8:	4b37      	ldr	r3, [pc, #220]	; (800c488 <KyushinJudge+0x680>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	4b36      	ldr	r3, [pc, #216]	; (800c488 <KyushinJudge+0x680>)
 800c3b0:	785b      	ldrb	r3, [r3, #1]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	4a35      	ldr	r2, [pc, #212]	; (800c48c <KyushinJudge+0x684>)
 800c3b6:	0103      	lsls	r3, r0, #4
 800c3b8:	440b      	add	r3, r1
 800c3ba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c3be:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d13c      	bne.n	800c442 <KyushinJudge+0x63a>
 800c3c8:	4b2f      	ldr	r3, [pc, #188]	; (800c488 <KyushinJudge+0x680>)
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	4a2e      	ldr	r2, [pc, #184]	; (800c488 <KyushinJudge+0x680>)
 800c3d0:	7852      	ldrb	r2, [r2, #1]
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	4a2e      	ldr	r2, [pc, #184]	; (800c490 <KyushinJudge+0x688>)
 800c3d6:	011b      	lsls	r3, r3, #4
 800c3d8:	440b      	add	r3, r1
 800c3da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c3de:	4b2a      	ldr	r3, [pc, #168]	; (800c488 <KyushinJudge+0x680>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	461c      	mov	r4, r3
 800c3e4:	4b28      	ldr	r3, [pc, #160]	; (800c488 <KyushinJudge+0x680>)
 800c3e6:	785b      	ldrb	r3, [r3, #1]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	4929      	ldr	r1, [pc, #164]	; (800c490 <KyushinJudge+0x688>)
 800c3ec:	0123      	lsls	r3, r4, #4
 800c3ee:	4403      	add	r3, r0
 800c3f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d224      	bcs.n	800c442 <KyushinJudge+0x63a>
 800c3f8:	4b23      	ldr	r3, [pc, #140]	; (800c488 <KyushinJudge+0x680>)
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d020      	beq.n	800c442 <KyushinJudge+0x63a>
				  //右西
				  Pos.Dir = right;
 800c400:	4b21      	ldr	r3, [pc, #132]	; (800c488 <KyushinJudge+0x680>)
 800c402:	2201      	movs	r2, #1
 800c404:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800c406:	4b20      	ldr	r3, [pc, #128]	; (800c488 <KyushinJudge+0x680>)
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	4b1e      	ldr	r3, [pc, #120]	; (800c488 <KyushinJudge+0x680>)
 800c410:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c412:	4b1d      	ldr	r3, [pc, #116]	; (800c488 <KyushinJudge+0x680>)
 800c414:	785a      	ldrb	r2, [r3, #1]
 800c416:	4b1c      	ldr	r3, [pc, #112]	; (800c488 <KyushinJudge+0x680>)
 800c418:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800c41a:	4b1b      	ldr	r3, [pc, #108]	; (800c488 <KyushinJudge+0x680>)
 800c41c:	2203      	movs	r2, #3
 800c41e:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	4618      	mov	r0, r3
 800c424:	f7fe fa12 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c428:	4b17      	ldr	r3, [pc, #92]	; (800c488 <KyushinJudge+0x680>)
 800c42a:	7a5a      	ldrb	r2, [r3, #9]
 800c42c:	4b16      	ldr	r3, [pc, #88]	; (800c488 <KyushinJudge+0x680>)
 800c42e:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c430:	4b15      	ldr	r3, [pc, #84]	; (800c488 <KyushinJudge+0x680>)
 800c432:	799a      	ldrb	r2, [r3, #6]
 800c434:	4b14      	ldr	r3, [pc, #80]	; (800c488 <KyushinJudge+0x680>)
 800c436:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c438:	4b13      	ldr	r3, [pc, #76]	; (800c488 <KyushinJudge+0x680>)
 800c43a:	79da      	ldrb	r2, [r3, #7]
 800c43c:	4b12      	ldr	r3, [pc, #72]	; (800c488 <KyushinJudge+0x680>)
 800c43e:	705a      	strb	r2, [r3, #1]
 800c440:	e020      	b.n	800c484 <KyushinJudge+0x67c>
			  }
			  else {
				  //後北
				  Pos.Dir = back;
 800c442:	4b11      	ldr	r3, [pc, #68]	; (800c488 <KyushinJudge+0x680>)
 800c444:	2202      	movs	r2, #2
 800c446:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c448:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <KyushinJudge+0x680>)
 800c44a:	781a      	ldrb	r2, [r3, #0]
 800c44c:	4b0e      	ldr	r3, [pc, #56]	; (800c488 <KyushinJudge+0x680>)
 800c44e:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800c450:	4b0d      	ldr	r3, [pc, #52]	; (800c488 <KyushinJudge+0x680>)
 800c452:	785b      	ldrb	r3, [r3, #1]
 800c454:	3301      	adds	r3, #1
 800c456:	b2da      	uxtb	r2, r3
 800c458:	4b0b      	ldr	r3, [pc, #44]	; (800c488 <KyushinJudge+0x680>)
 800c45a:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800c45c:	4b0a      	ldr	r3, [pc, #40]	; (800c488 <KyushinJudge+0x680>)
 800c45e:	2200      	movs	r2, #0
 800c460:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c462:	79fb      	ldrb	r3, [r7, #7]
 800c464:	4618      	mov	r0, r3
 800c466:	f7fe f9f1 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c46a:	4b07      	ldr	r3, [pc, #28]	; (800c488 <KyushinJudge+0x680>)
 800c46c:	7a5a      	ldrb	r2, [r3, #9]
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <KyushinJudge+0x680>)
 800c470:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c472:	4b05      	ldr	r3, [pc, #20]	; (800c488 <KyushinJudge+0x680>)
 800c474:	799a      	ldrb	r2, [r3, #6]
 800c476:	4b04      	ldr	r3, [pc, #16]	; (800c488 <KyushinJudge+0x680>)
 800c478:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c47a:	4b03      	ldr	r3, [pc, #12]	; (800c488 <KyushinJudge+0x680>)
 800c47c:	79da      	ldrb	r2, [r3, #7]
 800c47e:	4b02      	ldr	r3, [pc, #8]	; (800c488 <KyushinJudge+0x680>)
 800c480:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c482:	e111      	b.n	800c6a8 <KyushinJudge+0x8a0>
 800c484:	e110      	b.n	800c6a8 <KyushinJudge+0x8a0>
 800c486:	bf00      	nop
 800c488:	20000000 	.word	0x20000000
 800c48c:	200002ec 	.word	0x200002ec
 800c490:	200004ec 	.word	0x200004ec

		  case west:

			  if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800c494:	4b86      	ldr	r3, [pc, #536]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	4618      	mov	r0, r3
 800c49a:	4b85      	ldr	r3, [pc, #532]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c49c:	785b      	ldrb	r3, [r3, #1]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4a84      	ldr	r2, [pc, #528]	; (800c6b4 <KyushinJudge+0x8ac>)
 800c4a2:	0103      	lsls	r3, r0, #4
 800c4a4:	440b      	add	r3, r1
 800c4a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c4aa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d13c      	bne.n	800c52e <KyushinJudge+0x726>
 800c4b4:	4b7e      	ldr	r3, [pc, #504]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	4a7d      	ldr	r2, [pc, #500]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c4bc:	7852      	ldrb	r2, [r2, #1]
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4a7d      	ldr	r2, [pc, #500]	; (800c6b8 <KyushinJudge+0x8b0>)
 800c4c2:	011b      	lsls	r3, r3, #4
 800c4c4:	440b      	add	r3, r1
 800c4c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c4ca:	4b79      	ldr	r3, [pc, #484]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	461c      	mov	r4, r3
 800c4d0:	4b77      	ldr	r3, [pc, #476]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c4d2:	785b      	ldrb	r3, [r3, #1]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	4978      	ldr	r1, [pc, #480]	; (800c6b8 <KyushinJudge+0x8b0>)
 800c4d8:	0123      	lsls	r3, r4, #4
 800c4da:	4403      	add	r3, r0
 800c4dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d224      	bcs.n	800c52e <KyushinJudge+0x726>
 800c4e4:	4b72      	ldr	r3, [pc, #456]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d020      	beq.n	800c52e <KyushinJudge+0x726>
				  //前西
				  Pos.Dir = front;
 800c4ec:	4b70      	ldr	r3, [pc, #448]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800c4f2:	4b6f      	ldr	r3, [pc, #444]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	4b6d      	ldr	r3, [pc, #436]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c4fc:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c4fe:	4b6c      	ldr	r3, [pc, #432]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c500:	785a      	ldrb	r2, [r3, #1]
 800c502:	4b6b      	ldr	r3, [pc, #428]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c504:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800c506:	4b6a      	ldr	r3, [pc, #424]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c508:	2203      	movs	r2, #3
 800c50a:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c50c:	79fb      	ldrb	r3, [r7, #7]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fe f99c 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c514:	4b66      	ldr	r3, [pc, #408]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c516:	7a5a      	ldrb	r2, [r3, #9]
 800c518:	4b65      	ldr	r3, [pc, #404]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c51a:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c51c:	4b64      	ldr	r3, [pc, #400]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c51e:	799a      	ldrb	r2, [r3, #6]
 800c520:	4b63      	ldr	r3, [pc, #396]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c522:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c524:	4b62      	ldr	r3, [pc, #392]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c526:	79da      	ldrb	r2, [r3, #7]
 800c528:	4b61      	ldr	r3, [pc, #388]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c52a:	705a      	strb	r2, [r3, #1]
 800c52c:	e0ba      	b.n	800c6a4 <KyushinJudge+0x89c>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800c52e:	4b60      	ldr	r3, [pc, #384]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	4618      	mov	r0, r3
 800c534:	4b5e      	ldr	r3, [pc, #376]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c536:	785b      	ldrb	r3, [r3, #1]
 800c538:	4619      	mov	r1, r3
 800c53a:	4a5e      	ldr	r2, [pc, #376]	; (800c6b4 <KyushinJudge+0x8ac>)
 800c53c:	0103      	lsls	r3, r0, #4
 800c53e:	440b      	add	r3, r1
 800c540:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c544:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d13c      	bne.n	800c5c8 <KyushinJudge+0x7c0>
 800c54e:	4b58      	ldr	r3, [pc, #352]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	4b56      	ldr	r3, [pc, #344]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c556:	785b      	ldrb	r3, [r3, #1]
 800c558:	3b01      	subs	r3, #1
 800c55a:	4957      	ldr	r1, [pc, #348]	; (800c6b8 <KyushinJudge+0x8b0>)
 800c55c:	0112      	lsls	r2, r2, #4
 800c55e:	4413      	add	r3, r2
 800c560:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c564:	4b52      	ldr	r3, [pc, #328]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	461c      	mov	r4, r3
 800c56a:	4b51      	ldr	r3, [pc, #324]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c56c:	785b      	ldrb	r3, [r3, #1]
 800c56e:	4618      	mov	r0, r3
 800c570:	4951      	ldr	r1, [pc, #324]	; (800c6b8 <KyushinJudge+0x8b0>)
 800c572:	0123      	lsls	r3, r4, #4
 800c574:	4403      	add	r3, r0
 800c576:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d224      	bcs.n	800c5c8 <KyushinJudge+0x7c0>
 800c57e:	4b4c      	ldr	r3, [pc, #304]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c580:	785b      	ldrb	r3, [r3, #1]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d020      	beq.n	800c5c8 <KyushinJudge+0x7c0>
				  //左?��?
    			  Pos.Dir = left;
 800c586:	4b4a      	ldr	r3, [pc, #296]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c588:	2203      	movs	r2, #3
 800c58a:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X;
 800c58c:	4b48      	ldr	r3, [pc, #288]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c58e:	781a      	ldrb	r2, [r3, #0]
 800c590:	4b47      	ldr	r3, [pc, #284]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c592:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y - 1;
 800c594:	4b46      	ldr	r3, [pc, #280]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c596:	785b      	ldrb	r3, [r3, #1]
 800c598:	3b01      	subs	r3, #1
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	4b44      	ldr	r3, [pc, #272]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c59e:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = south;
 800c5a0:	4b43      	ldr	r3, [pc, #268]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe f94f 	bl	800a84c <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800c5ae:	4b40      	ldr	r3, [pc, #256]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5b0:	7a5a      	ldrb	r2, [r3, #9]
 800c5b2:	4b3f      	ldr	r3, [pc, #252]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5b4:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c5b6:	4b3e      	ldr	r3, [pc, #248]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5b8:	799a      	ldrb	r2, [r3, #6]
 800c5ba:	4b3d      	ldr	r3, [pc, #244]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5bc:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c5be:	4b3c      	ldr	r3, [pc, #240]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5c0:	79da      	ldrb	r2, [r3, #7]
 800c5c2:	4b3b      	ldr	r3, [pc, #236]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5c4:	705a      	strb	r2, [r3, #1]
 800c5c6:	e06d      	b.n	800c6a4 <KyushinJudge+0x89c>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL &&walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800c5c8:	4b39      	ldr	r3, [pc, #228]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	4b38      	ldr	r3, [pc, #224]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5d0:	785b      	ldrb	r3, [r3, #1]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4a37      	ldr	r2, [pc, #220]	; (800c6b4 <KyushinJudge+0x8ac>)
 800c5d6:	0103      	lsls	r3, r0, #4
 800c5d8:	440b      	add	r3, r1
 800c5da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c5de:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d13c      	bne.n	800c662 <KyushinJudge+0x85a>
 800c5e8:	4b31      	ldr	r3, [pc, #196]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	4b30      	ldr	r3, [pc, #192]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c5f0:	785b      	ldrb	r3, [r3, #1]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	4930      	ldr	r1, [pc, #192]	; (800c6b8 <KyushinJudge+0x8b0>)
 800c5f6:	0112      	lsls	r2, r2, #4
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c5fe:	4b2c      	ldr	r3, [pc, #176]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	461c      	mov	r4, r3
 800c604:	4b2a      	ldr	r3, [pc, #168]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c606:	785b      	ldrb	r3, [r3, #1]
 800c608:	4618      	mov	r0, r3
 800c60a:	492b      	ldr	r1, [pc, #172]	; (800c6b8 <KyushinJudge+0x8b0>)
 800c60c:	0123      	lsls	r3, r4, #4
 800c60e:	4403      	add	r3, r0
 800c610:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c614:	429a      	cmp	r2, r3
 800c616:	d224      	bcs.n	800c662 <KyushinJudge+0x85a>
 800c618:	4b25      	ldr	r3, [pc, #148]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	2b0e      	cmp	r3, #14
 800c61e:	d820      	bhi.n	800c662 <KyushinJudge+0x85a>
				  //右?��?
				  Pos.Dir = right;
 800c620:	4b23      	ldr	r3, [pc, #140]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c622:	2201      	movs	r2, #1
 800c624:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c626:	4b22      	ldr	r3, [pc, #136]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	4b21      	ldr	r3, [pc, #132]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c62c:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800c62e:	4b20      	ldr	r3, [pc, #128]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c630:	785b      	ldrb	r3, [r3, #1]
 800c632:	3301      	adds	r3, #1
 800c634:	b2da      	uxtb	r2, r3
 800c636:	4b1e      	ldr	r3, [pc, #120]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c638:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800c63a:	4b1d      	ldr	r3, [pc, #116]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe f902 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c648:	4b19      	ldr	r3, [pc, #100]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c64a:	7a5a      	ldrb	r2, [r3, #9]
 800c64c:	4b18      	ldr	r3, [pc, #96]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c64e:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c650:	4b17      	ldr	r3, [pc, #92]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c652:	799a      	ldrb	r2, [r3, #6]
 800c654:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c656:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c658:	4b15      	ldr	r3, [pc, #84]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c65a:	79da      	ldrb	r2, [r3, #7]
 800c65c:	4b14      	ldr	r3, [pc, #80]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c65e:	705a      	strb	r2, [r3, #1]
 800c660:	e020      	b.n	800c6a4 <KyushinJudge+0x89c>
			  }
			  else {
				  //後東
				  Pos.Dir = back;
 800c662:	4b13      	ldr	r3, [pc, #76]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c664:	2202      	movs	r2, #2
 800c666:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800c668:	4b11      	ldr	r3, [pc, #68]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	3301      	adds	r3, #1
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	4b0f      	ldr	r3, [pc, #60]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c672:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c674:	4b0e      	ldr	r3, [pc, #56]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c676:	785a      	ldrb	r2, [r3, #1]
 800c678:	4b0d      	ldr	r3, [pc, #52]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c67a:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800c67c:	4b0c      	ldr	r3, [pc, #48]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c67e:	2201      	movs	r2, #1
 800c680:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	4618      	mov	r0, r3
 800c686:	f7fe f8e1 	bl	800a84c <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c68a:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c68c:	7a5a      	ldrb	r2, [r3, #9]
 800c68e:	4b08      	ldr	r3, [pc, #32]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c690:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c692:	4b07      	ldr	r3, [pc, #28]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c694:	799a      	ldrb	r2, [r3, #6]
 800c696:	4b06      	ldr	r3, [pc, #24]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c698:	701a      	strb	r2, [r3, #0]
		       	  Pos.Y = Pos.NextY;
 800c69a:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c69c:	79da      	ldrb	r2, [r3, #7]
 800c69e:	4b04      	ldr	r3, [pc, #16]	; (800c6b0 <KyushinJudge+0x8a8>)
 800c6a0:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c6a2:	e001      	b.n	800c6a8 <KyushinJudge+0x8a0>
 800c6a4:	e000      	b.n	800c6a8 <KyushinJudge+0x8a0>

		  default:
			  break;
 800c6a6:	bf00      	nop
		  //swtich end
	}

}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd90      	pop	{r4, r7, pc}
 800c6b0:	20000000 	.word	0x20000000
 800c6b4:	200002ec 	.word	0x200002ec
 800c6b8:	200004ec 	.word	0x200004ec

0800c6bc <is_unknown>:
    	  default:
    		  break;
    	  }//swtich end
}
_Bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800c6c6:	491c      	ldr	r1, [pc, #112]	; (800c738 <is_unknown+0x7c>)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	011a      	lsls	r2, r3, #4
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c6d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d023      	beq.n	800c726 <is_unknown+0x6a>
 800c6de:	4916      	ldr	r1, [pc, #88]	; (800c738 <is_unknown+0x7c>)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	011a      	lsls	r2, r3, #4
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c6ec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d017      	beq.n	800c726 <is_unknown+0x6a>
 800c6f6:	4910      	ldr	r1, [pc, #64]	; (800c738 <is_unknown+0x7c>)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	011a      	lsls	r2, r3, #4
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	4413      	add	r3, r2
 800c700:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c704:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d00b      	beq.n	800c726 <is_unknown+0x6a>
 800c70e:	490a      	ldr	r1, [pc, #40]	; (800c738 <is_unknown+0x7c>)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	011a      	lsls	r2, r3, #4
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	4413      	add	r3, r2
 800c718:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c71c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b02      	cmp	r3, #2
 800c724:	d101      	bne.n	800c72a <is_unknown+0x6e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 800c726:	2301      	movs	r3, #1
 800c728:	e000      	b.n	800c72c <is_unknown+0x70>
	}
	else
	{
		return false;	//探索済
 800c72a:	2300      	movs	r3, #0
	}
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	200002ec 	.word	0x200002ec

0800c73c <get_priority>:
int get_priority(int x, int y, cardinal car)	//そのマスの情報から、優先度を算出する
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	4613      	mov	r3, r2
 800c748:	71fb      	strb	r3, [r7, #7]
	//それに加え、自分の向きと、行きたい方向から、
	//前(2)横(1)後(0)の優先度を付加する。

	int priority;	//優先度を記録する変数

	priority = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	617b      	str	r3, [r7, #20]

	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800c74e:	4b15      	ldr	r3, [pc, #84]	; (800c7a4 <get_priority+0x68>)
 800c750:	78db      	ldrb	r3, [r3, #3]
 800c752:	79fa      	ldrb	r2, [r7, #7]
 800c754:	429a      	cmp	r2, r3
 800c756:	d102      	bne.n	800c75e <get_priority+0x22>
	{
		priority = 2;
 800c758:	2302      	movs	r3, #2
 800c75a:	617b      	str	r3, [r7, #20]
 800c75c:	e012      	b.n	800c784 <get_priority+0x48>
	}
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800c75e:	4b11      	ldr	r3, [pc, #68]	; (800c7a4 <get_priority+0x68>)
 800c760:	78db      	ldrb	r3, [r3, #3]
 800c762:	1d1a      	adds	r2, r3, #4
 800c764:	79fb      	ldrb	r3, [r7, #7]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	425a      	negs	r2, r3
 800c76a:	f003 0303 	and.w	r3, r3, #3
 800c76e:	f002 0203 	and.w	r2, r2, #3
 800c772:	bf58      	it	pl
 800c774:	4253      	negpl	r3, r2
 800c776:	2b02      	cmp	r3, #2
 800c778:	d102      	bne.n	800c780 <get_priority+0x44>
	{
		priority = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	617b      	str	r3, [r7, #20]
 800c77e:	e001      	b.n	800c784 <get_priority+0x48>
	}
	else						//それ以外(左右どちらか)の場合
	{
		priority = 1;
 800c780:	2301      	movs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
	}


	if(is_unknown(x,y) == true)
 800c784:	68b9      	ldr	r1, [r7, #8]
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff ff98 	bl	800c6bc <is_unknown>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <get_priority+0x5c>
	{
		priority += 4;				//未探索の場合優先度をさらに付加
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	3304      	adds	r3, #4
 800c796:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 800c798:	697b      	ldr	r3, [r7, #20]

}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3718      	adds	r7, #24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20000000 	.word	0x20000000

0800c7a8 <get_nextdir>:
int get_nextdir(int x, int y, int mask)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b088      	sub	sp, #32
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
	//ゴール座標x,yに向かう場合、今どちらに行くべきかを判断する。
	//探索、最短の切り替えのためのmaskを指定、dirは方角を示す
	int little,priority,tmp_priority;		//最小の値を探すために使用する変数


	make_map(x,y,mask);				//歩数Map生成
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	68b9      	ldr	r1, [r7, #8]
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f7ff f94b 	bl	800ba54 <make_map>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800c7be:	23ff      	movs	r3, #255	; 0xff
 800c7c0:	61fb      	str	r3, [r7, #28]

	priority = 0;					//優先度の初期値は0
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	61bb      	str	r3, [r7, #24]

		//maskの意味はstatic_parameter.hを参照
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800c7c6:	4ba2      	ldr	r3, [pc, #648]	; (800ca50 <get_nextdir+0x2a8>)
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	4ba0      	ldr	r3, [pc, #640]	; (800ca50 <get_nextdir+0x2a8>)
 800c7ce:	785b      	ldrb	r3, [r3, #1]
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	4aa0      	ldr	r2, [pc, #640]	; (800ca54 <get_nextdir+0x2ac>)
 800c7d4:	0103      	lsls	r3, r0, #4
 800c7d6:	440b      	add	r3, r1
 800c7d8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c7dc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d143      	bne.n	800c874 <get_nextdir+0xcc>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y + 1, north);	//優先度を算出
 800c7ec:	4b98      	ldr	r3, [pc, #608]	; (800ca50 <get_nextdir+0x2a8>)
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	4b97      	ldr	r3, [pc, #604]	; (800ca50 <get_nextdir+0x2a8>)
 800c7f4:	785b      	ldrb	r3, [r3, #1]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	f7ff ff9e 	bl	800c73c <get_priority>
 800c800:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y+1] < little)				//一番歩数が小さい方向を見つける
 800c802:	4b93      	ldr	r3, [pc, #588]	; (800ca50 <get_nextdir+0x2a8>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	461a      	mov	r2, r3
 800c808:	4b91      	ldr	r3, [pc, #580]	; (800ca50 <get_nextdir+0x2a8>)
 800c80a:	785b      	ldrb	r3, [r3, #1]
 800c80c:	3301      	adds	r3, #1
 800c80e:	4992      	ldr	r1, [pc, #584]	; (800ca58 <get_nextdir+0x2b0>)
 800c810:	0112      	lsls	r2, r2, #4
 800c812:	4413      	add	r3, r2
 800c814:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c818:	461a      	mov	r2, r3
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	4293      	cmp	r3, r2
 800c81e:	dd11      	ble.n	800c844 <get_nextdir+0x9c>
		{
			little = walk_map[Pos.X][Pos.Y+1];			//ひとまず北が歩数が小さい事にする
 800c820:	4b8b      	ldr	r3, [pc, #556]	; (800ca50 <get_nextdir+0x2a8>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	461a      	mov	r2, r3
 800c826:	4b8a      	ldr	r3, [pc, #552]	; (800ca50 <get_nextdir+0x2a8>)
 800c828:	785b      	ldrb	r3, [r3, #1]
 800c82a:	3301      	adds	r3, #1
 800c82c:	498a      	ldr	r1, [pc, #552]	; (800ca58 <get_nextdir+0x2b0>)
 800c82e:	0112      	lsls	r2, r2, #4
 800c830:	4413      	add	r3, r2
 800c832:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c836:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = north;						//方向を保存
 800c838:	4b85      	ldr	r3, [pc, #532]	; (800ca50 <get_nextdir+0x2a8>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	61bb      	str	r3, [r7, #24]
 800c842:	e017      	b.n	800c874 <get_nextdir+0xcc>
		}
		else if(walk_map[Pos.X][Pos.Y+1] == little)			//歩数が同じ場合は優先度から判断する
 800c844:	4b82      	ldr	r3, [pc, #520]	; (800ca50 <get_nextdir+0x2a8>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	461a      	mov	r2, r3
 800c84a:	4b81      	ldr	r3, [pc, #516]	; (800ca50 <get_nextdir+0x2a8>)
 800c84c:	785b      	ldrb	r3, [r3, #1]
 800c84e:	3301      	adds	r3, #1
 800c850:	4981      	ldr	r1, [pc, #516]	; (800ca58 <get_nextdir+0x2b0>)
 800c852:	0112      	lsls	r2, r2, #4
 800c854:	4413      	add	r3, r2
 800c856:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c85a:	461a      	mov	r2, r3
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	4293      	cmp	r3, r2
 800c860:	d108      	bne.n	800c874 <get_nextdir+0xcc>
		{
			if(priority < tmp_priority )				//優先度を評価
 800c862:	69ba      	ldr	r2, [r7, #24]
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	429a      	cmp	r2, r3
 800c868:	da04      	bge.n	800c874 <get_nextdir+0xcc>
			{
				Pos.NextCar = north;					//方向を更新
 800c86a:	4b79      	ldr	r3, [pc, #484]	; (800ca50 <get_nextdir+0x2a8>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].east & mask) == NOWALL)			//東に壁がなければ
 800c874:	4b76      	ldr	r3, [pc, #472]	; (800ca50 <get_nextdir+0x2a8>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	4618      	mov	r0, r3
 800c87a:	4b75      	ldr	r3, [pc, #468]	; (800ca50 <get_nextdir+0x2a8>)
 800c87c:	785b      	ldrb	r3, [r3, #1]
 800c87e:	4619      	mov	r1, r3
 800c880:	4a74      	ldr	r2, [pc, #464]	; (800ca54 <get_nextdir+0x2ac>)
 800c882:	0103      	lsls	r3, r0, #4
 800c884:	440b      	add	r3, r1
 800c886:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c88a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	461a      	mov	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4013      	ands	r3, r2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d143      	bne.n	800c922 <get_nextdir+0x17a>
	{
		tmp_priority = get_priority(Pos.X + 1, Pos.Y, east);	//優先度を算出
 800c89a:	4b6d      	ldr	r3, [pc, #436]	; (800ca50 <get_nextdir+0x2a8>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	4a6b      	ldr	r2, [pc, #428]	; (800ca50 <get_nextdir+0x2a8>)
 800c8a2:	7852      	ldrb	r2, [r2, #1]
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7ff ff47 	bl	800c73c <get_priority>
 800c8ae:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X + 1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800c8b0:	4b67      	ldr	r3, [pc, #412]	; (800ca50 <get_nextdir+0x2a8>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	4a66      	ldr	r2, [pc, #408]	; (800ca50 <get_nextdir+0x2a8>)
 800c8b8:	7852      	ldrb	r2, [r2, #1]
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	4a66      	ldr	r2, [pc, #408]	; (800ca58 <get_nextdir+0x2b0>)
 800c8be:	011b      	lsls	r3, r3, #4
 800c8c0:	440b      	add	r3, r1
 800c8c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	dd11      	ble.n	800c8f2 <get_nextdir+0x14a>
		{
			little = walk_map[Pos.X+1][Pos.Y];			//ひとまず東が歩数が小さい事にする
 800c8ce:	4b60      	ldr	r3, [pc, #384]	; (800ca50 <get_nextdir+0x2a8>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	4a5e      	ldr	r2, [pc, #376]	; (800ca50 <get_nextdir+0x2a8>)
 800c8d6:	7852      	ldrb	r2, [r2, #1]
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4a5f      	ldr	r2, [pc, #380]	; (800ca58 <get_nextdir+0x2b0>)
 800c8dc:	011b      	lsls	r3, r3, #4
 800c8de:	440b      	add	r3, r1
 800c8e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e4:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = east;						//方向を保存
 800c8e6:	4b5a      	ldr	r3, [pc, #360]	; (800ca50 <get_nextdir+0x2a8>)
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	61bb      	str	r3, [r7, #24]
 800c8f0:	e017      	b.n	800c922 <get_nextdir+0x17a>
		}
		else if(walk_map[Pos.X + 1][Pos.Y] == little)			//歩数が同じ場合、優先度から判断
 800c8f2:	4b57      	ldr	r3, [pc, #348]	; (800ca50 <get_nextdir+0x2a8>)
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	4a55      	ldr	r2, [pc, #340]	; (800ca50 <get_nextdir+0x2a8>)
 800c8fa:	7852      	ldrb	r2, [r2, #1]
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	4a56      	ldr	r2, [pc, #344]	; (800ca58 <get_nextdir+0x2b0>)
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	440b      	add	r3, r1
 800c904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c908:	461a      	mov	r2, r3
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d108      	bne.n	800c922 <get_nextdir+0x17a>
		{
			if(priority < tmp_priority)				//優先度を評価
 800c910:	69ba      	ldr	r2, [r7, #24]
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	429a      	cmp	r2, r3
 800c916:	da04      	bge.n	800c922 <get_nextdir+0x17a>
			{
				Pos.NextCar = east;					//方向を保存
 800c918:	4b4d      	ldr	r3, [pc, #308]	; (800ca50 <get_nextdir+0x2a8>)
 800c91a:	2201      	movs	r2, #1
 800c91c:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].south & mask) == NOWALL)			//南に壁がなければ
 800c922:	4b4b      	ldr	r3, [pc, #300]	; (800ca50 <get_nextdir+0x2a8>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	4b49      	ldr	r3, [pc, #292]	; (800ca50 <get_nextdir+0x2a8>)
 800c92a:	785b      	ldrb	r3, [r3, #1]
 800c92c:	4619      	mov	r1, r3
 800c92e:	4a49      	ldr	r2, [pc, #292]	; (800ca54 <get_nextdir+0x2ac>)
 800c930:	0103      	lsls	r3, r0, #4
 800c932:	440b      	add	r3, r1
 800c934:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c938:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	461a      	mov	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4013      	ands	r3, r2
 800c944:	2b00      	cmp	r3, #0
 800c946:	d143      	bne.n	800c9d0 <get_nextdir+0x228>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y - 1, south);	//優先度を算出
 800c948:	4b41      	ldr	r3, [pc, #260]	; (800ca50 <get_nextdir+0x2a8>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	4618      	mov	r0, r3
 800c94e:	4b40      	ldr	r3, [pc, #256]	; (800ca50 <get_nextdir+0x2a8>)
 800c950:	785b      	ldrb	r3, [r3, #1]
 800c952:	3b01      	subs	r3, #1
 800c954:	2202      	movs	r2, #2
 800c956:	4619      	mov	r1, r3
 800c958:	f7ff fef0 	bl	800c73c <get_priority>
 800c95c:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y - 1] < little)				//一番歩数が小さい方向を見つける
 800c95e:	4b3c      	ldr	r3, [pc, #240]	; (800ca50 <get_nextdir+0x2a8>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	4b3a      	ldr	r3, [pc, #232]	; (800ca50 <get_nextdir+0x2a8>)
 800c966:	785b      	ldrb	r3, [r3, #1]
 800c968:	3b01      	subs	r3, #1
 800c96a:	493b      	ldr	r1, [pc, #236]	; (800ca58 <get_nextdir+0x2b0>)
 800c96c:	0112      	lsls	r2, r2, #4
 800c96e:	4413      	add	r3, r2
 800c970:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c974:	461a      	mov	r2, r3
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	4293      	cmp	r3, r2
 800c97a:	dd11      	ble.n	800c9a0 <get_nextdir+0x1f8>
		{
			little = walk_map[Pos.X][Pos.Y-1];			//ひとまず南が歩数が小さい事にする
 800c97c:	4b34      	ldr	r3, [pc, #208]	; (800ca50 <get_nextdir+0x2a8>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	461a      	mov	r2, r3
 800c982:	4b33      	ldr	r3, [pc, #204]	; (800ca50 <get_nextdir+0x2a8>)
 800c984:	785b      	ldrb	r3, [r3, #1]
 800c986:	3b01      	subs	r3, #1
 800c988:	4933      	ldr	r1, [pc, #204]	; (800ca58 <get_nextdir+0x2b0>)
 800c98a:	0112      	lsls	r2, r2, #4
 800c98c:	4413      	add	r3, r2
 800c98e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c992:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = south;						//方向を保存
 800c994:	4b2e      	ldr	r3, [pc, #184]	; (800ca50 <get_nextdir+0x2a8>)
 800c996:	2202      	movs	r2, #2
 800c998:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	61bb      	str	r3, [r7, #24]
 800c99e:	e017      	b.n	800c9d0 <get_nextdir+0x228>
		}
		else if(walk_map[Pos.X][Pos.Y - 1] == little)			//歩数が同じ場合、優先度で評価
 800c9a0:	4b2b      	ldr	r3, [pc, #172]	; (800ca50 <get_nextdir+0x2a8>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	4b2a      	ldr	r3, [pc, #168]	; (800ca50 <get_nextdir+0x2a8>)
 800c9a8:	785b      	ldrb	r3, [r3, #1]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	492a      	ldr	r1, [pc, #168]	; (800ca58 <get_nextdir+0x2b0>)
 800c9ae:	0112      	lsls	r2, r2, #4
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d108      	bne.n	800c9d0 <get_nextdir+0x228>
		{
			if(priority < tmp_priority)				//優先度を評価
 800c9be:	69ba      	ldr	r2, [r7, #24]
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	da04      	bge.n	800c9d0 <get_nextdir+0x228>
			{
				Pos.NextCar = south;					//方向を保存
 800c9c6:	4b22      	ldr	r3, [pc, #136]	; (800ca50 <get_nextdir+0x2a8>)
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].west & mask) == NOWALL)			//西に壁がなければ
 800c9d0:	4b1f      	ldr	r3, [pc, #124]	; (800ca50 <get_nextdir+0x2a8>)
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	4b1e      	ldr	r3, [pc, #120]	; (800ca50 <get_nextdir+0x2a8>)
 800c9d8:	785b      	ldrb	r3, [r3, #1]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ca54 <get_nextdir+0x2ac>)
 800c9de:	0103      	lsls	r3, r0, #4
 800c9e0:	440b      	add	r3, r1
 800c9e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c9e6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d146      	bne.n	800ca84 <get_nextdir+0x2dc>
	{
		tmp_priority = get_priority(Pos.X - 1, Pos.Y, west);	//優先度を算出
 800c9f6:	4b16      	ldr	r3, [pc, #88]	; (800ca50 <get_nextdir+0x2a8>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	4a14      	ldr	r2, [pc, #80]	; (800ca50 <get_nextdir+0x2a8>)
 800c9fe:	7852      	ldrb	r2, [r2, #1]
 800ca00:	4611      	mov	r1, r2
 800ca02:	2203      	movs	r2, #3
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7ff fe99 	bl	800c73c <get_priority>
 800ca0a:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X-1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800ca0c:	4b10      	ldr	r3, [pc, #64]	; (800ca50 <get_nextdir+0x2a8>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	4a0f      	ldr	r2, [pc, #60]	; (800ca50 <get_nextdir+0x2a8>)
 800ca14:	7852      	ldrb	r2, [r2, #1]
 800ca16:	4611      	mov	r1, r2
 800ca18:	4a0f      	ldr	r2, [pc, #60]	; (800ca58 <get_nextdir+0x2b0>)
 800ca1a:	011b      	lsls	r3, r3, #4
 800ca1c:	440b      	add	r3, r1
 800ca1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca22:	461a      	mov	r2, r3
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	4293      	cmp	r3, r2
 800ca28:	dd18      	ble.n	800ca5c <get_nextdir+0x2b4>
		{
			little = walk_map[Pos.X-1][Pos.Y];			//西が歩数が小さい
 800ca2a:	4b09      	ldr	r3, [pc, #36]	; (800ca50 <get_nextdir+0x2a8>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	4a07      	ldr	r2, [pc, #28]	; (800ca50 <get_nextdir+0x2a8>)
 800ca32:	7852      	ldrb	r2, [r2, #1]
 800ca34:	4611      	mov	r1, r2
 800ca36:	4a08      	ldr	r2, [pc, #32]	; (800ca58 <get_nextdir+0x2b0>)
 800ca38:	011b      	lsls	r3, r3, #4
 800ca3a:	440b      	add	r3, r1
 800ca3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca40:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = west;						//方向を保存
 800ca42:	4b03      	ldr	r3, [pc, #12]	; (800ca50 <get_nextdir+0x2a8>)
 800ca44:	2203      	movs	r2, #3
 800ca46:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	61bb      	str	r3, [r7, #24]
 800ca4c:	e01a      	b.n	800ca84 <get_nextdir+0x2dc>
 800ca4e:	bf00      	nop
 800ca50:	20000000 	.word	0x20000000
 800ca54:	200002ec 	.word	0x200002ec
 800ca58:	200004ec 	.word	0x200004ec
		}
		else if(walk_map[Pos.X - 1][Pos.Y] == little)			//歩数が同じ場合、優先度で評価
 800ca5c:	4b12      	ldr	r3, [pc, #72]	; (800caa8 <get_nextdir+0x300>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	3b01      	subs	r3, #1
 800ca62:	4a11      	ldr	r2, [pc, #68]	; (800caa8 <get_nextdir+0x300>)
 800ca64:	7852      	ldrb	r2, [r2, #1]
 800ca66:	4611      	mov	r1, r2
 800ca68:	4a10      	ldr	r2, [pc, #64]	; (800caac <get_nextdir+0x304>)
 800ca6a:	011b      	lsls	r3, r3, #4
 800ca6c:	440b      	add	r3, r1
 800ca6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca72:	461a      	mov	r2, r3
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d104      	bne.n	800ca84 <get_nextdir+0x2dc>
		{
			Pos.NextCar = west;						//方向を保存
 800ca7a:	4b0b      	ldr	r3, [pc, #44]	; (800caa8 <get_nextdir+0x300>)
 800ca7c:	2203      	movs	r2, #3
 800ca7e:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	61bb      	str	r3, [r7, #24]
		}
	}


	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800ca84:	4b08      	ldr	r3, [pc, #32]	; (800caa8 <get_nextdir+0x300>)
 800ca86:	7a5b      	ldrb	r3, [r3, #9]
 800ca88:	3304      	adds	r3, #4
 800ca8a:	4a07      	ldr	r2, [pc, #28]	; (800caa8 <get_nextdir+0x300>)
 800ca8c:	78d2      	ldrb	r2, [r2, #3]
 800ca8e:	1a9b      	subs	r3, r3, r2
 800ca90:	425a      	negs	r2, r3
 800ca92:	f003 0303 	and.w	r3, r3, #3
 800ca96:	f002 0203 	and.w	r2, r2, #3
 800ca9a:	bf58      	it	pl
 800ca9c:	4253      	negpl	r3, r2
										//演算の意味はmytyedef.h内のenum宣言から。

}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3720      	adds	r7, #32
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20000000 	.word	0x20000000
 800caac:	200004ec 	.word	0x200004ec

0800cab0 <fast_run>:
void fast_run(int x, int y, char turn_mode)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	4613      	mov	r3, r2
 800cabc:	71fb      	strb	r3, [r7, #7]
//		case west:
//			Pos.X--;	//西を向いたときはX座標を減らす
//			break;
//
//	}
	SearchOrFast = 1;
 800cabe:	4b49      	ldr	r3, [pc, #292]	; (800cbe4 <fast_run+0x134>)
 800cac0:	2201      	movs	r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800cac4:	4b48      	ldr	r3, [pc, #288]	; (800cbe8 <fast_run+0x138>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	709a      	strb	r2, [r3, #2]
	Pos.Car = north;
 800caca:	4b47      	ldr	r3, [pc, #284]	; (800cbe8 <fast_run+0x138>)
 800cacc:	2200      	movs	r2, #0
 800cace:	70da      	strb	r2, [r3, #3]
	Pos.NextX = Pos.X;
 800cad0:	4b45      	ldr	r3, [pc, #276]	; (800cbe8 <fast_run+0x138>)
 800cad2:	781a      	ldrb	r2, [r3, #0]
 800cad4:	4b44      	ldr	r3, [pc, #272]	; (800cbe8 <fast_run+0x138>)
 800cad6:	719a      	strb	r2, [r3, #6]
	Pos.NextY = Pos.Y + 1;
 800cad8:	4b43      	ldr	r3, [pc, #268]	; (800cbe8 <fast_run+0x138>)
 800cada:	785b      	ldrb	r3, [r3, #1]
 800cadc:	3301      	adds	r3, #1
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	4b41      	ldr	r3, [pc, #260]	; (800cbe8 <fast_run+0x138>)
 800cae2:	71da      	strb	r2, [r3, #7]
	Pos.NextCar = north;
 800cae4:	4b40      	ldr	r3, [pc, #256]	; (800cbe8 <fast_run+0x138>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	725a      	strb	r2, [r3, #9]
	Accel(61.75, ExploreVelocity);
 800caea:	4b40      	ldr	r3, [pc, #256]	; (800cbec <fast_run+0x13c>)
 800caec:	edd3 7a00 	vldr	s15, [r3]
 800caf0:	eef0 0a67 	vmov.f32	s1, s15
 800caf4:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800cbf0 <fast_run+0x140>
 800caf8:	f7fd fa86 	bl	800a008 <Accel>
 	Pos.X = Pos.NextX;
 800cafc:	4b3a      	ldr	r3, [pc, #232]	; (800cbe8 <fast_run+0x138>)
 800cafe:	799a      	ldrb	r2, [r3, #6]
 800cb00:	4b39      	ldr	r3, [pc, #228]	; (800cbe8 <fast_run+0x138>)
 800cb02:	701a      	strb	r2, [r3, #0]
    Pos.Y = Pos.NextY;
 800cb04:	4b38      	ldr	r3, [pc, #224]	; (800cbe8 <fast_run+0x138>)
 800cb06:	79da      	ldrb	r2, [r3, #7]
 800cb08:	4b37      	ldr	r3, [pc, #220]	; (800cbe8 <fast_run+0x138>)
 800cb0a:	705a      	strb	r2, [r3, #1]
	Pos.Car = Pos.NextCar;	//自分の向きを更新
 800cb0c:	4b36      	ldr	r3, [pc, #216]	; (800cbe8 <fast_run+0x138>)
 800cb0e:	7a5a      	ldrb	r2, [r3, #9]
 800cb10:	4b35      	ldr	r3, [pc, #212]	; (800cbe8 <fast_run+0x138>)
 800cb12:	70da      	strb	r2, [r3, #3]

	while((Pos.X != x) || (Pos.Y != y)){			//ゴールするまで繰り返す
 800cb14:	e054      	b.n	800cbc0 <fast_run+0x110>
		Pos.Dir = get_nextdir(x,y,0x03);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800cb16:	2203      	movs	r2, #3
 800cb18:	68b9      	ldr	r1, [r7, #8]
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f7ff fe44 	bl	800c7a8 <get_nextdir>
 800cb20:	4603      	mov	r3, r0
 800cb22:	b2da      	uxtb	r2, r3
 800cb24:	4b30      	ldr	r3, [pc, #192]	; (800cbe8 <fast_run+0x138>)
 800cb26:	709a      	strb	r2, [r3, #2]
		//向いた方向によって自分の座標を更新する
		switch(Pos.NextCar)//
 800cb28:	4b2f      	ldr	r3, [pc, #188]	; (800cbe8 <fast_run+0x138>)
 800cb2a:	7a5b      	ldrb	r3, [r3, #9]
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d837      	bhi.n	800cba0 <fast_run+0xf0>
 800cb30:	a201      	add	r2, pc, #4	; (adr r2, 800cb38 <fast_run+0x88>)
 800cb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb36:	bf00      	nop
 800cb38:	0800cb49 	.word	0x0800cb49
 800cb3c:	0800cb5f 	.word	0x0800cb5f
 800cb40:	0800cb75 	.word	0x0800cb75
 800cb44:	0800cb8b 	.word	0x0800cb8b
		{
			case north:
				Pos.NextX = Pos.X;
 800cb48:	4b27      	ldr	r3, [pc, #156]	; (800cbe8 <fast_run+0x138>)
 800cb4a:	781a      	ldrb	r2, [r3, #0]
 800cb4c:	4b26      	ldr	r3, [pc, #152]	; (800cbe8 <fast_run+0x138>)
 800cb4e:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y + 1;	//北を向いた時はY座標を増やす
 800cb50:	4b25      	ldr	r3, [pc, #148]	; (800cbe8 <fast_run+0x138>)
 800cb52:	785b      	ldrb	r3, [r3, #1]
 800cb54:	3301      	adds	r3, #1
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	4b23      	ldr	r3, [pc, #140]	; (800cbe8 <fast_run+0x138>)
 800cb5a:	71da      	strb	r2, [r3, #7]
				break;
 800cb5c:	e020      	b.n	800cba0 <fast_run+0xf0>

			case east:
				Pos.NextX = Pos.X + 1;	//東を向いた時はX座標を増やす
 800cb5e:	4b22      	ldr	r3, [pc, #136]	; (800cbe8 <fast_run+0x138>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	3301      	adds	r3, #1
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	4b20      	ldr	r3, [pc, #128]	; (800cbe8 <fast_run+0x138>)
 800cb68:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y;
 800cb6a:	4b1f      	ldr	r3, [pc, #124]	; (800cbe8 <fast_run+0x138>)
 800cb6c:	785a      	ldrb	r2, [r3, #1]
 800cb6e:	4b1e      	ldr	r3, [pc, #120]	; (800cbe8 <fast_run+0x138>)
 800cb70:	71da      	strb	r2, [r3, #7]
				break;
 800cb72:	e015      	b.n	800cba0 <fast_run+0xf0>

			case south:
				Pos.NextX = Pos.X;
 800cb74:	4b1c      	ldr	r3, [pc, #112]	; (800cbe8 <fast_run+0x138>)
 800cb76:	781a      	ldrb	r2, [r3, #0]
 800cb78:	4b1b      	ldr	r3, [pc, #108]	; (800cbe8 <fast_run+0x138>)
 800cb7a:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y - 1;	//南を向いた時はY座標を減らす
 800cb7c:	4b1a      	ldr	r3, [pc, #104]	; (800cbe8 <fast_run+0x138>)
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	4b18      	ldr	r3, [pc, #96]	; (800cbe8 <fast_run+0x138>)
 800cb86:	71da      	strb	r2, [r3, #7]
				break;
 800cb88:	e00a      	b.n	800cba0 <fast_run+0xf0>

			case west:
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
 800cb8a:	4b17      	ldr	r3, [pc, #92]	; (800cbe8 <fast_run+0x138>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	b2da      	uxtb	r2, r3
 800cb92:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <fast_run+0x138>)
 800cb94:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y;
 800cb96:	4b14      	ldr	r3, [pc, #80]	; (800cbe8 <fast_run+0x138>)
 800cb98:	785a      	ldrb	r2, [r3, #1]
 800cb9a:	4b13      	ldr	r3, [pc, #76]	; (800cbe8 <fast_run+0x138>)
 800cb9c:	71da      	strb	r2, [r3, #7]
				break;
 800cb9e:	bf00      	nop

		}
		SelectAction(turn_mode);
 800cba0:	79fb      	ldrb	r3, [r7, #7]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fd fe52 	bl	800a84c <SelectAction>
	 	Pos.X = Pos.NextX;
 800cba8:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <fast_run+0x138>)
 800cbaa:	799a      	ldrb	r2, [r3, #6]
 800cbac:	4b0e      	ldr	r3, [pc, #56]	; (800cbe8 <fast_run+0x138>)
 800cbae:	701a      	strb	r2, [r3, #0]
	    Pos.Y = Pos.NextY;
 800cbb0:	4b0d      	ldr	r3, [pc, #52]	; (800cbe8 <fast_run+0x138>)
 800cbb2:	79da      	ldrb	r2, [r3, #7]
 800cbb4:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <fast_run+0x138>)
 800cbb6:	705a      	strb	r2, [r3, #1]
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800cbb8:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <fast_run+0x138>)
 800cbba:	7a5a      	ldrb	r2, [r3, #9]
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	; (800cbe8 <fast_run+0x138>)
 800cbbe:	70da      	strb	r2, [r3, #3]
	while((Pos.X != x) || (Pos.Y != y)){			//ゴールするまで繰り返す
 800cbc0:	4b09      	ldr	r3, [pc, #36]	; (800cbe8 <fast_run+0x138>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d1a4      	bne.n	800cb16 <fast_run+0x66>
 800cbcc:	4b06      	ldr	r3, [pc, #24]	; (800cbe8 <fast_run+0x138>)
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d19e      	bne.n	800cb16 <fast_run+0x66>
//		Pos.Car = Pos.NextCar;	//自分の向きを修正
//
//
	}
//	straight(SECTION*straight_count,FAST_ACCEL,FAST_SPEED,0.0);
}
 800cbd8:	bf00      	nop
 800cbda:	bf00      	nop
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20000260 	.word	0x20000260
 800cbe8:	20000000 	.word	0x20000000
 800cbec:	200002cc 	.word	0x200002cc
 800cbf0:	42770000 	.word	0x42770000

0800cbf4 <InitExplore>:
#include "Flash.h"
#include "Interrupt.h"
#include "Debug.h"

void InitExplore()
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
	PIDReset(A_VELO_PID);

	HAL_Delay(500);
#else
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800cbfa:	f002 fe41 	bl	800f880 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800cbfe:	f002 fd45 	bl	800f68c <EncoderStart>
	EmitterON();
 800cc02:	f002 fd63 	bl	800f6cc <EmitterON>
	ADCStart();
 800cc06:	f002 fa5d 	bl	800f0c4 <ADCStart>
//		HAL_Delay(500);
//		htim2.Init.Prescaler -= 2;
//
//	}
	uint8_t imu_check;
	imu_check =IMU_init();
 800cc0a:	f002 fc8f 	bl	800f52c <IMU_init>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800cc12:	79fb      	ldrb	r3, [r7, #7]
 800cc14:	4619      	mov	r1, r3
 800cc16:	4838      	ldr	r0, [pc, #224]	; (800ccf8 <InitExplore+0x104>)
 800cc18:	f008 ff80 	bl	8015b1c <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	2004      	movs	r0, #4
 800cc20:	f000 fd5c 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800cc24:	2100      	movs	r1, #0
 800cc26:	2005      	movs	r0, #5
 800cc28:	f000 fd58 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	2002      	movs	r0, #2
 800cc30:	f000 fd54 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cc34:	2100      	movs	r1, #0
 800cc36:	2003      	movs	r0, #3
 800cc38:	f000 fd50 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	2001      	movs	r0, #1
 800cc40:	f000 fd4c 	bl	800d6dc <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800cc44:	2100      	movs	r1, #0
 800cc46:	2000      	movs	r0, #0
 800cc48:	f000 fd48 	bl	800d6dc <PIDChangeFlag>


	Load_Gain();
 800cc4c:	f7fd ffc2 	bl	800abd4 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800cc50:	f247 512f 	movw	r1, #29999	; 0x752f
 800cc54:	4829      	ldr	r0, [pc, #164]	; (800ccfc <InitExplore+0x108>)
 800cc56:	f7fd fe37 	bl	800a8c8 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800cc5a:	f247 512f 	movw	r1, #29999	; 0x752f
 800cc5e:	4828      	ldr	r0, [pc, #160]	; (800cd00 <InitExplore+0x10c>)
 800cc60:	f7fd fe32 	bl	800a8c8 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800cc64:	4827      	ldr	r0, [pc, #156]	; (800cd04 <InitExplore+0x110>)
 800cc66:	f005 fe2c 	bl	80128c2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800cc6a:	4827      	ldr	r0, [pc, #156]	; (800cd08 <InitExplore+0x114>)
 800cc6c:	f005 fe29 	bl	80128c2 <HAL_TIM_Base_Start_IT>
		printf("生値%f, 角速度%f ang/s, %f rad/s\r\n",ZGyro,ZGyro/16.4f, AngularV);
	}

#endif

	TargetVelocity[BODY] = 0;
 800cc70:	4b26      	ldr	r3, [pc, #152]	; (800cd0c <InitExplore+0x118>)
 800cc72:	f04f 0200 	mov.w	r2, #0
 800cc76:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800cc78:	4b25      	ldr	r3, [pc, #148]	; (800cd10 <InitExplore+0x11c>)
 800cc7a:	f04f 0200 	mov.w	r2, #0
 800cc7e:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800cc80:	4b24      	ldr	r3, [pc, #144]	; (800cd14 <InitExplore+0x120>)
 800cc82:	f04f 0200 	mov.w	r2, #0
 800cc86:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800cc88:	4b23      	ldr	r3, [pc, #140]	; (800cd18 <InitExplore+0x124>)
 800cc8a:	f04f 0200 	mov.w	r2, #0
 800cc8e:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800cc90:	4b22      	ldr	r3, [pc, #136]	; (800cd1c <InitExplore+0x128>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800cc96:	4b21      	ldr	r3, [pc, #132]	; (800cd1c <InitExplore+0x128>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800cc9c:	4b1f      	ldr	r3, [pc, #124]	; (800cd1c <InitExplore+0x128>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800cca2:	f002 fc6d 	bl	800f580 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800cca6:	4b1e      	ldr	r3, [pc, #120]	; (800cd20 <InitExplore+0x12c>)
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	4a1e      	ldr	r2, [pc, #120]	; (800cd24 <InitExplore+0x130>)
 800ccac:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800ccae:	4b1c      	ldr	r3, [pc, #112]	; (800cd20 <InitExplore+0x12c>)
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	4a1c      	ldr	r2, [pc, #112]	; (800cd24 <InitExplore+0x130>)
 800ccb4:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800ccb6:	4b1b      	ldr	r3, [pc, #108]	; (800cd24 <InitExplore+0x130>)
 800ccb8:	ed93 7a02 	vldr	s14, [r3, #8]
 800ccbc:	4b19      	ldr	r3, [pc, #100]	; (800cd24 <InitExplore+0x130>)
 800ccbe:	edd3 7a01 	vldr	s15, [r3, #4]
 800ccc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccc6:	4b18      	ldr	r3, [pc, #96]	; (800cd28 <InitExplore+0x134>)
 800ccc8:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800cccc:	2004      	movs	r0, #4
 800ccce:	f000 fd1b 	bl	800d708 <PIDReset>
	PIDReset(R_VELO_PID);
 800ccd2:	2005      	movs	r0, #5
 800ccd4:	f000 fd18 	bl	800d708 <PIDReset>

	PIDReset(A_VELO_PID);
 800ccd8:	2000      	movs	r0, #0
 800ccda:	f000 fd15 	bl	800d708 <PIDReset>
	PIDReset(L_WALL_PID);
 800ccde:	2002      	movs	r0, #2
 800cce0:	f000 fd12 	bl	800d708 <PIDReset>
	PIDReset(R_WALL_PID);
 800cce4:	2003      	movs	r0, #3
 800cce6:	f000 fd0f 	bl	800d708 <PIDReset>
	PIDReset(D_WALL_PID);
 800ccea:	2001      	movs	r0, #1
 800ccec:	f000 fd0c 	bl	800d708 <PIDReset>

#endif
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	0801a668 	.word	0x0801a668
 800ccfc:	40000424 	.word	0x40000424
 800cd00:	40000824 	.word	0x40000824
 800cd04:	20000a0c 	.word	0x20000a0c
 800cd08:	20000b4c 	.word	0x20000b4c
 800cd0c:	20000294 	.word	0x20000294
 800cd10:	200002d8 	.word	0x200002d8
 800cd14:	200002d4 	.word	0x200002d4
 800cd18:	200002dc 	.word	0x200002dc
 800cd1c:	200002b8 	.word	0x200002b8
 800cd20:	20000264 	.word	0x20000264
 800cd24:	20000274 	.word	0x20000274
 800cd28:	20000284 	.word	0x20000284

0800cd2c <InitFastest>:

void InitFastest()
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
	Motor_PWM_Start();
 800cd32:	f002 fda5 	bl	800f880 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800cd36:	f002 fca9 	bl	800f68c <EncoderStart>
	EmitterON();
 800cd3a:	f002 fcc7 	bl	800f6cc <EmitterON>
	ADCStart();
 800cd3e:	f002 f9c1 	bl	800f0c4 <ADCStart>
	uint8_t imu_check;
	imu_check =IMU_init();
 800cd42:	f002 fbf3 	bl	800f52c <IMU_init>
 800cd46:	4603      	mov	r3, r0
 800cd48:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800cd4a:	79fb      	ldrb	r3, [r7, #7]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4838      	ldr	r0, [pc, #224]	; (800ce30 <InitFastest+0x104>)
 800cd50:	f008 fee4 	bl	8015b1c <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800cd54:	2100      	movs	r1, #0
 800cd56:	2004      	movs	r0, #4
 800cd58:	f000 fcc0 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	2005      	movs	r0, #5
 800cd60:	f000 fcbc 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cd64:	2100      	movs	r1, #0
 800cd66:	2002      	movs	r0, #2
 800cd68:	f000 fcb8 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	2003      	movs	r0, #3
 800cd70:	f000 fcb4 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800cd74:	2100      	movs	r1, #0
 800cd76:	2001      	movs	r0, #1
 800cd78:	f000 fcb0 	bl	800d6dc <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	2000      	movs	r0, #0
 800cd80:	f000 fcac 	bl	800d6dc <PIDChangeFlag>


	Load_Gain();
 800cd84:	f7fd ff26 	bl	800abd4 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800cd88:	f247 512f 	movw	r1, #29999	; 0x752f
 800cd8c:	4829      	ldr	r0, [pc, #164]	; (800ce34 <InitFastest+0x108>)
 800cd8e:	f7fd fd9b 	bl	800a8c8 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800cd92:	f247 512f 	movw	r1, #29999	; 0x752f
 800cd96:	4828      	ldr	r0, [pc, #160]	; (800ce38 <InitFastest+0x10c>)
 800cd98:	f7fd fd96 	bl	800a8c8 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800cd9c:	4827      	ldr	r0, [pc, #156]	; (800ce3c <InitFastest+0x110>)
 800cd9e:	f005 fd90 	bl	80128c2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800cda2:	4827      	ldr	r0, [pc, #156]	; (800ce40 <InitFastest+0x114>)
 800cda4:	f005 fd8d 	bl	80128c2 <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800cda8:	4b26      	ldr	r3, [pc, #152]	; (800ce44 <InitFastest+0x118>)
 800cdaa:	f04f 0200 	mov.w	r2, #0
 800cdae:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800cdb0:	4b25      	ldr	r3, [pc, #148]	; (800ce48 <InitFastest+0x11c>)
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800cdb8:	4b24      	ldr	r3, [pc, #144]	; (800ce4c <InitFastest+0x120>)
 800cdba:	f04f 0200 	mov.w	r2, #0
 800cdbe:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800cdc0:	4b23      	ldr	r3, [pc, #140]	; (800ce50 <InitFastest+0x124>)
 800cdc2:	f04f 0200 	mov.w	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800cdc8:	4b22      	ldr	r3, [pc, #136]	; (800ce54 <InitFastest+0x128>)
 800cdca:	2200      	movs	r2, #0
 800cdcc:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800cdce:	4b21      	ldr	r3, [pc, #132]	; (800ce54 <InitFastest+0x128>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800cdd4:	4b1f      	ldr	r3, [pc, #124]	; (800ce54 <InitFastest+0x128>)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800cdda:	f002 fbd1 	bl	800f580 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800cdde:	4b1e      	ldr	r3, [pc, #120]	; (800ce58 <InitFastest+0x12c>)
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	4a1e      	ldr	r2, [pc, #120]	; (800ce5c <InitFastest+0x130>)
 800cde4:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800cde6:	4b1c      	ldr	r3, [pc, #112]	; (800ce58 <InitFastest+0x12c>)
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	4a1c      	ldr	r2, [pc, #112]	; (800ce5c <InitFastest+0x130>)
 800cdec:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800cdee:	4b1b      	ldr	r3, [pc, #108]	; (800ce5c <InitFastest+0x130>)
 800cdf0:	ed93 7a02 	vldr	s14, [r3, #8]
 800cdf4:	4b19      	ldr	r3, [pc, #100]	; (800ce5c <InitFastest+0x130>)
 800cdf6:	edd3 7a01 	vldr	s15, [r3, #4]
 800cdfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdfe:	4b18      	ldr	r3, [pc, #96]	; (800ce60 <InitFastest+0x134>)
 800ce00:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800ce04:	2004      	movs	r0, #4
 800ce06:	f000 fc7f 	bl	800d708 <PIDReset>
	PIDReset(R_VELO_PID);
 800ce0a:	2005      	movs	r0, #5
 800ce0c:	f000 fc7c 	bl	800d708 <PIDReset>
	PIDReset(A_VELO_PID);
 800ce10:	2000      	movs	r0, #0
 800ce12:	f000 fc79 	bl	800d708 <PIDReset>
	PIDReset(L_WALL_PID);
 800ce16:	2002      	movs	r0, #2
 800ce18:	f000 fc76 	bl	800d708 <PIDReset>
	PIDReset(R_WALL_PID);
 800ce1c:	2003      	movs	r0, #3
 800ce1e:	f000 fc73 	bl	800d708 <PIDReset>
	PIDReset(D_WALL_PID);
 800ce22:	2001      	movs	r0, #1
 800ce24:	f000 fc70 	bl	800d708 <PIDReset>


}
 800ce28:	bf00      	nop
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	0801a668 	.word	0x0801a668
 800ce34:	40000424 	.word	0x40000424
 800ce38:	40000824 	.word	0x40000824
 800ce3c:	20000a0c 	.word	0x20000a0c
 800ce40:	20000b4c 	.word	0x20000b4c
 800ce44:	20000294 	.word	0x20000294
 800ce48:	200002d8 	.word	0x200002d8
 800ce4c:	200002d4 	.word	0x200002d4
 800ce50:	200002dc 	.word	0x200002dc
 800ce54:	200002b8 	.word	0x200002b8
 800ce58:	20000264 	.word	0x20000264
 800ce5c:	20000274 	.word	0x20000274
 800ce60:	20000284 	.word	0x20000284

0800ce64 <Debug>:
void Debug()
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b0a0      	sub	sp, #128	; 0x80
 800ce68:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800ce6a:	f7ff fec3 	bl	800cbf4 <InitExplore>
	InitPosition();
 800ce6e:	f7fb fffb 	bl	8008e68 <InitPosition>
	wall_init();
 800ce72:	f7fe fbeb 	bl	800b64c <wall_init>

	TotalPulse[RIGHT] = 0;
 800ce76:	4b40      	ldr	r3, [pc, #256]	; (800cf78 <Debug+0x114>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800ce7c:	4b3e      	ldr	r3, [pc, #248]	; (800cf78 <Debug+0x114>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800ce82:	4b3d      	ldr	r3, [pc, #244]	; (800cf78 <Debug+0x114>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	609a      	str	r2, [r3, #8]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	//x,y,dir,sbrl,現在→ x2,y2,dir2,sbrl2更新
//void ChangeNowStatus()

	PIDChangeFlag(L_VELO_PID, 1);
 800ce88:	2101      	movs	r1, #1
 800ce8a:	2004      	movs	r0, #4
 800ce8c:	f000 fc26 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ce90:	2101      	movs	r1, #1
 800ce92:	2005      	movs	r0, #5
 800ce94:	f000 fc22 	bl	800d6dc <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800ce98:	4b37      	ldr	r3, [pc, #220]	; (800cf78 <Debug+0x114>)
 800ce9a:	6899      	ldr	r1, [r3, #8]
 800ce9c:	4b36      	ldr	r3, [pc, #216]	; (800cf78 <Debug+0x114>)
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	4b35      	ldr	r3, [pc, #212]	; (800cf78 <Debug+0x114>)
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	4835      	ldr	r0, [pc, #212]	; (800cf7c <Debug+0x118>)
 800cea6:	f008 fe39 	bl	8015b1c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800ceaa:	2100      	movs	r1, #0
 800ceac:	2001      	movs	r0, #1
 800ceae:	f000 fc15 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	2002      	movs	r0, #2
 800ceb6:	f000 fc11 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ceba:	2100      	movs	r1, #0
 800cebc:	2003      	movs	r0, #3
 800cebe:	f000 fc0d 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800cec2:	2100      	movs	r1, #0
 800cec4:	2000      	movs	r0, #0
 800cec6:	f000 fc09 	bl	800d6dc <PIDChangeFlag>
	ExploreVelocity=0;
 800ceca:	4b2d      	ldr	r3, [pc, #180]	; (800cf80 <Debug+0x11c>)
 800cecc:	f04f 0200 	mov.w	r2, #0
 800ced0:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800ced2:	2003      	movs	r0, #3
 800ced4:	f002 fc16 	bl	800f704 <ChangeLED>
	}
#endif

#if 1
	//スラロームテスト
	ExploreVelocity = 1000;
 800ced8:	4b29      	ldr	r3, [pc, #164]	; (800cf80 <Debug+0x11c>)
 800ceda:	4a2a      	ldr	r2, [pc, #168]	; (800cf84 <Debug+0x120>)
 800cedc:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800cede:	4b2a      	ldr	r3, [pc, #168]	; (800cf88 <Debug+0x124>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	709a      	strb	r2, [r3, #2]
	Accel(61.75,ExploreVelocity);
 800cee4:	4b26      	ldr	r3, [pc, #152]	; (800cf80 <Debug+0x11c>)
 800cee6:	edd3 7a00 	vldr	s15, [r3]
 800ceea:	eef0 0a67 	vmov.f32	s1, s15
 800ceee:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800cf8c <Debug+0x128>
 800cef2:	f7fd f889 	bl	800a008 <Accel>
	for(int i=0; i < 14; i++)
 800cef6:	2300      	movs	r3, #0
 800cef8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cefa:	e013      	b.n	800cf24 <Debug+0xc0>
	{
		Pos.Dir = front;
 800cefc:	4b22      	ldr	r3, [pc, #136]	; (800cf88 <Debug+0x124>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	709a      	strb	r2, [r3, #2]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800cf02:	4b1f      	ldr	r3, [pc, #124]	; (800cf80 <Debug+0x11c>)
 800cf04:	edd3 7a00 	vldr	s15, [r3]
 800cf08:	4b21      	ldr	r3, [pc, #132]	; (800cf90 <Debug+0x12c>)
 800cf0a:	ed93 7a00 	vldr	s14, [r3]
 800cf0e:	eeb0 1a47 	vmov.f32	s2, s14
 800cf12:	eef0 0a67 	vmov.f32	s1, s15
 800cf16:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800cf94 <Debug+0x130>
 800cf1a:	f7fd faa5 	bl	800a468 <GoStraight>
	for(int i=0; i < 14; i++)
 800cf1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf20:	3301      	adds	r3, #1
 800cf22:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cf24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf26:	2b0d      	cmp	r3, #13
 800cf28:	dde8      	ble.n	800cefc <Debug+0x98>
		//Pos.Dir = right;
		//SlalomRight();

	}
	Pos.Dir = front;
 800cf2a:	4b17      	ldr	r3, [pc, #92]	; (800cf88 <Debug+0x124>)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	709a      	strb	r2, [r3, #2]
	Decel(45,0);
 800cf30:	eddf 0a19 	vldr	s1, [pc, #100]	; 800cf98 <Debug+0x134>
 800cf34:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800cf9c <Debug+0x138>
 800cf38:	f7fd f92e 	bl	800a198 <Decel>
	HAL_Delay(30000);
 800cf3c:	f247 5030 	movw	r0, #30000	; 0x7530
 800cf40:	f002 fdbe 	bl	800fac0 <HAL_Delay>
		//theta_log[i] = Angle;
	}
#endif
	while(1)
	{
		for(int i=0; i < 30; i++)
 800cf44:	2300      	movs	r3, #0
 800cf46:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf48:	e011      	b.n	800cf6e <Debug+0x10a>
		{
			printf("%d : %f\r\n",i,theta_log[i]);
 800cf4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	3380      	adds	r3, #128	; 0x80
 800cf50:	443b      	add	r3, r7
 800cf52:	3b80      	subs	r3, #128	; 0x80
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fb fa2e 	bl	80083b8 <__aeabi_f2d>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cf62:	480f      	ldr	r0, [pc, #60]	; (800cfa0 <Debug+0x13c>)
 800cf64:	f008 fdda 	bl	8015b1c <iprintf>
		for(int i=0; i < 30; i++)
 800cf68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf70:	2b1d      	cmp	r3, #29
 800cf72:	ddea      	ble.n	800cf4a <Debug+0xe6>
 800cf74:	e7e6      	b.n	800cf44 <Debug+0xe0>
 800cf76:	bf00      	nop
 800cf78:	200002b8 	.word	0x200002b8
 800cf7c:	0801a684 	.word	0x0801a684
 800cf80:	200002cc 	.word	0x200002cc
 800cf84:	447a0000 	.word	0x447a0000
 800cf88:	20000000 	.word	0x20000000
 800cf8c:	42770000 	.word	0x42770000
 800cf90:	200002d0 	.word	0x200002d0
 800cf94:	42b40000 	.word	0x42b40000
 800cf98:	00000000 	.word	0x00000000
 800cf9c:	42340000 	.word	0x42340000
 800cfa0:	0801a6b8 	.word	0x0801a6b8

0800cfa4 <ParameterSetting>:
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
void ParameterSetting()
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	af00      	add	r7, sp, #0
	Load_Gain();
 800cfa8:	f7fd fe14 	bl	800abd4 <Load_Gain>
	Change_Gain();
 800cfac:	f7fd feca 	bl	800ad44 <Change_Gain>

}
 800cfb0:	bf00      	nop
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <GainTestRWall>:
	{

	}
}
void GainTestRWall()
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0
	InitExplore();
 800cfb8:	f7ff fe1c 	bl	800cbf4 <InitExplore>
	InitPosition();
 800cfbc:	f7fb ff54 	bl	8008e68 <InitPosition>
	wall_init();
 800cfc0:	f7fe fb44 	bl	800b64c <wall_init>
	TotalPulse[RIGHT] = 0;
 800cfc4:	4b12      	ldr	r3, [pc, #72]	; (800d010 <GainTestRWall+0x5c>)
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cfca:	4b11      	ldr	r3, [pc, #68]	; (800d010 <GainTestRWall+0x5c>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cfd0:	4b0f      	ldr	r3, [pc, #60]	; (800d010 <GainTestRWall+0x5c>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	2004      	movs	r0, #4
 800cfda:	f000 fb7f 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800cfde:	2101      	movs	r1, #1
 800cfe0:	2005      	movs	r0, #5
 800cfe2:	f000 fb7b 	bl	800d6dc <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	2001      	movs	r0, #1
 800cfea:	f000 fb77 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cfee:	2100      	movs	r1, #0
 800cff0:	2002      	movs	r0, #2
 800cff2:	f000 fb73 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800cff6:	2101      	movs	r1, #1
 800cff8:	2003      	movs	r0, #3
 800cffa:	f000 fb6f 	bl	800d6dc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800cffe:	4b05      	ldr	r3, [pc, #20]	; (800d014 <GainTestRWall+0x60>)
 800d000:	f04f 0200 	mov.w	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800d006:	2001      	movs	r0, #1
 800d008:	f002 fb7c 	bl	800f704 <ChangeLED>
	while(1)
 800d00c:	e7fe      	b.n	800d00c <GainTestRWall+0x58>
 800d00e:	bf00      	nop
 800d010:	200002b8 	.word	0x200002b8
 800d014:	200002cc 	.word	0x200002cc

0800d018 <GainTestDWall>:
	{

	}
}
void GainTestDWall()
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	af00      	add	r7, sp, #0
	InitExplore();
 800d01c:	f7ff fdea 	bl	800cbf4 <InitExplore>
	InitPosition();
 800d020:	f7fb ff22 	bl	8008e68 <InitPosition>
	wall_init();
 800d024:	f7fe fb12 	bl	800b64c <wall_init>
	TotalPulse[RIGHT] = 0;
 800d028:	4b12      	ldr	r3, [pc, #72]	; (800d074 <GainTestDWall+0x5c>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800d02e:	4b11      	ldr	r3, [pc, #68]	; (800d074 <GainTestDWall+0x5c>)
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800d034:	4b0f      	ldr	r3, [pc, #60]	; (800d074 <GainTestDWall+0x5c>)
 800d036:	2200      	movs	r2, #0
 800d038:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800d03a:	2101      	movs	r1, #1
 800d03c:	2004      	movs	r0, #4
 800d03e:	f000 fb4d 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800d042:	2101      	movs	r1, #1
 800d044:	2005      	movs	r0, #5
 800d046:	f000 fb49 	bl	800d6dc <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800d04a:	2101      	movs	r1, #1
 800d04c:	2001      	movs	r0, #1
 800d04e:	f000 fb45 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800d052:	2100      	movs	r1, #0
 800d054:	2002      	movs	r0, #2
 800d056:	f000 fb41 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800d05a:	2100      	movs	r1, #0
 800d05c:	2003      	movs	r0, #3
 800d05e:	f000 fb3d 	bl	800d6dc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800d062:	4b05      	ldr	r3, [pc, #20]	; (800d078 <GainTestDWall+0x60>)
 800d064:	f04f 0200 	mov.w	r2, #0
 800d068:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800d06a:	2002      	movs	r0, #2
 800d06c:	f002 fb4a 	bl	800f704 <ChangeLED>
	while(1)
 800d070:	e7fe      	b.n	800d070 <GainTestDWall+0x58>
 800d072:	bf00      	nop
 800d074:	200002b8 	.word	0x200002b8
 800d078:	200002cc 	.word	0x200002cc

0800d07c <GainTestAVelo>:

	}
}

void GainTestAVelo()
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	af00      	add	r7, sp, #0
	InitExplore();
 800d080:	f7ff fdb8 	bl	800cbf4 <InitExplore>
	InitPosition();
 800d084:	f7fb fef0 	bl	8008e68 <InitPosition>
	wall_init();
 800d088:	f7fe fae0 	bl	800b64c <wall_init>
	TotalPulse[RIGHT] = 0;
 800d08c:	4b14      	ldr	r3, [pc, #80]	; (800d0e0 <GainTestAVelo+0x64>)
 800d08e:	2200      	movs	r2, #0
 800d090:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800d092:	4b13      	ldr	r3, [pc, #76]	; (800d0e0 <GainTestAVelo+0x64>)
 800d094:	2200      	movs	r2, #0
 800d096:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800d098:	4b11      	ldr	r3, [pc, #68]	; (800d0e0 <GainTestAVelo+0x64>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800d09e:	2101      	movs	r1, #1
 800d0a0:	2004      	movs	r0, #4
 800d0a2:	f000 fb1b 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800d0a6:	2101      	movs	r1, #1
 800d0a8:	2005      	movs	r0, #5
 800d0aa:	f000 fb17 	bl	800d6dc <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800d0ae:	2101      	movs	r1, #1
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	f000 fb13 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	f000 fb0f 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800d0be:	2100      	movs	r1, #0
 800d0c0:	2002      	movs	r0, #2
 800d0c2:	f000 fb0b 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	2003      	movs	r0, #3
 800d0ca:	f000 fb07 	bl	800d6dc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800d0ce:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <GainTestAVelo+0x68>)
 800d0d0:	f04f 0200 	mov.w	r2, #0
 800d0d4:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800d0d6:	2005      	movs	r0, #5
 800d0d8:	f002 fb14 	bl	800f704 <ChangeLED>
	while(1)
 800d0dc:	e7fe      	b.n	800d0dc <GainTestAVelo+0x60>
 800d0de:	bf00      	nop
 800d0e0:	200002b8 	.word	0x200002b8
 800d0e4:	200002cc 	.word	0x200002cc

0800d0e8 <WritingFree>:
	{

	}
}
void WritingFree()
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//
//	}
	InitExplore();
 800d0ec:	f7ff fd82 	bl	800cbf4 <InitExplore>

	printf("3\r\n");
 800d0f0:	4826      	ldr	r0, [pc, #152]	; (800d18c <WritingFree+0xa4>)
 800d0f2:	f008 fd99 	bl	8015c28 <puts>
//	printf("オフセット:%f, double角速度:%f, double角度:%f, float角速度:%f, float角度:%f",zg_offset,ImuAngV, ImuAngle, AngularV, Angle);
//}

	//迷路とステータスの準備
	//方角と座標の初期化。
	InitPosition();
 800d0f6:	f7fb feb7 	bl	8008e68 <InitPosition>
//	uint8_t x, y;
//	Pos.Car = north;
//	x=0,y=0;
	wall_init();
 800d0fa:	f7fe faa7 	bl	800b64c <wall_init>
	printf("4\r\n");
 800d0fe:	4824      	ldr	r0, [pc, #144]	; (800d190 <WritingFree+0xa8>)
 800d100:	f008 fd92 	bl	8015c28 <puts>
	//時間用の処理の初期化。
	//int timer = 0;
	//エンコーダ移動量の初期化。
	TotalPulse[RIGHT] = 0;
 800d104:	4b23      	ldr	r3, [pc, #140]	; (800d194 <WritingFree+0xac>)
 800d106:	2200      	movs	r2, #0
 800d108:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800d10a:	4b22      	ldr	r3, [pc, #136]	; (800d194 <WritingFree+0xac>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800d110:	4b20      	ldr	r3, [pc, #128]	; (800d194 <WritingFree+0xac>)
 800d112:	2200      	movs	r2, #0
 800d114:	609a      	str	r2, [r3, #8]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	//x,y,dir,sbrl,現在→ x2,y2,dir2,sbrl2更新
//void ChangeNowStatus()

	PIDChangeFlag(L_VELO_PID, 1);
 800d116:	2101      	movs	r1, #1
 800d118:	2004      	movs	r0, #4
 800d11a:	f000 fadf 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800d11e:	2101      	movs	r1, #1
 800d120:	2005      	movs	r0, #5
 800d122:	f000 fadb 	bl	800d6dc <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800d126:	4b1b      	ldr	r3, [pc, #108]	; (800d194 <WritingFree+0xac>)
 800d128:	6899      	ldr	r1, [r3, #8]
 800d12a:	4b1a      	ldr	r3, [pc, #104]	; (800d194 <WritingFree+0xac>)
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	4b19      	ldr	r3, [pc, #100]	; (800d194 <WritingFree+0xac>)
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	4819      	ldr	r0, [pc, #100]	; (800d198 <WritingFree+0xb0>)
 800d134:	f008 fcf2 	bl	8015b1c <iprintf>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800d138:	2100      	movs	r1, #0
 800d13a:	2001      	movs	r0, #1
 800d13c:	f000 face 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800d140:	2100      	movs	r1, #0
 800d142:	2002      	movs	r0, #2
 800d144:	f000 faca 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800d148:	2100      	movs	r1, #0
 800d14a:	2003      	movs	r0, #3
 800d14c:	f000 fac6 	bl	800d6dc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800d150:	4b12      	ldr	r3, [pc, #72]	; (800d19c <WritingFree+0xb4>)
 800d152:	f04f 0200 	mov.w	r2, #0
 800d156:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800d158:	2007      	movs	r0, #7
 800d15a:	f002 fad3 	bl	800f704 <ChangeLED>
	while(1)
	{
		printf("%f, %f, %f, %f\r\n", Photo[FL],Photo[FR],Photo[FL]+Photo[FR],(Photo[FL]+Photo[FR])/2);//壁センサ前のチェック。
	}
#endif
	Accel(61.5, ExploreVelocity);
 800d15e:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <WritingFree+0xb4>)
 800d160:	edd3 7a00 	vldr	s15, [r3]
 800d164:	eef0 0a67 	vmov.f32	s1, s15
 800d168:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d1a0 <WritingFree+0xb8>
 800d16c:	f7fc ff4c 	bl	800a008 <Accel>
	SelectAction('S');
 800d170:	2053      	movs	r0, #83	; 0x53
 800d172:	f7fd fb6b 	bl	800a84c <SelectAction>
	SelectAction('S');
 800d176:	2053      	movs	r0, #83	; 0x53
 800d178:	f7fd fb68 	bl	800a84c <SelectAction>
	Decel(35, 0);
 800d17c:	eddf 0a09 	vldr	s1, [pc, #36]	; 800d1a4 <WritingFree+0xbc>
 800d180:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800d1a8 <WritingFree+0xc0>
 800d184:	f7fd f808 	bl	800a198 <Decel>
//	for(n=0; n < 10; n++)
//	{
//
//		printf("%f, %f\r\n",out_log_L[n],out_log_R[n]);
//	}
while(1)
 800d188:	e7fe      	b.n	800d188 <WritingFree+0xa0>
 800d18a:	bf00      	nop
 800d18c:	0801a6c4 	.word	0x0801a6c4
 800d190:	0801a6c8 	.word	0x0801a6c8
 800d194:	200002b8 	.word	0x200002b8
 800d198:	0801a684 	.word	0x0801a684
 800d19c:	200002cc 	.word	0x200002cc
 800d1a0:	42760000 	.word	0x42760000
 800d1a4:	00000000 	.word	0x00000000
 800d1a8:	420c0000 	.word	0x420c0000

0800d1ac <FastestRun>:


}

void FastestRun()
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
	//諸々の初期化
	HAL_Delay(250);
 800d1b2:	20fa      	movs	r0, #250	; 0xfa
 800d1b4:	f002 fc84 	bl	800fac0 <HAL_Delay>
	Photo[FR] = 0;
 800d1b8:	4b79      	ldr	r3, [pc, #484]	; (800d3a0 <FastestRun+0x1f4>)
 800d1ba:	f04f 0200 	mov.w	r2, #0
 800d1be:	60da      	str	r2, [r3, #12]
	  int8_t mode=1;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	71bb      	strb	r3, [r7, #6]
	  printf("mode : %d\r\n", mode);
 800d1c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4876      	ldr	r0, [pc, #472]	; (800d3a4 <FastestRun+0x1f8>)
 800d1cc:	f008 fca6 	bl	8015b1c <iprintf>
	  ModeSelect( 1, 2, &mode);
 800d1d0:	1dbb      	adds	r3, r7, #6
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	2102      	movs	r1, #2
 800d1d6:	2001      	movs	r0, #1
 800d1d8:	f000 fc56 	bl	800da88 <ModeSelect>
	  Signal( mode );
 800d1dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 fbff 	bl	800d9e4 <Signal>
	  printf("Switch\r\n");
 800d1e6:	4870      	ldr	r0, [pc, #448]	; (800d3a8 <FastestRun+0x1fc>)
 800d1e8:	f008 fd1e 	bl	8015c28 <puts>

		HAL_Delay(250);
 800d1ec:	20fa      	movs	r0, #250	; 0xfa
 800d1ee:	f002 fc67 	bl	800fac0 <HAL_Delay>
		Photo[FR] = 0;
 800d1f2:	4b6b      	ldr	r3, [pc, #428]	; (800d3a0 <FastestRun+0x1f4>)
 800d1f4:	f04f 0200 	mov.w	r2, #0
 800d1f8:	60da      	str	r2, [r3, #12]
		  int8_t mode2=1;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	717b      	strb	r3, [r7, #5]
		  printf("mode : %d\r\n", mode2);
 800d1fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800d202:	4619      	mov	r1, r3
 800d204:	4867      	ldr	r0, [pc, #412]	; (800d3a4 <FastestRun+0x1f8>)
 800d206:	f008 fc89 	bl	8015b1c <iprintf>
		  ModeSelect( 1, 4, &mode2);
 800d20a:	1d7b      	adds	r3, r7, #5
 800d20c:	461a      	mov	r2, r3
 800d20e:	2104      	movs	r1, #4
 800d210:	2001      	movs	r0, #1
 800d212:	f000 fc39 	bl	800da88 <ModeSelect>
		  Signal( mode2 );
 800d216:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 fbe2 	bl	800d9e4 <Signal>
		  printf("Switch\r\n");
 800d220:	4861      	ldr	r0, [pc, #388]	; (800d3a8 <FastestRun+0x1fc>)
 800d222:	f008 fd01 	bl	8015c28 <puts>

	InitFastest();
 800d226:	f7ff fd81 	bl	800cd2c <InitFastest>
	InitPosition();
 800d22a:	f7fb fe1d 	bl	8008e68 <InitPosition>

	wall_init();
 800d22e:	f7fe fa0d 	bl	800b64c <wall_init>

	TotalPulse[RIGHT] = 0;
 800d232:	4b5e      	ldr	r3, [pc, #376]	; (800d3ac <FastestRun+0x200>)
 800d234:	2200      	movs	r2, #0
 800d236:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800d238:	4b5c      	ldr	r3, [pc, #368]	; (800d3ac <FastestRun+0x200>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800d23e:	4b5b      	ldr	r3, [pc, #364]	; (800d3ac <FastestRun+0x200>)
 800d240:	2200      	movs	r2, #0
 800d242:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800d244:	2101      	movs	r1, #1
 800d246:	2004      	movs	r0, #4
 800d248:	f000 fa48 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800d24c:	2101      	movs	r1, #1
 800d24e:	2005      	movs	r0, #5
 800d250:	f000 fa44 	bl	800d6dc <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800d254:	4b55      	ldr	r3, [pc, #340]	; (800d3ac <FastestRun+0x200>)
 800d256:	6899      	ldr	r1, [r3, #8]
 800d258:	4b54      	ldr	r3, [pc, #336]	; (800d3ac <FastestRun+0x200>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	4b53      	ldr	r3, [pc, #332]	; (800d3ac <FastestRun+0x200>)
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	4853      	ldr	r0, [pc, #332]	; (800d3b0 <FastestRun+0x204>)
 800d262:	f008 fc5b 	bl	8015b1c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800d266:	2100      	movs	r1, #0
 800d268:	2001      	movs	r0, #1
 800d26a:	f000 fa37 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800d26e:	2100      	movs	r1, #0
 800d270:	2002      	movs	r0, #2
 800d272:	f000 fa33 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800d276:	2100      	movs	r1, #0
 800d278:	2003      	movs	r0, #3
 800d27a:	f000 fa2f 	bl	800d6dc <PIDChangeFlag>


	//こちらもスラロームかそうでないか、速度はどうか、でモード分けする

	char turn_mode;
	if(mode == 1)
 800d27e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d102      	bne.n	800d28c <FastestRun+0xe0>
	{
		turn_mode = 'T';
 800d286:	2354      	movs	r3, #84	; 0x54
 800d288:	71fb      	strb	r3, [r7, #7]
 800d28a:	e005      	b.n	800d298 <FastestRun+0xec>
	}
	else if(mode == 2)
 800d28c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d290:	2b02      	cmp	r3, #2
 800d292:	d101      	bne.n	800d298 <FastestRun+0xec>
	{
		turn_mode = 'S';
 800d294:	2353      	movs	r3, #83	; 0x53
 800d296:	71fb      	strb	r3, [r7, #7]
	}
	//ExploreVelocity=135;
	switch(mode2)
 800d298:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800d29c:	3b01      	subs	r3, #1
 800d29e:	2b03      	cmp	r3, #3
 800d2a0:	d865      	bhi.n	800d36e <FastestRun+0x1c2>
 800d2a2:	a201      	add	r2, pc, #4	; (adr r2, 800d2a8 <FastestRun+0xfc>)
 800d2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a8:	0800d2b9 	.word	0x0800d2b9
 800d2ac:	0800d2e9 	.word	0x0800d2e9
 800d2b0:	0800d315 	.word	0x0800d315
 800d2b4:	0800d343 	.word	0x0800d343
	{
	case 1:
		ExploreVelocity=90;
 800d2b8:	4b3e      	ldr	r3, [pc, #248]	; (800d3b4 <FastestRun+0x208>)
 800d2ba:	4a3f      	ldr	r2, [pc, #252]	; (800d3b8 <FastestRun+0x20c>)
 800d2bc:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 8;
 800d2be:	4b3f      	ldr	r3, [pc, #252]	; (800d3bc <FastestRun+0x210>)
 800d2c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800d2c4:	601a      	str	r2, [r3, #0]
		Sla.Fol = 8;
 800d2c6:	4b3d      	ldr	r3, [pc, #244]	; (800d3bc <FastestRun+0x210>)
 800d2c8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800d2cc:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800d2ce:	4b3b      	ldr	r3, [pc, #236]	; (800d3bc <FastestRun+0x210>)
 800d2d0:	4a3b      	ldr	r2, [pc, #236]	; (800d3c0 <FastestRun+0x214>)
 800d2d2:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d2d4:	4b39      	ldr	r3, [pc, #228]	; (800d3bc <FastestRun+0x210>)
 800d2d6:	4a3b      	ldr	r2, [pc, #236]	; (800d3c4 <FastestRun+0x218>)
 800d2d8:	60da      	str	r2, [r3, #12]
		Sla.Theta2 = 60;
 800d2da:	4b38      	ldr	r3, [pc, #224]	; (800d3bc <FastestRun+0x210>)
 800d2dc:	4a3a      	ldr	r2, [pc, #232]	; (800d3c8 <FastestRun+0x21c>)
 800d2de:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800d2e0:	4b36      	ldr	r3, [pc, #216]	; (800d3bc <FastestRun+0x210>)
 800d2e2:	4a35      	ldr	r2, [pc, #212]	; (800d3b8 <FastestRun+0x20c>)
 800d2e4:	615a      	str	r2, [r3, #20]
		break;
 800d2e6:	e042      	b.n	800d36e <FastestRun+0x1c2>
	case 2:
		//完
		ExploreVelocity=135;
 800d2e8:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <FastestRun+0x208>)
 800d2ea:	4a38      	ldr	r2, [pc, #224]	; (800d3cc <FastestRun+0x220>)
 800d2ec:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800d2ee:	4b33      	ldr	r3, [pc, #204]	; (800d3bc <FastestRun+0x210>)
 800d2f0:	4a37      	ldr	r2, [pc, #220]	; (800d3d0 <FastestRun+0x224>)
 800d2f2:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800d2f4:	4b31      	ldr	r3, [pc, #196]	; (800d3bc <FastestRun+0x210>)
 800d2f6:	4a36      	ldr	r2, [pc, #216]	; (800d3d0 <FastestRun+0x224>)
 800d2f8:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.0273;
 800d2fa:	4b30      	ldr	r3, [pc, #192]	; (800d3bc <FastestRun+0x210>)
 800d2fc:	4a35      	ldr	r2, [pc, #212]	; (800d3d4 <FastestRun+0x228>)
 800d2fe:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d300:	4b2e      	ldr	r3, [pc, #184]	; (800d3bc <FastestRun+0x210>)
 800d302:	4a30      	ldr	r2, [pc, #192]	; (800d3c4 <FastestRun+0x218>)
 800d304:	60da      	str	r2, [r3, #12]
		Sla.Theta2 = 60;
 800d306:	4b2d      	ldr	r3, [pc, #180]	; (800d3bc <FastestRun+0x210>)
 800d308:	4a2f      	ldr	r2, [pc, #188]	; (800d3c8 <FastestRun+0x21c>)
 800d30a:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800d30c:	4b2b      	ldr	r3, [pc, #172]	; (800d3bc <FastestRun+0x210>)
 800d30e:	4a2a      	ldr	r2, [pc, #168]	; (800d3b8 <FastestRun+0x20c>)
 800d310:	615a      	str	r2, [r3, #20]
		break;
 800d312:	e02c      	b.n	800d36e <FastestRun+0x1c2>
	case 3:
		//未
		ExploreVelocity=180;
 800d314:	4b27      	ldr	r3, [pc, #156]	; (800d3b4 <FastestRun+0x208>)
 800d316:	4a30      	ldr	r2, [pc, #192]	; (800d3d8 <FastestRun+0x22c>)
 800d318:	601a      	str	r2, [r3, #0]
		Sla.Pre = 4;
 800d31a:	4b28      	ldr	r3, [pc, #160]	; (800d3bc <FastestRun+0x210>)
 800d31c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800d320:	601a      	str	r2, [r3, #0]
		Sla.Fol = 6;
 800d322:	4b26      	ldr	r3, [pc, #152]	; (800d3bc <FastestRun+0x210>)
 800d324:	4a2d      	ldr	r2, [pc, #180]	; (800d3dc <FastestRun+0x230>)
 800d326:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04478;
 800d328:	4b24      	ldr	r3, [pc, #144]	; (800d3bc <FastestRun+0x210>)
 800d32a:	4a2d      	ldr	r2, [pc, #180]	; (800d3e0 <FastestRun+0x234>)
 800d32c:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d32e:	4b23      	ldr	r3, [pc, #140]	; (800d3bc <FastestRun+0x210>)
 800d330:	4a24      	ldr	r2, [pc, #144]	; (800d3c4 <FastestRun+0x218>)
 800d332:	60da      	str	r2, [r3, #12]
		Sla.Theta2 = 60;
 800d334:	4b21      	ldr	r3, [pc, #132]	; (800d3bc <FastestRun+0x210>)
 800d336:	4a24      	ldr	r2, [pc, #144]	; (800d3c8 <FastestRun+0x21c>)
 800d338:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800d33a:	4b20      	ldr	r3, [pc, #128]	; (800d3bc <FastestRun+0x210>)
 800d33c:	4a1e      	ldr	r2, [pc, #120]	; (800d3b8 <FastestRun+0x20c>)
 800d33e:	615a      	str	r2, [r3, #20]
		break;
 800d340:	e015      	b.n	800d36e <FastestRun+0x1c2>
	case 4:
		ExploreVelocity=240;
 800d342:	4b1c      	ldr	r3, [pc, #112]	; (800d3b4 <FastestRun+0x208>)
 800d344:	4a27      	ldr	r2, [pc, #156]	; (800d3e4 <FastestRun+0x238>)
 800d346:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800d348:	4b1c      	ldr	r3, [pc, #112]	; (800d3bc <FastestRun+0x210>)
 800d34a:	4a21      	ldr	r2, [pc, #132]	; (800d3d0 <FastestRun+0x224>)
 800d34c:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800d34e:	4b1b      	ldr	r3, [pc, #108]	; (800d3bc <FastestRun+0x210>)
 800d350:	4a1f      	ldr	r2, [pc, #124]	; (800d3d0 <FastestRun+0x224>)
 800d352:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.083;
 800d354:	4b19      	ldr	r3, [pc, #100]	; (800d3bc <FastestRun+0x210>)
 800d356:	4a24      	ldr	r2, [pc, #144]	; (800d3e8 <FastestRun+0x23c>)
 800d358:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d35a:	4b18      	ldr	r3, [pc, #96]	; (800d3bc <FastestRun+0x210>)
 800d35c:	4a19      	ldr	r2, [pc, #100]	; (800d3c4 <FastestRun+0x218>)
 800d35e:	60da      	str	r2, [r3, #12]
		Sla.Theta2 = 60;
 800d360:	4b16      	ldr	r3, [pc, #88]	; (800d3bc <FastestRun+0x210>)
 800d362:	4a19      	ldr	r2, [pc, #100]	; (800d3c8 <FastestRun+0x21c>)
 800d364:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800d366:	4b15      	ldr	r3, [pc, #84]	; (800d3bc <FastestRun+0x210>)
 800d368:	4a13      	ldr	r2, [pc, #76]	; (800d3b8 <FastestRun+0x20c>)
 800d36a:	615a      	str	r2, [r3, #20]
		break;
 800d36c:	bf00      	nop

	}

	ChangeLED(4);
 800d36e:	2004      	movs	r0, #4
 800d370:	f002 f9c8 	bl	800f704 <ChangeLED>


	//マップデータの取得。flashから壁データを取得。
	flash_copy_to_ram();
 800d374:	f7fe fcc2 	bl	800bcfc <flash_copy_to_ram>
	//最短経路導出(今回は省けそう。)

	//走る
	fast_run( X_GOAL_LESSER, Y_GOAL_LESSER, turn_mode);
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	461a      	mov	r2, r3
 800d37c:	2100      	movs	r1, #0
 800d37e:	2001      	movs	r0, #1
 800d380:	f7ff fb96 	bl	800cab0 <fast_run>

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800d384:	eddf 0a19 	vldr	s1, [pc, #100]	; 800d3ec <FastestRun+0x240>
 800d388:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800d3f0 <FastestRun+0x244>
 800d38c:	f7fc ff04 	bl	800a198 <Decel>
	//終了合図
	Signal(7);
 800d390:	2007      	movs	r0, #7
 800d392:	f000 fb27 	bl	800d9e4 <Signal>

}
 800d396:	bf00      	nop
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20000264 	.word	0x20000264
 800d3a4:	0801a6cc 	.word	0x0801a6cc
 800d3a8:	0801a6d8 	.word	0x0801a6d8
 800d3ac:	200002b8 	.word	0x200002b8
 800d3b0:	0801a684 	.word	0x0801a684
 800d3b4:	200002cc 	.word	0x200002cc
 800d3b8:	42b40000 	.word	0x42b40000
 800d3bc:	200006ec 	.word	0x200006ec
 800d3c0:	3c656042 	.word	0x3c656042
 800d3c4:	41f00000 	.word	0x41f00000
 800d3c8:	42700000 	.word	0x42700000
 800d3cc:	43070000 	.word	0x43070000
 800d3d0:	40a00000 	.word	0x40a00000
 800d3d4:	3cdfa440 	.word	0x3cdfa440
 800d3d8:	43340000 	.word	0x43340000
 800d3dc:	40c00000 	.word	0x40c00000
 800d3e0:	3d376b3c 	.word	0x3d376b3c
 800d3e4:	43700000 	.word	0x43700000
 800d3e8:	3da9fbe7 	.word	0x3da9fbe7
 800d3ec:	00000000 	.word	0x00000000
 800d3f0:	42340000 	.word	0x42340000

0800d3f4 <Explore>:
void Explore()
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(250);
 800d3fa:	20fa      	movs	r0, #250	; 0xfa
 800d3fc:	f002 fb60 	bl	800fac0 <HAL_Delay>
	Photo[FR] = 0;
 800d400:	4b8b      	ldr	r3, [pc, #556]	; (800d630 <Explore+0x23c>)
 800d402:	f04f 0200 	mov.w	r2, #0
 800d406:	60da      	str	r2, [r3, #12]
	  int8_t mode=1;
 800d408:	2301      	movs	r3, #1
 800d40a:	71fb      	strb	r3, [r7, #7]
	  printf("mode : %d\r\n", mode);
 800d40c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d410:	4619      	mov	r1, r3
 800d412:	4888      	ldr	r0, [pc, #544]	; (800d634 <Explore+0x240>)
 800d414:	f008 fb82 	bl	8015b1c <iprintf>
	  ModeSelect( 1, 2, &mode);
 800d418:	1dfb      	adds	r3, r7, #7
 800d41a:	461a      	mov	r2, r3
 800d41c:	2102      	movs	r1, #2
 800d41e:	2001      	movs	r0, #1
 800d420:	f000 fb32 	bl	800da88 <ModeSelect>
	  Signal( mode );
 800d424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d428:	4618      	mov	r0, r3
 800d42a:	f000 fadb 	bl	800d9e4 <Signal>
	  printf("Switch\r\n");
 800d42e:	4882      	ldr	r0, [pc, #520]	; (800d638 <Explore+0x244>)
 800d430:	f008 fbfa 	bl	8015c28 <puts>

		HAL_Delay(250);
 800d434:	20fa      	movs	r0, #250	; 0xfa
 800d436:	f002 fb43 	bl	800fac0 <HAL_Delay>
		Photo[FR] = 0;
 800d43a:	4b7d      	ldr	r3, [pc, #500]	; (800d630 <Explore+0x23c>)
 800d43c:	f04f 0200 	mov.w	r2, #0
 800d440:	60da      	str	r2, [r3, #12]
		  int8_t mode2=1;
 800d442:	2301      	movs	r3, #1
 800d444:	71bb      	strb	r3, [r7, #6]
		  printf("mode : %d\r\n", mode2);
 800d446:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d44a:	4619      	mov	r1, r3
 800d44c:	4879      	ldr	r0, [pc, #484]	; (800d634 <Explore+0x240>)
 800d44e:	f008 fb65 	bl	8015b1c <iprintf>
		  ModeSelect( 1, 3, &mode2);
 800d452:	1dbb      	adds	r3, r7, #6
 800d454:	461a      	mov	r2, r3
 800d456:	2103      	movs	r1, #3
 800d458:	2001      	movs	r0, #1
 800d45a:	f000 fb15 	bl	800da88 <ModeSelect>
		  Signal( mode2 );
 800d45e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 fabe 	bl	800d9e4 <Signal>
		  printf("Switch\r\n");
 800d468:	4873      	ldr	r0, [pc, #460]	; (800d638 <Explore+0x244>)
 800d46a:	f008 fbdd 	bl	8015c28 <puts>
	InitExplore();
 800d46e:	f7ff fbc1 	bl	800cbf4 <InitExplore>
//	printf("オフセット:%f, double角速度:%f, double角度:%f, float角速度:%f, float角度:%f",zg_offset,ImuAngV, ImuAngle, AngularV, Angle);
//}

	//迷路とステータスの準備
	//方角と座標の初期化。
	InitPosition();
 800d472:	f7fb fcf9 	bl	8008e68 <InitPosition>
//	uint8_t x, y;
//	Pos.Car = north;
//	x=0,y=0;
	wall_init();
 800d476:	f7fe f8e9 	bl	800b64c <wall_init>
	//printf("4\r\n");
	//時間用の処理の初期化。
	//int timer = 0;
	//エンコーダ移動量の初期化。
	TotalPulse[RIGHT] = 0;
 800d47a:	4b70      	ldr	r3, [pc, #448]	; (800d63c <Explore+0x248>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800d480:	4b6e      	ldr	r3, [pc, #440]	; (800d63c <Explore+0x248>)
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800d486:	4b6d      	ldr	r3, [pc, #436]	; (800d63c <Explore+0x248>)
 800d488:	2200      	movs	r2, #0
 800d48a:	609a      	str	r2, [r3, #8]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	//x,y,dir,sbrl,現在→ x2,y2,dir2,sbrl2更新
//void ChangeNowStatus()

	PIDChangeFlag(L_VELO_PID, 1);
 800d48c:	2101      	movs	r1, #1
 800d48e:	2004      	movs	r0, #4
 800d490:	f000 f924 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800d494:	2101      	movs	r1, #1
 800d496:	2005      	movs	r0, #5
 800d498:	f000 f920 	bl	800d6dc <PIDChangeFlag>
	//printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800d49c:	2100      	movs	r1, #0
 800d49e:	2001      	movs	r0, #1
 800d4a0:	f000 f91c 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	2002      	movs	r0, #2
 800d4a8:	f000 f918 	bl	800d6dc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	2003      	movs	r0, #3
 800d4b0:	f000 f914 	bl	800d6dc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	//ExploreVelocity=180;

	ChangeLED(2);
 800d4b4:	2002      	movs	r0, #2
 800d4b6:	f002 f925 	bl	800f704 <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode;
	if(mode == 1)
 800d4ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d105      	bne.n	800d4ce <Explore+0xda>
	{
		turn_mode = 'T';
 800d4c2:	2354      	movs	r3, #84	; 0x54
 800d4c4:	73fb      	strb	r3, [r7, #15]
		ExploreVelocity=300;
 800d4c6:	4b5e      	ldr	r3, [pc, #376]	; (800d640 <Explore+0x24c>)
 800d4c8:	4a5e      	ldr	r2, [pc, #376]	; (800d644 <Explore+0x250>)
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	e005      	b.n	800d4da <Explore+0xe6>
	}
	else if(mode == 2)
 800d4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d101      	bne.n	800d4da <Explore+0xe6>
	{
		turn_mode = 'S';
 800d4d6:	2353      	movs	r3, #83	; 0x53
 800d4d8:	73fb      	strb	r3, [r7, #15]
	}
	//ExploreVelocity=135;
	switch(mode2)
 800d4da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d034      	beq.n	800d54c <Explore+0x158>
 800d4e2:	2b03      	cmp	r3, #3
 800d4e4:	dc46      	bgt.n	800d574 <Explore+0x180>
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d002      	beq.n	800d4f0 <Explore+0xfc>
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d018      	beq.n	800d520 <Explore+0x12c>
 800d4ee:	e041      	b.n	800d574 <Explore+0x180>
	{
	case 1:
		ExploreVelocity=90;
 800d4f0:	4b53      	ldr	r3, [pc, #332]	; (800d640 <Explore+0x24c>)
 800d4f2:	4a55      	ldr	r2, [pc, #340]	; (800d648 <Explore+0x254>)
 800d4f4:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 8;
 800d4f6:	4b55      	ldr	r3, [pc, #340]	; (800d64c <Explore+0x258>)
 800d4f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800d4fc:	601a      	str	r2, [r3, #0]
		Sla.Fol = 8;
 800d4fe:	4b53      	ldr	r3, [pc, #332]	; (800d64c <Explore+0x258>)
 800d500:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800d504:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800d506:	4b51      	ldr	r3, [pc, #324]	; (800d64c <Explore+0x258>)
 800d508:	4a51      	ldr	r2, [pc, #324]	; (800d650 <Explore+0x25c>)
 800d50a:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d50c:	4b4f      	ldr	r3, [pc, #316]	; (800d64c <Explore+0x258>)
 800d50e:	4a51      	ldr	r2, [pc, #324]	; (800d654 <Explore+0x260>)
 800d510:	60da      	str	r2, [r3, #12]
		Sla.Theta2 = 60;
 800d512:	4b4e      	ldr	r3, [pc, #312]	; (800d64c <Explore+0x258>)
 800d514:	4a50      	ldr	r2, [pc, #320]	; (800d658 <Explore+0x264>)
 800d516:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800d518:	4b4c      	ldr	r3, [pc, #304]	; (800d64c <Explore+0x258>)
 800d51a:	4a4b      	ldr	r2, [pc, #300]	; (800d648 <Explore+0x254>)
 800d51c:	615a      	str	r2, [r3, #20]
		break;
 800d51e:	e029      	b.n	800d574 <Explore+0x180>
	case 2:
		//完
		ExploreVelocity=135;
 800d520:	4b47      	ldr	r3, [pc, #284]	; (800d640 <Explore+0x24c>)
 800d522:	4a4e      	ldr	r2, [pc, #312]	; (800d65c <Explore+0x268>)
 800d524:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800d526:	4b49      	ldr	r3, [pc, #292]	; (800d64c <Explore+0x258>)
 800d528:	4a4d      	ldr	r2, [pc, #308]	; (800d660 <Explore+0x26c>)
 800d52a:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800d52c:	4b47      	ldr	r3, [pc, #284]	; (800d64c <Explore+0x258>)
 800d52e:	4a4c      	ldr	r2, [pc, #304]	; (800d660 <Explore+0x26c>)
 800d530:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.0273;
 800d532:	4b46      	ldr	r3, [pc, #280]	; (800d64c <Explore+0x258>)
 800d534:	4a4b      	ldr	r2, [pc, #300]	; (800d664 <Explore+0x270>)
 800d536:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d538:	4b44      	ldr	r3, [pc, #272]	; (800d64c <Explore+0x258>)
 800d53a:	4a46      	ldr	r2, [pc, #280]	; (800d654 <Explore+0x260>)
 800d53c:	60da      	str	r2, [r3, #12]
		Sla.Theta2 = 60;
 800d53e:	4b43      	ldr	r3, [pc, #268]	; (800d64c <Explore+0x258>)
 800d540:	4a45      	ldr	r2, [pc, #276]	; (800d658 <Explore+0x264>)
 800d542:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800d544:	4b41      	ldr	r3, [pc, #260]	; (800d64c <Explore+0x258>)
 800d546:	4a40      	ldr	r2, [pc, #256]	; (800d648 <Explore+0x254>)
 800d548:	615a      	str	r2, [r3, #20]
		break;
 800d54a:	e013      	b.n	800d574 <Explore+0x180>
	case 3:
		//未
		//ExploreVelocity=180;
		Sla.Pre = 4;
 800d54c:	4b3f      	ldr	r3, [pc, #252]	; (800d64c <Explore+0x258>)
 800d54e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800d552:	601a      	str	r2, [r3, #0]
		Sla.Fol = 6;
 800d554:	4b3d      	ldr	r3, [pc, #244]	; (800d64c <Explore+0x258>)
 800d556:	4a44      	ldr	r2, [pc, #272]	; (800d668 <Explore+0x274>)
 800d558:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04478;
 800d55a:	4b3c      	ldr	r3, [pc, #240]	; (800d64c <Explore+0x258>)
 800d55c:	4a43      	ldr	r2, [pc, #268]	; (800d66c <Explore+0x278>)
 800d55e:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d560:	4b3a      	ldr	r3, [pc, #232]	; (800d64c <Explore+0x258>)
 800d562:	4a3c      	ldr	r2, [pc, #240]	; (800d654 <Explore+0x260>)
 800d564:	60da      	str	r2, [r3, #12]
		Sla.Theta2 = 60;
 800d566:	4b39      	ldr	r3, [pc, #228]	; (800d64c <Explore+0x258>)
 800d568:	4a3b      	ldr	r2, [pc, #236]	; (800d658 <Explore+0x264>)
 800d56a:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800d56c:	4b37      	ldr	r3, [pc, #220]	; (800d64c <Explore+0x258>)
 800d56e:	4a36      	ldr	r2, [pc, #216]	; (800d648 <Explore+0x254>)
 800d570:	615a      	str	r2, [r3, #20]
		break;
 800d572:	bf00      	nop
	//速度の段階を選ぶ。
//	while(1)
//	{
//
//	}
	int i=0;
 800d574:	2300      	movs	r3, #0
 800d576:	60bb      	str	r3, [r7, #8]
	SearchOrFast = 0;
 800d578:	4b3d      	ldr	r3, [pc, #244]	; (800d670 <Explore+0x27c>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800d57e:	4b3d      	ldr	r3, [pc, #244]	; (800d674 <Explore+0x280>)
 800d580:	2200      	movs	r2, #0
 800d582:	709a      	strb	r2, [r3, #2]
	Pos.Car = north;
 800d584:	4b3b      	ldr	r3, [pc, #236]	; (800d674 <Explore+0x280>)
 800d586:	2200      	movs	r2, #0
 800d588:	70da      	strb	r2, [r3, #3]
	Pos.NextX = Pos.X;
 800d58a:	4b3a      	ldr	r3, [pc, #232]	; (800d674 <Explore+0x280>)
 800d58c:	781a      	ldrb	r2, [r3, #0]
 800d58e:	4b39      	ldr	r3, [pc, #228]	; (800d674 <Explore+0x280>)
 800d590:	719a      	strb	r2, [r3, #6]
	Pos.NextY = Pos.Y + 1;
 800d592:	4b38      	ldr	r3, [pc, #224]	; (800d674 <Explore+0x280>)
 800d594:	785b      	ldrb	r3, [r3, #1]
 800d596:	3301      	adds	r3, #1
 800d598:	b2da      	uxtb	r2, r3
 800d59a:	4b36      	ldr	r3, [pc, #216]	; (800d674 <Explore+0x280>)
 800d59c:	71da      	strb	r2, [r3, #7]
	Pos.NextCar = north;
 800d59e:	4b35      	ldr	r3, [pc, #212]	; (800d674 <Explore+0x280>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	725a      	strb	r2, [r3, #9]
	Accel(61.5, ExploreVelocity);
 800d5a4:	4b26      	ldr	r3, [pc, #152]	; (800d640 <Explore+0x24c>)
 800d5a6:	edd3 7a00 	vldr	s15, [r3]
 800d5aa:	eef0 0a67 	vmov.f32	s1, s15
 800d5ae:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800d678 <Explore+0x284>
 800d5b2:	f7fc fd29 	bl	800a008 <Accel>
 	Pos.X = Pos.NextX;
 800d5b6:	4b2f      	ldr	r3, [pc, #188]	; (800d674 <Explore+0x280>)
 800d5b8:	799a      	ldrb	r2, [r3, #6]
 800d5ba:	4b2e      	ldr	r3, [pc, #184]	; (800d674 <Explore+0x280>)
 800d5bc:	701a      	strb	r2, [r3, #0]
    Pos.Y = Pos.NextY;
 800d5be:	4b2d      	ldr	r3, [pc, #180]	; (800d674 <Explore+0x280>)
 800d5c0:	79da      	ldrb	r2, [r3, #7]
 800d5c2:	4b2c      	ldr	r3, [pc, #176]	; (800d674 <Explore+0x280>)
 800d5c4:	705a      	strb	r2, [r3, #1]
	Pos.Car = Pos.NextCar;
 800d5c6:	4b2b      	ldr	r3, [pc, #172]	; (800d674 <Explore+0x280>)
 800d5c8:	7a5a      	ldrb	r2, [r3, #9]
 800d5ca:	4b2a      	ldr	r3, [pc, #168]	; (800d674 <Explore+0x280>)
 800d5cc:	70da      	strb	r2, [r3, #3]
	//uint8_t xlog[10]={0},ylog[10]={0};

	while(  !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER) )  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800d5ce:	e012      	b.n	800d5f6 <Explore+0x202>
		//移動しきったあとに状態を更新するか、アクションが決まった時点で更新するか。後者にすれば、移動しきる前に、壁の状態を検知して、次のマップ更新ができる。次のアクションを用意しておく。
		//今の座標と進行方向から次の方角がわかり座標を更新できる。
		//現在の方角と座標を更新

		//移動後の座標と方角で新たに壁情報を取得
		i++;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	60bb      	str	r3, [r7, #8]
		if(i%2)
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d003      	beq.n	800d5e8 <Explore+0x1f4>
			ChangeLED(7);
 800d5e0:	2007      	movs	r0, #7
 800d5e2:	f002 f88f 	bl	800f704 <ChangeLED>
 800d5e6:	e002      	b.n	800d5ee <Explore+0x1fa>
		else
			ChangeLED(0);
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	f002 f88b 	bl	800f704 <ChangeLED>

		//ChangeLED(0);
		//方向決定と、座標方角の更新。
		//方向決定を変える。
		//LeftHandJudge('T');
		KyushinJudge( turn_mode );
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fe fc09 	bl	800be08 <KyushinJudge>
	while(  !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER) )  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800d5f6:	4b1f      	ldr	r3, [pc, #124]	; (800d674 <Explore+0x280>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d0e8      	beq.n	800d5d0 <Explore+0x1dc>
 800d5fe:	4b1d      	ldr	r3, [pc, #116]	; (800d674 <Explore+0x280>)
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2b02      	cmp	r3, #2
 800d604:	d8e4      	bhi.n	800d5d0 <Explore+0x1dc>
 800d606:	4b1b      	ldr	r3, [pc, #108]	; (800d674 <Explore+0x280>)
 800d608:	785b      	ldrb	r3, [r3, #1]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d8e0      	bhi.n	800d5d0 <Explore+0x1dc>
		UpdateMap();
		//進行方向決定 (最短経路導出から決定するか、評価値比較か、単純な左手か)
		my_direction = DetermineDirection();
#endif
	}
	Decel(45, 0);
 800d60e:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800d67c <Explore+0x288>
 800d612:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800d680 <Explore+0x28c>
 800d616:	f7fc fdbf 	bl	800a198 <Decel>

	//ゴールエリアチェック。
	//諸々停止。

	//flashのクリア。
	Flash_clear_sector1();
 800d61a:	f001 fe7b 	bl	800f314 <Flash_clear_sector1>
	//マップ書き込み
	flash_store_init();
 800d61e:	f7fd ffb3 	bl	800b588 <flash_store_init>

	//完了の合図
	Signal(7);
 800d622:	2007      	movs	r0, #7
 800d624:	f000 f9de 	bl	800d9e4 <Signal>

	//flashに保存
	while(1)
	{
		wall_ram_print();
 800d628:	f7fe fb0e 	bl	800bc48 <wall_ram_print>
 800d62c:	e7fc      	b.n	800d628 <Explore+0x234>
 800d62e:	bf00      	nop
 800d630:	20000264 	.word	0x20000264
 800d634:	0801a6cc 	.word	0x0801a6cc
 800d638:	0801a6d8 	.word	0x0801a6d8
 800d63c:	200002b8 	.word	0x200002b8
 800d640:	200002cc 	.word	0x200002cc
 800d644:	43960000 	.word	0x43960000
 800d648:	42b40000 	.word	0x42b40000
 800d64c:	200006ec 	.word	0x200006ec
 800d650:	3c656042 	.word	0x3c656042
 800d654:	41f00000 	.word	0x41f00000
 800d658:	42700000 	.word	0x42700000
 800d65c:	43070000 	.word	0x43070000
 800d660:	40a00000 	.word	0x40a00000
 800d664:	3cdfa440 	.word	0x3cdfa440
 800d668:	40c00000 	.word	0x40c00000
 800d66c:	3d376b3c 	.word	0x3d376b3c
 800d670:	20000260 	.word	0x20000260
 800d674:	20000000 	.word	0x20000000
 800d678:	42760000 	.word	0x42760000
 800d67c:	00000000 	.word	0x00000000
 800d680:	42340000 	.word	0x42340000

0800d684 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	ed87 0a02 	vstr	s0, [r7, #8]
 800d690:	edc7 0a01 	vstr	s1, [r7, #4]
 800d694:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 800d698:	4a0f      	ldr	r2, [pc, #60]	; (800d6d8 <PIDSetGain+0x54>)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	212c      	movs	r1, #44	; 0x2c
 800d69e:	fb01 f303 	mul.w	r3, r1, r3
 800d6a2:	4413      	add	r3, r2
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 800d6a8:	4a0b      	ldr	r2, [pc, #44]	; (800d6d8 <PIDSetGain+0x54>)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	212c      	movs	r1, #44	; 0x2c
 800d6ae:	fb01 f303 	mul.w	r3, r1, r3
 800d6b2:	4413      	add	r3, r2
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 800d6ba:	4a07      	ldr	r2, [pc, #28]	; (800d6d8 <PIDSetGain+0x54>)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	212c      	movs	r1, #44	; 0x2c
 800d6c0:	fb01 f303 	mul.w	r3, r1, r3
 800d6c4:	4413      	add	r3, r2
 800d6c6:	3308      	adds	r3, #8
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	601a      	str	r2, [r3, #0]

}
 800d6cc:	bf00      	nop
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	20000704 	.word	0x20000704

0800d6dc <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 800d6e6:	4a07      	ldr	r2, [pc, #28]	; (800d704 <PIDChangeFlag+0x28>)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	212c      	movs	r1, #44	; 0x2c
 800d6ec:	fb01 f303 	mul.w	r3, r1, r3
 800d6f0:	4413      	add	r3, r2
 800d6f2:	3328      	adds	r3, #40	; 0x28
 800d6f4:	683a      	ldr	r2, [r7, #0]
 800d6f6:	601a      	str	r2, [r3, #0]
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	20000704 	.word	0x20000704

0800d708 <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800d710:	4a1b      	ldr	r2, [pc, #108]	; (800d780 <PIDReset+0x78>)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	212c      	movs	r1, #44	; 0x2c
 800d716:	fb01 f303 	mul.w	r3, r1, r3
 800d71a:	4413      	add	r3, r2
 800d71c:	330c      	adds	r3, #12
 800d71e:	f04f 0200 	mov.w	r2, #0
 800d722:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 800d724:	4a16      	ldr	r2, [pc, #88]	; (800d780 <PIDReset+0x78>)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	212c      	movs	r1, #44	; 0x2c
 800d72a:	fb01 f303 	mul.w	r3, r1, r3
 800d72e:	4413      	add	r3, r2
 800d730:	3310      	adds	r3, #16
 800d732:	f04f 0200 	mov.w	r2, #0
 800d736:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 800d738:	4a11      	ldr	r2, [pc, #68]	; (800d780 <PIDReset+0x78>)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	212c      	movs	r1, #44	; 0x2c
 800d73e:	fb01 f303 	mul.w	r3, r1, r3
 800d742:	4413      	add	r3, r2
 800d744:	3314      	adds	r3, #20
 800d746:	f04f 0200 	mov.w	r2, #0
 800d74a:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 800d74c:	4a0c      	ldr	r2, [pc, #48]	; (800d780 <PIDReset+0x78>)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	212c      	movs	r1, #44	; 0x2c
 800d752:	fb01 f303 	mul.w	r3, r1, r3
 800d756:	4413      	add	r3, r2
 800d758:	3318      	adds	r3, #24
 800d75a:	f04f 0200 	mov.w	r2, #0
 800d75e:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 800d760:	4a07      	ldr	r2, [pc, #28]	; (800d780 <PIDReset+0x78>)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	212c      	movs	r1, #44	; 0x2c
 800d766:	fb01 f303 	mul.w	r3, r1, r3
 800d76a:	4413      	add	r3, r2
 800d76c:	3324      	adds	r3, #36	; 0x24
 800d76e:	2200      	movs	r2, #0
 800d770:	601a      	str	r2, [r3, #0]
}
 800d772:	bf00      	nop
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr
 800d77e:	bf00      	nop
 800d780:	20000704 	.word	0x20000704

0800d784 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	ed87 0a02 	vstr	s0, [r7, #8]
 800d790:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800d794:	4a90      	ldr	r2, [pc, #576]	; (800d9d8 <PIDControl+0x254>)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	212c      	movs	r1, #44	; 0x2c
 800d79a:	fb01 f303 	mul.w	r3, r1, r3
 800d79e:	4413      	add	r3, r2
 800d7a0:	3328      	adds	r3, #40	; 0x28
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d132      	bne.n	800d80e <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 800d7a8:	4a8b      	ldr	r2, [pc, #556]	; (800d9d8 <PIDControl+0x254>)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	212c      	movs	r1, #44	; 0x2c
 800d7ae:	fb01 f303 	mul.w	r3, r1, r3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	330c      	adds	r3, #12
 800d7b6:	f04f 0200 	mov.w	r2, #0
 800d7ba:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 800d7bc:	4a86      	ldr	r2, [pc, #536]	; (800d9d8 <PIDControl+0x254>)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	212c      	movs	r1, #44	; 0x2c
 800d7c2:	fb01 f303 	mul.w	r3, r1, r3
 800d7c6:	4413      	add	r3, r2
 800d7c8:	3310      	adds	r3, #16
 800d7ca:	f04f 0200 	mov.w	r2, #0
 800d7ce:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 800d7d0:	4a81      	ldr	r2, [pc, #516]	; (800d9d8 <PIDControl+0x254>)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	212c      	movs	r1, #44	; 0x2c
 800d7d6:	fb01 f303 	mul.w	r3, r1, r3
 800d7da:	4413      	add	r3, r2
 800d7dc:	3314      	adds	r3, #20
 800d7de:	f04f 0200 	mov.w	r2, #0
 800d7e2:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 800d7e4:	4a7c      	ldr	r2, [pc, #496]	; (800d9d8 <PIDControl+0x254>)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	212c      	movs	r1, #44	; 0x2c
 800d7ea:	fb01 f303 	mul.w	r3, r1, r3
 800d7ee:	4413      	add	r3, r2
 800d7f0:	3318      	adds	r3, #24
 800d7f2:	f04f 0200 	mov.w	r2, #0
 800d7f6:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 800d7f8:	4a77      	ldr	r2, [pc, #476]	; (800d9d8 <PIDControl+0x254>)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	212c      	movs	r1, #44	; 0x2c
 800d7fe:	fb01 f303 	mul.w	r3, r1, r3
 800d802:	4413      	add	r3, r2
 800d804:	3324      	adds	r3, #36	; 0x24
 800d806:	2200      	movs	r2, #0
 800d808:	601a      	str	r2, [r3, #0]
		return 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	e0e0      	b.n	800d9d0 <PIDControl+0x24c>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 800d80e:	4a72      	ldr	r2, [pc, #456]	; (800d9d8 <PIDControl+0x254>)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	212c      	movs	r1, #44	; 0x2c
 800d814:	fb01 f303 	mul.w	r3, r1, r3
 800d818:	4413      	add	r3, r2
 800d81a:	3320      	adds	r3, #32
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 800d820:	4a6d      	ldr	r2, [pc, #436]	; (800d9d8 <PIDControl+0x254>)
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	212c      	movs	r1, #44	; 0x2c
 800d826:	fb01 f303 	mul.w	r3, r1, r3
 800d82a:	4413      	add	r3, r2
 800d82c:	331c      	adds	r3, #28
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 800d832:	4a69      	ldr	r2, [pc, #420]	; (800d9d8 <PIDControl+0x254>)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	212c      	movs	r1, #44	; 0x2c
 800d838:	fb01 f303 	mul.w	r3, r1, r3
 800d83c:	4413      	add	r3, r2
 800d83e:	3320      	adds	r3, #32
 800d840:	ed93 7a00 	vldr	s14, [r3]
 800d844:	4a64      	ldr	r2, [pc, #400]	; (800d9d8 <PIDControl+0x254>)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	212c      	movs	r1, #44	; 0x2c
 800d84a:	fb01 f303 	mul.w	r3, r1, r3
 800d84e:	4413      	add	r3, r2
 800d850:	331c      	adds	r3, #28
 800d852:	edd3 7a00 	vldr	s15, [r3]
 800d856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d85a:	4a5f      	ldr	r2, [pc, #380]	; (800d9d8 <PIDControl+0x254>)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	212c      	movs	r1, #44	; 0x2c
 800d860:	fb01 f303 	mul.w	r3, r1, r3
 800d864:	4413      	add	r3, r2
 800d866:	330c      	adds	r3, #12
 800d868:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 800d86c:	4a5a      	ldr	r2, [pc, #360]	; (800d9d8 <PIDControl+0x254>)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	212c      	movs	r1, #44	; 0x2c
 800d872:	fb01 f303 	mul.w	r3, r1, r3
 800d876:	4413      	add	r3, r2
 800d878:	3310      	adds	r3, #16
 800d87a:	ed93 7a00 	vldr	s14, [r3]
 800d87e:	4a56      	ldr	r2, [pc, #344]	; (800d9d8 <PIDControl+0x254>)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	212c      	movs	r1, #44	; 0x2c
 800d884:	fb01 f303 	mul.w	r3, r1, r3
 800d888:	4413      	add	r3, r2
 800d88a:	330c      	adds	r3, #12
 800d88c:	edd3 7a00 	vldr	s15, [r3]
 800d890:	eddf 6a52 	vldr	s13, [pc, #328]	; 800d9dc <PIDControl+0x258>
 800d894:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d89c:	4a4e      	ldr	r2, [pc, #312]	; (800d9d8 <PIDControl+0x254>)
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	212c      	movs	r1, #44	; 0x2c
 800d8a2:	fb01 f303 	mul.w	r3, r1, r3
 800d8a6:	4413      	add	r3, r2
 800d8a8:	3310      	adds	r3, #16
 800d8aa:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800d8ae:	4a4a      	ldr	r2, [pc, #296]	; (800d9d8 <PIDControl+0x254>)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	212c      	movs	r1, #44	; 0x2c
 800d8b4:	fb01 f303 	mul.w	r3, r1, r3
 800d8b8:	4413      	add	r3, r2
 800d8ba:	330c      	adds	r3, #12
 800d8bc:	ed93 7a00 	vldr	s14, [r3]
 800d8c0:	4a45      	ldr	r2, [pc, #276]	; (800d9d8 <PIDControl+0x254>)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	212c      	movs	r1, #44	; 0x2c
 800d8c6:	fb01 f303 	mul.w	r3, r1, r3
 800d8ca:	4413      	add	r3, r2
 800d8cc:	3318      	adds	r3, #24
 800d8ce:	edd3 7a00 	vldr	s15, [r3]
 800d8d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8d6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800d9e0 <PIDControl+0x25c>
 800d8da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8de:	4a3e      	ldr	r2, [pc, #248]	; (800d9d8 <PIDControl+0x254>)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	212c      	movs	r1, #44	; 0x2c
 800d8e4:	fb01 f303 	mul.w	r3, r1, r3
 800d8e8:	4413      	add	r3, r2
 800d8ea:	3314      	adds	r3, #20
 800d8ec:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 800d8f0:	4a39      	ldr	r2, [pc, #228]	; (800d9d8 <PIDControl+0x254>)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	212c      	movs	r1, #44	; 0x2c
 800d8f6:	fb01 f303 	mul.w	r3, r1, r3
 800d8fa:	4413      	add	r3, r2
 800d8fc:	330c      	adds	r3, #12
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	4935      	ldr	r1, [pc, #212]	; (800d9d8 <PIDControl+0x254>)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	202c      	movs	r0, #44	; 0x2c
 800d906:	fb00 f303 	mul.w	r3, r0, r3
 800d90a:	440b      	add	r3, r1
 800d90c:	3318      	adds	r3, #24
 800d90e:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800d910:	4a31      	ldr	r2, [pc, #196]	; (800d9d8 <PIDControl+0x254>)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	212c      	movs	r1, #44	; 0x2c
 800d916:	fb01 f303 	mul.w	r3, r1, r3
 800d91a:	4413      	add	r3, r2
 800d91c:	ed93 7a00 	vldr	s14, [r3]
 800d920:	4a2d      	ldr	r2, [pc, #180]	; (800d9d8 <PIDControl+0x254>)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	212c      	movs	r1, #44	; 0x2c
 800d926:	fb01 f303 	mul.w	r3, r1, r3
 800d92a:	4413      	add	r3, r2
 800d92c:	330c      	adds	r3, #12
 800d92e:	edd3 7a00 	vldr	s15, [r3]
 800d932:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d936:	4a28      	ldr	r2, [pc, #160]	; (800d9d8 <PIDControl+0x254>)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	212c      	movs	r1, #44	; 0x2c
 800d93c:	fb01 f303 	mul.w	r3, r1, r3
 800d940:	4413      	add	r3, r2
 800d942:	3304      	adds	r3, #4
 800d944:	edd3 6a00 	vldr	s13, [r3]
 800d948:	4a23      	ldr	r2, [pc, #140]	; (800d9d8 <PIDControl+0x254>)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	212c      	movs	r1, #44	; 0x2c
 800d94e:	fb01 f303 	mul.w	r3, r1, r3
 800d952:	4413      	add	r3, r2
 800d954:	3310      	adds	r3, #16
 800d956:	edd3 7a00 	vldr	s15, [r3]
 800d95a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d95e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d962:	4a1d      	ldr	r2, [pc, #116]	; (800d9d8 <PIDControl+0x254>)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	212c      	movs	r1, #44	; 0x2c
 800d968:	fb01 f303 	mul.w	r3, r1, r3
 800d96c:	4413      	add	r3, r2
 800d96e:	3308      	adds	r3, #8
 800d970:	edd3 6a00 	vldr	s13, [r3]
 800d974:	4a18      	ldr	r2, [pc, #96]	; (800d9d8 <PIDControl+0x254>)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	212c      	movs	r1, #44	; 0x2c
 800d97a:	fb01 f303 	mul.w	r3, r1, r3
 800d97e:	4413      	add	r3, r2
 800d980:	3314      	adds	r3, #20
 800d982:	edd3 7a00 	vldr	s15, [r3]
 800d986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d98e:	ee17 0a90 	vmov	r0, s15
 800d992:	f7fa fd11 	bl	80083b8 <__aeabi_f2d>
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	ec43 2b10 	vmov	d0, r2, r3
 800d99e:	f007 f9bd 	bl	8014d1c <round>
 800d9a2:	ec53 2b10 	vmov	r2, r3, d0
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	f7fb f80d 	bl	80089c8 <__aeabi_d2iz>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	4909      	ldr	r1, [pc, #36]	; (800d9d8 <PIDControl+0x254>)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	202c      	movs	r0, #44	; 0x2c
 800d9b6:	fb00 f303 	mul.w	r3, r0, r3
 800d9ba:	440b      	add	r3, r1
 800d9bc:	3324      	adds	r3, #36	; 0x24
 800d9be:	601a      	str	r2, [r3, #0]
		return Pid[n].out;
 800d9c0:	4a05      	ldr	r2, [pc, #20]	; (800d9d8 <PIDControl+0x254>)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	212c      	movs	r1, #44	; 0x2c
 800d9c6:	fb01 f303 	mul.w	r3, r1, r3
 800d9ca:	4413      	add	r3, r2
 800d9cc:	3324      	adds	r3, #36	; 0x24
 800d9ce:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	20000704 	.word	0x20000704
 800d9dc:	3a83126f 	.word	0x3a83126f
 800d9e0:	4479ffff 	.word	0x4479ffff

0800d9e4 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int mode)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	e00e      	b.n	800da10 <Signal+0x2c>
	{
		ChangeLED(mode);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f001 fe86 	bl	800f704 <ChangeLED>
		HAL_Delay(100);
 800d9f8:	2064      	movs	r0, #100	; 0x64
 800d9fa:	f002 f861 	bl	800fac0 <HAL_Delay>
		ChangeLED(0);
 800d9fe:	2000      	movs	r0, #0
 800da00:	f001 fe80 	bl	800f704 <ChangeLED>
		HAL_Delay(100);
 800da04:	2064      	movs	r0, #100	; 0x64
 800da06:	f002 f85b 	bl	800fac0 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3301      	adds	r3, #1
 800da0e:	60fb      	str	r3, [r7, #12]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2b04      	cmp	r3, #4
 800da14:	dded      	ble.n	800d9f2 <Signal+0xe>
	}
}
 800da16:	bf00      	nop
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800da28:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800da74 <BatteryCheck+0x54>
 800da2c:	eddf 0a12 	vldr	s1, [pc, #72]	; 800da78 <BatteryCheck+0x58>
 800da30:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f7fc ffbf 	bl	800a9b8 <ADCToBatteryVoltage>
 800da3a:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800da3e:	2103      	movs	r1, #3
 800da40:	2002      	movs	r0, #2
 800da42:	f7fc ffe3 	bl	800aa0c <IntegerPower>
 800da46:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800da48:	6938      	ldr	r0, [r7, #16]
 800da4a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800da7c <BatteryCheck+0x5c>
 800da4e:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800da80 <BatteryCheck+0x60>
 800da52:	ed97 0a05 	vldr	s0, [r7, #20]
 800da56:	f7fc fff6 	bl	800aa46 <GetBatteryLevel>
 800da5a:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800da5c:	68f9      	ldr	r1, [r7, #12]
 800da5e:	4809      	ldr	r0, [pc, #36]	; (800da84 <BatteryCheck+0x64>)
 800da60:	f008 f85c 	bl	8015b1c <iprintf>
	Signal( battery_level );
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7ff ffbd 	bl	800d9e4 <Signal>
}
 800da6a:	bf00      	nop
 800da6c:	3718      	adds	r7, #24
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	45800000 	.word	0x45800000
 800da78:	40533333 	.word	0x40533333
 800da7c:	41066666 	.word	0x41066666
 800da80:	40e66666 	.word	0x40e66666
 800da84:	0801a6e0 	.word	0x0801a6e0

0800da88 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	4603      	mov	r3, r0
 800da90:	603a      	str	r2, [r7, #0]
 800da92:	71fb      	strb	r3, [r7, #7]
 800da94:	460b      	mov	r3, r1
 800da96:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800da98:	f001 fe18 	bl	800f6cc <EmitterON>
	ADCStart();
 800da9c:	f001 fb12 	bl	800f0c4 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800daa0:	484a      	ldr	r0, [pc, #296]	; (800dbcc <ModeSelect+0x144>)
 800daa2:	f004 ff0e 	bl	80128c2 <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800daa6:	f001 fdf1 	bl	800f68c <EncoderStart>
	HAL_Delay(1000);
 800daaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800daae:	f002 f807 	bl	800fac0 <HAL_Delay>
	//while中で選択
	*pMode=min;
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	79fa      	ldrb	r2, [r7, #7]
 800dab6:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 800dab8:	f247 512f 	movw	r1, #29999	; 0x752f
 800dabc:	4844      	ldr	r0, [pc, #272]	; (800dbd0 <ModeSelect+0x148>)
 800dabe:	f7fc ff03 	bl	800a8c8 <InitPulse>

	int ENC3_LEFT;
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800dac2:	e06b      	b.n	800db9c <ModeSelect+0x114>
	{
		printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
 800dac4:	4b43      	ldr	r3, [pc, #268]	; (800dbd4 <ModeSelect+0x14c>)
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fa fc75 	bl	80083b8 <__aeabi_f2d>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	68f9      	ldr	r1, [r7, #12]
 800dad4:	9100      	str	r1, [sp, #0]
 800dad6:	4840      	ldr	r0, [pc, #256]	; (800dbd8 <ModeSelect+0x150>)
 800dad8:	f008 f820 	bl	8015b1c <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800dadc:	4b3f      	ldr	r3, [pc, #252]	; (800dbdc <ModeSelect+0x154>)
 800dade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae0:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	ee07 3a90 	vmov	s15, r3
 800dae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daec:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800dbe0 <ModeSelect+0x158>
 800daf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800daf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf8:	db21      	blt.n	800db3e <ModeSelect+0xb6>
		  {
		  	  *pMode += 1;
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	f993 3000 	ldrsb.w	r3, [r3]
 800db00:	b2db      	uxtb	r3, r3
 800db02:	3301      	adds	r3, #1
 800db04:	b2db      	uxtb	r3, r3
 800db06:	b25a      	sxtb	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	f993 3000 	ldrsb.w	r3, [r3]
 800db12:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800db16:	429a      	cmp	r2, r3
 800db18:	da02      	bge.n	800db20 <ModeSelect+0x98>
		  	  {
		  		  *pMode = min;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	79fa      	ldrb	r2, [r7, #7]
 800db1e:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	f993 3000 	ldrsb.w	r3, [r3]
 800db26:	4618      	mov	r0, r3
 800db28:	f001 fdec 	bl	800f704 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 800db2c:	f247 512f 	movw	r1, #29999	; 0x752f
 800db30:	4827      	ldr	r0, [pc, #156]	; (800dbd0 <ModeSelect+0x148>)
 800db32:	f7fc fec9 	bl	800a8c8 <InitPulse>
		  	  HAL_Delay(500);
 800db36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db3a:	f001 ffc1 	bl	800fac0 <HAL_Delay>

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	ee07 3a90 	vmov	s15, r3
 800db44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db48:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800dbe4 <ModeSelect+0x15c>
 800db4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db54:	d900      	bls.n	800db58 <ModeSelect+0xd0>
 800db56:	e021      	b.n	800db9c <ModeSelect+0x114>
		  {
		  	  *pMode -= 1;
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	f993 3000 	ldrsb.w	r3, [r3]
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	3b01      	subs	r3, #1
 800db62:	b2db      	uxtb	r3, r3
 800db64:	b25a      	sxtb	r2, r3
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	f993 3000 	ldrsb.w	r3, [r3]
 800db70:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800db74:	429a      	cmp	r2, r3
 800db76:	dd02      	ble.n	800db7e <ModeSelect+0xf6>
		  	  {
		  	  		  *pMode = max;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	79ba      	ldrb	r2, [r7, #6]
 800db7c:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	f993 3000 	ldrsb.w	r3, [r3]
 800db84:	4618      	mov	r0, r3
 800db86:	f001 fdbd 	bl	800f704 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE);
 800db8a:	f247 512f 	movw	r1, #29999	; 0x752f
 800db8e:	4810      	ldr	r0, [pc, #64]	; (800dbd0 <ModeSelect+0x148>)
 800db90:	f7fc fe9a 	bl	800a8c8 <InitPulse>
		  	  HAL_Delay(500);
 800db94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db98:	f001 ff92 	bl	800fac0 <HAL_Delay>
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800db9c:	4b0d      	ldr	r3, [pc, #52]	; (800dbd4 <ModeSelect+0x14c>)
 800db9e:	edd3 7a03 	vldr	s15, [r3, #12]
 800dba2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800dbe8 <ModeSelect+0x160>
 800dba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbae:	d489      	bmi.n	800dac4 <ModeSelect+0x3c>
		  }
	}

	EmitterOFF();
 800dbb0:	f001 fd9a 	bl	800f6e8 <EmitterOFF>
	ADCStop();
 800dbb4:	f001 faa6 	bl	800f104 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 800dbb8:	4804      	ldr	r0, [pc, #16]	; (800dbcc <ModeSelect+0x144>)
 800dbba:	f004 fea6 	bl	801290a <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 800dbbe:	f001 fd75 	bl	800f6ac <EncoderStop>

	//モード選択後どうするか
}
 800dbc2:	bf00      	nop
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	20000b4c 	.word	0x20000b4c
 800dbd0:	40000424 	.word	0x40000424
 800dbd4:	20000264 	.word	0x20000264
 800dbd8:	0801a6e8 	.word	0x0801a6e8
 800dbdc:	40000400 	.word	0x40000400
 800dbe0:	47352f00 	.word	0x47352f00
 800dbe4:	4654bc00 	.word	0x4654bc00
 800dbe8:	437a0000 	.word	0x437a0000

0800dbec <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800dbf4:	1d39      	adds	r1, r7, #4
 800dbf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	4803      	ldr	r0, [pc, #12]	; (800dc0c <__io_putchar+0x20>)
 800dbfe:	f006 fa35 	bl	801406c <HAL_UART_Transmit>
	return ch;
 800dc02:	687b      	ldr	r3, [r7, #4]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	20000b8c 	.word	0x20000b8c

0800dc10 <__io_getchar>:
int __io_getchar(void) {
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800dc16:	2302      	movs	r3, #2
 800dc18:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800dc1a:	e007      	b.n	800dc2c <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800dc1c:	1db9      	adds	r1, r7, #6
 800dc1e:	230a      	movs	r3, #10
 800dc20:	2201      	movs	r2, #1
 800dc22:	4806      	ldr	r0, [pc, #24]	; (800dc3c <__io_getchar+0x2c>)
 800dc24:	f006 fabb 	bl	801419e <HAL_UART_Receive>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d1f4      	bne.n	800dc1c <__io_getchar+0xc>
//	break;
//}

}

return(Data);
 800dc32:	79bb      	ldrb	r3, [r7, #6]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	20000b8c 	.word	0x20000b8c

0800dc40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800dc46:	f001 fec9 	bl	800f9dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800dc4a:	f000 f8af 	bl	800ddac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800dc4e:	f000 fcf9 	bl	800e644 <MX_GPIO_Init>
  MX_DMA_Init();
 800dc52:	f000 fccf 	bl	800e5f4 <MX_DMA_Init>
  MX_ADC1_Init();
 800dc56:	f000 f913 	bl	800de80 <MX_ADC1_Init>
  MX_ADC2_Init();
 800dc5a:	f000 f97f 	bl	800df5c <MX_ADC2_Init>
  MX_TIM3_Init();
 800dc5e:	f000 fad9 	bl	800e214 <MX_TIM3_Init>
  MX_TIM2_Init();
 800dc62:	f000 fa61 	bl	800e128 <MX_TIM2_Init>
  MX_SPI3_Init();
 800dc66:	f000 f9d9 	bl	800e01c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800dc6a:	f000 fc99 	bl	800e5a0 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800dc6e:	f000 fb79 	bl	800e364 <MX_TIM5_Init>
  MX_TIM4_Init();
 800dc72:	f000 fb23 	bl	800e2bc <MX_TIM4_Init>
  MX_TIM8_Init();
 800dc76:	f000 fbeb 	bl	800e450 <MX_TIM8_Init>
  MX_TIM1_Init();
 800dc7a:	f000 fa05 	bl	800e088 <MX_TIM1_Init>
//  {
//
//  }


  ADCStart();
 800dc7e:	f001 fa21 	bl	800f0c4 <ADCStart>
  HAL_Delay(500);
 800dc82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc86:	f001 ff1b 	bl	800fac0 <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800dc8a:	4b41      	ldr	r3, [pc, #260]	; (800dd90 <main+0x150>)
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff fec6 	bl	800da20 <BatteryCheck>

  int8_t mode=0;
 800dc94:	2300      	movs	r3, #0
 800dc96:	71fb      	strb	r3, [r7, #7]
  printf("mode : %d\r\n", mode);
 800dc98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	483d      	ldr	r0, [pc, #244]	; (800dd94 <main+0x154>)
 800dca0:	f007 ff3c 	bl	8015b1c <iprintf>
  ModeSelect( 0, 7, &mode);
 800dca4:	1dfb      	adds	r3, r7, #7
 800dca6:	461a      	mov	r2, r3
 800dca8:	2107      	movs	r1, #7
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f7ff feec 	bl	800da88 <ModeSelect>
  Signal( mode );
 800dcb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7ff fe95 	bl	800d9e4 <Signal>
  printf("Switch\r\n");
 800dcba:	4837      	ldr	r0, [pc, #220]	; (800dd98 <main+0x158>)
 800dcbc:	f007 ffb4 	bl	8015c28 <puts>

  //pidパラメータの初期化をもっと書き換えやすいところで
// Flashから読みしたータを避するRAM
  //軽くなったあとはこ�?�ゲインで上手くいく�?�は�?信地旋回くら�?。�?�続スラロー�?は求�?法�?�計算が合ってち�?っと間に合って�?な�?のかも

  PIDSetGain(L_VELO_PID, 11.1, 2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら 36.6*0.6=18+3.96
 800dcc0:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800dd9c <main+0x15c>
 800dcc4:	eddf 0a36 	vldr	s1, [pc, #216]	; 800dda0 <main+0x160>
 800dcc8:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800dda4 <main+0x164>
 800dccc:	2004      	movs	r0, #4
 800dcce:	f7ff fcd9 	bl	800d684 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 11.1, 2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800dcd2:	ed9f 1a32 	vldr	s2, [pc, #200]	; 800dd9c <main+0x15c>
 800dcd6:	eddf 0a32 	vldr	s1, [pc, #200]	; 800dda0 <main+0x160>
 800dcda:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800dda4 <main+0x164>
 800dcde:	2005      	movs	r0, #5
 800dce0:	f7ff fcd0 	bl	800d684 <PIDSetGain>
  //PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
  //未調整
  PIDSetGain(A_VELO_PID, 1,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800dce4:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800dda8 <main+0x168>
 800dce8:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800dda8 <main+0x168>
 800dcec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	f7ff fcc7 	bl	800d684 <PIDSetGain>
  //Iは積�?=偏差を消す。ゲインが大きいと偏差が縮まるが、収束が
  //Dは微
  //壁�?�ゲインは緩め�?�方がよさそ�?。強�?と�?瞬ガタンと動いてあと固定になってしま�?�?
  PIDSetGain(D_WALL_PID, 1, 0, 0);//3.2,0,0);//4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御?��??// 3.200000, 50.000000, 0.00025i55000
 800dcf6:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800dda8 <main+0x168>
 800dcfa:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800dda8 <main+0x168>
 800dcfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dd02:	2001      	movs	r0, #1
 800dd04:	f7ff fcbe 	bl	800d684 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 1,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800dd08:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800dda8 <main+0x168>
 800dd0c:	eddf 0a26 	vldr	s1, [pc, #152]	; 800dda8 <main+0x168>
 800dd10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dd14:	2002      	movs	r0, #2
 800dd16:	f7ff fcb5 	bl	800d684 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 1,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800dd1a:	ed9f 1a23 	vldr	s2, [pc, #140]	; 800dda8 <main+0x168>
 800dd1e:	eddf 0a22 	vldr	s1, [pc, #136]	; 800dda8 <main+0x168>
 800dd22:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dd26:	2003      	movs	r0, #3
 800dd28:	f7ff fcac 	bl	800d684 <PIDSetGain>
  //PidFlag = A_VELO_PID;
  while (1)
  {

	  switch( mode )
 800dd2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd30:	2b07      	cmp	r3, #7
 800dd32:	d82b      	bhi.n	800dd8c <main+0x14c>
 800dd34:	a201      	add	r2, pc, #4	; (adr r2, 800dd3c <main+0xfc>)
 800dd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd3a:	bf00      	nop
 800dd3c:	0800dd5d 	.word	0x0800dd5d
 800dd40:	0800dd63 	.word	0x0800dd63
 800dd44:	0800dd69 	.word	0x0800dd69
 800dd48:	0800dd6f 	.word	0x0800dd6f
 800dd4c:	0800dd75 	.word	0x0800dd75
 800dd50:	0800dd7b 	.word	0x0800dd7b
 800dd54:	0800dd81 	.word	0x0800dd81
 800dd58:	0800dd87 	.word	0x0800dd87
	  {
	  case 0:

		  ParameterSetting();
 800dd5c:	f7ff f922 	bl	800cfa4 <ParameterSetting>
		//wall_flash_print();
		  break;
 800dd60:	e015      	b.n	800dd8e <main+0x14e>
	  case 1:
		  GainTestRWall();
 800dd62:	f7ff f927 	bl	800cfb4 <GainTestRWall>
		  break;
 800dd66:	e012      	b.n	800dd8e <main+0x14e>
	  case 2:
		  GainTestDWall();
 800dd68:	f7ff f956 	bl	800d018 <GainTestDWall>
		  break;
 800dd6c:	e00f      	b.n	800dd8e <main+0x14e>
	  case 3:
		  Debug();
 800dd6e:	f7ff f879 	bl	800ce64 <Debug>
		  break;
 800dd72:	e00c      	b.n	800dd8e <main+0x14e>
	  case 4:
		  //GainTestLWall();
		  FastestRun();
 800dd74:	f7ff fa1a 	bl	800d1ac <FastestRun>
		  break;
 800dd78:	e009      	b.n	800dd8e <main+0x14e>
	  case 5:
		  GainTestAVelo();
 800dd7a:	f7ff f97f 	bl	800d07c <GainTestAVelo>
		  break;
 800dd7e:	e006      	b.n	800dd8e <main+0x14e>
	  case 6:
		  Explore();
 800dd80:	f7ff fb38 	bl	800d3f4 <Explore>
		  break;
 800dd84:	e003      	b.n	800dd8e <main+0x14e>
	  case 7:
		  WritingFree();
 800dd86:	f7ff f9af 	bl	800d0e8 <WritingFree>
		  break;
 800dd8a:	e000      	b.n	800dd8e <main+0x14e>
	  default :
		  break;
 800dd8c:	bf00      	nop
	  switch( mode )
 800dd8e:	e7cd      	b.n	800dd2c <main+0xec>
 800dd90:	20000bd0 	.word	0x20000bd0
 800dd94:	0801a704 	.word	0x0801a704
 800dd98:	0801a710 	.word	0x0801a710
 800dd9c:	3b03126f 	.word	0x3b03126f
 800dda0:	4517e000 	.word	0x4517e000
 800dda4:	4131999a 	.word	0x4131999a
 800dda8:	00000000 	.word	0x00000000

0800ddac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b094      	sub	sp, #80	; 0x50
 800ddb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ddb2:	f107 0320 	add.w	r3, r7, #32
 800ddb6:	2230      	movs	r2, #48	; 0x30
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f007 f82c 	bl	8014e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ddc0:	f107 030c 	add.w	r3, r7, #12
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	605a      	str	r2, [r3, #4]
 800ddca:	609a      	str	r2, [r3, #8]
 800ddcc:	60da      	str	r2, [r3, #12]
 800ddce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	60bb      	str	r3, [r7, #8]
 800ddd4:	4b28      	ldr	r3, [pc, #160]	; (800de78 <SystemClock_Config+0xcc>)
 800ddd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd8:	4a27      	ldr	r2, [pc, #156]	; (800de78 <SystemClock_Config+0xcc>)
 800ddda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddde:	6413      	str	r3, [r2, #64]	; 0x40
 800dde0:	4b25      	ldr	r3, [pc, #148]	; (800de78 <SystemClock_Config+0xcc>)
 800dde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dde8:	60bb      	str	r3, [r7, #8]
 800ddea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ddec:	2300      	movs	r3, #0
 800ddee:	607b      	str	r3, [r7, #4]
 800ddf0:	4b22      	ldr	r3, [pc, #136]	; (800de7c <SystemClock_Config+0xd0>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a21      	ldr	r2, [pc, #132]	; (800de7c <SystemClock_Config+0xd0>)
 800ddf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	4b1f      	ldr	r3, [pc, #124]	; (800de7c <SystemClock_Config+0xd0>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de04:	607b      	str	r3, [r7, #4]
 800de06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800de08:	2301      	movs	r3, #1
 800de0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800de0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800de10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800de12:	2302      	movs	r3, #2
 800de14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800de16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800de1c:	2304      	movs	r3, #4
 800de1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800de20:	23a8      	movs	r3, #168	; 0xa8
 800de22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800de24:	2302      	movs	r3, #2
 800de26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800de28:	2304      	movs	r3, #4
 800de2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800de2c:	f107 0320 	add.w	r3, r7, #32
 800de30:	4618      	mov	r0, r3
 800de32:	f003 fb39 	bl	80114a8 <HAL_RCC_OscConfig>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800de3c:	f000 fccc 	bl	800e7d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800de40:	230f      	movs	r3, #15
 800de42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800de44:	2302      	movs	r3, #2
 800de46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800de48:	2300      	movs	r3, #0
 800de4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800de4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800de50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800de52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800de58:	f107 030c 	add.w	r3, r7, #12
 800de5c:	2105      	movs	r1, #5
 800de5e:	4618      	mov	r0, r3
 800de60:	f003 fd90 	bl	8011984 <HAL_RCC_ClockConfig>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800de6a:	f000 fcb5 	bl	800e7d8 <Error_Handler>
  }
}
 800de6e:	bf00      	nop
 800de70:	3750      	adds	r7, #80	; 0x50
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	40023800 	.word	0x40023800
 800de7c:	40007000 	.word	0x40007000

0800de80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800de86:	463b      	mov	r3, r7
 800de88:	2200      	movs	r2, #0
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	605a      	str	r2, [r3, #4]
 800de8e:	609a      	str	r2, [r3, #8]
 800de90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800de92:	4b2f      	ldr	r3, [pc, #188]	; (800df50 <MX_ADC1_Init+0xd0>)
 800de94:	4a2f      	ldr	r2, [pc, #188]	; (800df54 <MX_ADC1_Init+0xd4>)
 800de96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800de98:	4b2d      	ldr	r3, [pc, #180]	; (800df50 <MX_ADC1_Init+0xd0>)
 800de9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800de9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800dea0:	4b2b      	ldr	r3, [pc, #172]	; (800df50 <MX_ADC1_Init+0xd0>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800dea6:	4b2a      	ldr	r3, [pc, #168]	; (800df50 <MX_ADC1_Init+0xd0>)
 800dea8:	2201      	movs	r2, #1
 800deaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800deac:	4b28      	ldr	r3, [pc, #160]	; (800df50 <MX_ADC1_Init+0xd0>)
 800deae:	2201      	movs	r2, #1
 800deb0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800deb2:	4b27      	ldr	r3, [pc, #156]	; (800df50 <MX_ADC1_Init+0xd0>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800deba:	4b25      	ldr	r3, [pc, #148]	; (800df50 <MX_ADC1_Init+0xd0>)
 800debc:	2200      	movs	r2, #0
 800debe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800dec0:	4b23      	ldr	r3, [pc, #140]	; (800df50 <MX_ADC1_Init+0xd0>)
 800dec2:	4a25      	ldr	r2, [pc, #148]	; (800df58 <MX_ADC1_Init+0xd8>)
 800dec4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dec6:	4b22      	ldr	r3, [pc, #136]	; (800df50 <MX_ADC1_Init+0xd0>)
 800dec8:	2200      	movs	r2, #0
 800deca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800decc:	4b20      	ldr	r3, [pc, #128]	; (800df50 <MX_ADC1_Init+0xd0>)
 800dece:	2203      	movs	r2, #3
 800ded0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ded2:	4b1f      	ldr	r3, [pc, #124]	; (800df50 <MX_ADC1_Init+0xd0>)
 800ded4:	2201      	movs	r2, #1
 800ded6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800deda:	4b1d      	ldr	r3, [pc, #116]	; (800df50 <MX_ADC1_Init+0xd0>)
 800dedc:	2201      	movs	r2, #1
 800dede:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800dee0:	481b      	ldr	r0, [pc, #108]	; (800df50 <MX_ADC1_Init+0xd0>)
 800dee2:	f001 fe11 	bl	800fb08 <HAL_ADC_Init>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800deec:	f000 fc74 	bl	800e7d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800def0:	230a      	movs	r3, #10
 800def2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800def4:	2301      	movs	r3, #1
 800def6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800def8:	2303      	movs	r3, #3
 800defa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800defc:	463b      	mov	r3, r7
 800defe:	4619      	mov	r1, r3
 800df00:	4813      	ldr	r0, [pc, #76]	; (800df50 <MX_ADC1_Init+0xd0>)
 800df02:	f001 ff9f 	bl	800fe44 <HAL_ADC_ConfigChannel>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d001      	beq.n	800df10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800df0c:	f000 fc64 	bl	800e7d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800df10:	230e      	movs	r3, #14
 800df12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800df14:	2302      	movs	r3, #2
 800df16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800df18:	463b      	mov	r3, r7
 800df1a:	4619      	mov	r1, r3
 800df1c:	480c      	ldr	r0, [pc, #48]	; (800df50 <MX_ADC1_Init+0xd0>)
 800df1e:	f001 ff91 	bl	800fe44 <HAL_ADC_ConfigChannel>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800df28:	f000 fc56 	bl	800e7d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800df2c:	2309      	movs	r3, #9
 800df2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800df30:	2303      	movs	r3, #3
 800df32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800df34:	463b      	mov	r3, r7
 800df36:	4619      	mov	r1, r3
 800df38:	4805      	ldr	r0, [pc, #20]	; (800df50 <MX_ADC1_Init+0xd0>)
 800df3a:	f001 ff83 	bl	800fe44 <HAL_ADC_ConfigChannel>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800df44:	f000 fc48 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800df48:	bf00      	nop
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	20000864 	.word	0x20000864
 800df54:	40012000 	.word	0x40012000
 800df58:	0f000001 	.word	0x0f000001

0800df5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800df62:	463b      	mov	r3, r7
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	605a      	str	r2, [r3, #4]
 800df6a:	609a      	str	r2, [r3, #8]
 800df6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800df6e:	4b28      	ldr	r3, [pc, #160]	; (800e010 <MX_ADC2_Init+0xb4>)
 800df70:	4a28      	ldr	r2, [pc, #160]	; (800e014 <MX_ADC2_Init+0xb8>)
 800df72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800df74:	4b26      	ldr	r3, [pc, #152]	; (800e010 <MX_ADC2_Init+0xb4>)
 800df76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800df7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800df7c:	4b24      	ldr	r3, [pc, #144]	; (800e010 <MX_ADC2_Init+0xb4>)
 800df7e:	2200      	movs	r2, #0
 800df80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800df82:	4b23      	ldr	r3, [pc, #140]	; (800e010 <MX_ADC2_Init+0xb4>)
 800df84:	2201      	movs	r2, #1
 800df86:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800df88:	4b21      	ldr	r3, [pc, #132]	; (800e010 <MX_ADC2_Init+0xb4>)
 800df8a:	2201      	movs	r2, #1
 800df8c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800df8e:	4b20      	ldr	r3, [pc, #128]	; (800e010 <MX_ADC2_Init+0xb4>)
 800df90:	2200      	movs	r2, #0
 800df92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800df96:	4b1e      	ldr	r3, [pc, #120]	; (800e010 <MX_ADC2_Init+0xb4>)
 800df98:	2200      	movs	r2, #0
 800df9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800df9c:	4b1c      	ldr	r3, [pc, #112]	; (800e010 <MX_ADC2_Init+0xb4>)
 800df9e:	4a1e      	ldr	r2, [pc, #120]	; (800e018 <MX_ADC2_Init+0xbc>)
 800dfa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dfa2:	4b1b      	ldr	r3, [pc, #108]	; (800e010 <MX_ADC2_Init+0xb4>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800dfa8:	4b19      	ldr	r3, [pc, #100]	; (800e010 <MX_ADC2_Init+0xb4>)
 800dfaa:	2202      	movs	r2, #2
 800dfac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800dfae:	4b18      	ldr	r3, [pc, #96]	; (800e010 <MX_ADC2_Init+0xb4>)
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dfb6:	4b16      	ldr	r3, [pc, #88]	; (800e010 <MX_ADC2_Init+0xb4>)
 800dfb8:	2201      	movs	r2, #1
 800dfba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800dfbc:	4814      	ldr	r0, [pc, #80]	; (800e010 <MX_ADC2_Init+0xb4>)
 800dfbe:	f001 fda3 	bl	800fb08 <HAL_ADC_Init>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800dfc8:	f000 fc06 	bl	800e7d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800dfcc:	230b      	movs	r3, #11
 800dfce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800dfd8:	463b      	mov	r3, r7
 800dfda:	4619      	mov	r1, r3
 800dfdc:	480c      	ldr	r0, [pc, #48]	; (800e010 <MX_ADC2_Init+0xb4>)
 800dfde:	f001 ff31 	bl	800fe44 <HAL_ADC_ConfigChannel>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d001      	beq.n	800dfec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800dfe8:	f000 fbf6 	bl	800e7d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800dfec:	230f      	movs	r3, #15
 800dfee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800dff0:	2302      	movs	r3, #2
 800dff2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800dff4:	463b      	mov	r3, r7
 800dff6:	4619      	mov	r1, r3
 800dff8:	4805      	ldr	r0, [pc, #20]	; (800e010 <MX_ADC2_Init+0xb4>)
 800dffa:	f001 ff23 	bl	800fe44 <HAL_ADC_ConfigChannel>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800e004:	f000 fbe8 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800e008:	bf00      	nop
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	200008ac 	.word	0x200008ac
 800e014:	40012100 	.word	0x40012100
 800e018:	0f000001 	.word	0x0f000001

0800e01c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800e020:	4b17      	ldr	r3, [pc, #92]	; (800e080 <MX_SPI3_Init+0x64>)
 800e022:	4a18      	ldr	r2, [pc, #96]	; (800e084 <MX_SPI3_Init+0x68>)
 800e024:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800e026:	4b16      	ldr	r3, [pc, #88]	; (800e080 <MX_SPI3_Init+0x64>)
 800e028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e02c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800e02e:	4b14      	ldr	r3, [pc, #80]	; (800e080 <MX_SPI3_Init+0x64>)
 800e030:	2200      	movs	r2, #0
 800e032:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800e034:	4b12      	ldr	r3, [pc, #72]	; (800e080 <MX_SPI3_Init+0x64>)
 800e036:	2200      	movs	r2, #0
 800e038:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800e03a:	4b11      	ldr	r3, [pc, #68]	; (800e080 <MX_SPI3_Init+0x64>)
 800e03c:	2202      	movs	r2, #2
 800e03e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800e040:	4b0f      	ldr	r3, [pc, #60]	; (800e080 <MX_SPI3_Init+0x64>)
 800e042:	2201      	movs	r2, #1
 800e044:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800e046:	4b0e      	ldr	r3, [pc, #56]	; (800e080 <MX_SPI3_Init+0x64>)
 800e048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e04c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800e04e:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <MX_SPI3_Init+0x64>)
 800e050:	2228      	movs	r2, #40	; 0x28
 800e052:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e054:	4b0a      	ldr	r3, [pc, #40]	; (800e080 <MX_SPI3_Init+0x64>)
 800e056:	2200      	movs	r2, #0
 800e058:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e05a:	4b09      	ldr	r3, [pc, #36]	; (800e080 <MX_SPI3_Init+0x64>)
 800e05c:	2200      	movs	r2, #0
 800e05e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e060:	4b07      	ldr	r3, [pc, #28]	; (800e080 <MX_SPI3_Init+0x64>)
 800e062:	2200      	movs	r2, #0
 800e064:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800e066:	4b06      	ldr	r3, [pc, #24]	; (800e080 <MX_SPI3_Init+0x64>)
 800e068:	220a      	movs	r2, #10
 800e06a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e06c:	4804      	ldr	r0, [pc, #16]	; (800e080 <MX_SPI3_Init+0x64>)
 800e06e:	f003 fea9 	bl	8011dc4 <HAL_SPI_Init>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800e078:	f000 fbae 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e07c:	bf00      	nop
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	200009b4 	.word	0x200009b4
 800e084:	40003c00 	.word	0x40003c00

0800e088 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e08e:	f107 0308 	add.w	r3, r7, #8
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
 800e096:	605a      	str	r2, [r3, #4]
 800e098:	609a      	str	r2, [r3, #8]
 800e09a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e09c:	463b      	mov	r3, r7
 800e09e:	2200      	movs	r2, #0
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800e0a4:	4b1e      	ldr	r3, [pc, #120]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0a6:	4a1f      	ldr	r2, [pc, #124]	; (800e124 <MX_TIM1_Init+0x9c>)
 800e0a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800e0aa:	4b1d      	ldr	r3, [pc, #116]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0ac:	22a7      	movs	r2, #167	; 0xa7
 800e0ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e0b0:	4b1b      	ldr	r3, [pc, #108]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800e0b6:	4b1a      	ldr	r3, [pc, #104]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e0bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e0be:	4b18      	ldr	r3, [pc, #96]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800e0c4:	4b16      	ldr	r3, [pc, #88]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e0ca:	4b15      	ldr	r3, [pc, #84]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800e0d0:	4813      	ldr	r0, [pc, #76]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0d2:	f004 fbcb 	bl	801286c <HAL_TIM_Base_Init>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800e0dc:	f000 fb7c 	bl	800e7d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e0e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800e0e6:	f107 0308 	add.w	r3, r7, #8
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	480c      	ldr	r0, [pc, #48]	; (800e120 <MX_TIM1_Init+0x98>)
 800e0ee:	f005 f997 	bl	8013420 <HAL_TIM_ConfigClockSource>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800e0f8:	f000 fb6e 	bl	800e7d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e100:	2300      	movs	r3, #0
 800e102:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800e104:	463b      	mov	r3, r7
 800e106:	4619      	mov	r1, r3
 800e108:	4805      	ldr	r0, [pc, #20]	; (800e120 <MX_TIM1_Init+0x98>)
 800e10a:	f005 fe5b 	bl	8013dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d001      	beq.n	800e118 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800e114:	f000 fb60 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800e118:	bf00      	nop
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20000a0c 	.word	0x20000a0c
 800e124:	40010000 	.word	0x40010000

0800e128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08e      	sub	sp, #56	; 0x38
 800e12c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e12e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e132:	2200      	movs	r2, #0
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	605a      	str	r2, [r3, #4]
 800e138:	609a      	str	r2, [r3, #8]
 800e13a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e13c:	f107 0320 	add.w	r3, r7, #32
 800e140:	2200      	movs	r2, #0
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e146:	1d3b      	adds	r3, r7, #4
 800e148:	2200      	movs	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
 800e14c:	605a      	str	r2, [r3, #4]
 800e14e:	609a      	str	r2, [r3, #8]
 800e150:	60da      	str	r2, [r3, #12]
 800e152:	611a      	str	r2, [r3, #16]
 800e154:	615a      	str	r2, [r3, #20]
 800e156:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e158:	4b2d      	ldr	r3, [pc, #180]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e15a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e15e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e160:	4b2b      	ldr	r3, [pc, #172]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e162:	2200      	movs	r2, #0
 800e164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e166:	4b2a      	ldr	r3, [pc, #168]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e168:	2200      	movs	r2, #0
 800e16a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800e16c:	4b28      	ldr	r3, [pc, #160]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e16e:	f241 0267 	movw	r2, #4199	; 0x1067
 800e172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e174:	4b26      	ldr	r3, [pc, #152]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e176:	2200      	movs	r2, #0
 800e178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e17a:	4b25      	ldr	r3, [pc, #148]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e180:	4823      	ldr	r0, [pc, #140]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e182:	f004 fb73 	bl	801286c <HAL_TIM_Base_Init>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800e18c:	f000 fb24 	bl	800e7d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e194:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e19a:	4619      	mov	r1, r3
 800e19c:	481c      	ldr	r0, [pc, #112]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e19e:	f005 f93f 	bl	8013420 <HAL_TIM_ConfigClockSource>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800e1a8:	f000 fb16 	bl	800e7d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e1ac:	4818      	ldr	r0, [pc, #96]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e1ae:	f004 fd2b 	bl	8012c08 <HAL_TIM_PWM_Init>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d001      	beq.n	800e1bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800e1b8:	f000 fb0e 	bl	800e7d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e1c4:	f107 0320 	add.w	r3, r7, #32
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	4811      	ldr	r0, [pc, #68]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e1cc:	f005 fdfa 	bl	8013dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800e1d6:	f000 faff 	bl	800e7d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e1da:	2360      	movs	r3, #96	; 0x60
 800e1dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e1ea:	1d3b      	adds	r3, r7, #4
 800e1ec:	220c      	movs	r2, #12
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4807      	ldr	r0, [pc, #28]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e1f2:	f005 f84f 	bl	8013294 <HAL_TIM_PWM_ConfigChannel>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800e1fc:	f000 faec 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e200:	4803      	ldr	r0, [pc, #12]	; (800e210 <MX_TIM2_Init+0xe8>)
 800e202:	f000 fd45 	bl	800ec90 <HAL_TIM_MspPostInit>

}
 800e206:	bf00      	nop
 800e208:	3738      	adds	r7, #56	; 0x38
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	20000a4c 	.word	0x20000a4c

0800e214 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08c      	sub	sp, #48	; 0x30
 800e218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e21a:	f107 030c 	add.w	r3, r7, #12
 800e21e:	2224      	movs	r2, #36	; 0x24
 800e220:	2100      	movs	r1, #0
 800e222:	4618      	mov	r0, r3
 800e224:	f006 fdf8 	bl	8014e18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e228:	1d3b      	adds	r3, r7, #4
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e230:	4b20      	ldr	r3, [pc, #128]	; (800e2b4 <MX_TIM3_Init+0xa0>)
 800e232:	4a21      	ldr	r2, [pc, #132]	; (800e2b8 <MX_TIM3_Init+0xa4>)
 800e234:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e236:	4b1f      	ldr	r3, [pc, #124]	; (800e2b4 <MX_TIM3_Init+0xa0>)
 800e238:	2200      	movs	r2, #0
 800e23a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e23c:	4b1d      	ldr	r3, [pc, #116]	; (800e2b4 <MX_TIM3_Init+0xa0>)
 800e23e:	2200      	movs	r2, #0
 800e240:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800e242:	4b1c      	ldr	r3, [pc, #112]	; (800e2b4 <MX_TIM3_Init+0xa0>)
 800e244:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800e248:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e24a:	4b1a      	ldr	r3, [pc, #104]	; (800e2b4 <MX_TIM3_Init+0xa0>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e250:	4b18      	ldr	r3, [pc, #96]	; (800e2b4 <MX_TIM3_Init+0xa0>)
 800e252:	2200      	movs	r2, #0
 800e254:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e256:	2303      	movs	r3, #3
 800e258:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e25a:	2300      	movs	r3, #0
 800e25c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e25e:	2301      	movs	r3, #1
 800e260:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e262:	2300      	movs	r3, #0
 800e264:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e26a:	2300      	movs	r3, #0
 800e26c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e26e:	2301      	movs	r3, #1
 800e270:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e272:	2300      	movs	r3, #0
 800e274:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800e27a:	f107 030c 	add.w	r3, r7, #12
 800e27e:	4619      	mov	r1, r3
 800e280:	480c      	ldr	r0, [pc, #48]	; (800e2b4 <MX_TIM3_Init+0xa0>)
 800e282:	f004 fd8d 	bl	8012da0 <HAL_TIM_Encoder_Init>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d001      	beq.n	800e290 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800e28c:	f000 faa4 	bl	800e7d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e290:	2300      	movs	r3, #0
 800e292:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e294:	2300      	movs	r3, #0
 800e296:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e298:	1d3b      	adds	r3, r7, #4
 800e29a:	4619      	mov	r1, r3
 800e29c:	4805      	ldr	r0, [pc, #20]	; (800e2b4 <MX_TIM3_Init+0xa0>)
 800e29e:	f005 fd91 	bl	8013dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800e2a8:	f000 fa96 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800e2ac:	bf00      	nop
 800e2ae:	3730      	adds	r7, #48	; 0x30
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20000a8c 	.word	0x20000a8c
 800e2b8:	40000400 	.word	0x40000400

0800e2bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b08c      	sub	sp, #48	; 0x30
 800e2c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e2c2:	f107 030c 	add.w	r3, r7, #12
 800e2c6:	2224      	movs	r2, #36	; 0x24
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f006 fda4 	bl	8014e18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e2d0:	1d3b      	adds	r3, r7, #4
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]
 800e2d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e2d8:	4b20      	ldr	r3, [pc, #128]	; (800e35c <MX_TIM4_Init+0xa0>)
 800e2da:	4a21      	ldr	r2, [pc, #132]	; (800e360 <MX_TIM4_Init+0xa4>)
 800e2dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800e2de:	4b1f      	ldr	r3, [pc, #124]	; (800e35c <MX_TIM4_Init+0xa0>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e2e4:	4b1d      	ldr	r3, [pc, #116]	; (800e35c <MX_TIM4_Init+0xa0>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800e2ea:	4b1c      	ldr	r3, [pc, #112]	; (800e35c <MX_TIM4_Init+0xa0>)
 800e2ec:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800e2f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e2f2:	4b1a      	ldr	r3, [pc, #104]	; (800e35c <MX_TIM4_Init+0xa0>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e2f8:	4b18      	ldr	r3, [pc, #96]	; (800e35c <MX_TIM4_Init+0xa0>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e2fe:	2303      	movs	r3, #3
 800e300:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e302:	2300      	movs	r3, #0
 800e304:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e306:	2301      	movs	r3, #1
 800e308:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e30a:	2300      	movs	r3, #0
 800e30c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e312:	2300      	movs	r3, #0
 800e314:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e316:	2301      	movs	r3, #1
 800e318:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e31a:	2300      	movs	r3, #0
 800e31c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800e322:	f107 030c 	add.w	r3, r7, #12
 800e326:	4619      	mov	r1, r3
 800e328:	480c      	ldr	r0, [pc, #48]	; (800e35c <MX_TIM4_Init+0xa0>)
 800e32a:	f004 fd39 	bl	8012da0 <HAL_TIM_Encoder_Init>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800e334:	f000 fa50 	bl	800e7d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e338:	2300      	movs	r3, #0
 800e33a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e33c:	2300      	movs	r3, #0
 800e33e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e340:	1d3b      	adds	r3, r7, #4
 800e342:	4619      	mov	r1, r3
 800e344:	4805      	ldr	r0, [pc, #20]	; (800e35c <MX_TIM4_Init+0xa0>)
 800e346:	f005 fd3d 	bl	8013dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800e350:	f000 fa42 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800e354:	bf00      	nop
 800e356:	3730      	adds	r7, #48	; 0x30
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20000acc 	.word	0x20000acc
 800e360:	40000800 	.word	0x40000800

0800e364 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08e      	sub	sp, #56	; 0x38
 800e368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e36a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e36e:	2200      	movs	r2, #0
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	605a      	str	r2, [r3, #4]
 800e374:	609a      	str	r2, [r3, #8]
 800e376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e378:	f107 0320 	add.w	r3, r7, #32
 800e37c:	2200      	movs	r2, #0
 800e37e:	601a      	str	r2, [r3, #0]
 800e380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e382:	1d3b      	adds	r3, r7, #4
 800e384:	2200      	movs	r2, #0
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	605a      	str	r2, [r3, #4]
 800e38a:	609a      	str	r2, [r3, #8]
 800e38c:	60da      	str	r2, [r3, #12]
 800e38e:	611a      	str	r2, [r3, #16]
 800e390:	615a      	str	r2, [r3, #20]
 800e392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e394:	4b2c      	ldr	r3, [pc, #176]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e396:	4a2d      	ldr	r2, [pc, #180]	; (800e44c <MX_TIM5_Init+0xe8>)
 800e398:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800e39a:	4b2b      	ldr	r3, [pc, #172]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3a0:	4b29      	ldr	r3, [pc, #164]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800e3a6:	4b28      	ldr	r3, [pc, #160]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e3a8:	f241 0267 	movw	r2, #4199	; 0x1067
 800e3ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e3ae:	4b26      	ldr	r3, [pc, #152]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e3b4:	4b24      	ldr	r3, [pc, #144]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e3ba:	4823      	ldr	r0, [pc, #140]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e3bc:	f004 fa56 	bl	801286c <HAL_TIM_Base_Init>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800e3c6:	f000 fa07 	bl	800e7d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e3ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e3d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	481c      	ldr	r0, [pc, #112]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e3d8:	f005 f822 	bl	8013420 <HAL_TIM_ConfigClockSource>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d001      	beq.n	800e3e6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800e3e2:	f000 f9f9 	bl	800e7d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800e3e6:	4818      	ldr	r0, [pc, #96]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e3e8:	f004 fc0e 	bl	8012c08 <HAL_TIM_PWM_Init>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800e3f2:	f000 f9f1 	bl	800e7d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e3fe:	f107 0320 	add.w	r3, r7, #32
 800e402:	4619      	mov	r1, r3
 800e404:	4810      	ldr	r0, [pc, #64]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e406:	f005 fcdd 	bl	8013dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800e410:	f000 f9e2 	bl	800e7d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e414:	2360      	movs	r3, #96	; 0x60
 800e416:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e41c:	2300      	movs	r3, #0
 800e41e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e420:	2300      	movs	r3, #0
 800e422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e424:	1d3b      	adds	r3, r7, #4
 800e426:	2204      	movs	r2, #4
 800e428:	4619      	mov	r1, r3
 800e42a:	4807      	ldr	r0, [pc, #28]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e42c:	f004 ff32 	bl	8013294 <HAL_TIM_PWM_ConfigChannel>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800e436:	f000 f9cf 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e43a:	4803      	ldr	r0, [pc, #12]	; (800e448 <MX_TIM5_Init+0xe4>)
 800e43c:	f000 fc28 	bl	800ec90 <HAL_TIM_MspPostInit>

}
 800e440:	bf00      	nop
 800e442:	3738      	adds	r7, #56	; 0x38
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	20000b0c 	.word	0x20000b0c
 800e44c:	40000c00 	.word	0x40000c00

0800e450 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b096      	sub	sp, #88	; 0x58
 800e454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e45a:	2200      	movs	r2, #0
 800e45c:	601a      	str	r2, [r3, #0]
 800e45e:	605a      	str	r2, [r3, #4]
 800e460:	609a      	str	r2, [r3, #8]
 800e462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e468:	2200      	movs	r2, #0
 800e46a:	601a      	str	r2, [r3, #0]
 800e46c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e46e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	605a      	str	r2, [r3, #4]
 800e478:	609a      	str	r2, [r3, #8]
 800e47a:	60da      	str	r2, [r3, #12]
 800e47c:	611a      	str	r2, [r3, #16]
 800e47e:	615a      	str	r2, [r3, #20]
 800e480:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e482:	1d3b      	adds	r3, r7, #4
 800e484:	2220      	movs	r2, #32
 800e486:	2100      	movs	r1, #0
 800e488:	4618      	mov	r0, r3
 800e48a:	f006 fcc5 	bl	8014e18 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800e48e:	4b42      	ldr	r3, [pc, #264]	; (800e598 <MX_TIM8_Init+0x148>)
 800e490:	4a42      	ldr	r2, [pc, #264]	; (800e59c <MX_TIM8_Init+0x14c>)
 800e492:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800e494:	4b40      	ldr	r3, [pc, #256]	; (800e598 <MX_TIM8_Init+0x148>)
 800e496:	22a7      	movs	r2, #167	; 0xa7
 800e498:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e49a:	4b3f      	ldr	r3, [pc, #252]	; (800e598 <MX_TIM8_Init+0x148>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800e4a0:	4b3d      	ldr	r3, [pc, #244]	; (800e598 <MX_TIM8_Init+0x148>)
 800e4a2:	2231      	movs	r2, #49	; 0x31
 800e4a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e4a6:	4b3c      	ldr	r3, [pc, #240]	; (800e598 <MX_TIM8_Init+0x148>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800e4ac:	4b3a      	ldr	r3, [pc, #232]	; (800e598 <MX_TIM8_Init+0x148>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e4b2:	4b39      	ldr	r3, [pc, #228]	; (800e598 <MX_TIM8_Init+0x148>)
 800e4b4:	2280      	movs	r2, #128	; 0x80
 800e4b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800e4b8:	4837      	ldr	r0, [pc, #220]	; (800e598 <MX_TIM8_Init+0x148>)
 800e4ba:	f004 f9d7 	bl	801286c <HAL_TIM_Base_Init>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800e4c4:	f000 f988 	bl	800e7d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e4c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800e4ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	4830      	ldr	r0, [pc, #192]	; (800e598 <MX_TIM8_Init+0x148>)
 800e4d6:	f004 ffa3 	bl	8013420 <HAL_TIM_ConfigClockSource>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d001      	beq.n	800e4e4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800e4e0:	f000 f97a 	bl	800e7d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800e4e4:	482c      	ldr	r0, [pc, #176]	; (800e598 <MX_TIM8_Init+0x148>)
 800e4e6:	f004 fa3b 	bl	8012960 <HAL_TIM_OC_Init>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800e4f0:	f000 f972 	bl	800e7d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800e4fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e500:	4619      	mov	r1, r3
 800e502:	4825      	ldr	r0, [pc, #148]	; (800e598 <MX_TIM8_Init+0x148>)
 800e504:	f005 fc5e 	bl	8013dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800e50e:	f000 f963 	bl	800e7d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800e512:	2330      	movs	r3, #48	; 0x30
 800e514:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800e516:	2318      	movs	r3, #24
 800e518:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e51a:	2300      	movs	r3, #0
 800e51c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e51e:	2300      	movs	r3, #0
 800e520:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e522:	2300      	movs	r3, #0
 800e524:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e526:	2300      	movs	r3, #0
 800e528:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e52a:	2300      	movs	r3, #0
 800e52c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e52e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e532:	2200      	movs	r2, #0
 800e534:	4619      	mov	r1, r3
 800e536:	4818      	ldr	r0, [pc, #96]	; (800e598 <MX_TIM8_Init+0x148>)
 800e538:	f004 fe4c 	bl	80131d4 <HAL_TIM_OC_ConfigChannel>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800e542:	f000 f949 	bl	800e7d8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800e546:	4b14      	ldr	r3, [pc, #80]	; (800e598 <MX_TIM8_Init+0x148>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	699a      	ldr	r2, [r3, #24]
 800e54c:	4b12      	ldr	r3, [pc, #72]	; (800e598 <MX_TIM8_Init+0x148>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f042 0208 	orr.w	r2, r2, #8
 800e554:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e556:	2300      	movs	r3, #0
 800e558:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e55a:	2300      	movs	r3, #0
 800e55c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e55e:	2300      	movs	r3, #0
 800e560:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e566:	2300      	movs	r3, #0
 800e568:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e56a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e56e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e570:	2300      	movs	r3, #0
 800e572:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800e574:	1d3b      	adds	r3, r7, #4
 800e576:	4619      	mov	r1, r3
 800e578:	4807      	ldr	r0, [pc, #28]	; (800e598 <MX_TIM8_Init+0x148>)
 800e57a:	f005 fc9f 	bl	8013ebc <HAL_TIMEx_ConfigBreakDeadTime>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800e584:	f000 f928 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800e588:	4803      	ldr	r0, [pc, #12]	; (800e598 <MX_TIM8_Init+0x148>)
 800e58a:	f000 fb81 	bl	800ec90 <HAL_TIM_MspPostInit>

}
 800e58e:	bf00      	nop
 800e590:	3758      	adds	r7, #88	; 0x58
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	20000b4c 	.word	0x20000b4c
 800e59c:	40010400 	.word	0x40010400

0800e5a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e5a4:	4b11      	ldr	r3, [pc, #68]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5a6:	4a12      	ldr	r2, [pc, #72]	; (800e5f0 <MX_USART1_UART_Init+0x50>)
 800e5a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e5aa:	4b10      	ldr	r3, [pc, #64]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e5b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e5b2:	4b0e      	ldr	r3, [pc, #56]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e5b8:	4b0c      	ldr	r3, [pc, #48]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e5be:	4b0b      	ldr	r3, [pc, #44]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e5c4:	4b09      	ldr	r3, [pc, #36]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5c6:	220c      	movs	r2, #12
 800e5c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5ca:	4b08      	ldr	r3, [pc, #32]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5d0:	4b06      	ldr	r3, [pc, #24]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e5d6:	4805      	ldr	r0, [pc, #20]	; (800e5ec <MX_USART1_UART_Init+0x4c>)
 800e5d8:	f005 fcfb 	bl	8013fd2 <HAL_UART_Init>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e5e2:	f000 f8f9 	bl	800e7d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e5e6:	bf00      	nop
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20000b8c 	.word	0x20000b8c
 800e5f0:	40011000 	.word	0x40011000

0800e5f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	607b      	str	r3, [r7, #4]
 800e5fe:	4b10      	ldr	r3, [pc, #64]	; (800e640 <MX_DMA_Init+0x4c>)
 800e600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e602:	4a0f      	ldr	r2, [pc, #60]	; (800e640 <MX_DMA_Init+0x4c>)
 800e604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e608:	6313      	str	r3, [r2, #48]	; 0x30
 800e60a:	4b0d      	ldr	r3, [pc, #52]	; (800e640 <MX_DMA_Init+0x4c>)
 800e60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e60e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e612:	607b      	str	r3, [r7, #4]
 800e614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800e616:	2200      	movs	r2, #0
 800e618:	2100      	movs	r1, #0
 800e61a:	2038      	movs	r0, #56	; 0x38
 800e61c:	f001 ff8d 	bl	801053a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e620:	2038      	movs	r0, #56	; 0x38
 800e622:	f001 ffa6 	bl	8010572 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800e626:	2200      	movs	r2, #0
 800e628:	2100      	movs	r1, #0
 800e62a:	203a      	movs	r0, #58	; 0x3a
 800e62c:	f001 ff85 	bl	801053a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800e630:	203a      	movs	r0, #58	; 0x3a
 800e632:	f001 ff9e 	bl	8010572 <HAL_NVIC_EnableIRQ>

}
 800e636:	bf00      	nop
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	40023800 	.word	0x40023800

0800e644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b08a      	sub	sp, #40	; 0x28
 800e648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e64a:	f107 0314 	add.w	r3, r7, #20
 800e64e:	2200      	movs	r2, #0
 800e650:	601a      	str	r2, [r3, #0]
 800e652:	605a      	str	r2, [r3, #4]
 800e654:	609a      	str	r2, [r3, #8]
 800e656:	60da      	str	r2, [r3, #12]
 800e658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e65a:	2300      	movs	r3, #0
 800e65c:	613b      	str	r3, [r7, #16]
 800e65e:	4b59      	ldr	r3, [pc, #356]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e662:	4a58      	ldr	r2, [pc, #352]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e668:	6313      	str	r3, [r2, #48]	; 0x30
 800e66a:	4b56      	ldr	r3, [pc, #344]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e672:	613b      	str	r3, [r7, #16]
 800e674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e676:	2300      	movs	r3, #0
 800e678:	60fb      	str	r3, [r7, #12]
 800e67a:	4b52      	ldr	r3, [pc, #328]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67e:	4a51      	ldr	r2, [pc, #324]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e680:	f043 0304 	orr.w	r3, r3, #4
 800e684:	6313      	str	r3, [r2, #48]	; 0x30
 800e686:	4b4f      	ldr	r3, [pc, #316]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68a:	f003 0304 	and.w	r3, r3, #4
 800e68e:	60fb      	str	r3, [r7, #12]
 800e690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e692:	2300      	movs	r3, #0
 800e694:	60bb      	str	r3, [r7, #8]
 800e696:	4b4b      	ldr	r3, [pc, #300]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69a:	4a4a      	ldr	r2, [pc, #296]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e69c:	f043 0301 	orr.w	r3, r3, #1
 800e6a0:	6313      	str	r3, [r2, #48]	; 0x30
 800e6a2:	4b48      	ldr	r3, [pc, #288]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a6:	f003 0301 	and.w	r3, r3, #1
 800e6aa:	60bb      	str	r3, [r7, #8]
 800e6ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	607b      	str	r3, [r7, #4]
 800e6b2:	4b44      	ldr	r3, [pc, #272]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b6:	4a43      	ldr	r2, [pc, #268]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e6b8:	f043 0302 	orr.w	r3, r3, #2
 800e6bc:	6313      	str	r3, [r2, #48]	; 0x30
 800e6be:	4b41      	ldr	r3, [pc, #260]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c2:	f003 0302 	and.w	r3, r3, #2
 800e6c6:	607b      	str	r3, [r7, #4]
 800e6c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	603b      	str	r3, [r7, #0]
 800e6ce:	4b3d      	ldr	r3, [pc, #244]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d2:	4a3c      	ldr	r2, [pc, #240]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e6d4:	f043 0308 	orr.w	r3, r3, #8
 800e6d8:	6313      	str	r3, [r2, #48]	; 0x30
 800e6da:	4b3a      	ldr	r3, [pc, #232]	; (800e7c4 <MX_GPIO_Init+0x180>)
 800e6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6de:	f003 0308 	and.w	r3, r3, #8
 800e6e2:	603b      	str	r3, [r7, #0]
 800e6e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f44f 7141 	mov.w	r1, #772	; 0x304
 800e6ec:	4836      	ldr	r0, [pc, #216]	; (800e7c8 <MX_GPIO_Init+0x184>)
 800e6ee:	f002 fec1 	bl	8011474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2105      	movs	r1, #5
 800e6f6:	4835      	ldr	r0, [pc, #212]	; (800e7cc <MX_GPIO_Init+0x188>)
 800e6f8:	f002 febc 	bl	8011474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	2104      	movs	r1, #4
 800e700:	4833      	ldr	r0, [pc, #204]	; (800e7d0 <MX_GPIO_Init+0x18c>)
 800e702:	f002 feb7 	bl	8011474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e706:	2200      	movs	r2, #0
 800e708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e70c:	4831      	ldr	r0, [pc, #196]	; (800e7d4 <MX_GPIO_Init+0x190>)
 800e70e:	f002 feb1 	bl	8011474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800e712:	f44f 7341 	mov.w	r3, #772	; 0x304
 800e716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e718:	2301      	movs	r3, #1
 800e71a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e71c:	2300      	movs	r3, #0
 800e71e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e720:	2300      	movs	r3, #0
 800e722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e724:	f107 0314 	add.w	r3, r7, #20
 800e728:	4619      	mov	r1, r3
 800e72a:	4827      	ldr	r0, [pc, #156]	; (800e7c8 <MX_GPIO_Init+0x184>)
 800e72c:	f002 fd06 	bl	801113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800e730:	2305      	movs	r3, #5
 800e732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e734:	2301      	movs	r3, #1
 800e736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e738:	2300      	movs	r3, #0
 800e73a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e73c:	2300      	movs	r3, #0
 800e73e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e740:	f107 0314 	add.w	r3, r7, #20
 800e744:	4619      	mov	r1, r3
 800e746:	4821      	ldr	r0, [pc, #132]	; (800e7cc <MX_GPIO_Init+0x188>)
 800e748:	f002 fcf8 	bl	801113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800e74c:	f241 0304 	movw	r3, #4100	; 0x1004
 800e750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e752:	2300      	movs	r3, #0
 800e754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e756:	2300      	movs	r3, #0
 800e758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e75a:	f107 0314 	add.w	r3, r7, #20
 800e75e:	4619      	mov	r1, r3
 800e760:	481c      	ldr	r0, [pc, #112]	; (800e7d4 <MX_GPIO_Init+0x190>)
 800e762:	f002 fceb 	bl	801113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800e766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e76a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e76c:	2300      	movs	r3, #0
 800e76e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e770:	2300      	movs	r3, #0
 800e772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e774:	f107 0314 	add.w	r3, r7, #20
 800e778:	4619      	mov	r1, r3
 800e77a:	4814      	ldr	r0, [pc, #80]	; (800e7cc <MX_GPIO_Init+0x188>)
 800e77c:	f002 fcde 	bl	801113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e780:	2304      	movs	r3, #4
 800e782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e784:	2301      	movs	r3, #1
 800e786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e788:	2300      	movs	r3, #0
 800e78a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e78c:	2300      	movs	r3, #0
 800e78e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e790:	f107 0314 	add.w	r3, r7, #20
 800e794:	4619      	mov	r1, r3
 800e796:	480e      	ldr	r0, [pc, #56]	; (800e7d0 <MX_GPIO_Init+0x18c>)
 800e798:	f002 fcd0 	bl	801113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e79c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e7ae:	f107 0314 	add.w	r3, r7, #20
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4807      	ldr	r0, [pc, #28]	; (800e7d4 <MX_GPIO_Init+0x190>)
 800e7b6:	f002 fcc1 	bl	801113c <HAL_GPIO_Init>

}
 800e7ba:	bf00      	nop
 800e7bc:	3728      	adds	r7, #40	; 0x28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	40023800 	.word	0x40023800
 800e7c8:	40020800 	.word	0x40020800
 800e7cc:	40020000 	.word	0x40020000
 800e7d0:	40020c00 	.word	0x40020c00
 800e7d4:	40020400 	.word	0x40020400

0800e7d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e7dc:	b672      	cpsid	i
}
 800e7de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e7e0:	e7fe      	b.n	800e7e0 <Error_Handler+0x8>
	...

0800e7e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	607b      	str	r3, [r7, #4]
 800e7ee:	4b10      	ldr	r3, [pc, #64]	; (800e830 <HAL_MspInit+0x4c>)
 800e7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f2:	4a0f      	ldr	r2, [pc, #60]	; (800e830 <HAL_MspInit+0x4c>)
 800e7f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7f8:	6453      	str	r3, [r2, #68]	; 0x44
 800e7fa:	4b0d      	ldr	r3, [pc, #52]	; (800e830 <HAL_MspInit+0x4c>)
 800e7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e802:	607b      	str	r3, [r7, #4]
 800e804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e806:	2300      	movs	r3, #0
 800e808:	603b      	str	r3, [r7, #0]
 800e80a:	4b09      	ldr	r3, [pc, #36]	; (800e830 <HAL_MspInit+0x4c>)
 800e80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e80e:	4a08      	ldr	r2, [pc, #32]	; (800e830 <HAL_MspInit+0x4c>)
 800e810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e814:	6413      	str	r3, [r2, #64]	; 0x40
 800e816:	4b06      	ldr	r3, [pc, #24]	; (800e830 <HAL_MspInit+0x4c>)
 800e818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e81e:	603b      	str	r3, [r7, #0]
 800e820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e822:	bf00      	nop
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	40023800 	.word	0x40023800

0800e834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b08c      	sub	sp, #48	; 0x30
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e83c:	f107 031c 	add.w	r3, r7, #28
 800e840:	2200      	movs	r2, #0
 800e842:	601a      	str	r2, [r3, #0]
 800e844:	605a      	str	r2, [r3, #4]
 800e846:	609a      	str	r2, [r3, #8]
 800e848:	60da      	str	r2, [r3, #12]
 800e84a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a6b      	ldr	r2, [pc, #428]	; (800ea00 <HAL_ADC_MspInit+0x1cc>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d172      	bne.n	800e93c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e856:	2300      	movs	r3, #0
 800e858:	61bb      	str	r3, [r7, #24]
 800e85a:	4b6a      	ldr	r3, [pc, #424]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e85e:	4a69      	ldr	r2, [pc, #420]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e864:	6453      	str	r3, [r2, #68]	; 0x44
 800e866:	4b67      	ldr	r3, [pc, #412]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e86e:	61bb      	str	r3, [r7, #24]
 800e870:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e872:	2300      	movs	r3, #0
 800e874:	617b      	str	r3, [r7, #20]
 800e876:	4b63      	ldr	r3, [pc, #396]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e87a:	4a62      	ldr	r2, [pc, #392]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e87c:	f043 0304 	orr.w	r3, r3, #4
 800e880:	6313      	str	r3, [r2, #48]	; 0x30
 800e882:	4b60      	ldr	r3, [pc, #384]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e886:	f003 0304 	and.w	r3, r3, #4
 800e88a:	617b      	str	r3, [r7, #20]
 800e88c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e88e:	2300      	movs	r3, #0
 800e890:	613b      	str	r3, [r7, #16]
 800e892:	4b5c      	ldr	r3, [pc, #368]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e896:	4a5b      	ldr	r2, [pc, #364]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e898:	f043 0302 	orr.w	r3, r3, #2
 800e89c:	6313      	str	r3, [r2, #48]	; 0x30
 800e89e:	4b59      	ldr	r3, [pc, #356]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a2:	f003 0302 	and.w	r3, r3, #2
 800e8a6:	613b      	str	r3, [r7, #16]
 800e8a8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800e8aa:	2311      	movs	r3, #17
 800e8ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e8b6:	f107 031c 	add.w	r3, r7, #28
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4852      	ldr	r0, [pc, #328]	; (800ea08 <HAL_ADC_MspInit+0x1d4>)
 800e8be:	f002 fc3d 	bl	801113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e8ce:	f107 031c 	add.w	r3, r7, #28
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	484d      	ldr	r0, [pc, #308]	; (800ea0c <HAL_ADC_MspInit+0x1d8>)
 800e8d6:	f002 fc31 	bl	801113c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800e8da:	4b4d      	ldr	r3, [pc, #308]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e8dc:	4a4d      	ldr	r2, [pc, #308]	; (800ea14 <HAL_ADC_MspInit+0x1e0>)
 800e8de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e8e0:	4b4b      	ldr	r3, [pc, #300]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e8e6:	4b4a      	ldr	r3, [pc, #296]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e8ec:	4b48      	ldr	r3, [pc, #288]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e8f2:	4b47      	ldr	r3, [pc, #284]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e8f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e8f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e8fa:	4b45      	ldr	r3, [pc, #276]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e8fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e900:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e902:	4b43      	ldr	r3, [pc, #268]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e904:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e908:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e90a:	4b41      	ldr	r3, [pc, #260]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e90c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e910:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e912:	4b3f      	ldr	r3, [pc, #252]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e914:	2200      	movs	r2, #0
 800e916:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e918:	4b3d      	ldr	r3, [pc, #244]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e91e:	483c      	ldr	r0, [pc, #240]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e920:	f001 fe42 	bl	80105a8 <HAL_DMA_Init>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800e92a:	f7ff ff55 	bl	800e7d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a37      	ldr	r2, [pc, #220]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e932:	639a      	str	r2, [r3, #56]	; 0x38
 800e934:	4a36      	ldr	r2, [pc, #216]	; (800ea10 <HAL_ADC_MspInit+0x1dc>)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800e93a:	e05d      	b.n	800e9f8 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a35      	ldr	r2, [pc, #212]	; (800ea18 <HAL_ADC_MspInit+0x1e4>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d158      	bne.n	800e9f8 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e946:	2300      	movs	r3, #0
 800e948:	60fb      	str	r3, [r7, #12]
 800e94a:	4b2e      	ldr	r3, [pc, #184]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e94e:	4a2d      	ldr	r2, [pc, #180]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e954:	6453      	str	r3, [r2, #68]	; 0x44
 800e956:	4b2b      	ldr	r3, [pc, #172]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e95a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e95e:	60fb      	str	r3, [r7, #12]
 800e960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e962:	2300      	movs	r3, #0
 800e964:	60bb      	str	r3, [r7, #8]
 800e966:	4b27      	ldr	r3, [pc, #156]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e96a:	4a26      	ldr	r2, [pc, #152]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e96c:	f043 0304 	orr.w	r3, r3, #4
 800e970:	6313      	str	r3, [r2, #48]	; 0x30
 800e972:	4b24      	ldr	r3, [pc, #144]	; (800ea04 <HAL_ADC_MspInit+0x1d0>)
 800e974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e976:	f003 0304 	and.w	r3, r3, #4
 800e97a:	60bb      	str	r3, [r7, #8]
 800e97c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800e97e:	2322      	movs	r3, #34	; 0x22
 800e980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e982:	2303      	movs	r3, #3
 800e984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e986:	2300      	movs	r3, #0
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e98a:	f107 031c 	add.w	r3, r7, #28
 800e98e:	4619      	mov	r1, r3
 800e990:	481d      	ldr	r0, [pc, #116]	; (800ea08 <HAL_ADC_MspInit+0x1d4>)
 800e992:	f002 fbd3 	bl	801113c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e996:	4b21      	ldr	r3, [pc, #132]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e998:	4a21      	ldr	r2, [pc, #132]	; (800ea20 <HAL_ADC_MspInit+0x1ec>)
 800e99a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e99c:	4b1f      	ldr	r3, [pc, #124]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e99e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e9a2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e9a4:	4b1d      	ldr	r3, [pc, #116]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e9aa:	4b1c      	ldr	r3, [pc, #112]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9b6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e9b8:	4b18      	ldr	r3, [pc, #96]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e9be:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e9c0:	4b16      	ldr	r3, [pc, #88]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e9c6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e9c8:	4b14      	ldr	r3, [pc, #80]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e9ce:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800e9d0:	4b12      	ldr	r3, [pc, #72]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e9d6:	4b11      	ldr	r3, [pc, #68]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e9dc:	480f      	ldr	r0, [pc, #60]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9de:	f001 fde3 	bl	80105a8 <HAL_DMA_Init>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800e9e8:	f7ff fef6 	bl	800e7d8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a0b      	ldr	r2, [pc, #44]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9f0:	639a      	str	r2, [r3, #56]	; 0x38
 800e9f2:	4a0a      	ldr	r2, [pc, #40]	; (800ea1c <HAL_ADC_MspInit+0x1e8>)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e9f8:	bf00      	nop
 800e9fa:	3730      	adds	r7, #48	; 0x30
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	40012000 	.word	0x40012000
 800ea04:	40023800 	.word	0x40023800
 800ea08:	40020800 	.word	0x40020800
 800ea0c:	40020400 	.word	0x40020400
 800ea10:	200008f4 	.word	0x200008f4
 800ea14:	40026410 	.word	0x40026410
 800ea18:	40012100 	.word	0x40012100
 800ea1c:	20000954 	.word	0x20000954
 800ea20:	40026440 	.word	0x40026440

0800ea24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b08a      	sub	sp, #40	; 0x28
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea2c:	f107 0314 	add.w	r3, r7, #20
 800ea30:	2200      	movs	r2, #0
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	605a      	str	r2, [r3, #4]
 800ea36:	609a      	str	r2, [r3, #8]
 800ea38:	60da      	str	r2, [r3, #12]
 800ea3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a19      	ldr	r2, [pc, #100]	; (800eaa8 <HAL_SPI_MspInit+0x84>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d12c      	bne.n	800eaa0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800ea46:	2300      	movs	r3, #0
 800ea48:	613b      	str	r3, [r7, #16]
 800ea4a:	4b18      	ldr	r3, [pc, #96]	; (800eaac <HAL_SPI_MspInit+0x88>)
 800ea4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea4e:	4a17      	ldr	r2, [pc, #92]	; (800eaac <HAL_SPI_MspInit+0x88>)
 800ea50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea54:	6413      	str	r3, [r2, #64]	; 0x40
 800ea56:	4b15      	ldr	r3, [pc, #84]	; (800eaac <HAL_SPI_MspInit+0x88>)
 800ea58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea5e:	613b      	str	r3, [r7, #16]
 800ea60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ea62:	2300      	movs	r3, #0
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	4b11      	ldr	r3, [pc, #68]	; (800eaac <HAL_SPI_MspInit+0x88>)
 800ea68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea6a:	4a10      	ldr	r2, [pc, #64]	; (800eaac <HAL_SPI_MspInit+0x88>)
 800ea6c:	f043 0304 	orr.w	r3, r3, #4
 800ea70:	6313      	str	r3, [r2, #48]	; 0x30
 800ea72:	4b0e      	ldr	r3, [pc, #56]	; (800eaac <HAL_SPI_MspInit+0x88>)
 800ea74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea76:	f003 0304 	and.w	r3, r3, #4
 800ea7a:	60fb      	str	r3, [r7, #12]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800ea7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ea82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea84:	2302      	movs	r3, #2
 800ea86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea8c:	2303      	movs	r3, #3
 800ea8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ea90:	2306      	movs	r3, #6
 800ea92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea94:	f107 0314 	add.w	r3, r7, #20
 800ea98:	4619      	mov	r1, r3
 800ea9a:	4805      	ldr	r0, [pc, #20]	; (800eab0 <HAL_SPI_MspInit+0x8c>)
 800ea9c:	f002 fb4e 	bl	801113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800eaa0:	bf00      	nop
 800eaa2:	3728      	adds	r7, #40	; 0x28
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	40003c00 	.word	0x40003c00
 800eaac:	40023800 	.word	0x40023800
 800eab0:	40020800 	.word	0x40020800

0800eab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b086      	sub	sp, #24
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a30      	ldr	r2, [pc, #192]	; (800eb84 <HAL_TIM_Base_MspInit+0xd0>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d116      	bne.n	800eaf4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800eac6:	2300      	movs	r3, #0
 800eac8:	617b      	str	r3, [r7, #20]
 800eaca:	4b2f      	ldr	r3, [pc, #188]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eace:	4a2e      	ldr	r2, [pc, #184]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800ead0:	f043 0301 	orr.w	r3, r3, #1
 800ead4:	6453      	str	r3, [r2, #68]	; 0x44
 800ead6:	4b2c      	ldr	r3, [pc, #176]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800ead8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eada:	f003 0301 	and.w	r3, r3, #1
 800eade:	617b      	str	r3, [r7, #20]
 800eae0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800eae2:	2200      	movs	r2, #0
 800eae4:	2100      	movs	r1, #0
 800eae6:	2019      	movs	r0, #25
 800eae8:	f001 fd27 	bl	801053a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800eaec:	2019      	movs	r0, #25
 800eaee:	f001 fd40 	bl	8010572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800eaf2:	e042      	b.n	800eb7a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eafc:	d10e      	bne.n	800eb1c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800eafe:	2300      	movs	r3, #0
 800eb00:	613b      	str	r3, [r7, #16]
 800eb02:	4b21      	ldr	r3, [pc, #132]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb06:	4a20      	ldr	r2, [pc, #128]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb08:	f043 0301 	orr.w	r3, r3, #1
 800eb0c:	6413      	str	r3, [r2, #64]	; 0x40
 800eb0e:	4b1e      	ldr	r3, [pc, #120]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb12:	f003 0301 	and.w	r3, r3, #1
 800eb16:	613b      	str	r3, [r7, #16]
 800eb18:	693b      	ldr	r3, [r7, #16]
}
 800eb1a:	e02e      	b.n	800eb7a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a1a      	ldr	r2, [pc, #104]	; (800eb8c <HAL_TIM_Base_MspInit+0xd8>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d10e      	bne.n	800eb44 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800eb26:	2300      	movs	r3, #0
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	4b17      	ldr	r3, [pc, #92]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2e:	4a16      	ldr	r2, [pc, #88]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb30:	f043 0308 	orr.w	r3, r3, #8
 800eb34:	6413      	str	r3, [r2, #64]	; 0x40
 800eb36:	4b14      	ldr	r3, [pc, #80]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb3a:	f003 0308 	and.w	r3, r3, #8
 800eb3e:	60fb      	str	r3, [r7, #12]
 800eb40:	68fb      	ldr	r3, [r7, #12]
}
 800eb42:	e01a      	b.n	800eb7a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a11      	ldr	r2, [pc, #68]	; (800eb90 <HAL_TIM_Base_MspInit+0xdc>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d115      	bne.n	800eb7a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800eb4e:	2300      	movs	r3, #0
 800eb50:	60bb      	str	r3, [r7, #8]
 800eb52:	4b0d      	ldr	r3, [pc, #52]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb56:	4a0c      	ldr	r2, [pc, #48]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb58:	f043 0302 	orr.w	r3, r3, #2
 800eb5c:	6453      	str	r3, [r2, #68]	; 0x44
 800eb5e:	4b0a      	ldr	r3, [pc, #40]	; (800eb88 <HAL_TIM_Base_MspInit+0xd4>)
 800eb60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb62:	f003 0302 	and.w	r3, r3, #2
 800eb66:	60bb      	str	r3, [r7, #8]
 800eb68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	202c      	movs	r0, #44	; 0x2c
 800eb70:	f001 fce3 	bl	801053a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800eb74:	202c      	movs	r0, #44	; 0x2c
 800eb76:	f001 fcfc 	bl	8010572 <HAL_NVIC_EnableIRQ>
}
 800eb7a:	bf00      	nop
 800eb7c:	3718      	adds	r7, #24
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	40010000 	.word	0x40010000
 800eb88:	40023800 	.word	0x40023800
 800eb8c:	40000c00 	.word	0x40000c00
 800eb90:	40010400 	.word	0x40010400

0800eb94 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b08c      	sub	sp, #48	; 0x30
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb9c:	f107 031c 	add.w	r3, r7, #28
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	605a      	str	r2, [r3, #4]
 800eba6:	609a      	str	r2, [r3, #8]
 800eba8:	60da      	str	r2, [r3, #12]
 800ebaa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a32      	ldr	r2, [pc, #200]	; (800ec7c <HAL_TIM_Encoder_MspInit+0xe8>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d12c      	bne.n	800ec10 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	61bb      	str	r3, [r7, #24]
 800ebba:	4b31      	ldr	r3, [pc, #196]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ebbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebbe:	4a30      	ldr	r2, [pc, #192]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ebc0:	f043 0302 	orr.w	r3, r3, #2
 800ebc4:	6413      	str	r3, [r2, #64]	; 0x40
 800ebc6:	4b2e      	ldr	r3, [pc, #184]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ebc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebca:	f003 0302 	and.w	r3, r3, #2
 800ebce:	61bb      	str	r3, [r7, #24]
 800ebd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	617b      	str	r3, [r7, #20]
 800ebd6:	4b2a      	ldr	r3, [pc, #168]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ebd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebda:	4a29      	ldr	r2, [pc, #164]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ebdc:	f043 0301 	orr.w	r3, r3, #1
 800ebe0:	6313      	str	r3, [r2, #48]	; 0x30
 800ebe2:	4b27      	ldr	r3, [pc, #156]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ebe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe6:	f003 0301 	and.w	r3, r3, #1
 800ebea:	617b      	str	r3, [r7, #20]
 800ebec:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ebee:	23c0      	movs	r3, #192	; 0xc0
 800ebf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebf2:	2302      	movs	r3, #2
 800ebf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ebfe:	2302      	movs	r3, #2
 800ec00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec02:	f107 031c 	add.w	r3, r7, #28
 800ec06:	4619      	mov	r1, r3
 800ec08:	481e      	ldr	r0, [pc, #120]	; (800ec84 <HAL_TIM_Encoder_MspInit+0xf0>)
 800ec0a:	f002 fa97 	bl	801113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800ec0e:	e030      	b.n	800ec72 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a1c      	ldr	r2, [pc, #112]	; (800ec88 <HAL_TIM_Encoder_MspInit+0xf4>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d12b      	bne.n	800ec72 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	613b      	str	r3, [r7, #16]
 800ec1e:	4b18      	ldr	r3, [pc, #96]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ec20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec22:	4a17      	ldr	r2, [pc, #92]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ec24:	f043 0304 	orr.w	r3, r3, #4
 800ec28:	6413      	str	r3, [r2, #64]	; 0x40
 800ec2a:	4b15      	ldr	r3, [pc, #84]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ec2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec2e:	f003 0304 	and.w	r3, r3, #4
 800ec32:	613b      	str	r3, [r7, #16]
 800ec34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ec36:	2300      	movs	r3, #0
 800ec38:	60fb      	str	r3, [r7, #12]
 800ec3a:	4b11      	ldr	r3, [pc, #68]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ec3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3e:	4a10      	ldr	r2, [pc, #64]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ec40:	f043 0302 	orr.w	r3, r3, #2
 800ec44:	6313      	str	r3, [r2, #48]	; 0x30
 800ec46:	4b0e      	ldr	r3, [pc, #56]	; (800ec80 <HAL_TIM_Encoder_MspInit+0xec>)
 800ec48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec4a:	f003 0302 	and.w	r3, r3, #2
 800ec4e:	60fb      	str	r3, [r7, #12]
 800ec50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ec52:	23c0      	movs	r3, #192	; 0xc0
 800ec54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec56:	2302      	movs	r3, #2
 800ec58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ec62:	2302      	movs	r3, #2
 800ec64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec66:	f107 031c 	add.w	r3, r7, #28
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4807      	ldr	r0, [pc, #28]	; (800ec8c <HAL_TIM_Encoder_MspInit+0xf8>)
 800ec6e:	f002 fa65 	bl	801113c <HAL_GPIO_Init>
}
 800ec72:	bf00      	nop
 800ec74:	3730      	adds	r7, #48	; 0x30
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	40000400 	.word	0x40000400
 800ec80:	40023800 	.word	0x40023800
 800ec84:	40020000 	.word	0x40020000
 800ec88:	40000800 	.word	0x40000800
 800ec8c:	40020400 	.word	0x40020400

0800ec90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08c      	sub	sp, #48	; 0x30
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec98:	f107 031c 	add.w	r3, r7, #28
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]
 800eca0:	605a      	str	r2, [r3, #4]
 800eca2:	609a      	str	r2, [r3, #8]
 800eca4:	60da      	str	r2, [r3, #12]
 800eca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecb0:	d11e      	bne.n	800ecf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	61bb      	str	r3, [r7, #24]
 800ecb6:	4b43      	ldr	r3, [pc, #268]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ecb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecba:	4a42      	ldr	r2, [pc, #264]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ecbc:	f043 0301 	orr.w	r3, r3, #1
 800ecc0:	6313      	str	r3, [r2, #48]	; 0x30
 800ecc2:	4b40      	ldr	r3, [pc, #256]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ecc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc6:	f003 0301 	and.w	r3, r3, #1
 800ecca:	61bb      	str	r3, [r7, #24]
 800eccc:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ecce:	2308      	movs	r3, #8
 800ecd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecd2:	2302      	movs	r3, #2
 800ecd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ecda:	2303      	movs	r3, #3
 800ecdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ecde:	2301      	movs	r3, #1
 800ece0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ece2:	f107 031c 	add.w	r3, r7, #28
 800ece6:	4619      	mov	r1, r3
 800ece8:	4837      	ldr	r0, [pc, #220]	; (800edc8 <HAL_TIM_MspPostInit+0x138>)
 800ecea:	f002 fa27 	bl	801113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ecee:	e064      	b.n	800edba <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4a35      	ldr	r2, [pc, #212]	; (800edcc <HAL_TIM_MspPostInit+0x13c>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d11e      	bne.n	800ed38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	617b      	str	r3, [r7, #20]
 800ecfe:	4b31      	ldr	r3, [pc, #196]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed02:	4a30      	ldr	r2, [pc, #192]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed04:	f043 0301 	orr.w	r3, r3, #1
 800ed08:	6313      	str	r3, [r2, #48]	; 0x30
 800ed0a:	4b2e      	ldr	r3, [pc, #184]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed0e:	f003 0301 	and.w	r3, r3, #1
 800ed12:	617b      	str	r3, [r7, #20]
 800ed14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ed16:	2302      	movs	r3, #2
 800ed18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed1a:	2302      	movs	r3, #2
 800ed1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed22:	2300      	movs	r3, #0
 800ed24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ed26:	2302      	movs	r3, #2
 800ed28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed2a:	f107 031c 	add.w	r3, r7, #28
 800ed2e:	4619      	mov	r1, r3
 800ed30:	4825      	ldr	r0, [pc, #148]	; (800edc8 <HAL_TIM_MspPostInit+0x138>)
 800ed32:	f002 fa03 	bl	801113c <HAL_GPIO_Init>
}
 800ed36:	e040      	b.n	800edba <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a24      	ldr	r2, [pc, #144]	; (800edd0 <HAL_TIM_MspPostInit+0x140>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d13b      	bne.n	800edba <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed42:	2300      	movs	r3, #0
 800ed44:	613b      	str	r3, [r7, #16]
 800ed46:	4b1f      	ldr	r3, [pc, #124]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4a:	4a1e      	ldr	r2, [pc, #120]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed4c:	f043 0301 	orr.w	r3, r3, #1
 800ed50:	6313      	str	r3, [r2, #48]	; 0x30
 800ed52:	4b1c      	ldr	r3, [pc, #112]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed56:	f003 0301 	and.w	r3, r3, #1
 800ed5a:	613b      	str	r3, [r7, #16]
 800ed5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed5e:	2300      	movs	r3, #0
 800ed60:	60fb      	str	r3, [r7, #12]
 800ed62:	4b18      	ldr	r3, [pc, #96]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed66:	4a17      	ldr	r2, [pc, #92]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed68:	f043 0304 	orr.w	r3, r3, #4
 800ed6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ed6e:	4b15      	ldr	r3, [pc, #84]	; (800edc4 <HAL_TIM_MspPostInit+0x134>)
 800ed70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed72:	f003 0304 	and.w	r3, r3, #4
 800ed76:	60fb      	str	r3, [r7, #12]
 800ed78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ed7a:	2320      	movs	r3, #32
 800ed7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed7e:	2302      	movs	r3, #2
 800ed80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed82:	2300      	movs	r3, #0
 800ed84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed86:	2300      	movs	r3, #0
 800ed88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed8e:	f107 031c 	add.w	r3, r7, #28
 800ed92:	4619      	mov	r1, r3
 800ed94:	480c      	ldr	r0, [pc, #48]	; (800edc8 <HAL_TIM_MspPostInit+0x138>)
 800ed96:	f002 f9d1 	bl	801113c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ed9a:	2340      	movs	r3, #64	; 0x40
 800ed9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed9e:	2302      	movs	r3, #2
 800eda0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eda6:	2300      	movs	r3, #0
 800eda8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800edaa:	2303      	movs	r3, #3
 800edac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800edae:	f107 031c 	add.w	r3, r7, #28
 800edb2:	4619      	mov	r1, r3
 800edb4:	4807      	ldr	r0, [pc, #28]	; (800edd4 <HAL_TIM_MspPostInit+0x144>)
 800edb6:	f002 f9c1 	bl	801113c <HAL_GPIO_Init>
}
 800edba:	bf00      	nop
 800edbc:	3730      	adds	r7, #48	; 0x30
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	40023800 	.word	0x40023800
 800edc8:	40020000 	.word	0x40020000
 800edcc:	40000c00 	.word	0x40000c00
 800edd0:	40010400 	.word	0x40010400
 800edd4:	40020800 	.word	0x40020800

0800edd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b08a      	sub	sp, #40	; 0x28
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ede0:	f107 0314 	add.w	r3, r7, #20
 800ede4:	2200      	movs	r2, #0
 800ede6:	601a      	str	r2, [r3, #0]
 800ede8:	605a      	str	r2, [r3, #4]
 800edea:	609a      	str	r2, [r3, #8]
 800edec:	60da      	str	r2, [r3, #12]
 800edee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a19      	ldr	r2, [pc, #100]	; (800ee5c <HAL_UART_MspInit+0x84>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d12c      	bne.n	800ee54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800edfa:	2300      	movs	r3, #0
 800edfc:	613b      	str	r3, [r7, #16]
 800edfe:	4b18      	ldr	r3, [pc, #96]	; (800ee60 <HAL_UART_MspInit+0x88>)
 800ee00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee02:	4a17      	ldr	r2, [pc, #92]	; (800ee60 <HAL_UART_MspInit+0x88>)
 800ee04:	f043 0310 	orr.w	r3, r3, #16
 800ee08:	6453      	str	r3, [r2, #68]	; 0x44
 800ee0a:	4b15      	ldr	r3, [pc, #84]	; (800ee60 <HAL_UART_MspInit+0x88>)
 800ee0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee0e:	f003 0310 	and.w	r3, r3, #16
 800ee12:	613b      	str	r3, [r7, #16]
 800ee14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee16:	2300      	movs	r3, #0
 800ee18:	60fb      	str	r3, [r7, #12]
 800ee1a:	4b11      	ldr	r3, [pc, #68]	; (800ee60 <HAL_UART_MspInit+0x88>)
 800ee1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee1e:	4a10      	ldr	r2, [pc, #64]	; (800ee60 <HAL_UART_MspInit+0x88>)
 800ee20:	f043 0301 	orr.w	r3, r3, #1
 800ee24:	6313      	str	r3, [r2, #48]	; 0x30
 800ee26:	4b0e      	ldr	r3, [pc, #56]	; (800ee60 <HAL_UART_MspInit+0x88>)
 800ee28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2a:	f003 0301 	and.w	r3, r3, #1
 800ee2e:	60fb      	str	r3, [r7, #12]
 800ee30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ee32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ee36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee38:	2302      	movs	r3, #2
 800ee3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee40:	2303      	movs	r3, #3
 800ee42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ee44:	2307      	movs	r3, #7
 800ee46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee48:	f107 0314 	add.w	r3, r7, #20
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4805      	ldr	r0, [pc, #20]	; (800ee64 <HAL_UART_MspInit+0x8c>)
 800ee50:	f002 f974 	bl	801113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ee54:	bf00      	nop
 800ee56:	3728      	adds	r7, #40	; 0x28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	40011000 	.word	0x40011000
 800ee60:	40023800 	.word	0x40023800
 800ee64:	40020000 	.word	0x40020000

0800ee68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ee6c:	e7fe      	b.n	800ee6c <NMI_Handler+0x4>

0800ee6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ee6e:	b480      	push	{r7}
 800ee70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ee72:	e7fe      	b.n	800ee72 <HardFault_Handler+0x4>

0800ee74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ee74:	b480      	push	{r7}
 800ee76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ee78:	e7fe      	b.n	800ee78 <MemManage_Handler+0x4>

0800ee7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ee7a:	b480      	push	{r7}
 800ee7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ee7e:	e7fe      	b.n	800ee7e <BusFault_Handler+0x4>

0800ee80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ee80:	b480      	push	{r7}
 800ee82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ee84:	e7fe      	b.n	800ee84 <UsageFault_Handler+0x4>

0800ee86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ee86:	b480      	push	{r7}
 800ee88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ee8a:	bf00      	nop
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ee94:	b480      	push	{r7}
 800ee96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ee98:	bf00      	nop
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr

0800eea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800eea2:	b480      	push	{r7}
 800eea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800eea6:	bf00      	nop
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr

0800eeb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800eeb4:	f000 fde4 	bl	800fa80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800eeb8:	bf00      	nop
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800eec0:	4802      	ldr	r0, [pc, #8]	; (800eecc <TIM1_UP_TIM10_IRQHandler+0x10>)
 800eec2:	f004 f87f 	bl	8012fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800eec6:	bf00      	nop
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	20000a0c 	.word	0x20000a0c

0800eed0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800eed4:	4802      	ldr	r0, [pc, #8]	; (800eee0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800eed6:	f004 f875 	bl	8012fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800eeda:	bf00      	nop
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	20000b4c 	.word	0x20000b4c

0800eee4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800eee8:	4802      	ldr	r0, [pc, #8]	; (800eef4 <DMA2_Stream0_IRQHandler+0x10>)
 800eeea:	f001 fcd3 	bl	8010894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800eeee:	bf00      	nop
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	200008f4 	.word	0x200008f4

0800eef8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800eefc:	4802      	ldr	r0, [pc, #8]	; (800ef08 <DMA2_Stream2_IRQHandler+0x10>)
 800eefe:	f001 fcc9 	bl	8010894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ef02:	bf00      	nop
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	20000954 	.word	0x20000954

0800ef0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ef10:	4b08      	ldr	r3, [pc, #32]	; (800ef34 <SystemInit+0x28>)
 800ef12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef16:	4a07      	ldr	r2, [pc, #28]	; (800ef34 <SystemInit+0x28>)
 800ef18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ef1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ef20:	4b04      	ldr	r3, [pc, #16]	; (800ef34 <SystemInit+0x28>)
 800ef22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ef26:	609a      	str	r2, [r3, #8]
#endif
}
 800ef28:	bf00      	nop
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	e000ed00 	.word	0xe000ed00

0800ef38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	af00      	add	r7, sp, #0
	return 1;
 800ef3c:	2301      	movs	r3, #1
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <_kill>:

int _kill(int pid, int sig)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ef52:	f005 ff29 	bl	8014da8 <__errno>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2216      	movs	r2, #22
 800ef5a:	601a      	str	r2, [r3, #0]
	return -1;
 800ef5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <_exit>:

void _exit (int status)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ef70:	f04f 31ff 	mov.w	r1, #4294967295
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f7ff ffe7 	bl	800ef48 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ef7a:	e7fe      	b.n	800ef7a <_exit+0x12>

0800ef7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ef88:	2300      	movs	r3, #0
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	e00a      	b.n	800efa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ef8e:	f7fe fe3f 	bl	800dc10 <__io_getchar>
 800ef92:	4601      	mov	r1, r0
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	1c5a      	adds	r2, r3, #1
 800ef98:	60ba      	str	r2, [r7, #8]
 800ef9a:	b2ca      	uxtb	r2, r1
 800ef9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	3301      	adds	r3, #1
 800efa2:	617b      	str	r3, [r7, #20]
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	dbf0      	blt.n	800ef8e <_read+0x12>
	}

return len;
 800efac:	687b      	ldr	r3, [r7, #4]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b086      	sub	sp, #24
 800efba:	af00      	add	r7, sp, #0
 800efbc:	60f8      	str	r0, [r7, #12]
 800efbe:	60b9      	str	r1, [r7, #8]
 800efc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800efc2:	2300      	movs	r3, #0
 800efc4:	617b      	str	r3, [r7, #20]
 800efc6:	e009      	b.n	800efdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	60ba      	str	r2, [r7, #8]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fe fe0b 	bl	800dbec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	3301      	adds	r3, #1
 800efda:	617b      	str	r3, [r7, #20]
 800efdc:	697a      	ldr	r2, [r7, #20]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	dbf1      	blt.n	800efc8 <_write+0x12>
	}
	return len;
 800efe4:	687b      	ldr	r3, [r7, #4]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3718      	adds	r7, #24
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <_close>:

int _close(int file)
{
 800efee:	b480      	push	{r7}
 800eff0:	b083      	sub	sp, #12
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	6078      	str	r0, [r7, #4]
	return -1;
 800eff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800effa:	4618      	mov	r0, r3
 800effc:	370c      	adds	r7, #12
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr

0800f006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f006:	b480      	push	{r7}
 800f008:	b083      	sub	sp, #12
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f016:	605a      	str	r2, [r3, #4]
	return 0;
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	370c      	adds	r7, #12
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr

0800f026 <_isatty>:

int _isatty(int file)
{
 800f026:	b480      	push	{r7}
 800f028:	b083      	sub	sp, #12
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
	return 1;
 800f02e:	2301      	movs	r3, #1
}
 800f030:	4618      	mov	r0, r3
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	607a      	str	r2, [r7, #4]
	return 0;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
	...

0800f058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f060:	4a14      	ldr	r2, [pc, #80]	; (800f0b4 <_sbrk+0x5c>)
 800f062:	4b15      	ldr	r3, [pc, #84]	; (800f0b8 <_sbrk+0x60>)
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f06c:	4b13      	ldr	r3, [pc, #76]	; (800f0bc <_sbrk+0x64>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d102      	bne.n	800f07a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f074:	4b11      	ldr	r3, [pc, #68]	; (800f0bc <_sbrk+0x64>)
 800f076:	4a12      	ldr	r2, [pc, #72]	; (800f0c0 <_sbrk+0x68>)
 800f078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f07a:	4b10      	ldr	r3, [pc, #64]	; (800f0bc <_sbrk+0x64>)
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4413      	add	r3, r2
 800f082:	693a      	ldr	r2, [r7, #16]
 800f084:	429a      	cmp	r2, r3
 800f086:	d207      	bcs.n	800f098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f088:	f005 fe8e 	bl	8014da8 <__errno>
 800f08c:	4603      	mov	r3, r0
 800f08e:	220c      	movs	r2, #12
 800f090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f092:	f04f 33ff 	mov.w	r3, #4294967295
 800f096:	e009      	b.n	800f0ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f098:	4b08      	ldr	r3, [pc, #32]	; (800f0bc <_sbrk+0x64>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f09e:	4b07      	ldr	r3, [pc, #28]	; (800f0bc <_sbrk+0x64>)
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	4a05      	ldr	r2, [pc, #20]	; (800f0bc <_sbrk+0x64>)
 800f0a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	20020000 	.word	0x20020000
 800f0b8:	00000400 	.word	0x00000400
 800f0bc:	20000bcc 	.word	0x20000bcc
 800f0c0:	20000c20 	.word	0x20000c20

0800f0c4 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800f0c8:	2203      	movs	r2, #3
 800f0ca:	490a      	ldr	r1, [pc, #40]	; (800f0f4 <ADCStart+0x30>)
 800f0cc:	480a      	ldr	r0, [pc, #40]	; (800f0f8 <ADCStart+0x34>)
 800f0ce:	f000 fd5f 	bl	800fb90 <HAL_ADC_Start_DMA>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d001      	beq.n	800f0dc <ADCStart+0x18>
	{
		Error_Handler();
 800f0d8:	f7ff fb7e 	bl	800e7d8 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800f0dc:	2202      	movs	r2, #2
 800f0de:	4907      	ldr	r1, [pc, #28]	; (800f0fc <ADCStart+0x38>)
 800f0e0:	4807      	ldr	r0, [pc, #28]	; (800f100 <ADCStart+0x3c>)
 800f0e2:	f000 fd55 	bl	800fb90 <HAL_ADC_Start_DMA>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d001      	beq.n	800f0f0 <ADCStart+0x2c>
	{
		Error_Handler();
 800f0ec:	f7ff fb74 	bl	800e7d8 <Error_Handler>
	}

}
 800f0f0:	bf00      	nop
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	20000bd0 	.word	0x20000bd0
 800f0f8:	20000864 	.word	0x20000864
 800f0fc:	20000bdc 	.word	0x20000bdc
 800f100:	200008ac 	.word	0x200008ac

0800f104 <ADCStop>:
void ADCStop()
{
 800f104:	b580      	push	{r7, lr}
 800f106:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800f108:	480e      	ldr	r0, [pc, #56]	; (800f144 <ADCStop+0x40>)
 800f10a:	f000 fe33 	bl	800fd74 <HAL_ADC_Stop_DMA>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d007      	beq.n	800f124 <ADCStop+0x20>
	{
		printf("な\r\n");
 800f114:	480c      	ldr	r0, [pc, #48]	; (800f148 <ADCStop+0x44>)
 800f116:	f006 fd87 	bl	8015c28 <puts>
		Error_Handler();
 800f11a:	f7ff fb5d 	bl	800e7d8 <Error_Handler>
		printf("に\r\n");
 800f11e:	480b      	ldr	r0, [pc, #44]	; (800f14c <ADCStop+0x48>)
 800f120:	f006 fd82 	bl	8015c28 <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800f124:	480a      	ldr	r0, [pc, #40]	; (800f150 <ADCStop+0x4c>)
 800f126:	f000 fe25 	bl	800fd74 <HAL_ADC_Stop_DMA>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d007      	beq.n	800f140 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800f130:	4808      	ldr	r0, [pc, #32]	; (800f154 <ADCStop+0x50>)
 800f132:	f006 fd79 	bl	8015c28 <puts>
		Error_Handler();
 800f136:	f7ff fb4f 	bl	800e7d8 <Error_Handler>
		printf("ね\r\n");
 800f13a:	4807      	ldr	r0, [pc, #28]	; (800f158 <ADCStop+0x54>)
 800f13c:	f006 fd74 	bl	8015c28 <puts>
	}
}
 800f140:	bf00      	nop
 800f142:	bd80      	pop	{r7, pc}
 800f144:	20000864 	.word	0x20000864
 800f148:	0801a718 	.word	0x0801a718
 800f14c:	0801a720 	.word	0x0801a720
 800f150:	200008ac 	.word	0x200008ac
 800f154:	0801a728 	.word	0x0801a728
 800f158:	0801a730 	.word	0x0801a730

0800f15c <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800f15c:	b480      	push	{r7}
 800f15e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800f160:	4b05      	ldr	r3, [pc, #20]	; (800f178 <FLASH_Unlock+0x1c>)
 800f162:	4a06      	ldr	r2, [pc, #24]	; (800f17c <FLASH_Unlock+0x20>)
 800f164:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800f166:	4b04      	ldr	r3, [pc, #16]	; (800f178 <FLASH_Unlock+0x1c>)
 800f168:	4a05      	ldr	r2, [pc, #20]	; (800f180 <FLASH_Unlock+0x24>)
 800f16a:	605a      	str	r2, [r3, #4]
}
 800f16c:	bf00      	nop
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	40023c00 	.word	0x40023c00
 800f17c:	45670123 	.word	0x45670123
 800f180:	cdef89ab 	.word	0xcdef89ab

0800f184 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800f184:	b480      	push	{r7}
 800f186:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800f188:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <FLASH_Lock+0x1c>)
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	4a04      	ldr	r2, [pc, #16]	; (800f1a0 <FLASH_Lock+0x1c>)
 800f18e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f192:	6113      	str	r3, [r2, #16]

}
 800f194:	bf00      	nop
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	40023c00 	.word	0x40023c00

0800f1a4 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800f1a8:	bf00      	nop
 800f1aa:	4b06      	ldr	r3, [pc, #24]	; (800f1c4 <FLASH_WaitBusy+0x20>)
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1f9      	bne.n	800f1aa <FLASH_WaitBusy+0x6>
}
 800f1b6:	bf00      	nop
 800f1b8:	bf00      	nop
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	40023c00 	.word	0x40023c00

0800f1c8 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800f1d2:	f7ff ffc3 	bl	800f15c <FLASH_Unlock>

	FLASH_WaitBusy();
 800f1d6:	f7ff ffe5 	bl	800f1a4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800f1da:	4b0e      	ldr	r3, [pc, #56]	; (800f214 <FLASH_Write_Word+0x4c>)
 800f1dc:	691b      	ldr	r3, [r3, #16]
 800f1de:	4a0d      	ldr	r2, [pc, #52]	; (800f214 <FLASH_Write_Word+0x4c>)
 800f1e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f1e4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800f1e6:	4b0b      	ldr	r3, [pc, #44]	; (800f214 <FLASH_Write_Word+0x4c>)
 800f1e8:	691b      	ldr	r3, [r3, #16]
 800f1ea:	4a0a      	ldr	r2, [pc, #40]	; (800f214 <FLASH_Write_Word+0x4c>)
 800f1ec:	f043 0301 	orr.w	r3, r3, #1
 800f1f0:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800f1f8:	f7ff ffd4 	bl	800f1a4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800f1fc:	4b05      	ldr	r3, [pc, #20]	; (800f214 <FLASH_Write_Word+0x4c>)
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	4a04      	ldr	r2, [pc, #16]	; (800f214 <FLASH_Write_Word+0x4c>)
 800f202:	f023 0301 	bic.w	r3, r3, #1
 800f206:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800f208:	f7ff ffbc 	bl	800f184 <FLASH_Lock>
}
 800f20c:	bf00      	nop
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	40023c00 	.word	0x40023c00

0800f218 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800f222:	f7ff ff9b 	bl	800f15c <FLASH_Unlock>

	FLASH_WaitBusy();
 800f226:	f7ff ffbd 	bl	800f1a4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800f22a:	4b0f      	ldr	r3, [pc, #60]	; (800f268 <FLASH_Read_Word+0x50>)
 800f22c:	691b      	ldr	r3, [r3, #16]
 800f22e:	4a0e      	ldr	r2, [pc, #56]	; (800f268 <FLASH_Read_Word+0x50>)
 800f230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f234:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800f236:	4b0c      	ldr	r3, [pc, #48]	; (800f268 <FLASH_Read_Word+0x50>)
 800f238:	691b      	ldr	r3, [r3, #16]
 800f23a:	4a0b      	ldr	r2, [pc, #44]	; (800f268 <FLASH_Read_Word+0x50>)
 800f23c:	f043 0301 	orr.w	r3, r3, #1
 800f240:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800f24a:	f7ff ffab 	bl	800f1a4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800f24e:	4b06      	ldr	r3, [pc, #24]	; (800f268 <FLASH_Read_Word+0x50>)
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	4a05      	ldr	r2, [pc, #20]	; (800f268 <FLASH_Read_Word+0x50>)
 800f254:	f023 0301 	bic.w	r3, r3, #1
 800f258:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800f25a:	f7ff ff93 	bl	800f184 <FLASH_Lock>
}
 800f25e:	bf00      	nop
 800f260:	3708      	adds	r7, #8
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	40023c00 	.word	0x40023c00

0800f26c <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800f278:	f7ff ff70 	bl	800f15c <FLASH_Unlock>

	FLASH_WaitBusy();
 800f27c:	f7ff ff92 	bl	800f1a4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800f280:	4b0e      	ldr	r3, [pc, #56]	; (800f2bc <FLASH_Write_Word_F+0x50>)
 800f282:	691b      	ldr	r3, [r3, #16]
 800f284:	4a0d      	ldr	r2, [pc, #52]	; (800f2bc <FLASH_Write_Word_F+0x50>)
 800f286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f28a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800f28c:	4b0b      	ldr	r3, [pc, #44]	; (800f2bc <FLASH_Write_Word_F+0x50>)
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	4a0a      	ldr	r2, [pc, #40]	; (800f2bc <FLASH_Write_Word_F+0x50>)
 800f292:	f043 0301 	orr.w	r3, r3, #1
 800f296:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	683a      	ldr	r2, [r7, #0]
 800f29c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800f29e:	f7ff ff81 	bl	800f1a4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800f2a2:	4b06      	ldr	r3, [pc, #24]	; (800f2bc <FLASH_Write_Word_F+0x50>)
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	4a05      	ldr	r2, [pc, #20]	; (800f2bc <FLASH_Write_Word_F+0x50>)
 800f2a8:	f023 0301 	bic.w	r3, r3, #1
 800f2ac:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800f2ae:	f7ff ff69 	bl	800f184 <FLASH_Lock>
}
 800f2b2:	bf00      	nop
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	40023c00 	.word	0x40023c00

0800f2c0 <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800f2ca:	f7ff ff47 	bl	800f15c <FLASH_Unlock>

	FLASH_WaitBusy();
 800f2ce:	f7ff ff69 	bl	800f1a4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800f2d2:	4b0f      	ldr	r3, [pc, #60]	; (800f310 <FLASH_Read_Word_F+0x50>)
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	4a0e      	ldr	r2, [pc, #56]	; (800f310 <FLASH_Read_Word_F+0x50>)
 800f2d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f2dc:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800f2de:	4b0c      	ldr	r3, [pc, #48]	; (800f310 <FLASH_Read_Word_F+0x50>)
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	4a0b      	ldr	r2, [pc, #44]	; (800f310 <FLASH_Read_Word_F+0x50>)
 800f2e4:	f043 0301 	orr.w	r3, r3, #1
 800f2e8:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800f2f2:	f7ff ff57 	bl	800f1a4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800f2f6:	4b06      	ldr	r3, [pc, #24]	; (800f310 <FLASH_Read_Word_F+0x50>)
 800f2f8:	691b      	ldr	r3, [r3, #16]
 800f2fa:	4a05      	ldr	r2, [pc, #20]	; (800f310 <FLASH_Read_Word_F+0x50>)
 800f2fc:	f023 0301 	bic.w	r3, r3, #1
 800f300:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800f302:	f7ff ff3f 	bl	800f184 <FLASH_Lock>
}
 800f306:	bf00      	nop
 800f308:	3708      	adds	r7, #8
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	40023c00 	.word	0x40023c00

0800f314 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b088      	sub	sp, #32
 800f318:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800f31a:	f001 fd25 	bl	8010d68 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800f31e:	2300      	movs	r3, #0
 800f320:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800f322:	2301      	movs	r3, #1
 800f324:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800f326:	2302      	movs	r3, #2
 800f328:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800f32a:	2301      	movs	r3, #1
 800f32c:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800f32e:	1d3a      	adds	r2, r7, #4
 800f330:	f107 0308 	add.w	r3, r7, #8
 800f334:	4611      	mov	r1, r2
 800f336:	4618      	mov	r0, r3
 800f338:	f001 fdde 	bl	8010ef8 <HAL_FLASHEx_Erase>
 800f33c:	4603      	mov	r3, r0
 800f33e:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800f340:	f001 fd34 	bl	8010dac <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800f344:	7ffb      	ldrb	r3, [r7, #31]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d105      	bne.n	800f356 <Flash_clear_sector1+0x42>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f350:	d101      	bne.n	800f356 <Flash_clear_sector1+0x42>
 800f352:	2301      	movs	r3, #1
 800f354:	e000      	b.n	800f358 <Flash_clear_sector1+0x44>
 800f356:	2300      	movs	r3, #0
 800f358:	f003 0301 	and.w	r3, r3, #1
 800f35c:	b2db      	uxtb	r3, r3
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3720      	adds	r7, #32
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b088      	sub	sp, #32
 800f36a:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800f36c:	f001 fcfc 	bl	8010d68 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800f370:	2300      	movs	r3, #0
 800f372:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800f374:	2309      	movs	r3, #9
 800f376:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800f378:	2302      	movs	r3, #2
 800f37a:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800f37c:	2301      	movs	r3, #1
 800f37e:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800f380:	1d3a      	adds	r2, r7, #4
 800f382:	f107 0308 	add.w	r3, r7, #8
 800f386:	4611      	mov	r1, r2
 800f388:	4618      	mov	r0, r3
 800f38a:	f001 fdb5 	bl	8010ef8 <HAL_FLASHEx_Erase>
 800f38e:	4603      	mov	r3, r0
 800f390:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800f392:	f001 fd0b 	bl	8010dac <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800f396:	7ffb      	ldrb	r3, [r7, #31]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d105      	bne.n	800f3a8 <Flash_clear_sector9+0x42>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a2:	d101      	bne.n	800f3a8 <Flash_clear_sector9+0x42>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e000      	b.n	800f3aa <Flash_clear_sector9+0x44>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	f003 0301 	and.w	r3, r3, #1
 800f3ae:	b2db      	uxtb	r3, r3
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3720      	adds	r7, #32
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <read_byte>:
//		Error_Handler();
//		printf("エラー2\r\n");
//	}
//	printf("ok\r\n");
//}
inline uint8_t read_byte( uint8_t reg ) {
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	4603      	mov	r3, r0
 800f3c0:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 800f3c2:	79fb      	ldrb	r3, [r7, #7]
 800f3c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	2104      	movs	r1, #4
 800f3d0:	480d      	ldr	r0, [pc, #52]	; (800f408 <read_byte+0x50>)
 800f3d2:	f002 f84f 	bl	8011474 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800f3d6:	f107 010f 	add.w	r1, r7, #15
 800f3da:	2364      	movs	r3, #100	; 0x64
 800f3dc:	2201      	movs	r2, #1
 800f3de:	480b      	ldr	r0, [pc, #44]	; (800f40c <read_byte+0x54>)
 800f3e0:	f002 fd54 	bl	8011e8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800f3e4:	f107 010e 	add.w	r1, r7, #14
 800f3e8:	2364      	movs	r3, #100	; 0x64
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	4807      	ldr	r0, [pc, #28]	; (800f40c <read_byte+0x54>)
 800f3ee:	f002 fe81 	bl	80120f4 <HAL_SPI_Receive>
	CS_SET;
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	2104      	movs	r1, #4
 800f3f6:	4804      	ldr	r0, [pc, #16]	; (800f408 <read_byte+0x50>)
 800f3f8:	f002 f83c 	bl	8011474 <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 800f3fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3710      	adds	r7, #16
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	40020c00 	.word	0x40020c00
 800f40c:	200009b4 	.word	0x200009b4

0800f410 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	4603      	mov	r3, r0
 800f418:	460a      	mov	r2, r1
 800f41a:	71fb      	strb	r3, [r7, #7]
 800f41c:	4613      	mov	r3, r2
 800f41e:	71bb      	strb	r3, [r7, #6]

	uint8_t ret1, ret2,val1,val2;
	uint8_t ret[2] = {
 800f420:	79fb      	ldrb	r3, [r7, #7]
 800f422:	723b      	strb	r3, [r7, #8]
 800f424:	79bb      	ldrb	r3, [r7, #6]
 800f426:	727b      	strb	r3, [r7, #9]
			a,//0x37,
			b//0x38,
	};
	int16_t law_data;
	float res;
	ret1 = ret[0] | 0x80;
 800f428:	7a3b      	ldrb	r3, [r7, #8]
 800f42a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	73fb      	strb	r3, [r7, #15]
	ret2 = ret[1] | 0x80;
 800f432:	7a7b      	ldrb	r3, [r7, #9]
 800f434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	73bb      	strb	r3, [r7, #14]
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 800f43c:	2200      	movs	r2, #0
 800f43e:	2104      	movs	r1, #4
 800f440:	4822      	ldr	r0, [pc, #136]	; (800f4cc <ReadIMU+0xbc>)
 800f442:	f002 f817 	bl	8011474 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800f446:	f107 010f 	add.w	r1, r7, #15
 800f44a:	2364      	movs	r3, #100	; 0x64
 800f44c:	2201      	movs	r2, #1
 800f44e:	4820      	ldr	r0, [pc, #128]	; (800f4d0 <ReadIMU+0xc0>)
 800f450:	f002 fd1c 	bl	8011e8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800f454:	f107 010d 	add.w	r1, r7, #13
 800f458:	2364      	movs	r3, #100	; 0x64
 800f45a:	2201      	movs	r2, #1
 800f45c:	481c      	ldr	r0, [pc, #112]	; (800f4d0 <ReadIMU+0xc0>)
 800f45e:	f002 fe49 	bl	80120f4 <HAL_SPI_Receive>
	CS_SET;
 800f462:	2201      	movs	r2, #1
 800f464:	2104      	movs	r1, #4
 800f466:	4819      	ldr	r0, [pc, #100]	; (800f4cc <ReadIMU+0xbc>)
 800f468:	f002 f804 	bl	8011474 <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 800f46c:	2200      	movs	r2, #0
 800f46e:	2104      	movs	r1, #4
 800f470:	4816      	ldr	r0, [pc, #88]	; (800f4cc <ReadIMU+0xbc>)
 800f472:	f001 ffff 	bl	8011474 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800f476:	f107 010e 	add.w	r1, r7, #14
 800f47a:	2364      	movs	r3, #100	; 0x64
 800f47c:	2201      	movs	r2, #1
 800f47e:	4814      	ldr	r0, [pc, #80]	; (800f4d0 <ReadIMU+0xc0>)
 800f480:	f002 fd04 	bl	8011e8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800f484:	f107 010c 	add.w	r1, r7, #12
 800f488:	2364      	movs	r3, #100	; 0x64
 800f48a:	2201      	movs	r2, #1
 800f48c:	4810      	ldr	r0, [pc, #64]	; (800f4d0 <ReadIMU+0xc0>)
 800f48e:	f002 fe31 	bl	80120f4 <HAL_SPI_Receive>
	CS_SET;
 800f492:	2201      	movs	r2, #1
 800f494:	2104      	movs	r1, #4
 800f496:	480d      	ldr	r0, [pc, #52]	; (800f4cc <ReadIMU+0xbc>)
 800f498:	f001 ffec 	bl	8011474 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800f49c:	7b7b      	ldrb	r3, [r7, #13]
 800f49e:	021b      	lsls	r3, r3, #8
 800f4a0:	b21a      	sxth	r2, r3
 800f4a2:	7b3b      	ldrb	r3, [r7, #12]
 800f4a4:	b21b      	sxth	r3, r3
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	82fb      	strh	r3, [r7, #22]
	res = (float)law_data;
 800f4aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4ae:	ee07 3a90 	vmov	s15, r3
 800f4b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4b6:	edc7 7a04 	vstr	s15, [r7, #16]
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	ee07 3a90 	vmov	s15, r3
}
 800f4c0:	eeb0 0a67 	vmov.f32	s0, s15
 800f4c4:	3718      	adds	r7, #24
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	40020c00 	.word	0x40020c00
 800f4d0:	200009b4 	.word	0x200009b4

0800f4d4 <write_byte>:
void write_byte( uint8_t reg, uint8_t val )  {
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	4603      	mov	r3, r0
 800f4dc:	460a      	mov	r2, r1
 800f4de:	71fb      	strb	r3, [r7, #7]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	2104      	movs	r1, #4
 800f4f2:	480c      	ldr	r0, [pc, #48]	; (800f524 <write_byte+0x50>)
 800f4f4:	f001 ffbe 	bl	8011474 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800f4f8:	f107 010f 	add.w	r1, r7, #15
 800f4fc:	2364      	movs	r3, #100	; 0x64
 800f4fe:	2201      	movs	r2, #1
 800f500:	4809      	ldr	r0, [pc, #36]	; (800f528 <write_byte+0x54>)
 800f502:	f002 fcc3 	bl	8011e8c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800f506:	1db9      	adds	r1, r7, #6
 800f508:	2364      	movs	r3, #100	; 0x64
 800f50a:	2201      	movs	r2, #1
 800f50c:	4806      	ldr	r0, [pc, #24]	; (800f528 <write_byte+0x54>)
 800f50e:	f002 fcbd 	bl	8011e8c <HAL_SPI_Transmit>
	CS_SET;
 800f512:	2201      	movs	r2, #1
 800f514:	2104      	movs	r1, #4
 800f516:	4803      	ldr	r0, [pc, #12]	; (800f524 <write_byte+0x50>)
 800f518:	f001 ffac 	bl	8011474 <HAL_GPIO_WritePin>
}
 800f51c:	bf00      	nop
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	40020c00 	.word	0x40020c00
 800f528:	200009b4 	.word	0x200009b4

0800f52c <IMU_init>:

uint8_t IMU_init() {
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800f532:	2000      	movs	r0, #0
 800f534:	f7ff ff40 	bl	800f3b8 <read_byte>
 800f538:	4603      	mov	r3, r0
 800f53a:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800f53c:	79bb      	ldrb	r3, [r7, #6]
 800f53e:	2be0      	cmp	r3, #224	; 0xe0
 800f540:	d119      	bne.n	800f576 <IMU_init+0x4a>
		ret = 1;
 800f542:	2301      	movs	r3, #1
 800f544:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800f546:	2101      	movs	r1, #1
 800f548:	2006      	movs	r0, #6
 800f54a:	f7ff ffc3 	bl	800f4d4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800f54e:	2110      	movs	r1, #16
 800f550:	2003      	movs	r0, #3
 800f552:	f7ff ffbf 	bl	800f4d4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800f556:	2120      	movs	r1, #32
 800f558:	207f      	movs	r0, #127	; 0x7f
 800f55a:	f7ff ffbb 	bl	800f4d4 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800f55e:	2117      	movs	r1, #23
 800f560:	2001      	movs	r0, #1
 800f562:	f7ff ffb7 	bl	800f4d4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000

		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800f566:	2117      	movs	r1, #23
 800f568:	2014      	movs	r0, #20
 800f56a:	f7ff ffb3 	bl	800f4d4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16

		write_byte(0x7F,0x00);	//USER_BANK0
 800f56e:	2100      	movs	r1, #0
 800f570:	207f      	movs	r0, #127	; 0x7f
 800f572:	f7ff ffaf 	bl	800f4d4 <write_byte>
	}
	return ret;
 800f576:	79fb      	ldrb	r3, [r7, #7]
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800f580:	b580      	push	{r7, lr}
 800f582:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0


	HAL_Delay(500);
 800f58a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f58e:	f000 fa97 	bl	800fac0 <HAL_Delay>

	int num = 2000;
 800f592:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f596:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800f59a:	f102 0204 	add.w	r2, r2, #4
 800f59e:	6013      	str	r3, [r2, #0]
	float zg_vals[2000]={0.0f};
 800f5a0:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800f5a4:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	f005 fc31 	bl	8014e18 <memset>
	float sum=0;
 800f5b6:	f04f 0300 	mov.w	r3, #0
 800f5ba:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800f5be:	f102 020c 	add.w	r2, r2, #12
 800f5c2:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num; i++){
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800f5ca:	f102 0208 	add.w	r2, r2, #8
 800f5ce:	6013      	str	r3, [r2, #0]
 800f5d0:	e036      	b.n	800f640 <IMU_Calib+0xc0>
		zg_vals[i] = ZGyro;
 800f5d2:	4b2b      	ldr	r3, [pc, #172]	; (800f680 <IMU_Calib+0x100>)
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800f5da:	f6a3 714c 	subw	r1, r3, #3916	; 0xf4c
 800f5de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f5e2:	f103 0308 	add.w	r3, r3, #8
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	440b      	add	r3, r1
 800f5ec:	601a      	str	r2, [r3, #0]
		sum += zg_vals[i];
 800f5ee:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800f5f2:	f6a3 724c 	subw	r2, r3, #3916	; 0xf4c
 800f5f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f5fa:	f103 0308 	add.w	r3, r3, #8
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	4413      	add	r3, r2
 800f604:	edd3 7a00 	vldr	s15, [r3]
 800f608:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f60c:	f103 030c 	add.w	r3, r3, #12
 800f610:	ed93 7a00 	vldr	s14, [r3]
 800f614:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f618:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f61c:	f103 030c 	add.w	r3, r3, #12
 800f620:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800f624:	2002      	movs	r0, #2
 800f626:	f000 fa4b 	bl	800fac0 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800f62a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f62e:	f103 0308 	add.w	r3, r3, #8
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	3301      	adds	r3, #1
 800f636:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800f63a:	f102 0208 	add.w	r2, r2, #8
 800f63e:	6013      	str	r3, [r2, #0]
 800f640:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f644:	f103 0308 	add.w	r3, r3, #8
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f64e:	f103 0304 	add.w	r3, r3, #4
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	429a      	cmp	r2, r3
 800f656:	dbbc      	blt.n	800f5d2 <IMU_Calib+0x52>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800f658:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f65c:	f103 030c 	add.w	r3, r3, #12
 800f660:	ed93 7a00 	vldr	s14, [r3]
 800f664:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f684 <IMU_Calib+0x104>
 800f668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f66c:	4b06      	ldr	r3, [pc, #24]	; (800f688 <IMU_Calib+0x108>)
 800f66e:	edc3 7a00 	vstr	s15, [r3]
}
 800f672:	bf00      	nop
 800f674:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	20000be8 	.word	0x20000be8
 800f684:	44fa0000 	.word	0x44fa0000
 800f688:	20000be4 	.word	0x20000be4

0800f68c <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800f690:	213c      	movs	r1, #60	; 0x3c
 800f692:	4804      	ldr	r0, [pc, #16]	; (800f6a4 <EncoderStart+0x18>)
 800f694:	f003 fc16 	bl	8012ec4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800f698:	213c      	movs	r1, #60	; 0x3c
 800f69a:	4803      	ldr	r0, [pc, #12]	; (800f6a8 <EncoderStart+0x1c>)
 800f69c:	f003 fc12 	bl	8012ec4 <HAL_TIM_Encoder_Start>
}
 800f6a0:	bf00      	nop
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	20000a8c 	.word	0x20000a8c
 800f6a8:	20000acc 	.word	0x20000acc

0800f6ac <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800f6b0:	213c      	movs	r1, #60	; 0x3c
 800f6b2:	4804      	ldr	r0, [pc, #16]	; (800f6c4 <EncoderStop+0x18>)
 800f6b4:	f003 fc3e 	bl	8012f34 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800f6b8:	213c      	movs	r1, #60	; 0x3c
 800f6ba:	4803      	ldr	r0, [pc, #12]	; (800f6c8 <EncoderStop+0x1c>)
 800f6bc:	f003 fc3a 	bl	8012f34 <HAL_TIM_Encoder_Stop>
}
 800f6c0:	bf00      	nop
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	20000a8c 	.word	0x20000a8c
 800f6c8:	20000acc 	.word	0x20000acc

0800f6cc <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	4804      	ldr	r0, [pc, #16]	; (800f6e4 <EmitterON+0x18>)
 800f6d4:	f003 f97a 	bl	80129cc <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800f6d8:	2100      	movs	r1, #0
 800f6da:	4802      	ldr	r0, [pc, #8]	; (800f6e4 <EmitterON+0x18>)
 800f6dc:	f004 fa9b 	bl	8013c16 <HAL_TIMEx_OCN_Start_IT>

}
 800f6e0:	bf00      	nop
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	20000b4c 	.word	0x20000b4c

0800f6e8 <EmitterOFF>:
void EmitterOFF()
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	4804      	ldr	r0, [pc, #16]	; (800f700 <EmitterOFF+0x18>)
 800f6f0:	f003 f9f0 	bl	8012ad4 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	4802      	ldr	r0, [pc, #8]	; (800f700 <EmitterOFF+0x18>)
 800f6f8:	f004 fae8 	bl	8013ccc <HAL_TIMEx_OCN_Stop_IT>

}
 800f6fc:	bf00      	nop
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	20000b4c 	.word	0x20000b4c

0800f704 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2b07      	cmp	r3, #7
 800f710:	f200 80ac 	bhi.w	800f86c <ChangeLED+0x168>
 800f714:	a201      	add	r2, pc, #4	; (adr r2, 800f71c <ChangeLED+0x18>)
 800f716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f71a:	bf00      	nop
 800f71c:	0800f73d 	.word	0x0800f73d
 800f720:	0800f763 	.word	0x0800f763
 800f724:	0800f789 	.word	0x0800f789
 800f728:	0800f7af 	.word	0x0800f7af
 800f72c:	0800f7d5 	.word	0x0800f7d5
 800f730:	0800f7fb 	.word	0x0800f7fb
 800f734:	0800f821 	.word	0x0800f821
 800f738:	0800f847 	.word	0x0800f847
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f73c:	2200      	movs	r2, #0
 800f73e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f742:	484d      	ldr	r0, [pc, #308]	; (800f878 <ChangeLED+0x174>)
 800f744:	f001 fe96 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f748:	2200      	movs	r2, #0
 800f74a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f74e:	484a      	ldr	r0, [pc, #296]	; (800f878 <ChangeLED+0x174>)
 800f750:	f001 fe90 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f754:	2200      	movs	r2, #0
 800f756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f75a:	4848      	ldr	r0, [pc, #288]	; (800f87c <ChangeLED+0x178>)
 800f75c:	f001 fe8a 	bl	8011474 <HAL_GPIO_WritePin>
		break;
 800f760:	e085      	b.n	800f86e <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f762:	2201      	movs	r2, #1
 800f764:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f768:	4843      	ldr	r0, [pc, #268]	; (800f878 <ChangeLED+0x174>)
 800f76a:	f001 fe83 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f76e:	2200      	movs	r2, #0
 800f770:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f774:	4840      	ldr	r0, [pc, #256]	; (800f878 <ChangeLED+0x174>)
 800f776:	f001 fe7d 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f77a:	2200      	movs	r2, #0
 800f77c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f780:	483e      	ldr	r0, [pc, #248]	; (800f87c <ChangeLED+0x178>)
 800f782:	f001 fe77 	bl	8011474 <HAL_GPIO_WritePin>
		break;
 800f786:	e072      	b.n	800f86e <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f788:	2200      	movs	r2, #0
 800f78a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f78e:	483a      	ldr	r0, [pc, #232]	; (800f878 <ChangeLED+0x174>)
 800f790:	f001 fe70 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f794:	2201      	movs	r2, #1
 800f796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f79a:	4837      	ldr	r0, [pc, #220]	; (800f878 <ChangeLED+0x174>)
 800f79c:	f001 fe6a 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f7a6:	4835      	ldr	r0, [pc, #212]	; (800f87c <ChangeLED+0x178>)
 800f7a8:	f001 fe64 	bl	8011474 <HAL_GPIO_WritePin>

		break;
 800f7ac:	e05f      	b.n	800f86e <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f7b4:	4830      	ldr	r0, [pc, #192]	; (800f878 <ChangeLED+0x174>)
 800f7b6:	f001 fe5d 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f7c0:	482d      	ldr	r0, [pc, #180]	; (800f878 <ChangeLED+0x174>)
 800f7c2:	f001 fe57 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f7cc:	482b      	ldr	r0, [pc, #172]	; (800f87c <ChangeLED+0x178>)
 800f7ce:	f001 fe51 	bl	8011474 <HAL_GPIO_WritePin>
		break;
 800f7d2:	e04c      	b.n	800f86e <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f7da:	4827      	ldr	r0, [pc, #156]	; (800f878 <ChangeLED+0x174>)
 800f7dc:	f001 fe4a 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f7e6:	4824      	ldr	r0, [pc, #144]	; (800f878 <ChangeLED+0x174>)
 800f7e8:	f001 fe44 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f7f2:	4822      	ldr	r0, [pc, #136]	; (800f87c <ChangeLED+0x178>)
 800f7f4:	f001 fe3e 	bl	8011474 <HAL_GPIO_WritePin>
		break;
 800f7f8:	e039      	b.n	800f86e <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f800:	481d      	ldr	r0, [pc, #116]	; (800f878 <ChangeLED+0x174>)
 800f802:	f001 fe37 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f806:	2200      	movs	r2, #0
 800f808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f80c:	481a      	ldr	r0, [pc, #104]	; (800f878 <ChangeLED+0x174>)
 800f80e:	f001 fe31 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f812:	2201      	movs	r2, #1
 800f814:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f818:	4818      	ldr	r0, [pc, #96]	; (800f87c <ChangeLED+0x178>)
 800f81a:	f001 fe2b 	bl	8011474 <HAL_GPIO_WritePin>
		break;
 800f81e:	e026      	b.n	800f86e <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f820:	2200      	movs	r2, #0
 800f822:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f826:	4814      	ldr	r0, [pc, #80]	; (800f878 <ChangeLED+0x174>)
 800f828:	f001 fe24 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f82c:	2201      	movs	r2, #1
 800f82e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f832:	4811      	ldr	r0, [pc, #68]	; (800f878 <ChangeLED+0x174>)
 800f834:	f001 fe1e 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f838:	2201      	movs	r2, #1
 800f83a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f83e:	480f      	ldr	r0, [pc, #60]	; (800f87c <ChangeLED+0x178>)
 800f840:	f001 fe18 	bl	8011474 <HAL_GPIO_WritePin>

		break;
 800f844:	e013      	b.n	800f86e <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f846:	2201      	movs	r2, #1
 800f848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f84c:	480a      	ldr	r0, [pc, #40]	; (800f878 <ChangeLED+0x174>)
 800f84e:	f001 fe11 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f852:	2201      	movs	r2, #1
 800f854:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f858:	4807      	ldr	r0, [pc, #28]	; (800f878 <ChangeLED+0x174>)
 800f85a:	f001 fe0b 	bl	8011474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f85e:	2201      	movs	r2, #1
 800f860:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f864:	4805      	ldr	r0, [pc, #20]	; (800f87c <ChangeLED+0x178>)
 800f866:	f001 fe05 	bl	8011474 <HAL_GPIO_WritePin>

		break;
 800f86a:	e000      	b.n	800f86e <ChangeLED+0x16a>
	default: break;
 800f86c:	bf00      	nop

	}
}
 800f86e:	bf00      	nop
 800f870:	3708      	adds	r7, #8
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	40020800 	.word	0x40020800
 800f87c:	40020400 	.word	0x40020400

0800f880 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800f880:	b580      	push	{r7, lr}
 800f882:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800f884:	210c      	movs	r1, #12
 800f886:	4809      	ldr	r0, [pc, #36]	; (800f8ac <Motor_PWM_Start+0x2c>)
 800f888:	f003 f9f4 	bl	8012c74 <HAL_TIM_PWM_Start>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800f892:	f7fe ffa1 	bl	800e7d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800f896:	2104      	movs	r1, #4
 800f898:	4805      	ldr	r0, [pc, #20]	; (800f8b0 <Motor_PWM_Start+0x30>)
 800f89a:	f003 f9eb 	bl	8012c74 <HAL_TIM_PWM_Start>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d001      	beq.n	800f8a8 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800f8a4:	f7fe ff98 	bl	800e7d8 <Error_Handler>
  }
#endif
}
 800f8a8:	bf00      	nop
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	20000a4c 	.word	0x20000a4c
 800f8b0:	20000b0c 	.word	0x20000b0c

0800f8b4 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800f8b8:	210c      	movs	r1, #12
 800f8ba:	4809      	ldr	r0, [pc, #36]	; (800f8e0 <Motor_PWM_Stop+0x2c>)
 800f8bc:	f003 fa18 	bl	8012cf0 <HAL_TIM_PWM_Stop>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800f8c6:	f7fe ff87 	bl	800e7d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800f8ca:	2104      	movs	r1, #4
 800f8cc:	4805      	ldr	r0, [pc, #20]	; (800f8e4 <Motor_PWM_Stop+0x30>)
 800f8ce:	f003 fa0f 	bl	8012cf0 <HAL_TIM_PWM_Stop>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d001      	beq.n	800f8dc <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800f8d8:	f7fe ff7e 	bl	800e7d8 <Error_Handler>
  }
#endif
}
 800f8dc:	bf00      	nop
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	20000a4c 	.word	0x20000a4c
 800f8e4:	20000b0c 	.word	0x20000b0c

0800f8e8 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dd05      	ble.n	800f904 <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	2104      	movs	r1, #4
 800f8fc:	481f      	ldr	r0, [pc, #124]	; (800f97c <Motor_Switch+0x94>)
 800f8fe:	f001 fdb9 	bl	8011474 <HAL_GPIO_WritePin>
 800f902:	e00a      	b.n	800f91a <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	da07      	bge.n	800f91a <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800f90a:	2200      	movs	r2, #0
 800f90c:	2104      	movs	r1, #4
 800f90e:	481b      	ldr	r0, [pc, #108]	; (800f97c <Motor_Switch+0x94>)
 800f910:	f001 fdb0 	bl	8011474 <HAL_GPIO_WritePin>
		left = -left;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	425b      	negs	r3, r3
 800f918:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	dd05      	ble.n	800f92c <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800f920:	2200      	movs	r2, #0
 800f922:	2101      	movs	r1, #1
 800f924:	4815      	ldr	r0, [pc, #84]	; (800f97c <Motor_Switch+0x94>)
 800f926:	f001 fda5 	bl	8011474 <HAL_GPIO_WritePin>
 800f92a:	e00a      	b.n	800f942 <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	da07      	bge.n	800f942 <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800f932:	2201      	movs	r2, #1
 800f934:	2101      	movs	r1, #1
 800f936:	4811      	ldr	r0, [pc, #68]	; (800f97c <Motor_Switch+0x94>)
 800f938:	f001 fd9c 	bl	8011474 <HAL_GPIO_WritePin>
	  	right = -right;
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	425b      	negs	r3, r3
 800f940:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f640 12d8 	movw	r2, #2520	; 0x9d8
 800f948:	4293      	cmp	r3, r2
 800f94a:	dd02      	ble.n	800f952 <Motor_Switch+0x6a>
 800f94c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800f950:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	f640 12d8 	movw	r2, #2520	; 0x9d8
 800f958:	4293      	cmp	r3, r2
 800f95a:	dd02      	ble.n	800f962 <Motor_Switch+0x7a>
 800f95c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800f960:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800f962:	4b07      	ldr	r3, [pc, #28]	; (800f980 <Motor_Switch+0x98>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800f96a:	4b06      	ldr	r3, [pc, #24]	; (800f984 <Motor_Switch+0x9c>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	683a      	ldr	r2, [r7, #0]
 800f970:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f972:	bf00      	nop
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	40020000 	.word	0x40020000
 800f980:	20000a4c 	.word	0x20000a4c
 800f984:	20000b0c 	.word	0x20000b0c

0800f988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f988:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f9c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f98c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f98e:	e003      	b.n	800f998 <LoopCopyDataInit>

0800f990 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f990:	4b0c      	ldr	r3, [pc, #48]	; (800f9c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f992:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f994:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f996:	3104      	adds	r1, #4

0800f998 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f998:	480b      	ldr	r0, [pc, #44]	; (800f9c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f99a:	4b0c      	ldr	r3, [pc, #48]	; (800f9cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f99c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f99e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f9a0:	d3f6      	bcc.n	800f990 <CopyDataInit>
  ldr  r2, =_sbss
 800f9a2:	4a0b      	ldr	r2, [pc, #44]	; (800f9d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f9a4:	e002      	b.n	800f9ac <LoopFillZerobss>

0800f9a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f9a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f9a8:	f842 3b04 	str.w	r3, [r2], #4

0800f9ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f9ac:	4b09      	ldr	r3, [pc, #36]	; (800f9d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f9ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f9b0:	d3f9      	bcc.n	800f9a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f9b2:	f7ff faab 	bl	800ef0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f9b6:	f005 f9fd 	bl	8014db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f9ba:	f7fe f941 	bl	800dc40 <main>
  bx  lr    
 800f9be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f9c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f9c4:	0801ac3c 	.word	0x0801ac3c
  ldr  r0, =_sdata
 800f9c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f9cc:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800f9d0:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800f9d4:	20000c20 	.word	0x20000c20

0800f9d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f9d8:	e7fe      	b.n	800f9d8 <ADC_IRQHandler>
	...

0800f9dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f9e0:	4b0e      	ldr	r3, [pc, #56]	; (800fa1c <HAL_Init+0x40>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	4a0d      	ldr	r2, [pc, #52]	; (800fa1c <HAL_Init+0x40>)
 800f9e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f9ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f9ec:	4b0b      	ldr	r3, [pc, #44]	; (800fa1c <HAL_Init+0x40>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a0a      	ldr	r2, [pc, #40]	; (800fa1c <HAL_Init+0x40>)
 800f9f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f9f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f9f8:	4b08      	ldr	r3, [pc, #32]	; (800fa1c <HAL_Init+0x40>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a07      	ldr	r2, [pc, #28]	; (800fa1c <HAL_Init+0x40>)
 800f9fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fa04:	2003      	movs	r0, #3
 800fa06:	f000 fd8d 	bl	8010524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	f000 f808 	bl	800fa20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800fa10:	f7fe fee8 	bl	800e7e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	40023c00 	.word	0x40023c00

0800fa20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800fa28:	4b12      	ldr	r3, [pc, #72]	; (800fa74 <HAL_InitTick+0x54>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	4b12      	ldr	r3, [pc, #72]	; (800fa78 <HAL_InitTick+0x58>)
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	4619      	mov	r1, r3
 800fa32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa36:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 fda5 	bl	801058e <HAL_SYSTICK_Config>
 800fa44:	4603      	mov	r3, r0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d001      	beq.n	800fa4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e00e      	b.n	800fa6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b0f      	cmp	r3, #15
 800fa52:	d80a      	bhi.n	800fa6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fa54:	2200      	movs	r2, #0
 800fa56:	6879      	ldr	r1, [r7, #4]
 800fa58:	f04f 30ff 	mov.w	r0, #4294967295
 800fa5c:	f000 fd6d 	bl	801053a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fa60:	4a06      	ldr	r2, [pc, #24]	; (800fa7c <HAL_InitTick+0x5c>)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fa66:	2300      	movs	r3, #0
 800fa68:	e000      	b.n	800fa6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800fa6a:	2301      	movs	r3, #1
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	2000001c 	.word	0x2000001c
 800fa78:	20000024 	.word	0x20000024
 800fa7c:	20000020 	.word	0x20000020

0800fa80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fa80:	b480      	push	{r7}
 800fa82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fa84:	4b06      	ldr	r3, [pc, #24]	; (800faa0 <HAL_IncTick+0x20>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4b06      	ldr	r3, [pc, #24]	; (800faa4 <HAL_IncTick+0x24>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4413      	add	r3, r2
 800fa90:	4a04      	ldr	r2, [pc, #16]	; (800faa4 <HAL_IncTick+0x24>)
 800fa92:	6013      	str	r3, [r2, #0]
}
 800fa94:	bf00      	nop
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	20000024 	.word	0x20000024
 800faa4:	20000bec 	.word	0x20000bec

0800faa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800faa8:	b480      	push	{r7}
 800faaa:	af00      	add	r7, sp, #0
  return uwTick;
 800faac:	4b03      	ldr	r3, [pc, #12]	; (800fabc <HAL_GetTick+0x14>)
 800faae:	681b      	ldr	r3, [r3, #0]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	20000bec 	.word	0x20000bec

0800fac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fac8:	f7ff ffee 	bl	800faa8 <HAL_GetTick>
 800facc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad8:	d005      	beq.n	800fae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800fada:	4b0a      	ldr	r3, [pc, #40]	; (800fb04 <HAL_Delay+0x44>)
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	461a      	mov	r2, r3
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4413      	add	r3, r2
 800fae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800fae6:	bf00      	nop
 800fae8:	f7ff ffde 	bl	800faa8 <HAL_GetTick>
 800faec:	4602      	mov	r2, r0
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	1ad3      	subs	r3, r2, r3
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d8f7      	bhi.n	800fae8 <HAL_Delay+0x28>
  {
  }
}
 800faf8:	bf00      	nop
 800fafa:	bf00      	nop
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	20000024 	.word	0x20000024

0800fb08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e033      	b.n	800fb86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d109      	bne.n	800fb3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7fe fe84 	bl	800e834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2200      	movs	r2, #0
 800fb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb3e:	f003 0310 	and.w	r3, r3, #16
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d118      	bne.n	800fb78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800fb4e:	f023 0302 	bic.w	r3, r3, #2
 800fb52:	f043 0202 	orr.w	r2, r3, #2
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 fa94 	bl	8010088 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb6a:	f023 0303 	bic.w	r3, r3, #3
 800fb6e:	f043 0201 	orr.w	r2, r3, #1
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	641a      	str	r2, [r3, #64]	; 0x40
 800fb76:	e001      	b.n	800fb7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800fb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3710      	adds	r7, #16
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
	...

0800fb90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d101      	bne.n	800fbae <HAL_ADC_Start_DMA+0x1e>
 800fbaa:	2302      	movs	r3, #2
 800fbac:	e0cc      	b.n	800fd48 <HAL_ADC_Start_DMA+0x1b8>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	f003 0301 	and.w	r3, r3, #1
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d018      	beq.n	800fbf6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	689a      	ldr	r2, [r3, #8]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f042 0201 	orr.w	r2, r2, #1
 800fbd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800fbd4:	4b5e      	ldr	r3, [pc, #376]	; (800fd50 <HAL_ADC_Start_DMA+0x1c0>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a5e      	ldr	r2, [pc, #376]	; (800fd54 <HAL_ADC_Start_DMA+0x1c4>)
 800fbda:	fba2 2303 	umull	r2, r3, r2, r3
 800fbde:	0c9a      	lsrs	r2, r3, #18
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	4413      	add	r3, r2
 800fbe6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800fbe8:	e002      	b.n	800fbf0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	3b01      	subs	r3, #1
 800fbee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d1f9      	bne.n	800fbea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	f003 0301 	and.w	r3, r3, #1
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	f040 80a0 	bne.w	800fd46 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800fc0e:	f023 0301 	bic.w	r3, r3, #1
 800fc12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d007      	beq.n	800fc38 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800fc30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc44:	d106      	bne.n	800fc54 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc4a:	f023 0206 	bic.w	r2, r3, #6
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	645a      	str	r2, [r3, #68]	; 0x44
 800fc52:	e002      	b.n	800fc5a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2200      	movs	r2, #0
 800fc58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fc62:	4b3d      	ldr	r3, [pc, #244]	; (800fd58 <HAL_ADC_Start_DMA+0x1c8>)
 800fc64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc6a:	4a3c      	ldr	r2, [pc, #240]	; (800fd5c <HAL_ADC_Start_DMA+0x1cc>)
 800fc6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc72:	4a3b      	ldr	r2, [pc, #236]	; (800fd60 <HAL_ADC_Start_DMA+0x1d0>)
 800fc74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc7a:	4a3a      	ldr	r2, [pc, #232]	; (800fd64 <HAL_ADC_Start_DMA+0x1d4>)
 800fc7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800fc86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	685a      	ldr	r2, [r3, #4]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fc96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	689a      	ldr	r2, [r3, #8]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fca6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	334c      	adds	r3, #76	; 0x4c
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f000 fd24 	bl	8010704 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	f003 031f 	and.w	r3, r3, #31
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d12a      	bne.n	800fd1e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a26      	ldr	r2, [pc, #152]	; (800fd68 <HAL_ADC_Start_DMA+0x1d8>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d015      	beq.n	800fcfe <HAL_ADC_Start_DMA+0x16e>
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a25      	ldr	r2, [pc, #148]	; (800fd6c <HAL_ADC_Start_DMA+0x1dc>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d105      	bne.n	800fce8 <HAL_ADC_Start_DMA+0x158>
 800fcdc:	4b1e      	ldr	r3, [pc, #120]	; (800fd58 <HAL_ADC_Start_DMA+0x1c8>)
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	f003 031f 	and.w	r3, r3, #31
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00a      	beq.n	800fcfe <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4a20      	ldr	r2, [pc, #128]	; (800fd70 <HAL_ADC_Start_DMA+0x1e0>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d129      	bne.n	800fd46 <HAL_ADC_Start_DMA+0x1b6>
 800fcf2:	4b19      	ldr	r3, [pc, #100]	; (800fd58 <HAL_ADC_Start_DMA+0x1c8>)
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	f003 0310 	and.w	r3, r3, #16
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d123      	bne.n	800fd46 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d11c      	bne.n	800fd46 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	689a      	ldr	r2, [r3, #8]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800fd1a:	609a      	str	r2, [r3, #8]
 800fd1c:	e013      	b.n	800fd46 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a11      	ldr	r2, [pc, #68]	; (800fd68 <HAL_ADC_Start_DMA+0x1d8>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d10e      	bne.n	800fd46 <HAL_ADC_Start_DMA+0x1b6>
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d107      	bne.n	800fd46 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	689a      	ldr	r2, [r3, #8]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800fd44:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3718      	adds	r7, #24
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	2000001c 	.word	0x2000001c
 800fd54:	431bde83 	.word	0x431bde83
 800fd58:	40012300 	.word	0x40012300
 800fd5c:	08010281 	.word	0x08010281
 800fd60:	0801033b 	.word	0x0801033b
 800fd64:	08010357 	.word	0x08010357
 800fd68:	40012000 	.word	0x40012000
 800fd6c:	40012100 	.word	0x40012100
 800fd70:	40012200 	.word	0x40012200

0800fd74 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d101      	bne.n	800fd8e <HAL_ADC_Stop_DMA+0x1a>
 800fd8a:	2302      	movs	r3, #2
 800fd8c:	e038      	b.n	800fe00 <HAL_ADC_Stop_DMA+0x8c>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2201      	movs	r2, #1
 800fd92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	689a      	ldr	r2, [r3, #8]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f022 0201 	bic.w	r2, r2, #1
 800fda4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	f003 0301 	and.w	r3, r3, #1
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d120      	bne.n	800fdf6 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	689a      	ldr	r2, [r3, #8]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fdc2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 fcf3 	bl	80107b4 <HAL_DMA_Abort>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	685a      	ldr	r2, [r3, #4]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800fde0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800fdea:	f023 0301 	bic.w	r3, r3, #1
 800fdee:	f043 0201 	orr.w	r2, r3, #1
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800fdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800fe10:	bf00      	nop
 800fe12:	370c      	adds	r7, #12
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800fe24:	bf00      	nop
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800fe38:	bf00      	nop
 800fe3a:	370c      	adds	r7, #12
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b085      	sub	sp, #20
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d101      	bne.n	800fe60 <HAL_ADC_ConfigChannel+0x1c>
 800fe5c:	2302      	movs	r3, #2
 800fe5e:	e105      	b.n	801006c <HAL_ADC_ConfigChannel+0x228>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2201      	movs	r2, #1
 800fe64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	2b09      	cmp	r3, #9
 800fe6e:	d925      	bls.n	800febc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	68d9      	ldr	r1, [r3, #12]
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	4613      	mov	r3, r2
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	4413      	add	r3, r2
 800fe84:	3b1e      	subs	r3, #30
 800fe86:	2207      	movs	r2, #7
 800fe88:	fa02 f303 	lsl.w	r3, r2, r3
 800fe8c:	43da      	mvns	r2, r3
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	400a      	ands	r2, r1
 800fe94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	68d9      	ldr	r1, [r3, #12]
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	689a      	ldr	r2, [r3, #8]
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	4618      	mov	r0, r3
 800fea8:	4603      	mov	r3, r0
 800feaa:	005b      	lsls	r3, r3, #1
 800feac:	4403      	add	r3, r0
 800feae:	3b1e      	subs	r3, #30
 800feb0:	409a      	lsls	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	430a      	orrs	r2, r1
 800feb8:	60da      	str	r2, [r3, #12]
 800feba:	e022      	b.n	800ff02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	6919      	ldr	r1, [r3, #16]
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	461a      	mov	r2, r3
 800feca:	4613      	mov	r3, r2
 800fecc:	005b      	lsls	r3, r3, #1
 800fece:	4413      	add	r3, r2
 800fed0:	2207      	movs	r2, #7
 800fed2:	fa02 f303 	lsl.w	r3, r2, r3
 800fed6:	43da      	mvns	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	400a      	ands	r2, r1
 800fede:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	6919      	ldr	r1, [r3, #16]
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	689a      	ldr	r2, [r3, #8]
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	b29b      	uxth	r3, r3
 800fef0:	4618      	mov	r0, r3
 800fef2:	4603      	mov	r3, r0
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	4403      	add	r3, r0
 800fef8:	409a      	lsls	r2, r3
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	430a      	orrs	r2, r1
 800ff00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	2b06      	cmp	r3, #6
 800ff08:	d824      	bhi.n	800ff54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	4613      	mov	r3, r2
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	4413      	add	r3, r2
 800ff1a:	3b05      	subs	r3, #5
 800ff1c:	221f      	movs	r2, #31
 800ff1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ff22:	43da      	mvns	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	400a      	ands	r2, r1
 800ff2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	4618      	mov	r0, r3
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	685a      	ldr	r2, [r3, #4]
 800ff3e:	4613      	mov	r3, r2
 800ff40:	009b      	lsls	r3, r3, #2
 800ff42:	4413      	add	r3, r2
 800ff44:	3b05      	subs	r3, #5
 800ff46:	fa00 f203 	lsl.w	r2, r0, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	635a      	str	r2, [r3, #52]	; 0x34
 800ff52:	e04c      	b.n	800ffee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	2b0c      	cmp	r3, #12
 800ff5a:	d824      	bhi.n	800ffa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	685a      	ldr	r2, [r3, #4]
 800ff66:	4613      	mov	r3, r2
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	4413      	add	r3, r2
 800ff6c:	3b23      	subs	r3, #35	; 0x23
 800ff6e:	221f      	movs	r2, #31
 800ff70:	fa02 f303 	lsl.w	r3, r2, r3
 800ff74:	43da      	mvns	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	400a      	ands	r2, r1
 800ff7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	4613      	mov	r3, r2
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	4413      	add	r3, r2
 800ff96:	3b23      	subs	r3, #35	; 0x23
 800ff98:	fa00 f203 	lsl.w	r2, r0, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	430a      	orrs	r2, r1
 800ffa2:	631a      	str	r2, [r3, #48]	; 0x30
 800ffa4:	e023      	b.n	800ffee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	685a      	ldr	r2, [r3, #4]
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	3b41      	subs	r3, #65	; 0x41
 800ffb8:	221f      	movs	r2, #31
 800ffba:	fa02 f303 	lsl.w	r3, r2, r3
 800ffbe:	43da      	mvns	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	400a      	ands	r2, r1
 800ffc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	685a      	ldr	r2, [r3, #4]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4413      	add	r3, r2
 800ffe0:	3b41      	subs	r3, #65	; 0x41
 800ffe2:	fa00 f203 	lsl.w	r2, r0, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	430a      	orrs	r2, r1
 800ffec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ffee:	4b22      	ldr	r3, [pc, #136]	; (8010078 <HAL_ADC_ConfigChannel+0x234>)
 800fff0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a21      	ldr	r2, [pc, #132]	; (801007c <HAL_ADC_ConfigChannel+0x238>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d109      	bne.n	8010010 <HAL_ADC_ConfigChannel+0x1cc>
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b12      	cmp	r3, #18
 8010002:	d105      	bne.n	8010010 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	4a19      	ldr	r2, [pc, #100]	; (801007c <HAL_ADC_ConfigChannel+0x238>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d123      	bne.n	8010062 <HAL_ADC_ConfigChannel+0x21e>
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b10      	cmp	r3, #16
 8010020:	d003      	beq.n	801002a <HAL_ADC_ConfigChannel+0x1e6>
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2b11      	cmp	r3, #17
 8010028:	d11b      	bne.n	8010062 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b10      	cmp	r3, #16
 801003c:	d111      	bne.n	8010062 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801003e:	4b10      	ldr	r3, [pc, #64]	; (8010080 <HAL_ADC_ConfigChannel+0x23c>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4a10      	ldr	r2, [pc, #64]	; (8010084 <HAL_ADC_ConfigChannel+0x240>)
 8010044:	fba2 2303 	umull	r2, r3, r2, r3
 8010048:	0c9a      	lsrs	r2, r3, #18
 801004a:	4613      	mov	r3, r2
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	4413      	add	r3, r2
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010054:	e002      	b.n	801005c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	3b01      	subs	r3, #1
 801005a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1f9      	bne.n	8010056 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801006a:	2300      	movs	r3, #0
}
 801006c:	4618      	mov	r0, r3
 801006e:	3714      	adds	r7, #20
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	40012300 	.word	0x40012300
 801007c:	40012000 	.word	0x40012000
 8010080:	2000001c 	.word	0x2000001c
 8010084:	431bde83 	.word	0x431bde83

08010088 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010088:	b480      	push	{r7}
 801008a:	b085      	sub	sp, #20
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010090:	4b79      	ldr	r3, [pc, #484]	; (8010278 <ADC_Init+0x1f0>)
 8010092:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	685a      	ldr	r2, [r3, #4]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	431a      	orrs	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	685a      	ldr	r2, [r3, #4]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80100bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6859      	ldr	r1, [r3, #4]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	021a      	lsls	r2, r3, #8
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	430a      	orrs	r2, r1
 80100d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	685a      	ldr	r2, [r3, #4]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80100e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6859      	ldr	r1, [r3, #4]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	689a      	ldr	r2, [r3, #8]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	430a      	orrs	r2, r1
 80100f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	689a      	ldr	r2, [r3, #8]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	6899      	ldr	r1, [r3, #8]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	68da      	ldr	r2, [r3, #12]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	430a      	orrs	r2, r1
 8010114:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801011a:	4a58      	ldr	r2, [pc, #352]	; (801027c <ADC_Init+0x1f4>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d022      	beq.n	8010166 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	689a      	ldr	r2, [r3, #8]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801012e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	6899      	ldr	r1, [r3, #8]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	430a      	orrs	r2, r1
 8010140:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	689a      	ldr	r2, [r3, #8]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6899      	ldr	r1, [r3, #8]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	430a      	orrs	r2, r1
 8010162:	609a      	str	r2, [r3, #8]
 8010164:	e00f      	b.n	8010186 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	689a      	ldr	r2, [r3, #8]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	689a      	ldr	r2, [r3, #8]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010184:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	689a      	ldr	r2, [r3, #8]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	f022 0202 	bic.w	r2, r2, #2
 8010194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6899      	ldr	r1, [r3, #8]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	7e1b      	ldrb	r3, [r3, #24]
 80101a0:	005a      	lsls	r2, r3, #1
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	430a      	orrs	r2, r1
 80101a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d01b      	beq.n	80101ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	685a      	ldr	r2, [r3, #4]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	685a      	ldr	r2, [r3, #4]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80101d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	6859      	ldr	r1, [r3, #4]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101de:	3b01      	subs	r3, #1
 80101e0:	035a      	lsls	r2, r3, #13
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	430a      	orrs	r2, r1
 80101e8:	605a      	str	r2, [r3, #4]
 80101ea:	e007      	b.n	80101fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	685a      	ldr	r2, [r3, #4]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80101fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801020a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	69db      	ldr	r3, [r3, #28]
 8010216:	3b01      	subs	r3, #1
 8010218:	051a      	lsls	r2, r3, #20
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	430a      	orrs	r2, r1
 8010220:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	689a      	ldr	r2, [r3, #8]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	6899      	ldr	r1, [r3, #8]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801023e:	025a      	lsls	r2, r3, #9
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	430a      	orrs	r2, r1
 8010246:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	689a      	ldr	r2, [r3, #8]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	6899      	ldr	r1, [r3, #8]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	695b      	ldr	r3, [r3, #20]
 8010262:	029a      	lsls	r2, r3, #10
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	430a      	orrs	r2, r1
 801026a:	609a      	str	r2, [r3, #8]
}
 801026c:	bf00      	nop
 801026e:	3714      	adds	r7, #20
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr
 8010278:	40012300 	.word	0x40012300
 801027c:	0f000001 	.word	0x0f000001

08010280 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b084      	sub	sp, #16
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801028c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010292:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010296:	2b00      	cmp	r3, #0
 8010298:	d13c      	bne.n	8010314 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801029e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d12b      	bne.n	801030c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d127      	bne.n	801030c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d006      	beq.n	80102d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d119      	bne.n	801030c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	685a      	ldr	r2, [r3, #4]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	f022 0220 	bic.w	r2, r2, #32
 80102e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d105      	bne.n	801030c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010304:	f043 0201 	orr.w	r2, r3, #1
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f7ff fd7b 	bl	800fe08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010312:	e00e      	b.n	8010332 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010318:	f003 0310 	and.w	r3, r3, #16
 801031c:	2b00      	cmp	r3, #0
 801031e:	d003      	beq.n	8010328 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	f7ff fd85 	bl	800fe30 <HAL_ADC_ErrorCallback>
}
 8010326:	e004      	b.n	8010332 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	4798      	blx	r3
}
 8010332:	bf00      	nop
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b084      	sub	sp, #16
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010346:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	f7ff fd67 	bl	800fe1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801034e:	bf00      	nop
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b084      	sub	sp, #16
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010362:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2240      	movs	r2, #64	; 0x40
 8010368:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801036e:	f043 0204 	orr.w	r2, r3, #4
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f7ff fd5a 	bl	800fe30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801037c:	bf00      	nop
 801037e:	3710      	adds	r7, #16
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f003 0307 	and.w	r3, r3, #7
 8010392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010394:	4b0c      	ldr	r3, [pc, #48]	; (80103c8 <__NVIC_SetPriorityGrouping+0x44>)
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801039a:	68ba      	ldr	r2, [r7, #8]
 801039c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80103a0:	4013      	ands	r3, r2
 80103a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80103ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80103b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80103b6:	4a04      	ldr	r2, [pc, #16]	; (80103c8 <__NVIC_SetPriorityGrouping+0x44>)
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	60d3      	str	r3, [r2, #12]
}
 80103bc:	bf00      	nop
 80103be:	3714      	adds	r7, #20
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr
 80103c8:	e000ed00 	.word	0xe000ed00

080103cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80103cc:	b480      	push	{r7}
 80103ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80103d0:	4b04      	ldr	r3, [pc, #16]	; (80103e4 <__NVIC_GetPriorityGrouping+0x18>)
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	0a1b      	lsrs	r3, r3, #8
 80103d6:	f003 0307 	and.w	r3, r3, #7
}
 80103da:	4618      	mov	r0, r3
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr
 80103e4:	e000ed00 	.word	0xe000ed00

080103e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80103f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	db0b      	blt.n	8010412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80103fa:	79fb      	ldrb	r3, [r7, #7]
 80103fc:	f003 021f 	and.w	r2, r3, #31
 8010400:	4907      	ldr	r1, [pc, #28]	; (8010420 <__NVIC_EnableIRQ+0x38>)
 8010402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010406:	095b      	lsrs	r3, r3, #5
 8010408:	2001      	movs	r0, #1
 801040a:	fa00 f202 	lsl.w	r2, r0, r2
 801040e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010412:	bf00      	nop
 8010414:	370c      	adds	r7, #12
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	e000e100 	.word	0xe000e100

08010424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	4603      	mov	r3, r0
 801042c:	6039      	str	r1, [r7, #0]
 801042e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010434:	2b00      	cmp	r3, #0
 8010436:	db0a      	blt.n	801044e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	b2da      	uxtb	r2, r3
 801043c:	490c      	ldr	r1, [pc, #48]	; (8010470 <__NVIC_SetPriority+0x4c>)
 801043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010442:	0112      	lsls	r2, r2, #4
 8010444:	b2d2      	uxtb	r2, r2
 8010446:	440b      	add	r3, r1
 8010448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801044c:	e00a      	b.n	8010464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	b2da      	uxtb	r2, r3
 8010452:	4908      	ldr	r1, [pc, #32]	; (8010474 <__NVIC_SetPriority+0x50>)
 8010454:	79fb      	ldrb	r3, [r7, #7]
 8010456:	f003 030f 	and.w	r3, r3, #15
 801045a:	3b04      	subs	r3, #4
 801045c:	0112      	lsls	r2, r2, #4
 801045e:	b2d2      	uxtb	r2, r2
 8010460:	440b      	add	r3, r1
 8010462:	761a      	strb	r2, [r3, #24]
}
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr
 8010470:	e000e100 	.word	0xe000e100
 8010474:	e000ed00 	.word	0xe000ed00

08010478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010478:	b480      	push	{r7}
 801047a:	b089      	sub	sp, #36	; 0x24
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f003 0307 	and.w	r3, r3, #7
 801048a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	f1c3 0307 	rsb	r3, r3, #7
 8010492:	2b04      	cmp	r3, #4
 8010494:	bf28      	it	cs
 8010496:	2304      	movcs	r3, #4
 8010498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	3304      	adds	r3, #4
 801049e:	2b06      	cmp	r3, #6
 80104a0:	d902      	bls.n	80104a8 <NVIC_EncodePriority+0x30>
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	3b03      	subs	r3, #3
 80104a6:	e000      	b.n	80104aa <NVIC_EncodePriority+0x32>
 80104a8:	2300      	movs	r3, #0
 80104aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80104ac:	f04f 32ff 	mov.w	r2, #4294967295
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	fa02 f303 	lsl.w	r3, r2, r3
 80104b6:	43da      	mvns	r2, r3
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	401a      	ands	r2, r3
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80104c0:	f04f 31ff 	mov.w	r1, #4294967295
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	fa01 f303 	lsl.w	r3, r1, r3
 80104ca:	43d9      	mvns	r1, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80104d0:	4313      	orrs	r3, r2
         );
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3724      	adds	r7, #36	; 0x24
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr
	...

080104e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80104f0:	d301      	bcc.n	80104f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80104f2:	2301      	movs	r3, #1
 80104f4:	e00f      	b.n	8010516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80104f6:	4a0a      	ldr	r2, [pc, #40]	; (8010520 <SysTick_Config+0x40>)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	3b01      	subs	r3, #1
 80104fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80104fe:	210f      	movs	r1, #15
 8010500:	f04f 30ff 	mov.w	r0, #4294967295
 8010504:	f7ff ff8e 	bl	8010424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010508:	4b05      	ldr	r3, [pc, #20]	; (8010520 <SysTick_Config+0x40>)
 801050a:	2200      	movs	r2, #0
 801050c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801050e:	4b04      	ldr	r3, [pc, #16]	; (8010520 <SysTick_Config+0x40>)
 8010510:	2207      	movs	r2, #7
 8010512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	e000e010 	.word	0xe000e010

08010524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7ff ff29 	bl	8010384 <__NVIC_SetPriorityGrouping>
}
 8010532:	bf00      	nop
 8010534:	3708      	adds	r7, #8
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}

0801053a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801053a:	b580      	push	{r7, lr}
 801053c:	b086      	sub	sp, #24
 801053e:	af00      	add	r7, sp, #0
 8010540:	4603      	mov	r3, r0
 8010542:	60b9      	str	r1, [r7, #8]
 8010544:	607a      	str	r2, [r7, #4]
 8010546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010548:	2300      	movs	r3, #0
 801054a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801054c:	f7ff ff3e 	bl	80103cc <__NVIC_GetPriorityGrouping>
 8010550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010552:	687a      	ldr	r2, [r7, #4]
 8010554:	68b9      	ldr	r1, [r7, #8]
 8010556:	6978      	ldr	r0, [r7, #20]
 8010558:	f7ff ff8e 	bl	8010478 <NVIC_EncodePriority>
 801055c:	4602      	mov	r2, r0
 801055e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010562:	4611      	mov	r1, r2
 8010564:	4618      	mov	r0, r3
 8010566:	f7ff ff5d 	bl	8010424 <__NVIC_SetPriority>
}
 801056a:	bf00      	nop
 801056c:	3718      	adds	r7, #24
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b082      	sub	sp, #8
 8010576:	af00      	add	r7, sp, #0
 8010578:	4603      	mov	r3, r0
 801057a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010580:	4618      	mov	r0, r3
 8010582:	f7ff ff31 	bl	80103e8 <__NVIC_EnableIRQ>
}
 8010586:	bf00      	nop
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b082      	sub	sp, #8
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7ff ffa2 	bl	80104e0 <SysTick_Config>
 801059c:	4603      	mov	r3, r0
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
	...

080105a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b086      	sub	sp, #24
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80105b0:	2300      	movs	r3, #0
 80105b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80105b4:	f7ff fa78 	bl	800faa8 <HAL_GetTick>
 80105b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d101      	bne.n	80105c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80105c0:	2301      	movs	r3, #1
 80105c2:	e099      	b.n	80106f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2202      	movs	r2, #2
 80105d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f022 0201 	bic.w	r2, r2, #1
 80105e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80105e4:	e00f      	b.n	8010606 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80105e6:	f7ff fa5f 	bl	800faa8 <HAL_GetTick>
 80105ea:	4602      	mov	r2, r0
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	1ad3      	subs	r3, r2, r3
 80105f0:	2b05      	cmp	r3, #5
 80105f2:	d908      	bls.n	8010606 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2220      	movs	r2, #32
 80105f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2203      	movs	r2, #3
 80105fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8010602:	2303      	movs	r3, #3
 8010604:	e078      	b.n	80106f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f003 0301 	and.w	r3, r3, #1
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1e8      	bne.n	80105e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801061c:	697a      	ldr	r2, [r7, #20]
 801061e:	4b38      	ldr	r3, [pc, #224]	; (8010700 <HAL_DMA_Init+0x158>)
 8010620:	4013      	ands	r3, r2
 8010622:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	685a      	ldr	r2, [r3, #4]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010632:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	691b      	ldr	r3, [r3, #16]
 8010638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801063e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	699b      	ldr	r3, [r3, #24]
 8010644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801064a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6a1b      	ldr	r3, [r3, #32]
 8010650:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010652:	697a      	ldr	r2, [r7, #20]
 8010654:	4313      	orrs	r3, r2
 8010656:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801065c:	2b04      	cmp	r3, #4
 801065e:	d107      	bne.n	8010670 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010668:	4313      	orrs	r3, r2
 801066a:	697a      	ldr	r2, [r7, #20]
 801066c:	4313      	orrs	r3, r2
 801066e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	697a      	ldr	r2, [r7, #20]
 8010676:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	695b      	ldr	r3, [r3, #20]
 801067e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	f023 0307 	bic.w	r3, r3, #7
 8010686:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068c:	697a      	ldr	r2, [r7, #20]
 801068e:	4313      	orrs	r3, r2
 8010690:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010696:	2b04      	cmp	r3, #4
 8010698:	d117      	bne.n	80106ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801069e:	697a      	ldr	r2, [r7, #20]
 80106a0:	4313      	orrs	r3, r2
 80106a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00e      	beq.n	80106ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 fadf 	bl	8010c70 <DMA_CheckFifoParam>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d008      	beq.n	80106ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2240      	movs	r2, #64	; 0x40
 80106bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2201      	movs	r2, #1
 80106c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80106c6:	2301      	movs	r3, #1
 80106c8:	e016      	b.n	80106f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	697a      	ldr	r2, [r7, #20]
 80106d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 fa96 	bl	8010c04 <DMA_CalcBaseAndBitshift>
 80106d8:	4603      	mov	r3, r0
 80106da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106e0:	223f      	movs	r2, #63	; 0x3f
 80106e2:	409a      	lsls	r2, r3
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2201      	movs	r2, #1
 80106f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80106f6:	2300      	movs	r3, #0
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3718      	adds	r7, #24
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	f010803f 	.word	0xf010803f

08010704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801071a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010722:	2b01      	cmp	r3, #1
 8010724:	d101      	bne.n	801072a <HAL_DMA_Start_IT+0x26>
 8010726:	2302      	movs	r3, #2
 8010728:	e040      	b.n	80107ac <HAL_DMA_Start_IT+0xa8>
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2201      	movs	r2, #1
 801072e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010738:	b2db      	uxtb	r3, r3
 801073a:	2b01      	cmp	r3, #1
 801073c:	d12f      	bne.n	801079e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2202      	movs	r2, #2
 8010742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	2200      	movs	r2, #0
 801074a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	687a      	ldr	r2, [r7, #4]
 8010750:	68b9      	ldr	r1, [r7, #8]
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f000 fa28 	bl	8010ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801075c:	223f      	movs	r2, #63	; 0x3f
 801075e:	409a      	lsls	r2, r3
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f042 0216 	orr.w	r2, r2, #22
 8010772:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010778:	2b00      	cmp	r3, #0
 801077a:	d007      	beq.n	801078c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f042 0208 	orr.w	r2, r2, #8
 801078a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f042 0201 	orr.w	r2, r2, #1
 801079a:	601a      	str	r2, [r3, #0]
 801079c:	e005      	b.n	80107aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2200      	movs	r2, #0
 80107a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80107a6:	2302      	movs	r3, #2
 80107a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80107aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3718      	adds	r7, #24
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80107c2:	f7ff f971 	bl	800faa8 <HAL_GetTick>
 80107c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	d008      	beq.n	80107e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2280      	movs	r2, #128	; 0x80
 80107d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	e052      	b.n	801088c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f022 0216 	bic.w	r2, r2, #22
 80107f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	695a      	ldr	r2, [r3, #20]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010804:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801080a:	2b00      	cmp	r3, #0
 801080c:	d103      	bne.n	8010816 <HAL_DMA_Abort+0x62>
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010812:	2b00      	cmp	r3, #0
 8010814:	d007      	beq.n	8010826 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f022 0208 	bic.w	r2, r2, #8
 8010824:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f022 0201 	bic.w	r2, r2, #1
 8010834:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010836:	e013      	b.n	8010860 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010838:	f7ff f936 	bl	800faa8 <HAL_GetTick>
 801083c:	4602      	mov	r2, r0
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	2b05      	cmp	r3, #5
 8010844:	d90c      	bls.n	8010860 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2220      	movs	r2, #32
 801084a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2203      	movs	r2, #3
 8010858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 801085c:	2303      	movs	r3, #3
 801085e:	e015      	b.n	801088c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f003 0301 	and.w	r3, r3, #1
 801086a:	2b00      	cmp	r3, #0
 801086c:	d1e4      	bne.n	8010838 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010872:	223f      	movs	r2, #63	; 0x3f
 8010874:	409a      	lsls	r2, r3
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2200      	movs	r2, #0
 801087e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2201      	movs	r2, #1
 8010886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 801088a:	2300      	movs	r3, #0
}
 801088c:	4618      	mov	r0, r3
 801088e:	3710      	adds	r7, #16
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801089c:	2300      	movs	r3, #0
 801089e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80108a0:	4b8e      	ldr	r3, [pc, #568]	; (8010adc <HAL_DMA_IRQHandler+0x248>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a8e      	ldr	r2, [pc, #568]	; (8010ae0 <HAL_DMA_IRQHandler+0x24c>)
 80108a6:	fba2 2303 	umull	r2, r3, r2, r3
 80108aa:	0a9b      	lsrs	r3, r3, #10
 80108ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108be:	2208      	movs	r2, #8
 80108c0:	409a      	lsls	r2, r3
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	4013      	ands	r3, r2
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d01a      	beq.n	8010900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f003 0304 	and.w	r3, r3, #4
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d013      	beq.n	8010900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f022 0204 	bic.w	r2, r2, #4
 80108e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108ec:	2208      	movs	r2, #8
 80108ee:	409a      	lsls	r2, r3
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108f8:	f043 0201 	orr.w	r2, r3, #1
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010904:	2201      	movs	r2, #1
 8010906:	409a      	lsls	r2, r3
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	4013      	ands	r3, r2
 801090c:	2b00      	cmp	r3, #0
 801090e:	d012      	beq.n	8010936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	695b      	ldr	r3, [r3, #20]
 8010916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00b      	beq.n	8010936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010922:	2201      	movs	r2, #1
 8010924:	409a      	lsls	r2, r3
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801092e:	f043 0202 	orr.w	r2, r3, #2
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801093a:	2204      	movs	r2, #4
 801093c:	409a      	lsls	r2, r3
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	4013      	ands	r3, r2
 8010942:	2b00      	cmp	r3, #0
 8010944:	d012      	beq.n	801096c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f003 0302 	and.w	r3, r3, #2
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00b      	beq.n	801096c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010958:	2204      	movs	r2, #4
 801095a:	409a      	lsls	r2, r3
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010964:	f043 0204 	orr.w	r2, r3, #4
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010970:	2210      	movs	r2, #16
 8010972:	409a      	lsls	r2, r3
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	4013      	ands	r3, r2
 8010978:	2b00      	cmp	r3, #0
 801097a:	d043      	beq.n	8010a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f003 0308 	and.w	r3, r3, #8
 8010986:	2b00      	cmp	r3, #0
 8010988:	d03c      	beq.n	8010a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801098e:	2210      	movs	r2, #16
 8010990:	409a      	lsls	r2, r3
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d018      	beq.n	80109d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d108      	bne.n	80109c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d024      	beq.n	8010a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	4798      	blx	r3
 80109c2:	e01f      	b.n	8010a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d01b      	beq.n	8010a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	4798      	blx	r3
 80109d4:	e016      	b.n	8010a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d107      	bne.n	80109f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f022 0208 	bic.w	r2, r2, #8
 80109f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d003      	beq.n	8010a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a08:	2220      	movs	r2, #32
 8010a0a:	409a      	lsls	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	4013      	ands	r3, r2
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	f000 808f 	beq.w	8010b34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f003 0310 	and.w	r3, r3, #16
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 8087 	beq.w	8010b34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a2a:	2220      	movs	r2, #32
 8010a2c:	409a      	lsls	r2, r3
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	2b05      	cmp	r3, #5
 8010a3c:	d136      	bne.n	8010aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f022 0216 	bic.w	r2, r2, #22
 8010a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	695a      	ldr	r2, [r3, #20]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d103      	bne.n	8010a6e <HAL_DMA_IRQHandler+0x1da>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d007      	beq.n	8010a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f022 0208 	bic.w	r2, r2, #8
 8010a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a82:	223f      	movs	r2, #63	; 0x3f
 8010a84:	409a      	lsls	r2, r3
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2201      	movs	r2, #1
 8010a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d07e      	beq.n	8010ba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	4798      	blx	r3
        }
        return;
 8010aaa:	e079      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d01d      	beq.n	8010af6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d10d      	bne.n	8010ae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d031      	beq.n	8010b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	4798      	blx	r3
 8010ad8:	e02c      	b.n	8010b34 <HAL_DMA_IRQHandler+0x2a0>
 8010ada:	bf00      	nop
 8010adc:	2000001c 	.word	0x2000001c
 8010ae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d023      	beq.n	8010b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	4798      	blx	r3
 8010af4:	e01e      	b.n	8010b34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d10f      	bne.n	8010b24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f022 0210 	bic.w	r2, r2, #16
 8010b12:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2200      	movs	r2, #0
 8010b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d003      	beq.n	8010b34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d032      	beq.n	8010ba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b40:	f003 0301 	and.w	r3, r3, #1
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d022      	beq.n	8010b8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2205      	movs	r2, #5
 8010b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f022 0201 	bic.w	r2, r2, #1
 8010b5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	3301      	adds	r3, #1
 8010b64:	60bb      	str	r3, [r7, #8]
 8010b66:	697a      	ldr	r2, [r7, #20]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d307      	bcc.n	8010b7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f003 0301 	and.w	r3, r3, #1
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d1f2      	bne.n	8010b60 <HAL_DMA_IRQHandler+0x2cc>
 8010b7a:	e000      	b.n	8010b7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8010b7c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2200      	movs	r2, #0
 8010b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d005      	beq.n	8010ba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	4798      	blx	r3
 8010b9e:	e000      	b.n	8010ba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8010ba0:	bf00      	nop
    }
  }
}
 8010ba2:	3718      	adds	r7, #24
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
 8010bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	683a      	ldr	r2, [r7, #0]
 8010bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	689b      	ldr	r3, [r3, #8]
 8010bd2:	2b40      	cmp	r3, #64	; 0x40
 8010bd4:	d108      	bne.n	8010be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	68ba      	ldr	r2, [r7, #8]
 8010be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8010be6:	e007      	b.n	8010bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68ba      	ldr	r2, [r7, #8]
 8010bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	60da      	str	r2, [r3, #12]
}
 8010bf8:	bf00      	nop
 8010bfa:	3714      	adds	r7, #20
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	3b10      	subs	r3, #16
 8010c14:	4a14      	ldr	r2, [pc, #80]	; (8010c68 <DMA_CalcBaseAndBitshift+0x64>)
 8010c16:	fba2 2303 	umull	r2, r3, r2, r3
 8010c1a:	091b      	lsrs	r3, r3, #4
 8010c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010c1e:	4a13      	ldr	r2, [pc, #76]	; (8010c6c <DMA_CalcBaseAndBitshift+0x68>)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	4413      	add	r3, r2
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	461a      	mov	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	2b03      	cmp	r3, #3
 8010c30:	d909      	bls.n	8010c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010c3a:	f023 0303 	bic.w	r3, r3, #3
 8010c3e:	1d1a      	adds	r2, r3, #4
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	659a      	str	r2, [r3, #88]	; 0x58
 8010c44:	e007      	b.n	8010c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010c4e:	f023 0303 	bic.w	r3, r3, #3
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3714      	adds	r7, #20
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	aaaaaaab 	.word	0xaaaaaaab
 8010c6c:	0801a764 	.word	0x0801a764

08010c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	699b      	ldr	r3, [r3, #24]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d11f      	bne.n	8010cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	2b03      	cmp	r3, #3
 8010c8e:	d856      	bhi.n	8010d3e <DMA_CheckFifoParam+0xce>
 8010c90:	a201      	add	r2, pc, #4	; (adr r2, 8010c98 <DMA_CheckFifoParam+0x28>)
 8010c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c96:	bf00      	nop
 8010c98:	08010ca9 	.word	0x08010ca9
 8010c9c:	08010cbb 	.word	0x08010cbb
 8010ca0:	08010ca9 	.word	0x08010ca9
 8010ca4:	08010d3f 	.word	0x08010d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d046      	beq.n	8010d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010cb8:	e043      	b.n	8010d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010cc2:	d140      	bne.n	8010d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010cc8:	e03d      	b.n	8010d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	699b      	ldr	r3, [r3, #24]
 8010cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cd2:	d121      	bne.n	8010d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	2b03      	cmp	r3, #3
 8010cd8:	d837      	bhi.n	8010d4a <DMA_CheckFifoParam+0xda>
 8010cda:	a201      	add	r2, pc, #4	; (adr r2, 8010ce0 <DMA_CheckFifoParam+0x70>)
 8010cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce0:	08010cf1 	.word	0x08010cf1
 8010ce4:	08010cf7 	.word	0x08010cf7
 8010ce8:	08010cf1 	.word	0x08010cf1
 8010cec:	08010d09 	.word	0x08010d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8010cf4:	e030      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d025      	beq.n	8010d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010d06:	e022      	b.n	8010d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010d10:	d11f      	bne.n	8010d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8010d12:	2301      	movs	r3, #1
 8010d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010d16:	e01c      	b.n	8010d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	2b02      	cmp	r3, #2
 8010d1c:	d903      	bls.n	8010d26 <DMA_CheckFifoParam+0xb6>
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	2b03      	cmp	r3, #3
 8010d22:	d003      	beq.n	8010d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010d24:	e018      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8010d26:	2301      	movs	r3, #1
 8010d28:	73fb      	strb	r3, [r7, #15]
      break;
 8010d2a:	e015      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00e      	beq.n	8010d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8010d3c:	e00b      	b.n	8010d56 <DMA_CheckFifoParam+0xe6>
      break;
 8010d3e:	bf00      	nop
 8010d40:	e00a      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
      break;
 8010d42:	bf00      	nop
 8010d44:	e008      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
      break;
 8010d46:	bf00      	nop
 8010d48:	e006      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
      break;
 8010d4a:	bf00      	nop
 8010d4c:	e004      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
      break;
 8010d4e:	bf00      	nop
 8010d50:	e002      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8010d52:	bf00      	nop
 8010d54:	e000      	b.n	8010d58 <DMA_CheckFifoParam+0xe8>
      break;
 8010d56:	bf00      	nop
    }
  } 
  
  return status; 
 8010d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3714      	adds	r7, #20
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop

08010d68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010d72:	4b0b      	ldr	r3, [pc, #44]	; (8010da0 <HAL_FLASH_Unlock+0x38>)
 8010d74:	691b      	ldr	r3, [r3, #16]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	da0b      	bge.n	8010d92 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010d7a:	4b09      	ldr	r3, [pc, #36]	; (8010da0 <HAL_FLASH_Unlock+0x38>)
 8010d7c:	4a09      	ldr	r2, [pc, #36]	; (8010da4 <HAL_FLASH_Unlock+0x3c>)
 8010d7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010d80:	4b07      	ldr	r3, [pc, #28]	; (8010da0 <HAL_FLASH_Unlock+0x38>)
 8010d82:	4a09      	ldr	r2, [pc, #36]	; (8010da8 <HAL_FLASH_Unlock+0x40>)
 8010d84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010d86:	4b06      	ldr	r3, [pc, #24]	; (8010da0 <HAL_FLASH_Unlock+0x38>)
 8010d88:	691b      	ldr	r3, [r3, #16]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	da01      	bge.n	8010d92 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8010d92:	79fb      	ldrb	r3, [r7, #7]
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	370c      	adds	r7, #12
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	40023c00 	.word	0x40023c00
 8010da4:	45670123 	.word	0x45670123
 8010da8:	cdef89ab 	.word	0xcdef89ab

08010dac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8010dac:	b480      	push	{r7}
 8010dae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8010db0:	4b05      	ldr	r3, [pc, #20]	; (8010dc8 <HAL_FLASH_Lock+0x1c>)
 8010db2:	691b      	ldr	r3, [r3, #16]
 8010db4:	4a04      	ldr	r2, [pc, #16]	; (8010dc8 <HAL_FLASH_Lock+0x1c>)
 8010db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010dba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8010dbc:	2300      	movs	r3, #0
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr
 8010dc8:	40023c00 	.word	0x40023c00

08010dcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010dd8:	4b1a      	ldr	r3, [pc, #104]	; (8010e44 <FLASH_WaitForLastOperation+0x78>)
 8010dda:	2200      	movs	r2, #0
 8010ddc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8010dde:	f7fe fe63 	bl	800faa8 <HAL_GetTick>
 8010de2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010de4:	e010      	b.n	8010e08 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dec:	d00c      	beq.n	8010e08 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d007      	beq.n	8010e04 <FLASH_WaitForLastOperation+0x38>
 8010df4:	f7fe fe58 	bl	800faa8 <HAL_GetTick>
 8010df8:	4602      	mov	r2, r0
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	1ad3      	subs	r3, r2, r3
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d201      	bcs.n	8010e08 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8010e04:	2303      	movs	r3, #3
 8010e06:	e019      	b.n	8010e3c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010e08:	4b0f      	ldr	r3, [pc, #60]	; (8010e48 <FLASH_WaitForLastOperation+0x7c>)
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d1e8      	bne.n	8010de6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010e14:	4b0c      	ldr	r3, [pc, #48]	; (8010e48 <FLASH_WaitForLastOperation+0x7c>)
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010e20:	4b09      	ldr	r3, [pc, #36]	; (8010e48 <FLASH_WaitForLastOperation+0x7c>)
 8010e22:	2201      	movs	r2, #1
 8010e24:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010e26:	4b08      	ldr	r3, [pc, #32]	; (8010e48 <FLASH_WaitForLastOperation+0x7c>)
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d003      	beq.n	8010e3a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8010e32:	f000 f80b 	bl	8010e4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010e36:	2301      	movs	r3, #1
 8010e38:	e000      	b.n	8010e3c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8010e3a:	2300      	movs	r3, #0
  
}  
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3710      	adds	r7, #16
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	20000bf0 	.word	0x20000bf0
 8010e48:	40023c00 	.word	0x40023c00

08010e4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8010e4c:	b480      	push	{r7}
 8010e4e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8010e50:	4b27      	ldr	r3, [pc, #156]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	f003 0310 	and.w	r3, r3, #16
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d008      	beq.n	8010e6e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010e5c:	4b25      	ldr	r3, [pc, #148]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010e5e:	69db      	ldr	r3, [r3, #28]
 8010e60:	f043 0310 	orr.w	r3, r3, #16
 8010e64:	4a23      	ldr	r2, [pc, #140]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010e66:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010e68:	4b21      	ldr	r3, [pc, #132]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010e6a:	2210      	movs	r2, #16
 8010e6c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8010e6e:	4b20      	ldr	r3, [pc, #128]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	f003 0320 	and.w	r3, r3, #32
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d008      	beq.n	8010e8c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010e7a:	4b1e      	ldr	r3, [pc, #120]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010e7c:	69db      	ldr	r3, [r3, #28]
 8010e7e:	f043 0308 	orr.w	r3, r3, #8
 8010e82:	4a1c      	ldr	r2, [pc, #112]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010e84:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010e86:	4b1a      	ldr	r3, [pc, #104]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010e88:	2220      	movs	r2, #32
 8010e8a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010e8c:	4b18      	ldr	r3, [pc, #96]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d008      	beq.n	8010eaa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010e98:	4b16      	ldr	r3, [pc, #88]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010e9a:	69db      	ldr	r3, [r3, #28]
 8010e9c:	f043 0304 	orr.w	r3, r3, #4
 8010ea0:	4a14      	ldr	r2, [pc, #80]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010ea2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010ea4:	4b12      	ldr	r3, [pc, #72]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010ea6:	2240      	movs	r2, #64	; 0x40
 8010ea8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010eaa:	4b11      	ldr	r3, [pc, #68]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d008      	beq.n	8010ec8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010eb6:	4b0f      	ldr	r3, [pc, #60]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	f043 0302 	orr.w	r3, r3, #2
 8010ebe:	4a0d      	ldr	r2, [pc, #52]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010ec0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010ec2:	4b0b      	ldr	r3, [pc, #44]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010ec4:	2280      	movs	r2, #128	; 0x80
 8010ec6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010ec8:	4b09      	ldr	r3, [pc, #36]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	f003 0302 	and.w	r3, r3, #2
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d008      	beq.n	8010ee6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010ed4:	4b07      	ldr	r3, [pc, #28]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010ed6:	69db      	ldr	r3, [r3, #28]
 8010ed8:	f043 0320 	orr.w	r3, r3, #32
 8010edc:	4a05      	ldr	r2, [pc, #20]	; (8010ef4 <FLASH_SetErrorCode+0xa8>)
 8010ede:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010ee0:	4b03      	ldr	r3, [pc, #12]	; (8010ef0 <FLASH_SetErrorCode+0xa4>)
 8010ee2:	2202      	movs	r2, #2
 8010ee4:	60da      	str	r2, [r3, #12]
  }
}
 8010ee6:	bf00      	nop
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr
 8010ef0:	40023c00 	.word	0x40023c00
 8010ef4:	20000bf0 	.word	0x20000bf0

08010ef8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f02:	2301      	movs	r3, #1
 8010f04:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8010f06:	2300      	movs	r3, #0
 8010f08:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010f0a:	4b31      	ldr	r3, [pc, #196]	; (8010fd0 <HAL_FLASHEx_Erase+0xd8>)
 8010f0c:	7e1b      	ldrb	r3, [r3, #24]
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d101      	bne.n	8010f16 <HAL_FLASHEx_Erase+0x1e>
 8010f12:	2302      	movs	r3, #2
 8010f14:	e058      	b.n	8010fc8 <HAL_FLASHEx_Erase+0xd0>
 8010f16:	4b2e      	ldr	r3, [pc, #184]	; (8010fd0 <HAL_FLASHEx_Erase+0xd8>)
 8010f18:	2201      	movs	r2, #1
 8010f1a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f20:	f7ff ff54 	bl	8010dcc <FLASH_WaitForLastOperation>
 8010f24:	4603      	mov	r3, r0
 8010f26:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8010f28:	7bfb      	ldrb	r3, [r7, #15]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d148      	bne.n	8010fc0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	f04f 32ff 	mov.w	r2, #4294967295
 8010f34:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d115      	bne.n	8010f6a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	691b      	ldr	r3, [r3, #16]
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	4610      	mov	r0, r2
 8010f4c:	f000 f844 	bl	8010fd8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f54:	f7ff ff3a 	bl	8010dcc <FLASH_WaitForLastOperation>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8010f5c:	4b1d      	ldr	r3, [pc, #116]	; (8010fd4 <HAL_FLASHEx_Erase+0xdc>)
 8010f5e:	691b      	ldr	r3, [r3, #16]
 8010f60:	4a1c      	ldr	r2, [pc, #112]	; (8010fd4 <HAL_FLASHEx_Erase+0xdc>)
 8010f62:	f023 0304 	bic.w	r3, r3, #4
 8010f66:	6113      	str	r3, [r2, #16]
 8010f68:	e028      	b.n	8010fbc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	60bb      	str	r3, [r7, #8]
 8010f70:	e01c      	b.n	8010fac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	691b      	ldr	r3, [r3, #16]
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	4619      	mov	r1, r3
 8010f7a:	68b8      	ldr	r0, [r7, #8]
 8010f7c:	f000 f850 	bl	8011020 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f84:	f7ff ff22 	bl	8010dcc <FLASH_WaitForLastOperation>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010f8c:	4b11      	ldr	r3, [pc, #68]	; (8010fd4 <HAL_FLASHEx_Erase+0xdc>)
 8010f8e:	691b      	ldr	r3, [r3, #16]
 8010f90:	4a10      	ldr	r2, [pc, #64]	; (8010fd4 <HAL_FLASHEx_Erase+0xdc>)
 8010f92:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010f96:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8010f98:	7bfb      	ldrb	r3, [r7, #15]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d003      	beq.n	8010fa6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	68ba      	ldr	r2, [r7, #8]
 8010fa2:	601a      	str	r2, [r3, #0]
          break;
 8010fa4:	e00a      	b.n	8010fbc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	60bb      	str	r3, [r7, #8]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	68da      	ldr	r2, [r3, #12]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	689b      	ldr	r3, [r3, #8]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d3da      	bcc.n	8010f72 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8010fbc:	f000 f878 	bl	80110b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010fc0:	4b03      	ldr	r3, [pc, #12]	; (8010fd0 <HAL_FLASHEx_Erase+0xd8>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	761a      	strb	r2, [r3, #24]

  return status;
 8010fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3710      	adds	r7, #16
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	20000bf0 	.word	0x20000bf0
 8010fd4:	40023c00 	.word	0x40023c00

08010fd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	4603      	mov	r3, r0
 8010fe0:	6039      	str	r1, [r7, #0]
 8010fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010fe4:	4b0d      	ldr	r3, [pc, #52]	; (801101c <FLASH_MassErase+0x44>)
 8010fe6:	691b      	ldr	r3, [r3, #16]
 8010fe8:	4a0c      	ldr	r2, [pc, #48]	; (801101c <FLASH_MassErase+0x44>)
 8010fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010fee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8010ff0:	4b0a      	ldr	r3, [pc, #40]	; (801101c <FLASH_MassErase+0x44>)
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	4a09      	ldr	r2, [pc, #36]	; (801101c <FLASH_MassErase+0x44>)
 8010ff6:	f043 0304 	orr.w	r3, r3, #4
 8010ffa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8010ffc:	4b07      	ldr	r3, [pc, #28]	; (801101c <FLASH_MassErase+0x44>)
 8010ffe:	691a      	ldr	r2, [r3, #16]
 8011000:	79fb      	ldrb	r3, [r7, #7]
 8011002:	021b      	lsls	r3, r3, #8
 8011004:	4313      	orrs	r3, r2
 8011006:	4a05      	ldr	r2, [pc, #20]	; (801101c <FLASH_MassErase+0x44>)
 8011008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801100c:	6113      	str	r3, [r2, #16]
}
 801100e:	bf00      	nop
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	40023c00 	.word	0x40023c00

08011020 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	460b      	mov	r3, r1
 801102a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 801102c:	2300      	movs	r3, #0
 801102e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011030:	78fb      	ldrb	r3, [r7, #3]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d102      	bne.n	801103c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8011036:	2300      	movs	r3, #0
 8011038:	60fb      	str	r3, [r7, #12]
 801103a:	e010      	b.n	801105e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801103c:	78fb      	ldrb	r3, [r7, #3]
 801103e:	2b01      	cmp	r3, #1
 8011040:	d103      	bne.n	801104a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011046:	60fb      	str	r3, [r7, #12]
 8011048:	e009      	b.n	801105e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801104a:	78fb      	ldrb	r3, [r7, #3]
 801104c:	2b02      	cmp	r3, #2
 801104e:	d103      	bne.n	8011058 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8011050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	e002      	b.n	801105e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011058:	f44f 7340 	mov.w	r3, #768	; 0x300
 801105c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801105e:	4b13      	ldr	r3, [pc, #76]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 8011060:	691b      	ldr	r3, [r3, #16]
 8011062:	4a12      	ldr	r2, [pc, #72]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 8011064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011068:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801106a:	4b10      	ldr	r3, [pc, #64]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 801106c:	691a      	ldr	r2, [r3, #16]
 801106e:	490f      	ldr	r1, [pc, #60]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	4313      	orrs	r3, r2
 8011074:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011076:	4b0d      	ldr	r3, [pc, #52]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 8011078:	691b      	ldr	r3, [r3, #16]
 801107a:	4a0c      	ldr	r2, [pc, #48]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 801107c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8011082:	4b0a      	ldr	r3, [pc, #40]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 8011084:	691a      	ldr	r2, [r3, #16]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	00db      	lsls	r3, r3, #3
 801108a:	4313      	orrs	r3, r2
 801108c:	4a07      	ldr	r2, [pc, #28]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 801108e:	f043 0302 	orr.w	r3, r3, #2
 8011092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8011094:	4b05      	ldr	r3, [pc, #20]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 8011096:	691b      	ldr	r3, [r3, #16]
 8011098:	4a04      	ldr	r2, [pc, #16]	; (80110ac <FLASH_Erase_Sector+0x8c>)
 801109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801109e:	6113      	str	r3, [r2, #16]
}
 80110a0:	bf00      	nop
 80110a2:	3714      	adds	r7, #20
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr
 80110ac:	40023c00 	.word	0x40023c00

080110b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80110b0:	b480      	push	{r7}
 80110b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80110b4:	4b20      	ldr	r3, [pc, #128]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d017      	beq.n	80110f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80110c0:	4b1d      	ldr	r3, [pc, #116]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4a1c      	ldr	r2, [pc, #112]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80110ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80110cc:	4b1a      	ldr	r3, [pc, #104]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4a19      	ldr	r2, [pc, #100]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110d6:	6013      	str	r3, [r2, #0]
 80110d8:	4b17      	ldr	r3, [pc, #92]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a16      	ldr	r2, [pc, #88]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80110e4:	4b14      	ldr	r3, [pc, #80]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4a13      	ldr	r2, [pc, #76]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80110ee:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80110f0:	4b11      	ldr	r3, [pc, #68]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d017      	beq.n	801112c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80110fc:	4b0e      	ldr	r3, [pc, #56]	; (8011138 <FLASH_FlushCaches+0x88>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a0d      	ldr	r2, [pc, #52]	; (8011138 <FLASH_FlushCaches+0x88>)
 8011102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011106:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011108:	4b0b      	ldr	r3, [pc, #44]	; (8011138 <FLASH_FlushCaches+0x88>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a0a      	ldr	r2, [pc, #40]	; (8011138 <FLASH_FlushCaches+0x88>)
 801110e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011112:	6013      	str	r3, [r2, #0]
 8011114:	4b08      	ldr	r3, [pc, #32]	; (8011138 <FLASH_FlushCaches+0x88>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4a07      	ldr	r2, [pc, #28]	; (8011138 <FLASH_FlushCaches+0x88>)
 801111a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801111e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8011120:	4b05      	ldr	r3, [pc, #20]	; (8011138 <FLASH_FlushCaches+0x88>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4a04      	ldr	r2, [pc, #16]	; (8011138 <FLASH_FlushCaches+0x88>)
 8011126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801112a:	6013      	str	r3, [r2, #0]
  }
}
 801112c:	bf00      	nop
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop
 8011138:	40023c00 	.word	0x40023c00

0801113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801113c:	b480      	push	{r7}
 801113e:	b089      	sub	sp, #36	; 0x24
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011146:	2300      	movs	r3, #0
 8011148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801114a:	2300      	movs	r3, #0
 801114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801114e:	2300      	movs	r3, #0
 8011150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011152:	2300      	movs	r3, #0
 8011154:	61fb      	str	r3, [r7, #28]
 8011156:	e16b      	b.n	8011430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011158:	2201      	movs	r2, #1
 801115a:	69fb      	ldr	r3, [r7, #28]
 801115c:	fa02 f303 	lsl.w	r3, r2, r3
 8011160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	697a      	ldr	r2, [r7, #20]
 8011168:	4013      	ands	r3, r2
 801116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801116c:	693a      	ldr	r2, [r7, #16]
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	429a      	cmp	r2, r3
 8011172:	f040 815a 	bne.w	801142a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d00b      	beq.n	8011196 <HAL_GPIO_Init+0x5a>
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	2b02      	cmp	r3, #2
 8011184:	d007      	beq.n	8011196 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801118a:	2b11      	cmp	r3, #17
 801118c:	d003      	beq.n	8011196 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	2b12      	cmp	r3, #18
 8011194:	d130      	bne.n	80111f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	689b      	ldr	r3, [r3, #8]
 801119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	2203      	movs	r2, #3
 80111a2:	fa02 f303 	lsl.w	r3, r2, r3
 80111a6:	43db      	mvns	r3, r3
 80111a8:	69ba      	ldr	r2, [r7, #24]
 80111aa:	4013      	ands	r3, r2
 80111ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	68da      	ldr	r2, [r3, #12]
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	fa02 f303 	lsl.w	r3, r2, r3
 80111ba:	69ba      	ldr	r2, [r7, #24]
 80111bc:	4313      	orrs	r3, r2
 80111be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	69ba      	ldr	r2, [r7, #24]
 80111c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80111cc:	2201      	movs	r2, #1
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	fa02 f303 	lsl.w	r3, r2, r3
 80111d4:	43db      	mvns	r3, r3
 80111d6:	69ba      	ldr	r2, [r7, #24]
 80111d8:	4013      	ands	r3, r2
 80111da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	091b      	lsrs	r3, r3, #4
 80111e2:	f003 0201 	and.w	r2, r3, #1
 80111e6:	69fb      	ldr	r3, [r7, #28]
 80111e8:	fa02 f303 	lsl.w	r3, r2, r3
 80111ec:	69ba      	ldr	r2, [r7, #24]
 80111ee:	4313      	orrs	r3, r2
 80111f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	69ba      	ldr	r2, [r7, #24]
 80111f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	005b      	lsls	r3, r3, #1
 8011202:	2203      	movs	r2, #3
 8011204:	fa02 f303 	lsl.w	r3, r2, r3
 8011208:	43db      	mvns	r3, r3
 801120a:	69ba      	ldr	r2, [r7, #24]
 801120c:	4013      	ands	r3, r2
 801120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	689a      	ldr	r2, [r3, #8]
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	005b      	lsls	r3, r3, #1
 8011218:	fa02 f303 	lsl.w	r3, r2, r3
 801121c:	69ba      	ldr	r2, [r7, #24]
 801121e:	4313      	orrs	r3, r2
 8011220:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	69ba      	ldr	r2, [r7, #24]
 8011226:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	2b02      	cmp	r3, #2
 801122e:	d003      	beq.n	8011238 <HAL_GPIO_Init+0xfc>
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	2b12      	cmp	r3, #18
 8011236:	d123      	bne.n	8011280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011238:	69fb      	ldr	r3, [r7, #28]
 801123a:	08da      	lsrs	r2, r3, #3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	3208      	adds	r2, #8
 8011240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	f003 0307 	and.w	r3, r3, #7
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	220f      	movs	r2, #15
 8011250:	fa02 f303 	lsl.w	r3, r2, r3
 8011254:	43db      	mvns	r3, r3
 8011256:	69ba      	ldr	r2, [r7, #24]
 8011258:	4013      	ands	r3, r2
 801125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	691a      	ldr	r2, [r3, #16]
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	f003 0307 	and.w	r3, r3, #7
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	fa02 f303 	lsl.w	r3, r2, r3
 801126c:	69ba      	ldr	r2, [r7, #24]
 801126e:	4313      	orrs	r3, r2
 8011270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	08da      	lsrs	r2, r3, #3
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	3208      	adds	r2, #8
 801127a:	69b9      	ldr	r1, [r7, #24]
 801127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	005b      	lsls	r3, r3, #1
 801128a:	2203      	movs	r2, #3
 801128c:	fa02 f303 	lsl.w	r3, r2, r3
 8011290:	43db      	mvns	r3, r3
 8011292:	69ba      	ldr	r2, [r7, #24]
 8011294:	4013      	ands	r3, r2
 8011296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	f003 0203 	and.w	r2, r3, #3
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	005b      	lsls	r3, r3, #1
 80112a4:	fa02 f303 	lsl.w	r3, r2, r3
 80112a8:	69ba      	ldr	r2, [r7, #24]
 80112aa:	4313      	orrs	r3, r2
 80112ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	69ba      	ldr	r2, [r7, #24]
 80112b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112bc:	2b00      	cmp	r3, #0
 80112be:	f000 80b4 	beq.w	801142a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112c2:	2300      	movs	r3, #0
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	4b60      	ldr	r3, [pc, #384]	; (8011448 <HAL_GPIO_Init+0x30c>)
 80112c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ca:	4a5f      	ldr	r2, [pc, #380]	; (8011448 <HAL_GPIO_Init+0x30c>)
 80112cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80112d0:	6453      	str	r3, [r2, #68]	; 0x44
 80112d2:	4b5d      	ldr	r3, [pc, #372]	; (8011448 <HAL_GPIO_Init+0x30c>)
 80112d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112da:	60fb      	str	r3, [r7, #12]
 80112dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80112de:	4a5b      	ldr	r2, [pc, #364]	; (801144c <HAL_GPIO_Init+0x310>)
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	089b      	lsrs	r3, r3, #2
 80112e4:	3302      	adds	r3, #2
 80112e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	f003 0303 	and.w	r3, r3, #3
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	220f      	movs	r2, #15
 80112f6:	fa02 f303 	lsl.w	r3, r2, r3
 80112fa:	43db      	mvns	r3, r3
 80112fc:	69ba      	ldr	r2, [r7, #24]
 80112fe:	4013      	ands	r3, r2
 8011300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4a52      	ldr	r2, [pc, #328]	; (8011450 <HAL_GPIO_Init+0x314>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d02b      	beq.n	8011362 <HAL_GPIO_Init+0x226>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4a51      	ldr	r2, [pc, #324]	; (8011454 <HAL_GPIO_Init+0x318>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d025      	beq.n	801135e <HAL_GPIO_Init+0x222>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	4a50      	ldr	r2, [pc, #320]	; (8011458 <HAL_GPIO_Init+0x31c>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d01f      	beq.n	801135a <HAL_GPIO_Init+0x21e>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4a4f      	ldr	r2, [pc, #316]	; (801145c <HAL_GPIO_Init+0x320>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d019      	beq.n	8011356 <HAL_GPIO_Init+0x21a>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	4a4e      	ldr	r2, [pc, #312]	; (8011460 <HAL_GPIO_Init+0x324>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d013      	beq.n	8011352 <HAL_GPIO_Init+0x216>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	4a4d      	ldr	r2, [pc, #308]	; (8011464 <HAL_GPIO_Init+0x328>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d00d      	beq.n	801134e <HAL_GPIO_Init+0x212>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	4a4c      	ldr	r2, [pc, #304]	; (8011468 <HAL_GPIO_Init+0x32c>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d007      	beq.n	801134a <HAL_GPIO_Init+0x20e>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	4a4b      	ldr	r2, [pc, #300]	; (801146c <HAL_GPIO_Init+0x330>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d101      	bne.n	8011346 <HAL_GPIO_Init+0x20a>
 8011342:	2307      	movs	r3, #7
 8011344:	e00e      	b.n	8011364 <HAL_GPIO_Init+0x228>
 8011346:	2308      	movs	r3, #8
 8011348:	e00c      	b.n	8011364 <HAL_GPIO_Init+0x228>
 801134a:	2306      	movs	r3, #6
 801134c:	e00a      	b.n	8011364 <HAL_GPIO_Init+0x228>
 801134e:	2305      	movs	r3, #5
 8011350:	e008      	b.n	8011364 <HAL_GPIO_Init+0x228>
 8011352:	2304      	movs	r3, #4
 8011354:	e006      	b.n	8011364 <HAL_GPIO_Init+0x228>
 8011356:	2303      	movs	r3, #3
 8011358:	e004      	b.n	8011364 <HAL_GPIO_Init+0x228>
 801135a:	2302      	movs	r3, #2
 801135c:	e002      	b.n	8011364 <HAL_GPIO_Init+0x228>
 801135e:	2301      	movs	r3, #1
 8011360:	e000      	b.n	8011364 <HAL_GPIO_Init+0x228>
 8011362:	2300      	movs	r3, #0
 8011364:	69fa      	ldr	r2, [r7, #28]
 8011366:	f002 0203 	and.w	r2, r2, #3
 801136a:	0092      	lsls	r2, r2, #2
 801136c:	4093      	lsls	r3, r2
 801136e:	69ba      	ldr	r2, [r7, #24]
 8011370:	4313      	orrs	r3, r2
 8011372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011374:	4935      	ldr	r1, [pc, #212]	; (801144c <HAL_GPIO_Init+0x310>)
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	089b      	lsrs	r3, r3, #2
 801137a:	3302      	adds	r3, #2
 801137c:	69ba      	ldr	r2, [r7, #24]
 801137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011382:	4b3b      	ldr	r3, [pc, #236]	; (8011470 <HAL_GPIO_Init+0x334>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	43db      	mvns	r3, r3
 801138c:	69ba      	ldr	r2, [r7, #24]
 801138e:	4013      	ands	r3, r2
 8011390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801139a:	2b00      	cmp	r3, #0
 801139c:	d003      	beq.n	80113a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801139e:	69ba      	ldr	r2, [r7, #24]
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	4313      	orrs	r3, r2
 80113a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80113a6:	4a32      	ldr	r2, [pc, #200]	; (8011470 <HAL_GPIO_Init+0x334>)
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80113ac:	4b30      	ldr	r3, [pc, #192]	; (8011470 <HAL_GPIO_Init+0x334>)
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	43db      	mvns	r3, r3
 80113b6:	69ba      	ldr	r2, [r7, #24]
 80113b8:	4013      	ands	r3, r2
 80113ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d003      	beq.n	80113d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80113c8:	69ba      	ldr	r2, [r7, #24]
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	4313      	orrs	r3, r2
 80113ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80113d0:	4a27      	ldr	r2, [pc, #156]	; (8011470 <HAL_GPIO_Init+0x334>)
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80113d6:	4b26      	ldr	r3, [pc, #152]	; (8011470 <HAL_GPIO_Init+0x334>)
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	43db      	mvns	r3, r3
 80113e0:	69ba      	ldr	r2, [r7, #24]
 80113e2:	4013      	ands	r3, r2
 80113e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d003      	beq.n	80113fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80113f2:	69ba      	ldr	r2, [r7, #24]
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	4313      	orrs	r3, r2
 80113f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80113fa:	4a1d      	ldr	r2, [pc, #116]	; (8011470 <HAL_GPIO_Init+0x334>)
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011400:	4b1b      	ldr	r3, [pc, #108]	; (8011470 <HAL_GPIO_Init+0x334>)
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	43db      	mvns	r3, r3
 801140a:	69ba      	ldr	r2, [r7, #24]
 801140c:	4013      	ands	r3, r2
 801140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011418:	2b00      	cmp	r3, #0
 801141a:	d003      	beq.n	8011424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801141c:	69ba      	ldr	r2, [r7, #24]
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	4313      	orrs	r3, r2
 8011422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011424:	4a12      	ldr	r2, [pc, #72]	; (8011470 <HAL_GPIO_Init+0x334>)
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	3301      	adds	r3, #1
 801142e:	61fb      	str	r3, [r7, #28]
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	2b0f      	cmp	r3, #15
 8011434:	f67f ae90 	bls.w	8011158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011438:	bf00      	nop
 801143a:	bf00      	nop
 801143c:	3724      	adds	r7, #36	; 0x24
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	40023800 	.word	0x40023800
 801144c:	40013800 	.word	0x40013800
 8011450:	40020000 	.word	0x40020000
 8011454:	40020400 	.word	0x40020400
 8011458:	40020800 	.word	0x40020800
 801145c:	40020c00 	.word	0x40020c00
 8011460:	40021000 	.word	0x40021000
 8011464:	40021400 	.word	0x40021400
 8011468:	40021800 	.word	0x40021800
 801146c:	40021c00 	.word	0x40021c00
 8011470:	40013c00 	.word	0x40013c00

08011474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011474:	b480      	push	{r7}
 8011476:	b083      	sub	sp, #12
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	460b      	mov	r3, r1
 801147e:	807b      	strh	r3, [r7, #2]
 8011480:	4613      	mov	r3, r2
 8011482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011484:	787b      	ldrb	r3, [r7, #1]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d003      	beq.n	8011492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801148a:	887a      	ldrh	r2, [r7, #2]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011490:	e003      	b.n	801149a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011492:	887b      	ldrh	r3, [r7, #2]
 8011494:	041a      	lsls	r2, r3, #16
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	619a      	str	r2, [r3, #24]
}
 801149a:	bf00      	nop
 801149c:	370c      	adds	r7, #12
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr
	...

080114a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b086      	sub	sp, #24
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d101      	bne.n	80114ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80114b6:	2301      	movs	r3, #1
 80114b8:	e25e      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f003 0301 	and.w	r3, r3, #1
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d075      	beq.n	80115b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80114c6:	4b88      	ldr	r3, [pc, #544]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	f003 030c 	and.w	r3, r3, #12
 80114ce:	2b04      	cmp	r3, #4
 80114d0:	d00c      	beq.n	80114ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80114d2:	4b85      	ldr	r3, [pc, #532]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80114d4:	689b      	ldr	r3, [r3, #8]
 80114d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80114da:	2b08      	cmp	r3, #8
 80114dc:	d112      	bne.n	8011504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80114de:	4b82      	ldr	r3, [pc, #520]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80114e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80114ea:	d10b      	bne.n	8011504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80114ec:	4b7e      	ldr	r3, [pc, #504]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d05b      	beq.n	80115b0 <HAL_RCC_OscConfig+0x108>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d157      	bne.n	80115b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011500:	2301      	movs	r3, #1
 8011502:	e239      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801150c:	d106      	bne.n	801151c <HAL_RCC_OscConfig+0x74>
 801150e:	4b76      	ldr	r3, [pc, #472]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	4a75      	ldr	r2, [pc, #468]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011518:	6013      	str	r3, [r2, #0]
 801151a:	e01d      	b.n	8011558 <HAL_RCC_OscConfig+0xb0>
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011524:	d10c      	bne.n	8011540 <HAL_RCC_OscConfig+0x98>
 8011526:	4b70      	ldr	r3, [pc, #448]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4a6f      	ldr	r2, [pc, #444]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 801152c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011530:	6013      	str	r3, [r2, #0]
 8011532:	4b6d      	ldr	r3, [pc, #436]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	4a6c      	ldr	r2, [pc, #432]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801153c:	6013      	str	r3, [r2, #0]
 801153e:	e00b      	b.n	8011558 <HAL_RCC_OscConfig+0xb0>
 8011540:	4b69      	ldr	r3, [pc, #420]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4a68      	ldr	r2, [pc, #416]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801154a:	6013      	str	r3, [r2, #0]
 801154c:	4b66      	ldr	r3, [pc, #408]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4a65      	ldr	r2, [pc, #404]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d013      	beq.n	8011588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011560:	f7fe faa2 	bl	800faa8 <HAL_GetTick>
 8011564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011566:	e008      	b.n	801157a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011568:	f7fe fa9e 	bl	800faa8 <HAL_GetTick>
 801156c:	4602      	mov	r2, r0
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	2b64      	cmp	r3, #100	; 0x64
 8011574:	d901      	bls.n	801157a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011576:	2303      	movs	r3, #3
 8011578:	e1fe      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801157a:	4b5b      	ldr	r3, [pc, #364]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011582:	2b00      	cmp	r3, #0
 8011584:	d0f0      	beq.n	8011568 <HAL_RCC_OscConfig+0xc0>
 8011586:	e014      	b.n	80115b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011588:	f7fe fa8e 	bl	800faa8 <HAL_GetTick>
 801158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801158e:	e008      	b.n	80115a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011590:	f7fe fa8a 	bl	800faa8 <HAL_GetTick>
 8011594:	4602      	mov	r2, r0
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	2b64      	cmp	r3, #100	; 0x64
 801159c:	d901      	bls.n	80115a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801159e:	2303      	movs	r3, #3
 80115a0:	e1ea      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80115a2:	4b51      	ldr	r3, [pc, #324]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d1f0      	bne.n	8011590 <HAL_RCC_OscConfig+0xe8>
 80115ae:	e000      	b.n	80115b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80115b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f003 0302 	and.w	r3, r3, #2
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d063      	beq.n	8011686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80115be:	4b4a      	ldr	r3, [pc, #296]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	f003 030c 	and.w	r3, r3, #12
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d00b      	beq.n	80115e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80115ca:	4b47      	ldr	r3, [pc, #284]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80115d2:	2b08      	cmp	r3, #8
 80115d4:	d11c      	bne.n	8011610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80115d6:	4b44      	ldr	r3, [pc, #272]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d116      	bne.n	8011610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80115e2:	4b41      	ldr	r3, [pc, #260]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f003 0302 	and.w	r3, r3, #2
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d005      	beq.n	80115fa <HAL_RCC_OscConfig+0x152>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d001      	beq.n	80115fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80115f6:	2301      	movs	r3, #1
 80115f8:	e1be      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80115fa:	4b3b      	ldr	r3, [pc, #236]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	691b      	ldr	r3, [r3, #16]
 8011606:	00db      	lsls	r3, r3, #3
 8011608:	4937      	ldr	r1, [pc, #220]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 801160a:	4313      	orrs	r3, r2
 801160c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801160e:	e03a      	b.n	8011686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d020      	beq.n	801165a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011618:	4b34      	ldr	r3, [pc, #208]	; (80116ec <HAL_RCC_OscConfig+0x244>)
 801161a:	2201      	movs	r2, #1
 801161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801161e:	f7fe fa43 	bl	800faa8 <HAL_GetTick>
 8011622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011624:	e008      	b.n	8011638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011626:	f7fe fa3f 	bl	800faa8 <HAL_GetTick>
 801162a:	4602      	mov	r2, r0
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	1ad3      	subs	r3, r2, r3
 8011630:	2b02      	cmp	r3, #2
 8011632:	d901      	bls.n	8011638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011634:	2303      	movs	r3, #3
 8011636:	e19f      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011638:	4b2b      	ldr	r3, [pc, #172]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f003 0302 	and.w	r3, r3, #2
 8011640:	2b00      	cmp	r3, #0
 8011642:	d0f0      	beq.n	8011626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011644:	4b28      	ldr	r3, [pc, #160]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	691b      	ldr	r3, [r3, #16]
 8011650:	00db      	lsls	r3, r3, #3
 8011652:	4925      	ldr	r1, [pc, #148]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 8011654:	4313      	orrs	r3, r2
 8011656:	600b      	str	r3, [r1, #0]
 8011658:	e015      	b.n	8011686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801165a:	4b24      	ldr	r3, [pc, #144]	; (80116ec <HAL_RCC_OscConfig+0x244>)
 801165c:	2200      	movs	r2, #0
 801165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011660:	f7fe fa22 	bl	800faa8 <HAL_GetTick>
 8011664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011666:	e008      	b.n	801167a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011668:	f7fe fa1e 	bl	800faa8 <HAL_GetTick>
 801166c:	4602      	mov	r2, r0
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	1ad3      	subs	r3, r2, r3
 8011672:	2b02      	cmp	r3, #2
 8011674:	d901      	bls.n	801167a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011676:	2303      	movs	r3, #3
 8011678:	e17e      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801167a:	4b1b      	ldr	r3, [pc, #108]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f003 0302 	and.w	r3, r3, #2
 8011682:	2b00      	cmp	r3, #0
 8011684:	d1f0      	bne.n	8011668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f003 0308 	and.w	r3, r3, #8
 801168e:	2b00      	cmp	r3, #0
 8011690:	d036      	beq.n	8011700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	695b      	ldr	r3, [r3, #20]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d016      	beq.n	80116c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801169a:	4b15      	ldr	r3, [pc, #84]	; (80116f0 <HAL_RCC_OscConfig+0x248>)
 801169c:	2201      	movs	r2, #1
 801169e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116a0:	f7fe fa02 	bl	800faa8 <HAL_GetTick>
 80116a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80116a6:	e008      	b.n	80116ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80116a8:	f7fe f9fe 	bl	800faa8 <HAL_GetTick>
 80116ac:	4602      	mov	r2, r0
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	2b02      	cmp	r3, #2
 80116b4:	d901      	bls.n	80116ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80116b6:	2303      	movs	r3, #3
 80116b8:	e15e      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80116ba:	4b0b      	ldr	r3, [pc, #44]	; (80116e8 <HAL_RCC_OscConfig+0x240>)
 80116bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116be:	f003 0302 	and.w	r3, r3, #2
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d0f0      	beq.n	80116a8 <HAL_RCC_OscConfig+0x200>
 80116c6:	e01b      	b.n	8011700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80116c8:	4b09      	ldr	r3, [pc, #36]	; (80116f0 <HAL_RCC_OscConfig+0x248>)
 80116ca:	2200      	movs	r2, #0
 80116cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80116ce:	f7fe f9eb 	bl	800faa8 <HAL_GetTick>
 80116d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80116d4:	e00e      	b.n	80116f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80116d6:	f7fe f9e7 	bl	800faa8 <HAL_GetTick>
 80116da:	4602      	mov	r2, r0
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	2b02      	cmp	r3, #2
 80116e2:	d907      	bls.n	80116f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80116e4:	2303      	movs	r3, #3
 80116e6:	e147      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
 80116e8:	40023800 	.word	0x40023800
 80116ec:	42470000 	.word	0x42470000
 80116f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80116f4:	4b88      	ldr	r3, [pc, #544]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80116f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116f8:	f003 0302 	and.w	r3, r3, #2
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d1ea      	bne.n	80116d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f003 0304 	and.w	r3, r3, #4
 8011708:	2b00      	cmp	r3, #0
 801170a:	f000 8097 	beq.w	801183c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801170e:	2300      	movs	r3, #0
 8011710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011712:	4b81      	ldr	r3, [pc, #516]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801171a:	2b00      	cmp	r3, #0
 801171c:	d10f      	bne.n	801173e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801171e:	2300      	movs	r3, #0
 8011720:	60bb      	str	r3, [r7, #8]
 8011722:	4b7d      	ldr	r3, [pc, #500]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011726:	4a7c      	ldr	r2, [pc, #496]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801172c:	6413      	str	r3, [r2, #64]	; 0x40
 801172e:	4b7a      	ldr	r3, [pc, #488]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011736:	60bb      	str	r3, [r7, #8]
 8011738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801173a:	2301      	movs	r3, #1
 801173c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801173e:	4b77      	ldr	r3, [pc, #476]	; (801191c <HAL_RCC_OscConfig+0x474>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011746:	2b00      	cmp	r3, #0
 8011748:	d118      	bne.n	801177c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801174a:	4b74      	ldr	r3, [pc, #464]	; (801191c <HAL_RCC_OscConfig+0x474>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4a73      	ldr	r2, [pc, #460]	; (801191c <HAL_RCC_OscConfig+0x474>)
 8011750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011756:	f7fe f9a7 	bl	800faa8 <HAL_GetTick>
 801175a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801175c:	e008      	b.n	8011770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801175e:	f7fe f9a3 	bl	800faa8 <HAL_GetTick>
 8011762:	4602      	mov	r2, r0
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	1ad3      	subs	r3, r2, r3
 8011768:	2b02      	cmp	r3, #2
 801176a:	d901      	bls.n	8011770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801176c:	2303      	movs	r3, #3
 801176e:	e103      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011770:	4b6a      	ldr	r3, [pc, #424]	; (801191c <HAL_RCC_OscConfig+0x474>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011778:	2b00      	cmp	r3, #0
 801177a:	d0f0      	beq.n	801175e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	2b01      	cmp	r3, #1
 8011782:	d106      	bne.n	8011792 <HAL_RCC_OscConfig+0x2ea>
 8011784:	4b64      	ldr	r3, [pc, #400]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011788:	4a63      	ldr	r2, [pc, #396]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 801178a:	f043 0301 	orr.w	r3, r3, #1
 801178e:	6713      	str	r3, [r2, #112]	; 0x70
 8011790:	e01c      	b.n	80117cc <HAL_RCC_OscConfig+0x324>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	2b05      	cmp	r3, #5
 8011798:	d10c      	bne.n	80117b4 <HAL_RCC_OscConfig+0x30c>
 801179a:	4b5f      	ldr	r3, [pc, #380]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 801179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801179e:	4a5e      	ldr	r2, [pc, #376]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80117a0:	f043 0304 	orr.w	r3, r3, #4
 80117a4:	6713      	str	r3, [r2, #112]	; 0x70
 80117a6:	4b5c      	ldr	r3, [pc, #368]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80117a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117aa:	4a5b      	ldr	r2, [pc, #364]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80117ac:	f043 0301 	orr.w	r3, r3, #1
 80117b0:	6713      	str	r3, [r2, #112]	; 0x70
 80117b2:	e00b      	b.n	80117cc <HAL_RCC_OscConfig+0x324>
 80117b4:	4b58      	ldr	r3, [pc, #352]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80117b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117b8:	4a57      	ldr	r2, [pc, #348]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80117ba:	f023 0301 	bic.w	r3, r3, #1
 80117be:	6713      	str	r3, [r2, #112]	; 0x70
 80117c0:	4b55      	ldr	r3, [pc, #340]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80117c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117c4:	4a54      	ldr	r2, [pc, #336]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80117c6:	f023 0304 	bic.w	r3, r3, #4
 80117ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d015      	beq.n	8011800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80117d4:	f7fe f968 	bl	800faa8 <HAL_GetTick>
 80117d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80117da:	e00a      	b.n	80117f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80117dc:	f7fe f964 	bl	800faa8 <HAL_GetTick>
 80117e0:	4602      	mov	r2, r0
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	1ad3      	subs	r3, r2, r3
 80117e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d901      	bls.n	80117f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80117ee:	2303      	movs	r3, #3
 80117f0:	e0c2      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80117f2:	4b49      	ldr	r3, [pc, #292]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80117f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117f6:	f003 0302 	and.w	r3, r3, #2
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d0ee      	beq.n	80117dc <HAL_RCC_OscConfig+0x334>
 80117fe:	e014      	b.n	801182a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011800:	f7fe f952 	bl	800faa8 <HAL_GetTick>
 8011804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011806:	e00a      	b.n	801181e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011808:	f7fe f94e 	bl	800faa8 <HAL_GetTick>
 801180c:	4602      	mov	r2, r0
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	f241 3288 	movw	r2, #5000	; 0x1388
 8011816:	4293      	cmp	r3, r2
 8011818:	d901      	bls.n	801181e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801181a:	2303      	movs	r3, #3
 801181c:	e0ac      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801181e:	4b3e      	ldr	r3, [pc, #248]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011822:	f003 0302 	and.w	r3, r3, #2
 8011826:	2b00      	cmp	r3, #0
 8011828:	d1ee      	bne.n	8011808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801182a:	7dfb      	ldrb	r3, [r7, #23]
 801182c:	2b01      	cmp	r3, #1
 801182e:	d105      	bne.n	801183c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011830:	4b39      	ldr	r3, [pc, #228]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011834:	4a38      	ldr	r2, [pc, #224]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801183a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	699b      	ldr	r3, [r3, #24]
 8011840:	2b00      	cmp	r3, #0
 8011842:	f000 8098 	beq.w	8011976 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011846:	4b34      	ldr	r3, [pc, #208]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011848:	689b      	ldr	r3, [r3, #8]
 801184a:	f003 030c 	and.w	r3, r3, #12
 801184e:	2b08      	cmp	r3, #8
 8011850:	d05c      	beq.n	801190c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	699b      	ldr	r3, [r3, #24]
 8011856:	2b02      	cmp	r3, #2
 8011858:	d141      	bne.n	80118de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801185a:	4b31      	ldr	r3, [pc, #196]	; (8011920 <HAL_RCC_OscConfig+0x478>)
 801185c:	2200      	movs	r2, #0
 801185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011860:	f7fe f922 	bl	800faa8 <HAL_GetTick>
 8011864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011866:	e008      	b.n	801187a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011868:	f7fe f91e 	bl	800faa8 <HAL_GetTick>
 801186c:	4602      	mov	r2, r0
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	1ad3      	subs	r3, r2, r3
 8011872:	2b02      	cmp	r3, #2
 8011874:	d901      	bls.n	801187a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011876:	2303      	movs	r3, #3
 8011878:	e07e      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801187a:	4b27      	ldr	r3, [pc, #156]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011882:	2b00      	cmp	r3, #0
 8011884:	d1f0      	bne.n	8011868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	69da      	ldr	r2, [r3, #28]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6a1b      	ldr	r3, [r3, #32]
 801188e:	431a      	orrs	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011894:	019b      	lsls	r3, r3, #6
 8011896:	431a      	orrs	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801189c:	085b      	lsrs	r3, r3, #1
 801189e:	3b01      	subs	r3, #1
 80118a0:	041b      	lsls	r3, r3, #16
 80118a2:	431a      	orrs	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a8:	061b      	lsls	r3, r3, #24
 80118aa:	491b      	ldr	r1, [pc, #108]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80118ac:	4313      	orrs	r3, r2
 80118ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80118b0:	4b1b      	ldr	r3, [pc, #108]	; (8011920 <HAL_RCC_OscConfig+0x478>)
 80118b2:	2201      	movs	r2, #1
 80118b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80118b6:	f7fe f8f7 	bl	800faa8 <HAL_GetTick>
 80118ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118bc:	e008      	b.n	80118d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80118be:	f7fe f8f3 	bl	800faa8 <HAL_GetTick>
 80118c2:	4602      	mov	r2, r0
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	1ad3      	subs	r3, r2, r3
 80118c8:	2b02      	cmp	r3, #2
 80118ca:	d901      	bls.n	80118d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80118cc:	2303      	movs	r3, #3
 80118ce:	e053      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118d0:	4b11      	ldr	r3, [pc, #68]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d0f0      	beq.n	80118be <HAL_RCC_OscConfig+0x416>
 80118dc:	e04b      	b.n	8011976 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80118de:	4b10      	ldr	r3, [pc, #64]	; (8011920 <HAL_RCC_OscConfig+0x478>)
 80118e0:	2200      	movs	r2, #0
 80118e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80118e4:	f7fe f8e0 	bl	800faa8 <HAL_GetTick>
 80118e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80118ea:	e008      	b.n	80118fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80118ec:	f7fe f8dc 	bl	800faa8 <HAL_GetTick>
 80118f0:	4602      	mov	r2, r0
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	2b02      	cmp	r3, #2
 80118f8:	d901      	bls.n	80118fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80118fa:	2303      	movs	r3, #3
 80118fc:	e03c      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80118fe:	4b06      	ldr	r3, [pc, #24]	; (8011918 <HAL_RCC_OscConfig+0x470>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011906:	2b00      	cmp	r3, #0
 8011908:	d1f0      	bne.n	80118ec <HAL_RCC_OscConfig+0x444>
 801190a:	e034      	b.n	8011976 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	699b      	ldr	r3, [r3, #24]
 8011910:	2b01      	cmp	r3, #1
 8011912:	d107      	bne.n	8011924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011914:	2301      	movs	r3, #1
 8011916:	e02f      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
 8011918:	40023800 	.word	0x40023800
 801191c:	40007000 	.word	0x40007000
 8011920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011924:	4b16      	ldr	r3, [pc, #88]	; (8011980 <HAL_RCC_OscConfig+0x4d8>)
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	69db      	ldr	r3, [r3, #28]
 8011934:	429a      	cmp	r2, r3
 8011936:	d11c      	bne.n	8011972 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011942:	429a      	cmp	r2, r3
 8011944:	d115      	bne.n	8011972 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8011946:	68fa      	ldr	r2, [r7, #12]
 8011948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801194c:	4013      	ands	r3, r2
 801194e:	687a      	ldr	r2, [r7, #4]
 8011950:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011952:	4293      	cmp	r3, r2
 8011954:	d10d      	bne.n	8011972 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8011960:	429a      	cmp	r2, r3
 8011962:	d106      	bne.n	8011972 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801196e:	429a      	cmp	r2, r3
 8011970:	d001      	beq.n	8011976 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8011972:	2301      	movs	r3, #1
 8011974:	e000      	b.n	8011978 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3718      	adds	r7, #24
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	40023800 	.word	0x40023800

08011984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d101      	bne.n	8011998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011994:	2301      	movs	r3, #1
 8011996:	e0cc      	b.n	8011b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011998:	4b68      	ldr	r3, [pc, #416]	; (8011b3c <HAL_RCC_ClockConfig+0x1b8>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f003 030f 	and.w	r3, r3, #15
 80119a0:	683a      	ldr	r2, [r7, #0]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d90c      	bls.n	80119c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80119a6:	4b65      	ldr	r3, [pc, #404]	; (8011b3c <HAL_RCC_ClockConfig+0x1b8>)
 80119a8:	683a      	ldr	r2, [r7, #0]
 80119aa:	b2d2      	uxtb	r2, r2
 80119ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80119ae:	4b63      	ldr	r3, [pc, #396]	; (8011b3c <HAL_RCC_ClockConfig+0x1b8>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f003 030f 	and.w	r3, r3, #15
 80119b6:	683a      	ldr	r2, [r7, #0]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d001      	beq.n	80119c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80119bc:	2301      	movs	r3, #1
 80119be:	e0b8      	b.n	8011b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f003 0302 	and.w	r3, r3, #2
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d020      	beq.n	8011a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f003 0304 	and.w	r3, r3, #4
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d005      	beq.n	80119e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80119d8:	4b59      	ldr	r3, [pc, #356]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 80119da:	689b      	ldr	r3, [r3, #8]
 80119dc:	4a58      	ldr	r2, [pc, #352]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 80119de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80119e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f003 0308 	and.w	r3, r3, #8
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d005      	beq.n	80119fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80119f0:	4b53      	ldr	r3, [pc, #332]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	4a52      	ldr	r2, [pc, #328]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 80119f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80119fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80119fc:	4b50      	ldr	r3, [pc, #320]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 80119fe:	689b      	ldr	r3, [r3, #8]
 8011a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	689b      	ldr	r3, [r3, #8]
 8011a08:	494d      	ldr	r1, [pc, #308]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011a0a:	4313      	orrs	r3, r2
 8011a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f003 0301 	and.w	r3, r3, #1
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d044      	beq.n	8011aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d107      	bne.n	8011a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a22:	4b47      	ldr	r3, [pc, #284]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d119      	bne.n	8011a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e07f      	b.n	8011b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	2b02      	cmp	r3, #2
 8011a38:	d003      	beq.n	8011a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011a3e:	2b03      	cmp	r3, #3
 8011a40:	d107      	bne.n	8011a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011a42:	4b3f      	ldr	r3, [pc, #252]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d109      	bne.n	8011a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e06f      	b.n	8011b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011a52:	4b3b      	ldr	r3, [pc, #236]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f003 0302 	and.w	r3, r3, #2
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d101      	bne.n	8011a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a5e:	2301      	movs	r3, #1
 8011a60:	e067      	b.n	8011b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011a62:	4b37      	ldr	r3, [pc, #220]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011a64:	689b      	ldr	r3, [r3, #8]
 8011a66:	f023 0203 	bic.w	r2, r3, #3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	4934      	ldr	r1, [pc, #208]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011a70:	4313      	orrs	r3, r2
 8011a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011a74:	f7fe f818 	bl	800faa8 <HAL_GetTick>
 8011a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011a7a:	e00a      	b.n	8011a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a7c:	f7fe f814 	bl	800faa8 <HAL_GetTick>
 8011a80:	4602      	mov	r2, r0
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	1ad3      	subs	r3, r2, r3
 8011a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d901      	bls.n	8011a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011a8e:	2303      	movs	r3, #3
 8011a90:	e04f      	b.n	8011b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011a92:	4b2b      	ldr	r3, [pc, #172]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	f003 020c 	and.w	r2, r3, #12
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d1eb      	bne.n	8011a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011aa4:	4b25      	ldr	r3, [pc, #148]	; (8011b3c <HAL_RCC_ClockConfig+0x1b8>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f003 030f 	and.w	r3, r3, #15
 8011aac:	683a      	ldr	r2, [r7, #0]
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d20c      	bcs.n	8011acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011ab2:	4b22      	ldr	r3, [pc, #136]	; (8011b3c <HAL_RCC_ClockConfig+0x1b8>)
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	b2d2      	uxtb	r2, r2
 8011ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011aba:	4b20      	ldr	r3, [pc, #128]	; (8011b3c <HAL_RCC_ClockConfig+0x1b8>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	f003 030f 	and.w	r3, r3, #15
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d001      	beq.n	8011acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011ac8:	2301      	movs	r3, #1
 8011aca:	e032      	b.n	8011b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f003 0304 	and.w	r3, r3, #4
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d008      	beq.n	8011aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011ad8:	4b19      	ldr	r3, [pc, #100]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011ada:	689b      	ldr	r3, [r3, #8]
 8011adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	68db      	ldr	r3, [r3, #12]
 8011ae4:	4916      	ldr	r1, [pc, #88]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011ae6:	4313      	orrs	r3, r2
 8011ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	f003 0308 	and.w	r3, r3, #8
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d009      	beq.n	8011b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011af6:	4b12      	ldr	r3, [pc, #72]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011af8:	689b      	ldr	r3, [r3, #8]
 8011afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	691b      	ldr	r3, [r3, #16]
 8011b02:	00db      	lsls	r3, r3, #3
 8011b04:	490e      	ldr	r1, [pc, #56]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011b06:	4313      	orrs	r3, r2
 8011b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011b0a:	f000 f821 	bl	8011b50 <HAL_RCC_GetSysClockFreq>
 8011b0e:	4602      	mov	r2, r0
 8011b10:	4b0b      	ldr	r3, [pc, #44]	; (8011b40 <HAL_RCC_ClockConfig+0x1bc>)
 8011b12:	689b      	ldr	r3, [r3, #8]
 8011b14:	091b      	lsrs	r3, r3, #4
 8011b16:	f003 030f 	and.w	r3, r3, #15
 8011b1a:	490a      	ldr	r1, [pc, #40]	; (8011b44 <HAL_RCC_ClockConfig+0x1c0>)
 8011b1c:	5ccb      	ldrb	r3, [r1, r3]
 8011b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8011b22:	4a09      	ldr	r2, [pc, #36]	; (8011b48 <HAL_RCC_ClockConfig+0x1c4>)
 8011b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011b26:	4b09      	ldr	r3, [pc, #36]	; (8011b4c <HAL_RCC_ClockConfig+0x1c8>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fd ff78 	bl	800fa20 <HAL_InitTick>

  return HAL_OK;
 8011b30:	2300      	movs	r3, #0
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3710      	adds	r7, #16
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	40023c00 	.word	0x40023c00
 8011b40:	40023800 	.word	0x40023800
 8011b44:	0801a744 	.word	0x0801a744
 8011b48:	2000001c 	.word	0x2000001c
 8011b4c:	20000020 	.word	0x20000020

08011b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b54:	b094      	sub	sp, #80	; 0x50
 8011b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b60:	2300      	movs	r3, #0
 8011b62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8011b64:	2300      	movs	r3, #0
 8011b66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011b68:	4b79      	ldr	r3, [pc, #484]	; (8011d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8011b6a:	689b      	ldr	r3, [r3, #8]
 8011b6c:	f003 030c 	and.w	r3, r3, #12
 8011b70:	2b08      	cmp	r3, #8
 8011b72:	d00d      	beq.n	8011b90 <HAL_RCC_GetSysClockFreq+0x40>
 8011b74:	2b08      	cmp	r3, #8
 8011b76:	f200 80e1 	bhi.w	8011d3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d002      	beq.n	8011b84 <HAL_RCC_GetSysClockFreq+0x34>
 8011b7e:	2b04      	cmp	r3, #4
 8011b80:	d003      	beq.n	8011b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8011b82:	e0db      	b.n	8011d3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011b84:	4b73      	ldr	r3, [pc, #460]	; (8011d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8011b86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8011b88:	e0db      	b.n	8011d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011b8a:	4b73      	ldr	r3, [pc, #460]	; (8011d58 <HAL_RCC_GetSysClockFreq+0x208>)
 8011b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011b8e:	e0d8      	b.n	8011d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011b90:	4b6f      	ldr	r3, [pc, #444]	; (8011d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011b9a:	4b6d      	ldr	r3, [pc, #436]	; (8011d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d063      	beq.n	8011c6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011ba6:	4b6a      	ldr	r3, [pc, #424]	; (8011d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	099b      	lsrs	r3, r3, #6
 8011bac:	2200      	movs	r2, #0
 8011bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8011bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8011bba:	2300      	movs	r3, #0
 8011bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8011bbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011bc2:	4622      	mov	r2, r4
 8011bc4:	462b      	mov	r3, r5
 8011bc6:	f04f 0000 	mov.w	r0, #0
 8011bca:	f04f 0100 	mov.w	r1, #0
 8011bce:	0159      	lsls	r1, r3, #5
 8011bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011bd4:	0150      	lsls	r0, r2, #5
 8011bd6:	4602      	mov	r2, r0
 8011bd8:	460b      	mov	r3, r1
 8011bda:	4621      	mov	r1, r4
 8011bdc:	1a51      	subs	r1, r2, r1
 8011bde:	6139      	str	r1, [r7, #16]
 8011be0:	4629      	mov	r1, r5
 8011be2:	eb63 0301 	sbc.w	r3, r3, r1
 8011be6:	617b      	str	r3, [r7, #20]
 8011be8:	f04f 0200 	mov.w	r2, #0
 8011bec:	f04f 0300 	mov.w	r3, #0
 8011bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011bf4:	4659      	mov	r1, fp
 8011bf6:	018b      	lsls	r3, r1, #6
 8011bf8:	4651      	mov	r1, sl
 8011bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011bfe:	4651      	mov	r1, sl
 8011c00:	018a      	lsls	r2, r1, #6
 8011c02:	4651      	mov	r1, sl
 8011c04:	ebb2 0801 	subs.w	r8, r2, r1
 8011c08:	4659      	mov	r1, fp
 8011c0a:	eb63 0901 	sbc.w	r9, r3, r1
 8011c0e:	f04f 0200 	mov.w	r2, #0
 8011c12:	f04f 0300 	mov.w	r3, #0
 8011c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011c22:	4690      	mov	r8, r2
 8011c24:	4699      	mov	r9, r3
 8011c26:	4623      	mov	r3, r4
 8011c28:	eb18 0303 	adds.w	r3, r8, r3
 8011c2c:	60bb      	str	r3, [r7, #8]
 8011c2e:	462b      	mov	r3, r5
 8011c30:	eb49 0303 	adc.w	r3, r9, r3
 8011c34:	60fb      	str	r3, [r7, #12]
 8011c36:	f04f 0200 	mov.w	r2, #0
 8011c3a:	f04f 0300 	mov.w	r3, #0
 8011c3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011c42:	4629      	mov	r1, r5
 8011c44:	024b      	lsls	r3, r1, #9
 8011c46:	4621      	mov	r1, r4
 8011c48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8011c4c:	4621      	mov	r1, r4
 8011c4e:	024a      	lsls	r2, r1, #9
 8011c50:	4610      	mov	r0, r2
 8011c52:	4619      	mov	r1, r3
 8011c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c56:	2200      	movs	r2, #0
 8011c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011c60:	f7f6 ff4a 	bl	8008af8 <__aeabi_uldivmod>
 8011c64:	4602      	mov	r2, r0
 8011c66:	460b      	mov	r3, r1
 8011c68:	4613      	mov	r3, r2
 8011c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c6c:	e058      	b.n	8011d20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c6e:	4b38      	ldr	r3, [pc, #224]	; (8011d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	099b      	lsrs	r3, r3, #6
 8011c74:	2200      	movs	r2, #0
 8011c76:	4618      	mov	r0, r3
 8011c78:	4611      	mov	r1, r2
 8011c7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8011c7e:	623b      	str	r3, [r7, #32]
 8011c80:	2300      	movs	r3, #0
 8011c82:	627b      	str	r3, [r7, #36]	; 0x24
 8011c84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011c88:	4642      	mov	r2, r8
 8011c8a:	464b      	mov	r3, r9
 8011c8c:	f04f 0000 	mov.w	r0, #0
 8011c90:	f04f 0100 	mov.w	r1, #0
 8011c94:	0159      	lsls	r1, r3, #5
 8011c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011c9a:	0150      	lsls	r0, r2, #5
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	460b      	mov	r3, r1
 8011ca0:	4641      	mov	r1, r8
 8011ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8011ca6:	4649      	mov	r1, r9
 8011ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8011cac:	f04f 0200 	mov.w	r2, #0
 8011cb0:	f04f 0300 	mov.w	r3, #0
 8011cb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8011cb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8011cbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8011cc0:	ebb2 040a 	subs.w	r4, r2, sl
 8011cc4:	eb63 050b 	sbc.w	r5, r3, fp
 8011cc8:	f04f 0200 	mov.w	r2, #0
 8011ccc:	f04f 0300 	mov.w	r3, #0
 8011cd0:	00eb      	lsls	r3, r5, #3
 8011cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011cd6:	00e2      	lsls	r2, r4, #3
 8011cd8:	4614      	mov	r4, r2
 8011cda:	461d      	mov	r5, r3
 8011cdc:	4643      	mov	r3, r8
 8011cde:	18e3      	adds	r3, r4, r3
 8011ce0:	603b      	str	r3, [r7, #0]
 8011ce2:	464b      	mov	r3, r9
 8011ce4:	eb45 0303 	adc.w	r3, r5, r3
 8011ce8:	607b      	str	r3, [r7, #4]
 8011cea:	f04f 0200 	mov.w	r2, #0
 8011cee:	f04f 0300 	mov.w	r3, #0
 8011cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	028b      	lsls	r3, r1, #10
 8011cfa:	4621      	mov	r1, r4
 8011cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011d00:	4621      	mov	r1, r4
 8011d02:	028a      	lsls	r2, r1, #10
 8011d04:	4610      	mov	r0, r2
 8011d06:	4619      	mov	r1, r3
 8011d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	61bb      	str	r3, [r7, #24]
 8011d0e:	61fa      	str	r2, [r7, #28]
 8011d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011d14:	f7f6 fef0 	bl	8008af8 <__aeabi_uldivmod>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	460b      	mov	r3, r1
 8011d1c:	4613      	mov	r3, r2
 8011d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011d20:	4b0b      	ldr	r3, [pc, #44]	; (8011d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	0c1b      	lsrs	r3, r3, #16
 8011d26:	f003 0303 	and.w	r3, r3, #3
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	005b      	lsls	r3, r3, #1
 8011d2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8011d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011d3a:	e002      	b.n	8011d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011d3c:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8011d3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3750      	adds	r7, #80	; 0x50
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011d4e:	bf00      	nop
 8011d50:	40023800 	.word	0x40023800
 8011d54:	00f42400 	.word	0x00f42400
 8011d58:	007a1200 	.word	0x007a1200

08011d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011d60:	4b03      	ldr	r3, [pc, #12]	; (8011d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8011d62:	681b      	ldr	r3, [r3, #0]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	2000001c 	.word	0x2000001c

08011d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011d78:	f7ff fff0 	bl	8011d5c <HAL_RCC_GetHCLKFreq>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	4b05      	ldr	r3, [pc, #20]	; (8011d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011d80:	689b      	ldr	r3, [r3, #8]
 8011d82:	0a9b      	lsrs	r3, r3, #10
 8011d84:	f003 0307 	and.w	r3, r3, #7
 8011d88:	4903      	ldr	r1, [pc, #12]	; (8011d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011d8a:	5ccb      	ldrb	r3, [r1, r3]
 8011d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	bd80      	pop	{r7, pc}
 8011d94:	40023800 	.word	0x40023800
 8011d98:	0801a754 	.word	0x0801a754

08011d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011da0:	f7ff ffdc 	bl	8011d5c <HAL_RCC_GetHCLKFreq>
 8011da4:	4602      	mov	r2, r0
 8011da6:	4b05      	ldr	r3, [pc, #20]	; (8011dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8011da8:	689b      	ldr	r3, [r3, #8]
 8011daa:	0b5b      	lsrs	r3, r3, #13
 8011dac:	f003 0307 	and.w	r3, r3, #7
 8011db0:	4903      	ldr	r1, [pc, #12]	; (8011dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011db2:	5ccb      	ldrb	r3, [r1, r3]
 8011db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	40023800 	.word	0x40023800
 8011dc0:	0801a754 	.word	0x0801a754

08011dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d101      	bne.n	8011dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	e056      	b.n	8011e84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d106      	bne.n	8011df6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7fc fe17 	bl	800ea24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2202      	movs	r2, #2
 8011dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	681a      	ldr	r2, [r3, #0]
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011e0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	685a      	ldr	r2, [r3, #4]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	689b      	ldr	r3, [r3, #8]
 8011e16:	431a      	orrs	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	431a      	orrs	r2, r3
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	691b      	ldr	r3, [r3, #16]
 8011e22:	431a      	orrs	r2, r3
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	695b      	ldr	r3, [r3, #20]
 8011e28:	431a      	orrs	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	699b      	ldr	r3, [r3, #24]
 8011e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011e32:	431a      	orrs	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	69db      	ldr	r3, [r3, #28]
 8011e38:	431a      	orrs	r2, r3
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6a1b      	ldr	r3, [r3, #32]
 8011e3e:	ea42 0103 	orr.w	r1, r2, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	430a      	orrs	r2, r1
 8011e4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	0c1b      	lsrs	r3, r3, #16
 8011e54:	f003 0104 	and.w	r1, r3, #4
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	430a      	orrs	r2, r1
 8011e62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	69da      	ldr	r2, [r3, #28]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2200      	movs	r2, #0
 8011e78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011e82:	2300      	movs	r3, #0
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3708      	adds	r7, #8
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b088      	sub	sp, #32
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	603b      	str	r3, [r7, #0]
 8011e98:	4613      	mov	r3, r2
 8011e9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d101      	bne.n	8011eae <HAL_SPI_Transmit+0x22>
 8011eaa:	2302      	movs	r3, #2
 8011eac:	e11e      	b.n	80120ec <HAL_SPI_Transmit+0x260>
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011eb6:	f7fd fdf7 	bl	800faa8 <HAL_GetTick>
 8011eba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011ebc:	88fb      	ldrh	r3, [r7, #6]
 8011ebe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ec6:	b2db      	uxtb	r3, r3
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d002      	beq.n	8011ed2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011ecc:	2302      	movs	r3, #2
 8011ece:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011ed0:	e103      	b.n	80120da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d002      	beq.n	8011ede <HAL_SPI_Transmit+0x52>
 8011ed8:	88fb      	ldrh	r3, [r7, #6]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d102      	bne.n	8011ee4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011ee2:	e0fa      	b.n	80120da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2203      	movs	r2, #3
 8011ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	68ba      	ldr	r2, [r7, #8]
 8011ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	88fa      	ldrh	r2, [r7, #6]
 8011efc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	88fa      	ldrh	r2, [r7, #6]
 8011f02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2200      	movs	r2, #0
 8011f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2200      	movs	r2, #0
 8011f14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f2a:	d107      	bne.n	8011f3c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011f3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f46:	2b40      	cmp	r3, #64	; 0x40
 8011f48:	d007      	beq.n	8011f5a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f62:	d14b      	bne.n	8011ffc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <HAL_SPI_Transmit+0xe6>
 8011f6c:	8afb      	ldrh	r3, [r7, #22]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d13e      	bne.n	8011ff0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f76:	881a      	ldrh	r2, [r3, #0]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f82:	1c9a      	adds	r2, r3, #2
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	3b01      	subs	r3, #1
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011f96:	e02b      	b.n	8011ff0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	689b      	ldr	r3, [r3, #8]
 8011f9e:	f003 0302 	and.w	r3, r3, #2
 8011fa2:	2b02      	cmp	r3, #2
 8011fa4:	d112      	bne.n	8011fcc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011faa:	881a      	ldrh	r2, [r3, #0]
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fb6:	1c9a      	adds	r2, r3, #2
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	b29a      	uxth	r2, r3
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8011fca:	e011      	b.n	8011ff0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011fcc:	f7fd fd6c 	bl	800faa8 <HAL_GetTick>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	69bb      	ldr	r3, [r7, #24]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	683a      	ldr	r2, [r7, #0]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d803      	bhi.n	8011fe4 <HAL_SPI_Transmit+0x158>
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe2:	d102      	bne.n	8011fea <HAL_SPI_Transmit+0x15e>
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d102      	bne.n	8011ff0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8011fea:	2303      	movs	r3, #3
 8011fec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011fee:	e074      	b.n	80120da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d1ce      	bne.n	8011f98 <HAL_SPI_Transmit+0x10c>
 8011ffa:	e04c      	b.n	8012096 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d002      	beq.n	801200a <HAL_SPI_Transmit+0x17e>
 8012004:	8afb      	ldrh	r3, [r7, #22]
 8012006:	2b01      	cmp	r3, #1
 8012008:	d140      	bne.n	801208c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	330c      	adds	r3, #12
 8012014:	7812      	ldrb	r2, [r2, #0]
 8012016:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801201c:	1c5a      	adds	r2, r3, #1
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012026:	b29b      	uxth	r3, r3
 8012028:	3b01      	subs	r3, #1
 801202a:	b29a      	uxth	r2, r3
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012030:	e02c      	b.n	801208c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	689b      	ldr	r3, [r3, #8]
 8012038:	f003 0302 	and.w	r3, r3, #2
 801203c:	2b02      	cmp	r3, #2
 801203e:	d113      	bne.n	8012068 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	330c      	adds	r3, #12
 801204a:	7812      	ldrb	r2, [r2, #0]
 801204c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012052:	1c5a      	adds	r2, r3, #1
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801205c:	b29b      	uxth	r3, r3
 801205e:	3b01      	subs	r3, #1
 8012060:	b29a      	uxth	r2, r3
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	86da      	strh	r2, [r3, #54]	; 0x36
 8012066:	e011      	b.n	801208c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012068:	f7fd fd1e 	bl	800faa8 <HAL_GetTick>
 801206c:	4602      	mov	r2, r0
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	1ad3      	subs	r3, r2, r3
 8012072:	683a      	ldr	r2, [r7, #0]
 8012074:	429a      	cmp	r2, r3
 8012076:	d803      	bhi.n	8012080 <HAL_SPI_Transmit+0x1f4>
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801207e:	d102      	bne.n	8012086 <HAL_SPI_Transmit+0x1fa>
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d102      	bne.n	801208c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8012086:	2303      	movs	r3, #3
 8012088:	77fb      	strb	r3, [r7, #31]
          goto error;
 801208a:	e026      	b.n	80120da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012090:	b29b      	uxth	r3, r3
 8012092:	2b00      	cmp	r3, #0
 8012094:	d1cd      	bne.n	8012032 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012096:	69ba      	ldr	r2, [r7, #24]
 8012098:	6839      	ldr	r1, [r7, #0]
 801209a:	68f8      	ldr	r0, [r7, #12]
 801209c:	f000 fba4 	bl	80127e8 <SPI_EndRxTxTransaction>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d002      	beq.n	80120ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	2220      	movs	r2, #32
 80120aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	689b      	ldr	r3, [r3, #8]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d10a      	bne.n	80120ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80120b4:	2300      	movs	r3, #0
 80120b6:	613b      	str	r3, [r7, #16]
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	613b      	str	r3, [r7, #16]
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	689b      	ldr	r3, [r3, #8]
 80120c6:	613b      	str	r3, [r7, #16]
 80120c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d002      	beq.n	80120d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80120d2:	2301      	movs	r3, #1
 80120d4:	77fb      	strb	r3, [r7, #31]
 80120d6:	e000      	b.n	80120da <HAL_SPI_Transmit+0x24e>
  }

error:
 80120d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	2201      	movs	r2, #1
 80120de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	2200      	movs	r2, #0
 80120e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80120ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3720      	adds	r7, #32
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b088      	sub	sp, #32
 80120f8:	af02      	add	r7, sp, #8
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	60b9      	str	r1, [r7, #8]
 80120fe:	603b      	str	r3, [r7, #0]
 8012100:	4613      	mov	r3, r2
 8012102:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012104:	2300      	movs	r3, #0
 8012106:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012110:	d112      	bne.n	8012138 <HAL_SPI_Receive+0x44>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	689b      	ldr	r3, [r3, #8]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d10e      	bne.n	8012138 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	2204      	movs	r2, #4
 801211e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012122:	88fa      	ldrh	r2, [r7, #6]
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	4613      	mov	r3, r2
 801212a:	68ba      	ldr	r2, [r7, #8]
 801212c:	68b9      	ldr	r1, [r7, #8]
 801212e:	68f8      	ldr	r0, [r7, #12]
 8012130:	f000 f8e9 	bl	8012306 <HAL_SPI_TransmitReceive>
 8012134:	4603      	mov	r3, r0
 8012136:	e0e2      	b.n	80122fe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801213e:	2b01      	cmp	r3, #1
 8012140:	d101      	bne.n	8012146 <HAL_SPI_Receive+0x52>
 8012142:	2302      	movs	r3, #2
 8012144:	e0db      	b.n	80122fe <HAL_SPI_Receive+0x20a>
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2201      	movs	r2, #1
 801214a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801214e:	f7fd fcab 	bl	800faa8 <HAL_GetTick>
 8012152:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801215a:	b2db      	uxtb	r3, r3
 801215c:	2b01      	cmp	r3, #1
 801215e:	d002      	beq.n	8012166 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012160:	2302      	movs	r3, #2
 8012162:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012164:	e0c2      	b.n	80122ec <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d002      	beq.n	8012172 <HAL_SPI_Receive+0x7e>
 801216c:	88fb      	ldrh	r3, [r7, #6]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d102      	bne.n	8012178 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012172:	2301      	movs	r3, #1
 8012174:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012176:	e0b9      	b.n	80122ec <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2204      	movs	r2, #4
 801217c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	2200      	movs	r2, #0
 8012184:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	88fa      	ldrh	r2, [r7, #6]
 8012190:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	88fa      	ldrh	r2, [r7, #6]
 8012196:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	2200      	movs	r2, #0
 801219c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2200      	movs	r2, #0
 80121a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2200      	movs	r2, #0
 80121a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2200      	movs	r2, #0
 80121ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	2200      	movs	r2, #0
 80121b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	689b      	ldr	r3, [r3, #8]
 80121ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80121be:	d107      	bne.n	80121d0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80121ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121da:	2b40      	cmp	r3, #64	; 0x40
 80121dc:	d007      	beq.n	80121ee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	681a      	ldr	r2, [r3, #0]
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80121ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d162      	bne.n	80122bc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80121f6:	e02e      	b.n	8012256 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	689b      	ldr	r3, [r3, #8]
 80121fe:	f003 0301 	and.w	r3, r3, #1
 8012202:	2b01      	cmp	r3, #1
 8012204:	d115      	bne.n	8012232 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f103 020c 	add.w	r2, r3, #12
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012212:	7812      	ldrb	r2, [r2, #0]
 8012214:	b2d2      	uxtb	r2, r2
 8012216:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801221c:	1c5a      	adds	r2, r3, #1
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012226:	b29b      	uxth	r3, r3
 8012228:	3b01      	subs	r3, #1
 801222a:	b29a      	uxth	r2, r3
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012230:	e011      	b.n	8012256 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012232:	f7fd fc39 	bl	800faa8 <HAL_GetTick>
 8012236:	4602      	mov	r2, r0
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	683a      	ldr	r2, [r7, #0]
 801223e:	429a      	cmp	r2, r3
 8012240:	d803      	bhi.n	801224a <HAL_SPI_Receive+0x156>
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012248:	d102      	bne.n	8012250 <HAL_SPI_Receive+0x15c>
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d102      	bne.n	8012256 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8012250:	2303      	movs	r3, #3
 8012252:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012254:	e04a      	b.n	80122ec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801225a:	b29b      	uxth	r3, r3
 801225c:	2b00      	cmp	r3, #0
 801225e:	d1cb      	bne.n	80121f8 <HAL_SPI_Receive+0x104>
 8012260:	e031      	b.n	80122c6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	689b      	ldr	r3, [r3, #8]
 8012268:	f003 0301 	and.w	r3, r3, #1
 801226c:	2b01      	cmp	r3, #1
 801226e:	d113      	bne.n	8012298 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	68da      	ldr	r2, [r3, #12]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801227a:	b292      	uxth	r2, r2
 801227c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012282:	1c9a      	adds	r2, r3, #2
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801228c:	b29b      	uxth	r3, r3
 801228e:	3b01      	subs	r3, #1
 8012290:	b29a      	uxth	r2, r3
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012296:	e011      	b.n	80122bc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012298:	f7fd fc06 	bl	800faa8 <HAL_GetTick>
 801229c:	4602      	mov	r2, r0
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	683a      	ldr	r2, [r7, #0]
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d803      	bhi.n	80122b0 <HAL_SPI_Receive+0x1bc>
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ae:	d102      	bne.n	80122b6 <HAL_SPI_Receive+0x1c2>
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d102      	bne.n	80122bc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80122b6:	2303      	movs	r3, #3
 80122b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80122ba:	e017      	b.n	80122ec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d1cd      	bne.n	8012262 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80122c6:	693a      	ldr	r2, [r7, #16]
 80122c8:	6839      	ldr	r1, [r7, #0]
 80122ca:	68f8      	ldr	r0, [r7, #12]
 80122cc:	f000 fa27 	bl	801271e <SPI_EndRxTransaction>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d002      	beq.n	80122dc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2220      	movs	r2, #32
 80122da:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d002      	beq.n	80122ea <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80122e4:	2301      	movs	r3, #1
 80122e6:	75fb      	strb	r3, [r7, #23]
 80122e8:	e000      	b.n	80122ec <HAL_SPI_Receive+0x1f8>
  }

error :
 80122ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2201      	movs	r2, #1
 80122f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80122fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3718      	adds	r7, #24
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b08c      	sub	sp, #48	; 0x30
 801230a:	af00      	add	r7, sp, #0
 801230c:	60f8      	str	r0, [r7, #12]
 801230e:	60b9      	str	r1, [r7, #8]
 8012310:	607a      	str	r2, [r7, #4]
 8012312:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8012314:	2301      	movs	r3, #1
 8012316:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012318:	2300      	movs	r3, #0
 801231a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012324:	2b01      	cmp	r3, #1
 8012326:	d101      	bne.n	801232c <HAL_SPI_TransmitReceive+0x26>
 8012328:	2302      	movs	r3, #2
 801232a:	e18a      	b.n	8012642 <HAL_SPI_TransmitReceive+0x33c>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2201      	movs	r2, #1
 8012330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012334:	f7fd fbb8 	bl	800faa8 <HAL_GetTick>
 8012338:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801234a:	887b      	ldrh	r3, [r7, #2]
 801234c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801234e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012352:	2b01      	cmp	r3, #1
 8012354:	d00f      	beq.n	8012376 <HAL_SPI_TransmitReceive+0x70>
 8012356:	69fb      	ldr	r3, [r7, #28]
 8012358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801235c:	d107      	bne.n	801236e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	689b      	ldr	r3, [r3, #8]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d103      	bne.n	801236e <HAL_SPI_TransmitReceive+0x68>
 8012366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801236a:	2b04      	cmp	r3, #4
 801236c:	d003      	beq.n	8012376 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801236e:	2302      	movs	r3, #2
 8012370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012374:	e15b      	b.n	801262e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d005      	beq.n	8012388 <HAL_SPI_TransmitReceive+0x82>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d002      	beq.n	8012388 <HAL_SPI_TransmitReceive+0x82>
 8012382:	887b      	ldrh	r3, [r7, #2]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d103      	bne.n	8012390 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8012388:	2301      	movs	r3, #1
 801238a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801238e:	e14e      	b.n	801262e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012396:	b2db      	uxtb	r3, r3
 8012398:	2b04      	cmp	r3, #4
 801239a:	d003      	beq.n	80123a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	2205      	movs	r2, #5
 80123a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2200      	movs	r2, #0
 80123a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	887a      	ldrh	r2, [r7, #2]
 80123b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	887a      	ldrh	r2, [r7, #2]
 80123ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	68ba      	ldr	r2, [r7, #8]
 80123c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	887a      	ldrh	r2, [r7, #2]
 80123c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	887a      	ldrh	r2, [r7, #2]
 80123cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2200      	movs	r2, #0
 80123d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2200      	movs	r2, #0
 80123d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123e4:	2b40      	cmp	r3, #64	; 0x40
 80123e6:	d007      	beq.n	80123f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80123f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	68db      	ldr	r3, [r3, #12]
 80123fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012400:	d178      	bne.n	80124f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d002      	beq.n	8012410 <HAL_SPI_TransmitReceive+0x10a>
 801240a:	8b7b      	ldrh	r3, [r7, #26]
 801240c:	2b01      	cmp	r3, #1
 801240e:	d166      	bne.n	80124de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012414:	881a      	ldrh	r2, [r3, #0]
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012420:	1c9a      	adds	r2, r3, #2
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801242a:	b29b      	uxth	r3, r3
 801242c:	3b01      	subs	r3, #1
 801242e:	b29a      	uxth	r2, r3
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012434:	e053      	b.n	80124de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	f003 0302 	and.w	r3, r3, #2
 8012440:	2b02      	cmp	r3, #2
 8012442:	d11b      	bne.n	801247c <HAL_SPI_TransmitReceive+0x176>
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012448:	b29b      	uxth	r3, r3
 801244a:	2b00      	cmp	r3, #0
 801244c:	d016      	beq.n	801247c <HAL_SPI_TransmitReceive+0x176>
 801244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012450:	2b01      	cmp	r3, #1
 8012452:	d113      	bne.n	801247c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012458:	881a      	ldrh	r2, [r3, #0]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012464:	1c9a      	adds	r2, r3, #2
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801246e:	b29b      	uxth	r3, r3
 8012470:	3b01      	subs	r3, #1
 8012472:	b29a      	uxth	r2, r3
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012478:	2300      	movs	r3, #0
 801247a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	689b      	ldr	r3, [r3, #8]
 8012482:	f003 0301 	and.w	r3, r3, #1
 8012486:	2b01      	cmp	r3, #1
 8012488:	d119      	bne.n	80124be <HAL_SPI_TransmitReceive+0x1b8>
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801248e:	b29b      	uxth	r3, r3
 8012490:	2b00      	cmp	r3, #0
 8012492:	d014      	beq.n	80124be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	68da      	ldr	r2, [r3, #12]
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801249e:	b292      	uxth	r2, r2
 80124a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124a6:	1c9a      	adds	r2, r3, #2
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	3b01      	subs	r3, #1
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80124ba:	2301      	movs	r3, #1
 80124bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80124be:	f7fd faf3 	bl	800faa8 <HAL_GetTick>
 80124c2:	4602      	mov	r2, r0
 80124c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c6:	1ad3      	subs	r3, r2, r3
 80124c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d807      	bhi.n	80124de <HAL_SPI_TransmitReceive+0x1d8>
 80124ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d4:	d003      	beq.n	80124de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80124d6:	2303      	movs	r3, #3
 80124d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80124dc:	e0a7      	b.n	801262e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d1a6      	bne.n	8012436 <HAL_SPI_TransmitReceive+0x130>
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d1a1      	bne.n	8012436 <HAL_SPI_TransmitReceive+0x130>
 80124f2:	e07c      	b.n	80125ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d002      	beq.n	8012502 <HAL_SPI_TransmitReceive+0x1fc>
 80124fc:	8b7b      	ldrh	r3, [r7, #26]
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d16b      	bne.n	80125da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	330c      	adds	r3, #12
 801250c:	7812      	ldrb	r2, [r2, #0]
 801250e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012514:	1c5a      	adds	r2, r3, #1
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801251e:	b29b      	uxth	r3, r3
 8012520:	3b01      	subs	r3, #1
 8012522:	b29a      	uxth	r2, r3
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012528:	e057      	b.n	80125da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	689b      	ldr	r3, [r3, #8]
 8012530:	f003 0302 	and.w	r3, r3, #2
 8012534:	2b02      	cmp	r3, #2
 8012536:	d11c      	bne.n	8012572 <HAL_SPI_TransmitReceive+0x26c>
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801253c:	b29b      	uxth	r3, r3
 801253e:	2b00      	cmp	r3, #0
 8012540:	d017      	beq.n	8012572 <HAL_SPI_TransmitReceive+0x26c>
 8012542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012544:	2b01      	cmp	r3, #1
 8012546:	d114      	bne.n	8012572 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	330c      	adds	r3, #12
 8012552:	7812      	ldrb	r2, [r2, #0]
 8012554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801255a:	1c5a      	adds	r2, r3, #1
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012564:	b29b      	uxth	r3, r3
 8012566:	3b01      	subs	r3, #1
 8012568:	b29a      	uxth	r2, r3
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801256e:	2300      	movs	r3, #0
 8012570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	689b      	ldr	r3, [r3, #8]
 8012578:	f003 0301 	and.w	r3, r3, #1
 801257c:	2b01      	cmp	r3, #1
 801257e:	d119      	bne.n	80125b4 <HAL_SPI_TransmitReceive+0x2ae>
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012584:	b29b      	uxth	r3, r3
 8012586:	2b00      	cmp	r3, #0
 8012588:	d014      	beq.n	80125b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	68da      	ldr	r2, [r3, #12]
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012594:	b2d2      	uxtb	r2, r2
 8012596:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801259c:	1c5a      	adds	r2, r3, #1
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	3b01      	subs	r3, #1
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80125b0:	2301      	movs	r3, #1
 80125b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80125b4:	f7fd fa78 	bl	800faa8 <HAL_GetTick>
 80125b8:	4602      	mov	r2, r0
 80125ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125bc:	1ad3      	subs	r3, r2, r3
 80125be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d803      	bhi.n	80125cc <HAL_SPI_TransmitReceive+0x2c6>
 80125c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ca:	d102      	bne.n	80125d2 <HAL_SPI_TransmitReceive+0x2cc>
 80125cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d103      	bne.n	80125da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80125d2:	2303      	movs	r3, #3
 80125d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80125d8:	e029      	b.n	801262e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80125de:	b29b      	uxth	r3, r3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d1a2      	bne.n	801252a <HAL_SPI_TransmitReceive+0x224>
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d19d      	bne.n	801252a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80125ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f000 f8f8 	bl	80127e8 <SPI_EndRxTxTransaction>
 80125f8:	4603      	mov	r3, r0
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d006      	beq.n	801260c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80125fe:	2301      	movs	r3, #1
 8012600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	2220      	movs	r2, #32
 8012608:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801260a:	e010      	b.n	801262e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	689b      	ldr	r3, [r3, #8]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d10b      	bne.n	801262c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012614:	2300      	movs	r3, #0
 8012616:	617b      	str	r3, [r7, #20]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	617b      	str	r3, [r7, #20]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	689b      	ldr	r3, [r3, #8]
 8012626:	617b      	str	r3, [r7, #20]
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	e000      	b.n	801262e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801262c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2201      	movs	r2, #1
 8012632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	2200      	movs	r2, #0
 801263a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801263e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012642:	4618      	mov	r0, r3
 8012644:	3730      	adds	r7, #48	; 0x30
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}

0801264a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801264a:	b580      	push	{r7, lr}
 801264c:	b084      	sub	sp, #16
 801264e:	af00      	add	r7, sp, #0
 8012650:	60f8      	str	r0, [r7, #12]
 8012652:	60b9      	str	r1, [r7, #8]
 8012654:	603b      	str	r3, [r7, #0]
 8012656:	4613      	mov	r3, r2
 8012658:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801265a:	e04c      	b.n	80126f6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012662:	d048      	beq.n	80126f6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8012664:	f7fd fa20 	bl	800faa8 <HAL_GetTick>
 8012668:	4602      	mov	r2, r0
 801266a:	69bb      	ldr	r3, [r7, #24]
 801266c:	1ad3      	subs	r3, r2, r3
 801266e:	683a      	ldr	r2, [r7, #0]
 8012670:	429a      	cmp	r2, r3
 8012672:	d902      	bls.n	801267a <SPI_WaitFlagStateUntilTimeout+0x30>
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d13d      	bne.n	80126f6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	685a      	ldr	r2, [r3, #4]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012688:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012692:	d111      	bne.n	80126b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801269c:	d004      	beq.n	80126a8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	689b      	ldr	r3, [r3, #8]
 80126a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80126a6:	d107      	bne.n	80126b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80126b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80126c0:	d10f      	bne.n	80126e2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80126d0:	601a      	str	r2, [r3, #0]
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	681a      	ldr	r2, [r3, #0]
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80126e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2201      	movs	r2, #1
 80126e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2200      	movs	r2, #0
 80126ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80126f2:	2303      	movs	r3, #3
 80126f4:	e00f      	b.n	8012716 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	689a      	ldr	r2, [r3, #8]
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	4013      	ands	r3, r2
 8012700:	68ba      	ldr	r2, [r7, #8]
 8012702:	429a      	cmp	r2, r3
 8012704:	bf0c      	ite	eq
 8012706:	2301      	moveq	r3, #1
 8012708:	2300      	movne	r3, #0
 801270a:	b2db      	uxtb	r3, r3
 801270c:	461a      	mov	r2, r3
 801270e:	79fb      	ldrb	r3, [r7, #7]
 8012710:	429a      	cmp	r2, r3
 8012712:	d1a3      	bne.n	801265c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8012714:	2300      	movs	r3, #0
}
 8012716:	4618      	mov	r0, r3
 8012718:	3710      	adds	r7, #16
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801271e:	b580      	push	{r7, lr}
 8012720:	b086      	sub	sp, #24
 8012722:	af02      	add	r7, sp, #8
 8012724:	60f8      	str	r0, [r7, #12]
 8012726:	60b9      	str	r1, [r7, #8]
 8012728:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012732:	d111      	bne.n	8012758 <SPI_EndRxTransaction+0x3a>
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	689b      	ldr	r3, [r3, #8]
 8012738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801273c:	d004      	beq.n	8012748 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012746:	d107      	bne.n	8012758 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012756:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012760:	d12a      	bne.n	80127b8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801276a:	d012      	beq.n	8012792 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	2200      	movs	r2, #0
 8012774:	2180      	movs	r1, #128	; 0x80
 8012776:	68f8      	ldr	r0, [r7, #12]
 8012778:	f7ff ff67 	bl	801264a <SPI_WaitFlagStateUntilTimeout>
 801277c:	4603      	mov	r3, r0
 801277e:	2b00      	cmp	r3, #0
 8012780:	d02d      	beq.n	80127de <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012786:	f043 0220 	orr.w	r2, r3, #32
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801278e:	2303      	movs	r3, #3
 8012790:	e026      	b.n	80127e0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	9300      	str	r3, [sp, #0]
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	2200      	movs	r2, #0
 801279a:	2101      	movs	r1, #1
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	f7ff ff54 	bl	801264a <SPI_WaitFlagStateUntilTimeout>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d01a      	beq.n	80127de <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127ac:	f043 0220 	orr.w	r2, r3, #32
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80127b4:	2303      	movs	r3, #3
 80127b6:	e013      	b.n	80127e0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	9300      	str	r3, [sp, #0]
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	2200      	movs	r2, #0
 80127c0:	2101      	movs	r1, #1
 80127c2:	68f8      	ldr	r0, [r7, #12]
 80127c4:	f7ff ff41 	bl	801264a <SPI_WaitFlagStateUntilTimeout>
 80127c8:	4603      	mov	r3, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d007      	beq.n	80127de <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127d2:	f043 0220 	orr.w	r2, r3, #32
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80127da:	2303      	movs	r3, #3
 80127dc:	e000      	b.n	80127e0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80127de:	2300      	movs	r3, #0
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3710      	adds	r7, #16
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b088      	sub	sp, #32
 80127ec:	af02      	add	r7, sp, #8
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80127f4:	4b1b      	ldr	r3, [pc, #108]	; (8012864 <SPI_EndRxTxTransaction+0x7c>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	4a1b      	ldr	r2, [pc, #108]	; (8012868 <SPI_EndRxTxTransaction+0x80>)
 80127fa:	fba2 2303 	umull	r2, r3, r2, r3
 80127fe:	0d5b      	lsrs	r3, r3, #21
 8012800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012804:	fb02 f303 	mul.w	r3, r2, r3
 8012808:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012812:	d112      	bne.n	801283a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	9300      	str	r3, [sp, #0]
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	2200      	movs	r2, #0
 801281c:	2180      	movs	r1, #128	; 0x80
 801281e:	68f8      	ldr	r0, [r7, #12]
 8012820:	f7ff ff13 	bl	801264a <SPI_WaitFlagStateUntilTimeout>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d016      	beq.n	8012858 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801282e:	f043 0220 	orr.w	r2, r3, #32
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012836:	2303      	movs	r3, #3
 8012838:	e00f      	b.n	801285a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00a      	beq.n	8012856 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	3b01      	subs	r3, #1
 8012844:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	689b      	ldr	r3, [r3, #8]
 801284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012850:	2b80      	cmp	r3, #128	; 0x80
 8012852:	d0f2      	beq.n	801283a <SPI_EndRxTxTransaction+0x52>
 8012854:	e000      	b.n	8012858 <SPI_EndRxTxTransaction+0x70>
        break;
 8012856:	bf00      	nop
  }

  return HAL_OK;
 8012858:	2300      	movs	r3, #0
}
 801285a:	4618      	mov	r0, r3
 801285c:	3718      	adds	r7, #24
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	2000001c 	.word	0x2000001c
 8012868:	165e9f81 	.word	0x165e9f81

0801286c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d101      	bne.n	801287e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801287a:	2301      	movs	r3, #1
 801287c:	e01d      	b.n	80128ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012884:	b2db      	uxtb	r3, r3
 8012886:	2b00      	cmp	r3, #0
 8012888:	d106      	bne.n	8012898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2200      	movs	r2, #0
 801288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f7fc f90e 	bl	800eab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2202      	movs	r2, #2
 801289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	3304      	adds	r3, #4
 80128a8:	4619      	mov	r1, r3
 80128aa:	4610      	mov	r0, r2
 80128ac:	f000 fea4 	bl	80135f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2201      	movs	r2, #1
 80128b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3708      	adds	r7, #8
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80128c2:	b480      	push	{r7}
 80128c4:	b085      	sub	sp, #20
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	68da      	ldr	r2, [r3, #12]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f042 0201 	orr.w	r2, r2, #1
 80128d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	f003 0307 	and.w	r3, r3, #7
 80128e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2b06      	cmp	r3, #6
 80128ea:	d007      	beq.n	80128fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	f042 0201 	orr.w	r2, r2, #1
 80128fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3714      	adds	r7, #20
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr

0801290a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801290a:	b480      	push	{r7}
 801290c:	b083      	sub	sp, #12
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	68da      	ldr	r2, [r3, #12]
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	f022 0201 	bic.w	r2, r2, #1
 8012920:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	6a1a      	ldr	r2, [r3, #32]
 8012928:	f241 1311 	movw	r3, #4369	; 0x1111
 801292c:	4013      	ands	r3, r2
 801292e:	2b00      	cmp	r3, #0
 8012930:	d10f      	bne.n	8012952 <HAL_TIM_Base_Stop_IT+0x48>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	6a1a      	ldr	r2, [r3, #32]
 8012938:	f240 4344 	movw	r3, #1092	; 0x444
 801293c:	4013      	ands	r3, r2
 801293e:	2b00      	cmp	r3, #0
 8012940:	d107      	bne.n	8012952 <HAL_TIM_Base_Stop_IT+0x48>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f022 0201 	bic.w	r2, r2, #1
 8012950:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012952:	2300      	movs	r3, #0
}
 8012954:	4618      	mov	r0, r3
 8012956:	370c      	adds	r7, #12
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d101      	bne.n	8012972 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801296e:	2301      	movs	r3, #1
 8012970:	e01d      	b.n	80129ae <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012978:	b2db      	uxtb	r3, r3
 801297a:	2b00      	cmp	r3, #0
 801297c:	d106      	bne.n	801298c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2200      	movs	r2, #0
 8012982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 f815 	bl	80129b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2202      	movs	r2, #2
 8012990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681a      	ldr	r2, [r3, #0]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	3304      	adds	r3, #4
 801299c:	4619      	mov	r1, r3
 801299e:	4610      	mov	r0, r2
 80129a0:	f000 fe2a 	bl	80135f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2201      	movs	r2, #1
 80129a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3708      	adds	r7, #8
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80129b6:	b480      	push	{r7}
 80129b8:	b083      	sub	sp, #12
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80129be:	bf00      	nop
 80129c0:	370c      	adds	r7, #12
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr
	...

080129cc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	2b0c      	cmp	r3, #12
 80129da:	d841      	bhi.n	8012a60 <HAL_TIM_OC_Start_IT+0x94>
 80129dc:	a201      	add	r2, pc, #4	; (adr r2, 80129e4 <HAL_TIM_OC_Start_IT+0x18>)
 80129de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e2:	bf00      	nop
 80129e4:	08012a19 	.word	0x08012a19
 80129e8:	08012a61 	.word	0x08012a61
 80129ec:	08012a61 	.word	0x08012a61
 80129f0:	08012a61 	.word	0x08012a61
 80129f4:	08012a2b 	.word	0x08012a2b
 80129f8:	08012a61 	.word	0x08012a61
 80129fc:	08012a61 	.word	0x08012a61
 8012a00:	08012a61 	.word	0x08012a61
 8012a04:	08012a3d 	.word	0x08012a3d
 8012a08:	08012a61 	.word	0x08012a61
 8012a0c:	08012a61 	.word	0x08012a61
 8012a10:	08012a61 	.word	0x08012a61
 8012a14:	08012a4f 	.word	0x08012a4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	68da      	ldr	r2, [r3, #12]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f042 0202 	orr.w	r2, r2, #2
 8012a26:	60da      	str	r2, [r3, #12]
      break;
 8012a28:	e01b      	b.n	8012a62 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	68da      	ldr	r2, [r3, #12]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	f042 0204 	orr.w	r2, r2, #4
 8012a38:	60da      	str	r2, [r3, #12]
      break;
 8012a3a:	e012      	b.n	8012a62 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	68da      	ldr	r2, [r3, #12]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f042 0208 	orr.w	r2, r2, #8
 8012a4a:	60da      	str	r2, [r3, #12]
      break;
 8012a4c:	e009      	b.n	8012a62 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	68da      	ldr	r2, [r3, #12]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f042 0210 	orr.w	r2, r2, #16
 8012a5c:	60da      	str	r2, [r3, #12]
      break;
 8012a5e:	e000      	b.n	8012a62 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8012a60:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2201      	movs	r2, #1
 8012a68:	6839      	ldr	r1, [r7, #0]
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f001 f8ae 	bl	8013bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	4a15      	ldr	r2, [pc, #84]	; (8012acc <HAL_TIM_OC_Start_IT+0x100>)
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d004      	beq.n	8012a84 <HAL_TIM_OC_Start_IT+0xb8>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	4a14      	ldr	r2, [pc, #80]	; (8012ad0 <HAL_TIM_OC_Start_IT+0x104>)
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d101      	bne.n	8012a88 <HAL_TIM_OC_Start_IT+0xbc>
 8012a84:	2301      	movs	r3, #1
 8012a86:	e000      	b.n	8012a8a <HAL_TIM_OC_Start_IT+0xbe>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d007      	beq.n	8012a9e <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	689b      	ldr	r3, [r3, #8]
 8012aa4:	f003 0307 	and.w	r3, r3, #7
 8012aa8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b06      	cmp	r3, #6
 8012aae:	d007      	beq.n	8012ac0 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	f042 0201 	orr.w	r2, r2, #1
 8012abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012ac0:	2300      	movs	r3, #0
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3710      	adds	r7, #16
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
 8012aca:	bf00      	nop
 8012acc:	40010000 	.word	0x40010000
 8012ad0:	40010400 	.word	0x40010400

08012ad4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	2b0c      	cmp	r3, #12
 8012ae2:	d841      	bhi.n	8012b68 <HAL_TIM_OC_Stop_IT+0x94>
 8012ae4:	a201      	add	r2, pc, #4	; (adr r2, 8012aec <HAL_TIM_OC_Stop_IT+0x18>)
 8012ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aea:	bf00      	nop
 8012aec:	08012b21 	.word	0x08012b21
 8012af0:	08012b69 	.word	0x08012b69
 8012af4:	08012b69 	.word	0x08012b69
 8012af8:	08012b69 	.word	0x08012b69
 8012afc:	08012b33 	.word	0x08012b33
 8012b00:	08012b69 	.word	0x08012b69
 8012b04:	08012b69 	.word	0x08012b69
 8012b08:	08012b69 	.word	0x08012b69
 8012b0c:	08012b45 	.word	0x08012b45
 8012b10:	08012b69 	.word	0x08012b69
 8012b14:	08012b69 	.word	0x08012b69
 8012b18:	08012b69 	.word	0x08012b69
 8012b1c:	08012b57 	.word	0x08012b57
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68da      	ldr	r2, [r3, #12]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	f022 0202 	bic.w	r2, r2, #2
 8012b2e:	60da      	str	r2, [r3, #12]
      break;
 8012b30:	e01b      	b.n	8012b6a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	68da      	ldr	r2, [r3, #12]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	f022 0204 	bic.w	r2, r2, #4
 8012b40:	60da      	str	r2, [r3, #12]
      break;
 8012b42:	e012      	b.n	8012b6a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	68da      	ldr	r2, [r3, #12]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f022 0208 	bic.w	r2, r2, #8
 8012b52:	60da      	str	r2, [r3, #12]
      break;
 8012b54:	e009      	b.n	8012b6a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	68da      	ldr	r2, [r3, #12]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f022 0210 	bic.w	r2, r2, #16
 8012b64:	60da      	str	r2, [r3, #12]
      break;
 8012b66:	e000      	b.n	8012b6a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8012b68:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	6839      	ldr	r1, [r7, #0]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f001 f82a 	bl	8013bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4a20      	ldr	r2, [pc, #128]	; (8012c00 <HAL_TIM_OC_Stop_IT+0x12c>)
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d004      	beq.n	8012b8c <HAL_TIM_OC_Stop_IT+0xb8>
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	4a1f      	ldr	r2, [pc, #124]	; (8012c04 <HAL_TIM_OC_Stop_IT+0x130>)
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d101      	bne.n	8012b90 <HAL_TIM_OC_Stop_IT+0xbc>
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	e000      	b.n	8012b92 <HAL_TIM_OC_Stop_IT+0xbe>
 8012b90:	2300      	movs	r3, #0
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d017      	beq.n	8012bc6 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	6a1a      	ldr	r2, [r3, #32]
 8012b9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012ba0:	4013      	ands	r3, r2
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d10f      	bne.n	8012bc6 <HAL_TIM_OC_Stop_IT+0xf2>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	6a1a      	ldr	r2, [r3, #32]
 8012bac:	f240 4344 	movw	r3, #1092	; 0x444
 8012bb0:	4013      	ands	r3, r2
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d107      	bne.n	8012bc6 <HAL_TIM_OC_Stop_IT+0xf2>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	6a1a      	ldr	r2, [r3, #32]
 8012bcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d10f      	bne.n	8012bf6 <HAL_TIM_OC_Stop_IT+0x122>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	6a1a      	ldr	r2, [r3, #32]
 8012bdc:	f240 4344 	movw	r3, #1092	; 0x444
 8012be0:	4013      	ands	r3, r2
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d107      	bne.n	8012bf6 <HAL_TIM_OC_Stop_IT+0x122>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f022 0201 	bic.w	r2, r2, #1
 8012bf4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012bf6:	2300      	movs	r3, #0
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	40010000 	.word	0x40010000
 8012c04:	40010400 	.word	0x40010400

08012c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d101      	bne.n	8012c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012c16:	2301      	movs	r3, #1
 8012c18:	e01d      	b.n	8012c56 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d106      	bne.n	8012c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f000 f815 	bl	8012c5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2202      	movs	r2, #2
 8012c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681a      	ldr	r2, [r3, #0]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	3304      	adds	r3, #4
 8012c44:	4619      	mov	r1, r3
 8012c46:	4610      	mov	r0, r2
 8012c48:	f000 fcd6 	bl	80135f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2201      	movs	r2, #1
 8012c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3708      	adds	r7, #8
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}

08012c5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012c5e:	b480      	push	{r7}
 8012c60:	b083      	sub	sp, #12
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012c66:	bf00      	nop
 8012c68:	370c      	adds	r7, #12
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr
	...

08012c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2201      	movs	r2, #1
 8012c84:	6839      	ldr	r1, [r7, #0]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f000 ffa0 	bl	8013bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	4a15      	ldr	r2, [pc, #84]	; (8012ce8 <HAL_TIM_PWM_Start+0x74>)
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d004      	beq.n	8012ca0 <HAL_TIM_PWM_Start+0x2c>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4a14      	ldr	r2, [pc, #80]	; (8012cec <HAL_TIM_PWM_Start+0x78>)
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	d101      	bne.n	8012ca4 <HAL_TIM_PWM_Start+0x30>
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e000      	b.n	8012ca6 <HAL_TIM_PWM_Start+0x32>
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d007      	beq.n	8012cba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012cb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	f003 0307 	and.w	r3, r3, #7
 8012cc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2b06      	cmp	r3, #6
 8012cca:	d007      	beq.n	8012cdc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f042 0201 	orr.w	r2, r2, #1
 8012cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	40010000 	.word	0x40010000
 8012cec:	40010400 	.word	0x40010400

08012cf0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	6839      	ldr	r1, [r7, #0]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 ff62 	bl	8013bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	4a22      	ldr	r2, [pc, #136]	; (8012d98 <HAL_TIM_PWM_Stop+0xa8>)
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d004      	beq.n	8012d1c <HAL_TIM_PWM_Stop+0x2c>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4a21      	ldr	r2, [pc, #132]	; (8012d9c <HAL_TIM_PWM_Stop+0xac>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d101      	bne.n	8012d20 <HAL_TIM_PWM_Stop+0x30>
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	e000      	b.n	8012d22 <HAL_TIM_PWM_Stop+0x32>
 8012d20:	2300      	movs	r3, #0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d017      	beq.n	8012d56 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	6a1a      	ldr	r2, [r3, #32]
 8012d2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012d30:	4013      	ands	r3, r2
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d10f      	bne.n	8012d56 <HAL_TIM_PWM_Stop+0x66>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	6a1a      	ldr	r2, [r3, #32]
 8012d3c:	f240 4344 	movw	r3, #1092	; 0x444
 8012d40:	4013      	ands	r3, r2
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d107      	bne.n	8012d56 <HAL_TIM_PWM_Stop+0x66>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	6a1a      	ldr	r2, [r3, #32]
 8012d5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012d60:	4013      	ands	r3, r2
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d10f      	bne.n	8012d86 <HAL_TIM_PWM_Stop+0x96>
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	6a1a      	ldr	r2, [r3, #32]
 8012d6c:	f240 4344 	movw	r3, #1092	; 0x444
 8012d70:	4013      	ands	r3, r2
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d107      	bne.n	8012d86 <HAL_TIM_PWM_Stop+0x96>
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	681a      	ldr	r2, [r3, #0]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f022 0201 	bic.w	r2, r2, #1
 8012d84:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2201      	movs	r2, #1
 8012d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8012d8e:	2300      	movs	r3, #0
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	40010000 	.word	0x40010000
 8012d9c:	40010400 	.word	0x40010400

08012da0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d101      	bne.n	8012db4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012db0:	2301      	movs	r3, #1
 8012db2:	e083      	b.n	8012ebc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d106      	bne.n	8012dce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f7fb fee3 	bl	800eb94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2202      	movs	r2, #2
 8012dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	689b      	ldr	r3, [r3, #8]
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	6812      	ldr	r2, [r2, #0]
 8012de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012de4:	f023 0307 	bic.w	r3, r3, #7
 8012de8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681a      	ldr	r2, [r3, #0]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	3304      	adds	r3, #4
 8012df2:	4619      	mov	r1, r3
 8012df4:	4610      	mov	r0, r2
 8012df6:	f000 fbff 	bl	80135f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	689b      	ldr	r3, [r3, #8]
 8012e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	699b      	ldr	r3, [r3, #24]
 8012e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	6a1b      	ldr	r3, [r3, #32]
 8012e10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	697a      	ldr	r2, [r7, #20]
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012e22:	f023 0303 	bic.w	r3, r3, #3
 8012e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	689a      	ldr	r2, [r3, #8]
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	699b      	ldr	r3, [r3, #24]
 8012e30:	021b      	lsls	r3, r3, #8
 8012e32:	4313      	orrs	r3, r2
 8012e34:	693a      	ldr	r2, [r7, #16]
 8012e36:	4313      	orrs	r3, r2
 8012e38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012e40:	f023 030c 	bic.w	r3, r3, #12
 8012e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	68da      	ldr	r2, [r3, #12]
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	69db      	ldr	r3, [r3, #28]
 8012e5a:	021b      	lsls	r3, r3, #8
 8012e5c:	4313      	orrs	r3, r2
 8012e5e:	693a      	ldr	r2, [r7, #16]
 8012e60:	4313      	orrs	r3, r2
 8012e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	691b      	ldr	r3, [r3, #16]
 8012e68:	011a      	lsls	r2, r3, #4
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	6a1b      	ldr	r3, [r3, #32]
 8012e6e:	031b      	lsls	r3, r3, #12
 8012e70:	4313      	orrs	r3, r2
 8012e72:	693a      	ldr	r2, [r7, #16]
 8012e74:	4313      	orrs	r3, r2
 8012e76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8012e7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8012e86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	685a      	ldr	r2, [r3, #4]
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	695b      	ldr	r3, [r3, #20]
 8012e90:	011b      	lsls	r3, r3, #4
 8012e92:	4313      	orrs	r3, r2
 8012e94:	68fa      	ldr	r2, [r7, #12]
 8012e96:	4313      	orrs	r3, r2
 8012e98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	697a      	ldr	r2, [r7, #20]
 8012ea0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	693a      	ldr	r2, [r7, #16]
 8012ea8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	68fa      	ldr	r2, [r7, #12]
 8012eb0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012eba:	2300      	movs	r3, #0
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3718      	adds	r7, #24
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}

08012ec4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b082      	sub	sp, #8
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d003      	beq.n	8012edc <HAL_TIM_Encoder_Start+0x18>
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	2b04      	cmp	r3, #4
 8012ed8:	d008      	beq.n	8012eec <HAL_TIM_Encoder_Start+0x28>
 8012eda:	e00f      	b.n	8012efc <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f000 fe71 	bl	8013bcc <TIM_CCxChannelCmd>
      break;
 8012eea:	e016      	b.n	8012f1a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	2104      	movs	r1, #4
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f000 fe69 	bl	8013bcc <TIM_CCxChannelCmd>
      break;
 8012efa:	e00e      	b.n	8012f1a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2201      	movs	r2, #1
 8012f02:	2100      	movs	r1, #0
 8012f04:	4618      	mov	r0, r3
 8012f06:	f000 fe61 	bl	8013bcc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2201      	movs	r2, #1
 8012f10:	2104      	movs	r1, #4
 8012f12:	4618      	mov	r0, r3
 8012f14:	f000 fe5a 	bl	8013bcc <TIM_CCxChannelCmd>
      break;
 8012f18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f042 0201 	orr.w	r2, r2, #1
 8012f28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012f2a:	2300      	movs	r3, #0
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3708      	adds	r7, #8
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d003      	beq.n	8012f4c <HAL_TIM_Encoder_Stop+0x18>
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	2b04      	cmp	r3, #4
 8012f48:	d008      	beq.n	8012f5c <HAL_TIM_Encoder_Stop+0x28>
 8012f4a:	e00f      	b.n	8012f6c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2200      	movs	r2, #0
 8012f52:	2100      	movs	r1, #0
 8012f54:	4618      	mov	r0, r3
 8012f56:	f000 fe39 	bl	8013bcc <TIM_CCxChannelCmd>
      break;
 8012f5a:	e016      	b.n	8012f8a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	2200      	movs	r2, #0
 8012f62:	2104      	movs	r1, #4
 8012f64:	4618      	mov	r0, r3
 8012f66:	f000 fe31 	bl	8013bcc <TIM_CCxChannelCmd>
      break;
 8012f6a:	e00e      	b.n	8012f8a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2200      	movs	r2, #0
 8012f72:	2100      	movs	r1, #0
 8012f74:	4618      	mov	r0, r3
 8012f76:	f000 fe29 	bl	8013bcc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	2104      	movs	r1, #4
 8012f82:	4618      	mov	r0, r3
 8012f84:	f000 fe22 	bl	8013bcc <TIM_CCxChannelCmd>
      break;
 8012f88:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	6a1a      	ldr	r2, [r3, #32]
 8012f90:	f241 1311 	movw	r3, #4369	; 0x1111
 8012f94:	4013      	ands	r3, r2
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d10f      	bne.n	8012fba <HAL_TIM_Encoder_Stop+0x86>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	6a1a      	ldr	r2, [r3, #32]
 8012fa0:	f240 4344 	movw	r3, #1092	; 0x444
 8012fa4:	4013      	ands	r3, r2
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d107      	bne.n	8012fba <HAL_TIM_Encoder_Stop+0x86>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f022 0201 	bic.w	r2, r2, #1
 8012fb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012fba:	2300      	movs	r3, #0
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	691b      	ldr	r3, [r3, #16]
 8012fd2:	f003 0302 	and.w	r3, r3, #2
 8012fd6:	2b02      	cmp	r3, #2
 8012fd8:	d122      	bne.n	8013020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	f003 0302 	and.w	r3, r3, #2
 8012fe4:	2b02      	cmp	r3, #2
 8012fe6:	d11b      	bne.n	8013020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	f06f 0202 	mvn.w	r2, #2
 8012ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	699b      	ldr	r3, [r3, #24]
 8012ffe:	f003 0303 	and.w	r3, r3, #3
 8013002:	2b00      	cmp	r3, #0
 8013004:	d003      	beq.n	801300e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f000 fad8 	bl	80135bc <HAL_TIM_IC_CaptureCallback>
 801300c:	e005      	b.n	801301a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f000 faca 	bl	80135a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f000 fadb 	bl	80135d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2200      	movs	r2, #0
 801301e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	691b      	ldr	r3, [r3, #16]
 8013026:	f003 0304 	and.w	r3, r3, #4
 801302a:	2b04      	cmp	r3, #4
 801302c:	d122      	bne.n	8013074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	f003 0304 	and.w	r3, r3, #4
 8013038:	2b04      	cmp	r3, #4
 801303a:	d11b      	bne.n	8013074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f06f 0204 	mvn.w	r2, #4
 8013044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2202      	movs	r2, #2
 801304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	699b      	ldr	r3, [r3, #24]
 8013052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013056:	2b00      	cmp	r3, #0
 8013058:	d003      	beq.n	8013062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f000 faae 	bl	80135bc <HAL_TIM_IC_CaptureCallback>
 8013060:	e005      	b.n	801306e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 faa0 	bl	80135a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	f000 fab1 	bl	80135d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2200      	movs	r2, #0
 8013072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	f003 0308 	and.w	r3, r3, #8
 801307e:	2b08      	cmp	r3, #8
 8013080:	d122      	bne.n	80130c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	f003 0308 	and.w	r3, r3, #8
 801308c:	2b08      	cmp	r3, #8
 801308e:	d11b      	bne.n	80130c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	f06f 0208 	mvn.w	r2, #8
 8013098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2204      	movs	r2, #4
 801309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	69db      	ldr	r3, [r3, #28]
 80130a6:	f003 0303 	and.w	r3, r3, #3
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d003      	beq.n	80130b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 fa84 	bl	80135bc <HAL_TIM_IC_CaptureCallback>
 80130b4:	e005      	b.n	80130c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f000 fa76 	bl	80135a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 fa87 	bl	80135d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2200      	movs	r2, #0
 80130c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	691b      	ldr	r3, [r3, #16]
 80130ce:	f003 0310 	and.w	r3, r3, #16
 80130d2:	2b10      	cmp	r3, #16
 80130d4:	d122      	bne.n	801311c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	f003 0310 	and.w	r3, r3, #16
 80130e0:	2b10      	cmp	r3, #16
 80130e2:	d11b      	bne.n	801311c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	f06f 0210 	mvn.w	r2, #16
 80130ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2208      	movs	r2, #8
 80130f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	69db      	ldr	r3, [r3, #28]
 80130fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d003      	beq.n	801310a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f000 fa5a 	bl	80135bc <HAL_TIM_IC_CaptureCallback>
 8013108:	e005      	b.n	8013116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f000 fa4c 	bl	80135a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f000 fa5d 	bl	80135d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2200      	movs	r2, #0
 801311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	691b      	ldr	r3, [r3, #16]
 8013122:	f003 0301 	and.w	r3, r3, #1
 8013126:	2b01      	cmp	r3, #1
 8013128:	d10e      	bne.n	8013148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	68db      	ldr	r3, [r3, #12]
 8013130:	f003 0301 	and.w	r3, r3, #1
 8013134:	2b01      	cmp	r3, #1
 8013136:	d107      	bne.n	8013148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	f06f 0201 	mvn.w	r2, #1
 8013140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f7f7 ffd4 	bl	800b0f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	691b      	ldr	r3, [r3, #16]
 801314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013152:	2b80      	cmp	r3, #128	; 0x80
 8013154:	d10e      	bne.n	8013174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	68db      	ldr	r3, [r3, #12]
 801315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013160:	2b80      	cmp	r3, #128	; 0x80
 8013162:	d107      	bne.n	8013174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f000 ff00 	bl	8013f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	691b      	ldr	r3, [r3, #16]
 801317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801317e:	2b40      	cmp	r3, #64	; 0x40
 8013180:	d10e      	bne.n	80131a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801318c:	2b40      	cmp	r3, #64	; 0x40
 801318e:	d107      	bne.n	80131a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 fa22 	bl	80135e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	691b      	ldr	r3, [r3, #16]
 80131a6:	f003 0320 	and.w	r3, r3, #32
 80131aa:	2b20      	cmp	r3, #32
 80131ac:	d10e      	bne.n	80131cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	f003 0320 	and.w	r3, r3, #32
 80131b8:	2b20      	cmp	r3, #32
 80131ba:	d107      	bne.n	80131cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	f06f 0220 	mvn.w	r2, #32
 80131c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f000 feca 	bl	8013f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80131cc:	bf00      	nop
 80131ce:	3708      	adds	r7, #8
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131e6:	2b01      	cmp	r3, #1
 80131e8:	d101      	bne.n	80131ee <HAL_TIM_OC_ConfigChannel+0x1a>
 80131ea:	2302      	movs	r3, #2
 80131ec:	e04e      	b.n	801328c <HAL_TIM_OC_ConfigChannel+0xb8>
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2201      	movs	r2, #1
 80131f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	2202      	movs	r2, #2
 80131fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2b0c      	cmp	r3, #12
 8013202:	d839      	bhi.n	8013278 <HAL_TIM_OC_ConfigChannel+0xa4>
 8013204:	a201      	add	r2, pc, #4	; (adr r2, 801320c <HAL_TIM_OC_ConfigChannel+0x38>)
 8013206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801320a:	bf00      	nop
 801320c:	08013241 	.word	0x08013241
 8013210:	08013279 	.word	0x08013279
 8013214:	08013279 	.word	0x08013279
 8013218:	08013279 	.word	0x08013279
 801321c:	0801324f 	.word	0x0801324f
 8013220:	08013279 	.word	0x08013279
 8013224:	08013279 	.word	0x08013279
 8013228:	08013279 	.word	0x08013279
 801322c:	0801325d 	.word	0x0801325d
 8013230:	08013279 	.word	0x08013279
 8013234:	08013279 	.word	0x08013279
 8013238:	08013279 	.word	0x08013279
 801323c:	0801326b 	.word	0x0801326b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	68b9      	ldr	r1, [r7, #8]
 8013246:	4618      	mov	r0, r3
 8013248:	f000 fa76 	bl	8013738 <TIM_OC1_SetConfig>
      break;
 801324c:	e015      	b.n	801327a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	68b9      	ldr	r1, [r7, #8]
 8013254:	4618      	mov	r0, r3
 8013256:	f000 fadf 	bl	8013818 <TIM_OC2_SetConfig>
      break;
 801325a:	e00e      	b.n	801327a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	68b9      	ldr	r1, [r7, #8]
 8013262:	4618      	mov	r0, r3
 8013264:	f000 fb4e 	bl	8013904 <TIM_OC3_SetConfig>
      break;
 8013268:	e007      	b.n	801327a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	68b9      	ldr	r1, [r7, #8]
 8013270:	4618      	mov	r0, r3
 8013272:	f000 fbbb 	bl	80139ec <TIM_OC4_SetConfig>
      break;
 8013276:	e000      	b.n	801327a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8013278:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2201      	movs	r2, #1
 801327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2200      	movs	r2, #0
 8013286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801328a:	2300      	movs	r3, #0
}
 801328c:	4618      	mov	r0, r3
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b084      	sub	sp, #16
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	60b9      	str	r1, [r7, #8]
 801329e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	d101      	bne.n	80132ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80132aa:	2302      	movs	r3, #2
 80132ac:	e0b4      	b.n	8013418 <HAL_TIM_PWM_ConfigChannel+0x184>
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	2201      	movs	r2, #1
 80132b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	2202      	movs	r2, #2
 80132ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2b0c      	cmp	r3, #12
 80132c2:	f200 809f 	bhi.w	8013404 <HAL_TIM_PWM_ConfigChannel+0x170>
 80132c6:	a201      	add	r2, pc, #4	; (adr r2, 80132cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80132c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132cc:	08013301 	.word	0x08013301
 80132d0:	08013405 	.word	0x08013405
 80132d4:	08013405 	.word	0x08013405
 80132d8:	08013405 	.word	0x08013405
 80132dc:	08013341 	.word	0x08013341
 80132e0:	08013405 	.word	0x08013405
 80132e4:	08013405 	.word	0x08013405
 80132e8:	08013405 	.word	0x08013405
 80132ec:	08013383 	.word	0x08013383
 80132f0:	08013405 	.word	0x08013405
 80132f4:	08013405 	.word	0x08013405
 80132f8:	08013405 	.word	0x08013405
 80132fc:	080133c3 	.word	0x080133c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	68b9      	ldr	r1, [r7, #8]
 8013306:	4618      	mov	r0, r3
 8013308:	f000 fa16 	bl	8013738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	699a      	ldr	r2, [r3, #24]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f042 0208 	orr.w	r2, r2, #8
 801331a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	699a      	ldr	r2, [r3, #24]
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f022 0204 	bic.w	r2, r2, #4
 801332a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	6999      	ldr	r1, [r3, #24]
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	691a      	ldr	r2, [r3, #16]
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	430a      	orrs	r2, r1
 801333c:	619a      	str	r2, [r3, #24]
      break;
 801333e:	e062      	b.n	8013406 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	68b9      	ldr	r1, [r7, #8]
 8013346:	4618      	mov	r0, r3
 8013348:	f000 fa66 	bl	8013818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	699a      	ldr	r2, [r3, #24]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801335a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	699a      	ldr	r2, [r3, #24]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801336a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	6999      	ldr	r1, [r3, #24]
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	691b      	ldr	r3, [r3, #16]
 8013376:	021a      	lsls	r2, r3, #8
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	430a      	orrs	r2, r1
 801337e:	619a      	str	r2, [r3, #24]
      break;
 8013380:	e041      	b.n	8013406 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	68b9      	ldr	r1, [r7, #8]
 8013388:	4618      	mov	r0, r3
 801338a:	f000 fabb 	bl	8013904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	69da      	ldr	r2, [r3, #28]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f042 0208 	orr.w	r2, r2, #8
 801339c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	69da      	ldr	r2, [r3, #28]
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f022 0204 	bic.w	r2, r2, #4
 80133ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	69d9      	ldr	r1, [r3, #28]
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	691a      	ldr	r2, [r3, #16]
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	430a      	orrs	r2, r1
 80133be:	61da      	str	r2, [r3, #28]
      break;
 80133c0:	e021      	b.n	8013406 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	68b9      	ldr	r1, [r7, #8]
 80133c8:	4618      	mov	r0, r3
 80133ca:	f000 fb0f 	bl	80139ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	69da      	ldr	r2, [r3, #28]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80133dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	69da      	ldr	r2, [r3, #28]
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80133ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	69d9      	ldr	r1, [r3, #28]
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	691b      	ldr	r3, [r3, #16]
 80133f8:	021a      	lsls	r2, r3, #8
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	430a      	orrs	r2, r1
 8013400:	61da      	str	r2, [r3, #28]
      break;
 8013402:	e000      	b.n	8013406 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8013404:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2201      	movs	r2, #1
 801340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2200      	movs	r2, #0
 8013412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013416:	2300      	movs	r3, #0
}
 8013418:	4618      	mov	r0, r3
 801341a:	3710      	adds	r7, #16
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b084      	sub	sp, #16
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013430:	2b01      	cmp	r3, #1
 8013432:	d101      	bne.n	8013438 <HAL_TIM_ConfigClockSource+0x18>
 8013434:	2302      	movs	r3, #2
 8013436:	e0b3      	b.n	80135a0 <HAL_TIM_ConfigClockSource+0x180>
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2201      	movs	r2, #1
 801343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2202      	movs	r2, #2
 8013444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	689b      	ldr	r3, [r3, #8]
 801344e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801345e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	68fa      	ldr	r2, [r7, #12]
 8013466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013470:	d03e      	beq.n	80134f0 <HAL_TIM_ConfigClockSource+0xd0>
 8013472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013476:	f200 8087 	bhi.w	8013588 <HAL_TIM_ConfigClockSource+0x168>
 801347a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801347e:	f000 8085 	beq.w	801358c <HAL_TIM_ConfigClockSource+0x16c>
 8013482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013486:	d87f      	bhi.n	8013588 <HAL_TIM_ConfigClockSource+0x168>
 8013488:	2b70      	cmp	r3, #112	; 0x70
 801348a:	d01a      	beq.n	80134c2 <HAL_TIM_ConfigClockSource+0xa2>
 801348c:	2b70      	cmp	r3, #112	; 0x70
 801348e:	d87b      	bhi.n	8013588 <HAL_TIM_ConfigClockSource+0x168>
 8013490:	2b60      	cmp	r3, #96	; 0x60
 8013492:	d050      	beq.n	8013536 <HAL_TIM_ConfigClockSource+0x116>
 8013494:	2b60      	cmp	r3, #96	; 0x60
 8013496:	d877      	bhi.n	8013588 <HAL_TIM_ConfigClockSource+0x168>
 8013498:	2b50      	cmp	r3, #80	; 0x50
 801349a:	d03c      	beq.n	8013516 <HAL_TIM_ConfigClockSource+0xf6>
 801349c:	2b50      	cmp	r3, #80	; 0x50
 801349e:	d873      	bhi.n	8013588 <HAL_TIM_ConfigClockSource+0x168>
 80134a0:	2b40      	cmp	r3, #64	; 0x40
 80134a2:	d058      	beq.n	8013556 <HAL_TIM_ConfigClockSource+0x136>
 80134a4:	2b40      	cmp	r3, #64	; 0x40
 80134a6:	d86f      	bhi.n	8013588 <HAL_TIM_ConfigClockSource+0x168>
 80134a8:	2b30      	cmp	r3, #48	; 0x30
 80134aa:	d064      	beq.n	8013576 <HAL_TIM_ConfigClockSource+0x156>
 80134ac:	2b30      	cmp	r3, #48	; 0x30
 80134ae:	d86b      	bhi.n	8013588 <HAL_TIM_ConfigClockSource+0x168>
 80134b0:	2b20      	cmp	r3, #32
 80134b2:	d060      	beq.n	8013576 <HAL_TIM_ConfigClockSource+0x156>
 80134b4:	2b20      	cmp	r3, #32
 80134b6:	d867      	bhi.n	8013588 <HAL_TIM_ConfigClockSource+0x168>
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d05c      	beq.n	8013576 <HAL_TIM_ConfigClockSource+0x156>
 80134bc:	2b10      	cmp	r3, #16
 80134be:	d05a      	beq.n	8013576 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80134c0:	e062      	b.n	8013588 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6818      	ldr	r0, [r3, #0]
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	6899      	ldr	r1, [r3, #8]
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	685a      	ldr	r2, [r3, #4]
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	68db      	ldr	r3, [r3, #12]
 80134d2:	f000 fb5b 	bl	8013b8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	689b      	ldr	r3, [r3, #8]
 80134dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80134e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	609a      	str	r2, [r3, #8]
      break;
 80134ee:	e04e      	b.n	801358e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6818      	ldr	r0, [r3, #0]
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	6899      	ldr	r1, [r3, #8]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	685a      	ldr	r2, [r3, #4]
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	f000 fb44 	bl	8013b8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	689a      	ldr	r2, [r3, #8]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013512:	609a      	str	r2, [r3, #8]
      break;
 8013514:	e03b      	b.n	801358e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6818      	ldr	r0, [r3, #0]
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	6859      	ldr	r1, [r3, #4]
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	68db      	ldr	r3, [r3, #12]
 8013522:	461a      	mov	r2, r3
 8013524:	f000 fab8 	bl	8013a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	2150      	movs	r1, #80	; 0x50
 801352e:	4618      	mov	r0, r3
 8013530:	f000 fb11 	bl	8013b56 <TIM_ITRx_SetConfig>
      break;
 8013534:	e02b      	b.n	801358e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6818      	ldr	r0, [r3, #0]
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	6859      	ldr	r1, [r3, #4]
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	461a      	mov	r2, r3
 8013544:	f000 fad7 	bl	8013af6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2160      	movs	r1, #96	; 0x60
 801354e:	4618      	mov	r0, r3
 8013550:	f000 fb01 	bl	8013b56 <TIM_ITRx_SetConfig>
      break;
 8013554:	e01b      	b.n	801358e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6818      	ldr	r0, [r3, #0]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	6859      	ldr	r1, [r3, #4]
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	461a      	mov	r2, r3
 8013564:	f000 fa98 	bl	8013a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2140      	movs	r1, #64	; 0x40
 801356e:	4618      	mov	r0, r3
 8013570:	f000 faf1 	bl	8013b56 <TIM_ITRx_SetConfig>
      break;
 8013574:	e00b      	b.n	801358e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681a      	ldr	r2, [r3, #0]
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	4619      	mov	r1, r3
 8013580:	4610      	mov	r0, r2
 8013582:	f000 fae8 	bl	8013b56 <TIM_ITRx_SetConfig>
      break;
 8013586:	e002      	b.n	801358e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8013588:	bf00      	nop
 801358a:	e000      	b.n	801358e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801358c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2201      	movs	r2, #1
 8013592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801359e:	2300      	movs	r3, #0
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3710      	adds	r7, #16
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80135a8:	b480      	push	{r7}
 80135aa:	b083      	sub	sp, #12
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80135b0:	bf00      	nop
 80135b2:	370c      	adds	r7, #12
 80135b4:	46bd      	mov	sp, r7
 80135b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ba:	4770      	bx	lr

080135bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80135bc:	b480      	push	{r7}
 80135be:	b083      	sub	sp, #12
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80135c4:	bf00      	nop
 80135c6:	370c      	adds	r7, #12
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr

080135d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80135d8:	bf00      	nop
 80135da:	370c      	adds	r7, #12
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr

080135e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80135ec:	bf00      	nop
 80135ee:	370c      	adds	r7, #12
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr

080135f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	4a40      	ldr	r2, [pc, #256]	; (801370c <TIM_Base_SetConfig+0x114>)
 801360c:	4293      	cmp	r3, r2
 801360e:	d013      	beq.n	8013638 <TIM_Base_SetConfig+0x40>
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013616:	d00f      	beq.n	8013638 <TIM_Base_SetConfig+0x40>
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	4a3d      	ldr	r2, [pc, #244]	; (8013710 <TIM_Base_SetConfig+0x118>)
 801361c:	4293      	cmp	r3, r2
 801361e:	d00b      	beq.n	8013638 <TIM_Base_SetConfig+0x40>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	4a3c      	ldr	r2, [pc, #240]	; (8013714 <TIM_Base_SetConfig+0x11c>)
 8013624:	4293      	cmp	r3, r2
 8013626:	d007      	beq.n	8013638 <TIM_Base_SetConfig+0x40>
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	4a3b      	ldr	r2, [pc, #236]	; (8013718 <TIM_Base_SetConfig+0x120>)
 801362c:	4293      	cmp	r3, r2
 801362e:	d003      	beq.n	8013638 <TIM_Base_SetConfig+0x40>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	4a3a      	ldr	r2, [pc, #232]	; (801371c <TIM_Base_SetConfig+0x124>)
 8013634:	4293      	cmp	r3, r2
 8013636:	d108      	bne.n	801364a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801363e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	68fa      	ldr	r2, [r7, #12]
 8013646:	4313      	orrs	r3, r2
 8013648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4a2f      	ldr	r2, [pc, #188]	; (801370c <TIM_Base_SetConfig+0x114>)
 801364e:	4293      	cmp	r3, r2
 8013650:	d02b      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013658:	d027      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4a2c      	ldr	r2, [pc, #176]	; (8013710 <TIM_Base_SetConfig+0x118>)
 801365e:	4293      	cmp	r3, r2
 8013660:	d023      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	4a2b      	ldr	r2, [pc, #172]	; (8013714 <TIM_Base_SetConfig+0x11c>)
 8013666:	4293      	cmp	r3, r2
 8013668:	d01f      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	4a2a      	ldr	r2, [pc, #168]	; (8013718 <TIM_Base_SetConfig+0x120>)
 801366e:	4293      	cmp	r3, r2
 8013670:	d01b      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	4a29      	ldr	r2, [pc, #164]	; (801371c <TIM_Base_SetConfig+0x124>)
 8013676:	4293      	cmp	r3, r2
 8013678:	d017      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	4a28      	ldr	r2, [pc, #160]	; (8013720 <TIM_Base_SetConfig+0x128>)
 801367e:	4293      	cmp	r3, r2
 8013680:	d013      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	4a27      	ldr	r2, [pc, #156]	; (8013724 <TIM_Base_SetConfig+0x12c>)
 8013686:	4293      	cmp	r3, r2
 8013688:	d00f      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	4a26      	ldr	r2, [pc, #152]	; (8013728 <TIM_Base_SetConfig+0x130>)
 801368e:	4293      	cmp	r3, r2
 8013690:	d00b      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	4a25      	ldr	r2, [pc, #148]	; (801372c <TIM_Base_SetConfig+0x134>)
 8013696:	4293      	cmp	r3, r2
 8013698:	d007      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	4a24      	ldr	r2, [pc, #144]	; (8013730 <TIM_Base_SetConfig+0x138>)
 801369e:	4293      	cmp	r3, r2
 80136a0:	d003      	beq.n	80136aa <TIM_Base_SetConfig+0xb2>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	4a23      	ldr	r2, [pc, #140]	; (8013734 <TIM_Base_SetConfig+0x13c>)
 80136a6:	4293      	cmp	r3, r2
 80136a8:	d108      	bne.n	80136bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80136b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	68db      	ldr	r3, [r3, #12]
 80136b6:	68fa      	ldr	r2, [r7, #12]
 80136b8:	4313      	orrs	r3, r2
 80136ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	695b      	ldr	r3, [r3, #20]
 80136c6:	4313      	orrs	r3, r2
 80136c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	68fa      	ldr	r2, [r7, #12]
 80136ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80136d0:	683b      	ldr	r3, [r7, #0]
 80136d2:	689a      	ldr	r2, [r3, #8]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	4a0a      	ldr	r2, [pc, #40]	; (801370c <TIM_Base_SetConfig+0x114>)
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d003      	beq.n	80136f0 <TIM_Base_SetConfig+0xf8>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4a0c      	ldr	r2, [pc, #48]	; (801371c <TIM_Base_SetConfig+0x124>)
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d103      	bne.n	80136f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	691a      	ldr	r2, [r3, #16]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2201      	movs	r2, #1
 80136fc:	615a      	str	r2, [r3, #20]
}
 80136fe:	bf00      	nop
 8013700:	3714      	adds	r7, #20
 8013702:	46bd      	mov	sp, r7
 8013704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013708:	4770      	bx	lr
 801370a:	bf00      	nop
 801370c:	40010000 	.word	0x40010000
 8013710:	40000400 	.word	0x40000400
 8013714:	40000800 	.word	0x40000800
 8013718:	40000c00 	.word	0x40000c00
 801371c:	40010400 	.word	0x40010400
 8013720:	40014000 	.word	0x40014000
 8013724:	40014400 	.word	0x40014400
 8013728:	40014800 	.word	0x40014800
 801372c:	40001800 	.word	0x40001800
 8013730:	40001c00 	.word	0x40001c00
 8013734:	40002000 	.word	0x40002000

08013738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013738:	b480      	push	{r7}
 801373a:	b087      	sub	sp, #28
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6a1b      	ldr	r3, [r3, #32]
 8013746:	f023 0201 	bic.w	r2, r3, #1
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6a1b      	ldr	r3, [r3, #32]
 8013752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	699b      	ldr	r3, [r3, #24]
 801375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	f023 0303 	bic.w	r3, r3, #3
 801376e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	68fa      	ldr	r2, [r7, #12]
 8013776:	4313      	orrs	r3, r2
 8013778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	f023 0302 	bic.w	r3, r3, #2
 8013780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	689b      	ldr	r3, [r3, #8]
 8013786:	697a      	ldr	r2, [r7, #20]
 8013788:	4313      	orrs	r3, r2
 801378a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	4a20      	ldr	r2, [pc, #128]	; (8013810 <TIM_OC1_SetConfig+0xd8>)
 8013790:	4293      	cmp	r3, r2
 8013792:	d003      	beq.n	801379c <TIM_OC1_SetConfig+0x64>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4a1f      	ldr	r2, [pc, #124]	; (8013814 <TIM_OC1_SetConfig+0xdc>)
 8013798:	4293      	cmp	r3, r2
 801379a:	d10c      	bne.n	80137b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	f023 0308 	bic.w	r3, r3, #8
 80137a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	697a      	ldr	r2, [r7, #20]
 80137aa:	4313      	orrs	r3, r2
 80137ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	f023 0304 	bic.w	r3, r3, #4
 80137b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4a15      	ldr	r2, [pc, #84]	; (8013810 <TIM_OC1_SetConfig+0xd8>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d003      	beq.n	80137c6 <TIM_OC1_SetConfig+0x8e>
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	4a14      	ldr	r2, [pc, #80]	; (8013814 <TIM_OC1_SetConfig+0xdc>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d111      	bne.n	80137ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80137cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80137d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	695b      	ldr	r3, [r3, #20]
 80137da:	693a      	ldr	r2, [r7, #16]
 80137dc:	4313      	orrs	r3, r2
 80137de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	699b      	ldr	r3, [r3, #24]
 80137e4:	693a      	ldr	r2, [r7, #16]
 80137e6:	4313      	orrs	r3, r2
 80137e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	693a      	ldr	r2, [r7, #16]
 80137ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	68fa      	ldr	r2, [r7, #12]
 80137f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	685a      	ldr	r2, [r3, #4]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	697a      	ldr	r2, [r7, #20]
 8013802:	621a      	str	r2, [r3, #32]
}
 8013804:	bf00      	nop
 8013806:	371c      	adds	r7, #28
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr
 8013810:	40010000 	.word	0x40010000
 8013814:	40010400 	.word	0x40010400

08013818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013818:	b480      	push	{r7}
 801381a:	b087      	sub	sp, #28
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
 8013820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6a1b      	ldr	r3, [r3, #32]
 8013826:	f023 0210 	bic.w	r2, r3, #16
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6a1b      	ldr	r3, [r3, #32]
 8013832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	699b      	ldr	r3, [r3, #24]
 801383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801384e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	021b      	lsls	r3, r3, #8
 8013856:	68fa      	ldr	r2, [r7, #12]
 8013858:	4313      	orrs	r3, r2
 801385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	f023 0320 	bic.w	r3, r3, #32
 8013862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	011b      	lsls	r3, r3, #4
 801386a:	697a      	ldr	r2, [r7, #20]
 801386c:	4313      	orrs	r3, r2
 801386e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	4a22      	ldr	r2, [pc, #136]	; (80138fc <TIM_OC2_SetConfig+0xe4>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d003      	beq.n	8013880 <TIM_OC2_SetConfig+0x68>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	4a21      	ldr	r2, [pc, #132]	; (8013900 <TIM_OC2_SetConfig+0xe8>)
 801387c:	4293      	cmp	r3, r2
 801387e:	d10d      	bne.n	801389c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	011b      	lsls	r3, r3, #4
 801388e:	697a      	ldr	r2, [r7, #20]
 8013890:	4313      	orrs	r3, r2
 8013892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801389a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	4a17      	ldr	r2, [pc, #92]	; (80138fc <TIM_OC2_SetConfig+0xe4>)
 80138a0:	4293      	cmp	r3, r2
 80138a2:	d003      	beq.n	80138ac <TIM_OC2_SetConfig+0x94>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	4a16      	ldr	r2, [pc, #88]	; (8013900 <TIM_OC2_SetConfig+0xe8>)
 80138a8:	4293      	cmp	r3, r2
 80138aa:	d113      	bne.n	80138d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80138b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80138ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	695b      	ldr	r3, [r3, #20]
 80138c0:	009b      	lsls	r3, r3, #2
 80138c2:	693a      	ldr	r2, [r7, #16]
 80138c4:	4313      	orrs	r3, r2
 80138c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	699b      	ldr	r3, [r3, #24]
 80138cc:	009b      	lsls	r3, r3, #2
 80138ce:	693a      	ldr	r2, [r7, #16]
 80138d0:	4313      	orrs	r3, r2
 80138d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	693a      	ldr	r2, [r7, #16]
 80138d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	68fa      	ldr	r2, [r7, #12]
 80138de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	685a      	ldr	r2, [r3, #4]
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	697a      	ldr	r2, [r7, #20]
 80138ec:	621a      	str	r2, [r3, #32]
}
 80138ee:	bf00      	nop
 80138f0:	371c      	adds	r7, #28
 80138f2:	46bd      	mov	sp, r7
 80138f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f8:	4770      	bx	lr
 80138fa:	bf00      	nop
 80138fc:	40010000 	.word	0x40010000
 8013900:	40010400 	.word	0x40010400

08013904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013904:	b480      	push	{r7}
 8013906:	b087      	sub	sp, #28
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a1b      	ldr	r3, [r3, #32]
 8013912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6a1b      	ldr	r3, [r3, #32]
 801391e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	69db      	ldr	r3, [r3, #28]
 801392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f023 0303 	bic.w	r3, r3, #3
 801393a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	68fa      	ldr	r2, [r7, #12]
 8013942:	4313      	orrs	r3, r2
 8013944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801394c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	689b      	ldr	r3, [r3, #8]
 8013952:	021b      	lsls	r3, r3, #8
 8013954:	697a      	ldr	r2, [r7, #20]
 8013956:	4313      	orrs	r3, r2
 8013958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	4a21      	ldr	r2, [pc, #132]	; (80139e4 <TIM_OC3_SetConfig+0xe0>)
 801395e:	4293      	cmp	r3, r2
 8013960:	d003      	beq.n	801396a <TIM_OC3_SetConfig+0x66>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	4a20      	ldr	r2, [pc, #128]	; (80139e8 <TIM_OC3_SetConfig+0xe4>)
 8013966:	4293      	cmp	r3, r2
 8013968:	d10d      	bne.n	8013986 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	68db      	ldr	r3, [r3, #12]
 8013976:	021b      	lsls	r3, r3, #8
 8013978:	697a      	ldr	r2, [r7, #20]
 801397a:	4313      	orrs	r3, r2
 801397c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4a16      	ldr	r2, [pc, #88]	; (80139e4 <TIM_OC3_SetConfig+0xe0>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d003      	beq.n	8013996 <TIM_OC3_SetConfig+0x92>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4a15      	ldr	r2, [pc, #84]	; (80139e8 <TIM_OC3_SetConfig+0xe4>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d113      	bne.n	80139be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801399c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80139a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	695b      	ldr	r3, [r3, #20]
 80139aa:	011b      	lsls	r3, r3, #4
 80139ac:	693a      	ldr	r2, [r7, #16]
 80139ae:	4313      	orrs	r3, r2
 80139b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	699b      	ldr	r3, [r3, #24]
 80139b6:	011b      	lsls	r3, r3, #4
 80139b8:	693a      	ldr	r2, [r7, #16]
 80139ba:	4313      	orrs	r3, r2
 80139bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	693a      	ldr	r2, [r7, #16]
 80139c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	68fa      	ldr	r2, [r7, #12]
 80139c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	685a      	ldr	r2, [r3, #4]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	697a      	ldr	r2, [r7, #20]
 80139d6:	621a      	str	r2, [r3, #32]
}
 80139d8:	bf00      	nop
 80139da:	371c      	adds	r7, #28
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr
 80139e4:	40010000 	.word	0x40010000
 80139e8:	40010400 	.word	0x40010400

080139ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b087      	sub	sp, #28
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6a1b      	ldr	r3, [r3, #32]
 80139fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6a1b      	ldr	r3, [r3, #32]
 8013a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	69db      	ldr	r3, [r3, #28]
 8013a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	021b      	lsls	r3, r3, #8
 8013a2a:	68fa      	ldr	r2, [r7, #12]
 8013a2c:	4313      	orrs	r3, r2
 8013a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	689b      	ldr	r3, [r3, #8]
 8013a3c:	031b      	lsls	r3, r3, #12
 8013a3e:	693a      	ldr	r2, [r7, #16]
 8013a40:	4313      	orrs	r3, r2
 8013a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	4a12      	ldr	r2, [pc, #72]	; (8013a90 <TIM_OC4_SetConfig+0xa4>)
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d003      	beq.n	8013a54 <TIM_OC4_SetConfig+0x68>
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	4a11      	ldr	r2, [pc, #68]	; (8013a94 <TIM_OC4_SetConfig+0xa8>)
 8013a50:	4293      	cmp	r3, r2
 8013a52:	d109      	bne.n	8013a68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	695b      	ldr	r3, [r3, #20]
 8013a60:	019b      	lsls	r3, r3, #6
 8013a62:	697a      	ldr	r2, [r7, #20]
 8013a64:	4313      	orrs	r3, r2
 8013a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	697a      	ldr	r2, [r7, #20]
 8013a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	68fa      	ldr	r2, [r7, #12]
 8013a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	685a      	ldr	r2, [r3, #4]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	693a      	ldr	r2, [r7, #16]
 8013a80:	621a      	str	r2, [r3, #32]
}
 8013a82:	bf00      	nop
 8013a84:	371c      	adds	r7, #28
 8013a86:	46bd      	mov	sp, r7
 8013a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8c:	4770      	bx	lr
 8013a8e:	bf00      	nop
 8013a90:	40010000 	.word	0x40010000
 8013a94:	40010400 	.word	0x40010400

08013a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013a98:	b480      	push	{r7}
 8013a9a:	b087      	sub	sp, #28
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	6a1b      	ldr	r3, [r3, #32]
 8013aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	6a1b      	ldr	r3, [r3, #32]
 8013aae:	f023 0201 	bic.w	r2, r3, #1
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	699b      	ldr	r3, [r3, #24]
 8013aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	011b      	lsls	r3, r3, #4
 8013ac8:	693a      	ldr	r2, [r7, #16]
 8013aca:	4313      	orrs	r3, r2
 8013acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	f023 030a 	bic.w	r3, r3, #10
 8013ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013ad6:	697a      	ldr	r2, [r7, #20]
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	4313      	orrs	r3, r2
 8013adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	693a      	ldr	r2, [r7, #16]
 8013ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	697a      	ldr	r2, [r7, #20]
 8013ae8:	621a      	str	r2, [r3, #32]
}
 8013aea:	bf00      	nop
 8013aec:	371c      	adds	r7, #28
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr

08013af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013af6:	b480      	push	{r7}
 8013af8:	b087      	sub	sp, #28
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	60f8      	str	r0, [r7, #12]
 8013afe:	60b9      	str	r1, [r7, #8]
 8013b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	6a1b      	ldr	r3, [r3, #32]
 8013b06:	f023 0210 	bic.w	r2, r3, #16
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	699b      	ldr	r3, [r3, #24]
 8013b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	6a1b      	ldr	r3, [r3, #32]
 8013b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	031b      	lsls	r3, r3, #12
 8013b26:	697a      	ldr	r2, [r7, #20]
 8013b28:	4313      	orrs	r3, r2
 8013b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013b32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	011b      	lsls	r3, r3, #4
 8013b38:	693a      	ldr	r2, [r7, #16]
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	697a      	ldr	r2, [r7, #20]
 8013b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	693a      	ldr	r2, [r7, #16]
 8013b48:	621a      	str	r2, [r3, #32]
}
 8013b4a:	bf00      	nop
 8013b4c:	371c      	adds	r7, #28
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b54:	4770      	bx	lr

08013b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013b56:	b480      	push	{r7}
 8013b58:	b085      	sub	sp, #20
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
 8013b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	689b      	ldr	r3, [r3, #8]
 8013b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013b6e:	683a      	ldr	r2, [r7, #0]
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	4313      	orrs	r3, r2
 8013b74:	f043 0307 	orr.w	r3, r3, #7
 8013b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	68fa      	ldr	r2, [r7, #12]
 8013b7e:	609a      	str	r2, [r3, #8]
}
 8013b80:	bf00      	nop
 8013b82:	3714      	adds	r7, #20
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr

08013b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b087      	sub	sp, #28
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	607a      	str	r2, [r7, #4]
 8013b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	021a      	lsls	r2, r3, #8
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	431a      	orrs	r2, r3
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	4313      	orrs	r3, r2
 8013bb4:	697a      	ldr	r2, [r7, #20]
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	697a      	ldr	r2, [r7, #20]
 8013bbe:	609a      	str	r2, [r3, #8]
}
 8013bc0:	bf00      	nop
 8013bc2:	371c      	adds	r7, #28
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013bcc:	b480      	push	{r7}
 8013bce:	b087      	sub	sp, #28
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	60f8      	str	r0, [r7, #12]
 8013bd4:	60b9      	str	r1, [r7, #8]
 8013bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	f003 031f 	and.w	r3, r3, #31
 8013bde:	2201      	movs	r2, #1
 8013be0:	fa02 f303 	lsl.w	r3, r2, r3
 8013be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	6a1a      	ldr	r2, [r3, #32]
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	43db      	mvns	r3, r3
 8013bee:	401a      	ands	r2, r3
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	6a1a      	ldr	r2, [r3, #32]
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	f003 031f 	and.w	r3, r3, #31
 8013bfe:	6879      	ldr	r1, [r7, #4]
 8013c00:	fa01 f303 	lsl.w	r3, r1, r3
 8013c04:	431a      	orrs	r2, r3
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	621a      	str	r2, [r3, #32]
}
 8013c0a:	bf00      	nop
 8013c0c:	371c      	adds	r7, #28
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c14:	4770      	bx	lr

08013c16 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b084      	sub	sp, #16
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
 8013c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	2b08      	cmp	r3, #8
 8013c24:	d01b      	beq.n	8013c5e <HAL_TIMEx_OCN_Start_IT+0x48>
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	2b08      	cmp	r3, #8
 8013c2a:	d821      	bhi.n	8013c70 <HAL_TIMEx_OCN_Start_IT+0x5a>
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d003      	beq.n	8013c3a <HAL_TIMEx_OCN_Start_IT+0x24>
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	2b04      	cmp	r3, #4
 8013c36:	d009      	beq.n	8013c4c <HAL_TIMEx_OCN_Start_IT+0x36>
      break;
    }


    default:
      break;
 8013c38:	e01a      	b.n	8013c70 <HAL_TIMEx_OCN_Start_IT+0x5a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	68da      	ldr	r2, [r3, #12]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	f042 0202 	orr.w	r2, r2, #2
 8013c48:	60da      	str	r2, [r3, #12]
      break;
 8013c4a:	e012      	b.n	8013c72 <HAL_TIMEx_OCN_Start_IT+0x5c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	68da      	ldr	r2, [r3, #12]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	f042 0204 	orr.w	r2, r2, #4
 8013c5a:	60da      	str	r2, [r3, #12]
      break;
 8013c5c:	e009      	b.n	8013c72 <HAL_TIMEx_OCN_Start_IT+0x5c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	68da      	ldr	r2, [r3, #12]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	f042 0208 	orr.w	r2, r2, #8
 8013c6c:	60da      	str	r2, [r3, #12]
      break;
 8013c6e:	e000      	b.n	8013c72 <HAL_TIMEx_OCN_Start_IT+0x5c>
      break;
 8013c70:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	68da      	ldr	r2, [r3, #12]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013c80:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	2204      	movs	r2, #4
 8013c88:	6839      	ldr	r1, [r7, #0]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f000 f97c 	bl	8013f88 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013c9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	689b      	ldr	r3, [r3, #8]
 8013ca6:	f003 0307 	and.w	r3, r3, #7
 8013caa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	2b06      	cmp	r3, #6
 8013cb0:	d007      	beq.n	8013cc2 <HAL_TIMEx_OCN_Start_IT+0xac>
  {
    __HAL_TIM_ENABLE(htim);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f042 0201 	orr.w	r2, r2, #1
 8013cc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3710      	adds	r7, #16
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}

08013ccc <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b084      	sub	sp, #16
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	2b08      	cmp	r3, #8
 8013cda:	d01b      	beq.n	8013d14 <HAL_TIMEx_OCN_Stop_IT+0x48>
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	2b08      	cmp	r3, #8
 8013ce0:	d821      	bhi.n	8013d26 <HAL_TIMEx_OCN_Stop_IT+0x5a>
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d003      	beq.n	8013cf0 <HAL_TIMEx_OCN_Stop_IT+0x24>
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	2b04      	cmp	r3, #4
 8013cec:	d009      	beq.n	8013d02 <HAL_TIMEx_OCN_Stop_IT+0x36>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8013cee:	e01a      	b.n	8013d26 <HAL_TIMEx_OCN_Stop_IT+0x5a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	68da      	ldr	r2, [r3, #12]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f022 0202 	bic.w	r2, r2, #2
 8013cfe:	60da      	str	r2, [r3, #12]
      break;
 8013d00:	e012      	b.n	8013d28 <HAL_TIMEx_OCN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	68da      	ldr	r2, [r3, #12]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	f022 0204 	bic.w	r2, r2, #4
 8013d10:	60da      	str	r2, [r3, #12]
      break;
 8013d12:	e009      	b.n	8013d28 <HAL_TIMEx_OCN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	68da      	ldr	r2, [r3, #12]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f022 0208 	bic.w	r2, r2, #8
 8013d22:	60da      	str	r2, [r3, #12]
      break;
 8013d24:	e000      	b.n	8013d28 <HAL_TIMEx_OCN_Stop_IT+0x5c>
      break;
 8013d26:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	6839      	ldr	r1, [r7, #0]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f000 f929 	bl	8013f88 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	6a1b      	ldr	r3, [r3, #32]
 8013d3c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8013d3e:	68fa      	ldr	r2, [r7, #12]
 8013d40:	f240 4344 	movw	r3, #1092	; 0x444
 8013d44:	4013      	ands	r3, r2
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d107      	bne.n	8013d5a <HAL_TIMEx_OCN_Stop_IT+0x8e>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	68da      	ldr	r2, [r3, #12]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013d58:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	6a1a      	ldr	r2, [r3, #32]
 8013d60:	f241 1311 	movw	r3, #4369	; 0x1111
 8013d64:	4013      	ands	r3, r2
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d10f      	bne.n	8013d8a <HAL_TIMEx_OCN_Stop_IT+0xbe>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	6a1a      	ldr	r2, [r3, #32]
 8013d70:	f240 4344 	movw	r3, #1092	; 0x444
 8013d74:	4013      	ands	r3, r2
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d107      	bne.n	8013d8a <HAL_TIMEx_OCN_Stop_IT+0xbe>
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013d88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	6a1a      	ldr	r2, [r3, #32]
 8013d90:	f241 1311 	movw	r3, #4369	; 0x1111
 8013d94:	4013      	ands	r3, r2
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d10f      	bne.n	8013dba <HAL_TIMEx_OCN_Stop_IT+0xee>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	6a1a      	ldr	r2, [r3, #32]
 8013da0:	f240 4344 	movw	r3, #1092	; 0x444
 8013da4:	4013      	ands	r3, r2
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d107      	bne.n	8013dba <HAL_TIMEx_OCN_Stop_IT+0xee>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f022 0201 	bic.w	r2, r2, #1
 8013db8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013dba:	2300      	movs	r3, #0
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3710      	adds	r7, #16
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	b085      	sub	sp, #20
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	d101      	bne.n	8013ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013dd8:	2302      	movs	r3, #2
 8013dda:	e05a      	b.n	8013e92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2201      	movs	r2, #1
 8013de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2202      	movs	r2, #2
 8013de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	689b      	ldr	r3, [r3, #8]
 8013dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	68fa      	ldr	r2, [r7, #12]
 8013e0a:	4313      	orrs	r3, r2
 8013e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4a21      	ldr	r2, [pc, #132]	; (8013ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d022      	beq.n	8013e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013e28:	d01d      	beq.n	8013e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	4a1d      	ldr	r2, [pc, #116]	; (8013ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d018      	beq.n	8013e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4a1b      	ldr	r2, [pc, #108]	; (8013ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	d013      	beq.n	8013e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4a1a      	ldr	r2, [pc, #104]	; (8013eac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d00e      	beq.n	8013e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	4a18      	ldr	r2, [pc, #96]	; (8013eb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013e4e:	4293      	cmp	r3, r2
 8013e50:	d009      	beq.n	8013e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	4a17      	ldr	r2, [pc, #92]	; (8013eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d004      	beq.n	8013e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	4a15      	ldr	r2, [pc, #84]	; (8013eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013e62:	4293      	cmp	r3, r2
 8013e64:	d10c      	bne.n	8013e80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	68ba      	ldr	r2, [r7, #8]
 8013e74:	4313      	orrs	r3, r2
 8013e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	68ba      	ldr	r2, [r7, #8]
 8013e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2201      	movs	r2, #1
 8013e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013e90:	2300      	movs	r3, #0
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3714      	adds	r7, #20
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop
 8013ea0:	40010000 	.word	0x40010000
 8013ea4:	40000400 	.word	0x40000400
 8013ea8:	40000800 	.word	0x40000800
 8013eac:	40000c00 	.word	0x40000c00
 8013eb0:	40010400 	.word	0x40010400
 8013eb4:	40014000 	.word	0x40014000
 8013eb8:	40001800 	.word	0x40001800

08013ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b085      	sub	sp, #20
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	d101      	bne.n	8013ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013ed4:	2302      	movs	r3, #2
 8013ed6:	e03d      	b.n	8013f54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2201      	movs	r2, #1
 8013edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	4313      	orrs	r3, r2
 8013eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	4313      	orrs	r3, r2
 8013efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	4313      	orrs	r3, r2
 8013f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	4313      	orrs	r3, r2
 8013f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	691b      	ldr	r3, [r3, #16]
 8013f22:	4313      	orrs	r3, r2
 8013f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	695b      	ldr	r3, [r3, #20]
 8013f30:	4313      	orrs	r3, r2
 8013f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	69db      	ldr	r3, [r3, #28]
 8013f3e:	4313      	orrs	r3, r2
 8013f40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	68fa      	ldr	r2, [r7, #12]
 8013f48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013f52:	2300      	movs	r3, #0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3714      	adds	r7, #20
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr

08013f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013f60:	b480      	push	{r7}
 8013f62:	b083      	sub	sp, #12
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013f68:	bf00      	nop
 8013f6a:	370c      	adds	r7, #12
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f72:	4770      	bx	lr

08013f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013f74:	b480      	push	{r7}
 8013f76:	b083      	sub	sp, #12
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013f7c:	bf00      	nop
 8013f7e:	370c      	adds	r7, #12
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr

08013f88 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8013f88:	b480      	push	{r7}
 8013f8a:	b087      	sub	sp, #28
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	f003 031f 	and.w	r3, r3, #31
 8013f9a:	2204      	movs	r2, #4
 8013f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8013fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	6a1a      	ldr	r2, [r3, #32]
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	43db      	mvns	r3, r3
 8013faa:	401a      	ands	r2, r3
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	6a1a      	ldr	r2, [r3, #32]
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	f003 031f 	and.w	r3, r3, #31
 8013fba:	6879      	ldr	r1, [r7, #4]
 8013fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8013fc0:	431a      	orrs	r2, r3
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	621a      	str	r2, [r3, #32]
}
 8013fc6:	bf00      	nop
 8013fc8:	371c      	adds	r7, #28
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr

08013fd2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b082      	sub	sp, #8
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d101      	bne.n	8013fe4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	e03f      	b.n	8014064 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013fea:	b2db      	uxtb	r3, r3
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d106      	bne.n	8013ffe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f7fa feed 	bl	800edd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2224      	movs	r2, #36	; 0x24
 8014002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	68da      	ldr	r2, [r3, #12]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014014:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f000 f9b2 	bl	8014380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	691a      	ldr	r2, [r3, #16]
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801402a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	695a      	ldr	r2, [r3, #20]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801403a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	68da      	ldr	r2, [r3, #12]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801404a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2200      	movs	r2, #0
 8014050:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2220      	movs	r2, #32
 8014056:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2220      	movs	r2, #32
 801405e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8014062:	2300      	movs	r3, #0
}
 8014064:	4618      	mov	r0, r3
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b088      	sub	sp, #32
 8014070:	af02      	add	r7, sp, #8
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	603b      	str	r3, [r7, #0]
 8014078:	4613      	mov	r3, r2
 801407a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801407c:	2300      	movs	r3, #0
 801407e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014086:	b2db      	uxtb	r3, r3
 8014088:	2b20      	cmp	r3, #32
 801408a:	f040 8083 	bne.w	8014194 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d002      	beq.n	801409a <HAL_UART_Transmit+0x2e>
 8014094:	88fb      	ldrh	r3, [r7, #6]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d101      	bne.n	801409e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801409a:	2301      	movs	r3, #1
 801409c:	e07b      	b.n	8014196 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d101      	bne.n	80140ac <HAL_UART_Transmit+0x40>
 80140a8:	2302      	movs	r3, #2
 80140aa:	e074      	b.n	8014196 <HAL_UART_Transmit+0x12a>
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2201      	movs	r2, #1
 80140b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2200      	movs	r2, #0
 80140b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2221      	movs	r2, #33	; 0x21
 80140be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80140c2:	f7fb fcf1 	bl	800faa8 <HAL_GetTick>
 80140c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	88fa      	ldrh	r2, [r7, #6]
 80140cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	88fa      	ldrh	r2, [r7, #6]
 80140d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	2200      	movs	r2, #0
 80140d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80140dc:	e042      	b.n	8014164 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	3b01      	subs	r3, #1
 80140e6:	b29a      	uxth	r2, r3
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	689b      	ldr	r3, [r3, #8]
 80140f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80140f4:	d122      	bne.n	801413c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	2200      	movs	r2, #0
 80140fe:	2180      	movs	r1, #128	; 0x80
 8014100:	68f8      	ldr	r0, [r7, #12]
 8014102:	f000 f8f2 	bl	80142ea <UART_WaitOnFlagUntilTimeout>
 8014106:	4603      	mov	r3, r0
 8014108:	2b00      	cmp	r3, #0
 801410a:	d001      	beq.n	8014110 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801410c:	2303      	movs	r3, #3
 801410e:	e042      	b.n	8014196 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	881b      	ldrh	r3, [r3, #0]
 8014118:	461a      	mov	r2, r3
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014122:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	691b      	ldr	r3, [r3, #16]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d103      	bne.n	8014134 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	3302      	adds	r3, #2
 8014130:	60bb      	str	r3, [r7, #8]
 8014132:	e017      	b.n	8014164 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	3301      	adds	r3, #1
 8014138:	60bb      	str	r3, [r7, #8]
 801413a:	e013      	b.n	8014164 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	2200      	movs	r2, #0
 8014144:	2180      	movs	r1, #128	; 0x80
 8014146:	68f8      	ldr	r0, [r7, #12]
 8014148:	f000 f8cf 	bl	80142ea <UART_WaitOnFlagUntilTimeout>
 801414c:	4603      	mov	r3, r0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d001      	beq.n	8014156 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8014152:	2303      	movs	r3, #3
 8014154:	e01f      	b.n	8014196 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	1c5a      	adds	r2, r3, #1
 801415a:	60ba      	str	r2, [r7, #8]
 801415c:	781a      	ldrb	r2, [r3, #0]
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014168:	b29b      	uxth	r3, r3
 801416a:	2b00      	cmp	r3, #0
 801416c:	d1b7      	bne.n	80140de <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	2200      	movs	r2, #0
 8014176:	2140      	movs	r1, #64	; 0x40
 8014178:	68f8      	ldr	r0, [r7, #12]
 801417a:	f000 f8b6 	bl	80142ea <UART_WaitOnFlagUntilTimeout>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d001      	beq.n	8014188 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8014184:	2303      	movs	r3, #3
 8014186:	e006      	b.n	8014196 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2220      	movs	r2, #32
 801418c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8014190:	2300      	movs	r3, #0
 8014192:	e000      	b.n	8014196 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8014194:	2302      	movs	r3, #2
  }
}
 8014196:	4618      	mov	r0, r3
 8014198:	3718      	adds	r7, #24
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}

0801419e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801419e:	b580      	push	{r7, lr}
 80141a0:	b088      	sub	sp, #32
 80141a2:	af02      	add	r7, sp, #8
 80141a4:	60f8      	str	r0, [r7, #12]
 80141a6:	60b9      	str	r1, [r7, #8]
 80141a8:	603b      	str	r3, [r7, #0]
 80141aa:	4613      	mov	r3, r2
 80141ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80141ae:	2300      	movs	r3, #0
 80141b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	2b20      	cmp	r3, #32
 80141bc:	f040 8090 	bne.w	80142e0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d002      	beq.n	80141cc <HAL_UART_Receive+0x2e>
 80141c6:	88fb      	ldrh	r3, [r7, #6]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d101      	bne.n	80141d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80141cc:	2301      	movs	r3, #1
 80141ce:	e088      	b.n	80142e2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80141d6:	2b01      	cmp	r3, #1
 80141d8:	d101      	bne.n	80141de <HAL_UART_Receive+0x40>
 80141da:	2302      	movs	r3, #2
 80141dc:	e081      	b.n	80142e2 <HAL_UART_Receive+0x144>
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2201      	movs	r2, #1
 80141e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	2200      	movs	r2, #0
 80141ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	2222      	movs	r2, #34	; 0x22
 80141f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80141f4:	f7fb fc58 	bl	800faa8 <HAL_GetTick>
 80141f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	88fa      	ldrh	r2, [r7, #6]
 80141fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	88fa      	ldrh	r2, [r7, #6]
 8014204:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	2200      	movs	r2, #0
 801420a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 801420e:	e05c      	b.n	80142ca <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014214:	b29b      	uxth	r3, r3
 8014216:	3b01      	subs	r3, #1
 8014218:	b29a      	uxth	r2, r3
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	689b      	ldr	r3, [r3, #8]
 8014222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014226:	d12b      	bne.n	8014280 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	2200      	movs	r2, #0
 8014230:	2120      	movs	r1, #32
 8014232:	68f8      	ldr	r0, [r7, #12]
 8014234:	f000 f859 	bl	80142ea <UART_WaitOnFlagUntilTimeout>
 8014238:	4603      	mov	r3, r0
 801423a:	2b00      	cmp	r3, #0
 801423c:	d001      	beq.n	8014242 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 801423e:	2303      	movs	r3, #3
 8014240:	e04f      	b.n	80142e2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	691b      	ldr	r3, [r3, #16]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d10c      	bne.n	8014268 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	b29b      	uxth	r3, r3
 8014256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801425a:	b29a      	uxth	r2, r3
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	3302      	adds	r3, #2
 8014264:	60bb      	str	r3, [r7, #8]
 8014266:	e030      	b.n	80142ca <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	685b      	ldr	r3, [r3, #4]
 801426e:	b29b      	uxth	r3, r3
 8014270:	b2db      	uxtb	r3, r3
 8014272:	b29a      	uxth	r2, r3
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	3301      	adds	r3, #1
 801427c:	60bb      	str	r3, [r7, #8]
 801427e:	e024      	b.n	80142ca <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	9300      	str	r3, [sp, #0]
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	2200      	movs	r2, #0
 8014288:	2120      	movs	r1, #32
 801428a:	68f8      	ldr	r0, [r7, #12]
 801428c:	f000 f82d 	bl	80142ea <UART_WaitOnFlagUntilTimeout>
 8014290:	4603      	mov	r3, r0
 8014292:	2b00      	cmp	r3, #0
 8014294:	d001      	beq.n	801429a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8014296:	2303      	movs	r3, #3
 8014298:	e023      	b.n	80142e2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	691b      	ldr	r3, [r3, #16]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d108      	bne.n	80142b4 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	6859      	ldr	r1, [r3, #4]
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	1c5a      	adds	r2, r3, #1
 80142ac:	60ba      	str	r2, [r7, #8]
 80142ae:	b2ca      	uxtb	r2, r1
 80142b0:	701a      	strb	r2, [r3, #0]
 80142b2:	e00a      	b.n	80142ca <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	b2da      	uxtb	r2, r3
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	1c59      	adds	r1, r3, #1
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80142c6:	b2d2      	uxtb	r2, r2
 80142c8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d19d      	bne.n	8014210 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2220      	movs	r2, #32
 80142d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80142dc:	2300      	movs	r3, #0
 80142de:	e000      	b.n	80142e2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80142e0:	2302      	movs	r3, #2
  }
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3718      	adds	r7, #24
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}

080142ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80142ea:	b580      	push	{r7, lr}
 80142ec:	b084      	sub	sp, #16
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	60f8      	str	r0, [r7, #12]
 80142f2:	60b9      	str	r1, [r7, #8]
 80142f4:	603b      	str	r3, [r7, #0]
 80142f6:	4613      	mov	r3, r2
 80142f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80142fa:	e02c      	b.n	8014356 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014302:	d028      	beq.n	8014356 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014304:	69bb      	ldr	r3, [r7, #24]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d007      	beq.n	801431a <UART_WaitOnFlagUntilTimeout+0x30>
 801430a:	f7fb fbcd 	bl	800faa8 <HAL_GetTick>
 801430e:	4602      	mov	r2, r0
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	1ad3      	subs	r3, r2, r3
 8014314:	69ba      	ldr	r2, [r7, #24]
 8014316:	429a      	cmp	r2, r3
 8014318:	d21d      	bcs.n	8014356 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	68da      	ldr	r2, [r3, #12]
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014328:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	695a      	ldr	r2, [r3, #20]
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f022 0201 	bic.w	r2, r2, #1
 8014338:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	2220      	movs	r2, #32
 801433e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2220      	movs	r2, #32
 8014346:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2200      	movs	r2, #0
 801434e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8014352:	2303      	movs	r3, #3
 8014354:	e00f      	b.n	8014376 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	4013      	ands	r3, r2
 8014360:	68ba      	ldr	r2, [r7, #8]
 8014362:	429a      	cmp	r2, r3
 8014364:	bf0c      	ite	eq
 8014366:	2301      	moveq	r3, #1
 8014368:	2300      	movne	r3, #0
 801436a:	b2db      	uxtb	r3, r3
 801436c:	461a      	mov	r2, r3
 801436e:	79fb      	ldrb	r3, [r7, #7]
 8014370:	429a      	cmp	r2, r3
 8014372:	d0c3      	beq.n	80142fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014374:	2300      	movs	r3, #0
}
 8014376:	4618      	mov	r0, r3
 8014378:	3710      	adds	r7, #16
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
	...

08014380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014384:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8014388:	af00      	add	r7, sp, #0
 801438a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801438e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	691b      	ldr	r3, [r3, #16]
 8014396:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801439a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801439e:	68d9      	ldr	r1, [r3, #12]
 80143a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143a4:	681a      	ldr	r2, [r3, #0]
 80143a6:	ea40 0301 	orr.w	r3, r0, r1
 80143aa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80143ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143b0:	689a      	ldr	r2, [r3, #8]
 80143b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143b6:	691b      	ldr	r3, [r3, #16]
 80143b8:	431a      	orrs	r2, r3
 80143ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143be:	695b      	ldr	r3, [r3, #20]
 80143c0:	431a      	orrs	r2, r3
 80143c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143c6:	69db      	ldr	r3, [r3, #28]
 80143c8:	4313      	orrs	r3, r2
 80143ca:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80143ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	68db      	ldr	r3, [r3, #12]
 80143d6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80143da:	f021 010c 	bic.w	r1, r1, #12
 80143de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80143e8:	430b      	orrs	r3, r1
 80143ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80143ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	695b      	ldr	r3, [r3, #20]
 80143f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80143f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80143fc:	6999      	ldr	r1, [r3, #24]
 80143fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014402:	681a      	ldr	r2, [r3, #0]
 8014404:	ea40 0301 	orr.w	r3, r0, r1
 8014408:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801440a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801440e:	69db      	ldr	r3, [r3, #28]
 8014410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014414:	f040 824a 	bne.w	80148ac <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014418:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801441c:	681a      	ldr	r2, [r3, #0]
 801441e:	4b96      	ldr	r3, [pc, #600]	; (8014678 <UART_SetConfig+0x2f8>)
 8014420:	429a      	cmp	r2, r3
 8014422:	d006      	beq.n	8014432 <UART_SetConfig+0xb2>
 8014424:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014428:	681a      	ldr	r2, [r3, #0]
 801442a:	4b94      	ldr	r3, [pc, #592]	; (801467c <UART_SetConfig+0x2fc>)
 801442c:	429a      	cmp	r2, r3
 801442e:	f040 8129 	bne.w	8014684 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014432:	f7fd fcb3 	bl	8011d9c <HAL_RCC_GetPCLK2Freq>
 8014436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801443a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801443e:	2200      	movs	r2, #0
 8014440:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8014444:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8014448:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 801444c:	4622      	mov	r2, r4
 801444e:	462b      	mov	r3, r5
 8014450:	1891      	adds	r1, r2, r2
 8014452:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8014456:	415b      	adcs	r3, r3
 8014458:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801445c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8014460:	4621      	mov	r1, r4
 8014462:	1851      	adds	r1, r2, r1
 8014464:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8014468:	4629      	mov	r1, r5
 801446a:	414b      	adcs	r3, r1
 801446c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014470:	f04f 0200 	mov.w	r2, #0
 8014474:	f04f 0300 	mov.w	r3, #0
 8014478:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 801447c:	4649      	mov	r1, r9
 801447e:	00cb      	lsls	r3, r1, #3
 8014480:	4641      	mov	r1, r8
 8014482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014486:	4641      	mov	r1, r8
 8014488:	00ca      	lsls	r2, r1, #3
 801448a:	4610      	mov	r0, r2
 801448c:	4619      	mov	r1, r3
 801448e:	4603      	mov	r3, r0
 8014490:	4622      	mov	r2, r4
 8014492:	189b      	adds	r3, r3, r2
 8014494:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8014498:	462b      	mov	r3, r5
 801449a:	460a      	mov	r2, r1
 801449c:	eb42 0303 	adc.w	r3, r2, r3
 80144a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80144a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80144a8:	685b      	ldr	r3, [r3, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80144b0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80144b4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80144b8:	460b      	mov	r3, r1
 80144ba:	18db      	adds	r3, r3, r3
 80144bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80144c0:	4613      	mov	r3, r2
 80144c2:	eb42 0303 	adc.w	r3, r2, r3
 80144c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80144ca:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80144ce:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80144d2:	f7f4 fb11 	bl	8008af8 <__aeabi_uldivmod>
 80144d6:	4602      	mov	r2, r0
 80144d8:	460b      	mov	r3, r1
 80144da:	4b69      	ldr	r3, [pc, #420]	; (8014680 <UART_SetConfig+0x300>)
 80144dc:	fba3 2302 	umull	r2, r3, r3, r2
 80144e0:	095b      	lsrs	r3, r3, #5
 80144e2:	011c      	lsls	r4, r3, #4
 80144e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80144e8:	2200      	movs	r2, #0
 80144ea:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80144ee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80144f2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80144f6:	4642      	mov	r2, r8
 80144f8:	464b      	mov	r3, r9
 80144fa:	1891      	adds	r1, r2, r2
 80144fc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8014500:	415b      	adcs	r3, r3
 8014502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014506:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801450a:	4641      	mov	r1, r8
 801450c:	1851      	adds	r1, r2, r1
 801450e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8014512:	4649      	mov	r1, r9
 8014514:	414b      	adcs	r3, r1
 8014516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801451a:	f04f 0200 	mov.w	r2, #0
 801451e:	f04f 0300 	mov.w	r3, #0
 8014522:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8014526:	4659      	mov	r1, fp
 8014528:	00cb      	lsls	r3, r1, #3
 801452a:	4651      	mov	r1, sl
 801452c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014530:	4651      	mov	r1, sl
 8014532:	00ca      	lsls	r2, r1, #3
 8014534:	4610      	mov	r0, r2
 8014536:	4619      	mov	r1, r3
 8014538:	4603      	mov	r3, r0
 801453a:	4642      	mov	r2, r8
 801453c:	189b      	adds	r3, r3, r2
 801453e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8014542:	464b      	mov	r3, r9
 8014544:	460a      	mov	r2, r1
 8014546:	eb42 0303 	adc.w	r3, r2, r3
 801454a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 801454e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014552:	685b      	ldr	r3, [r3, #4]
 8014554:	2200      	movs	r2, #0
 8014556:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 801455a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 801455e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8014562:	460b      	mov	r3, r1
 8014564:	18db      	adds	r3, r3, r3
 8014566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801456a:	4613      	mov	r3, r2
 801456c:	eb42 0303 	adc.w	r3, r2, r3
 8014570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014574:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8014578:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 801457c:	f7f4 fabc 	bl	8008af8 <__aeabi_uldivmod>
 8014580:	4602      	mov	r2, r0
 8014582:	460b      	mov	r3, r1
 8014584:	4611      	mov	r1, r2
 8014586:	4b3e      	ldr	r3, [pc, #248]	; (8014680 <UART_SetConfig+0x300>)
 8014588:	fba3 2301 	umull	r2, r3, r3, r1
 801458c:	095b      	lsrs	r3, r3, #5
 801458e:	2264      	movs	r2, #100	; 0x64
 8014590:	fb02 f303 	mul.w	r3, r2, r3
 8014594:	1acb      	subs	r3, r1, r3
 8014596:	00db      	lsls	r3, r3, #3
 8014598:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801459c:	4b38      	ldr	r3, [pc, #224]	; (8014680 <UART_SetConfig+0x300>)
 801459e:	fba3 2302 	umull	r2, r3, r3, r2
 80145a2:	095b      	lsrs	r3, r3, #5
 80145a4:	005b      	lsls	r3, r3, #1
 80145a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80145aa:	441c      	add	r4, r3
 80145ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80145b0:	2200      	movs	r2, #0
 80145b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80145b6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80145ba:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80145be:	4642      	mov	r2, r8
 80145c0:	464b      	mov	r3, r9
 80145c2:	1891      	adds	r1, r2, r2
 80145c4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80145c8:	415b      	adcs	r3, r3
 80145ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80145ce:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80145d2:	4641      	mov	r1, r8
 80145d4:	1851      	adds	r1, r2, r1
 80145d6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80145da:	4649      	mov	r1, r9
 80145dc:	414b      	adcs	r3, r1
 80145de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80145e2:	f04f 0200 	mov.w	r2, #0
 80145e6:	f04f 0300 	mov.w	r3, #0
 80145ea:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80145ee:	4659      	mov	r1, fp
 80145f0:	00cb      	lsls	r3, r1, #3
 80145f2:	4651      	mov	r1, sl
 80145f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80145f8:	4651      	mov	r1, sl
 80145fa:	00ca      	lsls	r2, r1, #3
 80145fc:	4610      	mov	r0, r2
 80145fe:	4619      	mov	r1, r3
 8014600:	4603      	mov	r3, r0
 8014602:	4642      	mov	r2, r8
 8014604:	189b      	adds	r3, r3, r2
 8014606:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 801460a:	464b      	mov	r3, r9
 801460c:	460a      	mov	r2, r1
 801460e:	eb42 0303 	adc.w	r3, r2, r3
 8014612:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8014616:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801461a:	685b      	ldr	r3, [r3, #4]
 801461c:	2200      	movs	r2, #0
 801461e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8014622:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8014626:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 801462a:	460b      	mov	r3, r1
 801462c:	18db      	adds	r3, r3, r3
 801462e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014632:	4613      	mov	r3, r2
 8014634:	eb42 0303 	adc.w	r3, r2, r3
 8014638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801463c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8014640:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8014644:	f7f4 fa58 	bl	8008af8 <__aeabi_uldivmod>
 8014648:	4602      	mov	r2, r0
 801464a:	460b      	mov	r3, r1
 801464c:	4b0c      	ldr	r3, [pc, #48]	; (8014680 <UART_SetConfig+0x300>)
 801464e:	fba3 1302 	umull	r1, r3, r3, r2
 8014652:	095b      	lsrs	r3, r3, #5
 8014654:	2164      	movs	r1, #100	; 0x64
 8014656:	fb01 f303 	mul.w	r3, r1, r3
 801465a:	1ad3      	subs	r3, r2, r3
 801465c:	00db      	lsls	r3, r3, #3
 801465e:	3332      	adds	r3, #50	; 0x32
 8014660:	4a07      	ldr	r2, [pc, #28]	; (8014680 <UART_SetConfig+0x300>)
 8014662:	fba2 2303 	umull	r2, r3, r2, r3
 8014666:	095b      	lsrs	r3, r3, #5
 8014668:	f003 0207 	and.w	r2, r3, #7
 801466c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	4422      	add	r2, r4
 8014674:	609a      	str	r2, [r3, #8]
 8014676:	e349      	b.n	8014d0c <UART_SetConfig+0x98c>
 8014678:	40011000 	.word	0x40011000
 801467c:	40011400 	.word	0x40011400
 8014680:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014684:	f7fd fb76 	bl	8011d74 <HAL_RCC_GetPCLK1Freq>
 8014688:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801468c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014690:	2200      	movs	r2, #0
 8014692:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8014696:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 801469a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 801469e:	4622      	mov	r2, r4
 80146a0:	462b      	mov	r3, r5
 80146a2:	1891      	adds	r1, r2, r2
 80146a4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80146a8:	415b      	adcs	r3, r3
 80146aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80146ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80146b2:	4621      	mov	r1, r4
 80146b4:	eb12 0a01 	adds.w	sl, r2, r1
 80146b8:	4629      	mov	r1, r5
 80146ba:	eb43 0b01 	adc.w	fp, r3, r1
 80146be:	f04f 0200 	mov.w	r2, #0
 80146c2:	f04f 0300 	mov.w	r3, #0
 80146c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80146ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80146ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80146d2:	4692      	mov	sl, r2
 80146d4:	469b      	mov	fp, r3
 80146d6:	4623      	mov	r3, r4
 80146d8:	eb1a 0303 	adds.w	r3, sl, r3
 80146dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80146e0:	462b      	mov	r3, r5
 80146e2:	eb4b 0303 	adc.w	r3, fp, r3
 80146e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80146ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	2200      	movs	r2, #0
 80146f2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80146f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80146fa:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80146fe:	460b      	mov	r3, r1
 8014700:	18db      	adds	r3, r3, r3
 8014702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014706:	4613      	mov	r3, r2
 8014708:	eb42 0303 	adc.w	r3, r2, r3
 801470c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014710:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8014714:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8014718:	f7f4 f9ee 	bl	8008af8 <__aeabi_uldivmod>
 801471c:	4602      	mov	r2, r0
 801471e:	460b      	mov	r3, r1
 8014720:	4b61      	ldr	r3, [pc, #388]	; (80148a8 <UART_SetConfig+0x528>)
 8014722:	fba3 2302 	umull	r2, r3, r3, r2
 8014726:	095b      	lsrs	r3, r3, #5
 8014728:	011c      	lsls	r4, r3, #4
 801472a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801472e:	2200      	movs	r2, #0
 8014730:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8014734:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8014738:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 801473c:	4642      	mov	r2, r8
 801473e:	464b      	mov	r3, r9
 8014740:	1891      	adds	r1, r2, r2
 8014742:	67b9      	str	r1, [r7, #120]	; 0x78
 8014744:	415b      	adcs	r3, r3
 8014746:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014748:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801474c:	4641      	mov	r1, r8
 801474e:	1851      	adds	r1, r2, r1
 8014750:	6739      	str	r1, [r7, #112]	; 0x70
 8014752:	4649      	mov	r1, r9
 8014754:	414b      	adcs	r3, r1
 8014756:	677b      	str	r3, [r7, #116]	; 0x74
 8014758:	f04f 0200 	mov.w	r2, #0
 801475c:	f04f 0300 	mov.w	r3, #0
 8014760:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8014764:	4659      	mov	r1, fp
 8014766:	00cb      	lsls	r3, r1, #3
 8014768:	4651      	mov	r1, sl
 801476a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801476e:	4651      	mov	r1, sl
 8014770:	00ca      	lsls	r2, r1, #3
 8014772:	4610      	mov	r0, r2
 8014774:	4619      	mov	r1, r3
 8014776:	4603      	mov	r3, r0
 8014778:	4642      	mov	r2, r8
 801477a:	189b      	adds	r3, r3, r2
 801477c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8014780:	464b      	mov	r3, r9
 8014782:	460a      	mov	r2, r1
 8014784:	eb42 0303 	adc.w	r3, r2, r3
 8014788:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 801478c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	2200      	movs	r2, #0
 8014794:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8014798:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 801479c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80147a0:	460b      	mov	r3, r1
 80147a2:	18db      	adds	r3, r3, r3
 80147a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80147a6:	4613      	mov	r3, r2
 80147a8:	eb42 0303 	adc.w	r3, r2, r3
 80147ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80147ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80147b2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80147b6:	f7f4 f99f 	bl	8008af8 <__aeabi_uldivmod>
 80147ba:	4602      	mov	r2, r0
 80147bc:	460b      	mov	r3, r1
 80147be:	4611      	mov	r1, r2
 80147c0:	4b39      	ldr	r3, [pc, #228]	; (80148a8 <UART_SetConfig+0x528>)
 80147c2:	fba3 2301 	umull	r2, r3, r3, r1
 80147c6:	095b      	lsrs	r3, r3, #5
 80147c8:	2264      	movs	r2, #100	; 0x64
 80147ca:	fb02 f303 	mul.w	r3, r2, r3
 80147ce:	1acb      	subs	r3, r1, r3
 80147d0:	00db      	lsls	r3, r3, #3
 80147d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80147d6:	4b34      	ldr	r3, [pc, #208]	; (80148a8 <UART_SetConfig+0x528>)
 80147d8:	fba3 2302 	umull	r2, r3, r3, r2
 80147dc:	095b      	lsrs	r3, r3, #5
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80147e4:	441c      	add	r4, r3
 80147e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80147ea:	2200      	movs	r2, #0
 80147ec:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80147f0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80147f4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80147f8:	4642      	mov	r2, r8
 80147fa:	464b      	mov	r3, r9
 80147fc:	1891      	adds	r1, r2, r2
 80147fe:	6639      	str	r1, [r7, #96]	; 0x60
 8014800:	415b      	adcs	r3, r3
 8014802:	667b      	str	r3, [r7, #100]	; 0x64
 8014804:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014808:	4641      	mov	r1, r8
 801480a:	1851      	adds	r1, r2, r1
 801480c:	65b9      	str	r1, [r7, #88]	; 0x58
 801480e:	4649      	mov	r1, r9
 8014810:	414b      	adcs	r3, r1
 8014812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014814:	f04f 0200 	mov.w	r2, #0
 8014818:	f04f 0300 	mov.w	r3, #0
 801481c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8014820:	4659      	mov	r1, fp
 8014822:	00cb      	lsls	r3, r1, #3
 8014824:	4651      	mov	r1, sl
 8014826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801482a:	4651      	mov	r1, sl
 801482c:	00ca      	lsls	r2, r1, #3
 801482e:	4610      	mov	r0, r2
 8014830:	4619      	mov	r1, r3
 8014832:	4603      	mov	r3, r0
 8014834:	4642      	mov	r2, r8
 8014836:	189b      	adds	r3, r3, r2
 8014838:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801483c:	464b      	mov	r3, r9
 801483e:	460a      	mov	r2, r1
 8014840:	eb42 0303 	adc.w	r3, r2, r3
 8014844:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8014848:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	2200      	movs	r2, #0
 8014850:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8014854:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8014858:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 801485c:	460b      	mov	r3, r1
 801485e:	18db      	adds	r3, r3, r3
 8014860:	653b      	str	r3, [r7, #80]	; 0x50
 8014862:	4613      	mov	r3, r2
 8014864:	eb42 0303 	adc.w	r3, r2, r3
 8014868:	657b      	str	r3, [r7, #84]	; 0x54
 801486a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801486e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8014872:	f7f4 f941 	bl	8008af8 <__aeabi_uldivmod>
 8014876:	4602      	mov	r2, r0
 8014878:	460b      	mov	r3, r1
 801487a:	4b0b      	ldr	r3, [pc, #44]	; (80148a8 <UART_SetConfig+0x528>)
 801487c:	fba3 1302 	umull	r1, r3, r3, r2
 8014880:	095b      	lsrs	r3, r3, #5
 8014882:	2164      	movs	r1, #100	; 0x64
 8014884:	fb01 f303 	mul.w	r3, r1, r3
 8014888:	1ad3      	subs	r3, r2, r3
 801488a:	00db      	lsls	r3, r3, #3
 801488c:	3332      	adds	r3, #50	; 0x32
 801488e:	4a06      	ldr	r2, [pc, #24]	; (80148a8 <UART_SetConfig+0x528>)
 8014890:	fba2 2303 	umull	r2, r3, r2, r3
 8014894:	095b      	lsrs	r3, r3, #5
 8014896:	f003 0207 	and.w	r2, r3, #7
 801489a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	4422      	add	r2, r4
 80148a2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80148a4:	e232      	b.n	8014d0c <UART_SetConfig+0x98c>
 80148a6:	bf00      	nop
 80148a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80148ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	4b8d      	ldr	r3, [pc, #564]	; (8014ae8 <UART_SetConfig+0x768>)
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d006      	beq.n	80148c6 <UART_SetConfig+0x546>
 80148b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	4b8b      	ldr	r3, [pc, #556]	; (8014aec <UART_SetConfig+0x76c>)
 80148c0:	429a      	cmp	r2, r3
 80148c2:	f040 8117 	bne.w	8014af4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80148c6:	f7fd fa69 	bl	8011d9c <HAL_RCC_GetPCLK2Freq>
 80148ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80148ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80148d2:	2200      	movs	r2, #0
 80148d4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80148d8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80148dc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80148e0:	4622      	mov	r2, r4
 80148e2:	462b      	mov	r3, r5
 80148e4:	1891      	adds	r1, r2, r2
 80148e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80148e8:	415b      	adcs	r3, r3
 80148ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80148ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80148f0:	4621      	mov	r1, r4
 80148f2:	eb12 0801 	adds.w	r8, r2, r1
 80148f6:	4629      	mov	r1, r5
 80148f8:	eb43 0901 	adc.w	r9, r3, r1
 80148fc:	f04f 0200 	mov.w	r2, #0
 8014900:	f04f 0300 	mov.w	r3, #0
 8014904:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8014908:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801490c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014910:	4690      	mov	r8, r2
 8014912:	4699      	mov	r9, r3
 8014914:	4623      	mov	r3, r4
 8014916:	eb18 0303 	adds.w	r3, r8, r3
 801491a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 801491e:	462b      	mov	r3, r5
 8014920:	eb49 0303 	adc.w	r3, r9, r3
 8014924:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8014928:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	2200      	movs	r2, #0
 8014930:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8014934:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8014938:	f04f 0200 	mov.w	r2, #0
 801493c:	f04f 0300 	mov.w	r3, #0
 8014940:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8014944:	4629      	mov	r1, r5
 8014946:	008b      	lsls	r3, r1, #2
 8014948:	4621      	mov	r1, r4
 801494a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801494e:	4621      	mov	r1, r4
 8014950:	008a      	lsls	r2, r1, #2
 8014952:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8014956:	f7f4 f8cf 	bl	8008af8 <__aeabi_uldivmod>
 801495a:	4602      	mov	r2, r0
 801495c:	460b      	mov	r3, r1
 801495e:	4b64      	ldr	r3, [pc, #400]	; (8014af0 <UART_SetConfig+0x770>)
 8014960:	fba3 2302 	umull	r2, r3, r3, r2
 8014964:	095b      	lsrs	r3, r3, #5
 8014966:	011c      	lsls	r4, r3, #4
 8014968:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801496c:	2200      	movs	r2, #0
 801496e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8014972:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8014976:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 801497a:	4642      	mov	r2, r8
 801497c:	464b      	mov	r3, r9
 801497e:	1891      	adds	r1, r2, r2
 8014980:	6439      	str	r1, [r7, #64]	; 0x40
 8014982:	415b      	adcs	r3, r3
 8014984:	647b      	str	r3, [r7, #68]	; 0x44
 8014986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801498a:	4641      	mov	r1, r8
 801498c:	1851      	adds	r1, r2, r1
 801498e:	63b9      	str	r1, [r7, #56]	; 0x38
 8014990:	4649      	mov	r1, r9
 8014992:	414b      	adcs	r3, r1
 8014994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014996:	f04f 0200 	mov.w	r2, #0
 801499a:	f04f 0300 	mov.w	r3, #0
 801499e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80149a2:	4659      	mov	r1, fp
 80149a4:	00cb      	lsls	r3, r1, #3
 80149a6:	4651      	mov	r1, sl
 80149a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80149ac:	4651      	mov	r1, sl
 80149ae:	00ca      	lsls	r2, r1, #3
 80149b0:	4610      	mov	r0, r2
 80149b2:	4619      	mov	r1, r3
 80149b4:	4603      	mov	r3, r0
 80149b6:	4642      	mov	r2, r8
 80149b8:	189b      	adds	r3, r3, r2
 80149ba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80149be:	464b      	mov	r3, r9
 80149c0:	460a      	mov	r2, r1
 80149c2:	eb42 0303 	adc.w	r3, r2, r3
 80149c6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80149ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	2200      	movs	r2, #0
 80149d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80149d6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80149da:	f04f 0200 	mov.w	r2, #0
 80149de:	f04f 0300 	mov.w	r3, #0
 80149e2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80149e6:	4649      	mov	r1, r9
 80149e8:	008b      	lsls	r3, r1, #2
 80149ea:	4641      	mov	r1, r8
 80149ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80149f0:	4641      	mov	r1, r8
 80149f2:	008a      	lsls	r2, r1, #2
 80149f4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80149f8:	f7f4 f87e 	bl	8008af8 <__aeabi_uldivmod>
 80149fc:	4602      	mov	r2, r0
 80149fe:	460b      	mov	r3, r1
 8014a00:	4b3b      	ldr	r3, [pc, #236]	; (8014af0 <UART_SetConfig+0x770>)
 8014a02:	fba3 1302 	umull	r1, r3, r3, r2
 8014a06:	095b      	lsrs	r3, r3, #5
 8014a08:	2164      	movs	r1, #100	; 0x64
 8014a0a:	fb01 f303 	mul.w	r3, r1, r3
 8014a0e:	1ad3      	subs	r3, r2, r3
 8014a10:	011b      	lsls	r3, r3, #4
 8014a12:	3332      	adds	r3, #50	; 0x32
 8014a14:	4a36      	ldr	r2, [pc, #216]	; (8014af0 <UART_SetConfig+0x770>)
 8014a16:	fba2 2303 	umull	r2, r3, r2, r3
 8014a1a:	095b      	lsrs	r3, r3, #5
 8014a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a20:	441c      	add	r4, r3
 8014a22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014a26:	2200      	movs	r2, #0
 8014a28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8014a2c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8014a30:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8014a34:	4642      	mov	r2, r8
 8014a36:	464b      	mov	r3, r9
 8014a38:	1891      	adds	r1, r2, r2
 8014a3a:	6339      	str	r1, [r7, #48]	; 0x30
 8014a3c:	415b      	adcs	r3, r3
 8014a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8014a40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014a44:	4641      	mov	r1, r8
 8014a46:	1851      	adds	r1, r2, r1
 8014a48:	62b9      	str	r1, [r7, #40]	; 0x28
 8014a4a:	4649      	mov	r1, r9
 8014a4c:	414b      	adcs	r3, r1
 8014a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a50:	f04f 0200 	mov.w	r2, #0
 8014a54:	f04f 0300 	mov.w	r3, #0
 8014a58:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8014a5c:	4659      	mov	r1, fp
 8014a5e:	00cb      	lsls	r3, r1, #3
 8014a60:	4651      	mov	r1, sl
 8014a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014a66:	4651      	mov	r1, sl
 8014a68:	00ca      	lsls	r2, r1, #3
 8014a6a:	4610      	mov	r0, r2
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	4603      	mov	r3, r0
 8014a70:	4642      	mov	r2, r8
 8014a72:	189b      	adds	r3, r3, r2
 8014a74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8014a78:	464b      	mov	r3, r9
 8014a7a:	460a      	mov	r2, r1
 8014a7c:	eb42 0303 	adc.w	r3, r2, r3
 8014a80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8014a84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8014a90:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8014a94:	f04f 0200 	mov.w	r2, #0
 8014a98:	f04f 0300 	mov.w	r3, #0
 8014a9c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8014aa0:	4649      	mov	r1, r9
 8014aa2:	008b      	lsls	r3, r1, #2
 8014aa4:	4641      	mov	r1, r8
 8014aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014aaa:	4641      	mov	r1, r8
 8014aac:	008a      	lsls	r2, r1, #2
 8014aae:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8014ab2:	f7f4 f821 	bl	8008af8 <__aeabi_uldivmod>
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	460b      	mov	r3, r1
 8014aba:	4b0d      	ldr	r3, [pc, #52]	; (8014af0 <UART_SetConfig+0x770>)
 8014abc:	fba3 1302 	umull	r1, r3, r3, r2
 8014ac0:	095b      	lsrs	r3, r3, #5
 8014ac2:	2164      	movs	r1, #100	; 0x64
 8014ac4:	fb01 f303 	mul.w	r3, r1, r3
 8014ac8:	1ad3      	subs	r3, r2, r3
 8014aca:	011b      	lsls	r3, r3, #4
 8014acc:	3332      	adds	r3, #50	; 0x32
 8014ace:	4a08      	ldr	r2, [pc, #32]	; (8014af0 <UART_SetConfig+0x770>)
 8014ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8014ad4:	095b      	lsrs	r3, r3, #5
 8014ad6:	f003 020f 	and.w	r2, r3, #15
 8014ada:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	4422      	add	r2, r4
 8014ae2:	609a      	str	r2, [r3, #8]
 8014ae4:	e112      	b.n	8014d0c <UART_SetConfig+0x98c>
 8014ae6:	bf00      	nop
 8014ae8:	40011000 	.word	0x40011000
 8014aec:	40011400 	.word	0x40011400
 8014af0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8014af4:	f7fd f93e 	bl	8011d74 <HAL_RCC_GetPCLK1Freq>
 8014af8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014afc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014b00:	2200      	movs	r2, #0
 8014b02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8014b06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8014b0a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8014b0e:	4642      	mov	r2, r8
 8014b10:	464b      	mov	r3, r9
 8014b12:	1891      	adds	r1, r2, r2
 8014b14:	6239      	str	r1, [r7, #32]
 8014b16:	415b      	adcs	r3, r3
 8014b18:	627b      	str	r3, [r7, #36]	; 0x24
 8014b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014b1e:	4641      	mov	r1, r8
 8014b20:	1854      	adds	r4, r2, r1
 8014b22:	4649      	mov	r1, r9
 8014b24:	eb43 0501 	adc.w	r5, r3, r1
 8014b28:	f04f 0200 	mov.w	r2, #0
 8014b2c:	f04f 0300 	mov.w	r3, #0
 8014b30:	00eb      	lsls	r3, r5, #3
 8014b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014b36:	00e2      	lsls	r2, r4, #3
 8014b38:	4614      	mov	r4, r2
 8014b3a:	461d      	mov	r5, r3
 8014b3c:	4643      	mov	r3, r8
 8014b3e:	18e3      	adds	r3, r4, r3
 8014b40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8014b44:	464b      	mov	r3, r9
 8014b46:	eb45 0303 	adc.w	r3, r5, r3
 8014b4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8014b4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014b52:	685b      	ldr	r3, [r3, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8014b5a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8014b5e:	f04f 0200 	mov.w	r2, #0
 8014b62:	f04f 0300 	mov.w	r3, #0
 8014b66:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8014b6a:	4629      	mov	r1, r5
 8014b6c:	008b      	lsls	r3, r1, #2
 8014b6e:	4621      	mov	r1, r4
 8014b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014b74:	4621      	mov	r1, r4
 8014b76:	008a      	lsls	r2, r1, #2
 8014b78:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8014b7c:	f7f3 ffbc 	bl	8008af8 <__aeabi_uldivmod>
 8014b80:	4602      	mov	r2, r0
 8014b82:	460b      	mov	r3, r1
 8014b84:	4b64      	ldr	r3, [pc, #400]	; (8014d18 <UART_SetConfig+0x998>)
 8014b86:	fba3 2302 	umull	r2, r3, r3, r2
 8014b8a:	095b      	lsrs	r3, r3, #5
 8014b8c:	011c      	lsls	r4, r3, #4
 8014b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014b92:	2200      	movs	r2, #0
 8014b94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014b98:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8014b9c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8014ba0:	4642      	mov	r2, r8
 8014ba2:	464b      	mov	r3, r9
 8014ba4:	1891      	adds	r1, r2, r2
 8014ba6:	61b9      	str	r1, [r7, #24]
 8014ba8:	415b      	adcs	r3, r3
 8014baa:	61fb      	str	r3, [r7, #28]
 8014bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014bb0:	4641      	mov	r1, r8
 8014bb2:	1851      	adds	r1, r2, r1
 8014bb4:	6139      	str	r1, [r7, #16]
 8014bb6:	4649      	mov	r1, r9
 8014bb8:	414b      	adcs	r3, r1
 8014bba:	617b      	str	r3, [r7, #20]
 8014bbc:	f04f 0200 	mov.w	r2, #0
 8014bc0:	f04f 0300 	mov.w	r3, #0
 8014bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8014bc8:	4659      	mov	r1, fp
 8014bca:	00cb      	lsls	r3, r1, #3
 8014bcc:	4651      	mov	r1, sl
 8014bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014bd2:	4651      	mov	r1, sl
 8014bd4:	00ca      	lsls	r2, r1, #3
 8014bd6:	4610      	mov	r0, r2
 8014bd8:	4619      	mov	r1, r3
 8014bda:	4603      	mov	r3, r0
 8014bdc:	4642      	mov	r2, r8
 8014bde:	189b      	adds	r3, r3, r2
 8014be0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014be4:	464b      	mov	r3, r9
 8014be6:	460a      	mov	r2, r1
 8014be8:	eb42 0303 	adc.w	r3, r2, r3
 8014bec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014bf0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014bf4:	685b      	ldr	r3, [r3, #4]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014bfc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8014c00:	f04f 0200 	mov.w	r2, #0
 8014c04:	f04f 0300 	mov.w	r3, #0
 8014c08:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8014c0c:	4649      	mov	r1, r9
 8014c0e:	008b      	lsls	r3, r1, #2
 8014c10:	4641      	mov	r1, r8
 8014c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014c16:	4641      	mov	r1, r8
 8014c18:	008a      	lsls	r2, r1, #2
 8014c1a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8014c1e:	f7f3 ff6b 	bl	8008af8 <__aeabi_uldivmod>
 8014c22:	4602      	mov	r2, r0
 8014c24:	460b      	mov	r3, r1
 8014c26:	4b3c      	ldr	r3, [pc, #240]	; (8014d18 <UART_SetConfig+0x998>)
 8014c28:	fba3 1302 	umull	r1, r3, r3, r2
 8014c2c:	095b      	lsrs	r3, r3, #5
 8014c2e:	2164      	movs	r1, #100	; 0x64
 8014c30:	fb01 f303 	mul.w	r3, r1, r3
 8014c34:	1ad3      	subs	r3, r2, r3
 8014c36:	011b      	lsls	r3, r3, #4
 8014c38:	3332      	adds	r3, #50	; 0x32
 8014c3a:	4a37      	ldr	r2, [pc, #220]	; (8014d18 <UART_SetConfig+0x998>)
 8014c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8014c40:	095b      	lsrs	r3, r3, #5
 8014c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c46:	441c      	add	r4, r3
 8014c48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014c52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8014c56:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8014c5a:	4642      	mov	r2, r8
 8014c5c:	464b      	mov	r3, r9
 8014c5e:	1891      	adds	r1, r2, r2
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	415b      	adcs	r3, r3
 8014c64:	60fb      	str	r3, [r7, #12]
 8014c66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014c6a:	4641      	mov	r1, r8
 8014c6c:	1851      	adds	r1, r2, r1
 8014c6e:	6039      	str	r1, [r7, #0]
 8014c70:	4649      	mov	r1, r9
 8014c72:	414b      	adcs	r3, r1
 8014c74:	607b      	str	r3, [r7, #4]
 8014c76:	f04f 0200 	mov.w	r2, #0
 8014c7a:	f04f 0300 	mov.w	r3, #0
 8014c7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014c82:	4659      	mov	r1, fp
 8014c84:	00cb      	lsls	r3, r1, #3
 8014c86:	4651      	mov	r1, sl
 8014c88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014c8c:	4651      	mov	r1, sl
 8014c8e:	00ca      	lsls	r2, r1, #3
 8014c90:	4610      	mov	r0, r2
 8014c92:	4619      	mov	r1, r3
 8014c94:	4603      	mov	r3, r0
 8014c96:	4642      	mov	r2, r8
 8014c98:	189b      	adds	r3, r3, r2
 8014c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014c9e:	464b      	mov	r3, r9
 8014ca0:	460a      	mov	r2, r1
 8014ca2:	eb42 0303 	adc.w	r3, r2, r3
 8014ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014caa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8014cba:	f04f 0200 	mov.w	r2, #0
 8014cbe:	f04f 0300 	mov.w	r3, #0
 8014cc2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8014cc6:	4649      	mov	r1, r9
 8014cc8:	008b      	lsls	r3, r1, #2
 8014cca:	4641      	mov	r1, r8
 8014ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014cd0:	4641      	mov	r1, r8
 8014cd2:	008a      	lsls	r2, r1, #2
 8014cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8014cd8:	f7f3 ff0e 	bl	8008af8 <__aeabi_uldivmod>
 8014cdc:	4602      	mov	r2, r0
 8014cde:	460b      	mov	r3, r1
 8014ce0:	4b0d      	ldr	r3, [pc, #52]	; (8014d18 <UART_SetConfig+0x998>)
 8014ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8014ce6:	095b      	lsrs	r3, r3, #5
 8014ce8:	2164      	movs	r1, #100	; 0x64
 8014cea:	fb01 f303 	mul.w	r3, r1, r3
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	011b      	lsls	r3, r3, #4
 8014cf2:	3332      	adds	r3, #50	; 0x32
 8014cf4:	4a08      	ldr	r2, [pc, #32]	; (8014d18 <UART_SetConfig+0x998>)
 8014cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8014cfa:	095b      	lsrs	r3, r3, #5
 8014cfc:	f003 020f 	and.w	r2, r3, #15
 8014d00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	4422      	add	r2, r4
 8014d08:	609a      	str	r2, [r3, #8]
}
 8014d0a:	e7ff      	b.n	8014d0c <UART_SetConfig+0x98c>
 8014d0c:	bf00      	nop
 8014d0e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8014d12:	46bd      	mov	sp, r7
 8014d14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014d18:	51eb851f 	.word	0x51eb851f

08014d1c <round>:
 8014d1c:	ec51 0b10 	vmov	r0, r1, d0
 8014d20:	b570      	push	{r4, r5, r6, lr}
 8014d22:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8014d26:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8014d2a:	2c13      	cmp	r4, #19
 8014d2c:	ee10 2a10 	vmov	r2, s0
 8014d30:	460b      	mov	r3, r1
 8014d32:	dc19      	bgt.n	8014d68 <round+0x4c>
 8014d34:	2c00      	cmp	r4, #0
 8014d36:	da09      	bge.n	8014d4c <round+0x30>
 8014d38:	3401      	adds	r4, #1
 8014d3a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8014d3e:	d103      	bne.n	8014d48 <round+0x2c>
 8014d40:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014d44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014d48:	2200      	movs	r2, #0
 8014d4a:	e028      	b.n	8014d9e <round+0x82>
 8014d4c:	4d15      	ldr	r5, [pc, #84]	; (8014da4 <round+0x88>)
 8014d4e:	4125      	asrs	r5, r4
 8014d50:	ea01 0605 	and.w	r6, r1, r5
 8014d54:	4332      	orrs	r2, r6
 8014d56:	d00e      	beq.n	8014d76 <round+0x5a>
 8014d58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014d5c:	fa42 f404 	asr.w	r4, r2, r4
 8014d60:	4423      	add	r3, r4
 8014d62:	ea23 0305 	bic.w	r3, r3, r5
 8014d66:	e7ef      	b.n	8014d48 <round+0x2c>
 8014d68:	2c33      	cmp	r4, #51	; 0x33
 8014d6a:	dd07      	ble.n	8014d7c <round+0x60>
 8014d6c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8014d70:	d101      	bne.n	8014d76 <round+0x5a>
 8014d72:	f7f3 f9c3 	bl	80080fc <__adddf3>
 8014d76:	ec41 0b10 	vmov	d0, r0, r1
 8014d7a:	bd70      	pop	{r4, r5, r6, pc}
 8014d7c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8014d80:	f04f 35ff 	mov.w	r5, #4294967295
 8014d84:	40f5      	lsrs	r5, r6
 8014d86:	4228      	tst	r0, r5
 8014d88:	d0f5      	beq.n	8014d76 <round+0x5a>
 8014d8a:	2101      	movs	r1, #1
 8014d8c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8014d90:	fa01 f404 	lsl.w	r4, r1, r4
 8014d94:	1912      	adds	r2, r2, r4
 8014d96:	bf28      	it	cs
 8014d98:	185b      	addcs	r3, r3, r1
 8014d9a:	ea22 0205 	bic.w	r2, r2, r5
 8014d9e:	4619      	mov	r1, r3
 8014da0:	4610      	mov	r0, r2
 8014da2:	e7e8      	b.n	8014d76 <round+0x5a>
 8014da4:	000fffff 	.word	0x000fffff

08014da8 <__errno>:
 8014da8:	4b01      	ldr	r3, [pc, #4]	; (8014db0 <__errno+0x8>)
 8014daa:	6818      	ldr	r0, [r3, #0]
 8014dac:	4770      	bx	lr
 8014dae:	bf00      	nop
 8014db0:	20000028 	.word	0x20000028

08014db4 <__libc_init_array>:
 8014db4:	b570      	push	{r4, r5, r6, lr}
 8014db6:	4d0d      	ldr	r5, [pc, #52]	; (8014dec <__libc_init_array+0x38>)
 8014db8:	4c0d      	ldr	r4, [pc, #52]	; (8014df0 <__libc_init_array+0x3c>)
 8014dba:	1b64      	subs	r4, r4, r5
 8014dbc:	10a4      	asrs	r4, r4, #2
 8014dbe:	2600      	movs	r6, #0
 8014dc0:	42a6      	cmp	r6, r4
 8014dc2:	d109      	bne.n	8014dd8 <__libc_init_array+0x24>
 8014dc4:	4d0b      	ldr	r5, [pc, #44]	; (8014df4 <__libc_init_array+0x40>)
 8014dc6:	4c0c      	ldr	r4, [pc, #48]	; (8014df8 <__libc_init_array+0x44>)
 8014dc8:	f005 fb64 	bl	801a494 <_init>
 8014dcc:	1b64      	subs	r4, r4, r5
 8014dce:	10a4      	asrs	r4, r4, #2
 8014dd0:	2600      	movs	r6, #0
 8014dd2:	42a6      	cmp	r6, r4
 8014dd4:	d105      	bne.n	8014de2 <__libc_init_array+0x2e>
 8014dd6:	bd70      	pop	{r4, r5, r6, pc}
 8014dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ddc:	4798      	blx	r3
 8014dde:	3601      	adds	r6, #1
 8014de0:	e7ee      	b.n	8014dc0 <__libc_init_array+0xc>
 8014de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8014de6:	4798      	blx	r3
 8014de8:	3601      	adds	r6, #1
 8014dea:	e7f2      	b.n	8014dd2 <__libc_init_array+0x1e>
 8014dec:	0801ac34 	.word	0x0801ac34
 8014df0:	0801ac34 	.word	0x0801ac34
 8014df4:	0801ac34 	.word	0x0801ac34
 8014df8:	0801ac38 	.word	0x0801ac38

08014dfc <memcpy>:
 8014dfc:	440a      	add	r2, r1
 8014dfe:	4291      	cmp	r1, r2
 8014e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e04:	d100      	bne.n	8014e08 <memcpy+0xc>
 8014e06:	4770      	bx	lr
 8014e08:	b510      	push	{r4, lr}
 8014e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e12:	4291      	cmp	r1, r2
 8014e14:	d1f9      	bne.n	8014e0a <memcpy+0xe>
 8014e16:	bd10      	pop	{r4, pc}

08014e18 <memset>:
 8014e18:	4402      	add	r2, r0
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	d100      	bne.n	8014e22 <memset+0xa>
 8014e20:	4770      	bx	lr
 8014e22:	f803 1b01 	strb.w	r1, [r3], #1
 8014e26:	e7f9      	b.n	8014e1c <memset+0x4>

08014e28 <__cvt>:
 8014e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e2c:	ec55 4b10 	vmov	r4, r5, d0
 8014e30:	2d00      	cmp	r5, #0
 8014e32:	460e      	mov	r6, r1
 8014e34:	4619      	mov	r1, r3
 8014e36:	462b      	mov	r3, r5
 8014e38:	bfbb      	ittet	lt
 8014e3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014e3e:	461d      	movlt	r5, r3
 8014e40:	2300      	movge	r3, #0
 8014e42:	232d      	movlt	r3, #45	; 0x2d
 8014e44:	700b      	strb	r3, [r1, #0]
 8014e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014e4c:	4691      	mov	r9, r2
 8014e4e:	f023 0820 	bic.w	r8, r3, #32
 8014e52:	bfbc      	itt	lt
 8014e54:	4622      	movlt	r2, r4
 8014e56:	4614      	movlt	r4, r2
 8014e58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014e5c:	d005      	beq.n	8014e6a <__cvt+0x42>
 8014e5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014e62:	d100      	bne.n	8014e66 <__cvt+0x3e>
 8014e64:	3601      	adds	r6, #1
 8014e66:	2102      	movs	r1, #2
 8014e68:	e000      	b.n	8014e6c <__cvt+0x44>
 8014e6a:	2103      	movs	r1, #3
 8014e6c:	ab03      	add	r3, sp, #12
 8014e6e:	9301      	str	r3, [sp, #4]
 8014e70:	ab02      	add	r3, sp, #8
 8014e72:	9300      	str	r3, [sp, #0]
 8014e74:	ec45 4b10 	vmov	d0, r4, r5
 8014e78:	4653      	mov	r3, sl
 8014e7a:	4632      	mov	r2, r6
 8014e7c:	f001 ffe0 	bl	8016e40 <_dtoa_r>
 8014e80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014e84:	4607      	mov	r7, r0
 8014e86:	d102      	bne.n	8014e8e <__cvt+0x66>
 8014e88:	f019 0f01 	tst.w	r9, #1
 8014e8c:	d022      	beq.n	8014ed4 <__cvt+0xac>
 8014e8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014e92:	eb07 0906 	add.w	r9, r7, r6
 8014e96:	d110      	bne.n	8014eba <__cvt+0x92>
 8014e98:	783b      	ldrb	r3, [r7, #0]
 8014e9a:	2b30      	cmp	r3, #48	; 0x30
 8014e9c:	d10a      	bne.n	8014eb4 <__cvt+0x8c>
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	4620      	mov	r0, r4
 8014ea4:	4629      	mov	r1, r5
 8014ea6:	f7f3 fd47 	bl	8008938 <__aeabi_dcmpeq>
 8014eaa:	b918      	cbnz	r0, 8014eb4 <__cvt+0x8c>
 8014eac:	f1c6 0601 	rsb	r6, r6, #1
 8014eb0:	f8ca 6000 	str.w	r6, [sl]
 8014eb4:	f8da 3000 	ldr.w	r3, [sl]
 8014eb8:	4499      	add	r9, r3
 8014eba:	2200      	movs	r2, #0
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	4629      	mov	r1, r5
 8014ec2:	f7f3 fd39 	bl	8008938 <__aeabi_dcmpeq>
 8014ec6:	b108      	cbz	r0, 8014ecc <__cvt+0xa4>
 8014ec8:	f8cd 900c 	str.w	r9, [sp, #12]
 8014ecc:	2230      	movs	r2, #48	; 0x30
 8014ece:	9b03      	ldr	r3, [sp, #12]
 8014ed0:	454b      	cmp	r3, r9
 8014ed2:	d307      	bcc.n	8014ee4 <__cvt+0xbc>
 8014ed4:	9b03      	ldr	r3, [sp, #12]
 8014ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ed8:	1bdb      	subs	r3, r3, r7
 8014eda:	4638      	mov	r0, r7
 8014edc:	6013      	str	r3, [r2, #0]
 8014ede:	b004      	add	sp, #16
 8014ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ee4:	1c59      	adds	r1, r3, #1
 8014ee6:	9103      	str	r1, [sp, #12]
 8014ee8:	701a      	strb	r2, [r3, #0]
 8014eea:	e7f0      	b.n	8014ece <__cvt+0xa6>

08014eec <__exponent>:
 8014eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2900      	cmp	r1, #0
 8014ef2:	bfb8      	it	lt
 8014ef4:	4249      	neglt	r1, r1
 8014ef6:	f803 2b02 	strb.w	r2, [r3], #2
 8014efa:	bfb4      	ite	lt
 8014efc:	222d      	movlt	r2, #45	; 0x2d
 8014efe:	222b      	movge	r2, #43	; 0x2b
 8014f00:	2909      	cmp	r1, #9
 8014f02:	7042      	strb	r2, [r0, #1]
 8014f04:	dd2a      	ble.n	8014f5c <__exponent+0x70>
 8014f06:	f10d 0407 	add.w	r4, sp, #7
 8014f0a:	46a4      	mov	ip, r4
 8014f0c:	270a      	movs	r7, #10
 8014f0e:	46a6      	mov	lr, r4
 8014f10:	460a      	mov	r2, r1
 8014f12:	fb91 f6f7 	sdiv	r6, r1, r7
 8014f16:	fb07 1516 	mls	r5, r7, r6, r1
 8014f1a:	3530      	adds	r5, #48	; 0x30
 8014f1c:	2a63      	cmp	r2, #99	; 0x63
 8014f1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014f22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014f26:	4631      	mov	r1, r6
 8014f28:	dcf1      	bgt.n	8014f0e <__exponent+0x22>
 8014f2a:	3130      	adds	r1, #48	; 0x30
 8014f2c:	f1ae 0502 	sub.w	r5, lr, #2
 8014f30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014f34:	1c44      	adds	r4, r0, #1
 8014f36:	4629      	mov	r1, r5
 8014f38:	4561      	cmp	r1, ip
 8014f3a:	d30a      	bcc.n	8014f52 <__exponent+0x66>
 8014f3c:	f10d 0209 	add.w	r2, sp, #9
 8014f40:	eba2 020e 	sub.w	r2, r2, lr
 8014f44:	4565      	cmp	r5, ip
 8014f46:	bf88      	it	hi
 8014f48:	2200      	movhi	r2, #0
 8014f4a:	4413      	add	r3, r2
 8014f4c:	1a18      	subs	r0, r3, r0
 8014f4e:	b003      	add	sp, #12
 8014f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014f5a:	e7ed      	b.n	8014f38 <__exponent+0x4c>
 8014f5c:	2330      	movs	r3, #48	; 0x30
 8014f5e:	3130      	adds	r1, #48	; 0x30
 8014f60:	7083      	strb	r3, [r0, #2]
 8014f62:	70c1      	strb	r1, [r0, #3]
 8014f64:	1d03      	adds	r3, r0, #4
 8014f66:	e7f1      	b.n	8014f4c <__exponent+0x60>

08014f68 <_printf_float>:
 8014f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f6c:	ed2d 8b02 	vpush	{d8}
 8014f70:	b08d      	sub	sp, #52	; 0x34
 8014f72:	460c      	mov	r4, r1
 8014f74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014f78:	4616      	mov	r6, r2
 8014f7a:	461f      	mov	r7, r3
 8014f7c:	4605      	mov	r5, r0
 8014f7e:	f003 faa3 	bl	80184c8 <_localeconv_r>
 8014f82:	f8d0 a000 	ldr.w	sl, [r0]
 8014f86:	4650      	mov	r0, sl
 8014f88:	f7f3 f85a 	bl	8008040 <strlen>
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f90:	6823      	ldr	r3, [r4, #0]
 8014f92:	9305      	str	r3, [sp, #20]
 8014f94:	f8d8 3000 	ldr.w	r3, [r8]
 8014f98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014f9c:	3307      	adds	r3, #7
 8014f9e:	f023 0307 	bic.w	r3, r3, #7
 8014fa2:	f103 0208 	add.w	r2, r3, #8
 8014fa6:	f8c8 2000 	str.w	r2, [r8]
 8014faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014fb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014fb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014fba:	9307      	str	r3, [sp, #28]
 8014fbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8014fc0:	ee08 0a10 	vmov	s16, r0
 8014fc4:	4b9f      	ldr	r3, [pc, #636]	; (8015244 <_printf_float+0x2dc>)
 8014fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014fca:	f04f 32ff 	mov.w	r2, #4294967295
 8014fce:	f7f3 fce5 	bl	800899c <__aeabi_dcmpun>
 8014fd2:	bb88      	cbnz	r0, 8015038 <_printf_float+0xd0>
 8014fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014fd8:	4b9a      	ldr	r3, [pc, #616]	; (8015244 <_printf_float+0x2dc>)
 8014fda:	f04f 32ff 	mov.w	r2, #4294967295
 8014fde:	f7f3 fcbf 	bl	8008960 <__aeabi_dcmple>
 8014fe2:	bb48      	cbnz	r0, 8015038 <_printf_float+0xd0>
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	4640      	mov	r0, r8
 8014fea:	4649      	mov	r1, r9
 8014fec:	f7f3 fcae 	bl	800894c <__aeabi_dcmplt>
 8014ff0:	b110      	cbz	r0, 8014ff8 <_printf_float+0x90>
 8014ff2:	232d      	movs	r3, #45	; 0x2d
 8014ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ff8:	4b93      	ldr	r3, [pc, #588]	; (8015248 <_printf_float+0x2e0>)
 8014ffa:	4894      	ldr	r0, [pc, #592]	; (801524c <_printf_float+0x2e4>)
 8014ffc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015000:	bf94      	ite	ls
 8015002:	4698      	movls	r8, r3
 8015004:	4680      	movhi	r8, r0
 8015006:	2303      	movs	r3, #3
 8015008:	6123      	str	r3, [r4, #16]
 801500a:	9b05      	ldr	r3, [sp, #20]
 801500c:	f023 0204 	bic.w	r2, r3, #4
 8015010:	6022      	str	r2, [r4, #0]
 8015012:	f04f 0900 	mov.w	r9, #0
 8015016:	9700      	str	r7, [sp, #0]
 8015018:	4633      	mov	r3, r6
 801501a:	aa0b      	add	r2, sp, #44	; 0x2c
 801501c:	4621      	mov	r1, r4
 801501e:	4628      	mov	r0, r5
 8015020:	f000 f9d8 	bl	80153d4 <_printf_common>
 8015024:	3001      	adds	r0, #1
 8015026:	f040 8090 	bne.w	801514a <_printf_float+0x1e2>
 801502a:	f04f 30ff 	mov.w	r0, #4294967295
 801502e:	b00d      	add	sp, #52	; 0x34
 8015030:	ecbd 8b02 	vpop	{d8}
 8015034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015038:	4642      	mov	r2, r8
 801503a:	464b      	mov	r3, r9
 801503c:	4640      	mov	r0, r8
 801503e:	4649      	mov	r1, r9
 8015040:	f7f3 fcac 	bl	800899c <__aeabi_dcmpun>
 8015044:	b140      	cbz	r0, 8015058 <_printf_float+0xf0>
 8015046:	464b      	mov	r3, r9
 8015048:	2b00      	cmp	r3, #0
 801504a:	bfbc      	itt	lt
 801504c:	232d      	movlt	r3, #45	; 0x2d
 801504e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015052:	487f      	ldr	r0, [pc, #508]	; (8015250 <_printf_float+0x2e8>)
 8015054:	4b7f      	ldr	r3, [pc, #508]	; (8015254 <_printf_float+0x2ec>)
 8015056:	e7d1      	b.n	8014ffc <_printf_float+0x94>
 8015058:	6863      	ldr	r3, [r4, #4]
 801505a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801505e:	9206      	str	r2, [sp, #24]
 8015060:	1c5a      	adds	r2, r3, #1
 8015062:	d13f      	bne.n	80150e4 <_printf_float+0x17c>
 8015064:	2306      	movs	r3, #6
 8015066:	6063      	str	r3, [r4, #4]
 8015068:	9b05      	ldr	r3, [sp, #20]
 801506a:	6861      	ldr	r1, [r4, #4]
 801506c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015070:	2300      	movs	r3, #0
 8015072:	9303      	str	r3, [sp, #12]
 8015074:	ab0a      	add	r3, sp, #40	; 0x28
 8015076:	e9cd b301 	strd	fp, r3, [sp, #4]
 801507a:	ab09      	add	r3, sp, #36	; 0x24
 801507c:	ec49 8b10 	vmov	d0, r8, r9
 8015080:	9300      	str	r3, [sp, #0]
 8015082:	6022      	str	r2, [r4, #0]
 8015084:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015088:	4628      	mov	r0, r5
 801508a:	f7ff fecd 	bl	8014e28 <__cvt>
 801508e:	9b06      	ldr	r3, [sp, #24]
 8015090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015092:	2b47      	cmp	r3, #71	; 0x47
 8015094:	4680      	mov	r8, r0
 8015096:	d108      	bne.n	80150aa <_printf_float+0x142>
 8015098:	1cc8      	adds	r0, r1, #3
 801509a:	db02      	blt.n	80150a2 <_printf_float+0x13a>
 801509c:	6863      	ldr	r3, [r4, #4]
 801509e:	4299      	cmp	r1, r3
 80150a0:	dd41      	ble.n	8015126 <_printf_float+0x1be>
 80150a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80150a6:	fa5f fb8b 	uxtb.w	fp, fp
 80150aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80150ae:	d820      	bhi.n	80150f2 <_printf_float+0x18a>
 80150b0:	3901      	subs	r1, #1
 80150b2:	465a      	mov	r2, fp
 80150b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80150b8:	9109      	str	r1, [sp, #36]	; 0x24
 80150ba:	f7ff ff17 	bl	8014eec <__exponent>
 80150be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150c0:	1813      	adds	r3, r2, r0
 80150c2:	2a01      	cmp	r2, #1
 80150c4:	4681      	mov	r9, r0
 80150c6:	6123      	str	r3, [r4, #16]
 80150c8:	dc02      	bgt.n	80150d0 <_printf_float+0x168>
 80150ca:	6822      	ldr	r2, [r4, #0]
 80150cc:	07d2      	lsls	r2, r2, #31
 80150ce:	d501      	bpl.n	80150d4 <_printf_float+0x16c>
 80150d0:	3301      	adds	r3, #1
 80150d2:	6123      	str	r3, [r4, #16]
 80150d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d09c      	beq.n	8015016 <_printf_float+0xae>
 80150dc:	232d      	movs	r3, #45	; 0x2d
 80150de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150e2:	e798      	b.n	8015016 <_printf_float+0xae>
 80150e4:	9a06      	ldr	r2, [sp, #24]
 80150e6:	2a47      	cmp	r2, #71	; 0x47
 80150e8:	d1be      	bne.n	8015068 <_printf_float+0x100>
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d1bc      	bne.n	8015068 <_printf_float+0x100>
 80150ee:	2301      	movs	r3, #1
 80150f0:	e7b9      	b.n	8015066 <_printf_float+0xfe>
 80150f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80150f6:	d118      	bne.n	801512a <_printf_float+0x1c2>
 80150f8:	2900      	cmp	r1, #0
 80150fa:	6863      	ldr	r3, [r4, #4]
 80150fc:	dd0b      	ble.n	8015116 <_printf_float+0x1ae>
 80150fe:	6121      	str	r1, [r4, #16]
 8015100:	b913      	cbnz	r3, 8015108 <_printf_float+0x1a0>
 8015102:	6822      	ldr	r2, [r4, #0]
 8015104:	07d0      	lsls	r0, r2, #31
 8015106:	d502      	bpl.n	801510e <_printf_float+0x1a6>
 8015108:	3301      	adds	r3, #1
 801510a:	440b      	add	r3, r1
 801510c:	6123      	str	r3, [r4, #16]
 801510e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015110:	f04f 0900 	mov.w	r9, #0
 8015114:	e7de      	b.n	80150d4 <_printf_float+0x16c>
 8015116:	b913      	cbnz	r3, 801511e <_printf_float+0x1b6>
 8015118:	6822      	ldr	r2, [r4, #0]
 801511a:	07d2      	lsls	r2, r2, #31
 801511c:	d501      	bpl.n	8015122 <_printf_float+0x1ba>
 801511e:	3302      	adds	r3, #2
 8015120:	e7f4      	b.n	801510c <_printf_float+0x1a4>
 8015122:	2301      	movs	r3, #1
 8015124:	e7f2      	b.n	801510c <_printf_float+0x1a4>
 8015126:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801512a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801512c:	4299      	cmp	r1, r3
 801512e:	db05      	blt.n	801513c <_printf_float+0x1d4>
 8015130:	6823      	ldr	r3, [r4, #0]
 8015132:	6121      	str	r1, [r4, #16]
 8015134:	07d8      	lsls	r0, r3, #31
 8015136:	d5ea      	bpl.n	801510e <_printf_float+0x1a6>
 8015138:	1c4b      	adds	r3, r1, #1
 801513a:	e7e7      	b.n	801510c <_printf_float+0x1a4>
 801513c:	2900      	cmp	r1, #0
 801513e:	bfd4      	ite	le
 8015140:	f1c1 0202 	rsble	r2, r1, #2
 8015144:	2201      	movgt	r2, #1
 8015146:	4413      	add	r3, r2
 8015148:	e7e0      	b.n	801510c <_printf_float+0x1a4>
 801514a:	6823      	ldr	r3, [r4, #0]
 801514c:	055a      	lsls	r2, r3, #21
 801514e:	d407      	bmi.n	8015160 <_printf_float+0x1f8>
 8015150:	6923      	ldr	r3, [r4, #16]
 8015152:	4642      	mov	r2, r8
 8015154:	4631      	mov	r1, r6
 8015156:	4628      	mov	r0, r5
 8015158:	47b8      	blx	r7
 801515a:	3001      	adds	r0, #1
 801515c:	d12c      	bne.n	80151b8 <_printf_float+0x250>
 801515e:	e764      	b.n	801502a <_printf_float+0xc2>
 8015160:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015164:	f240 80e0 	bls.w	8015328 <_printf_float+0x3c0>
 8015168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801516c:	2200      	movs	r2, #0
 801516e:	2300      	movs	r3, #0
 8015170:	f7f3 fbe2 	bl	8008938 <__aeabi_dcmpeq>
 8015174:	2800      	cmp	r0, #0
 8015176:	d034      	beq.n	80151e2 <_printf_float+0x27a>
 8015178:	4a37      	ldr	r2, [pc, #220]	; (8015258 <_printf_float+0x2f0>)
 801517a:	2301      	movs	r3, #1
 801517c:	4631      	mov	r1, r6
 801517e:	4628      	mov	r0, r5
 8015180:	47b8      	blx	r7
 8015182:	3001      	adds	r0, #1
 8015184:	f43f af51 	beq.w	801502a <_printf_float+0xc2>
 8015188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801518c:	429a      	cmp	r2, r3
 801518e:	db02      	blt.n	8015196 <_printf_float+0x22e>
 8015190:	6823      	ldr	r3, [r4, #0]
 8015192:	07d8      	lsls	r0, r3, #31
 8015194:	d510      	bpl.n	80151b8 <_printf_float+0x250>
 8015196:	ee18 3a10 	vmov	r3, s16
 801519a:	4652      	mov	r2, sl
 801519c:	4631      	mov	r1, r6
 801519e:	4628      	mov	r0, r5
 80151a0:	47b8      	blx	r7
 80151a2:	3001      	adds	r0, #1
 80151a4:	f43f af41 	beq.w	801502a <_printf_float+0xc2>
 80151a8:	f04f 0800 	mov.w	r8, #0
 80151ac:	f104 091a 	add.w	r9, r4, #26
 80151b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151b2:	3b01      	subs	r3, #1
 80151b4:	4543      	cmp	r3, r8
 80151b6:	dc09      	bgt.n	80151cc <_printf_float+0x264>
 80151b8:	6823      	ldr	r3, [r4, #0]
 80151ba:	079b      	lsls	r3, r3, #30
 80151bc:	f100 8105 	bmi.w	80153ca <_printf_float+0x462>
 80151c0:	68e0      	ldr	r0, [r4, #12]
 80151c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151c4:	4298      	cmp	r0, r3
 80151c6:	bfb8      	it	lt
 80151c8:	4618      	movlt	r0, r3
 80151ca:	e730      	b.n	801502e <_printf_float+0xc6>
 80151cc:	2301      	movs	r3, #1
 80151ce:	464a      	mov	r2, r9
 80151d0:	4631      	mov	r1, r6
 80151d2:	4628      	mov	r0, r5
 80151d4:	47b8      	blx	r7
 80151d6:	3001      	adds	r0, #1
 80151d8:	f43f af27 	beq.w	801502a <_printf_float+0xc2>
 80151dc:	f108 0801 	add.w	r8, r8, #1
 80151e0:	e7e6      	b.n	80151b0 <_printf_float+0x248>
 80151e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	dc39      	bgt.n	801525c <_printf_float+0x2f4>
 80151e8:	4a1b      	ldr	r2, [pc, #108]	; (8015258 <_printf_float+0x2f0>)
 80151ea:	2301      	movs	r3, #1
 80151ec:	4631      	mov	r1, r6
 80151ee:	4628      	mov	r0, r5
 80151f0:	47b8      	blx	r7
 80151f2:	3001      	adds	r0, #1
 80151f4:	f43f af19 	beq.w	801502a <_printf_float+0xc2>
 80151f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80151fc:	4313      	orrs	r3, r2
 80151fe:	d102      	bne.n	8015206 <_printf_float+0x29e>
 8015200:	6823      	ldr	r3, [r4, #0]
 8015202:	07d9      	lsls	r1, r3, #31
 8015204:	d5d8      	bpl.n	80151b8 <_printf_float+0x250>
 8015206:	ee18 3a10 	vmov	r3, s16
 801520a:	4652      	mov	r2, sl
 801520c:	4631      	mov	r1, r6
 801520e:	4628      	mov	r0, r5
 8015210:	47b8      	blx	r7
 8015212:	3001      	adds	r0, #1
 8015214:	f43f af09 	beq.w	801502a <_printf_float+0xc2>
 8015218:	f04f 0900 	mov.w	r9, #0
 801521c:	f104 0a1a 	add.w	sl, r4, #26
 8015220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015222:	425b      	negs	r3, r3
 8015224:	454b      	cmp	r3, r9
 8015226:	dc01      	bgt.n	801522c <_printf_float+0x2c4>
 8015228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801522a:	e792      	b.n	8015152 <_printf_float+0x1ea>
 801522c:	2301      	movs	r3, #1
 801522e:	4652      	mov	r2, sl
 8015230:	4631      	mov	r1, r6
 8015232:	4628      	mov	r0, r5
 8015234:	47b8      	blx	r7
 8015236:	3001      	adds	r0, #1
 8015238:	f43f aef7 	beq.w	801502a <_printf_float+0xc2>
 801523c:	f109 0901 	add.w	r9, r9, #1
 8015240:	e7ee      	b.n	8015220 <_printf_float+0x2b8>
 8015242:	bf00      	nop
 8015244:	7fefffff 	.word	0x7fefffff
 8015248:	0801a770 	.word	0x0801a770
 801524c:	0801a774 	.word	0x0801a774
 8015250:	0801a77c 	.word	0x0801a77c
 8015254:	0801a778 	.word	0x0801a778
 8015258:	0801abd9 	.word	0x0801abd9
 801525c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801525e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015260:	429a      	cmp	r2, r3
 8015262:	bfa8      	it	ge
 8015264:	461a      	movge	r2, r3
 8015266:	2a00      	cmp	r2, #0
 8015268:	4691      	mov	r9, r2
 801526a:	dc37      	bgt.n	80152dc <_printf_float+0x374>
 801526c:	f04f 0b00 	mov.w	fp, #0
 8015270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015274:	f104 021a 	add.w	r2, r4, #26
 8015278:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801527a:	9305      	str	r3, [sp, #20]
 801527c:	eba3 0309 	sub.w	r3, r3, r9
 8015280:	455b      	cmp	r3, fp
 8015282:	dc33      	bgt.n	80152ec <_printf_float+0x384>
 8015284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015288:	429a      	cmp	r2, r3
 801528a:	db3b      	blt.n	8015304 <_printf_float+0x39c>
 801528c:	6823      	ldr	r3, [r4, #0]
 801528e:	07da      	lsls	r2, r3, #31
 8015290:	d438      	bmi.n	8015304 <_printf_float+0x39c>
 8015292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015294:	9a05      	ldr	r2, [sp, #20]
 8015296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015298:	1a9a      	subs	r2, r3, r2
 801529a:	eba3 0901 	sub.w	r9, r3, r1
 801529e:	4591      	cmp	r9, r2
 80152a0:	bfa8      	it	ge
 80152a2:	4691      	movge	r9, r2
 80152a4:	f1b9 0f00 	cmp.w	r9, #0
 80152a8:	dc35      	bgt.n	8015316 <_printf_float+0x3ae>
 80152aa:	f04f 0800 	mov.w	r8, #0
 80152ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80152b2:	f104 0a1a 	add.w	sl, r4, #26
 80152b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80152ba:	1a9b      	subs	r3, r3, r2
 80152bc:	eba3 0309 	sub.w	r3, r3, r9
 80152c0:	4543      	cmp	r3, r8
 80152c2:	f77f af79 	ble.w	80151b8 <_printf_float+0x250>
 80152c6:	2301      	movs	r3, #1
 80152c8:	4652      	mov	r2, sl
 80152ca:	4631      	mov	r1, r6
 80152cc:	4628      	mov	r0, r5
 80152ce:	47b8      	blx	r7
 80152d0:	3001      	adds	r0, #1
 80152d2:	f43f aeaa 	beq.w	801502a <_printf_float+0xc2>
 80152d6:	f108 0801 	add.w	r8, r8, #1
 80152da:	e7ec      	b.n	80152b6 <_printf_float+0x34e>
 80152dc:	4613      	mov	r3, r2
 80152de:	4631      	mov	r1, r6
 80152e0:	4642      	mov	r2, r8
 80152e2:	4628      	mov	r0, r5
 80152e4:	47b8      	blx	r7
 80152e6:	3001      	adds	r0, #1
 80152e8:	d1c0      	bne.n	801526c <_printf_float+0x304>
 80152ea:	e69e      	b.n	801502a <_printf_float+0xc2>
 80152ec:	2301      	movs	r3, #1
 80152ee:	4631      	mov	r1, r6
 80152f0:	4628      	mov	r0, r5
 80152f2:	9205      	str	r2, [sp, #20]
 80152f4:	47b8      	blx	r7
 80152f6:	3001      	adds	r0, #1
 80152f8:	f43f ae97 	beq.w	801502a <_printf_float+0xc2>
 80152fc:	9a05      	ldr	r2, [sp, #20]
 80152fe:	f10b 0b01 	add.w	fp, fp, #1
 8015302:	e7b9      	b.n	8015278 <_printf_float+0x310>
 8015304:	ee18 3a10 	vmov	r3, s16
 8015308:	4652      	mov	r2, sl
 801530a:	4631      	mov	r1, r6
 801530c:	4628      	mov	r0, r5
 801530e:	47b8      	blx	r7
 8015310:	3001      	adds	r0, #1
 8015312:	d1be      	bne.n	8015292 <_printf_float+0x32a>
 8015314:	e689      	b.n	801502a <_printf_float+0xc2>
 8015316:	9a05      	ldr	r2, [sp, #20]
 8015318:	464b      	mov	r3, r9
 801531a:	4442      	add	r2, r8
 801531c:	4631      	mov	r1, r6
 801531e:	4628      	mov	r0, r5
 8015320:	47b8      	blx	r7
 8015322:	3001      	adds	r0, #1
 8015324:	d1c1      	bne.n	80152aa <_printf_float+0x342>
 8015326:	e680      	b.n	801502a <_printf_float+0xc2>
 8015328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801532a:	2a01      	cmp	r2, #1
 801532c:	dc01      	bgt.n	8015332 <_printf_float+0x3ca>
 801532e:	07db      	lsls	r3, r3, #31
 8015330:	d538      	bpl.n	80153a4 <_printf_float+0x43c>
 8015332:	2301      	movs	r3, #1
 8015334:	4642      	mov	r2, r8
 8015336:	4631      	mov	r1, r6
 8015338:	4628      	mov	r0, r5
 801533a:	47b8      	blx	r7
 801533c:	3001      	adds	r0, #1
 801533e:	f43f ae74 	beq.w	801502a <_printf_float+0xc2>
 8015342:	ee18 3a10 	vmov	r3, s16
 8015346:	4652      	mov	r2, sl
 8015348:	4631      	mov	r1, r6
 801534a:	4628      	mov	r0, r5
 801534c:	47b8      	blx	r7
 801534e:	3001      	adds	r0, #1
 8015350:	f43f ae6b 	beq.w	801502a <_printf_float+0xc2>
 8015354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015358:	2200      	movs	r2, #0
 801535a:	2300      	movs	r3, #0
 801535c:	f7f3 faec 	bl	8008938 <__aeabi_dcmpeq>
 8015360:	b9d8      	cbnz	r0, 801539a <_printf_float+0x432>
 8015362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015364:	f108 0201 	add.w	r2, r8, #1
 8015368:	3b01      	subs	r3, #1
 801536a:	4631      	mov	r1, r6
 801536c:	4628      	mov	r0, r5
 801536e:	47b8      	blx	r7
 8015370:	3001      	adds	r0, #1
 8015372:	d10e      	bne.n	8015392 <_printf_float+0x42a>
 8015374:	e659      	b.n	801502a <_printf_float+0xc2>
 8015376:	2301      	movs	r3, #1
 8015378:	4652      	mov	r2, sl
 801537a:	4631      	mov	r1, r6
 801537c:	4628      	mov	r0, r5
 801537e:	47b8      	blx	r7
 8015380:	3001      	adds	r0, #1
 8015382:	f43f ae52 	beq.w	801502a <_printf_float+0xc2>
 8015386:	f108 0801 	add.w	r8, r8, #1
 801538a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801538c:	3b01      	subs	r3, #1
 801538e:	4543      	cmp	r3, r8
 8015390:	dcf1      	bgt.n	8015376 <_printf_float+0x40e>
 8015392:	464b      	mov	r3, r9
 8015394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015398:	e6dc      	b.n	8015154 <_printf_float+0x1ec>
 801539a:	f04f 0800 	mov.w	r8, #0
 801539e:	f104 0a1a 	add.w	sl, r4, #26
 80153a2:	e7f2      	b.n	801538a <_printf_float+0x422>
 80153a4:	2301      	movs	r3, #1
 80153a6:	4642      	mov	r2, r8
 80153a8:	e7df      	b.n	801536a <_printf_float+0x402>
 80153aa:	2301      	movs	r3, #1
 80153ac:	464a      	mov	r2, r9
 80153ae:	4631      	mov	r1, r6
 80153b0:	4628      	mov	r0, r5
 80153b2:	47b8      	blx	r7
 80153b4:	3001      	adds	r0, #1
 80153b6:	f43f ae38 	beq.w	801502a <_printf_float+0xc2>
 80153ba:	f108 0801 	add.w	r8, r8, #1
 80153be:	68e3      	ldr	r3, [r4, #12]
 80153c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153c2:	1a5b      	subs	r3, r3, r1
 80153c4:	4543      	cmp	r3, r8
 80153c6:	dcf0      	bgt.n	80153aa <_printf_float+0x442>
 80153c8:	e6fa      	b.n	80151c0 <_printf_float+0x258>
 80153ca:	f04f 0800 	mov.w	r8, #0
 80153ce:	f104 0919 	add.w	r9, r4, #25
 80153d2:	e7f4      	b.n	80153be <_printf_float+0x456>

080153d4 <_printf_common>:
 80153d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153d8:	4616      	mov	r6, r2
 80153da:	4699      	mov	r9, r3
 80153dc:	688a      	ldr	r2, [r1, #8]
 80153de:	690b      	ldr	r3, [r1, #16]
 80153e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80153e4:	4293      	cmp	r3, r2
 80153e6:	bfb8      	it	lt
 80153e8:	4613      	movlt	r3, r2
 80153ea:	6033      	str	r3, [r6, #0]
 80153ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80153f0:	4607      	mov	r7, r0
 80153f2:	460c      	mov	r4, r1
 80153f4:	b10a      	cbz	r2, 80153fa <_printf_common+0x26>
 80153f6:	3301      	adds	r3, #1
 80153f8:	6033      	str	r3, [r6, #0]
 80153fa:	6823      	ldr	r3, [r4, #0]
 80153fc:	0699      	lsls	r1, r3, #26
 80153fe:	bf42      	ittt	mi
 8015400:	6833      	ldrmi	r3, [r6, #0]
 8015402:	3302      	addmi	r3, #2
 8015404:	6033      	strmi	r3, [r6, #0]
 8015406:	6825      	ldr	r5, [r4, #0]
 8015408:	f015 0506 	ands.w	r5, r5, #6
 801540c:	d106      	bne.n	801541c <_printf_common+0x48>
 801540e:	f104 0a19 	add.w	sl, r4, #25
 8015412:	68e3      	ldr	r3, [r4, #12]
 8015414:	6832      	ldr	r2, [r6, #0]
 8015416:	1a9b      	subs	r3, r3, r2
 8015418:	42ab      	cmp	r3, r5
 801541a:	dc26      	bgt.n	801546a <_printf_common+0x96>
 801541c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015420:	1e13      	subs	r3, r2, #0
 8015422:	6822      	ldr	r2, [r4, #0]
 8015424:	bf18      	it	ne
 8015426:	2301      	movne	r3, #1
 8015428:	0692      	lsls	r2, r2, #26
 801542a:	d42b      	bmi.n	8015484 <_printf_common+0xb0>
 801542c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015430:	4649      	mov	r1, r9
 8015432:	4638      	mov	r0, r7
 8015434:	47c0      	blx	r8
 8015436:	3001      	adds	r0, #1
 8015438:	d01e      	beq.n	8015478 <_printf_common+0xa4>
 801543a:	6823      	ldr	r3, [r4, #0]
 801543c:	68e5      	ldr	r5, [r4, #12]
 801543e:	6832      	ldr	r2, [r6, #0]
 8015440:	f003 0306 	and.w	r3, r3, #6
 8015444:	2b04      	cmp	r3, #4
 8015446:	bf08      	it	eq
 8015448:	1aad      	subeq	r5, r5, r2
 801544a:	68a3      	ldr	r3, [r4, #8]
 801544c:	6922      	ldr	r2, [r4, #16]
 801544e:	bf0c      	ite	eq
 8015450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015454:	2500      	movne	r5, #0
 8015456:	4293      	cmp	r3, r2
 8015458:	bfc4      	itt	gt
 801545a:	1a9b      	subgt	r3, r3, r2
 801545c:	18ed      	addgt	r5, r5, r3
 801545e:	2600      	movs	r6, #0
 8015460:	341a      	adds	r4, #26
 8015462:	42b5      	cmp	r5, r6
 8015464:	d11a      	bne.n	801549c <_printf_common+0xc8>
 8015466:	2000      	movs	r0, #0
 8015468:	e008      	b.n	801547c <_printf_common+0xa8>
 801546a:	2301      	movs	r3, #1
 801546c:	4652      	mov	r2, sl
 801546e:	4649      	mov	r1, r9
 8015470:	4638      	mov	r0, r7
 8015472:	47c0      	blx	r8
 8015474:	3001      	adds	r0, #1
 8015476:	d103      	bne.n	8015480 <_printf_common+0xac>
 8015478:	f04f 30ff 	mov.w	r0, #4294967295
 801547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015480:	3501      	adds	r5, #1
 8015482:	e7c6      	b.n	8015412 <_printf_common+0x3e>
 8015484:	18e1      	adds	r1, r4, r3
 8015486:	1c5a      	adds	r2, r3, #1
 8015488:	2030      	movs	r0, #48	; 0x30
 801548a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801548e:	4422      	add	r2, r4
 8015490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015498:	3302      	adds	r3, #2
 801549a:	e7c7      	b.n	801542c <_printf_common+0x58>
 801549c:	2301      	movs	r3, #1
 801549e:	4622      	mov	r2, r4
 80154a0:	4649      	mov	r1, r9
 80154a2:	4638      	mov	r0, r7
 80154a4:	47c0      	blx	r8
 80154a6:	3001      	adds	r0, #1
 80154a8:	d0e6      	beq.n	8015478 <_printf_common+0xa4>
 80154aa:	3601      	adds	r6, #1
 80154ac:	e7d9      	b.n	8015462 <_printf_common+0x8e>
	...

080154b0 <_printf_i>:
 80154b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80154b4:	7e0f      	ldrb	r7, [r1, #24]
 80154b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80154b8:	2f78      	cmp	r7, #120	; 0x78
 80154ba:	4691      	mov	r9, r2
 80154bc:	4680      	mov	r8, r0
 80154be:	460c      	mov	r4, r1
 80154c0:	469a      	mov	sl, r3
 80154c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80154c6:	d807      	bhi.n	80154d8 <_printf_i+0x28>
 80154c8:	2f62      	cmp	r7, #98	; 0x62
 80154ca:	d80a      	bhi.n	80154e2 <_printf_i+0x32>
 80154cc:	2f00      	cmp	r7, #0
 80154ce:	f000 80d8 	beq.w	8015682 <_printf_i+0x1d2>
 80154d2:	2f58      	cmp	r7, #88	; 0x58
 80154d4:	f000 80a3 	beq.w	801561e <_printf_i+0x16e>
 80154d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80154e0:	e03a      	b.n	8015558 <_printf_i+0xa8>
 80154e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80154e6:	2b15      	cmp	r3, #21
 80154e8:	d8f6      	bhi.n	80154d8 <_printf_i+0x28>
 80154ea:	a101      	add	r1, pc, #4	; (adr r1, 80154f0 <_printf_i+0x40>)
 80154ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80154f0:	08015549 	.word	0x08015549
 80154f4:	0801555d 	.word	0x0801555d
 80154f8:	080154d9 	.word	0x080154d9
 80154fc:	080154d9 	.word	0x080154d9
 8015500:	080154d9 	.word	0x080154d9
 8015504:	080154d9 	.word	0x080154d9
 8015508:	0801555d 	.word	0x0801555d
 801550c:	080154d9 	.word	0x080154d9
 8015510:	080154d9 	.word	0x080154d9
 8015514:	080154d9 	.word	0x080154d9
 8015518:	080154d9 	.word	0x080154d9
 801551c:	08015669 	.word	0x08015669
 8015520:	0801558d 	.word	0x0801558d
 8015524:	0801564b 	.word	0x0801564b
 8015528:	080154d9 	.word	0x080154d9
 801552c:	080154d9 	.word	0x080154d9
 8015530:	0801568b 	.word	0x0801568b
 8015534:	080154d9 	.word	0x080154d9
 8015538:	0801558d 	.word	0x0801558d
 801553c:	080154d9 	.word	0x080154d9
 8015540:	080154d9 	.word	0x080154d9
 8015544:	08015653 	.word	0x08015653
 8015548:	682b      	ldr	r3, [r5, #0]
 801554a:	1d1a      	adds	r2, r3, #4
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	602a      	str	r2, [r5, #0]
 8015550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015558:	2301      	movs	r3, #1
 801555a:	e0a3      	b.n	80156a4 <_printf_i+0x1f4>
 801555c:	6820      	ldr	r0, [r4, #0]
 801555e:	6829      	ldr	r1, [r5, #0]
 8015560:	0606      	lsls	r6, r0, #24
 8015562:	f101 0304 	add.w	r3, r1, #4
 8015566:	d50a      	bpl.n	801557e <_printf_i+0xce>
 8015568:	680e      	ldr	r6, [r1, #0]
 801556a:	602b      	str	r3, [r5, #0]
 801556c:	2e00      	cmp	r6, #0
 801556e:	da03      	bge.n	8015578 <_printf_i+0xc8>
 8015570:	232d      	movs	r3, #45	; 0x2d
 8015572:	4276      	negs	r6, r6
 8015574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015578:	485e      	ldr	r0, [pc, #376]	; (80156f4 <_printf_i+0x244>)
 801557a:	230a      	movs	r3, #10
 801557c:	e019      	b.n	80155b2 <_printf_i+0x102>
 801557e:	680e      	ldr	r6, [r1, #0]
 8015580:	602b      	str	r3, [r5, #0]
 8015582:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015586:	bf18      	it	ne
 8015588:	b236      	sxthne	r6, r6
 801558a:	e7ef      	b.n	801556c <_printf_i+0xbc>
 801558c:	682b      	ldr	r3, [r5, #0]
 801558e:	6820      	ldr	r0, [r4, #0]
 8015590:	1d19      	adds	r1, r3, #4
 8015592:	6029      	str	r1, [r5, #0]
 8015594:	0601      	lsls	r1, r0, #24
 8015596:	d501      	bpl.n	801559c <_printf_i+0xec>
 8015598:	681e      	ldr	r6, [r3, #0]
 801559a:	e002      	b.n	80155a2 <_printf_i+0xf2>
 801559c:	0646      	lsls	r6, r0, #25
 801559e:	d5fb      	bpl.n	8015598 <_printf_i+0xe8>
 80155a0:	881e      	ldrh	r6, [r3, #0]
 80155a2:	4854      	ldr	r0, [pc, #336]	; (80156f4 <_printf_i+0x244>)
 80155a4:	2f6f      	cmp	r7, #111	; 0x6f
 80155a6:	bf0c      	ite	eq
 80155a8:	2308      	moveq	r3, #8
 80155aa:	230a      	movne	r3, #10
 80155ac:	2100      	movs	r1, #0
 80155ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80155b2:	6865      	ldr	r5, [r4, #4]
 80155b4:	60a5      	str	r5, [r4, #8]
 80155b6:	2d00      	cmp	r5, #0
 80155b8:	bfa2      	ittt	ge
 80155ba:	6821      	ldrge	r1, [r4, #0]
 80155bc:	f021 0104 	bicge.w	r1, r1, #4
 80155c0:	6021      	strge	r1, [r4, #0]
 80155c2:	b90e      	cbnz	r6, 80155c8 <_printf_i+0x118>
 80155c4:	2d00      	cmp	r5, #0
 80155c6:	d04d      	beq.n	8015664 <_printf_i+0x1b4>
 80155c8:	4615      	mov	r5, r2
 80155ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80155ce:	fb03 6711 	mls	r7, r3, r1, r6
 80155d2:	5dc7      	ldrb	r7, [r0, r7]
 80155d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80155d8:	4637      	mov	r7, r6
 80155da:	42bb      	cmp	r3, r7
 80155dc:	460e      	mov	r6, r1
 80155de:	d9f4      	bls.n	80155ca <_printf_i+0x11a>
 80155e0:	2b08      	cmp	r3, #8
 80155e2:	d10b      	bne.n	80155fc <_printf_i+0x14c>
 80155e4:	6823      	ldr	r3, [r4, #0]
 80155e6:	07de      	lsls	r6, r3, #31
 80155e8:	d508      	bpl.n	80155fc <_printf_i+0x14c>
 80155ea:	6923      	ldr	r3, [r4, #16]
 80155ec:	6861      	ldr	r1, [r4, #4]
 80155ee:	4299      	cmp	r1, r3
 80155f0:	bfde      	ittt	le
 80155f2:	2330      	movle	r3, #48	; 0x30
 80155f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80155f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80155fc:	1b52      	subs	r2, r2, r5
 80155fe:	6122      	str	r2, [r4, #16]
 8015600:	f8cd a000 	str.w	sl, [sp]
 8015604:	464b      	mov	r3, r9
 8015606:	aa03      	add	r2, sp, #12
 8015608:	4621      	mov	r1, r4
 801560a:	4640      	mov	r0, r8
 801560c:	f7ff fee2 	bl	80153d4 <_printf_common>
 8015610:	3001      	adds	r0, #1
 8015612:	d14c      	bne.n	80156ae <_printf_i+0x1fe>
 8015614:	f04f 30ff 	mov.w	r0, #4294967295
 8015618:	b004      	add	sp, #16
 801561a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801561e:	4835      	ldr	r0, [pc, #212]	; (80156f4 <_printf_i+0x244>)
 8015620:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015624:	6829      	ldr	r1, [r5, #0]
 8015626:	6823      	ldr	r3, [r4, #0]
 8015628:	f851 6b04 	ldr.w	r6, [r1], #4
 801562c:	6029      	str	r1, [r5, #0]
 801562e:	061d      	lsls	r5, r3, #24
 8015630:	d514      	bpl.n	801565c <_printf_i+0x1ac>
 8015632:	07df      	lsls	r7, r3, #31
 8015634:	bf44      	itt	mi
 8015636:	f043 0320 	orrmi.w	r3, r3, #32
 801563a:	6023      	strmi	r3, [r4, #0]
 801563c:	b91e      	cbnz	r6, 8015646 <_printf_i+0x196>
 801563e:	6823      	ldr	r3, [r4, #0]
 8015640:	f023 0320 	bic.w	r3, r3, #32
 8015644:	6023      	str	r3, [r4, #0]
 8015646:	2310      	movs	r3, #16
 8015648:	e7b0      	b.n	80155ac <_printf_i+0xfc>
 801564a:	6823      	ldr	r3, [r4, #0]
 801564c:	f043 0320 	orr.w	r3, r3, #32
 8015650:	6023      	str	r3, [r4, #0]
 8015652:	2378      	movs	r3, #120	; 0x78
 8015654:	4828      	ldr	r0, [pc, #160]	; (80156f8 <_printf_i+0x248>)
 8015656:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801565a:	e7e3      	b.n	8015624 <_printf_i+0x174>
 801565c:	0659      	lsls	r1, r3, #25
 801565e:	bf48      	it	mi
 8015660:	b2b6      	uxthmi	r6, r6
 8015662:	e7e6      	b.n	8015632 <_printf_i+0x182>
 8015664:	4615      	mov	r5, r2
 8015666:	e7bb      	b.n	80155e0 <_printf_i+0x130>
 8015668:	682b      	ldr	r3, [r5, #0]
 801566a:	6826      	ldr	r6, [r4, #0]
 801566c:	6961      	ldr	r1, [r4, #20]
 801566e:	1d18      	adds	r0, r3, #4
 8015670:	6028      	str	r0, [r5, #0]
 8015672:	0635      	lsls	r5, r6, #24
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	d501      	bpl.n	801567c <_printf_i+0x1cc>
 8015678:	6019      	str	r1, [r3, #0]
 801567a:	e002      	b.n	8015682 <_printf_i+0x1d2>
 801567c:	0670      	lsls	r0, r6, #25
 801567e:	d5fb      	bpl.n	8015678 <_printf_i+0x1c8>
 8015680:	8019      	strh	r1, [r3, #0]
 8015682:	2300      	movs	r3, #0
 8015684:	6123      	str	r3, [r4, #16]
 8015686:	4615      	mov	r5, r2
 8015688:	e7ba      	b.n	8015600 <_printf_i+0x150>
 801568a:	682b      	ldr	r3, [r5, #0]
 801568c:	1d1a      	adds	r2, r3, #4
 801568e:	602a      	str	r2, [r5, #0]
 8015690:	681d      	ldr	r5, [r3, #0]
 8015692:	6862      	ldr	r2, [r4, #4]
 8015694:	2100      	movs	r1, #0
 8015696:	4628      	mov	r0, r5
 8015698:	f7f2 fcda 	bl	8008050 <memchr>
 801569c:	b108      	cbz	r0, 80156a2 <_printf_i+0x1f2>
 801569e:	1b40      	subs	r0, r0, r5
 80156a0:	6060      	str	r0, [r4, #4]
 80156a2:	6863      	ldr	r3, [r4, #4]
 80156a4:	6123      	str	r3, [r4, #16]
 80156a6:	2300      	movs	r3, #0
 80156a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156ac:	e7a8      	b.n	8015600 <_printf_i+0x150>
 80156ae:	6923      	ldr	r3, [r4, #16]
 80156b0:	462a      	mov	r2, r5
 80156b2:	4649      	mov	r1, r9
 80156b4:	4640      	mov	r0, r8
 80156b6:	47d0      	blx	sl
 80156b8:	3001      	adds	r0, #1
 80156ba:	d0ab      	beq.n	8015614 <_printf_i+0x164>
 80156bc:	6823      	ldr	r3, [r4, #0]
 80156be:	079b      	lsls	r3, r3, #30
 80156c0:	d413      	bmi.n	80156ea <_printf_i+0x23a>
 80156c2:	68e0      	ldr	r0, [r4, #12]
 80156c4:	9b03      	ldr	r3, [sp, #12]
 80156c6:	4298      	cmp	r0, r3
 80156c8:	bfb8      	it	lt
 80156ca:	4618      	movlt	r0, r3
 80156cc:	e7a4      	b.n	8015618 <_printf_i+0x168>
 80156ce:	2301      	movs	r3, #1
 80156d0:	4632      	mov	r2, r6
 80156d2:	4649      	mov	r1, r9
 80156d4:	4640      	mov	r0, r8
 80156d6:	47d0      	blx	sl
 80156d8:	3001      	adds	r0, #1
 80156da:	d09b      	beq.n	8015614 <_printf_i+0x164>
 80156dc:	3501      	adds	r5, #1
 80156de:	68e3      	ldr	r3, [r4, #12]
 80156e0:	9903      	ldr	r1, [sp, #12]
 80156e2:	1a5b      	subs	r3, r3, r1
 80156e4:	42ab      	cmp	r3, r5
 80156e6:	dcf2      	bgt.n	80156ce <_printf_i+0x21e>
 80156e8:	e7eb      	b.n	80156c2 <_printf_i+0x212>
 80156ea:	2500      	movs	r5, #0
 80156ec:	f104 0619 	add.w	r6, r4, #25
 80156f0:	e7f5      	b.n	80156de <_printf_i+0x22e>
 80156f2:	bf00      	nop
 80156f4:	0801a780 	.word	0x0801a780
 80156f8:	0801a791 	.word	0x0801a791

080156fc <_scanf_float>:
 80156fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015700:	b087      	sub	sp, #28
 8015702:	4617      	mov	r7, r2
 8015704:	9303      	str	r3, [sp, #12]
 8015706:	688b      	ldr	r3, [r1, #8]
 8015708:	1e5a      	subs	r2, r3, #1
 801570a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801570e:	bf83      	ittte	hi
 8015710:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015714:	195b      	addhi	r3, r3, r5
 8015716:	9302      	strhi	r3, [sp, #8]
 8015718:	2300      	movls	r3, #0
 801571a:	bf86      	itte	hi
 801571c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015720:	608b      	strhi	r3, [r1, #8]
 8015722:	9302      	strls	r3, [sp, #8]
 8015724:	680b      	ldr	r3, [r1, #0]
 8015726:	468b      	mov	fp, r1
 8015728:	2500      	movs	r5, #0
 801572a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801572e:	f84b 3b1c 	str.w	r3, [fp], #28
 8015732:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015736:	4680      	mov	r8, r0
 8015738:	460c      	mov	r4, r1
 801573a:	465e      	mov	r6, fp
 801573c:	46aa      	mov	sl, r5
 801573e:	46a9      	mov	r9, r5
 8015740:	9501      	str	r5, [sp, #4]
 8015742:	68a2      	ldr	r2, [r4, #8]
 8015744:	b152      	cbz	r2, 801575c <_scanf_float+0x60>
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	781b      	ldrb	r3, [r3, #0]
 801574a:	2b4e      	cmp	r3, #78	; 0x4e
 801574c:	d864      	bhi.n	8015818 <_scanf_float+0x11c>
 801574e:	2b40      	cmp	r3, #64	; 0x40
 8015750:	d83c      	bhi.n	80157cc <_scanf_float+0xd0>
 8015752:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015756:	b2c8      	uxtb	r0, r1
 8015758:	280e      	cmp	r0, #14
 801575a:	d93a      	bls.n	80157d2 <_scanf_float+0xd6>
 801575c:	f1b9 0f00 	cmp.w	r9, #0
 8015760:	d003      	beq.n	801576a <_scanf_float+0x6e>
 8015762:	6823      	ldr	r3, [r4, #0]
 8015764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015768:	6023      	str	r3, [r4, #0]
 801576a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801576e:	f1ba 0f01 	cmp.w	sl, #1
 8015772:	f200 8113 	bhi.w	801599c <_scanf_float+0x2a0>
 8015776:	455e      	cmp	r6, fp
 8015778:	f200 8105 	bhi.w	8015986 <_scanf_float+0x28a>
 801577c:	2501      	movs	r5, #1
 801577e:	4628      	mov	r0, r5
 8015780:	b007      	add	sp, #28
 8015782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015786:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801578a:	2a0d      	cmp	r2, #13
 801578c:	d8e6      	bhi.n	801575c <_scanf_float+0x60>
 801578e:	a101      	add	r1, pc, #4	; (adr r1, 8015794 <_scanf_float+0x98>)
 8015790:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015794:	080158d3 	.word	0x080158d3
 8015798:	0801575d 	.word	0x0801575d
 801579c:	0801575d 	.word	0x0801575d
 80157a0:	0801575d 	.word	0x0801575d
 80157a4:	08015933 	.word	0x08015933
 80157a8:	0801590b 	.word	0x0801590b
 80157ac:	0801575d 	.word	0x0801575d
 80157b0:	0801575d 	.word	0x0801575d
 80157b4:	080158e1 	.word	0x080158e1
 80157b8:	0801575d 	.word	0x0801575d
 80157bc:	0801575d 	.word	0x0801575d
 80157c0:	0801575d 	.word	0x0801575d
 80157c4:	0801575d 	.word	0x0801575d
 80157c8:	08015899 	.word	0x08015899
 80157cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80157d0:	e7db      	b.n	801578a <_scanf_float+0x8e>
 80157d2:	290e      	cmp	r1, #14
 80157d4:	d8c2      	bhi.n	801575c <_scanf_float+0x60>
 80157d6:	a001      	add	r0, pc, #4	; (adr r0, 80157dc <_scanf_float+0xe0>)
 80157d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80157dc:	0801588b 	.word	0x0801588b
 80157e0:	0801575d 	.word	0x0801575d
 80157e4:	0801588b 	.word	0x0801588b
 80157e8:	0801591f 	.word	0x0801591f
 80157ec:	0801575d 	.word	0x0801575d
 80157f0:	08015839 	.word	0x08015839
 80157f4:	08015875 	.word	0x08015875
 80157f8:	08015875 	.word	0x08015875
 80157fc:	08015875 	.word	0x08015875
 8015800:	08015875 	.word	0x08015875
 8015804:	08015875 	.word	0x08015875
 8015808:	08015875 	.word	0x08015875
 801580c:	08015875 	.word	0x08015875
 8015810:	08015875 	.word	0x08015875
 8015814:	08015875 	.word	0x08015875
 8015818:	2b6e      	cmp	r3, #110	; 0x6e
 801581a:	d809      	bhi.n	8015830 <_scanf_float+0x134>
 801581c:	2b60      	cmp	r3, #96	; 0x60
 801581e:	d8b2      	bhi.n	8015786 <_scanf_float+0x8a>
 8015820:	2b54      	cmp	r3, #84	; 0x54
 8015822:	d077      	beq.n	8015914 <_scanf_float+0x218>
 8015824:	2b59      	cmp	r3, #89	; 0x59
 8015826:	d199      	bne.n	801575c <_scanf_float+0x60>
 8015828:	2d07      	cmp	r5, #7
 801582a:	d197      	bne.n	801575c <_scanf_float+0x60>
 801582c:	2508      	movs	r5, #8
 801582e:	e029      	b.n	8015884 <_scanf_float+0x188>
 8015830:	2b74      	cmp	r3, #116	; 0x74
 8015832:	d06f      	beq.n	8015914 <_scanf_float+0x218>
 8015834:	2b79      	cmp	r3, #121	; 0x79
 8015836:	e7f6      	b.n	8015826 <_scanf_float+0x12a>
 8015838:	6821      	ldr	r1, [r4, #0]
 801583a:	05c8      	lsls	r0, r1, #23
 801583c:	d51a      	bpl.n	8015874 <_scanf_float+0x178>
 801583e:	9b02      	ldr	r3, [sp, #8]
 8015840:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015844:	6021      	str	r1, [r4, #0]
 8015846:	f109 0901 	add.w	r9, r9, #1
 801584a:	b11b      	cbz	r3, 8015854 <_scanf_float+0x158>
 801584c:	3b01      	subs	r3, #1
 801584e:	3201      	adds	r2, #1
 8015850:	9302      	str	r3, [sp, #8]
 8015852:	60a2      	str	r2, [r4, #8]
 8015854:	68a3      	ldr	r3, [r4, #8]
 8015856:	3b01      	subs	r3, #1
 8015858:	60a3      	str	r3, [r4, #8]
 801585a:	6923      	ldr	r3, [r4, #16]
 801585c:	3301      	adds	r3, #1
 801585e:	6123      	str	r3, [r4, #16]
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	3b01      	subs	r3, #1
 8015864:	2b00      	cmp	r3, #0
 8015866:	607b      	str	r3, [r7, #4]
 8015868:	f340 8084 	ble.w	8015974 <_scanf_float+0x278>
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	3301      	adds	r3, #1
 8015870:	603b      	str	r3, [r7, #0]
 8015872:	e766      	b.n	8015742 <_scanf_float+0x46>
 8015874:	eb1a 0f05 	cmn.w	sl, r5
 8015878:	f47f af70 	bne.w	801575c <_scanf_float+0x60>
 801587c:	6822      	ldr	r2, [r4, #0]
 801587e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015882:	6022      	str	r2, [r4, #0]
 8015884:	f806 3b01 	strb.w	r3, [r6], #1
 8015888:	e7e4      	b.n	8015854 <_scanf_float+0x158>
 801588a:	6822      	ldr	r2, [r4, #0]
 801588c:	0610      	lsls	r0, r2, #24
 801588e:	f57f af65 	bpl.w	801575c <_scanf_float+0x60>
 8015892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015896:	e7f4      	b.n	8015882 <_scanf_float+0x186>
 8015898:	f1ba 0f00 	cmp.w	sl, #0
 801589c:	d10e      	bne.n	80158bc <_scanf_float+0x1c0>
 801589e:	f1b9 0f00 	cmp.w	r9, #0
 80158a2:	d10e      	bne.n	80158c2 <_scanf_float+0x1c6>
 80158a4:	6822      	ldr	r2, [r4, #0]
 80158a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80158aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80158ae:	d108      	bne.n	80158c2 <_scanf_float+0x1c6>
 80158b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80158b4:	6022      	str	r2, [r4, #0]
 80158b6:	f04f 0a01 	mov.w	sl, #1
 80158ba:	e7e3      	b.n	8015884 <_scanf_float+0x188>
 80158bc:	f1ba 0f02 	cmp.w	sl, #2
 80158c0:	d055      	beq.n	801596e <_scanf_float+0x272>
 80158c2:	2d01      	cmp	r5, #1
 80158c4:	d002      	beq.n	80158cc <_scanf_float+0x1d0>
 80158c6:	2d04      	cmp	r5, #4
 80158c8:	f47f af48 	bne.w	801575c <_scanf_float+0x60>
 80158cc:	3501      	adds	r5, #1
 80158ce:	b2ed      	uxtb	r5, r5
 80158d0:	e7d8      	b.n	8015884 <_scanf_float+0x188>
 80158d2:	f1ba 0f01 	cmp.w	sl, #1
 80158d6:	f47f af41 	bne.w	801575c <_scanf_float+0x60>
 80158da:	f04f 0a02 	mov.w	sl, #2
 80158de:	e7d1      	b.n	8015884 <_scanf_float+0x188>
 80158e0:	b97d      	cbnz	r5, 8015902 <_scanf_float+0x206>
 80158e2:	f1b9 0f00 	cmp.w	r9, #0
 80158e6:	f47f af3c 	bne.w	8015762 <_scanf_float+0x66>
 80158ea:	6822      	ldr	r2, [r4, #0]
 80158ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80158f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80158f4:	f47f af39 	bne.w	801576a <_scanf_float+0x6e>
 80158f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80158fc:	6022      	str	r2, [r4, #0]
 80158fe:	2501      	movs	r5, #1
 8015900:	e7c0      	b.n	8015884 <_scanf_float+0x188>
 8015902:	2d03      	cmp	r5, #3
 8015904:	d0e2      	beq.n	80158cc <_scanf_float+0x1d0>
 8015906:	2d05      	cmp	r5, #5
 8015908:	e7de      	b.n	80158c8 <_scanf_float+0x1cc>
 801590a:	2d02      	cmp	r5, #2
 801590c:	f47f af26 	bne.w	801575c <_scanf_float+0x60>
 8015910:	2503      	movs	r5, #3
 8015912:	e7b7      	b.n	8015884 <_scanf_float+0x188>
 8015914:	2d06      	cmp	r5, #6
 8015916:	f47f af21 	bne.w	801575c <_scanf_float+0x60>
 801591a:	2507      	movs	r5, #7
 801591c:	e7b2      	b.n	8015884 <_scanf_float+0x188>
 801591e:	6822      	ldr	r2, [r4, #0]
 8015920:	0591      	lsls	r1, r2, #22
 8015922:	f57f af1b 	bpl.w	801575c <_scanf_float+0x60>
 8015926:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801592a:	6022      	str	r2, [r4, #0]
 801592c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015930:	e7a8      	b.n	8015884 <_scanf_float+0x188>
 8015932:	6822      	ldr	r2, [r4, #0]
 8015934:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015938:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801593c:	d006      	beq.n	801594c <_scanf_float+0x250>
 801593e:	0550      	lsls	r0, r2, #21
 8015940:	f57f af0c 	bpl.w	801575c <_scanf_float+0x60>
 8015944:	f1b9 0f00 	cmp.w	r9, #0
 8015948:	f43f af0f 	beq.w	801576a <_scanf_float+0x6e>
 801594c:	0591      	lsls	r1, r2, #22
 801594e:	bf58      	it	pl
 8015950:	9901      	ldrpl	r1, [sp, #4]
 8015952:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015956:	bf58      	it	pl
 8015958:	eba9 0101 	subpl.w	r1, r9, r1
 801595c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015960:	bf58      	it	pl
 8015962:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015966:	6022      	str	r2, [r4, #0]
 8015968:	f04f 0900 	mov.w	r9, #0
 801596c:	e78a      	b.n	8015884 <_scanf_float+0x188>
 801596e:	f04f 0a03 	mov.w	sl, #3
 8015972:	e787      	b.n	8015884 <_scanf_float+0x188>
 8015974:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015978:	4639      	mov	r1, r7
 801597a:	4640      	mov	r0, r8
 801597c:	4798      	blx	r3
 801597e:	2800      	cmp	r0, #0
 8015980:	f43f aedf 	beq.w	8015742 <_scanf_float+0x46>
 8015984:	e6ea      	b.n	801575c <_scanf_float+0x60>
 8015986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801598a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801598e:	463a      	mov	r2, r7
 8015990:	4640      	mov	r0, r8
 8015992:	4798      	blx	r3
 8015994:	6923      	ldr	r3, [r4, #16]
 8015996:	3b01      	subs	r3, #1
 8015998:	6123      	str	r3, [r4, #16]
 801599a:	e6ec      	b.n	8015776 <_scanf_float+0x7a>
 801599c:	1e6b      	subs	r3, r5, #1
 801599e:	2b06      	cmp	r3, #6
 80159a0:	d825      	bhi.n	80159ee <_scanf_float+0x2f2>
 80159a2:	2d02      	cmp	r5, #2
 80159a4:	d836      	bhi.n	8015a14 <_scanf_float+0x318>
 80159a6:	455e      	cmp	r6, fp
 80159a8:	f67f aee8 	bls.w	801577c <_scanf_float+0x80>
 80159ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80159b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80159b4:	463a      	mov	r2, r7
 80159b6:	4640      	mov	r0, r8
 80159b8:	4798      	blx	r3
 80159ba:	6923      	ldr	r3, [r4, #16]
 80159bc:	3b01      	subs	r3, #1
 80159be:	6123      	str	r3, [r4, #16]
 80159c0:	e7f1      	b.n	80159a6 <_scanf_float+0x2aa>
 80159c2:	9802      	ldr	r0, [sp, #8]
 80159c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80159c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80159cc:	9002      	str	r0, [sp, #8]
 80159ce:	463a      	mov	r2, r7
 80159d0:	4640      	mov	r0, r8
 80159d2:	4798      	blx	r3
 80159d4:	6923      	ldr	r3, [r4, #16]
 80159d6:	3b01      	subs	r3, #1
 80159d8:	6123      	str	r3, [r4, #16]
 80159da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80159de:	fa5f fa8a 	uxtb.w	sl, sl
 80159e2:	f1ba 0f02 	cmp.w	sl, #2
 80159e6:	d1ec      	bne.n	80159c2 <_scanf_float+0x2c6>
 80159e8:	3d03      	subs	r5, #3
 80159ea:	b2ed      	uxtb	r5, r5
 80159ec:	1b76      	subs	r6, r6, r5
 80159ee:	6823      	ldr	r3, [r4, #0]
 80159f0:	05da      	lsls	r2, r3, #23
 80159f2:	d52f      	bpl.n	8015a54 <_scanf_float+0x358>
 80159f4:	055b      	lsls	r3, r3, #21
 80159f6:	d510      	bpl.n	8015a1a <_scanf_float+0x31e>
 80159f8:	455e      	cmp	r6, fp
 80159fa:	f67f aebf 	bls.w	801577c <_scanf_float+0x80>
 80159fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015a06:	463a      	mov	r2, r7
 8015a08:	4640      	mov	r0, r8
 8015a0a:	4798      	blx	r3
 8015a0c:	6923      	ldr	r3, [r4, #16]
 8015a0e:	3b01      	subs	r3, #1
 8015a10:	6123      	str	r3, [r4, #16]
 8015a12:	e7f1      	b.n	80159f8 <_scanf_float+0x2fc>
 8015a14:	46aa      	mov	sl, r5
 8015a16:	9602      	str	r6, [sp, #8]
 8015a18:	e7df      	b.n	80159da <_scanf_float+0x2de>
 8015a1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015a1e:	6923      	ldr	r3, [r4, #16]
 8015a20:	2965      	cmp	r1, #101	; 0x65
 8015a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8015a26:	f106 35ff 	add.w	r5, r6, #4294967295
 8015a2a:	6123      	str	r3, [r4, #16]
 8015a2c:	d00c      	beq.n	8015a48 <_scanf_float+0x34c>
 8015a2e:	2945      	cmp	r1, #69	; 0x45
 8015a30:	d00a      	beq.n	8015a48 <_scanf_float+0x34c>
 8015a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a36:	463a      	mov	r2, r7
 8015a38:	4640      	mov	r0, r8
 8015a3a:	4798      	blx	r3
 8015a3c:	6923      	ldr	r3, [r4, #16]
 8015a3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015a42:	3b01      	subs	r3, #1
 8015a44:	1eb5      	subs	r5, r6, #2
 8015a46:	6123      	str	r3, [r4, #16]
 8015a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a4c:	463a      	mov	r2, r7
 8015a4e:	4640      	mov	r0, r8
 8015a50:	4798      	blx	r3
 8015a52:	462e      	mov	r6, r5
 8015a54:	6825      	ldr	r5, [r4, #0]
 8015a56:	f015 0510 	ands.w	r5, r5, #16
 8015a5a:	d159      	bne.n	8015b10 <_scanf_float+0x414>
 8015a5c:	7035      	strb	r5, [r6, #0]
 8015a5e:	6823      	ldr	r3, [r4, #0]
 8015a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015a68:	d11b      	bne.n	8015aa2 <_scanf_float+0x3a6>
 8015a6a:	9b01      	ldr	r3, [sp, #4]
 8015a6c:	454b      	cmp	r3, r9
 8015a6e:	eba3 0209 	sub.w	r2, r3, r9
 8015a72:	d123      	bne.n	8015abc <_scanf_float+0x3c0>
 8015a74:	2200      	movs	r2, #0
 8015a76:	4659      	mov	r1, fp
 8015a78:	4640      	mov	r0, r8
 8015a7a:	f001 f80b 	bl	8016a94 <_strtod_r>
 8015a7e:	6822      	ldr	r2, [r4, #0]
 8015a80:	9b03      	ldr	r3, [sp, #12]
 8015a82:	f012 0f02 	tst.w	r2, #2
 8015a86:	ec57 6b10 	vmov	r6, r7, d0
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	d021      	beq.n	8015ad2 <_scanf_float+0x3d6>
 8015a8e:	9903      	ldr	r1, [sp, #12]
 8015a90:	1d1a      	adds	r2, r3, #4
 8015a92:	600a      	str	r2, [r1, #0]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	e9c3 6700 	strd	r6, r7, [r3]
 8015a9a:	68e3      	ldr	r3, [r4, #12]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	60e3      	str	r3, [r4, #12]
 8015aa0:	e66d      	b.n	801577e <_scanf_float+0x82>
 8015aa2:	9b04      	ldr	r3, [sp, #16]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d0e5      	beq.n	8015a74 <_scanf_float+0x378>
 8015aa8:	9905      	ldr	r1, [sp, #20]
 8015aaa:	230a      	movs	r3, #10
 8015aac:	462a      	mov	r2, r5
 8015aae:	3101      	adds	r1, #1
 8015ab0:	4640      	mov	r0, r8
 8015ab2:	f001 f877 	bl	8016ba4 <_strtol_r>
 8015ab6:	9b04      	ldr	r3, [sp, #16]
 8015ab8:	9e05      	ldr	r6, [sp, #20]
 8015aba:	1ac2      	subs	r2, r0, r3
 8015abc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015ac0:	429e      	cmp	r6, r3
 8015ac2:	bf28      	it	cs
 8015ac4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015ac8:	4912      	ldr	r1, [pc, #72]	; (8015b14 <_scanf_float+0x418>)
 8015aca:	4630      	mov	r0, r6
 8015acc:	f000 f9a0 	bl	8015e10 <siprintf>
 8015ad0:	e7d0      	b.n	8015a74 <_scanf_float+0x378>
 8015ad2:	9903      	ldr	r1, [sp, #12]
 8015ad4:	f012 0f04 	tst.w	r2, #4
 8015ad8:	f103 0204 	add.w	r2, r3, #4
 8015adc:	600a      	str	r2, [r1, #0]
 8015ade:	d1d9      	bne.n	8015a94 <_scanf_float+0x398>
 8015ae0:	f8d3 8000 	ldr.w	r8, [r3]
 8015ae4:	ee10 2a10 	vmov	r2, s0
 8015ae8:	ee10 0a10 	vmov	r0, s0
 8015aec:	463b      	mov	r3, r7
 8015aee:	4639      	mov	r1, r7
 8015af0:	f7f2 ff54 	bl	800899c <__aeabi_dcmpun>
 8015af4:	b128      	cbz	r0, 8015b02 <_scanf_float+0x406>
 8015af6:	4808      	ldr	r0, [pc, #32]	; (8015b18 <_scanf_float+0x41c>)
 8015af8:	f000 f984 	bl	8015e04 <nanf>
 8015afc:	ed88 0a00 	vstr	s0, [r8]
 8015b00:	e7cb      	b.n	8015a9a <_scanf_float+0x39e>
 8015b02:	4630      	mov	r0, r6
 8015b04:	4639      	mov	r1, r7
 8015b06:	f7f2 ffa7 	bl	8008a58 <__aeabi_d2f>
 8015b0a:	f8c8 0000 	str.w	r0, [r8]
 8015b0e:	e7c4      	b.n	8015a9a <_scanf_float+0x39e>
 8015b10:	2500      	movs	r5, #0
 8015b12:	e634      	b.n	801577e <_scanf_float+0x82>
 8015b14:	0801a7a2 	.word	0x0801a7a2
 8015b18:	0801ac2b 	.word	0x0801ac2b

08015b1c <iprintf>:
 8015b1c:	b40f      	push	{r0, r1, r2, r3}
 8015b1e:	4b0a      	ldr	r3, [pc, #40]	; (8015b48 <iprintf+0x2c>)
 8015b20:	b513      	push	{r0, r1, r4, lr}
 8015b22:	681c      	ldr	r4, [r3, #0]
 8015b24:	b124      	cbz	r4, 8015b30 <iprintf+0x14>
 8015b26:	69a3      	ldr	r3, [r4, #24]
 8015b28:	b913      	cbnz	r3, 8015b30 <iprintf+0x14>
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	f002 f8a2 	bl	8017c74 <__sinit>
 8015b30:	ab05      	add	r3, sp, #20
 8015b32:	9a04      	ldr	r2, [sp, #16]
 8015b34:	68a1      	ldr	r1, [r4, #8]
 8015b36:	9301      	str	r3, [sp, #4]
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f003 fc89 	bl	8019450 <_vfiprintf_r>
 8015b3e:	b002      	add	sp, #8
 8015b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b44:	b004      	add	sp, #16
 8015b46:	4770      	bx	lr
 8015b48:	20000028 	.word	0x20000028

08015b4c <_puts_r>:
 8015b4c:	b570      	push	{r4, r5, r6, lr}
 8015b4e:	460e      	mov	r6, r1
 8015b50:	4605      	mov	r5, r0
 8015b52:	b118      	cbz	r0, 8015b5c <_puts_r+0x10>
 8015b54:	6983      	ldr	r3, [r0, #24]
 8015b56:	b90b      	cbnz	r3, 8015b5c <_puts_r+0x10>
 8015b58:	f002 f88c 	bl	8017c74 <__sinit>
 8015b5c:	69ab      	ldr	r3, [r5, #24]
 8015b5e:	68ac      	ldr	r4, [r5, #8]
 8015b60:	b913      	cbnz	r3, 8015b68 <_puts_r+0x1c>
 8015b62:	4628      	mov	r0, r5
 8015b64:	f002 f886 	bl	8017c74 <__sinit>
 8015b68:	4b2c      	ldr	r3, [pc, #176]	; (8015c1c <_puts_r+0xd0>)
 8015b6a:	429c      	cmp	r4, r3
 8015b6c:	d120      	bne.n	8015bb0 <_puts_r+0x64>
 8015b6e:	686c      	ldr	r4, [r5, #4]
 8015b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b72:	07db      	lsls	r3, r3, #31
 8015b74:	d405      	bmi.n	8015b82 <_puts_r+0x36>
 8015b76:	89a3      	ldrh	r3, [r4, #12]
 8015b78:	0598      	lsls	r0, r3, #22
 8015b7a:	d402      	bmi.n	8015b82 <_puts_r+0x36>
 8015b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b7e:	f002 fca8 	bl	80184d2 <__retarget_lock_acquire_recursive>
 8015b82:	89a3      	ldrh	r3, [r4, #12]
 8015b84:	0719      	lsls	r1, r3, #28
 8015b86:	d51d      	bpl.n	8015bc4 <_puts_r+0x78>
 8015b88:	6923      	ldr	r3, [r4, #16]
 8015b8a:	b1db      	cbz	r3, 8015bc4 <_puts_r+0x78>
 8015b8c:	3e01      	subs	r6, #1
 8015b8e:	68a3      	ldr	r3, [r4, #8]
 8015b90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b94:	3b01      	subs	r3, #1
 8015b96:	60a3      	str	r3, [r4, #8]
 8015b98:	bb39      	cbnz	r1, 8015bea <_puts_r+0x9e>
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	da38      	bge.n	8015c10 <_puts_r+0xc4>
 8015b9e:	4622      	mov	r2, r4
 8015ba0:	210a      	movs	r1, #10
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	f001 f800 	bl	8016ba8 <__swbuf_r>
 8015ba8:	3001      	adds	r0, #1
 8015baa:	d011      	beq.n	8015bd0 <_puts_r+0x84>
 8015bac:	250a      	movs	r5, #10
 8015bae:	e011      	b.n	8015bd4 <_puts_r+0x88>
 8015bb0:	4b1b      	ldr	r3, [pc, #108]	; (8015c20 <_puts_r+0xd4>)
 8015bb2:	429c      	cmp	r4, r3
 8015bb4:	d101      	bne.n	8015bba <_puts_r+0x6e>
 8015bb6:	68ac      	ldr	r4, [r5, #8]
 8015bb8:	e7da      	b.n	8015b70 <_puts_r+0x24>
 8015bba:	4b1a      	ldr	r3, [pc, #104]	; (8015c24 <_puts_r+0xd8>)
 8015bbc:	429c      	cmp	r4, r3
 8015bbe:	bf08      	it	eq
 8015bc0:	68ec      	ldreq	r4, [r5, #12]
 8015bc2:	e7d5      	b.n	8015b70 <_puts_r+0x24>
 8015bc4:	4621      	mov	r1, r4
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	f001 f840 	bl	8016c4c <__swsetup_r>
 8015bcc:	2800      	cmp	r0, #0
 8015bce:	d0dd      	beq.n	8015b8c <_puts_r+0x40>
 8015bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8015bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bd6:	07da      	lsls	r2, r3, #31
 8015bd8:	d405      	bmi.n	8015be6 <_puts_r+0x9a>
 8015bda:	89a3      	ldrh	r3, [r4, #12]
 8015bdc:	059b      	lsls	r3, r3, #22
 8015bde:	d402      	bmi.n	8015be6 <_puts_r+0x9a>
 8015be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015be2:	f002 fc77 	bl	80184d4 <__retarget_lock_release_recursive>
 8015be6:	4628      	mov	r0, r5
 8015be8:	bd70      	pop	{r4, r5, r6, pc}
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	da04      	bge.n	8015bf8 <_puts_r+0xac>
 8015bee:	69a2      	ldr	r2, [r4, #24]
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	dc06      	bgt.n	8015c02 <_puts_r+0xb6>
 8015bf4:	290a      	cmp	r1, #10
 8015bf6:	d004      	beq.n	8015c02 <_puts_r+0xb6>
 8015bf8:	6823      	ldr	r3, [r4, #0]
 8015bfa:	1c5a      	adds	r2, r3, #1
 8015bfc:	6022      	str	r2, [r4, #0]
 8015bfe:	7019      	strb	r1, [r3, #0]
 8015c00:	e7c5      	b.n	8015b8e <_puts_r+0x42>
 8015c02:	4622      	mov	r2, r4
 8015c04:	4628      	mov	r0, r5
 8015c06:	f000 ffcf 	bl	8016ba8 <__swbuf_r>
 8015c0a:	3001      	adds	r0, #1
 8015c0c:	d1bf      	bne.n	8015b8e <_puts_r+0x42>
 8015c0e:	e7df      	b.n	8015bd0 <_puts_r+0x84>
 8015c10:	6823      	ldr	r3, [r4, #0]
 8015c12:	250a      	movs	r5, #10
 8015c14:	1c5a      	adds	r2, r3, #1
 8015c16:	6022      	str	r2, [r4, #0]
 8015c18:	701d      	strb	r5, [r3, #0]
 8015c1a:	e7db      	b.n	8015bd4 <_puts_r+0x88>
 8015c1c:	0801a9ac 	.word	0x0801a9ac
 8015c20:	0801a9cc 	.word	0x0801a9cc
 8015c24:	0801a98c 	.word	0x0801a98c

08015c28 <puts>:
 8015c28:	4b02      	ldr	r3, [pc, #8]	; (8015c34 <puts+0xc>)
 8015c2a:	4601      	mov	r1, r0
 8015c2c:	6818      	ldr	r0, [r3, #0]
 8015c2e:	f7ff bf8d 	b.w	8015b4c <_puts_r>
 8015c32:	bf00      	nop
 8015c34:	20000028 	.word	0x20000028

08015c38 <iscanf>:
 8015c38:	b40f      	push	{r0, r1, r2, r3}
 8015c3a:	4b0a      	ldr	r3, [pc, #40]	; (8015c64 <iscanf+0x2c>)
 8015c3c:	b513      	push	{r0, r1, r4, lr}
 8015c3e:	681c      	ldr	r4, [r3, #0]
 8015c40:	b124      	cbz	r4, 8015c4c <iscanf+0x14>
 8015c42:	69a3      	ldr	r3, [r4, #24]
 8015c44:	b913      	cbnz	r3, 8015c4c <iscanf+0x14>
 8015c46:	4620      	mov	r0, r4
 8015c48:	f002 f814 	bl	8017c74 <__sinit>
 8015c4c:	ab05      	add	r3, sp, #20
 8015c4e:	9a04      	ldr	r2, [sp, #16]
 8015c50:	6861      	ldr	r1, [r4, #4]
 8015c52:	9301      	str	r3, [sp, #4]
 8015c54:	4620      	mov	r0, r4
 8015c56:	f003 fed1 	bl	80199fc <_vfiscanf_r>
 8015c5a:	b002      	add	sp, #8
 8015c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c60:	b004      	add	sp, #16
 8015c62:	4770      	bx	lr
 8015c64:	20000028 	.word	0x20000028

08015c68 <setbuf>:
 8015c68:	2900      	cmp	r1, #0
 8015c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c6e:	bf0c      	ite	eq
 8015c70:	2202      	moveq	r2, #2
 8015c72:	2200      	movne	r2, #0
 8015c74:	f000 b800 	b.w	8015c78 <setvbuf>

08015c78 <setvbuf>:
 8015c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015c7c:	461d      	mov	r5, r3
 8015c7e:	4b5d      	ldr	r3, [pc, #372]	; (8015df4 <setvbuf+0x17c>)
 8015c80:	681f      	ldr	r7, [r3, #0]
 8015c82:	4604      	mov	r4, r0
 8015c84:	460e      	mov	r6, r1
 8015c86:	4690      	mov	r8, r2
 8015c88:	b127      	cbz	r7, 8015c94 <setvbuf+0x1c>
 8015c8a:	69bb      	ldr	r3, [r7, #24]
 8015c8c:	b913      	cbnz	r3, 8015c94 <setvbuf+0x1c>
 8015c8e:	4638      	mov	r0, r7
 8015c90:	f001 fff0 	bl	8017c74 <__sinit>
 8015c94:	4b58      	ldr	r3, [pc, #352]	; (8015df8 <setvbuf+0x180>)
 8015c96:	429c      	cmp	r4, r3
 8015c98:	d167      	bne.n	8015d6a <setvbuf+0xf2>
 8015c9a:	687c      	ldr	r4, [r7, #4]
 8015c9c:	f1b8 0f02 	cmp.w	r8, #2
 8015ca0:	d006      	beq.n	8015cb0 <setvbuf+0x38>
 8015ca2:	f1b8 0f01 	cmp.w	r8, #1
 8015ca6:	f200 809f 	bhi.w	8015de8 <setvbuf+0x170>
 8015caa:	2d00      	cmp	r5, #0
 8015cac:	f2c0 809c 	blt.w	8015de8 <setvbuf+0x170>
 8015cb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cb2:	07db      	lsls	r3, r3, #31
 8015cb4:	d405      	bmi.n	8015cc2 <setvbuf+0x4a>
 8015cb6:	89a3      	ldrh	r3, [r4, #12]
 8015cb8:	0598      	lsls	r0, r3, #22
 8015cba:	d402      	bmi.n	8015cc2 <setvbuf+0x4a>
 8015cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cbe:	f002 fc08 	bl	80184d2 <__retarget_lock_acquire_recursive>
 8015cc2:	4621      	mov	r1, r4
 8015cc4:	4638      	mov	r0, r7
 8015cc6:	f001 ff2f 	bl	8017b28 <_fflush_r>
 8015cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ccc:	b141      	cbz	r1, 8015ce0 <setvbuf+0x68>
 8015cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cd2:	4299      	cmp	r1, r3
 8015cd4:	d002      	beq.n	8015cdc <setvbuf+0x64>
 8015cd6:	4638      	mov	r0, r7
 8015cd8:	f003 f954 	bl	8018f84 <_free_r>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	6363      	str	r3, [r4, #52]	; 0x34
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	61a3      	str	r3, [r4, #24]
 8015ce4:	6063      	str	r3, [r4, #4]
 8015ce6:	89a3      	ldrh	r3, [r4, #12]
 8015ce8:	0619      	lsls	r1, r3, #24
 8015cea:	d503      	bpl.n	8015cf4 <setvbuf+0x7c>
 8015cec:	6921      	ldr	r1, [r4, #16]
 8015cee:	4638      	mov	r0, r7
 8015cf0:	f003 f948 	bl	8018f84 <_free_r>
 8015cf4:	89a3      	ldrh	r3, [r4, #12]
 8015cf6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8015cfa:	f023 0303 	bic.w	r3, r3, #3
 8015cfe:	f1b8 0f02 	cmp.w	r8, #2
 8015d02:	81a3      	strh	r3, [r4, #12]
 8015d04:	d06c      	beq.n	8015de0 <setvbuf+0x168>
 8015d06:	ab01      	add	r3, sp, #4
 8015d08:	466a      	mov	r2, sp
 8015d0a:	4621      	mov	r1, r4
 8015d0c:	4638      	mov	r0, r7
 8015d0e:	f002 fbe2 	bl	80184d6 <__swhatbuf_r>
 8015d12:	89a3      	ldrh	r3, [r4, #12]
 8015d14:	4318      	orrs	r0, r3
 8015d16:	81a0      	strh	r0, [r4, #12]
 8015d18:	2d00      	cmp	r5, #0
 8015d1a:	d130      	bne.n	8015d7e <setvbuf+0x106>
 8015d1c:	9d00      	ldr	r5, [sp, #0]
 8015d1e:	4628      	mov	r0, r5
 8015d20:	f002 fc3e 	bl	80185a0 <malloc>
 8015d24:	4606      	mov	r6, r0
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d155      	bne.n	8015dd6 <setvbuf+0x15e>
 8015d2a:	f8dd 9000 	ldr.w	r9, [sp]
 8015d2e:	45a9      	cmp	r9, r5
 8015d30:	d14a      	bne.n	8015dc8 <setvbuf+0x150>
 8015d32:	f04f 35ff 	mov.w	r5, #4294967295
 8015d36:	2200      	movs	r2, #0
 8015d38:	60a2      	str	r2, [r4, #8]
 8015d3a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8015d3e:	6022      	str	r2, [r4, #0]
 8015d40:	6122      	str	r2, [r4, #16]
 8015d42:	2201      	movs	r2, #1
 8015d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d48:	6162      	str	r2, [r4, #20]
 8015d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015d4c:	f043 0302 	orr.w	r3, r3, #2
 8015d50:	07d2      	lsls	r2, r2, #31
 8015d52:	81a3      	strh	r3, [r4, #12]
 8015d54:	d405      	bmi.n	8015d62 <setvbuf+0xea>
 8015d56:	f413 7f00 	tst.w	r3, #512	; 0x200
 8015d5a:	d102      	bne.n	8015d62 <setvbuf+0xea>
 8015d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d5e:	f002 fbb9 	bl	80184d4 <__retarget_lock_release_recursive>
 8015d62:	4628      	mov	r0, r5
 8015d64:	b003      	add	sp, #12
 8015d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d6a:	4b24      	ldr	r3, [pc, #144]	; (8015dfc <setvbuf+0x184>)
 8015d6c:	429c      	cmp	r4, r3
 8015d6e:	d101      	bne.n	8015d74 <setvbuf+0xfc>
 8015d70:	68bc      	ldr	r4, [r7, #8]
 8015d72:	e793      	b.n	8015c9c <setvbuf+0x24>
 8015d74:	4b22      	ldr	r3, [pc, #136]	; (8015e00 <setvbuf+0x188>)
 8015d76:	429c      	cmp	r4, r3
 8015d78:	bf08      	it	eq
 8015d7a:	68fc      	ldreq	r4, [r7, #12]
 8015d7c:	e78e      	b.n	8015c9c <setvbuf+0x24>
 8015d7e:	2e00      	cmp	r6, #0
 8015d80:	d0cd      	beq.n	8015d1e <setvbuf+0xa6>
 8015d82:	69bb      	ldr	r3, [r7, #24]
 8015d84:	b913      	cbnz	r3, 8015d8c <setvbuf+0x114>
 8015d86:	4638      	mov	r0, r7
 8015d88:	f001 ff74 	bl	8017c74 <__sinit>
 8015d8c:	f1b8 0f01 	cmp.w	r8, #1
 8015d90:	bf08      	it	eq
 8015d92:	89a3      	ldrheq	r3, [r4, #12]
 8015d94:	6026      	str	r6, [r4, #0]
 8015d96:	bf04      	itt	eq
 8015d98:	f043 0301 	orreq.w	r3, r3, #1
 8015d9c:	81a3      	strheq	r3, [r4, #12]
 8015d9e:	89a2      	ldrh	r2, [r4, #12]
 8015da0:	f012 0308 	ands.w	r3, r2, #8
 8015da4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8015da8:	d01c      	beq.n	8015de4 <setvbuf+0x16c>
 8015daa:	07d3      	lsls	r3, r2, #31
 8015dac:	bf41      	itttt	mi
 8015dae:	2300      	movmi	r3, #0
 8015db0:	426d      	negmi	r5, r5
 8015db2:	60a3      	strmi	r3, [r4, #8]
 8015db4:	61a5      	strmi	r5, [r4, #24]
 8015db6:	bf58      	it	pl
 8015db8:	60a5      	strpl	r5, [r4, #8]
 8015dba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8015dbc:	f015 0501 	ands.w	r5, r5, #1
 8015dc0:	d115      	bne.n	8015dee <setvbuf+0x176>
 8015dc2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8015dc6:	e7c8      	b.n	8015d5a <setvbuf+0xe2>
 8015dc8:	4648      	mov	r0, r9
 8015dca:	f002 fbe9 	bl	80185a0 <malloc>
 8015dce:	4606      	mov	r6, r0
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	d0ae      	beq.n	8015d32 <setvbuf+0xba>
 8015dd4:	464d      	mov	r5, r9
 8015dd6:	89a3      	ldrh	r3, [r4, #12]
 8015dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ddc:	81a3      	strh	r3, [r4, #12]
 8015dde:	e7d0      	b.n	8015d82 <setvbuf+0x10a>
 8015de0:	2500      	movs	r5, #0
 8015de2:	e7a8      	b.n	8015d36 <setvbuf+0xbe>
 8015de4:	60a3      	str	r3, [r4, #8]
 8015de6:	e7e8      	b.n	8015dba <setvbuf+0x142>
 8015de8:	f04f 35ff 	mov.w	r5, #4294967295
 8015dec:	e7b9      	b.n	8015d62 <setvbuf+0xea>
 8015dee:	2500      	movs	r5, #0
 8015df0:	e7b7      	b.n	8015d62 <setvbuf+0xea>
 8015df2:	bf00      	nop
 8015df4:	20000028 	.word	0x20000028
 8015df8:	0801a9ac 	.word	0x0801a9ac
 8015dfc:	0801a9cc 	.word	0x0801a9cc
 8015e00:	0801a98c 	.word	0x0801a98c

08015e04 <nanf>:
 8015e04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015e0c <nanf+0x8>
 8015e08:	4770      	bx	lr
 8015e0a:	bf00      	nop
 8015e0c:	7fc00000 	.word	0x7fc00000

08015e10 <siprintf>:
 8015e10:	b40e      	push	{r1, r2, r3}
 8015e12:	b500      	push	{lr}
 8015e14:	b09c      	sub	sp, #112	; 0x70
 8015e16:	ab1d      	add	r3, sp, #116	; 0x74
 8015e18:	9002      	str	r0, [sp, #8]
 8015e1a:	9006      	str	r0, [sp, #24]
 8015e1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e20:	4809      	ldr	r0, [pc, #36]	; (8015e48 <siprintf+0x38>)
 8015e22:	9107      	str	r1, [sp, #28]
 8015e24:	9104      	str	r1, [sp, #16]
 8015e26:	4909      	ldr	r1, [pc, #36]	; (8015e4c <siprintf+0x3c>)
 8015e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e2c:	9105      	str	r1, [sp, #20]
 8015e2e:	6800      	ldr	r0, [r0, #0]
 8015e30:	9301      	str	r3, [sp, #4]
 8015e32:	a902      	add	r1, sp, #8
 8015e34:	f003 f9e2 	bl	80191fc <_svfiprintf_r>
 8015e38:	9b02      	ldr	r3, [sp, #8]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	701a      	strb	r2, [r3, #0]
 8015e3e:	b01c      	add	sp, #112	; 0x70
 8015e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e44:	b003      	add	sp, #12
 8015e46:	4770      	bx	lr
 8015e48:	20000028 	.word	0x20000028
 8015e4c:	ffff0208 	.word	0xffff0208

08015e50 <sulp>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	4604      	mov	r4, r0
 8015e54:	460d      	mov	r5, r1
 8015e56:	ec45 4b10 	vmov	d0, r4, r5
 8015e5a:	4616      	mov	r6, r2
 8015e5c:	f002 ff2c 	bl	8018cb8 <__ulp>
 8015e60:	ec51 0b10 	vmov	r0, r1, d0
 8015e64:	b17e      	cbz	r6, 8015e86 <sulp+0x36>
 8015e66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	dd09      	ble.n	8015e86 <sulp+0x36>
 8015e72:	051b      	lsls	r3, r3, #20
 8015e74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e78:	2400      	movs	r4, #0
 8015e7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e7e:	4622      	mov	r2, r4
 8015e80:	462b      	mov	r3, r5
 8015e82:	f7f2 faf1 	bl	8008468 <__aeabi_dmul>
 8015e86:	bd70      	pop	{r4, r5, r6, pc}

08015e88 <_strtod_l>:
 8015e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e8c:	ed2d 8b02 	vpush	{d8}
 8015e90:	b09d      	sub	sp, #116	; 0x74
 8015e92:	461f      	mov	r7, r3
 8015e94:	2300      	movs	r3, #0
 8015e96:	9318      	str	r3, [sp, #96]	; 0x60
 8015e98:	4ba2      	ldr	r3, [pc, #648]	; (8016124 <_strtod_l+0x29c>)
 8015e9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	9305      	str	r3, [sp, #20]
 8015ea0:	4604      	mov	r4, r0
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	4688      	mov	r8, r1
 8015ea6:	f7f2 f8cb 	bl	8008040 <strlen>
 8015eaa:	f04f 0a00 	mov.w	sl, #0
 8015eae:	4605      	mov	r5, r0
 8015eb0:	f04f 0b00 	mov.w	fp, #0
 8015eb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015eba:	781a      	ldrb	r2, [r3, #0]
 8015ebc:	2a2b      	cmp	r2, #43	; 0x2b
 8015ebe:	d04e      	beq.n	8015f5e <_strtod_l+0xd6>
 8015ec0:	d83b      	bhi.n	8015f3a <_strtod_l+0xb2>
 8015ec2:	2a0d      	cmp	r2, #13
 8015ec4:	d834      	bhi.n	8015f30 <_strtod_l+0xa8>
 8015ec6:	2a08      	cmp	r2, #8
 8015ec8:	d834      	bhi.n	8015f34 <_strtod_l+0xac>
 8015eca:	2a00      	cmp	r2, #0
 8015ecc:	d03e      	beq.n	8015f4c <_strtod_l+0xc4>
 8015ece:	2300      	movs	r3, #0
 8015ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8015ed2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015ed4:	7833      	ldrb	r3, [r6, #0]
 8015ed6:	2b30      	cmp	r3, #48	; 0x30
 8015ed8:	f040 80b0 	bne.w	801603c <_strtod_l+0x1b4>
 8015edc:	7873      	ldrb	r3, [r6, #1]
 8015ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015ee2:	2b58      	cmp	r3, #88	; 0x58
 8015ee4:	d168      	bne.n	8015fb8 <_strtod_l+0x130>
 8015ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ee8:	9301      	str	r3, [sp, #4]
 8015eea:	ab18      	add	r3, sp, #96	; 0x60
 8015eec:	9702      	str	r7, [sp, #8]
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	4a8d      	ldr	r2, [pc, #564]	; (8016128 <_strtod_l+0x2a0>)
 8015ef2:	ab19      	add	r3, sp, #100	; 0x64
 8015ef4:	a917      	add	r1, sp, #92	; 0x5c
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f001 ffde 	bl	8017eb8 <__gethex>
 8015efc:	f010 0707 	ands.w	r7, r0, #7
 8015f00:	4605      	mov	r5, r0
 8015f02:	d005      	beq.n	8015f10 <_strtod_l+0x88>
 8015f04:	2f06      	cmp	r7, #6
 8015f06:	d12c      	bne.n	8015f62 <_strtod_l+0xda>
 8015f08:	3601      	adds	r6, #1
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8015f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	f040 8590 	bne.w	8016a38 <_strtod_l+0xbb0>
 8015f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f1a:	b1eb      	cbz	r3, 8015f58 <_strtod_l+0xd0>
 8015f1c:	4652      	mov	r2, sl
 8015f1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015f22:	ec43 2b10 	vmov	d0, r2, r3
 8015f26:	b01d      	add	sp, #116	; 0x74
 8015f28:	ecbd 8b02 	vpop	{d8}
 8015f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f30:	2a20      	cmp	r2, #32
 8015f32:	d1cc      	bne.n	8015ece <_strtod_l+0x46>
 8015f34:	3301      	adds	r3, #1
 8015f36:	9317      	str	r3, [sp, #92]	; 0x5c
 8015f38:	e7be      	b.n	8015eb8 <_strtod_l+0x30>
 8015f3a:	2a2d      	cmp	r2, #45	; 0x2d
 8015f3c:	d1c7      	bne.n	8015ece <_strtod_l+0x46>
 8015f3e:	2201      	movs	r2, #1
 8015f40:	920a      	str	r2, [sp, #40]	; 0x28
 8015f42:	1c5a      	adds	r2, r3, #1
 8015f44:	9217      	str	r2, [sp, #92]	; 0x5c
 8015f46:	785b      	ldrb	r3, [r3, #1]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d1c2      	bne.n	8015ed2 <_strtod_l+0x4a>
 8015f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	f040 856e 	bne.w	8016a34 <_strtod_l+0xbac>
 8015f58:	4652      	mov	r2, sl
 8015f5a:	465b      	mov	r3, fp
 8015f5c:	e7e1      	b.n	8015f22 <_strtod_l+0x9a>
 8015f5e:	2200      	movs	r2, #0
 8015f60:	e7ee      	b.n	8015f40 <_strtod_l+0xb8>
 8015f62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015f64:	b13a      	cbz	r2, 8015f76 <_strtod_l+0xee>
 8015f66:	2135      	movs	r1, #53	; 0x35
 8015f68:	a81a      	add	r0, sp, #104	; 0x68
 8015f6a:	f002 ffb0 	bl	8018ece <__copybits>
 8015f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015f70:	4620      	mov	r0, r4
 8015f72:	f002 fb6f 	bl	8018654 <_Bfree>
 8015f76:	3f01      	subs	r7, #1
 8015f78:	2f04      	cmp	r7, #4
 8015f7a:	d806      	bhi.n	8015f8a <_strtod_l+0x102>
 8015f7c:	e8df f007 	tbb	[pc, r7]
 8015f80:	1714030a 	.word	0x1714030a
 8015f84:	0a          	.byte	0x0a
 8015f85:	00          	.byte	0x00
 8015f86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8015f8a:	0728      	lsls	r0, r5, #28
 8015f8c:	d5c0      	bpl.n	8015f10 <_strtod_l+0x88>
 8015f8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015f92:	e7bd      	b.n	8015f10 <_strtod_l+0x88>
 8015f94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8015f98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015fa2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015fa6:	e7f0      	b.n	8015f8a <_strtod_l+0x102>
 8015fa8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801612c <_strtod_l+0x2a4>
 8015fac:	e7ed      	b.n	8015f8a <_strtod_l+0x102>
 8015fae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015fb2:	f04f 3aff 	mov.w	sl, #4294967295
 8015fb6:	e7e8      	b.n	8015f8a <_strtod_l+0x102>
 8015fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fba:	1c5a      	adds	r2, r3, #1
 8015fbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8015fbe:	785b      	ldrb	r3, [r3, #1]
 8015fc0:	2b30      	cmp	r3, #48	; 0x30
 8015fc2:	d0f9      	beq.n	8015fb8 <_strtod_l+0x130>
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d0a3      	beq.n	8015f10 <_strtod_l+0x88>
 8015fc8:	2301      	movs	r3, #1
 8015fca:	f04f 0900 	mov.w	r9, #0
 8015fce:	9304      	str	r3, [sp, #16]
 8015fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fd2:	9308      	str	r3, [sp, #32]
 8015fd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8015fd8:	464f      	mov	r7, r9
 8015fda:	220a      	movs	r2, #10
 8015fdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015fde:	7806      	ldrb	r6, [r0, #0]
 8015fe0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015fe4:	b2d9      	uxtb	r1, r3
 8015fe6:	2909      	cmp	r1, #9
 8015fe8:	d92a      	bls.n	8016040 <_strtod_l+0x1b8>
 8015fea:	9905      	ldr	r1, [sp, #20]
 8015fec:	462a      	mov	r2, r5
 8015fee:	f003 ffa6 	bl	8019f3e <strncmp>
 8015ff2:	b398      	cbz	r0, 801605c <_strtod_l+0x1d4>
 8015ff4:	2000      	movs	r0, #0
 8015ff6:	4632      	mov	r2, r6
 8015ff8:	463d      	mov	r5, r7
 8015ffa:	9005      	str	r0, [sp, #20]
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	2a65      	cmp	r2, #101	; 0x65
 8016000:	d001      	beq.n	8016006 <_strtod_l+0x17e>
 8016002:	2a45      	cmp	r2, #69	; 0x45
 8016004:	d118      	bne.n	8016038 <_strtod_l+0x1b0>
 8016006:	b91d      	cbnz	r5, 8016010 <_strtod_l+0x188>
 8016008:	9a04      	ldr	r2, [sp, #16]
 801600a:	4302      	orrs	r2, r0
 801600c:	d09e      	beq.n	8015f4c <_strtod_l+0xc4>
 801600e:	2500      	movs	r5, #0
 8016010:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8016014:	f108 0201 	add.w	r2, r8, #1
 8016018:	9217      	str	r2, [sp, #92]	; 0x5c
 801601a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801601e:	2a2b      	cmp	r2, #43	; 0x2b
 8016020:	d075      	beq.n	801610e <_strtod_l+0x286>
 8016022:	2a2d      	cmp	r2, #45	; 0x2d
 8016024:	d07b      	beq.n	801611e <_strtod_l+0x296>
 8016026:	f04f 0c00 	mov.w	ip, #0
 801602a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801602e:	2909      	cmp	r1, #9
 8016030:	f240 8082 	bls.w	8016138 <_strtod_l+0x2b0>
 8016034:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016038:	2600      	movs	r6, #0
 801603a:	e09d      	b.n	8016178 <_strtod_l+0x2f0>
 801603c:	2300      	movs	r3, #0
 801603e:	e7c4      	b.n	8015fca <_strtod_l+0x142>
 8016040:	2f08      	cmp	r7, #8
 8016042:	bfd8      	it	le
 8016044:	9907      	ldrle	r1, [sp, #28]
 8016046:	f100 0001 	add.w	r0, r0, #1
 801604a:	bfda      	itte	le
 801604c:	fb02 3301 	mlale	r3, r2, r1, r3
 8016050:	9307      	strle	r3, [sp, #28]
 8016052:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016056:	3701      	adds	r7, #1
 8016058:	9017      	str	r0, [sp, #92]	; 0x5c
 801605a:	e7bf      	b.n	8015fdc <_strtod_l+0x154>
 801605c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801605e:	195a      	adds	r2, r3, r5
 8016060:	9217      	str	r2, [sp, #92]	; 0x5c
 8016062:	5d5a      	ldrb	r2, [r3, r5]
 8016064:	2f00      	cmp	r7, #0
 8016066:	d037      	beq.n	80160d8 <_strtod_l+0x250>
 8016068:	9005      	str	r0, [sp, #20]
 801606a:	463d      	mov	r5, r7
 801606c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016070:	2b09      	cmp	r3, #9
 8016072:	d912      	bls.n	801609a <_strtod_l+0x212>
 8016074:	2301      	movs	r3, #1
 8016076:	e7c2      	b.n	8015ffe <_strtod_l+0x176>
 8016078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801607a:	1c5a      	adds	r2, r3, #1
 801607c:	9217      	str	r2, [sp, #92]	; 0x5c
 801607e:	785a      	ldrb	r2, [r3, #1]
 8016080:	3001      	adds	r0, #1
 8016082:	2a30      	cmp	r2, #48	; 0x30
 8016084:	d0f8      	beq.n	8016078 <_strtod_l+0x1f0>
 8016086:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801608a:	2b08      	cmp	r3, #8
 801608c:	f200 84d9 	bhi.w	8016a42 <_strtod_l+0xbba>
 8016090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016092:	9005      	str	r0, [sp, #20]
 8016094:	2000      	movs	r0, #0
 8016096:	9308      	str	r3, [sp, #32]
 8016098:	4605      	mov	r5, r0
 801609a:	3a30      	subs	r2, #48	; 0x30
 801609c:	f100 0301 	add.w	r3, r0, #1
 80160a0:	d014      	beq.n	80160cc <_strtod_l+0x244>
 80160a2:	9905      	ldr	r1, [sp, #20]
 80160a4:	4419      	add	r1, r3
 80160a6:	9105      	str	r1, [sp, #20]
 80160a8:	462b      	mov	r3, r5
 80160aa:	eb00 0e05 	add.w	lr, r0, r5
 80160ae:	210a      	movs	r1, #10
 80160b0:	4573      	cmp	r3, lr
 80160b2:	d113      	bne.n	80160dc <_strtod_l+0x254>
 80160b4:	182b      	adds	r3, r5, r0
 80160b6:	2b08      	cmp	r3, #8
 80160b8:	f105 0501 	add.w	r5, r5, #1
 80160bc:	4405      	add	r5, r0
 80160be:	dc1c      	bgt.n	80160fa <_strtod_l+0x272>
 80160c0:	9907      	ldr	r1, [sp, #28]
 80160c2:	230a      	movs	r3, #10
 80160c4:	fb03 2301 	mla	r3, r3, r1, r2
 80160c8:	9307      	str	r3, [sp, #28]
 80160ca:	2300      	movs	r3, #0
 80160cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80160ce:	1c51      	adds	r1, r2, #1
 80160d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80160d2:	7852      	ldrb	r2, [r2, #1]
 80160d4:	4618      	mov	r0, r3
 80160d6:	e7c9      	b.n	801606c <_strtod_l+0x1e4>
 80160d8:	4638      	mov	r0, r7
 80160da:	e7d2      	b.n	8016082 <_strtod_l+0x1fa>
 80160dc:	2b08      	cmp	r3, #8
 80160de:	dc04      	bgt.n	80160ea <_strtod_l+0x262>
 80160e0:	9e07      	ldr	r6, [sp, #28]
 80160e2:	434e      	muls	r6, r1
 80160e4:	9607      	str	r6, [sp, #28]
 80160e6:	3301      	adds	r3, #1
 80160e8:	e7e2      	b.n	80160b0 <_strtod_l+0x228>
 80160ea:	f103 0c01 	add.w	ip, r3, #1
 80160ee:	f1bc 0f10 	cmp.w	ip, #16
 80160f2:	bfd8      	it	le
 80160f4:	fb01 f909 	mulle.w	r9, r1, r9
 80160f8:	e7f5      	b.n	80160e6 <_strtod_l+0x25e>
 80160fa:	2d10      	cmp	r5, #16
 80160fc:	bfdc      	itt	le
 80160fe:	230a      	movle	r3, #10
 8016100:	fb03 2909 	mlale	r9, r3, r9, r2
 8016104:	e7e1      	b.n	80160ca <_strtod_l+0x242>
 8016106:	2300      	movs	r3, #0
 8016108:	9305      	str	r3, [sp, #20]
 801610a:	2301      	movs	r3, #1
 801610c:	e77c      	b.n	8016008 <_strtod_l+0x180>
 801610e:	f04f 0c00 	mov.w	ip, #0
 8016112:	f108 0202 	add.w	r2, r8, #2
 8016116:	9217      	str	r2, [sp, #92]	; 0x5c
 8016118:	f898 2002 	ldrb.w	r2, [r8, #2]
 801611c:	e785      	b.n	801602a <_strtod_l+0x1a2>
 801611e:	f04f 0c01 	mov.w	ip, #1
 8016122:	e7f6      	b.n	8016112 <_strtod_l+0x28a>
 8016124:	0801aa54 	.word	0x0801aa54
 8016128:	0801a7a8 	.word	0x0801a7a8
 801612c:	7ff00000 	.word	0x7ff00000
 8016130:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016132:	1c51      	adds	r1, r2, #1
 8016134:	9117      	str	r1, [sp, #92]	; 0x5c
 8016136:	7852      	ldrb	r2, [r2, #1]
 8016138:	2a30      	cmp	r2, #48	; 0x30
 801613a:	d0f9      	beq.n	8016130 <_strtod_l+0x2a8>
 801613c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016140:	2908      	cmp	r1, #8
 8016142:	f63f af79 	bhi.w	8016038 <_strtod_l+0x1b0>
 8016146:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801614a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801614c:	9206      	str	r2, [sp, #24]
 801614e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016150:	1c51      	adds	r1, r2, #1
 8016152:	9117      	str	r1, [sp, #92]	; 0x5c
 8016154:	7852      	ldrb	r2, [r2, #1]
 8016156:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801615a:	2e09      	cmp	r6, #9
 801615c:	d937      	bls.n	80161ce <_strtod_l+0x346>
 801615e:	9e06      	ldr	r6, [sp, #24]
 8016160:	1b89      	subs	r1, r1, r6
 8016162:	2908      	cmp	r1, #8
 8016164:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016168:	dc02      	bgt.n	8016170 <_strtod_l+0x2e8>
 801616a:	4576      	cmp	r6, lr
 801616c:	bfa8      	it	ge
 801616e:	4676      	movge	r6, lr
 8016170:	f1bc 0f00 	cmp.w	ip, #0
 8016174:	d000      	beq.n	8016178 <_strtod_l+0x2f0>
 8016176:	4276      	negs	r6, r6
 8016178:	2d00      	cmp	r5, #0
 801617a:	d14d      	bne.n	8016218 <_strtod_l+0x390>
 801617c:	9904      	ldr	r1, [sp, #16]
 801617e:	4301      	orrs	r1, r0
 8016180:	f47f aec6 	bne.w	8015f10 <_strtod_l+0x88>
 8016184:	2b00      	cmp	r3, #0
 8016186:	f47f aee1 	bne.w	8015f4c <_strtod_l+0xc4>
 801618a:	2a69      	cmp	r2, #105	; 0x69
 801618c:	d027      	beq.n	80161de <_strtod_l+0x356>
 801618e:	dc24      	bgt.n	80161da <_strtod_l+0x352>
 8016190:	2a49      	cmp	r2, #73	; 0x49
 8016192:	d024      	beq.n	80161de <_strtod_l+0x356>
 8016194:	2a4e      	cmp	r2, #78	; 0x4e
 8016196:	f47f aed9 	bne.w	8015f4c <_strtod_l+0xc4>
 801619a:	499f      	ldr	r1, [pc, #636]	; (8016418 <_strtod_l+0x590>)
 801619c:	a817      	add	r0, sp, #92	; 0x5c
 801619e:	f002 f8e3 	bl	8018368 <__match>
 80161a2:	2800      	cmp	r0, #0
 80161a4:	f43f aed2 	beq.w	8015f4c <_strtod_l+0xc4>
 80161a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	2b28      	cmp	r3, #40	; 0x28
 80161ae:	d12d      	bne.n	801620c <_strtod_l+0x384>
 80161b0:	499a      	ldr	r1, [pc, #616]	; (801641c <_strtod_l+0x594>)
 80161b2:	aa1a      	add	r2, sp, #104	; 0x68
 80161b4:	a817      	add	r0, sp, #92	; 0x5c
 80161b6:	f002 f8eb 	bl	8018390 <__hexnan>
 80161ba:	2805      	cmp	r0, #5
 80161bc:	d126      	bne.n	801620c <_strtod_l+0x384>
 80161be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80161c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80161c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80161cc:	e6a0      	b.n	8015f10 <_strtod_l+0x88>
 80161ce:	210a      	movs	r1, #10
 80161d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80161d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80161d8:	e7b9      	b.n	801614e <_strtod_l+0x2c6>
 80161da:	2a6e      	cmp	r2, #110	; 0x6e
 80161dc:	e7db      	b.n	8016196 <_strtod_l+0x30e>
 80161de:	4990      	ldr	r1, [pc, #576]	; (8016420 <_strtod_l+0x598>)
 80161e0:	a817      	add	r0, sp, #92	; 0x5c
 80161e2:	f002 f8c1 	bl	8018368 <__match>
 80161e6:	2800      	cmp	r0, #0
 80161e8:	f43f aeb0 	beq.w	8015f4c <_strtod_l+0xc4>
 80161ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161ee:	498d      	ldr	r1, [pc, #564]	; (8016424 <_strtod_l+0x59c>)
 80161f0:	3b01      	subs	r3, #1
 80161f2:	a817      	add	r0, sp, #92	; 0x5c
 80161f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80161f6:	f002 f8b7 	bl	8018368 <__match>
 80161fa:	b910      	cbnz	r0, 8016202 <_strtod_l+0x37a>
 80161fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161fe:	3301      	adds	r3, #1
 8016200:	9317      	str	r3, [sp, #92]	; 0x5c
 8016202:	f8df b230 	ldr.w	fp, [pc, #560]	; 8016434 <_strtod_l+0x5ac>
 8016206:	f04f 0a00 	mov.w	sl, #0
 801620a:	e681      	b.n	8015f10 <_strtod_l+0x88>
 801620c:	4886      	ldr	r0, [pc, #536]	; (8016428 <_strtod_l+0x5a0>)
 801620e:	f003 fe03 	bl	8019e18 <nan>
 8016212:	ec5b ab10 	vmov	sl, fp, d0
 8016216:	e67b      	b.n	8015f10 <_strtod_l+0x88>
 8016218:	9b05      	ldr	r3, [sp, #20]
 801621a:	9807      	ldr	r0, [sp, #28]
 801621c:	1af3      	subs	r3, r6, r3
 801621e:	2f00      	cmp	r7, #0
 8016220:	bf08      	it	eq
 8016222:	462f      	moveq	r7, r5
 8016224:	2d10      	cmp	r5, #16
 8016226:	9306      	str	r3, [sp, #24]
 8016228:	46a8      	mov	r8, r5
 801622a:	bfa8      	it	ge
 801622c:	f04f 0810 	movge.w	r8, #16
 8016230:	f7f2 f8a0 	bl	8008374 <__aeabi_ui2d>
 8016234:	2d09      	cmp	r5, #9
 8016236:	4682      	mov	sl, r0
 8016238:	468b      	mov	fp, r1
 801623a:	dd13      	ble.n	8016264 <_strtod_l+0x3dc>
 801623c:	4b7b      	ldr	r3, [pc, #492]	; (801642c <_strtod_l+0x5a4>)
 801623e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016242:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016246:	f7f2 f90f 	bl	8008468 <__aeabi_dmul>
 801624a:	4682      	mov	sl, r0
 801624c:	4648      	mov	r0, r9
 801624e:	468b      	mov	fp, r1
 8016250:	f7f2 f890 	bl	8008374 <__aeabi_ui2d>
 8016254:	4602      	mov	r2, r0
 8016256:	460b      	mov	r3, r1
 8016258:	4650      	mov	r0, sl
 801625a:	4659      	mov	r1, fp
 801625c:	f7f1 ff4e 	bl	80080fc <__adddf3>
 8016260:	4682      	mov	sl, r0
 8016262:	468b      	mov	fp, r1
 8016264:	2d0f      	cmp	r5, #15
 8016266:	dc38      	bgt.n	80162da <_strtod_l+0x452>
 8016268:	9b06      	ldr	r3, [sp, #24]
 801626a:	2b00      	cmp	r3, #0
 801626c:	f43f ae50 	beq.w	8015f10 <_strtod_l+0x88>
 8016270:	dd24      	ble.n	80162bc <_strtod_l+0x434>
 8016272:	2b16      	cmp	r3, #22
 8016274:	dc0b      	bgt.n	801628e <_strtod_l+0x406>
 8016276:	496d      	ldr	r1, [pc, #436]	; (801642c <_strtod_l+0x5a4>)
 8016278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801627c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016280:	4652      	mov	r2, sl
 8016282:	465b      	mov	r3, fp
 8016284:	f7f2 f8f0 	bl	8008468 <__aeabi_dmul>
 8016288:	4682      	mov	sl, r0
 801628a:	468b      	mov	fp, r1
 801628c:	e640      	b.n	8015f10 <_strtod_l+0x88>
 801628e:	9a06      	ldr	r2, [sp, #24]
 8016290:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016294:	4293      	cmp	r3, r2
 8016296:	db20      	blt.n	80162da <_strtod_l+0x452>
 8016298:	4c64      	ldr	r4, [pc, #400]	; (801642c <_strtod_l+0x5a4>)
 801629a:	f1c5 050f 	rsb	r5, r5, #15
 801629e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80162a2:	4652      	mov	r2, sl
 80162a4:	465b      	mov	r3, fp
 80162a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162aa:	f7f2 f8dd 	bl	8008468 <__aeabi_dmul>
 80162ae:	9b06      	ldr	r3, [sp, #24]
 80162b0:	1b5d      	subs	r5, r3, r5
 80162b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80162b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80162ba:	e7e3      	b.n	8016284 <_strtod_l+0x3fc>
 80162bc:	9b06      	ldr	r3, [sp, #24]
 80162be:	3316      	adds	r3, #22
 80162c0:	db0b      	blt.n	80162da <_strtod_l+0x452>
 80162c2:	9b05      	ldr	r3, [sp, #20]
 80162c4:	1b9e      	subs	r6, r3, r6
 80162c6:	4b59      	ldr	r3, [pc, #356]	; (801642c <_strtod_l+0x5a4>)
 80162c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80162cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80162d0:	4650      	mov	r0, sl
 80162d2:	4659      	mov	r1, fp
 80162d4:	f7f2 f9f2 	bl	80086bc <__aeabi_ddiv>
 80162d8:	e7d6      	b.n	8016288 <_strtod_l+0x400>
 80162da:	9b06      	ldr	r3, [sp, #24]
 80162dc:	eba5 0808 	sub.w	r8, r5, r8
 80162e0:	4498      	add	r8, r3
 80162e2:	f1b8 0f00 	cmp.w	r8, #0
 80162e6:	dd74      	ble.n	80163d2 <_strtod_l+0x54a>
 80162e8:	f018 030f 	ands.w	r3, r8, #15
 80162ec:	d00a      	beq.n	8016304 <_strtod_l+0x47c>
 80162ee:	494f      	ldr	r1, [pc, #316]	; (801642c <_strtod_l+0x5a4>)
 80162f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80162f4:	4652      	mov	r2, sl
 80162f6:	465b      	mov	r3, fp
 80162f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162fc:	f7f2 f8b4 	bl	8008468 <__aeabi_dmul>
 8016300:	4682      	mov	sl, r0
 8016302:	468b      	mov	fp, r1
 8016304:	f038 080f 	bics.w	r8, r8, #15
 8016308:	d04f      	beq.n	80163aa <_strtod_l+0x522>
 801630a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801630e:	dd22      	ble.n	8016356 <_strtod_l+0x4ce>
 8016310:	2500      	movs	r5, #0
 8016312:	462e      	mov	r6, r5
 8016314:	9507      	str	r5, [sp, #28]
 8016316:	9505      	str	r5, [sp, #20]
 8016318:	2322      	movs	r3, #34	; 0x22
 801631a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8016434 <_strtod_l+0x5ac>
 801631e:	6023      	str	r3, [r4, #0]
 8016320:	f04f 0a00 	mov.w	sl, #0
 8016324:	9b07      	ldr	r3, [sp, #28]
 8016326:	2b00      	cmp	r3, #0
 8016328:	f43f adf2 	beq.w	8015f10 <_strtod_l+0x88>
 801632c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801632e:	4620      	mov	r0, r4
 8016330:	f002 f990 	bl	8018654 <_Bfree>
 8016334:	9905      	ldr	r1, [sp, #20]
 8016336:	4620      	mov	r0, r4
 8016338:	f002 f98c 	bl	8018654 <_Bfree>
 801633c:	4631      	mov	r1, r6
 801633e:	4620      	mov	r0, r4
 8016340:	f002 f988 	bl	8018654 <_Bfree>
 8016344:	9907      	ldr	r1, [sp, #28]
 8016346:	4620      	mov	r0, r4
 8016348:	f002 f984 	bl	8018654 <_Bfree>
 801634c:	4629      	mov	r1, r5
 801634e:	4620      	mov	r0, r4
 8016350:	f002 f980 	bl	8018654 <_Bfree>
 8016354:	e5dc      	b.n	8015f10 <_strtod_l+0x88>
 8016356:	4b36      	ldr	r3, [pc, #216]	; (8016430 <_strtod_l+0x5a8>)
 8016358:	9304      	str	r3, [sp, #16]
 801635a:	2300      	movs	r3, #0
 801635c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016360:	4650      	mov	r0, sl
 8016362:	4659      	mov	r1, fp
 8016364:	4699      	mov	r9, r3
 8016366:	f1b8 0f01 	cmp.w	r8, #1
 801636a:	dc21      	bgt.n	80163b0 <_strtod_l+0x528>
 801636c:	b10b      	cbz	r3, 8016372 <_strtod_l+0x4ea>
 801636e:	4682      	mov	sl, r0
 8016370:	468b      	mov	fp, r1
 8016372:	4b2f      	ldr	r3, [pc, #188]	; (8016430 <_strtod_l+0x5a8>)
 8016374:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016378:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801637c:	4652      	mov	r2, sl
 801637e:	465b      	mov	r3, fp
 8016380:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016384:	f7f2 f870 	bl	8008468 <__aeabi_dmul>
 8016388:	4b2a      	ldr	r3, [pc, #168]	; (8016434 <_strtod_l+0x5ac>)
 801638a:	460a      	mov	r2, r1
 801638c:	400b      	ands	r3, r1
 801638e:	492a      	ldr	r1, [pc, #168]	; (8016438 <_strtod_l+0x5b0>)
 8016390:	428b      	cmp	r3, r1
 8016392:	4682      	mov	sl, r0
 8016394:	d8bc      	bhi.n	8016310 <_strtod_l+0x488>
 8016396:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801639a:	428b      	cmp	r3, r1
 801639c:	bf86      	itte	hi
 801639e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801643c <_strtod_l+0x5b4>
 80163a2:	f04f 3aff 	movhi.w	sl, #4294967295
 80163a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80163aa:	2300      	movs	r3, #0
 80163ac:	9304      	str	r3, [sp, #16]
 80163ae:	e084      	b.n	80164ba <_strtod_l+0x632>
 80163b0:	f018 0f01 	tst.w	r8, #1
 80163b4:	d005      	beq.n	80163c2 <_strtod_l+0x53a>
 80163b6:	9b04      	ldr	r3, [sp, #16]
 80163b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163bc:	f7f2 f854 	bl	8008468 <__aeabi_dmul>
 80163c0:	2301      	movs	r3, #1
 80163c2:	9a04      	ldr	r2, [sp, #16]
 80163c4:	3208      	adds	r2, #8
 80163c6:	f109 0901 	add.w	r9, r9, #1
 80163ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80163ce:	9204      	str	r2, [sp, #16]
 80163d0:	e7c9      	b.n	8016366 <_strtod_l+0x4de>
 80163d2:	d0ea      	beq.n	80163aa <_strtod_l+0x522>
 80163d4:	f1c8 0800 	rsb	r8, r8, #0
 80163d8:	f018 020f 	ands.w	r2, r8, #15
 80163dc:	d00a      	beq.n	80163f4 <_strtod_l+0x56c>
 80163de:	4b13      	ldr	r3, [pc, #76]	; (801642c <_strtod_l+0x5a4>)
 80163e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163e4:	4650      	mov	r0, sl
 80163e6:	4659      	mov	r1, fp
 80163e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ec:	f7f2 f966 	bl	80086bc <__aeabi_ddiv>
 80163f0:	4682      	mov	sl, r0
 80163f2:	468b      	mov	fp, r1
 80163f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80163f8:	d0d7      	beq.n	80163aa <_strtod_l+0x522>
 80163fa:	f1b8 0f1f 	cmp.w	r8, #31
 80163fe:	dd1f      	ble.n	8016440 <_strtod_l+0x5b8>
 8016400:	2500      	movs	r5, #0
 8016402:	462e      	mov	r6, r5
 8016404:	9507      	str	r5, [sp, #28]
 8016406:	9505      	str	r5, [sp, #20]
 8016408:	2322      	movs	r3, #34	; 0x22
 801640a:	f04f 0a00 	mov.w	sl, #0
 801640e:	f04f 0b00 	mov.w	fp, #0
 8016412:	6023      	str	r3, [r4, #0]
 8016414:	e786      	b.n	8016324 <_strtod_l+0x49c>
 8016416:	bf00      	nop
 8016418:	0801a77d 	.word	0x0801a77d
 801641c:	0801a7bc 	.word	0x0801a7bc
 8016420:	0801a775 	.word	0x0801a775
 8016424:	0801a8fc 	.word	0x0801a8fc
 8016428:	0801ac2b 	.word	0x0801ac2b
 801642c:	0801aaf0 	.word	0x0801aaf0
 8016430:	0801aac8 	.word	0x0801aac8
 8016434:	7ff00000 	.word	0x7ff00000
 8016438:	7ca00000 	.word	0x7ca00000
 801643c:	7fefffff 	.word	0x7fefffff
 8016440:	f018 0310 	ands.w	r3, r8, #16
 8016444:	bf18      	it	ne
 8016446:	236a      	movne	r3, #106	; 0x6a
 8016448:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80167f8 <_strtod_l+0x970>
 801644c:	9304      	str	r3, [sp, #16]
 801644e:	4650      	mov	r0, sl
 8016450:	4659      	mov	r1, fp
 8016452:	2300      	movs	r3, #0
 8016454:	f018 0f01 	tst.w	r8, #1
 8016458:	d004      	beq.n	8016464 <_strtod_l+0x5dc>
 801645a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801645e:	f7f2 f803 	bl	8008468 <__aeabi_dmul>
 8016462:	2301      	movs	r3, #1
 8016464:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016468:	f109 0908 	add.w	r9, r9, #8
 801646c:	d1f2      	bne.n	8016454 <_strtod_l+0x5cc>
 801646e:	b10b      	cbz	r3, 8016474 <_strtod_l+0x5ec>
 8016470:	4682      	mov	sl, r0
 8016472:	468b      	mov	fp, r1
 8016474:	9b04      	ldr	r3, [sp, #16]
 8016476:	b1c3      	cbz	r3, 80164aa <_strtod_l+0x622>
 8016478:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801647c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016480:	2b00      	cmp	r3, #0
 8016482:	4659      	mov	r1, fp
 8016484:	dd11      	ble.n	80164aa <_strtod_l+0x622>
 8016486:	2b1f      	cmp	r3, #31
 8016488:	f340 8124 	ble.w	80166d4 <_strtod_l+0x84c>
 801648c:	2b34      	cmp	r3, #52	; 0x34
 801648e:	bfde      	ittt	le
 8016490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016494:	f04f 33ff 	movle.w	r3, #4294967295
 8016498:	fa03 f202 	lslle.w	r2, r3, r2
 801649c:	f04f 0a00 	mov.w	sl, #0
 80164a0:	bfcc      	ite	gt
 80164a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80164a6:	ea02 0b01 	andle.w	fp, r2, r1
 80164aa:	2200      	movs	r2, #0
 80164ac:	2300      	movs	r3, #0
 80164ae:	4650      	mov	r0, sl
 80164b0:	4659      	mov	r1, fp
 80164b2:	f7f2 fa41 	bl	8008938 <__aeabi_dcmpeq>
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d1a2      	bne.n	8016400 <_strtod_l+0x578>
 80164ba:	9b07      	ldr	r3, [sp, #28]
 80164bc:	9300      	str	r3, [sp, #0]
 80164be:	9908      	ldr	r1, [sp, #32]
 80164c0:	462b      	mov	r3, r5
 80164c2:	463a      	mov	r2, r7
 80164c4:	4620      	mov	r0, r4
 80164c6:	f002 f92d 	bl	8018724 <__s2b>
 80164ca:	9007      	str	r0, [sp, #28]
 80164cc:	2800      	cmp	r0, #0
 80164ce:	f43f af1f 	beq.w	8016310 <_strtod_l+0x488>
 80164d2:	9b05      	ldr	r3, [sp, #20]
 80164d4:	1b9e      	subs	r6, r3, r6
 80164d6:	9b06      	ldr	r3, [sp, #24]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	bfb4      	ite	lt
 80164dc:	4633      	movlt	r3, r6
 80164de:	2300      	movge	r3, #0
 80164e0:	930c      	str	r3, [sp, #48]	; 0x30
 80164e2:	9b06      	ldr	r3, [sp, #24]
 80164e4:	2500      	movs	r5, #0
 80164e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80164ea:	9312      	str	r3, [sp, #72]	; 0x48
 80164ec:	462e      	mov	r6, r5
 80164ee:	9b07      	ldr	r3, [sp, #28]
 80164f0:	4620      	mov	r0, r4
 80164f2:	6859      	ldr	r1, [r3, #4]
 80164f4:	f002 f86e 	bl	80185d4 <_Balloc>
 80164f8:	9005      	str	r0, [sp, #20]
 80164fa:	2800      	cmp	r0, #0
 80164fc:	f43f af0c 	beq.w	8016318 <_strtod_l+0x490>
 8016500:	9b07      	ldr	r3, [sp, #28]
 8016502:	691a      	ldr	r2, [r3, #16]
 8016504:	3202      	adds	r2, #2
 8016506:	f103 010c 	add.w	r1, r3, #12
 801650a:	0092      	lsls	r2, r2, #2
 801650c:	300c      	adds	r0, #12
 801650e:	f7fe fc75 	bl	8014dfc <memcpy>
 8016512:	ec4b ab10 	vmov	d0, sl, fp
 8016516:	aa1a      	add	r2, sp, #104	; 0x68
 8016518:	a919      	add	r1, sp, #100	; 0x64
 801651a:	4620      	mov	r0, r4
 801651c:	f002 fc48 	bl	8018db0 <__d2b>
 8016520:	ec4b ab18 	vmov	d8, sl, fp
 8016524:	9018      	str	r0, [sp, #96]	; 0x60
 8016526:	2800      	cmp	r0, #0
 8016528:	f43f aef6 	beq.w	8016318 <_strtod_l+0x490>
 801652c:	2101      	movs	r1, #1
 801652e:	4620      	mov	r0, r4
 8016530:	f002 f992 	bl	8018858 <__i2b>
 8016534:	4606      	mov	r6, r0
 8016536:	2800      	cmp	r0, #0
 8016538:	f43f aeee 	beq.w	8016318 <_strtod_l+0x490>
 801653c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801653e:	9904      	ldr	r1, [sp, #16]
 8016540:	2b00      	cmp	r3, #0
 8016542:	bfab      	itete	ge
 8016544:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8016546:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8016548:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801654a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801654e:	bfac      	ite	ge
 8016550:	eb03 0902 	addge.w	r9, r3, r2
 8016554:	1ad7      	sublt	r7, r2, r3
 8016556:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016558:	eba3 0801 	sub.w	r8, r3, r1
 801655c:	4490      	add	r8, r2
 801655e:	4ba1      	ldr	r3, [pc, #644]	; (80167e4 <_strtod_l+0x95c>)
 8016560:	f108 38ff 	add.w	r8, r8, #4294967295
 8016564:	4598      	cmp	r8, r3
 8016566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801656a:	f280 80c7 	bge.w	80166fc <_strtod_l+0x874>
 801656e:	eba3 0308 	sub.w	r3, r3, r8
 8016572:	2b1f      	cmp	r3, #31
 8016574:	eba2 0203 	sub.w	r2, r2, r3
 8016578:	f04f 0101 	mov.w	r1, #1
 801657c:	f300 80b1 	bgt.w	80166e2 <_strtod_l+0x85a>
 8016580:	fa01 f303 	lsl.w	r3, r1, r3
 8016584:	930d      	str	r3, [sp, #52]	; 0x34
 8016586:	2300      	movs	r3, #0
 8016588:	9308      	str	r3, [sp, #32]
 801658a:	eb09 0802 	add.w	r8, r9, r2
 801658e:	9b04      	ldr	r3, [sp, #16]
 8016590:	45c1      	cmp	r9, r8
 8016592:	4417      	add	r7, r2
 8016594:	441f      	add	r7, r3
 8016596:	464b      	mov	r3, r9
 8016598:	bfa8      	it	ge
 801659a:	4643      	movge	r3, r8
 801659c:	42bb      	cmp	r3, r7
 801659e:	bfa8      	it	ge
 80165a0:	463b      	movge	r3, r7
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	bfc2      	ittt	gt
 80165a6:	eba8 0803 	subgt.w	r8, r8, r3
 80165aa:	1aff      	subgt	r7, r7, r3
 80165ac:	eba9 0903 	subgt.w	r9, r9, r3
 80165b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	dd17      	ble.n	80165e6 <_strtod_l+0x75e>
 80165b6:	4631      	mov	r1, r6
 80165b8:	461a      	mov	r2, r3
 80165ba:	4620      	mov	r0, r4
 80165bc:	f002 fa0c 	bl	80189d8 <__pow5mult>
 80165c0:	4606      	mov	r6, r0
 80165c2:	2800      	cmp	r0, #0
 80165c4:	f43f aea8 	beq.w	8016318 <_strtod_l+0x490>
 80165c8:	4601      	mov	r1, r0
 80165ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80165cc:	4620      	mov	r0, r4
 80165ce:	f002 f959 	bl	8018884 <__multiply>
 80165d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80165d4:	2800      	cmp	r0, #0
 80165d6:	f43f ae9f 	beq.w	8016318 <_strtod_l+0x490>
 80165da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165dc:	4620      	mov	r0, r4
 80165de:	f002 f839 	bl	8018654 <_Bfree>
 80165e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165e4:	9318      	str	r3, [sp, #96]	; 0x60
 80165e6:	f1b8 0f00 	cmp.w	r8, #0
 80165ea:	f300 808c 	bgt.w	8016706 <_strtod_l+0x87e>
 80165ee:	9b06      	ldr	r3, [sp, #24]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	dd08      	ble.n	8016606 <_strtod_l+0x77e>
 80165f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165f6:	9905      	ldr	r1, [sp, #20]
 80165f8:	4620      	mov	r0, r4
 80165fa:	f002 f9ed 	bl	80189d8 <__pow5mult>
 80165fe:	9005      	str	r0, [sp, #20]
 8016600:	2800      	cmp	r0, #0
 8016602:	f43f ae89 	beq.w	8016318 <_strtod_l+0x490>
 8016606:	2f00      	cmp	r7, #0
 8016608:	dd08      	ble.n	801661c <_strtod_l+0x794>
 801660a:	9905      	ldr	r1, [sp, #20]
 801660c:	463a      	mov	r2, r7
 801660e:	4620      	mov	r0, r4
 8016610:	f002 fa3c 	bl	8018a8c <__lshift>
 8016614:	9005      	str	r0, [sp, #20]
 8016616:	2800      	cmp	r0, #0
 8016618:	f43f ae7e 	beq.w	8016318 <_strtod_l+0x490>
 801661c:	f1b9 0f00 	cmp.w	r9, #0
 8016620:	dd08      	ble.n	8016634 <_strtod_l+0x7ac>
 8016622:	4631      	mov	r1, r6
 8016624:	464a      	mov	r2, r9
 8016626:	4620      	mov	r0, r4
 8016628:	f002 fa30 	bl	8018a8c <__lshift>
 801662c:	4606      	mov	r6, r0
 801662e:	2800      	cmp	r0, #0
 8016630:	f43f ae72 	beq.w	8016318 <_strtod_l+0x490>
 8016634:	9a05      	ldr	r2, [sp, #20]
 8016636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016638:	4620      	mov	r0, r4
 801663a:	f002 fab3 	bl	8018ba4 <__mdiff>
 801663e:	4605      	mov	r5, r0
 8016640:	2800      	cmp	r0, #0
 8016642:	f43f ae69 	beq.w	8016318 <_strtod_l+0x490>
 8016646:	68c3      	ldr	r3, [r0, #12]
 8016648:	930b      	str	r3, [sp, #44]	; 0x2c
 801664a:	2300      	movs	r3, #0
 801664c:	60c3      	str	r3, [r0, #12]
 801664e:	4631      	mov	r1, r6
 8016650:	f002 fa8c 	bl	8018b6c <__mcmp>
 8016654:	2800      	cmp	r0, #0
 8016656:	da60      	bge.n	801671a <_strtod_l+0x892>
 8016658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801665a:	ea53 030a 	orrs.w	r3, r3, sl
 801665e:	f040 8082 	bne.w	8016766 <_strtod_l+0x8de>
 8016662:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016666:	2b00      	cmp	r3, #0
 8016668:	d17d      	bne.n	8016766 <_strtod_l+0x8de>
 801666a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801666e:	0d1b      	lsrs	r3, r3, #20
 8016670:	051b      	lsls	r3, r3, #20
 8016672:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016676:	d976      	bls.n	8016766 <_strtod_l+0x8de>
 8016678:	696b      	ldr	r3, [r5, #20]
 801667a:	b913      	cbnz	r3, 8016682 <_strtod_l+0x7fa>
 801667c:	692b      	ldr	r3, [r5, #16]
 801667e:	2b01      	cmp	r3, #1
 8016680:	dd71      	ble.n	8016766 <_strtod_l+0x8de>
 8016682:	4629      	mov	r1, r5
 8016684:	2201      	movs	r2, #1
 8016686:	4620      	mov	r0, r4
 8016688:	f002 fa00 	bl	8018a8c <__lshift>
 801668c:	4631      	mov	r1, r6
 801668e:	4605      	mov	r5, r0
 8016690:	f002 fa6c 	bl	8018b6c <__mcmp>
 8016694:	2800      	cmp	r0, #0
 8016696:	dd66      	ble.n	8016766 <_strtod_l+0x8de>
 8016698:	9904      	ldr	r1, [sp, #16]
 801669a:	4a53      	ldr	r2, [pc, #332]	; (80167e8 <_strtod_l+0x960>)
 801669c:	465b      	mov	r3, fp
 801669e:	2900      	cmp	r1, #0
 80166a0:	f000 8081 	beq.w	80167a6 <_strtod_l+0x91e>
 80166a4:	ea02 010b 	and.w	r1, r2, fp
 80166a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80166ac:	dc7b      	bgt.n	80167a6 <_strtod_l+0x91e>
 80166ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80166b2:	f77f aea9 	ble.w	8016408 <_strtod_l+0x580>
 80166b6:	4b4d      	ldr	r3, [pc, #308]	; (80167ec <_strtod_l+0x964>)
 80166b8:	4650      	mov	r0, sl
 80166ba:	4659      	mov	r1, fp
 80166bc:	2200      	movs	r2, #0
 80166be:	f7f1 fed3 	bl	8008468 <__aeabi_dmul>
 80166c2:	460b      	mov	r3, r1
 80166c4:	4303      	orrs	r3, r0
 80166c6:	bf08      	it	eq
 80166c8:	2322      	moveq	r3, #34	; 0x22
 80166ca:	4682      	mov	sl, r0
 80166cc:	468b      	mov	fp, r1
 80166ce:	bf08      	it	eq
 80166d0:	6023      	streq	r3, [r4, #0]
 80166d2:	e62b      	b.n	801632c <_strtod_l+0x4a4>
 80166d4:	f04f 32ff 	mov.w	r2, #4294967295
 80166d8:	fa02 f303 	lsl.w	r3, r2, r3
 80166dc:	ea03 0a0a 	and.w	sl, r3, sl
 80166e0:	e6e3      	b.n	80164aa <_strtod_l+0x622>
 80166e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80166e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80166ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80166ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80166f2:	fa01 f308 	lsl.w	r3, r1, r8
 80166f6:	9308      	str	r3, [sp, #32]
 80166f8:	910d      	str	r1, [sp, #52]	; 0x34
 80166fa:	e746      	b.n	801658a <_strtod_l+0x702>
 80166fc:	2300      	movs	r3, #0
 80166fe:	9308      	str	r3, [sp, #32]
 8016700:	2301      	movs	r3, #1
 8016702:	930d      	str	r3, [sp, #52]	; 0x34
 8016704:	e741      	b.n	801658a <_strtod_l+0x702>
 8016706:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016708:	4642      	mov	r2, r8
 801670a:	4620      	mov	r0, r4
 801670c:	f002 f9be 	bl	8018a8c <__lshift>
 8016710:	9018      	str	r0, [sp, #96]	; 0x60
 8016712:	2800      	cmp	r0, #0
 8016714:	f47f af6b 	bne.w	80165ee <_strtod_l+0x766>
 8016718:	e5fe      	b.n	8016318 <_strtod_l+0x490>
 801671a:	465f      	mov	r7, fp
 801671c:	d16e      	bne.n	80167fc <_strtod_l+0x974>
 801671e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016724:	b342      	cbz	r2, 8016778 <_strtod_l+0x8f0>
 8016726:	4a32      	ldr	r2, [pc, #200]	; (80167f0 <_strtod_l+0x968>)
 8016728:	4293      	cmp	r3, r2
 801672a:	d128      	bne.n	801677e <_strtod_l+0x8f6>
 801672c:	9b04      	ldr	r3, [sp, #16]
 801672e:	4651      	mov	r1, sl
 8016730:	b1eb      	cbz	r3, 801676e <_strtod_l+0x8e6>
 8016732:	4b2d      	ldr	r3, [pc, #180]	; (80167e8 <_strtod_l+0x960>)
 8016734:	403b      	ands	r3, r7
 8016736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801673a:	f04f 32ff 	mov.w	r2, #4294967295
 801673e:	d819      	bhi.n	8016774 <_strtod_l+0x8ec>
 8016740:	0d1b      	lsrs	r3, r3, #20
 8016742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016746:	fa02 f303 	lsl.w	r3, r2, r3
 801674a:	4299      	cmp	r1, r3
 801674c:	d117      	bne.n	801677e <_strtod_l+0x8f6>
 801674e:	4b29      	ldr	r3, [pc, #164]	; (80167f4 <_strtod_l+0x96c>)
 8016750:	429f      	cmp	r7, r3
 8016752:	d102      	bne.n	801675a <_strtod_l+0x8d2>
 8016754:	3101      	adds	r1, #1
 8016756:	f43f addf 	beq.w	8016318 <_strtod_l+0x490>
 801675a:	4b23      	ldr	r3, [pc, #140]	; (80167e8 <_strtod_l+0x960>)
 801675c:	403b      	ands	r3, r7
 801675e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016762:	f04f 0a00 	mov.w	sl, #0
 8016766:	9b04      	ldr	r3, [sp, #16]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d1a4      	bne.n	80166b6 <_strtod_l+0x82e>
 801676c:	e5de      	b.n	801632c <_strtod_l+0x4a4>
 801676e:	f04f 33ff 	mov.w	r3, #4294967295
 8016772:	e7ea      	b.n	801674a <_strtod_l+0x8c2>
 8016774:	4613      	mov	r3, r2
 8016776:	e7e8      	b.n	801674a <_strtod_l+0x8c2>
 8016778:	ea53 030a 	orrs.w	r3, r3, sl
 801677c:	d08c      	beq.n	8016698 <_strtod_l+0x810>
 801677e:	9b08      	ldr	r3, [sp, #32]
 8016780:	b1db      	cbz	r3, 80167ba <_strtod_l+0x932>
 8016782:	423b      	tst	r3, r7
 8016784:	d0ef      	beq.n	8016766 <_strtod_l+0x8de>
 8016786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016788:	9a04      	ldr	r2, [sp, #16]
 801678a:	4650      	mov	r0, sl
 801678c:	4659      	mov	r1, fp
 801678e:	b1c3      	cbz	r3, 80167c2 <_strtod_l+0x93a>
 8016790:	f7ff fb5e 	bl	8015e50 <sulp>
 8016794:	4602      	mov	r2, r0
 8016796:	460b      	mov	r3, r1
 8016798:	ec51 0b18 	vmov	r0, r1, d8
 801679c:	f7f1 fcae 	bl	80080fc <__adddf3>
 80167a0:	4682      	mov	sl, r0
 80167a2:	468b      	mov	fp, r1
 80167a4:	e7df      	b.n	8016766 <_strtod_l+0x8de>
 80167a6:	4013      	ands	r3, r2
 80167a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80167ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80167b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80167b4:	f04f 3aff 	mov.w	sl, #4294967295
 80167b8:	e7d5      	b.n	8016766 <_strtod_l+0x8de>
 80167ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167bc:	ea13 0f0a 	tst.w	r3, sl
 80167c0:	e7e0      	b.n	8016784 <_strtod_l+0x8fc>
 80167c2:	f7ff fb45 	bl	8015e50 <sulp>
 80167c6:	4602      	mov	r2, r0
 80167c8:	460b      	mov	r3, r1
 80167ca:	ec51 0b18 	vmov	r0, r1, d8
 80167ce:	f7f1 fc93 	bl	80080f8 <__aeabi_dsub>
 80167d2:	2200      	movs	r2, #0
 80167d4:	2300      	movs	r3, #0
 80167d6:	4682      	mov	sl, r0
 80167d8:	468b      	mov	fp, r1
 80167da:	f7f2 f8ad 	bl	8008938 <__aeabi_dcmpeq>
 80167de:	2800      	cmp	r0, #0
 80167e0:	d0c1      	beq.n	8016766 <_strtod_l+0x8de>
 80167e2:	e611      	b.n	8016408 <_strtod_l+0x580>
 80167e4:	fffffc02 	.word	0xfffffc02
 80167e8:	7ff00000 	.word	0x7ff00000
 80167ec:	39500000 	.word	0x39500000
 80167f0:	000fffff 	.word	0x000fffff
 80167f4:	7fefffff 	.word	0x7fefffff
 80167f8:	0801a7d0 	.word	0x0801a7d0
 80167fc:	4631      	mov	r1, r6
 80167fe:	4628      	mov	r0, r5
 8016800:	f002 fb32 	bl	8018e68 <__ratio>
 8016804:	ec59 8b10 	vmov	r8, r9, d0
 8016808:	ee10 0a10 	vmov	r0, s0
 801680c:	2200      	movs	r2, #0
 801680e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016812:	4649      	mov	r1, r9
 8016814:	f7f2 f8a4 	bl	8008960 <__aeabi_dcmple>
 8016818:	2800      	cmp	r0, #0
 801681a:	d07a      	beq.n	8016912 <_strtod_l+0xa8a>
 801681c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801681e:	2b00      	cmp	r3, #0
 8016820:	d04a      	beq.n	80168b8 <_strtod_l+0xa30>
 8016822:	4b95      	ldr	r3, [pc, #596]	; (8016a78 <_strtod_l+0xbf0>)
 8016824:	2200      	movs	r2, #0
 8016826:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801682a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016a78 <_strtod_l+0xbf0>
 801682e:	f04f 0800 	mov.w	r8, #0
 8016832:	4b92      	ldr	r3, [pc, #584]	; (8016a7c <_strtod_l+0xbf4>)
 8016834:	403b      	ands	r3, r7
 8016836:	930d      	str	r3, [sp, #52]	; 0x34
 8016838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801683a:	4b91      	ldr	r3, [pc, #580]	; (8016a80 <_strtod_l+0xbf8>)
 801683c:	429a      	cmp	r2, r3
 801683e:	f040 80b0 	bne.w	80169a2 <_strtod_l+0xb1a>
 8016842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016846:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801684a:	ec4b ab10 	vmov	d0, sl, fp
 801684e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016852:	f002 fa31 	bl	8018cb8 <__ulp>
 8016856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801685a:	ec53 2b10 	vmov	r2, r3, d0
 801685e:	f7f1 fe03 	bl	8008468 <__aeabi_dmul>
 8016862:	4652      	mov	r2, sl
 8016864:	465b      	mov	r3, fp
 8016866:	f7f1 fc49 	bl	80080fc <__adddf3>
 801686a:	460b      	mov	r3, r1
 801686c:	4983      	ldr	r1, [pc, #524]	; (8016a7c <_strtod_l+0xbf4>)
 801686e:	4a85      	ldr	r2, [pc, #532]	; (8016a84 <_strtod_l+0xbfc>)
 8016870:	4019      	ands	r1, r3
 8016872:	4291      	cmp	r1, r2
 8016874:	4682      	mov	sl, r0
 8016876:	d960      	bls.n	801693a <_strtod_l+0xab2>
 8016878:	ee18 3a90 	vmov	r3, s17
 801687c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016880:	4293      	cmp	r3, r2
 8016882:	d104      	bne.n	801688e <_strtod_l+0xa06>
 8016884:	ee18 3a10 	vmov	r3, s16
 8016888:	3301      	adds	r3, #1
 801688a:	f43f ad45 	beq.w	8016318 <_strtod_l+0x490>
 801688e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8016a90 <_strtod_l+0xc08>
 8016892:	f04f 3aff 	mov.w	sl, #4294967295
 8016896:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016898:	4620      	mov	r0, r4
 801689a:	f001 fedb 	bl	8018654 <_Bfree>
 801689e:	9905      	ldr	r1, [sp, #20]
 80168a0:	4620      	mov	r0, r4
 80168a2:	f001 fed7 	bl	8018654 <_Bfree>
 80168a6:	4631      	mov	r1, r6
 80168a8:	4620      	mov	r0, r4
 80168aa:	f001 fed3 	bl	8018654 <_Bfree>
 80168ae:	4629      	mov	r1, r5
 80168b0:	4620      	mov	r0, r4
 80168b2:	f001 fecf 	bl	8018654 <_Bfree>
 80168b6:	e61a      	b.n	80164ee <_strtod_l+0x666>
 80168b8:	f1ba 0f00 	cmp.w	sl, #0
 80168bc:	d11b      	bne.n	80168f6 <_strtod_l+0xa6e>
 80168be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168c2:	b9f3      	cbnz	r3, 8016902 <_strtod_l+0xa7a>
 80168c4:	4b6c      	ldr	r3, [pc, #432]	; (8016a78 <_strtod_l+0xbf0>)
 80168c6:	2200      	movs	r2, #0
 80168c8:	4640      	mov	r0, r8
 80168ca:	4649      	mov	r1, r9
 80168cc:	f7f2 f83e 	bl	800894c <__aeabi_dcmplt>
 80168d0:	b9d0      	cbnz	r0, 8016908 <_strtod_l+0xa80>
 80168d2:	4640      	mov	r0, r8
 80168d4:	4649      	mov	r1, r9
 80168d6:	4b6c      	ldr	r3, [pc, #432]	; (8016a88 <_strtod_l+0xc00>)
 80168d8:	2200      	movs	r2, #0
 80168da:	f7f1 fdc5 	bl	8008468 <__aeabi_dmul>
 80168de:	4680      	mov	r8, r0
 80168e0:	4689      	mov	r9, r1
 80168e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80168e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80168ea:	9315      	str	r3, [sp, #84]	; 0x54
 80168ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80168f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80168f4:	e79d      	b.n	8016832 <_strtod_l+0x9aa>
 80168f6:	f1ba 0f01 	cmp.w	sl, #1
 80168fa:	d102      	bne.n	8016902 <_strtod_l+0xa7a>
 80168fc:	2f00      	cmp	r7, #0
 80168fe:	f43f ad83 	beq.w	8016408 <_strtod_l+0x580>
 8016902:	4b62      	ldr	r3, [pc, #392]	; (8016a8c <_strtod_l+0xc04>)
 8016904:	2200      	movs	r2, #0
 8016906:	e78e      	b.n	8016826 <_strtod_l+0x99e>
 8016908:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8016a88 <_strtod_l+0xc00>
 801690c:	f04f 0800 	mov.w	r8, #0
 8016910:	e7e7      	b.n	80168e2 <_strtod_l+0xa5a>
 8016912:	4b5d      	ldr	r3, [pc, #372]	; (8016a88 <_strtod_l+0xc00>)
 8016914:	4640      	mov	r0, r8
 8016916:	4649      	mov	r1, r9
 8016918:	2200      	movs	r2, #0
 801691a:	f7f1 fda5 	bl	8008468 <__aeabi_dmul>
 801691e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016920:	4680      	mov	r8, r0
 8016922:	4689      	mov	r9, r1
 8016924:	b933      	cbnz	r3, 8016934 <_strtod_l+0xaac>
 8016926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801692a:	900e      	str	r0, [sp, #56]	; 0x38
 801692c:	930f      	str	r3, [sp, #60]	; 0x3c
 801692e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016932:	e7dd      	b.n	80168f0 <_strtod_l+0xa68>
 8016934:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8016938:	e7f9      	b.n	801692e <_strtod_l+0xaa6>
 801693a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801693e:	9b04      	ldr	r3, [sp, #16]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d1a8      	bne.n	8016896 <_strtod_l+0xa0e>
 8016944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801694a:	0d1b      	lsrs	r3, r3, #20
 801694c:	051b      	lsls	r3, r3, #20
 801694e:	429a      	cmp	r2, r3
 8016950:	d1a1      	bne.n	8016896 <_strtod_l+0xa0e>
 8016952:	4640      	mov	r0, r8
 8016954:	4649      	mov	r1, r9
 8016956:	f7f2 f8e7 	bl	8008b28 <__aeabi_d2lz>
 801695a:	f7f1 fd57 	bl	800840c <__aeabi_l2d>
 801695e:	4602      	mov	r2, r0
 8016960:	460b      	mov	r3, r1
 8016962:	4640      	mov	r0, r8
 8016964:	4649      	mov	r1, r9
 8016966:	f7f1 fbc7 	bl	80080f8 <__aeabi_dsub>
 801696a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801696c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016970:	ea43 030a 	orr.w	r3, r3, sl
 8016974:	4313      	orrs	r3, r2
 8016976:	4680      	mov	r8, r0
 8016978:	4689      	mov	r9, r1
 801697a:	d055      	beq.n	8016a28 <_strtod_l+0xba0>
 801697c:	a336      	add	r3, pc, #216	; (adr r3, 8016a58 <_strtod_l+0xbd0>)
 801697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016982:	f7f1 ffe3 	bl	800894c <__aeabi_dcmplt>
 8016986:	2800      	cmp	r0, #0
 8016988:	f47f acd0 	bne.w	801632c <_strtod_l+0x4a4>
 801698c:	a334      	add	r3, pc, #208	; (adr r3, 8016a60 <_strtod_l+0xbd8>)
 801698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016992:	4640      	mov	r0, r8
 8016994:	4649      	mov	r1, r9
 8016996:	f7f1 fff7 	bl	8008988 <__aeabi_dcmpgt>
 801699a:	2800      	cmp	r0, #0
 801699c:	f43f af7b 	beq.w	8016896 <_strtod_l+0xa0e>
 80169a0:	e4c4      	b.n	801632c <_strtod_l+0x4a4>
 80169a2:	9b04      	ldr	r3, [sp, #16]
 80169a4:	b333      	cbz	r3, 80169f4 <_strtod_l+0xb6c>
 80169a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80169ac:	d822      	bhi.n	80169f4 <_strtod_l+0xb6c>
 80169ae:	a32e      	add	r3, pc, #184	; (adr r3, 8016a68 <_strtod_l+0xbe0>)
 80169b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b4:	4640      	mov	r0, r8
 80169b6:	4649      	mov	r1, r9
 80169b8:	f7f1 ffd2 	bl	8008960 <__aeabi_dcmple>
 80169bc:	b1a0      	cbz	r0, 80169e8 <_strtod_l+0xb60>
 80169be:	4649      	mov	r1, r9
 80169c0:	4640      	mov	r0, r8
 80169c2:	f7f2 f829 	bl	8008a18 <__aeabi_d2uiz>
 80169c6:	2801      	cmp	r0, #1
 80169c8:	bf38      	it	cc
 80169ca:	2001      	movcc	r0, #1
 80169cc:	f7f1 fcd2 	bl	8008374 <__aeabi_ui2d>
 80169d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169d2:	4680      	mov	r8, r0
 80169d4:	4689      	mov	r9, r1
 80169d6:	bb23      	cbnz	r3, 8016a22 <_strtod_l+0xb9a>
 80169d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80169dc:	9010      	str	r0, [sp, #64]	; 0x40
 80169de:	9311      	str	r3, [sp, #68]	; 0x44
 80169e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80169e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80169e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80169f0:	1a9b      	subs	r3, r3, r2
 80169f2:	9309      	str	r3, [sp, #36]	; 0x24
 80169f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80169f8:	eeb0 0a48 	vmov.f32	s0, s16
 80169fc:	eef0 0a68 	vmov.f32	s1, s17
 8016a00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016a04:	f002 f958 	bl	8018cb8 <__ulp>
 8016a08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016a0c:	ec53 2b10 	vmov	r2, r3, d0
 8016a10:	f7f1 fd2a 	bl	8008468 <__aeabi_dmul>
 8016a14:	ec53 2b18 	vmov	r2, r3, d8
 8016a18:	f7f1 fb70 	bl	80080fc <__adddf3>
 8016a1c:	4682      	mov	sl, r0
 8016a1e:	468b      	mov	fp, r1
 8016a20:	e78d      	b.n	801693e <_strtod_l+0xab6>
 8016a22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8016a26:	e7db      	b.n	80169e0 <_strtod_l+0xb58>
 8016a28:	a311      	add	r3, pc, #68	; (adr r3, 8016a70 <_strtod_l+0xbe8>)
 8016a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2e:	f7f1 ff8d 	bl	800894c <__aeabi_dcmplt>
 8016a32:	e7b2      	b.n	801699a <_strtod_l+0xb12>
 8016a34:	2300      	movs	r3, #0
 8016a36:	930a      	str	r3, [sp, #40]	; 0x28
 8016a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a3c:	6013      	str	r3, [r2, #0]
 8016a3e:	f7ff ba6b 	b.w	8015f18 <_strtod_l+0x90>
 8016a42:	2a65      	cmp	r2, #101	; 0x65
 8016a44:	f43f ab5f 	beq.w	8016106 <_strtod_l+0x27e>
 8016a48:	2a45      	cmp	r2, #69	; 0x45
 8016a4a:	f43f ab5c 	beq.w	8016106 <_strtod_l+0x27e>
 8016a4e:	2301      	movs	r3, #1
 8016a50:	f7ff bb94 	b.w	801617c <_strtod_l+0x2f4>
 8016a54:	f3af 8000 	nop.w
 8016a58:	94a03595 	.word	0x94a03595
 8016a5c:	3fdfffff 	.word	0x3fdfffff
 8016a60:	35afe535 	.word	0x35afe535
 8016a64:	3fe00000 	.word	0x3fe00000
 8016a68:	ffc00000 	.word	0xffc00000
 8016a6c:	41dfffff 	.word	0x41dfffff
 8016a70:	94a03595 	.word	0x94a03595
 8016a74:	3fcfffff 	.word	0x3fcfffff
 8016a78:	3ff00000 	.word	0x3ff00000
 8016a7c:	7ff00000 	.word	0x7ff00000
 8016a80:	7fe00000 	.word	0x7fe00000
 8016a84:	7c9fffff 	.word	0x7c9fffff
 8016a88:	3fe00000 	.word	0x3fe00000
 8016a8c:	bff00000 	.word	0xbff00000
 8016a90:	7fefffff 	.word	0x7fefffff

08016a94 <_strtod_r>:
 8016a94:	4b01      	ldr	r3, [pc, #4]	; (8016a9c <_strtod_r+0x8>)
 8016a96:	f7ff b9f7 	b.w	8015e88 <_strtod_l>
 8016a9a:	bf00      	nop
 8016a9c:	20000090 	.word	0x20000090

08016aa0 <_strtol_l.constprop.0>:
 8016aa0:	2b01      	cmp	r3, #1
 8016aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aa6:	d001      	beq.n	8016aac <_strtol_l.constprop.0+0xc>
 8016aa8:	2b24      	cmp	r3, #36	; 0x24
 8016aaa:	d906      	bls.n	8016aba <_strtol_l.constprop.0+0x1a>
 8016aac:	f7fe f97c 	bl	8014da8 <__errno>
 8016ab0:	2316      	movs	r3, #22
 8016ab2:	6003      	str	r3, [r0, #0]
 8016ab4:	2000      	movs	r0, #0
 8016ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016ba0 <_strtol_l.constprop.0+0x100>
 8016abe:	460d      	mov	r5, r1
 8016ac0:	462e      	mov	r6, r5
 8016ac2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ac6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016aca:	f017 0708 	ands.w	r7, r7, #8
 8016ace:	d1f7      	bne.n	8016ac0 <_strtol_l.constprop.0+0x20>
 8016ad0:	2c2d      	cmp	r4, #45	; 0x2d
 8016ad2:	d132      	bne.n	8016b3a <_strtol_l.constprop.0+0x9a>
 8016ad4:	782c      	ldrb	r4, [r5, #0]
 8016ad6:	2701      	movs	r7, #1
 8016ad8:	1cb5      	adds	r5, r6, #2
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d05b      	beq.n	8016b96 <_strtol_l.constprop.0+0xf6>
 8016ade:	2b10      	cmp	r3, #16
 8016ae0:	d109      	bne.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016ae2:	2c30      	cmp	r4, #48	; 0x30
 8016ae4:	d107      	bne.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016ae6:	782c      	ldrb	r4, [r5, #0]
 8016ae8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016aec:	2c58      	cmp	r4, #88	; 0x58
 8016aee:	d14d      	bne.n	8016b8c <_strtol_l.constprop.0+0xec>
 8016af0:	786c      	ldrb	r4, [r5, #1]
 8016af2:	2310      	movs	r3, #16
 8016af4:	3502      	adds	r5, #2
 8016af6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016afa:	f108 38ff 	add.w	r8, r8, #4294967295
 8016afe:	f04f 0c00 	mov.w	ip, #0
 8016b02:	fbb8 f9f3 	udiv	r9, r8, r3
 8016b06:	4666      	mov	r6, ip
 8016b08:	fb03 8a19 	mls	sl, r3, r9, r8
 8016b0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016b10:	f1be 0f09 	cmp.w	lr, #9
 8016b14:	d816      	bhi.n	8016b44 <_strtol_l.constprop.0+0xa4>
 8016b16:	4674      	mov	r4, lr
 8016b18:	42a3      	cmp	r3, r4
 8016b1a:	dd24      	ble.n	8016b66 <_strtol_l.constprop.0+0xc6>
 8016b1c:	f1bc 0f00 	cmp.w	ip, #0
 8016b20:	db1e      	blt.n	8016b60 <_strtol_l.constprop.0+0xc0>
 8016b22:	45b1      	cmp	r9, r6
 8016b24:	d31c      	bcc.n	8016b60 <_strtol_l.constprop.0+0xc0>
 8016b26:	d101      	bne.n	8016b2c <_strtol_l.constprop.0+0x8c>
 8016b28:	45a2      	cmp	sl, r4
 8016b2a:	db19      	blt.n	8016b60 <_strtol_l.constprop.0+0xc0>
 8016b2c:	fb06 4603 	mla	r6, r6, r3, r4
 8016b30:	f04f 0c01 	mov.w	ip, #1
 8016b34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b38:	e7e8      	b.n	8016b0c <_strtol_l.constprop.0+0x6c>
 8016b3a:	2c2b      	cmp	r4, #43	; 0x2b
 8016b3c:	bf04      	itt	eq
 8016b3e:	782c      	ldrbeq	r4, [r5, #0]
 8016b40:	1cb5      	addeq	r5, r6, #2
 8016b42:	e7ca      	b.n	8016ada <_strtol_l.constprop.0+0x3a>
 8016b44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016b48:	f1be 0f19 	cmp.w	lr, #25
 8016b4c:	d801      	bhi.n	8016b52 <_strtol_l.constprop.0+0xb2>
 8016b4e:	3c37      	subs	r4, #55	; 0x37
 8016b50:	e7e2      	b.n	8016b18 <_strtol_l.constprop.0+0x78>
 8016b52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016b56:	f1be 0f19 	cmp.w	lr, #25
 8016b5a:	d804      	bhi.n	8016b66 <_strtol_l.constprop.0+0xc6>
 8016b5c:	3c57      	subs	r4, #87	; 0x57
 8016b5e:	e7db      	b.n	8016b18 <_strtol_l.constprop.0+0x78>
 8016b60:	f04f 3cff 	mov.w	ip, #4294967295
 8016b64:	e7e6      	b.n	8016b34 <_strtol_l.constprop.0+0x94>
 8016b66:	f1bc 0f00 	cmp.w	ip, #0
 8016b6a:	da05      	bge.n	8016b78 <_strtol_l.constprop.0+0xd8>
 8016b6c:	2322      	movs	r3, #34	; 0x22
 8016b6e:	6003      	str	r3, [r0, #0]
 8016b70:	4646      	mov	r6, r8
 8016b72:	b942      	cbnz	r2, 8016b86 <_strtol_l.constprop.0+0xe6>
 8016b74:	4630      	mov	r0, r6
 8016b76:	e79e      	b.n	8016ab6 <_strtol_l.constprop.0+0x16>
 8016b78:	b107      	cbz	r7, 8016b7c <_strtol_l.constprop.0+0xdc>
 8016b7a:	4276      	negs	r6, r6
 8016b7c:	2a00      	cmp	r2, #0
 8016b7e:	d0f9      	beq.n	8016b74 <_strtol_l.constprop.0+0xd4>
 8016b80:	f1bc 0f00 	cmp.w	ip, #0
 8016b84:	d000      	beq.n	8016b88 <_strtol_l.constprop.0+0xe8>
 8016b86:	1e69      	subs	r1, r5, #1
 8016b88:	6011      	str	r1, [r2, #0]
 8016b8a:	e7f3      	b.n	8016b74 <_strtol_l.constprop.0+0xd4>
 8016b8c:	2430      	movs	r4, #48	; 0x30
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d1b1      	bne.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016b92:	2308      	movs	r3, #8
 8016b94:	e7af      	b.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016b96:	2c30      	cmp	r4, #48	; 0x30
 8016b98:	d0a5      	beq.n	8016ae6 <_strtol_l.constprop.0+0x46>
 8016b9a:	230a      	movs	r3, #10
 8016b9c:	e7ab      	b.n	8016af6 <_strtol_l.constprop.0+0x56>
 8016b9e:	bf00      	nop
 8016ba0:	0801a7f9 	.word	0x0801a7f9

08016ba4 <_strtol_r>:
 8016ba4:	f7ff bf7c 	b.w	8016aa0 <_strtol_l.constprop.0>

08016ba8 <__swbuf_r>:
 8016ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016baa:	460e      	mov	r6, r1
 8016bac:	4614      	mov	r4, r2
 8016bae:	4605      	mov	r5, r0
 8016bb0:	b118      	cbz	r0, 8016bba <__swbuf_r+0x12>
 8016bb2:	6983      	ldr	r3, [r0, #24]
 8016bb4:	b90b      	cbnz	r3, 8016bba <__swbuf_r+0x12>
 8016bb6:	f001 f85d 	bl	8017c74 <__sinit>
 8016bba:	4b21      	ldr	r3, [pc, #132]	; (8016c40 <__swbuf_r+0x98>)
 8016bbc:	429c      	cmp	r4, r3
 8016bbe:	d12b      	bne.n	8016c18 <__swbuf_r+0x70>
 8016bc0:	686c      	ldr	r4, [r5, #4]
 8016bc2:	69a3      	ldr	r3, [r4, #24]
 8016bc4:	60a3      	str	r3, [r4, #8]
 8016bc6:	89a3      	ldrh	r3, [r4, #12]
 8016bc8:	071a      	lsls	r2, r3, #28
 8016bca:	d52f      	bpl.n	8016c2c <__swbuf_r+0x84>
 8016bcc:	6923      	ldr	r3, [r4, #16]
 8016bce:	b36b      	cbz	r3, 8016c2c <__swbuf_r+0x84>
 8016bd0:	6923      	ldr	r3, [r4, #16]
 8016bd2:	6820      	ldr	r0, [r4, #0]
 8016bd4:	1ac0      	subs	r0, r0, r3
 8016bd6:	6963      	ldr	r3, [r4, #20]
 8016bd8:	b2f6      	uxtb	r6, r6
 8016bda:	4283      	cmp	r3, r0
 8016bdc:	4637      	mov	r7, r6
 8016bde:	dc04      	bgt.n	8016bea <__swbuf_r+0x42>
 8016be0:	4621      	mov	r1, r4
 8016be2:	4628      	mov	r0, r5
 8016be4:	f000 ffa0 	bl	8017b28 <_fflush_r>
 8016be8:	bb30      	cbnz	r0, 8016c38 <__swbuf_r+0x90>
 8016bea:	68a3      	ldr	r3, [r4, #8]
 8016bec:	3b01      	subs	r3, #1
 8016bee:	60a3      	str	r3, [r4, #8]
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	1c5a      	adds	r2, r3, #1
 8016bf4:	6022      	str	r2, [r4, #0]
 8016bf6:	701e      	strb	r6, [r3, #0]
 8016bf8:	6963      	ldr	r3, [r4, #20]
 8016bfa:	3001      	adds	r0, #1
 8016bfc:	4283      	cmp	r3, r0
 8016bfe:	d004      	beq.n	8016c0a <__swbuf_r+0x62>
 8016c00:	89a3      	ldrh	r3, [r4, #12]
 8016c02:	07db      	lsls	r3, r3, #31
 8016c04:	d506      	bpl.n	8016c14 <__swbuf_r+0x6c>
 8016c06:	2e0a      	cmp	r6, #10
 8016c08:	d104      	bne.n	8016c14 <__swbuf_r+0x6c>
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	4628      	mov	r0, r5
 8016c0e:	f000 ff8b 	bl	8017b28 <_fflush_r>
 8016c12:	b988      	cbnz	r0, 8016c38 <__swbuf_r+0x90>
 8016c14:	4638      	mov	r0, r7
 8016c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c18:	4b0a      	ldr	r3, [pc, #40]	; (8016c44 <__swbuf_r+0x9c>)
 8016c1a:	429c      	cmp	r4, r3
 8016c1c:	d101      	bne.n	8016c22 <__swbuf_r+0x7a>
 8016c1e:	68ac      	ldr	r4, [r5, #8]
 8016c20:	e7cf      	b.n	8016bc2 <__swbuf_r+0x1a>
 8016c22:	4b09      	ldr	r3, [pc, #36]	; (8016c48 <__swbuf_r+0xa0>)
 8016c24:	429c      	cmp	r4, r3
 8016c26:	bf08      	it	eq
 8016c28:	68ec      	ldreq	r4, [r5, #12]
 8016c2a:	e7ca      	b.n	8016bc2 <__swbuf_r+0x1a>
 8016c2c:	4621      	mov	r1, r4
 8016c2e:	4628      	mov	r0, r5
 8016c30:	f000 f80c 	bl	8016c4c <__swsetup_r>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	d0cb      	beq.n	8016bd0 <__swbuf_r+0x28>
 8016c38:	f04f 37ff 	mov.w	r7, #4294967295
 8016c3c:	e7ea      	b.n	8016c14 <__swbuf_r+0x6c>
 8016c3e:	bf00      	nop
 8016c40:	0801a9ac 	.word	0x0801a9ac
 8016c44:	0801a9cc 	.word	0x0801a9cc
 8016c48:	0801a98c 	.word	0x0801a98c

08016c4c <__swsetup_r>:
 8016c4c:	4b32      	ldr	r3, [pc, #200]	; (8016d18 <__swsetup_r+0xcc>)
 8016c4e:	b570      	push	{r4, r5, r6, lr}
 8016c50:	681d      	ldr	r5, [r3, #0]
 8016c52:	4606      	mov	r6, r0
 8016c54:	460c      	mov	r4, r1
 8016c56:	b125      	cbz	r5, 8016c62 <__swsetup_r+0x16>
 8016c58:	69ab      	ldr	r3, [r5, #24]
 8016c5a:	b913      	cbnz	r3, 8016c62 <__swsetup_r+0x16>
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	f001 f809 	bl	8017c74 <__sinit>
 8016c62:	4b2e      	ldr	r3, [pc, #184]	; (8016d1c <__swsetup_r+0xd0>)
 8016c64:	429c      	cmp	r4, r3
 8016c66:	d10f      	bne.n	8016c88 <__swsetup_r+0x3c>
 8016c68:	686c      	ldr	r4, [r5, #4]
 8016c6a:	89a3      	ldrh	r3, [r4, #12]
 8016c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c70:	0719      	lsls	r1, r3, #28
 8016c72:	d42c      	bmi.n	8016cce <__swsetup_r+0x82>
 8016c74:	06dd      	lsls	r5, r3, #27
 8016c76:	d411      	bmi.n	8016c9c <__swsetup_r+0x50>
 8016c78:	2309      	movs	r3, #9
 8016c7a:	6033      	str	r3, [r6, #0]
 8016c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c80:	81a3      	strh	r3, [r4, #12]
 8016c82:	f04f 30ff 	mov.w	r0, #4294967295
 8016c86:	e03e      	b.n	8016d06 <__swsetup_r+0xba>
 8016c88:	4b25      	ldr	r3, [pc, #148]	; (8016d20 <__swsetup_r+0xd4>)
 8016c8a:	429c      	cmp	r4, r3
 8016c8c:	d101      	bne.n	8016c92 <__swsetup_r+0x46>
 8016c8e:	68ac      	ldr	r4, [r5, #8]
 8016c90:	e7eb      	b.n	8016c6a <__swsetup_r+0x1e>
 8016c92:	4b24      	ldr	r3, [pc, #144]	; (8016d24 <__swsetup_r+0xd8>)
 8016c94:	429c      	cmp	r4, r3
 8016c96:	bf08      	it	eq
 8016c98:	68ec      	ldreq	r4, [r5, #12]
 8016c9a:	e7e6      	b.n	8016c6a <__swsetup_r+0x1e>
 8016c9c:	0758      	lsls	r0, r3, #29
 8016c9e:	d512      	bpl.n	8016cc6 <__swsetup_r+0x7a>
 8016ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ca2:	b141      	cbz	r1, 8016cb6 <__swsetup_r+0x6a>
 8016ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ca8:	4299      	cmp	r1, r3
 8016caa:	d002      	beq.n	8016cb2 <__swsetup_r+0x66>
 8016cac:	4630      	mov	r0, r6
 8016cae:	f002 f969 	bl	8018f84 <_free_r>
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8016cb6:	89a3      	ldrh	r3, [r4, #12]
 8016cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016cbc:	81a3      	strh	r3, [r4, #12]
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	6063      	str	r3, [r4, #4]
 8016cc2:	6923      	ldr	r3, [r4, #16]
 8016cc4:	6023      	str	r3, [r4, #0]
 8016cc6:	89a3      	ldrh	r3, [r4, #12]
 8016cc8:	f043 0308 	orr.w	r3, r3, #8
 8016ccc:	81a3      	strh	r3, [r4, #12]
 8016cce:	6923      	ldr	r3, [r4, #16]
 8016cd0:	b94b      	cbnz	r3, 8016ce6 <__swsetup_r+0x9a>
 8016cd2:	89a3      	ldrh	r3, [r4, #12]
 8016cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016cdc:	d003      	beq.n	8016ce6 <__swsetup_r+0x9a>
 8016cde:	4621      	mov	r1, r4
 8016ce0:	4630      	mov	r0, r6
 8016ce2:	f001 fc1d 	bl	8018520 <__smakebuf_r>
 8016ce6:	89a0      	ldrh	r0, [r4, #12]
 8016ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016cec:	f010 0301 	ands.w	r3, r0, #1
 8016cf0:	d00a      	beq.n	8016d08 <__swsetup_r+0xbc>
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	60a3      	str	r3, [r4, #8]
 8016cf6:	6963      	ldr	r3, [r4, #20]
 8016cf8:	425b      	negs	r3, r3
 8016cfa:	61a3      	str	r3, [r4, #24]
 8016cfc:	6923      	ldr	r3, [r4, #16]
 8016cfe:	b943      	cbnz	r3, 8016d12 <__swsetup_r+0xc6>
 8016d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016d04:	d1ba      	bne.n	8016c7c <__swsetup_r+0x30>
 8016d06:	bd70      	pop	{r4, r5, r6, pc}
 8016d08:	0781      	lsls	r1, r0, #30
 8016d0a:	bf58      	it	pl
 8016d0c:	6963      	ldrpl	r3, [r4, #20]
 8016d0e:	60a3      	str	r3, [r4, #8]
 8016d10:	e7f4      	b.n	8016cfc <__swsetup_r+0xb0>
 8016d12:	2000      	movs	r0, #0
 8016d14:	e7f7      	b.n	8016d06 <__swsetup_r+0xba>
 8016d16:	bf00      	nop
 8016d18:	20000028 	.word	0x20000028
 8016d1c:	0801a9ac 	.word	0x0801a9ac
 8016d20:	0801a9cc 	.word	0x0801a9cc
 8016d24:	0801a98c 	.word	0x0801a98c

08016d28 <quorem>:
 8016d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d2c:	6903      	ldr	r3, [r0, #16]
 8016d2e:	690c      	ldr	r4, [r1, #16]
 8016d30:	42a3      	cmp	r3, r4
 8016d32:	4607      	mov	r7, r0
 8016d34:	f2c0 8081 	blt.w	8016e3a <quorem+0x112>
 8016d38:	3c01      	subs	r4, #1
 8016d3a:	f101 0814 	add.w	r8, r1, #20
 8016d3e:	f100 0514 	add.w	r5, r0, #20
 8016d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016d46:	9301      	str	r3, [sp, #4]
 8016d48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016d50:	3301      	adds	r3, #1
 8016d52:	429a      	cmp	r2, r3
 8016d54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016d58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016d5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016d60:	d331      	bcc.n	8016dc6 <quorem+0x9e>
 8016d62:	f04f 0e00 	mov.w	lr, #0
 8016d66:	4640      	mov	r0, r8
 8016d68:	46ac      	mov	ip, r5
 8016d6a:	46f2      	mov	sl, lr
 8016d6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8016d70:	b293      	uxth	r3, r2
 8016d72:	fb06 e303 	mla	r3, r6, r3, lr
 8016d76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016d7a:	b29b      	uxth	r3, r3
 8016d7c:	ebaa 0303 	sub.w	r3, sl, r3
 8016d80:	f8dc a000 	ldr.w	sl, [ip]
 8016d84:	0c12      	lsrs	r2, r2, #16
 8016d86:	fa13 f38a 	uxtah	r3, r3, sl
 8016d8a:	fb06 e202 	mla	r2, r6, r2, lr
 8016d8e:	9300      	str	r3, [sp, #0]
 8016d90:	9b00      	ldr	r3, [sp, #0]
 8016d92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016d96:	b292      	uxth	r2, r2
 8016d98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016da0:	f8bd 3000 	ldrh.w	r3, [sp]
 8016da4:	4581      	cmp	r9, r0
 8016da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016daa:	f84c 3b04 	str.w	r3, [ip], #4
 8016dae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016db2:	d2db      	bcs.n	8016d6c <quorem+0x44>
 8016db4:	f855 300b 	ldr.w	r3, [r5, fp]
 8016db8:	b92b      	cbnz	r3, 8016dc6 <quorem+0x9e>
 8016dba:	9b01      	ldr	r3, [sp, #4]
 8016dbc:	3b04      	subs	r3, #4
 8016dbe:	429d      	cmp	r5, r3
 8016dc0:	461a      	mov	r2, r3
 8016dc2:	d32e      	bcc.n	8016e22 <quorem+0xfa>
 8016dc4:	613c      	str	r4, [r7, #16]
 8016dc6:	4638      	mov	r0, r7
 8016dc8:	f001 fed0 	bl	8018b6c <__mcmp>
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	db24      	blt.n	8016e1a <quorem+0xf2>
 8016dd0:	3601      	adds	r6, #1
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	f04f 0c00 	mov.w	ip, #0
 8016dd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8016ddc:	f8d0 e000 	ldr.w	lr, [r0]
 8016de0:	b293      	uxth	r3, r2
 8016de2:	ebac 0303 	sub.w	r3, ip, r3
 8016de6:	0c12      	lsrs	r2, r2, #16
 8016de8:	fa13 f38e 	uxtah	r3, r3, lr
 8016dec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016df4:	b29b      	uxth	r3, r3
 8016df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016dfa:	45c1      	cmp	r9, r8
 8016dfc:	f840 3b04 	str.w	r3, [r0], #4
 8016e00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016e04:	d2e8      	bcs.n	8016dd8 <quorem+0xb0>
 8016e06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016e0e:	b922      	cbnz	r2, 8016e1a <quorem+0xf2>
 8016e10:	3b04      	subs	r3, #4
 8016e12:	429d      	cmp	r5, r3
 8016e14:	461a      	mov	r2, r3
 8016e16:	d30a      	bcc.n	8016e2e <quorem+0x106>
 8016e18:	613c      	str	r4, [r7, #16]
 8016e1a:	4630      	mov	r0, r6
 8016e1c:	b003      	add	sp, #12
 8016e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e22:	6812      	ldr	r2, [r2, #0]
 8016e24:	3b04      	subs	r3, #4
 8016e26:	2a00      	cmp	r2, #0
 8016e28:	d1cc      	bne.n	8016dc4 <quorem+0x9c>
 8016e2a:	3c01      	subs	r4, #1
 8016e2c:	e7c7      	b.n	8016dbe <quorem+0x96>
 8016e2e:	6812      	ldr	r2, [r2, #0]
 8016e30:	3b04      	subs	r3, #4
 8016e32:	2a00      	cmp	r2, #0
 8016e34:	d1f0      	bne.n	8016e18 <quorem+0xf0>
 8016e36:	3c01      	subs	r4, #1
 8016e38:	e7eb      	b.n	8016e12 <quorem+0xea>
 8016e3a:	2000      	movs	r0, #0
 8016e3c:	e7ee      	b.n	8016e1c <quorem+0xf4>
	...

08016e40 <_dtoa_r>:
 8016e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e44:	ed2d 8b04 	vpush	{d8-d9}
 8016e48:	ec57 6b10 	vmov	r6, r7, d0
 8016e4c:	b093      	sub	sp, #76	; 0x4c
 8016e4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016e50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016e54:	9106      	str	r1, [sp, #24]
 8016e56:	ee10 aa10 	vmov	sl, s0
 8016e5a:	4604      	mov	r4, r0
 8016e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8016e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8016e60:	46bb      	mov	fp, r7
 8016e62:	b975      	cbnz	r5, 8016e82 <_dtoa_r+0x42>
 8016e64:	2010      	movs	r0, #16
 8016e66:	f001 fb9b 	bl	80185a0 <malloc>
 8016e6a:	4602      	mov	r2, r0
 8016e6c:	6260      	str	r0, [r4, #36]	; 0x24
 8016e6e:	b920      	cbnz	r0, 8016e7a <_dtoa_r+0x3a>
 8016e70:	4ba7      	ldr	r3, [pc, #668]	; (8017110 <_dtoa_r+0x2d0>)
 8016e72:	21ea      	movs	r1, #234	; 0xea
 8016e74:	48a7      	ldr	r0, [pc, #668]	; (8017114 <_dtoa_r+0x2d4>)
 8016e76:	f003 f9dd 	bl	801a234 <__assert_func>
 8016e7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016e7e:	6005      	str	r5, [r0, #0]
 8016e80:	60c5      	str	r5, [r0, #12]
 8016e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e84:	6819      	ldr	r1, [r3, #0]
 8016e86:	b151      	cbz	r1, 8016e9e <_dtoa_r+0x5e>
 8016e88:	685a      	ldr	r2, [r3, #4]
 8016e8a:	604a      	str	r2, [r1, #4]
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	4093      	lsls	r3, r2
 8016e90:	608b      	str	r3, [r1, #8]
 8016e92:	4620      	mov	r0, r4
 8016e94:	f001 fbde 	bl	8018654 <_Bfree>
 8016e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	601a      	str	r2, [r3, #0]
 8016e9e:	1e3b      	subs	r3, r7, #0
 8016ea0:	bfaa      	itet	ge
 8016ea2:	2300      	movge	r3, #0
 8016ea4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016ea8:	f8c8 3000 	strge.w	r3, [r8]
 8016eac:	4b9a      	ldr	r3, [pc, #616]	; (8017118 <_dtoa_r+0x2d8>)
 8016eae:	bfbc      	itt	lt
 8016eb0:	2201      	movlt	r2, #1
 8016eb2:	f8c8 2000 	strlt.w	r2, [r8]
 8016eb6:	ea33 030b 	bics.w	r3, r3, fp
 8016eba:	d11b      	bne.n	8016ef4 <_dtoa_r+0xb4>
 8016ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ebe:	f242 730f 	movw	r3, #9999	; 0x270f
 8016ec2:	6013      	str	r3, [r2, #0]
 8016ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ec8:	4333      	orrs	r3, r6
 8016eca:	f000 8592 	beq.w	80179f2 <_dtoa_r+0xbb2>
 8016ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ed0:	b963      	cbnz	r3, 8016eec <_dtoa_r+0xac>
 8016ed2:	4b92      	ldr	r3, [pc, #584]	; (801711c <_dtoa_r+0x2dc>)
 8016ed4:	e022      	b.n	8016f1c <_dtoa_r+0xdc>
 8016ed6:	4b92      	ldr	r3, [pc, #584]	; (8017120 <_dtoa_r+0x2e0>)
 8016ed8:	9301      	str	r3, [sp, #4]
 8016eda:	3308      	adds	r3, #8
 8016edc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016ede:	6013      	str	r3, [r2, #0]
 8016ee0:	9801      	ldr	r0, [sp, #4]
 8016ee2:	b013      	add	sp, #76	; 0x4c
 8016ee4:	ecbd 8b04 	vpop	{d8-d9}
 8016ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eec:	4b8b      	ldr	r3, [pc, #556]	; (801711c <_dtoa_r+0x2dc>)
 8016eee:	9301      	str	r3, [sp, #4]
 8016ef0:	3303      	adds	r3, #3
 8016ef2:	e7f3      	b.n	8016edc <_dtoa_r+0x9c>
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	4650      	mov	r0, sl
 8016efa:	4659      	mov	r1, fp
 8016efc:	f7f1 fd1c 	bl	8008938 <__aeabi_dcmpeq>
 8016f00:	ec4b ab19 	vmov	d9, sl, fp
 8016f04:	4680      	mov	r8, r0
 8016f06:	b158      	cbz	r0, 8016f20 <_dtoa_r+0xe0>
 8016f08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f0a:	2301      	movs	r3, #1
 8016f0c:	6013      	str	r3, [r2, #0]
 8016f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	f000 856b 	beq.w	80179ec <_dtoa_r+0xbac>
 8016f16:	4883      	ldr	r0, [pc, #524]	; (8017124 <_dtoa_r+0x2e4>)
 8016f18:	6018      	str	r0, [r3, #0]
 8016f1a:	1e43      	subs	r3, r0, #1
 8016f1c:	9301      	str	r3, [sp, #4]
 8016f1e:	e7df      	b.n	8016ee0 <_dtoa_r+0xa0>
 8016f20:	ec4b ab10 	vmov	d0, sl, fp
 8016f24:	aa10      	add	r2, sp, #64	; 0x40
 8016f26:	a911      	add	r1, sp, #68	; 0x44
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f001 ff41 	bl	8018db0 <__d2b>
 8016f2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8016f32:	ee08 0a10 	vmov	s16, r0
 8016f36:	2d00      	cmp	r5, #0
 8016f38:	f000 8084 	beq.w	8017044 <_dtoa_r+0x204>
 8016f3c:	ee19 3a90 	vmov	r3, s19
 8016f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016f44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016f48:	4656      	mov	r6, sl
 8016f4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016f52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016f56:	4b74      	ldr	r3, [pc, #464]	; (8017128 <_dtoa_r+0x2e8>)
 8016f58:	2200      	movs	r2, #0
 8016f5a:	4630      	mov	r0, r6
 8016f5c:	4639      	mov	r1, r7
 8016f5e:	f7f1 f8cb 	bl	80080f8 <__aeabi_dsub>
 8016f62:	a365      	add	r3, pc, #404	; (adr r3, 80170f8 <_dtoa_r+0x2b8>)
 8016f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f68:	f7f1 fa7e 	bl	8008468 <__aeabi_dmul>
 8016f6c:	a364      	add	r3, pc, #400	; (adr r3, 8017100 <_dtoa_r+0x2c0>)
 8016f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f72:	f7f1 f8c3 	bl	80080fc <__adddf3>
 8016f76:	4606      	mov	r6, r0
 8016f78:	4628      	mov	r0, r5
 8016f7a:	460f      	mov	r7, r1
 8016f7c:	f7f1 fa0a 	bl	8008394 <__aeabi_i2d>
 8016f80:	a361      	add	r3, pc, #388	; (adr r3, 8017108 <_dtoa_r+0x2c8>)
 8016f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f86:	f7f1 fa6f 	bl	8008468 <__aeabi_dmul>
 8016f8a:	4602      	mov	r2, r0
 8016f8c:	460b      	mov	r3, r1
 8016f8e:	4630      	mov	r0, r6
 8016f90:	4639      	mov	r1, r7
 8016f92:	f7f1 f8b3 	bl	80080fc <__adddf3>
 8016f96:	4606      	mov	r6, r0
 8016f98:	460f      	mov	r7, r1
 8016f9a:	f7f1 fd15 	bl	80089c8 <__aeabi_d2iz>
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	9000      	str	r0, [sp, #0]
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	4630      	mov	r0, r6
 8016fa6:	4639      	mov	r1, r7
 8016fa8:	f7f1 fcd0 	bl	800894c <__aeabi_dcmplt>
 8016fac:	b150      	cbz	r0, 8016fc4 <_dtoa_r+0x184>
 8016fae:	9800      	ldr	r0, [sp, #0]
 8016fb0:	f7f1 f9f0 	bl	8008394 <__aeabi_i2d>
 8016fb4:	4632      	mov	r2, r6
 8016fb6:	463b      	mov	r3, r7
 8016fb8:	f7f1 fcbe 	bl	8008938 <__aeabi_dcmpeq>
 8016fbc:	b910      	cbnz	r0, 8016fc4 <_dtoa_r+0x184>
 8016fbe:	9b00      	ldr	r3, [sp, #0]
 8016fc0:	3b01      	subs	r3, #1
 8016fc2:	9300      	str	r3, [sp, #0]
 8016fc4:	9b00      	ldr	r3, [sp, #0]
 8016fc6:	2b16      	cmp	r3, #22
 8016fc8:	d85a      	bhi.n	8017080 <_dtoa_r+0x240>
 8016fca:	9a00      	ldr	r2, [sp, #0]
 8016fcc:	4b57      	ldr	r3, [pc, #348]	; (801712c <_dtoa_r+0x2ec>)
 8016fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd6:	ec51 0b19 	vmov	r0, r1, d9
 8016fda:	f7f1 fcb7 	bl	800894c <__aeabi_dcmplt>
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	d050      	beq.n	8017084 <_dtoa_r+0x244>
 8016fe2:	9b00      	ldr	r3, [sp, #0]
 8016fe4:	3b01      	subs	r3, #1
 8016fe6:	9300      	str	r3, [sp, #0]
 8016fe8:	2300      	movs	r3, #0
 8016fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fee:	1b5d      	subs	r5, r3, r5
 8016ff0:	1e6b      	subs	r3, r5, #1
 8016ff2:	9305      	str	r3, [sp, #20]
 8016ff4:	bf45      	ittet	mi
 8016ff6:	f1c5 0301 	rsbmi	r3, r5, #1
 8016ffa:	9304      	strmi	r3, [sp, #16]
 8016ffc:	2300      	movpl	r3, #0
 8016ffe:	2300      	movmi	r3, #0
 8017000:	bf4c      	ite	mi
 8017002:	9305      	strmi	r3, [sp, #20]
 8017004:	9304      	strpl	r3, [sp, #16]
 8017006:	9b00      	ldr	r3, [sp, #0]
 8017008:	2b00      	cmp	r3, #0
 801700a:	db3d      	blt.n	8017088 <_dtoa_r+0x248>
 801700c:	9b05      	ldr	r3, [sp, #20]
 801700e:	9a00      	ldr	r2, [sp, #0]
 8017010:	920a      	str	r2, [sp, #40]	; 0x28
 8017012:	4413      	add	r3, r2
 8017014:	9305      	str	r3, [sp, #20]
 8017016:	2300      	movs	r3, #0
 8017018:	9307      	str	r3, [sp, #28]
 801701a:	9b06      	ldr	r3, [sp, #24]
 801701c:	2b09      	cmp	r3, #9
 801701e:	f200 8089 	bhi.w	8017134 <_dtoa_r+0x2f4>
 8017022:	2b05      	cmp	r3, #5
 8017024:	bfc4      	itt	gt
 8017026:	3b04      	subgt	r3, #4
 8017028:	9306      	strgt	r3, [sp, #24]
 801702a:	9b06      	ldr	r3, [sp, #24]
 801702c:	f1a3 0302 	sub.w	r3, r3, #2
 8017030:	bfcc      	ite	gt
 8017032:	2500      	movgt	r5, #0
 8017034:	2501      	movle	r5, #1
 8017036:	2b03      	cmp	r3, #3
 8017038:	f200 8087 	bhi.w	801714a <_dtoa_r+0x30a>
 801703c:	e8df f003 	tbb	[pc, r3]
 8017040:	59383a2d 	.word	0x59383a2d
 8017044:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017048:	441d      	add	r5, r3
 801704a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801704e:	2b20      	cmp	r3, #32
 8017050:	bfc1      	itttt	gt
 8017052:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017056:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801705a:	fa0b f303 	lslgt.w	r3, fp, r3
 801705e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017062:	bfda      	itte	le
 8017064:	f1c3 0320 	rsble	r3, r3, #32
 8017068:	fa06 f003 	lslle.w	r0, r6, r3
 801706c:	4318      	orrgt	r0, r3
 801706e:	f7f1 f981 	bl	8008374 <__aeabi_ui2d>
 8017072:	2301      	movs	r3, #1
 8017074:	4606      	mov	r6, r0
 8017076:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801707a:	3d01      	subs	r5, #1
 801707c:	930e      	str	r3, [sp, #56]	; 0x38
 801707e:	e76a      	b.n	8016f56 <_dtoa_r+0x116>
 8017080:	2301      	movs	r3, #1
 8017082:	e7b2      	b.n	8016fea <_dtoa_r+0x1aa>
 8017084:	900b      	str	r0, [sp, #44]	; 0x2c
 8017086:	e7b1      	b.n	8016fec <_dtoa_r+0x1ac>
 8017088:	9b04      	ldr	r3, [sp, #16]
 801708a:	9a00      	ldr	r2, [sp, #0]
 801708c:	1a9b      	subs	r3, r3, r2
 801708e:	9304      	str	r3, [sp, #16]
 8017090:	4253      	negs	r3, r2
 8017092:	9307      	str	r3, [sp, #28]
 8017094:	2300      	movs	r3, #0
 8017096:	930a      	str	r3, [sp, #40]	; 0x28
 8017098:	e7bf      	b.n	801701a <_dtoa_r+0x1da>
 801709a:	2300      	movs	r3, #0
 801709c:	9308      	str	r3, [sp, #32]
 801709e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	dc55      	bgt.n	8017150 <_dtoa_r+0x310>
 80170a4:	2301      	movs	r3, #1
 80170a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80170aa:	461a      	mov	r2, r3
 80170ac:	9209      	str	r2, [sp, #36]	; 0x24
 80170ae:	e00c      	b.n	80170ca <_dtoa_r+0x28a>
 80170b0:	2301      	movs	r3, #1
 80170b2:	e7f3      	b.n	801709c <_dtoa_r+0x25c>
 80170b4:	2300      	movs	r3, #0
 80170b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170b8:	9308      	str	r3, [sp, #32]
 80170ba:	9b00      	ldr	r3, [sp, #0]
 80170bc:	4413      	add	r3, r2
 80170be:	9302      	str	r3, [sp, #8]
 80170c0:	3301      	adds	r3, #1
 80170c2:	2b01      	cmp	r3, #1
 80170c4:	9303      	str	r3, [sp, #12]
 80170c6:	bfb8      	it	lt
 80170c8:	2301      	movlt	r3, #1
 80170ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80170cc:	2200      	movs	r2, #0
 80170ce:	6042      	str	r2, [r0, #4]
 80170d0:	2204      	movs	r2, #4
 80170d2:	f102 0614 	add.w	r6, r2, #20
 80170d6:	429e      	cmp	r6, r3
 80170d8:	6841      	ldr	r1, [r0, #4]
 80170da:	d93d      	bls.n	8017158 <_dtoa_r+0x318>
 80170dc:	4620      	mov	r0, r4
 80170de:	f001 fa79 	bl	80185d4 <_Balloc>
 80170e2:	9001      	str	r0, [sp, #4]
 80170e4:	2800      	cmp	r0, #0
 80170e6:	d13b      	bne.n	8017160 <_dtoa_r+0x320>
 80170e8:	4b11      	ldr	r3, [pc, #68]	; (8017130 <_dtoa_r+0x2f0>)
 80170ea:	4602      	mov	r2, r0
 80170ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80170f0:	e6c0      	b.n	8016e74 <_dtoa_r+0x34>
 80170f2:	2301      	movs	r3, #1
 80170f4:	e7df      	b.n	80170b6 <_dtoa_r+0x276>
 80170f6:	bf00      	nop
 80170f8:	636f4361 	.word	0x636f4361
 80170fc:	3fd287a7 	.word	0x3fd287a7
 8017100:	8b60c8b3 	.word	0x8b60c8b3
 8017104:	3fc68a28 	.word	0x3fc68a28
 8017108:	509f79fb 	.word	0x509f79fb
 801710c:	3fd34413 	.word	0x3fd34413
 8017110:	0801a906 	.word	0x0801a906
 8017114:	0801a91d 	.word	0x0801a91d
 8017118:	7ff00000 	.word	0x7ff00000
 801711c:	0801a902 	.word	0x0801a902
 8017120:	0801a8f9 	.word	0x0801a8f9
 8017124:	0801abda 	.word	0x0801abda
 8017128:	3ff80000 	.word	0x3ff80000
 801712c:	0801aaf0 	.word	0x0801aaf0
 8017130:	0801a978 	.word	0x0801a978
 8017134:	2501      	movs	r5, #1
 8017136:	2300      	movs	r3, #0
 8017138:	9306      	str	r3, [sp, #24]
 801713a:	9508      	str	r5, [sp, #32]
 801713c:	f04f 33ff 	mov.w	r3, #4294967295
 8017140:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017144:	2200      	movs	r2, #0
 8017146:	2312      	movs	r3, #18
 8017148:	e7b0      	b.n	80170ac <_dtoa_r+0x26c>
 801714a:	2301      	movs	r3, #1
 801714c:	9308      	str	r3, [sp, #32]
 801714e:	e7f5      	b.n	801713c <_dtoa_r+0x2fc>
 8017150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017152:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017156:	e7b8      	b.n	80170ca <_dtoa_r+0x28a>
 8017158:	3101      	adds	r1, #1
 801715a:	6041      	str	r1, [r0, #4]
 801715c:	0052      	lsls	r2, r2, #1
 801715e:	e7b8      	b.n	80170d2 <_dtoa_r+0x292>
 8017160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017162:	9a01      	ldr	r2, [sp, #4]
 8017164:	601a      	str	r2, [r3, #0]
 8017166:	9b03      	ldr	r3, [sp, #12]
 8017168:	2b0e      	cmp	r3, #14
 801716a:	f200 809d 	bhi.w	80172a8 <_dtoa_r+0x468>
 801716e:	2d00      	cmp	r5, #0
 8017170:	f000 809a 	beq.w	80172a8 <_dtoa_r+0x468>
 8017174:	9b00      	ldr	r3, [sp, #0]
 8017176:	2b00      	cmp	r3, #0
 8017178:	dd32      	ble.n	80171e0 <_dtoa_r+0x3a0>
 801717a:	4ab7      	ldr	r2, [pc, #732]	; (8017458 <_dtoa_r+0x618>)
 801717c:	f003 030f 	and.w	r3, r3, #15
 8017180:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017184:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017188:	9b00      	ldr	r3, [sp, #0]
 801718a:	05d8      	lsls	r0, r3, #23
 801718c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8017190:	d516      	bpl.n	80171c0 <_dtoa_r+0x380>
 8017192:	4bb2      	ldr	r3, [pc, #712]	; (801745c <_dtoa_r+0x61c>)
 8017194:	ec51 0b19 	vmov	r0, r1, d9
 8017198:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801719c:	f7f1 fa8e 	bl	80086bc <__aeabi_ddiv>
 80171a0:	f007 070f 	and.w	r7, r7, #15
 80171a4:	4682      	mov	sl, r0
 80171a6:	468b      	mov	fp, r1
 80171a8:	2503      	movs	r5, #3
 80171aa:	4eac      	ldr	r6, [pc, #688]	; (801745c <_dtoa_r+0x61c>)
 80171ac:	b957      	cbnz	r7, 80171c4 <_dtoa_r+0x384>
 80171ae:	4642      	mov	r2, r8
 80171b0:	464b      	mov	r3, r9
 80171b2:	4650      	mov	r0, sl
 80171b4:	4659      	mov	r1, fp
 80171b6:	f7f1 fa81 	bl	80086bc <__aeabi_ddiv>
 80171ba:	4682      	mov	sl, r0
 80171bc:	468b      	mov	fp, r1
 80171be:	e028      	b.n	8017212 <_dtoa_r+0x3d2>
 80171c0:	2502      	movs	r5, #2
 80171c2:	e7f2      	b.n	80171aa <_dtoa_r+0x36a>
 80171c4:	07f9      	lsls	r1, r7, #31
 80171c6:	d508      	bpl.n	80171da <_dtoa_r+0x39a>
 80171c8:	4640      	mov	r0, r8
 80171ca:	4649      	mov	r1, r9
 80171cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80171d0:	f7f1 f94a 	bl	8008468 <__aeabi_dmul>
 80171d4:	3501      	adds	r5, #1
 80171d6:	4680      	mov	r8, r0
 80171d8:	4689      	mov	r9, r1
 80171da:	107f      	asrs	r7, r7, #1
 80171dc:	3608      	adds	r6, #8
 80171de:	e7e5      	b.n	80171ac <_dtoa_r+0x36c>
 80171e0:	f000 809b 	beq.w	801731a <_dtoa_r+0x4da>
 80171e4:	9b00      	ldr	r3, [sp, #0]
 80171e6:	4f9d      	ldr	r7, [pc, #628]	; (801745c <_dtoa_r+0x61c>)
 80171e8:	425e      	negs	r6, r3
 80171ea:	4b9b      	ldr	r3, [pc, #620]	; (8017458 <_dtoa_r+0x618>)
 80171ec:	f006 020f 	and.w	r2, r6, #15
 80171f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f8:	ec51 0b19 	vmov	r0, r1, d9
 80171fc:	f7f1 f934 	bl	8008468 <__aeabi_dmul>
 8017200:	1136      	asrs	r6, r6, #4
 8017202:	4682      	mov	sl, r0
 8017204:	468b      	mov	fp, r1
 8017206:	2300      	movs	r3, #0
 8017208:	2502      	movs	r5, #2
 801720a:	2e00      	cmp	r6, #0
 801720c:	d17a      	bne.n	8017304 <_dtoa_r+0x4c4>
 801720e:	2b00      	cmp	r3, #0
 8017210:	d1d3      	bne.n	80171ba <_dtoa_r+0x37a>
 8017212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017214:	2b00      	cmp	r3, #0
 8017216:	f000 8082 	beq.w	801731e <_dtoa_r+0x4de>
 801721a:	4b91      	ldr	r3, [pc, #580]	; (8017460 <_dtoa_r+0x620>)
 801721c:	2200      	movs	r2, #0
 801721e:	4650      	mov	r0, sl
 8017220:	4659      	mov	r1, fp
 8017222:	f7f1 fb93 	bl	800894c <__aeabi_dcmplt>
 8017226:	2800      	cmp	r0, #0
 8017228:	d079      	beq.n	801731e <_dtoa_r+0x4de>
 801722a:	9b03      	ldr	r3, [sp, #12]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d076      	beq.n	801731e <_dtoa_r+0x4de>
 8017230:	9b02      	ldr	r3, [sp, #8]
 8017232:	2b00      	cmp	r3, #0
 8017234:	dd36      	ble.n	80172a4 <_dtoa_r+0x464>
 8017236:	9b00      	ldr	r3, [sp, #0]
 8017238:	4650      	mov	r0, sl
 801723a:	4659      	mov	r1, fp
 801723c:	1e5f      	subs	r7, r3, #1
 801723e:	2200      	movs	r2, #0
 8017240:	4b88      	ldr	r3, [pc, #544]	; (8017464 <_dtoa_r+0x624>)
 8017242:	f7f1 f911 	bl	8008468 <__aeabi_dmul>
 8017246:	9e02      	ldr	r6, [sp, #8]
 8017248:	4682      	mov	sl, r0
 801724a:	468b      	mov	fp, r1
 801724c:	3501      	adds	r5, #1
 801724e:	4628      	mov	r0, r5
 8017250:	f7f1 f8a0 	bl	8008394 <__aeabi_i2d>
 8017254:	4652      	mov	r2, sl
 8017256:	465b      	mov	r3, fp
 8017258:	f7f1 f906 	bl	8008468 <__aeabi_dmul>
 801725c:	4b82      	ldr	r3, [pc, #520]	; (8017468 <_dtoa_r+0x628>)
 801725e:	2200      	movs	r2, #0
 8017260:	f7f0 ff4c 	bl	80080fc <__adddf3>
 8017264:	46d0      	mov	r8, sl
 8017266:	46d9      	mov	r9, fp
 8017268:	4682      	mov	sl, r0
 801726a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801726e:	2e00      	cmp	r6, #0
 8017270:	d158      	bne.n	8017324 <_dtoa_r+0x4e4>
 8017272:	4b7e      	ldr	r3, [pc, #504]	; (801746c <_dtoa_r+0x62c>)
 8017274:	2200      	movs	r2, #0
 8017276:	4640      	mov	r0, r8
 8017278:	4649      	mov	r1, r9
 801727a:	f7f0 ff3d 	bl	80080f8 <__aeabi_dsub>
 801727e:	4652      	mov	r2, sl
 8017280:	465b      	mov	r3, fp
 8017282:	4680      	mov	r8, r0
 8017284:	4689      	mov	r9, r1
 8017286:	f7f1 fb7f 	bl	8008988 <__aeabi_dcmpgt>
 801728a:	2800      	cmp	r0, #0
 801728c:	f040 8295 	bne.w	80177ba <_dtoa_r+0x97a>
 8017290:	4652      	mov	r2, sl
 8017292:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017296:	4640      	mov	r0, r8
 8017298:	4649      	mov	r1, r9
 801729a:	f7f1 fb57 	bl	800894c <__aeabi_dcmplt>
 801729e:	2800      	cmp	r0, #0
 80172a0:	f040 8289 	bne.w	80177b6 <_dtoa_r+0x976>
 80172a4:	ec5b ab19 	vmov	sl, fp, d9
 80172a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f2c0 8148 	blt.w	8017540 <_dtoa_r+0x700>
 80172b0:	9a00      	ldr	r2, [sp, #0]
 80172b2:	2a0e      	cmp	r2, #14
 80172b4:	f300 8144 	bgt.w	8017540 <_dtoa_r+0x700>
 80172b8:	4b67      	ldr	r3, [pc, #412]	; (8017458 <_dtoa_r+0x618>)
 80172ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80172be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80172c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	f280 80d5 	bge.w	8017474 <_dtoa_r+0x634>
 80172ca:	9b03      	ldr	r3, [sp, #12]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	f300 80d1 	bgt.w	8017474 <_dtoa_r+0x634>
 80172d2:	f040 826f 	bne.w	80177b4 <_dtoa_r+0x974>
 80172d6:	4b65      	ldr	r3, [pc, #404]	; (801746c <_dtoa_r+0x62c>)
 80172d8:	2200      	movs	r2, #0
 80172da:	4640      	mov	r0, r8
 80172dc:	4649      	mov	r1, r9
 80172de:	f7f1 f8c3 	bl	8008468 <__aeabi_dmul>
 80172e2:	4652      	mov	r2, sl
 80172e4:	465b      	mov	r3, fp
 80172e6:	f7f1 fb45 	bl	8008974 <__aeabi_dcmpge>
 80172ea:	9e03      	ldr	r6, [sp, #12]
 80172ec:	4637      	mov	r7, r6
 80172ee:	2800      	cmp	r0, #0
 80172f0:	f040 8245 	bne.w	801777e <_dtoa_r+0x93e>
 80172f4:	9d01      	ldr	r5, [sp, #4]
 80172f6:	2331      	movs	r3, #49	; 0x31
 80172f8:	f805 3b01 	strb.w	r3, [r5], #1
 80172fc:	9b00      	ldr	r3, [sp, #0]
 80172fe:	3301      	adds	r3, #1
 8017300:	9300      	str	r3, [sp, #0]
 8017302:	e240      	b.n	8017786 <_dtoa_r+0x946>
 8017304:	07f2      	lsls	r2, r6, #31
 8017306:	d505      	bpl.n	8017314 <_dtoa_r+0x4d4>
 8017308:	e9d7 2300 	ldrd	r2, r3, [r7]
 801730c:	f7f1 f8ac 	bl	8008468 <__aeabi_dmul>
 8017310:	3501      	adds	r5, #1
 8017312:	2301      	movs	r3, #1
 8017314:	1076      	asrs	r6, r6, #1
 8017316:	3708      	adds	r7, #8
 8017318:	e777      	b.n	801720a <_dtoa_r+0x3ca>
 801731a:	2502      	movs	r5, #2
 801731c:	e779      	b.n	8017212 <_dtoa_r+0x3d2>
 801731e:	9f00      	ldr	r7, [sp, #0]
 8017320:	9e03      	ldr	r6, [sp, #12]
 8017322:	e794      	b.n	801724e <_dtoa_r+0x40e>
 8017324:	9901      	ldr	r1, [sp, #4]
 8017326:	4b4c      	ldr	r3, [pc, #304]	; (8017458 <_dtoa_r+0x618>)
 8017328:	4431      	add	r1, r6
 801732a:	910d      	str	r1, [sp, #52]	; 0x34
 801732c:	9908      	ldr	r1, [sp, #32]
 801732e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017332:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017336:	2900      	cmp	r1, #0
 8017338:	d043      	beq.n	80173c2 <_dtoa_r+0x582>
 801733a:	494d      	ldr	r1, [pc, #308]	; (8017470 <_dtoa_r+0x630>)
 801733c:	2000      	movs	r0, #0
 801733e:	f7f1 f9bd 	bl	80086bc <__aeabi_ddiv>
 8017342:	4652      	mov	r2, sl
 8017344:	465b      	mov	r3, fp
 8017346:	f7f0 fed7 	bl	80080f8 <__aeabi_dsub>
 801734a:	9d01      	ldr	r5, [sp, #4]
 801734c:	4682      	mov	sl, r0
 801734e:	468b      	mov	fp, r1
 8017350:	4649      	mov	r1, r9
 8017352:	4640      	mov	r0, r8
 8017354:	f7f1 fb38 	bl	80089c8 <__aeabi_d2iz>
 8017358:	4606      	mov	r6, r0
 801735a:	f7f1 f81b 	bl	8008394 <__aeabi_i2d>
 801735e:	4602      	mov	r2, r0
 8017360:	460b      	mov	r3, r1
 8017362:	4640      	mov	r0, r8
 8017364:	4649      	mov	r1, r9
 8017366:	f7f0 fec7 	bl	80080f8 <__aeabi_dsub>
 801736a:	3630      	adds	r6, #48	; 0x30
 801736c:	f805 6b01 	strb.w	r6, [r5], #1
 8017370:	4652      	mov	r2, sl
 8017372:	465b      	mov	r3, fp
 8017374:	4680      	mov	r8, r0
 8017376:	4689      	mov	r9, r1
 8017378:	f7f1 fae8 	bl	800894c <__aeabi_dcmplt>
 801737c:	2800      	cmp	r0, #0
 801737e:	d163      	bne.n	8017448 <_dtoa_r+0x608>
 8017380:	4642      	mov	r2, r8
 8017382:	464b      	mov	r3, r9
 8017384:	4936      	ldr	r1, [pc, #216]	; (8017460 <_dtoa_r+0x620>)
 8017386:	2000      	movs	r0, #0
 8017388:	f7f0 feb6 	bl	80080f8 <__aeabi_dsub>
 801738c:	4652      	mov	r2, sl
 801738e:	465b      	mov	r3, fp
 8017390:	f7f1 fadc 	bl	800894c <__aeabi_dcmplt>
 8017394:	2800      	cmp	r0, #0
 8017396:	f040 80b5 	bne.w	8017504 <_dtoa_r+0x6c4>
 801739a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801739c:	429d      	cmp	r5, r3
 801739e:	d081      	beq.n	80172a4 <_dtoa_r+0x464>
 80173a0:	4b30      	ldr	r3, [pc, #192]	; (8017464 <_dtoa_r+0x624>)
 80173a2:	2200      	movs	r2, #0
 80173a4:	4650      	mov	r0, sl
 80173a6:	4659      	mov	r1, fp
 80173a8:	f7f1 f85e 	bl	8008468 <__aeabi_dmul>
 80173ac:	4b2d      	ldr	r3, [pc, #180]	; (8017464 <_dtoa_r+0x624>)
 80173ae:	4682      	mov	sl, r0
 80173b0:	468b      	mov	fp, r1
 80173b2:	4640      	mov	r0, r8
 80173b4:	4649      	mov	r1, r9
 80173b6:	2200      	movs	r2, #0
 80173b8:	f7f1 f856 	bl	8008468 <__aeabi_dmul>
 80173bc:	4680      	mov	r8, r0
 80173be:	4689      	mov	r9, r1
 80173c0:	e7c6      	b.n	8017350 <_dtoa_r+0x510>
 80173c2:	4650      	mov	r0, sl
 80173c4:	4659      	mov	r1, fp
 80173c6:	f7f1 f84f 	bl	8008468 <__aeabi_dmul>
 80173ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173cc:	9d01      	ldr	r5, [sp, #4]
 80173ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80173d0:	4682      	mov	sl, r0
 80173d2:	468b      	mov	fp, r1
 80173d4:	4649      	mov	r1, r9
 80173d6:	4640      	mov	r0, r8
 80173d8:	f7f1 faf6 	bl	80089c8 <__aeabi_d2iz>
 80173dc:	4606      	mov	r6, r0
 80173de:	f7f0 ffd9 	bl	8008394 <__aeabi_i2d>
 80173e2:	3630      	adds	r6, #48	; 0x30
 80173e4:	4602      	mov	r2, r0
 80173e6:	460b      	mov	r3, r1
 80173e8:	4640      	mov	r0, r8
 80173ea:	4649      	mov	r1, r9
 80173ec:	f7f0 fe84 	bl	80080f8 <__aeabi_dsub>
 80173f0:	f805 6b01 	strb.w	r6, [r5], #1
 80173f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173f6:	429d      	cmp	r5, r3
 80173f8:	4680      	mov	r8, r0
 80173fa:	4689      	mov	r9, r1
 80173fc:	f04f 0200 	mov.w	r2, #0
 8017400:	d124      	bne.n	801744c <_dtoa_r+0x60c>
 8017402:	4b1b      	ldr	r3, [pc, #108]	; (8017470 <_dtoa_r+0x630>)
 8017404:	4650      	mov	r0, sl
 8017406:	4659      	mov	r1, fp
 8017408:	f7f0 fe78 	bl	80080fc <__adddf3>
 801740c:	4602      	mov	r2, r0
 801740e:	460b      	mov	r3, r1
 8017410:	4640      	mov	r0, r8
 8017412:	4649      	mov	r1, r9
 8017414:	f7f1 fab8 	bl	8008988 <__aeabi_dcmpgt>
 8017418:	2800      	cmp	r0, #0
 801741a:	d173      	bne.n	8017504 <_dtoa_r+0x6c4>
 801741c:	4652      	mov	r2, sl
 801741e:	465b      	mov	r3, fp
 8017420:	4913      	ldr	r1, [pc, #76]	; (8017470 <_dtoa_r+0x630>)
 8017422:	2000      	movs	r0, #0
 8017424:	f7f0 fe68 	bl	80080f8 <__aeabi_dsub>
 8017428:	4602      	mov	r2, r0
 801742a:	460b      	mov	r3, r1
 801742c:	4640      	mov	r0, r8
 801742e:	4649      	mov	r1, r9
 8017430:	f7f1 fa8c 	bl	800894c <__aeabi_dcmplt>
 8017434:	2800      	cmp	r0, #0
 8017436:	f43f af35 	beq.w	80172a4 <_dtoa_r+0x464>
 801743a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801743c:	1e6b      	subs	r3, r5, #1
 801743e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017440:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017444:	2b30      	cmp	r3, #48	; 0x30
 8017446:	d0f8      	beq.n	801743a <_dtoa_r+0x5fa>
 8017448:	9700      	str	r7, [sp, #0]
 801744a:	e049      	b.n	80174e0 <_dtoa_r+0x6a0>
 801744c:	4b05      	ldr	r3, [pc, #20]	; (8017464 <_dtoa_r+0x624>)
 801744e:	f7f1 f80b 	bl	8008468 <__aeabi_dmul>
 8017452:	4680      	mov	r8, r0
 8017454:	4689      	mov	r9, r1
 8017456:	e7bd      	b.n	80173d4 <_dtoa_r+0x594>
 8017458:	0801aaf0 	.word	0x0801aaf0
 801745c:	0801aac8 	.word	0x0801aac8
 8017460:	3ff00000 	.word	0x3ff00000
 8017464:	40240000 	.word	0x40240000
 8017468:	401c0000 	.word	0x401c0000
 801746c:	40140000 	.word	0x40140000
 8017470:	3fe00000 	.word	0x3fe00000
 8017474:	9d01      	ldr	r5, [sp, #4]
 8017476:	4656      	mov	r6, sl
 8017478:	465f      	mov	r7, fp
 801747a:	4642      	mov	r2, r8
 801747c:	464b      	mov	r3, r9
 801747e:	4630      	mov	r0, r6
 8017480:	4639      	mov	r1, r7
 8017482:	f7f1 f91b 	bl	80086bc <__aeabi_ddiv>
 8017486:	f7f1 fa9f 	bl	80089c8 <__aeabi_d2iz>
 801748a:	4682      	mov	sl, r0
 801748c:	f7f0 ff82 	bl	8008394 <__aeabi_i2d>
 8017490:	4642      	mov	r2, r8
 8017492:	464b      	mov	r3, r9
 8017494:	f7f0 ffe8 	bl	8008468 <__aeabi_dmul>
 8017498:	4602      	mov	r2, r0
 801749a:	460b      	mov	r3, r1
 801749c:	4630      	mov	r0, r6
 801749e:	4639      	mov	r1, r7
 80174a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80174a4:	f7f0 fe28 	bl	80080f8 <__aeabi_dsub>
 80174a8:	f805 6b01 	strb.w	r6, [r5], #1
 80174ac:	9e01      	ldr	r6, [sp, #4]
 80174ae:	9f03      	ldr	r7, [sp, #12]
 80174b0:	1bae      	subs	r6, r5, r6
 80174b2:	42b7      	cmp	r7, r6
 80174b4:	4602      	mov	r2, r0
 80174b6:	460b      	mov	r3, r1
 80174b8:	d135      	bne.n	8017526 <_dtoa_r+0x6e6>
 80174ba:	f7f0 fe1f 	bl	80080fc <__adddf3>
 80174be:	4642      	mov	r2, r8
 80174c0:	464b      	mov	r3, r9
 80174c2:	4606      	mov	r6, r0
 80174c4:	460f      	mov	r7, r1
 80174c6:	f7f1 fa5f 	bl	8008988 <__aeabi_dcmpgt>
 80174ca:	b9d0      	cbnz	r0, 8017502 <_dtoa_r+0x6c2>
 80174cc:	4642      	mov	r2, r8
 80174ce:	464b      	mov	r3, r9
 80174d0:	4630      	mov	r0, r6
 80174d2:	4639      	mov	r1, r7
 80174d4:	f7f1 fa30 	bl	8008938 <__aeabi_dcmpeq>
 80174d8:	b110      	cbz	r0, 80174e0 <_dtoa_r+0x6a0>
 80174da:	f01a 0f01 	tst.w	sl, #1
 80174de:	d110      	bne.n	8017502 <_dtoa_r+0x6c2>
 80174e0:	4620      	mov	r0, r4
 80174e2:	ee18 1a10 	vmov	r1, s16
 80174e6:	f001 f8b5 	bl	8018654 <_Bfree>
 80174ea:	2300      	movs	r3, #0
 80174ec:	9800      	ldr	r0, [sp, #0]
 80174ee:	702b      	strb	r3, [r5, #0]
 80174f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174f2:	3001      	adds	r0, #1
 80174f4:	6018      	str	r0, [r3, #0]
 80174f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	f43f acf1 	beq.w	8016ee0 <_dtoa_r+0xa0>
 80174fe:	601d      	str	r5, [r3, #0]
 8017500:	e4ee      	b.n	8016ee0 <_dtoa_r+0xa0>
 8017502:	9f00      	ldr	r7, [sp, #0]
 8017504:	462b      	mov	r3, r5
 8017506:	461d      	mov	r5, r3
 8017508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801750c:	2a39      	cmp	r2, #57	; 0x39
 801750e:	d106      	bne.n	801751e <_dtoa_r+0x6de>
 8017510:	9a01      	ldr	r2, [sp, #4]
 8017512:	429a      	cmp	r2, r3
 8017514:	d1f7      	bne.n	8017506 <_dtoa_r+0x6c6>
 8017516:	9901      	ldr	r1, [sp, #4]
 8017518:	2230      	movs	r2, #48	; 0x30
 801751a:	3701      	adds	r7, #1
 801751c:	700a      	strb	r2, [r1, #0]
 801751e:	781a      	ldrb	r2, [r3, #0]
 8017520:	3201      	adds	r2, #1
 8017522:	701a      	strb	r2, [r3, #0]
 8017524:	e790      	b.n	8017448 <_dtoa_r+0x608>
 8017526:	4ba6      	ldr	r3, [pc, #664]	; (80177c0 <_dtoa_r+0x980>)
 8017528:	2200      	movs	r2, #0
 801752a:	f7f0 ff9d 	bl	8008468 <__aeabi_dmul>
 801752e:	2200      	movs	r2, #0
 8017530:	2300      	movs	r3, #0
 8017532:	4606      	mov	r6, r0
 8017534:	460f      	mov	r7, r1
 8017536:	f7f1 f9ff 	bl	8008938 <__aeabi_dcmpeq>
 801753a:	2800      	cmp	r0, #0
 801753c:	d09d      	beq.n	801747a <_dtoa_r+0x63a>
 801753e:	e7cf      	b.n	80174e0 <_dtoa_r+0x6a0>
 8017540:	9a08      	ldr	r2, [sp, #32]
 8017542:	2a00      	cmp	r2, #0
 8017544:	f000 80d7 	beq.w	80176f6 <_dtoa_r+0x8b6>
 8017548:	9a06      	ldr	r2, [sp, #24]
 801754a:	2a01      	cmp	r2, #1
 801754c:	f300 80ba 	bgt.w	80176c4 <_dtoa_r+0x884>
 8017550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017552:	2a00      	cmp	r2, #0
 8017554:	f000 80b2 	beq.w	80176bc <_dtoa_r+0x87c>
 8017558:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801755c:	9e07      	ldr	r6, [sp, #28]
 801755e:	9d04      	ldr	r5, [sp, #16]
 8017560:	9a04      	ldr	r2, [sp, #16]
 8017562:	441a      	add	r2, r3
 8017564:	9204      	str	r2, [sp, #16]
 8017566:	9a05      	ldr	r2, [sp, #20]
 8017568:	2101      	movs	r1, #1
 801756a:	441a      	add	r2, r3
 801756c:	4620      	mov	r0, r4
 801756e:	9205      	str	r2, [sp, #20]
 8017570:	f001 f972 	bl	8018858 <__i2b>
 8017574:	4607      	mov	r7, r0
 8017576:	2d00      	cmp	r5, #0
 8017578:	dd0c      	ble.n	8017594 <_dtoa_r+0x754>
 801757a:	9b05      	ldr	r3, [sp, #20]
 801757c:	2b00      	cmp	r3, #0
 801757e:	dd09      	ble.n	8017594 <_dtoa_r+0x754>
 8017580:	42ab      	cmp	r3, r5
 8017582:	9a04      	ldr	r2, [sp, #16]
 8017584:	bfa8      	it	ge
 8017586:	462b      	movge	r3, r5
 8017588:	1ad2      	subs	r2, r2, r3
 801758a:	9204      	str	r2, [sp, #16]
 801758c:	9a05      	ldr	r2, [sp, #20]
 801758e:	1aed      	subs	r5, r5, r3
 8017590:	1ad3      	subs	r3, r2, r3
 8017592:	9305      	str	r3, [sp, #20]
 8017594:	9b07      	ldr	r3, [sp, #28]
 8017596:	b31b      	cbz	r3, 80175e0 <_dtoa_r+0x7a0>
 8017598:	9b08      	ldr	r3, [sp, #32]
 801759a:	2b00      	cmp	r3, #0
 801759c:	f000 80af 	beq.w	80176fe <_dtoa_r+0x8be>
 80175a0:	2e00      	cmp	r6, #0
 80175a2:	dd13      	ble.n	80175cc <_dtoa_r+0x78c>
 80175a4:	4639      	mov	r1, r7
 80175a6:	4632      	mov	r2, r6
 80175a8:	4620      	mov	r0, r4
 80175aa:	f001 fa15 	bl	80189d8 <__pow5mult>
 80175ae:	ee18 2a10 	vmov	r2, s16
 80175b2:	4601      	mov	r1, r0
 80175b4:	4607      	mov	r7, r0
 80175b6:	4620      	mov	r0, r4
 80175b8:	f001 f964 	bl	8018884 <__multiply>
 80175bc:	ee18 1a10 	vmov	r1, s16
 80175c0:	4680      	mov	r8, r0
 80175c2:	4620      	mov	r0, r4
 80175c4:	f001 f846 	bl	8018654 <_Bfree>
 80175c8:	ee08 8a10 	vmov	s16, r8
 80175cc:	9b07      	ldr	r3, [sp, #28]
 80175ce:	1b9a      	subs	r2, r3, r6
 80175d0:	d006      	beq.n	80175e0 <_dtoa_r+0x7a0>
 80175d2:	ee18 1a10 	vmov	r1, s16
 80175d6:	4620      	mov	r0, r4
 80175d8:	f001 f9fe 	bl	80189d8 <__pow5mult>
 80175dc:	ee08 0a10 	vmov	s16, r0
 80175e0:	2101      	movs	r1, #1
 80175e2:	4620      	mov	r0, r4
 80175e4:	f001 f938 	bl	8018858 <__i2b>
 80175e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	4606      	mov	r6, r0
 80175ee:	f340 8088 	ble.w	8017702 <_dtoa_r+0x8c2>
 80175f2:	461a      	mov	r2, r3
 80175f4:	4601      	mov	r1, r0
 80175f6:	4620      	mov	r0, r4
 80175f8:	f001 f9ee 	bl	80189d8 <__pow5mult>
 80175fc:	9b06      	ldr	r3, [sp, #24]
 80175fe:	2b01      	cmp	r3, #1
 8017600:	4606      	mov	r6, r0
 8017602:	f340 8081 	ble.w	8017708 <_dtoa_r+0x8c8>
 8017606:	f04f 0800 	mov.w	r8, #0
 801760a:	6933      	ldr	r3, [r6, #16]
 801760c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017610:	6918      	ldr	r0, [r3, #16]
 8017612:	f001 f8d1 	bl	80187b8 <__hi0bits>
 8017616:	f1c0 0020 	rsb	r0, r0, #32
 801761a:	9b05      	ldr	r3, [sp, #20]
 801761c:	4418      	add	r0, r3
 801761e:	f010 001f 	ands.w	r0, r0, #31
 8017622:	f000 8092 	beq.w	801774a <_dtoa_r+0x90a>
 8017626:	f1c0 0320 	rsb	r3, r0, #32
 801762a:	2b04      	cmp	r3, #4
 801762c:	f340 808a 	ble.w	8017744 <_dtoa_r+0x904>
 8017630:	f1c0 001c 	rsb	r0, r0, #28
 8017634:	9b04      	ldr	r3, [sp, #16]
 8017636:	4403      	add	r3, r0
 8017638:	9304      	str	r3, [sp, #16]
 801763a:	9b05      	ldr	r3, [sp, #20]
 801763c:	4403      	add	r3, r0
 801763e:	4405      	add	r5, r0
 8017640:	9305      	str	r3, [sp, #20]
 8017642:	9b04      	ldr	r3, [sp, #16]
 8017644:	2b00      	cmp	r3, #0
 8017646:	dd07      	ble.n	8017658 <_dtoa_r+0x818>
 8017648:	ee18 1a10 	vmov	r1, s16
 801764c:	461a      	mov	r2, r3
 801764e:	4620      	mov	r0, r4
 8017650:	f001 fa1c 	bl	8018a8c <__lshift>
 8017654:	ee08 0a10 	vmov	s16, r0
 8017658:	9b05      	ldr	r3, [sp, #20]
 801765a:	2b00      	cmp	r3, #0
 801765c:	dd05      	ble.n	801766a <_dtoa_r+0x82a>
 801765e:	4631      	mov	r1, r6
 8017660:	461a      	mov	r2, r3
 8017662:	4620      	mov	r0, r4
 8017664:	f001 fa12 	bl	8018a8c <__lshift>
 8017668:	4606      	mov	r6, r0
 801766a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801766c:	2b00      	cmp	r3, #0
 801766e:	d06e      	beq.n	801774e <_dtoa_r+0x90e>
 8017670:	ee18 0a10 	vmov	r0, s16
 8017674:	4631      	mov	r1, r6
 8017676:	f001 fa79 	bl	8018b6c <__mcmp>
 801767a:	2800      	cmp	r0, #0
 801767c:	da67      	bge.n	801774e <_dtoa_r+0x90e>
 801767e:	9b00      	ldr	r3, [sp, #0]
 8017680:	3b01      	subs	r3, #1
 8017682:	ee18 1a10 	vmov	r1, s16
 8017686:	9300      	str	r3, [sp, #0]
 8017688:	220a      	movs	r2, #10
 801768a:	2300      	movs	r3, #0
 801768c:	4620      	mov	r0, r4
 801768e:	f001 f803 	bl	8018698 <__multadd>
 8017692:	9b08      	ldr	r3, [sp, #32]
 8017694:	ee08 0a10 	vmov	s16, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	f000 81b1 	beq.w	8017a00 <_dtoa_r+0xbc0>
 801769e:	2300      	movs	r3, #0
 80176a0:	4639      	mov	r1, r7
 80176a2:	220a      	movs	r2, #10
 80176a4:	4620      	mov	r0, r4
 80176a6:	f000 fff7 	bl	8018698 <__multadd>
 80176aa:	9b02      	ldr	r3, [sp, #8]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	4607      	mov	r7, r0
 80176b0:	f300 808e 	bgt.w	80177d0 <_dtoa_r+0x990>
 80176b4:	9b06      	ldr	r3, [sp, #24]
 80176b6:	2b02      	cmp	r3, #2
 80176b8:	dc51      	bgt.n	801775e <_dtoa_r+0x91e>
 80176ba:	e089      	b.n	80177d0 <_dtoa_r+0x990>
 80176bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80176c2:	e74b      	b.n	801755c <_dtoa_r+0x71c>
 80176c4:	9b03      	ldr	r3, [sp, #12]
 80176c6:	1e5e      	subs	r6, r3, #1
 80176c8:	9b07      	ldr	r3, [sp, #28]
 80176ca:	42b3      	cmp	r3, r6
 80176cc:	bfbf      	itttt	lt
 80176ce:	9b07      	ldrlt	r3, [sp, #28]
 80176d0:	9607      	strlt	r6, [sp, #28]
 80176d2:	1af2      	sublt	r2, r6, r3
 80176d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80176d6:	bfb6      	itet	lt
 80176d8:	189b      	addlt	r3, r3, r2
 80176da:	1b9e      	subge	r6, r3, r6
 80176dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80176de:	9b03      	ldr	r3, [sp, #12]
 80176e0:	bfb8      	it	lt
 80176e2:	2600      	movlt	r6, #0
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	bfb7      	itett	lt
 80176e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80176ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80176f0:	1a9d      	sublt	r5, r3, r2
 80176f2:	2300      	movlt	r3, #0
 80176f4:	e734      	b.n	8017560 <_dtoa_r+0x720>
 80176f6:	9e07      	ldr	r6, [sp, #28]
 80176f8:	9d04      	ldr	r5, [sp, #16]
 80176fa:	9f08      	ldr	r7, [sp, #32]
 80176fc:	e73b      	b.n	8017576 <_dtoa_r+0x736>
 80176fe:	9a07      	ldr	r2, [sp, #28]
 8017700:	e767      	b.n	80175d2 <_dtoa_r+0x792>
 8017702:	9b06      	ldr	r3, [sp, #24]
 8017704:	2b01      	cmp	r3, #1
 8017706:	dc18      	bgt.n	801773a <_dtoa_r+0x8fa>
 8017708:	f1ba 0f00 	cmp.w	sl, #0
 801770c:	d115      	bne.n	801773a <_dtoa_r+0x8fa>
 801770e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017712:	b993      	cbnz	r3, 801773a <_dtoa_r+0x8fa>
 8017714:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017718:	0d1b      	lsrs	r3, r3, #20
 801771a:	051b      	lsls	r3, r3, #20
 801771c:	b183      	cbz	r3, 8017740 <_dtoa_r+0x900>
 801771e:	9b04      	ldr	r3, [sp, #16]
 8017720:	3301      	adds	r3, #1
 8017722:	9304      	str	r3, [sp, #16]
 8017724:	9b05      	ldr	r3, [sp, #20]
 8017726:	3301      	adds	r3, #1
 8017728:	9305      	str	r3, [sp, #20]
 801772a:	f04f 0801 	mov.w	r8, #1
 801772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017730:	2b00      	cmp	r3, #0
 8017732:	f47f af6a 	bne.w	801760a <_dtoa_r+0x7ca>
 8017736:	2001      	movs	r0, #1
 8017738:	e76f      	b.n	801761a <_dtoa_r+0x7da>
 801773a:	f04f 0800 	mov.w	r8, #0
 801773e:	e7f6      	b.n	801772e <_dtoa_r+0x8ee>
 8017740:	4698      	mov	r8, r3
 8017742:	e7f4      	b.n	801772e <_dtoa_r+0x8ee>
 8017744:	f43f af7d 	beq.w	8017642 <_dtoa_r+0x802>
 8017748:	4618      	mov	r0, r3
 801774a:	301c      	adds	r0, #28
 801774c:	e772      	b.n	8017634 <_dtoa_r+0x7f4>
 801774e:	9b03      	ldr	r3, [sp, #12]
 8017750:	2b00      	cmp	r3, #0
 8017752:	dc37      	bgt.n	80177c4 <_dtoa_r+0x984>
 8017754:	9b06      	ldr	r3, [sp, #24]
 8017756:	2b02      	cmp	r3, #2
 8017758:	dd34      	ble.n	80177c4 <_dtoa_r+0x984>
 801775a:	9b03      	ldr	r3, [sp, #12]
 801775c:	9302      	str	r3, [sp, #8]
 801775e:	9b02      	ldr	r3, [sp, #8]
 8017760:	b96b      	cbnz	r3, 801777e <_dtoa_r+0x93e>
 8017762:	4631      	mov	r1, r6
 8017764:	2205      	movs	r2, #5
 8017766:	4620      	mov	r0, r4
 8017768:	f000 ff96 	bl	8018698 <__multadd>
 801776c:	4601      	mov	r1, r0
 801776e:	4606      	mov	r6, r0
 8017770:	ee18 0a10 	vmov	r0, s16
 8017774:	f001 f9fa 	bl	8018b6c <__mcmp>
 8017778:	2800      	cmp	r0, #0
 801777a:	f73f adbb 	bgt.w	80172f4 <_dtoa_r+0x4b4>
 801777e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017780:	9d01      	ldr	r5, [sp, #4]
 8017782:	43db      	mvns	r3, r3
 8017784:	9300      	str	r3, [sp, #0]
 8017786:	f04f 0800 	mov.w	r8, #0
 801778a:	4631      	mov	r1, r6
 801778c:	4620      	mov	r0, r4
 801778e:	f000 ff61 	bl	8018654 <_Bfree>
 8017792:	2f00      	cmp	r7, #0
 8017794:	f43f aea4 	beq.w	80174e0 <_dtoa_r+0x6a0>
 8017798:	f1b8 0f00 	cmp.w	r8, #0
 801779c:	d005      	beq.n	80177aa <_dtoa_r+0x96a>
 801779e:	45b8      	cmp	r8, r7
 80177a0:	d003      	beq.n	80177aa <_dtoa_r+0x96a>
 80177a2:	4641      	mov	r1, r8
 80177a4:	4620      	mov	r0, r4
 80177a6:	f000 ff55 	bl	8018654 <_Bfree>
 80177aa:	4639      	mov	r1, r7
 80177ac:	4620      	mov	r0, r4
 80177ae:	f000 ff51 	bl	8018654 <_Bfree>
 80177b2:	e695      	b.n	80174e0 <_dtoa_r+0x6a0>
 80177b4:	2600      	movs	r6, #0
 80177b6:	4637      	mov	r7, r6
 80177b8:	e7e1      	b.n	801777e <_dtoa_r+0x93e>
 80177ba:	9700      	str	r7, [sp, #0]
 80177bc:	4637      	mov	r7, r6
 80177be:	e599      	b.n	80172f4 <_dtoa_r+0x4b4>
 80177c0:	40240000 	.word	0x40240000
 80177c4:	9b08      	ldr	r3, [sp, #32]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	f000 80ca 	beq.w	8017960 <_dtoa_r+0xb20>
 80177cc:	9b03      	ldr	r3, [sp, #12]
 80177ce:	9302      	str	r3, [sp, #8]
 80177d0:	2d00      	cmp	r5, #0
 80177d2:	dd05      	ble.n	80177e0 <_dtoa_r+0x9a0>
 80177d4:	4639      	mov	r1, r7
 80177d6:	462a      	mov	r2, r5
 80177d8:	4620      	mov	r0, r4
 80177da:	f001 f957 	bl	8018a8c <__lshift>
 80177de:	4607      	mov	r7, r0
 80177e0:	f1b8 0f00 	cmp.w	r8, #0
 80177e4:	d05b      	beq.n	801789e <_dtoa_r+0xa5e>
 80177e6:	6879      	ldr	r1, [r7, #4]
 80177e8:	4620      	mov	r0, r4
 80177ea:	f000 fef3 	bl	80185d4 <_Balloc>
 80177ee:	4605      	mov	r5, r0
 80177f0:	b928      	cbnz	r0, 80177fe <_dtoa_r+0x9be>
 80177f2:	4b87      	ldr	r3, [pc, #540]	; (8017a10 <_dtoa_r+0xbd0>)
 80177f4:	4602      	mov	r2, r0
 80177f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80177fa:	f7ff bb3b 	b.w	8016e74 <_dtoa_r+0x34>
 80177fe:	693a      	ldr	r2, [r7, #16]
 8017800:	3202      	adds	r2, #2
 8017802:	0092      	lsls	r2, r2, #2
 8017804:	f107 010c 	add.w	r1, r7, #12
 8017808:	300c      	adds	r0, #12
 801780a:	f7fd faf7 	bl	8014dfc <memcpy>
 801780e:	2201      	movs	r2, #1
 8017810:	4629      	mov	r1, r5
 8017812:	4620      	mov	r0, r4
 8017814:	f001 f93a 	bl	8018a8c <__lshift>
 8017818:	9b01      	ldr	r3, [sp, #4]
 801781a:	f103 0901 	add.w	r9, r3, #1
 801781e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017822:	4413      	add	r3, r2
 8017824:	9305      	str	r3, [sp, #20]
 8017826:	f00a 0301 	and.w	r3, sl, #1
 801782a:	46b8      	mov	r8, r7
 801782c:	9304      	str	r3, [sp, #16]
 801782e:	4607      	mov	r7, r0
 8017830:	4631      	mov	r1, r6
 8017832:	ee18 0a10 	vmov	r0, s16
 8017836:	f7ff fa77 	bl	8016d28 <quorem>
 801783a:	4641      	mov	r1, r8
 801783c:	9002      	str	r0, [sp, #8]
 801783e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017842:	ee18 0a10 	vmov	r0, s16
 8017846:	f001 f991 	bl	8018b6c <__mcmp>
 801784a:	463a      	mov	r2, r7
 801784c:	9003      	str	r0, [sp, #12]
 801784e:	4631      	mov	r1, r6
 8017850:	4620      	mov	r0, r4
 8017852:	f001 f9a7 	bl	8018ba4 <__mdiff>
 8017856:	68c2      	ldr	r2, [r0, #12]
 8017858:	f109 3bff 	add.w	fp, r9, #4294967295
 801785c:	4605      	mov	r5, r0
 801785e:	bb02      	cbnz	r2, 80178a2 <_dtoa_r+0xa62>
 8017860:	4601      	mov	r1, r0
 8017862:	ee18 0a10 	vmov	r0, s16
 8017866:	f001 f981 	bl	8018b6c <__mcmp>
 801786a:	4602      	mov	r2, r0
 801786c:	4629      	mov	r1, r5
 801786e:	4620      	mov	r0, r4
 8017870:	9207      	str	r2, [sp, #28]
 8017872:	f000 feef 	bl	8018654 <_Bfree>
 8017876:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801787a:	ea43 0102 	orr.w	r1, r3, r2
 801787e:	9b04      	ldr	r3, [sp, #16]
 8017880:	430b      	orrs	r3, r1
 8017882:	464d      	mov	r5, r9
 8017884:	d10f      	bne.n	80178a6 <_dtoa_r+0xa66>
 8017886:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801788a:	d02a      	beq.n	80178e2 <_dtoa_r+0xaa2>
 801788c:	9b03      	ldr	r3, [sp, #12]
 801788e:	2b00      	cmp	r3, #0
 8017890:	dd02      	ble.n	8017898 <_dtoa_r+0xa58>
 8017892:	9b02      	ldr	r3, [sp, #8]
 8017894:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017898:	f88b a000 	strb.w	sl, [fp]
 801789c:	e775      	b.n	801778a <_dtoa_r+0x94a>
 801789e:	4638      	mov	r0, r7
 80178a0:	e7ba      	b.n	8017818 <_dtoa_r+0x9d8>
 80178a2:	2201      	movs	r2, #1
 80178a4:	e7e2      	b.n	801786c <_dtoa_r+0xa2c>
 80178a6:	9b03      	ldr	r3, [sp, #12]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	db04      	blt.n	80178b6 <_dtoa_r+0xa76>
 80178ac:	9906      	ldr	r1, [sp, #24]
 80178ae:	430b      	orrs	r3, r1
 80178b0:	9904      	ldr	r1, [sp, #16]
 80178b2:	430b      	orrs	r3, r1
 80178b4:	d122      	bne.n	80178fc <_dtoa_r+0xabc>
 80178b6:	2a00      	cmp	r2, #0
 80178b8:	ddee      	ble.n	8017898 <_dtoa_r+0xa58>
 80178ba:	ee18 1a10 	vmov	r1, s16
 80178be:	2201      	movs	r2, #1
 80178c0:	4620      	mov	r0, r4
 80178c2:	f001 f8e3 	bl	8018a8c <__lshift>
 80178c6:	4631      	mov	r1, r6
 80178c8:	ee08 0a10 	vmov	s16, r0
 80178cc:	f001 f94e 	bl	8018b6c <__mcmp>
 80178d0:	2800      	cmp	r0, #0
 80178d2:	dc03      	bgt.n	80178dc <_dtoa_r+0xa9c>
 80178d4:	d1e0      	bne.n	8017898 <_dtoa_r+0xa58>
 80178d6:	f01a 0f01 	tst.w	sl, #1
 80178da:	d0dd      	beq.n	8017898 <_dtoa_r+0xa58>
 80178dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80178e0:	d1d7      	bne.n	8017892 <_dtoa_r+0xa52>
 80178e2:	2339      	movs	r3, #57	; 0x39
 80178e4:	f88b 3000 	strb.w	r3, [fp]
 80178e8:	462b      	mov	r3, r5
 80178ea:	461d      	mov	r5, r3
 80178ec:	3b01      	subs	r3, #1
 80178ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80178f2:	2a39      	cmp	r2, #57	; 0x39
 80178f4:	d071      	beq.n	80179da <_dtoa_r+0xb9a>
 80178f6:	3201      	adds	r2, #1
 80178f8:	701a      	strb	r2, [r3, #0]
 80178fa:	e746      	b.n	801778a <_dtoa_r+0x94a>
 80178fc:	2a00      	cmp	r2, #0
 80178fe:	dd07      	ble.n	8017910 <_dtoa_r+0xad0>
 8017900:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017904:	d0ed      	beq.n	80178e2 <_dtoa_r+0xaa2>
 8017906:	f10a 0301 	add.w	r3, sl, #1
 801790a:	f88b 3000 	strb.w	r3, [fp]
 801790e:	e73c      	b.n	801778a <_dtoa_r+0x94a>
 8017910:	9b05      	ldr	r3, [sp, #20]
 8017912:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017916:	4599      	cmp	r9, r3
 8017918:	d047      	beq.n	80179aa <_dtoa_r+0xb6a>
 801791a:	ee18 1a10 	vmov	r1, s16
 801791e:	2300      	movs	r3, #0
 8017920:	220a      	movs	r2, #10
 8017922:	4620      	mov	r0, r4
 8017924:	f000 feb8 	bl	8018698 <__multadd>
 8017928:	45b8      	cmp	r8, r7
 801792a:	ee08 0a10 	vmov	s16, r0
 801792e:	f04f 0300 	mov.w	r3, #0
 8017932:	f04f 020a 	mov.w	r2, #10
 8017936:	4641      	mov	r1, r8
 8017938:	4620      	mov	r0, r4
 801793a:	d106      	bne.n	801794a <_dtoa_r+0xb0a>
 801793c:	f000 feac 	bl	8018698 <__multadd>
 8017940:	4680      	mov	r8, r0
 8017942:	4607      	mov	r7, r0
 8017944:	f109 0901 	add.w	r9, r9, #1
 8017948:	e772      	b.n	8017830 <_dtoa_r+0x9f0>
 801794a:	f000 fea5 	bl	8018698 <__multadd>
 801794e:	4639      	mov	r1, r7
 8017950:	4680      	mov	r8, r0
 8017952:	2300      	movs	r3, #0
 8017954:	220a      	movs	r2, #10
 8017956:	4620      	mov	r0, r4
 8017958:	f000 fe9e 	bl	8018698 <__multadd>
 801795c:	4607      	mov	r7, r0
 801795e:	e7f1      	b.n	8017944 <_dtoa_r+0xb04>
 8017960:	9b03      	ldr	r3, [sp, #12]
 8017962:	9302      	str	r3, [sp, #8]
 8017964:	9d01      	ldr	r5, [sp, #4]
 8017966:	ee18 0a10 	vmov	r0, s16
 801796a:	4631      	mov	r1, r6
 801796c:	f7ff f9dc 	bl	8016d28 <quorem>
 8017970:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017974:	9b01      	ldr	r3, [sp, #4]
 8017976:	f805 ab01 	strb.w	sl, [r5], #1
 801797a:	1aea      	subs	r2, r5, r3
 801797c:	9b02      	ldr	r3, [sp, #8]
 801797e:	4293      	cmp	r3, r2
 8017980:	dd09      	ble.n	8017996 <_dtoa_r+0xb56>
 8017982:	ee18 1a10 	vmov	r1, s16
 8017986:	2300      	movs	r3, #0
 8017988:	220a      	movs	r2, #10
 801798a:	4620      	mov	r0, r4
 801798c:	f000 fe84 	bl	8018698 <__multadd>
 8017990:	ee08 0a10 	vmov	s16, r0
 8017994:	e7e7      	b.n	8017966 <_dtoa_r+0xb26>
 8017996:	9b02      	ldr	r3, [sp, #8]
 8017998:	2b00      	cmp	r3, #0
 801799a:	bfc8      	it	gt
 801799c:	461d      	movgt	r5, r3
 801799e:	9b01      	ldr	r3, [sp, #4]
 80179a0:	bfd8      	it	le
 80179a2:	2501      	movle	r5, #1
 80179a4:	441d      	add	r5, r3
 80179a6:	f04f 0800 	mov.w	r8, #0
 80179aa:	ee18 1a10 	vmov	r1, s16
 80179ae:	2201      	movs	r2, #1
 80179b0:	4620      	mov	r0, r4
 80179b2:	f001 f86b 	bl	8018a8c <__lshift>
 80179b6:	4631      	mov	r1, r6
 80179b8:	ee08 0a10 	vmov	s16, r0
 80179bc:	f001 f8d6 	bl	8018b6c <__mcmp>
 80179c0:	2800      	cmp	r0, #0
 80179c2:	dc91      	bgt.n	80178e8 <_dtoa_r+0xaa8>
 80179c4:	d102      	bne.n	80179cc <_dtoa_r+0xb8c>
 80179c6:	f01a 0f01 	tst.w	sl, #1
 80179ca:	d18d      	bne.n	80178e8 <_dtoa_r+0xaa8>
 80179cc:	462b      	mov	r3, r5
 80179ce:	461d      	mov	r5, r3
 80179d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179d4:	2a30      	cmp	r2, #48	; 0x30
 80179d6:	d0fa      	beq.n	80179ce <_dtoa_r+0xb8e>
 80179d8:	e6d7      	b.n	801778a <_dtoa_r+0x94a>
 80179da:	9a01      	ldr	r2, [sp, #4]
 80179dc:	429a      	cmp	r2, r3
 80179de:	d184      	bne.n	80178ea <_dtoa_r+0xaaa>
 80179e0:	9b00      	ldr	r3, [sp, #0]
 80179e2:	3301      	adds	r3, #1
 80179e4:	9300      	str	r3, [sp, #0]
 80179e6:	2331      	movs	r3, #49	; 0x31
 80179e8:	7013      	strb	r3, [r2, #0]
 80179ea:	e6ce      	b.n	801778a <_dtoa_r+0x94a>
 80179ec:	4b09      	ldr	r3, [pc, #36]	; (8017a14 <_dtoa_r+0xbd4>)
 80179ee:	f7ff ba95 	b.w	8016f1c <_dtoa_r+0xdc>
 80179f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	f47f aa6e 	bne.w	8016ed6 <_dtoa_r+0x96>
 80179fa:	4b07      	ldr	r3, [pc, #28]	; (8017a18 <_dtoa_r+0xbd8>)
 80179fc:	f7ff ba8e 	b.w	8016f1c <_dtoa_r+0xdc>
 8017a00:	9b02      	ldr	r3, [sp, #8]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	dcae      	bgt.n	8017964 <_dtoa_r+0xb24>
 8017a06:	9b06      	ldr	r3, [sp, #24]
 8017a08:	2b02      	cmp	r3, #2
 8017a0a:	f73f aea8 	bgt.w	801775e <_dtoa_r+0x91e>
 8017a0e:	e7a9      	b.n	8017964 <_dtoa_r+0xb24>
 8017a10:	0801a978 	.word	0x0801a978
 8017a14:	0801abd9 	.word	0x0801abd9
 8017a18:	0801a8f9 	.word	0x0801a8f9

08017a1c <__sflush_r>:
 8017a1c:	898a      	ldrh	r2, [r1, #12]
 8017a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a22:	4605      	mov	r5, r0
 8017a24:	0710      	lsls	r0, r2, #28
 8017a26:	460c      	mov	r4, r1
 8017a28:	d458      	bmi.n	8017adc <__sflush_r+0xc0>
 8017a2a:	684b      	ldr	r3, [r1, #4]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	dc05      	bgt.n	8017a3c <__sflush_r+0x20>
 8017a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	dc02      	bgt.n	8017a3c <__sflush_r+0x20>
 8017a36:	2000      	movs	r0, #0
 8017a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a3e:	2e00      	cmp	r6, #0
 8017a40:	d0f9      	beq.n	8017a36 <__sflush_r+0x1a>
 8017a42:	2300      	movs	r3, #0
 8017a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a48:	682f      	ldr	r7, [r5, #0]
 8017a4a:	602b      	str	r3, [r5, #0]
 8017a4c:	d032      	beq.n	8017ab4 <__sflush_r+0x98>
 8017a4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a50:	89a3      	ldrh	r3, [r4, #12]
 8017a52:	075a      	lsls	r2, r3, #29
 8017a54:	d505      	bpl.n	8017a62 <__sflush_r+0x46>
 8017a56:	6863      	ldr	r3, [r4, #4]
 8017a58:	1ac0      	subs	r0, r0, r3
 8017a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a5c:	b10b      	cbz	r3, 8017a62 <__sflush_r+0x46>
 8017a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a60:	1ac0      	subs	r0, r0, r3
 8017a62:	2300      	movs	r3, #0
 8017a64:	4602      	mov	r2, r0
 8017a66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a68:	6a21      	ldr	r1, [r4, #32]
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	47b0      	blx	r6
 8017a6e:	1c43      	adds	r3, r0, #1
 8017a70:	89a3      	ldrh	r3, [r4, #12]
 8017a72:	d106      	bne.n	8017a82 <__sflush_r+0x66>
 8017a74:	6829      	ldr	r1, [r5, #0]
 8017a76:	291d      	cmp	r1, #29
 8017a78:	d82c      	bhi.n	8017ad4 <__sflush_r+0xb8>
 8017a7a:	4a2a      	ldr	r2, [pc, #168]	; (8017b24 <__sflush_r+0x108>)
 8017a7c:	40ca      	lsrs	r2, r1
 8017a7e:	07d6      	lsls	r6, r2, #31
 8017a80:	d528      	bpl.n	8017ad4 <__sflush_r+0xb8>
 8017a82:	2200      	movs	r2, #0
 8017a84:	6062      	str	r2, [r4, #4]
 8017a86:	04d9      	lsls	r1, r3, #19
 8017a88:	6922      	ldr	r2, [r4, #16]
 8017a8a:	6022      	str	r2, [r4, #0]
 8017a8c:	d504      	bpl.n	8017a98 <__sflush_r+0x7c>
 8017a8e:	1c42      	adds	r2, r0, #1
 8017a90:	d101      	bne.n	8017a96 <__sflush_r+0x7a>
 8017a92:	682b      	ldr	r3, [r5, #0]
 8017a94:	b903      	cbnz	r3, 8017a98 <__sflush_r+0x7c>
 8017a96:	6560      	str	r0, [r4, #84]	; 0x54
 8017a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a9a:	602f      	str	r7, [r5, #0]
 8017a9c:	2900      	cmp	r1, #0
 8017a9e:	d0ca      	beq.n	8017a36 <__sflush_r+0x1a>
 8017aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017aa4:	4299      	cmp	r1, r3
 8017aa6:	d002      	beq.n	8017aae <__sflush_r+0x92>
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	f001 fa6b 	bl	8018f84 <_free_r>
 8017aae:	2000      	movs	r0, #0
 8017ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8017ab2:	e7c1      	b.n	8017a38 <__sflush_r+0x1c>
 8017ab4:	6a21      	ldr	r1, [r4, #32]
 8017ab6:	2301      	movs	r3, #1
 8017ab8:	4628      	mov	r0, r5
 8017aba:	47b0      	blx	r6
 8017abc:	1c41      	adds	r1, r0, #1
 8017abe:	d1c7      	bne.n	8017a50 <__sflush_r+0x34>
 8017ac0:	682b      	ldr	r3, [r5, #0]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d0c4      	beq.n	8017a50 <__sflush_r+0x34>
 8017ac6:	2b1d      	cmp	r3, #29
 8017ac8:	d001      	beq.n	8017ace <__sflush_r+0xb2>
 8017aca:	2b16      	cmp	r3, #22
 8017acc:	d101      	bne.n	8017ad2 <__sflush_r+0xb6>
 8017ace:	602f      	str	r7, [r5, #0]
 8017ad0:	e7b1      	b.n	8017a36 <__sflush_r+0x1a>
 8017ad2:	89a3      	ldrh	r3, [r4, #12]
 8017ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ad8:	81a3      	strh	r3, [r4, #12]
 8017ada:	e7ad      	b.n	8017a38 <__sflush_r+0x1c>
 8017adc:	690f      	ldr	r7, [r1, #16]
 8017ade:	2f00      	cmp	r7, #0
 8017ae0:	d0a9      	beq.n	8017a36 <__sflush_r+0x1a>
 8017ae2:	0793      	lsls	r3, r2, #30
 8017ae4:	680e      	ldr	r6, [r1, #0]
 8017ae6:	bf08      	it	eq
 8017ae8:	694b      	ldreq	r3, [r1, #20]
 8017aea:	600f      	str	r7, [r1, #0]
 8017aec:	bf18      	it	ne
 8017aee:	2300      	movne	r3, #0
 8017af0:	eba6 0807 	sub.w	r8, r6, r7
 8017af4:	608b      	str	r3, [r1, #8]
 8017af6:	f1b8 0f00 	cmp.w	r8, #0
 8017afa:	dd9c      	ble.n	8017a36 <__sflush_r+0x1a>
 8017afc:	6a21      	ldr	r1, [r4, #32]
 8017afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017b00:	4643      	mov	r3, r8
 8017b02:	463a      	mov	r2, r7
 8017b04:	4628      	mov	r0, r5
 8017b06:	47b0      	blx	r6
 8017b08:	2800      	cmp	r0, #0
 8017b0a:	dc06      	bgt.n	8017b1a <__sflush_r+0xfe>
 8017b0c:	89a3      	ldrh	r3, [r4, #12]
 8017b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b12:	81a3      	strh	r3, [r4, #12]
 8017b14:	f04f 30ff 	mov.w	r0, #4294967295
 8017b18:	e78e      	b.n	8017a38 <__sflush_r+0x1c>
 8017b1a:	4407      	add	r7, r0
 8017b1c:	eba8 0800 	sub.w	r8, r8, r0
 8017b20:	e7e9      	b.n	8017af6 <__sflush_r+0xda>
 8017b22:	bf00      	nop
 8017b24:	20400001 	.word	0x20400001

08017b28 <_fflush_r>:
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	690b      	ldr	r3, [r1, #16]
 8017b2c:	4605      	mov	r5, r0
 8017b2e:	460c      	mov	r4, r1
 8017b30:	b913      	cbnz	r3, 8017b38 <_fflush_r+0x10>
 8017b32:	2500      	movs	r5, #0
 8017b34:	4628      	mov	r0, r5
 8017b36:	bd38      	pop	{r3, r4, r5, pc}
 8017b38:	b118      	cbz	r0, 8017b42 <_fflush_r+0x1a>
 8017b3a:	6983      	ldr	r3, [r0, #24]
 8017b3c:	b90b      	cbnz	r3, 8017b42 <_fflush_r+0x1a>
 8017b3e:	f000 f899 	bl	8017c74 <__sinit>
 8017b42:	4b14      	ldr	r3, [pc, #80]	; (8017b94 <_fflush_r+0x6c>)
 8017b44:	429c      	cmp	r4, r3
 8017b46:	d11b      	bne.n	8017b80 <_fflush_r+0x58>
 8017b48:	686c      	ldr	r4, [r5, #4]
 8017b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d0ef      	beq.n	8017b32 <_fflush_r+0xa>
 8017b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b54:	07d0      	lsls	r0, r2, #31
 8017b56:	d404      	bmi.n	8017b62 <_fflush_r+0x3a>
 8017b58:	0599      	lsls	r1, r3, #22
 8017b5a:	d402      	bmi.n	8017b62 <_fflush_r+0x3a>
 8017b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b5e:	f000 fcb8 	bl	80184d2 <__retarget_lock_acquire_recursive>
 8017b62:	4628      	mov	r0, r5
 8017b64:	4621      	mov	r1, r4
 8017b66:	f7ff ff59 	bl	8017a1c <__sflush_r>
 8017b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b6c:	07da      	lsls	r2, r3, #31
 8017b6e:	4605      	mov	r5, r0
 8017b70:	d4e0      	bmi.n	8017b34 <_fflush_r+0xc>
 8017b72:	89a3      	ldrh	r3, [r4, #12]
 8017b74:	059b      	lsls	r3, r3, #22
 8017b76:	d4dd      	bmi.n	8017b34 <_fflush_r+0xc>
 8017b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b7a:	f000 fcab 	bl	80184d4 <__retarget_lock_release_recursive>
 8017b7e:	e7d9      	b.n	8017b34 <_fflush_r+0xc>
 8017b80:	4b05      	ldr	r3, [pc, #20]	; (8017b98 <_fflush_r+0x70>)
 8017b82:	429c      	cmp	r4, r3
 8017b84:	d101      	bne.n	8017b8a <_fflush_r+0x62>
 8017b86:	68ac      	ldr	r4, [r5, #8]
 8017b88:	e7df      	b.n	8017b4a <_fflush_r+0x22>
 8017b8a:	4b04      	ldr	r3, [pc, #16]	; (8017b9c <_fflush_r+0x74>)
 8017b8c:	429c      	cmp	r4, r3
 8017b8e:	bf08      	it	eq
 8017b90:	68ec      	ldreq	r4, [r5, #12]
 8017b92:	e7da      	b.n	8017b4a <_fflush_r+0x22>
 8017b94:	0801a9ac 	.word	0x0801a9ac
 8017b98:	0801a9cc 	.word	0x0801a9cc
 8017b9c:	0801a98c 	.word	0x0801a98c

08017ba0 <fflush>:
 8017ba0:	4601      	mov	r1, r0
 8017ba2:	b920      	cbnz	r0, 8017bae <fflush+0xe>
 8017ba4:	4b04      	ldr	r3, [pc, #16]	; (8017bb8 <fflush+0x18>)
 8017ba6:	4905      	ldr	r1, [pc, #20]	; (8017bbc <fflush+0x1c>)
 8017ba8:	6818      	ldr	r0, [r3, #0]
 8017baa:	f000 b8fe 	b.w	8017daa <_fwalk_reent>
 8017bae:	4b04      	ldr	r3, [pc, #16]	; (8017bc0 <fflush+0x20>)
 8017bb0:	6818      	ldr	r0, [r3, #0]
 8017bb2:	f7ff bfb9 	b.w	8017b28 <_fflush_r>
 8017bb6:	bf00      	nop
 8017bb8:	0801a76c 	.word	0x0801a76c
 8017bbc:	08017b29 	.word	0x08017b29
 8017bc0:	20000028 	.word	0x20000028

08017bc4 <std>:
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	b510      	push	{r4, lr}
 8017bc8:	4604      	mov	r4, r0
 8017bca:	e9c0 3300 	strd	r3, r3, [r0]
 8017bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017bd2:	6083      	str	r3, [r0, #8]
 8017bd4:	8181      	strh	r1, [r0, #12]
 8017bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8017bd8:	81c2      	strh	r2, [r0, #14]
 8017bda:	6183      	str	r3, [r0, #24]
 8017bdc:	4619      	mov	r1, r3
 8017bde:	2208      	movs	r2, #8
 8017be0:	305c      	adds	r0, #92	; 0x5c
 8017be2:	f7fd f919 	bl	8014e18 <memset>
 8017be6:	4b05      	ldr	r3, [pc, #20]	; (8017bfc <std+0x38>)
 8017be8:	6263      	str	r3, [r4, #36]	; 0x24
 8017bea:	4b05      	ldr	r3, [pc, #20]	; (8017c00 <std+0x3c>)
 8017bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8017bee:	4b05      	ldr	r3, [pc, #20]	; (8017c04 <std+0x40>)
 8017bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017bf2:	4b05      	ldr	r3, [pc, #20]	; (8017c08 <std+0x44>)
 8017bf4:	6224      	str	r4, [r4, #32]
 8017bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8017bf8:	bd10      	pop	{r4, pc}
 8017bfa:	bf00      	nop
 8017bfc:	08019eb9 	.word	0x08019eb9
 8017c00:	08019edb 	.word	0x08019edb
 8017c04:	08019f13 	.word	0x08019f13
 8017c08:	08019f37 	.word	0x08019f37

08017c0c <_cleanup_r>:
 8017c0c:	4901      	ldr	r1, [pc, #4]	; (8017c14 <_cleanup_r+0x8>)
 8017c0e:	f000 b8cc 	b.w	8017daa <_fwalk_reent>
 8017c12:	bf00      	nop
 8017c14:	08017b29 	.word	0x08017b29

08017c18 <__sfmoreglue>:
 8017c18:	b570      	push	{r4, r5, r6, lr}
 8017c1a:	2268      	movs	r2, #104	; 0x68
 8017c1c:	1e4d      	subs	r5, r1, #1
 8017c1e:	4355      	muls	r5, r2
 8017c20:	460e      	mov	r6, r1
 8017c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017c26:	f001 fa19 	bl	801905c <_malloc_r>
 8017c2a:	4604      	mov	r4, r0
 8017c2c:	b140      	cbz	r0, 8017c40 <__sfmoreglue+0x28>
 8017c2e:	2100      	movs	r1, #0
 8017c30:	e9c0 1600 	strd	r1, r6, [r0]
 8017c34:	300c      	adds	r0, #12
 8017c36:	60a0      	str	r0, [r4, #8]
 8017c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017c3c:	f7fd f8ec 	bl	8014e18 <memset>
 8017c40:	4620      	mov	r0, r4
 8017c42:	bd70      	pop	{r4, r5, r6, pc}

08017c44 <__sfp_lock_acquire>:
 8017c44:	4801      	ldr	r0, [pc, #4]	; (8017c4c <__sfp_lock_acquire+0x8>)
 8017c46:	f000 bc44 	b.w	80184d2 <__retarget_lock_acquire_recursive>
 8017c4a:	bf00      	nop
 8017c4c:	20000c11 	.word	0x20000c11

08017c50 <__sfp_lock_release>:
 8017c50:	4801      	ldr	r0, [pc, #4]	; (8017c58 <__sfp_lock_release+0x8>)
 8017c52:	f000 bc3f 	b.w	80184d4 <__retarget_lock_release_recursive>
 8017c56:	bf00      	nop
 8017c58:	20000c11 	.word	0x20000c11

08017c5c <__sinit_lock_acquire>:
 8017c5c:	4801      	ldr	r0, [pc, #4]	; (8017c64 <__sinit_lock_acquire+0x8>)
 8017c5e:	f000 bc38 	b.w	80184d2 <__retarget_lock_acquire_recursive>
 8017c62:	bf00      	nop
 8017c64:	20000c12 	.word	0x20000c12

08017c68 <__sinit_lock_release>:
 8017c68:	4801      	ldr	r0, [pc, #4]	; (8017c70 <__sinit_lock_release+0x8>)
 8017c6a:	f000 bc33 	b.w	80184d4 <__retarget_lock_release_recursive>
 8017c6e:	bf00      	nop
 8017c70:	20000c12 	.word	0x20000c12

08017c74 <__sinit>:
 8017c74:	b510      	push	{r4, lr}
 8017c76:	4604      	mov	r4, r0
 8017c78:	f7ff fff0 	bl	8017c5c <__sinit_lock_acquire>
 8017c7c:	69a3      	ldr	r3, [r4, #24]
 8017c7e:	b11b      	cbz	r3, 8017c88 <__sinit+0x14>
 8017c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c84:	f7ff bff0 	b.w	8017c68 <__sinit_lock_release>
 8017c88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017c8c:	6523      	str	r3, [r4, #80]	; 0x50
 8017c8e:	4b13      	ldr	r3, [pc, #76]	; (8017cdc <__sinit+0x68>)
 8017c90:	4a13      	ldr	r2, [pc, #76]	; (8017ce0 <__sinit+0x6c>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	62a2      	str	r2, [r4, #40]	; 0x28
 8017c96:	42a3      	cmp	r3, r4
 8017c98:	bf04      	itt	eq
 8017c9a:	2301      	moveq	r3, #1
 8017c9c:	61a3      	streq	r3, [r4, #24]
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	f000 f820 	bl	8017ce4 <__sfp>
 8017ca4:	6060      	str	r0, [r4, #4]
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	f000 f81c 	bl	8017ce4 <__sfp>
 8017cac:	60a0      	str	r0, [r4, #8]
 8017cae:	4620      	mov	r0, r4
 8017cb0:	f000 f818 	bl	8017ce4 <__sfp>
 8017cb4:	2200      	movs	r2, #0
 8017cb6:	60e0      	str	r0, [r4, #12]
 8017cb8:	2104      	movs	r1, #4
 8017cba:	6860      	ldr	r0, [r4, #4]
 8017cbc:	f7ff ff82 	bl	8017bc4 <std>
 8017cc0:	68a0      	ldr	r0, [r4, #8]
 8017cc2:	2201      	movs	r2, #1
 8017cc4:	2109      	movs	r1, #9
 8017cc6:	f7ff ff7d 	bl	8017bc4 <std>
 8017cca:	68e0      	ldr	r0, [r4, #12]
 8017ccc:	2202      	movs	r2, #2
 8017cce:	2112      	movs	r1, #18
 8017cd0:	f7ff ff78 	bl	8017bc4 <std>
 8017cd4:	2301      	movs	r3, #1
 8017cd6:	61a3      	str	r3, [r4, #24]
 8017cd8:	e7d2      	b.n	8017c80 <__sinit+0xc>
 8017cda:	bf00      	nop
 8017cdc:	0801a76c 	.word	0x0801a76c
 8017ce0:	08017c0d 	.word	0x08017c0d

08017ce4 <__sfp>:
 8017ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ce6:	4607      	mov	r7, r0
 8017ce8:	f7ff ffac 	bl	8017c44 <__sfp_lock_acquire>
 8017cec:	4b1e      	ldr	r3, [pc, #120]	; (8017d68 <__sfp+0x84>)
 8017cee:	681e      	ldr	r6, [r3, #0]
 8017cf0:	69b3      	ldr	r3, [r6, #24]
 8017cf2:	b913      	cbnz	r3, 8017cfa <__sfp+0x16>
 8017cf4:	4630      	mov	r0, r6
 8017cf6:	f7ff ffbd 	bl	8017c74 <__sinit>
 8017cfa:	3648      	adds	r6, #72	; 0x48
 8017cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017d00:	3b01      	subs	r3, #1
 8017d02:	d503      	bpl.n	8017d0c <__sfp+0x28>
 8017d04:	6833      	ldr	r3, [r6, #0]
 8017d06:	b30b      	cbz	r3, 8017d4c <__sfp+0x68>
 8017d08:	6836      	ldr	r6, [r6, #0]
 8017d0a:	e7f7      	b.n	8017cfc <__sfp+0x18>
 8017d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017d10:	b9d5      	cbnz	r5, 8017d48 <__sfp+0x64>
 8017d12:	4b16      	ldr	r3, [pc, #88]	; (8017d6c <__sfp+0x88>)
 8017d14:	60e3      	str	r3, [r4, #12]
 8017d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017d1a:	6665      	str	r5, [r4, #100]	; 0x64
 8017d1c:	f000 fbd8 	bl	80184d0 <__retarget_lock_init_recursive>
 8017d20:	f7ff ff96 	bl	8017c50 <__sfp_lock_release>
 8017d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017d2c:	6025      	str	r5, [r4, #0]
 8017d2e:	61a5      	str	r5, [r4, #24]
 8017d30:	2208      	movs	r2, #8
 8017d32:	4629      	mov	r1, r5
 8017d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017d38:	f7fd f86e 	bl	8014e18 <memset>
 8017d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017d44:	4620      	mov	r0, r4
 8017d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d48:	3468      	adds	r4, #104	; 0x68
 8017d4a:	e7d9      	b.n	8017d00 <__sfp+0x1c>
 8017d4c:	2104      	movs	r1, #4
 8017d4e:	4638      	mov	r0, r7
 8017d50:	f7ff ff62 	bl	8017c18 <__sfmoreglue>
 8017d54:	4604      	mov	r4, r0
 8017d56:	6030      	str	r0, [r6, #0]
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	d1d5      	bne.n	8017d08 <__sfp+0x24>
 8017d5c:	f7ff ff78 	bl	8017c50 <__sfp_lock_release>
 8017d60:	230c      	movs	r3, #12
 8017d62:	603b      	str	r3, [r7, #0]
 8017d64:	e7ee      	b.n	8017d44 <__sfp+0x60>
 8017d66:	bf00      	nop
 8017d68:	0801a76c 	.word	0x0801a76c
 8017d6c:	ffff0001 	.word	0xffff0001

08017d70 <_fwalk>:
 8017d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d74:	460f      	mov	r7, r1
 8017d76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017d7a:	2600      	movs	r6, #0
 8017d7c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8017d80:	f1b8 0801 	subs.w	r8, r8, #1
 8017d84:	d505      	bpl.n	8017d92 <_fwalk+0x22>
 8017d86:	6824      	ldr	r4, [r4, #0]
 8017d88:	2c00      	cmp	r4, #0
 8017d8a:	d1f7      	bne.n	8017d7c <_fwalk+0xc>
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d92:	89ab      	ldrh	r3, [r5, #12]
 8017d94:	2b01      	cmp	r3, #1
 8017d96:	d906      	bls.n	8017da6 <_fwalk+0x36>
 8017d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	d002      	beq.n	8017da6 <_fwalk+0x36>
 8017da0:	4628      	mov	r0, r5
 8017da2:	47b8      	blx	r7
 8017da4:	4306      	orrs	r6, r0
 8017da6:	3568      	adds	r5, #104	; 0x68
 8017da8:	e7ea      	b.n	8017d80 <_fwalk+0x10>

08017daa <_fwalk_reent>:
 8017daa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017dae:	4606      	mov	r6, r0
 8017db0:	4688      	mov	r8, r1
 8017db2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017db6:	2700      	movs	r7, #0
 8017db8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017dbc:	f1b9 0901 	subs.w	r9, r9, #1
 8017dc0:	d505      	bpl.n	8017dce <_fwalk_reent+0x24>
 8017dc2:	6824      	ldr	r4, [r4, #0]
 8017dc4:	2c00      	cmp	r4, #0
 8017dc6:	d1f7      	bne.n	8017db8 <_fwalk_reent+0xe>
 8017dc8:	4638      	mov	r0, r7
 8017dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dce:	89ab      	ldrh	r3, [r5, #12]
 8017dd0:	2b01      	cmp	r3, #1
 8017dd2:	d907      	bls.n	8017de4 <_fwalk_reent+0x3a>
 8017dd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017dd8:	3301      	adds	r3, #1
 8017dda:	d003      	beq.n	8017de4 <_fwalk_reent+0x3a>
 8017ddc:	4629      	mov	r1, r5
 8017dde:	4630      	mov	r0, r6
 8017de0:	47c0      	blx	r8
 8017de2:	4307      	orrs	r7, r0
 8017de4:	3568      	adds	r5, #104	; 0x68
 8017de6:	e7e9      	b.n	8017dbc <_fwalk_reent+0x12>

08017de8 <rshift>:
 8017de8:	6903      	ldr	r3, [r0, #16]
 8017dea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017dee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017df2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017df6:	f100 0414 	add.w	r4, r0, #20
 8017dfa:	dd45      	ble.n	8017e88 <rshift+0xa0>
 8017dfc:	f011 011f 	ands.w	r1, r1, #31
 8017e00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017e04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017e08:	d10c      	bne.n	8017e24 <rshift+0x3c>
 8017e0a:	f100 0710 	add.w	r7, r0, #16
 8017e0e:	4629      	mov	r1, r5
 8017e10:	42b1      	cmp	r1, r6
 8017e12:	d334      	bcc.n	8017e7e <rshift+0x96>
 8017e14:	1a9b      	subs	r3, r3, r2
 8017e16:	009b      	lsls	r3, r3, #2
 8017e18:	1eea      	subs	r2, r5, #3
 8017e1a:	4296      	cmp	r6, r2
 8017e1c:	bf38      	it	cc
 8017e1e:	2300      	movcc	r3, #0
 8017e20:	4423      	add	r3, r4
 8017e22:	e015      	b.n	8017e50 <rshift+0x68>
 8017e24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017e28:	f1c1 0820 	rsb	r8, r1, #32
 8017e2c:	40cf      	lsrs	r7, r1
 8017e2e:	f105 0e04 	add.w	lr, r5, #4
 8017e32:	46a1      	mov	r9, r4
 8017e34:	4576      	cmp	r6, lr
 8017e36:	46f4      	mov	ip, lr
 8017e38:	d815      	bhi.n	8017e66 <rshift+0x7e>
 8017e3a:	1a9a      	subs	r2, r3, r2
 8017e3c:	0092      	lsls	r2, r2, #2
 8017e3e:	3a04      	subs	r2, #4
 8017e40:	3501      	adds	r5, #1
 8017e42:	42ae      	cmp	r6, r5
 8017e44:	bf38      	it	cc
 8017e46:	2200      	movcc	r2, #0
 8017e48:	18a3      	adds	r3, r4, r2
 8017e4a:	50a7      	str	r7, [r4, r2]
 8017e4c:	b107      	cbz	r7, 8017e50 <rshift+0x68>
 8017e4e:	3304      	adds	r3, #4
 8017e50:	1b1a      	subs	r2, r3, r4
 8017e52:	42a3      	cmp	r3, r4
 8017e54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017e58:	bf08      	it	eq
 8017e5a:	2300      	moveq	r3, #0
 8017e5c:	6102      	str	r2, [r0, #16]
 8017e5e:	bf08      	it	eq
 8017e60:	6143      	streq	r3, [r0, #20]
 8017e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e66:	f8dc c000 	ldr.w	ip, [ip]
 8017e6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8017e6e:	ea4c 0707 	orr.w	r7, ip, r7
 8017e72:	f849 7b04 	str.w	r7, [r9], #4
 8017e76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017e7a:	40cf      	lsrs	r7, r1
 8017e7c:	e7da      	b.n	8017e34 <rshift+0x4c>
 8017e7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017e82:	f847 cf04 	str.w	ip, [r7, #4]!
 8017e86:	e7c3      	b.n	8017e10 <rshift+0x28>
 8017e88:	4623      	mov	r3, r4
 8017e8a:	e7e1      	b.n	8017e50 <rshift+0x68>

08017e8c <__hexdig_fun>:
 8017e8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017e90:	2b09      	cmp	r3, #9
 8017e92:	d802      	bhi.n	8017e9a <__hexdig_fun+0xe>
 8017e94:	3820      	subs	r0, #32
 8017e96:	b2c0      	uxtb	r0, r0
 8017e98:	4770      	bx	lr
 8017e9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017e9e:	2b05      	cmp	r3, #5
 8017ea0:	d801      	bhi.n	8017ea6 <__hexdig_fun+0x1a>
 8017ea2:	3847      	subs	r0, #71	; 0x47
 8017ea4:	e7f7      	b.n	8017e96 <__hexdig_fun+0xa>
 8017ea6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017eaa:	2b05      	cmp	r3, #5
 8017eac:	d801      	bhi.n	8017eb2 <__hexdig_fun+0x26>
 8017eae:	3827      	subs	r0, #39	; 0x27
 8017eb0:	e7f1      	b.n	8017e96 <__hexdig_fun+0xa>
 8017eb2:	2000      	movs	r0, #0
 8017eb4:	4770      	bx	lr
	...

08017eb8 <__gethex>:
 8017eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ebc:	ed2d 8b02 	vpush	{d8}
 8017ec0:	b089      	sub	sp, #36	; 0x24
 8017ec2:	ee08 0a10 	vmov	s16, r0
 8017ec6:	9304      	str	r3, [sp, #16]
 8017ec8:	4bb4      	ldr	r3, [pc, #720]	; (801819c <__gethex+0x2e4>)
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	9301      	str	r3, [sp, #4]
 8017ece:	4618      	mov	r0, r3
 8017ed0:	468b      	mov	fp, r1
 8017ed2:	4690      	mov	r8, r2
 8017ed4:	f7f0 f8b4 	bl	8008040 <strlen>
 8017ed8:	9b01      	ldr	r3, [sp, #4]
 8017eda:	f8db 2000 	ldr.w	r2, [fp]
 8017ede:	4403      	add	r3, r0
 8017ee0:	4682      	mov	sl, r0
 8017ee2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017ee6:	9305      	str	r3, [sp, #20]
 8017ee8:	1c93      	adds	r3, r2, #2
 8017eea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017eee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017ef2:	32fe      	adds	r2, #254	; 0xfe
 8017ef4:	18d1      	adds	r1, r2, r3
 8017ef6:	461f      	mov	r7, r3
 8017ef8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017efc:	9100      	str	r1, [sp, #0]
 8017efe:	2830      	cmp	r0, #48	; 0x30
 8017f00:	d0f8      	beq.n	8017ef4 <__gethex+0x3c>
 8017f02:	f7ff ffc3 	bl	8017e8c <__hexdig_fun>
 8017f06:	4604      	mov	r4, r0
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	d13a      	bne.n	8017f82 <__gethex+0xca>
 8017f0c:	9901      	ldr	r1, [sp, #4]
 8017f0e:	4652      	mov	r2, sl
 8017f10:	4638      	mov	r0, r7
 8017f12:	f002 f814 	bl	8019f3e <strncmp>
 8017f16:	4605      	mov	r5, r0
 8017f18:	2800      	cmp	r0, #0
 8017f1a:	d168      	bne.n	8017fee <__gethex+0x136>
 8017f1c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017f20:	eb07 060a 	add.w	r6, r7, sl
 8017f24:	f7ff ffb2 	bl	8017e8c <__hexdig_fun>
 8017f28:	2800      	cmp	r0, #0
 8017f2a:	d062      	beq.n	8017ff2 <__gethex+0x13a>
 8017f2c:	4633      	mov	r3, r6
 8017f2e:	7818      	ldrb	r0, [r3, #0]
 8017f30:	2830      	cmp	r0, #48	; 0x30
 8017f32:	461f      	mov	r7, r3
 8017f34:	f103 0301 	add.w	r3, r3, #1
 8017f38:	d0f9      	beq.n	8017f2e <__gethex+0x76>
 8017f3a:	f7ff ffa7 	bl	8017e8c <__hexdig_fun>
 8017f3e:	2301      	movs	r3, #1
 8017f40:	fab0 f480 	clz	r4, r0
 8017f44:	0964      	lsrs	r4, r4, #5
 8017f46:	4635      	mov	r5, r6
 8017f48:	9300      	str	r3, [sp, #0]
 8017f4a:	463a      	mov	r2, r7
 8017f4c:	4616      	mov	r6, r2
 8017f4e:	3201      	adds	r2, #1
 8017f50:	7830      	ldrb	r0, [r6, #0]
 8017f52:	f7ff ff9b 	bl	8017e8c <__hexdig_fun>
 8017f56:	2800      	cmp	r0, #0
 8017f58:	d1f8      	bne.n	8017f4c <__gethex+0x94>
 8017f5a:	9901      	ldr	r1, [sp, #4]
 8017f5c:	4652      	mov	r2, sl
 8017f5e:	4630      	mov	r0, r6
 8017f60:	f001 ffed 	bl	8019f3e <strncmp>
 8017f64:	b980      	cbnz	r0, 8017f88 <__gethex+0xd0>
 8017f66:	b94d      	cbnz	r5, 8017f7c <__gethex+0xc4>
 8017f68:	eb06 050a 	add.w	r5, r6, sl
 8017f6c:	462a      	mov	r2, r5
 8017f6e:	4616      	mov	r6, r2
 8017f70:	3201      	adds	r2, #1
 8017f72:	7830      	ldrb	r0, [r6, #0]
 8017f74:	f7ff ff8a 	bl	8017e8c <__hexdig_fun>
 8017f78:	2800      	cmp	r0, #0
 8017f7a:	d1f8      	bne.n	8017f6e <__gethex+0xb6>
 8017f7c:	1bad      	subs	r5, r5, r6
 8017f7e:	00ad      	lsls	r5, r5, #2
 8017f80:	e004      	b.n	8017f8c <__gethex+0xd4>
 8017f82:	2400      	movs	r4, #0
 8017f84:	4625      	mov	r5, r4
 8017f86:	e7e0      	b.n	8017f4a <__gethex+0x92>
 8017f88:	2d00      	cmp	r5, #0
 8017f8a:	d1f7      	bne.n	8017f7c <__gethex+0xc4>
 8017f8c:	7833      	ldrb	r3, [r6, #0]
 8017f8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017f92:	2b50      	cmp	r3, #80	; 0x50
 8017f94:	d13b      	bne.n	801800e <__gethex+0x156>
 8017f96:	7873      	ldrb	r3, [r6, #1]
 8017f98:	2b2b      	cmp	r3, #43	; 0x2b
 8017f9a:	d02c      	beq.n	8017ff6 <__gethex+0x13e>
 8017f9c:	2b2d      	cmp	r3, #45	; 0x2d
 8017f9e:	d02e      	beq.n	8017ffe <__gethex+0x146>
 8017fa0:	1c71      	adds	r1, r6, #1
 8017fa2:	f04f 0900 	mov.w	r9, #0
 8017fa6:	7808      	ldrb	r0, [r1, #0]
 8017fa8:	f7ff ff70 	bl	8017e8c <__hexdig_fun>
 8017fac:	1e43      	subs	r3, r0, #1
 8017fae:	b2db      	uxtb	r3, r3
 8017fb0:	2b18      	cmp	r3, #24
 8017fb2:	d82c      	bhi.n	801800e <__gethex+0x156>
 8017fb4:	f1a0 0210 	sub.w	r2, r0, #16
 8017fb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017fbc:	f7ff ff66 	bl	8017e8c <__hexdig_fun>
 8017fc0:	1e43      	subs	r3, r0, #1
 8017fc2:	b2db      	uxtb	r3, r3
 8017fc4:	2b18      	cmp	r3, #24
 8017fc6:	d91d      	bls.n	8018004 <__gethex+0x14c>
 8017fc8:	f1b9 0f00 	cmp.w	r9, #0
 8017fcc:	d000      	beq.n	8017fd0 <__gethex+0x118>
 8017fce:	4252      	negs	r2, r2
 8017fd0:	4415      	add	r5, r2
 8017fd2:	f8cb 1000 	str.w	r1, [fp]
 8017fd6:	b1e4      	cbz	r4, 8018012 <__gethex+0x15a>
 8017fd8:	9b00      	ldr	r3, [sp, #0]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	bf14      	ite	ne
 8017fde:	2700      	movne	r7, #0
 8017fe0:	2706      	moveq	r7, #6
 8017fe2:	4638      	mov	r0, r7
 8017fe4:	b009      	add	sp, #36	; 0x24
 8017fe6:	ecbd 8b02 	vpop	{d8}
 8017fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fee:	463e      	mov	r6, r7
 8017ff0:	4625      	mov	r5, r4
 8017ff2:	2401      	movs	r4, #1
 8017ff4:	e7ca      	b.n	8017f8c <__gethex+0xd4>
 8017ff6:	f04f 0900 	mov.w	r9, #0
 8017ffa:	1cb1      	adds	r1, r6, #2
 8017ffc:	e7d3      	b.n	8017fa6 <__gethex+0xee>
 8017ffe:	f04f 0901 	mov.w	r9, #1
 8018002:	e7fa      	b.n	8017ffa <__gethex+0x142>
 8018004:	230a      	movs	r3, #10
 8018006:	fb03 0202 	mla	r2, r3, r2, r0
 801800a:	3a10      	subs	r2, #16
 801800c:	e7d4      	b.n	8017fb8 <__gethex+0x100>
 801800e:	4631      	mov	r1, r6
 8018010:	e7df      	b.n	8017fd2 <__gethex+0x11a>
 8018012:	1bf3      	subs	r3, r6, r7
 8018014:	3b01      	subs	r3, #1
 8018016:	4621      	mov	r1, r4
 8018018:	2b07      	cmp	r3, #7
 801801a:	dc0b      	bgt.n	8018034 <__gethex+0x17c>
 801801c:	ee18 0a10 	vmov	r0, s16
 8018020:	f000 fad8 	bl	80185d4 <_Balloc>
 8018024:	4604      	mov	r4, r0
 8018026:	b940      	cbnz	r0, 801803a <__gethex+0x182>
 8018028:	4b5d      	ldr	r3, [pc, #372]	; (80181a0 <__gethex+0x2e8>)
 801802a:	4602      	mov	r2, r0
 801802c:	21de      	movs	r1, #222	; 0xde
 801802e:	485d      	ldr	r0, [pc, #372]	; (80181a4 <__gethex+0x2ec>)
 8018030:	f002 f900 	bl	801a234 <__assert_func>
 8018034:	3101      	adds	r1, #1
 8018036:	105b      	asrs	r3, r3, #1
 8018038:	e7ee      	b.n	8018018 <__gethex+0x160>
 801803a:	f100 0914 	add.w	r9, r0, #20
 801803e:	f04f 0b00 	mov.w	fp, #0
 8018042:	f1ca 0301 	rsb	r3, sl, #1
 8018046:	f8cd 9008 	str.w	r9, [sp, #8]
 801804a:	f8cd b000 	str.w	fp, [sp]
 801804e:	9306      	str	r3, [sp, #24]
 8018050:	42b7      	cmp	r7, r6
 8018052:	d340      	bcc.n	80180d6 <__gethex+0x21e>
 8018054:	9802      	ldr	r0, [sp, #8]
 8018056:	9b00      	ldr	r3, [sp, #0]
 8018058:	f840 3b04 	str.w	r3, [r0], #4
 801805c:	eba0 0009 	sub.w	r0, r0, r9
 8018060:	1080      	asrs	r0, r0, #2
 8018062:	0146      	lsls	r6, r0, #5
 8018064:	6120      	str	r0, [r4, #16]
 8018066:	4618      	mov	r0, r3
 8018068:	f000 fba6 	bl	80187b8 <__hi0bits>
 801806c:	1a30      	subs	r0, r6, r0
 801806e:	f8d8 6000 	ldr.w	r6, [r8]
 8018072:	42b0      	cmp	r0, r6
 8018074:	dd63      	ble.n	801813e <__gethex+0x286>
 8018076:	1b87      	subs	r7, r0, r6
 8018078:	4639      	mov	r1, r7
 801807a:	4620      	mov	r0, r4
 801807c:	f000 ff4a 	bl	8018f14 <__any_on>
 8018080:	4682      	mov	sl, r0
 8018082:	b1a8      	cbz	r0, 80180b0 <__gethex+0x1f8>
 8018084:	1e7b      	subs	r3, r7, #1
 8018086:	1159      	asrs	r1, r3, #5
 8018088:	f003 021f 	and.w	r2, r3, #31
 801808c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018090:	f04f 0a01 	mov.w	sl, #1
 8018094:	fa0a f202 	lsl.w	r2, sl, r2
 8018098:	420a      	tst	r2, r1
 801809a:	d009      	beq.n	80180b0 <__gethex+0x1f8>
 801809c:	4553      	cmp	r3, sl
 801809e:	dd05      	ble.n	80180ac <__gethex+0x1f4>
 80180a0:	1eb9      	subs	r1, r7, #2
 80180a2:	4620      	mov	r0, r4
 80180a4:	f000 ff36 	bl	8018f14 <__any_on>
 80180a8:	2800      	cmp	r0, #0
 80180aa:	d145      	bne.n	8018138 <__gethex+0x280>
 80180ac:	f04f 0a02 	mov.w	sl, #2
 80180b0:	4639      	mov	r1, r7
 80180b2:	4620      	mov	r0, r4
 80180b4:	f7ff fe98 	bl	8017de8 <rshift>
 80180b8:	443d      	add	r5, r7
 80180ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80180be:	42ab      	cmp	r3, r5
 80180c0:	da4c      	bge.n	801815c <__gethex+0x2a4>
 80180c2:	ee18 0a10 	vmov	r0, s16
 80180c6:	4621      	mov	r1, r4
 80180c8:	f000 fac4 	bl	8018654 <_Bfree>
 80180cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80180ce:	2300      	movs	r3, #0
 80180d0:	6013      	str	r3, [r2, #0]
 80180d2:	27a3      	movs	r7, #163	; 0xa3
 80180d4:	e785      	b.n	8017fe2 <__gethex+0x12a>
 80180d6:	1e73      	subs	r3, r6, #1
 80180d8:	9a05      	ldr	r2, [sp, #20]
 80180da:	9303      	str	r3, [sp, #12]
 80180dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80180e0:	4293      	cmp	r3, r2
 80180e2:	d019      	beq.n	8018118 <__gethex+0x260>
 80180e4:	f1bb 0f20 	cmp.w	fp, #32
 80180e8:	d107      	bne.n	80180fa <__gethex+0x242>
 80180ea:	9b02      	ldr	r3, [sp, #8]
 80180ec:	9a00      	ldr	r2, [sp, #0]
 80180ee:	f843 2b04 	str.w	r2, [r3], #4
 80180f2:	9302      	str	r3, [sp, #8]
 80180f4:	2300      	movs	r3, #0
 80180f6:	9300      	str	r3, [sp, #0]
 80180f8:	469b      	mov	fp, r3
 80180fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80180fe:	f7ff fec5 	bl	8017e8c <__hexdig_fun>
 8018102:	9b00      	ldr	r3, [sp, #0]
 8018104:	f000 000f 	and.w	r0, r0, #15
 8018108:	fa00 f00b 	lsl.w	r0, r0, fp
 801810c:	4303      	orrs	r3, r0
 801810e:	9300      	str	r3, [sp, #0]
 8018110:	f10b 0b04 	add.w	fp, fp, #4
 8018114:	9b03      	ldr	r3, [sp, #12]
 8018116:	e00d      	b.n	8018134 <__gethex+0x27c>
 8018118:	9b03      	ldr	r3, [sp, #12]
 801811a:	9a06      	ldr	r2, [sp, #24]
 801811c:	4413      	add	r3, r2
 801811e:	42bb      	cmp	r3, r7
 8018120:	d3e0      	bcc.n	80180e4 <__gethex+0x22c>
 8018122:	4618      	mov	r0, r3
 8018124:	9901      	ldr	r1, [sp, #4]
 8018126:	9307      	str	r3, [sp, #28]
 8018128:	4652      	mov	r2, sl
 801812a:	f001 ff08 	bl	8019f3e <strncmp>
 801812e:	9b07      	ldr	r3, [sp, #28]
 8018130:	2800      	cmp	r0, #0
 8018132:	d1d7      	bne.n	80180e4 <__gethex+0x22c>
 8018134:	461e      	mov	r6, r3
 8018136:	e78b      	b.n	8018050 <__gethex+0x198>
 8018138:	f04f 0a03 	mov.w	sl, #3
 801813c:	e7b8      	b.n	80180b0 <__gethex+0x1f8>
 801813e:	da0a      	bge.n	8018156 <__gethex+0x29e>
 8018140:	1a37      	subs	r7, r6, r0
 8018142:	4621      	mov	r1, r4
 8018144:	ee18 0a10 	vmov	r0, s16
 8018148:	463a      	mov	r2, r7
 801814a:	f000 fc9f 	bl	8018a8c <__lshift>
 801814e:	1bed      	subs	r5, r5, r7
 8018150:	4604      	mov	r4, r0
 8018152:	f100 0914 	add.w	r9, r0, #20
 8018156:	f04f 0a00 	mov.w	sl, #0
 801815a:	e7ae      	b.n	80180ba <__gethex+0x202>
 801815c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018160:	42a8      	cmp	r0, r5
 8018162:	dd72      	ble.n	801824a <__gethex+0x392>
 8018164:	1b45      	subs	r5, r0, r5
 8018166:	42ae      	cmp	r6, r5
 8018168:	dc36      	bgt.n	80181d8 <__gethex+0x320>
 801816a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801816e:	2b02      	cmp	r3, #2
 8018170:	d02a      	beq.n	80181c8 <__gethex+0x310>
 8018172:	2b03      	cmp	r3, #3
 8018174:	d02c      	beq.n	80181d0 <__gethex+0x318>
 8018176:	2b01      	cmp	r3, #1
 8018178:	d11c      	bne.n	80181b4 <__gethex+0x2fc>
 801817a:	42ae      	cmp	r6, r5
 801817c:	d11a      	bne.n	80181b4 <__gethex+0x2fc>
 801817e:	2e01      	cmp	r6, #1
 8018180:	d112      	bne.n	80181a8 <__gethex+0x2f0>
 8018182:	9a04      	ldr	r2, [sp, #16]
 8018184:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018188:	6013      	str	r3, [r2, #0]
 801818a:	2301      	movs	r3, #1
 801818c:	6123      	str	r3, [r4, #16]
 801818e:	f8c9 3000 	str.w	r3, [r9]
 8018192:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018194:	2762      	movs	r7, #98	; 0x62
 8018196:	601c      	str	r4, [r3, #0]
 8018198:	e723      	b.n	8017fe2 <__gethex+0x12a>
 801819a:	bf00      	nop
 801819c:	0801aa54 	.word	0x0801aa54
 80181a0:	0801a978 	.word	0x0801a978
 80181a4:	0801a9ec 	.word	0x0801a9ec
 80181a8:	1e71      	subs	r1, r6, #1
 80181aa:	4620      	mov	r0, r4
 80181ac:	f000 feb2 	bl	8018f14 <__any_on>
 80181b0:	2800      	cmp	r0, #0
 80181b2:	d1e6      	bne.n	8018182 <__gethex+0x2ca>
 80181b4:	ee18 0a10 	vmov	r0, s16
 80181b8:	4621      	mov	r1, r4
 80181ba:	f000 fa4b 	bl	8018654 <_Bfree>
 80181be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80181c0:	2300      	movs	r3, #0
 80181c2:	6013      	str	r3, [r2, #0]
 80181c4:	2750      	movs	r7, #80	; 0x50
 80181c6:	e70c      	b.n	8017fe2 <__gethex+0x12a>
 80181c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d1f2      	bne.n	80181b4 <__gethex+0x2fc>
 80181ce:	e7d8      	b.n	8018182 <__gethex+0x2ca>
 80181d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d1d5      	bne.n	8018182 <__gethex+0x2ca>
 80181d6:	e7ed      	b.n	80181b4 <__gethex+0x2fc>
 80181d8:	1e6f      	subs	r7, r5, #1
 80181da:	f1ba 0f00 	cmp.w	sl, #0
 80181de:	d131      	bne.n	8018244 <__gethex+0x38c>
 80181e0:	b127      	cbz	r7, 80181ec <__gethex+0x334>
 80181e2:	4639      	mov	r1, r7
 80181e4:	4620      	mov	r0, r4
 80181e6:	f000 fe95 	bl	8018f14 <__any_on>
 80181ea:	4682      	mov	sl, r0
 80181ec:	117b      	asrs	r3, r7, #5
 80181ee:	2101      	movs	r1, #1
 80181f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80181f4:	f007 071f 	and.w	r7, r7, #31
 80181f8:	fa01 f707 	lsl.w	r7, r1, r7
 80181fc:	421f      	tst	r7, r3
 80181fe:	4629      	mov	r1, r5
 8018200:	4620      	mov	r0, r4
 8018202:	bf18      	it	ne
 8018204:	f04a 0a02 	orrne.w	sl, sl, #2
 8018208:	1b76      	subs	r6, r6, r5
 801820a:	f7ff fded 	bl	8017de8 <rshift>
 801820e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018212:	2702      	movs	r7, #2
 8018214:	f1ba 0f00 	cmp.w	sl, #0
 8018218:	d048      	beq.n	80182ac <__gethex+0x3f4>
 801821a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801821e:	2b02      	cmp	r3, #2
 8018220:	d015      	beq.n	801824e <__gethex+0x396>
 8018222:	2b03      	cmp	r3, #3
 8018224:	d017      	beq.n	8018256 <__gethex+0x39e>
 8018226:	2b01      	cmp	r3, #1
 8018228:	d109      	bne.n	801823e <__gethex+0x386>
 801822a:	f01a 0f02 	tst.w	sl, #2
 801822e:	d006      	beq.n	801823e <__gethex+0x386>
 8018230:	f8d9 0000 	ldr.w	r0, [r9]
 8018234:	ea4a 0a00 	orr.w	sl, sl, r0
 8018238:	f01a 0f01 	tst.w	sl, #1
 801823c:	d10e      	bne.n	801825c <__gethex+0x3a4>
 801823e:	f047 0710 	orr.w	r7, r7, #16
 8018242:	e033      	b.n	80182ac <__gethex+0x3f4>
 8018244:	f04f 0a01 	mov.w	sl, #1
 8018248:	e7d0      	b.n	80181ec <__gethex+0x334>
 801824a:	2701      	movs	r7, #1
 801824c:	e7e2      	b.n	8018214 <__gethex+0x35c>
 801824e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018250:	f1c3 0301 	rsb	r3, r3, #1
 8018254:	9315      	str	r3, [sp, #84]	; 0x54
 8018256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018258:	2b00      	cmp	r3, #0
 801825a:	d0f0      	beq.n	801823e <__gethex+0x386>
 801825c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018260:	f104 0314 	add.w	r3, r4, #20
 8018264:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018268:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801826c:	f04f 0c00 	mov.w	ip, #0
 8018270:	4618      	mov	r0, r3
 8018272:	f853 2b04 	ldr.w	r2, [r3], #4
 8018276:	f1b2 3fff 	cmp.w	r2, #4294967295
 801827a:	d01c      	beq.n	80182b6 <__gethex+0x3fe>
 801827c:	3201      	adds	r2, #1
 801827e:	6002      	str	r2, [r0, #0]
 8018280:	2f02      	cmp	r7, #2
 8018282:	f104 0314 	add.w	r3, r4, #20
 8018286:	d13f      	bne.n	8018308 <__gethex+0x450>
 8018288:	f8d8 2000 	ldr.w	r2, [r8]
 801828c:	3a01      	subs	r2, #1
 801828e:	42b2      	cmp	r2, r6
 8018290:	d10a      	bne.n	80182a8 <__gethex+0x3f0>
 8018292:	1171      	asrs	r1, r6, #5
 8018294:	2201      	movs	r2, #1
 8018296:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801829a:	f006 061f 	and.w	r6, r6, #31
 801829e:	fa02 f606 	lsl.w	r6, r2, r6
 80182a2:	421e      	tst	r6, r3
 80182a4:	bf18      	it	ne
 80182a6:	4617      	movne	r7, r2
 80182a8:	f047 0720 	orr.w	r7, r7, #32
 80182ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80182ae:	601c      	str	r4, [r3, #0]
 80182b0:	9b04      	ldr	r3, [sp, #16]
 80182b2:	601d      	str	r5, [r3, #0]
 80182b4:	e695      	b.n	8017fe2 <__gethex+0x12a>
 80182b6:	4299      	cmp	r1, r3
 80182b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80182bc:	d8d8      	bhi.n	8018270 <__gethex+0x3b8>
 80182be:	68a3      	ldr	r3, [r4, #8]
 80182c0:	459b      	cmp	fp, r3
 80182c2:	db19      	blt.n	80182f8 <__gethex+0x440>
 80182c4:	6861      	ldr	r1, [r4, #4]
 80182c6:	ee18 0a10 	vmov	r0, s16
 80182ca:	3101      	adds	r1, #1
 80182cc:	f000 f982 	bl	80185d4 <_Balloc>
 80182d0:	4681      	mov	r9, r0
 80182d2:	b918      	cbnz	r0, 80182dc <__gethex+0x424>
 80182d4:	4b1a      	ldr	r3, [pc, #104]	; (8018340 <__gethex+0x488>)
 80182d6:	4602      	mov	r2, r0
 80182d8:	2184      	movs	r1, #132	; 0x84
 80182da:	e6a8      	b.n	801802e <__gethex+0x176>
 80182dc:	6922      	ldr	r2, [r4, #16]
 80182de:	3202      	adds	r2, #2
 80182e0:	f104 010c 	add.w	r1, r4, #12
 80182e4:	0092      	lsls	r2, r2, #2
 80182e6:	300c      	adds	r0, #12
 80182e8:	f7fc fd88 	bl	8014dfc <memcpy>
 80182ec:	4621      	mov	r1, r4
 80182ee:	ee18 0a10 	vmov	r0, s16
 80182f2:	f000 f9af 	bl	8018654 <_Bfree>
 80182f6:	464c      	mov	r4, r9
 80182f8:	6923      	ldr	r3, [r4, #16]
 80182fa:	1c5a      	adds	r2, r3, #1
 80182fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018300:	6122      	str	r2, [r4, #16]
 8018302:	2201      	movs	r2, #1
 8018304:	615a      	str	r2, [r3, #20]
 8018306:	e7bb      	b.n	8018280 <__gethex+0x3c8>
 8018308:	6922      	ldr	r2, [r4, #16]
 801830a:	455a      	cmp	r2, fp
 801830c:	dd0b      	ble.n	8018326 <__gethex+0x46e>
 801830e:	2101      	movs	r1, #1
 8018310:	4620      	mov	r0, r4
 8018312:	f7ff fd69 	bl	8017de8 <rshift>
 8018316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801831a:	3501      	adds	r5, #1
 801831c:	42ab      	cmp	r3, r5
 801831e:	f6ff aed0 	blt.w	80180c2 <__gethex+0x20a>
 8018322:	2701      	movs	r7, #1
 8018324:	e7c0      	b.n	80182a8 <__gethex+0x3f0>
 8018326:	f016 061f 	ands.w	r6, r6, #31
 801832a:	d0fa      	beq.n	8018322 <__gethex+0x46a>
 801832c:	4453      	add	r3, sl
 801832e:	f1c6 0620 	rsb	r6, r6, #32
 8018332:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018336:	f000 fa3f 	bl	80187b8 <__hi0bits>
 801833a:	42b0      	cmp	r0, r6
 801833c:	dbe7      	blt.n	801830e <__gethex+0x456>
 801833e:	e7f0      	b.n	8018322 <__gethex+0x46a>
 8018340:	0801a978 	.word	0x0801a978

08018344 <L_shift>:
 8018344:	f1c2 0208 	rsb	r2, r2, #8
 8018348:	0092      	lsls	r2, r2, #2
 801834a:	b570      	push	{r4, r5, r6, lr}
 801834c:	f1c2 0620 	rsb	r6, r2, #32
 8018350:	6843      	ldr	r3, [r0, #4]
 8018352:	6804      	ldr	r4, [r0, #0]
 8018354:	fa03 f506 	lsl.w	r5, r3, r6
 8018358:	432c      	orrs	r4, r5
 801835a:	40d3      	lsrs	r3, r2
 801835c:	6004      	str	r4, [r0, #0]
 801835e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018362:	4288      	cmp	r0, r1
 8018364:	d3f4      	bcc.n	8018350 <L_shift+0xc>
 8018366:	bd70      	pop	{r4, r5, r6, pc}

08018368 <__match>:
 8018368:	b530      	push	{r4, r5, lr}
 801836a:	6803      	ldr	r3, [r0, #0]
 801836c:	3301      	adds	r3, #1
 801836e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018372:	b914      	cbnz	r4, 801837a <__match+0x12>
 8018374:	6003      	str	r3, [r0, #0]
 8018376:	2001      	movs	r0, #1
 8018378:	bd30      	pop	{r4, r5, pc}
 801837a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801837e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018382:	2d19      	cmp	r5, #25
 8018384:	bf98      	it	ls
 8018386:	3220      	addls	r2, #32
 8018388:	42a2      	cmp	r2, r4
 801838a:	d0f0      	beq.n	801836e <__match+0x6>
 801838c:	2000      	movs	r0, #0
 801838e:	e7f3      	b.n	8018378 <__match+0x10>

08018390 <__hexnan>:
 8018390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018394:	680b      	ldr	r3, [r1, #0]
 8018396:	115e      	asrs	r6, r3, #5
 8018398:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801839c:	f013 031f 	ands.w	r3, r3, #31
 80183a0:	b087      	sub	sp, #28
 80183a2:	bf18      	it	ne
 80183a4:	3604      	addne	r6, #4
 80183a6:	2500      	movs	r5, #0
 80183a8:	1f37      	subs	r7, r6, #4
 80183aa:	4690      	mov	r8, r2
 80183ac:	6802      	ldr	r2, [r0, #0]
 80183ae:	9301      	str	r3, [sp, #4]
 80183b0:	4682      	mov	sl, r0
 80183b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80183b6:	46b9      	mov	r9, r7
 80183b8:	463c      	mov	r4, r7
 80183ba:	9502      	str	r5, [sp, #8]
 80183bc:	46ab      	mov	fp, r5
 80183be:	7851      	ldrb	r1, [r2, #1]
 80183c0:	1c53      	adds	r3, r2, #1
 80183c2:	9303      	str	r3, [sp, #12]
 80183c4:	b341      	cbz	r1, 8018418 <__hexnan+0x88>
 80183c6:	4608      	mov	r0, r1
 80183c8:	9205      	str	r2, [sp, #20]
 80183ca:	9104      	str	r1, [sp, #16]
 80183cc:	f7ff fd5e 	bl	8017e8c <__hexdig_fun>
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d14f      	bne.n	8018474 <__hexnan+0xe4>
 80183d4:	9904      	ldr	r1, [sp, #16]
 80183d6:	9a05      	ldr	r2, [sp, #20]
 80183d8:	2920      	cmp	r1, #32
 80183da:	d818      	bhi.n	801840e <__hexnan+0x7e>
 80183dc:	9b02      	ldr	r3, [sp, #8]
 80183de:	459b      	cmp	fp, r3
 80183e0:	dd13      	ble.n	801840a <__hexnan+0x7a>
 80183e2:	454c      	cmp	r4, r9
 80183e4:	d206      	bcs.n	80183f4 <__hexnan+0x64>
 80183e6:	2d07      	cmp	r5, #7
 80183e8:	dc04      	bgt.n	80183f4 <__hexnan+0x64>
 80183ea:	462a      	mov	r2, r5
 80183ec:	4649      	mov	r1, r9
 80183ee:	4620      	mov	r0, r4
 80183f0:	f7ff ffa8 	bl	8018344 <L_shift>
 80183f4:	4544      	cmp	r4, r8
 80183f6:	d950      	bls.n	801849a <__hexnan+0x10a>
 80183f8:	2300      	movs	r3, #0
 80183fa:	f1a4 0904 	sub.w	r9, r4, #4
 80183fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8018402:	f8cd b008 	str.w	fp, [sp, #8]
 8018406:	464c      	mov	r4, r9
 8018408:	461d      	mov	r5, r3
 801840a:	9a03      	ldr	r2, [sp, #12]
 801840c:	e7d7      	b.n	80183be <__hexnan+0x2e>
 801840e:	2929      	cmp	r1, #41	; 0x29
 8018410:	d156      	bne.n	80184c0 <__hexnan+0x130>
 8018412:	3202      	adds	r2, #2
 8018414:	f8ca 2000 	str.w	r2, [sl]
 8018418:	f1bb 0f00 	cmp.w	fp, #0
 801841c:	d050      	beq.n	80184c0 <__hexnan+0x130>
 801841e:	454c      	cmp	r4, r9
 8018420:	d206      	bcs.n	8018430 <__hexnan+0xa0>
 8018422:	2d07      	cmp	r5, #7
 8018424:	dc04      	bgt.n	8018430 <__hexnan+0xa0>
 8018426:	462a      	mov	r2, r5
 8018428:	4649      	mov	r1, r9
 801842a:	4620      	mov	r0, r4
 801842c:	f7ff ff8a 	bl	8018344 <L_shift>
 8018430:	4544      	cmp	r4, r8
 8018432:	d934      	bls.n	801849e <__hexnan+0x10e>
 8018434:	f1a8 0204 	sub.w	r2, r8, #4
 8018438:	4623      	mov	r3, r4
 801843a:	f853 1b04 	ldr.w	r1, [r3], #4
 801843e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018442:	429f      	cmp	r7, r3
 8018444:	d2f9      	bcs.n	801843a <__hexnan+0xaa>
 8018446:	1b3b      	subs	r3, r7, r4
 8018448:	f023 0303 	bic.w	r3, r3, #3
 801844c:	3304      	adds	r3, #4
 801844e:	3401      	adds	r4, #1
 8018450:	3e03      	subs	r6, #3
 8018452:	42b4      	cmp	r4, r6
 8018454:	bf88      	it	hi
 8018456:	2304      	movhi	r3, #4
 8018458:	4443      	add	r3, r8
 801845a:	2200      	movs	r2, #0
 801845c:	f843 2b04 	str.w	r2, [r3], #4
 8018460:	429f      	cmp	r7, r3
 8018462:	d2fb      	bcs.n	801845c <__hexnan+0xcc>
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	b91b      	cbnz	r3, 8018470 <__hexnan+0xe0>
 8018468:	4547      	cmp	r7, r8
 801846a:	d127      	bne.n	80184bc <__hexnan+0x12c>
 801846c:	2301      	movs	r3, #1
 801846e:	603b      	str	r3, [r7, #0]
 8018470:	2005      	movs	r0, #5
 8018472:	e026      	b.n	80184c2 <__hexnan+0x132>
 8018474:	3501      	adds	r5, #1
 8018476:	2d08      	cmp	r5, #8
 8018478:	f10b 0b01 	add.w	fp, fp, #1
 801847c:	dd06      	ble.n	801848c <__hexnan+0xfc>
 801847e:	4544      	cmp	r4, r8
 8018480:	d9c3      	bls.n	801840a <__hexnan+0x7a>
 8018482:	2300      	movs	r3, #0
 8018484:	f844 3c04 	str.w	r3, [r4, #-4]
 8018488:	2501      	movs	r5, #1
 801848a:	3c04      	subs	r4, #4
 801848c:	6822      	ldr	r2, [r4, #0]
 801848e:	f000 000f 	and.w	r0, r0, #15
 8018492:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018496:	6022      	str	r2, [r4, #0]
 8018498:	e7b7      	b.n	801840a <__hexnan+0x7a>
 801849a:	2508      	movs	r5, #8
 801849c:	e7b5      	b.n	801840a <__hexnan+0x7a>
 801849e:	9b01      	ldr	r3, [sp, #4]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d0df      	beq.n	8018464 <__hexnan+0xd4>
 80184a4:	f04f 32ff 	mov.w	r2, #4294967295
 80184a8:	f1c3 0320 	rsb	r3, r3, #32
 80184ac:	fa22 f303 	lsr.w	r3, r2, r3
 80184b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80184b4:	401a      	ands	r2, r3
 80184b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80184ba:	e7d3      	b.n	8018464 <__hexnan+0xd4>
 80184bc:	3f04      	subs	r7, #4
 80184be:	e7d1      	b.n	8018464 <__hexnan+0xd4>
 80184c0:	2004      	movs	r0, #4
 80184c2:	b007      	add	sp, #28
 80184c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080184c8 <_localeconv_r>:
 80184c8:	4800      	ldr	r0, [pc, #0]	; (80184cc <_localeconv_r+0x4>)
 80184ca:	4770      	bx	lr
 80184cc:	20000180 	.word	0x20000180

080184d0 <__retarget_lock_init_recursive>:
 80184d0:	4770      	bx	lr

080184d2 <__retarget_lock_acquire_recursive>:
 80184d2:	4770      	bx	lr

080184d4 <__retarget_lock_release_recursive>:
 80184d4:	4770      	bx	lr

080184d6 <__swhatbuf_r>:
 80184d6:	b570      	push	{r4, r5, r6, lr}
 80184d8:	460e      	mov	r6, r1
 80184da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184de:	2900      	cmp	r1, #0
 80184e0:	b096      	sub	sp, #88	; 0x58
 80184e2:	4614      	mov	r4, r2
 80184e4:	461d      	mov	r5, r3
 80184e6:	da08      	bge.n	80184fa <__swhatbuf_r+0x24>
 80184e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80184ec:	2200      	movs	r2, #0
 80184ee:	602a      	str	r2, [r5, #0]
 80184f0:	061a      	lsls	r2, r3, #24
 80184f2:	d410      	bmi.n	8018516 <__swhatbuf_r+0x40>
 80184f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80184f8:	e00e      	b.n	8018518 <__swhatbuf_r+0x42>
 80184fa:	466a      	mov	r2, sp
 80184fc:	f001 feda 	bl	801a2b4 <_fstat_r>
 8018500:	2800      	cmp	r0, #0
 8018502:	dbf1      	blt.n	80184e8 <__swhatbuf_r+0x12>
 8018504:	9a01      	ldr	r2, [sp, #4]
 8018506:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801850a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801850e:	425a      	negs	r2, r3
 8018510:	415a      	adcs	r2, r3
 8018512:	602a      	str	r2, [r5, #0]
 8018514:	e7ee      	b.n	80184f4 <__swhatbuf_r+0x1e>
 8018516:	2340      	movs	r3, #64	; 0x40
 8018518:	2000      	movs	r0, #0
 801851a:	6023      	str	r3, [r4, #0]
 801851c:	b016      	add	sp, #88	; 0x58
 801851e:	bd70      	pop	{r4, r5, r6, pc}

08018520 <__smakebuf_r>:
 8018520:	898b      	ldrh	r3, [r1, #12]
 8018522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018524:	079d      	lsls	r5, r3, #30
 8018526:	4606      	mov	r6, r0
 8018528:	460c      	mov	r4, r1
 801852a:	d507      	bpl.n	801853c <__smakebuf_r+0x1c>
 801852c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018530:	6023      	str	r3, [r4, #0]
 8018532:	6123      	str	r3, [r4, #16]
 8018534:	2301      	movs	r3, #1
 8018536:	6163      	str	r3, [r4, #20]
 8018538:	b002      	add	sp, #8
 801853a:	bd70      	pop	{r4, r5, r6, pc}
 801853c:	ab01      	add	r3, sp, #4
 801853e:	466a      	mov	r2, sp
 8018540:	f7ff ffc9 	bl	80184d6 <__swhatbuf_r>
 8018544:	9900      	ldr	r1, [sp, #0]
 8018546:	4605      	mov	r5, r0
 8018548:	4630      	mov	r0, r6
 801854a:	f000 fd87 	bl	801905c <_malloc_r>
 801854e:	b948      	cbnz	r0, 8018564 <__smakebuf_r+0x44>
 8018550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018554:	059a      	lsls	r2, r3, #22
 8018556:	d4ef      	bmi.n	8018538 <__smakebuf_r+0x18>
 8018558:	f023 0303 	bic.w	r3, r3, #3
 801855c:	f043 0302 	orr.w	r3, r3, #2
 8018560:	81a3      	strh	r3, [r4, #12]
 8018562:	e7e3      	b.n	801852c <__smakebuf_r+0xc>
 8018564:	4b0d      	ldr	r3, [pc, #52]	; (801859c <__smakebuf_r+0x7c>)
 8018566:	62b3      	str	r3, [r6, #40]	; 0x28
 8018568:	89a3      	ldrh	r3, [r4, #12]
 801856a:	6020      	str	r0, [r4, #0]
 801856c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018570:	81a3      	strh	r3, [r4, #12]
 8018572:	9b00      	ldr	r3, [sp, #0]
 8018574:	6163      	str	r3, [r4, #20]
 8018576:	9b01      	ldr	r3, [sp, #4]
 8018578:	6120      	str	r0, [r4, #16]
 801857a:	b15b      	cbz	r3, 8018594 <__smakebuf_r+0x74>
 801857c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018580:	4630      	mov	r0, r6
 8018582:	f001 fea9 	bl	801a2d8 <_isatty_r>
 8018586:	b128      	cbz	r0, 8018594 <__smakebuf_r+0x74>
 8018588:	89a3      	ldrh	r3, [r4, #12]
 801858a:	f023 0303 	bic.w	r3, r3, #3
 801858e:	f043 0301 	orr.w	r3, r3, #1
 8018592:	81a3      	strh	r3, [r4, #12]
 8018594:	89a0      	ldrh	r0, [r4, #12]
 8018596:	4305      	orrs	r5, r0
 8018598:	81a5      	strh	r5, [r4, #12]
 801859a:	e7cd      	b.n	8018538 <__smakebuf_r+0x18>
 801859c:	08017c0d 	.word	0x08017c0d

080185a0 <malloc>:
 80185a0:	4b02      	ldr	r3, [pc, #8]	; (80185ac <malloc+0xc>)
 80185a2:	4601      	mov	r1, r0
 80185a4:	6818      	ldr	r0, [r3, #0]
 80185a6:	f000 bd59 	b.w	801905c <_malloc_r>
 80185aa:	bf00      	nop
 80185ac:	20000028 	.word	0x20000028

080185b0 <__ascii_mbtowc>:
 80185b0:	b082      	sub	sp, #8
 80185b2:	b901      	cbnz	r1, 80185b6 <__ascii_mbtowc+0x6>
 80185b4:	a901      	add	r1, sp, #4
 80185b6:	b142      	cbz	r2, 80185ca <__ascii_mbtowc+0x1a>
 80185b8:	b14b      	cbz	r3, 80185ce <__ascii_mbtowc+0x1e>
 80185ba:	7813      	ldrb	r3, [r2, #0]
 80185bc:	600b      	str	r3, [r1, #0]
 80185be:	7812      	ldrb	r2, [r2, #0]
 80185c0:	1e10      	subs	r0, r2, #0
 80185c2:	bf18      	it	ne
 80185c4:	2001      	movne	r0, #1
 80185c6:	b002      	add	sp, #8
 80185c8:	4770      	bx	lr
 80185ca:	4610      	mov	r0, r2
 80185cc:	e7fb      	b.n	80185c6 <__ascii_mbtowc+0x16>
 80185ce:	f06f 0001 	mvn.w	r0, #1
 80185d2:	e7f8      	b.n	80185c6 <__ascii_mbtowc+0x16>

080185d4 <_Balloc>:
 80185d4:	b570      	push	{r4, r5, r6, lr}
 80185d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80185d8:	4604      	mov	r4, r0
 80185da:	460d      	mov	r5, r1
 80185dc:	b976      	cbnz	r6, 80185fc <_Balloc+0x28>
 80185de:	2010      	movs	r0, #16
 80185e0:	f7ff ffde 	bl	80185a0 <malloc>
 80185e4:	4602      	mov	r2, r0
 80185e6:	6260      	str	r0, [r4, #36]	; 0x24
 80185e8:	b920      	cbnz	r0, 80185f4 <_Balloc+0x20>
 80185ea:	4b18      	ldr	r3, [pc, #96]	; (801864c <_Balloc+0x78>)
 80185ec:	4818      	ldr	r0, [pc, #96]	; (8018650 <_Balloc+0x7c>)
 80185ee:	2166      	movs	r1, #102	; 0x66
 80185f0:	f001 fe20 	bl	801a234 <__assert_func>
 80185f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80185f8:	6006      	str	r6, [r0, #0]
 80185fa:	60c6      	str	r6, [r0, #12]
 80185fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80185fe:	68f3      	ldr	r3, [r6, #12]
 8018600:	b183      	cbz	r3, 8018624 <_Balloc+0x50>
 8018602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018604:	68db      	ldr	r3, [r3, #12]
 8018606:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801860a:	b9b8      	cbnz	r0, 801863c <_Balloc+0x68>
 801860c:	2101      	movs	r1, #1
 801860e:	fa01 f605 	lsl.w	r6, r1, r5
 8018612:	1d72      	adds	r2, r6, #5
 8018614:	0092      	lsls	r2, r2, #2
 8018616:	4620      	mov	r0, r4
 8018618:	f000 fc9d 	bl	8018f56 <_calloc_r>
 801861c:	b160      	cbz	r0, 8018638 <_Balloc+0x64>
 801861e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018622:	e00e      	b.n	8018642 <_Balloc+0x6e>
 8018624:	2221      	movs	r2, #33	; 0x21
 8018626:	2104      	movs	r1, #4
 8018628:	4620      	mov	r0, r4
 801862a:	f000 fc94 	bl	8018f56 <_calloc_r>
 801862e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018630:	60f0      	str	r0, [r6, #12]
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d1e4      	bne.n	8018602 <_Balloc+0x2e>
 8018638:	2000      	movs	r0, #0
 801863a:	bd70      	pop	{r4, r5, r6, pc}
 801863c:	6802      	ldr	r2, [r0, #0]
 801863e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018642:	2300      	movs	r3, #0
 8018644:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018648:	e7f7      	b.n	801863a <_Balloc+0x66>
 801864a:	bf00      	nop
 801864c:	0801a906 	.word	0x0801a906
 8018650:	0801aa68 	.word	0x0801aa68

08018654 <_Bfree>:
 8018654:	b570      	push	{r4, r5, r6, lr}
 8018656:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018658:	4605      	mov	r5, r0
 801865a:	460c      	mov	r4, r1
 801865c:	b976      	cbnz	r6, 801867c <_Bfree+0x28>
 801865e:	2010      	movs	r0, #16
 8018660:	f7ff ff9e 	bl	80185a0 <malloc>
 8018664:	4602      	mov	r2, r0
 8018666:	6268      	str	r0, [r5, #36]	; 0x24
 8018668:	b920      	cbnz	r0, 8018674 <_Bfree+0x20>
 801866a:	4b09      	ldr	r3, [pc, #36]	; (8018690 <_Bfree+0x3c>)
 801866c:	4809      	ldr	r0, [pc, #36]	; (8018694 <_Bfree+0x40>)
 801866e:	218a      	movs	r1, #138	; 0x8a
 8018670:	f001 fde0 	bl	801a234 <__assert_func>
 8018674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018678:	6006      	str	r6, [r0, #0]
 801867a:	60c6      	str	r6, [r0, #12]
 801867c:	b13c      	cbz	r4, 801868e <_Bfree+0x3a>
 801867e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018680:	6862      	ldr	r2, [r4, #4]
 8018682:	68db      	ldr	r3, [r3, #12]
 8018684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018688:	6021      	str	r1, [r4, #0]
 801868a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801868e:	bd70      	pop	{r4, r5, r6, pc}
 8018690:	0801a906 	.word	0x0801a906
 8018694:	0801aa68 	.word	0x0801aa68

08018698 <__multadd>:
 8018698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801869c:	690d      	ldr	r5, [r1, #16]
 801869e:	4607      	mov	r7, r0
 80186a0:	460c      	mov	r4, r1
 80186a2:	461e      	mov	r6, r3
 80186a4:	f101 0c14 	add.w	ip, r1, #20
 80186a8:	2000      	movs	r0, #0
 80186aa:	f8dc 3000 	ldr.w	r3, [ip]
 80186ae:	b299      	uxth	r1, r3
 80186b0:	fb02 6101 	mla	r1, r2, r1, r6
 80186b4:	0c1e      	lsrs	r6, r3, #16
 80186b6:	0c0b      	lsrs	r3, r1, #16
 80186b8:	fb02 3306 	mla	r3, r2, r6, r3
 80186bc:	b289      	uxth	r1, r1
 80186be:	3001      	adds	r0, #1
 80186c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80186c4:	4285      	cmp	r5, r0
 80186c6:	f84c 1b04 	str.w	r1, [ip], #4
 80186ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80186ce:	dcec      	bgt.n	80186aa <__multadd+0x12>
 80186d0:	b30e      	cbz	r6, 8018716 <__multadd+0x7e>
 80186d2:	68a3      	ldr	r3, [r4, #8]
 80186d4:	42ab      	cmp	r3, r5
 80186d6:	dc19      	bgt.n	801870c <__multadd+0x74>
 80186d8:	6861      	ldr	r1, [r4, #4]
 80186da:	4638      	mov	r0, r7
 80186dc:	3101      	adds	r1, #1
 80186de:	f7ff ff79 	bl	80185d4 <_Balloc>
 80186e2:	4680      	mov	r8, r0
 80186e4:	b928      	cbnz	r0, 80186f2 <__multadd+0x5a>
 80186e6:	4602      	mov	r2, r0
 80186e8:	4b0c      	ldr	r3, [pc, #48]	; (801871c <__multadd+0x84>)
 80186ea:	480d      	ldr	r0, [pc, #52]	; (8018720 <__multadd+0x88>)
 80186ec:	21b5      	movs	r1, #181	; 0xb5
 80186ee:	f001 fda1 	bl	801a234 <__assert_func>
 80186f2:	6922      	ldr	r2, [r4, #16]
 80186f4:	3202      	adds	r2, #2
 80186f6:	f104 010c 	add.w	r1, r4, #12
 80186fa:	0092      	lsls	r2, r2, #2
 80186fc:	300c      	adds	r0, #12
 80186fe:	f7fc fb7d 	bl	8014dfc <memcpy>
 8018702:	4621      	mov	r1, r4
 8018704:	4638      	mov	r0, r7
 8018706:	f7ff ffa5 	bl	8018654 <_Bfree>
 801870a:	4644      	mov	r4, r8
 801870c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018710:	3501      	adds	r5, #1
 8018712:	615e      	str	r6, [r3, #20]
 8018714:	6125      	str	r5, [r4, #16]
 8018716:	4620      	mov	r0, r4
 8018718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801871c:	0801a978 	.word	0x0801a978
 8018720:	0801aa68 	.word	0x0801aa68

08018724 <__s2b>:
 8018724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018728:	460c      	mov	r4, r1
 801872a:	4615      	mov	r5, r2
 801872c:	461f      	mov	r7, r3
 801872e:	2209      	movs	r2, #9
 8018730:	3308      	adds	r3, #8
 8018732:	4606      	mov	r6, r0
 8018734:	fb93 f3f2 	sdiv	r3, r3, r2
 8018738:	2100      	movs	r1, #0
 801873a:	2201      	movs	r2, #1
 801873c:	429a      	cmp	r2, r3
 801873e:	db09      	blt.n	8018754 <__s2b+0x30>
 8018740:	4630      	mov	r0, r6
 8018742:	f7ff ff47 	bl	80185d4 <_Balloc>
 8018746:	b940      	cbnz	r0, 801875a <__s2b+0x36>
 8018748:	4602      	mov	r2, r0
 801874a:	4b19      	ldr	r3, [pc, #100]	; (80187b0 <__s2b+0x8c>)
 801874c:	4819      	ldr	r0, [pc, #100]	; (80187b4 <__s2b+0x90>)
 801874e:	21ce      	movs	r1, #206	; 0xce
 8018750:	f001 fd70 	bl	801a234 <__assert_func>
 8018754:	0052      	lsls	r2, r2, #1
 8018756:	3101      	adds	r1, #1
 8018758:	e7f0      	b.n	801873c <__s2b+0x18>
 801875a:	9b08      	ldr	r3, [sp, #32]
 801875c:	6143      	str	r3, [r0, #20]
 801875e:	2d09      	cmp	r5, #9
 8018760:	f04f 0301 	mov.w	r3, #1
 8018764:	6103      	str	r3, [r0, #16]
 8018766:	dd16      	ble.n	8018796 <__s2b+0x72>
 8018768:	f104 0909 	add.w	r9, r4, #9
 801876c:	46c8      	mov	r8, r9
 801876e:	442c      	add	r4, r5
 8018770:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018774:	4601      	mov	r1, r0
 8018776:	3b30      	subs	r3, #48	; 0x30
 8018778:	220a      	movs	r2, #10
 801877a:	4630      	mov	r0, r6
 801877c:	f7ff ff8c 	bl	8018698 <__multadd>
 8018780:	45a0      	cmp	r8, r4
 8018782:	d1f5      	bne.n	8018770 <__s2b+0x4c>
 8018784:	f1a5 0408 	sub.w	r4, r5, #8
 8018788:	444c      	add	r4, r9
 801878a:	1b2d      	subs	r5, r5, r4
 801878c:	1963      	adds	r3, r4, r5
 801878e:	42bb      	cmp	r3, r7
 8018790:	db04      	blt.n	801879c <__s2b+0x78>
 8018792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018796:	340a      	adds	r4, #10
 8018798:	2509      	movs	r5, #9
 801879a:	e7f6      	b.n	801878a <__s2b+0x66>
 801879c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80187a0:	4601      	mov	r1, r0
 80187a2:	3b30      	subs	r3, #48	; 0x30
 80187a4:	220a      	movs	r2, #10
 80187a6:	4630      	mov	r0, r6
 80187a8:	f7ff ff76 	bl	8018698 <__multadd>
 80187ac:	e7ee      	b.n	801878c <__s2b+0x68>
 80187ae:	bf00      	nop
 80187b0:	0801a978 	.word	0x0801a978
 80187b4:	0801aa68 	.word	0x0801aa68

080187b8 <__hi0bits>:
 80187b8:	0c03      	lsrs	r3, r0, #16
 80187ba:	041b      	lsls	r3, r3, #16
 80187bc:	b9d3      	cbnz	r3, 80187f4 <__hi0bits+0x3c>
 80187be:	0400      	lsls	r0, r0, #16
 80187c0:	2310      	movs	r3, #16
 80187c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80187c6:	bf04      	itt	eq
 80187c8:	0200      	lsleq	r0, r0, #8
 80187ca:	3308      	addeq	r3, #8
 80187cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80187d0:	bf04      	itt	eq
 80187d2:	0100      	lsleq	r0, r0, #4
 80187d4:	3304      	addeq	r3, #4
 80187d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80187da:	bf04      	itt	eq
 80187dc:	0080      	lsleq	r0, r0, #2
 80187de:	3302      	addeq	r3, #2
 80187e0:	2800      	cmp	r0, #0
 80187e2:	db05      	blt.n	80187f0 <__hi0bits+0x38>
 80187e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80187e8:	f103 0301 	add.w	r3, r3, #1
 80187ec:	bf08      	it	eq
 80187ee:	2320      	moveq	r3, #32
 80187f0:	4618      	mov	r0, r3
 80187f2:	4770      	bx	lr
 80187f4:	2300      	movs	r3, #0
 80187f6:	e7e4      	b.n	80187c2 <__hi0bits+0xa>

080187f8 <__lo0bits>:
 80187f8:	6803      	ldr	r3, [r0, #0]
 80187fa:	f013 0207 	ands.w	r2, r3, #7
 80187fe:	4601      	mov	r1, r0
 8018800:	d00b      	beq.n	801881a <__lo0bits+0x22>
 8018802:	07da      	lsls	r2, r3, #31
 8018804:	d423      	bmi.n	801884e <__lo0bits+0x56>
 8018806:	0798      	lsls	r0, r3, #30
 8018808:	bf49      	itett	mi
 801880a:	085b      	lsrmi	r3, r3, #1
 801880c:	089b      	lsrpl	r3, r3, #2
 801880e:	2001      	movmi	r0, #1
 8018810:	600b      	strmi	r3, [r1, #0]
 8018812:	bf5c      	itt	pl
 8018814:	600b      	strpl	r3, [r1, #0]
 8018816:	2002      	movpl	r0, #2
 8018818:	4770      	bx	lr
 801881a:	b298      	uxth	r0, r3
 801881c:	b9a8      	cbnz	r0, 801884a <__lo0bits+0x52>
 801881e:	0c1b      	lsrs	r3, r3, #16
 8018820:	2010      	movs	r0, #16
 8018822:	b2da      	uxtb	r2, r3
 8018824:	b90a      	cbnz	r2, 801882a <__lo0bits+0x32>
 8018826:	3008      	adds	r0, #8
 8018828:	0a1b      	lsrs	r3, r3, #8
 801882a:	071a      	lsls	r2, r3, #28
 801882c:	bf04      	itt	eq
 801882e:	091b      	lsreq	r3, r3, #4
 8018830:	3004      	addeq	r0, #4
 8018832:	079a      	lsls	r2, r3, #30
 8018834:	bf04      	itt	eq
 8018836:	089b      	lsreq	r3, r3, #2
 8018838:	3002      	addeq	r0, #2
 801883a:	07da      	lsls	r2, r3, #31
 801883c:	d403      	bmi.n	8018846 <__lo0bits+0x4e>
 801883e:	085b      	lsrs	r3, r3, #1
 8018840:	f100 0001 	add.w	r0, r0, #1
 8018844:	d005      	beq.n	8018852 <__lo0bits+0x5a>
 8018846:	600b      	str	r3, [r1, #0]
 8018848:	4770      	bx	lr
 801884a:	4610      	mov	r0, r2
 801884c:	e7e9      	b.n	8018822 <__lo0bits+0x2a>
 801884e:	2000      	movs	r0, #0
 8018850:	4770      	bx	lr
 8018852:	2020      	movs	r0, #32
 8018854:	4770      	bx	lr
	...

08018858 <__i2b>:
 8018858:	b510      	push	{r4, lr}
 801885a:	460c      	mov	r4, r1
 801885c:	2101      	movs	r1, #1
 801885e:	f7ff feb9 	bl	80185d4 <_Balloc>
 8018862:	4602      	mov	r2, r0
 8018864:	b928      	cbnz	r0, 8018872 <__i2b+0x1a>
 8018866:	4b05      	ldr	r3, [pc, #20]	; (801887c <__i2b+0x24>)
 8018868:	4805      	ldr	r0, [pc, #20]	; (8018880 <__i2b+0x28>)
 801886a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801886e:	f001 fce1 	bl	801a234 <__assert_func>
 8018872:	2301      	movs	r3, #1
 8018874:	6144      	str	r4, [r0, #20]
 8018876:	6103      	str	r3, [r0, #16]
 8018878:	bd10      	pop	{r4, pc}
 801887a:	bf00      	nop
 801887c:	0801a978 	.word	0x0801a978
 8018880:	0801aa68 	.word	0x0801aa68

08018884 <__multiply>:
 8018884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018888:	4691      	mov	r9, r2
 801888a:	690a      	ldr	r2, [r1, #16]
 801888c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018890:	429a      	cmp	r2, r3
 8018892:	bfb8      	it	lt
 8018894:	460b      	movlt	r3, r1
 8018896:	460c      	mov	r4, r1
 8018898:	bfbc      	itt	lt
 801889a:	464c      	movlt	r4, r9
 801889c:	4699      	movlt	r9, r3
 801889e:	6927      	ldr	r7, [r4, #16]
 80188a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80188a4:	68a3      	ldr	r3, [r4, #8]
 80188a6:	6861      	ldr	r1, [r4, #4]
 80188a8:	eb07 060a 	add.w	r6, r7, sl
 80188ac:	42b3      	cmp	r3, r6
 80188ae:	b085      	sub	sp, #20
 80188b0:	bfb8      	it	lt
 80188b2:	3101      	addlt	r1, #1
 80188b4:	f7ff fe8e 	bl	80185d4 <_Balloc>
 80188b8:	b930      	cbnz	r0, 80188c8 <__multiply+0x44>
 80188ba:	4602      	mov	r2, r0
 80188bc:	4b44      	ldr	r3, [pc, #272]	; (80189d0 <__multiply+0x14c>)
 80188be:	4845      	ldr	r0, [pc, #276]	; (80189d4 <__multiply+0x150>)
 80188c0:	f240 115d 	movw	r1, #349	; 0x15d
 80188c4:	f001 fcb6 	bl	801a234 <__assert_func>
 80188c8:	f100 0514 	add.w	r5, r0, #20
 80188cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80188d0:	462b      	mov	r3, r5
 80188d2:	2200      	movs	r2, #0
 80188d4:	4543      	cmp	r3, r8
 80188d6:	d321      	bcc.n	801891c <__multiply+0x98>
 80188d8:	f104 0314 	add.w	r3, r4, #20
 80188dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80188e0:	f109 0314 	add.w	r3, r9, #20
 80188e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80188e8:	9202      	str	r2, [sp, #8]
 80188ea:	1b3a      	subs	r2, r7, r4
 80188ec:	3a15      	subs	r2, #21
 80188ee:	f022 0203 	bic.w	r2, r2, #3
 80188f2:	3204      	adds	r2, #4
 80188f4:	f104 0115 	add.w	r1, r4, #21
 80188f8:	428f      	cmp	r7, r1
 80188fa:	bf38      	it	cc
 80188fc:	2204      	movcc	r2, #4
 80188fe:	9201      	str	r2, [sp, #4]
 8018900:	9a02      	ldr	r2, [sp, #8]
 8018902:	9303      	str	r3, [sp, #12]
 8018904:	429a      	cmp	r2, r3
 8018906:	d80c      	bhi.n	8018922 <__multiply+0x9e>
 8018908:	2e00      	cmp	r6, #0
 801890a:	dd03      	ble.n	8018914 <__multiply+0x90>
 801890c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018910:	2b00      	cmp	r3, #0
 8018912:	d05a      	beq.n	80189ca <__multiply+0x146>
 8018914:	6106      	str	r6, [r0, #16]
 8018916:	b005      	add	sp, #20
 8018918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801891c:	f843 2b04 	str.w	r2, [r3], #4
 8018920:	e7d8      	b.n	80188d4 <__multiply+0x50>
 8018922:	f8b3 a000 	ldrh.w	sl, [r3]
 8018926:	f1ba 0f00 	cmp.w	sl, #0
 801892a:	d024      	beq.n	8018976 <__multiply+0xf2>
 801892c:	f104 0e14 	add.w	lr, r4, #20
 8018930:	46a9      	mov	r9, r5
 8018932:	f04f 0c00 	mov.w	ip, #0
 8018936:	f85e 2b04 	ldr.w	r2, [lr], #4
 801893a:	f8d9 1000 	ldr.w	r1, [r9]
 801893e:	fa1f fb82 	uxth.w	fp, r2
 8018942:	b289      	uxth	r1, r1
 8018944:	fb0a 110b 	mla	r1, sl, fp, r1
 8018948:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801894c:	f8d9 2000 	ldr.w	r2, [r9]
 8018950:	4461      	add	r1, ip
 8018952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018956:	fb0a c20b 	mla	r2, sl, fp, ip
 801895a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801895e:	b289      	uxth	r1, r1
 8018960:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018964:	4577      	cmp	r7, lr
 8018966:	f849 1b04 	str.w	r1, [r9], #4
 801896a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801896e:	d8e2      	bhi.n	8018936 <__multiply+0xb2>
 8018970:	9a01      	ldr	r2, [sp, #4]
 8018972:	f845 c002 	str.w	ip, [r5, r2]
 8018976:	9a03      	ldr	r2, [sp, #12]
 8018978:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801897c:	3304      	adds	r3, #4
 801897e:	f1b9 0f00 	cmp.w	r9, #0
 8018982:	d020      	beq.n	80189c6 <__multiply+0x142>
 8018984:	6829      	ldr	r1, [r5, #0]
 8018986:	f104 0c14 	add.w	ip, r4, #20
 801898a:	46ae      	mov	lr, r5
 801898c:	f04f 0a00 	mov.w	sl, #0
 8018990:	f8bc b000 	ldrh.w	fp, [ip]
 8018994:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018998:	fb09 220b 	mla	r2, r9, fp, r2
 801899c:	4492      	add	sl, r2
 801899e:	b289      	uxth	r1, r1
 80189a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80189a4:	f84e 1b04 	str.w	r1, [lr], #4
 80189a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80189ac:	f8be 1000 	ldrh.w	r1, [lr]
 80189b0:	0c12      	lsrs	r2, r2, #16
 80189b2:	fb09 1102 	mla	r1, r9, r2, r1
 80189b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80189ba:	4567      	cmp	r7, ip
 80189bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80189c0:	d8e6      	bhi.n	8018990 <__multiply+0x10c>
 80189c2:	9a01      	ldr	r2, [sp, #4]
 80189c4:	50a9      	str	r1, [r5, r2]
 80189c6:	3504      	adds	r5, #4
 80189c8:	e79a      	b.n	8018900 <__multiply+0x7c>
 80189ca:	3e01      	subs	r6, #1
 80189cc:	e79c      	b.n	8018908 <__multiply+0x84>
 80189ce:	bf00      	nop
 80189d0:	0801a978 	.word	0x0801a978
 80189d4:	0801aa68 	.word	0x0801aa68

080189d8 <__pow5mult>:
 80189d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189dc:	4615      	mov	r5, r2
 80189de:	f012 0203 	ands.w	r2, r2, #3
 80189e2:	4606      	mov	r6, r0
 80189e4:	460f      	mov	r7, r1
 80189e6:	d007      	beq.n	80189f8 <__pow5mult+0x20>
 80189e8:	4c25      	ldr	r4, [pc, #148]	; (8018a80 <__pow5mult+0xa8>)
 80189ea:	3a01      	subs	r2, #1
 80189ec:	2300      	movs	r3, #0
 80189ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80189f2:	f7ff fe51 	bl	8018698 <__multadd>
 80189f6:	4607      	mov	r7, r0
 80189f8:	10ad      	asrs	r5, r5, #2
 80189fa:	d03d      	beq.n	8018a78 <__pow5mult+0xa0>
 80189fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80189fe:	b97c      	cbnz	r4, 8018a20 <__pow5mult+0x48>
 8018a00:	2010      	movs	r0, #16
 8018a02:	f7ff fdcd 	bl	80185a0 <malloc>
 8018a06:	4602      	mov	r2, r0
 8018a08:	6270      	str	r0, [r6, #36]	; 0x24
 8018a0a:	b928      	cbnz	r0, 8018a18 <__pow5mult+0x40>
 8018a0c:	4b1d      	ldr	r3, [pc, #116]	; (8018a84 <__pow5mult+0xac>)
 8018a0e:	481e      	ldr	r0, [pc, #120]	; (8018a88 <__pow5mult+0xb0>)
 8018a10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018a14:	f001 fc0e 	bl	801a234 <__assert_func>
 8018a18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018a1c:	6004      	str	r4, [r0, #0]
 8018a1e:	60c4      	str	r4, [r0, #12]
 8018a20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018a24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018a28:	b94c      	cbnz	r4, 8018a3e <__pow5mult+0x66>
 8018a2a:	f240 2171 	movw	r1, #625	; 0x271
 8018a2e:	4630      	mov	r0, r6
 8018a30:	f7ff ff12 	bl	8018858 <__i2b>
 8018a34:	2300      	movs	r3, #0
 8018a36:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a3a:	4604      	mov	r4, r0
 8018a3c:	6003      	str	r3, [r0, #0]
 8018a3e:	f04f 0900 	mov.w	r9, #0
 8018a42:	07eb      	lsls	r3, r5, #31
 8018a44:	d50a      	bpl.n	8018a5c <__pow5mult+0x84>
 8018a46:	4639      	mov	r1, r7
 8018a48:	4622      	mov	r2, r4
 8018a4a:	4630      	mov	r0, r6
 8018a4c:	f7ff ff1a 	bl	8018884 <__multiply>
 8018a50:	4639      	mov	r1, r7
 8018a52:	4680      	mov	r8, r0
 8018a54:	4630      	mov	r0, r6
 8018a56:	f7ff fdfd 	bl	8018654 <_Bfree>
 8018a5a:	4647      	mov	r7, r8
 8018a5c:	106d      	asrs	r5, r5, #1
 8018a5e:	d00b      	beq.n	8018a78 <__pow5mult+0xa0>
 8018a60:	6820      	ldr	r0, [r4, #0]
 8018a62:	b938      	cbnz	r0, 8018a74 <__pow5mult+0x9c>
 8018a64:	4622      	mov	r2, r4
 8018a66:	4621      	mov	r1, r4
 8018a68:	4630      	mov	r0, r6
 8018a6a:	f7ff ff0b 	bl	8018884 <__multiply>
 8018a6e:	6020      	str	r0, [r4, #0]
 8018a70:	f8c0 9000 	str.w	r9, [r0]
 8018a74:	4604      	mov	r4, r0
 8018a76:	e7e4      	b.n	8018a42 <__pow5mult+0x6a>
 8018a78:	4638      	mov	r0, r7
 8018a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a7e:	bf00      	nop
 8018a80:	0801abb8 	.word	0x0801abb8
 8018a84:	0801a906 	.word	0x0801a906
 8018a88:	0801aa68 	.word	0x0801aa68

08018a8c <__lshift>:
 8018a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a90:	460c      	mov	r4, r1
 8018a92:	6849      	ldr	r1, [r1, #4]
 8018a94:	6923      	ldr	r3, [r4, #16]
 8018a96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018a9a:	68a3      	ldr	r3, [r4, #8]
 8018a9c:	4607      	mov	r7, r0
 8018a9e:	4691      	mov	r9, r2
 8018aa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018aa4:	f108 0601 	add.w	r6, r8, #1
 8018aa8:	42b3      	cmp	r3, r6
 8018aaa:	db0b      	blt.n	8018ac4 <__lshift+0x38>
 8018aac:	4638      	mov	r0, r7
 8018aae:	f7ff fd91 	bl	80185d4 <_Balloc>
 8018ab2:	4605      	mov	r5, r0
 8018ab4:	b948      	cbnz	r0, 8018aca <__lshift+0x3e>
 8018ab6:	4602      	mov	r2, r0
 8018ab8:	4b2a      	ldr	r3, [pc, #168]	; (8018b64 <__lshift+0xd8>)
 8018aba:	482b      	ldr	r0, [pc, #172]	; (8018b68 <__lshift+0xdc>)
 8018abc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018ac0:	f001 fbb8 	bl	801a234 <__assert_func>
 8018ac4:	3101      	adds	r1, #1
 8018ac6:	005b      	lsls	r3, r3, #1
 8018ac8:	e7ee      	b.n	8018aa8 <__lshift+0x1c>
 8018aca:	2300      	movs	r3, #0
 8018acc:	f100 0114 	add.w	r1, r0, #20
 8018ad0:	f100 0210 	add.w	r2, r0, #16
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	4553      	cmp	r3, sl
 8018ad8:	db37      	blt.n	8018b4a <__lshift+0xbe>
 8018ada:	6920      	ldr	r0, [r4, #16]
 8018adc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018ae0:	f104 0314 	add.w	r3, r4, #20
 8018ae4:	f019 091f 	ands.w	r9, r9, #31
 8018ae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018aec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018af0:	d02f      	beq.n	8018b52 <__lshift+0xc6>
 8018af2:	f1c9 0e20 	rsb	lr, r9, #32
 8018af6:	468a      	mov	sl, r1
 8018af8:	f04f 0c00 	mov.w	ip, #0
 8018afc:	681a      	ldr	r2, [r3, #0]
 8018afe:	fa02 f209 	lsl.w	r2, r2, r9
 8018b02:	ea42 020c 	orr.w	r2, r2, ip
 8018b06:	f84a 2b04 	str.w	r2, [sl], #4
 8018b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b0e:	4298      	cmp	r0, r3
 8018b10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018b14:	d8f2      	bhi.n	8018afc <__lshift+0x70>
 8018b16:	1b03      	subs	r3, r0, r4
 8018b18:	3b15      	subs	r3, #21
 8018b1a:	f023 0303 	bic.w	r3, r3, #3
 8018b1e:	3304      	adds	r3, #4
 8018b20:	f104 0215 	add.w	r2, r4, #21
 8018b24:	4290      	cmp	r0, r2
 8018b26:	bf38      	it	cc
 8018b28:	2304      	movcc	r3, #4
 8018b2a:	f841 c003 	str.w	ip, [r1, r3]
 8018b2e:	f1bc 0f00 	cmp.w	ip, #0
 8018b32:	d001      	beq.n	8018b38 <__lshift+0xac>
 8018b34:	f108 0602 	add.w	r6, r8, #2
 8018b38:	3e01      	subs	r6, #1
 8018b3a:	4638      	mov	r0, r7
 8018b3c:	612e      	str	r6, [r5, #16]
 8018b3e:	4621      	mov	r1, r4
 8018b40:	f7ff fd88 	bl	8018654 <_Bfree>
 8018b44:	4628      	mov	r0, r5
 8018b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8018b4e:	3301      	adds	r3, #1
 8018b50:	e7c1      	b.n	8018ad6 <__lshift+0x4a>
 8018b52:	3904      	subs	r1, #4
 8018b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b58:	f841 2f04 	str.w	r2, [r1, #4]!
 8018b5c:	4298      	cmp	r0, r3
 8018b5e:	d8f9      	bhi.n	8018b54 <__lshift+0xc8>
 8018b60:	e7ea      	b.n	8018b38 <__lshift+0xac>
 8018b62:	bf00      	nop
 8018b64:	0801a978 	.word	0x0801a978
 8018b68:	0801aa68 	.word	0x0801aa68

08018b6c <__mcmp>:
 8018b6c:	b530      	push	{r4, r5, lr}
 8018b6e:	6902      	ldr	r2, [r0, #16]
 8018b70:	690c      	ldr	r4, [r1, #16]
 8018b72:	1b12      	subs	r2, r2, r4
 8018b74:	d10e      	bne.n	8018b94 <__mcmp+0x28>
 8018b76:	f100 0314 	add.w	r3, r0, #20
 8018b7a:	3114      	adds	r1, #20
 8018b7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018b80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018b84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018b88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018b8c:	42a5      	cmp	r5, r4
 8018b8e:	d003      	beq.n	8018b98 <__mcmp+0x2c>
 8018b90:	d305      	bcc.n	8018b9e <__mcmp+0x32>
 8018b92:	2201      	movs	r2, #1
 8018b94:	4610      	mov	r0, r2
 8018b96:	bd30      	pop	{r4, r5, pc}
 8018b98:	4283      	cmp	r3, r0
 8018b9a:	d3f3      	bcc.n	8018b84 <__mcmp+0x18>
 8018b9c:	e7fa      	b.n	8018b94 <__mcmp+0x28>
 8018b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8018ba2:	e7f7      	b.n	8018b94 <__mcmp+0x28>

08018ba4 <__mdiff>:
 8018ba4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ba8:	460c      	mov	r4, r1
 8018baa:	4606      	mov	r6, r0
 8018bac:	4611      	mov	r1, r2
 8018bae:	4620      	mov	r0, r4
 8018bb0:	4690      	mov	r8, r2
 8018bb2:	f7ff ffdb 	bl	8018b6c <__mcmp>
 8018bb6:	1e05      	subs	r5, r0, #0
 8018bb8:	d110      	bne.n	8018bdc <__mdiff+0x38>
 8018bba:	4629      	mov	r1, r5
 8018bbc:	4630      	mov	r0, r6
 8018bbe:	f7ff fd09 	bl	80185d4 <_Balloc>
 8018bc2:	b930      	cbnz	r0, 8018bd2 <__mdiff+0x2e>
 8018bc4:	4b3a      	ldr	r3, [pc, #232]	; (8018cb0 <__mdiff+0x10c>)
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	f240 2132 	movw	r1, #562	; 0x232
 8018bcc:	4839      	ldr	r0, [pc, #228]	; (8018cb4 <__mdiff+0x110>)
 8018bce:	f001 fb31 	bl	801a234 <__assert_func>
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bdc:	bfa4      	itt	ge
 8018bde:	4643      	movge	r3, r8
 8018be0:	46a0      	movge	r8, r4
 8018be2:	4630      	mov	r0, r6
 8018be4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018be8:	bfa6      	itte	ge
 8018bea:	461c      	movge	r4, r3
 8018bec:	2500      	movge	r5, #0
 8018bee:	2501      	movlt	r5, #1
 8018bf0:	f7ff fcf0 	bl	80185d4 <_Balloc>
 8018bf4:	b920      	cbnz	r0, 8018c00 <__mdiff+0x5c>
 8018bf6:	4b2e      	ldr	r3, [pc, #184]	; (8018cb0 <__mdiff+0x10c>)
 8018bf8:	4602      	mov	r2, r0
 8018bfa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018bfe:	e7e5      	b.n	8018bcc <__mdiff+0x28>
 8018c00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018c04:	6926      	ldr	r6, [r4, #16]
 8018c06:	60c5      	str	r5, [r0, #12]
 8018c08:	f104 0914 	add.w	r9, r4, #20
 8018c0c:	f108 0514 	add.w	r5, r8, #20
 8018c10:	f100 0e14 	add.w	lr, r0, #20
 8018c14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018c18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018c1c:	f108 0210 	add.w	r2, r8, #16
 8018c20:	46f2      	mov	sl, lr
 8018c22:	2100      	movs	r1, #0
 8018c24:	f859 3b04 	ldr.w	r3, [r9], #4
 8018c28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018c2c:	fa1f f883 	uxth.w	r8, r3
 8018c30:	fa11 f18b 	uxtah	r1, r1, fp
 8018c34:	0c1b      	lsrs	r3, r3, #16
 8018c36:	eba1 0808 	sub.w	r8, r1, r8
 8018c3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018c3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018c42:	fa1f f888 	uxth.w	r8, r8
 8018c46:	1419      	asrs	r1, r3, #16
 8018c48:	454e      	cmp	r6, r9
 8018c4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018c4e:	f84a 3b04 	str.w	r3, [sl], #4
 8018c52:	d8e7      	bhi.n	8018c24 <__mdiff+0x80>
 8018c54:	1b33      	subs	r3, r6, r4
 8018c56:	3b15      	subs	r3, #21
 8018c58:	f023 0303 	bic.w	r3, r3, #3
 8018c5c:	3304      	adds	r3, #4
 8018c5e:	3415      	adds	r4, #21
 8018c60:	42a6      	cmp	r6, r4
 8018c62:	bf38      	it	cc
 8018c64:	2304      	movcc	r3, #4
 8018c66:	441d      	add	r5, r3
 8018c68:	4473      	add	r3, lr
 8018c6a:	469e      	mov	lr, r3
 8018c6c:	462e      	mov	r6, r5
 8018c6e:	4566      	cmp	r6, ip
 8018c70:	d30e      	bcc.n	8018c90 <__mdiff+0xec>
 8018c72:	f10c 0203 	add.w	r2, ip, #3
 8018c76:	1b52      	subs	r2, r2, r5
 8018c78:	f022 0203 	bic.w	r2, r2, #3
 8018c7c:	3d03      	subs	r5, #3
 8018c7e:	45ac      	cmp	ip, r5
 8018c80:	bf38      	it	cc
 8018c82:	2200      	movcc	r2, #0
 8018c84:	441a      	add	r2, r3
 8018c86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018c8a:	b17b      	cbz	r3, 8018cac <__mdiff+0x108>
 8018c8c:	6107      	str	r7, [r0, #16]
 8018c8e:	e7a3      	b.n	8018bd8 <__mdiff+0x34>
 8018c90:	f856 8b04 	ldr.w	r8, [r6], #4
 8018c94:	fa11 f288 	uxtah	r2, r1, r8
 8018c98:	1414      	asrs	r4, r2, #16
 8018c9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018c9e:	b292      	uxth	r2, r2
 8018ca0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018ca4:	f84e 2b04 	str.w	r2, [lr], #4
 8018ca8:	1421      	asrs	r1, r4, #16
 8018caa:	e7e0      	b.n	8018c6e <__mdiff+0xca>
 8018cac:	3f01      	subs	r7, #1
 8018cae:	e7ea      	b.n	8018c86 <__mdiff+0xe2>
 8018cb0:	0801a978 	.word	0x0801a978
 8018cb4:	0801aa68 	.word	0x0801aa68

08018cb8 <__ulp>:
 8018cb8:	b082      	sub	sp, #8
 8018cba:	ed8d 0b00 	vstr	d0, [sp]
 8018cbe:	9b01      	ldr	r3, [sp, #4]
 8018cc0:	4912      	ldr	r1, [pc, #72]	; (8018d0c <__ulp+0x54>)
 8018cc2:	4019      	ands	r1, r3
 8018cc4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018cc8:	2900      	cmp	r1, #0
 8018cca:	dd05      	ble.n	8018cd8 <__ulp+0x20>
 8018ccc:	2200      	movs	r2, #0
 8018cce:	460b      	mov	r3, r1
 8018cd0:	ec43 2b10 	vmov	d0, r2, r3
 8018cd4:	b002      	add	sp, #8
 8018cd6:	4770      	bx	lr
 8018cd8:	4249      	negs	r1, r1
 8018cda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018cde:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018ce2:	f04f 0200 	mov.w	r2, #0
 8018ce6:	f04f 0300 	mov.w	r3, #0
 8018cea:	da04      	bge.n	8018cf6 <__ulp+0x3e>
 8018cec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018cf0:	fa41 f300 	asr.w	r3, r1, r0
 8018cf4:	e7ec      	b.n	8018cd0 <__ulp+0x18>
 8018cf6:	f1a0 0114 	sub.w	r1, r0, #20
 8018cfa:	291e      	cmp	r1, #30
 8018cfc:	bfda      	itte	le
 8018cfe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018d02:	fa20 f101 	lsrle.w	r1, r0, r1
 8018d06:	2101      	movgt	r1, #1
 8018d08:	460a      	mov	r2, r1
 8018d0a:	e7e1      	b.n	8018cd0 <__ulp+0x18>
 8018d0c:	7ff00000 	.word	0x7ff00000

08018d10 <__b2d>:
 8018d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d12:	6905      	ldr	r5, [r0, #16]
 8018d14:	f100 0714 	add.w	r7, r0, #20
 8018d18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018d1c:	1f2e      	subs	r6, r5, #4
 8018d1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d22:	4620      	mov	r0, r4
 8018d24:	f7ff fd48 	bl	80187b8 <__hi0bits>
 8018d28:	f1c0 0320 	rsb	r3, r0, #32
 8018d2c:	280a      	cmp	r0, #10
 8018d2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018dac <__b2d+0x9c>
 8018d32:	600b      	str	r3, [r1, #0]
 8018d34:	dc14      	bgt.n	8018d60 <__b2d+0x50>
 8018d36:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d3a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d3e:	42b7      	cmp	r7, r6
 8018d40:	ea41 030c 	orr.w	r3, r1, ip
 8018d44:	bf34      	ite	cc
 8018d46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d4a:	2100      	movcs	r1, #0
 8018d4c:	3015      	adds	r0, #21
 8018d4e:	fa04 f000 	lsl.w	r0, r4, r0
 8018d52:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d56:	ea40 0201 	orr.w	r2, r0, r1
 8018d5a:	ec43 2b10 	vmov	d0, r2, r3
 8018d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d60:	42b7      	cmp	r7, r6
 8018d62:	bf3a      	itte	cc
 8018d64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d68:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d6c:	2100      	movcs	r1, #0
 8018d6e:	380b      	subs	r0, #11
 8018d70:	d017      	beq.n	8018da2 <__b2d+0x92>
 8018d72:	f1c0 0c20 	rsb	ip, r0, #32
 8018d76:	fa04 f500 	lsl.w	r5, r4, r0
 8018d7a:	42be      	cmp	r6, r7
 8018d7c:	fa21 f40c 	lsr.w	r4, r1, ip
 8018d80:	ea45 0504 	orr.w	r5, r5, r4
 8018d84:	bf8c      	ite	hi
 8018d86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d8a:	2400      	movls	r4, #0
 8018d8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018d90:	fa01 f000 	lsl.w	r0, r1, r0
 8018d94:	fa24 f40c 	lsr.w	r4, r4, ip
 8018d98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018d9c:	ea40 0204 	orr.w	r2, r0, r4
 8018da0:	e7db      	b.n	8018d5a <__b2d+0x4a>
 8018da2:	ea44 030c 	orr.w	r3, r4, ip
 8018da6:	460a      	mov	r2, r1
 8018da8:	e7d7      	b.n	8018d5a <__b2d+0x4a>
 8018daa:	bf00      	nop
 8018dac:	3ff00000 	.word	0x3ff00000

08018db0 <__d2b>:
 8018db0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018db4:	4689      	mov	r9, r1
 8018db6:	2101      	movs	r1, #1
 8018db8:	ec57 6b10 	vmov	r6, r7, d0
 8018dbc:	4690      	mov	r8, r2
 8018dbe:	f7ff fc09 	bl	80185d4 <_Balloc>
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	b930      	cbnz	r0, 8018dd4 <__d2b+0x24>
 8018dc6:	4602      	mov	r2, r0
 8018dc8:	4b25      	ldr	r3, [pc, #148]	; (8018e60 <__d2b+0xb0>)
 8018dca:	4826      	ldr	r0, [pc, #152]	; (8018e64 <__d2b+0xb4>)
 8018dcc:	f240 310a 	movw	r1, #778	; 0x30a
 8018dd0:	f001 fa30 	bl	801a234 <__assert_func>
 8018dd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018dd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018ddc:	bb35      	cbnz	r5, 8018e2c <__d2b+0x7c>
 8018dde:	2e00      	cmp	r6, #0
 8018de0:	9301      	str	r3, [sp, #4]
 8018de2:	d028      	beq.n	8018e36 <__d2b+0x86>
 8018de4:	4668      	mov	r0, sp
 8018de6:	9600      	str	r6, [sp, #0]
 8018de8:	f7ff fd06 	bl	80187f8 <__lo0bits>
 8018dec:	9900      	ldr	r1, [sp, #0]
 8018dee:	b300      	cbz	r0, 8018e32 <__d2b+0x82>
 8018df0:	9a01      	ldr	r2, [sp, #4]
 8018df2:	f1c0 0320 	rsb	r3, r0, #32
 8018df6:	fa02 f303 	lsl.w	r3, r2, r3
 8018dfa:	430b      	orrs	r3, r1
 8018dfc:	40c2      	lsrs	r2, r0
 8018dfe:	6163      	str	r3, [r4, #20]
 8018e00:	9201      	str	r2, [sp, #4]
 8018e02:	9b01      	ldr	r3, [sp, #4]
 8018e04:	61a3      	str	r3, [r4, #24]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	bf14      	ite	ne
 8018e0a:	2202      	movne	r2, #2
 8018e0c:	2201      	moveq	r2, #1
 8018e0e:	6122      	str	r2, [r4, #16]
 8018e10:	b1d5      	cbz	r5, 8018e48 <__d2b+0x98>
 8018e12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018e16:	4405      	add	r5, r0
 8018e18:	f8c9 5000 	str.w	r5, [r9]
 8018e1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018e20:	f8c8 0000 	str.w	r0, [r8]
 8018e24:	4620      	mov	r0, r4
 8018e26:	b003      	add	sp, #12
 8018e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e30:	e7d5      	b.n	8018dde <__d2b+0x2e>
 8018e32:	6161      	str	r1, [r4, #20]
 8018e34:	e7e5      	b.n	8018e02 <__d2b+0x52>
 8018e36:	a801      	add	r0, sp, #4
 8018e38:	f7ff fcde 	bl	80187f8 <__lo0bits>
 8018e3c:	9b01      	ldr	r3, [sp, #4]
 8018e3e:	6163      	str	r3, [r4, #20]
 8018e40:	2201      	movs	r2, #1
 8018e42:	6122      	str	r2, [r4, #16]
 8018e44:	3020      	adds	r0, #32
 8018e46:	e7e3      	b.n	8018e10 <__d2b+0x60>
 8018e48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018e4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e50:	f8c9 0000 	str.w	r0, [r9]
 8018e54:	6918      	ldr	r0, [r3, #16]
 8018e56:	f7ff fcaf 	bl	80187b8 <__hi0bits>
 8018e5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018e5e:	e7df      	b.n	8018e20 <__d2b+0x70>
 8018e60:	0801a978 	.word	0x0801a978
 8018e64:	0801aa68 	.word	0x0801aa68

08018e68 <__ratio>:
 8018e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e6c:	4688      	mov	r8, r1
 8018e6e:	4669      	mov	r1, sp
 8018e70:	4681      	mov	r9, r0
 8018e72:	f7ff ff4d 	bl	8018d10 <__b2d>
 8018e76:	a901      	add	r1, sp, #4
 8018e78:	4640      	mov	r0, r8
 8018e7a:	ec55 4b10 	vmov	r4, r5, d0
 8018e7e:	f7ff ff47 	bl	8018d10 <__b2d>
 8018e82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e8a:	eba3 0c02 	sub.w	ip, r3, r2
 8018e8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e92:	1a9b      	subs	r3, r3, r2
 8018e94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e98:	ec51 0b10 	vmov	r0, r1, d0
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	bfd6      	itet	le
 8018ea0:	460a      	movle	r2, r1
 8018ea2:	462a      	movgt	r2, r5
 8018ea4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018ea8:	468b      	mov	fp, r1
 8018eaa:	462f      	mov	r7, r5
 8018eac:	bfd4      	ite	le
 8018eae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018eb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	ee10 2a10 	vmov	r2, s0
 8018ebc:	465b      	mov	r3, fp
 8018ebe:	4639      	mov	r1, r7
 8018ec0:	f7ef fbfc 	bl	80086bc <__aeabi_ddiv>
 8018ec4:	ec41 0b10 	vmov	d0, r0, r1
 8018ec8:	b003      	add	sp, #12
 8018eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ece <__copybits>:
 8018ece:	3901      	subs	r1, #1
 8018ed0:	b570      	push	{r4, r5, r6, lr}
 8018ed2:	1149      	asrs	r1, r1, #5
 8018ed4:	6914      	ldr	r4, [r2, #16]
 8018ed6:	3101      	adds	r1, #1
 8018ed8:	f102 0314 	add.w	r3, r2, #20
 8018edc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018ee0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018ee4:	1f05      	subs	r5, r0, #4
 8018ee6:	42a3      	cmp	r3, r4
 8018ee8:	d30c      	bcc.n	8018f04 <__copybits+0x36>
 8018eea:	1aa3      	subs	r3, r4, r2
 8018eec:	3b11      	subs	r3, #17
 8018eee:	f023 0303 	bic.w	r3, r3, #3
 8018ef2:	3211      	adds	r2, #17
 8018ef4:	42a2      	cmp	r2, r4
 8018ef6:	bf88      	it	hi
 8018ef8:	2300      	movhi	r3, #0
 8018efa:	4418      	add	r0, r3
 8018efc:	2300      	movs	r3, #0
 8018efe:	4288      	cmp	r0, r1
 8018f00:	d305      	bcc.n	8018f0e <__copybits+0x40>
 8018f02:	bd70      	pop	{r4, r5, r6, pc}
 8018f04:	f853 6b04 	ldr.w	r6, [r3], #4
 8018f08:	f845 6f04 	str.w	r6, [r5, #4]!
 8018f0c:	e7eb      	b.n	8018ee6 <__copybits+0x18>
 8018f0e:	f840 3b04 	str.w	r3, [r0], #4
 8018f12:	e7f4      	b.n	8018efe <__copybits+0x30>

08018f14 <__any_on>:
 8018f14:	f100 0214 	add.w	r2, r0, #20
 8018f18:	6900      	ldr	r0, [r0, #16]
 8018f1a:	114b      	asrs	r3, r1, #5
 8018f1c:	4298      	cmp	r0, r3
 8018f1e:	b510      	push	{r4, lr}
 8018f20:	db11      	blt.n	8018f46 <__any_on+0x32>
 8018f22:	dd0a      	ble.n	8018f3a <__any_on+0x26>
 8018f24:	f011 011f 	ands.w	r1, r1, #31
 8018f28:	d007      	beq.n	8018f3a <__any_on+0x26>
 8018f2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f2e:	fa24 f001 	lsr.w	r0, r4, r1
 8018f32:	fa00 f101 	lsl.w	r1, r0, r1
 8018f36:	428c      	cmp	r4, r1
 8018f38:	d10b      	bne.n	8018f52 <__any_on+0x3e>
 8018f3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f3e:	4293      	cmp	r3, r2
 8018f40:	d803      	bhi.n	8018f4a <__any_on+0x36>
 8018f42:	2000      	movs	r0, #0
 8018f44:	bd10      	pop	{r4, pc}
 8018f46:	4603      	mov	r3, r0
 8018f48:	e7f7      	b.n	8018f3a <__any_on+0x26>
 8018f4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f4e:	2900      	cmp	r1, #0
 8018f50:	d0f5      	beq.n	8018f3e <__any_on+0x2a>
 8018f52:	2001      	movs	r0, #1
 8018f54:	e7f6      	b.n	8018f44 <__any_on+0x30>

08018f56 <_calloc_r>:
 8018f56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f58:	fba1 2402 	umull	r2, r4, r1, r2
 8018f5c:	b94c      	cbnz	r4, 8018f72 <_calloc_r+0x1c>
 8018f5e:	4611      	mov	r1, r2
 8018f60:	9201      	str	r2, [sp, #4]
 8018f62:	f000 f87b 	bl	801905c <_malloc_r>
 8018f66:	9a01      	ldr	r2, [sp, #4]
 8018f68:	4605      	mov	r5, r0
 8018f6a:	b930      	cbnz	r0, 8018f7a <_calloc_r+0x24>
 8018f6c:	4628      	mov	r0, r5
 8018f6e:	b003      	add	sp, #12
 8018f70:	bd30      	pop	{r4, r5, pc}
 8018f72:	220c      	movs	r2, #12
 8018f74:	6002      	str	r2, [r0, #0]
 8018f76:	2500      	movs	r5, #0
 8018f78:	e7f8      	b.n	8018f6c <_calloc_r+0x16>
 8018f7a:	4621      	mov	r1, r4
 8018f7c:	f7fb ff4c 	bl	8014e18 <memset>
 8018f80:	e7f4      	b.n	8018f6c <_calloc_r+0x16>
	...

08018f84 <_free_r>:
 8018f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f86:	2900      	cmp	r1, #0
 8018f88:	d044      	beq.n	8019014 <_free_r+0x90>
 8018f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f8e:	9001      	str	r0, [sp, #4]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	f1a1 0404 	sub.w	r4, r1, #4
 8018f96:	bfb8      	it	lt
 8018f98:	18e4      	addlt	r4, r4, r3
 8018f9a:	f001 f9d9 	bl	801a350 <__malloc_lock>
 8018f9e:	4a1e      	ldr	r2, [pc, #120]	; (8019018 <_free_r+0x94>)
 8018fa0:	9801      	ldr	r0, [sp, #4]
 8018fa2:	6813      	ldr	r3, [r2, #0]
 8018fa4:	b933      	cbnz	r3, 8018fb4 <_free_r+0x30>
 8018fa6:	6063      	str	r3, [r4, #4]
 8018fa8:	6014      	str	r4, [r2, #0]
 8018faa:	b003      	add	sp, #12
 8018fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018fb0:	f001 b9d4 	b.w	801a35c <__malloc_unlock>
 8018fb4:	42a3      	cmp	r3, r4
 8018fb6:	d908      	bls.n	8018fca <_free_r+0x46>
 8018fb8:	6825      	ldr	r5, [r4, #0]
 8018fba:	1961      	adds	r1, r4, r5
 8018fbc:	428b      	cmp	r3, r1
 8018fbe:	bf01      	itttt	eq
 8018fc0:	6819      	ldreq	r1, [r3, #0]
 8018fc2:	685b      	ldreq	r3, [r3, #4]
 8018fc4:	1949      	addeq	r1, r1, r5
 8018fc6:	6021      	streq	r1, [r4, #0]
 8018fc8:	e7ed      	b.n	8018fa6 <_free_r+0x22>
 8018fca:	461a      	mov	r2, r3
 8018fcc:	685b      	ldr	r3, [r3, #4]
 8018fce:	b10b      	cbz	r3, 8018fd4 <_free_r+0x50>
 8018fd0:	42a3      	cmp	r3, r4
 8018fd2:	d9fa      	bls.n	8018fca <_free_r+0x46>
 8018fd4:	6811      	ldr	r1, [r2, #0]
 8018fd6:	1855      	adds	r5, r2, r1
 8018fd8:	42a5      	cmp	r5, r4
 8018fda:	d10b      	bne.n	8018ff4 <_free_r+0x70>
 8018fdc:	6824      	ldr	r4, [r4, #0]
 8018fde:	4421      	add	r1, r4
 8018fe0:	1854      	adds	r4, r2, r1
 8018fe2:	42a3      	cmp	r3, r4
 8018fe4:	6011      	str	r1, [r2, #0]
 8018fe6:	d1e0      	bne.n	8018faa <_free_r+0x26>
 8018fe8:	681c      	ldr	r4, [r3, #0]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	6053      	str	r3, [r2, #4]
 8018fee:	4421      	add	r1, r4
 8018ff0:	6011      	str	r1, [r2, #0]
 8018ff2:	e7da      	b.n	8018faa <_free_r+0x26>
 8018ff4:	d902      	bls.n	8018ffc <_free_r+0x78>
 8018ff6:	230c      	movs	r3, #12
 8018ff8:	6003      	str	r3, [r0, #0]
 8018ffa:	e7d6      	b.n	8018faa <_free_r+0x26>
 8018ffc:	6825      	ldr	r5, [r4, #0]
 8018ffe:	1961      	adds	r1, r4, r5
 8019000:	428b      	cmp	r3, r1
 8019002:	bf04      	itt	eq
 8019004:	6819      	ldreq	r1, [r3, #0]
 8019006:	685b      	ldreq	r3, [r3, #4]
 8019008:	6063      	str	r3, [r4, #4]
 801900a:	bf04      	itt	eq
 801900c:	1949      	addeq	r1, r1, r5
 801900e:	6021      	streq	r1, [r4, #0]
 8019010:	6054      	str	r4, [r2, #4]
 8019012:	e7ca      	b.n	8018faa <_free_r+0x26>
 8019014:	b003      	add	sp, #12
 8019016:	bd30      	pop	{r4, r5, pc}
 8019018:	20000c14 	.word	0x20000c14

0801901c <sbrk_aligned>:
 801901c:	b570      	push	{r4, r5, r6, lr}
 801901e:	4e0e      	ldr	r6, [pc, #56]	; (8019058 <sbrk_aligned+0x3c>)
 8019020:	460c      	mov	r4, r1
 8019022:	6831      	ldr	r1, [r6, #0]
 8019024:	4605      	mov	r5, r0
 8019026:	b911      	cbnz	r1, 801902e <sbrk_aligned+0x12>
 8019028:	f000 fefe 	bl	8019e28 <_sbrk_r>
 801902c:	6030      	str	r0, [r6, #0]
 801902e:	4621      	mov	r1, r4
 8019030:	4628      	mov	r0, r5
 8019032:	f000 fef9 	bl	8019e28 <_sbrk_r>
 8019036:	1c43      	adds	r3, r0, #1
 8019038:	d00a      	beq.n	8019050 <sbrk_aligned+0x34>
 801903a:	1cc4      	adds	r4, r0, #3
 801903c:	f024 0403 	bic.w	r4, r4, #3
 8019040:	42a0      	cmp	r0, r4
 8019042:	d007      	beq.n	8019054 <sbrk_aligned+0x38>
 8019044:	1a21      	subs	r1, r4, r0
 8019046:	4628      	mov	r0, r5
 8019048:	f000 feee 	bl	8019e28 <_sbrk_r>
 801904c:	3001      	adds	r0, #1
 801904e:	d101      	bne.n	8019054 <sbrk_aligned+0x38>
 8019050:	f04f 34ff 	mov.w	r4, #4294967295
 8019054:	4620      	mov	r0, r4
 8019056:	bd70      	pop	{r4, r5, r6, pc}
 8019058:	20000c18 	.word	0x20000c18

0801905c <_malloc_r>:
 801905c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019060:	1ccd      	adds	r5, r1, #3
 8019062:	f025 0503 	bic.w	r5, r5, #3
 8019066:	3508      	adds	r5, #8
 8019068:	2d0c      	cmp	r5, #12
 801906a:	bf38      	it	cc
 801906c:	250c      	movcc	r5, #12
 801906e:	2d00      	cmp	r5, #0
 8019070:	4607      	mov	r7, r0
 8019072:	db01      	blt.n	8019078 <_malloc_r+0x1c>
 8019074:	42a9      	cmp	r1, r5
 8019076:	d905      	bls.n	8019084 <_malloc_r+0x28>
 8019078:	230c      	movs	r3, #12
 801907a:	603b      	str	r3, [r7, #0]
 801907c:	2600      	movs	r6, #0
 801907e:	4630      	mov	r0, r6
 8019080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019084:	4e2e      	ldr	r6, [pc, #184]	; (8019140 <_malloc_r+0xe4>)
 8019086:	f001 f963 	bl	801a350 <__malloc_lock>
 801908a:	6833      	ldr	r3, [r6, #0]
 801908c:	461c      	mov	r4, r3
 801908e:	bb34      	cbnz	r4, 80190de <_malloc_r+0x82>
 8019090:	4629      	mov	r1, r5
 8019092:	4638      	mov	r0, r7
 8019094:	f7ff ffc2 	bl	801901c <sbrk_aligned>
 8019098:	1c43      	adds	r3, r0, #1
 801909a:	4604      	mov	r4, r0
 801909c:	d14d      	bne.n	801913a <_malloc_r+0xde>
 801909e:	6834      	ldr	r4, [r6, #0]
 80190a0:	4626      	mov	r6, r4
 80190a2:	2e00      	cmp	r6, #0
 80190a4:	d140      	bne.n	8019128 <_malloc_r+0xcc>
 80190a6:	6823      	ldr	r3, [r4, #0]
 80190a8:	4631      	mov	r1, r6
 80190aa:	4638      	mov	r0, r7
 80190ac:	eb04 0803 	add.w	r8, r4, r3
 80190b0:	f000 feba 	bl	8019e28 <_sbrk_r>
 80190b4:	4580      	cmp	r8, r0
 80190b6:	d13a      	bne.n	801912e <_malloc_r+0xd2>
 80190b8:	6821      	ldr	r1, [r4, #0]
 80190ba:	3503      	adds	r5, #3
 80190bc:	1a6d      	subs	r5, r5, r1
 80190be:	f025 0503 	bic.w	r5, r5, #3
 80190c2:	3508      	adds	r5, #8
 80190c4:	2d0c      	cmp	r5, #12
 80190c6:	bf38      	it	cc
 80190c8:	250c      	movcc	r5, #12
 80190ca:	4629      	mov	r1, r5
 80190cc:	4638      	mov	r0, r7
 80190ce:	f7ff ffa5 	bl	801901c <sbrk_aligned>
 80190d2:	3001      	adds	r0, #1
 80190d4:	d02b      	beq.n	801912e <_malloc_r+0xd2>
 80190d6:	6823      	ldr	r3, [r4, #0]
 80190d8:	442b      	add	r3, r5
 80190da:	6023      	str	r3, [r4, #0]
 80190dc:	e00e      	b.n	80190fc <_malloc_r+0xa0>
 80190de:	6822      	ldr	r2, [r4, #0]
 80190e0:	1b52      	subs	r2, r2, r5
 80190e2:	d41e      	bmi.n	8019122 <_malloc_r+0xc6>
 80190e4:	2a0b      	cmp	r2, #11
 80190e6:	d916      	bls.n	8019116 <_malloc_r+0xba>
 80190e8:	1961      	adds	r1, r4, r5
 80190ea:	42a3      	cmp	r3, r4
 80190ec:	6025      	str	r5, [r4, #0]
 80190ee:	bf18      	it	ne
 80190f0:	6059      	strne	r1, [r3, #4]
 80190f2:	6863      	ldr	r3, [r4, #4]
 80190f4:	bf08      	it	eq
 80190f6:	6031      	streq	r1, [r6, #0]
 80190f8:	5162      	str	r2, [r4, r5]
 80190fa:	604b      	str	r3, [r1, #4]
 80190fc:	4638      	mov	r0, r7
 80190fe:	f104 060b 	add.w	r6, r4, #11
 8019102:	f001 f92b 	bl	801a35c <__malloc_unlock>
 8019106:	f026 0607 	bic.w	r6, r6, #7
 801910a:	1d23      	adds	r3, r4, #4
 801910c:	1af2      	subs	r2, r6, r3
 801910e:	d0b6      	beq.n	801907e <_malloc_r+0x22>
 8019110:	1b9b      	subs	r3, r3, r6
 8019112:	50a3      	str	r3, [r4, r2]
 8019114:	e7b3      	b.n	801907e <_malloc_r+0x22>
 8019116:	6862      	ldr	r2, [r4, #4]
 8019118:	42a3      	cmp	r3, r4
 801911a:	bf0c      	ite	eq
 801911c:	6032      	streq	r2, [r6, #0]
 801911e:	605a      	strne	r2, [r3, #4]
 8019120:	e7ec      	b.n	80190fc <_malloc_r+0xa0>
 8019122:	4623      	mov	r3, r4
 8019124:	6864      	ldr	r4, [r4, #4]
 8019126:	e7b2      	b.n	801908e <_malloc_r+0x32>
 8019128:	4634      	mov	r4, r6
 801912a:	6876      	ldr	r6, [r6, #4]
 801912c:	e7b9      	b.n	80190a2 <_malloc_r+0x46>
 801912e:	230c      	movs	r3, #12
 8019130:	603b      	str	r3, [r7, #0]
 8019132:	4638      	mov	r0, r7
 8019134:	f001 f912 	bl	801a35c <__malloc_unlock>
 8019138:	e7a1      	b.n	801907e <_malloc_r+0x22>
 801913a:	6025      	str	r5, [r4, #0]
 801913c:	e7de      	b.n	80190fc <_malloc_r+0xa0>
 801913e:	bf00      	nop
 8019140:	20000c14 	.word	0x20000c14

08019144 <__ssputs_r>:
 8019144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019148:	688e      	ldr	r6, [r1, #8]
 801914a:	429e      	cmp	r6, r3
 801914c:	4682      	mov	sl, r0
 801914e:	460c      	mov	r4, r1
 8019150:	4690      	mov	r8, r2
 8019152:	461f      	mov	r7, r3
 8019154:	d838      	bhi.n	80191c8 <__ssputs_r+0x84>
 8019156:	898a      	ldrh	r2, [r1, #12]
 8019158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801915c:	d032      	beq.n	80191c4 <__ssputs_r+0x80>
 801915e:	6825      	ldr	r5, [r4, #0]
 8019160:	6909      	ldr	r1, [r1, #16]
 8019162:	eba5 0901 	sub.w	r9, r5, r1
 8019166:	6965      	ldr	r5, [r4, #20]
 8019168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801916c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019170:	3301      	adds	r3, #1
 8019172:	444b      	add	r3, r9
 8019174:	106d      	asrs	r5, r5, #1
 8019176:	429d      	cmp	r5, r3
 8019178:	bf38      	it	cc
 801917a:	461d      	movcc	r5, r3
 801917c:	0553      	lsls	r3, r2, #21
 801917e:	d531      	bpl.n	80191e4 <__ssputs_r+0xa0>
 8019180:	4629      	mov	r1, r5
 8019182:	f7ff ff6b 	bl	801905c <_malloc_r>
 8019186:	4606      	mov	r6, r0
 8019188:	b950      	cbnz	r0, 80191a0 <__ssputs_r+0x5c>
 801918a:	230c      	movs	r3, #12
 801918c:	f8ca 3000 	str.w	r3, [sl]
 8019190:	89a3      	ldrh	r3, [r4, #12]
 8019192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019196:	81a3      	strh	r3, [r4, #12]
 8019198:	f04f 30ff 	mov.w	r0, #4294967295
 801919c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191a0:	6921      	ldr	r1, [r4, #16]
 80191a2:	464a      	mov	r2, r9
 80191a4:	f7fb fe2a 	bl	8014dfc <memcpy>
 80191a8:	89a3      	ldrh	r3, [r4, #12]
 80191aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80191ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191b2:	81a3      	strh	r3, [r4, #12]
 80191b4:	6126      	str	r6, [r4, #16]
 80191b6:	6165      	str	r5, [r4, #20]
 80191b8:	444e      	add	r6, r9
 80191ba:	eba5 0509 	sub.w	r5, r5, r9
 80191be:	6026      	str	r6, [r4, #0]
 80191c0:	60a5      	str	r5, [r4, #8]
 80191c2:	463e      	mov	r6, r7
 80191c4:	42be      	cmp	r6, r7
 80191c6:	d900      	bls.n	80191ca <__ssputs_r+0x86>
 80191c8:	463e      	mov	r6, r7
 80191ca:	6820      	ldr	r0, [r4, #0]
 80191cc:	4632      	mov	r2, r6
 80191ce:	4641      	mov	r1, r8
 80191d0:	f001 f8a4 	bl	801a31c <memmove>
 80191d4:	68a3      	ldr	r3, [r4, #8]
 80191d6:	1b9b      	subs	r3, r3, r6
 80191d8:	60a3      	str	r3, [r4, #8]
 80191da:	6823      	ldr	r3, [r4, #0]
 80191dc:	4433      	add	r3, r6
 80191de:	6023      	str	r3, [r4, #0]
 80191e0:	2000      	movs	r0, #0
 80191e2:	e7db      	b.n	801919c <__ssputs_r+0x58>
 80191e4:	462a      	mov	r2, r5
 80191e6:	f001 f8bf 	bl	801a368 <_realloc_r>
 80191ea:	4606      	mov	r6, r0
 80191ec:	2800      	cmp	r0, #0
 80191ee:	d1e1      	bne.n	80191b4 <__ssputs_r+0x70>
 80191f0:	6921      	ldr	r1, [r4, #16]
 80191f2:	4650      	mov	r0, sl
 80191f4:	f7ff fec6 	bl	8018f84 <_free_r>
 80191f8:	e7c7      	b.n	801918a <__ssputs_r+0x46>
	...

080191fc <_svfiprintf_r>:
 80191fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019200:	4698      	mov	r8, r3
 8019202:	898b      	ldrh	r3, [r1, #12]
 8019204:	061b      	lsls	r3, r3, #24
 8019206:	b09d      	sub	sp, #116	; 0x74
 8019208:	4607      	mov	r7, r0
 801920a:	460d      	mov	r5, r1
 801920c:	4614      	mov	r4, r2
 801920e:	d50e      	bpl.n	801922e <_svfiprintf_r+0x32>
 8019210:	690b      	ldr	r3, [r1, #16]
 8019212:	b963      	cbnz	r3, 801922e <_svfiprintf_r+0x32>
 8019214:	2140      	movs	r1, #64	; 0x40
 8019216:	f7ff ff21 	bl	801905c <_malloc_r>
 801921a:	6028      	str	r0, [r5, #0]
 801921c:	6128      	str	r0, [r5, #16]
 801921e:	b920      	cbnz	r0, 801922a <_svfiprintf_r+0x2e>
 8019220:	230c      	movs	r3, #12
 8019222:	603b      	str	r3, [r7, #0]
 8019224:	f04f 30ff 	mov.w	r0, #4294967295
 8019228:	e0d1      	b.n	80193ce <_svfiprintf_r+0x1d2>
 801922a:	2340      	movs	r3, #64	; 0x40
 801922c:	616b      	str	r3, [r5, #20]
 801922e:	2300      	movs	r3, #0
 8019230:	9309      	str	r3, [sp, #36]	; 0x24
 8019232:	2320      	movs	r3, #32
 8019234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019238:	f8cd 800c 	str.w	r8, [sp, #12]
 801923c:	2330      	movs	r3, #48	; 0x30
 801923e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80193e8 <_svfiprintf_r+0x1ec>
 8019242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019246:	f04f 0901 	mov.w	r9, #1
 801924a:	4623      	mov	r3, r4
 801924c:	469a      	mov	sl, r3
 801924e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019252:	b10a      	cbz	r2, 8019258 <_svfiprintf_r+0x5c>
 8019254:	2a25      	cmp	r2, #37	; 0x25
 8019256:	d1f9      	bne.n	801924c <_svfiprintf_r+0x50>
 8019258:	ebba 0b04 	subs.w	fp, sl, r4
 801925c:	d00b      	beq.n	8019276 <_svfiprintf_r+0x7a>
 801925e:	465b      	mov	r3, fp
 8019260:	4622      	mov	r2, r4
 8019262:	4629      	mov	r1, r5
 8019264:	4638      	mov	r0, r7
 8019266:	f7ff ff6d 	bl	8019144 <__ssputs_r>
 801926a:	3001      	adds	r0, #1
 801926c:	f000 80aa 	beq.w	80193c4 <_svfiprintf_r+0x1c8>
 8019270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019272:	445a      	add	r2, fp
 8019274:	9209      	str	r2, [sp, #36]	; 0x24
 8019276:	f89a 3000 	ldrb.w	r3, [sl]
 801927a:	2b00      	cmp	r3, #0
 801927c:	f000 80a2 	beq.w	80193c4 <_svfiprintf_r+0x1c8>
 8019280:	2300      	movs	r3, #0
 8019282:	f04f 32ff 	mov.w	r2, #4294967295
 8019286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801928a:	f10a 0a01 	add.w	sl, sl, #1
 801928e:	9304      	str	r3, [sp, #16]
 8019290:	9307      	str	r3, [sp, #28]
 8019292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019296:	931a      	str	r3, [sp, #104]	; 0x68
 8019298:	4654      	mov	r4, sl
 801929a:	2205      	movs	r2, #5
 801929c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192a0:	4851      	ldr	r0, [pc, #324]	; (80193e8 <_svfiprintf_r+0x1ec>)
 80192a2:	f7ee fed5 	bl	8008050 <memchr>
 80192a6:	9a04      	ldr	r2, [sp, #16]
 80192a8:	b9d8      	cbnz	r0, 80192e2 <_svfiprintf_r+0xe6>
 80192aa:	06d0      	lsls	r0, r2, #27
 80192ac:	bf44      	itt	mi
 80192ae:	2320      	movmi	r3, #32
 80192b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192b4:	0711      	lsls	r1, r2, #28
 80192b6:	bf44      	itt	mi
 80192b8:	232b      	movmi	r3, #43	; 0x2b
 80192ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192be:	f89a 3000 	ldrb.w	r3, [sl]
 80192c2:	2b2a      	cmp	r3, #42	; 0x2a
 80192c4:	d015      	beq.n	80192f2 <_svfiprintf_r+0xf6>
 80192c6:	9a07      	ldr	r2, [sp, #28]
 80192c8:	4654      	mov	r4, sl
 80192ca:	2000      	movs	r0, #0
 80192cc:	f04f 0c0a 	mov.w	ip, #10
 80192d0:	4621      	mov	r1, r4
 80192d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192d6:	3b30      	subs	r3, #48	; 0x30
 80192d8:	2b09      	cmp	r3, #9
 80192da:	d94e      	bls.n	801937a <_svfiprintf_r+0x17e>
 80192dc:	b1b0      	cbz	r0, 801930c <_svfiprintf_r+0x110>
 80192de:	9207      	str	r2, [sp, #28]
 80192e0:	e014      	b.n	801930c <_svfiprintf_r+0x110>
 80192e2:	eba0 0308 	sub.w	r3, r0, r8
 80192e6:	fa09 f303 	lsl.w	r3, r9, r3
 80192ea:	4313      	orrs	r3, r2
 80192ec:	9304      	str	r3, [sp, #16]
 80192ee:	46a2      	mov	sl, r4
 80192f0:	e7d2      	b.n	8019298 <_svfiprintf_r+0x9c>
 80192f2:	9b03      	ldr	r3, [sp, #12]
 80192f4:	1d19      	adds	r1, r3, #4
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	9103      	str	r1, [sp, #12]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	bfbb      	ittet	lt
 80192fe:	425b      	neglt	r3, r3
 8019300:	f042 0202 	orrlt.w	r2, r2, #2
 8019304:	9307      	strge	r3, [sp, #28]
 8019306:	9307      	strlt	r3, [sp, #28]
 8019308:	bfb8      	it	lt
 801930a:	9204      	strlt	r2, [sp, #16]
 801930c:	7823      	ldrb	r3, [r4, #0]
 801930e:	2b2e      	cmp	r3, #46	; 0x2e
 8019310:	d10c      	bne.n	801932c <_svfiprintf_r+0x130>
 8019312:	7863      	ldrb	r3, [r4, #1]
 8019314:	2b2a      	cmp	r3, #42	; 0x2a
 8019316:	d135      	bne.n	8019384 <_svfiprintf_r+0x188>
 8019318:	9b03      	ldr	r3, [sp, #12]
 801931a:	1d1a      	adds	r2, r3, #4
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	9203      	str	r2, [sp, #12]
 8019320:	2b00      	cmp	r3, #0
 8019322:	bfb8      	it	lt
 8019324:	f04f 33ff 	movlt.w	r3, #4294967295
 8019328:	3402      	adds	r4, #2
 801932a:	9305      	str	r3, [sp, #20]
 801932c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80193f8 <_svfiprintf_r+0x1fc>
 8019330:	7821      	ldrb	r1, [r4, #0]
 8019332:	2203      	movs	r2, #3
 8019334:	4650      	mov	r0, sl
 8019336:	f7ee fe8b 	bl	8008050 <memchr>
 801933a:	b140      	cbz	r0, 801934e <_svfiprintf_r+0x152>
 801933c:	2340      	movs	r3, #64	; 0x40
 801933e:	eba0 000a 	sub.w	r0, r0, sl
 8019342:	fa03 f000 	lsl.w	r0, r3, r0
 8019346:	9b04      	ldr	r3, [sp, #16]
 8019348:	4303      	orrs	r3, r0
 801934a:	3401      	adds	r4, #1
 801934c:	9304      	str	r3, [sp, #16]
 801934e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019352:	4826      	ldr	r0, [pc, #152]	; (80193ec <_svfiprintf_r+0x1f0>)
 8019354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019358:	2206      	movs	r2, #6
 801935a:	f7ee fe79 	bl	8008050 <memchr>
 801935e:	2800      	cmp	r0, #0
 8019360:	d038      	beq.n	80193d4 <_svfiprintf_r+0x1d8>
 8019362:	4b23      	ldr	r3, [pc, #140]	; (80193f0 <_svfiprintf_r+0x1f4>)
 8019364:	bb1b      	cbnz	r3, 80193ae <_svfiprintf_r+0x1b2>
 8019366:	9b03      	ldr	r3, [sp, #12]
 8019368:	3307      	adds	r3, #7
 801936a:	f023 0307 	bic.w	r3, r3, #7
 801936e:	3308      	adds	r3, #8
 8019370:	9303      	str	r3, [sp, #12]
 8019372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019374:	4433      	add	r3, r6
 8019376:	9309      	str	r3, [sp, #36]	; 0x24
 8019378:	e767      	b.n	801924a <_svfiprintf_r+0x4e>
 801937a:	fb0c 3202 	mla	r2, ip, r2, r3
 801937e:	460c      	mov	r4, r1
 8019380:	2001      	movs	r0, #1
 8019382:	e7a5      	b.n	80192d0 <_svfiprintf_r+0xd4>
 8019384:	2300      	movs	r3, #0
 8019386:	3401      	adds	r4, #1
 8019388:	9305      	str	r3, [sp, #20]
 801938a:	4619      	mov	r1, r3
 801938c:	f04f 0c0a 	mov.w	ip, #10
 8019390:	4620      	mov	r0, r4
 8019392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019396:	3a30      	subs	r2, #48	; 0x30
 8019398:	2a09      	cmp	r2, #9
 801939a:	d903      	bls.n	80193a4 <_svfiprintf_r+0x1a8>
 801939c:	2b00      	cmp	r3, #0
 801939e:	d0c5      	beq.n	801932c <_svfiprintf_r+0x130>
 80193a0:	9105      	str	r1, [sp, #20]
 80193a2:	e7c3      	b.n	801932c <_svfiprintf_r+0x130>
 80193a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80193a8:	4604      	mov	r4, r0
 80193aa:	2301      	movs	r3, #1
 80193ac:	e7f0      	b.n	8019390 <_svfiprintf_r+0x194>
 80193ae:	ab03      	add	r3, sp, #12
 80193b0:	9300      	str	r3, [sp, #0]
 80193b2:	462a      	mov	r2, r5
 80193b4:	4b0f      	ldr	r3, [pc, #60]	; (80193f4 <_svfiprintf_r+0x1f8>)
 80193b6:	a904      	add	r1, sp, #16
 80193b8:	4638      	mov	r0, r7
 80193ba:	f7fb fdd5 	bl	8014f68 <_printf_float>
 80193be:	1c42      	adds	r2, r0, #1
 80193c0:	4606      	mov	r6, r0
 80193c2:	d1d6      	bne.n	8019372 <_svfiprintf_r+0x176>
 80193c4:	89ab      	ldrh	r3, [r5, #12]
 80193c6:	065b      	lsls	r3, r3, #25
 80193c8:	f53f af2c 	bmi.w	8019224 <_svfiprintf_r+0x28>
 80193cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80193ce:	b01d      	add	sp, #116	; 0x74
 80193d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193d4:	ab03      	add	r3, sp, #12
 80193d6:	9300      	str	r3, [sp, #0]
 80193d8:	462a      	mov	r2, r5
 80193da:	4b06      	ldr	r3, [pc, #24]	; (80193f4 <_svfiprintf_r+0x1f8>)
 80193dc:	a904      	add	r1, sp, #16
 80193de:	4638      	mov	r0, r7
 80193e0:	f7fc f866 	bl	80154b0 <_printf_i>
 80193e4:	e7eb      	b.n	80193be <_svfiprintf_r+0x1c2>
 80193e6:	bf00      	nop
 80193e8:	0801abc4 	.word	0x0801abc4
 80193ec:	0801abce 	.word	0x0801abce
 80193f0:	08014f69 	.word	0x08014f69
 80193f4:	08019145 	.word	0x08019145
 80193f8:	0801abca 	.word	0x0801abca

080193fc <__sfputc_r>:
 80193fc:	6893      	ldr	r3, [r2, #8]
 80193fe:	3b01      	subs	r3, #1
 8019400:	2b00      	cmp	r3, #0
 8019402:	b410      	push	{r4}
 8019404:	6093      	str	r3, [r2, #8]
 8019406:	da08      	bge.n	801941a <__sfputc_r+0x1e>
 8019408:	6994      	ldr	r4, [r2, #24]
 801940a:	42a3      	cmp	r3, r4
 801940c:	db01      	blt.n	8019412 <__sfputc_r+0x16>
 801940e:	290a      	cmp	r1, #10
 8019410:	d103      	bne.n	801941a <__sfputc_r+0x1e>
 8019412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019416:	f7fd bbc7 	b.w	8016ba8 <__swbuf_r>
 801941a:	6813      	ldr	r3, [r2, #0]
 801941c:	1c58      	adds	r0, r3, #1
 801941e:	6010      	str	r0, [r2, #0]
 8019420:	7019      	strb	r1, [r3, #0]
 8019422:	4608      	mov	r0, r1
 8019424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019428:	4770      	bx	lr

0801942a <__sfputs_r>:
 801942a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801942c:	4606      	mov	r6, r0
 801942e:	460f      	mov	r7, r1
 8019430:	4614      	mov	r4, r2
 8019432:	18d5      	adds	r5, r2, r3
 8019434:	42ac      	cmp	r4, r5
 8019436:	d101      	bne.n	801943c <__sfputs_r+0x12>
 8019438:	2000      	movs	r0, #0
 801943a:	e007      	b.n	801944c <__sfputs_r+0x22>
 801943c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019440:	463a      	mov	r2, r7
 8019442:	4630      	mov	r0, r6
 8019444:	f7ff ffda 	bl	80193fc <__sfputc_r>
 8019448:	1c43      	adds	r3, r0, #1
 801944a:	d1f3      	bne.n	8019434 <__sfputs_r+0xa>
 801944c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019450 <_vfiprintf_r>:
 8019450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019454:	460d      	mov	r5, r1
 8019456:	b09d      	sub	sp, #116	; 0x74
 8019458:	4614      	mov	r4, r2
 801945a:	4698      	mov	r8, r3
 801945c:	4606      	mov	r6, r0
 801945e:	b118      	cbz	r0, 8019468 <_vfiprintf_r+0x18>
 8019460:	6983      	ldr	r3, [r0, #24]
 8019462:	b90b      	cbnz	r3, 8019468 <_vfiprintf_r+0x18>
 8019464:	f7fe fc06 	bl	8017c74 <__sinit>
 8019468:	4b89      	ldr	r3, [pc, #548]	; (8019690 <_vfiprintf_r+0x240>)
 801946a:	429d      	cmp	r5, r3
 801946c:	d11b      	bne.n	80194a6 <_vfiprintf_r+0x56>
 801946e:	6875      	ldr	r5, [r6, #4]
 8019470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019472:	07d9      	lsls	r1, r3, #31
 8019474:	d405      	bmi.n	8019482 <_vfiprintf_r+0x32>
 8019476:	89ab      	ldrh	r3, [r5, #12]
 8019478:	059a      	lsls	r2, r3, #22
 801947a:	d402      	bmi.n	8019482 <_vfiprintf_r+0x32>
 801947c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801947e:	f7ff f828 	bl	80184d2 <__retarget_lock_acquire_recursive>
 8019482:	89ab      	ldrh	r3, [r5, #12]
 8019484:	071b      	lsls	r3, r3, #28
 8019486:	d501      	bpl.n	801948c <_vfiprintf_r+0x3c>
 8019488:	692b      	ldr	r3, [r5, #16]
 801948a:	b9eb      	cbnz	r3, 80194c8 <_vfiprintf_r+0x78>
 801948c:	4629      	mov	r1, r5
 801948e:	4630      	mov	r0, r6
 8019490:	f7fd fbdc 	bl	8016c4c <__swsetup_r>
 8019494:	b1c0      	cbz	r0, 80194c8 <_vfiprintf_r+0x78>
 8019496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019498:	07dc      	lsls	r4, r3, #31
 801949a:	d50e      	bpl.n	80194ba <_vfiprintf_r+0x6a>
 801949c:	f04f 30ff 	mov.w	r0, #4294967295
 80194a0:	b01d      	add	sp, #116	; 0x74
 80194a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194a6:	4b7b      	ldr	r3, [pc, #492]	; (8019694 <_vfiprintf_r+0x244>)
 80194a8:	429d      	cmp	r5, r3
 80194aa:	d101      	bne.n	80194b0 <_vfiprintf_r+0x60>
 80194ac:	68b5      	ldr	r5, [r6, #8]
 80194ae:	e7df      	b.n	8019470 <_vfiprintf_r+0x20>
 80194b0:	4b79      	ldr	r3, [pc, #484]	; (8019698 <_vfiprintf_r+0x248>)
 80194b2:	429d      	cmp	r5, r3
 80194b4:	bf08      	it	eq
 80194b6:	68f5      	ldreq	r5, [r6, #12]
 80194b8:	e7da      	b.n	8019470 <_vfiprintf_r+0x20>
 80194ba:	89ab      	ldrh	r3, [r5, #12]
 80194bc:	0598      	lsls	r0, r3, #22
 80194be:	d4ed      	bmi.n	801949c <_vfiprintf_r+0x4c>
 80194c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194c2:	f7ff f807 	bl	80184d4 <__retarget_lock_release_recursive>
 80194c6:	e7e9      	b.n	801949c <_vfiprintf_r+0x4c>
 80194c8:	2300      	movs	r3, #0
 80194ca:	9309      	str	r3, [sp, #36]	; 0x24
 80194cc:	2320      	movs	r3, #32
 80194ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80194d6:	2330      	movs	r3, #48	; 0x30
 80194d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801969c <_vfiprintf_r+0x24c>
 80194dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80194e0:	f04f 0901 	mov.w	r9, #1
 80194e4:	4623      	mov	r3, r4
 80194e6:	469a      	mov	sl, r3
 80194e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194ec:	b10a      	cbz	r2, 80194f2 <_vfiprintf_r+0xa2>
 80194ee:	2a25      	cmp	r2, #37	; 0x25
 80194f0:	d1f9      	bne.n	80194e6 <_vfiprintf_r+0x96>
 80194f2:	ebba 0b04 	subs.w	fp, sl, r4
 80194f6:	d00b      	beq.n	8019510 <_vfiprintf_r+0xc0>
 80194f8:	465b      	mov	r3, fp
 80194fa:	4622      	mov	r2, r4
 80194fc:	4629      	mov	r1, r5
 80194fe:	4630      	mov	r0, r6
 8019500:	f7ff ff93 	bl	801942a <__sfputs_r>
 8019504:	3001      	adds	r0, #1
 8019506:	f000 80aa 	beq.w	801965e <_vfiprintf_r+0x20e>
 801950a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801950c:	445a      	add	r2, fp
 801950e:	9209      	str	r2, [sp, #36]	; 0x24
 8019510:	f89a 3000 	ldrb.w	r3, [sl]
 8019514:	2b00      	cmp	r3, #0
 8019516:	f000 80a2 	beq.w	801965e <_vfiprintf_r+0x20e>
 801951a:	2300      	movs	r3, #0
 801951c:	f04f 32ff 	mov.w	r2, #4294967295
 8019520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019524:	f10a 0a01 	add.w	sl, sl, #1
 8019528:	9304      	str	r3, [sp, #16]
 801952a:	9307      	str	r3, [sp, #28]
 801952c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019530:	931a      	str	r3, [sp, #104]	; 0x68
 8019532:	4654      	mov	r4, sl
 8019534:	2205      	movs	r2, #5
 8019536:	f814 1b01 	ldrb.w	r1, [r4], #1
 801953a:	4858      	ldr	r0, [pc, #352]	; (801969c <_vfiprintf_r+0x24c>)
 801953c:	f7ee fd88 	bl	8008050 <memchr>
 8019540:	9a04      	ldr	r2, [sp, #16]
 8019542:	b9d8      	cbnz	r0, 801957c <_vfiprintf_r+0x12c>
 8019544:	06d1      	lsls	r1, r2, #27
 8019546:	bf44      	itt	mi
 8019548:	2320      	movmi	r3, #32
 801954a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801954e:	0713      	lsls	r3, r2, #28
 8019550:	bf44      	itt	mi
 8019552:	232b      	movmi	r3, #43	; 0x2b
 8019554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019558:	f89a 3000 	ldrb.w	r3, [sl]
 801955c:	2b2a      	cmp	r3, #42	; 0x2a
 801955e:	d015      	beq.n	801958c <_vfiprintf_r+0x13c>
 8019560:	9a07      	ldr	r2, [sp, #28]
 8019562:	4654      	mov	r4, sl
 8019564:	2000      	movs	r0, #0
 8019566:	f04f 0c0a 	mov.w	ip, #10
 801956a:	4621      	mov	r1, r4
 801956c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019570:	3b30      	subs	r3, #48	; 0x30
 8019572:	2b09      	cmp	r3, #9
 8019574:	d94e      	bls.n	8019614 <_vfiprintf_r+0x1c4>
 8019576:	b1b0      	cbz	r0, 80195a6 <_vfiprintf_r+0x156>
 8019578:	9207      	str	r2, [sp, #28]
 801957a:	e014      	b.n	80195a6 <_vfiprintf_r+0x156>
 801957c:	eba0 0308 	sub.w	r3, r0, r8
 8019580:	fa09 f303 	lsl.w	r3, r9, r3
 8019584:	4313      	orrs	r3, r2
 8019586:	9304      	str	r3, [sp, #16]
 8019588:	46a2      	mov	sl, r4
 801958a:	e7d2      	b.n	8019532 <_vfiprintf_r+0xe2>
 801958c:	9b03      	ldr	r3, [sp, #12]
 801958e:	1d19      	adds	r1, r3, #4
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	9103      	str	r1, [sp, #12]
 8019594:	2b00      	cmp	r3, #0
 8019596:	bfbb      	ittet	lt
 8019598:	425b      	neglt	r3, r3
 801959a:	f042 0202 	orrlt.w	r2, r2, #2
 801959e:	9307      	strge	r3, [sp, #28]
 80195a0:	9307      	strlt	r3, [sp, #28]
 80195a2:	bfb8      	it	lt
 80195a4:	9204      	strlt	r2, [sp, #16]
 80195a6:	7823      	ldrb	r3, [r4, #0]
 80195a8:	2b2e      	cmp	r3, #46	; 0x2e
 80195aa:	d10c      	bne.n	80195c6 <_vfiprintf_r+0x176>
 80195ac:	7863      	ldrb	r3, [r4, #1]
 80195ae:	2b2a      	cmp	r3, #42	; 0x2a
 80195b0:	d135      	bne.n	801961e <_vfiprintf_r+0x1ce>
 80195b2:	9b03      	ldr	r3, [sp, #12]
 80195b4:	1d1a      	adds	r2, r3, #4
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	9203      	str	r2, [sp, #12]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	bfb8      	it	lt
 80195be:	f04f 33ff 	movlt.w	r3, #4294967295
 80195c2:	3402      	adds	r4, #2
 80195c4:	9305      	str	r3, [sp, #20]
 80195c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80196ac <_vfiprintf_r+0x25c>
 80195ca:	7821      	ldrb	r1, [r4, #0]
 80195cc:	2203      	movs	r2, #3
 80195ce:	4650      	mov	r0, sl
 80195d0:	f7ee fd3e 	bl	8008050 <memchr>
 80195d4:	b140      	cbz	r0, 80195e8 <_vfiprintf_r+0x198>
 80195d6:	2340      	movs	r3, #64	; 0x40
 80195d8:	eba0 000a 	sub.w	r0, r0, sl
 80195dc:	fa03 f000 	lsl.w	r0, r3, r0
 80195e0:	9b04      	ldr	r3, [sp, #16]
 80195e2:	4303      	orrs	r3, r0
 80195e4:	3401      	adds	r4, #1
 80195e6:	9304      	str	r3, [sp, #16]
 80195e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195ec:	482c      	ldr	r0, [pc, #176]	; (80196a0 <_vfiprintf_r+0x250>)
 80195ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80195f2:	2206      	movs	r2, #6
 80195f4:	f7ee fd2c 	bl	8008050 <memchr>
 80195f8:	2800      	cmp	r0, #0
 80195fa:	d03f      	beq.n	801967c <_vfiprintf_r+0x22c>
 80195fc:	4b29      	ldr	r3, [pc, #164]	; (80196a4 <_vfiprintf_r+0x254>)
 80195fe:	bb1b      	cbnz	r3, 8019648 <_vfiprintf_r+0x1f8>
 8019600:	9b03      	ldr	r3, [sp, #12]
 8019602:	3307      	adds	r3, #7
 8019604:	f023 0307 	bic.w	r3, r3, #7
 8019608:	3308      	adds	r3, #8
 801960a:	9303      	str	r3, [sp, #12]
 801960c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801960e:	443b      	add	r3, r7
 8019610:	9309      	str	r3, [sp, #36]	; 0x24
 8019612:	e767      	b.n	80194e4 <_vfiprintf_r+0x94>
 8019614:	fb0c 3202 	mla	r2, ip, r2, r3
 8019618:	460c      	mov	r4, r1
 801961a:	2001      	movs	r0, #1
 801961c:	e7a5      	b.n	801956a <_vfiprintf_r+0x11a>
 801961e:	2300      	movs	r3, #0
 8019620:	3401      	adds	r4, #1
 8019622:	9305      	str	r3, [sp, #20]
 8019624:	4619      	mov	r1, r3
 8019626:	f04f 0c0a 	mov.w	ip, #10
 801962a:	4620      	mov	r0, r4
 801962c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019630:	3a30      	subs	r2, #48	; 0x30
 8019632:	2a09      	cmp	r2, #9
 8019634:	d903      	bls.n	801963e <_vfiprintf_r+0x1ee>
 8019636:	2b00      	cmp	r3, #0
 8019638:	d0c5      	beq.n	80195c6 <_vfiprintf_r+0x176>
 801963a:	9105      	str	r1, [sp, #20]
 801963c:	e7c3      	b.n	80195c6 <_vfiprintf_r+0x176>
 801963e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019642:	4604      	mov	r4, r0
 8019644:	2301      	movs	r3, #1
 8019646:	e7f0      	b.n	801962a <_vfiprintf_r+0x1da>
 8019648:	ab03      	add	r3, sp, #12
 801964a:	9300      	str	r3, [sp, #0]
 801964c:	462a      	mov	r2, r5
 801964e:	4b16      	ldr	r3, [pc, #88]	; (80196a8 <_vfiprintf_r+0x258>)
 8019650:	a904      	add	r1, sp, #16
 8019652:	4630      	mov	r0, r6
 8019654:	f7fb fc88 	bl	8014f68 <_printf_float>
 8019658:	4607      	mov	r7, r0
 801965a:	1c78      	adds	r0, r7, #1
 801965c:	d1d6      	bne.n	801960c <_vfiprintf_r+0x1bc>
 801965e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019660:	07d9      	lsls	r1, r3, #31
 8019662:	d405      	bmi.n	8019670 <_vfiprintf_r+0x220>
 8019664:	89ab      	ldrh	r3, [r5, #12]
 8019666:	059a      	lsls	r2, r3, #22
 8019668:	d402      	bmi.n	8019670 <_vfiprintf_r+0x220>
 801966a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801966c:	f7fe ff32 	bl	80184d4 <__retarget_lock_release_recursive>
 8019670:	89ab      	ldrh	r3, [r5, #12]
 8019672:	065b      	lsls	r3, r3, #25
 8019674:	f53f af12 	bmi.w	801949c <_vfiprintf_r+0x4c>
 8019678:	9809      	ldr	r0, [sp, #36]	; 0x24
 801967a:	e711      	b.n	80194a0 <_vfiprintf_r+0x50>
 801967c:	ab03      	add	r3, sp, #12
 801967e:	9300      	str	r3, [sp, #0]
 8019680:	462a      	mov	r2, r5
 8019682:	4b09      	ldr	r3, [pc, #36]	; (80196a8 <_vfiprintf_r+0x258>)
 8019684:	a904      	add	r1, sp, #16
 8019686:	4630      	mov	r0, r6
 8019688:	f7fb ff12 	bl	80154b0 <_printf_i>
 801968c:	e7e4      	b.n	8019658 <_vfiprintf_r+0x208>
 801968e:	bf00      	nop
 8019690:	0801a9ac 	.word	0x0801a9ac
 8019694:	0801a9cc 	.word	0x0801a9cc
 8019698:	0801a98c 	.word	0x0801a98c
 801969c:	0801abc4 	.word	0x0801abc4
 80196a0:	0801abce 	.word	0x0801abce
 80196a4:	08014f69 	.word	0x08014f69
 80196a8:	0801942b 	.word	0x0801942b
 80196ac:	0801abca 	.word	0x0801abca

080196b0 <__svfiscanf_r>:
 80196b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196b4:	461d      	mov	r5, r3
 80196b6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80196b8:	07df      	lsls	r7, r3, #31
 80196ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80196be:	4606      	mov	r6, r0
 80196c0:	460c      	mov	r4, r1
 80196c2:	4692      	mov	sl, r2
 80196c4:	d405      	bmi.n	80196d2 <__svfiscanf_r+0x22>
 80196c6:	898b      	ldrh	r3, [r1, #12]
 80196c8:	0598      	lsls	r0, r3, #22
 80196ca:	d402      	bmi.n	80196d2 <__svfiscanf_r+0x22>
 80196cc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80196ce:	f7fe ff00 	bl	80184d2 <__retarget_lock_acquire_recursive>
 80196d2:	2300      	movs	r3, #0
 80196d4:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80196d8:	4ba6      	ldr	r3, [pc, #664]	; (8019974 <__svfiscanf_r+0x2c4>)
 80196da:	93a0      	str	r3, [sp, #640]	; 0x280
 80196dc:	f10d 0804 	add.w	r8, sp, #4
 80196e0:	4ba5      	ldr	r3, [pc, #660]	; (8019978 <__svfiscanf_r+0x2c8>)
 80196e2:	4fa6      	ldr	r7, [pc, #664]	; (801997c <__svfiscanf_r+0x2cc>)
 80196e4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8019980 <__svfiscanf_r+0x2d0>
 80196e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80196ec:	93a1      	str	r3, [sp, #644]	; 0x284
 80196ee:	9500      	str	r5, [sp, #0]
 80196f0:	f89a 3000 	ldrb.w	r3, [sl]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	f000 8173 	beq.w	80199e0 <__svfiscanf_r+0x330>
 80196fa:	5dd9      	ldrb	r1, [r3, r7]
 80196fc:	f011 0108 	ands.w	r1, r1, #8
 8019700:	f10a 0501 	add.w	r5, sl, #1
 8019704:	d019      	beq.n	801973a <__svfiscanf_r+0x8a>
 8019706:	6863      	ldr	r3, [r4, #4]
 8019708:	2b00      	cmp	r3, #0
 801970a:	dd0f      	ble.n	801972c <__svfiscanf_r+0x7c>
 801970c:	6823      	ldr	r3, [r4, #0]
 801970e:	781a      	ldrb	r2, [r3, #0]
 8019710:	5cba      	ldrb	r2, [r7, r2]
 8019712:	0711      	lsls	r1, r2, #28
 8019714:	d401      	bmi.n	801971a <__svfiscanf_r+0x6a>
 8019716:	46aa      	mov	sl, r5
 8019718:	e7ea      	b.n	80196f0 <__svfiscanf_r+0x40>
 801971a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801971c:	3201      	adds	r2, #1
 801971e:	9245      	str	r2, [sp, #276]	; 0x114
 8019720:	6862      	ldr	r2, [r4, #4]
 8019722:	3301      	adds	r3, #1
 8019724:	3a01      	subs	r2, #1
 8019726:	6062      	str	r2, [r4, #4]
 8019728:	6023      	str	r3, [r4, #0]
 801972a:	e7ec      	b.n	8019706 <__svfiscanf_r+0x56>
 801972c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801972e:	4621      	mov	r1, r4
 8019730:	4630      	mov	r0, r6
 8019732:	4798      	blx	r3
 8019734:	2800      	cmp	r0, #0
 8019736:	d0e9      	beq.n	801970c <__svfiscanf_r+0x5c>
 8019738:	e7ed      	b.n	8019716 <__svfiscanf_r+0x66>
 801973a:	2b25      	cmp	r3, #37	; 0x25
 801973c:	d012      	beq.n	8019764 <__svfiscanf_r+0xb4>
 801973e:	469a      	mov	sl, r3
 8019740:	6863      	ldr	r3, [r4, #4]
 8019742:	2b00      	cmp	r3, #0
 8019744:	f340 8095 	ble.w	8019872 <__svfiscanf_r+0x1c2>
 8019748:	6822      	ldr	r2, [r4, #0]
 801974a:	7813      	ldrb	r3, [r2, #0]
 801974c:	4553      	cmp	r3, sl
 801974e:	f040 8147 	bne.w	80199e0 <__svfiscanf_r+0x330>
 8019752:	6863      	ldr	r3, [r4, #4]
 8019754:	3b01      	subs	r3, #1
 8019756:	6063      	str	r3, [r4, #4]
 8019758:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801975a:	3201      	adds	r2, #1
 801975c:	3301      	adds	r3, #1
 801975e:	6022      	str	r2, [r4, #0]
 8019760:	9345      	str	r3, [sp, #276]	; 0x114
 8019762:	e7d8      	b.n	8019716 <__svfiscanf_r+0x66>
 8019764:	9141      	str	r1, [sp, #260]	; 0x104
 8019766:	9143      	str	r1, [sp, #268]	; 0x10c
 8019768:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801976c:	2b2a      	cmp	r3, #42	; 0x2a
 801976e:	bf02      	ittt	eq
 8019770:	2310      	moveq	r3, #16
 8019772:	9341      	streq	r3, [sp, #260]	; 0x104
 8019774:	f10a 0502 	addeq.w	r5, sl, #2
 8019778:	220a      	movs	r2, #10
 801977a:	46aa      	mov	sl, r5
 801977c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8019780:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019784:	2b09      	cmp	r3, #9
 8019786:	d91e      	bls.n	80197c6 <__svfiscanf_r+0x116>
 8019788:	487d      	ldr	r0, [pc, #500]	; (8019980 <__svfiscanf_r+0x2d0>)
 801978a:	2203      	movs	r2, #3
 801978c:	f7ee fc60 	bl	8008050 <memchr>
 8019790:	b140      	cbz	r0, 80197a4 <__svfiscanf_r+0xf4>
 8019792:	2301      	movs	r3, #1
 8019794:	eba0 0009 	sub.w	r0, r0, r9
 8019798:	fa03 f000 	lsl.w	r0, r3, r0
 801979c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801979e:	4318      	orrs	r0, r3
 80197a0:	9041      	str	r0, [sp, #260]	; 0x104
 80197a2:	4655      	mov	r5, sl
 80197a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80197a8:	2b78      	cmp	r3, #120	; 0x78
 80197aa:	d807      	bhi.n	80197bc <__svfiscanf_r+0x10c>
 80197ac:	2b57      	cmp	r3, #87	; 0x57
 80197ae:	d811      	bhi.n	80197d4 <__svfiscanf_r+0x124>
 80197b0:	2b25      	cmp	r3, #37	; 0x25
 80197b2:	d0c4      	beq.n	801973e <__svfiscanf_r+0x8e>
 80197b4:	d858      	bhi.n	8019868 <__svfiscanf_r+0x1b8>
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f000 80c8 	beq.w	801994c <__svfiscanf_r+0x29c>
 80197bc:	2303      	movs	r3, #3
 80197be:	9347      	str	r3, [sp, #284]	; 0x11c
 80197c0:	230a      	movs	r3, #10
 80197c2:	9342      	str	r3, [sp, #264]	; 0x108
 80197c4:	e07c      	b.n	80198c0 <__svfiscanf_r+0x210>
 80197c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80197c8:	fb02 1103 	mla	r1, r2, r3, r1
 80197cc:	3930      	subs	r1, #48	; 0x30
 80197ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80197d0:	4655      	mov	r5, sl
 80197d2:	e7d2      	b.n	801977a <__svfiscanf_r+0xca>
 80197d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80197d8:	2a20      	cmp	r2, #32
 80197da:	d8ef      	bhi.n	80197bc <__svfiscanf_r+0x10c>
 80197dc:	a101      	add	r1, pc, #4	; (adr r1, 80197e4 <__svfiscanf_r+0x134>)
 80197de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80197e2:	bf00      	nop
 80197e4:	080198ab 	.word	0x080198ab
 80197e8:	080197bd 	.word	0x080197bd
 80197ec:	080197bd 	.word	0x080197bd
 80197f0:	08019909 	.word	0x08019909
 80197f4:	080197bd 	.word	0x080197bd
 80197f8:	080197bd 	.word	0x080197bd
 80197fc:	080197bd 	.word	0x080197bd
 8019800:	080197bd 	.word	0x080197bd
 8019804:	080197bd 	.word	0x080197bd
 8019808:	080197bd 	.word	0x080197bd
 801980c:	080197bd 	.word	0x080197bd
 8019810:	0801991f 	.word	0x0801991f
 8019814:	080198f5 	.word	0x080198f5
 8019818:	0801986f 	.word	0x0801986f
 801981c:	0801986f 	.word	0x0801986f
 8019820:	0801986f 	.word	0x0801986f
 8019824:	080197bd 	.word	0x080197bd
 8019828:	080198f9 	.word	0x080198f9
 801982c:	080197bd 	.word	0x080197bd
 8019830:	080197bd 	.word	0x080197bd
 8019834:	080197bd 	.word	0x080197bd
 8019838:	080197bd 	.word	0x080197bd
 801983c:	0801992f 	.word	0x0801992f
 8019840:	08019901 	.word	0x08019901
 8019844:	080198a3 	.word	0x080198a3
 8019848:	080197bd 	.word	0x080197bd
 801984c:	080197bd 	.word	0x080197bd
 8019850:	0801992b 	.word	0x0801992b
 8019854:	080197bd 	.word	0x080197bd
 8019858:	080198f5 	.word	0x080198f5
 801985c:	080197bd 	.word	0x080197bd
 8019860:	080197bd 	.word	0x080197bd
 8019864:	080198ab 	.word	0x080198ab
 8019868:	3b45      	subs	r3, #69	; 0x45
 801986a:	2b02      	cmp	r3, #2
 801986c:	d8a6      	bhi.n	80197bc <__svfiscanf_r+0x10c>
 801986e:	2305      	movs	r3, #5
 8019870:	e025      	b.n	80198be <__svfiscanf_r+0x20e>
 8019872:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019874:	4621      	mov	r1, r4
 8019876:	4630      	mov	r0, r6
 8019878:	4798      	blx	r3
 801987a:	2800      	cmp	r0, #0
 801987c:	f43f af64 	beq.w	8019748 <__svfiscanf_r+0x98>
 8019880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019882:	07da      	lsls	r2, r3, #31
 8019884:	f140 80a4 	bpl.w	80199d0 <__svfiscanf_r+0x320>
 8019888:	9844      	ldr	r0, [sp, #272]	; 0x110
 801988a:	2800      	cmp	r0, #0
 801988c:	d067      	beq.n	801995e <__svfiscanf_r+0x2ae>
 801988e:	89a3      	ldrh	r3, [r4, #12]
 8019890:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019894:	bf18      	it	ne
 8019896:	f04f 30ff 	movne.w	r0, #4294967295
 801989a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801989e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80198a4:	f042 0220 	orr.w	r2, r2, #32
 80198a8:	9241      	str	r2, [sp, #260]	; 0x104
 80198aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80198ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80198b0:	9241      	str	r2, [sp, #260]	; 0x104
 80198b2:	2210      	movs	r2, #16
 80198b4:	2b6f      	cmp	r3, #111	; 0x6f
 80198b6:	9242      	str	r2, [sp, #264]	; 0x108
 80198b8:	bf34      	ite	cc
 80198ba:	2303      	movcc	r3, #3
 80198bc:	2304      	movcs	r3, #4
 80198be:	9347      	str	r3, [sp, #284]	; 0x11c
 80198c0:	6863      	ldr	r3, [r4, #4]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	dd4e      	ble.n	8019964 <__svfiscanf_r+0x2b4>
 80198c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80198c8:	065b      	lsls	r3, r3, #25
 80198ca:	d404      	bmi.n	80198d6 <__svfiscanf_r+0x226>
 80198cc:	6823      	ldr	r3, [r4, #0]
 80198ce:	781a      	ldrb	r2, [r3, #0]
 80198d0:	5cba      	ldrb	r2, [r7, r2]
 80198d2:	0710      	lsls	r0, r2, #28
 80198d4:	d456      	bmi.n	8019984 <__svfiscanf_r+0x2d4>
 80198d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80198d8:	2b02      	cmp	r3, #2
 80198da:	dc65      	bgt.n	80199a8 <__svfiscanf_r+0x2f8>
 80198dc:	466b      	mov	r3, sp
 80198de:	4622      	mov	r2, r4
 80198e0:	a941      	add	r1, sp, #260	; 0x104
 80198e2:	4630      	mov	r0, r6
 80198e4:	f000 f8b2 	bl	8019a4c <_scanf_chars>
 80198e8:	2801      	cmp	r0, #1
 80198ea:	d079      	beq.n	80199e0 <__svfiscanf_r+0x330>
 80198ec:	2802      	cmp	r0, #2
 80198ee:	f47f af12 	bne.w	8019716 <__svfiscanf_r+0x66>
 80198f2:	e7c5      	b.n	8019880 <__svfiscanf_r+0x1d0>
 80198f4:	220a      	movs	r2, #10
 80198f6:	e7dd      	b.n	80198b4 <__svfiscanf_r+0x204>
 80198f8:	2300      	movs	r3, #0
 80198fa:	9342      	str	r3, [sp, #264]	; 0x108
 80198fc:	2303      	movs	r3, #3
 80198fe:	e7de      	b.n	80198be <__svfiscanf_r+0x20e>
 8019900:	2308      	movs	r3, #8
 8019902:	9342      	str	r3, [sp, #264]	; 0x108
 8019904:	2304      	movs	r3, #4
 8019906:	e7da      	b.n	80198be <__svfiscanf_r+0x20e>
 8019908:	4629      	mov	r1, r5
 801990a:	4640      	mov	r0, r8
 801990c:	f000 fa9c 	bl	8019e48 <__sccl>
 8019910:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019916:	9341      	str	r3, [sp, #260]	; 0x104
 8019918:	4605      	mov	r5, r0
 801991a:	2301      	movs	r3, #1
 801991c:	e7cf      	b.n	80198be <__svfiscanf_r+0x20e>
 801991e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019924:	9341      	str	r3, [sp, #260]	; 0x104
 8019926:	2300      	movs	r3, #0
 8019928:	e7c9      	b.n	80198be <__svfiscanf_r+0x20e>
 801992a:	2302      	movs	r3, #2
 801992c:	e7c7      	b.n	80198be <__svfiscanf_r+0x20e>
 801992e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019930:	06c3      	lsls	r3, r0, #27
 8019932:	f53f aef0 	bmi.w	8019716 <__svfiscanf_r+0x66>
 8019936:	9b00      	ldr	r3, [sp, #0]
 8019938:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801993a:	1d19      	adds	r1, r3, #4
 801993c:	9100      	str	r1, [sp, #0]
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	f010 0f01 	tst.w	r0, #1
 8019944:	bf14      	ite	ne
 8019946:	801a      	strhne	r2, [r3, #0]
 8019948:	601a      	streq	r2, [r3, #0]
 801994a:	e6e4      	b.n	8019716 <__svfiscanf_r+0x66>
 801994c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801994e:	07d8      	lsls	r0, r3, #31
 8019950:	d405      	bmi.n	801995e <__svfiscanf_r+0x2ae>
 8019952:	89a3      	ldrh	r3, [r4, #12]
 8019954:	0599      	lsls	r1, r3, #22
 8019956:	d402      	bmi.n	801995e <__svfiscanf_r+0x2ae>
 8019958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801995a:	f7fe fdbb 	bl	80184d4 <__retarget_lock_release_recursive>
 801995e:	f04f 30ff 	mov.w	r0, #4294967295
 8019962:	e79a      	b.n	801989a <__svfiscanf_r+0x1ea>
 8019964:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019966:	4621      	mov	r1, r4
 8019968:	4630      	mov	r0, r6
 801996a:	4798      	blx	r3
 801996c:	2800      	cmp	r0, #0
 801996e:	d0aa      	beq.n	80198c6 <__svfiscanf_r+0x216>
 8019970:	e786      	b.n	8019880 <__svfiscanf_r+0x1d0>
 8019972:	bf00      	nop
 8019974:	0801a0c5 	.word	0x0801a0c5
 8019978:	08019d05 	.word	0x08019d05
 801997c:	0801a7f9 	.word	0x0801a7f9
 8019980:	0801abca 	.word	0x0801abca
 8019984:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019986:	3201      	adds	r2, #1
 8019988:	9245      	str	r2, [sp, #276]	; 0x114
 801998a:	6862      	ldr	r2, [r4, #4]
 801998c:	3a01      	subs	r2, #1
 801998e:	2a00      	cmp	r2, #0
 8019990:	6062      	str	r2, [r4, #4]
 8019992:	dd02      	ble.n	801999a <__svfiscanf_r+0x2ea>
 8019994:	3301      	adds	r3, #1
 8019996:	6023      	str	r3, [r4, #0]
 8019998:	e798      	b.n	80198cc <__svfiscanf_r+0x21c>
 801999a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801999c:	4621      	mov	r1, r4
 801999e:	4630      	mov	r0, r6
 80199a0:	4798      	blx	r3
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d092      	beq.n	80198cc <__svfiscanf_r+0x21c>
 80199a6:	e76b      	b.n	8019880 <__svfiscanf_r+0x1d0>
 80199a8:	2b04      	cmp	r3, #4
 80199aa:	dc06      	bgt.n	80199ba <__svfiscanf_r+0x30a>
 80199ac:	466b      	mov	r3, sp
 80199ae:	4622      	mov	r2, r4
 80199b0:	a941      	add	r1, sp, #260	; 0x104
 80199b2:	4630      	mov	r0, r6
 80199b4:	f000 f8a4 	bl	8019b00 <_scanf_i>
 80199b8:	e796      	b.n	80198e8 <__svfiscanf_r+0x238>
 80199ba:	4b0f      	ldr	r3, [pc, #60]	; (80199f8 <__svfiscanf_r+0x348>)
 80199bc:	2b00      	cmp	r3, #0
 80199be:	f43f aeaa 	beq.w	8019716 <__svfiscanf_r+0x66>
 80199c2:	466b      	mov	r3, sp
 80199c4:	4622      	mov	r2, r4
 80199c6:	a941      	add	r1, sp, #260	; 0x104
 80199c8:	4630      	mov	r0, r6
 80199ca:	f7fb fe97 	bl	80156fc <_scanf_float>
 80199ce:	e78b      	b.n	80198e8 <__svfiscanf_r+0x238>
 80199d0:	89a3      	ldrh	r3, [r4, #12]
 80199d2:	0599      	lsls	r1, r3, #22
 80199d4:	f53f af58 	bmi.w	8019888 <__svfiscanf_r+0x1d8>
 80199d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199da:	f7fe fd7b 	bl	80184d4 <__retarget_lock_release_recursive>
 80199de:	e753      	b.n	8019888 <__svfiscanf_r+0x1d8>
 80199e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199e2:	07da      	lsls	r2, r3, #31
 80199e4:	d405      	bmi.n	80199f2 <__svfiscanf_r+0x342>
 80199e6:	89a3      	ldrh	r3, [r4, #12]
 80199e8:	059b      	lsls	r3, r3, #22
 80199ea:	d402      	bmi.n	80199f2 <__svfiscanf_r+0x342>
 80199ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199ee:	f7fe fd71 	bl	80184d4 <__retarget_lock_release_recursive>
 80199f2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80199f4:	e751      	b.n	801989a <__svfiscanf_r+0x1ea>
 80199f6:	bf00      	nop
 80199f8:	080156fd 	.word	0x080156fd

080199fc <_vfiscanf_r>:
 80199fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80199fe:	460c      	mov	r4, r1
 8019a00:	4605      	mov	r5, r0
 8019a02:	b138      	cbz	r0, 8019a14 <_vfiscanf_r+0x18>
 8019a04:	6981      	ldr	r1, [r0, #24]
 8019a06:	b929      	cbnz	r1, 8019a14 <_vfiscanf_r+0x18>
 8019a08:	e9cd 2300 	strd	r2, r3, [sp]
 8019a0c:	f7fe f932 	bl	8017c74 <__sinit>
 8019a10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019a14:	490a      	ldr	r1, [pc, #40]	; (8019a40 <_vfiscanf_r+0x44>)
 8019a16:	428c      	cmp	r4, r1
 8019a18:	d107      	bne.n	8019a2a <_vfiscanf_r+0x2e>
 8019a1a:	686c      	ldr	r4, [r5, #4]
 8019a1c:	4621      	mov	r1, r4
 8019a1e:	4628      	mov	r0, r5
 8019a20:	b003      	add	sp, #12
 8019a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a26:	f7ff be43 	b.w	80196b0 <__svfiscanf_r>
 8019a2a:	4906      	ldr	r1, [pc, #24]	; (8019a44 <_vfiscanf_r+0x48>)
 8019a2c:	428c      	cmp	r4, r1
 8019a2e:	d101      	bne.n	8019a34 <_vfiscanf_r+0x38>
 8019a30:	68ac      	ldr	r4, [r5, #8]
 8019a32:	e7f3      	b.n	8019a1c <_vfiscanf_r+0x20>
 8019a34:	4904      	ldr	r1, [pc, #16]	; (8019a48 <_vfiscanf_r+0x4c>)
 8019a36:	428c      	cmp	r4, r1
 8019a38:	bf08      	it	eq
 8019a3a:	68ec      	ldreq	r4, [r5, #12]
 8019a3c:	e7ee      	b.n	8019a1c <_vfiscanf_r+0x20>
 8019a3e:	bf00      	nop
 8019a40:	0801a9ac 	.word	0x0801a9ac
 8019a44:	0801a9cc 	.word	0x0801a9cc
 8019a48:	0801a98c 	.word	0x0801a98c

08019a4c <_scanf_chars>:
 8019a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a50:	4615      	mov	r5, r2
 8019a52:	688a      	ldr	r2, [r1, #8]
 8019a54:	4680      	mov	r8, r0
 8019a56:	460c      	mov	r4, r1
 8019a58:	b932      	cbnz	r2, 8019a68 <_scanf_chars+0x1c>
 8019a5a:	698a      	ldr	r2, [r1, #24]
 8019a5c:	2a00      	cmp	r2, #0
 8019a5e:	bf0c      	ite	eq
 8019a60:	2201      	moveq	r2, #1
 8019a62:	f04f 32ff 	movne.w	r2, #4294967295
 8019a66:	608a      	str	r2, [r1, #8]
 8019a68:	6822      	ldr	r2, [r4, #0]
 8019a6a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8019afc <_scanf_chars+0xb0>
 8019a6e:	06d1      	lsls	r1, r2, #27
 8019a70:	bf5f      	itttt	pl
 8019a72:	681a      	ldrpl	r2, [r3, #0]
 8019a74:	1d11      	addpl	r1, r2, #4
 8019a76:	6019      	strpl	r1, [r3, #0]
 8019a78:	6816      	ldrpl	r6, [r2, #0]
 8019a7a:	2700      	movs	r7, #0
 8019a7c:	69a0      	ldr	r0, [r4, #24]
 8019a7e:	b188      	cbz	r0, 8019aa4 <_scanf_chars+0x58>
 8019a80:	2801      	cmp	r0, #1
 8019a82:	d107      	bne.n	8019a94 <_scanf_chars+0x48>
 8019a84:	682a      	ldr	r2, [r5, #0]
 8019a86:	7811      	ldrb	r1, [r2, #0]
 8019a88:	6962      	ldr	r2, [r4, #20]
 8019a8a:	5c52      	ldrb	r2, [r2, r1]
 8019a8c:	b952      	cbnz	r2, 8019aa4 <_scanf_chars+0x58>
 8019a8e:	2f00      	cmp	r7, #0
 8019a90:	d031      	beq.n	8019af6 <_scanf_chars+0xaa>
 8019a92:	e022      	b.n	8019ada <_scanf_chars+0x8e>
 8019a94:	2802      	cmp	r0, #2
 8019a96:	d120      	bne.n	8019ada <_scanf_chars+0x8e>
 8019a98:	682b      	ldr	r3, [r5, #0]
 8019a9a:	781b      	ldrb	r3, [r3, #0]
 8019a9c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8019aa0:	071b      	lsls	r3, r3, #28
 8019aa2:	d41a      	bmi.n	8019ada <_scanf_chars+0x8e>
 8019aa4:	6823      	ldr	r3, [r4, #0]
 8019aa6:	06da      	lsls	r2, r3, #27
 8019aa8:	bf5e      	ittt	pl
 8019aaa:	682b      	ldrpl	r3, [r5, #0]
 8019aac:	781b      	ldrbpl	r3, [r3, #0]
 8019aae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019ab2:	682a      	ldr	r2, [r5, #0]
 8019ab4:	686b      	ldr	r3, [r5, #4]
 8019ab6:	3201      	adds	r2, #1
 8019ab8:	602a      	str	r2, [r5, #0]
 8019aba:	68a2      	ldr	r2, [r4, #8]
 8019abc:	3b01      	subs	r3, #1
 8019abe:	3a01      	subs	r2, #1
 8019ac0:	606b      	str	r3, [r5, #4]
 8019ac2:	3701      	adds	r7, #1
 8019ac4:	60a2      	str	r2, [r4, #8]
 8019ac6:	b142      	cbz	r2, 8019ada <_scanf_chars+0x8e>
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	dcd7      	bgt.n	8019a7c <_scanf_chars+0x30>
 8019acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019ad0:	4629      	mov	r1, r5
 8019ad2:	4640      	mov	r0, r8
 8019ad4:	4798      	blx	r3
 8019ad6:	2800      	cmp	r0, #0
 8019ad8:	d0d0      	beq.n	8019a7c <_scanf_chars+0x30>
 8019ada:	6823      	ldr	r3, [r4, #0]
 8019adc:	f013 0310 	ands.w	r3, r3, #16
 8019ae0:	d105      	bne.n	8019aee <_scanf_chars+0xa2>
 8019ae2:	68e2      	ldr	r2, [r4, #12]
 8019ae4:	3201      	adds	r2, #1
 8019ae6:	60e2      	str	r2, [r4, #12]
 8019ae8:	69a2      	ldr	r2, [r4, #24]
 8019aea:	b102      	cbz	r2, 8019aee <_scanf_chars+0xa2>
 8019aec:	7033      	strb	r3, [r6, #0]
 8019aee:	6923      	ldr	r3, [r4, #16]
 8019af0:	443b      	add	r3, r7
 8019af2:	6123      	str	r3, [r4, #16]
 8019af4:	2000      	movs	r0, #0
 8019af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019afa:	bf00      	nop
 8019afc:	0801a7f9 	.word	0x0801a7f9

08019b00 <_scanf_i>:
 8019b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b04:	4698      	mov	r8, r3
 8019b06:	4b76      	ldr	r3, [pc, #472]	; (8019ce0 <_scanf_i+0x1e0>)
 8019b08:	460c      	mov	r4, r1
 8019b0a:	4682      	mov	sl, r0
 8019b0c:	4616      	mov	r6, r2
 8019b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b12:	b087      	sub	sp, #28
 8019b14:	ab03      	add	r3, sp, #12
 8019b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019b1a:	4b72      	ldr	r3, [pc, #456]	; (8019ce4 <_scanf_i+0x1e4>)
 8019b1c:	69a1      	ldr	r1, [r4, #24]
 8019b1e:	4a72      	ldr	r2, [pc, #456]	; (8019ce8 <_scanf_i+0x1e8>)
 8019b20:	2903      	cmp	r1, #3
 8019b22:	bf18      	it	ne
 8019b24:	461a      	movne	r2, r3
 8019b26:	68a3      	ldr	r3, [r4, #8]
 8019b28:	9201      	str	r2, [sp, #4]
 8019b2a:	1e5a      	subs	r2, r3, #1
 8019b2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019b30:	bf88      	it	hi
 8019b32:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019b36:	4627      	mov	r7, r4
 8019b38:	bf82      	ittt	hi
 8019b3a:	eb03 0905 	addhi.w	r9, r3, r5
 8019b3e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019b42:	60a3      	strhi	r3, [r4, #8]
 8019b44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019b48:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019b4c:	bf98      	it	ls
 8019b4e:	f04f 0900 	movls.w	r9, #0
 8019b52:	6023      	str	r3, [r4, #0]
 8019b54:	463d      	mov	r5, r7
 8019b56:	f04f 0b00 	mov.w	fp, #0
 8019b5a:	6831      	ldr	r1, [r6, #0]
 8019b5c:	ab03      	add	r3, sp, #12
 8019b5e:	7809      	ldrb	r1, [r1, #0]
 8019b60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019b64:	2202      	movs	r2, #2
 8019b66:	f7ee fa73 	bl	8008050 <memchr>
 8019b6a:	b328      	cbz	r0, 8019bb8 <_scanf_i+0xb8>
 8019b6c:	f1bb 0f01 	cmp.w	fp, #1
 8019b70:	d159      	bne.n	8019c26 <_scanf_i+0x126>
 8019b72:	6862      	ldr	r2, [r4, #4]
 8019b74:	b92a      	cbnz	r2, 8019b82 <_scanf_i+0x82>
 8019b76:	6822      	ldr	r2, [r4, #0]
 8019b78:	2308      	movs	r3, #8
 8019b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019b7e:	6063      	str	r3, [r4, #4]
 8019b80:	6022      	str	r2, [r4, #0]
 8019b82:	6822      	ldr	r2, [r4, #0]
 8019b84:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019b88:	6022      	str	r2, [r4, #0]
 8019b8a:	68a2      	ldr	r2, [r4, #8]
 8019b8c:	1e51      	subs	r1, r2, #1
 8019b8e:	60a1      	str	r1, [r4, #8]
 8019b90:	b192      	cbz	r2, 8019bb8 <_scanf_i+0xb8>
 8019b92:	6832      	ldr	r2, [r6, #0]
 8019b94:	1c51      	adds	r1, r2, #1
 8019b96:	6031      	str	r1, [r6, #0]
 8019b98:	7812      	ldrb	r2, [r2, #0]
 8019b9a:	f805 2b01 	strb.w	r2, [r5], #1
 8019b9e:	6872      	ldr	r2, [r6, #4]
 8019ba0:	3a01      	subs	r2, #1
 8019ba2:	2a00      	cmp	r2, #0
 8019ba4:	6072      	str	r2, [r6, #4]
 8019ba6:	dc07      	bgt.n	8019bb8 <_scanf_i+0xb8>
 8019ba8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8019bac:	4631      	mov	r1, r6
 8019bae:	4650      	mov	r0, sl
 8019bb0:	4790      	blx	r2
 8019bb2:	2800      	cmp	r0, #0
 8019bb4:	f040 8085 	bne.w	8019cc2 <_scanf_i+0x1c2>
 8019bb8:	f10b 0b01 	add.w	fp, fp, #1
 8019bbc:	f1bb 0f03 	cmp.w	fp, #3
 8019bc0:	d1cb      	bne.n	8019b5a <_scanf_i+0x5a>
 8019bc2:	6863      	ldr	r3, [r4, #4]
 8019bc4:	b90b      	cbnz	r3, 8019bca <_scanf_i+0xca>
 8019bc6:	230a      	movs	r3, #10
 8019bc8:	6063      	str	r3, [r4, #4]
 8019bca:	6863      	ldr	r3, [r4, #4]
 8019bcc:	4947      	ldr	r1, [pc, #284]	; (8019cec <_scanf_i+0x1ec>)
 8019bce:	6960      	ldr	r0, [r4, #20]
 8019bd0:	1ac9      	subs	r1, r1, r3
 8019bd2:	f000 f939 	bl	8019e48 <__sccl>
 8019bd6:	f04f 0b00 	mov.w	fp, #0
 8019bda:	68a3      	ldr	r3, [r4, #8]
 8019bdc:	6822      	ldr	r2, [r4, #0]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d03d      	beq.n	8019c5e <_scanf_i+0x15e>
 8019be2:	6831      	ldr	r1, [r6, #0]
 8019be4:	6960      	ldr	r0, [r4, #20]
 8019be6:	f891 c000 	ldrb.w	ip, [r1]
 8019bea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019bee:	2800      	cmp	r0, #0
 8019bf0:	d035      	beq.n	8019c5e <_scanf_i+0x15e>
 8019bf2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019bf6:	d124      	bne.n	8019c42 <_scanf_i+0x142>
 8019bf8:	0510      	lsls	r0, r2, #20
 8019bfa:	d522      	bpl.n	8019c42 <_scanf_i+0x142>
 8019bfc:	f10b 0b01 	add.w	fp, fp, #1
 8019c00:	f1b9 0f00 	cmp.w	r9, #0
 8019c04:	d003      	beq.n	8019c0e <_scanf_i+0x10e>
 8019c06:	3301      	adds	r3, #1
 8019c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c0c:	60a3      	str	r3, [r4, #8]
 8019c0e:	6873      	ldr	r3, [r6, #4]
 8019c10:	3b01      	subs	r3, #1
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	6073      	str	r3, [r6, #4]
 8019c16:	dd1b      	ble.n	8019c50 <_scanf_i+0x150>
 8019c18:	6833      	ldr	r3, [r6, #0]
 8019c1a:	3301      	adds	r3, #1
 8019c1c:	6033      	str	r3, [r6, #0]
 8019c1e:	68a3      	ldr	r3, [r4, #8]
 8019c20:	3b01      	subs	r3, #1
 8019c22:	60a3      	str	r3, [r4, #8]
 8019c24:	e7d9      	b.n	8019bda <_scanf_i+0xda>
 8019c26:	f1bb 0f02 	cmp.w	fp, #2
 8019c2a:	d1ae      	bne.n	8019b8a <_scanf_i+0x8a>
 8019c2c:	6822      	ldr	r2, [r4, #0]
 8019c2e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019c32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019c36:	d1bf      	bne.n	8019bb8 <_scanf_i+0xb8>
 8019c38:	2310      	movs	r3, #16
 8019c3a:	6063      	str	r3, [r4, #4]
 8019c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019c40:	e7a2      	b.n	8019b88 <_scanf_i+0x88>
 8019c42:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019c46:	6022      	str	r2, [r4, #0]
 8019c48:	780b      	ldrb	r3, [r1, #0]
 8019c4a:	f805 3b01 	strb.w	r3, [r5], #1
 8019c4e:	e7de      	b.n	8019c0e <_scanf_i+0x10e>
 8019c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019c54:	4631      	mov	r1, r6
 8019c56:	4650      	mov	r0, sl
 8019c58:	4798      	blx	r3
 8019c5a:	2800      	cmp	r0, #0
 8019c5c:	d0df      	beq.n	8019c1e <_scanf_i+0x11e>
 8019c5e:	6823      	ldr	r3, [r4, #0]
 8019c60:	05db      	lsls	r3, r3, #23
 8019c62:	d50d      	bpl.n	8019c80 <_scanf_i+0x180>
 8019c64:	42bd      	cmp	r5, r7
 8019c66:	d909      	bls.n	8019c7c <_scanf_i+0x17c>
 8019c68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019c70:	4632      	mov	r2, r6
 8019c72:	4650      	mov	r0, sl
 8019c74:	4798      	blx	r3
 8019c76:	f105 39ff 	add.w	r9, r5, #4294967295
 8019c7a:	464d      	mov	r5, r9
 8019c7c:	42bd      	cmp	r5, r7
 8019c7e:	d02d      	beq.n	8019cdc <_scanf_i+0x1dc>
 8019c80:	6822      	ldr	r2, [r4, #0]
 8019c82:	f012 0210 	ands.w	r2, r2, #16
 8019c86:	d113      	bne.n	8019cb0 <_scanf_i+0x1b0>
 8019c88:	702a      	strb	r2, [r5, #0]
 8019c8a:	6863      	ldr	r3, [r4, #4]
 8019c8c:	9e01      	ldr	r6, [sp, #4]
 8019c8e:	4639      	mov	r1, r7
 8019c90:	4650      	mov	r0, sl
 8019c92:	47b0      	blx	r6
 8019c94:	6821      	ldr	r1, [r4, #0]
 8019c96:	f8d8 3000 	ldr.w	r3, [r8]
 8019c9a:	f011 0f20 	tst.w	r1, #32
 8019c9e:	d013      	beq.n	8019cc8 <_scanf_i+0x1c8>
 8019ca0:	1d1a      	adds	r2, r3, #4
 8019ca2:	f8c8 2000 	str.w	r2, [r8]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	6018      	str	r0, [r3, #0]
 8019caa:	68e3      	ldr	r3, [r4, #12]
 8019cac:	3301      	adds	r3, #1
 8019cae:	60e3      	str	r3, [r4, #12]
 8019cb0:	1bed      	subs	r5, r5, r7
 8019cb2:	44ab      	add	fp, r5
 8019cb4:	6925      	ldr	r5, [r4, #16]
 8019cb6:	445d      	add	r5, fp
 8019cb8:	6125      	str	r5, [r4, #16]
 8019cba:	2000      	movs	r0, #0
 8019cbc:	b007      	add	sp, #28
 8019cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cc2:	f04f 0b00 	mov.w	fp, #0
 8019cc6:	e7ca      	b.n	8019c5e <_scanf_i+0x15e>
 8019cc8:	1d1a      	adds	r2, r3, #4
 8019cca:	f8c8 2000 	str.w	r2, [r8]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	f011 0f01 	tst.w	r1, #1
 8019cd4:	bf14      	ite	ne
 8019cd6:	8018      	strhne	r0, [r3, #0]
 8019cd8:	6018      	streq	r0, [r3, #0]
 8019cda:	e7e6      	b.n	8019caa <_scanf_i+0x1aa>
 8019cdc:	2001      	movs	r0, #1
 8019cde:	e7ed      	b.n	8019cbc <_scanf_i+0x1bc>
 8019ce0:	0801a738 	.word	0x0801a738
 8019ce4:	0801a04d 	.word	0x0801a04d
 8019ce8:	08016ba5 	.word	0x08016ba5
 8019cec:	0801abee 	.word	0x0801abee

08019cf0 <lflush>:
 8019cf0:	8983      	ldrh	r3, [r0, #12]
 8019cf2:	f003 0309 	and.w	r3, r3, #9
 8019cf6:	2b09      	cmp	r3, #9
 8019cf8:	d101      	bne.n	8019cfe <lflush+0xe>
 8019cfa:	f7fd bf51 	b.w	8017ba0 <fflush>
 8019cfe:	2000      	movs	r0, #0
 8019d00:	4770      	bx	lr
	...

08019d04 <__srefill_r>:
 8019d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d06:	460c      	mov	r4, r1
 8019d08:	4605      	mov	r5, r0
 8019d0a:	b118      	cbz	r0, 8019d14 <__srefill_r+0x10>
 8019d0c:	6983      	ldr	r3, [r0, #24]
 8019d0e:	b90b      	cbnz	r3, 8019d14 <__srefill_r+0x10>
 8019d10:	f7fd ffb0 	bl	8017c74 <__sinit>
 8019d14:	4b3b      	ldr	r3, [pc, #236]	; (8019e04 <__srefill_r+0x100>)
 8019d16:	429c      	cmp	r4, r3
 8019d18:	d10a      	bne.n	8019d30 <__srefill_r+0x2c>
 8019d1a:	686c      	ldr	r4, [r5, #4]
 8019d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019d20:	2300      	movs	r3, #0
 8019d22:	6063      	str	r3, [r4, #4]
 8019d24:	89a3      	ldrh	r3, [r4, #12]
 8019d26:	069e      	lsls	r6, r3, #26
 8019d28:	d50c      	bpl.n	8019d44 <__srefill_r+0x40>
 8019d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8019d2e:	e066      	b.n	8019dfe <__srefill_r+0xfa>
 8019d30:	4b35      	ldr	r3, [pc, #212]	; (8019e08 <__srefill_r+0x104>)
 8019d32:	429c      	cmp	r4, r3
 8019d34:	d101      	bne.n	8019d3a <__srefill_r+0x36>
 8019d36:	68ac      	ldr	r4, [r5, #8]
 8019d38:	e7f0      	b.n	8019d1c <__srefill_r+0x18>
 8019d3a:	4b34      	ldr	r3, [pc, #208]	; (8019e0c <__srefill_r+0x108>)
 8019d3c:	429c      	cmp	r4, r3
 8019d3e:	bf08      	it	eq
 8019d40:	68ec      	ldreq	r4, [r5, #12]
 8019d42:	e7eb      	b.n	8019d1c <__srefill_r+0x18>
 8019d44:	0758      	lsls	r0, r3, #29
 8019d46:	d448      	bmi.n	8019dda <__srefill_r+0xd6>
 8019d48:	06d9      	lsls	r1, r3, #27
 8019d4a:	d405      	bmi.n	8019d58 <__srefill_r+0x54>
 8019d4c:	2309      	movs	r3, #9
 8019d4e:	602b      	str	r3, [r5, #0]
 8019d50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019d54:	81a3      	strh	r3, [r4, #12]
 8019d56:	e7e8      	b.n	8019d2a <__srefill_r+0x26>
 8019d58:	071a      	lsls	r2, r3, #28
 8019d5a:	d50b      	bpl.n	8019d74 <__srefill_r+0x70>
 8019d5c:	4621      	mov	r1, r4
 8019d5e:	4628      	mov	r0, r5
 8019d60:	f7fd fee2 	bl	8017b28 <_fflush_r>
 8019d64:	2800      	cmp	r0, #0
 8019d66:	d1e0      	bne.n	8019d2a <__srefill_r+0x26>
 8019d68:	89a3      	ldrh	r3, [r4, #12]
 8019d6a:	60a0      	str	r0, [r4, #8]
 8019d6c:	f023 0308 	bic.w	r3, r3, #8
 8019d70:	81a3      	strh	r3, [r4, #12]
 8019d72:	61a0      	str	r0, [r4, #24]
 8019d74:	89a3      	ldrh	r3, [r4, #12]
 8019d76:	f043 0304 	orr.w	r3, r3, #4
 8019d7a:	81a3      	strh	r3, [r4, #12]
 8019d7c:	6923      	ldr	r3, [r4, #16]
 8019d7e:	b91b      	cbnz	r3, 8019d88 <__srefill_r+0x84>
 8019d80:	4621      	mov	r1, r4
 8019d82:	4628      	mov	r0, r5
 8019d84:	f7fe fbcc 	bl	8018520 <__smakebuf_r>
 8019d88:	89a6      	ldrh	r6, [r4, #12]
 8019d8a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8019d8e:	07b3      	lsls	r3, r6, #30
 8019d90:	d00f      	beq.n	8019db2 <__srefill_r+0xae>
 8019d92:	2301      	movs	r3, #1
 8019d94:	81a3      	strh	r3, [r4, #12]
 8019d96:	4b1e      	ldr	r3, [pc, #120]	; (8019e10 <__srefill_r+0x10c>)
 8019d98:	491e      	ldr	r1, [pc, #120]	; (8019e14 <__srefill_r+0x110>)
 8019d9a:	6818      	ldr	r0, [r3, #0]
 8019d9c:	f006 0609 	and.w	r6, r6, #9
 8019da0:	f7fd ffe6 	bl	8017d70 <_fwalk>
 8019da4:	2e09      	cmp	r6, #9
 8019da6:	81a7      	strh	r7, [r4, #12]
 8019da8:	d103      	bne.n	8019db2 <__srefill_r+0xae>
 8019daa:	4621      	mov	r1, r4
 8019dac:	4628      	mov	r0, r5
 8019dae:	f7fd fe35 	bl	8017a1c <__sflush_r>
 8019db2:	6922      	ldr	r2, [r4, #16]
 8019db4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019db6:	6963      	ldr	r3, [r4, #20]
 8019db8:	6a21      	ldr	r1, [r4, #32]
 8019dba:	6022      	str	r2, [r4, #0]
 8019dbc:	4628      	mov	r0, r5
 8019dbe:	47b0      	blx	r6
 8019dc0:	2800      	cmp	r0, #0
 8019dc2:	6060      	str	r0, [r4, #4]
 8019dc4:	dc1c      	bgt.n	8019e00 <__srefill_r+0xfc>
 8019dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019dca:	bf17      	itett	ne
 8019dcc:	2200      	movne	r2, #0
 8019dce:	f043 0320 	orreq.w	r3, r3, #32
 8019dd2:	6062      	strne	r2, [r4, #4]
 8019dd4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8019dd8:	e7bc      	b.n	8019d54 <__srefill_r+0x50>
 8019dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ddc:	2900      	cmp	r1, #0
 8019dde:	d0cd      	beq.n	8019d7c <__srefill_r+0x78>
 8019de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019de4:	4299      	cmp	r1, r3
 8019de6:	d002      	beq.n	8019dee <__srefill_r+0xea>
 8019de8:	4628      	mov	r0, r5
 8019dea:	f7ff f8cb 	bl	8018f84 <_free_r>
 8019dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019df0:	6063      	str	r3, [r4, #4]
 8019df2:	2000      	movs	r0, #0
 8019df4:	6360      	str	r0, [r4, #52]	; 0x34
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d0c0      	beq.n	8019d7c <__srefill_r+0x78>
 8019dfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019dfc:	6023      	str	r3, [r4, #0]
 8019dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e00:	2000      	movs	r0, #0
 8019e02:	e7fc      	b.n	8019dfe <__srefill_r+0xfa>
 8019e04:	0801a9ac 	.word	0x0801a9ac
 8019e08:	0801a9cc 	.word	0x0801a9cc
 8019e0c:	0801a98c 	.word	0x0801a98c
 8019e10:	0801a76c 	.word	0x0801a76c
 8019e14:	08019cf1 	.word	0x08019cf1

08019e18 <nan>:
 8019e18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019e20 <nan+0x8>
 8019e1c:	4770      	bx	lr
 8019e1e:	bf00      	nop
 8019e20:	00000000 	.word	0x00000000
 8019e24:	7ff80000 	.word	0x7ff80000

08019e28 <_sbrk_r>:
 8019e28:	b538      	push	{r3, r4, r5, lr}
 8019e2a:	4d06      	ldr	r5, [pc, #24]	; (8019e44 <_sbrk_r+0x1c>)
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	4604      	mov	r4, r0
 8019e30:	4608      	mov	r0, r1
 8019e32:	602b      	str	r3, [r5, #0]
 8019e34:	f7f5 f910 	bl	800f058 <_sbrk>
 8019e38:	1c43      	adds	r3, r0, #1
 8019e3a:	d102      	bne.n	8019e42 <_sbrk_r+0x1a>
 8019e3c:	682b      	ldr	r3, [r5, #0]
 8019e3e:	b103      	cbz	r3, 8019e42 <_sbrk_r+0x1a>
 8019e40:	6023      	str	r3, [r4, #0]
 8019e42:	bd38      	pop	{r3, r4, r5, pc}
 8019e44:	20000c1c 	.word	0x20000c1c

08019e48 <__sccl>:
 8019e48:	b570      	push	{r4, r5, r6, lr}
 8019e4a:	780b      	ldrb	r3, [r1, #0]
 8019e4c:	4604      	mov	r4, r0
 8019e4e:	2b5e      	cmp	r3, #94	; 0x5e
 8019e50:	bf0b      	itete	eq
 8019e52:	784b      	ldrbeq	r3, [r1, #1]
 8019e54:	1c48      	addne	r0, r1, #1
 8019e56:	1c88      	addeq	r0, r1, #2
 8019e58:	2200      	movne	r2, #0
 8019e5a:	bf08      	it	eq
 8019e5c:	2201      	moveq	r2, #1
 8019e5e:	1e61      	subs	r1, r4, #1
 8019e60:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019e64:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019e68:	42a9      	cmp	r1, r5
 8019e6a:	d1fb      	bne.n	8019e64 <__sccl+0x1c>
 8019e6c:	b90b      	cbnz	r3, 8019e72 <__sccl+0x2a>
 8019e6e:	3801      	subs	r0, #1
 8019e70:	bd70      	pop	{r4, r5, r6, pc}
 8019e72:	f082 0201 	eor.w	r2, r2, #1
 8019e76:	54e2      	strb	r2, [r4, r3]
 8019e78:	4605      	mov	r5, r0
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8019e80:	292d      	cmp	r1, #45	; 0x2d
 8019e82:	d006      	beq.n	8019e92 <__sccl+0x4a>
 8019e84:	295d      	cmp	r1, #93	; 0x5d
 8019e86:	d0f3      	beq.n	8019e70 <__sccl+0x28>
 8019e88:	b909      	cbnz	r1, 8019e8e <__sccl+0x46>
 8019e8a:	4628      	mov	r0, r5
 8019e8c:	e7f0      	b.n	8019e70 <__sccl+0x28>
 8019e8e:	460b      	mov	r3, r1
 8019e90:	e7f1      	b.n	8019e76 <__sccl+0x2e>
 8019e92:	786e      	ldrb	r6, [r5, #1]
 8019e94:	2e5d      	cmp	r6, #93	; 0x5d
 8019e96:	d0fa      	beq.n	8019e8e <__sccl+0x46>
 8019e98:	42b3      	cmp	r3, r6
 8019e9a:	dcf8      	bgt.n	8019e8e <__sccl+0x46>
 8019e9c:	3502      	adds	r5, #2
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	3101      	adds	r1, #1
 8019ea2:	428e      	cmp	r6, r1
 8019ea4:	5462      	strb	r2, [r4, r1]
 8019ea6:	dcfb      	bgt.n	8019ea0 <__sccl+0x58>
 8019ea8:	1af1      	subs	r1, r6, r3
 8019eaa:	3901      	subs	r1, #1
 8019eac:	1c58      	adds	r0, r3, #1
 8019eae:	42b3      	cmp	r3, r6
 8019eb0:	bfa8      	it	ge
 8019eb2:	2100      	movge	r1, #0
 8019eb4:	1843      	adds	r3, r0, r1
 8019eb6:	e7e0      	b.n	8019e7a <__sccl+0x32>

08019eb8 <__sread>:
 8019eb8:	b510      	push	{r4, lr}
 8019eba:	460c      	mov	r4, r1
 8019ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ec0:	f000 fa82 	bl	801a3c8 <_read_r>
 8019ec4:	2800      	cmp	r0, #0
 8019ec6:	bfab      	itete	ge
 8019ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019eca:	89a3      	ldrhlt	r3, [r4, #12]
 8019ecc:	181b      	addge	r3, r3, r0
 8019ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019ed2:	bfac      	ite	ge
 8019ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8019ed6:	81a3      	strhlt	r3, [r4, #12]
 8019ed8:	bd10      	pop	{r4, pc}

08019eda <__swrite>:
 8019eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ede:	461f      	mov	r7, r3
 8019ee0:	898b      	ldrh	r3, [r1, #12]
 8019ee2:	05db      	lsls	r3, r3, #23
 8019ee4:	4605      	mov	r5, r0
 8019ee6:	460c      	mov	r4, r1
 8019ee8:	4616      	mov	r6, r2
 8019eea:	d505      	bpl.n	8019ef8 <__swrite+0x1e>
 8019eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ef0:	2302      	movs	r3, #2
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	f000 fa00 	bl	801a2f8 <_lseek_r>
 8019ef8:	89a3      	ldrh	r3, [r4, #12]
 8019efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019f02:	81a3      	strh	r3, [r4, #12]
 8019f04:	4632      	mov	r2, r6
 8019f06:	463b      	mov	r3, r7
 8019f08:	4628      	mov	r0, r5
 8019f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f0e:	f000 b97f 	b.w	801a210 <_write_r>

08019f12 <__sseek>:
 8019f12:	b510      	push	{r4, lr}
 8019f14:	460c      	mov	r4, r1
 8019f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f1a:	f000 f9ed 	bl	801a2f8 <_lseek_r>
 8019f1e:	1c43      	adds	r3, r0, #1
 8019f20:	89a3      	ldrh	r3, [r4, #12]
 8019f22:	bf15      	itete	ne
 8019f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8019f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019f2e:	81a3      	strheq	r3, [r4, #12]
 8019f30:	bf18      	it	ne
 8019f32:	81a3      	strhne	r3, [r4, #12]
 8019f34:	bd10      	pop	{r4, pc}

08019f36 <__sclose>:
 8019f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f3a:	f000 b999 	b.w	801a270 <_close_r>

08019f3e <strncmp>:
 8019f3e:	b510      	push	{r4, lr}
 8019f40:	b17a      	cbz	r2, 8019f62 <strncmp+0x24>
 8019f42:	4603      	mov	r3, r0
 8019f44:	3901      	subs	r1, #1
 8019f46:	1884      	adds	r4, r0, r2
 8019f48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019f4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019f50:	4290      	cmp	r0, r2
 8019f52:	d101      	bne.n	8019f58 <strncmp+0x1a>
 8019f54:	42a3      	cmp	r3, r4
 8019f56:	d101      	bne.n	8019f5c <strncmp+0x1e>
 8019f58:	1a80      	subs	r0, r0, r2
 8019f5a:	bd10      	pop	{r4, pc}
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	d1f3      	bne.n	8019f48 <strncmp+0xa>
 8019f60:	e7fa      	b.n	8019f58 <strncmp+0x1a>
 8019f62:	4610      	mov	r0, r2
 8019f64:	e7f9      	b.n	8019f5a <strncmp+0x1c>
	...

08019f68 <_strtoul_l.constprop.0>:
 8019f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f6c:	4f36      	ldr	r7, [pc, #216]	; (801a048 <_strtoul_l.constprop.0+0xe0>)
 8019f6e:	4686      	mov	lr, r0
 8019f70:	460d      	mov	r5, r1
 8019f72:	4628      	mov	r0, r5
 8019f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f78:	5de6      	ldrb	r6, [r4, r7]
 8019f7a:	f016 0608 	ands.w	r6, r6, #8
 8019f7e:	d1f8      	bne.n	8019f72 <_strtoul_l.constprop.0+0xa>
 8019f80:	2c2d      	cmp	r4, #45	; 0x2d
 8019f82:	d12f      	bne.n	8019fe4 <_strtoul_l.constprop.0+0x7c>
 8019f84:	782c      	ldrb	r4, [r5, #0]
 8019f86:	2601      	movs	r6, #1
 8019f88:	1c85      	adds	r5, r0, #2
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d057      	beq.n	801a03e <_strtoul_l.constprop.0+0xd6>
 8019f8e:	2b10      	cmp	r3, #16
 8019f90:	d109      	bne.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 8019f92:	2c30      	cmp	r4, #48	; 0x30
 8019f94:	d107      	bne.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 8019f96:	7828      	ldrb	r0, [r5, #0]
 8019f98:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019f9c:	2858      	cmp	r0, #88	; 0x58
 8019f9e:	d149      	bne.n	801a034 <_strtoul_l.constprop.0+0xcc>
 8019fa0:	786c      	ldrb	r4, [r5, #1]
 8019fa2:	2310      	movs	r3, #16
 8019fa4:	3502      	adds	r5, #2
 8019fa6:	f04f 38ff 	mov.w	r8, #4294967295
 8019faa:	2700      	movs	r7, #0
 8019fac:	fbb8 f8f3 	udiv	r8, r8, r3
 8019fb0:	fb03 f908 	mul.w	r9, r3, r8
 8019fb4:	ea6f 0909 	mvn.w	r9, r9
 8019fb8:	4638      	mov	r0, r7
 8019fba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019fbe:	f1bc 0f09 	cmp.w	ip, #9
 8019fc2:	d814      	bhi.n	8019fee <_strtoul_l.constprop.0+0x86>
 8019fc4:	4664      	mov	r4, ip
 8019fc6:	42a3      	cmp	r3, r4
 8019fc8:	dd22      	ble.n	801a010 <_strtoul_l.constprop.0+0xa8>
 8019fca:	2f00      	cmp	r7, #0
 8019fcc:	db1d      	blt.n	801a00a <_strtoul_l.constprop.0+0xa2>
 8019fce:	4580      	cmp	r8, r0
 8019fd0:	d31b      	bcc.n	801a00a <_strtoul_l.constprop.0+0xa2>
 8019fd2:	d101      	bne.n	8019fd8 <_strtoul_l.constprop.0+0x70>
 8019fd4:	45a1      	cmp	r9, r4
 8019fd6:	db18      	blt.n	801a00a <_strtoul_l.constprop.0+0xa2>
 8019fd8:	fb00 4003 	mla	r0, r0, r3, r4
 8019fdc:	2701      	movs	r7, #1
 8019fde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019fe2:	e7ea      	b.n	8019fba <_strtoul_l.constprop.0+0x52>
 8019fe4:	2c2b      	cmp	r4, #43	; 0x2b
 8019fe6:	bf04      	itt	eq
 8019fe8:	782c      	ldrbeq	r4, [r5, #0]
 8019fea:	1c85      	addeq	r5, r0, #2
 8019fec:	e7cd      	b.n	8019f8a <_strtoul_l.constprop.0+0x22>
 8019fee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019ff2:	f1bc 0f19 	cmp.w	ip, #25
 8019ff6:	d801      	bhi.n	8019ffc <_strtoul_l.constprop.0+0x94>
 8019ff8:	3c37      	subs	r4, #55	; 0x37
 8019ffa:	e7e4      	b.n	8019fc6 <_strtoul_l.constprop.0+0x5e>
 8019ffc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a000:	f1bc 0f19 	cmp.w	ip, #25
 801a004:	d804      	bhi.n	801a010 <_strtoul_l.constprop.0+0xa8>
 801a006:	3c57      	subs	r4, #87	; 0x57
 801a008:	e7dd      	b.n	8019fc6 <_strtoul_l.constprop.0+0x5e>
 801a00a:	f04f 37ff 	mov.w	r7, #4294967295
 801a00e:	e7e6      	b.n	8019fde <_strtoul_l.constprop.0+0x76>
 801a010:	2f00      	cmp	r7, #0
 801a012:	da07      	bge.n	801a024 <_strtoul_l.constprop.0+0xbc>
 801a014:	2322      	movs	r3, #34	; 0x22
 801a016:	f8ce 3000 	str.w	r3, [lr]
 801a01a:	f04f 30ff 	mov.w	r0, #4294967295
 801a01e:	b932      	cbnz	r2, 801a02e <_strtoul_l.constprop.0+0xc6>
 801a020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a024:	b106      	cbz	r6, 801a028 <_strtoul_l.constprop.0+0xc0>
 801a026:	4240      	negs	r0, r0
 801a028:	2a00      	cmp	r2, #0
 801a02a:	d0f9      	beq.n	801a020 <_strtoul_l.constprop.0+0xb8>
 801a02c:	b107      	cbz	r7, 801a030 <_strtoul_l.constprop.0+0xc8>
 801a02e:	1e69      	subs	r1, r5, #1
 801a030:	6011      	str	r1, [r2, #0]
 801a032:	e7f5      	b.n	801a020 <_strtoul_l.constprop.0+0xb8>
 801a034:	2430      	movs	r4, #48	; 0x30
 801a036:	2b00      	cmp	r3, #0
 801a038:	d1b5      	bne.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 801a03a:	2308      	movs	r3, #8
 801a03c:	e7b3      	b.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 801a03e:	2c30      	cmp	r4, #48	; 0x30
 801a040:	d0a9      	beq.n	8019f96 <_strtoul_l.constprop.0+0x2e>
 801a042:	230a      	movs	r3, #10
 801a044:	e7af      	b.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 801a046:	bf00      	nop
 801a048:	0801a7f9 	.word	0x0801a7f9

0801a04c <_strtoul_r>:
 801a04c:	f7ff bf8c 	b.w	8019f68 <_strtoul_l.constprop.0>

0801a050 <__submore>:
 801a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a054:	460c      	mov	r4, r1
 801a056:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a05c:	4299      	cmp	r1, r3
 801a05e:	d11d      	bne.n	801a09c <__submore+0x4c>
 801a060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a064:	f7fe fffa 	bl	801905c <_malloc_r>
 801a068:	b918      	cbnz	r0, 801a072 <__submore+0x22>
 801a06a:	f04f 30ff 	mov.w	r0, #4294967295
 801a06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a076:	63a3      	str	r3, [r4, #56]	; 0x38
 801a078:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a07c:	6360      	str	r0, [r4, #52]	; 0x34
 801a07e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a082:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a086:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a08a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a08e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a092:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a096:	6020      	str	r0, [r4, #0]
 801a098:	2000      	movs	r0, #0
 801a09a:	e7e8      	b.n	801a06e <__submore+0x1e>
 801a09c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a09e:	0077      	lsls	r7, r6, #1
 801a0a0:	463a      	mov	r2, r7
 801a0a2:	f000 f961 	bl	801a368 <_realloc_r>
 801a0a6:	4605      	mov	r5, r0
 801a0a8:	2800      	cmp	r0, #0
 801a0aa:	d0de      	beq.n	801a06a <__submore+0x1a>
 801a0ac:	eb00 0806 	add.w	r8, r0, r6
 801a0b0:	4601      	mov	r1, r0
 801a0b2:	4632      	mov	r2, r6
 801a0b4:	4640      	mov	r0, r8
 801a0b6:	f7fa fea1 	bl	8014dfc <memcpy>
 801a0ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a0be:	f8c4 8000 	str.w	r8, [r4]
 801a0c2:	e7e9      	b.n	801a098 <__submore+0x48>

0801a0c4 <_ungetc_r>:
 801a0c4:	b570      	push	{r4, r5, r6, lr}
 801a0c6:	4614      	mov	r4, r2
 801a0c8:	1c4a      	adds	r2, r1, #1
 801a0ca:	4606      	mov	r6, r0
 801a0cc:	460d      	mov	r5, r1
 801a0ce:	d103      	bne.n	801a0d8 <_ungetc_r+0x14>
 801a0d0:	f04f 35ff 	mov.w	r5, #4294967295
 801a0d4:	4628      	mov	r0, r5
 801a0d6:	bd70      	pop	{r4, r5, r6, pc}
 801a0d8:	b118      	cbz	r0, 801a0e2 <_ungetc_r+0x1e>
 801a0da:	6983      	ldr	r3, [r0, #24]
 801a0dc:	b90b      	cbnz	r3, 801a0e2 <_ungetc_r+0x1e>
 801a0de:	f7fd fdc9 	bl	8017c74 <__sinit>
 801a0e2:	4b41      	ldr	r3, [pc, #260]	; (801a1e8 <_ungetc_r+0x124>)
 801a0e4:	429c      	cmp	r4, r3
 801a0e6:	d11d      	bne.n	801a124 <_ungetc_r+0x60>
 801a0e8:	6874      	ldr	r4, [r6, #4]
 801a0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0ec:	07db      	lsls	r3, r3, #31
 801a0ee:	d405      	bmi.n	801a0fc <_ungetc_r+0x38>
 801a0f0:	89a3      	ldrh	r3, [r4, #12]
 801a0f2:	0598      	lsls	r0, r3, #22
 801a0f4:	d402      	bmi.n	801a0fc <_ungetc_r+0x38>
 801a0f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0f8:	f7fe f9eb 	bl	80184d2 <__retarget_lock_acquire_recursive>
 801a0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a100:	f023 0320 	bic.w	r3, r3, #32
 801a104:	0759      	lsls	r1, r3, #29
 801a106:	81a3      	strh	r3, [r4, #12]
 801a108:	b29a      	uxth	r2, r3
 801a10a:	d42d      	bmi.n	801a168 <_ungetc_r+0xa4>
 801a10c:	06d3      	lsls	r3, r2, #27
 801a10e:	d413      	bmi.n	801a138 <_ungetc_r+0x74>
 801a110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a112:	07dd      	lsls	r5, r3, #31
 801a114:	d4dc      	bmi.n	801a0d0 <_ungetc_r+0xc>
 801a116:	f412 7f00 	tst.w	r2, #512	; 0x200
 801a11a:	d1d9      	bne.n	801a0d0 <_ungetc_r+0xc>
 801a11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a11e:	f7fe f9d9 	bl	80184d4 <__retarget_lock_release_recursive>
 801a122:	e7d5      	b.n	801a0d0 <_ungetc_r+0xc>
 801a124:	4b31      	ldr	r3, [pc, #196]	; (801a1ec <_ungetc_r+0x128>)
 801a126:	429c      	cmp	r4, r3
 801a128:	d101      	bne.n	801a12e <_ungetc_r+0x6a>
 801a12a:	68b4      	ldr	r4, [r6, #8]
 801a12c:	e7dd      	b.n	801a0ea <_ungetc_r+0x26>
 801a12e:	4b30      	ldr	r3, [pc, #192]	; (801a1f0 <_ungetc_r+0x12c>)
 801a130:	429c      	cmp	r4, r3
 801a132:	bf08      	it	eq
 801a134:	68f4      	ldreq	r4, [r6, #12]
 801a136:	e7d8      	b.n	801a0ea <_ungetc_r+0x26>
 801a138:	0710      	lsls	r0, r2, #28
 801a13a:	d511      	bpl.n	801a160 <_ungetc_r+0x9c>
 801a13c:	4621      	mov	r1, r4
 801a13e:	4630      	mov	r0, r6
 801a140:	f7fd fcf2 	bl	8017b28 <_fflush_r>
 801a144:	b130      	cbz	r0, 801a154 <_ungetc_r+0x90>
 801a146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a148:	07d9      	lsls	r1, r3, #31
 801a14a:	d4c1      	bmi.n	801a0d0 <_ungetc_r+0xc>
 801a14c:	89a3      	ldrh	r3, [r4, #12]
 801a14e:	f413 7f00 	tst.w	r3, #512	; 0x200
 801a152:	e7e2      	b.n	801a11a <_ungetc_r+0x56>
 801a154:	89a3      	ldrh	r3, [r4, #12]
 801a156:	60a0      	str	r0, [r4, #8]
 801a158:	f023 0308 	bic.w	r3, r3, #8
 801a15c:	81a3      	strh	r3, [r4, #12]
 801a15e:	61a0      	str	r0, [r4, #24]
 801a160:	89a3      	ldrh	r3, [r4, #12]
 801a162:	f043 0304 	orr.w	r3, r3, #4
 801a166:	81a3      	strh	r3, [r4, #12]
 801a168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a16a:	6862      	ldr	r2, [r4, #4]
 801a16c:	b2ed      	uxtb	r5, r5
 801a16e:	b1d3      	cbz	r3, 801a1a6 <_ungetc_r+0xe2>
 801a170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a172:	4293      	cmp	r3, r2
 801a174:	dc05      	bgt.n	801a182 <_ungetc_r+0xbe>
 801a176:	4621      	mov	r1, r4
 801a178:	4630      	mov	r0, r6
 801a17a:	f7ff ff69 	bl	801a050 <__submore>
 801a17e:	2800      	cmp	r0, #0
 801a180:	d1e1      	bne.n	801a146 <_ungetc_r+0x82>
 801a182:	6823      	ldr	r3, [r4, #0]
 801a184:	1e5a      	subs	r2, r3, #1
 801a186:	6022      	str	r2, [r4, #0]
 801a188:	f803 5c01 	strb.w	r5, [r3, #-1]
 801a18c:	6863      	ldr	r3, [r4, #4]
 801a18e:	3301      	adds	r3, #1
 801a190:	6063      	str	r3, [r4, #4]
 801a192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a194:	07da      	lsls	r2, r3, #31
 801a196:	d49d      	bmi.n	801a0d4 <_ungetc_r+0x10>
 801a198:	89a3      	ldrh	r3, [r4, #12]
 801a19a:	059b      	lsls	r3, r3, #22
 801a19c:	d49a      	bmi.n	801a0d4 <_ungetc_r+0x10>
 801a19e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a1a0:	f7fe f998 	bl	80184d4 <__retarget_lock_release_recursive>
 801a1a4:	e796      	b.n	801a0d4 <_ungetc_r+0x10>
 801a1a6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801a1a8:	6920      	ldr	r0, [r4, #16]
 801a1aa:	6823      	ldr	r3, [r4, #0]
 801a1ac:	f001 0101 	and.w	r1, r1, #1
 801a1b0:	b160      	cbz	r0, 801a1cc <_ungetc_r+0x108>
 801a1b2:	4298      	cmp	r0, r3
 801a1b4:	d20a      	bcs.n	801a1cc <_ungetc_r+0x108>
 801a1b6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 801a1ba:	42a8      	cmp	r0, r5
 801a1bc:	d106      	bne.n	801a1cc <_ungetc_r+0x108>
 801a1be:	3b01      	subs	r3, #1
 801a1c0:	3201      	adds	r2, #1
 801a1c2:	6023      	str	r3, [r4, #0]
 801a1c4:	6062      	str	r2, [r4, #4]
 801a1c6:	2900      	cmp	r1, #0
 801a1c8:	d184      	bne.n	801a0d4 <_ungetc_r+0x10>
 801a1ca:	e7e5      	b.n	801a198 <_ungetc_r+0xd4>
 801a1cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801a1d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1d4:	6363      	str	r3, [r4, #52]	; 0x34
 801a1d6:	2303      	movs	r3, #3
 801a1d8:	63a3      	str	r3, [r4, #56]	; 0x38
 801a1da:	4623      	mov	r3, r4
 801a1dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 801a1e0:	6023      	str	r3, [r4, #0]
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	6063      	str	r3, [r4, #4]
 801a1e6:	e7ee      	b.n	801a1c6 <_ungetc_r+0x102>
 801a1e8:	0801a9ac 	.word	0x0801a9ac
 801a1ec:	0801a9cc 	.word	0x0801a9cc
 801a1f0:	0801a98c 	.word	0x0801a98c

0801a1f4 <__ascii_wctomb>:
 801a1f4:	b149      	cbz	r1, 801a20a <__ascii_wctomb+0x16>
 801a1f6:	2aff      	cmp	r2, #255	; 0xff
 801a1f8:	bf85      	ittet	hi
 801a1fa:	238a      	movhi	r3, #138	; 0x8a
 801a1fc:	6003      	strhi	r3, [r0, #0]
 801a1fe:	700a      	strbls	r2, [r1, #0]
 801a200:	f04f 30ff 	movhi.w	r0, #4294967295
 801a204:	bf98      	it	ls
 801a206:	2001      	movls	r0, #1
 801a208:	4770      	bx	lr
 801a20a:	4608      	mov	r0, r1
 801a20c:	4770      	bx	lr
	...

0801a210 <_write_r>:
 801a210:	b538      	push	{r3, r4, r5, lr}
 801a212:	4d07      	ldr	r5, [pc, #28]	; (801a230 <_write_r+0x20>)
 801a214:	4604      	mov	r4, r0
 801a216:	4608      	mov	r0, r1
 801a218:	4611      	mov	r1, r2
 801a21a:	2200      	movs	r2, #0
 801a21c:	602a      	str	r2, [r5, #0]
 801a21e:	461a      	mov	r2, r3
 801a220:	f7f4 fec9 	bl	800efb6 <_write>
 801a224:	1c43      	adds	r3, r0, #1
 801a226:	d102      	bne.n	801a22e <_write_r+0x1e>
 801a228:	682b      	ldr	r3, [r5, #0]
 801a22a:	b103      	cbz	r3, 801a22e <_write_r+0x1e>
 801a22c:	6023      	str	r3, [r4, #0]
 801a22e:	bd38      	pop	{r3, r4, r5, pc}
 801a230:	20000c1c 	.word	0x20000c1c

0801a234 <__assert_func>:
 801a234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a236:	4614      	mov	r4, r2
 801a238:	461a      	mov	r2, r3
 801a23a:	4b09      	ldr	r3, [pc, #36]	; (801a260 <__assert_func+0x2c>)
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4605      	mov	r5, r0
 801a240:	68d8      	ldr	r0, [r3, #12]
 801a242:	b14c      	cbz	r4, 801a258 <__assert_func+0x24>
 801a244:	4b07      	ldr	r3, [pc, #28]	; (801a264 <__assert_func+0x30>)
 801a246:	9100      	str	r1, [sp, #0]
 801a248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a24c:	4906      	ldr	r1, [pc, #24]	; (801a268 <__assert_func+0x34>)
 801a24e:	462b      	mov	r3, r5
 801a250:	f000 f81e 	bl	801a290 <fiprintf>
 801a254:	f000 f8ca 	bl	801a3ec <abort>
 801a258:	4b04      	ldr	r3, [pc, #16]	; (801a26c <__assert_func+0x38>)
 801a25a:	461c      	mov	r4, r3
 801a25c:	e7f3      	b.n	801a246 <__assert_func+0x12>
 801a25e:	bf00      	nop
 801a260:	20000028 	.word	0x20000028
 801a264:	0801abf0 	.word	0x0801abf0
 801a268:	0801abfd 	.word	0x0801abfd
 801a26c:	0801ac2b 	.word	0x0801ac2b

0801a270 <_close_r>:
 801a270:	b538      	push	{r3, r4, r5, lr}
 801a272:	4d06      	ldr	r5, [pc, #24]	; (801a28c <_close_r+0x1c>)
 801a274:	2300      	movs	r3, #0
 801a276:	4604      	mov	r4, r0
 801a278:	4608      	mov	r0, r1
 801a27a:	602b      	str	r3, [r5, #0]
 801a27c:	f7f4 feb7 	bl	800efee <_close>
 801a280:	1c43      	adds	r3, r0, #1
 801a282:	d102      	bne.n	801a28a <_close_r+0x1a>
 801a284:	682b      	ldr	r3, [r5, #0]
 801a286:	b103      	cbz	r3, 801a28a <_close_r+0x1a>
 801a288:	6023      	str	r3, [r4, #0]
 801a28a:	bd38      	pop	{r3, r4, r5, pc}
 801a28c:	20000c1c 	.word	0x20000c1c

0801a290 <fiprintf>:
 801a290:	b40e      	push	{r1, r2, r3}
 801a292:	b503      	push	{r0, r1, lr}
 801a294:	4601      	mov	r1, r0
 801a296:	ab03      	add	r3, sp, #12
 801a298:	4805      	ldr	r0, [pc, #20]	; (801a2b0 <fiprintf+0x20>)
 801a29a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a29e:	6800      	ldr	r0, [r0, #0]
 801a2a0:	9301      	str	r3, [sp, #4]
 801a2a2:	f7ff f8d5 	bl	8019450 <_vfiprintf_r>
 801a2a6:	b002      	add	sp, #8
 801a2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2ac:	b003      	add	sp, #12
 801a2ae:	4770      	bx	lr
 801a2b0:	20000028 	.word	0x20000028

0801a2b4 <_fstat_r>:
 801a2b4:	b538      	push	{r3, r4, r5, lr}
 801a2b6:	4d07      	ldr	r5, [pc, #28]	; (801a2d4 <_fstat_r+0x20>)
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	4604      	mov	r4, r0
 801a2bc:	4608      	mov	r0, r1
 801a2be:	4611      	mov	r1, r2
 801a2c0:	602b      	str	r3, [r5, #0]
 801a2c2:	f7f4 fea0 	bl	800f006 <_fstat>
 801a2c6:	1c43      	adds	r3, r0, #1
 801a2c8:	d102      	bne.n	801a2d0 <_fstat_r+0x1c>
 801a2ca:	682b      	ldr	r3, [r5, #0]
 801a2cc:	b103      	cbz	r3, 801a2d0 <_fstat_r+0x1c>
 801a2ce:	6023      	str	r3, [r4, #0]
 801a2d0:	bd38      	pop	{r3, r4, r5, pc}
 801a2d2:	bf00      	nop
 801a2d4:	20000c1c 	.word	0x20000c1c

0801a2d8 <_isatty_r>:
 801a2d8:	b538      	push	{r3, r4, r5, lr}
 801a2da:	4d06      	ldr	r5, [pc, #24]	; (801a2f4 <_isatty_r+0x1c>)
 801a2dc:	2300      	movs	r3, #0
 801a2de:	4604      	mov	r4, r0
 801a2e0:	4608      	mov	r0, r1
 801a2e2:	602b      	str	r3, [r5, #0]
 801a2e4:	f7f4 fe9f 	bl	800f026 <_isatty>
 801a2e8:	1c43      	adds	r3, r0, #1
 801a2ea:	d102      	bne.n	801a2f2 <_isatty_r+0x1a>
 801a2ec:	682b      	ldr	r3, [r5, #0]
 801a2ee:	b103      	cbz	r3, 801a2f2 <_isatty_r+0x1a>
 801a2f0:	6023      	str	r3, [r4, #0]
 801a2f2:	bd38      	pop	{r3, r4, r5, pc}
 801a2f4:	20000c1c 	.word	0x20000c1c

0801a2f8 <_lseek_r>:
 801a2f8:	b538      	push	{r3, r4, r5, lr}
 801a2fa:	4d07      	ldr	r5, [pc, #28]	; (801a318 <_lseek_r+0x20>)
 801a2fc:	4604      	mov	r4, r0
 801a2fe:	4608      	mov	r0, r1
 801a300:	4611      	mov	r1, r2
 801a302:	2200      	movs	r2, #0
 801a304:	602a      	str	r2, [r5, #0]
 801a306:	461a      	mov	r2, r3
 801a308:	f7f4 fe98 	bl	800f03c <_lseek>
 801a30c:	1c43      	adds	r3, r0, #1
 801a30e:	d102      	bne.n	801a316 <_lseek_r+0x1e>
 801a310:	682b      	ldr	r3, [r5, #0]
 801a312:	b103      	cbz	r3, 801a316 <_lseek_r+0x1e>
 801a314:	6023      	str	r3, [r4, #0]
 801a316:	bd38      	pop	{r3, r4, r5, pc}
 801a318:	20000c1c 	.word	0x20000c1c

0801a31c <memmove>:
 801a31c:	4288      	cmp	r0, r1
 801a31e:	b510      	push	{r4, lr}
 801a320:	eb01 0402 	add.w	r4, r1, r2
 801a324:	d902      	bls.n	801a32c <memmove+0x10>
 801a326:	4284      	cmp	r4, r0
 801a328:	4623      	mov	r3, r4
 801a32a:	d807      	bhi.n	801a33c <memmove+0x20>
 801a32c:	1e43      	subs	r3, r0, #1
 801a32e:	42a1      	cmp	r1, r4
 801a330:	d008      	beq.n	801a344 <memmove+0x28>
 801a332:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a336:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a33a:	e7f8      	b.n	801a32e <memmove+0x12>
 801a33c:	4402      	add	r2, r0
 801a33e:	4601      	mov	r1, r0
 801a340:	428a      	cmp	r2, r1
 801a342:	d100      	bne.n	801a346 <memmove+0x2a>
 801a344:	bd10      	pop	{r4, pc}
 801a346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a34a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a34e:	e7f7      	b.n	801a340 <memmove+0x24>

0801a350 <__malloc_lock>:
 801a350:	4801      	ldr	r0, [pc, #4]	; (801a358 <__malloc_lock+0x8>)
 801a352:	f7fe b8be 	b.w	80184d2 <__retarget_lock_acquire_recursive>
 801a356:	bf00      	nop
 801a358:	20000c10 	.word	0x20000c10

0801a35c <__malloc_unlock>:
 801a35c:	4801      	ldr	r0, [pc, #4]	; (801a364 <__malloc_unlock+0x8>)
 801a35e:	f7fe b8b9 	b.w	80184d4 <__retarget_lock_release_recursive>
 801a362:	bf00      	nop
 801a364:	20000c10 	.word	0x20000c10

0801a368 <_realloc_r>:
 801a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a36c:	4680      	mov	r8, r0
 801a36e:	4614      	mov	r4, r2
 801a370:	460e      	mov	r6, r1
 801a372:	b921      	cbnz	r1, 801a37e <_realloc_r+0x16>
 801a374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a378:	4611      	mov	r1, r2
 801a37a:	f7fe be6f 	b.w	801905c <_malloc_r>
 801a37e:	b92a      	cbnz	r2, 801a38c <_realloc_r+0x24>
 801a380:	f7fe fe00 	bl	8018f84 <_free_r>
 801a384:	4625      	mov	r5, r4
 801a386:	4628      	mov	r0, r5
 801a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a38c:	f000 f835 	bl	801a3fa <_malloc_usable_size_r>
 801a390:	4284      	cmp	r4, r0
 801a392:	4607      	mov	r7, r0
 801a394:	d802      	bhi.n	801a39c <_realloc_r+0x34>
 801a396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a39a:	d812      	bhi.n	801a3c2 <_realloc_r+0x5a>
 801a39c:	4621      	mov	r1, r4
 801a39e:	4640      	mov	r0, r8
 801a3a0:	f7fe fe5c 	bl	801905c <_malloc_r>
 801a3a4:	4605      	mov	r5, r0
 801a3a6:	2800      	cmp	r0, #0
 801a3a8:	d0ed      	beq.n	801a386 <_realloc_r+0x1e>
 801a3aa:	42bc      	cmp	r4, r7
 801a3ac:	4622      	mov	r2, r4
 801a3ae:	4631      	mov	r1, r6
 801a3b0:	bf28      	it	cs
 801a3b2:	463a      	movcs	r2, r7
 801a3b4:	f7fa fd22 	bl	8014dfc <memcpy>
 801a3b8:	4631      	mov	r1, r6
 801a3ba:	4640      	mov	r0, r8
 801a3bc:	f7fe fde2 	bl	8018f84 <_free_r>
 801a3c0:	e7e1      	b.n	801a386 <_realloc_r+0x1e>
 801a3c2:	4635      	mov	r5, r6
 801a3c4:	e7df      	b.n	801a386 <_realloc_r+0x1e>
	...

0801a3c8 <_read_r>:
 801a3c8:	b538      	push	{r3, r4, r5, lr}
 801a3ca:	4d07      	ldr	r5, [pc, #28]	; (801a3e8 <_read_r+0x20>)
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	4608      	mov	r0, r1
 801a3d0:	4611      	mov	r1, r2
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	602a      	str	r2, [r5, #0]
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	f7f4 fdd0 	bl	800ef7c <_read>
 801a3dc:	1c43      	adds	r3, r0, #1
 801a3de:	d102      	bne.n	801a3e6 <_read_r+0x1e>
 801a3e0:	682b      	ldr	r3, [r5, #0]
 801a3e2:	b103      	cbz	r3, 801a3e6 <_read_r+0x1e>
 801a3e4:	6023      	str	r3, [r4, #0]
 801a3e6:	bd38      	pop	{r3, r4, r5, pc}
 801a3e8:	20000c1c 	.word	0x20000c1c

0801a3ec <abort>:
 801a3ec:	b508      	push	{r3, lr}
 801a3ee:	2006      	movs	r0, #6
 801a3f0:	f000 f834 	bl	801a45c <raise>
 801a3f4:	2001      	movs	r0, #1
 801a3f6:	f7f4 fdb7 	bl	800ef68 <_exit>

0801a3fa <_malloc_usable_size_r>:
 801a3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3fe:	1f18      	subs	r0, r3, #4
 801a400:	2b00      	cmp	r3, #0
 801a402:	bfbc      	itt	lt
 801a404:	580b      	ldrlt	r3, [r1, r0]
 801a406:	18c0      	addlt	r0, r0, r3
 801a408:	4770      	bx	lr

0801a40a <_raise_r>:
 801a40a:	291f      	cmp	r1, #31
 801a40c:	b538      	push	{r3, r4, r5, lr}
 801a40e:	4604      	mov	r4, r0
 801a410:	460d      	mov	r5, r1
 801a412:	d904      	bls.n	801a41e <_raise_r+0x14>
 801a414:	2316      	movs	r3, #22
 801a416:	6003      	str	r3, [r0, #0]
 801a418:	f04f 30ff 	mov.w	r0, #4294967295
 801a41c:	bd38      	pop	{r3, r4, r5, pc}
 801a41e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a420:	b112      	cbz	r2, 801a428 <_raise_r+0x1e>
 801a422:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a426:	b94b      	cbnz	r3, 801a43c <_raise_r+0x32>
 801a428:	4620      	mov	r0, r4
 801a42a:	f000 f831 	bl	801a490 <_getpid_r>
 801a42e:	462a      	mov	r2, r5
 801a430:	4601      	mov	r1, r0
 801a432:	4620      	mov	r0, r4
 801a434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a438:	f000 b818 	b.w	801a46c <_kill_r>
 801a43c:	2b01      	cmp	r3, #1
 801a43e:	d00a      	beq.n	801a456 <_raise_r+0x4c>
 801a440:	1c59      	adds	r1, r3, #1
 801a442:	d103      	bne.n	801a44c <_raise_r+0x42>
 801a444:	2316      	movs	r3, #22
 801a446:	6003      	str	r3, [r0, #0]
 801a448:	2001      	movs	r0, #1
 801a44a:	e7e7      	b.n	801a41c <_raise_r+0x12>
 801a44c:	2400      	movs	r4, #0
 801a44e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a452:	4628      	mov	r0, r5
 801a454:	4798      	blx	r3
 801a456:	2000      	movs	r0, #0
 801a458:	e7e0      	b.n	801a41c <_raise_r+0x12>
	...

0801a45c <raise>:
 801a45c:	4b02      	ldr	r3, [pc, #8]	; (801a468 <raise+0xc>)
 801a45e:	4601      	mov	r1, r0
 801a460:	6818      	ldr	r0, [r3, #0]
 801a462:	f7ff bfd2 	b.w	801a40a <_raise_r>
 801a466:	bf00      	nop
 801a468:	20000028 	.word	0x20000028

0801a46c <_kill_r>:
 801a46c:	b538      	push	{r3, r4, r5, lr}
 801a46e:	4d07      	ldr	r5, [pc, #28]	; (801a48c <_kill_r+0x20>)
 801a470:	2300      	movs	r3, #0
 801a472:	4604      	mov	r4, r0
 801a474:	4608      	mov	r0, r1
 801a476:	4611      	mov	r1, r2
 801a478:	602b      	str	r3, [r5, #0]
 801a47a:	f7f4 fd65 	bl	800ef48 <_kill>
 801a47e:	1c43      	adds	r3, r0, #1
 801a480:	d102      	bne.n	801a488 <_kill_r+0x1c>
 801a482:	682b      	ldr	r3, [r5, #0]
 801a484:	b103      	cbz	r3, 801a488 <_kill_r+0x1c>
 801a486:	6023      	str	r3, [r4, #0]
 801a488:	bd38      	pop	{r3, r4, r5, pc}
 801a48a:	bf00      	nop
 801a48c:	20000c1c 	.word	0x20000c1c

0801a490 <_getpid_r>:
 801a490:	f7f4 bd52 	b.w	800ef38 <_getpid>

0801a494 <_init>:
 801a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a496:	bf00      	nop
 801a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a49a:	bc08      	pop	{r3}
 801a49c:	469e      	mov	lr, r3
 801a49e:	4770      	bx	lr

0801a4a0 <_fini>:
 801a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4a2:	bf00      	nop
 801a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4a6:	bc08      	pop	{r3}
 801a4a8:	469e      	mov	lr, r3
 801a4aa:	4770      	bx	lr
