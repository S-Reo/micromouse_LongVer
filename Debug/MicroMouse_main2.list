
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000a330  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000310  08012330  08012330  00022330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08012640  08012640  000301dc  2**0
                  CONTENTS
  6 .ARM          00000008  08012640  08012640  00022640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08012648  08012648  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08012648  08012648  00022648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801264c  0801264c  0002264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001dc  20000000  08012650  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005d8  200001dc  0801282c  000301dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007b4  0801282c  000307b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ae57  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003d51  00000000  00000000  0004b063  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001428  00000000  00000000  0004edb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001228  00000000  00000000  000501e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00023794  00000000  00000000  00051408  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001307e  00000000  00000000  00074b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c8565  00000000  00000000  00087c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0015017f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f04  00000000  00000000  001501fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001dc 	.word	0x200001dc
 800801c:	00000000 	.word	0x00000000
 8008020:	08012318 	.word	0x08012318

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e0 	.word	0x200001e0
 800803c:	08012318 	.word	0x08012318

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Accel>:
////	距離folを速度v_turnで進む;
//}

//
void Accel(float add_distance, float explore_speed)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008dc2:	edc7 0a00 	vstr	s1, [r7]
	float additional_speed=0;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
	additional_speed = explore_speed - target_velocity[BODY];
 8008dcc:	4b32      	ldr	r3, [pc, #200]	; (8008e98 <Accel+0xe0>)
 8008dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8008dd2:	ed97 7a00 	vldr	s14, [r7]
 8008dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dda:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8008dde:	6978      	ldr	r0, [r7, #20]
 8008de0:	f7ff faea 	bl	80083b8 <__aeabi_f2d>
 8008de4:	a328      	add	r3, pc, #160	; (adr r3, 8008e88 <Accel+0xd0>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7ff fb3d 	bl	8008468 <__aeabi_dmul>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4625      	mov	r5, r4
 8008df4:	461c      	mov	r4, r3
 8008df6:	6978      	ldr	r0, [r7, #20]
 8008df8:	f7ff fade 	bl	80083b8 <__aeabi_f2d>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4620      	mov	r0, r4
 8008e02:	4629      	mov	r1, r5
 8008e04:	f7ff fb30 	bl	8008468 <__aeabi_dmul>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	4625      	mov	r5, r4
 8008e0e:	461c      	mov	r4, r3
 8008e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e18:	ee17 0a90 	vmov	r0, s15
 8008e1c:	f7ff facc 	bl	80083b8 <__aeabi_f2d>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7ff fc48 	bl	80086bc <__aeabi_ddiv>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4618      	mov	r0, r3
 8008e32:	4621      	mov	r1, r4
 8008e34:	f7ff fdf0 	bl	8008a18 <__aeabi_d2f>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	4b18      	ldr	r3, [pc, #96]	; (8008e9c <Accel+0xe4>)
 8008e3c:	601a      	str	r2, [r3, #0]

	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8008e3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e46:	ee17 0a90 	vmov	r0, s15
 8008e4a:	f7ff fab5 	bl	80083b8 <__aeabi_f2d>
 8008e4e:	a310      	add	r3, pc, #64	; (adr r3, 8008e90 <Accel+0xd8>)
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	f7ff fc32 	bl	80086bc <__aeabi_ddiv>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	4621      	mov	r1, r4
 8008e60:	f7ff fdb2 	bl	80089c8 <__aeabi_d2iz>
 8008e64:	4603      	mov	r3, r0
 8008e66:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8008e68:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <Accel+0xe8>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4413      	add	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]

	while( ( keep_pulse ) >= ( total_pulse[BODY] ) )
 8008e72:	bf00      	nop
 8008e74:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <Accel+0xe8>)
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	dafa      	bge.n	8008e74 <Accel+0xbc>
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 8008e7e:	bf00      	nop
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bdb0      	pop	{r4, r5, r7, pc}
 8008e86:	bf00      	nop
 8008e88:	d2f1a9fc 	.word	0xd2f1a9fc
 8008e8c:	3f50624d 	.word	0x3f50624d
 8008e90:	317249d5 	.word	0x317249d5
 8008e94:	3f502de0 	.word	0x3f502de0
 8008e98:	20000270 	.word	0x20000270
 8008e9c:	2000027c 	.word	0x2000027c
 8008ea0:	2000025c 	.word	0x2000025c
 8008ea4:	00000000 	.word	0x00000000

08008ea8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 8008ea8:	b5b0      	push	{r4, r5, r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	ed87 0a01 	vstr	s0, [r7, #4]
 8008eb2:	edc7 0a00 	vstr	s1, [r7]
	float down_speed=0;
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
	down_speed = target_velocity[BODY] - end_speed;
 8008ebc:	4b38      	ldr	r3, [pc, #224]	; (8008fa0 <Decel+0xf8>)
 8008ebe:	ed93 7a02 	vldr	s14, [r3, #8]
 8008ec2:	edd7 7a00 	vldr	s15, [r7]
 8008ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008eca:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8008ece:	6978      	ldr	r0, [r7, #20]
 8008ed0:	f7ff fa72 	bl	80083b8 <__aeabi_f2d>
 8008ed4:	a32e      	add	r3, pc, #184	; (adr r3, 8008f90 <Decel+0xe8>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7ff fac5 	bl	8008468 <__aeabi_dmul>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4625      	mov	r5, r4
 8008ee4:	461c      	mov	r4, r3
 8008ee6:	6978      	ldr	r0, [r7, #20]
 8008ee8:	f7ff fa66 	bl	80083b8 <__aeabi_f2d>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	f7ff fab8 	bl	8008468 <__aeabi_dmul>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	4625      	mov	r5, r4
 8008efe:	461c      	mov	r4, r3
 8008f00:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f08:	ee17 0a90 	vmov	r0, s15
 8008f0c:	f7ff fa54 	bl	80083b8 <__aeabi_f2d>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4620      	mov	r0, r4
 8008f16:	4629      	mov	r1, r5
 8008f18:	f7ff fbd0 	bl	80086bc <__aeabi_ddiv>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4618      	mov	r0, r3
 8008f22:	4621      	mov	r1, r4
 8008f24:	f7ff fd78 	bl	8008a18 <__aeabi_d2f>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	ee07 3a90 	vmov	s15, r3
 8008f2e:	eef1 7a67 	vneg.f32	s15, s15
 8008f32:	4b1c      	ldr	r3, [pc, #112]	; (8008fa4 <Decel+0xfc>)
 8008f34:	edc3 7a00 	vstr	s15, [r3]

	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8008f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f40:	ee17 0a90 	vmov	r0, s15
 8008f44:	f7ff fa38 	bl	80083b8 <__aeabi_f2d>
 8008f48:	a313      	add	r3, pc, #76	; (adr r3, 8008f98 <Decel+0xf0>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f7ff fbb5 	bl	80086bc <__aeabi_ddiv>
 8008f52:	4603      	mov	r3, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	4618      	mov	r0, r3
 8008f58:	4621      	mov	r1, r4
 8008f5a:	f7ff fd35 	bl	80089c8 <__aeabi_d2iz>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <Decel+0x100>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 8008f6c:	bf00      	nop
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <Decel+0x100>)
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	dafa      	bge.n	8008f6e <Decel+0xc6>
//		if(  ( ( keep_pulse - (target_pulse*0.1) ) ) <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
//		{
//			acceleration = 0;
//		}
	}
	target_velocity[BODY] = 0;
 8008f78:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <Decel+0xf8>)
 8008f7a:	f04f 0200 	mov.w	r2, #0
 8008f7e:	609a      	str	r2, [r3, #8]
	acceleration = 0;
 8008f80:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <Decel+0xfc>)
 8008f82:	f04f 0200 	mov.w	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
}
 8008f88:	bf00      	nop
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8008f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f94:	3f50624d 	.word	0x3f50624d
 8008f98:	317249d5 	.word	0x317249d5
 8008f9c:	3f502de0 	.word	0x3f502de0
 8008fa0:	20000270 	.word	0x20000270
 8008fa4:	2000027c 	.word	0x2000027c
 8008fa8:	2000025c 	.word	0x2000025c

08008fac <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <GetPulseDisplacement>:
//目的 : エンコーダパルスの初期値との差分を取得する(割り込み内)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : パルスの変位
//-------------------------//
int GetPulseDisplacement(int *timer_counter,  int initial_pulse)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
	//割り込みで呼び出す想定

	int pulse_displacement = *timer_counter;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
	pulse_displacement = -1* (pulse_displacement - initial_pulse);
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	60fb      	str	r3, [r7, #12]

	//次回の呼び出しのためにすぐ初期化。
	InitPulse( timer_counter, initial_pulse);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff ffe2 	bl	8008fac <InitPulse>

	return pulse_displacement;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8009004:	4a2c      	ldr	r2, [pc, #176]	; (80090b8 <GetWallDataAverage+0xc4>)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfb8      	it	lt
 8009014:	425b      	neglt	r3, r3
 8009016:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 8009018:	4927      	ldr	r1, [pc, #156]	; (80090b8 <GetWallDataAverage+0xc4>)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 8009022:	4a26      	ldr	r2, [pc, #152]	; (80090bc <GetWallDataAverage+0xc8>)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	441a      	add	r2, r3
 800902e:	4923      	ldr	r1, [pc, #140]	; (80090bc <GetWallDataAverage+0xc8>)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 8009036:	4a22      	ldr	r2, [pc, #136]	; (80090c0 <GetWallDataAverage+0xcc>)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	491f      	ldr	r1, [pc, #124]	; (80090c0 <GetWallDataAverage+0xcc>)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 8009048:	4a1d      	ldr	r2, [pc, #116]	; (80090c0 <GetWallDataAverage+0xcc>)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	429a      	cmp	r2, r3
 8009054:	d121      	bne.n	800909a <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 8009056:	4a19      	ldr	r2, [pc, #100]	; (80090bc <GetWallDataAverage+0xc8>)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009066:	4a16      	ldr	r2, [pc, #88]	; (80090c0 <GetWallDataAverage+0xcc>)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800907a:	4a12      	ldr	r2, [pc, #72]	; (80090c4 <GetWallDataAverage+0xd0>)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 8009086:	4a0d      	ldr	r2, [pc, #52]	; (80090bc <GetWallDataAverage+0xc8>)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2100      	movs	r1, #0
 800908c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 8009090:	4a0b      	ldr	r2, [pc, #44]	; (80090c0 <GetWallDataAverage+0xcc>)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2100      	movs	r1, #0
 8009096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800909a:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <GetWallDataAverage+0xd0>)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	ee07 3a90 	vmov	s15, r3
}
 80090a8:	eeb0 0a67 	vmov.f32	s0, s15
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	200001f8 	.word	0x200001f8
 80090bc:	20000208 	.word	0x20000208
 80090c0:	20000218 	.word	0x20000218
 80090c4:	20000228 	.word	0x20000228

080090c8 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80090d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80090d8:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	ee07 3a90 	vmov	s15, r3
 80090e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80090f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80090f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80090f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80090fc:	ed97 7a00 	vldr	s14, [r7]
 8009100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009104:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	ee07 3a90 	vmov	s15, r3
}
 800910e:	eeb0 0a67 	vmov.f32	s0, s15
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 8009126:	2301      	movs	r3, #1
 8009128:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800912a:	2300      	movs	r3, #0
 800912c:	60bb      	str	r3, [r7, #8]
 800912e:	e007      	b.n	8009140 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	fb02 f303 	mul.w	r3, r2, r3
 8009138:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	3301      	adds	r3, #1
 800913e:	60bb      	str	r3, [r7, #8]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	dbf3      	blt.n	8009130 <IntegerPower+0x14>
	}
	return pattern_num;
 8009148:	68fb      	ldr	r3, [r7, #12]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 8009156:	b480      	push	{r7}
 8009158:	b08b      	sub	sp, #44	; 0x2c
 800915a:	af00      	add	r7, sp, #0
 800915c:	ed87 0a03 	vstr	s0, [r7, #12]
 8009160:	edc7 0a02 	vstr	s1, [r7, #8]
 8009164:	ed87 1a01 	vstr	s2, [r7, #4]
 8009168:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800916a:	edd7 6a03 	vldr	s13, [r7, #12]
 800916e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009176:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800917a:	edd7 6a02 	vldr	s13, [r7, #8]
 800917e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009186:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800918a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800918e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009192:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	ee07 3a90 	vmov	s15, r3
 800919c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a4:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 80091ac:	2300      	movs	r3, #0
 80091ae:	623b      	str	r3, [r7, #32]
 80091b0:	e018      	b.n	80091e4 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	ee07 3a90 	vmov	s15, r3
 80091b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80091c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80091c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80091d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d8:	db01      	blt.n	80091de <GetBatteryLevel+0x88>
		{
			pattern = i;
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	3301      	adds	r3, #1
 80091e2:	623b      	str	r3, [r7, #32]
 80091e4:	6a3a      	ldr	r2, [r7, #32]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	dbe2      	blt.n	80091b2 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	372c      	adds	r7, #44	; 0x2c
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <TimeMonitor>:
#include "Motor_Driver.h"

//以下割り込みで呼ぶ関数
//このあたりの関数は、構造体変数を扱うファイルにまとめたほうがいいかもしれない。(メインのアルゴリズム、アクション)
void TimeMonitor()
{
 80091fa:	b480      	push	{r7}
 80091fc:	af00      	add	r7, sp, #0
	//いろいろな時間を測って監視する。

}
 80091fe:	bf00      	nop
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <UpdatePhisicalDataFromEnc>:

void UpdatePhisicalDataFromEnc()
{
 8009208:	b5b0      	push	{r4, r5, r7, lr}
 800920a:	af00      	add	r7, sp, #0
	pulse_displacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800920c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009210:	4857      	ldr	r0, [pc, #348]	; (8009370 <UpdatePhisicalDataFromEnc+0x168>)
 8009212:	f7ff fed9 	bl	8008fc8 <GetPulseDisplacement>
 8009216:	4602      	mov	r2, r0
 8009218:	4b56      	ldr	r3, [pc, #344]	; (8009374 <UpdatePhisicalDataFromEnc+0x16c>)
 800921a:	601a      	str	r2, [r3, #0]
	pulse_displacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800921c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009220:	4855      	ldr	r0, [pc, #340]	; (8009378 <UpdatePhisicalDataFromEnc+0x170>)
 8009222:	f7ff fed1 	bl	8008fc8 <GetPulseDisplacement>
 8009226:	4602      	mov	r2, r0
 8009228:	4b52      	ldr	r3, [pc, #328]	; (8009374 <UpdatePhisicalDataFromEnc+0x16c>)
 800922a:	605a      	str	r2, [r3, #4]

	//速度 mm/s
	current_velocity[LEFT] = ( (float)pulse_displacement[LEFT] * MM_PER_PULSE ) / T1;
 800922c:	4b51      	ldr	r3, [pc, #324]	; (8009374 <UpdatePhisicalDataFromEnc+0x16c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	ee07 3a90 	vmov	s15, r3
 8009234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009238:	ee17 0a90 	vmov	r0, s15
 800923c:	f7ff f8bc 	bl	80083b8 <__aeabi_f2d>
 8009240:	a345      	add	r3, pc, #276	; (adr r3, 8009358 <UpdatePhisicalDataFromEnc+0x150>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7ff f90f 	bl	8008468 <__aeabi_dmul>
 800924a:	4603      	mov	r3, r0
 800924c:	460c      	mov	r4, r1
 800924e:	4618      	mov	r0, r3
 8009250:	4621      	mov	r1, r4
 8009252:	a343      	add	r3, pc, #268	; (adr r3, 8009360 <UpdatePhisicalDataFromEnc+0x158>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7ff fa30 	bl	80086bc <__aeabi_ddiv>
 800925c:	4603      	mov	r3, r0
 800925e:	460c      	mov	r4, r1
 8009260:	4618      	mov	r0, r3
 8009262:	4621      	mov	r1, r4
 8009264:	f7ff fbd8 	bl	8008a18 <__aeabi_d2f>
 8009268:	4602      	mov	r2, r0
 800926a:	4b44      	ldr	r3, [pc, #272]	; (800937c <UpdatePhisicalDataFromEnc+0x174>)
 800926c:	601a      	str	r2, [r3, #0]
	current_velocity[RIGHT] = ( (float)pulse_displacement[RIGHT] * MM_PER_PULSE ) / T1;
 800926e:	4b41      	ldr	r3, [pc, #260]	; (8009374 <UpdatePhisicalDataFromEnc+0x16c>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800927a:	ee17 0a90 	vmov	r0, s15
 800927e:	f7ff f89b 	bl	80083b8 <__aeabi_f2d>
 8009282:	a335      	add	r3, pc, #212	; (adr r3, 8009358 <UpdatePhisicalDataFromEnc+0x150>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7ff f8ee 	bl	8008468 <__aeabi_dmul>
 800928c:	4603      	mov	r3, r0
 800928e:	460c      	mov	r4, r1
 8009290:	4618      	mov	r0, r3
 8009292:	4621      	mov	r1, r4
 8009294:	a332      	add	r3, pc, #200	; (adr r3, 8009360 <UpdatePhisicalDataFromEnc+0x158>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7ff fa0f 	bl	80086bc <__aeabi_ddiv>
 800929e:	4603      	mov	r3, r0
 80092a0:	460c      	mov	r4, r1
 80092a2:	4618      	mov	r0, r3
 80092a4:	4621      	mov	r1, r4
 80092a6:	f7ff fbb7 	bl	8008a18 <__aeabi_d2f>
 80092aa:	4602      	mov	r2, r0
 80092ac:	4b33      	ldr	r3, [pc, #204]	; (800937c <UpdatePhisicalDataFromEnc+0x174>)
 80092ae:	605a      	str	r2, [r3, #4]

	//移動量 mm/msを積算
	total_pulse[LEFT] += pulse_displacement[LEFT];
 80092b0:	4b33      	ldr	r3, [pc, #204]	; (8009380 <UpdatePhisicalDataFromEnc+0x178>)
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	4b2f      	ldr	r3, [pc, #188]	; (8009374 <UpdatePhisicalDataFromEnc+0x16c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4413      	add	r3, r2
 80092ba:	4a31      	ldr	r2, [pc, #196]	; (8009380 <UpdatePhisicalDataFromEnc+0x178>)
 80092bc:	6013      	str	r3, [r2, #0]
	total_pulse[RIGHT] += pulse_displacement[RIGHT];
 80092be:	4b30      	ldr	r3, [pc, #192]	; (8009380 <UpdatePhisicalDataFromEnc+0x178>)
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	4b2c      	ldr	r3, [pc, #176]	; (8009374 <UpdatePhisicalDataFromEnc+0x16c>)
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	4413      	add	r3, r2
 80092c8:	4a2d      	ldr	r2, [pc, #180]	; (8009380 <UpdatePhisicalDataFromEnc+0x178>)
 80092ca:	6053      	str	r3, [r2, #4]
	total_pulse[BODY] = total_pulse[LEFT]+total_pulse[RIGHT];
 80092cc:	4b2c      	ldr	r3, [pc, #176]	; (8009380 <UpdatePhisicalDataFromEnc+0x178>)
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	4b2b      	ldr	r3, [pc, #172]	; (8009380 <UpdatePhisicalDataFromEnc+0x178>)
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	4413      	add	r3, r2
 80092d6:	4a2a      	ldr	r2, [pc, #168]	; (8009380 <UpdatePhisicalDataFromEnc+0x178>)
 80092d8:	6093      	str	r3, [r2, #8]
	//角速度 rad/s
	angular_v = ( current_velocity[LEFT] - current_velocity[RIGHT] ) / TREAD_WIDTH;
 80092da:	4b28      	ldr	r3, [pc, #160]	; (800937c <UpdatePhisicalDataFromEnc+0x174>)
 80092dc:	ed93 7a00 	vldr	s14, [r3]
 80092e0:	4b26      	ldr	r3, [pc, #152]	; (800937c <UpdatePhisicalDataFromEnc+0x174>)
 80092e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80092e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092ea:	ee17 0a90 	vmov	r0, s15
 80092ee:	f7ff f863 	bl	80083b8 <__aeabi_f2d>
 80092f2:	a31d      	add	r3, pc, #116	; (adr r3, 8009368 <UpdatePhisicalDataFromEnc+0x160>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f7ff f9e0 	bl	80086bc <__aeabi_ddiv>
 80092fc:	4603      	mov	r3, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	4618      	mov	r0, r3
 8009302:	4621      	mov	r1, r4
 8009304:	f7ff fb88 	bl	8008a18 <__aeabi_d2f>
 8009308:	4602      	mov	r2, r0
 800930a:	4b1e      	ldr	r3, [pc, #120]	; (8009384 <UpdatePhisicalDataFromEnc+0x17c>)
 800930c:	601a      	str	r2, [r3, #0]

	//角度 rad/msを積算
	angle += angular_v * T1;
 800930e:	4b1e      	ldr	r3, [pc, #120]	; (8009388 <UpdatePhisicalDataFromEnc+0x180>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff f850 	bl	80083b8 <__aeabi_f2d>
 8009318:	4604      	mov	r4, r0
 800931a:	460d      	mov	r5, r1
 800931c:	4b19      	ldr	r3, [pc, #100]	; (8009384 <UpdatePhisicalDataFromEnc+0x17c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff f849 	bl	80083b8 <__aeabi_f2d>
 8009326:	a30e      	add	r3, pc, #56	; (adr r3, 8009360 <UpdatePhisicalDataFromEnc+0x158>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	f7ff f89c 	bl	8008468 <__aeabi_dmul>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f7fe fee0 	bl	80080fc <__adddf3>
 800933c:	4603      	mov	r3, r0
 800933e:	460c      	mov	r4, r1
 8009340:	4618      	mov	r0, r3
 8009342:	4621      	mov	r1, r4
 8009344:	f7ff fb68 	bl	8008a18 <__aeabi_d2f>
 8009348:	4602      	mov	r2, r0
 800934a:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <UpdatePhisicalDataFromEnc+0x180>)
 800934c:	601a      	str	r2, [r3, #0]
	//ここまでがエンコーダからのUpdate
}
 800934e:	bf00      	nop
 8009350:	bdb0      	pop	{r4, r5, r7, pc}
 8009352:	bf00      	nop
 8009354:	f3af 8000 	nop.w
 8009358:	317249d5 	.word	0x317249d5
 800935c:	3f502de0 	.word	0x3f502de0
 8009360:	d2f1a9fc 	.word	0xd2f1a9fc
 8009364:	3f50624d 	.word	0x3f50624d
 8009368:	33333333 	.word	0x33333333
 800936c:	40423333 	.word	0x40423333
 8009370:	40000424 	.word	0x40000424
 8009374:	20000248 	.word	0x20000248
 8009378:	40000824 	.word	0x40000824
 800937c:	20000250 	.word	0x20000250
 8009380:	2000025c 	.word	0x2000025c
 8009384:	20000268 	.word	0x20000268
 8009388:	2000026c 	.word	0x2000026c
 800938c:	00000000 	.word	0x00000000

08009390 <ControlMotor>:
void ControlMotor()
{
 8009390:	b5b0      	push	{r4, r5, r7, lr}
 8009392:	af00      	add	r7, sp, #0
	//ここで更新する変数をグローバルに、もしくは構造体で書ければ、あとはメインのアルゴリズムを記述するだけ？

	UpdatePhisicalDataFromEnc();
 8009394:	f7ff ff38 	bl	8009208 <UpdatePhisicalDataFromEnc>

	//ここからは目標値と現在値を用いた制御。

	//タイヤ目標値計算
	target_velocity[BODY] += acceleration;
 8009398:	4b55      	ldr	r3, [pc, #340]	; (80094f0 <ControlMotor+0x160>)
 800939a:	ed93 7a02 	vldr	s14, [r3, #8]
 800939e:	4b55      	ldr	r3, [pc, #340]	; (80094f4 <ControlMotor+0x164>)
 80093a0:	edd3 7a00 	vldr	s15, [r3]
 80093a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093a8:	4b51      	ldr	r3, [pc, #324]	; (80094f0 <ControlMotor+0x160>)
 80093aa:	edc3 7a02 	vstr	s15, [r3, #8]
	target_angular_v += angular_acceleration;
 80093ae:	4b52      	ldr	r3, [pc, #328]	; (80094f8 <ControlMotor+0x168>)
 80093b0:	ed93 7a00 	vldr	s14, [r3]
 80093b4:	4b51      	ldr	r3, [pc, #324]	; (80094fc <ControlMotor+0x16c>)
 80093b6:	edd3 7a00 	vldr	s15, [r3]
 80093ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093be:	4b4e      	ldr	r3, [pc, #312]	; (80094f8 <ControlMotor+0x168>)
 80093c0:	edc3 7a00 	vstr	s15, [r3]


	target_velocity[RIGHT] = ( target_velocity[BODY]*2 - target_angular_v * TREAD_WIDTH )/2;
 80093c4:	4b4a      	ldr	r3, [pc, #296]	; (80094f0 <ControlMotor+0x160>)
 80093c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80093ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80093ce:	ee17 0a90 	vmov	r0, s15
 80093d2:	f7fe fff1 	bl	80083b8 <__aeabi_f2d>
 80093d6:	4604      	mov	r4, r0
 80093d8:	460d      	mov	r5, r1
 80093da:	4b47      	ldr	r3, [pc, #284]	; (80094f8 <ControlMotor+0x168>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe ffea 	bl	80083b8 <__aeabi_f2d>
 80093e4:	a340      	add	r3, pc, #256	; (adr r3, 80094e8 <ControlMotor+0x158>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	f7ff f83d 	bl	8008468 <__aeabi_dmul>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7fe fe7f 	bl	80080f8 <__aeabi_dsub>
 80093fa:	4603      	mov	r3, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	4618      	mov	r0, r3
 8009400:	4621      	mov	r1, r4
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800940a:	f7ff f957 	bl	80086bc <__aeabi_ddiv>
 800940e:	4603      	mov	r3, r0
 8009410:	460c      	mov	r4, r1
 8009412:	4618      	mov	r0, r3
 8009414:	4621      	mov	r1, r4
 8009416:	f7ff faff 	bl	8008a18 <__aeabi_d2f>
 800941a:	4602      	mov	r2, r0
 800941c:	4b34      	ldr	r3, [pc, #208]	; (80094f0 <ControlMotor+0x160>)
 800941e:	605a      	str	r2, [r3, #4]
	target_velocity[LEFT] = ( target_angular_v *TREAD_WIDTH ) + target_velocity[RIGHT];
 8009420:	4b35      	ldr	r3, [pc, #212]	; (80094f8 <ControlMotor+0x168>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe ffc7 	bl	80083b8 <__aeabi_f2d>
 800942a:	a32f      	add	r3, pc, #188	; (adr r3, 80094e8 <ControlMotor+0x158>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f7ff f81a 	bl	8008468 <__aeabi_dmul>
 8009434:	4603      	mov	r3, r0
 8009436:	460c      	mov	r4, r1
 8009438:	4625      	mov	r5, r4
 800943a:	461c      	mov	r4, r3
 800943c:	4b2c      	ldr	r3, [pc, #176]	; (80094f0 <ControlMotor+0x160>)
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe ffb9 	bl	80083b8 <__aeabi_f2d>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4620      	mov	r0, r4
 800944c:	4629      	mov	r1, r5
 800944e:	f7fe fe55 	bl	80080fc <__adddf3>
 8009452:	4603      	mov	r3, r0
 8009454:	460c      	mov	r4, r1
 8009456:	4618      	mov	r0, r3
 8009458:	4621      	mov	r1, r4
 800945a:	f7ff fadd 	bl	8008a18 <__aeabi_d2f>
 800945e:	4602      	mov	r2, r0
 8009460:	4b23      	ldr	r3, [pc, #140]	; (80094f0 <ControlMotor+0x160>)
 8009462:	601a      	str	r2, [r3, #0]

	//制御出力値生成
	//PIDControl(int n, int T, float target, float current, int *output);
	velocity_left_out = PIDControl( L_VELO, T1, target_velocity[LEFT], current_velocity[LEFT]);
 8009464:	4b22      	ldr	r3, [pc, #136]	; (80094f0 <ControlMotor+0x160>)
 8009466:	edd3 7a00 	vldr	s15, [r3]
 800946a:	4b25      	ldr	r3, [pc, #148]	; (8009500 <ControlMotor+0x170>)
 800946c:	ed93 7a00 	vldr	s14, [r3]
 8009470:	eeb0 1a47 	vmov.f32	s2, s14
 8009474:	eef0 0a67 	vmov.f32	s1, s15
 8009478:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8009504 <ControlMotor+0x174>
 800947c:	2000      	movs	r0, #0
 800947e:	f000 fabf 	bl	8009a00 <PIDControl>
 8009482:	4602      	mov	r2, r0
 8009484:	4b20      	ldr	r3, [pc, #128]	; (8009508 <ControlMotor+0x178>)
 8009486:	601a      	str	r2, [r3, #0]
	velocity_right_out = PIDControl( R_VELO, T1, target_velocity[RIGHT], current_velocity[RIGHT]);
 8009488:	4b19      	ldr	r3, [pc, #100]	; (80094f0 <ControlMotor+0x160>)
 800948a:	edd3 7a01 	vldr	s15, [r3, #4]
 800948e:	4b1c      	ldr	r3, [pc, #112]	; (8009500 <ControlMotor+0x170>)
 8009490:	ed93 7a01 	vldr	s14, [r3, #4]
 8009494:	eeb0 1a47 	vmov.f32	s2, s14
 8009498:	eef0 0a67 	vmov.f32	s1, s15
 800949c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009504 <ControlMotor+0x174>
 80094a0:	2001      	movs	r0, #1
 80094a2:	f000 faad 	bl	8009a00 <PIDControl>
 80094a6:	4602      	mov	r2, r0
 80094a8:	4b18      	ldr	r3, [pc, #96]	; (800950c <ControlMotor+0x17c>)
 80094aa:	601a      	str	r2, [r3, #0]
	//PIDControl( B_VELO, T1, target, current, &left);
	//PIDControl( D_WALL, T1, photo[SL], photo[SR], &wall_right_out);

	wall_left_out = -wall_right_out;
 80094ac:	4b18      	ldr	r3, [pc, #96]	; (8009510 <ControlMotor+0x180>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	425b      	negs	r3, r3
 80094b2:	4a18      	ldr	r2, [pc, #96]	; (8009514 <ControlMotor+0x184>)
 80094b4:	6013      	str	r3, [r2, #0]

	L_motor = wall_left_out + velocity_left_out;
 80094b6:	4b17      	ldr	r3, [pc, #92]	; (8009514 <ControlMotor+0x184>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	4b13      	ldr	r3, [pc, #76]	; (8009508 <ControlMotor+0x178>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4413      	add	r3, r2
 80094c0:	4a15      	ldr	r2, [pc, #84]	; (8009518 <ControlMotor+0x188>)
 80094c2:	6013      	str	r3, [r2, #0]
	R_motor = wall_right_out + velocity_right_out;
 80094c4:	4b12      	ldr	r3, [pc, #72]	; (8009510 <ControlMotor+0x180>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b10      	ldr	r3, [pc, #64]	; (800950c <ControlMotor+0x17c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4413      	add	r3, r2
 80094ce:	4a13      	ldr	r2, [pc, #76]	; (800951c <ControlMotor+0x18c>)
 80094d0:	6013      	str	r3, [r2, #0]

	//モータに出力
	Motor_Switch( L_motor, R_motor );
 80094d2:	4b11      	ldr	r3, [pc, #68]	; (8009518 <ControlMotor+0x188>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b11      	ldr	r3, [pc, #68]	; (800951c <ControlMotor+0x18c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f001 ff6f 	bl	800b3c0 <Motor_Switch>
//	int left = 300, right = 300;
//	Motor_Switch( left, right );

}
 80094e2:	bf00      	nop
 80094e4:	bdb0      	pop	{r4, r5, r7, pc}
 80094e6:	bf00      	nop
 80094e8:	33333333 	.word	0x33333333
 80094ec:	40423333 	.word	0x40423333
 80094f0:	20000270 	.word	0x20000270
 80094f4:	2000027c 	.word	0x2000027c
 80094f8:	20000280 	.word	0x20000280
 80094fc:	20000284 	.word	0x20000284
 8009500:	20000250 	.word	0x20000250
 8009504:	3a83126f 	.word	0x3a83126f
 8009508:	20000288 	.word	0x20000288
 800950c:	2000028c 	.word	0x2000028c
 8009510:	20000290 	.word	0x20000290
 8009514:	20000294 	.word	0x20000294
 8009518:	20000298 	.word	0x20000298
 800951c:	2000029c 	.word	0x2000029c

08009520 <UpdatePhotoData>:

void UpdatePhotoData()
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
	photo[FL] = GetWallDataAverage(10, adc1[0], FL);
 8009524:	4b18      	ldr	r3, [pc, #96]	; (8009588 <UpdatePhotoData+0x68>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2200      	movs	r2, #0
 800952a:	4619      	mov	r1, r3
 800952c:	200a      	movs	r0, #10
 800952e:	f7ff fd61 	bl	8008ff4 <GetWallDataAverage>
 8009532:	eef0 7a40 	vmov.f32	s15, s0
 8009536:	4b15      	ldr	r3, [pc, #84]	; (800958c <UpdatePhotoData+0x6c>)
 8009538:	edc3 7a00 	vstr	s15, [r3]
	photo[SR] = GetWallDataAverage(10, adc1[1], SR);
 800953c:	4b12      	ldr	r3, [pc, #72]	; (8009588 <UpdatePhotoData+0x68>)
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	4619      	mov	r1, r3
 8009544:	200a      	movs	r0, #10
 8009546:	f7ff fd55 	bl	8008ff4 <GetWallDataAverage>
 800954a:	eef0 7a40 	vmov.f32	s15, s0
 800954e:	4b0f      	ldr	r3, [pc, #60]	; (800958c <UpdatePhotoData+0x6c>)
 8009550:	edc3 7a01 	vstr	s15, [r3, #4]
	photo[SL] = GetWallDataAverage(10, adc2[0], SL);
 8009554:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <UpdatePhotoData+0x70>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2202      	movs	r2, #2
 800955a:	4619      	mov	r1, r3
 800955c:	200a      	movs	r0, #10
 800955e:	f7ff fd49 	bl	8008ff4 <GetWallDataAverage>
 8009562:	eef0 7a40 	vmov.f32	s15, s0
 8009566:	4b09      	ldr	r3, [pc, #36]	; (800958c <UpdatePhotoData+0x6c>)
 8009568:	edc3 7a02 	vstr	s15, [r3, #8]
	photo[FR] = GetWallDataAverage(10, adc2[1], FR);
 800956c:	4b08      	ldr	r3, [pc, #32]	; (8009590 <UpdatePhotoData+0x70>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	2203      	movs	r2, #3
 8009572:	4619      	mov	r1, r3
 8009574:	200a      	movs	r0, #10
 8009576:	f7ff fd3d 	bl	8008ff4 <GetWallDataAverage>
 800957a:	eef0 7a40 	vmov.f32	s15, s0
 800957e:	4b03      	ldr	r3, [pc, #12]	; (800958c <UpdatePhotoData+0x6c>)
 8009580:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8009584:	bf00      	nop
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000404 	.word	0x20000404
 800958c:	20000238 	.word	0x20000238
 8009590:	20000410 	.word	0x20000410

08009594 <HAL_TIM_PeriodElapsedCallback>:


//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a08      	ldr	r2, [pc, #32]	; (80095c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d103      	bne.n	80095ac <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TimeMonitor();
 80095a4:	f7ff fe29 	bl	80091fa <TimeMonitor>
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		//出力値をモータ出力用関数に渡す
		ControlMotor();
 80095a8:	f7ff fef2 	bl	8009390 <ControlMotor>
	}

	if( htim == &htim8)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a05      	ldr	r2, [pc, #20]	; (80095c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d101      	bne.n	80095b8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		//壁センサデータの更新だけ
		UpdatePhotoData();
 80095b4:	f7ff ffb4 	bl	8009520 <UpdatePhotoData>

	}
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	200006a8 	.word	0x200006a8
 80095c4:	20000420 	.word	0x20000420

080095c8 <WritingFree>:
#include "UI.h"
#include "Action.h"


void WritingFree()
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0

	//好きなようにいじるモード。テスト場。


	//ペリフェラルの動作開始
	Motor_PWM_Start();
 80095cc:	f001 fede 	bl	800b38c <Motor_PWM_Start>
	EncoderStart();
 80095d0:	f001 fde2 	bl	800b198 <EncoderStart>
	EmitterON();
 80095d4:	f001 fe00 	bl	800b1d8 <EmitterON>
	ADCStart();
 80095d8:	f001 fda6 	bl	800b128 <ADCStart>

	PIDReset(L_VELO);
 80095dc:	2000      	movs	r0, #0
 80095de:	f000 f8dd 	bl	800979c <PIDReset>
	PIDReset(R_VELO);
 80095e2:	2001      	movs	r0, #1
 80095e4:	f000 f8da 	bl	800979c <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 80095e8:	2101      	movs	r1, #1
 80095ea:	2000      	movs	r0, #0
 80095ec:	f000 f8c0 	bl	8009770 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 80095f0:	2101      	movs	r1, #1
 80095f2:	2001      	movs	r0, #1
 80095f4:	f000 f8bc 	bl	8009770 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 80095f8:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8009680 <WritingFree+0xb8>
 80095fc:	eddf 0a21 	vldr	s1, [pc, #132]	; 8009684 <WritingFree+0xbc>
 8009600:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8009688 <WritingFree+0xc0>
 8009604:	2000      	movs	r0, #0
 8009606:	f000 f887 	bl	8009718 <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 800960a:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8009680 <WritingFree+0xb8>
 800960e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8009684 <WritingFree+0xbc>
 8009612:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8009688 <WritingFree+0xc0>
 8009616:	2001      	movs	r0, #1
 8009618:	f000 f87e 	bl	8009718 <PIDSetGain>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800961c:	481b      	ldr	r0, [pc, #108]	; (800968c <WritingFree+0xc4>)
 800961e:	f004 faae 	bl	800db7e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8009622:	481b      	ldr	r0, [pc, #108]	; (8009690 <WritingFree+0xc8>)
 8009624:	f004 faab 	bl	800db7e <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 8009628:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <WritingFree+0xcc>)
 800962a:	f04f 0200 	mov.w	r2, #0
 800962e:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 8009630:	4b19      	ldr	r3, [pc, #100]	; (8009698 <WritingFree+0xd0>)
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 8009638:	4b18      	ldr	r3, [pc, #96]	; (800969c <WritingFree+0xd4>)
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 8009640:	4b17      	ldr	r3, [pc, #92]	; (80096a0 <WritingFree+0xd8>)
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 8009648:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <WritingFree+0xdc>)
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 800964e:	4b15      	ldr	r3, [pc, #84]	; (80096a4 <WritingFree+0xdc>)
 8009650:	2200      	movs	r2, #0
 8009652:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 8009654:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <WritingFree+0xdc>)
 8009656:	2200      	movs	r2, #0
 8009658:	609a      	str	r2, [r3, #8]
	PIDReset(L_VELO);
 800965a:	2000      	movs	r0, #0
 800965c:	f000 f89e 	bl	800979c <PIDReset>
	PIDReset(R_VELO);
 8009660:	2001      	movs	r0, #1
 8009662:	f000 f89b 	bl	800979c <PIDReset>


	//GoStraight( TRUE, 300);
	Accel(45, 45);
 8009666:	eddf 0a10 	vldr	s1, [pc, #64]	; 80096a8 <WritingFree+0xe0>
 800966a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80096a8 <WritingFree+0xe0>
 800966e:	f7ff fba3 	bl	8008db8 <Accel>
	//GoStraight( TRUE, 90);
	Decel(45, 0);
 8009672:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80096ac <WritingFree+0xe4>
 8009676:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80096a8 <WritingFree+0xe0>
 800967a:	f7ff fc15 	bl	8008ea8 <Decel>
	while(1)
 800967e:	e7fe      	b.n	800967e <WritingFree+0xb6>
 8009680:	3bc45a38 	.word	0x3bc45a38
 8009684:	420617c2 	.word	0x420617c2
 8009688:	3f98d845 	.word	0x3f98d845
 800968c:	200006a8 	.word	0x200006a8
 8009690:	20000420 	.word	0x20000420
 8009694:	20000270 	.word	0x20000270
 8009698:	20000280 	.word	0x20000280
 800969c:	2000027c 	.word	0x2000027c
 80096a0:	20000284 	.word	0x20000284
 80096a4:	2000025c 	.word	0x2000025c
 80096a8:	42340000 	.word	0x42340000
 80096ac:	00000000 	.word	0x00000000

080096b0 <Explore>:


}

void Explore()
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	//ペリフェラルの動作開始
	Motor_PWM_Start();
 80096b6:	f001 fe69 	bl	800b38c <Motor_PWM_Start>
	EncoderStart();
 80096ba:	f001 fd6d 	bl	800b198 <EncoderStart>
	EmitterON();
 80096be:	f001 fd8b 	bl	800b1d8 <EmitterON>
	ADCStart();
 80096c2:	f001 fd31 	bl	800b128 <ADCStart>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 80096c6:	4811      	ldr	r0, [pc, #68]	; (800970c <Explore+0x5c>)
 80096c8:	f004 fa59 	bl	800db7e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80096cc:	4810      	ldr	r0, [pc, #64]	; (8009710 <Explore+0x60>)
 80096ce:	f004 fa56 	bl	800db7e <HAL_TIM_Base_Start_IT>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 80096d2:	2101      	movs	r1, #1
 80096d4:	2000      	movs	r0, #0
 80096d6:	f000 f84b 	bl	8009770 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 80096da:	2101      	movs	r1, #1
 80096dc:	2001      	movs	r0, #1
 80096de:	f000 f847 	bl	8009770 <PIDChangeFlag>
	//ここからはソフト的な準備


	//迷路とステータスの準備
	//方角と座標の初期化。
	direction my_direction = north;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
	uint8_t x=0,y=0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73bb      	strb	r3, [r7, #14]
 80096ea:	2300      	movs	r3, #0
 80096ec:	737b      	strb	r3, [r7, #13]
	//時間用の処理の初期化。
	int timer = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60bb      	str	r3, [r7, #8]
	//エンコーダ移動量の初期化。
	total_pulse[0] = 0;
 80096f2:	4b08      	ldr	r3, [pc, #32]	; (8009714 <Explore+0x64>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]
	total_pulse[1] = 0;
 80096f8:	4b06      	ldr	r3, [pc, #24]	; (8009714 <Explore+0x64>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	605a      	str	r2, [r3, #4]
	total_pulse[2] = 0;
 80096fe:	4b05      	ldr	r3, [pc, #20]	; (8009714 <Explore+0x64>)
 8009700:	2200      	movs	r2, #0
 8009702:	609a      	str	r2, [r3, #8]
	//スタート時のアクションに設定
	char action_type = 'S';
 8009704:	2353      	movs	r3, #83	; 0x53
 8009706:	71fb      	strb	r3, [r7, #7]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	while(1)
 8009708:	e7fe      	b.n	8009708 <Explore+0x58>
 800970a:	bf00      	nop
 800970c:	200006a8 	.word	0x200006a8
 8009710:	20000420 	.word	0x20000420
 8009714:	2000025c 	.word	0x2000025c

08009718 <PIDSetGain>:
//motor_control *p;
//control angular_velocity[1] = {0};
//control distance_wall[ WALL_SENSOR_NUM] = {0};

void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	ed87 0a02 	vstr	s0, [r7, #8]
 8009724:	edc7 0a01 	vstr	s1, [r7, #4]
 8009728:	ed87 1a00 	vstr	s2, [r7]
	pid[n].KP = kp;
 800972c:	4a0f      	ldr	r2, [pc, #60]	; (800976c <PIDSetGain+0x54>)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	212c      	movs	r1, #44	; 0x2c
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	601a      	str	r2, [r3, #0]
	pid[n].KI = ki;
 800973c:	4a0b      	ldr	r2, [pc, #44]	; (800976c <PIDSetGain+0x54>)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	212c      	movs	r1, #44	; 0x2c
 8009742:	fb01 f303 	mul.w	r3, r1, r3
 8009746:	4413      	add	r3, r2
 8009748:	3304      	adds	r3, #4
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	601a      	str	r2, [r3, #0]
	pid[n].KD = kd;
 800974e:	4a07      	ldr	r2, [pc, #28]	; (800976c <PIDSetGain+0x54>)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	212c      	movs	r1, #44	; 0x2c
 8009754:	fb01 f303 	mul.w	r3, r1, r3
 8009758:	4413      	add	r3, r2
 800975a:	3308      	adds	r3, #8
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	601a      	str	r2, [r3, #0]
//
//	p = *pid[n];
//	p->KP;
}
 8009760:	bf00      	nop
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	200002a0 	.word	0x200002a0

08009770 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
	pid[n].flag = on_or_off;
 800977a:	4a07      	ldr	r2, [pc, #28]	; (8009798 <PIDChangeFlag+0x28>)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	212c      	movs	r1, #44	; 0x2c
 8009780:	fb01 f303 	mul.w	r3, r1, r3
 8009784:	4413      	add	r3, r2
 8009786:	3328      	adds	r3, #40	; 0x28
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	601a      	str	r2, [r3, #0]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	200002a0 	.word	0x200002a0

0800979c <PIDReset>:
int PIDGetFlag(int n)
{
	return pid[n].flag;
}
void PIDReset(int n)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	pid[n].e = 0;
 80097a4:	4a1b      	ldr	r2, [pc, #108]	; (8009814 <PIDReset+0x78>)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	212c      	movs	r1, #44	; 0x2c
 80097aa:	fb01 f303 	mul.w	r3, r1, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	330c      	adds	r3, #12
 80097b2:	f04f 0200 	mov.w	r2, #0
 80097b6:	601a      	str	r2, [r3, #0]
	pid[n].ei = 0;
 80097b8:	4a16      	ldr	r2, [pc, #88]	; (8009814 <PIDReset+0x78>)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	212c      	movs	r1, #44	; 0x2c
 80097be:	fb01 f303 	mul.w	r3, r1, r3
 80097c2:	4413      	add	r3, r2
 80097c4:	3310      	adds	r3, #16
 80097c6:	f04f 0200 	mov.w	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
	pid[n].ed = 0;
 80097cc:	4a11      	ldr	r2, [pc, #68]	; (8009814 <PIDReset+0x78>)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	212c      	movs	r1, #44	; 0x2c
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	3314      	adds	r3, #20
 80097da:	f04f 0200 	mov.w	r2, #0
 80097de:	601a      	str	r2, [r3, #0]
	pid[n].elast = 0;
 80097e0:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <PIDReset+0x78>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	212c      	movs	r1, #44	; 0x2c
 80097e6:	fb01 f303 	mul.w	r3, r1, r3
 80097ea:	4413      	add	r3, r2
 80097ec:	3318      	adds	r3, #24
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	601a      	str	r2, [r3, #0]
	pid[n].out = 0;
 80097f4:	4a07      	ldr	r2, [pc, #28]	; (8009814 <PIDReset+0x78>)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	212c      	movs	r1, #44	; 0x2c
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	4413      	add	r3, r2
 8009800:	3324      	adds	r3, #36	; 0x24
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
}
 8009806:	bf00      	nop
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	200002a0 	.word	0x200002a0

08009818 <PIDCalculate>:

void PIDCalculate(int n, float T)//, float target, float current, int flag
{
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	ed87 0a00 	vstr	s0, [r7]
	pid[n].e = pid[n].target - pid[n].current;
 8009824:	4a64      	ldr	r2, [pc, #400]	; (80099b8 <PIDCalculate+0x1a0>)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	212c      	movs	r1, #44	; 0x2c
 800982a:	fb01 f303 	mul.w	r3, r1, r3
 800982e:	4413      	add	r3, r2
 8009830:	3320      	adds	r3, #32
 8009832:	ed93 7a00 	vldr	s14, [r3]
 8009836:	4a60      	ldr	r2, [pc, #384]	; (80099b8 <PIDCalculate+0x1a0>)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	212c      	movs	r1, #44	; 0x2c
 800983c:	fb01 f303 	mul.w	r3, r1, r3
 8009840:	4413      	add	r3, r2
 8009842:	331c      	adds	r3, #28
 8009844:	edd3 7a00 	vldr	s15, [r3]
 8009848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800984c:	4a5a      	ldr	r2, [pc, #360]	; (80099b8 <PIDCalculate+0x1a0>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	212c      	movs	r1, #44	; 0x2c
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	4413      	add	r3, r2
 8009858:	330c      	adds	r3, #12
 800985a:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ei += pid[n].e * T;
 800985e:	4a56      	ldr	r2, [pc, #344]	; (80099b8 <PIDCalculate+0x1a0>)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	212c      	movs	r1, #44	; 0x2c
 8009864:	fb01 f303 	mul.w	r3, r1, r3
 8009868:	4413      	add	r3, r2
 800986a:	3310      	adds	r3, #16
 800986c:	ed93 7a00 	vldr	s14, [r3]
 8009870:	4a51      	ldr	r2, [pc, #324]	; (80099b8 <PIDCalculate+0x1a0>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	212c      	movs	r1, #44	; 0x2c
 8009876:	fb01 f303 	mul.w	r3, r1, r3
 800987a:	4413      	add	r3, r2
 800987c:	330c      	adds	r3, #12
 800987e:	edd3 6a00 	vldr	s13, [r3]
 8009882:	edd7 7a00 	vldr	s15, [r7]
 8009886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800988a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800988e:	4a4a      	ldr	r2, [pc, #296]	; (80099b8 <PIDCalculate+0x1a0>)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	212c      	movs	r1, #44	; 0x2c
 8009894:	fb01 f303 	mul.w	r3, r1, r3
 8009898:	4413      	add	r3, r2
 800989a:	3310      	adds	r3, #16
 800989c:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ed = ( pid[n].e - pid[n].elast ) / T;
 80098a0:	4a45      	ldr	r2, [pc, #276]	; (80099b8 <PIDCalculate+0x1a0>)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	212c      	movs	r1, #44	; 0x2c
 80098a6:	fb01 f303 	mul.w	r3, r1, r3
 80098aa:	4413      	add	r3, r2
 80098ac:	330c      	adds	r3, #12
 80098ae:	ed93 7a00 	vldr	s14, [r3]
 80098b2:	4a41      	ldr	r2, [pc, #260]	; (80099b8 <PIDCalculate+0x1a0>)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	212c      	movs	r1, #44	; 0x2c
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	3318      	adds	r3, #24
 80098c0:	edd3 7a00 	vldr	s15, [r3]
 80098c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80098c8:	ed97 7a00 	vldr	s14, [r7]
 80098cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d0:	4a39      	ldr	r2, [pc, #228]	; (80099b8 <PIDCalculate+0x1a0>)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	212c      	movs	r1, #44	; 0x2c
 80098d6:	fb01 f303 	mul.w	r3, r1, r3
 80098da:	4413      	add	r3, r2
 80098dc:	3314      	adds	r3, #20
 80098de:	edc3 7a00 	vstr	s15, [r3]
	pid[n].elast = pid[n].e;
 80098e2:	4a35      	ldr	r2, [pc, #212]	; (80099b8 <PIDCalculate+0x1a0>)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	212c      	movs	r1, #44	; 0x2c
 80098e8:	fb01 f303 	mul.w	r3, r1, r3
 80098ec:	4413      	add	r3, r2
 80098ee:	330c      	adds	r3, #12
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	4931      	ldr	r1, [pc, #196]	; (80099b8 <PIDCalculate+0x1a0>)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	202c      	movs	r0, #44	; 0x2c
 80098f8:	fb00 f303 	mul.w	r3, r0, r3
 80098fc:	440b      	add	r3, r1
 80098fe:	3318      	adds	r3, #24
 8009900:	601a      	str	r2, [r3, #0]
	pid[n].out = round(pid[n].KP*pid[n].e + pid[n].KI*pid[n].ei + pid[n].KD*pid[n].ed);
 8009902:	4a2d      	ldr	r2, [pc, #180]	; (80099b8 <PIDCalculate+0x1a0>)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	212c      	movs	r1, #44	; 0x2c
 8009908:	fb01 f303 	mul.w	r3, r1, r3
 800990c:	4413      	add	r3, r2
 800990e:	ed93 7a00 	vldr	s14, [r3]
 8009912:	4a29      	ldr	r2, [pc, #164]	; (80099b8 <PIDCalculate+0x1a0>)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	212c      	movs	r1, #44	; 0x2c
 8009918:	fb01 f303 	mul.w	r3, r1, r3
 800991c:	4413      	add	r3, r2
 800991e:	330c      	adds	r3, #12
 8009920:	edd3 7a00 	vldr	s15, [r3]
 8009924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009928:	4a23      	ldr	r2, [pc, #140]	; (80099b8 <PIDCalculate+0x1a0>)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	212c      	movs	r1, #44	; 0x2c
 800992e:	fb01 f303 	mul.w	r3, r1, r3
 8009932:	4413      	add	r3, r2
 8009934:	3304      	adds	r3, #4
 8009936:	edd3 6a00 	vldr	s13, [r3]
 800993a:	4a1f      	ldr	r2, [pc, #124]	; (80099b8 <PIDCalculate+0x1a0>)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	212c      	movs	r1, #44	; 0x2c
 8009940:	fb01 f303 	mul.w	r3, r1, r3
 8009944:	4413      	add	r3, r2
 8009946:	3310      	adds	r3, #16
 8009948:	edd3 7a00 	vldr	s15, [r3]
 800994c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009954:	4a18      	ldr	r2, [pc, #96]	; (80099b8 <PIDCalculate+0x1a0>)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	212c      	movs	r1, #44	; 0x2c
 800995a:	fb01 f303 	mul.w	r3, r1, r3
 800995e:	4413      	add	r3, r2
 8009960:	3308      	adds	r3, #8
 8009962:	edd3 6a00 	vldr	s13, [r3]
 8009966:	4a14      	ldr	r2, [pc, #80]	; (80099b8 <PIDCalculate+0x1a0>)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	212c      	movs	r1, #44	; 0x2c
 800996c:	fb01 f303 	mul.w	r3, r1, r3
 8009970:	4413      	add	r3, r2
 8009972:	3314      	adds	r3, #20
 8009974:	edd3 7a00 	vldr	s15, [r3]
 8009978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800997c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009980:	ee17 0a90 	vmov	r0, s15
 8009984:	f7fe fd18 	bl	80083b8 <__aeabi_f2d>
 8009988:	4603      	mov	r3, r0
 800998a:	460c      	mov	r4, r1
 800998c:	ec44 3b10 	vmov	d0, r3, r4
 8009990:	f006 f8b8 	bl	800fb04 <round>
 8009994:	ec54 3b10 	vmov	r3, r4, d0
 8009998:	4618      	mov	r0, r3
 800999a:	4621      	mov	r1, r4
 800999c:	f7ff f814 	bl	80089c8 <__aeabi_d2iz>
 80099a0:	4a05      	ldr	r2, [pc, #20]	; (80099b8 <PIDCalculate+0x1a0>)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	212c      	movs	r1, #44	; 0x2c
 80099a6:	fb01 f303 	mul.w	r3, r1, r3
 80099aa:	4413      	add	r3, r2
 80099ac:	3324      	adds	r3, #36	; 0x24
 80099ae:	6018      	str	r0, [r3, #0]
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd90      	pop	{r4, r7, pc}
 80099b8:	200002a0 	.word	0x200002a0

080099bc <PIDInput>:
	*output = pid[n].out;
}
//pid制御は現在値と目標値から、出力するべき値を計算するもの。前回の値の保存と積算用の変数が必要なので、独立させるかポインタかフラグで初期化

void PIDInput(int n, float target, float current)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80099c8:	edc7 0a01 	vstr	s1, [r7, #4]
	pid[n].target = target;
 80099cc:	4a0b      	ldr	r2, [pc, #44]	; (80099fc <PIDInput+0x40>)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	212c      	movs	r1, #44	; 0x2c
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	4413      	add	r3, r2
 80099d8:	3320      	adds	r3, #32
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	601a      	str	r2, [r3, #0]
	pid[n].current = current;
 80099de:	4a07      	ldr	r2, [pc, #28]	; (80099fc <PIDInput+0x40>)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	212c      	movs	r1, #44	; 0x2c
 80099e4:	fb01 f303 	mul.w	r3, r1, r3
 80099e8:	4413      	add	r3, r2
 80099ea:	331c      	adds	r3, #28
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	601a      	str	r2, [r3, #0]
}
 80099f0:	bf00      	nop
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	200002a0 	.word	0x200002a0

08009a00 <PIDControl>:
int PIDControl(int n, float T, float target, float current)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8009a0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8009a10:	ed87 1a00 	vstr	s2, [r7]
	PIDInput( n, target, current);
 8009a14:	edd7 0a00 	vldr	s1, [r7]
 8009a18:	ed97 0a01 	vldr	s0, [r7, #4]
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f7ff ffcd 	bl	80099bc <PIDInput>
	PIDCalculate( n, T );
 8009a22:	ed97 0a02 	vldr	s0, [r7, #8]
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fef6 	bl	8009818 <PIDCalculate>
	//出力の前に全部0にする処理をフラグで
	if(pid[n].flag == 0)
 8009a2c:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <PIDControl+0x60>)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	212c      	movs	r1, #44	; 0x2c
 8009a32:	fb01 f303 	mul.w	r3, r1, r3
 8009a36:	4413      	add	r3, r2
 8009a38:	3328      	adds	r3, #40	; 0x28
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d102      	bne.n	8009a46 <PIDControl+0x46>
	{
		PIDReset(n);
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f7ff feab 	bl	800979c <PIDReset>
	}
	//*output = pid[n].out;
	//PIDOutput( n, output );
	return pid[n].out;
 8009a46:	4a06      	ldr	r2, [pc, #24]	; (8009a60 <PIDControl+0x60>)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	212c      	movs	r1, #44	; 0x2c
 8009a4c:	fb01 f303 	mul.w	r3, r1, r3
 8009a50:	4413      	add	r3, r2
 8009a52:	3324      	adds	r3, #36	; 0x24
 8009a54:	681b      	ldr	r3, [r3, #0]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	200002a0 	.word	0x200002a0

08009a64 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
float photo[4];

//led_driver
void Signal(int mode)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	e00e      	b.n	8009a90 <Signal+0x2c>
	{
		ChangeLED(mode);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 fbcc 	bl	800b210 <ChangeLED>
		HAL_Delay(100);
 8009a78:	2064      	movs	r0, #100	; 0x64
 8009a7a:	f001 fd9f 	bl	800b5bc <HAL_Delay>
		ChangeLED(0);
 8009a7e:	2000      	movs	r0, #0
 8009a80:	f001 fbc6 	bl	800b210 <ChangeLED>
		HAL_Delay(100);
 8009a84:	2064      	movs	r0, #100	; 0x64
 8009a86:	f001 fd99 	bl	800b5bc <HAL_Delay>
	for(int i=0; i < 5; i++)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	dded      	ble.n	8009a72 <Signal+0xe>
	}
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 8009aa8:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8009af4 <BatteryCheck+0x54>
 8009aac:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009af8 <BatteryCheck+0x58>
 8009ab0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff fb07 	bl	80090c8 <ADCToBatteryVoltage>
 8009aba:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 8009abe:	2103      	movs	r1, #3
 8009ac0:	2002      	movs	r0, #2
 8009ac2:	f7ff fb2b 	bl	800911c <IntegerPower>
 8009ac6:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 8009ac8:	6938      	ldr	r0, [r7, #16]
 8009aca:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8009afc <BatteryCheck+0x5c>
 8009ace:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8009b00 <BatteryCheck+0x60>
 8009ad2:	ed97 0a05 	vldr	s0, [r7, #20]
 8009ad6:	f7ff fb3e 	bl	8009156 <GetBatteryLevel>
 8009ada:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 8009adc:	68f9      	ldr	r1, [r7, #12]
 8009ade:	4809      	ldr	r0, [pc, #36]	; (8009b04 <BatteryCheck+0x64>)
 8009ae0:	f006 fcf4 	bl	80104cc <iprintf>
	Signal( battery_level );
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff ffbd 	bl	8009a64 <Signal>
}
 8009aea:	bf00      	nop
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	45800000 	.word	0x45800000
 8009af8:	40533333 	.word	0x40533333
 8009afc:	41066666 	.word	0x41066666
 8009b00:	40e66666 	.word	0x40e66666
 8009b04:	08012330 	.word	0x08012330

08009b08 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 8009b08:	b590      	push	{r4, r7, lr}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	603a      	str	r2, [r7, #0]
 8009b12:	71fb      	strb	r3, [r7, #7]
 8009b14:	460b      	mov	r3, r1
 8009b16:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 8009b18:	f001 fb5e 	bl	800b1d8 <EmitterON>
	ADCStart();
 8009b1c:	f001 fb04 	bl	800b128 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 8009b20:	4840      	ldr	r0, [pc, #256]	; (8009c24 <ModeSelect+0x11c>)
 8009b22:	f004 f82c 	bl	800db7e <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 8009b26:	f001 fb37 	bl	800b198 <EncoderStart>

	//while中で選択
	*pMode=min;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	79fa      	ldrb	r2, [r7, #7]
 8009b2e:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 8009b30:	f247 512f 	movw	r1, #29999	; 0x752f
 8009b34:	483c      	ldr	r0, [pc, #240]	; (8009c28 <ModeSelect+0x120>)
 8009b36:	f7ff fa39 	bl	8008fac <InitPulse>

	int ENC3_LEFT;
	while(photo[SR]/*構造体アロー*/ < 250/**/) //前向きの
 8009b3a:	e05c      	b.n	8009bf6 <ModeSelect+0xee>
	{
		printf("photo[SR] : %f\r\n", photo[SR]);
 8009b3c:	4b3b      	ldr	r3, [pc, #236]	; (8009c2c <ModeSelect+0x124>)
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fc39 	bl	80083b8 <__aeabi_f2d>
 8009b46:	4603      	mov	r3, r0
 8009b48:	460c      	mov	r4, r1
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	4623      	mov	r3, r4
 8009b4e:	4838      	ldr	r0, [pc, #224]	; (8009c30 <ModeSelect+0x128>)
 8009b50:	f006 fcbc 	bl	80104cc <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 8009b54:	4b37      	ldr	r3, [pc, #220]	; (8009c34 <ModeSelect+0x12c>)
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	60fb      	str	r3, [r7, #12]

		  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f24b 522e 	movw	r2, #46382	; 0xb52e
 8009b60:	4293      	cmp	r3, r2
 8009b62:	dd21      	ble.n	8009ba8 <ModeSelect+0xa0>
		  {
		  	  *pMode += 1;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	f993 3000 	ldrsb.w	r3, [r3]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	b25a      	sxtb	r2, r3
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	f993 3000 	ldrsb.w	r3, [r3]
 8009b7c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	da02      	bge.n	8009b8a <ModeSelect+0x82>
		  	  {
		  		  *pMode = min;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	79fa      	ldrb	r2, [r7, #7]
 8009b88:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fb3d 	bl	800b210 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 8009b96:	f247 512f 	movw	r1, #29999	; 0x752f
 8009b9a:	4823      	ldr	r0, [pc, #140]	; (8009c28 <ModeSelect+0x120>)
 8009b9c:	f7ff fa06 	bl	8008fac <InitPulse>
		  	  HAL_Delay(500);
 8009ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ba4:	f001 fd0a 	bl	800b5bc <HAL_Delay>

		  }
		  if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f243 522f 	movw	r2, #13615	; 0x352f
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	dc21      	bgt.n	8009bf6 <ModeSelect+0xee>
		  {
		  	  *pMode -= 1;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	b25a      	sxtb	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8009bca:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	dd02      	ble.n	8009bd8 <ModeSelect+0xd0>
		  	  {
		  	  		  *pMode = max;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	79ba      	ldrb	r2, [r7, #6]
 8009bd6:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	f993 3000 	ldrsb.w	r3, [r3]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 fb16 	bl	800b210 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE_L);
 8009be4:	f247 512f 	movw	r1, #29999	; 0x752f
 8009be8:	480f      	ldr	r0, [pc, #60]	; (8009c28 <ModeSelect+0x120>)
 8009bea:	f7ff f9df 	bl	8008fac <InitPulse>
		  	  HAL_Delay(500);
 8009bee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bf2:	f001 fce3 	bl	800b5bc <HAL_Delay>
	while(photo[SR]/*構造体アロー*/ < 250/**/) //前向きの
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <ModeSelect+0x124>)
 8009bf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009bfc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009c38 <ModeSelect+0x130>
 8009c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c08:	d498      	bmi.n	8009b3c <ModeSelect+0x34>
		  }
	}

	EmitterOFF();
 8009c0a:	f001 faf3 	bl	800b1f4 <EmitterOFF>
	ADCStop();
 8009c0e:	f001 faab 	bl	800b168 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 8009c12:	4804      	ldr	r0, [pc, #16]	; (8009c24 <ModeSelect+0x11c>)
 8009c14:	f003 ffd7 	bl	800dbc6 <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 8009c18:	f001 face 	bl	800b1b8 <EncoderStop>

	//モード選択後どうするか
}
 8009c1c:	bf00      	nop
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd90      	pop	{r4, r7, pc}
 8009c24:	20000420 	.word	0x20000420
 8009c28:	40000424 	.word	0x40000424
 8009c2c:	20000238 	.word	0x20000238
 8009c30:	08012338 	.word	0x08012338
 8009c34:	40000400 	.word	0x40000400
 8009c38:	437a0000 	.word	0x437a0000

08009c3c <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8009c44:	1d39      	adds	r1, r7, #4
 8009c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	4803      	ldr	r0, [pc, #12]	; (8009c5c <__io_putchar+0x20>)
 8009c4e:	f005 faf9 	bl	800f244 <HAL_UART_Transmit>
	return ch;
 8009c52:	687b      	ldr	r3, [r7, #4]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000608 	.word	0x20000608

08009c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c66:	f001 fc37 	bl	800b4d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c6a:	f000 f85f 	bl	8009d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c6e:	f000 fca9 	bl	800a5c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8009c72:	f000 fc7f 	bl	800a574 <MX_DMA_Init>
  MX_ADC1_Init();
 8009c76:	f000 f8c3 	bl	8009e00 <MX_ADC1_Init>
  MX_ADC2_Init();
 8009c7a:	f000 f92f 	bl	8009edc <MX_ADC2_Init>
  MX_TIM3_Init();
 8009c7e:	f000 fa89 	bl	800a194 <MX_TIM3_Init>
  MX_TIM2_Init();
 8009c82:	f000 fa11 	bl	800a0a8 <MX_TIM2_Init>
  MX_SPI3_Init();
 8009c86:	f000 f989 	bl	8009f9c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8009c8a:	f000 fc49 	bl	800a520 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8009c8e:	f000 fb29 	bl	800a2e4 <MX_TIM5_Init>
  MX_TIM4_Init();
 8009c92:	f000 fad3 	bl	800a23c <MX_TIM4_Init>
  MX_TIM8_Init();
 8009c96:	f000 fb9b 	bl	800a3d0 <MX_TIM8_Init>
  MX_TIM1_Init();
 8009c9a:	f000 f9b5 	bl	800a008 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ADCStart();
 8009c9e:	f001 fa43 	bl	800b128 <ADCStart>
  HAL_Delay(500);
 8009ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ca6:	f001 fc89 	bl	800b5bc <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 8009caa:	4b1d      	ldr	r3, [pc, #116]	; (8009d20 <main+0xc0>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fef6 	bl	8009aa0 <BatteryCheck>

  int8_t mode=0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	71fb      	strb	r3, [r7, #7]
  	  printf("mode : %d\r\n", mode);
 8009cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	4819      	ldr	r0, [pc, #100]	; (8009d24 <main+0xc4>)
 8009cc0:	f006 fc04 	bl	80104cc <iprintf>
  ModeSelect( 0, 7, &mode);
 8009cc4:	1dfb      	adds	r3, r7, #7
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	2107      	movs	r1, #7
 8009cca:	2000      	movs	r0, #0
 8009ccc:	f7ff ff1c 	bl	8009b08 <ModeSelect>
  Signal( mode );
 8009cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff fec5 	bl	8009a64 <Signal>
  	  printf("ドン\r\n");
 8009cda:	4813      	ldr	r0, [pc, #76]	; (8009d28 <main+0xc8>)
 8009cdc:	f006 fc6a 	bl	80105b4 <puts>

  while (1)
  {

	  switch( mode )
 8009ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ce4:	2b07      	cmp	r3, #7
 8009ce6:	d819      	bhi.n	8009d1c <main+0xbc>
 8009ce8:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <main+0x90>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d1d 	.word	0x08009d1d
 8009cf4:	08009d1d 	.word	0x08009d1d
 8009cf8:	08009d1d 	.word	0x08009d1d
 8009cfc:	08009d1d 	.word	0x08009d1d
 8009d00:	08009d1d 	.word	0x08009d1d
 8009d04:	08009d1d 	.word	0x08009d1d
 8009d08:	08009d11 	.word	0x08009d11
 8009d0c:	08009d17 	.word	0x08009d17
	  case 4:
		  break;
	  case 5:
		  break;
	  case 6:
		  Explore();
 8009d10:	f7ff fcce 	bl	80096b0 <Explore>
		  break;
 8009d14:	e003      	b.n	8009d1e <main+0xbe>
	  case 7:
		  WritingFree();
 8009d16:	f7ff fc57 	bl	80095c8 <WritingFree>
		  break;
 8009d1a:	e000      	b.n	8009d1e <main+0xbe>
	  default :
		  break;
 8009d1c:	bf00      	nop
	  switch( mode )
 8009d1e:	e7df      	b.n	8009ce0 <main+0x80>
 8009d20:	20000404 	.word	0x20000404
 8009d24:	0801234c 	.word	0x0801234c
 8009d28:	08012358 	.word	0x08012358

08009d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b094      	sub	sp, #80	; 0x50
 8009d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d32:	f107 0320 	add.w	r3, r7, #32
 8009d36:	2230      	movs	r2, #48	; 0x30
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f005 ff61 	bl	800fc02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d40:	f107 030c 	add.w	r3, r7, #12
 8009d44:	2200      	movs	r2, #0
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	605a      	str	r2, [r3, #4]
 8009d4a:	609a      	str	r2, [r3, #8]
 8009d4c:	60da      	str	r2, [r3, #12]
 8009d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d50:	2300      	movs	r3, #0
 8009d52:	60bb      	str	r3, [r7, #8]
 8009d54:	4b28      	ldr	r3, [pc, #160]	; (8009df8 <SystemClock_Config+0xcc>)
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	4a27      	ldr	r2, [pc, #156]	; (8009df8 <SystemClock_Config+0xcc>)
 8009d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8009d60:	4b25      	ldr	r3, [pc, #148]	; (8009df8 <SystemClock_Config+0xcc>)
 8009d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d68:	60bb      	str	r3, [r7, #8]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	607b      	str	r3, [r7, #4]
 8009d70:	4b22      	ldr	r3, [pc, #136]	; (8009dfc <SystemClock_Config+0xd0>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a21      	ldr	r2, [pc, #132]	; (8009dfc <SystemClock_Config+0xd0>)
 8009d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	4b1f      	ldr	r3, [pc, #124]	; (8009dfc <SystemClock_Config+0xd0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d84:	607b      	str	r3, [r7, #4]
 8009d86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d92:	2302      	movs	r3, #2
 8009d94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009da0:	23a8      	movs	r3, #168	; 0xa8
 8009da2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009da4:	2302      	movs	r3, #2
 8009da6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009da8:	2304      	movs	r3, #4
 8009daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009dac:	f107 0320 	add.w	r3, r7, #32
 8009db0:	4618      	mov	r0, r3
 8009db2:	f003 f9f3 	bl	800d19c <HAL_RCC_OscConfig>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009dbc:	f000 fccc 	bl	800a758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009dc0:	230f      	movs	r3, #15
 8009dc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009dcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009dd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009dd8:	f107 030c 	add.w	r3, r7, #12
 8009ddc:	2105      	movs	r1, #5
 8009dde:	4618      	mov	r0, r3
 8009de0:	f003 fc4c 	bl	800d67c <HAL_RCC_ClockConfig>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009dea:	f000 fcb5 	bl	800a758 <Error_Handler>
  }
}
 8009dee:	bf00      	nop
 8009df0:	3750      	adds	r7, #80	; 0x50
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	40007000 	.word	0x40007000

08009e00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009e06:	463b      	mov	r3, r7
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	605a      	str	r2, [r3, #4]
 8009e0e:	609a      	str	r2, [r3, #8]
 8009e10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009e12:	4b2f      	ldr	r3, [pc, #188]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e14:	4a2f      	ldr	r2, [pc, #188]	; (8009ed4 <MX_ADC1_Init+0xd4>)
 8009e16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009e18:	4b2d      	ldr	r3, [pc, #180]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009e1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009e20:	4b2b      	ldr	r3, [pc, #172]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8009e26:	4b2a      	ldr	r3, [pc, #168]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009e2c:	4b28      	ldr	r3, [pc, #160]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e2e:	2201      	movs	r2, #1
 8009e30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009e32:	4b27      	ldr	r3, [pc, #156]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009e3a:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009e40:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e42:	4a25      	ldr	r2, [pc, #148]	; (8009ed8 <MX_ADC1_Init+0xd8>)
 8009e44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009e46:	4b22      	ldr	r3, [pc, #136]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8009e4c:	4b20      	ldr	r3, [pc, #128]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e4e:	2203      	movs	r2, #3
 8009e50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009e52:	4b1f      	ldr	r3, [pc, #124]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009e5a:	4b1d      	ldr	r3, [pc, #116]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009e60:	481b      	ldr	r0, [pc, #108]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e62:	f001 fbcd 	bl	800b600 <HAL_ADC_Init>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8009e6c:	f000 fc74 	bl	800a758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009e70:	230a      	movs	r3, #10
 8009e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009e74:	2301      	movs	r3, #1
 8009e76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009e7c:	463b      	mov	r3, r7
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4813      	ldr	r0, [pc, #76]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e82:	f001 fea5 	bl	800bbd0 <HAL_ADC_ConfigChannel>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009e8c:	f000 fc64 	bl	800a758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009e90:	230e      	movs	r3, #14
 8009e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8009e94:	2302      	movs	r3, #2
 8009e96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009e98:	463b      	mov	r3, r7
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	480c      	ldr	r0, [pc, #48]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009e9e:	f001 fe97 	bl	800bbd0 <HAL_ADC_ConfigChannel>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8009ea8:	f000 fc56 	bl	800a758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009eac:	2309      	movs	r3, #9
 8009eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009eb4:	463b      	mov	r3, r7
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4805      	ldr	r0, [pc, #20]	; (8009ed0 <MX_ADC1_Init+0xd0>)
 8009eba:	f001 fe89 	bl	800bbd0 <HAL_ADC_ConfigChannel>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8009ec4:	f000 fc48 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009ec8:	bf00      	nop
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	200005c0 	.word	0x200005c0
 8009ed4:	40012000 	.word	0x40012000
 8009ed8:	0f000001 	.word	0x0f000001

08009edc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009ee2:	463b      	mov	r3, r7
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	605a      	str	r2, [r3, #4]
 8009eea:	609a      	str	r2, [r3, #8]
 8009eec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8009eee:	4b28      	ldr	r3, [pc, #160]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009ef0:	4a28      	ldr	r2, [pc, #160]	; (8009f94 <MX_ADC2_Init+0xb8>)
 8009ef2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009ef4:	4b26      	ldr	r3, [pc, #152]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009efa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8009efc:	4b24      	ldr	r3, [pc, #144]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8009f02:	4b23      	ldr	r3, [pc, #140]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f04:	2201      	movs	r2, #1
 8009f06:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8009f08:	4b21      	ldr	r3, [pc, #132]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8009f0e:	4b20      	ldr	r3, [pc, #128]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009f16:	4b1e      	ldr	r3, [pc, #120]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009f1c:	4b1c      	ldr	r3, [pc, #112]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f1e:	4a1e      	ldr	r2, [pc, #120]	; (8009f98 <MX_ADC2_Init+0xbc>)
 8009f20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009f22:	4b1b      	ldr	r3, [pc, #108]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8009f28:	4b19      	ldr	r3, [pc, #100]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8009f2e:	4b18      	ldr	r3, [pc, #96]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009f36:	4b16      	ldr	r3, [pc, #88]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f38:	2201      	movs	r2, #1
 8009f3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8009f3c:	4814      	ldr	r0, [pc, #80]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f3e:	f001 fb5f 	bl	800b600 <HAL_ADC_Init>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8009f48:	f000 fc06 	bl	800a758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8009f4c:	230b      	movs	r3, #11
 8009f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009f50:	2301      	movs	r3, #1
 8009f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8009f54:	2303      	movs	r3, #3
 8009f56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009f58:	463b      	mov	r3, r7
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	480c      	ldr	r0, [pc, #48]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f5e:	f001 fe37 	bl	800bbd0 <HAL_ADC_ConfigChannel>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8009f68:	f000 fbf6 	bl	800a758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009f6c:	230f      	movs	r3, #15
 8009f6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8009f70:	2302      	movs	r3, #2
 8009f72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009f74:	463b      	mov	r3, r7
 8009f76:	4619      	mov	r1, r3
 8009f78:	4805      	ldr	r0, [pc, #20]	; (8009f90 <MX_ADC2_Init+0xb4>)
 8009f7a:	f001 fe29 	bl	800bbd0 <HAL_ADC_ConfigChannel>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8009f84:	f000 fbe8 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009f88:	bf00      	nop
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	200004a0 	.word	0x200004a0
 8009f94:	40012100 	.word	0x40012100
 8009f98:	0f000001 	.word	0x0f000001

08009f9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8009fa0:	4b17      	ldr	r3, [pc, #92]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fa2:	4a18      	ldr	r2, [pc, #96]	; (800a004 <MX_SPI3_Init+0x68>)
 8009fa4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009fa6:	4b16      	ldr	r3, [pc, #88]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009fac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009fae:	4b14      	ldr	r3, [pc, #80]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009fb4:	4b12      	ldr	r3, [pc, #72]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009fba:	4b11      	ldr	r3, [pc, #68]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009fc0:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009fc6:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fcc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009fce:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fd0:	2228      	movs	r2, #40	; 0x28
 8009fd2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009fda:	4b09      	ldr	r3, [pc, #36]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8009fe6:	4b06      	ldr	r3, [pc, #24]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fe8:	220a      	movs	r2, #10
 8009fea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009fec:	4804      	ldr	r0, [pc, #16]	; (800a000 <MX_SPI3_Init+0x64>)
 8009fee:	f003 fd37 	bl	800da60 <HAL_SPI_Init>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8009ff8:	f000 fbae 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009ffc:	bf00      	nop
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000568 	.word	0x20000568
 800a004:	40003c00 	.word	0x40003c00

0800a008 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a00e:	f107 0308 	add.w	r3, r7, #8
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	605a      	str	r2, [r3, #4]
 800a018:	609a      	str	r2, [r3, #8]
 800a01a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a01c:	463b      	mov	r3, r7
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a024:	4b1e      	ldr	r3, [pc, #120]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a026:	4a1f      	ldr	r2, [pc, #124]	; (800a0a4 <MX_TIM1_Init+0x9c>)
 800a028:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800a02a:	4b1d      	ldr	r3, [pc, #116]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a02c:	22a7      	movs	r2, #167	; 0xa7
 800a02e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a030:	4b1b      	ldr	r3, [pc, #108]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a032:	2200      	movs	r2, #0
 800a034:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800a036:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a03c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a03e:	4b18      	ldr	r3, [pc, #96]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a040:	2200      	movs	r2, #0
 800a042:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a044:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a046:	2200      	movs	r2, #0
 800a048:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a04a:	4b15      	ldr	r3, [pc, #84]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a050:	4813      	ldr	r0, [pc, #76]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a052:	f003 fd69 	bl	800db28 <HAL_TIM_Base_Init>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800a05c:	f000 fb7c 	bl	800a758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a066:	f107 0308 	add.w	r3, r7, #8
 800a06a:	4619      	mov	r1, r3
 800a06c:	480c      	ldr	r0, [pc, #48]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a06e:	f004 fadb 	bl	800e628 <HAL_TIM_ConfigClockSource>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800a078:	f000 fb6e 	bl	800a758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a07c:	2300      	movs	r3, #0
 800a07e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a080:	2300      	movs	r3, #0
 800a082:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a084:	463b      	mov	r3, r7
 800a086:	4619      	mov	r1, r3
 800a088:	4805      	ldr	r0, [pc, #20]	; (800a0a0 <MX_TIM1_Init+0x98>)
 800a08a:	f004 ff87 	bl	800ef9c <HAL_TIMEx_MasterConfigSynchronization>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a094:	f000 fb60 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a098:	bf00      	nop
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	200006a8 	.word	0x200006a8
 800a0a4:	40010000 	.word	0x40010000

0800a0a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08e      	sub	sp, #56	; 0x38
 800a0ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a0ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	605a      	str	r2, [r3, #4]
 800a0b8:	609a      	str	r2, [r3, #8]
 800a0ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0bc:	f107 0320 	add.w	r3, r7, #32
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0c6:	1d3b      	adds	r3, r7, #4
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	605a      	str	r2, [r3, #4]
 800a0ce:	609a      	str	r2, [r3, #8]
 800a0d0:	60da      	str	r2, [r3, #12]
 800a0d2:	611a      	str	r2, [r3, #16]
 800a0d4:	615a      	str	r2, [r3, #20]
 800a0d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a0d8:	4b2d      	ldr	r3, [pc, #180]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a0da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a0de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a0e0:	4b2b      	ldr	r3, [pc, #172]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0e6:	4b2a      	ldr	r3, [pc, #168]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800a0ec:	4b28      	ldr	r3, [pc, #160]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a0ee:	f241 0267 	movw	r2, #4199	; 0x1067
 800a0f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0f4:	4b26      	ldr	r3, [pc, #152]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0fa:	4b25      	ldr	r3, [pc, #148]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a100:	4823      	ldr	r0, [pc, #140]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a102:	f003 fd11 	bl	800db28 <HAL_TIM_Base_Init>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a10c:	f000 fb24 	bl	800a758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a114:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a11a:	4619      	mov	r1, r3
 800a11c:	481c      	ldr	r0, [pc, #112]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a11e:	f004 fa83 	bl	800e628 <HAL_TIM_ConfigClockSource>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a128:	f000 fb16 	bl	800a758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a12c:	4818      	ldr	r0, [pc, #96]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a12e:	f003 fec9 	bl	800dec4 <HAL_TIM_PWM_Init>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a138:	f000 fb0e 	bl	800a758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a13c:	2300      	movs	r3, #0
 800a13e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a140:	2300      	movs	r3, #0
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a144:	f107 0320 	add.w	r3, r7, #32
 800a148:	4619      	mov	r1, r3
 800a14a:	4811      	ldr	r0, [pc, #68]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a14c:	f004 ff26 	bl	800ef9c <HAL_TIMEx_MasterConfigSynchronization>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a156:	f000 faff 	bl	800a758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a15a:	2360      	movs	r3, #96	; 0x60
 800a15c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a16a:	1d3b      	adds	r3, r7, #4
 800a16c:	220c      	movs	r2, #12
 800a16e:	4619      	mov	r1, r3
 800a170:	4807      	ldr	r0, [pc, #28]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a172:	f004 f993 	bl	800e49c <HAL_TIM_PWM_ConfigChannel>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a17c:	f000 faec 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a180:	4803      	ldr	r0, [pc, #12]	; (800a190 <MX_TIM2_Init+0xe8>)
 800a182:	f000 fd89 	bl	800ac98 <HAL_TIM_MspPostInit>

}
 800a186:	bf00      	nop
 800a188:	3738      	adds	r7, #56	; 0x38
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200006e8 	.word	0x200006e8

0800a194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08c      	sub	sp, #48	; 0x30
 800a198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a19a:	f107 030c 	add.w	r3, r7, #12
 800a19e:	2224      	movs	r2, #36	; 0x24
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f005 fd2d 	bl	800fc02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1a8:	1d3b      	adds	r3, r7, #4
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a1b0:	4b20      	ldr	r3, [pc, #128]	; (800a234 <MX_TIM3_Init+0xa0>)
 800a1b2:	4a21      	ldr	r2, [pc, #132]	; (800a238 <MX_TIM3_Init+0xa4>)
 800a1b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a1b6:	4b1f      	ldr	r3, [pc, #124]	; (800a234 <MX_TIM3_Init+0xa0>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1bc:	4b1d      	ldr	r3, [pc, #116]	; (800a234 <MX_TIM3_Init+0xa0>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <MX_TIM3_Init+0xa0>)
 800a1c4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800a1c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1ca:	4b1a      	ldr	r3, [pc, #104]	; (800a234 <MX_TIM3_Init+0xa0>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1d0:	4b18      	ldr	r3, [pc, #96]	; (800a234 <MX_TIM3_Init+0xa0>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a1fa:	f107 030c 	add.w	r3, r7, #12
 800a1fe:	4619      	mov	r1, r3
 800a200:	480c      	ldr	r0, [pc, #48]	; (800a234 <MX_TIM3_Init+0xa0>)
 800a202:	f003 fed3 	bl	800dfac <HAL_TIM_Encoder_Init>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800a20c:	f000 faa4 	bl	800a758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a210:	2300      	movs	r3, #0
 800a212:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a214:	2300      	movs	r3, #0
 800a216:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a218:	1d3b      	adds	r3, r7, #4
 800a21a:	4619      	mov	r1, r3
 800a21c:	4805      	ldr	r0, [pc, #20]	; (800a234 <MX_TIM3_Init+0xa0>)
 800a21e:	f004 febd 	bl	800ef9c <HAL_TIMEx_MasterConfigSynchronization>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a228:	f000 fa96 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a22c:	bf00      	nop
 800a22e:	3730      	adds	r7, #48	; 0x30
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	20000528 	.word	0x20000528
 800a238:	40000400 	.word	0x40000400

0800a23c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08c      	sub	sp, #48	; 0x30
 800a240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a242:	f107 030c 	add.w	r3, r7, #12
 800a246:	2224      	movs	r2, #36	; 0x24
 800a248:	2100      	movs	r1, #0
 800a24a:	4618      	mov	r0, r3
 800a24c:	f005 fcd9 	bl	800fc02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a250:	1d3b      	adds	r3, r7, #4
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a258:	4b20      	ldr	r3, [pc, #128]	; (800a2dc <MX_TIM4_Init+0xa0>)
 800a25a:	4a21      	ldr	r2, [pc, #132]	; (800a2e0 <MX_TIM4_Init+0xa4>)
 800a25c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a25e:	4b1f      	ldr	r3, [pc, #124]	; (800a2dc <MX_TIM4_Init+0xa0>)
 800a260:	2200      	movs	r2, #0
 800a262:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a264:	4b1d      	ldr	r3, [pc, #116]	; (800a2dc <MX_TIM4_Init+0xa0>)
 800a266:	2200      	movs	r2, #0
 800a268:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800a26a:	4b1c      	ldr	r3, [pc, #112]	; (800a2dc <MX_TIM4_Init+0xa0>)
 800a26c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800a270:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a272:	4b1a      	ldr	r3, [pc, #104]	; (800a2dc <MX_TIM4_Init+0xa0>)
 800a274:	2200      	movs	r2, #0
 800a276:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a278:	4b18      	ldr	r3, [pc, #96]	; (800a2dc <MX_TIM4_Init+0xa0>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a27e:	2303      	movs	r3, #3
 800a280:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a282:	2300      	movs	r3, #0
 800a284:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a286:	2301      	movs	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a292:	2300      	movs	r3, #0
 800a294:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a296:	2301      	movs	r3, #1
 800a298:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a29a:	2300      	movs	r3, #0
 800a29c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a2a2:	f107 030c 	add.w	r3, r7, #12
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	480c      	ldr	r0, [pc, #48]	; (800a2dc <MX_TIM4_Init+0xa0>)
 800a2aa:	f003 fe7f 	bl	800dfac <HAL_TIM_Encoder_Init>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800a2b4:	f000 fa50 	bl	800a758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a2c0:	1d3b      	adds	r3, r7, #4
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	4805      	ldr	r0, [pc, #20]	; (800a2dc <MX_TIM4_Init+0xa0>)
 800a2c6:	f004 fe69 	bl	800ef9c <HAL_TIMEx_MasterConfigSynchronization>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800a2d0:	f000 fa42 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a2d4:	bf00      	nop
 800a2d6:	3730      	adds	r7, #48	; 0x30
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20000460 	.word	0x20000460
 800a2e0:	40000800 	.word	0x40000800

0800a2e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08e      	sub	sp, #56	; 0x38
 800a2e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a2ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	605a      	str	r2, [r3, #4]
 800a2f4:	609a      	str	r2, [r3, #8]
 800a2f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2f8:	f107 0320 	add.w	r3, r7, #32
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a302:	1d3b      	adds	r3, r7, #4
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	605a      	str	r2, [r3, #4]
 800a30a:	609a      	str	r2, [r3, #8]
 800a30c:	60da      	str	r2, [r3, #12]
 800a30e:	611a      	str	r2, [r3, #16]
 800a310:	615a      	str	r2, [r3, #20]
 800a312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a314:	4b2c      	ldr	r3, [pc, #176]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a316:	4a2d      	ldr	r2, [pc, #180]	; (800a3cc <MX_TIM5_Init+0xe8>)
 800a318:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a31a:	4b2b      	ldr	r3, [pc, #172]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a320:	4b29      	ldr	r3, [pc, #164]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a322:	2200      	movs	r2, #0
 800a324:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800a326:	4b28      	ldr	r3, [pc, #160]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a328:	f241 0267 	movw	r2, #4199	; 0x1067
 800a32c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a32e:	4b26      	ldr	r3, [pc, #152]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a330:	2200      	movs	r2, #0
 800a332:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a334:	4b24      	ldr	r3, [pc, #144]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a336:	2200      	movs	r2, #0
 800a338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a33a:	4823      	ldr	r0, [pc, #140]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a33c:	f003 fbf4 	bl	800db28 <HAL_TIM_Base_Init>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800a346:	f000 fa07 	bl	800a758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a34a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a354:	4619      	mov	r1, r3
 800a356:	481c      	ldr	r0, [pc, #112]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a358:	f004 f966 	bl	800e628 <HAL_TIM_ConfigClockSource>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800a362:	f000 f9f9 	bl	800a758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a366:	4818      	ldr	r0, [pc, #96]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a368:	f003 fdac 	bl	800dec4 <HAL_TIM_PWM_Init>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800a372:	f000 f9f1 	bl	800a758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a376:	2300      	movs	r3, #0
 800a378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a37a:	2300      	movs	r3, #0
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a37e:	f107 0320 	add.w	r3, r7, #32
 800a382:	4619      	mov	r1, r3
 800a384:	4810      	ldr	r0, [pc, #64]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a386:	f004 fe09 	bl	800ef9c <HAL_TIMEx_MasterConfigSynchronization>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800a390:	f000 f9e2 	bl	800a758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a394:	2360      	movs	r3, #96	; 0x60
 800a396:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a39c:	2300      	movs	r3, #0
 800a39e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a3a4:	1d3b      	adds	r3, r7, #4
 800a3a6:	2204      	movs	r2, #4
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4807      	ldr	r0, [pc, #28]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a3ac:	f004 f876 	bl	800e49c <HAL_TIM_PWM_ConfigChannel>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800a3b6:	f000 f9cf 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800a3ba:	4803      	ldr	r0, [pc, #12]	; (800a3c8 <MX_TIM5_Init+0xe4>)
 800a3bc:	f000 fc6c 	bl	800ac98 <HAL_TIM_MspPostInit>

}
 800a3c0:	bf00      	nop
 800a3c2:	3738      	adds	r7, #56	; 0x38
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	200004e8 	.word	0x200004e8
 800a3cc:	40000c00 	.word	0x40000c00

0800a3d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b096      	sub	sp, #88	; 0x58
 800a3d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a3d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3da:	2200      	movs	r2, #0
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	605a      	str	r2, [r3, #4]
 800a3e0:	609a      	str	r2, [r3, #8]
 800a3e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a3e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a3ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	605a      	str	r2, [r3, #4]
 800a3f8:	609a      	str	r2, [r3, #8]
 800a3fa:	60da      	str	r2, [r3, #12]
 800a3fc:	611a      	str	r2, [r3, #16]
 800a3fe:	615a      	str	r2, [r3, #20]
 800a400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a402:	1d3b      	adds	r3, r7, #4
 800a404:	2220      	movs	r2, #32
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f005 fbfa 	bl	800fc02 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a40e:	4b42      	ldr	r3, [pc, #264]	; (800a518 <MX_TIM8_Init+0x148>)
 800a410:	4a42      	ldr	r2, [pc, #264]	; (800a51c <MX_TIM8_Init+0x14c>)
 800a412:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800a414:	4b40      	ldr	r3, [pc, #256]	; (800a518 <MX_TIM8_Init+0x148>)
 800a416:	22a7      	movs	r2, #167	; 0xa7
 800a418:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a41a:	4b3f      	ldr	r3, [pc, #252]	; (800a518 <MX_TIM8_Init+0x148>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800a420:	4b3d      	ldr	r3, [pc, #244]	; (800a518 <MX_TIM8_Init+0x148>)
 800a422:	2231      	movs	r2, #49	; 0x31
 800a424:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a426:	4b3c      	ldr	r3, [pc, #240]	; (800a518 <MX_TIM8_Init+0x148>)
 800a428:	2200      	movs	r2, #0
 800a42a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a42c:	4b3a      	ldr	r3, [pc, #232]	; (800a518 <MX_TIM8_Init+0x148>)
 800a42e:	2200      	movs	r2, #0
 800a430:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a432:	4b39      	ldr	r3, [pc, #228]	; (800a518 <MX_TIM8_Init+0x148>)
 800a434:	2280      	movs	r2, #128	; 0x80
 800a436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a438:	4837      	ldr	r0, [pc, #220]	; (800a518 <MX_TIM8_Init+0x148>)
 800a43a:	f003 fb75 	bl	800db28 <HAL_TIM_Base_Init>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800a444:	f000 f988 	bl	800a758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a44c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a44e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a452:	4619      	mov	r1, r3
 800a454:	4830      	ldr	r0, [pc, #192]	; (800a518 <MX_TIM8_Init+0x148>)
 800a456:	f004 f8e7 	bl	800e628 <HAL_TIM_ConfigClockSource>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800a460:	f000 f97a 	bl	800a758 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800a464:	482c      	ldr	r0, [pc, #176]	; (800a518 <MX_TIM8_Init+0x148>)
 800a466:	f003 fbd9 	bl	800dc1c <HAL_TIM_OC_Init>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800a470:	f000 f972 	bl	800a758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a474:	2300      	movs	r3, #0
 800a476:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a478:	2300      	movs	r3, #0
 800a47a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a47c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a480:	4619      	mov	r1, r3
 800a482:	4825      	ldr	r0, [pc, #148]	; (800a518 <MX_TIM8_Init+0x148>)
 800a484:	f004 fd8a 	bl	800ef9c <HAL_TIMEx_MasterConfigSynchronization>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800a48e:	f000 f963 	bl	800a758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a492:	2330      	movs	r3, #48	; 0x30
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800a496:	2318      	movs	r3, #24
 800a498:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a49a:	2300      	movs	r3, #0
 800a49c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a4ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4818      	ldr	r0, [pc, #96]	; (800a518 <MX_TIM8_Init+0x148>)
 800a4b8:	f003 ff90 	bl	800e3dc <HAL_TIM_OC_ConfigChannel>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800a4c2:	f000 f949 	bl	800a758 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800a4c6:	4b14      	ldr	r3, [pc, #80]	; (800a518 <MX_TIM8_Init+0x148>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	699a      	ldr	r2, [r3, #24]
 800a4cc:	4b12      	ldr	r3, [pc, #72]	; (800a518 <MX_TIM8_Init+0x148>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0208 	orr.w	r2, r2, #8
 800a4d4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a4ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a4f4:	1d3b      	adds	r3, r7, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4807      	ldr	r0, [pc, #28]	; (800a518 <MX_TIM8_Init+0x148>)
 800a4fa:	f004 fdcb 	bl	800f094 <HAL_TIMEx_ConfigBreakDeadTime>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800a504:	f000 f928 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a508:	4803      	ldr	r0, [pc, #12]	; (800a518 <MX_TIM8_Init+0x148>)
 800a50a:	f000 fbc5 	bl	800ac98 <HAL_TIM_MspPostInit>

}
 800a50e:	bf00      	nop
 800a510:	3758      	adds	r7, #88	; 0x58
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20000420 	.word	0x20000420
 800a51c:	40010400 	.word	0x40010400

0800a520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a524:	4b11      	ldr	r3, [pc, #68]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a526:	4a12      	ldr	r2, [pc, #72]	; (800a570 <MX_USART1_UART_Init+0x50>)
 800a528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a52a:	4b10      	ldr	r3, [pc, #64]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a52c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a532:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a534:	2200      	movs	r2, #0
 800a536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a538:	4b0c      	ldr	r3, [pc, #48]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a53e:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a540:	2200      	movs	r2, #0
 800a542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a544:	4b09      	ldr	r3, [pc, #36]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a546:	220c      	movs	r2, #12
 800a548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a54a:	4b08      	ldr	r3, [pc, #32]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a550:	4b06      	ldr	r3, [pc, #24]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a552:	2200      	movs	r2, #0
 800a554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a556:	4805      	ldr	r0, [pc, #20]	; (800a56c <MX_USART1_UART_Init+0x4c>)
 800a558:	f004 fe27 	bl	800f1aa <HAL_UART_Init>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a562:	f000 f8f9 	bl	800a758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a566:	bf00      	nop
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000608 	.word	0x20000608
 800a570:	40011000 	.word	0x40011000

0800a574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a57a:	2300      	movs	r3, #0
 800a57c:	607b      	str	r3, [r7, #4]
 800a57e:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <MX_DMA_Init+0x4c>)
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	4a0f      	ldr	r2, [pc, #60]	; (800a5c0 <MX_DMA_Init+0x4c>)
 800a584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a588:	6313      	str	r3, [r2, #48]	; 0x30
 800a58a:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <MX_DMA_Init+0x4c>)
 800a58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a592:	607b      	str	r3, [r7, #4]
 800a594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800a596:	2200      	movs	r2, #0
 800a598:	2100      	movs	r1, #0
 800a59a:	2038      	movs	r0, #56	; 0x38
 800a59c:	f001 fe9d 	bl	800c2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a5a0:	2038      	movs	r0, #56	; 0x38
 800a5a2:	f001 feb6 	bl	800c312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	203a      	movs	r0, #58	; 0x3a
 800a5ac:	f001 fe95 	bl	800c2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800a5b0:	203a      	movs	r0, #58	; 0x3a
 800a5b2:	f001 feae 	bl	800c312 <HAL_NVIC_EnableIRQ>

}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	40023800 	.word	0x40023800

0800a5c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08a      	sub	sp, #40	; 0x28
 800a5c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5ca:	f107 0314 	add.w	r3, r7, #20
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	605a      	str	r2, [r3, #4]
 800a5d4:	609a      	str	r2, [r3, #8]
 800a5d6:	60da      	str	r2, [r3, #12]
 800a5d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a5da:	2300      	movs	r3, #0
 800a5dc:	613b      	str	r3, [r7, #16]
 800a5de:	4b59      	ldr	r3, [pc, #356]	; (800a744 <MX_GPIO_Init+0x180>)
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	4a58      	ldr	r2, [pc, #352]	; (800a744 <MX_GPIO_Init+0x180>)
 800a5e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a5ea:	4b56      	ldr	r3, [pc, #344]	; (800a744 <MX_GPIO_Init+0x180>)
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f2:	613b      	str	r3, [r7, #16]
 800a5f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	4b52      	ldr	r3, [pc, #328]	; (800a744 <MX_GPIO_Init+0x180>)
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	4a51      	ldr	r2, [pc, #324]	; (800a744 <MX_GPIO_Init+0x180>)
 800a600:	f043 0304 	orr.w	r3, r3, #4
 800a604:	6313      	str	r3, [r2, #48]	; 0x30
 800a606:	4b4f      	ldr	r3, [pc, #316]	; (800a744 <MX_GPIO_Init+0x180>)
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	f003 0304 	and.w	r3, r3, #4
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a612:	2300      	movs	r3, #0
 800a614:	60bb      	str	r3, [r7, #8]
 800a616:	4b4b      	ldr	r3, [pc, #300]	; (800a744 <MX_GPIO_Init+0x180>)
 800a618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61a:	4a4a      	ldr	r2, [pc, #296]	; (800a744 <MX_GPIO_Init+0x180>)
 800a61c:	f043 0301 	orr.w	r3, r3, #1
 800a620:	6313      	str	r3, [r2, #48]	; 0x30
 800a622:	4b48      	ldr	r3, [pc, #288]	; (800a744 <MX_GPIO_Init+0x180>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	60bb      	str	r3, [r7, #8]
 800a62c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a62e:	2300      	movs	r3, #0
 800a630:	607b      	str	r3, [r7, #4]
 800a632:	4b44      	ldr	r3, [pc, #272]	; (800a744 <MX_GPIO_Init+0x180>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	4a43      	ldr	r2, [pc, #268]	; (800a744 <MX_GPIO_Init+0x180>)
 800a638:	f043 0302 	orr.w	r3, r3, #2
 800a63c:	6313      	str	r3, [r2, #48]	; 0x30
 800a63e:	4b41      	ldr	r3, [pc, #260]	; (800a744 <MX_GPIO_Init+0x180>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	f003 0302 	and.w	r3, r3, #2
 800a646:	607b      	str	r3, [r7, #4]
 800a648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a64a:	2300      	movs	r3, #0
 800a64c:	603b      	str	r3, [r7, #0]
 800a64e:	4b3d      	ldr	r3, [pc, #244]	; (800a744 <MX_GPIO_Init+0x180>)
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	4a3c      	ldr	r2, [pc, #240]	; (800a744 <MX_GPIO_Init+0x180>)
 800a654:	f043 0308 	orr.w	r3, r3, #8
 800a658:	6313      	str	r3, [r2, #48]	; 0x30
 800a65a:	4b3a      	ldr	r3, [pc, #232]	; (800a744 <MX_GPIO_Init+0x180>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800a666:	2200      	movs	r2, #0
 800a668:	f44f 7141 	mov.w	r1, #772	; 0x304
 800a66c:	4836      	ldr	r0, [pc, #216]	; (800a748 <MX_GPIO_Init+0x184>)
 800a66e:	f002 fd7b 	bl	800d168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800a672:	2200      	movs	r2, #0
 800a674:	2105      	movs	r1, #5
 800a676:	4835      	ldr	r0, [pc, #212]	; (800a74c <MX_GPIO_Init+0x188>)
 800a678:	f002 fd76 	bl	800d168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800a67c:	2200      	movs	r2, #0
 800a67e:	2104      	movs	r1, #4
 800a680:	4833      	ldr	r0, [pc, #204]	; (800a750 <MX_GPIO_Init+0x18c>)
 800a682:	f002 fd71 	bl	800d168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a686:	2200      	movs	r2, #0
 800a688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a68c:	4831      	ldr	r0, [pc, #196]	; (800a754 <MX_GPIO_Init+0x190>)
 800a68e:	f002 fd6b 	bl	800d168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800a692:	f44f 7341 	mov.w	r3, #772	; 0x304
 800a696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a698:	2301      	movs	r3, #1
 800a69a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a69c:	2300      	movs	r3, #0
 800a69e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6a4:	f107 0314 	add.w	r3, r7, #20
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4827      	ldr	r0, [pc, #156]	; (800a748 <MX_GPIO_Init+0x184>)
 800a6ac:	f002 fbc2 	bl	800ce34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a6b0:	2305      	movs	r3, #5
 800a6b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6c0:	f107 0314 	add.w	r3, r7, #20
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4821      	ldr	r0, [pc, #132]	; (800a74c <MX_GPIO_Init+0x188>)
 800a6c8:	f002 fbb4 	bl	800ce34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800a6cc:	f241 0304 	movw	r3, #4100	; 0x1004
 800a6d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6da:	f107 0314 	add.w	r3, r7, #20
 800a6de:	4619      	mov	r1, r3
 800a6e0:	481c      	ldr	r0, [pc, #112]	; (800a754 <MX_GPIO_Init+0x190>)
 800a6e2:	f002 fba7 	bl	800ce34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800a6e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6f4:	f107 0314 	add.w	r3, r7, #20
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	4814      	ldr	r0, [pc, #80]	; (800a74c <MX_GPIO_Init+0x188>)
 800a6fc:	f002 fb9a 	bl	800ce34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a700:	2304      	movs	r3, #4
 800a702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a704:	2301      	movs	r3, #1
 800a706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a708:	2300      	movs	r3, #0
 800a70a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a70c:	2300      	movs	r3, #0
 800a70e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a710:	f107 0314 	add.w	r3, r7, #20
 800a714:	4619      	mov	r1, r3
 800a716:	480e      	ldr	r0, [pc, #56]	; (800a750 <MX_GPIO_Init+0x18c>)
 800a718:	f002 fb8c 	bl	800ce34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a71c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a722:	2301      	movs	r3, #1
 800a724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a726:	2300      	movs	r3, #0
 800a728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a72a:	2300      	movs	r3, #0
 800a72c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a72e:	f107 0314 	add.w	r3, r7, #20
 800a732:	4619      	mov	r1, r3
 800a734:	4807      	ldr	r0, [pc, #28]	; (800a754 <MX_GPIO_Init+0x190>)
 800a736:	f002 fb7d 	bl	800ce34 <HAL_GPIO_Init>

}
 800a73a:	bf00      	nop
 800a73c:	3728      	adds	r7, #40	; 0x28
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	40023800 	.word	0x40023800
 800a748:	40020800 	.word	0x40020800
 800a74c:	40020000 	.word	0x40020000
 800a750:	40020c00 	.word	0x40020c00
 800a754:	40020400 	.word	0x40020400

0800a758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a758:	b480      	push	{r7}
 800a75a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a75c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a75e:	e7fe      	b.n	800a75e <Error_Handler+0x6>

0800a760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a766:	2300      	movs	r3, #0
 800a768:	607b      	str	r3, [r7, #4]
 800a76a:	4b13      	ldr	r3, [pc, #76]	; (800a7b8 <HAL_MspInit+0x58>)
 800a76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76e:	4a12      	ldr	r2, [pc, #72]	; (800a7b8 <HAL_MspInit+0x58>)
 800a770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a774:	6453      	str	r3, [r2, #68]	; 0x44
 800a776:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <HAL_MspInit+0x58>)
 800a778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a77e:	607b      	str	r3, [r7, #4]
 800a780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a782:	2300      	movs	r3, #0
 800a784:	603b      	str	r3, [r7, #0]
 800a786:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <HAL_MspInit+0x58>)
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	4a0b      	ldr	r2, [pc, #44]	; (800a7b8 <HAL_MspInit+0x58>)
 800a78c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a790:	6413      	str	r3, [r2, #64]	; 0x40
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <HAL_MspInit+0x58>)
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	2004      	movs	r0, #4
 800a7a4:	f001 fd99 	bl	800c2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800a7a8:	2004      	movs	r0, #4
 800a7aa:	f001 fdb2 	bl	800c312 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a7ae:	bf00      	nop
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	40023800 	.word	0x40023800

0800a7bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08c      	sub	sp, #48	; 0x30
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7c4:	f107 031c 	add.w	r3, r7, #28
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	605a      	str	r2, [r3, #4]
 800a7ce:	609a      	str	r2, [r3, #8]
 800a7d0:	60da      	str	r2, [r3, #12]
 800a7d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a73      	ldr	r2, [pc, #460]	; (800a9a8 <HAL_ADC_MspInit+0x1ec>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d17a      	bne.n	800a8d4 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a7de:	2300      	movs	r3, #0
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	4b72      	ldr	r3, [pc, #456]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e6:	4a71      	ldr	r2, [pc, #452]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a7e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a7ee:	4b6f      	ldr	r3, [pc, #444]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f6:	61bb      	str	r3, [r7, #24]
 800a7f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	617b      	str	r3, [r7, #20]
 800a7fe:	4b6b      	ldr	r3, [pc, #428]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	4a6a      	ldr	r2, [pc, #424]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a804:	f043 0304 	orr.w	r3, r3, #4
 800a808:	6313      	str	r3, [r2, #48]	; 0x30
 800a80a:	4b68      	ldr	r3, [pc, #416]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80e:	f003 0304 	and.w	r3, r3, #4
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a816:	2300      	movs	r3, #0
 800a818:	613b      	str	r3, [r7, #16]
 800a81a:	4b64      	ldr	r3, [pc, #400]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81e:	4a63      	ldr	r2, [pc, #396]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a820:	f043 0302 	orr.w	r3, r3, #2
 800a824:	6313      	str	r3, [r2, #48]	; 0x30
 800a826:	4b61      	ldr	r3, [pc, #388]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	613b      	str	r3, [r7, #16]
 800a830:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800a832:	2311      	movs	r3, #17
 800a834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a836:	2303      	movs	r3, #3
 800a838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a83e:	f107 031c 	add.w	r3, r7, #28
 800a842:	4619      	mov	r1, r3
 800a844:	485a      	ldr	r0, [pc, #360]	; (800a9b0 <HAL_ADC_MspInit+0x1f4>)
 800a846:	f002 faf5 	bl	800ce34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a84a:	2302      	movs	r3, #2
 800a84c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a84e:	2303      	movs	r3, #3
 800a850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a852:	2300      	movs	r3, #0
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a856:	f107 031c 	add.w	r3, r7, #28
 800a85a:	4619      	mov	r1, r3
 800a85c:	4855      	ldr	r0, [pc, #340]	; (800a9b4 <HAL_ADC_MspInit+0x1f8>)
 800a85e:	f002 fae9 	bl	800ce34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800a862:	4b55      	ldr	r3, [pc, #340]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a864:	4a55      	ldr	r2, [pc, #340]	; (800a9bc <HAL_ADC_MspInit+0x200>)
 800a866:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800a868:	4b53      	ldr	r3, [pc, #332]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a86e:	4b52      	ldr	r3, [pc, #328]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a870:	2200      	movs	r2, #0
 800a872:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a874:	4b50      	ldr	r3, [pc, #320]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a876:	2200      	movs	r2, #0
 800a878:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a87a:	4b4f      	ldr	r3, [pc, #316]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a87c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a880:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a882:	4b4d      	ldr	r3, [pc, #308]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a888:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a88a:	4b4b      	ldr	r3, [pc, #300]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a88c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a890:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a892:	4b49      	ldr	r3, [pc, #292]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a894:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a898:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a89a:	4b47      	ldr	r3, [pc, #284]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a8a0:	4b45      	ldr	r3, [pc, #276]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a8a6:	4844      	ldr	r0, [pc, #272]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a8a8:	f001 fd4e 	bl	800c348 <HAL_DMA_Init>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800a8b2:	f7ff ff51 	bl	800a758 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a3f      	ldr	r2, [pc, #252]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38
 800a8bc:	4a3e      	ldr	r2, [pc, #248]	; (800a9b8 <HAL_ADC_MspInit+0x1fc>)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	2012      	movs	r0, #18
 800a8c8:	f001 fd07 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a8cc:	2012      	movs	r0, #18
 800a8ce:	f001 fd20 	bl	800c312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800a8d2:	e065      	b.n	800a9a0 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a39      	ldr	r2, [pc, #228]	; (800a9c0 <HAL_ADC_MspInit+0x204>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d160      	bne.n	800a9a0 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	4b32      	ldr	r3, [pc, #200]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e6:	4a31      	ldr	r2, [pc, #196]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a8e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a8ee:	4b2f      	ldr	r3, [pc, #188]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60bb      	str	r3, [r7, #8]
 800a8fe:	4b2b      	ldr	r3, [pc, #172]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a902:	4a2a      	ldr	r2, [pc, #168]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a904:	f043 0304 	orr.w	r3, r3, #4
 800a908:	6313      	str	r3, [r2, #48]	; 0x30
 800a90a:	4b28      	ldr	r3, [pc, #160]	; (800a9ac <HAL_ADC_MspInit+0x1f0>)
 800a90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90e:	f003 0304 	and.w	r3, r3, #4
 800a912:	60bb      	str	r3, [r7, #8]
 800a914:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800a916:	2322      	movs	r3, #34	; 0x22
 800a918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a91a:	2303      	movs	r3, #3
 800a91c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a922:	f107 031c 	add.w	r3, r7, #28
 800a926:	4619      	mov	r1, r3
 800a928:	4821      	ldr	r0, [pc, #132]	; (800a9b0 <HAL_ADC_MspInit+0x1f4>)
 800a92a:	f002 fa83 	bl	800ce34 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800a92e:	4b25      	ldr	r3, [pc, #148]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a930:	4a25      	ldr	r2, [pc, #148]	; (800a9c8 <HAL_ADC_MspInit+0x20c>)
 800a932:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800a934:	4b23      	ldr	r3, [pc, #140]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a93a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a93c:	4b21      	ldr	r3, [pc, #132]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a93e:	2200      	movs	r2, #0
 800a940:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800a942:	4b20      	ldr	r3, [pc, #128]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a944:	2200      	movs	r2, #0
 800a946:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800a948:	4b1e      	ldr	r3, [pc, #120]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a94a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a94e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a950:	4b1c      	ldr	r3, [pc, #112]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a956:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a958:	4b1a      	ldr	r3, [pc, #104]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a95a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a95e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800a960:	4b18      	ldr	r3, [pc, #96]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a962:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a966:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800a968:	4b16      	ldr	r3, [pc, #88]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a96e:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a970:	2200      	movs	r2, #0
 800a972:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800a974:	4813      	ldr	r0, [pc, #76]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a976:	f001 fce7 	bl	800c348 <HAL_DMA_Init>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800a980:	f7ff feea 	bl	800a758 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a0f      	ldr	r2, [pc, #60]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a988:	639a      	str	r2, [r3, #56]	; 0x38
 800a98a:	4a0e      	ldr	r2, [pc, #56]	; (800a9c4 <HAL_ADC_MspInit+0x208>)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a990:	2200      	movs	r2, #0
 800a992:	2100      	movs	r1, #0
 800a994:	2012      	movs	r0, #18
 800a996:	f001 fca0 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a99a:	2012      	movs	r0, #18
 800a99c:	f001 fcb9 	bl	800c312 <HAL_NVIC_EnableIRQ>
}
 800a9a0:	bf00      	nop
 800a9a2:	3730      	adds	r7, #48	; 0x30
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	40012000 	.word	0x40012000
 800a9ac:	40023800 	.word	0x40023800
 800a9b0:	40020800 	.word	0x40020800
 800a9b4:	40020400 	.word	0x40020400
 800a9b8:	20000648 	.word	0x20000648
 800a9bc:	40026410 	.word	0x40026410
 800a9c0:	40012100 	.word	0x40012100
 800a9c4:	20000728 	.word	0x20000728
 800a9c8:	40026440 	.word	0x40026440

0800a9cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08a      	sub	sp, #40	; 0x28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	605a      	str	r2, [r3, #4]
 800a9de:	609a      	str	r2, [r3, #8]
 800a9e0:	60da      	str	r2, [r3, #12]
 800a9e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a19      	ldr	r2, [pc, #100]	; (800aa50 <HAL_SPI_MspInit+0x84>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d12c      	bne.n	800aa48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	613b      	str	r3, [r7, #16]
 800a9f2:	4b18      	ldr	r3, [pc, #96]	; (800aa54 <HAL_SPI_MspInit+0x88>)
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f6:	4a17      	ldr	r2, [pc, #92]	; (800aa54 <HAL_SPI_MspInit+0x88>)
 800a9f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9fc:	6413      	str	r3, [r2, #64]	; 0x40
 800a9fe:	4b15      	ldr	r3, [pc, #84]	; (800aa54 <HAL_SPI_MspInit+0x88>)
 800aa00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa06:	613b      	str	r3, [r7, #16]
 800aa08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
 800aa0e:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <HAL_SPI_MspInit+0x88>)
 800aa10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa12:	4a10      	ldr	r2, [pc, #64]	; (800aa54 <HAL_SPI_MspInit+0x88>)
 800aa14:	f043 0304 	orr.w	r3, r3, #4
 800aa18:	6313      	str	r3, [r2, #48]	; 0x30
 800aa1a:	4b0e      	ldr	r3, [pc, #56]	; (800aa54 <HAL_SPI_MspInit+0x88>)
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1e:	f003 0304 	and.w	r3, r3, #4
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800aa26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aa2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa34:	2303      	movs	r3, #3
 800aa36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800aa38:	2306      	movs	r3, #6
 800aa3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa3c:	f107 0314 	add.w	r3, r7, #20
 800aa40:	4619      	mov	r1, r3
 800aa42:	4805      	ldr	r0, [pc, #20]	; (800aa58 <HAL_SPI_MspInit+0x8c>)
 800aa44:	f002 f9f6 	bl	800ce34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800aa48:	bf00      	nop
 800aa4a:	3728      	adds	r7, #40	; 0x28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	40003c00 	.word	0x40003c00
 800aa54:	40023800 	.word	0x40023800
 800aa58:	40020800 	.word	0x40020800

0800aa5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a40      	ldr	r2, [pc, #256]	; (800ab6c <HAL_TIM_Base_MspInit+0x110>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d116      	bne.n	800aa9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800aa6e:	2300      	movs	r3, #0
 800aa70:	617b      	str	r3, [r7, #20]
 800aa72:	4b3f      	ldr	r3, [pc, #252]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aa74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa76:	4a3e      	ldr	r2, [pc, #248]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aa78:	f043 0301 	orr.w	r3, r3, #1
 800aa7c:	6453      	str	r3, [r2, #68]	; 0x44
 800aa7e:	4b3c      	ldr	r3, [pc, #240]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aa80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	2019      	movs	r0, #25
 800aa90:	f001 fc23 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800aa94:	2019      	movs	r0, #25
 800aa96:	f001 fc3c 	bl	800c312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800aa9a:	e062      	b.n	800ab62 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaa4:	d116      	bne.n	800aad4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	613b      	str	r3, [r7, #16]
 800aaaa:	4b31      	ldr	r3, [pc, #196]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaae:	4a30      	ldr	r2, [pc, #192]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aab0:	f043 0301 	orr.w	r3, r3, #1
 800aab4:	6413      	str	r3, [r2, #64]	; 0x40
 800aab6:	4b2e      	ldr	r3, [pc, #184]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaba:	f003 0301 	and.w	r3, r3, #1
 800aabe:	613b      	str	r3, [r7, #16]
 800aac0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800aac2:	2200      	movs	r2, #0
 800aac4:	2100      	movs	r1, #0
 800aac6:	201c      	movs	r0, #28
 800aac8:	f001 fc07 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800aacc:	201c      	movs	r0, #28
 800aace:	f001 fc20 	bl	800c312 <HAL_NVIC_EnableIRQ>
}
 800aad2:	e046      	b.n	800ab62 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a26      	ldr	r2, [pc, #152]	; (800ab74 <HAL_TIM_Base_MspInit+0x118>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d116      	bne.n	800ab0c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	4b23      	ldr	r3, [pc, #140]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	4a22      	ldr	r2, [pc, #136]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aae8:	f043 0308 	orr.w	r3, r3, #8
 800aaec:	6413      	str	r3, [r2, #64]	; 0x40
 800aaee:	4b20      	ldr	r3, [pc, #128]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	f003 0308 	and.w	r3, r3, #8
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800aafa:	2200      	movs	r2, #0
 800aafc:	2100      	movs	r1, #0
 800aafe:	2032      	movs	r0, #50	; 0x32
 800ab00:	f001 fbeb 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800ab04:	2032      	movs	r0, #50	; 0x32
 800ab06:	f001 fc04 	bl	800c312 <HAL_NVIC_EnableIRQ>
}
 800ab0a:	e02a      	b.n	800ab62 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a19      	ldr	r2, [pc, #100]	; (800ab78 <HAL_TIM_Base_MspInit+0x11c>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d125      	bne.n	800ab62 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800ab16:	2300      	movs	r3, #0
 800ab18:	60bb      	str	r3, [r7, #8]
 800ab1a:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800ab1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab1e:	4a14      	ldr	r2, [pc, #80]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800ab20:	f043 0302 	orr.w	r3, r3, #2
 800ab24:	6453      	str	r3, [r2, #68]	; 0x44
 800ab26:	4b12      	ldr	r3, [pc, #72]	; (800ab70 <HAL_TIM_Base_MspInit+0x114>)
 800ab28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	60bb      	str	r3, [r7, #8]
 800ab30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800ab32:	2200      	movs	r2, #0
 800ab34:	2102      	movs	r1, #2
 800ab36:	202c      	movs	r0, #44	; 0x2c
 800ab38:	f001 fbcf 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800ab3c:	202c      	movs	r0, #44	; 0x2c
 800ab3e:	f001 fbe8 	bl	800c312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800ab42:	2200      	movs	r2, #0
 800ab44:	2100      	movs	r1, #0
 800ab46:	202d      	movs	r0, #45	; 0x2d
 800ab48:	f001 fbc7 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800ab4c:	202d      	movs	r0, #45	; 0x2d
 800ab4e:	f001 fbe0 	bl	800c312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800ab52:	2200      	movs	r2, #0
 800ab54:	2100      	movs	r1, #0
 800ab56:	202e      	movs	r0, #46	; 0x2e
 800ab58:	f001 fbbf 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800ab5c:	202e      	movs	r0, #46	; 0x2e
 800ab5e:	f001 fbd8 	bl	800c312 <HAL_NVIC_EnableIRQ>
}
 800ab62:	bf00      	nop
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40023800 	.word	0x40023800
 800ab74:	40000c00 	.word	0x40000c00
 800ab78:	40010400 	.word	0x40010400

0800ab7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08c      	sub	sp, #48	; 0x30
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab84:	f107 031c 	add.w	r3, r7, #28
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
 800ab8c:	605a      	str	r2, [r3, #4]
 800ab8e:	609a      	str	r2, [r3, #8]
 800ab90:	60da      	str	r2, [r3, #12]
 800ab92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a3a      	ldr	r2, [pc, #232]	; (800ac84 <HAL_TIM_Encoder_MspInit+0x108>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d134      	bne.n	800ac08 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61bb      	str	r3, [r7, #24]
 800aba2:	4b39      	ldr	r3, [pc, #228]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800aba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba6:	4a38      	ldr	r2, [pc, #224]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800aba8:	f043 0302 	orr.w	r3, r3, #2
 800abac:	6413      	str	r3, [r2, #64]	; 0x40
 800abae:	4b36      	ldr	r3, [pc, #216]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800abb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb2:	f003 0302 	and.w	r3, r3, #2
 800abb6:	61bb      	str	r3, [r7, #24]
 800abb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abba:	2300      	movs	r3, #0
 800abbc:	617b      	str	r3, [r7, #20]
 800abbe:	4b32      	ldr	r3, [pc, #200]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800abc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc2:	4a31      	ldr	r2, [pc, #196]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800abc4:	f043 0301 	orr.w	r3, r3, #1
 800abc8:	6313      	str	r3, [r2, #48]	; 0x30
 800abca:	4b2f      	ldr	r3, [pc, #188]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800abcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800abd6:	23c0      	movs	r3, #192	; 0xc0
 800abd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abda:	2302      	movs	r3, #2
 800abdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abe2:	2300      	movs	r3, #0
 800abe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800abe6:	2302      	movs	r3, #2
 800abe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abea:	f107 031c 	add.w	r3, r7, #28
 800abee:	4619      	mov	r1, r3
 800abf0:	4826      	ldr	r0, [pc, #152]	; (800ac8c <HAL_TIM_Encoder_MspInit+0x110>)
 800abf2:	f002 f91f 	bl	800ce34 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800abf6:	2200      	movs	r2, #0
 800abf8:	2100      	movs	r1, #0
 800abfa:	201d      	movs	r0, #29
 800abfc:	f001 fb6d 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ac00:	201d      	movs	r0, #29
 800ac02:	f001 fb86 	bl	800c312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800ac06:	e038      	b.n	800ac7a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a20      	ldr	r2, [pc, #128]	; (800ac90 <HAL_TIM_Encoder_MspInit+0x114>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d133      	bne.n	800ac7a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ac12:	2300      	movs	r3, #0
 800ac14:	613b      	str	r3, [r7, #16]
 800ac16:	4b1c      	ldr	r3, [pc, #112]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ac18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1a:	4a1b      	ldr	r2, [pc, #108]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ac1c:	f043 0304 	orr.w	r3, r3, #4
 800ac20:	6413      	str	r3, [r2, #64]	; 0x40
 800ac22:	4b19      	ldr	r3, [pc, #100]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ac24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac26:	f003 0304 	and.w	r3, r3, #4
 800ac2a:	613b      	str	r3, [r7, #16]
 800ac2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
 800ac32:	4b15      	ldr	r3, [pc, #84]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac36:	4a14      	ldr	r2, [pc, #80]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ac38:	f043 0302 	orr.w	r3, r3, #2
 800ac3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac3e:	4b12      	ldr	r3, [pc, #72]	; (800ac88 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ac4a:	23c0      	movs	r3, #192	; 0xc0
 800ac4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac4e:	2302      	movs	r3, #2
 800ac50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac56:	2300      	movs	r3, #0
 800ac58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac5e:	f107 031c 	add.w	r3, r7, #28
 800ac62:	4619      	mov	r1, r3
 800ac64:	480b      	ldr	r0, [pc, #44]	; (800ac94 <HAL_TIM_Encoder_MspInit+0x118>)
 800ac66:	f002 f8e5 	bl	800ce34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	201e      	movs	r0, #30
 800ac70:	f001 fb33 	bl	800c2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800ac74:	201e      	movs	r0, #30
 800ac76:	f001 fb4c 	bl	800c312 <HAL_NVIC_EnableIRQ>
}
 800ac7a:	bf00      	nop
 800ac7c:	3730      	adds	r7, #48	; 0x30
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	40000400 	.word	0x40000400
 800ac88:	40023800 	.word	0x40023800
 800ac8c:	40020000 	.word	0x40020000
 800ac90:	40000800 	.word	0x40000800
 800ac94:	40020400 	.word	0x40020400

0800ac98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08c      	sub	sp, #48	; 0x30
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aca0:	f107 031c 	add.w	r3, r7, #28
 800aca4:	2200      	movs	r2, #0
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	605a      	str	r2, [r3, #4]
 800acaa:	609a      	str	r2, [r3, #8]
 800acac:	60da      	str	r2, [r3, #12]
 800acae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb8:	d11e      	bne.n	800acf8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acba:	2300      	movs	r3, #0
 800acbc:	61bb      	str	r3, [r7, #24]
 800acbe:	4b43      	ldr	r3, [pc, #268]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800acc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc2:	4a42      	ldr	r2, [pc, #264]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800acc4:	f043 0301 	orr.w	r3, r3, #1
 800acc8:	6313      	str	r3, [r2, #48]	; 0x30
 800acca:	4b40      	ldr	r3, [pc, #256]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800accc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	61bb      	str	r3, [r7, #24]
 800acd4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800acd6:	2308      	movs	r3, #8
 800acd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acda:	2302      	movs	r3, #2
 800acdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ace2:	2303      	movs	r3, #3
 800ace4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ace6:	2301      	movs	r3, #1
 800ace8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acea:	f107 031c 	add.w	r3, r7, #28
 800acee:	4619      	mov	r1, r3
 800acf0:	4837      	ldr	r0, [pc, #220]	; (800add0 <HAL_TIM_MspPostInit+0x138>)
 800acf2:	f002 f89f 	bl	800ce34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800acf6:	e064      	b.n	800adc2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a35      	ldr	r2, [pc, #212]	; (800add4 <HAL_TIM_MspPostInit+0x13c>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d11e      	bne.n	800ad40 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
 800ad06:	4b31      	ldr	r3, [pc, #196]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	4a30      	ldr	r2, [pc, #192]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad0c:	f043 0301 	orr.w	r3, r3, #1
 800ad10:	6313      	str	r3, [r2, #48]	; 0x30
 800ad12:	4b2e      	ldr	r3, [pc, #184]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]
 800ad1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ad1e:	2302      	movs	r3, #2
 800ad20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad22:	2302      	movs	r3, #2
 800ad24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ad2e:	2302      	movs	r3, #2
 800ad30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad32:	f107 031c 	add.w	r3, r7, #28
 800ad36:	4619      	mov	r1, r3
 800ad38:	4825      	ldr	r0, [pc, #148]	; (800add0 <HAL_TIM_MspPostInit+0x138>)
 800ad3a:	f002 f87b 	bl	800ce34 <HAL_GPIO_Init>
}
 800ad3e:	e040      	b.n	800adc2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a24      	ldr	r2, [pc, #144]	; (800add8 <HAL_TIM_MspPostInit+0x140>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d13b      	bne.n	800adc2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	613b      	str	r3, [r7, #16]
 800ad4e:	4b1f      	ldr	r3, [pc, #124]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad52:	4a1e      	ldr	r2, [pc, #120]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad54:	f043 0301 	orr.w	r3, r3, #1
 800ad58:	6313      	str	r3, [r2, #48]	; 0x30
 800ad5a:	4b1c      	ldr	r3, [pc, #112]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	4b18      	ldr	r3, [pc, #96]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6e:	4a17      	ldr	r2, [pc, #92]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad70:	f043 0304 	orr.w	r3, r3, #4
 800ad74:	6313      	str	r3, [r2, #48]	; 0x30
 800ad76:	4b15      	ldr	r3, [pc, #84]	; (800adcc <HAL_TIM_MspPostInit+0x134>)
 800ad78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ad82:	2320      	movs	r3, #32
 800ad84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad86:	2302      	movs	r3, #2
 800ad88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ad92:	2303      	movs	r3, #3
 800ad94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad96:	f107 031c 	add.w	r3, r7, #28
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	480c      	ldr	r0, [pc, #48]	; (800add0 <HAL_TIM_MspPostInit+0x138>)
 800ad9e:	f002 f849 	bl	800ce34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ada2:	2340      	movs	r3, #64	; 0x40
 800ada4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ada6:	2302      	movs	r3, #2
 800ada8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adaa:	2300      	movs	r3, #0
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adae:	2300      	movs	r3, #0
 800adb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800adb2:	2303      	movs	r3, #3
 800adb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800adb6:	f107 031c 	add.w	r3, r7, #28
 800adba:	4619      	mov	r1, r3
 800adbc:	4807      	ldr	r0, [pc, #28]	; (800addc <HAL_TIM_MspPostInit+0x144>)
 800adbe:	f002 f839 	bl	800ce34 <HAL_GPIO_Init>
}
 800adc2:	bf00      	nop
 800adc4:	3730      	adds	r7, #48	; 0x30
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	40023800 	.word	0x40023800
 800add0:	40020000 	.word	0x40020000
 800add4:	40000c00 	.word	0x40000c00
 800add8:	40010400 	.word	0x40010400
 800addc:	40020800 	.word	0x40020800

0800ade0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ade8:	f107 0314 	add.w	r3, r7, #20
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	609a      	str	r2, [r3, #8]
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a19      	ldr	r2, [pc, #100]	; (800ae64 <HAL_UART_MspInit+0x84>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d12c      	bne.n	800ae5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ae02:	2300      	movs	r3, #0
 800ae04:	613b      	str	r3, [r7, #16]
 800ae06:	4b18      	ldr	r3, [pc, #96]	; (800ae68 <HAL_UART_MspInit+0x88>)
 800ae08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0a:	4a17      	ldr	r2, [pc, #92]	; (800ae68 <HAL_UART_MspInit+0x88>)
 800ae0c:	f043 0310 	orr.w	r3, r3, #16
 800ae10:	6453      	str	r3, [r2, #68]	; 0x44
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <HAL_UART_MspInit+0x88>)
 800ae14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae16:	f003 0310 	and.w	r3, r3, #16
 800ae1a:	613b      	str	r3, [r7, #16]
 800ae1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	4b11      	ldr	r3, [pc, #68]	; (800ae68 <HAL_UART_MspInit+0x88>)
 800ae24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae26:	4a10      	ldr	r2, [pc, #64]	; (800ae68 <HAL_UART_MspInit+0x88>)
 800ae28:	f043 0301 	orr.w	r3, r3, #1
 800ae2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae2e:	4b0e      	ldr	r3, [pc, #56]	; (800ae68 <HAL_UART_MspInit+0x88>)
 800ae30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ae3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ae3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae40:	2302      	movs	r3, #2
 800ae42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ae4c:	2307      	movs	r3, #7
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae50:	f107 0314 	add.w	r3, r7, #20
 800ae54:	4619      	mov	r1, r3
 800ae56:	4805      	ldr	r0, [pc, #20]	; (800ae6c <HAL_UART_MspInit+0x8c>)
 800ae58:	f001 ffec 	bl	800ce34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ae5c:	bf00      	nop
 800ae5e:	3728      	adds	r7, #40	; 0x28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	40011000 	.word	0x40011000
 800ae68:	40023800 	.word	0x40023800
 800ae6c:	40020000 	.word	0x40020000

0800ae70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ae74:	e7fe      	b.n	800ae74 <NMI_Handler+0x4>

0800ae76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae76:	b480      	push	{r7}
 800ae78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae7a:	e7fe      	b.n	800ae7a <HardFault_Handler+0x4>

0800ae7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ae80:	e7fe      	b.n	800ae80 <MemManage_Handler+0x4>

0800ae82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae82:	b480      	push	{r7}
 800ae84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ae86:	e7fe      	b.n	800ae86 <BusFault_Handler+0x4>

0800ae88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae8c:	e7fe      	b.n	800ae8c <UsageFault_Handler+0x4>

0800ae8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ae92:	bf00      	nop
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aea0:	bf00      	nop
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800aeae:	bf00      	nop
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800aebc:	f000 fb5e 	bl	800b57c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800aec0:	bf00      	nop
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800aec8:	f001 fe1c 	bl	800cb04 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800aecc:	bf00      	nop
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800aed4:	4803      	ldr	r0, [pc, #12]	; (800aee4 <ADC_IRQHandler+0x14>)
 800aed6:	f000 fbd6 	bl	800b686 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800aeda:	4803      	ldr	r0, [pc, #12]	; (800aee8 <ADC_IRQHandler+0x18>)
 800aedc:	f000 fbd3 	bl	800b686 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800aee0:	bf00      	nop
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	200005c0 	.word	0x200005c0
 800aee8:	200004a0 	.word	0x200004a0

0800aeec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800aef0:	4802      	ldr	r0, [pc, #8]	; (800aefc <TIM1_UP_TIM10_IRQHandler+0x10>)
 800aef2:	f003 f96b 	bl	800e1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800aef6:	bf00      	nop
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	200006a8 	.word	0x200006a8

0800af00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800af04:	4802      	ldr	r0, [pc, #8]	; (800af10 <TIM2_IRQHandler+0x10>)
 800af06:	f003 f961 	bl	800e1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800af0a:	bf00      	nop
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	200006e8 	.word	0x200006e8

0800af14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800af18:	4802      	ldr	r0, [pc, #8]	; (800af24 <TIM3_IRQHandler+0x10>)
 800af1a:	f003 f957 	bl	800e1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800af1e:	bf00      	nop
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20000528 	.word	0x20000528

0800af28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800af2c:	4802      	ldr	r0, [pc, #8]	; (800af38 <TIM4_IRQHandler+0x10>)
 800af2e:	f003 f94d 	bl	800e1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800af32:	bf00      	nop
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20000460 	.word	0x20000460

0800af3c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800af40:	4802      	ldr	r0, [pc, #8]	; (800af4c <TIM8_UP_TIM13_IRQHandler+0x10>)
 800af42:	f003 f943 	bl	800e1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800af46:	bf00      	nop
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000420 	.word	0x20000420

0800af50 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800af54:	4802      	ldr	r0, [pc, #8]	; (800af60 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800af56:	f003 f939 	bl	800e1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800af5a:	bf00      	nop
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20000420 	.word	0x20000420

0800af64 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800af68:	4802      	ldr	r0, [pc, #8]	; (800af74 <TIM8_CC_IRQHandler+0x10>)
 800af6a:	f003 f92f 	bl	800e1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800af6e:	bf00      	nop
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	20000420 	.word	0x20000420

0800af78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800af7c:	4802      	ldr	r0, [pc, #8]	; (800af88 <TIM5_IRQHandler+0x10>)
 800af7e:	f003 f925 	bl	800e1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800af82:	bf00      	nop
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	200004e8 	.word	0x200004e8

0800af8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800af90:	4802      	ldr	r0, [pc, #8]	; (800af9c <DMA2_Stream0_IRQHandler+0x10>)
 800af92:	f001 fb4f 	bl	800c634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800af96:	bf00      	nop
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20000648 	.word	0x20000648

0800afa0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800afa4:	4802      	ldr	r0, [pc, #8]	; (800afb0 <DMA2_Stream2_IRQHandler+0x10>)
 800afa6:	f001 fb45 	bl	800c634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800afaa:	bf00      	nop
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20000728 	.word	0x20000728

0800afb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800afc0:	2300      	movs	r3, #0
 800afc2:	617b      	str	r3, [r7, #20]
 800afc4:	e00a      	b.n	800afdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800afc6:	f3af 8000 	nop.w
 800afca:	4601      	mov	r1, r0
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	1c5a      	adds	r2, r3, #1
 800afd0:	60ba      	str	r2, [r7, #8]
 800afd2:	b2ca      	uxtb	r2, r1
 800afd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	3301      	adds	r3, #1
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	dbf0      	blt.n	800afc6 <_read+0x12>
	}

return len;
 800afe4:	687b      	ldr	r3, [r7, #4]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b086      	sub	sp, #24
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800affa:	2300      	movs	r3, #0
 800affc:	617b      	str	r3, [r7, #20]
 800affe:	e009      	b.n	800b014 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	60ba      	str	r2, [r7, #8]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fe fe17 	bl	8009c3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	3301      	adds	r3, #1
 800b012:	617b      	str	r3, [r7, #20]
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	429a      	cmp	r2, r3
 800b01a:	dbf1      	blt.n	800b000 <_write+0x12>
	}
	return len;
 800b01c:	687b      	ldr	r3, [r7, #4]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <_close>:

int _close(int file)
{
 800b026:	b480      	push	{r7}
 800b028:	b083      	sub	sp, #12
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
	return -1;
 800b02e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b032:	4618      	mov	r0, r3
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b03e:	b480      	push	{r7}
 800b040:	b083      	sub	sp, #12
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b04e:	605a      	str	r2, [r3, #4]
	return 0;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <_isatty>:

int _isatty(int file)
{
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
	return 1;
 800b066:	2301      	movs	r3, #1
}
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
	return 0;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
	...

0800b090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b098:	4a14      	ldr	r2, [pc, #80]	; (800b0ec <_sbrk+0x5c>)
 800b09a:	4b15      	ldr	r3, [pc, #84]	; (800b0f0 <_sbrk+0x60>)
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b0a4:	4b13      	ldr	r3, [pc, #76]	; (800b0f4 <_sbrk+0x64>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b0ac:	4b11      	ldr	r3, [pc, #68]	; (800b0f4 <_sbrk+0x64>)
 800b0ae:	4a12      	ldr	r2, [pc, #72]	; (800b0f8 <_sbrk+0x68>)
 800b0b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b0b2:	4b10      	ldr	r3, [pc, #64]	; (800b0f4 <_sbrk+0x64>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d207      	bcs.n	800b0d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b0c0:	f004 fd6a 	bl	800fb98 <__errno>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	230c      	movs	r3, #12
 800b0c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800b0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ce:	e009      	b.n	800b0e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b0d0:	4b08      	ldr	r3, [pc, #32]	; (800b0f4 <_sbrk+0x64>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b0d6:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <_sbrk+0x64>)
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4413      	add	r3, r2
 800b0de:	4a05      	ldr	r2, [pc, #20]	; (800b0f4 <_sbrk+0x64>)
 800b0e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20020000 	.word	0x20020000
 800b0f0:	00000400 	.word	0x00000400
 800b0f4:	20000400 	.word	0x20000400
 800b0f8:	200007b8 	.word	0x200007b8

0800b0fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b100:	4b08      	ldr	r3, [pc, #32]	; (800b124 <SystemInit+0x28>)
 800b102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b106:	4a07      	ldr	r2, [pc, #28]	; (800b124 <SystemInit+0x28>)
 800b108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b10c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b110:	4b04      	ldr	r3, [pc, #16]	; (800b124 <SystemInit+0x28>)
 800b112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b116:	609a      	str	r2, [r3, #8]
#endif
}
 800b118:	bf00      	nop
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	e000ed00 	.word	0xe000ed00

0800b128 <ADCStart>:

uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800b12c:	2203      	movs	r2, #3
 800b12e:	490a      	ldr	r1, [pc, #40]	; (800b158 <ADCStart+0x30>)
 800b130:	480a      	ldr	r0, [pc, #40]	; (800b15c <ADCStart+0x34>)
 800b132:	f000 fbe9 	bl	800b908 <HAL_ADC_Start_DMA>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <ADCStart+0x18>
	{
		Error_Handler();
 800b13c:	f7ff fb0c 	bl	800a758 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800b140:	2202      	movs	r2, #2
 800b142:	4907      	ldr	r1, [pc, #28]	; (800b160 <ADCStart+0x38>)
 800b144:	4807      	ldr	r0, [pc, #28]	; (800b164 <ADCStart+0x3c>)
 800b146:	f000 fbdf 	bl	800b908 <HAL_ADC_Start_DMA>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <ADCStart+0x2c>
	{
		Error_Handler();
 800b150:	f7ff fb02 	bl	800a758 <Error_Handler>
	}

}
 800b154:	bf00      	nop
 800b156:	bd80      	pop	{r7, pc}
 800b158:	20000404 	.word	0x20000404
 800b15c:	200005c0 	.word	0x200005c0
 800b160:	20000410 	.word	0x20000410
 800b164:	200004a0 	.word	0x200004a0

0800b168 <ADCStop>:
void ADCStop()
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800b16c:	4808      	ldr	r0, [pc, #32]	; (800b190 <ADCStop+0x28>)
 800b16e:	f000 fcbd 	bl	800baec <HAL_ADC_Stop_DMA>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <ADCStop+0x14>
	{
		Error_Handler();
 800b178:	f7ff faee 	bl	800a758 <Error_Handler>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800b17c:	4805      	ldr	r0, [pc, #20]	; (800b194 <ADCStop+0x2c>)
 800b17e:	f000 fcb5 	bl	800baec <HAL_ADC_Stop_DMA>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <ADCStop+0x24>
	{
		Error_Handler();
 800b188:	f7ff fae6 	bl	800a758 <Error_Handler>
	}
}
 800b18c:	bf00      	nop
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	200005c0 	.word	0x200005c0
 800b194:	200004a0 	.word	0x200004a0

0800b198 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800b19c:	213c      	movs	r1, #60	; 0x3c
 800b19e:	4804      	ldr	r0, [pc, #16]	; (800b1b0 <EncoderStart+0x18>)
 800b1a0:	f002 ff96 	bl	800e0d0 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800b1a4:	213c      	movs	r1, #60	; 0x3c
 800b1a6:	4803      	ldr	r0, [pc, #12]	; (800b1b4 <EncoderStart+0x1c>)
 800b1a8:	f002 ff92 	bl	800e0d0 <HAL_TIM_Encoder_Start>
}
 800b1ac:	bf00      	nop
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20000528 	.word	0x20000528
 800b1b4:	20000460 	.word	0x20000460

0800b1b8 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800b1bc:	213c      	movs	r1, #60	; 0x3c
 800b1be:	4804      	ldr	r0, [pc, #16]	; (800b1d0 <EncoderStop+0x18>)
 800b1c0:	f002 ffbd 	bl	800e13e <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800b1c4:	213c      	movs	r1, #60	; 0x3c
 800b1c6:	4803      	ldr	r0, [pc, #12]	; (800b1d4 <EncoderStop+0x1c>)
 800b1c8:	f002 ffb9 	bl	800e13e <HAL_TIM_Encoder_Stop>
}
 800b1cc:	bf00      	nop
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	20000528 	.word	0x20000528
 800b1d4:	20000460 	.word	0x20000460

0800b1d8 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800b1dc:	2100      	movs	r1, #0
 800b1de:	4804      	ldr	r0, [pc, #16]	; (800b1f0 <EmitterON+0x18>)
 800b1e0:	f002 fd52 	bl	800dc88 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	4802      	ldr	r0, [pc, #8]	; (800b1f0 <EmitterON+0x18>)
 800b1e8:	f003 fe0d 	bl	800ee06 <HAL_TIMEx_OCN_Start_IT>

}
 800b1ec:	bf00      	nop
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	20000420 	.word	0x20000420

0800b1f4 <EmitterOFF>:
void EmitterOFF()
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4804      	ldr	r0, [pc, #16]	; (800b20c <EmitterOFF+0x18>)
 800b1fc:	f002 fdc8 	bl	800dd90 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800b200:	2100      	movs	r1, #0
 800b202:	4802      	ldr	r0, [pc, #8]	; (800b20c <EmitterOFF+0x18>)
 800b204:	f003 fe54 	bl	800eeb0 <HAL_TIMEx_OCN_Stop_IT>

}
 800b208:	bf00      	nop
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	20000420 	.word	0x20000420

0800b210 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b07      	cmp	r3, #7
 800b21c:	f200 80ac 	bhi.w	800b378 <ChangeLED+0x168>
 800b220:	a201      	add	r2, pc, #4	; (adr r2, 800b228 <ChangeLED+0x18>)
 800b222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b226:	bf00      	nop
 800b228:	0800b249 	.word	0x0800b249
 800b22c:	0800b26f 	.word	0x0800b26f
 800b230:	0800b295 	.word	0x0800b295
 800b234:	0800b2bb 	.word	0x0800b2bb
 800b238:	0800b2e1 	.word	0x0800b2e1
 800b23c:	0800b307 	.word	0x0800b307
 800b240:	0800b32d 	.word	0x0800b32d
 800b244:	0800b353 	.word	0x0800b353
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b248:	2200      	movs	r2, #0
 800b24a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b24e:	484d      	ldr	r0, [pc, #308]	; (800b384 <ChangeLED+0x174>)
 800b250:	f001 ff8a 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b254:	2200      	movs	r2, #0
 800b256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b25a:	484a      	ldr	r0, [pc, #296]	; (800b384 <ChangeLED+0x174>)
 800b25c:	f001 ff84 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b260:	2200      	movs	r2, #0
 800b262:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b266:	4848      	ldr	r0, [pc, #288]	; (800b388 <ChangeLED+0x178>)
 800b268:	f001 ff7e 	bl	800d168 <HAL_GPIO_WritePin>
		break;
 800b26c:	e085      	b.n	800b37a <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b26e:	2201      	movs	r2, #1
 800b270:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b274:	4843      	ldr	r0, [pc, #268]	; (800b384 <ChangeLED+0x174>)
 800b276:	f001 ff77 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b27a:	2200      	movs	r2, #0
 800b27c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b280:	4840      	ldr	r0, [pc, #256]	; (800b384 <ChangeLED+0x174>)
 800b282:	f001 ff71 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b286:	2200      	movs	r2, #0
 800b288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b28c:	483e      	ldr	r0, [pc, #248]	; (800b388 <ChangeLED+0x178>)
 800b28e:	f001 ff6b 	bl	800d168 <HAL_GPIO_WritePin>
		break;
 800b292:	e072      	b.n	800b37a <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b294:	2200      	movs	r2, #0
 800b296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b29a:	483a      	ldr	r0, [pc, #232]	; (800b384 <ChangeLED+0x174>)
 800b29c:	f001 ff64 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2a6:	4837      	ldr	r0, [pc, #220]	; (800b384 <ChangeLED+0x174>)
 800b2a8:	f001 ff5e 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2b2:	4835      	ldr	r0, [pc, #212]	; (800b388 <ChangeLED+0x178>)
 800b2b4:	f001 ff58 	bl	800d168 <HAL_GPIO_WritePin>

		break;
 800b2b8:	e05f      	b.n	800b37a <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2c0:	4830      	ldr	r0, [pc, #192]	; (800b384 <ChangeLED+0x174>)
 800b2c2:	f001 ff51 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2cc:	482d      	ldr	r0, [pc, #180]	; (800b384 <ChangeLED+0x174>)
 800b2ce:	f001 ff4b 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2d8:	482b      	ldr	r0, [pc, #172]	; (800b388 <ChangeLED+0x178>)
 800b2da:	f001 ff45 	bl	800d168 <HAL_GPIO_WritePin>
		break;
 800b2de:	e04c      	b.n	800b37a <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2e6:	4827      	ldr	r0, [pc, #156]	; (800b384 <ChangeLED+0x174>)
 800b2e8:	f001 ff3e 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2f2:	4824      	ldr	r0, [pc, #144]	; (800b384 <ChangeLED+0x174>)
 800b2f4:	f001 ff38 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2fe:	4822      	ldr	r0, [pc, #136]	; (800b388 <ChangeLED+0x178>)
 800b300:	f001 ff32 	bl	800d168 <HAL_GPIO_WritePin>
		break;
 800b304:	e039      	b.n	800b37a <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b306:	2201      	movs	r2, #1
 800b308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b30c:	481d      	ldr	r0, [pc, #116]	; (800b384 <ChangeLED+0x174>)
 800b30e:	f001 ff2b 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b312:	2200      	movs	r2, #0
 800b314:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b318:	481a      	ldr	r0, [pc, #104]	; (800b384 <ChangeLED+0x174>)
 800b31a:	f001 ff25 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b31e:	2201      	movs	r2, #1
 800b320:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b324:	4818      	ldr	r0, [pc, #96]	; (800b388 <ChangeLED+0x178>)
 800b326:	f001 ff1f 	bl	800d168 <HAL_GPIO_WritePin>
		break;
 800b32a:	e026      	b.n	800b37a <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b32c:	2200      	movs	r2, #0
 800b32e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b332:	4814      	ldr	r0, [pc, #80]	; (800b384 <ChangeLED+0x174>)
 800b334:	f001 ff18 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b338:	2201      	movs	r2, #1
 800b33a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b33e:	4811      	ldr	r0, [pc, #68]	; (800b384 <ChangeLED+0x174>)
 800b340:	f001 ff12 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b344:	2201      	movs	r2, #1
 800b346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b34a:	480f      	ldr	r0, [pc, #60]	; (800b388 <ChangeLED+0x178>)
 800b34c:	f001 ff0c 	bl	800d168 <HAL_GPIO_WritePin>

		break;
 800b350:	e013      	b.n	800b37a <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b352:	2201      	movs	r2, #1
 800b354:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b358:	480a      	ldr	r0, [pc, #40]	; (800b384 <ChangeLED+0x174>)
 800b35a:	f001 ff05 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b35e:	2201      	movs	r2, #1
 800b360:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b364:	4807      	ldr	r0, [pc, #28]	; (800b384 <ChangeLED+0x174>)
 800b366:	f001 feff 	bl	800d168 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b36a:	2201      	movs	r2, #1
 800b36c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b370:	4805      	ldr	r0, [pc, #20]	; (800b388 <ChangeLED+0x178>)
 800b372:	f001 fef9 	bl	800d168 <HAL_GPIO_WritePin>

		break;
 800b376:	e000      	b.n	800b37a <ChangeLED+0x16a>
	default: break;
 800b378:	bf00      	nop

	}
}
 800b37a:	bf00      	nop
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	40020800 	.word	0x40020800
 800b388:	40020400 	.word	0x40020400

0800b38c <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800b390:	210c      	movs	r1, #12
 800b392:	4809      	ldr	r0, [pc, #36]	; (800b3b8 <Motor_PWM_Start+0x2c>)
 800b394:	f002 fdcc 	bl	800df30 <HAL_TIM_PWM_Start>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800b39e:	f7ff f9db 	bl	800a758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800b3a2:	2104      	movs	r1, #4
 800b3a4:	4805      	ldr	r0, [pc, #20]	; (800b3bc <Motor_PWM_Start+0x30>)
 800b3a6:	f002 fdc3 	bl	800df30 <HAL_TIM_PWM_Start>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800b3b0:	f7ff f9d2 	bl	800a758 <Error_Handler>
  }
#endif
}
 800b3b4:	bf00      	nop
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	200006e8 	.word	0x200006e8
 800b3bc:	200004e8 	.word	0x200004e8

0800b3c0 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
void Motor_Switch(int left, int right){
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dd05      	ble.n	800b3dc <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	2104      	movs	r1, #4
 800b3d4:	4828      	ldr	r0, [pc, #160]	; (800b478 <Motor_Switch+0xb8>)
 800b3d6:	f001 fec7 	bl	800d168 <HAL_GPIO_WritePin>
 800b3da:	e00a      	b.n	800b3f2 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	da07      	bge.n	800b3f2 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2104      	movs	r1, #4
 800b3e6:	4824      	ldr	r0, [pc, #144]	; (800b478 <Motor_Switch+0xb8>)
 800b3e8:	f001 febe 	bl	800d168 <HAL_GPIO_WritePin>
		left = -left;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	425b      	negs	r3, r3
 800b3f0:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dd05      	ble.n	800b404 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	481e      	ldr	r0, [pc, #120]	; (800b478 <Motor_Switch+0xb8>)
 800b3fe:	f001 feb3 	bl	800d168 <HAL_GPIO_WritePin>
 800b402:	e00a      	b.n	800b41a <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	da07      	bge.n	800b41a <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800b40a:	2201      	movs	r2, #1
 800b40c:	2101      	movs	r1, #1
 800b40e:	481a      	ldr	r0, [pc, #104]	; (800b478 <Motor_Switch+0xb8>)
 800b410:	f001 feaa 	bl	800d168 <HAL_GPIO_WritePin>
	  	right = -right;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	425b      	negs	r3, r3
 800b418:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7fc ffba 	bl	8008394 <__aeabi_i2d>
 800b420:	a313      	add	r3, pc, #76	; (adr r3, 800b470 <Motor_Switch+0xb0>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f7fd faaf 	bl	8008988 <__aeabi_dcmpgt>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <Motor_Switch+0x76>
 800b430:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800b434:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800b436:	6838      	ldr	r0, [r7, #0]
 800b438:	f7fc ffac 	bl	8008394 <__aeabi_i2d>
 800b43c:	a30c      	add	r3, pc, #48	; (adr r3, 800b470 <Motor_Switch+0xb0>)
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	f7fd faa1 	bl	8008988 <__aeabi_dcmpgt>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <Motor_Switch+0x92>
 800b44c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800b450:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800b452:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <Motor_Switch+0xbc>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800b45a:	4b09      	ldr	r3, [pc, #36]	; (800b480 <Motor_Switch+0xc0>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b462:	bf00      	nop
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	f3af 8000 	nop.w
 800b470:	00000000 	.word	0x00000000
 800b474:	40a3b000 	.word	0x40a3b000
 800b478:	40020000 	.word	0x40020000
 800b47c:	200006e8 	.word	0x200006e8
 800b480:	200004e8 	.word	0x200004e8

0800b484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b484:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b4bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b488:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b48a:	e003      	b.n	800b494 <LoopCopyDataInit>

0800b48c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b48c:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b48e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b490:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b492:	3104      	adds	r1, #4

0800b494 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b494:	480b      	ldr	r0, [pc, #44]	; (800b4c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b496:	4b0c      	ldr	r3, [pc, #48]	; (800b4c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b498:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b49a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b49c:	d3f6      	bcc.n	800b48c <CopyDataInit>
  ldr  r2, =_sbss
 800b49e:	4a0b      	ldr	r2, [pc, #44]	; (800b4cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b4a0:	e002      	b.n	800b4a8 <LoopFillZerobss>

0800b4a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b4a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b4a4:	f842 3b04 	str.w	r3, [r2], #4

0800b4a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b4a8:	4b09      	ldr	r3, [pc, #36]	; (800b4d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b4aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b4ac:	d3f9      	bcc.n	800b4a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b4ae:	f7ff fe25 	bl	800b0fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b4b2:	f004 fb77 	bl	800fba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b4b6:	f7fe fbd3 	bl	8009c60 <main>
  bx  lr    
 800b4ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b4bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b4c0:	08012650 	.word	0x08012650
  ldr  r0, =_sdata
 800b4c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b4c8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800b4cc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800b4d0:	200007b4 	.word	0x200007b4

0800b4d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b4d4:	e7fe      	b.n	800b4d4 <CAN1_RX0_IRQHandler>
	...

0800b4d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b4dc:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <HAL_Init+0x40>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0d      	ldr	r2, [pc, #52]	; (800b518 <HAL_Init+0x40>)
 800b4e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b4e8:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <HAL_Init+0x40>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a0a      	ldr	r2, [pc, #40]	; (800b518 <HAL_Init+0x40>)
 800b4ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b4f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b4f4:	4b08      	ldr	r3, [pc, #32]	; (800b518 <HAL_Init+0x40>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a07      	ldr	r2, [pc, #28]	; (800b518 <HAL_Init+0x40>)
 800b4fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b500:	2003      	movs	r0, #3
 800b502:	f000 fedf 	bl	800c2c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b506:	2000      	movs	r0, #0
 800b508:	f000 f808 	bl	800b51c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b50c:	f7ff f928 	bl	800a760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	40023c00 	.word	0x40023c00

0800b51c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b524:	4b12      	ldr	r3, [pc, #72]	; (800b570 <HAL_InitTick+0x54>)
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	4b12      	ldr	r3, [pc, #72]	; (800b574 <HAL_InitTick+0x58>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	4619      	mov	r1, r3
 800b52e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b532:	fbb3 f3f1 	udiv	r3, r3, r1
 800b536:	fbb2 f3f3 	udiv	r3, r2, r3
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 fef7 	bl	800c32e <HAL_SYSTICK_Config>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d001      	beq.n	800b54a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e00e      	b.n	800b568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b0f      	cmp	r3, #15
 800b54e:	d80a      	bhi.n	800b566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b550:	2200      	movs	r2, #0
 800b552:	6879      	ldr	r1, [r7, #4]
 800b554:	f04f 30ff 	mov.w	r0, #4294967295
 800b558:	f000 febf 	bl	800c2da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b55c:	4a06      	ldr	r2, [pc, #24]	; (800b578 <HAL_InitTick+0x5c>)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	e000      	b.n	800b568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20000000 	.word	0x20000000
 800b574:	20000008 	.word	0x20000008
 800b578:	20000004 	.word	0x20000004

0800b57c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b57c:	b480      	push	{r7}
 800b57e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b580:	4b06      	ldr	r3, [pc, #24]	; (800b59c <HAL_IncTick+0x20>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	461a      	mov	r2, r3
 800b586:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <HAL_IncTick+0x24>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4413      	add	r3, r2
 800b58c:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <HAL_IncTick+0x24>)
 800b58e:	6013      	str	r3, [r2, #0]
}
 800b590:	bf00      	nop
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20000008 	.word	0x20000008
 800b5a0:	2000078c 	.word	0x2000078c

0800b5a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
  return uwTick;
 800b5a8:	4b03      	ldr	r3, [pc, #12]	; (800b5b8 <HAL_GetTick+0x14>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	2000078c 	.word	0x2000078c

0800b5bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b5c4:	f7ff ffee 	bl	800b5a4 <HAL_GetTick>
 800b5c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d4:	d005      	beq.n	800b5e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b5d6:	4b09      	ldr	r3, [pc, #36]	; (800b5fc <HAL_Delay+0x40>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	4413      	add	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b5e2:	bf00      	nop
 800b5e4:	f7ff ffde 	bl	800b5a4 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d8f7      	bhi.n	800b5e4 <HAL_Delay+0x28>
  {
  }
}
 800b5f4:	bf00      	nop
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20000008 	.word	0x20000008

0800b600 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e033      	b.n	800b67e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d109      	bne.n	800b632 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff f8cc 	bl	800a7bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b636:	f003 0310 	and.w	r3, r3, #16
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d118      	bne.n	800b670 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b642:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b646:	f023 0302 	bic.w	r3, r3, #2
 800b64a:	f043 0202 	orr.w	r2, r3, #2
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fbde 	bl	800be14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b662:	f023 0303 	bic.w	r3, r3, #3
 800b666:	f043 0201 	orr.w	r2, r3, #1
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	641a      	str	r2, [r3, #64]	; 0x40
 800b66e:	e001      	b.n	800b674 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b084      	sub	sp, #16
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	2300      	movs	r3, #0
 800b694:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0302 	and.w	r3, r3, #2
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	bf0c      	ite	eq
 800b6a4:	2301      	moveq	r3, #1
 800b6a6:	2300      	movne	r3, #0
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f003 0320 	and.w	r3, r3, #32
 800b6b6:	2b20      	cmp	r3, #32
 800b6b8:	bf0c      	ite	eq
 800b6ba:	2301      	moveq	r3, #1
 800b6bc:	2300      	movne	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d049      	beq.n	800b75c <HAL_ADC_IRQHandler+0xd6>
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d046      	beq.n	800b75c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	f003 0310 	and.w	r3, r3, #16
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d105      	bne.n	800b6e6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d12b      	bne.n	800b74c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d127      	bne.n	800b74c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b702:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b706:	2b00      	cmp	r3, #0
 800b708:	d006      	beq.n	800b718 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b714:	2b00      	cmp	r3, #0
 800b716:	d119      	bne.n	800b74c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 0220 	bic.w	r2, r2, #32
 800b726:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d105      	bne.n	800b74c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b744:	f043 0201 	orr.w	r2, r3, #1
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fa17 	bl	800bb80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f06f 0212 	mvn.w	r2, #18
 800b75a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 0304 	and.w	r3, r3, #4
 800b766:	2b04      	cmp	r3, #4
 800b768:	bf0c      	ite	eq
 800b76a:	2301      	moveq	r3, #1
 800b76c:	2300      	movne	r3, #0
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b77c:	2b80      	cmp	r3, #128	; 0x80
 800b77e:	bf0c      	ite	eq
 800b780:	2301      	moveq	r3, #1
 800b782:	2300      	movne	r3, #0
 800b784:	b2db      	uxtb	r3, r3
 800b786:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d057      	beq.n	800b83e <HAL_ADC_IRQHandler+0x1b8>
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d054      	beq.n	800b83e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b798:	f003 0310 	and.w	r3, r3, #16
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d105      	bne.n	800b7ac <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d139      	bne.n	800b82e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d12b      	bne.n	800b82e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d124      	bne.n	800b82e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d11d      	bne.n	800b82e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d119      	bne.n	800b82e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b808:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d105      	bne.n	800b82e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b826:	f043 0201 	orr.w	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fc6e 	bl	800c110 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f06f 020c 	mvn.w	r2, #12
 800b83c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b01      	cmp	r3, #1
 800b84a:	bf0c      	ite	eq
 800b84c:	2301      	moveq	r3, #1
 800b84e:	2300      	movne	r3, #0
 800b850:	b2db      	uxtb	r3, r3
 800b852:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b85e:	2b40      	cmp	r3, #64	; 0x40
 800b860:	bf0c      	ite	eq
 800b862:	2301      	moveq	r3, #1
 800b864:	2300      	movne	r3, #0
 800b866:	b2db      	uxtb	r3, r3
 800b868:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d017      	beq.n	800b8a0 <HAL_ADC_IRQHandler+0x21a>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d014      	beq.n	800b8a0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0301 	and.w	r3, r3, #1
 800b880:	2b01      	cmp	r3, #1
 800b882:	d10d      	bne.n	800b8a0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b888:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f989 	bl	800bba8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f06f 0201 	mvn.w	r2, #1
 800b89e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 0320 	and.w	r3, r3, #32
 800b8aa:	2b20      	cmp	r3, #32
 800b8ac:	bf0c      	ite	eq
 800b8ae:	2301      	moveq	r3, #1
 800b8b0:	2300      	movne	r3, #0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8c4:	bf0c      	ite	eq
 800b8c6:	2301      	moveq	r3, #1
 800b8c8:	2300      	movne	r3, #0
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d015      	beq.n	800b900 <HAL_ADC_IRQHandler+0x27a>
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d012      	beq.n	800b900 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8de:	f043 0202 	orr.w	r2, r3, #2
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f06f 0220 	mvn.w	r2, #32
 800b8ee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f963 	bl	800bbbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f06f 0220 	mvn.w	r2, #32
 800b8fe:	601a      	str	r2, [r3, #0]
  }
}
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d101      	bne.n	800b926 <HAL_ADC_Start_DMA+0x1e>
 800b922:	2302      	movs	r3, #2
 800b924:	e0cc      	b.n	800bac0 <HAL_ADC_Start_DMA+0x1b8>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d018      	beq.n	800b96e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689a      	ldr	r2, [r3, #8]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0201 	orr.w	r2, r2, #1
 800b94a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b94c:	4b5e      	ldr	r3, [pc, #376]	; (800bac8 <HAL_ADC_Start_DMA+0x1c0>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a5e      	ldr	r2, [pc, #376]	; (800bacc <HAL_ADC_Start_DMA+0x1c4>)
 800b952:	fba2 2303 	umull	r2, r3, r2, r3
 800b956:	0c9a      	lsrs	r2, r3, #18
 800b958:	4613      	mov	r3, r2
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	4413      	add	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b960:	e002      	b.n	800b968 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	3b01      	subs	r3, #1
 800b966:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1f9      	bne.n	800b962 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b01      	cmp	r3, #1
 800b97a:	f040 80a0 	bne.w	800babe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b982:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b986:	f023 0301 	bic.w	r3, r3, #1
 800b98a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d007      	beq.n	800b9b0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b9a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9bc:	d106      	bne.n	800b9cc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9c2:	f023 0206 	bic.w	r2, r3, #6
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	645a      	str	r2, [r3, #68]	; 0x44
 800b9ca:	e002      	b.n	800b9d2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b9da:	4b3d      	ldr	r3, [pc, #244]	; (800bad0 <HAL_ADC_Start_DMA+0x1c8>)
 800b9dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e2:	4a3c      	ldr	r2, [pc, #240]	; (800bad4 <HAL_ADC_Start_DMA+0x1cc>)
 800b9e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ea:	4a3b      	ldr	r2, [pc, #236]	; (800bad8 <HAL_ADC_Start_DMA+0x1d0>)
 800b9ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f2:	4a3a      	ldr	r2, [pc, #232]	; (800badc <HAL_ADC_Start_DMA+0x1d4>)
 800b9f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b9fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ba0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	689a      	ldr	r2, [r3, #8]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	334c      	adds	r3, #76	; 0x4c
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f000 fd38 	bl	800c4a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	f003 031f 	and.w	r3, r3, #31
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d12a      	bne.n	800ba96 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a26      	ldr	r2, [pc, #152]	; (800bae0 <HAL_ADC_Start_DMA+0x1d8>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d015      	beq.n	800ba76 <HAL_ADC_Start_DMA+0x16e>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a25      	ldr	r2, [pc, #148]	; (800bae4 <HAL_ADC_Start_DMA+0x1dc>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d105      	bne.n	800ba60 <HAL_ADC_Start_DMA+0x158>
 800ba54:	4b1e      	ldr	r3, [pc, #120]	; (800bad0 <HAL_ADC_Start_DMA+0x1c8>)
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f003 031f 	and.w	r3, r3, #31
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00a      	beq.n	800ba76 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a20      	ldr	r2, [pc, #128]	; (800bae8 <HAL_ADC_Start_DMA+0x1e0>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d129      	bne.n	800babe <HAL_ADC_Start_DMA+0x1b6>
 800ba6a:	4b19      	ldr	r3, [pc, #100]	; (800bad0 <HAL_ADC_Start_DMA+0x1c8>)
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	f003 031f 	and.w	r3, r3, #31
 800ba72:	2b0f      	cmp	r3, #15
 800ba74:	d823      	bhi.n	800babe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d11c      	bne.n	800babe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689a      	ldr	r2, [r3, #8]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ba92:	609a      	str	r2, [r3, #8]
 800ba94:	e013      	b.n	800babe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a11      	ldr	r2, [pc, #68]	; (800bae0 <HAL_ADC_Start_DMA+0x1d8>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d10e      	bne.n	800babe <HAL_ADC_Start_DMA+0x1b6>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d107      	bne.n	800babe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689a      	ldr	r2, [r3, #8]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800babc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	20000000 	.word	0x20000000
 800bacc:	431bde83 	.word	0x431bde83
 800bad0:	40012300 	.word	0x40012300
 800bad4:	0800c00d 	.word	0x0800c00d
 800bad8:	0800c0c7 	.word	0x0800c0c7
 800badc:	0800c0e3 	.word	0x0800c0e3
 800bae0:	40012000 	.word	0x40012000
 800bae4:	40012100 	.word	0x40012100
 800bae8:	40012200 	.word	0x40012200

0800baec <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d101      	bne.n	800bb06 <HAL_ADC_Stop_DMA+0x1a>
 800bb02:	2302      	movs	r3, #2
 800bb04:	e038      	b.n	800bb78 <HAL_ADC_Stop_DMA+0x8c>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f022 0201 	bic.w	r2, r2, #1
 800bb1c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d120      	bne.n	800bb6e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689a      	ldr	r2, [r3, #8]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb3a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 fd07 	bl	800c554 <HAL_DMA_Abort>
 800bb46:	4603      	mov	r3, r0
 800bb48:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800bb58:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bb62:	f023 0301 	bic.w	r3, r3, #1
 800bb66:	f043 0201 	orr.w	r2, r3, #1
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d101      	bne.n	800bbec <HAL_ADC_ConfigChannel+0x1c>
 800bbe8:	2302      	movs	r3, #2
 800bbea:	e105      	b.n	800bdf8 <HAL_ADC_ConfigChannel+0x228>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b09      	cmp	r3, #9
 800bbfa:	d925      	bls.n	800bc48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68d9      	ldr	r1, [r3, #12]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	461a      	mov	r2, r3
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	4413      	add	r3, r2
 800bc10:	3b1e      	subs	r3, #30
 800bc12:	2207      	movs	r2, #7
 800bc14:	fa02 f303 	lsl.w	r3, r2, r3
 800bc18:	43da      	mvns	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	400a      	ands	r2, r1
 800bc20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68d9      	ldr	r1, [r3, #12]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	4618      	mov	r0, r3
 800bc34:	4603      	mov	r3, r0
 800bc36:	005b      	lsls	r3, r3, #1
 800bc38:	4403      	add	r3, r0
 800bc3a:	3b1e      	subs	r3, #30
 800bc3c:	409a      	lsls	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	430a      	orrs	r2, r1
 800bc44:	60da      	str	r2, [r3, #12]
 800bc46:	e022      	b.n	800bc8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6919      	ldr	r1, [r3, #16]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	461a      	mov	r2, r3
 800bc56:	4613      	mov	r3, r2
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	4413      	add	r3, r2
 800bc5c:	2207      	movs	r2, #7
 800bc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc62:	43da      	mvns	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	400a      	ands	r2, r1
 800bc6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6919      	ldr	r1, [r3, #16]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	689a      	ldr	r2, [r3, #8]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	4603      	mov	r3, r0
 800bc80:	005b      	lsls	r3, r3, #1
 800bc82:	4403      	add	r3, r0
 800bc84:	409a      	lsls	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	2b06      	cmp	r3, #6
 800bc94:	d824      	bhi.n	800bce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	4613      	mov	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	3b05      	subs	r3, #5
 800bca8:	221f      	movs	r2, #31
 800bcaa:	fa02 f303 	lsl.w	r3, r2, r3
 800bcae:	43da      	mvns	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	400a      	ands	r2, r1
 800bcb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	3b05      	subs	r3, #5
 800bcd2:	fa00 f203 	lsl.w	r2, r0, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	635a      	str	r2, [r3, #52]	; 0x34
 800bcde:	e04c      	b.n	800bd7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	2b0c      	cmp	r3, #12
 800bce6:	d824      	bhi.n	800bd32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3b23      	subs	r3, #35	; 0x23
 800bcfa:	221f      	movs	r2, #31
 800bcfc:	fa02 f303 	lsl.w	r3, r2, r3
 800bd00:	43da      	mvns	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	400a      	ands	r2, r1
 800bd08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	4618      	mov	r0, r3
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	3b23      	subs	r3, #35	; 0x23
 800bd24:	fa00 f203 	lsl.w	r2, r0, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	631a      	str	r2, [r3, #48]	; 0x30
 800bd30:	e023      	b.n	800bd7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	685a      	ldr	r2, [r3, #4]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	3b41      	subs	r3, #65	; 0x41
 800bd44:	221f      	movs	r2, #31
 800bd46:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4a:	43da      	mvns	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	400a      	ands	r2, r1
 800bd52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	4618      	mov	r0, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	685a      	ldr	r2, [r3, #4]
 800bd66:	4613      	mov	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	3b41      	subs	r3, #65	; 0x41
 800bd6e:	fa00 f203 	lsl.w	r2, r0, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	430a      	orrs	r2, r1
 800bd78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bd7a:	4b22      	ldr	r3, [pc, #136]	; (800be04 <HAL_ADC_ConfigChannel+0x234>)
 800bd7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a21      	ldr	r2, [pc, #132]	; (800be08 <HAL_ADC_ConfigChannel+0x238>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d109      	bne.n	800bd9c <HAL_ADC_ConfigChannel+0x1cc>
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b12      	cmp	r3, #18
 800bd8e:	d105      	bne.n	800bd9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a19      	ldr	r2, [pc, #100]	; (800be08 <HAL_ADC_ConfigChannel+0x238>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d123      	bne.n	800bdee <HAL_ADC_ConfigChannel+0x21e>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b10      	cmp	r3, #16
 800bdac:	d003      	beq.n	800bdb6 <HAL_ADC_ConfigChannel+0x1e6>
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b11      	cmp	r3, #17
 800bdb4:	d11b      	bne.n	800bdee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b10      	cmp	r3, #16
 800bdc8:	d111      	bne.n	800bdee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800bdca:	4b10      	ldr	r3, [pc, #64]	; (800be0c <HAL_ADC_ConfigChannel+0x23c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a10      	ldr	r2, [pc, #64]	; (800be10 <HAL_ADC_ConfigChannel+0x240>)
 800bdd0:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd4:	0c9a      	lsrs	r2, r3, #18
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4413      	add	r3, r2
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bde0:	e002      	b.n	800bde8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1f9      	bne.n	800bde2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3714      	adds	r7, #20
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	40012300 	.word	0x40012300
 800be08:	40012000 	.word	0x40012000
 800be0c:	20000000 	.word	0x20000000
 800be10:	431bde83 	.word	0x431bde83

0800be14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800be1c:	4b79      	ldr	r3, [pc, #484]	; (800c004 <ADC_Init+0x1f0>)
 800be1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	431a      	orrs	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6859      	ldr	r1, [r3, #4]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	021a      	lsls	r2, r3, #8
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	430a      	orrs	r2, r1
 800be5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800be6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6859      	ldr	r1, [r3, #4]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	689a      	ldr	r2, [r3, #8]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	430a      	orrs	r2, r1
 800be7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	689a      	ldr	r2, [r3, #8]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6899      	ldr	r1, [r3, #8]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68da      	ldr	r2, [r3, #12]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea6:	4a58      	ldr	r2, [pc, #352]	; (800c008 <ADC_Init+0x1f4>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d022      	beq.n	800bef2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	689a      	ldr	r2, [r3, #8]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800beba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6899      	ldr	r1, [r3, #8]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	430a      	orrs	r2, r1
 800becc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	689a      	ldr	r2, [r3, #8]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bedc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6899      	ldr	r1, [r3, #8]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	430a      	orrs	r2, r1
 800beee:	609a      	str	r2, [r3, #8]
 800bef0:	e00f      	b.n	800bf12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689a      	ldr	r2, [r3, #8]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bf00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	689a      	ldr	r2, [r3, #8]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bf10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	689a      	ldr	r2, [r3, #8]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f022 0202 	bic.w	r2, r2, #2
 800bf20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6899      	ldr	r1, [r3, #8]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	7e1b      	ldrb	r3, [r3, #24]
 800bf2c:	005a      	lsls	r2, r3, #1
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01b      	beq.n	800bf78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800bf5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6859      	ldr	r1, [r3, #4]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	035a      	lsls	r2, r3, #13
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	430a      	orrs	r2, r1
 800bf74:	605a      	str	r2, [r3, #4]
 800bf76:	e007      	b.n	800bf88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800bf96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	051a      	lsls	r2, r3, #20
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	689a      	ldr	r2, [r3, #8]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bfbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	6899      	ldr	r1, [r3, #8]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfca:	025a      	lsls	r2, r3, #9
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689a      	ldr	r2, [r3, #8]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6899      	ldr	r1, [r3, #8]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	029a      	lsls	r2, r3, #10
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	430a      	orrs	r2, r1
 800bff6:	609a      	str	r2, [r3, #8]
}
 800bff8:	bf00      	nop
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	40012300 	.word	0x40012300
 800c008:	0f000001 	.word	0x0f000001

0800c00c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c018:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c022:	2b00      	cmp	r3, #0
 800c024:	d13c      	bne.n	800c0a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d12b      	bne.n	800c098 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c044:	2b00      	cmp	r3, #0
 800c046:	d127      	bne.n	800c098 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c052:	2b00      	cmp	r3, #0
 800c054:	d006      	beq.n	800c064 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c060:	2b00      	cmp	r3, #0
 800c062:	d119      	bne.n	800c098 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f022 0220 	bic.w	r2, r2, #32
 800c072:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d105      	bne.n	800c098 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c090:	f043 0201 	orr.w	r2, r3, #1
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f7ff fd71 	bl	800bb80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c09e:	e00e      	b.n	800c0be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a4:	f003 0310 	and.w	r3, r3, #16
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d003      	beq.n	800c0b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff fd85 	bl	800bbbc <HAL_ADC_ErrorCallback>
}
 800c0b2:	e004      	b.n	800c0be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	4798      	blx	r3
}
 800c0be:	bf00      	nop
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff fd5d 	bl	800bb94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c0da:	bf00      	nop
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2240      	movs	r2, #64	; 0x40
 800c0f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0fa:	f043 0204 	orr.w	r2, r3, #4
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7ff fd5a 	bl	800bbbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c108:	bf00      	nop
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f003 0307 	and.w	r3, r3, #7
 800c132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c134:	4b0c      	ldr	r3, [pc, #48]	; (800c168 <__NVIC_SetPriorityGrouping+0x44>)
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c140:	4013      	ands	r3, r2
 800c142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c14c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c156:	4a04      	ldr	r2, [pc, #16]	; (800c168 <__NVIC_SetPriorityGrouping+0x44>)
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	60d3      	str	r3, [r2, #12]
}
 800c15c:	bf00      	nop
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	e000ed00 	.word	0xe000ed00

0800c16c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c170:	4b04      	ldr	r3, [pc, #16]	; (800c184 <__NVIC_GetPriorityGrouping+0x18>)
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	0a1b      	lsrs	r3, r3, #8
 800c176:	f003 0307 	and.w	r3, r3, #7
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	e000ed00 	.word	0xe000ed00

0800c188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	4603      	mov	r3, r0
 800c190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c196:	2b00      	cmp	r3, #0
 800c198:	db0b      	blt.n	800c1b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c19a:	79fb      	ldrb	r3, [r7, #7]
 800c19c:	f003 021f 	and.w	r2, r3, #31
 800c1a0:	4907      	ldr	r1, [pc, #28]	; (800c1c0 <__NVIC_EnableIRQ+0x38>)
 800c1a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1a6:	095b      	lsrs	r3, r3, #5
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	fa00 f202 	lsl.w	r2, r0, r2
 800c1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c1b2:	bf00      	nop
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	e000e100 	.word	0xe000e100

0800c1c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	6039      	str	r1, [r7, #0]
 800c1ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c1d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	db0a      	blt.n	800c1ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	490c      	ldr	r1, [pc, #48]	; (800c210 <__NVIC_SetPriority+0x4c>)
 800c1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1e2:	0112      	lsls	r2, r2, #4
 800c1e4:	b2d2      	uxtb	r2, r2
 800c1e6:	440b      	add	r3, r1
 800c1e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c1ec:	e00a      	b.n	800c204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	4908      	ldr	r1, [pc, #32]	; (800c214 <__NVIC_SetPriority+0x50>)
 800c1f4:	79fb      	ldrb	r3, [r7, #7]
 800c1f6:	f003 030f 	and.w	r3, r3, #15
 800c1fa:	3b04      	subs	r3, #4
 800c1fc:	0112      	lsls	r2, r2, #4
 800c1fe:	b2d2      	uxtb	r2, r2
 800c200:	440b      	add	r3, r1
 800c202:	761a      	strb	r2, [r3, #24]
}
 800c204:	bf00      	nop
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	e000e100 	.word	0xe000e100
 800c214:	e000ed00 	.word	0xe000ed00

0800c218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c218:	b480      	push	{r7}
 800c21a:	b089      	sub	sp, #36	; 0x24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	f1c3 0307 	rsb	r3, r3, #7
 800c232:	2b04      	cmp	r3, #4
 800c234:	bf28      	it	cs
 800c236:	2304      	movcs	r3, #4
 800c238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	3304      	adds	r3, #4
 800c23e:	2b06      	cmp	r3, #6
 800c240:	d902      	bls.n	800c248 <NVIC_EncodePriority+0x30>
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	3b03      	subs	r3, #3
 800c246:	e000      	b.n	800c24a <NVIC_EncodePriority+0x32>
 800c248:	2300      	movs	r3, #0
 800c24a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c24c:	f04f 32ff 	mov.w	r2, #4294967295
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	fa02 f303 	lsl.w	r3, r2, r3
 800c256:	43da      	mvns	r2, r3
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	401a      	ands	r2, r3
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c260:	f04f 31ff 	mov.w	r1, #4294967295
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	fa01 f303 	lsl.w	r3, r1, r3
 800c26a:	43d9      	mvns	r1, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c270:	4313      	orrs	r3, r2
         );
}
 800c272:	4618      	mov	r0, r3
 800c274:	3724      	adds	r7, #36	; 0x24
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
	...

0800c280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c290:	d301      	bcc.n	800c296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c292:	2301      	movs	r3, #1
 800c294:	e00f      	b.n	800c2b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c296:	4a0a      	ldr	r2, [pc, #40]	; (800c2c0 <SysTick_Config+0x40>)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c29e:	210f      	movs	r1, #15
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a4:	f7ff ff8e 	bl	800c1c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c2a8:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <SysTick_Config+0x40>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c2ae:	4b04      	ldr	r3, [pc, #16]	; (800c2c0 <SysTick_Config+0x40>)
 800c2b0:	2207      	movs	r2, #7
 800c2b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	e000e010 	.word	0xe000e010

0800c2c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7ff ff29 	bl	800c124 <__NVIC_SetPriorityGrouping>
}
 800c2d2:	bf00      	nop
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b086      	sub	sp, #24
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c2ec:	f7ff ff3e 	bl	800c16c <__NVIC_GetPriorityGrouping>
 800c2f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	68b9      	ldr	r1, [r7, #8]
 800c2f6:	6978      	ldr	r0, [r7, #20]
 800c2f8:	f7ff ff8e 	bl	800c218 <NVIC_EncodePriority>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c302:	4611      	mov	r1, r2
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff ff5d 	bl	800c1c4 <__NVIC_SetPriority>
}
 800c30a:	bf00      	nop
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	4603      	mov	r3, r0
 800c31a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff ff31 	bl	800c188 <__NVIC_EnableIRQ>
}
 800c326:	bf00      	nop
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7ff ffa2 	bl	800c280 <SysTick_Config>
 800c33c:	4603      	mov	r3, r0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c350:	2300      	movs	r3, #0
 800c352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c354:	f7ff f926 	bl	800b5a4 <HAL_GetTick>
 800c358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e099      	b.n	800c498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 0201 	bic.w	r2, r2, #1
 800c382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c384:	e00f      	b.n	800c3a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c386:	f7ff f90d 	bl	800b5a4 <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	2b05      	cmp	r3, #5
 800c392:	d908      	bls.n	800c3a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2203      	movs	r2, #3
 800c39e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c3a2:	2303      	movs	r3, #3
 800c3a4:	e078      	b.n	800c498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 0301 	and.w	r3, r3, #1
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1e8      	bne.n	800c386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	4b38      	ldr	r3, [pc, #224]	; (800c4a0 <HAL_DMA_Init+0x158>)
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c3d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c3de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c3ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6a1b      	ldr	r3, [r3, #32]
 800c3f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fc:	2b04      	cmp	r3, #4
 800c3fe:	d107      	bne.n	800c410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c408:	4313      	orrs	r3, r2
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f023 0307 	bic.w	r3, r3, #7
 800c426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42c:	697a      	ldr	r2, [r7, #20]
 800c42e:	4313      	orrs	r3, r2
 800c430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c436:	2b04      	cmp	r3, #4
 800c438:	d117      	bne.n	800c46a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	4313      	orrs	r3, r2
 800c442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00e      	beq.n	800c46a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fadf 	bl	800ca10 <DMA_CheckFifoParam>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d008      	beq.n	800c46a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2240      	movs	r2, #64	; 0x40
 800c45c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c466:	2301      	movs	r3, #1
 800c468:	e016      	b.n	800c498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa96 	bl	800c9a4 <DMA_CalcBaseAndBitshift>
 800c478:	4603      	mov	r3, r0
 800c47a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c480:	223f      	movs	r2, #63	; 0x3f
 800c482:	409a      	lsls	r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	f010803f 	.word	0xf010803f

0800c4a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d101      	bne.n	800c4ca <HAL_DMA_Start_IT+0x26>
 800c4c6:	2302      	movs	r3, #2
 800c4c8:	e040      	b.n	800c54c <HAL_DMA_Start_IT+0xa8>
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d12f      	bne.n	800c53e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2202      	movs	r2, #2
 800c4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fa28 	bl	800c948 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4fc:	223f      	movs	r2, #63	; 0x3f
 800c4fe:	409a      	lsls	r2, r3
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f042 0216 	orr.w	r2, r2, #22
 800c512:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d007      	beq.n	800c52c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f042 0208 	orr.w	r2, r2, #8
 800c52a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f042 0201 	orr.w	r2, r2, #1
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	e005      	b.n	800c54a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c546:	2302      	movs	r3, #2
 800c548:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3718      	adds	r7, #24
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c560:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c562:	f7ff f81f 	bl	800b5a4 <HAL_GetTick>
 800c566:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b02      	cmp	r3, #2
 800c572:	d008      	beq.n	800c586 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2280      	movs	r2, #128	; 0x80
 800c578:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e052      	b.n	800c62c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f022 0216 	bic.w	r2, r2, #22
 800c594:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	695a      	ldr	r2, [r3, #20]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d103      	bne.n	800c5b6 <HAL_DMA_Abort+0x62>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d007      	beq.n	800c5c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 0208 	bic.w	r2, r2, #8
 800c5c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f022 0201 	bic.w	r2, r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c5d6:	e013      	b.n	800c600 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c5d8:	f7fe ffe4 	bl	800b5a4 <HAL_GetTick>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	2b05      	cmp	r3, #5
 800c5e4:	d90c      	bls.n	800c600 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2220      	movs	r2, #32
 800c5ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2203      	movs	r2, #3
 800c5f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	e015      	b.n	800c62c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1e4      	bne.n	800c5d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c612:	223f      	movs	r2, #63	; 0x3f
 800c614:	409a      	lsls	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c63c:	2300      	movs	r3, #0
 800c63e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c640:	4b92      	ldr	r3, [pc, #584]	; (800c88c <HAL_DMA_IRQHandler+0x258>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a92      	ldr	r2, [pc, #584]	; (800c890 <HAL_DMA_IRQHandler+0x25c>)
 800c646:	fba2 2303 	umull	r2, r3, r2, r3
 800c64a:	0a9b      	lsrs	r3, r3, #10
 800c64c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c652:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c65e:	2208      	movs	r2, #8
 800c660:	409a      	lsls	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	4013      	ands	r3, r2
 800c666:	2b00      	cmp	r3, #0
 800c668:	d01a      	beq.n	800c6a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0304 	and.w	r3, r3, #4
 800c674:	2b00      	cmp	r3, #0
 800c676:	d013      	beq.n	800c6a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f022 0204 	bic.w	r2, r2, #4
 800c686:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c68c:	2208      	movs	r2, #8
 800c68e:	409a      	lsls	r2, r3
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c698:	f043 0201 	orr.w	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	409a      	lsls	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d012      	beq.n	800c6d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	695b      	ldr	r3, [r3, #20]
 800c6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	409a      	lsls	r2, r3
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ce:	f043 0202 	orr.w	r2, r3, #2
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6da:	2204      	movs	r2, #4
 800c6dc:	409a      	lsls	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d012      	beq.n	800c70c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00b      	beq.n	800c70c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6f8:	2204      	movs	r2, #4
 800c6fa:	409a      	lsls	r2, r3
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c704:	f043 0204 	orr.w	r2, r3, #4
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c710:	2210      	movs	r2, #16
 800c712:	409a      	lsls	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4013      	ands	r3, r2
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d043      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 0308 	and.w	r3, r3, #8
 800c726:	2b00      	cmp	r3, #0
 800c728:	d03c      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c72e:	2210      	movs	r2, #16
 800c730:	409a      	lsls	r2, r3
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d018      	beq.n	800c776 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d108      	bne.n	800c764 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c756:	2b00      	cmp	r3, #0
 800c758:	d024      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	4798      	blx	r3
 800c762:	e01f      	b.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d01b      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	4798      	blx	r3
 800c774:	e016      	b.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c780:	2b00      	cmp	r3, #0
 800c782:	d107      	bne.n	800c794 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f022 0208 	bic.w	r2, r2, #8
 800c792:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	409a      	lsls	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 808e 	beq.w	800c8d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 0310 	and.w	r3, r3, #16
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 8086 	beq.w	800c8d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ca:	2220      	movs	r2, #32
 800c7cc:	409a      	lsls	r2, r3
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b05      	cmp	r3, #5
 800c7dc:	d136      	bne.n	800c84c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f022 0216 	bic.w	r2, r2, #22
 800c7ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	695a      	ldr	r2, [r3, #20]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c802:	2b00      	cmp	r3, #0
 800c804:	d103      	bne.n	800c80e <HAL_DMA_IRQHandler+0x1da>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d007      	beq.n	800c81e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f022 0208 	bic.w	r2, r2, #8
 800c81c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c822:	223f      	movs	r2, #63	; 0x3f
 800c824:	409a      	lsls	r2, r3
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d07d      	beq.n	800c93e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	4798      	blx	r3
        }
        return;
 800c84a:	e078      	b.n	800c93e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d01c      	beq.n	800c894 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d108      	bne.n	800c87a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d030      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	4798      	blx	r3
 800c878:	e02b      	b.n	800c8d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d027      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	4798      	blx	r3
 800c88a:	e022      	b.n	800c8d2 <HAL_DMA_IRQHandler+0x29e>
 800c88c:	20000000 	.word	0x20000000
 800c890:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10f      	bne.n	800c8c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f022 0210 	bic.w	r2, r2, #16
 800c8b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d003      	beq.n	800c8d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d032      	beq.n	800c940 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d022      	beq.n	800c92c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2205      	movs	r2, #5
 800c8ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f022 0201 	bic.w	r2, r2, #1
 800c8fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	3301      	adds	r3, #1
 800c902:	60bb      	str	r3, [r7, #8]
 800c904:	697a      	ldr	r2, [r7, #20]
 800c906:	429a      	cmp	r2, r3
 800c908:	d307      	bcc.n	800c91a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0301 	and.w	r3, r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1f2      	bne.n	800c8fe <HAL_DMA_IRQHandler+0x2ca>
 800c918:	e000      	b.n	800c91c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c91a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c930:	2b00      	cmp	r3, #0
 800c932:	d005      	beq.n	800c940 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	4798      	blx	r3
 800c93c:	e000      	b.n	800c940 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c93e:	bf00      	nop
    }
  }
}
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop

0800c948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c964:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	2b40      	cmp	r3, #64	; 0x40
 800c974:	d108      	bne.n	800c988 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c986:	e007      	b.n	800c998 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	60da      	str	r2, [r3, #12]
}
 800c998:	bf00      	nop
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	3b10      	subs	r3, #16
 800c9b4:	4a14      	ldr	r2, [pc, #80]	; (800ca08 <DMA_CalcBaseAndBitshift+0x64>)
 800c9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ba:	091b      	lsrs	r3, r3, #4
 800c9bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c9be:	4a13      	ldr	r2, [pc, #76]	; (800ca0c <DMA_CalcBaseAndBitshift+0x68>)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d909      	bls.n	800c9e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c9da:	f023 0303 	bic.w	r3, r3, #3
 800c9de:	1d1a      	adds	r2, r3, #4
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	659a      	str	r2, [r3, #88]	; 0x58
 800c9e4:	e007      	b.n	800c9f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c9ee:	f023 0303 	bic.w	r3, r3, #3
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	aaaaaaab 	.word	0xaaaaaaab
 800ca0c:	08012378 	.word	0x08012378

0800ca10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d11f      	bne.n	800ca6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b03      	cmp	r3, #3
 800ca2e:	d855      	bhi.n	800cadc <DMA_CheckFifoParam+0xcc>
 800ca30:	a201      	add	r2, pc, #4	; (adr r2, 800ca38 <DMA_CheckFifoParam+0x28>)
 800ca32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca36:	bf00      	nop
 800ca38:	0800ca49 	.word	0x0800ca49
 800ca3c:	0800ca5b 	.word	0x0800ca5b
 800ca40:	0800ca49 	.word	0x0800ca49
 800ca44:	0800cadd 	.word	0x0800cadd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d045      	beq.n	800cae0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca58:	e042      	b.n	800cae0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ca62:	d13f      	bne.n	800cae4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ca64:	2301      	movs	r3, #1
 800ca66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca68:	e03c      	b.n	800cae4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca72:	d121      	bne.n	800cab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d836      	bhi.n	800cae8 <DMA_CheckFifoParam+0xd8>
 800ca7a:	a201      	add	r2, pc, #4	; (adr r2, 800ca80 <DMA_CheckFifoParam+0x70>)
 800ca7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca80:	0800ca91 	.word	0x0800ca91
 800ca84:	0800ca97 	.word	0x0800ca97
 800ca88:	0800ca91 	.word	0x0800ca91
 800ca8c:	0800caa9 	.word	0x0800caa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	73fb      	strb	r3, [r7, #15]
      break;
 800ca94:	e02f      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d024      	beq.n	800caec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800caa6:	e021      	b.n	800caec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cab0:	d11e      	bne.n	800caf0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800cab6:	e01b      	b.n	800caf0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d902      	bls.n	800cac4 <DMA_CheckFifoParam+0xb4>
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	d003      	beq.n	800caca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cac2:	e018      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	73fb      	strb	r3, [r7, #15]
      break;
 800cac8:	e015      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00e      	beq.n	800caf4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	73fb      	strb	r3, [r7, #15]
      break;
 800cada:	e00b      	b.n	800caf4 <DMA_CheckFifoParam+0xe4>
      break;
 800cadc:	bf00      	nop
 800cade:	e00a      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      break;
 800cae0:	bf00      	nop
 800cae2:	e008      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      break;
 800cae4:	bf00      	nop
 800cae6:	e006      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      break;
 800cae8:	bf00      	nop
 800caea:	e004      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      break;
 800caec:	bf00      	nop
 800caee:	e002      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      break;   
 800caf0:	bf00      	nop
 800caf2:	e000      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      break;
 800caf4:	bf00      	nop
    }
  } 
  
  return status; 
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3714      	adds	r7, #20
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800cb0e:	4b4b      	ldr	r3, [pc, #300]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d020      	beq.n	800cb5c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800cb1a:	4b49      	ldr	r3, [pc, #292]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d107      	bne.n	800cb34 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800cb24:	4b46      	ldr	r3, [pc, #280]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800cb2a:	4b45      	ldr	r3, [pc, #276]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb30:	60da      	str	r2, [r3, #12]
 800cb32:	e00b      	b.n	800cb4c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800cb34:	4b42      	ldr	r3, [pc, #264]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d103      	bne.n	800cb46 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800cb3e:	4b40      	ldr	r3, [pc, #256]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	607b      	str	r3, [r7, #4]
 800cb44:	e002      	b.n	800cb4c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800cb46:	4b3e      	ldr	r3, [pc, #248]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800cb4c:	f000 f88e 	bl	800cc6c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f881 	bl	800cc58 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800cb56:	4b3a      	ldr	r3, [pc, #232]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800cb5c:	4b37      	ldr	r3, [pc, #220]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d04a      	beq.n	800cbfe <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cb68:	4b34      	ldr	r3, [pc, #208]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800cb6e:	4b34      	ldr	r3, [pc, #208]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d12d      	bne.n	800cbd4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800cb78:	4b31      	ldr	r3, [pc, #196]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	4a30      	ldr	r2, [pc, #192]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb80:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800cb82:	4b2f      	ldr	r3, [pc, #188]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d015      	beq.n	800cbb6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800cb8a:	4b2d      	ldr	r3, [pc, #180]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f857 	bl	800cc44 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800cb96:	4b2a      	ldr	r3, [pc, #168]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	4a28      	ldr	r2, [pc, #160]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cb9e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800cba0:	4b27      	ldr	r3, [pc, #156]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800cba6:	4b26      	ldr	r3, [pc, #152]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cba8:	7a1b      	ldrb	r3, [r3, #8]
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f8b2 	bl	800cd18 <FLASH_Erase_Sector>
 800cbb4:	e023      	b.n	800cbfe <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800cbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbba:	607b      	str	r3, [r7, #4]
 800cbbc:	4a20      	ldr	r2, [pc, #128]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800cbc2:	4b1f      	ldr	r3, [pc, #124]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800cbc8:	f000 f8ee 	bl	800cda8 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f839 	bl	800cc44 <HAL_FLASH_EndOfOperationCallback>
 800cbd2:	e014      	b.n	800cbfe <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800cbd4:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d107      	bne.n	800cbee <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800cbde:	f000 f8e3 	bl	800cda8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800cbe2:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 f82c 	bl	800cc44 <HAL_FLASH_EndOfOperationCallback>
 800cbec:	e004      	b.n	800cbf8 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800cbee:	4b14      	ldr	r3, [pc, #80]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 f826 	bl	800cc44 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800cbf8:	4b11      	ldr	r3, [pc, #68]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800cbfe:	4b10      	ldr	r3, [pc, #64]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d114      	bne.n	800cc32 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800cc08:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	4a0b      	ldr	r2, [pc, #44]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cc0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc12:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800cc14:	4b09      	ldr	r3, [pc, #36]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	4a08      	ldr	r2, [pc, #32]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cc1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc1e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800cc20:	4b06      	ldr	r3, [pc, #24]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	4a05      	ldr	r2, [pc, #20]	; (800cc3c <HAL_FLASH_IRQHandler+0x138>)
 800cc26:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cc2a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800cc2c:	4b04      	ldr	r3, [pc, #16]	; (800cc40 <HAL_FLASH_IRQHandler+0x13c>)
 800cc2e:	2200      	movs	r2, #0
 800cc30:	761a      	strb	r2, [r3, #24]
  }
}
 800cc32:	bf00      	nop
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	40023c00 	.word	0x40023c00
 800cc40:	20000790 	.word	0x20000790

0800cc44 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800cc70:	4b27      	ldr	r3, [pc, #156]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	f003 0310 	and.w	r3, r3, #16
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d008      	beq.n	800cc8e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cc7c:	4b25      	ldr	r3, [pc, #148]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	f043 0310 	orr.w	r3, r3, #16
 800cc84:	4a23      	ldr	r2, [pc, #140]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800cc86:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800cc88:	4b21      	ldr	r3, [pc, #132]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800cc8a:	2210      	movs	r2, #16
 800cc8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800cc8e:	4b20      	ldr	r3, [pc, #128]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	f003 0320 	and.w	r3, r3, #32
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d008      	beq.n	800ccac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cc9a:	4b1e      	ldr	r3, [pc, #120]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800cc9c:	69db      	ldr	r3, [r3, #28]
 800cc9e:	f043 0308 	orr.w	r3, r3, #8
 800cca2:	4a1c      	ldr	r2, [pc, #112]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800cca4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800cca6:	4b1a      	ldr	r3, [pc, #104]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800cca8:	2220      	movs	r2, #32
 800ccaa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ccac:	4b18      	ldr	r3, [pc, #96]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d008      	beq.n	800ccca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ccb8:	4b16      	ldr	r3, [pc, #88]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800ccba:	69db      	ldr	r3, [r3, #28]
 800ccbc:	f043 0304 	orr.w	r3, r3, #4
 800ccc0:	4a14      	ldr	r2, [pc, #80]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800ccc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ccc4:	4b12      	ldr	r3, [pc, #72]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800ccc6:	2240      	movs	r2, #64	; 0x40
 800ccc8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ccca:	4b11      	ldr	r3, [pc, #68]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d008      	beq.n	800cce8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ccd6:	4b0f      	ldr	r3, [pc, #60]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800ccd8:	69db      	ldr	r3, [r3, #28]
 800ccda:	f043 0302 	orr.w	r3, r3, #2
 800ccde:	4a0d      	ldr	r2, [pc, #52]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800cce0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800cce2:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800cce4:	2280      	movs	r2, #128	; 0x80
 800cce6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800cce8:	4b09      	ldr	r3, [pc, #36]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	f003 0302 	and.w	r3, r3, #2
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d008      	beq.n	800cd06 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ccf4:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	f043 0320 	orr.w	r3, r3, #32
 800ccfc:	4a05      	ldr	r2, [pc, #20]	; (800cd14 <FLASH_SetErrorCode+0xa8>)
 800ccfe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800cd00:	4b03      	ldr	r3, [pc, #12]	; (800cd10 <FLASH_SetErrorCode+0xa4>)
 800cd02:	2202      	movs	r2, #2
 800cd04:	60da      	str	r2, [r3, #12]
  }
}
 800cd06:	bf00      	nop
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	40023c00 	.word	0x40023c00
 800cd14:	20000790 	.word	0x20000790

0800cd18 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800cd24:	2300      	movs	r3, #0
 800cd26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800cd28:	78fb      	ldrb	r3, [r7, #3]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d102      	bne.n	800cd34 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	e010      	b.n	800cd56 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800cd34:	78fb      	ldrb	r3, [r7, #3]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d103      	bne.n	800cd42 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800cd3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd3e:	60fb      	str	r3, [r7, #12]
 800cd40:	e009      	b.n	800cd56 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800cd42:	78fb      	ldrb	r3, [r7, #3]
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d103      	bne.n	800cd50 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800cd48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd4c:	60fb      	str	r3, [r7, #12]
 800cd4e:	e002      	b.n	800cd56 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800cd50:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cd54:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cd56:	4b13      	ldr	r3, [pc, #76]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	4a12      	ldr	r2, [pc, #72]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800cd62:	4b10      	ldr	r3, [pc, #64]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd64:	691a      	ldr	r2, [r3, #16]
 800cd66:	490f      	ldr	r1, [pc, #60]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800cd6e:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	4a0c      	ldr	r2, [pc, #48]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cd78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800cd7a:	4b0a      	ldr	r3, [pc, #40]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd7c:	691a      	ldr	r2, [r3, #16]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	4313      	orrs	r3, r2
 800cd84:	4a07      	ldr	r2, [pc, #28]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd86:	f043 0302 	orr.w	r3, r3, #2
 800cd8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800cd8c:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	4a04      	ldr	r2, [pc, #16]	; (800cda4 <FLASH_Erase_Sector+0x8c>)
 800cd92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd96:	6113      	str	r3, [r2, #16]
}
 800cd98:	bf00      	nop
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	40023c00 	.word	0x40023c00

0800cda8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800cdac:	4b20      	ldr	r3, [pc, #128]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d017      	beq.n	800cde8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cdb8:	4b1d      	ldr	r3, [pc, #116]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a1c      	ldr	r2, [pc, #112]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdc2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cdc4:	4b1a      	ldr	r3, [pc, #104]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a19      	ldr	r2, [pc, #100]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	4b17      	ldr	r3, [pc, #92]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a16      	ldr	r2, [pc, #88]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdda:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cddc:	4b14      	ldr	r3, [pc, #80]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a13      	ldr	r2, [pc, #76]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cde2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cde6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800cde8:	4b11      	ldr	r3, [pc, #68]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d017      	beq.n	800ce24 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800cdf4:	4b0e      	ldr	r3, [pc, #56]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a0d      	ldr	r2, [pc, #52]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800cdfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdfe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800ce00:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a0a      	ldr	r2, [pc, #40]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800ce06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ce0a:	6013      	str	r3, [r2, #0]
 800ce0c:	4b08      	ldr	r3, [pc, #32]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a07      	ldr	r2, [pc, #28]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800ce12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ce18:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a04      	ldr	r2, [pc, #16]	; (800ce30 <FLASH_FlushCaches+0x88>)
 800ce1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce22:	6013      	str	r3, [r2, #0]
  }
}
 800ce24:	bf00      	nop
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	40023c00 	.word	0x40023c00

0800ce34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b089      	sub	sp, #36	; 0x24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ce46:	2300      	movs	r3, #0
 800ce48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	61fb      	str	r3, [r7, #28]
 800ce4e:	e16b      	b.n	800d128 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ce50:	2201      	movs	r2, #1
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	fa02 f303 	lsl.w	r3, r2, r3
 800ce58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	4013      	ands	r3, r2
 800ce62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	f040 815a 	bne.w	800d122 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d00b      	beq.n	800ce8e <HAL_GPIO_Init+0x5a>
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d007      	beq.n	800ce8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ce82:	2b11      	cmp	r3, #17
 800ce84:	d003      	beq.n	800ce8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	2b12      	cmp	r3, #18
 800ce8c:	d130      	bne.n	800cef0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	005b      	lsls	r3, r3, #1
 800ce98:	2203      	movs	r2, #3
 800ce9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9e:	43db      	mvns	r3, r3
 800cea0:	69ba      	ldr	r2, [r7, #24]
 800cea2:	4013      	ands	r3, r2
 800cea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	68da      	ldr	r2, [r3, #12]
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb2:	69ba      	ldr	r2, [r7, #24]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	69ba      	ldr	r2, [r7, #24]
 800cebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cec4:	2201      	movs	r2, #1
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	fa02 f303 	lsl.w	r3, r2, r3
 800cecc:	43db      	mvns	r3, r3
 800cece:	69ba      	ldr	r2, [r7, #24]
 800ced0:	4013      	ands	r3, r2
 800ced2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	091b      	lsrs	r3, r3, #4
 800ceda:	f003 0201 	and.w	r2, r3, #1
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	fa02 f303 	lsl.w	r3, r2, r3
 800cee4:	69ba      	ldr	r2, [r7, #24]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	2203      	movs	r2, #3
 800cefc:	fa02 f303 	lsl.w	r3, r2, r3
 800cf00:	43db      	mvns	r3, r3
 800cf02:	69ba      	ldr	r2, [r7, #24]
 800cf04:	4013      	ands	r3, r2
 800cf06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	689a      	ldr	r2, [r3, #8]
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	005b      	lsls	r3, r3, #1
 800cf10:	fa02 f303 	lsl.w	r3, r2, r3
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d003      	beq.n	800cf30 <HAL_GPIO_Init+0xfc>
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2b12      	cmp	r3, #18
 800cf2e:	d123      	bne.n	800cf78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	08da      	lsrs	r2, r3, #3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3208      	adds	r2, #8
 800cf38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	f003 0307 	and.w	r3, r3, #7
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	220f      	movs	r2, #15
 800cf48:	fa02 f303 	lsl.w	r3, r2, r3
 800cf4c:	43db      	mvns	r3, r3
 800cf4e:	69ba      	ldr	r2, [r7, #24]
 800cf50:	4013      	ands	r3, r2
 800cf52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	691a      	ldr	r2, [r3, #16]
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	f003 0307 	and.w	r3, r3, #7
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	fa02 f303 	lsl.w	r3, r2, r3
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	08da      	lsrs	r2, r3, #3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	3208      	adds	r2, #8
 800cf72:	69b9      	ldr	r1, [r7, #24]
 800cf74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	2203      	movs	r2, #3
 800cf84:	fa02 f303 	lsl.w	r3, r2, r3
 800cf88:	43db      	mvns	r3, r3
 800cf8a:	69ba      	ldr	r2, [r7, #24]
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	f003 0203 	and.w	r2, r3, #3
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa0:	69ba      	ldr	r2, [r7, #24]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 80b4 	beq.w	800d122 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cfba:	2300      	movs	r3, #0
 800cfbc:	60fb      	str	r3, [r7, #12]
 800cfbe:	4b5f      	ldr	r3, [pc, #380]	; (800d13c <HAL_GPIO_Init+0x308>)
 800cfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc2:	4a5e      	ldr	r2, [pc, #376]	; (800d13c <HAL_GPIO_Init+0x308>)
 800cfc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfc8:	6453      	str	r3, [r2, #68]	; 0x44
 800cfca:	4b5c      	ldr	r3, [pc, #368]	; (800d13c <HAL_GPIO_Init+0x308>)
 800cfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfd2:	60fb      	str	r3, [r7, #12]
 800cfd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cfd6:	4a5a      	ldr	r2, [pc, #360]	; (800d140 <HAL_GPIO_Init+0x30c>)
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	089b      	lsrs	r3, r3, #2
 800cfdc:	3302      	adds	r3, #2
 800cfde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	f003 0303 	and.w	r3, r3, #3
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	220f      	movs	r2, #15
 800cfee:	fa02 f303 	lsl.w	r3, r2, r3
 800cff2:	43db      	mvns	r3, r3
 800cff4:	69ba      	ldr	r2, [r7, #24]
 800cff6:	4013      	ands	r3, r2
 800cff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4a51      	ldr	r2, [pc, #324]	; (800d144 <HAL_GPIO_Init+0x310>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d02b      	beq.n	800d05a <HAL_GPIO_Init+0x226>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4a50      	ldr	r2, [pc, #320]	; (800d148 <HAL_GPIO_Init+0x314>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d025      	beq.n	800d056 <HAL_GPIO_Init+0x222>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4a4f      	ldr	r2, [pc, #316]	; (800d14c <HAL_GPIO_Init+0x318>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d01f      	beq.n	800d052 <HAL_GPIO_Init+0x21e>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4a4e      	ldr	r2, [pc, #312]	; (800d150 <HAL_GPIO_Init+0x31c>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d019      	beq.n	800d04e <HAL_GPIO_Init+0x21a>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a4d      	ldr	r2, [pc, #308]	; (800d154 <HAL_GPIO_Init+0x320>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d013      	beq.n	800d04a <HAL_GPIO_Init+0x216>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a4c      	ldr	r2, [pc, #304]	; (800d158 <HAL_GPIO_Init+0x324>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d00d      	beq.n	800d046 <HAL_GPIO_Init+0x212>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a4b      	ldr	r2, [pc, #300]	; (800d15c <HAL_GPIO_Init+0x328>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d007      	beq.n	800d042 <HAL_GPIO_Init+0x20e>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a4a      	ldr	r2, [pc, #296]	; (800d160 <HAL_GPIO_Init+0x32c>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d101      	bne.n	800d03e <HAL_GPIO_Init+0x20a>
 800d03a:	2307      	movs	r3, #7
 800d03c:	e00e      	b.n	800d05c <HAL_GPIO_Init+0x228>
 800d03e:	2308      	movs	r3, #8
 800d040:	e00c      	b.n	800d05c <HAL_GPIO_Init+0x228>
 800d042:	2306      	movs	r3, #6
 800d044:	e00a      	b.n	800d05c <HAL_GPIO_Init+0x228>
 800d046:	2305      	movs	r3, #5
 800d048:	e008      	b.n	800d05c <HAL_GPIO_Init+0x228>
 800d04a:	2304      	movs	r3, #4
 800d04c:	e006      	b.n	800d05c <HAL_GPIO_Init+0x228>
 800d04e:	2303      	movs	r3, #3
 800d050:	e004      	b.n	800d05c <HAL_GPIO_Init+0x228>
 800d052:	2302      	movs	r3, #2
 800d054:	e002      	b.n	800d05c <HAL_GPIO_Init+0x228>
 800d056:	2301      	movs	r3, #1
 800d058:	e000      	b.n	800d05c <HAL_GPIO_Init+0x228>
 800d05a:	2300      	movs	r3, #0
 800d05c:	69fa      	ldr	r2, [r7, #28]
 800d05e:	f002 0203 	and.w	r2, r2, #3
 800d062:	0092      	lsls	r2, r2, #2
 800d064:	4093      	lsls	r3, r2
 800d066:	69ba      	ldr	r2, [r7, #24]
 800d068:	4313      	orrs	r3, r2
 800d06a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d06c:	4934      	ldr	r1, [pc, #208]	; (800d140 <HAL_GPIO_Init+0x30c>)
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	089b      	lsrs	r3, r3, #2
 800d072:	3302      	adds	r3, #2
 800d074:	69ba      	ldr	r2, [r7, #24]
 800d076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d07a:	4b3a      	ldr	r3, [pc, #232]	; (800d164 <HAL_GPIO_Init+0x330>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	43db      	mvns	r3, r3
 800d084:	69ba      	ldr	r2, [r7, #24]
 800d086:	4013      	ands	r3, r2
 800d088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d092:	2b00      	cmp	r3, #0
 800d094:	d003      	beq.n	800d09e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d096:	69ba      	ldr	r2, [r7, #24]
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d09e:	4a31      	ldr	r2, [pc, #196]	; (800d164 <HAL_GPIO_Init+0x330>)
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d0a4:	4b2f      	ldr	r3, [pc, #188]	; (800d164 <HAL_GPIO_Init+0x330>)
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	43db      	mvns	r3, r3
 800d0ae:	69ba      	ldr	r2, [r7, #24]
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d0c0:	69ba      	ldr	r2, [r7, #24]
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d0c8:	4a26      	ldr	r2, [pc, #152]	; (800d164 <HAL_GPIO_Init+0x330>)
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d0ce:	4b25      	ldr	r3, [pc, #148]	; (800d164 <HAL_GPIO_Init+0x330>)
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	43db      	mvns	r3, r3
 800d0d8:	69ba      	ldr	r2, [r7, #24]
 800d0da:	4013      	ands	r3, r2
 800d0dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d003      	beq.n	800d0f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d0f2:	4a1c      	ldr	r2, [pc, #112]	; (800d164 <HAL_GPIO_Init+0x330>)
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d0f8:	4b1a      	ldr	r3, [pc, #104]	; (800d164 <HAL_GPIO_Init+0x330>)
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	43db      	mvns	r3, r3
 800d102:	69ba      	ldr	r2, [r7, #24]
 800d104:	4013      	ands	r3, r2
 800d106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d110:	2b00      	cmp	r3, #0
 800d112:	d003      	beq.n	800d11c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d114:	69ba      	ldr	r2, [r7, #24]
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	4313      	orrs	r3, r2
 800d11a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d11c:	4a11      	ldr	r2, [pc, #68]	; (800d164 <HAL_GPIO_Init+0x330>)
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	3301      	adds	r3, #1
 800d126:	61fb      	str	r3, [r7, #28]
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	2b0f      	cmp	r3, #15
 800d12c:	f67f ae90 	bls.w	800ce50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d130:	bf00      	nop
 800d132:	3724      	adds	r7, #36	; 0x24
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	40023800 	.word	0x40023800
 800d140:	40013800 	.word	0x40013800
 800d144:	40020000 	.word	0x40020000
 800d148:	40020400 	.word	0x40020400
 800d14c:	40020800 	.word	0x40020800
 800d150:	40020c00 	.word	0x40020c00
 800d154:	40021000 	.word	0x40021000
 800d158:	40021400 	.word	0x40021400
 800d15c:	40021800 	.word	0x40021800
 800d160:	40021c00 	.word	0x40021c00
 800d164:	40013c00 	.word	0x40013c00

0800d168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	807b      	strh	r3, [r7, #2]
 800d174:	4613      	mov	r3, r2
 800d176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d178:	787b      	ldrb	r3, [r7, #1]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d17e:	887a      	ldrh	r2, [r7, #2]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d184:	e003      	b.n	800d18e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d186:	887b      	ldrh	r3, [r7, #2]
 800d188:	041a      	lsls	r2, r3, #16
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	619a      	str	r2, [r3, #24]
}
 800d18e:	bf00      	nop
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
	...

0800d19c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e25b      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 0301 	and.w	r3, r3, #1
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d075      	beq.n	800d2a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d1ba:	4ba3      	ldr	r3, [pc, #652]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	f003 030c 	and.w	r3, r3, #12
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d00c      	beq.n	800d1e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d1c6:	4ba0      	ldr	r3, [pc, #640]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d1ce:	2b08      	cmp	r3, #8
 800d1d0:	d112      	bne.n	800d1f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d1d2:	4b9d      	ldr	r3, [pc, #628]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1de:	d10b      	bne.n	800d1f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1e0:	4b99      	ldr	r3, [pc, #612]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d05b      	beq.n	800d2a4 <HAL_RCC_OscConfig+0x108>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d157      	bne.n	800d2a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e236      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d200:	d106      	bne.n	800d210 <HAL_RCC_OscConfig+0x74>
 800d202:	4b91      	ldr	r3, [pc, #580]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a90      	ldr	r2, [pc, #576]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d20c:	6013      	str	r3, [r2, #0]
 800d20e:	e01d      	b.n	800d24c <HAL_RCC_OscConfig+0xb0>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d218:	d10c      	bne.n	800d234 <HAL_RCC_OscConfig+0x98>
 800d21a:	4b8b      	ldr	r3, [pc, #556]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a8a      	ldr	r2, [pc, #552]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	4b88      	ldr	r3, [pc, #544]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a87      	ldr	r2, [pc, #540]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d22c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	e00b      	b.n	800d24c <HAL_RCC_OscConfig+0xb0>
 800d234:	4b84      	ldr	r3, [pc, #528]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a83      	ldr	r2, [pc, #524]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d23a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d23e:	6013      	str	r3, [r2, #0]
 800d240:	4b81      	ldr	r3, [pc, #516]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a80      	ldr	r2, [pc, #512]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d24a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d013      	beq.n	800d27c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d254:	f7fe f9a6 	bl	800b5a4 <HAL_GetTick>
 800d258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d25a:	e008      	b.n	800d26e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d25c:	f7fe f9a2 	bl	800b5a4 <HAL_GetTick>
 800d260:	4602      	mov	r2, r0
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	2b64      	cmp	r3, #100	; 0x64
 800d268:	d901      	bls.n	800d26e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d26a:	2303      	movs	r3, #3
 800d26c:	e1fb      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d26e:	4b76      	ldr	r3, [pc, #472]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d0f0      	beq.n	800d25c <HAL_RCC_OscConfig+0xc0>
 800d27a:	e014      	b.n	800d2a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d27c:	f7fe f992 	bl	800b5a4 <HAL_GetTick>
 800d280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d282:	e008      	b.n	800d296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d284:	f7fe f98e 	bl	800b5a4 <HAL_GetTick>
 800d288:	4602      	mov	r2, r0
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	1ad3      	subs	r3, r2, r3
 800d28e:	2b64      	cmp	r3, #100	; 0x64
 800d290:	d901      	bls.n	800d296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d292:	2303      	movs	r3, #3
 800d294:	e1e7      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d296:	4b6c      	ldr	r3, [pc, #432]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1f0      	bne.n	800d284 <HAL_RCC_OscConfig+0xe8>
 800d2a2:	e000      	b.n	800d2a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d2a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 0302 	and.w	r3, r3, #2
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d063      	beq.n	800d37a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d2b2:	4b65      	ldr	r3, [pc, #404]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	f003 030c 	and.w	r3, r3, #12
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00b      	beq.n	800d2d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d2be:	4b62      	ldr	r3, [pc, #392]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d2c6:	2b08      	cmp	r3, #8
 800d2c8:	d11c      	bne.n	800d304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d2ca:	4b5f      	ldr	r3, [pc, #380]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d116      	bne.n	800d304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d2d6:	4b5c      	ldr	r3, [pc, #368]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 0302 	and.w	r3, r3, #2
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d005      	beq.n	800d2ee <HAL_RCC_OscConfig+0x152>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d001      	beq.n	800d2ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e1bb      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2ee:	4b56      	ldr	r3, [pc, #344]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	4952      	ldr	r1, [pc, #328]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d2fe:	4313      	orrs	r3, r2
 800d300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d302:	e03a      	b.n	800d37a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d020      	beq.n	800d34e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d30c:	4b4f      	ldr	r3, [pc, #316]	; (800d44c <HAL_RCC_OscConfig+0x2b0>)
 800d30e:	2201      	movs	r2, #1
 800d310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d312:	f7fe f947 	bl	800b5a4 <HAL_GetTick>
 800d316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d318:	e008      	b.n	800d32c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d31a:	f7fe f943 	bl	800b5a4 <HAL_GetTick>
 800d31e:	4602      	mov	r2, r0
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	2b02      	cmp	r3, #2
 800d326:	d901      	bls.n	800d32c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d328:	2303      	movs	r3, #3
 800d32a:	e19c      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d32c:	4b46      	ldr	r3, [pc, #280]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0302 	and.w	r3, r3, #2
 800d334:	2b00      	cmp	r3, #0
 800d336:	d0f0      	beq.n	800d31a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d338:	4b43      	ldr	r3, [pc, #268]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	00db      	lsls	r3, r3, #3
 800d346:	4940      	ldr	r1, [pc, #256]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d348:	4313      	orrs	r3, r2
 800d34a:	600b      	str	r3, [r1, #0]
 800d34c:	e015      	b.n	800d37a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d34e:	4b3f      	ldr	r3, [pc, #252]	; (800d44c <HAL_RCC_OscConfig+0x2b0>)
 800d350:	2200      	movs	r2, #0
 800d352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d354:	f7fe f926 	bl	800b5a4 <HAL_GetTick>
 800d358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d35a:	e008      	b.n	800d36e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d35c:	f7fe f922 	bl	800b5a4 <HAL_GetTick>
 800d360:	4602      	mov	r2, r0
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	2b02      	cmp	r3, #2
 800d368:	d901      	bls.n	800d36e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e17b      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d36e:	4b36      	ldr	r3, [pc, #216]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f003 0302 	and.w	r3, r3, #2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1f0      	bne.n	800d35c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 0308 	and.w	r3, r3, #8
 800d382:	2b00      	cmp	r3, #0
 800d384:	d030      	beq.n	800d3e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d016      	beq.n	800d3bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d38e:	4b30      	ldr	r3, [pc, #192]	; (800d450 <HAL_RCC_OscConfig+0x2b4>)
 800d390:	2201      	movs	r2, #1
 800d392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d394:	f7fe f906 	bl	800b5a4 <HAL_GetTick>
 800d398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d39a:	e008      	b.n	800d3ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d39c:	f7fe f902 	bl	800b5a4 <HAL_GetTick>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d901      	bls.n	800d3ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	e15b      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d3ae:	4b26      	ldr	r3, [pc, #152]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3b2:	f003 0302 	and.w	r3, r3, #2
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0f0      	beq.n	800d39c <HAL_RCC_OscConfig+0x200>
 800d3ba:	e015      	b.n	800d3e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d3bc:	4b24      	ldr	r3, [pc, #144]	; (800d450 <HAL_RCC_OscConfig+0x2b4>)
 800d3be:	2200      	movs	r2, #0
 800d3c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d3c2:	f7fe f8ef 	bl	800b5a4 <HAL_GetTick>
 800d3c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d3c8:	e008      	b.n	800d3dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d3ca:	f7fe f8eb 	bl	800b5a4 <HAL_GetTick>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	d901      	bls.n	800d3dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d3d8:	2303      	movs	r3, #3
 800d3da:	e144      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d3dc:	4b1a      	ldr	r3, [pc, #104]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e0:	f003 0302 	and.w	r3, r3, #2
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1f0      	bne.n	800d3ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 0304 	and.w	r3, r3, #4
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 80a0 	beq.w	800d536 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d3fa:	4b13      	ldr	r3, [pc, #76]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d402:	2b00      	cmp	r3, #0
 800d404:	d10f      	bne.n	800d426 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d406:	2300      	movs	r3, #0
 800d408:	60bb      	str	r3, [r7, #8]
 800d40a:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40e:	4a0e      	ldr	r2, [pc, #56]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d414:	6413      	str	r3, [r2, #64]	; 0x40
 800d416:	4b0c      	ldr	r3, [pc, #48]	; (800d448 <HAL_RCC_OscConfig+0x2ac>)
 800d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d41e:	60bb      	str	r3, [r7, #8]
 800d420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d422:	2301      	movs	r3, #1
 800d424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d426:	4b0b      	ldr	r3, [pc, #44]	; (800d454 <HAL_RCC_OscConfig+0x2b8>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d121      	bne.n	800d476 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d432:	4b08      	ldr	r3, [pc, #32]	; (800d454 <HAL_RCC_OscConfig+0x2b8>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a07      	ldr	r2, [pc, #28]	; (800d454 <HAL_RCC_OscConfig+0x2b8>)
 800d438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d43c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d43e:	f7fe f8b1 	bl	800b5a4 <HAL_GetTick>
 800d442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d444:	e011      	b.n	800d46a <HAL_RCC_OscConfig+0x2ce>
 800d446:	bf00      	nop
 800d448:	40023800 	.word	0x40023800
 800d44c:	42470000 	.word	0x42470000
 800d450:	42470e80 	.word	0x42470e80
 800d454:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d458:	f7fe f8a4 	bl	800b5a4 <HAL_GetTick>
 800d45c:	4602      	mov	r2, r0
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	2b02      	cmp	r3, #2
 800d464:	d901      	bls.n	800d46a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d466:	2303      	movs	r3, #3
 800d468:	e0fd      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d46a:	4b81      	ldr	r3, [pc, #516]	; (800d670 <HAL_RCC_OscConfig+0x4d4>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d472:	2b00      	cmp	r3, #0
 800d474:	d0f0      	beq.n	800d458 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d106      	bne.n	800d48c <HAL_RCC_OscConfig+0x2f0>
 800d47e:	4b7d      	ldr	r3, [pc, #500]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d482:	4a7c      	ldr	r2, [pc, #496]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d484:	f043 0301 	orr.w	r3, r3, #1
 800d488:	6713      	str	r3, [r2, #112]	; 0x70
 800d48a:	e01c      	b.n	800d4c6 <HAL_RCC_OscConfig+0x32a>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	2b05      	cmp	r3, #5
 800d492:	d10c      	bne.n	800d4ae <HAL_RCC_OscConfig+0x312>
 800d494:	4b77      	ldr	r3, [pc, #476]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d498:	4a76      	ldr	r2, [pc, #472]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d49a:	f043 0304 	orr.w	r3, r3, #4
 800d49e:	6713      	str	r3, [r2, #112]	; 0x70
 800d4a0:	4b74      	ldr	r3, [pc, #464]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a4:	4a73      	ldr	r2, [pc, #460]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d4a6:	f043 0301 	orr.w	r3, r3, #1
 800d4aa:	6713      	str	r3, [r2, #112]	; 0x70
 800d4ac:	e00b      	b.n	800d4c6 <HAL_RCC_OscConfig+0x32a>
 800d4ae:	4b71      	ldr	r3, [pc, #452]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4b2:	4a70      	ldr	r2, [pc, #448]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d4b4:	f023 0301 	bic.w	r3, r3, #1
 800d4b8:	6713      	str	r3, [r2, #112]	; 0x70
 800d4ba:	4b6e      	ldr	r3, [pc, #440]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4be:	4a6d      	ldr	r2, [pc, #436]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d4c0:	f023 0304 	bic.w	r3, r3, #4
 800d4c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d015      	beq.n	800d4fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4ce:	f7fe f869 	bl	800b5a4 <HAL_GetTick>
 800d4d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4d4:	e00a      	b.n	800d4ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d4d6:	f7fe f865 	bl	800b5a4 <HAL_GetTick>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	1ad3      	subs	r3, r2, r3
 800d4e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d901      	bls.n	800d4ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	e0bc      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4ec:	4b61      	ldr	r3, [pc, #388]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4f0:	f003 0302 	and.w	r3, r3, #2
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d0ee      	beq.n	800d4d6 <HAL_RCC_OscConfig+0x33a>
 800d4f8:	e014      	b.n	800d524 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d4fa:	f7fe f853 	bl	800b5a4 <HAL_GetTick>
 800d4fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d500:	e00a      	b.n	800d518 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d502:	f7fe f84f 	bl	800b5a4 <HAL_GetTick>
 800d506:	4602      	mov	r2, r0
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d510:	4293      	cmp	r3, r2
 800d512:	d901      	bls.n	800d518 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	e0a6      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d518:	4b56      	ldr	r3, [pc, #344]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d51a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d51c:	f003 0302 	and.w	r3, r3, #2
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1ee      	bne.n	800d502 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d524:	7dfb      	ldrb	r3, [r7, #23]
 800d526:	2b01      	cmp	r3, #1
 800d528:	d105      	bne.n	800d536 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d52a:	4b52      	ldr	r3, [pc, #328]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d52e:	4a51      	ldr	r2, [pc, #324]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d534:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f000 8092 	beq.w	800d664 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d540:	4b4c      	ldr	r3, [pc, #304]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	f003 030c 	and.w	r3, r3, #12
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d05c      	beq.n	800d606 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	2b02      	cmp	r3, #2
 800d552:	d141      	bne.n	800d5d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d554:	4b48      	ldr	r3, [pc, #288]	; (800d678 <HAL_RCC_OscConfig+0x4dc>)
 800d556:	2200      	movs	r2, #0
 800d558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d55a:	f7fe f823 	bl	800b5a4 <HAL_GetTick>
 800d55e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d560:	e008      	b.n	800d574 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d562:	f7fe f81f 	bl	800b5a4 <HAL_GetTick>
 800d566:	4602      	mov	r2, r0
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d901      	bls.n	800d574 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d570:	2303      	movs	r3, #3
 800d572:	e078      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d574:	4b3f      	ldr	r3, [pc, #252]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1f0      	bne.n	800d562 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	69da      	ldr	r2, [r3, #28]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	431a      	orrs	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58e:	019b      	lsls	r3, r3, #6
 800d590:	431a      	orrs	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d596:	085b      	lsrs	r3, r3, #1
 800d598:	3b01      	subs	r3, #1
 800d59a:	041b      	lsls	r3, r3, #16
 800d59c:	431a      	orrs	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a2:	061b      	lsls	r3, r3, #24
 800d5a4:	4933      	ldr	r1, [pc, #204]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d5aa:	4b33      	ldr	r3, [pc, #204]	; (800d678 <HAL_RCC_OscConfig+0x4dc>)
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5b0:	f7fd fff8 	bl	800b5a4 <HAL_GetTick>
 800d5b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5b6:	e008      	b.n	800d5ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5b8:	f7fd fff4 	bl	800b5a4 <HAL_GetTick>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	2b02      	cmp	r3, #2
 800d5c4:	d901      	bls.n	800d5ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	e04d      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5ca:	4b2a      	ldr	r3, [pc, #168]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d0f0      	beq.n	800d5b8 <HAL_RCC_OscConfig+0x41c>
 800d5d6:	e045      	b.n	800d664 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5d8:	4b27      	ldr	r3, [pc, #156]	; (800d678 <HAL_RCC_OscConfig+0x4dc>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5de:	f7fd ffe1 	bl	800b5a4 <HAL_GetTick>
 800d5e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d5e4:	e008      	b.n	800d5f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5e6:	f7fd ffdd 	bl	800b5a4 <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d901      	bls.n	800d5f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e036      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d5f8:	4b1e      	ldr	r3, [pc, #120]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1f0      	bne.n	800d5e6 <HAL_RCC_OscConfig+0x44a>
 800d604:	e02e      	b.n	800d664 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	699b      	ldr	r3, [r3, #24]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d101      	bne.n	800d612 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	e029      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d612:	4b18      	ldr	r3, [pc, #96]	; (800d674 <HAL_RCC_OscConfig+0x4d8>)
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	69db      	ldr	r3, [r3, #28]
 800d622:	429a      	cmp	r2, r3
 800d624:	d11c      	bne.n	800d660 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d630:	429a      	cmp	r2, r3
 800d632:	d115      	bne.n	800d660 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d63a:	4013      	ands	r3, r2
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d640:	4293      	cmp	r3, r2
 800d642:	d10d      	bne.n	800d660 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d64e:	429a      	cmp	r2, r3
 800d650:	d106      	bne.n	800d660 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d001      	beq.n	800d664 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	e000      	b.n	800d666 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3718      	adds	r7, #24
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	40007000 	.word	0x40007000
 800d674:	40023800 	.word	0x40023800
 800d678:	42470060 	.word	0x42470060

0800d67c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d101      	bne.n	800d690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e0cc      	b.n	800d82a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d690:	4b68      	ldr	r3, [pc, #416]	; (800d834 <HAL_RCC_ClockConfig+0x1b8>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f003 030f 	and.w	r3, r3, #15
 800d698:	683a      	ldr	r2, [r7, #0]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d90c      	bls.n	800d6b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d69e:	4b65      	ldr	r3, [pc, #404]	; (800d834 <HAL_RCC_ClockConfig+0x1b8>)
 800d6a0:	683a      	ldr	r2, [r7, #0]
 800d6a2:	b2d2      	uxtb	r2, r2
 800d6a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6a6:	4b63      	ldr	r3, [pc, #396]	; (800d834 <HAL_RCC_ClockConfig+0x1b8>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f003 030f 	and.w	r3, r3, #15
 800d6ae:	683a      	ldr	r2, [r7, #0]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d001      	beq.n	800d6b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e0b8      	b.n	800d82a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f003 0302 	and.w	r3, r3, #2
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d020      	beq.n	800d706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f003 0304 	and.w	r3, r3, #4
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d005      	beq.n	800d6dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d6d0:	4b59      	ldr	r3, [pc, #356]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	4a58      	ldr	r2, [pc, #352]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d6d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d6da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f003 0308 	and.w	r3, r3, #8
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d005      	beq.n	800d6f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d6e8:	4b53      	ldr	r3, [pc, #332]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	4a52      	ldr	r2, [pc, #328]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d6ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d6f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d6f4:	4b50      	ldr	r3, [pc, #320]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	494d      	ldr	r1, [pc, #308]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d702:	4313      	orrs	r3, r2
 800d704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f003 0301 	and.w	r3, r3, #1
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d044      	beq.n	800d79c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d107      	bne.n	800d72a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d71a:	4b47      	ldr	r3, [pc, #284]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d722:	2b00      	cmp	r3, #0
 800d724:	d119      	bne.n	800d75a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	e07f      	b.n	800d82a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d003      	beq.n	800d73a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d736:	2b03      	cmp	r3, #3
 800d738:	d107      	bne.n	800d74a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d73a:	4b3f      	ldr	r3, [pc, #252]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d742:	2b00      	cmp	r3, #0
 800d744:	d109      	bne.n	800d75a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d746:	2301      	movs	r3, #1
 800d748:	e06f      	b.n	800d82a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d74a:	4b3b      	ldr	r3, [pc, #236]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f003 0302 	and.w	r3, r3, #2
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e067      	b.n	800d82a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d75a:	4b37      	ldr	r3, [pc, #220]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	f023 0203 	bic.w	r2, r3, #3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	4934      	ldr	r1, [pc, #208]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d768:	4313      	orrs	r3, r2
 800d76a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d76c:	f7fd ff1a 	bl	800b5a4 <HAL_GetTick>
 800d770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d772:	e00a      	b.n	800d78a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d774:	f7fd ff16 	bl	800b5a4 <HAL_GetTick>
 800d778:	4602      	mov	r2, r0
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d782:	4293      	cmp	r3, r2
 800d784:	d901      	bls.n	800d78a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d786:	2303      	movs	r3, #3
 800d788:	e04f      	b.n	800d82a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d78a:	4b2b      	ldr	r3, [pc, #172]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	f003 020c 	and.w	r2, r3, #12
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	429a      	cmp	r2, r3
 800d79a:	d1eb      	bne.n	800d774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d79c:	4b25      	ldr	r3, [pc, #148]	; (800d834 <HAL_RCC_ClockConfig+0x1b8>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f003 030f 	and.w	r3, r3, #15
 800d7a4:	683a      	ldr	r2, [r7, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d20c      	bcs.n	800d7c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7aa:	4b22      	ldr	r3, [pc, #136]	; (800d834 <HAL_RCC_ClockConfig+0x1b8>)
 800d7ac:	683a      	ldr	r2, [r7, #0]
 800d7ae:	b2d2      	uxtb	r2, r2
 800d7b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7b2:	4b20      	ldr	r3, [pc, #128]	; (800d834 <HAL_RCC_ClockConfig+0x1b8>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 030f 	and.w	r3, r3, #15
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d001      	beq.n	800d7c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e032      	b.n	800d82a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f003 0304 	and.w	r3, r3, #4
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d008      	beq.n	800d7e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d7d0:	4b19      	ldr	r3, [pc, #100]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	4916      	ldr	r1, [pc, #88]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 0308 	and.w	r3, r3, #8
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d009      	beq.n	800d802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d7ee:	4b12      	ldr	r3, [pc, #72]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	490e      	ldr	r1, [pc, #56]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d7fe:	4313      	orrs	r3, r2
 800d800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d802:	f000 f821 	bl	800d848 <HAL_RCC_GetSysClockFreq>
 800d806:	4601      	mov	r1, r0
 800d808:	4b0b      	ldr	r3, [pc, #44]	; (800d838 <HAL_RCC_ClockConfig+0x1bc>)
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	091b      	lsrs	r3, r3, #4
 800d80e:	f003 030f 	and.w	r3, r3, #15
 800d812:	4a0a      	ldr	r2, [pc, #40]	; (800d83c <HAL_RCC_ClockConfig+0x1c0>)
 800d814:	5cd3      	ldrb	r3, [r2, r3]
 800d816:	fa21 f303 	lsr.w	r3, r1, r3
 800d81a:	4a09      	ldr	r2, [pc, #36]	; (800d840 <HAL_RCC_ClockConfig+0x1c4>)
 800d81c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d81e:	4b09      	ldr	r3, [pc, #36]	; (800d844 <HAL_RCC_ClockConfig+0x1c8>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4618      	mov	r0, r3
 800d824:	f7fd fe7a 	bl	800b51c <HAL_InitTick>

  return HAL_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	40023c00 	.word	0x40023c00
 800d838:	40023800 	.word	0x40023800
 800d83c:	08012360 	.word	0x08012360
 800d840:	20000000 	.word	0x20000000
 800d844:	20000004 	.word	0x20000004

0800d848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d84e:	2300      	movs	r3, #0
 800d850:	607b      	str	r3, [r7, #4]
 800d852:	2300      	movs	r3, #0
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	2300      	movs	r3, #0
 800d858:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d85a:	2300      	movs	r3, #0
 800d85c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d85e:	4b63      	ldr	r3, [pc, #396]	; (800d9ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	f003 030c 	and.w	r3, r3, #12
 800d866:	2b04      	cmp	r3, #4
 800d868:	d007      	beq.n	800d87a <HAL_RCC_GetSysClockFreq+0x32>
 800d86a:	2b08      	cmp	r3, #8
 800d86c:	d008      	beq.n	800d880 <HAL_RCC_GetSysClockFreq+0x38>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f040 80b4 	bne.w	800d9dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d874:	4b5e      	ldr	r3, [pc, #376]	; (800d9f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d876:	60bb      	str	r3, [r7, #8]
       break;
 800d878:	e0b3      	b.n	800d9e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d87a:	4b5e      	ldr	r3, [pc, #376]	; (800d9f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d87c:	60bb      	str	r3, [r7, #8]
      break;
 800d87e:	e0b0      	b.n	800d9e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d880:	4b5a      	ldr	r3, [pc, #360]	; (800d9ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d888:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d88a:	4b58      	ldr	r3, [pc, #352]	; (800d9ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d892:	2b00      	cmp	r3, #0
 800d894:	d04a      	beq.n	800d92c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d896:	4b55      	ldr	r3, [pc, #340]	; (800d9ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	099b      	lsrs	r3, r3, #6
 800d89c:	f04f 0400 	mov.w	r4, #0
 800d8a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d8a4:	f04f 0200 	mov.w	r2, #0
 800d8a8:	ea03 0501 	and.w	r5, r3, r1
 800d8ac:	ea04 0602 	and.w	r6, r4, r2
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	4632      	mov	r2, r6
 800d8b4:	f04f 0300 	mov.w	r3, #0
 800d8b8:	f04f 0400 	mov.w	r4, #0
 800d8bc:	0154      	lsls	r4, r2, #5
 800d8be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d8c2:	014b      	lsls	r3, r1, #5
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4622      	mov	r2, r4
 800d8c8:	1b49      	subs	r1, r1, r5
 800d8ca:	eb62 0206 	sbc.w	r2, r2, r6
 800d8ce:	f04f 0300 	mov.w	r3, #0
 800d8d2:	f04f 0400 	mov.w	r4, #0
 800d8d6:	0194      	lsls	r4, r2, #6
 800d8d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d8dc:	018b      	lsls	r3, r1, #6
 800d8de:	1a5b      	subs	r3, r3, r1
 800d8e0:	eb64 0402 	sbc.w	r4, r4, r2
 800d8e4:	f04f 0100 	mov.w	r1, #0
 800d8e8:	f04f 0200 	mov.w	r2, #0
 800d8ec:	00e2      	lsls	r2, r4, #3
 800d8ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d8f2:	00d9      	lsls	r1, r3, #3
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	4614      	mov	r4, r2
 800d8f8:	195b      	adds	r3, r3, r5
 800d8fa:	eb44 0406 	adc.w	r4, r4, r6
 800d8fe:	f04f 0100 	mov.w	r1, #0
 800d902:	f04f 0200 	mov.w	r2, #0
 800d906:	0262      	lsls	r2, r4, #9
 800d908:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800d90c:	0259      	lsls	r1, r3, #9
 800d90e:	460b      	mov	r3, r1
 800d910:	4614      	mov	r4, r2
 800d912:	4618      	mov	r0, r3
 800d914:	4621      	mov	r1, r4
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f04f 0400 	mov.w	r4, #0
 800d91c:	461a      	mov	r2, r3
 800d91e:	4623      	mov	r3, r4
 800d920:	f7fb f8ca 	bl	8008ab8 <__aeabi_uldivmod>
 800d924:	4603      	mov	r3, r0
 800d926:	460c      	mov	r4, r1
 800d928:	60fb      	str	r3, [r7, #12]
 800d92a:	e049      	b.n	800d9c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d92c:	4b2f      	ldr	r3, [pc, #188]	; (800d9ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	099b      	lsrs	r3, r3, #6
 800d932:	f04f 0400 	mov.w	r4, #0
 800d936:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d93a:	f04f 0200 	mov.w	r2, #0
 800d93e:	ea03 0501 	and.w	r5, r3, r1
 800d942:	ea04 0602 	and.w	r6, r4, r2
 800d946:	4629      	mov	r1, r5
 800d948:	4632      	mov	r2, r6
 800d94a:	f04f 0300 	mov.w	r3, #0
 800d94e:	f04f 0400 	mov.w	r4, #0
 800d952:	0154      	lsls	r4, r2, #5
 800d954:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d958:	014b      	lsls	r3, r1, #5
 800d95a:	4619      	mov	r1, r3
 800d95c:	4622      	mov	r2, r4
 800d95e:	1b49      	subs	r1, r1, r5
 800d960:	eb62 0206 	sbc.w	r2, r2, r6
 800d964:	f04f 0300 	mov.w	r3, #0
 800d968:	f04f 0400 	mov.w	r4, #0
 800d96c:	0194      	lsls	r4, r2, #6
 800d96e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d972:	018b      	lsls	r3, r1, #6
 800d974:	1a5b      	subs	r3, r3, r1
 800d976:	eb64 0402 	sbc.w	r4, r4, r2
 800d97a:	f04f 0100 	mov.w	r1, #0
 800d97e:	f04f 0200 	mov.w	r2, #0
 800d982:	00e2      	lsls	r2, r4, #3
 800d984:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d988:	00d9      	lsls	r1, r3, #3
 800d98a:	460b      	mov	r3, r1
 800d98c:	4614      	mov	r4, r2
 800d98e:	195b      	adds	r3, r3, r5
 800d990:	eb44 0406 	adc.w	r4, r4, r6
 800d994:	f04f 0100 	mov.w	r1, #0
 800d998:	f04f 0200 	mov.w	r2, #0
 800d99c:	02a2      	lsls	r2, r4, #10
 800d99e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d9a2:	0299      	lsls	r1, r3, #10
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	4614      	mov	r4, r2
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f04f 0400 	mov.w	r4, #0
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	4623      	mov	r3, r4
 800d9b6:	f7fb f87f 	bl	8008ab8 <__aeabi_uldivmod>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	460c      	mov	r4, r1
 800d9be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d9c0:	4b0a      	ldr	r3, [pc, #40]	; (800d9ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	0c1b      	lsrs	r3, r3, #16
 800d9c6:	f003 0303 	and.w	r3, r3, #3
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	005b      	lsls	r3, r3, #1
 800d9ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d8:	60bb      	str	r3, [r7, #8]
      break;
 800d9da:	e002      	b.n	800d9e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d9dc:	4b04      	ldr	r3, [pc, #16]	; (800d9f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d9de:	60bb      	str	r3, [r7, #8]
      break;
 800d9e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d9e2:	68bb      	ldr	r3, [r7, #8]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ec:	40023800 	.word	0x40023800
 800d9f0:	00f42400 	.word	0x00f42400
 800d9f4:	007a1200 	.word	0x007a1200

0800d9f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d9fc:	4b03      	ldr	r3, [pc, #12]	; (800da0c <HAL_RCC_GetHCLKFreq+0x14>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
}
 800da00:	4618      	mov	r0, r3
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	20000000 	.word	0x20000000

0800da10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800da14:	f7ff fff0 	bl	800d9f8 <HAL_RCC_GetHCLKFreq>
 800da18:	4601      	mov	r1, r0
 800da1a:	4b05      	ldr	r3, [pc, #20]	; (800da30 <HAL_RCC_GetPCLK1Freq+0x20>)
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	0a9b      	lsrs	r3, r3, #10
 800da20:	f003 0307 	and.w	r3, r3, #7
 800da24:	4a03      	ldr	r2, [pc, #12]	; (800da34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800da26:	5cd3      	ldrb	r3, [r2, r3]
 800da28:	fa21 f303 	lsr.w	r3, r1, r3
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	40023800 	.word	0x40023800
 800da34:	08012370 	.word	0x08012370

0800da38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800da3c:	f7ff ffdc 	bl	800d9f8 <HAL_RCC_GetHCLKFreq>
 800da40:	4601      	mov	r1, r0
 800da42:	4b05      	ldr	r3, [pc, #20]	; (800da58 <HAL_RCC_GetPCLK2Freq+0x20>)
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	0b5b      	lsrs	r3, r3, #13
 800da48:	f003 0307 	and.w	r3, r3, #7
 800da4c:	4a03      	ldr	r2, [pc, #12]	; (800da5c <HAL_RCC_GetPCLK2Freq+0x24>)
 800da4e:	5cd3      	ldrb	r3, [r2, r3]
 800da50:	fa21 f303 	lsr.w	r3, r1, r3
}
 800da54:	4618      	mov	r0, r3
 800da56:	bd80      	pop	{r7, pc}
 800da58:	40023800 	.word	0x40023800
 800da5c:	08012370 	.word	0x08012370

0800da60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	e056      	b.n	800db20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	d106      	bne.n	800da92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7fc ff9d 	bl	800a9cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2202      	movs	r2, #2
 800da96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800daa8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	431a      	orrs	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	431a      	orrs	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	431a      	orrs	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	695b      	ldr	r3, [r3, #20]
 800dac4:	431a      	orrs	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dace:	431a      	orrs	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	69db      	ldr	r3, [r3, #28]
 800dad4:	431a      	orrs	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	ea42 0103 	orr.w	r1, r2, r3
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	430a      	orrs	r2, r1
 800dae8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	699b      	ldr	r3, [r3, #24]
 800daee:	0c1b      	lsrs	r3, r3, #16
 800daf0:	f003 0104 	and.w	r1, r3, #4
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	430a      	orrs	r2, r1
 800dafe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	69da      	ldr	r2, [r3, #28]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e01d      	b.n	800db76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d106      	bne.n	800db54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7fc ff84 	bl	800aa5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2202      	movs	r2, #2
 800db58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	3304      	adds	r3, #4
 800db64:	4619      	mov	r1, r3
 800db66:	4610      	mov	r0, r2
 800db68:	f000 fe3e 	bl	800e7e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db7e:	b480      	push	{r7}
 800db80:	b085      	sub	sp, #20
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	68da      	ldr	r2, [r3, #12]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f042 0201 	orr.w	r2, r2, #1
 800db94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	f003 0307 	and.w	r3, r3, #7
 800dba0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b06      	cmp	r3, #6
 800dba6:	d007      	beq.n	800dbb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f042 0201 	orr.w	r2, r2, #1
 800dbb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3714      	adds	r7, #20
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b083      	sub	sp, #12
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f022 0201 	bic.w	r2, r2, #1
 800dbdc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	6a1a      	ldr	r2, [r3, #32]
 800dbe4:	f241 1311 	movw	r3, #4369	; 0x1111
 800dbe8:	4013      	ands	r3, r2
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10f      	bne.n	800dc0e <HAL_TIM_Base_Stop_IT+0x48>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	6a1a      	ldr	r2, [r3, #32]
 800dbf4:	f240 4344 	movw	r3, #1092	; 0x444
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d107      	bne.n	800dc0e <HAL_TIM_Base_Stop_IT+0x48>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f022 0201 	bic.w	r2, r2, #1
 800dc0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e01d      	b.n	800dc6a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d106      	bne.n	800dc48 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f815 	bl	800dc72 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2202      	movs	r2, #2
 800dc4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f000 fdc4 	bl	800e7e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800dc7a:	bf00      	nop
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
	...

0800dc88 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2b0c      	cmp	r3, #12
 800dc96:	d841      	bhi.n	800dd1c <HAL_TIM_OC_Start_IT+0x94>
 800dc98:	a201      	add	r2, pc, #4	; (adr r2, 800dca0 <HAL_TIM_OC_Start_IT+0x18>)
 800dc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc9e:	bf00      	nop
 800dca0:	0800dcd5 	.word	0x0800dcd5
 800dca4:	0800dd1d 	.word	0x0800dd1d
 800dca8:	0800dd1d 	.word	0x0800dd1d
 800dcac:	0800dd1d 	.word	0x0800dd1d
 800dcb0:	0800dce7 	.word	0x0800dce7
 800dcb4:	0800dd1d 	.word	0x0800dd1d
 800dcb8:	0800dd1d 	.word	0x0800dd1d
 800dcbc:	0800dd1d 	.word	0x0800dd1d
 800dcc0:	0800dcf9 	.word	0x0800dcf9
 800dcc4:	0800dd1d 	.word	0x0800dd1d
 800dcc8:	0800dd1d 	.word	0x0800dd1d
 800dccc:	0800dd1d 	.word	0x0800dd1d
 800dcd0:	0800dd0b 	.word	0x0800dd0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	68da      	ldr	r2, [r3, #12]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f042 0202 	orr.w	r2, r2, #2
 800dce2:	60da      	str	r2, [r3, #12]
      break;
 800dce4:	e01b      	b.n	800dd1e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68da      	ldr	r2, [r3, #12]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f042 0204 	orr.w	r2, r2, #4
 800dcf4:	60da      	str	r2, [r3, #12]
      break;
 800dcf6:	e012      	b.n	800dd1e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	68da      	ldr	r2, [r3, #12]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f042 0208 	orr.w	r2, r2, #8
 800dd06:	60da      	str	r2, [r3, #12]
      break;
 800dd08:	e009      	b.n	800dd1e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68da      	ldr	r2, [r3, #12]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f042 0210 	orr.w	r2, r2, #16
 800dd18:	60da      	str	r2, [r3, #12]
      break;
 800dd1a:	e000      	b.n	800dd1e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800dd1c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2201      	movs	r2, #1
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	4618      	mov	r0, r3
 800dd28:	f001 f848 	bl	800edbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a15      	ldr	r2, [pc, #84]	; (800dd88 <HAL_TIM_OC_Start_IT+0x100>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d004      	beq.n	800dd40 <HAL_TIM_OC_Start_IT+0xb8>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a14      	ldr	r2, [pc, #80]	; (800dd8c <HAL_TIM_OC_Start_IT+0x104>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d101      	bne.n	800dd44 <HAL_TIM_OC_Start_IT+0xbc>
 800dd40:	2301      	movs	r3, #1
 800dd42:	e000      	b.n	800dd46 <HAL_TIM_OC_Start_IT+0xbe>
 800dd44:	2300      	movs	r3, #0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d007      	beq.n	800dd5a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	f003 0307 	and.w	r3, r3, #7
 800dd64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2b06      	cmp	r3, #6
 800dd6a:	d007      	beq.n	800dd7c <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f042 0201 	orr.w	r2, r2, #1
 800dd7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	40010000 	.word	0x40010000
 800dd8c:	40010400 	.word	0x40010400

0800dd90 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	2b0c      	cmp	r3, #12
 800dd9e:	d841      	bhi.n	800de24 <HAL_TIM_OC_Stop_IT+0x94>
 800dda0:	a201      	add	r2, pc, #4	; (adr r2, 800dda8 <HAL_TIM_OC_Stop_IT+0x18>)
 800dda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda6:	bf00      	nop
 800dda8:	0800dddd 	.word	0x0800dddd
 800ddac:	0800de25 	.word	0x0800de25
 800ddb0:	0800de25 	.word	0x0800de25
 800ddb4:	0800de25 	.word	0x0800de25
 800ddb8:	0800ddef 	.word	0x0800ddef
 800ddbc:	0800de25 	.word	0x0800de25
 800ddc0:	0800de25 	.word	0x0800de25
 800ddc4:	0800de25 	.word	0x0800de25
 800ddc8:	0800de01 	.word	0x0800de01
 800ddcc:	0800de25 	.word	0x0800de25
 800ddd0:	0800de25 	.word	0x0800de25
 800ddd4:	0800de25 	.word	0x0800de25
 800ddd8:	0800de13 	.word	0x0800de13
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68da      	ldr	r2, [r3, #12]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f022 0202 	bic.w	r2, r2, #2
 800ddea:	60da      	str	r2, [r3, #12]
      break;
 800ddec:	e01b      	b.n	800de26 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68da      	ldr	r2, [r3, #12]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f022 0204 	bic.w	r2, r2, #4
 800ddfc:	60da      	str	r2, [r3, #12]
      break;
 800ddfe:	e012      	b.n	800de26 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68da      	ldr	r2, [r3, #12]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f022 0208 	bic.w	r2, r2, #8
 800de0e:	60da      	str	r2, [r3, #12]
      break;
 800de10:	e009      	b.n	800de26 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f022 0210 	bic.w	r2, r2, #16
 800de20:	60da      	str	r2, [r3, #12]
      break;
 800de22:	e000      	b.n	800de26 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800de24:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2200      	movs	r2, #0
 800de2c:	6839      	ldr	r1, [r7, #0]
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 ffc4 	bl	800edbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a20      	ldr	r2, [pc, #128]	; (800debc <HAL_TIM_OC_Stop_IT+0x12c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d004      	beq.n	800de48 <HAL_TIM_OC_Stop_IT+0xb8>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a1f      	ldr	r2, [pc, #124]	; (800dec0 <HAL_TIM_OC_Stop_IT+0x130>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d101      	bne.n	800de4c <HAL_TIM_OC_Stop_IT+0xbc>
 800de48:	2301      	movs	r3, #1
 800de4a:	e000      	b.n	800de4e <HAL_TIM_OC_Stop_IT+0xbe>
 800de4c:	2300      	movs	r3, #0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d017      	beq.n	800de82 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	6a1a      	ldr	r2, [r3, #32]
 800de58:	f241 1311 	movw	r3, #4369	; 0x1111
 800de5c:	4013      	ands	r3, r2
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10f      	bne.n	800de82 <HAL_TIM_OC_Stop_IT+0xf2>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6a1a      	ldr	r2, [r3, #32]
 800de68:	f240 4344 	movw	r3, #1092	; 0x444
 800de6c:	4013      	ands	r3, r2
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d107      	bne.n	800de82 <HAL_TIM_OC_Stop_IT+0xf2>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800de80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6a1a      	ldr	r2, [r3, #32]
 800de88:	f241 1311 	movw	r3, #4369	; 0x1111
 800de8c:	4013      	ands	r3, r2
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10f      	bne.n	800deb2 <HAL_TIM_OC_Stop_IT+0x122>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6a1a      	ldr	r2, [r3, #32]
 800de98:	f240 4344 	movw	r3, #1092	; 0x444
 800de9c:	4013      	ands	r3, r2
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d107      	bne.n	800deb2 <HAL_TIM_OC_Stop_IT+0x122>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f022 0201 	bic.w	r2, r2, #1
 800deb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	40010000 	.word	0x40010000
 800dec0:	40010400 	.word	0x40010400

0800dec4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d101      	bne.n	800ded6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	e01d      	b.n	800df12 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d106      	bne.n	800def0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f815 	bl	800df1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2202      	movs	r2, #2
 800def4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	3304      	adds	r3, #4
 800df00:	4619      	mov	r1, r3
 800df02:	4610      	mov	r0, r2
 800df04:	f000 fc70 	bl	800e7e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2201      	movs	r2, #1
 800df0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800df22:	bf00      	nop
 800df24:	370c      	adds	r7, #12
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
	...

0800df30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2201      	movs	r2, #1
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	4618      	mov	r0, r3
 800df44:	f000 ff3a 	bl	800edbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a15      	ldr	r2, [pc, #84]	; (800dfa4 <HAL_TIM_PWM_Start+0x74>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d004      	beq.n	800df5c <HAL_TIM_PWM_Start+0x2c>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a14      	ldr	r2, [pc, #80]	; (800dfa8 <HAL_TIM_PWM_Start+0x78>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d101      	bne.n	800df60 <HAL_TIM_PWM_Start+0x30>
 800df5c:	2301      	movs	r3, #1
 800df5e:	e000      	b.n	800df62 <HAL_TIM_PWM_Start+0x32>
 800df60:	2300      	movs	r3, #0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d007      	beq.n	800df76 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800df74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	f003 0307 	and.w	r3, r3, #7
 800df80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b06      	cmp	r3, #6
 800df86:	d007      	beq.n	800df98 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f042 0201 	orr.w	r2, r2, #1
 800df96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800df98:	2300      	movs	r3, #0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	40010000 	.word	0x40010000
 800dfa8:	40010400 	.word	0x40010400

0800dfac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d101      	bne.n	800dfc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e083      	b.n	800e0c8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d106      	bne.n	800dfda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7fc fdd1 	bl	800ab7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2202      	movs	r2, #2
 800dfde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	6812      	ldr	r2, [r2, #0]
 800dfec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dff0:	f023 0307 	bic.w	r3, r3, #7
 800dff4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	3304      	adds	r3, #4
 800dffe:	4619      	mov	r1, r3
 800e000:	4610      	mov	r0, r2
 800e002:	f000 fbf1 	bl	800e7e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	699b      	ldr	r3, [r3, #24]
 800e014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	4313      	orrs	r3, r2
 800e026:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e02e:	f023 0303 	bic.w	r3, r3, #3
 800e032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	689a      	ldr	r2, [r3, #8]
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	021b      	lsls	r3, r3, #8
 800e03e:	4313      	orrs	r3, r2
 800e040:	693a      	ldr	r2, [r7, #16]
 800e042:	4313      	orrs	r3, r2
 800e044:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e04c:	f023 030c 	bic.w	r3, r3, #12
 800e050:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e05c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	68da      	ldr	r2, [r3, #12]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	69db      	ldr	r3, [r3, #28]
 800e066:	021b      	lsls	r3, r3, #8
 800e068:	4313      	orrs	r3, r2
 800e06a:	693a      	ldr	r2, [r7, #16]
 800e06c:	4313      	orrs	r3, r2
 800e06e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	011a      	lsls	r2, r3, #4
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	6a1b      	ldr	r3, [r3, #32]
 800e07a:	031b      	lsls	r3, r3, #12
 800e07c:	4313      	orrs	r3, r2
 800e07e:	693a      	ldr	r2, [r7, #16]
 800e080:	4313      	orrs	r3, r2
 800e082:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e08a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e092:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	011b      	lsls	r3, r3, #4
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	693a      	ldr	r2, [r7, #16]
 800e0b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <HAL_TIM_Encoder_Start+0x16>
 800e0e0:	2b04      	cmp	r3, #4
 800e0e2:	d008      	beq.n	800e0f6 <HAL_TIM_Encoder_Start+0x26>
 800e0e4:	e00f      	b.n	800e106 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f000 fe64 	bl	800edbc <TIM_CCxChannelCmd>
      break;
 800e0f4:	e016      	b.n	800e124 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	2104      	movs	r1, #4
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 fe5c 	bl	800edbc <TIM_CCxChannelCmd>
      break;
 800e104:	e00e      	b.n	800e124 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2201      	movs	r2, #1
 800e10c:	2100      	movs	r1, #0
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 fe54 	bl	800edbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2201      	movs	r2, #1
 800e11a:	2104      	movs	r1, #4
 800e11c:	4618      	mov	r0, r3
 800e11e:	f000 fe4d 	bl	800edbc <TIM_CCxChannelCmd>
      break;
 800e122:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f042 0201 	orr.w	r2, r2, #1
 800e132:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3708      	adds	r7, #8
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b082      	sub	sp, #8
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <HAL_TIM_Encoder_Stop+0x16>
 800e14e:	2b04      	cmp	r3, #4
 800e150:	d008      	beq.n	800e164 <HAL_TIM_Encoder_Stop+0x26>
 800e152:	e00f      	b.n	800e174 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2200      	movs	r2, #0
 800e15a:	2100      	movs	r1, #0
 800e15c:	4618      	mov	r0, r3
 800e15e:	f000 fe2d 	bl	800edbc <TIM_CCxChannelCmd>
      break;
 800e162:	e016      	b.n	800e192 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2200      	movs	r2, #0
 800e16a:	2104      	movs	r1, #4
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 fe25 	bl	800edbc <TIM_CCxChannelCmd>
      break;
 800e172:	e00e      	b.n	800e192 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2200      	movs	r2, #0
 800e17a:	2100      	movs	r1, #0
 800e17c:	4618      	mov	r0, r3
 800e17e:	f000 fe1d 	bl	800edbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2200      	movs	r2, #0
 800e188:	2104      	movs	r1, #4
 800e18a:	4618      	mov	r0, r3
 800e18c:	f000 fe16 	bl	800edbc <TIM_CCxChannelCmd>
      break;
 800e190:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	6a1a      	ldr	r2, [r3, #32]
 800e198:	f241 1311 	movw	r3, #4369	; 0x1111
 800e19c:	4013      	ands	r3, r2
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10f      	bne.n	800e1c2 <HAL_TIM_Encoder_Stop+0x84>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	6a1a      	ldr	r2, [r3, #32]
 800e1a8:	f240 4344 	movw	r3, #1092	; 0x444
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d107      	bne.n	800e1c2 <HAL_TIM_Encoder_Stop+0x84>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f022 0201 	bic.w	r2, r2, #1
 800e1c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	f003 0302 	and.w	r3, r3, #2
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	d122      	bne.n	800e228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	f003 0302 	and.w	r3, r3, #2
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d11b      	bne.n	800e228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f06f 0202 	mvn.w	r2, #2
 800e1f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	699b      	ldr	r3, [r3, #24]
 800e206:	f003 0303 	and.w	r3, r3, #3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d003      	beq.n	800e216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 facb 	bl	800e7aa <HAL_TIM_IC_CaptureCallback>
 800e214:	e005      	b.n	800e222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fabd 	bl	800e796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 face 	bl	800e7be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	f003 0304 	and.w	r3, r3, #4
 800e232:	2b04      	cmp	r3, #4
 800e234:	d122      	bne.n	800e27c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b04      	cmp	r3, #4
 800e242:	d11b      	bne.n	800e27c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f06f 0204 	mvn.w	r2, #4
 800e24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2202      	movs	r2, #2
 800e252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	699b      	ldr	r3, [r3, #24]
 800e25a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d003      	beq.n	800e26a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 faa1 	bl	800e7aa <HAL_TIM_IC_CaptureCallback>
 800e268:	e005      	b.n	800e276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fa93 	bl	800e796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 faa4 	bl	800e7be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	f003 0308 	and.w	r3, r3, #8
 800e286:	2b08      	cmp	r3, #8
 800e288:	d122      	bne.n	800e2d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	f003 0308 	and.w	r3, r3, #8
 800e294:	2b08      	cmp	r3, #8
 800e296:	d11b      	bne.n	800e2d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f06f 0208 	mvn.w	r2, #8
 800e2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2204      	movs	r2, #4
 800e2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	69db      	ldr	r3, [r3, #28]
 800e2ae:	f003 0303 	and.w	r3, r3, #3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d003      	beq.n	800e2be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 fa77 	bl	800e7aa <HAL_TIM_IC_CaptureCallback>
 800e2bc:	e005      	b.n	800e2ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 fa69 	bl	800e796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fa7a 	bl	800e7be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	f003 0310 	and.w	r3, r3, #16
 800e2da:	2b10      	cmp	r3, #16
 800e2dc:	d122      	bne.n	800e324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	f003 0310 	and.w	r3, r3, #16
 800e2e8:	2b10      	cmp	r3, #16
 800e2ea:	d11b      	bne.n	800e324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f06f 0210 	mvn.w	r2, #16
 800e2f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2208      	movs	r2, #8
 800e2fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	69db      	ldr	r3, [r3, #28]
 800e302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e306:	2b00      	cmp	r3, #0
 800e308:	d003      	beq.n	800e312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fa4d 	bl	800e7aa <HAL_TIM_IC_CaptureCallback>
 800e310:	e005      	b.n	800e31e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 fa3f 	bl	800e796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fa50 	bl	800e7be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	691b      	ldr	r3, [r3, #16]
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d10e      	bne.n	800e350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	f003 0301 	and.w	r3, r3, #1
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d107      	bne.n	800e350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f06f 0201 	mvn.w	r2, #1
 800e348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f7fb f922 	bl	8009594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e35a:	2b80      	cmp	r3, #128	; 0x80
 800e35c:	d10e      	bne.n	800e37c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e368:	2b80      	cmp	r3, #128	; 0x80
 800e36a:	d107      	bne.n	800e37c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 fee8 	bl	800f14c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e386:	2b40      	cmp	r3, #64	; 0x40
 800e388:	d10e      	bne.n	800e3a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e394:	2b40      	cmp	r3, #64	; 0x40
 800e396:	d107      	bne.n	800e3a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fa15 	bl	800e7d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	f003 0320 	and.w	r3, r3, #32
 800e3b2:	2b20      	cmp	r3, #32
 800e3b4:	d10e      	bne.n	800e3d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	f003 0320 	and.w	r3, r3, #32
 800e3c0:	2b20      	cmp	r3, #32
 800e3c2:	d107      	bne.n	800e3d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f06f 0220 	mvn.w	r2, #32
 800e3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 feb2 	bl	800f138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3d4:	bf00      	nop
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d101      	bne.n	800e3f6 <HAL_TIM_OC_ConfigChannel+0x1a>
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	e04e      	b.n	800e494 <HAL_TIM_OC_ConfigChannel+0xb8>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2202      	movs	r2, #2
 800e402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b0c      	cmp	r3, #12
 800e40a:	d839      	bhi.n	800e480 <HAL_TIM_OC_ConfigChannel+0xa4>
 800e40c:	a201      	add	r2, pc, #4	; (adr r2, 800e414 <HAL_TIM_OC_ConfigChannel+0x38>)
 800e40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e412:	bf00      	nop
 800e414:	0800e449 	.word	0x0800e449
 800e418:	0800e481 	.word	0x0800e481
 800e41c:	0800e481 	.word	0x0800e481
 800e420:	0800e481 	.word	0x0800e481
 800e424:	0800e457 	.word	0x0800e457
 800e428:	0800e481 	.word	0x0800e481
 800e42c:	0800e481 	.word	0x0800e481
 800e430:	0800e481 	.word	0x0800e481
 800e434:	0800e465 	.word	0x0800e465
 800e438:	0800e481 	.word	0x0800e481
 800e43c:	0800e481 	.word	0x0800e481
 800e440:	0800e481 	.word	0x0800e481
 800e444:	0800e473 	.word	0x0800e473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	68b9      	ldr	r1, [r7, #8]
 800e44e:	4618      	mov	r0, r3
 800e450:	f000 fa6a 	bl	800e928 <TIM_OC1_SetConfig>
      break;
 800e454:	e015      	b.n	800e482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68b9      	ldr	r1, [r7, #8]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f000 fad3 	bl	800ea08 <TIM_OC2_SetConfig>
      break;
 800e462:	e00e      	b.n	800e482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 fb42 	bl	800eaf4 <TIM_OC3_SetConfig>
      break;
 800e470:	e007      	b.n	800e482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	68b9      	ldr	r1, [r7, #8]
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 fbaf 	bl	800ebdc <TIM_OC4_SetConfig>
      break;
 800e47e:	e000      	b.n	800e482 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800e480:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2201      	movs	r2, #1
 800e486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d101      	bne.n	800e4b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e4b2:	2302      	movs	r3, #2
 800e4b4:	e0b4      	b.n	800e620 <HAL_TIM_PWM_ConfigChannel+0x184>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b0c      	cmp	r3, #12
 800e4ca:	f200 809f 	bhi.w	800e60c <HAL_TIM_PWM_ConfigChannel+0x170>
 800e4ce:	a201      	add	r2, pc, #4	; (adr r2, 800e4d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d4:	0800e509 	.word	0x0800e509
 800e4d8:	0800e60d 	.word	0x0800e60d
 800e4dc:	0800e60d 	.word	0x0800e60d
 800e4e0:	0800e60d 	.word	0x0800e60d
 800e4e4:	0800e549 	.word	0x0800e549
 800e4e8:	0800e60d 	.word	0x0800e60d
 800e4ec:	0800e60d 	.word	0x0800e60d
 800e4f0:	0800e60d 	.word	0x0800e60d
 800e4f4:	0800e58b 	.word	0x0800e58b
 800e4f8:	0800e60d 	.word	0x0800e60d
 800e4fc:	0800e60d 	.word	0x0800e60d
 800e500:	0800e60d 	.word	0x0800e60d
 800e504:	0800e5cb 	.word	0x0800e5cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 fa0a 	bl	800e928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	699a      	ldr	r2, [r3, #24]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f042 0208 	orr.w	r2, r2, #8
 800e522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	699a      	ldr	r2, [r3, #24]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f022 0204 	bic.w	r2, r2, #4
 800e532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	6999      	ldr	r1, [r3, #24]
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	691a      	ldr	r2, [r3, #16]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	430a      	orrs	r2, r1
 800e544:	619a      	str	r2, [r3, #24]
      break;
 800e546:	e062      	b.n	800e60e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	68b9      	ldr	r1, [r7, #8]
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 fa5a 	bl	800ea08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	699a      	ldr	r2, [r3, #24]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	699a      	ldr	r2, [r3, #24]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6999      	ldr	r1, [r3, #24]
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	021a      	lsls	r2, r3, #8
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	430a      	orrs	r2, r1
 800e586:	619a      	str	r2, [r3, #24]
      break;
 800e588:	e041      	b.n	800e60e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68b9      	ldr	r1, [r7, #8]
 800e590:	4618      	mov	r0, r3
 800e592:	f000 faaf 	bl	800eaf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	69da      	ldr	r2, [r3, #28]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f042 0208 	orr.w	r2, r2, #8
 800e5a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	69da      	ldr	r2, [r3, #28]
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f022 0204 	bic.w	r2, r2, #4
 800e5b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	69d9      	ldr	r1, [r3, #28]
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	691a      	ldr	r2, [r3, #16]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	430a      	orrs	r2, r1
 800e5c6:	61da      	str	r2, [r3, #28]
      break;
 800e5c8:	e021      	b.n	800e60e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	68b9      	ldr	r1, [r7, #8]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 fb03 	bl	800ebdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	69da      	ldr	r2, [r3, #28]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	69da      	ldr	r2, [r3, #28]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	69d9      	ldr	r1, [r3, #28]
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	021a      	lsls	r2, r3, #8
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	430a      	orrs	r2, r1
 800e608:	61da      	str	r2, [r3, #28]
      break;
 800e60a:	e000      	b.n	800e60e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e60c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3710      	adds	r7, #16
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d101      	bne.n	800e640 <HAL_TIM_ConfigClockSource+0x18>
 800e63c:	2302      	movs	r3, #2
 800e63e:	e0a6      	b.n	800e78e <HAL_TIM_ConfigClockSource+0x166>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2202      	movs	r2, #2
 800e64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e65e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e666:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b40      	cmp	r3, #64	; 0x40
 800e676:	d067      	beq.n	800e748 <HAL_TIM_ConfigClockSource+0x120>
 800e678:	2b40      	cmp	r3, #64	; 0x40
 800e67a:	d80b      	bhi.n	800e694 <HAL_TIM_ConfigClockSource+0x6c>
 800e67c:	2b10      	cmp	r3, #16
 800e67e:	d073      	beq.n	800e768 <HAL_TIM_ConfigClockSource+0x140>
 800e680:	2b10      	cmp	r3, #16
 800e682:	d802      	bhi.n	800e68a <HAL_TIM_ConfigClockSource+0x62>
 800e684:	2b00      	cmp	r3, #0
 800e686:	d06f      	beq.n	800e768 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e688:	e078      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e68a:	2b20      	cmp	r3, #32
 800e68c:	d06c      	beq.n	800e768 <HAL_TIM_ConfigClockSource+0x140>
 800e68e:	2b30      	cmp	r3, #48	; 0x30
 800e690:	d06a      	beq.n	800e768 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e692:	e073      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e694:	2b70      	cmp	r3, #112	; 0x70
 800e696:	d00d      	beq.n	800e6b4 <HAL_TIM_ConfigClockSource+0x8c>
 800e698:	2b70      	cmp	r3, #112	; 0x70
 800e69a:	d804      	bhi.n	800e6a6 <HAL_TIM_ConfigClockSource+0x7e>
 800e69c:	2b50      	cmp	r3, #80	; 0x50
 800e69e:	d033      	beq.n	800e708 <HAL_TIM_ConfigClockSource+0xe0>
 800e6a0:	2b60      	cmp	r3, #96	; 0x60
 800e6a2:	d041      	beq.n	800e728 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e6a4:	e06a      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e6a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6aa:	d066      	beq.n	800e77a <HAL_TIM_ConfigClockSource+0x152>
 800e6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6b0:	d017      	beq.n	800e6e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e6b2:	e063      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6818      	ldr	r0, [r3, #0]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	6899      	ldr	r1, [r3, #8]
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	685a      	ldr	r2, [r3, #4]
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	f000 fb5a 	bl	800ed7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e6d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	609a      	str	r2, [r3, #8]
      break;
 800e6e0:	e04c      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6818      	ldr	r0, [r3, #0]
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	6899      	ldr	r1, [r3, #8]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	685a      	ldr	r2, [r3, #4]
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	f000 fb43 	bl	800ed7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	689a      	ldr	r2, [r3, #8]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e704:	609a      	str	r2, [r3, #8]
      break;
 800e706:	e039      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6818      	ldr	r0, [r3, #0]
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	6859      	ldr	r1, [r3, #4]
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	461a      	mov	r2, r3
 800e716:	f000 fab7 	bl	800ec88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2150      	movs	r1, #80	; 0x50
 800e720:	4618      	mov	r0, r3
 800e722:	f000 fb10 	bl	800ed46 <TIM_ITRx_SetConfig>
      break;
 800e726:	e029      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6818      	ldr	r0, [r3, #0]
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	6859      	ldr	r1, [r3, #4]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	461a      	mov	r2, r3
 800e736:	f000 fad6 	bl	800ece6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2160      	movs	r1, #96	; 0x60
 800e740:	4618      	mov	r0, r3
 800e742:	f000 fb00 	bl	800ed46 <TIM_ITRx_SetConfig>
      break;
 800e746:	e019      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6818      	ldr	r0, [r3, #0]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	6859      	ldr	r1, [r3, #4]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	461a      	mov	r2, r3
 800e756:	f000 fa97 	bl	800ec88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2140      	movs	r1, #64	; 0x40
 800e760:	4618      	mov	r0, r3
 800e762:	f000 faf0 	bl	800ed46 <TIM_ITRx_SetConfig>
      break;
 800e766:	e009      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4619      	mov	r1, r3
 800e772:	4610      	mov	r0, r2
 800e774:	f000 fae7 	bl	800ed46 <TIM_ITRx_SetConfig>
      break;
 800e778:	e000      	b.n	800e77c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e77a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2201      	movs	r2, #1
 800e780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e796:	b480      	push	{r7}
 800e798:	b083      	sub	sp, #12
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e79e:	bf00      	nop
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr

0800e7aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e7aa:	b480      	push	{r7}
 800e7ac:	b083      	sub	sp, #12
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7b2:	bf00      	nop
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e7be:	b480      	push	{r7}
 800e7c0:	b083      	sub	sp, #12
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e7c6:	bf00      	nop
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b083      	sub	sp, #12
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e7da:	bf00      	nop
 800e7dc:	370c      	adds	r7, #12
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
	...

0800e7e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a40      	ldr	r2, [pc, #256]	; (800e8fc <TIM_Base_SetConfig+0x114>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d013      	beq.n	800e828 <TIM_Base_SetConfig+0x40>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e806:	d00f      	beq.n	800e828 <TIM_Base_SetConfig+0x40>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a3d      	ldr	r2, [pc, #244]	; (800e900 <TIM_Base_SetConfig+0x118>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d00b      	beq.n	800e828 <TIM_Base_SetConfig+0x40>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4a3c      	ldr	r2, [pc, #240]	; (800e904 <TIM_Base_SetConfig+0x11c>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d007      	beq.n	800e828 <TIM_Base_SetConfig+0x40>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4a3b      	ldr	r2, [pc, #236]	; (800e908 <TIM_Base_SetConfig+0x120>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d003      	beq.n	800e828 <TIM_Base_SetConfig+0x40>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4a3a      	ldr	r2, [pc, #232]	; (800e90c <TIM_Base_SetConfig+0x124>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d108      	bne.n	800e83a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e82e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	4313      	orrs	r3, r2
 800e838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4a2f      	ldr	r2, [pc, #188]	; (800e8fc <TIM_Base_SetConfig+0x114>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d02b      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e848:	d027      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a2c      	ldr	r2, [pc, #176]	; (800e900 <TIM_Base_SetConfig+0x118>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d023      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a2b      	ldr	r2, [pc, #172]	; (800e904 <TIM_Base_SetConfig+0x11c>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d01f      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a2a      	ldr	r2, [pc, #168]	; (800e908 <TIM_Base_SetConfig+0x120>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d01b      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4a29      	ldr	r2, [pc, #164]	; (800e90c <TIM_Base_SetConfig+0x124>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d017      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4a28      	ldr	r2, [pc, #160]	; (800e910 <TIM_Base_SetConfig+0x128>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d013      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a27      	ldr	r2, [pc, #156]	; (800e914 <TIM_Base_SetConfig+0x12c>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d00f      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a26      	ldr	r2, [pc, #152]	; (800e918 <TIM_Base_SetConfig+0x130>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d00b      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a25      	ldr	r2, [pc, #148]	; (800e91c <TIM_Base_SetConfig+0x134>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d007      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a24      	ldr	r2, [pc, #144]	; (800e920 <TIM_Base_SetConfig+0x138>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d003      	beq.n	800e89a <TIM_Base_SetConfig+0xb2>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a23      	ldr	r2, [pc, #140]	; (800e924 <TIM_Base_SetConfig+0x13c>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d108      	bne.n	800e8ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	695b      	ldr	r3, [r3, #20]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	689a      	ldr	r2, [r3, #8]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a0a      	ldr	r2, [pc, #40]	; (800e8fc <TIM_Base_SetConfig+0x114>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d003      	beq.n	800e8e0 <TIM_Base_SetConfig+0xf8>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a0c      	ldr	r2, [pc, #48]	; (800e90c <TIM_Base_SetConfig+0x124>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d103      	bne.n	800e8e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	691a      	ldr	r2, [r3, #16]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	615a      	str	r2, [r3, #20]
}
 800e8ee:	bf00      	nop
 800e8f0:	3714      	adds	r7, #20
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	40010000 	.word	0x40010000
 800e900:	40000400 	.word	0x40000400
 800e904:	40000800 	.word	0x40000800
 800e908:	40000c00 	.word	0x40000c00
 800e90c:	40010400 	.word	0x40010400
 800e910:	40014000 	.word	0x40014000
 800e914:	40014400 	.word	0x40014400
 800e918:	40014800 	.word	0x40014800
 800e91c:	40001800 	.word	0x40001800
 800e920:	40001c00 	.word	0x40001c00
 800e924:	40002000 	.word	0x40002000

0800e928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e928:	b480      	push	{r7}
 800e92a:	b087      	sub	sp, #28
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	f023 0201 	bic.w	r2, r3, #1
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a1b      	ldr	r3, [r3, #32]
 800e942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f023 0303 	bic.w	r3, r3, #3
 800e95e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	4313      	orrs	r3, r2
 800e968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f023 0302 	bic.w	r3, r3, #2
 800e970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	697a      	ldr	r2, [r7, #20]
 800e978:	4313      	orrs	r3, r2
 800e97a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4a20      	ldr	r2, [pc, #128]	; (800ea00 <TIM_OC1_SetConfig+0xd8>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d003      	beq.n	800e98c <TIM_OC1_SetConfig+0x64>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a1f      	ldr	r2, [pc, #124]	; (800ea04 <TIM_OC1_SetConfig+0xdc>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d10c      	bne.n	800e9a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	f023 0308 	bic.w	r3, r3, #8
 800e992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	697a      	ldr	r2, [r7, #20]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	f023 0304 	bic.w	r3, r3, #4
 800e9a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4a15      	ldr	r2, [pc, #84]	; (800ea00 <TIM_OC1_SetConfig+0xd8>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d003      	beq.n	800e9b6 <TIM_OC1_SetConfig+0x8e>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4a14      	ldr	r2, [pc, #80]	; (800ea04 <TIM_OC1_SetConfig+0xdc>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d111      	bne.n	800e9da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e9c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	695b      	ldr	r3, [r3, #20]
 800e9ca:	693a      	ldr	r2, [r7, #16]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	699b      	ldr	r3, [r3, #24]
 800e9d4:	693a      	ldr	r2, [r7, #16]
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	693a      	ldr	r2, [r7, #16]
 800e9de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	685a      	ldr	r2, [r3, #4]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	697a      	ldr	r2, [r7, #20]
 800e9f2:	621a      	str	r2, [r3, #32]
}
 800e9f4:	bf00      	nop
 800e9f6:	371c      	adds	r7, #28
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr
 800ea00:	40010000 	.word	0x40010000
 800ea04:	40010400 	.word	0x40010400

0800ea08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b087      	sub	sp, #28
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a1b      	ldr	r3, [r3, #32]
 800ea16:	f023 0210 	bic.w	r2, r3, #16
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	699b      	ldr	r3, [r3, #24]
 800ea2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	021b      	lsls	r3, r3, #8
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	f023 0320 	bic.w	r3, r3, #32
 800ea52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	011b      	lsls	r3, r3, #4
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	4a22      	ldr	r2, [pc, #136]	; (800eaec <TIM_OC2_SetConfig+0xe4>)
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d003      	beq.n	800ea70 <TIM_OC2_SetConfig+0x68>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	4a21      	ldr	r2, [pc, #132]	; (800eaf0 <TIM_OC2_SetConfig+0xe8>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d10d      	bne.n	800ea8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	011b      	lsls	r3, r3, #4
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4a17      	ldr	r2, [pc, #92]	; (800eaec <TIM_OC2_SetConfig+0xe4>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d003      	beq.n	800ea9c <TIM_OC2_SetConfig+0x94>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	4a16      	ldr	r2, [pc, #88]	; (800eaf0 <TIM_OC2_SetConfig+0xe8>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d113      	bne.n	800eac4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eaa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eaaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	695b      	ldr	r3, [r3, #20]
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	693a      	ldr	r2, [r7, #16]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	693a      	ldr	r2, [r7, #16]
 800eac0:	4313      	orrs	r3, r2
 800eac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	693a      	ldr	r2, [r7, #16]
 800eac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	621a      	str	r2, [r3, #32]
}
 800eade:	bf00      	nop
 800eae0:	371c      	adds	r7, #28
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	40010000 	.word	0x40010000
 800eaf0:	40010400 	.word	0x40010400

0800eaf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b087      	sub	sp, #28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	69db      	ldr	r3, [r3, #28]
 800eb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f023 0303 	bic.w	r3, r3, #3
 800eb2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	021b      	lsls	r3, r3, #8
 800eb44:	697a      	ldr	r2, [r7, #20]
 800eb46:	4313      	orrs	r3, r2
 800eb48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4a21      	ldr	r2, [pc, #132]	; (800ebd4 <TIM_OC3_SetConfig+0xe0>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d003      	beq.n	800eb5a <TIM_OC3_SetConfig+0x66>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4a20      	ldr	r2, [pc, #128]	; (800ebd8 <TIM_OC3_SetConfig+0xe4>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d10d      	bne.n	800eb76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	021b      	lsls	r3, r3, #8
 800eb68:	697a      	ldr	r2, [r7, #20]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a16      	ldr	r2, [pc, #88]	; (800ebd4 <TIM_OC3_SetConfig+0xe0>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d003      	beq.n	800eb86 <TIM_OC3_SetConfig+0x92>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a15      	ldr	r2, [pc, #84]	; (800ebd8 <TIM_OC3_SetConfig+0xe4>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d113      	bne.n	800ebae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	695b      	ldr	r3, [r3, #20]
 800eb9a:	011b      	lsls	r3, r3, #4
 800eb9c:	693a      	ldr	r2, [r7, #16]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	699b      	ldr	r3, [r3, #24]
 800eba6:	011b      	lsls	r3, r3, #4
 800eba8:	693a      	ldr	r2, [r7, #16]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	693a      	ldr	r2, [r7, #16]
 800ebb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	685a      	ldr	r2, [r3, #4]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	697a      	ldr	r2, [r7, #20]
 800ebc6:	621a      	str	r2, [r3, #32]
}
 800ebc8:	bf00      	nop
 800ebca:	371c      	adds	r7, #28
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	40010000 	.word	0x40010000
 800ebd8:	40010400 	.word	0x40010400

0800ebdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b087      	sub	sp, #28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a1b      	ldr	r3, [r3, #32]
 800ebea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6a1b      	ldr	r3, [r3, #32]
 800ebf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	69db      	ldr	r3, [r3, #28]
 800ec02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	021b      	lsls	r3, r3, #8
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	031b      	lsls	r3, r3, #12
 800ec2e:	693a      	ldr	r2, [r7, #16]
 800ec30:	4313      	orrs	r3, r2
 800ec32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	4a12      	ldr	r2, [pc, #72]	; (800ec80 <TIM_OC4_SetConfig+0xa4>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d003      	beq.n	800ec44 <TIM_OC4_SetConfig+0x68>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4a11      	ldr	r2, [pc, #68]	; (800ec84 <TIM_OC4_SetConfig+0xa8>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d109      	bne.n	800ec58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	695b      	ldr	r3, [r3, #20]
 800ec50:	019b      	lsls	r3, r3, #6
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	685a      	ldr	r2, [r3, #4]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	621a      	str	r2, [r3, #32]
}
 800ec72:	bf00      	nop
 800ec74:	371c      	adds	r7, #28
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	40010000 	.word	0x40010000
 800ec84:	40010400 	.word	0x40010400

0800ec88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b087      	sub	sp, #28
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6a1b      	ldr	r3, [r3, #32]
 800ec98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
 800ec9e:	f023 0201 	bic.w	r2, r3, #1
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	699b      	ldr	r3, [r3, #24]
 800ecaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	011b      	lsls	r3, r3, #4
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	4313      	orrs	r3, r2
 800ecbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	f023 030a 	bic.w	r3, r3, #10
 800ecc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	697a      	ldr	r2, [r7, #20]
 800ecd8:	621a      	str	r2, [r3, #32]
}
 800ecda:	bf00      	nop
 800ecdc:	371c      	adds	r7, #28
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr

0800ece6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ece6:	b480      	push	{r7}
 800ece8:	b087      	sub	sp, #28
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	60b9      	str	r1, [r7, #8]
 800ecf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6a1b      	ldr	r3, [r3, #32]
 800ecf6:	f023 0210 	bic.w	r2, r3, #16
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6a1b      	ldr	r3, [r3, #32]
 800ed08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	031b      	lsls	r3, r3, #12
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ed22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	011b      	lsls	r3, r3, #4
 800ed28:	693a      	ldr	r2, [r7, #16]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	621a      	str	r2, [r3, #32]
}
 800ed3a:	bf00      	nop
 800ed3c:	371c      	adds	r7, #28
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr

0800ed46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed46:	b480      	push	{r7}
 800ed48:	b085      	sub	sp, #20
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed5e:	683a      	ldr	r2, [r7, #0]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	4313      	orrs	r3, r2
 800ed64:	f043 0307 	orr.w	r3, r3, #7
 800ed68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	609a      	str	r2, [r3, #8]
}
 800ed70:	bf00      	nop
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
 800ed88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	021a      	lsls	r2, r3, #8
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	4313      	orrs	r3, r2
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	697a      	ldr	r2, [r7, #20]
 800edae:	609a      	str	r2, [r3, #8]
}
 800edb0:	bf00      	nop
 800edb2:	371c      	adds	r7, #28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b087      	sub	sp, #28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	f003 031f 	and.w	r3, r3, #31
 800edce:	2201      	movs	r2, #1
 800edd0:	fa02 f303 	lsl.w	r3, r2, r3
 800edd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6a1a      	ldr	r2, [r3, #32]
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	43db      	mvns	r3, r3
 800edde:	401a      	ands	r2, r3
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6a1a      	ldr	r2, [r3, #32]
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	f003 031f 	and.w	r3, r3, #31
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	fa01 f303 	lsl.w	r3, r1, r3
 800edf4:	431a      	orrs	r2, r3
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	621a      	str	r2, [r3, #32]
}
 800edfa:	bf00      	nop
 800edfc:	371c      	adds	r7, #28
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b084      	sub	sp, #16
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	2b04      	cmp	r3, #4
 800ee14:	d00d      	beq.n	800ee32 <HAL_TIMEx_OCN_Start_IT+0x2c>
 800ee16:	2b08      	cmp	r3, #8
 800ee18:	d014      	beq.n	800ee44 <HAL_TIMEx_OCN_Start_IT+0x3e>
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d000      	beq.n	800ee20 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 800ee1e:	e01a      	b.n	800ee56 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	68da      	ldr	r2, [r3, #12]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f042 0202 	orr.w	r2, r2, #2
 800ee2e:	60da      	str	r2, [r3, #12]
      break;
 800ee30:	e011      	b.n	800ee56 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	68da      	ldr	r2, [r3, #12]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f042 0204 	orr.w	r2, r2, #4
 800ee40:	60da      	str	r2, [r3, #12]
      break;
 800ee42:	e008      	b.n	800ee56 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	68da      	ldr	r2, [r3, #12]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f042 0208 	orr.w	r2, r2, #8
 800ee52:	60da      	str	r2, [r3, #12]
      break;
 800ee54:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	68da      	ldr	r2, [r3, #12]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ee64:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	2204      	movs	r2, #4
 800ee6c:	6839      	ldr	r1, [r7, #0]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f000 f976 	bl	800f160 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	f003 0307 	and.w	r3, r3, #7
 800ee8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b06      	cmp	r3, #6
 800ee94:	d007      	beq.n	800eea6 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f042 0201 	orr.w	r2, r2, #1
 800eea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eea6:	2300      	movs	r3, #0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	2b04      	cmp	r3, #4
 800eebe:	d00d      	beq.n	800eedc <HAL_TIMEx_OCN_Stop_IT+0x2c>
 800eec0:	2b08      	cmp	r3, #8
 800eec2:	d014      	beq.n	800eeee <HAL_TIMEx_OCN_Stop_IT+0x3e>
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d000      	beq.n	800eeca <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800eec8:	e01a      	b.n	800ef00 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68da      	ldr	r2, [r3, #12]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f022 0202 	bic.w	r2, r2, #2
 800eed8:	60da      	str	r2, [r3, #12]
      break;
 800eeda:	e011      	b.n	800ef00 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68da      	ldr	r2, [r3, #12]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f022 0204 	bic.w	r2, r2, #4
 800eeea:	60da      	str	r2, [r3, #12]
      break;
 800eeec:	e008      	b.n	800ef00 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68da      	ldr	r2, [r3, #12]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f022 0208 	bic.w	r2, r2, #8
 800eefc:	60da      	str	r2, [r3, #12]
      break;
 800eefe:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2200      	movs	r2, #0
 800ef06:	6839      	ldr	r1, [r7, #0]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f000 f929 	bl	800f160 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	6a1b      	ldr	r3, [r3, #32]
 800ef14:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800ef16:	68fa      	ldr	r2, [r7, #12]
 800ef18:	f240 4344 	movw	r3, #1092	; 0x444
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d107      	bne.n	800ef32 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	68da      	ldr	r2, [r3, #12]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef30:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	6a1a      	ldr	r2, [r3, #32]
 800ef38:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d10f      	bne.n	800ef62 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	6a1a      	ldr	r2, [r3, #32]
 800ef48:	f240 4344 	movw	r3, #1092	; 0x444
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d107      	bne.n	800ef62 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ef60:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	6a1a      	ldr	r2, [r3, #32]
 800ef68:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef6c:	4013      	ands	r3, r2
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d10f      	bne.n	800ef92 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	6a1a      	ldr	r2, [r3, #32]
 800ef78:	f240 4344 	movw	r3, #1092	; 0x444
 800ef7c:	4013      	ands	r3, r2
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d107      	bne.n	800ef92 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f022 0201 	bic.w	r2, r2, #1
 800ef90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efac:	2b01      	cmp	r3, #1
 800efae:	d101      	bne.n	800efb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800efb0:	2302      	movs	r3, #2
 800efb2:	e05a      	b.n	800f06a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2202      	movs	r2, #2
 800efc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a21      	ldr	r2, [pc, #132]	; (800f078 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d022      	beq.n	800f03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f000:	d01d      	beq.n	800f03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a1d      	ldr	r2, [pc, #116]	; (800f07c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d018      	beq.n	800f03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a1b      	ldr	r2, [pc, #108]	; (800f080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d013      	beq.n	800f03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4a1a      	ldr	r2, [pc, #104]	; (800f084 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d00e      	beq.n	800f03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a18      	ldr	r2, [pc, #96]	; (800f088 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d009      	beq.n	800f03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4a17      	ldr	r2, [pc, #92]	; (800f08c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d004      	beq.n	800f03e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4a15      	ldr	r2, [pc, #84]	; (800f090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d10c      	bne.n	800f058 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	4313      	orrs	r3, r2
 800f04e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3714      	adds	r7, #20
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	40010000 	.word	0x40010000
 800f07c:	40000400 	.word	0x40000400
 800f080:	40000800 	.word	0x40000800
 800f084:	40000c00 	.word	0x40000c00
 800f088:	40010400 	.word	0x40010400
 800f08c:	40014000 	.word	0x40014000
 800f090:	40001800 	.word	0x40001800

0800f094 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d101      	bne.n	800f0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	e03d      	b.n	800f12c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	691b      	ldr	r3, [r3, #16]
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	695b      	ldr	r3, [r3, #20]
 800f108:	4313      	orrs	r3, r2
 800f10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	69db      	ldr	r3, [r3, #28]
 800f116:	4313      	orrs	r3, r2
 800f118:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3714      	adds	r7, #20
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f140:	bf00      	nop
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f154:	bf00      	nop
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f160:	b480      	push	{r7}
 800f162:	b087      	sub	sp, #28
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	f003 031f 	and.w	r3, r3, #31
 800f172:	2204      	movs	r2, #4
 800f174:	fa02 f303 	lsl.w	r3, r2, r3
 800f178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6a1a      	ldr	r2, [r3, #32]
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	43db      	mvns	r3, r3
 800f182:	401a      	ands	r2, r3
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6a1a      	ldr	r2, [r3, #32]
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	f003 031f 	and.w	r3, r3, #31
 800f192:	6879      	ldr	r1, [r7, #4]
 800f194:	fa01 f303 	lsl.w	r3, r1, r3
 800f198:	431a      	orrs	r2, r3
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	621a      	str	r2, [r3, #32]
}
 800f19e:	bf00      	nop
 800f1a0:	371c      	adds	r7, #28
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b082      	sub	sp, #8
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d101      	bne.n	800f1bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e03f      	b.n	800f23c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d106      	bne.n	800f1d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7fb fe05 	bl	800ade0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2224      	movs	r2, #36	; 0x24
 800f1da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	68da      	ldr	r2, [r3, #12]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f1ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 f90c 	bl	800f40c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	691a      	ldr	r2, [r3, #16]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f202:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	695a      	ldr	r2, [r3, #20]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f212:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	68da      	ldr	r2, [r3, #12]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f222:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2220      	movs	r2, #32
 800f22e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2220      	movs	r2, #32
 800f236:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f23a:	2300      	movs	r3, #0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b088      	sub	sp, #32
 800f248:	af02      	add	r7, sp, #8
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	603b      	str	r3, [r7, #0]
 800f250:	4613      	mov	r3, r2
 800f252:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800f254:	2300      	movs	r3, #0
 800f256:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b20      	cmp	r3, #32
 800f262:	f040 8083 	bne.w	800f36c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <HAL_UART_Transmit+0x2e>
 800f26c:	88fb      	ldrh	r3, [r7, #6]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d101      	bne.n	800f276 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800f272:	2301      	movs	r3, #1
 800f274:	e07b      	b.n	800f36e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d101      	bne.n	800f284 <HAL_UART_Transmit+0x40>
 800f280:	2302      	movs	r3, #2
 800f282:	e074      	b.n	800f36e <HAL_UART_Transmit+0x12a>
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2201      	movs	r2, #1
 800f288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2200      	movs	r2, #0
 800f290:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2221      	movs	r2, #33	; 0x21
 800f296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800f29a:	f7fc f983 	bl	800b5a4 <HAL_GetTick>
 800f29e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	88fa      	ldrh	r2, [r7, #6]
 800f2a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	88fa      	ldrh	r2, [r7, #6]
 800f2aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800f2b4:	e042      	b.n	800f33c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2cc:	d122      	bne.n	800f314 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	2180      	movs	r1, #128	; 0x80
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f000 f84c 	bl	800f376 <UART_WaitOnFlagUntilTimeout>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	e042      	b.n	800f36e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	881b      	ldrh	r3, [r3, #0]
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f2fa:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d103      	bne.n	800f30c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	3302      	adds	r3, #2
 800f308:	60bb      	str	r3, [r7, #8]
 800f30a:	e017      	b.n	800f33c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	3301      	adds	r3, #1
 800f310:	60bb      	str	r3, [r7, #8]
 800f312:	e013      	b.n	800f33c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	2200      	movs	r2, #0
 800f31c:	2180      	movs	r1, #128	; 0x80
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f000 f829 	bl	800f376 <UART_WaitOnFlagUntilTimeout>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d001      	beq.n	800f32e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800f32a:	2303      	movs	r3, #3
 800f32c:	e01f      	b.n	800f36e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	1c5a      	adds	r2, r3, #1
 800f332:	60ba      	str	r2, [r7, #8]
 800f334:	781a      	ldrb	r2, [r3, #0]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f340:	b29b      	uxth	r3, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	d1b7      	bne.n	800f2b6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	2200      	movs	r2, #0
 800f34e:	2140      	movs	r1, #64	; 0x40
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f000 f810 	bl	800f376 <UART_WaitOnFlagUntilTimeout>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d001      	beq.n	800f360 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800f35c:	2303      	movs	r3, #3
 800f35e:	e006      	b.n	800f36e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2220      	movs	r2, #32
 800f364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800f368:	2300      	movs	r3, #0
 800f36a:	e000      	b.n	800f36e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800f36c:	2302      	movs	r3, #2
  }
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3718      	adds	r7, #24
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b084      	sub	sp, #16
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	60f8      	str	r0, [r7, #12]
 800f37e:	60b9      	str	r1, [r7, #8]
 800f380:	603b      	str	r3, [r7, #0]
 800f382:	4613      	mov	r3, r2
 800f384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f386:	e02c      	b.n	800f3e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f38e:	d028      	beq.n	800f3e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d007      	beq.n	800f3a6 <UART_WaitOnFlagUntilTimeout+0x30>
 800f396:	f7fc f905 	bl	800b5a4 <HAL_GetTick>
 800f39a:	4602      	mov	r2, r0
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	69ba      	ldr	r2, [r7, #24]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d21d      	bcs.n	800f3e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	68da      	ldr	r2, [r3, #12]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f3b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	695a      	ldr	r2, [r3, #20]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f022 0201 	bic.w	r2, r2, #1
 800f3c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2220      	movs	r2, #32
 800f3ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2220      	movs	r2, #32
 800f3d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	e00f      	b.n	800f402 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	68ba      	ldr	r2, [r7, #8]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	bf0c      	ite	eq
 800f3f2:	2301      	moveq	r3, #1
 800f3f4:	2300      	movne	r3, #0
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	79fb      	ldrb	r3, [r7, #7]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d0c3      	beq.n	800f388 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
	...

0800f40c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f410:	b085      	sub	sp, #20
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	691b      	ldr	r3, [r3, #16]
 800f41c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	68da      	ldr	r2, [r3, #12]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	430a      	orrs	r2, r1
 800f42a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	689a      	ldr	r2, [r3, #8]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	691b      	ldr	r3, [r3, #16]
 800f434:	431a      	orrs	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	695b      	ldr	r3, [r3, #20]
 800f43a:	431a      	orrs	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	69db      	ldr	r3, [r3, #28]
 800f440:	4313      	orrs	r3, r2
 800f442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	68db      	ldr	r3, [r3, #12]
 800f44a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f44e:	f023 030c 	bic.w	r3, r3, #12
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	6812      	ldr	r2, [r2, #0]
 800f456:	68f9      	ldr	r1, [r7, #12]
 800f458:	430b      	orrs	r3, r1
 800f45a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	699a      	ldr	r2, [r3, #24]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	430a      	orrs	r2, r1
 800f470:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	69db      	ldr	r3, [r3, #28]
 800f476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f47a:	f040 818b 	bne.w	800f794 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4ac1      	ldr	r2, [pc, #772]	; (800f788 <UART_SetConfig+0x37c>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d005      	beq.n	800f494 <UART_SetConfig+0x88>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4abf      	ldr	r2, [pc, #764]	; (800f78c <UART_SetConfig+0x380>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	f040 80bd 	bne.w	800f60e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f494:	f7fe fad0 	bl	800da38 <HAL_RCC_GetPCLK2Freq>
 800f498:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	461d      	mov	r5, r3
 800f49e:	f04f 0600 	mov.w	r6, #0
 800f4a2:	46a8      	mov	r8, r5
 800f4a4:	46b1      	mov	r9, r6
 800f4a6:	eb18 0308 	adds.w	r3, r8, r8
 800f4aa:	eb49 0409 	adc.w	r4, r9, r9
 800f4ae:	4698      	mov	r8, r3
 800f4b0:	46a1      	mov	r9, r4
 800f4b2:	eb18 0805 	adds.w	r8, r8, r5
 800f4b6:	eb49 0906 	adc.w	r9, r9, r6
 800f4ba:	f04f 0100 	mov.w	r1, #0
 800f4be:	f04f 0200 	mov.w	r2, #0
 800f4c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f4c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f4ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f4ce:	4688      	mov	r8, r1
 800f4d0:	4691      	mov	r9, r2
 800f4d2:	eb18 0005 	adds.w	r0, r8, r5
 800f4d6:	eb49 0106 	adc.w	r1, r9, r6
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	461d      	mov	r5, r3
 800f4e0:	f04f 0600 	mov.w	r6, #0
 800f4e4:	196b      	adds	r3, r5, r5
 800f4e6:	eb46 0406 	adc.w	r4, r6, r6
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	4623      	mov	r3, r4
 800f4ee:	f7f9 fae3 	bl	8008ab8 <__aeabi_uldivmod>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	460c      	mov	r4, r1
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	4ba5      	ldr	r3, [pc, #660]	; (800f790 <UART_SetConfig+0x384>)
 800f4fa:	fba3 2302 	umull	r2, r3, r3, r2
 800f4fe:	095b      	lsrs	r3, r3, #5
 800f500:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	461d      	mov	r5, r3
 800f508:	f04f 0600 	mov.w	r6, #0
 800f50c:	46a9      	mov	r9, r5
 800f50e:	46b2      	mov	sl, r6
 800f510:	eb19 0309 	adds.w	r3, r9, r9
 800f514:	eb4a 040a 	adc.w	r4, sl, sl
 800f518:	4699      	mov	r9, r3
 800f51a:	46a2      	mov	sl, r4
 800f51c:	eb19 0905 	adds.w	r9, r9, r5
 800f520:	eb4a 0a06 	adc.w	sl, sl, r6
 800f524:	f04f 0100 	mov.w	r1, #0
 800f528:	f04f 0200 	mov.w	r2, #0
 800f52c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f530:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f534:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f538:	4689      	mov	r9, r1
 800f53a:	4692      	mov	sl, r2
 800f53c:	eb19 0005 	adds.w	r0, r9, r5
 800f540:	eb4a 0106 	adc.w	r1, sl, r6
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	461d      	mov	r5, r3
 800f54a:	f04f 0600 	mov.w	r6, #0
 800f54e:	196b      	adds	r3, r5, r5
 800f550:	eb46 0406 	adc.w	r4, r6, r6
 800f554:	461a      	mov	r2, r3
 800f556:	4623      	mov	r3, r4
 800f558:	f7f9 faae 	bl	8008ab8 <__aeabi_uldivmod>
 800f55c:	4603      	mov	r3, r0
 800f55e:	460c      	mov	r4, r1
 800f560:	461a      	mov	r2, r3
 800f562:	4b8b      	ldr	r3, [pc, #556]	; (800f790 <UART_SetConfig+0x384>)
 800f564:	fba3 1302 	umull	r1, r3, r3, r2
 800f568:	095b      	lsrs	r3, r3, #5
 800f56a:	2164      	movs	r1, #100	; 0x64
 800f56c:	fb01 f303 	mul.w	r3, r1, r3
 800f570:	1ad3      	subs	r3, r2, r3
 800f572:	00db      	lsls	r3, r3, #3
 800f574:	3332      	adds	r3, #50	; 0x32
 800f576:	4a86      	ldr	r2, [pc, #536]	; (800f790 <UART_SetConfig+0x384>)
 800f578:	fba2 2303 	umull	r2, r3, r2, r3
 800f57c:	095b      	lsrs	r3, r3, #5
 800f57e:	005b      	lsls	r3, r3, #1
 800f580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f584:	4498      	add	r8, r3
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	461d      	mov	r5, r3
 800f58a:	f04f 0600 	mov.w	r6, #0
 800f58e:	46a9      	mov	r9, r5
 800f590:	46b2      	mov	sl, r6
 800f592:	eb19 0309 	adds.w	r3, r9, r9
 800f596:	eb4a 040a 	adc.w	r4, sl, sl
 800f59a:	4699      	mov	r9, r3
 800f59c:	46a2      	mov	sl, r4
 800f59e:	eb19 0905 	adds.w	r9, r9, r5
 800f5a2:	eb4a 0a06 	adc.w	sl, sl, r6
 800f5a6:	f04f 0100 	mov.w	r1, #0
 800f5aa:	f04f 0200 	mov.w	r2, #0
 800f5ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f5b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f5b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f5ba:	4689      	mov	r9, r1
 800f5bc:	4692      	mov	sl, r2
 800f5be:	eb19 0005 	adds.w	r0, r9, r5
 800f5c2:	eb4a 0106 	adc.w	r1, sl, r6
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	461d      	mov	r5, r3
 800f5cc:	f04f 0600 	mov.w	r6, #0
 800f5d0:	196b      	adds	r3, r5, r5
 800f5d2:	eb46 0406 	adc.w	r4, r6, r6
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	4623      	mov	r3, r4
 800f5da:	f7f9 fa6d 	bl	8008ab8 <__aeabi_uldivmod>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	460c      	mov	r4, r1
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	4b6a      	ldr	r3, [pc, #424]	; (800f790 <UART_SetConfig+0x384>)
 800f5e6:	fba3 1302 	umull	r1, r3, r3, r2
 800f5ea:	095b      	lsrs	r3, r3, #5
 800f5ec:	2164      	movs	r1, #100	; 0x64
 800f5ee:	fb01 f303 	mul.w	r3, r1, r3
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	00db      	lsls	r3, r3, #3
 800f5f6:	3332      	adds	r3, #50	; 0x32
 800f5f8:	4a65      	ldr	r2, [pc, #404]	; (800f790 <UART_SetConfig+0x384>)
 800f5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f5fe:	095b      	lsrs	r3, r3, #5
 800f600:	f003 0207 	and.w	r2, r3, #7
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4442      	add	r2, r8
 800f60a:	609a      	str	r2, [r3, #8]
 800f60c:	e26f      	b.n	800faee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f60e:	f7fe f9ff 	bl	800da10 <HAL_RCC_GetPCLK1Freq>
 800f612:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	461d      	mov	r5, r3
 800f618:	f04f 0600 	mov.w	r6, #0
 800f61c:	46a8      	mov	r8, r5
 800f61e:	46b1      	mov	r9, r6
 800f620:	eb18 0308 	adds.w	r3, r8, r8
 800f624:	eb49 0409 	adc.w	r4, r9, r9
 800f628:	4698      	mov	r8, r3
 800f62a:	46a1      	mov	r9, r4
 800f62c:	eb18 0805 	adds.w	r8, r8, r5
 800f630:	eb49 0906 	adc.w	r9, r9, r6
 800f634:	f04f 0100 	mov.w	r1, #0
 800f638:	f04f 0200 	mov.w	r2, #0
 800f63c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f640:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f644:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f648:	4688      	mov	r8, r1
 800f64a:	4691      	mov	r9, r2
 800f64c:	eb18 0005 	adds.w	r0, r8, r5
 800f650:	eb49 0106 	adc.w	r1, r9, r6
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	461d      	mov	r5, r3
 800f65a:	f04f 0600 	mov.w	r6, #0
 800f65e:	196b      	adds	r3, r5, r5
 800f660:	eb46 0406 	adc.w	r4, r6, r6
 800f664:	461a      	mov	r2, r3
 800f666:	4623      	mov	r3, r4
 800f668:	f7f9 fa26 	bl	8008ab8 <__aeabi_uldivmod>
 800f66c:	4603      	mov	r3, r0
 800f66e:	460c      	mov	r4, r1
 800f670:	461a      	mov	r2, r3
 800f672:	4b47      	ldr	r3, [pc, #284]	; (800f790 <UART_SetConfig+0x384>)
 800f674:	fba3 2302 	umull	r2, r3, r3, r2
 800f678:	095b      	lsrs	r3, r3, #5
 800f67a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	461d      	mov	r5, r3
 800f682:	f04f 0600 	mov.w	r6, #0
 800f686:	46a9      	mov	r9, r5
 800f688:	46b2      	mov	sl, r6
 800f68a:	eb19 0309 	adds.w	r3, r9, r9
 800f68e:	eb4a 040a 	adc.w	r4, sl, sl
 800f692:	4699      	mov	r9, r3
 800f694:	46a2      	mov	sl, r4
 800f696:	eb19 0905 	adds.w	r9, r9, r5
 800f69a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f69e:	f04f 0100 	mov.w	r1, #0
 800f6a2:	f04f 0200 	mov.w	r2, #0
 800f6a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f6aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f6ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f6b2:	4689      	mov	r9, r1
 800f6b4:	4692      	mov	sl, r2
 800f6b6:	eb19 0005 	adds.w	r0, r9, r5
 800f6ba:	eb4a 0106 	adc.w	r1, sl, r6
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	461d      	mov	r5, r3
 800f6c4:	f04f 0600 	mov.w	r6, #0
 800f6c8:	196b      	adds	r3, r5, r5
 800f6ca:	eb46 0406 	adc.w	r4, r6, r6
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	4623      	mov	r3, r4
 800f6d2:	f7f9 f9f1 	bl	8008ab8 <__aeabi_uldivmod>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	460c      	mov	r4, r1
 800f6da:	461a      	mov	r2, r3
 800f6dc:	4b2c      	ldr	r3, [pc, #176]	; (800f790 <UART_SetConfig+0x384>)
 800f6de:	fba3 1302 	umull	r1, r3, r3, r2
 800f6e2:	095b      	lsrs	r3, r3, #5
 800f6e4:	2164      	movs	r1, #100	; 0x64
 800f6e6:	fb01 f303 	mul.w	r3, r1, r3
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	00db      	lsls	r3, r3, #3
 800f6ee:	3332      	adds	r3, #50	; 0x32
 800f6f0:	4a27      	ldr	r2, [pc, #156]	; (800f790 <UART_SetConfig+0x384>)
 800f6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6f6:	095b      	lsrs	r3, r3, #5
 800f6f8:	005b      	lsls	r3, r3, #1
 800f6fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f6fe:	4498      	add	r8, r3
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	461d      	mov	r5, r3
 800f704:	f04f 0600 	mov.w	r6, #0
 800f708:	46a9      	mov	r9, r5
 800f70a:	46b2      	mov	sl, r6
 800f70c:	eb19 0309 	adds.w	r3, r9, r9
 800f710:	eb4a 040a 	adc.w	r4, sl, sl
 800f714:	4699      	mov	r9, r3
 800f716:	46a2      	mov	sl, r4
 800f718:	eb19 0905 	adds.w	r9, r9, r5
 800f71c:	eb4a 0a06 	adc.w	sl, sl, r6
 800f720:	f04f 0100 	mov.w	r1, #0
 800f724:	f04f 0200 	mov.w	r2, #0
 800f728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f72c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f730:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f734:	4689      	mov	r9, r1
 800f736:	4692      	mov	sl, r2
 800f738:	eb19 0005 	adds.w	r0, r9, r5
 800f73c:	eb4a 0106 	adc.w	r1, sl, r6
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	461d      	mov	r5, r3
 800f746:	f04f 0600 	mov.w	r6, #0
 800f74a:	196b      	adds	r3, r5, r5
 800f74c:	eb46 0406 	adc.w	r4, r6, r6
 800f750:	461a      	mov	r2, r3
 800f752:	4623      	mov	r3, r4
 800f754:	f7f9 f9b0 	bl	8008ab8 <__aeabi_uldivmod>
 800f758:	4603      	mov	r3, r0
 800f75a:	460c      	mov	r4, r1
 800f75c:	461a      	mov	r2, r3
 800f75e:	4b0c      	ldr	r3, [pc, #48]	; (800f790 <UART_SetConfig+0x384>)
 800f760:	fba3 1302 	umull	r1, r3, r3, r2
 800f764:	095b      	lsrs	r3, r3, #5
 800f766:	2164      	movs	r1, #100	; 0x64
 800f768:	fb01 f303 	mul.w	r3, r1, r3
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	00db      	lsls	r3, r3, #3
 800f770:	3332      	adds	r3, #50	; 0x32
 800f772:	4a07      	ldr	r2, [pc, #28]	; (800f790 <UART_SetConfig+0x384>)
 800f774:	fba2 2303 	umull	r2, r3, r2, r3
 800f778:	095b      	lsrs	r3, r3, #5
 800f77a:	f003 0207 	and.w	r2, r3, #7
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4442      	add	r2, r8
 800f784:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f786:	e1b2      	b.n	800faee <UART_SetConfig+0x6e2>
 800f788:	40011000 	.word	0x40011000
 800f78c:	40011400 	.word	0x40011400
 800f790:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4ad7      	ldr	r2, [pc, #860]	; (800faf8 <UART_SetConfig+0x6ec>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d005      	beq.n	800f7aa <UART_SetConfig+0x39e>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4ad6      	ldr	r2, [pc, #856]	; (800fafc <UART_SetConfig+0x6f0>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	f040 80d1 	bne.w	800f94c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f7aa:	f7fe f945 	bl	800da38 <HAL_RCC_GetPCLK2Freq>
 800f7ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	469a      	mov	sl, r3
 800f7b4:	f04f 0b00 	mov.w	fp, #0
 800f7b8:	46d0      	mov	r8, sl
 800f7ba:	46d9      	mov	r9, fp
 800f7bc:	eb18 0308 	adds.w	r3, r8, r8
 800f7c0:	eb49 0409 	adc.w	r4, r9, r9
 800f7c4:	4698      	mov	r8, r3
 800f7c6:	46a1      	mov	r9, r4
 800f7c8:	eb18 080a 	adds.w	r8, r8, sl
 800f7cc:	eb49 090b 	adc.w	r9, r9, fp
 800f7d0:	f04f 0100 	mov.w	r1, #0
 800f7d4:	f04f 0200 	mov.w	r2, #0
 800f7d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f7dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f7e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f7e4:	4688      	mov	r8, r1
 800f7e6:	4691      	mov	r9, r2
 800f7e8:	eb1a 0508 	adds.w	r5, sl, r8
 800f7ec:	eb4b 0609 	adc.w	r6, fp, r9
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	f04f 0200 	mov.w	r2, #0
 800f7fa:	f04f 0300 	mov.w	r3, #0
 800f7fe:	f04f 0400 	mov.w	r4, #0
 800f802:	0094      	lsls	r4, r2, #2
 800f804:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f808:	008b      	lsls	r3, r1, #2
 800f80a:	461a      	mov	r2, r3
 800f80c:	4623      	mov	r3, r4
 800f80e:	4628      	mov	r0, r5
 800f810:	4631      	mov	r1, r6
 800f812:	f7f9 f951 	bl	8008ab8 <__aeabi_uldivmod>
 800f816:	4603      	mov	r3, r0
 800f818:	460c      	mov	r4, r1
 800f81a:	461a      	mov	r2, r3
 800f81c:	4bb8      	ldr	r3, [pc, #736]	; (800fb00 <UART_SetConfig+0x6f4>)
 800f81e:	fba3 2302 	umull	r2, r3, r3, r2
 800f822:	095b      	lsrs	r3, r3, #5
 800f824:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	469b      	mov	fp, r3
 800f82c:	f04f 0c00 	mov.w	ip, #0
 800f830:	46d9      	mov	r9, fp
 800f832:	46e2      	mov	sl, ip
 800f834:	eb19 0309 	adds.w	r3, r9, r9
 800f838:	eb4a 040a 	adc.w	r4, sl, sl
 800f83c:	4699      	mov	r9, r3
 800f83e:	46a2      	mov	sl, r4
 800f840:	eb19 090b 	adds.w	r9, r9, fp
 800f844:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f848:	f04f 0100 	mov.w	r1, #0
 800f84c:	f04f 0200 	mov.w	r2, #0
 800f850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f85c:	4689      	mov	r9, r1
 800f85e:	4692      	mov	sl, r2
 800f860:	eb1b 0509 	adds.w	r5, fp, r9
 800f864:	eb4c 060a 	adc.w	r6, ip, sl
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	4619      	mov	r1, r3
 800f86e:	f04f 0200 	mov.w	r2, #0
 800f872:	f04f 0300 	mov.w	r3, #0
 800f876:	f04f 0400 	mov.w	r4, #0
 800f87a:	0094      	lsls	r4, r2, #2
 800f87c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f880:	008b      	lsls	r3, r1, #2
 800f882:	461a      	mov	r2, r3
 800f884:	4623      	mov	r3, r4
 800f886:	4628      	mov	r0, r5
 800f888:	4631      	mov	r1, r6
 800f88a:	f7f9 f915 	bl	8008ab8 <__aeabi_uldivmod>
 800f88e:	4603      	mov	r3, r0
 800f890:	460c      	mov	r4, r1
 800f892:	461a      	mov	r2, r3
 800f894:	4b9a      	ldr	r3, [pc, #616]	; (800fb00 <UART_SetConfig+0x6f4>)
 800f896:	fba3 1302 	umull	r1, r3, r3, r2
 800f89a:	095b      	lsrs	r3, r3, #5
 800f89c:	2164      	movs	r1, #100	; 0x64
 800f89e:	fb01 f303 	mul.w	r3, r1, r3
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	011b      	lsls	r3, r3, #4
 800f8a6:	3332      	adds	r3, #50	; 0x32
 800f8a8:	4a95      	ldr	r2, [pc, #596]	; (800fb00 <UART_SetConfig+0x6f4>)
 800f8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f8ae:	095b      	lsrs	r3, r3, #5
 800f8b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8b4:	4498      	add	r8, r3
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	469b      	mov	fp, r3
 800f8ba:	f04f 0c00 	mov.w	ip, #0
 800f8be:	46d9      	mov	r9, fp
 800f8c0:	46e2      	mov	sl, ip
 800f8c2:	eb19 0309 	adds.w	r3, r9, r9
 800f8c6:	eb4a 040a 	adc.w	r4, sl, sl
 800f8ca:	4699      	mov	r9, r3
 800f8cc:	46a2      	mov	sl, r4
 800f8ce:	eb19 090b 	adds.w	r9, r9, fp
 800f8d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f8d6:	f04f 0100 	mov.w	r1, #0
 800f8da:	f04f 0200 	mov.w	r2, #0
 800f8de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f8e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f8e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f8ea:	4689      	mov	r9, r1
 800f8ec:	4692      	mov	sl, r2
 800f8ee:	eb1b 0509 	adds.w	r5, fp, r9
 800f8f2:	eb4c 060a 	adc.w	r6, ip, sl
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	f04f 0200 	mov.w	r2, #0
 800f900:	f04f 0300 	mov.w	r3, #0
 800f904:	f04f 0400 	mov.w	r4, #0
 800f908:	0094      	lsls	r4, r2, #2
 800f90a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f90e:	008b      	lsls	r3, r1, #2
 800f910:	461a      	mov	r2, r3
 800f912:	4623      	mov	r3, r4
 800f914:	4628      	mov	r0, r5
 800f916:	4631      	mov	r1, r6
 800f918:	f7f9 f8ce 	bl	8008ab8 <__aeabi_uldivmod>
 800f91c:	4603      	mov	r3, r0
 800f91e:	460c      	mov	r4, r1
 800f920:	461a      	mov	r2, r3
 800f922:	4b77      	ldr	r3, [pc, #476]	; (800fb00 <UART_SetConfig+0x6f4>)
 800f924:	fba3 1302 	umull	r1, r3, r3, r2
 800f928:	095b      	lsrs	r3, r3, #5
 800f92a:	2164      	movs	r1, #100	; 0x64
 800f92c:	fb01 f303 	mul.w	r3, r1, r3
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	011b      	lsls	r3, r3, #4
 800f934:	3332      	adds	r3, #50	; 0x32
 800f936:	4a72      	ldr	r2, [pc, #456]	; (800fb00 <UART_SetConfig+0x6f4>)
 800f938:	fba2 2303 	umull	r2, r3, r2, r3
 800f93c:	095b      	lsrs	r3, r3, #5
 800f93e:	f003 020f 	and.w	r2, r3, #15
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4442      	add	r2, r8
 800f948:	609a      	str	r2, [r3, #8]
 800f94a:	e0d0      	b.n	800faee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f94c:	f7fe f860 	bl	800da10 <HAL_RCC_GetPCLK1Freq>
 800f950:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	469a      	mov	sl, r3
 800f956:	f04f 0b00 	mov.w	fp, #0
 800f95a:	46d0      	mov	r8, sl
 800f95c:	46d9      	mov	r9, fp
 800f95e:	eb18 0308 	adds.w	r3, r8, r8
 800f962:	eb49 0409 	adc.w	r4, r9, r9
 800f966:	4698      	mov	r8, r3
 800f968:	46a1      	mov	r9, r4
 800f96a:	eb18 080a 	adds.w	r8, r8, sl
 800f96e:	eb49 090b 	adc.w	r9, r9, fp
 800f972:	f04f 0100 	mov.w	r1, #0
 800f976:	f04f 0200 	mov.w	r2, #0
 800f97a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f97e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f982:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f986:	4688      	mov	r8, r1
 800f988:	4691      	mov	r9, r2
 800f98a:	eb1a 0508 	adds.w	r5, sl, r8
 800f98e:	eb4b 0609 	adc.w	r6, fp, r9
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	4619      	mov	r1, r3
 800f998:	f04f 0200 	mov.w	r2, #0
 800f99c:	f04f 0300 	mov.w	r3, #0
 800f9a0:	f04f 0400 	mov.w	r4, #0
 800f9a4:	0094      	lsls	r4, r2, #2
 800f9a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f9aa:	008b      	lsls	r3, r1, #2
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	4623      	mov	r3, r4
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	4631      	mov	r1, r6
 800f9b4:	f7f9 f880 	bl	8008ab8 <__aeabi_uldivmod>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	461a      	mov	r2, r3
 800f9be:	4b50      	ldr	r3, [pc, #320]	; (800fb00 <UART_SetConfig+0x6f4>)
 800f9c0:	fba3 2302 	umull	r2, r3, r3, r2
 800f9c4:	095b      	lsrs	r3, r3, #5
 800f9c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	469b      	mov	fp, r3
 800f9ce:	f04f 0c00 	mov.w	ip, #0
 800f9d2:	46d9      	mov	r9, fp
 800f9d4:	46e2      	mov	sl, ip
 800f9d6:	eb19 0309 	adds.w	r3, r9, r9
 800f9da:	eb4a 040a 	adc.w	r4, sl, sl
 800f9de:	4699      	mov	r9, r3
 800f9e0:	46a2      	mov	sl, r4
 800f9e2:	eb19 090b 	adds.w	r9, r9, fp
 800f9e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f9ea:	f04f 0100 	mov.w	r1, #0
 800f9ee:	f04f 0200 	mov.w	r2, #0
 800f9f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f9f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9fe:	4689      	mov	r9, r1
 800fa00:	4692      	mov	sl, r2
 800fa02:	eb1b 0509 	adds.w	r5, fp, r9
 800fa06:	eb4c 060a 	adc.w	r6, ip, sl
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	4619      	mov	r1, r3
 800fa10:	f04f 0200 	mov.w	r2, #0
 800fa14:	f04f 0300 	mov.w	r3, #0
 800fa18:	f04f 0400 	mov.w	r4, #0
 800fa1c:	0094      	lsls	r4, r2, #2
 800fa1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fa22:	008b      	lsls	r3, r1, #2
 800fa24:	461a      	mov	r2, r3
 800fa26:	4623      	mov	r3, r4
 800fa28:	4628      	mov	r0, r5
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	f7f9 f844 	bl	8008ab8 <__aeabi_uldivmod>
 800fa30:	4603      	mov	r3, r0
 800fa32:	460c      	mov	r4, r1
 800fa34:	461a      	mov	r2, r3
 800fa36:	4b32      	ldr	r3, [pc, #200]	; (800fb00 <UART_SetConfig+0x6f4>)
 800fa38:	fba3 1302 	umull	r1, r3, r3, r2
 800fa3c:	095b      	lsrs	r3, r3, #5
 800fa3e:	2164      	movs	r1, #100	; 0x64
 800fa40:	fb01 f303 	mul.w	r3, r1, r3
 800fa44:	1ad3      	subs	r3, r2, r3
 800fa46:	011b      	lsls	r3, r3, #4
 800fa48:	3332      	adds	r3, #50	; 0x32
 800fa4a:	4a2d      	ldr	r2, [pc, #180]	; (800fb00 <UART_SetConfig+0x6f4>)
 800fa4c:	fba2 2303 	umull	r2, r3, r2, r3
 800fa50:	095b      	lsrs	r3, r3, #5
 800fa52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa56:	4498      	add	r8, r3
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	469b      	mov	fp, r3
 800fa5c:	f04f 0c00 	mov.w	ip, #0
 800fa60:	46d9      	mov	r9, fp
 800fa62:	46e2      	mov	sl, ip
 800fa64:	eb19 0309 	adds.w	r3, r9, r9
 800fa68:	eb4a 040a 	adc.w	r4, sl, sl
 800fa6c:	4699      	mov	r9, r3
 800fa6e:	46a2      	mov	sl, r4
 800fa70:	eb19 090b 	adds.w	r9, r9, fp
 800fa74:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fa78:	f04f 0100 	mov.w	r1, #0
 800fa7c:	f04f 0200 	mov.w	r2, #0
 800fa80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa8c:	4689      	mov	r9, r1
 800fa8e:	4692      	mov	sl, r2
 800fa90:	eb1b 0509 	adds.w	r5, fp, r9
 800fa94:	eb4c 060a 	adc.w	r6, ip, sl
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	f04f 0200 	mov.w	r2, #0
 800faa2:	f04f 0300 	mov.w	r3, #0
 800faa6:	f04f 0400 	mov.w	r4, #0
 800faaa:	0094      	lsls	r4, r2, #2
 800faac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fab0:	008b      	lsls	r3, r1, #2
 800fab2:	461a      	mov	r2, r3
 800fab4:	4623      	mov	r3, r4
 800fab6:	4628      	mov	r0, r5
 800fab8:	4631      	mov	r1, r6
 800faba:	f7f8 fffd 	bl	8008ab8 <__aeabi_uldivmod>
 800fabe:	4603      	mov	r3, r0
 800fac0:	460c      	mov	r4, r1
 800fac2:	461a      	mov	r2, r3
 800fac4:	4b0e      	ldr	r3, [pc, #56]	; (800fb00 <UART_SetConfig+0x6f4>)
 800fac6:	fba3 1302 	umull	r1, r3, r3, r2
 800faca:	095b      	lsrs	r3, r3, #5
 800facc:	2164      	movs	r1, #100	; 0x64
 800face:	fb01 f303 	mul.w	r3, r1, r3
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	011b      	lsls	r3, r3, #4
 800fad6:	3332      	adds	r3, #50	; 0x32
 800fad8:	4a09      	ldr	r2, [pc, #36]	; (800fb00 <UART_SetConfig+0x6f4>)
 800fada:	fba2 2303 	umull	r2, r3, r2, r3
 800fade:	095b      	lsrs	r3, r3, #5
 800fae0:	f003 020f 	and.w	r2, r3, #15
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4442      	add	r2, r8
 800faea:	609a      	str	r2, [r3, #8]
}
 800faec:	e7ff      	b.n	800faee <UART_SetConfig+0x6e2>
 800faee:	bf00      	nop
 800faf0:	3714      	adds	r7, #20
 800faf2:	46bd      	mov	sp, r7
 800faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf8:	40011000 	.word	0x40011000
 800fafc:	40011400 	.word	0x40011400
 800fb00:	51eb851f 	.word	0x51eb851f

0800fb04 <round>:
 800fb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb06:	ec57 6b10 	vmov	r6, r7, d0
 800fb0a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800fb0e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800fb12:	2c13      	cmp	r4, #19
 800fb14:	463b      	mov	r3, r7
 800fb16:	463d      	mov	r5, r7
 800fb18:	dc17      	bgt.n	800fb4a <round+0x46>
 800fb1a:	2c00      	cmp	r4, #0
 800fb1c:	da09      	bge.n	800fb32 <round+0x2e>
 800fb1e:	3401      	adds	r4, #1
 800fb20:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800fb24:	d103      	bne.n	800fb2e <round+0x2a>
 800fb26:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fb2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fb2e:	2100      	movs	r1, #0
 800fb30:	e02c      	b.n	800fb8c <round+0x88>
 800fb32:	4a18      	ldr	r2, [pc, #96]	; (800fb94 <round+0x90>)
 800fb34:	4122      	asrs	r2, r4
 800fb36:	4217      	tst	r7, r2
 800fb38:	d100      	bne.n	800fb3c <round+0x38>
 800fb3a:	b19e      	cbz	r6, 800fb64 <round+0x60>
 800fb3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fb40:	4123      	asrs	r3, r4
 800fb42:	442b      	add	r3, r5
 800fb44:	ea23 0302 	bic.w	r3, r3, r2
 800fb48:	e7f1      	b.n	800fb2e <round+0x2a>
 800fb4a:	2c33      	cmp	r4, #51	; 0x33
 800fb4c:	dd0d      	ble.n	800fb6a <round+0x66>
 800fb4e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800fb52:	d107      	bne.n	800fb64 <round+0x60>
 800fb54:	4630      	mov	r0, r6
 800fb56:	4639      	mov	r1, r7
 800fb58:	ee10 2a10 	vmov	r2, s0
 800fb5c:	f7f8 face 	bl	80080fc <__adddf3>
 800fb60:	4606      	mov	r6, r0
 800fb62:	460f      	mov	r7, r1
 800fb64:	ec47 6b10 	vmov	d0, r6, r7
 800fb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb6a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800fb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb72:	40d0      	lsrs	r0, r2
 800fb74:	4206      	tst	r6, r0
 800fb76:	d0f5      	beq.n	800fb64 <round+0x60>
 800fb78:	2201      	movs	r2, #1
 800fb7a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800fb7e:	fa02 f404 	lsl.w	r4, r2, r4
 800fb82:	1931      	adds	r1, r6, r4
 800fb84:	bf28      	it	cs
 800fb86:	189b      	addcs	r3, r3, r2
 800fb88:	ea21 0100 	bic.w	r1, r1, r0
 800fb8c:	461f      	mov	r7, r3
 800fb8e:	460e      	mov	r6, r1
 800fb90:	e7e8      	b.n	800fb64 <round+0x60>
 800fb92:	bf00      	nop
 800fb94:	000fffff 	.word	0x000fffff

0800fb98 <__errno>:
 800fb98:	4b01      	ldr	r3, [pc, #4]	; (800fba0 <__errno+0x8>)
 800fb9a:	6818      	ldr	r0, [r3, #0]
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	2000000c 	.word	0x2000000c

0800fba4 <__libc_init_array>:
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	4e0d      	ldr	r6, [pc, #52]	; (800fbdc <__libc_init_array+0x38>)
 800fba8:	4c0d      	ldr	r4, [pc, #52]	; (800fbe0 <__libc_init_array+0x3c>)
 800fbaa:	1ba4      	subs	r4, r4, r6
 800fbac:	10a4      	asrs	r4, r4, #2
 800fbae:	2500      	movs	r5, #0
 800fbb0:	42a5      	cmp	r5, r4
 800fbb2:	d109      	bne.n	800fbc8 <__libc_init_array+0x24>
 800fbb4:	4e0b      	ldr	r6, [pc, #44]	; (800fbe4 <__libc_init_array+0x40>)
 800fbb6:	4c0c      	ldr	r4, [pc, #48]	; (800fbe8 <__libc_init_array+0x44>)
 800fbb8:	f002 fbae 	bl	8012318 <_init>
 800fbbc:	1ba4      	subs	r4, r4, r6
 800fbbe:	10a4      	asrs	r4, r4, #2
 800fbc0:	2500      	movs	r5, #0
 800fbc2:	42a5      	cmp	r5, r4
 800fbc4:	d105      	bne.n	800fbd2 <__libc_init_array+0x2e>
 800fbc6:	bd70      	pop	{r4, r5, r6, pc}
 800fbc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fbcc:	4798      	blx	r3
 800fbce:	3501      	adds	r5, #1
 800fbd0:	e7ee      	b.n	800fbb0 <__libc_init_array+0xc>
 800fbd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fbd6:	4798      	blx	r3
 800fbd8:	3501      	adds	r5, #1
 800fbda:	e7f2      	b.n	800fbc2 <__libc_init_array+0x1e>
 800fbdc:	08012648 	.word	0x08012648
 800fbe0:	08012648 	.word	0x08012648
 800fbe4:	08012648 	.word	0x08012648
 800fbe8:	0801264c 	.word	0x0801264c

0800fbec <memcpy>:
 800fbec:	b510      	push	{r4, lr}
 800fbee:	1e43      	subs	r3, r0, #1
 800fbf0:	440a      	add	r2, r1
 800fbf2:	4291      	cmp	r1, r2
 800fbf4:	d100      	bne.n	800fbf8 <memcpy+0xc>
 800fbf6:	bd10      	pop	{r4, pc}
 800fbf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc00:	e7f7      	b.n	800fbf2 <memcpy+0x6>

0800fc02 <memset>:
 800fc02:	4402      	add	r2, r0
 800fc04:	4603      	mov	r3, r0
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d100      	bne.n	800fc0c <memset+0xa>
 800fc0a:	4770      	bx	lr
 800fc0c:	f803 1b01 	strb.w	r1, [r3], #1
 800fc10:	e7f9      	b.n	800fc06 <memset+0x4>

0800fc12 <__cvt>:
 800fc12:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc16:	ec55 4b10 	vmov	r4, r5, d0
 800fc1a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fc1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc20:	2d00      	cmp	r5, #0
 800fc22:	460e      	mov	r6, r1
 800fc24:	4691      	mov	r9, r2
 800fc26:	4619      	mov	r1, r3
 800fc28:	bfb8      	it	lt
 800fc2a:	4622      	movlt	r2, r4
 800fc2c:	462b      	mov	r3, r5
 800fc2e:	f027 0720 	bic.w	r7, r7, #32
 800fc32:	bfbb      	ittet	lt
 800fc34:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc38:	461d      	movlt	r5, r3
 800fc3a:	2300      	movge	r3, #0
 800fc3c:	232d      	movlt	r3, #45	; 0x2d
 800fc3e:	bfb8      	it	lt
 800fc40:	4614      	movlt	r4, r2
 800fc42:	2f46      	cmp	r7, #70	; 0x46
 800fc44:	700b      	strb	r3, [r1, #0]
 800fc46:	d004      	beq.n	800fc52 <__cvt+0x40>
 800fc48:	2f45      	cmp	r7, #69	; 0x45
 800fc4a:	d100      	bne.n	800fc4e <__cvt+0x3c>
 800fc4c:	3601      	adds	r6, #1
 800fc4e:	2102      	movs	r1, #2
 800fc50:	e000      	b.n	800fc54 <__cvt+0x42>
 800fc52:	2103      	movs	r1, #3
 800fc54:	ab03      	add	r3, sp, #12
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	ab02      	add	r3, sp, #8
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	4632      	mov	r2, r6
 800fc5e:	4653      	mov	r3, sl
 800fc60:	ec45 4b10 	vmov	d0, r4, r5
 800fc64:	f000 fdfc 	bl	8010860 <_dtoa_r>
 800fc68:	2f47      	cmp	r7, #71	; 0x47
 800fc6a:	4680      	mov	r8, r0
 800fc6c:	d102      	bne.n	800fc74 <__cvt+0x62>
 800fc6e:	f019 0f01 	tst.w	r9, #1
 800fc72:	d026      	beq.n	800fcc2 <__cvt+0xb0>
 800fc74:	2f46      	cmp	r7, #70	; 0x46
 800fc76:	eb08 0906 	add.w	r9, r8, r6
 800fc7a:	d111      	bne.n	800fca0 <__cvt+0x8e>
 800fc7c:	f898 3000 	ldrb.w	r3, [r8]
 800fc80:	2b30      	cmp	r3, #48	; 0x30
 800fc82:	d10a      	bne.n	800fc9a <__cvt+0x88>
 800fc84:	2200      	movs	r2, #0
 800fc86:	2300      	movs	r3, #0
 800fc88:	4620      	mov	r0, r4
 800fc8a:	4629      	mov	r1, r5
 800fc8c:	f7f8 fe54 	bl	8008938 <__aeabi_dcmpeq>
 800fc90:	b918      	cbnz	r0, 800fc9a <__cvt+0x88>
 800fc92:	f1c6 0601 	rsb	r6, r6, #1
 800fc96:	f8ca 6000 	str.w	r6, [sl]
 800fc9a:	f8da 3000 	ldr.w	r3, [sl]
 800fc9e:	4499      	add	r9, r3
 800fca0:	2200      	movs	r2, #0
 800fca2:	2300      	movs	r3, #0
 800fca4:	4620      	mov	r0, r4
 800fca6:	4629      	mov	r1, r5
 800fca8:	f7f8 fe46 	bl	8008938 <__aeabi_dcmpeq>
 800fcac:	b938      	cbnz	r0, 800fcbe <__cvt+0xac>
 800fcae:	2230      	movs	r2, #48	; 0x30
 800fcb0:	9b03      	ldr	r3, [sp, #12]
 800fcb2:	454b      	cmp	r3, r9
 800fcb4:	d205      	bcs.n	800fcc2 <__cvt+0xb0>
 800fcb6:	1c59      	adds	r1, r3, #1
 800fcb8:	9103      	str	r1, [sp, #12]
 800fcba:	701a      	strb	r2, [r3, #0]
 800fcbc:	e7f8      	b.n	800fcb0 <__cvt+0x9e>
 800fcbe:	f8cd 900c 	str.w	r9, [sp, #12]
 800fcc2:	9b03      	ldr	r3, [sp, #12]
 800fcc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcc6:	eba3 0308 	sub.w	r3, r3, r8
 800fcca:	4640      	mov	r0, r8
 800fccc:	6013      	str	r3, [r2, #0]
 800fcce:	b004      	add	sp, #16
 800fcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fcd4 <__exponent>:
 800fcd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcd6:	2900      	cmp	r1, #0
 800fcd8:	4604      	mov	r4, r0
 800fcda:	bfba      	itte	lt
 800fcdc:	4249      	neglt	r1, r1
 800fcde:	232d      	movlt	r3, #45	; 0x2d
 800fce0:	232b      	movge	r3, #43	; 0x2b
 800fce2:	2909      	cmp	r1, #9
 800fce4:	f804 2b02 	strb.w	r2, [r4], #2
 800fce8:	7043      	strb	r3, [r0, #1]
 800fcea:	dd20      	ble.n	800fd2e <__exponent+0x5a>
 800fcec:	f10d 0307 	add.w	r3, sp, #7
 800fcf0:	461f      	mov	r7, r3
 800fcf2:	260a      	movs	r6, #10
 800fcf4:	fb91 f5f6 	sdiv	r5, r1, r6
 800fcf8:	fb06 1115 	mls	r1, r6, r5, r1
 800fcfc:	3130      	adds	r1, #48	; 0x30
 800fcfe:	2d09      	cmp	r5, #9
 800fd00:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fd04:	f103 32ff 	add.w	r2, r3, #4294967295
 800fd08:	4629      	mov	r1, r5
 800fd0a:	dc09      	bgt.n	800fd20 <__exponent+0x4c>
 800fd0c:	3130      	adds	r1, #48	; 0x30
 800fd0e:	3b02      	subs	r3, #2
 800fd10:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fd14:	42bb      	cmp	r3, r7
 800fd16:	4622      	mov	r2, r4
 800fd18:	d304      	bcc.n	800fd24 <__exponent+0x50>
 800fd1a:	1a10      	subs	r0, r2, r0
 800fd1c:	b003      	add	sp, #12
 800fd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd20:	4613      	mov	r3, r2
 800fd22:	e7e7      	b.n	800fcf4 <__exponent+0x20>
 800fd24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd28:	f804 2b01 	strb.w	r2, [r4], #1
 800fd2c:	e7f2      	b.n	800fd14 <__exponent+0x40>
 800fd2e:	2330      	movs	r3, #48	; 0x30
 800fd30:	4419      	add	r1, r3
 800fd32:	7083      	strb	r3, [r0, #2]
 800fd34:	1d02      	adds	r2, r0, #4
 800fd36:	70c1      	strb	r1, [r0, #3]
 800fd38:	e7ef      	b.n	800fd1a <__exponent+0x46>
	...

0800fd3c <_printf_float>:
 800fd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd40:	b08d      	sub	sp, #52	; 0x34
 800fd42:	460c      	mov	r4, r1
 800fd44:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fd48:	4616      	mov	r6, r2
 800fd4a:	461f      	mov	r7, r3
 800fd4c:	4605      	mov	r5, r0
 800fd4e:	f001 fcb9 	bl	80116c4 <_localeconv_r>
 800fd52:	6803      	ldr	r3, [r0, #0]
 800fd54:	9304      	str	r3, [sp, #16]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7f8 f972 	bl	8008040 <strlen>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	930a      	str	r3, [sp, #40]	; 0x28
 800fd60:	f8d8 3000 	ldr.w	r3, [r8]
 800fd64:	9005      	str	r0, [sp, #20]
 800fd66:	3307      	adds	r3, #7
 800fd68:	f023 0307 	bic.w	r3, r3, #7
 800fd6c:	f103 0208 	add.w	r2, r3, #8
 800fd70:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fd74:	f8d4 b000 	ldr.w	fp, [r4]
 800fd78:	f8c8 2000 	str.w	r2, [r8]
 800fd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fd84:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fd88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd8c:	9307      	str	r3, [sp, #28]
 800fd8e:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd92:	f04f 32ff 	mov.w	r2, #4294967295
 800fd96:	4ba7      	ldr	r3, [pc, #668]	; (8010034 <_printf_float+0x2f8>)
 800fd98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd9c:	f7f8 fdfe 	bl	800899c <__aeabi_dcmpun>
 800fda0:	bb70      	cbnz	r0, 800fe00 <_printf_float+0xc4>
 800fda2:	f04f 32ff 	mov.w	r2, #4294967295
 800fda6:	4ba3      	ldr	r3, [pc, #652]	; (8010034 <_printf_float+0x2f8>)
 800fda8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdac:	f7f8 fdd8 	bl	8008960 <__aeabi_dcmple>
 800fdb0:	bb30      	cbnz	r0, 800fe00 <_printf_float+0xc4>
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4640      	mov	r0, r8
 800fdb8:	4649      	mov	r1, r9
 800fdba:	f7f8 fdc7 	bl	800894c <__aeabi_dcmplt>
 800fdbe:	b110      	cbz	r0, 800fdc6 <_printf_float+0x8a>
 800fdc0:	232d      	movs	r3, #45	; 0x2d
 800fdc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdc6:	4a9c      	ldr	r2, [pc, #624]	; (8010038 <_printf_float+0x2fc>)
 800fdc8:	4b9c      	ldr	r3, [pc, #624]	; (801003c <_printf_float+0x300>)
 800fdca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fdce:	bf8c      	ite	hi
 800fdd0:	4690      	movhi	r8, r2
 800fdd2:	4698      	movls	r8, r3
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	f02b 0204 	bic.w	r2, fp, #4
 800fdda:	6123      	str	r3, [r4, #16]
 800fddc:	6022      	str	r2, [r4, #0]
 800fdde:	f04f 0900 	mov.w	r9, #0
 800fde2:	9700      	str	r7, [sp, #0]
 800fde4:	4633      	mov	r3, r6
 800fde6:	aa0b      	add	r2, sp, #44	; 0x2c
 800fde8:	4621      	mov	r1, r4
 800fdea:	4628      	mov	r0, r5
 800fdec:	f000 f9e6 	bl	80101bc <_printf_common>
 800fdf0:	3001      	adds	r0, #1
 800fdf2:	f040 808d 	bne.w	800ff10 <_printf_float+0x1d4>
 800fdf6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdfa:	b00d      	add	sp, #52	; 0x34
 800fdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe00:	4642      	mov	r2, r8
 800fe02:	464b      	mov	r3, r9
 800fe04:	4640      	mov	r0, r8
 800fe06:	4649      	mov	r1, r9
 800fe08:	f7f8 fdc8 	bl	800899c <__aeabi_dcmpun>
 800fe0c:	b110      	cbz	r0, 800fe14 <_printf_float+0xd8>
 800fe0e:	4a8c      	ldr	r2, [pc, #560]	; (8010040 <_printf_float+0x304>)
 800fe10:	4b8c      	ldr	r3, [pc, #560]	; (8010044 <_printf_float+0x308>)
 800fe12:	e7da      	b.n	800fdca <_printf_float+0x8e>
 800fe14:	6861      	ldr	r1, [r4, #4]
 800fe16:	1c4b      	adds	r3, r1, #1
 800fe18:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800fe1c:	a80a      	add	r0, sp, #40	; 0x28
 800fe1e:	d13e      	bne.n	800fe9e <_printf_float+0x162>
 800fe20:	2306      	movs	r3, #6
 800fe22:	6063      	str	r3, [r4, #4]
 800fe24:	2300      	movs	r3, #0
 800fe26:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fe2a:	ab09      	add	r3, sp, #36	; 0x24
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	ec49 8b10 	vmov	d0, r8, r9
 800fe32:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fe36:	6022      	str	r2, [r4, #0]
 800fe38:	f8cd a004 	str.w	sl, [sp, #4]
 800fe3c:	6861      	ldr	r1, [r4, #4]
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f7ff fee7 	bl	800fc12 <__cvt>
 800fe44:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fe48:	2b47      	cmp	r3, #71	; 0x47
 800fe4a:	4680      	mov	r8, r0
 800fe4c:	d109      	bne.n	800fe62 <_printf_float+0x126>
 800fe4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe50:	1cd8      	adds	r0, r3, #3
 800fe52:	db02      	blt.n	800fe5a <_printf_float+0x11e>
 800fe54:	6862      	ldr	r2, [r4, #4]
 800fe56:	4293      	cmp	r3, r2
 800fe58:	dd47      	ble.n	800feea <_printf_float+0x1ae>
 800fe5a:	f1aa 0a02 	sub.w	sl, sl, #2
 800fe5e:	fa5f fa8a 	uxtb.w	sl, sl
 800fe62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fe66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe68:	d824      	bhi.n	800feb4 <_printf_float+0x178>
 800fe6a:	3901      	subs	r1, #1
 800fe6c:	4652      	mov	r2, sl
 800fe6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe72:	9109      	str	r1, [sp, #36]	; 0x24
 800fe74:	f7ff ff2e 	bl	800fcd4 <__exponent>
 800fe78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe7a:	1813      	adds	r3, r2, r0
 800fe7c:	2a01      	cmp	r2, #1
 800fe7e:	4681      	mov	r9, r0
 800fe80:	6123      	str	r3, [r4, #16]
 800fe82:	dc02      	bgt.n	800fe8a <_printf_float+0x14e>
 800fe84:	6822      	ldr	r2, [r4, #0]
 800fe86:	07d1      	lsls	r1, r2, #31
 800fe88:	d501      	bpl.n	800fe8e <_printf_float+0x152>
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	6123      	str	r3, [r4, #16]
 800fe8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d0a5      	beq.n	800fde2 <_printf_float+0xa6>
 800fe96:	232d      	movs	r3, #45	; 0x2d
 800fe98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe9c:	e7a1      	b.n	800fde2 <_printf_float+0xa6>
 800fe9e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800fea2:	f000 8177 	beq.w	8010194 <_printf_float+0x458>
 800fea6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800feaa:	d1bb      	bne.n	800fe24 <_printf_float+0xe8>
 800feac:	2900      	cmp	r1, #0
 800feae:	d1b9      	bne.n	800fe24 <_printf_float+0xe8>
 800feb0:	2301      	movs	r3, #1
 800feb2:	e7b6      	b.n	800fe22 <_printf_float+0xe6>
 800feb4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800feb8:	d119      	bne.n	800feee <_printf_float+0x1b2>
 800feba:	2900      	cmp	r1, #0
 800febc:	6863      	ldr	r3, [r4, #4]
 800febe:	dd0c      	ble.n	800feda <_printf_float+0x19e>
 800fec0:	6121      	str	r1, [r4, #16]
 800fec2:	b913      	cbnz	r3, 800feca <_printf_float+0x18e>
 800fec4:	6822      	ldr	r2, [r4, #0]
 800fec6:	07d2      	lsls	r2, r2, #31
 800fec8:	d502      	bpl.n	800fed0 <_printf_float+0x194>
 800feca:	3301      	adds	r3, #1
 800fecc:	440b      	add	r3, r1
 800fece:	6123      	str	r3, [r4, #16]
 800fed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed2:	65a3      	str	r3, [r4, #88]	; 0x58
 800fed4:	f04f 0900 	mov.w	r9, #0
 800fed8:	e7d9      	b.n	800fe8e <_printf_float+0x152>
 800feda:	b913      	cbnz	r3, 800fee2 <_printf_float+0x1a6>
 800fedc:	6822      	ldr	r2, [r4, #0]
 800fede:	07d0      	lsls	r0, r2, #31
 800fee0:	d501      	bpl.n	800fee6 <_printf_float+0x1aa>
 800fee2:	3302      	adds	r3, #2
 800fee4:	e7f3      	b.n	800fece <_printf_float+0x192>
 800fee6:	2301      	movs	r3, #1
 800fee8:	e7f1      	b.n	800fece <_printf_float+0x192>
 800feea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800feee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fef2:	4293      	cmp	r3, r2
 800fef4:	db05      	blt.n	800ff02 <_printf_float+0x1c6>
 800fef6:	6822      	ldr	r2, [r4, #0]
 800fef8:	6123      	str	r3, [r4, #16]
 800fefa:	07d1      	lsls	r1, r2, #31
 800fefc:	d5e8      	bpl.n	800fed0 <_printf_float+0x194>
 800fefe:	3301      	adds	r3, #1
 800ff00:	e7e5      	b.n	800fece <_printf_float+0x192>
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bfd4      	ite	le
 800ff06:	f1c3 0302 	rsble	r3, r3, #2
 800ff0a:	2301      	movgt	r3, #1
 800ff0c:	4413      	add	r3, r2
 800ff0e:	e7de      	b.n	800fece <_printf_float+0x192>
 800ff10:	6823      	ldr	r3, [r4, #0]
 800ff12:	055a      	lsls	r2, r3, #21
 800ff14:	d407      	bmi.n	800ff26 <_printf_float+0x1ea>
 800ff16:	6923      	ldr	r3, [r4, #16]
 800ff18:	4642      	mov	r2, r8
 800ff1a:	4631      	mov	r1, r6
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	47b8      	blx	r7
 800ff20:	3001      	adds	r0, #1
 800ff22:	d12b      	bne.n	800ff7c <_printf_float+0x240>
 800ff24:	e767      	b.n	800fdf6 <_printf_float+0xba>
 800ff26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ff2a:	f240 80dc 	bls.w	80100e6 <_printf_float+0x3aa>
 800ff2e:	2200      	movs	r2, #0
 800ff30:	2300      	movs	r3, #0
 800ff32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff36:	f7f8 fcff 	bl	8008938 <__aeabi_dcmpeq>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d033      	beq.n	800ffa6 <_printf_float+0x26a>
 800ff3e:	2301      	movs	r3, #1
 800ff40:	4a41      	ldr	r2, [pc, #260]	; (8010048 <_printf_float+0x30c>)
 800ff42:	4631      	mov	r1, r6
 800ff44:	4628      	mov	r0, r5
 800ff46:	47b8      	blx	r7
 800ff48:	3001      	adds	r0, #1
 800ff4a:	f43f af54 	beq.w	800fdf6 <_printf_float+0xba>
 800ff4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff52:	429a      	cmp	r2, r3
 800ff54:	db02      	blt.n	800ff5c <_printf_float+0x220>
 800ff56:	6823      	ldr	r3, [r4, #0]
 800ff58:	07d8      	lsls	r0, r3, #31
 800ff5a:	d50f      	bpl.n	800ff7c <_printf_float+0x240>
 800ff5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff60:	4631      	mov	r1, r6
 800ff62:	4628      	mov	r0, r5
 800ff64:	47b8      	blx	r7
 800ff66:	3001      	adds	r0, #1
 800ff68:	f43f af45 	beq.w	800fdf6 <_printf_float+0xba>
 800ff6c:	f04f 0800 	mov.w	r8, #0
 800ff70:	f104 091a 	add.w	r9, r4, #26
 800ff74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff76:	3b01      	subs	r3, #1
 800ff78:	4543      	cmp	r3, r8
 800ff7a:	dc09      	bgt.n	800ff90 <_printf_float+0x254>
 800ff7c:	6823      	ldr	r3, [r4, #0]
 800ff7e:	079b      	lsls	r3, r3, #30
 800ff80:	f100 8103 	bmi.w	801018a <_printf_float+0x44e>
 800ff84:	68e0      	ldr	r0, [r4, #12]
 800ff86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff88:	4298      	cmp	r0, r3
 800ff8a:	bfb8      	it	lt
 800ff8c:	4618      	movlt	r0, r3
 800ff8e:	e734      	b.n	800fdfa <_printf_float+0xbe>
 800ff90:	2301      	movs	r3, #1
 800ff92:	464a      	mov	r2, r9
 800ff94:	4631      	mov	r1, r6
 800ff96:	4628      	mov	r0, r5
 800ff98:	47b8      	blx	r7
 800ff9a:	3001      	adds	r0, #1
 800ff9c:	f43f af2b 	beq.w	800fdf6 <_printf_float+0xba>
 800ffa0:	f108 0801 	add.w	r8, r8, #1
 800ffa4:	e7e6      	b.n	800ff74 <_printf_float+0x238>
 800ffa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	dc2b      	bgt.n	8010004 <_printf_float+0x2c8>
 800ffac:	2301      	movs	r3, #1
 800ffae:	4a26      	ldr	r2, [pc, #152]	; (8010048 <_printf_float+0x30c>)
 800ffb0:	4631      	mov	r1, r6
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	47b8      	blx	r7
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	f43f af1d 	beq.w	800fdf6 <_printf_float+0xba>
 800ffbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffbe:	b923      	cbnz	r3, 800ffca <_printf_float+0x28e>
 800ffc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffc2:	b913      	cbnz	r3, 800ffca <_printf_float+0x28e>
 800ffc4:	6823      	ldr	r3, [r4, #0]
 800ffc6:	07d9      	lsls	r1, r3, #31
 800ffc8:	d5d8      	bpl.n	800ff7c <_printf_float+0x240>
 800ffca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffce:	4631      	mov	r1, r6
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	47b8      	blx	r7
 800ffd4:	3001      	adds	r0, #1
 800ffd6:	f43f af0e 	beq.w	800fdf6 <_printf_float+0xba>
 800ffda:	f04f 0900 	mov.w	r9, #0
 800ffde:	f104 0a1a 	add.w	sl, r4, #26
 800ffe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe4:	425b      	negs	r3, r3
 800ffe6:	454b      	cmp	r3, r9
 800ffe8:	dc01      	bgt.n	800ffee <_printf_float+0x2b2>
 800ffea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffec:	e794      	b.n	800ff18 <_printf_float+0x1dc>
 800ffee:	2301      	movs	r3, #1
 800fff0:	4652      	mov	r2, sl
 800fff2:	4631      	mov	r1, r6
 800fff4:	4628      	mov	r0, r5
 800fff6:	47b8      	blx	r7
 800fff8:	3001      	adds	r0, #1
 800fffa:	f43f aefc 	beq.w	800fdf6 <_printf_float+0xba>
 800fffe:	f109 0901 	add.w	r9, r9, #1
 8010002:	e7ee      	b.n	800ffe2 <_printf_float+0x2a6>
 8010004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010008:	429a      	cmp	r2, r3
 801000a:	bfa8      	it	ge
 801000c:	461a      	movge	r2, r3
 801000e:	2a00      	cmp	r2, #0
 8010010:	4691      	mov	r9, r2
 8010012:	dd07      	ble.n	8010024 <_printf_float+0x2e8>
 8010014:	4613      	mov	r3, r2
 8010016:	4631      	mov	r1, r6
 8010018:	4642      	mov	r2, r8
 801001a:	4628      	mov	r0, r5
 801001c:	47b8      	blx	r7
 801001e:	3001      	adds	r0, #1
 8010020:	f43f aee9 	beq.w	800fdf6 <_printf_float+0xba>
 8010024:	f104 031a 	add.w	r3, r4, #26
 8010028:	f04f 0b00 	mov.w	fp, #0
 801002c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010030:	9306      	str	r3, [sp, #24]
 8010032:	e015      	b.n	8010060 <_printf_float+0x324>
 8010034:	7fefffff 	.word	0x7fefffff
 8010038:	08012388 	.word	0x08012388
 801003c:	08012384 	.word	0x08012384
 8010040:	08012390 	.word	0x08012390
 8010044:	0801238c 	.word	0x0801238c
 8010048:	08012394 	.word	0x08012394
 801004c:	2301      	movs	r3, #1
 801004e:	9a06      	ldr	r2, [sp, #24]
 8010050:	4631      	mov	r1, r6
 8010052:	4628      	mov	r0, r5
 8010054:	47b8      	blx	r7
 8010056:	3001      	adds	r0, #1
 8010058:	f43f aecd 	beq.w	800fdf6 <_printf_float+0xba>
 801005c:	f10b 0b01 	add.w	fp, fp, #1
 8010060:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010064:	ebaa 0309 	sub.w	r3, sl, r9
 8010068:	455b      	cmp	r3, fp
 801006a:	dcef      	bgt.n	801004c <_printf_float+0x310>
 801006c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010070:	429a      	cmp	r2, r3
 8010072:	44d0      	add	r8, sl
 8010074:	db15      	blt.n	80100a2 <_printf_float+0x366>
 8010076:	6823      	ldr	r3, [r4, #0]
 8010078:	07da      	lsls	r2, r3, #31
 801007a:	d412      	bmi.n	80100a2 <_printf_float+0x366>
 801007c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801007e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010080:	eba3 020a 	sub.w	r2, r3, sl
 8010084:	eba3 0a01 	sub.w	sl, r3, r1
 8010088:	4592      	cmp	sl, r2
 801008a:	bfa8      	it	ge
 801008c:	4692      	movge	sl, r2
 801008e:	f1ba 0f00 	cmp.w	sl, #0
 8010092:	dc0e      	bgt.n	80100b2 <_printf_float+0x376>
 8010094:	f04f 0800 	mov.w	r8, #0
 8010098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801009c:	f104 091a 	add.w	r9, r4, #26
 80100a0:	e019      	b.n	80100d6 <_printf_float+0x39a>
 80100a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100a6:	4631      	mov	r1, r6
 80100a8:	4628      	mov	r0, r5
 80100aa:	47b8      	blx	r7
 80100ac:	3001      	adds	r0, #1
 80100ae:	d1e5      	bne.n	801007c <_printf_float+0x340>
 80100b0:	e6a1      	b.n	800fdf6 <_printf_float+0xba>
 80100b2:	4653      	mov	r3, sl
 80100b4:	4642      	mov	r2, r8
 80100b6:	4631      	mov	r1, r6
 80100b8:	4628      	mov	r0, r5
 80100ba:	47b8      	blx	r7
 80100bc:	3001      	adds	r0, #1
 80100be:	d1e9      	bne.n	8010094 <_printf_float+0x358>
 80100c0:	e699      	b.n	800fdf6 <_printf_float+0xba>
 80100c2:	2301      	movs	r3, #1
 80100c4:	464a      	mov	r2, r9
 80100c6:	4631      	mov	r1, r6
 80100c8:	4628      	mov	r0, r5
 80100ca:	47b8      	blx	r7
 80100cc:	3001      	adds	r0, #1
 80100ce:	f43f ae92 	beq.w	800fdf6 <_printf_float+0xba>
 80100d2:	f108 0801 	add.w	r8, r8, #1
 80100d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100da:	1a9b      	subs	r3, r3, r2
 80100dc:	eba3 030a 	sub.w	r3, r3, sl
 80100e0:	4543      	cmp	r3, r8
 80100e2:	dcee      	bgt.n	80100c2 <_printf_float+0x386>
 80100e4:	e74a      	b.n	800ff7c <_printf_float+0x240>
 80100e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100e8:	2a01      	cmp	r2, #1
 80100ea:	dc01      	bgt.n	80100f0 <_printf_float+0x3b4>
 80100ec:	07db      	lsls	r3, r3, #31
 80100ee:	d53a      	bpl.n	8010166 <_printf_float+0x42a>
 80100f0:	2301      	movs	r3, #1
 80100f2:	4642      	mov	r2, r8
 80100f4:	4631      	mov	r1, r6
 80100f6:	4628      	mov	r0, r5
 80100f8:	47b8      	blx	r7
 80100fa:	3001      	adds	r0, #1
 80100fc:	f43f ae7b 	beq.w	800fdf6 <_printf_float+0xba>
 8010100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010104:	4631      	mov	r1, r6
 8010106:	4628      	mov	r0, r5
 8010108:	47b8      	blx	r7
 801010a:	3001      	adds	r0, #1
 801010c:	f108 0801 	add.w	r8, r8, #1
 8010110:	f43f ae71 	beq.w	800fdf6 <_printf_float+0xba>
 8010114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010116:	2200      	movs	r2, #0
 8010118:	f103 3aff 	add.w	sl, r3, #4294967295
 801011c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010120:	2300      	movs	r3, #0
 8010122:	f7f8 fc09 	bl	8008938 <__aeabi_dcmpeq>
 8010126:	b9c8      	cbnz	r0, 801015c <_printf_float+0x420>
 8010128:	4653      	mov	r3, sl
 801012a:	4642      	mov	r2, r8
 801012c:	4631      	mov	r1, r6
 801012e:	4628      	mov	r0, r5
 8010130:	47b8      	blx	r7
 8010132:	3001      	adds	r0, #1
 8010134:	d10e      	bne.n	8010154 <_printf_float+0x418>
 8010136:	e65e      	b.n	800fdf6 <_printf_float+0xba>
 8010138:	2301      	movs	r3, #1
 801013a:	4652      	mov	r2, sl
 801013c:	4631      	mov	r1, r6
 801013e:	4628      	mov	r0, r5
 8010140:	47b8      	blx	r7
 8010142:	3001      	adds	r0, #1
 8010144:	f43f ae57 	beq.w	800fdf6 <_printf_float+0xba>
 8010148:	f108 0801 	add.w	r8, r8, #1
 801014c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801014e:	3b01      	subs	r3, #1
 8010150:	4543      	cmp	r3, r8
 8010152:	dcf1      	bgt.n	8010138 <_printf_float+0x3fc>
 8010154:	464b      	mov	r3, r9
 8010156:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801015a:	e6de      	b.n	800ff1a <_printf_float+0x1de>
 801015c:	f04f 0800 	mov.w	r8, #0
 8010160:	f104 0a1a 	add.w	sl, r4, #26
 8010164:	e7f2      	b.n	801014c <_printf_float+0x410>
 8010166:	2301      	movs	r3, #1
 8010168:	e7df      	b.n	801012a <_printf_float+0x3ee>
 801016a:	2301      	movs	r3, #1
 801016c:	464a      	mov	r2, r9
 801016e:	4631      	mov	r1, r6
 8010170:	4628      	mov	r0, r5
 8010172:	47b8      	blx	r7
 8010174:	3001      	adds	r0, #1
 8010176:	f43f ae3e 	beq.w	800fdf6 <_printf_float+0xba>
 801017a:	f108 0801 	add.w	r8, r8, #1
 801017e:	68e3      	ldr	r3, [r4, #12]
 8010180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010182:	1a9b      	subs	r3, r3, r2
 8010184:	4543      	cmp	r3, r8
 8010186:	dcf0      	bgt.n	801016a <_printf_float+0x42e>
 8010188:	e6fc      	b.n	800ff84 <_printf_float+0x248>
 801018a:	f04f 0800 	mov.w	r8, #0
 801018e:	f104 0919 	add.w	r9, r4, #25
 8010192:	e7f4      	b.n	801017e <_printf_float+0x442>
 8010194:	2900      	cmp	r1, #0
 8010196:	f43f ae8b 	beq.w	800feb0 <_printf_float+0x174>
 801019a:	2300      	movs	r3, #0
 801019c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80101a0:	ab09      	add	r3, sp, #36	; 0x24
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	ec49 8b10 	vmov	d0, r8, r9
 80101a8:	6022      	str	r2, [r4, #0]
 80101aa:	f8cd a004 	str.w	sl, [sp, #4]
 80101ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101b2:	4628      	mov	r0, r5
 80101b4:	f7ff fd2d 	bl	800fc12 <__cvt>
 80101b8:	4680      	mov	r8, r0
 80101ba:	e648      	b.n	800fe4e <_printf_float+0x112>

080101bc <_printf_common>:
 80101bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c0:	4691      	mov	r9, r2
 80101c2:	461f      	mov	r7, r3
 80101c4:	688a      	ldr	r2, [r1, #8]
 80101c6:	690b      	ldr	r3, [r1, #16]
 80101c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101cc:	4293      	cmp	r3, r2
 80101ce:	bfb8      	it	lt
 80101d0:	4613      	movlt	r3, r2
 80101d2:	f8c9 3000 	str.w	r3, [r9]
 80101d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101da:	4606      	mov	r6, r0
 80101dc:	460c      	mov	r4, r1
 80101de:	b112      	cbz	r2, 80101e6 <_printf_common+0x2a>
 80101e0:	3301      	adds	r3, #1
 80101e2:	f8c9 3000 	str.w	r3, [r9]
 80101e6:	6823      	ldr	r3, [r4, #0]
 80101e8:	0699      	lsls	r1, r3, #26
 80101ea:	bf42      	ittt	mi
 80101ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80101f0:	3302      	addmi	r3, #2
 80101f2:	f8c9 3000 	strmi.w	r3, [r9]
 80101f6:	6825      	ldr	r5, [r4, #0]
 80101f8:	f015 0506 	ands.w	r5, r5, #6
 80101fc:	d107      	bne.n	801020e <_printf_common+0x52>
 80101fe:	f104 0a19 	add.w	sl, r4, #25
 8010202:	68e3      	ldr	r3, [r4, #12]
 8010204:	f8d9 2000 	ldr.w	r2, [r9]
 8010208:	1a9b      	subs	r3, r3, r2
 801020a:	42ab      	cmp	r3, r5
 801020c:	dc28      	bgt.n	8010260 <_printf_common+0xa4>
 801020e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010212:	6822      	ldr	r2, [r4, #0]
 8010214:	3300      	adds	r3, #0
 8010216:	bf18      	it	ne
 8010218:	2301      	movne	r3, #1
 801021a:	0692      	lsls	r2, r2, #26
 801021c:	d42d      	bmi.n	801027a <_printf_common+0xbe>
 801021e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010222:	4639      	mov	r1, r7
 8010224:	4630      	mov	r0, r6
 8010226:	47c0      	blx	r8
 8010228:	3001      	adds	r0, #1
 801022a:	d020      	beq.n	801026e <_printf_common+0xb2>
 801022c:	6823      	ldr	r3, [r4, #0]
 801022e:	68e5      	ldr	r5, [r4, #12]
 8010230:	f8d9 2000 	ldr.w	r2, [r9]
 8010234:	f003 0306 	and.w	r3, r3, #6
 8010238:	2b04      	cmp	r3, #4
 801023a:	bf08      	it	eq
 801023c:	1aad      	subeq	r5, r5, r2
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	6922      	ldr	r2, [r4, #16]
 8010242:	bf0c      	ite	eq
 8010244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010248:	2500      	movne	r5, #0
 801024a:	4293      	cmp	r3, r2
 801024c:	bfc4      	itt	gt
 801024e:	1a9b      	subgt	r3, r3, r2
 8010250:	18ed      	addgt	r5, r5, r3
 8010252:	f04f 0900 	mov.w	r9, #0
 8010256:	341a      	adds	r4, #26
 8010258:	454d      	cmp	r5, r9
 801025a:	d11a      	bne.n	8010292 <_printf_common+0xd6>
 801025c:	2000      	movs	r0, #0
 801025e:	e008      	b.n	8010272 <_printf_common+0xb6>
 8010260:	2301      	movs	r3, #1
 8010262:	4652      	mov	r2, sl
 8010264:	4639      	mov	r1, r7
 8010266:	4630      	mov	r0, r6
 8010268:	47c0      	blx	r8
 801026a:	3001      	adds	r0, #1
 801026c:	d103      	bne.n	8010276 <_printf_common+0xba>
 801026e:	f04f 30ff 	mov.w	r0, #4294967295
 8010272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010276:	3501      	adds	r5, #1
 8010278:	e7c3      	b.n	8010202 <_printf_common+0x46>
 801027a:	18e1      	adds	r1, r4, r3
 801027c:	1c5a      	adds	r2, r3, #1
 801027e:	2030      	movs	r0, #48	; 0x30
 8010280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010284:	4422      	add	r2, r4
 8010286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801028a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801028e:	3302      	adds	r3, #2
 8010290:	e7c5      	b.n	801021e <_printf_common+0x62>
 8010292:	2301      	movs	r3, #1
 8010294:	4622      	mov	r2, r4
 8010296:	4639      	mov	r1, r7
 8010298:	4630      	mov	r0, r6
 801029a:	47c0      	blx	r8
 801029c:	3001      	adds	r0, #1
 801029e:	d0e6      	beq.n	801026e <_printf_common+0xb2>
 80102a0:	f109 0901 	add.w	r9, r9, #1
 80102a4:	e7d8      	b.n	8010258 <_printf_common+0x9c>
	...

080102a8 <_printf_i>:
 80102a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80102b0:	460c      	mov	r4, r1
 80102b2:	7e09      	ldrb	r1, [r1, #24]
 80102b4:	b085      	sub	sp, #20
 80102b6:	296e      	cmp	r1, #110	; 0x6e
 80102b8:	4617      	mov	r7, r2
 80102ba:	4606      	mov	r6, r0
 80102bc:	4698      	mov	r8, r3
 80102be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102c0:	f000 80b3 	beq.w	801042a <_printf_i+0x182>
 80102c4:	d822      	bhi.n	801030c <_printf_i+0x64>
 80102c6:	2963      	cmp	r1, #99	; 0x63
 80102c8:	d036      	beq.n	8010338 <_printf_i+0x90>
 80102ca:	d80a      	bhi.n	80102e2 <_printf_i+0x3a>
 80102cc:	2900      	cmp	r1, #0
 80102ce:	f000 80b9 	beq.w	8010444 <_printf_i+0x19c>
 80102d2:	2958      	cmp	r1, #88	; 0x58
 80102d4:	f000 8083 	beq.w	80103de <_printf_i+0x136>
 80102d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80102e0:	e032      	b.n	8010348 <_printf_i+0xa0>
 80102e2:	2964      	cmp	r1, #100	; 0x64
 80102e4:	d001      	beq.n	80102ea <_printf_i+0x42>
 80102e6:	2969      	cmp	r1, #105	; 0x69
 80102e8:	d1f6      	bne.n	80102d8 <_printf_i+0x30>
 80102ea:	6820      	ldr	r0, [r4, #0]
 80102ec:	6813      	ldr	r3, [r2, #0]
 80102ee:	0605      	lsls	r5, r0, #24
 80102f0:	f103 0104 	add.w	r1, r3, #4
 80102f4:	d52a      	bpl.n	801034c <_printf_i+0xa4>
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	6011      	str	r1, [r2, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	da03      	bge.n	8010306 <_printf_i+0x5e>
 80102fe:	222d      	movs	r2, #45	; 0x2d
 8010300:	425b      	negs	r3, r3
 8010302:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010306:	486f      	ldr	r0, [pc, #444]	; (80104c4 <_printf_i+0x21c>)
 8010308:	220a      	movs	r2, #10
 801030a:	e039      	b.n	8010380 <_printf_i+0xd8>
 801030c:	2973      	cmp	r1, #115	; 0x73
 801030e:	f000 809d 	beq.w	801044c <_printf_i+0x1a4>
 8010312:	d808      	bhi.n	8010326 <_printf_i+0x7e>
 8010314:	296f      	cmp	r1, #111	; 0x6f
 8010316:	d020      	beq.n	801035a <_printf_i+0xb2>
 8010318:	2970      	cmp	r1, #112	; 0x70
 801031a:	d1dd      	bne.n	80102d8 <_printf_i+0x30>
 801031c:	6823      	ldr	r3, [r4, #0]
 801031e:	f043 0320 	orr.w	r3, r3, #32
 8010322:	6023      	str	r3, [r4, #0]
 8010324:	e003      	b.n	801032e <_printf_i+0x86>
 8010326:	2975      	cmp	r1, #117	; 0x75
 8010328:	d017      	beq.n	801035a <_printf_i+0xb2>
 801032a:	2978      	cmp	r1, #120	; 0x78
 801032c:	d1d4      	bne.n	80102d8 <_printf_i+0x30>
 801032e:	2378      	movs	r3, #120	; 0x78
 8010330:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010334:	4864      	ldr	r0, [pc, #400]	; (80104c8 <_printf_i+0x220>)
 8010336:	e055      	b.n	80103e4 <_printf_i+0x13c>
 8010338:	6813      	ldr	r3, [r2, #0]
 801033a:	1d19      	adds	r1, r3, #4
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	6011      	str	r1, [r2, #0]
 8010340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010348:	2301      	movs	r3, #1
 801034a:	e08c      	b.n	8010466 <_printf_i+0x1be>
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	6011      	str	r1, [r2, #0]
 8010350:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010354:	bf18      	it	ne
 8010356:	b21b      	sxthne	r3, r3
 8010358:	e7cf      	b.n	80102fa <_printf_i+0x52>
 801035a:	6813      	ldr	r3, [r2, #0]
 801035c:	6825      	ldr	r5, [r4, #0]
 801035e:	1d18      	adds	r0, r3, #4
 8010360:	6010      	str	r0, [r2, #0]
 8010362:	0628      	lsls	r0, r5, #24
 8010364:	d501      	bpl.n	801036a <_printf_i+0xc2>
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	e002      	b.n	8010370 <_printf_i+0xc8>
 801036a:	0668      	lsls	r0, r5, #25
 801036c:	d5fb      	bpl.n	8010366 <_printf_i+0xbe>
 801036e:	881b      	ldrh	r3, [r3, #0]
 8010370:	4854      	ldr	r0, [pc, #336]	; (80104c4 <_printf_i+0x21c>)
 8010372:	296f      	cmp	r1, #111	; 0x6f
 8010374:	bf14      	ite	ne
 8010376:	220a      	movne	r2, #10
 8010378:	2208      	moveq	r2, #8
 801037a:	2100      	movs	r1, #0
 801037c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010380:	6865      	ldr	r5, [r4, #4]
 8010382:	60a5      	str	r5, [r4, #8]
 8010384:	2d00      	cmp	r5, #0
 8010386:	f2c0 8095 	blt.w	80104b4 <_printf_i+0x20c>
 801038a:	6821      	ldr	r1, [r4, #0]
 801038c:	f021 0104 	bic.w	r1, r1, #4
 8010390:	6021      	str	r1, [r4, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d13d      	bne.n	8010412 <_printf_i+0x16a>
 8010396:	2d00      	cmp	r5, #0
 8010398:	f040 808e 	bne.w	80104b8 <_printf_i+0x210>
 801039c:	4665      	mov	r5, ip
 801039e:	2a08      	cmp	r2, #8
 80103a0:	d10b      	bne.n	80103ba <_printf_i+0x112>
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	07db      	lsls	r3, r3, #31
 80103a6:	d508      	bpl.n	80103ba <_printf_i+0x112>
 80103a8:	6923      	ldr	r3, [r4, #16]
 80103aa:	6862      	ldr	r2, [r4, #4]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	bfde      	ittt	le
 80103b0:	2330      	movle	r3, #48	; 0x30
 80103b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80103b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80103ba:	ebac 0305 	sub.w	r3, ip, r5
 80103be:	6123      	str	r3, [r4, #16]
 80103c0:	f8cd 8000 	str.w	r8, [sp]
 80103c4:	463b      	mov	r3, r7
 80103c6:	aa03      	add	r2, sp, #12
 80103c8:	4621      	mov	r1, r4
 80103ca:	4630      	mov	r0, r6
 80103cc:	f7ff fef6 	bl	80101bc <_printf_common>
 80103d0:	3001      	adds	r0, #1
 80103d2:	d14d      	bne.n	8010470 <_printf_i+0x1c8>
 80103d4:	f04f 30ff 	mov.w	r0, #4294967295
 80103d8:	b005      	add	sp, #20
 80103da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103de:	4839      	ldr	r0, [pc, #228]	; (80104c4 <_printf_i+0x21c>)
 80103e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80103e4:	6813      	ldr	r3, [r2, #0]
 80103e6:	6821      	ldr	r1, [r4, #0]
 80103e8:	1d1d      	adds	r5, r3, #4
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	6015      	str	r5, [r2, #0]
 80103ee:	060a      	lsls	r2, r1, #24
 80103f0:	d50b      	bpl.n	801040a <_printf_i+0x162>
 80103f2:	07ca      	lsls	r2, r1, #31
 80103f4:	bf44      	itt	mi
 80103f6:	f041 0120 	orrmi.w	r1, r1, #32
 80103fa:	6021      	strmi	r1, [r4, #0]
 80103fc:	b91b      	cbnz	r3, 8010406 <_printf_i+0x15e>
 80103fe:	6822      	ldr	r2, [r4, #0]
 8010400:	f022 0220 	bic.w	r2, r2, #32
 8010404:	6022      	str	r2, [r4, #0]
 8010406:	2210      	movs	r2, #16
 8010408:	e7b7      	b.n	801037a <_printf_i+0xd2>
 801040a:	064d      	lsls	r5, r1, #25
 801040c:	bf48      	it	mi
 801040e:	b29b      	uxthmi	r3, r3
 8010410:	e7ef      	b.n	80103f2 <_printf_i+0x14a>
 8010412:	4665      	mov	r5, ip
 8010414:	fbb3 f1f2 	udiv	r1, r3, r2
 8010418:	fb02 3311 	mls	r3, r2, r1, r3
 801041c:	5cc3      	ldrb	r3, [r0, r3]
 801041e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010422:	460b      	mov	r3, r1
 8010424:	2900      	cmp	r1, #0
 8010426:	d1f5      	bne.n	8010414 <_printf_i+0x16c>
 8010428:	e7b9      	b.n	801039e <_printf_i+0xf6>
 801042a:	6813      	ldr	r3, [r2, #0]
 801042c:	6825      	ldr	r5, [r4, #0]
 801042e:	6961      	ldr	r1, [r4, #20]
 8010430:	1d18      	adds	r0, r3, #4
 8010432:	6010      	str	r0, [r2, #0]
 8010434:	0628      	lsls	r0, r5, #24
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	d501      	bpl.n	801043e <_printf_i+0x196>
 801043a:	6019      	str	r1, [r3, #0]
 801043c:	e002      	b.n	8010444 <_printf_i+0x19c>
 801043e:	066a      	lsls	r2, r5, #25
 8010440:	d5fb      	bpl.n	801043a <_printf_i+0x192>
 8010442:	8019      	strh	r1, [r3, #0]
 8010444:	2300      	movs	r3, #0
 8010446:	6123      	str	r3, [r4, #16]
 8010448:	4665      	mov	r5, ip
 801044a:	e7b9      	b.n	80103c0 <_printf_i+0x118>
 801044c:	6813      	ldr	r3, [r2, #0]
 801044e:	1d19      	adds	r1, r3, #4
 8010450:	6011      	str	r1, [r2, #0]
 8010452:	681d      	ldr	r5, [r3, #0]
 8010454:	6862      	ldr	r2, [r4, #4]
 8010456:	2100      	movs	r1, #0
 8010458:	4628      	mov	r0, r5
 801045a:	f7f7 fdf9 	bl	8008050 <memchr>
 801045e:	b108      	cbz	r0, 8010464 <_printf_i+0x1bc>
 8010460:	1b40      	subs	r0, r0, r5
 8010462:	6060      	str	r0, [r4, #4]
 8010464:	6863      	ldr	r3, [r4, #4]
 8010466:	6123      	str	r3, [r4, #16]
 8010468:	2300      	movs	r3, #0
 801046a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801046e:	e7a7      	b.n	80103c0 <_printf_i+0x118>
 8010470:	6923      	ldr	r3, [r4, #16]
 8010472:	462a      	mov	r2, r5
 8010474:	4639      	mov	r1, r7
 8010476:	4630      	mov	r0, r6
 8010478:	47c0      	blx	r8
 801047a:	3001      	adds	r0, #1
 801047c:	d0aa      	beq.n	80103d4 <_printf_i+0x12c>
 801047e:	6823      	ldr	r3, [r4, #0]
 8010480:	079b      	lsls	r3, r3, #30
 8010482:	d413      	bmi.n	80104ac <_printf_i+0x204>
 8010484:	68e0      	ldr	r0, [r4, #12]
 8010486:	9b03      	ldr	r3, [sp, #12]
 8010488:	4298      	cmp	r0, r3
 801048a:	bfb8      	it	lt
 801048c:	4618      	movlt	r0, r3
 801048e:	e7a3      	b.n	80103d8 <_printf_i+0x130>
 8010490:	2301      	movs	r3, #1
 8010492:	464a      	mov	r2, r9
 8010494:	4639      	mov	r1, r7
 8010496:	4630      	mov	r0, r6
 8010498:	47c0      	blx	r8
 801049a:	3001      	adds	r0, #1
 801049c:	d09a      	beq.n	80103d4 <_printf_i+0x12c>
 801049e:	3501      	adds	r5, #1
 80104a0:	68e3      	ldr	r3, [r4, #12]
 80104a2:	9a03      	ldr	r2, [sp, #12]
 80104a4:	1a9b      	subs	r3, r3, r2
 80104a6:	42ab      	cmp	r3, r5
 80104a8:	dcf2      	bgt.n	8010490 <_printf_i+0x1e8>
 80104aa:	e7eb      	b.n	8010484 <_printf_i+0x1dc>
 80104ac:	2500      	movs	r5, #0
 80104ae:	f104 0919 	add.w	r9, r4, #25
 80104b2:	e7f5      	b.n	80104a0 <_printf_i+0x1f8>
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1ac      	bne.n	8010412 <_printf_i+0x16a>
 80104b8:	7803      	ldrb	r3, [r0, #0]
 80104ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104c2:	e76c      	b.n	801039e <_printf_i+0xf6>
 80104c4:	08012396 	.word	0x08012396
 80104c8:	080123a7 	.word	0x080123a7

080104cc <iprintf>:
 80104cc:	b40f      	push	{r0, r1, r2, r3}
 80104ce:	4b0a      	ldr	r3, [pc, #40]	; (80104f8 <iprintf+0x2c>)
 80104d0:	b513      	push	{r0, r1, r4, lr}
 80104d2:	681c      	ldr	r4, [r3, #0]
 80104d4:	b124      	cbz	r4, 80104e0 <iprintf+0x14>
 80104d6:	69a3      	ldr	r3, [r4, #24]
 80104d8:	b913      	cbnz	r3, 80104e0 <iprintf+0x14>
 80104da:	4620      	mov	r0, r4
 80104dc:	f001 f868 	bl	80115b0 <__sinit>
 80104e0:	ab05      	add	r3, sp, #20
 80104e2:	9a04      	ldr	r2, [sp, #16]
 80104e4:	68a1      	ldr	r1, [r4, #8]
 80104e6:	9301      	str	r3, [sp, #4]
 80104e8:	4620      	mov	r0, r4
 80104ea:	f001 fd21 	bl	8011f30 <_vfiprintf_r>
 80104ee:	b002      	add	sp, #8
 80104f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104f4:	b004      	add	sp, #16
 80104f6:	4770      	bx	lr
 80104f8:	2000000c 	.word	0x2000000c

080104fc <_puts_r>:
 80104fc:	b570      	push	{r4, r5, r6, lr}
 80104fe:	460e      	mov	r6, r1
 8010500:	4605      	mov	r5, r0
 8010502:	b118      	cbz	r0, 801050c <_puts_r+0x10>
 8010504:	6983      	ldr	r3, [r0, #24]
 8010506:	b90b      	cbnz	r3, 801050c <_puts_r+0x10>
 8010508:	f001 f852 	bl	80115b0 <__sinit>
 801050c:	69ab      	ldr	r3, [r5, #24]
 801050e:	68ac      	ldr	r4, [r5, #8]
 8010510:	b913      	cbnz	r3, 8010518 <_puts_r+0x1c>
 8010512:	4628      	mov	r0, r5
 8010514:	f001 f84c 	bl	80115b0 <__sinit>
 8010518:	4b23      	ldr	r3, [pc, #140]	; (80105a8 <_puts_r+0xac>)
 801051a:	429c      	cmp	r4, r3
 801051c:	d117      	bne.n	801054e <_puts_r+0x52>
 801051e:	686c      	ldr	r4, [r5, #4]
 8010520:	89a3      	ldrh	r3, [r4, #12]
 8010522:	071b      	lsls	r3, r3, #28
 8010524:	d51d      	bpl.n	8010562 <_puts_r+0x66>
 8010526:	6923      	ldr	r3, [r4, #16]
 8010528:	b1db      	cbz	r3, 8010562 <_puts_r+0x66>
 801052a:	3e01      	subs	r6, #1
 801052c:	68a3      	ldr	r3, [r4, #8]
 801052e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010532:	3b01      	subs	r3, #1
 8010534:	60a3      	str	r3, [r4, #8]
 8010536:	b9e9      	cbnz	r1, 8010574 <_puts_r+0x78>
 8010538:	2b00      	cmp	r3, #0
 801053a:	da2e      	bge.n	801059a <_puts_r+0x9e>
 801053c:	4622      	mov	r2, r4
 801053e:	210a      	movs	r1, #10
 8010540:	4628      	mov	r0, r5
 8010542:	f000 f83f 	bl	80105c4 <__swbuf_r>
 8010546:	3001      	adds	r0, #1
 8010548:	d011      	beq.n	801056e <_puts_r+0x72>
 801054a:	200a      	movs	r0, #10
 801054c:	e011      	b.n	8010572 <_puts_r+0x76>
 801054e:	4b17      	ldr	r3, [pc, #92]	; (80105ac <_puts_r+0xb0>)
 8010550:	429c      	cmp	r4, r3
 8010552:	d101      	bne.n	8010558 <_puts_r+0x5c>
 8010554:	68ac      	ldr	r4, [r5, #8]
 8010556:	e7e3      	b.n	8010520 <_puts_r+0x24>
 8010558:	4b15      	ldr	r3, [pc, #84]	; (80105b0 <_puts_r+0xb4>)
 801055a:	429c      	cmp	r4, r3
 801055c:	bf08      	it	eq
 801055e:	68ec      	ldreq	r4, [r5, #12]
 8010560:	e7de      	b.n	8010520 <_puts_r+0x24>
 8010562:	4621      	mov	r1, r4
 8010564:	4628      	mov	r0, r5
 8010566:	f000 f87f 	bl	8010668 <__swsetup_r>
 801056a:	2800      	cmp	r0, #0
 801056c:	d0dd      	beq.n	801052a <_puts_r+0x2e>
 801056e:	f04f 30ff 	mov.w	r0, #4294967295
 8010572:	bd70      	pop	{r4, r5, r6, pc}
 8010574:	2b00      	cmp	r3, #0
 8010576:	da04      	bge.n	8010582 <_puts_r+0x86>
 8010578:	69a2      	ldr	r2, [r4, #24]
 801057a:	429a      	cmp	r2, r3
 801057c:	dc06      	bgt.n	801058c <_puts_r+0x90>
 801057e:	290a      	cmp	r1, #10
 8010580:	d004      	beq.n	801058c <_puts_r+0x90>
 8010582:	6823      	ldr	r3, [r4, #0]
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	6022      	str	r2, [r4, #0]
 8010588:	7019      	strb	r1, [r3, #0]
 801058a:	e7cf      	b.n	801052c <_puts_r+0x30>
 801058c:	4622      	mov	r2, r4
 801058e:	4628      	mov	r0, r5
 8010590:	f000 f818 	bl	80105c4 <__swbuf_r>
 8010594:	3001      	adds	r0, #1
 8010596:	d1c9      	bne.n	801052c <_puts_r+0x30>
 8010598:	e7e9      	b.n	801056e <_puts_r+0x72>
 801059a:	6823      	ldr	r3, [r4, #0]
 801059c:	200a      	movs	r0, #10
 801059e:	1c5a      	adds	r2, r3, #1
 80105a0:	6022      	str	r2, [r4, #0]
 80105a2:	7018      	strb	r0, [r3, #0]
 80105a4:	e7e5      	b.n	8010572 <_puts_r+0x76>
 80105a6:	bf00      	nop
 80105a8:	080123e8 	.word	0x080123e8
 80105ac:	08012408 	.word	0x08012408
 80105b0:	080123c8 	.word	0x080123c8

080105b4 <puts>:
 80105b4:	4b02      	ldr	r3, [pc, #8]	; (80105c0 <puts+0xc>)
 80105b6:	4601      	mov	r1, r0
 80105b8:	6818      	ldr	r0, [r3, #0]
 80105ba:	f7ff bf9f 	b.w	80104fc <_puts_r>
 80105be:	bf00      	nop
 80105c0:	2000000c 	.word	0x2000000c

080105c4 <__swbuf_r>:
 80105c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105c6:	460e      	mov	r6, r1
 80105c8:	4614      	mov	r4, r2
 80105ca:	4605      	mov	r5, r0
 80105cc:	b118      	cbz	r0, 80105d6 <__swbuf_r+0x12>
 80105ce:	6983      	ldr	r3, [r0, #24]
 80105d0:	b90b      	cbnz	r3, 80105d6 <__swbuf_r+0x12>
 80105d2:	f000 ffed 	bl	80115b0 <__sinit>
 80105d6:	4b21      	ldr	r3, [pc, #132]	; (801065c <__swbuf_r+0x98>)
 80105d8:	429c      	cmp	r4, r3
 80105da:	d12a      	bne.n	8010632 <__swbuf_r+0x6e>
 80105dc:	686c      	ldr	r4, [r5, #4]
 80105de:	69a3      	ldr	r3, [r4, #24]
 80105e0:	60a3      	str	r3, [r4, #8]
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	071a      	lsls	r2, r3, #28
 80105e6:	d52e      	bpl.n	8010646 <__swbuf_r+0x82>
 80105e8:	6923      	ldr	r3, [r4, #16]
 80105ea:	b363      	cbz	r3, 8010646 <__swbuf_r+0x82>
 80105ec:	6923      	ldr	r3, [r4, #16]
 80105ee:	6820      	ldr	r0, [r4, #0]
 80105f0:	1ac0      	subs	r0, r0, r3
 80105f2:	6963      	ldr	r3, [r4, #20]
 80105f4:	b2f6      	uxtb	r6, r6
 80105f6:	4283      	cmp	r3, r0
 80105f8:	4637      	mov	r7, r6
 80105fa:	dc04      	bgt.n	8010606 <__swbuf_r+0x42>
 80105fc:	4621      	mov	r1, r4
 80105fe:	4628      	mov	r0, r5
 8010600:	f000 ff6c 	bl	80114dc <_fflush_r>
 8010604:	bb28      	cbnz	r0, 8010652 <__swbuf_r+0x8e>
 8010606:	68a3      	ldr	r3, [r4, #8]
 8010608:	3b01      	subs	r3, #1
 801060a:	60a3      	str	r3, [r4, #8]
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	1c5a      	adds	r2, r3, #1
 8010610:	6022      	str	r2, [r4, #0]
 8010612:	701e      	strb	r6, [r3, #0]
 8010614:	6963      	ldr	r3, [r4, #20]
 8010616:	3001      	adds	r0, #1
 8010618:	4283      	cmp	r3, r0
 801061a:	d004      	beq.n	8010626 <__swbuf_r+0x62>
 801061c:	89a3      	ldrh	r3, [r4, #12]
 801061e:	07db      	lsls	r3, r3, #31
 8010620:	d519      	bpl.n	8010656 <__swbuf_r+0x92>
 8010622:	2e0a      	cmp	r6, #10
 8010624:	d117      	bne.n	8010656 <__swbuf_r+0x92>
 8010626:	4621      	mov	r1, r4
 8010628:	4628      	mov	r0, r5
 801062a:	f000 ff57 	bl	80114dc <_fflush_r>
 801062e:	b190      	cbz	r0, 8010656 <__swbuf_r+0x92>
 8010630:	e00f      	b.n	8010652 <__swbuf_r+0x8e>
 8010632:	4b0b      	ldr	r3, [pc, #44]	; (8010660 <__swbuf_r+0x9c>)
 8010634:	429c      	cmp	r4, r3
 8010636:	d101      	bne.n	801063c <__swbuf_r+0x78>
 8010638:	68ac      	ldr	r4, [r5, #8]
 801063a:	e7d0      	b.n	80105de <__swbuf_r+0x1a>
 801063c:	4b09      	ldr	r3, [pc, #36]	; (8010664 <__swbuf_r+0xa0>)
 801063e:	429c      	cmp	r4, r3
 8010640:	bf08      	it	eq
 8010642:	68ec      	ldreq	r4, [r5, #12]
 8010644:	e7cb      	b.n	80105de <__swbuf_r+0x1a>
 8010646:	4621      	mov	r1, r4
 8010648:	4628      	mov	r0, r5
 801064a:	f000 f80d 	bl	8010668 <__swsetup_r>
 801064e:	2800      	cmp	r0, #0
 8010650:	d0cc      	beq.n	80105ec <__swbuf_r+0x28>
 8010652:	f04f 37ff 	mov.w	r7, #4294967295
 8010656:	4638      	mov	r0, r7
 8010658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801065a:	bf00      	nop
 801065c:	080123e8 	.word	0x080123e8
 8010660:	08012408 	.word	0x08012408
 8010664:	080123c8 	.word	0x080123c8

08010668 <__swsetup_r>:
 8010668:	4b32      	ldr	r3, [pc, #200]	; (8010734 <__swsetup_r+0xcc>)
 801066a:	b570      	push	{r4, r5, r6, lr}
 801066c:	681d      	ldr	r5, [r3, #0]
 801066e:	4606      	mov	r6, r0
 8010670:	460c      	mov	r4, r1
 8010672:	b125      	cbz	r5, 801067e <__swsetup_r+0x16>
 8010674:	69ab      	ldr	r3, [r5, #24]
 8010676:	b913      	cbnz	r3, 801067e <__swsetup_r+0x16>
 8010678:	4628      	mov	r0, r5
 801067a:	f000 ff99 	bl	80115b0 <__sinit>
 801067e:	4b2e      	ldr	r3, [pc, #184]	; (8010738 <__swsetup_r+0xd0>)
 8010680:	429c      	cmp	r4, r3
 8010682:	d10f      	bne.n	80106a4 <__swsetup_r+0x3c>
 8010684:	686c      	ldr	r4, [r5, #4]
 8010686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801068a:	b29a      	uxth	r2, r3
 801068c:	0715      	lsls	r5, r2, #28
 801068e:	d42c      	bmi.n	80106ea <__swsetup_r+0x82>
 8010690:	06d0      	lsls	r0, r2, #27
 8010692:	d411      	bmi.n	80106b8 <__swsetup_r+0x50>
 8010694:	2209      	movs	r2, #9
 8010696:	6032      	str	r2, [r6, #0]
 8010698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801069c:	81a3      	strh	r3, [r4, #12]
 801069e:	f04f 30ff 	mov.w	r0, #4294967295
 80106a2:	e03e      	b.n	8010722 <__swsetup_r+0xba>
 80106a4:	4b25      	ldr	r3, [pc, #148]	; (801073c <__swsetup_r+0xd4>)
 80106a6:	429c      	cmp	r4, r3
 80106a8:	d101      	bne.n	80106ae <__swsetup_r+0x46>
 80106aa:	68ac      	ldr	r4, [r5, #8]
 80106ac:	e7eb      	b.n	8010686 <__swsetup_r+0x1e>
 80106ae:	4b24      	ldr	r3, [pc, #144]	; (8010740 <__swsetup_r+0xd8>)
 80106b0:	429c      	cmp	r4, r3
 80106b2:	bf08      	it	eq
 80106b4:	68ec      	ldreq	r4, [r5, #12]
 80106b6:	e7e6      	b.n	8010686 <__swsetup_r+0x1e>
 80106b8:	0751      	lsls	r1, r2, #29
 80106ba:	d512      	bpl.n	80106e2 <__swsetup_r+0x7a>
 80106bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106be:	b141      	cbz	r1, 80106d2 <__swsetup_r+0x6a>
 80106c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106c4:	4299      	cmp	r1, r3
 80106c6:	d002      	beq.n	80106ce <__swsetup_r+0x66>
 80106c8:	4630      	mov	r0, r6
 80106ca:	f001 fb5f 	bl	8011d8c <_free_r>
 80106ce:	2300      	movs	r3, #0
 80106d0:	6363      	str	r3, [r4, #52]	; 0x34
 80106d2:	89a3      	ldrh	r3, [r4, #12]
 80106d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80106d8:	81a3      	strh	r3, [r4, #12]
 80106da:	2300      	movs	r3, #0
 80106dc:	6063      	str	r3, [r4, #4]
 80106de:	6923      	ldr	r3, [r4, #16]
 80106e0:	6023      	str	r3, [r4, #0]
 80106e2:	89a3      	ldrh	r3, [r4, #12]
 80106e4:	f043 0308 	orr.w	r3, r3, #8
 80106e8:	81a3      	strh	r3, [r4, #12]
 80106ea:	6923      	ldr	r3, [r4, #16]
 80106ec:	b94b      	cbnz	r3, 8010702 <__swsetup_r+0x9a>
 80106ee:	89a3      	ldrh	r3, [r4, #12]
 80106f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80106f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106f8:	d003      	beq.n	8010702 <__swsetup_r+0x9a>
 80106fa:	4621      	mov	r1, r4
 80106fc:	4630      	mov	r0, r6
 80106fe:	f001 f813 	bl	8011728 <__smakebuf_r>
 8010702:	89a2      	ldrh	r2, [r4, #12]
 8010704:	f012 0301 	ands.w	r3, r2, #1
 8010708:	d00c      	beq.n	8010724 <__swsetup_r+0xbc>
 801070a:	2300      	movs	r3, #0
 801070c:	60a3      	str	r3, [r4, #8]
 801070e:	6963      	ldr	r3, [r4, #20]
 8010710:	425b      	negs	r3, r3
 8010712:	61a3      	str	r3, [r4, #24]
 8010714:	6923      	ldr	r3, [r4, #16]
 8010716:	b953      	cbnz	r3, 801072e <__swsetup_r+0xc6>
 8010718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801071c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010720:	d1ba      	bne.n	8010698 <__swsetup_r+0x30>
 8010722:	bd70      	pop	{r4, r5, r6, pc}
 8010724:	0792      	lsls	r2, r2, #30
 8010726:	bf58      	it	pl
 8010728:	6963      	ldrpl	r3, [r4, #20]
 801072a:	60a3      	str	r3, [r4, #8]
 801072c:	e7f2      	b.n	8010714 <__swsetup_r+0xac>
 801072e:	2000      	movs	r0, #0
 8010730:	e7f7      	b.n	8010722 <__swsetup_r+0xba>
 8010732:	bf00      	nop
 8010734:	2000000c 	.word	0x2000000c
 8010738:	080123e8 	.word	0x080123e8
 801073c:	08012408 	.word	0x08012408
 8010740:	080123c8 	.word	0x080123c8

08010744 <quorem>:
 8010744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010748:	6903      	ldr	r3, [r0, #16]
 801074a:	690c      	ldr	r4, [r1, #16]
 801074c:	42a3      	cmp	r3, r4
 801074e:	4680      	mov	r8, r0
 8010750:	f2c0 8082 	blt.w	8010858 <quorem+0x114>
 8010754:	3c01      	subs	r4, #1
 8010756:	f101 0714 	add.w	r7, r1, #20
 801075a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801075e:	f100 0614 	add.w	r6, r0, #20
 8010762:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010766:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801076a:	eb06 030c 	add.w	r3, r6, ip
 801076e:	3501      	adds	r5, #1
 8010770:	eb07 090c 	add.w	r9, r7, ip
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	fbb0 f5f5 	udiv	r5, r0, r5
 801077a:	b395      	cbz	r5, 80107e2 <quorem+0x9e>
 801077c:	f04f 0a00 	mov.w	sl, #0
 8010780:	4638      	mov	r0, r7
 8010782:	46b6      	mov	lr, r6
 8010784:	46d3      	mov	fp, sl
 8010786:	f850 2b04 	ldr.w	r2, [r0], #4
 801078a:	b293      	uxth	r3, r2
 801078c:	fb05 a303 	mla	r3, r5, r3, sl
 8010790:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010794:	b29b      	uxth	r3, r3
 8010796:	ebab 0303 	sub.w	r3, fp, r3
 801079a:	0c12      	lsrs	r2, r2, #16
 801079c:	f8de b000 	ldr.w	fp, [lr]
 80107a0:	fb05 a202 	mla	r2, r5, r2, sl
 80107a4:	fa13 f38b 	uxtah	r3, r3, fp
 80107a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80107ac:	fa1f fb82 	uxth.w	fp, r2
 80107b0:	f8de 2000 	ldr.w	r2, [lr]
 80107b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80107b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107bc:	b29b      	uxth	r3, r3
 80107be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107c2:	4581      	cmp	r9, r0
 80107c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80107c8:	f84e 3b04 	str.w	r3, [lr], #4
 80107cc:	d2db      	bcs.n	8010786 <quorem+0x42>
 80107ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80107d2:	b933      	cbnz	r3, 80107e2 <quorem+0x9e>
 80107d4:	9b01      	ldr	r3, [sp, #4]
 80107d6:	3b04      	subs	r3, #4
 80107d8:	429e      	cmp	r6, r3
 80107da:	461a      	mov	r2, r3
 80107dc:	d330      	bcc.n	8010840 <quorem+0xfc>
 80107de:	f8c8 4010 	str.w	r4, [r8, #16]
 80107e2:	4640      	mov	r0, r8
 80107e4:	f001 f9fe 	bl	8011be4 <__mcmp>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	db25      	blt.n	8010838 <quorem+0xf4>
 80107ec:	3501      	adds	r5, #1
 80107ee:	4630      	mov	r0, r6
 80107f0:	f04f 0c00 	mov.w	ip, #0
 80107f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80107f8:	f8d0 e000 	ldr.w	lr, [r0]
 80107fc:	b293      	uxth	r3, r2
 80107fe:	ebac 0303 	sub.w	r3, ip, r3
 8010802:	0c12      	lsrs	r2, r2, #16
 8010804:	fa13 f38e 	uxtah	r3, r3, lr
 8010808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801080c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010810:	b29b      	uxth	r3, r3
 8010812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010816:	45b9      	cmp	r9, r7
 8010818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801081c:	f840 3b04 	str.w	r3, [r0], #4
 8010820:	d2e8      	bcs.n	80107f4 <quorem+0xb0>
 8010822:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010826:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801082a:	b92a      	cbnz	r2, 8010838 <quorem+0xf4>
 801082c:	3b04      	subs	r3, #4
 801082e:	429e      	cmp	r6, r3
 8010830:	461a      	mov	r2, r3
 8010832:	d30b      	bcc.n	801084c <quorem+0x108>
 8010834:	f8c8 4010 	str.w	r4, [r8, #16]
 8010838:	4628      	mov	r0, r5
 801083a:	b003      	add	sp, #12
 801083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010840:	6812      	ldr	r2, [r2, #0]
 8010842:	3b04      	subs	r3, #4
 8010844:	2a00      	cmp	r2, #0
 8010846:	d1ca      	bne.n	80107de <quorem+0x9a>
 8010848:	3c01      	subs	r4, #1
 801084a:	e7c5      	b.n	80107d8 <quorem+0x94>
 801084c:	6812      	ldr	r2, [r2, #0]
 801084e:	3b04      	subs	r3, #4
 8010850:	2a00      	cmp	r2, #0
 8010852:	d1ef      	bne.n	8010834 <quorem+0xf0>
 8010854:	3c01      	subs	r4, #1
 8010856:	e7ea      	b.n	801082e <quorem+0xea>
 8010858:	2000      	movs	r0, #0
 801085a:	e7ee      	b.n	801083a <quorem+0xf6>
 801085c:	0000      	movs	r0, r0
	...

08010860 <_dtoa_r>:
 8010860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010864:	ec57 6b10 	vmov	r6, r7, d0
 8010868:	b097      	sub	sp, #92	; 0x5c
 801086a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801086c:	9106      	str	r1, [sp, #24]
 801086e:	4604      	mov	r4, r0
 8010870:	920b      	str	r2, [sp, #44]	; 0x2c
 8010872:	9312      	str	r3, [sp, #72]	; 0x48
 8010874:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010878:	e9cd 6700 	strd	r6, r7, [sp]
 801087c:	b93d      	cbnz	r5, 801088e <_dtoa_r+0x2e>
 801087e:	2010      	movs	r0, #16
 8010880:	f000 ff92 	bl	80117a8 <malloc>
 8010884:	6260      	str	r0, [r4, #36]	; 0x24
 8010886:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801088a:	6005      	str	r5, [r0, #0]
 801088c:	60c5      	str	r5, [r0, #12]
 801088e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010890:	6819      	ldr	r1, [r3, #0]
 8010892:	b151      	cbz	r1, 80108aa <_dtoa_r+0x4a>
 8010894:	685a      	ldr	r2, [r3, #4]
 8010896:	604a      	str	r2, [r1, #4]
 8010898:	2301      	movs	r3, #1
 801089a:	4093      	lsls	r3, r2
 801089c:	608b      	str	r3, [r1, #8]
 801089e:	4620      	mov	r0, r4
 80108a0:	f000 ffbe 	bl	8011820 <_Bfree>
 80108a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108a6:	2200      	movs	r2, #0
 80108a8:	601a      	str	r2, [r3, #0]
 80108aa:	1e3b      	subs	r3, r7, #0
 80108ac:	bfbb      	ittet	lt
 80108ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80108b2:	9301      	strlt	r3, [sp, #4]
 80108b4:	2300      	movge	r3, #0
 80108b6:	2201      	movlt	r2, #1
 80108b8:	bfac      	ite	ge
 80108ba:	f8c8 3000 	strge.w	r3, [r8]
 80108be:	f8c8 2000 	strlt.w	r2, [r8]
 80108c2:	4baf      	ldr	r3, [pc, #700]	; (8010b80 <_dtoa_r+0x320>)
 80108c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80108c8:	ea33 0308 	bics.w	r3, r3, r8
 80108cc:	d114      	bne.n	80108f8 <_dtoa_r+0x98>
 80108ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80108d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80108d4:	6013      	str	r3, [r2, #0]
 80108d6:	9b00      	ldr	r3, [sp, #0]
 80108d8:	b923      	cbnz	r3, 80108e4 <_dtoa_r+0x84>
 80108da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80108de:	2800      	cmp	r0, #0
 80108e0:	f000 8542 	beq.w	8011368 <_dtoa_r+0xb08>
 80108e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010b94 <_dtoa_r+0x334>
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f000 8544 	beq.w	8011378 <_dtoa_r+0xb18>
 80108f0:	f10b 0303 	add.w	r3, fp, #3
 80108f4:	f000 bd3e 	b.w	8011374 <_dtoa_r+0xb14>
 80108f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80108fc:	2200      	movs	r2, #0
 80108fe:	2300      	movs	r3, #0
 8010900:	4630      	mov	r0, r6
 8010902:	4639      	mov	r1, r7
 8010904:	f7f8 f818 	bl	8008938 <__aeabi_dcmpeq>
 8010908:	4681      	mov	r9, r0
 801090a:	b168      	cbz	r0, 8010928 <_dtoa_r+0xc8>
 801090c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801090e:	2301      	movs	r3, #1
 8010910:	6013      	str	r3, [r2, #0]
 8010912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 8524 	beq.w	8011362 <_dtoa_r+0xb02>
 801091a:	4b9a      	ldr	r3, [pc, #616]	; (8010b84 <_dtoa_r+0x324>)
 801091c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801091e:	f103 3bff 	add.w	fp, r3, #4294967295
 8010922:	6013      	str	r3, [r2, #0]
 8010924:	f000 bd28 	b.w	8011378 <_dtoa_r+0xb18>
 8010928:	aa14      	add	r2, sp, #80	; 0x50
 801092a:	a915      	add	r1, sp, #84	; 0x54
 801092c:	ec47 6b10 	vmov	d0, r6, r7
 8010930:	4620      	mov	r0, r4
 8010932:	f001 f9ce 	bl	8011cd2 <__d2b>
 8010936:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801093a:	9004      	str	r0, [sp, #16]
 801093c:	2d00      	cmp	r5, #0
 801093e:	d07c      	beq.n	8010a3a <_dtoa_r+0x1da>
 8010940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010944:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010948:	46b2      	mov	sl, r6
 801094a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801094e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010952:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010956:	2200      	movs	r2, #0
 8010958:	4b8b      	ldr	r3, [pc, #556]	; (8010b88 <_dtoa_r+0x328>)
 801095a:	4650      	mov	r0, sl
 801095c:	4659      	mov	r1, fp
 801095e:	f7f7 fbcb 	bl	80080f8 <__aeabi_dsub>
 8010962:	a381      	add	r3, pc, #516	; (adr r3, 8010b68 <_dtoa_r+0x308>)
 8010964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010968:	f7f7 fd7e 	bl	8008468 <__aeabi_dmul>
 801096c:	a380      	add	r3, pc, #512	; (adr r3, 8010b70 <_dtoa_r+0x310>)
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	f7f7 fbc3 	bl	80080fc <__adddf3>
 8010976:	4606      	mov	r6, r0
 8010978:	4628      	mov	r0, r5
 801097a:	460f      	mov	r7, r1
 801097c:	f7f7 fd0a 	bl	8008394 <__aeabi_i2d>
 8010980:	a37d      	add	r3, pc, #500	; (adr r3, 8010b78 <_dtoa_r+0x318>)
 8010982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010986:	f7f7 fd6f 	bl	8008468 <__aeabi_dmul>
 801098a:	4602      	mov	r2, r0
 801098c:	460b      	mov	r3, r1
 801098e:	4630      	mov	r0, r6
 8010990:	4639      	mov	r1, r7
 8010992:	f7f7 fbb3 	bl	80080fc <__adddf3>
 8010996:	4606      	mov	r6, r0
 8010998:	460f      	mov	r7, r1
 801099a:	f7f8 f815 	bl	80089c8 <__aeabi_d2iz>
 801099e:	2200      	movs	r2, #0
 80109a0:	4682      	mov	sl, r0
 80109a2:	2300      	movs	r3, #0
 80109a4:	4630      	mov	r0, r6
 80109a6:	4639      	mov	r1, r7
 80109a8:	f7f7 ffd0 	bl	800894c <__aeabi_dcmplt>
 80109ac:	b148      	cbz	r0, 80109c2 <_dtoa_r+0x162>
 80109ae:	4650      	mov	r0, sl
 80109b0:	f7f7 fcf0 	bl	8008394 <__aeabi_i2d>
 80109b4:	4632      	mov	r2, r6
 80109b6:	463b      	mov	r3, r7
 80109b8:	f7f7 ffbe 	bl	8008938 <__aeabi_dcmpeq>
 80109bc:	b908      	cbnz	r0, 80109c2 <_dtoa_r+0x162>
 80109be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109c2:	f1ba 0f16 	cmp.w	sl, #22
 80109c6:	d859      	bhi.n	8010a7c <_dtoa_r+0x21c>
 80109c8:	4970      	ldr	r1, [pc, #448]	; (8010b8c <_dtoa_r+0x32c>)
 80109ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80109ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109d6:	f7f7 ffd7 	bl	8008988 <__aeabi_dcmpgt>
 80109da:	2800      	cmp	r0, #0
 80109dc:	d050      	beq.n	8010a80 <_dtoa_r+0x220>
 80109de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109e2:	2300      	movs	r3, #0
 80109e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80109e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109e8:	1b5d      	subs	r5, r3, r5
 80109ea:	f1b5 0801 	subs.w	r8, r5, #1
 80109ee:	bf49      	itett	mi
 80109f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80109f4:	2300      	movpl	r3, #0
 80109f6:	9305      	strmi	r3, [sp, #20]
 80109f8:	f04f 0800 	movmi.w	r8, #0
 80109fc:	bf58      	it	pl
 80109fe:	9305      	strpl	r3, [sp, #20]
 8010a00:	f1ba 0f00 	cmp.w	sl, #0
 8010a04:	db3e      	blt.n	8010a84 <_dtoa_r+0x224>
 8010a06:	2300      	movs	r3, #0
 8010a08:	44d0      	add	r8, sl
 8010a0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010a0e:	9307      	str	r3, [sp, #28]
 8010a10:	9b06      	ldr	r3, [sp, #24]
 8010a12:	2b09      	cmp	r3, #9
 8010a14:	f200 8090 	bhi.w	8010b38 <_dtoa_r+0x2d8>
 8010a18:	2b05      	cmp	r3, #5
 8010a1a:	bfc4      	itt	gt
 8010a1c:	3b04      	subgt	r3, #4
 8010a1e:	9306      	strgt	r3, [sp, #24]
 8010a20:	9b06      	ldr	r3, [sp, #24]
 8010a22:	f1a3 0302 	sub.w	r3, r3, #2
 8010a26:	bfcc      	ite	gt
 8010a28:	2500      	movgt	r5, #0
 8010a2a:	2501      	movle	r5, #1
 8010a2c:	2b03      	cmp	r3, #3
 8010a2e:	f200 808f 	bhi.w	8010b50 <_dtoa_r+0x2f0>
 8010a32:	e8df f003 	tbb	[pc, r3]
 8010a36:	7f7d      	.short	0x7f7d
 8010a38:	7131      	.short	0x7131
 8010a3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010a3e:	441d      	add	r5, r3
 8010a40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010a44:	2820      	cmp	r0, #32
 8010a46:	dd13      	ble.n	8010a70 <_dtoa_r+0x210>
 8010a48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010a4c:	9b00      	ldr	r3, [sp, #0]
 8010a4e:	fa08 f800 	lsl.w	r8, r8, r0
 8010a52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010a56:	fa23 f000 	lsr.w	r0, r3, r0
 8010a5a:	ea48 0000 	orr.w	r0, r8, r0
 8010a5e:	f7f7 fc89 	bl	8008374 <__aeabi_ui2d>
 8010a62:	2301      	movs	r3, #1
 8010a64:	4682      	mov	sl, r0
 8010a66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010a6a:	3d01      	subs	r5, #1
 8010a6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8010a6e:	e772      	b.n	8010956 <_dtoa_r+0xf6>
 8010a70:	9b00      	ldr	r3, [sp, #0]
 8010a72:	f1c0 0020 	rsb	r0, r0, #32
 8010a76:	fa03 f000 	lsl.w	r0, r3, r0
 8010a7a:	e7f0      	b.n	8010a5e <_dtoa_r+0x1fe>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e7b1      	b.n	80109e4 <_dtoa_r+0x184>
 8010a80:	900f      	str	r0, [sp, #60]	; 0x3c
 8010a82:	e7b0      	b.n	80109e6 <_dtoa_r+0x186>
 8010a84:	9b05      	ldr	r3, [sp, #20]
 8010a86:	eba3 030a 	sub.w	r3, r3, sl
 8010a8a:	9305      	str	r3, [sp, #20]
 8010a8c:	f1ca 0300 	rsb	r3, sl, #0
 8010a90:	9307      	str	r3, [sp, #28]
 8010a92:	2300      	movs	r3, #0
 8010a94:	930e      	str	r3, [sp, #56]	; 0x38
 8010a96:	e7bb      	b.n	8010a10 <_dtoa_r+0x1b0>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8010a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	dd59      	ble.n	8010b56 <_dtoa_r+0x2f6>
 8010aa2:	9302      	str	r3, [sp, #8]
 8010aa4:	4699      	mov	r9, r3
 8010aa6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	6072      	str	r2, [r6, #4]
 8010aac:	2204      	movs	r2, #4
 8010aae:	f102 0014 	add.w	r0, r2, #20
 8010ab2:	4298      	cmp	r0, r3
 8010ab4:	6871      	ldr	r1, [r6, #4]
 8010ab6:	d953      	bls.n	8010b60 <_dtoa_r+0x300>
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f000 fe7d 	bl	80117b8 <_Balloc>
 8010abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ac0:	6030      	str	r0, [r6, #0]
 8010ac2:	f1b9 0f0e 	cmp.w	r9, #14
 8010ac6:	f8d3 b000 	ldr.w	fp, [r3]
 8010aca:	f200 80e6 	bhi.w	8010c9a <_dtoa_r+0x43a>
 8010ace:	2d00      	cmp	r5, #0
 8010ad0:	f000 80e3 	beq.w	8010c9a <_dtoa_r+0x43a>
 8010ad4:	ed9d 7b00 	vldr	d7, [sp]
 8010ad8:	f1ba 0f00 	cmp.w	sl, #0
 8010adc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010ae0:	dd74      	ble.n	8010bcc <_dtoa_r+0x36c>
 8010ae2:	4a2a      	ldr	r2, [pc, #168]	; (8010b8c <_dtoa_r+0x32c>)
 8010ae4:	f00a 030f 	and.w	r3, sl, #15
 8010ae8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010aec:	ed93 7b00 	vldr	d7, [r3]
 8010af0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010af4:	06f0      	lsls	r0, r6, #27
 8010af6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010afa:	d565      	bpl.n	8010bc8 <_dtoa_r+0x368>
 8010afc:	4b24      	ldr	r3, [pc, #144]	; (8010b90 <_dtoa_r+0x330>)
 8010afe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b06:	f7f7 fdd9 	bl	80086bc <__aeabi_ddiv>
 8010b0a:	e9cd 0100 	strd	r0, r1, [sp]
 8010b0e:	f006 060f 	and.w	r6, r6, #15
 8010b12:	2503      	movs	r5, #3
 8010b14:	4f1e      	ldr	r7, [pc, #120]	; (8010b90 <_dtoa_r+0x330>)
 8010b16:	e04c      	b.n	8010bb2 <_dtoa_r+0x352>
 8010b18:	2301      	movs	r3, #1
 8010b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8010b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b1e:	4453      	add	r3, sl
 8010b20:	f103 0901 	add.w	r9, r3, #1
 8010b24:	9302      	str	r3, [sp, #8]
 8010b26:	464b      	mov	r3, r9
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	bfb8      	it	lt
 8010b2c:	2301      	movlt	r3, #1
 8010b2e:	e7ba      	b.n	8010aa6 <_dtoa_r+0x246>
 8010b30:	2300      	movs	r3, #0
 8010b32:	e7b2      	b.n	8010a9a <_dtoa_r+0x23a>
 8010b34:	2300      	movs	r3, #0
 8010b36:	e7f0      	b.n	8010b1a <_dtoa_r+0x2ba>
 8010b38:	2501      	movs	r5, #1
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	9306      	str	r3, [sp, #24]
 8010b3e:	950a      	str	r5, [sp, #40]	; 0x28
 8010b40:	f04f 33ff 	mov.w	r3, #4294967295
 8010b44:	9302      	str	r3, [sp, #8]
 8010b46:	4699      	mov	r9, r3
 8010b48:	2200      	movs	r2, #0
 8010b4a:	2312      	movs	r3, #18
 8010b4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010b4e:	e7aa      	b.n	8010aa6 <_dtoa_r+0x246>
 8010b50:	2301      	movs	r3, #1
 8010b52:	930a      	str	r3, [sp, #40]	; 0x28
 8010b54:	e7f4      	b.n	8010b40 <_dtoa_r+0x2e0>
 8010b56:	2301      	movs	r3, #1
 8010b58:	9302      	str	r3, [sp, #8]
 8010b5a:	4699      	mov	r9, r3
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	e7f5      	b.n	8010b4c <_dtoa_r+0x2ec>
 8010b60:	3101      	adds	r1, #1
 8010b62:	6071      	str	r1, [r6, #4]
 8010b64:	0052      	lsls	r2, r2, #1
 8010b66:	e7a2      	b.n	8010aae <_dtoa_r+0x24e>
 8010b68:	636f4361 	.word	0x636f4361
 8010b6c:	3fd287a7 	.word	0x3fd287a7
 8010b70:	8b60c8b3 	.word	0x8b60c8b3
 8010b74:	3fc68a28 	.word	0x3fc68a28
 8010b78:	509f79fb 	.word	0x509f79fb
 8010b7c:	3fd34413 	.word	0x3fd34413
 8010b80:	7ff00000 	.word	0x7ff00000
 8010b84:	08012395 	.word	0x08012395
 8010b88:	3ff80000 	.word	0x3ff80000
 8010b8c:	08012450 	.word	0x08012450
 8010b90:	08012428 	.word	0x08012428
 8010b94:	080123c1 	.word	0x080123c1
 8010b98:	07f1      	lsls	r1, r6, #31
 8010b9a:	d508      	bpl.n	8010bae <_dtoa_r+0x34e>
 8010b9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ba4:	f7f7 fc60 	bl	8008468 <__aeabi_dmul>
 8010ba8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010bac:	3501      	adds	r5, #1
 8010bae:	1076      	asrs	r6, r6, #1
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	2e00      	cmp	r6, #0
 8010bb4:	d1f0      	bne.n	8010b98 <_dtoa_r+0x338>
 8010bb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bbe:	f7f7 fd7d 	bl	80086bc <__aeabi_ddiv>
 8010bc2:	e9cd 0100 	strd	r0, r1, [sp]
 8010bc6:	e01a      	b.n	8010bfe <_dtoa_r+0x39e>
 8010bc8:	2502      	movs	r5, #2
 8010bca:	e7a3      	b.n	8010b14 <_dtoa_r+0x2b4>
 8010bcc:	f000 80a0 	beq.w	8010d10 <_dtoa_r+0x4b0>
 8010bd0:	f1ca 0600 	rsb	r6, sl, #0
 8010bd4:	4b9f      	ldr	r3, [pc, #636]	; (8010e54 <_dtoa_r+0x5f4>)
 8010bd6:	4fa0      	ldr	r7, [pc, #640]	; (8010e58 <_dtoa_r+0x5f8>)
 8010bd8:	f006 020f 	and.w	r2, r6, #15
 8010bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010be8:	f7f7 fc3e 	bl	8008468 <__aeabi_dmul>
 8010bec:	e9cd 0100 	strd	r0, r1, [sp]
 8010bf0:	1136      	asrs	r6, r6, #4
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	2502      	movs	r5, #2
 8010bf6:	2e00      	cmp	r6, #0
 8010bf8:	d17f      	bne.n	8010cfa <_dtoa_r+0x49a>
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1e1      	bne.n	8010bc2 <_dtoa_r+0x362>
 8010bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f000 8087 	beq.w	8010d14 <_dtoa_r+0x4b4>
 8010c06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	4b93      	ldr	r3, [pc, #588]	; (8010e5c <_dtoa_r+0x5fc>)
 8010c0e:	4630      	mov	r0, r6
 8010c10:	4639      	mov	r1, r7
 8010c12:	f7f7 fe9b 	bl	800894c <__aeabi_dcmplt>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d07c      	beq.n	8010d14 <_dtoa_r+0x4b4>
 8010c1a:	f1b9 0f00 	cmp.w	r9, #0
 8010c1e:	d079      	beq.n	8010d14 <_dtoa_r+0x4b4>
 8010c20:	9b02      	ldr	r3, [sp, #8]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	dd35      	ble.n	8010c92 <_dtoa_r+0x432>
 8010c26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010c2a:	9308      	str	r3, [sp, #32]
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	2200      	movs	r2, #0
 8010c30:	4b8b      	ldr	r3, [pc, #556]	; (8010e60 <_dtoa_r+0x600>)
 8010c32:	4630      	mov	r0, r6
 8010c34:	f7f7 fc18 	bl	8008468 <__aeabi_dmul>
 8010c38:	e9cd 0100 	strd	r0, r1, [sp]
 8010c3c:	9f02      	ldr	r7, [sp, #8]
 8010c3e:	3501      	adds	r5, #1
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7f7 fba7 	bl	8008394 <__aeabi_i2d>
 8010c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c4a:	f7f7 fc0d 	bl	8008468 <__aeabi_dmul>
 8010c4e:	2200      	movs	r2, #0
 8010c50:	4b84      	ldr	r3, [pc, #528]	; (8010e64 <_dtoa_r+0x604>)
 8010c52:	f7f7 fa53 	bl	80080fc <__adddf3>
 8010c56:	4605      	mov	r5, r0
 8010c58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010c5c:	2f00      	cmp	r7, #0
 8010c5e:	d15d      	bne.n	8010d1c <_dtoa_r+0x4bc>
 8010c60:	2200      	movs	r2, #0
 8010c62:	4b81      	ldr	r3, [pc, #516]	; (8010e68 <_dtoa_r+0x608>)
 8010c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c68:	f7f7 fa46 	bl	80080f8 <__aeabi_dsub>
 8010c6c:	462a      	mov	r2, r5
 8010c6e:	4633      	mov	r3, r6
 8010c70:	e9cd 0100 	strd	r0, r1, [sp]
 8010c74:	f7f7 fe88 	bl	8008988 <__aeabi_dcmpgt>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	f040 8288 	bne.w	801118e <_dtoa_r+0x92e>
 8010c7e:	462a      	mov	r2, r5
 8010c80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c88:	f7f7 fe60 	bl	800894c <__aeabi_dcmplt>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	f040 827c 	bne.w	801118a <_dtoa_r+0x92a>
 8010c92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010c96:	e9cd 2300 	strd	r2, r3, [sp]
 8010c9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f2c0 8150 	blt.w	8010f42 <_dtoa_r+0x6e2>
 8010ca2:	f1ba 0f0e 	cmp.w	sl, #14
 8010ca6:	f300 814c 	bgt.w	8010f42 <_dtoa_r+0x6e2>
 8010caa:	4b6a      	ldr	r3, [pc, #424]	; (8010e54 <_dtoa_r+0x5f4>)
 8010cac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010cb0:	ed93 7b00 	vldr	d7, [r3]
 8010cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cbc:	f280 80d8 	bge.w	8010e70 <_dtoa_r+0x610>
 8010cc0:	f1b9 0f00 	cmp.w	r9, #0
 8010cc4:	f300 80d4 	bgt.w	8010e70 <_dtoa_r+0x610>
 8010cc8:	f040 825e 	bne.w	8011188 <_dtoa_r+0x928>
 8010ccc:	2200      	movs	r2, #0
 8010cce:	4b66      	ldr	r3, [pc, #408]	; (8010e68 <_dtoa_r+0x608>)
 8010cd0:	ec51 0b17 	vmov	r0, r1, d7
 8010cd4:	f7f7 fbc8 	bl	8008468 <__aeabi_dmul>
 8010cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cdc:	f7f7 fe4a 	bl	8008974 <__aeabi_dcmpge>
 8010ce0:	464f      	mov	r7, r9
 8010ce2:	464e      	mov	r6, r9
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	f040 8234 	bne.w	8011152 <_dtoa_r+0x8f2>
 8010cea:	2331      	movs	r3, #49	; 0x31
 8010cec:	f10b 0501 	add.w	r5, fp, #1
 8010cf0:	f88b 3000 	strb.w	r3, [fp]
 8010cf4:	f10a 0a01 	add.w	sl, sl, #1
 8010cf8:	e22f      	b.n	801115a <_dtoa_r+0x8fa>
 8010cfa:	07f2      	lsls	r2, r6, #31
 8010cfc:	d505      	bpl.n	8010d0a <_dtoa_r+0x4aa>
 8010cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d02:	f7f7 fbb1 	bl	8008468 <__aeabi_dmul>
 8010d06:	3501      	adds	r5, #1
 8010d08:	2301      	movs	r3, #1
 8010d0a:	1076      	asrs	r6, r6, #1
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	e772      	b.n	8010bf6 <_dtoa_r+0x396>
 8010d10:	2502      	movs	r5, #2
 8010d12:	e774      	b.n	8010bfe <_dtoa_r+0x39e>
 8010d14:	f8cd a020 	str.w	sl, [sp, #32]
 8010d18:	464f      	mov	r7, r9
 8010d1a:	e791      	b.n	8010c40 <_dtoa_r+0x3e0>
 8010d1c:	4b4d      	ldr	r3, [pc, #308]	; (8010e54 <_dtoa_r+0x5f4>)
 8010d1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010d22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d047      	beq.n	8010dbc <_dtoa_r+0x55c>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	2000      	movs	r0, #0
 8010d32:	494e      	ldr	r1, [pc, #312]	; (8010e6c <_dtoa_r+0x60c>)
 8010d34:	f7f7 fcc2 	bl	80086bc <__aeabi_ddiv>
 8010d38:	462a      	mov	r2, r5
 8010d3a:	4633      	mov	r3, r6
 8010d3c:	f7f7 f9dc 	bl	80080f8 <__aeabi_dsub>
 8010d40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010d44:	465d      	mov	r5, fp
 8010d46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d4a:	f7f7 fe3d 	bl	80089c8 <__aeabi_d2iz>
 8010d4e:	4606      	mov	r6, r0
 8010d50:	f7f7 fb20 	bl	8008394 <__aeabi_i2d>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d5c:	f7f7 f9cc 	bl	80080f8 <__aeabi_dsub>
 8010d60:	3630      	adds	r6, #48	; 0x30
 8010d62:	f805 6b01 	strb.w	r6, [r5], #1
 8010d66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010d6a:	e9cd 0100 	strd	r0, r1, [sp]
 8010d6e:	f7f7 fded 	bl	800894c <__aeabi_dcmplt>
 8010d72:	2800      	cmp	r0, #0
 8010d74:	d163      	bne.n	8010e3e <_dtoa_r+0x5de>
 8010d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d7a:	2000      	movs	r0, #0
 8010d7c:	4937      	ldr	r1, [pc, #220]	; (8010e5c <_dtoa_r+0x5fc>)
 8010d7e:	f7f7 f9bb 	bl	80080f8 <__aeabi_dsub>
 8010d82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010d86:	f7f7 fde1 	bl	800894c <__aeabi_dcmplt>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	f040 80b7 	bne.w	8010efe <_dtoa_r+0x69e>
 8010d90:	eba5 030b 	sub.w	r3, r5, fp
 8010d94:	429f      	cmp	r7, r3
 8010d96:	f77f af7c 	ble.w	8010c92 <_dtoa_r+0x432>
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	4b30      	ldr	r3, [pc, #192]	; (8010e60 <_dtoa_r+0x600>)
 8010d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010da2:	f7f7 fb61 	bl	8008468 <__aeabi_dmul>
 8010da6:	2200      	movs	r2, #0
 8010da8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010dac:	4b2c      	ldr	r3, [pc, #176]	; (8010e60 <_dtoa_r+0x600>)
 8010dae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010db2:	f7f7 fb59 	bl	8008468 <__aeabi_dmul>
 8010db6:	e9cd 0100 	strd	r0, r1, [sp]
 8010dba:	e7c4      	b.n	8010d46 <_dtoa_r+0x4e6>
 8010dbc:	462a      	mov	r2, r5
 8010dbe:	4633      	mov	r3, r6
 8010dc0:	f7f7 fb52 	bl	8008468 <__aeabi_dmul>
 8010dc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010dc8:	eb0b 0507 	add.w	r5, fp, r7
 8010dcc:	465e      	mov	r6, fp
 8010dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dd2:	f7f7 fdf9 	bl	80089c8 <__aeabi_d2iz>
 8010dd6:	4607      	mov	r7, r0
 8010dd8:	f7f7 fadc 	bl	8008394 <__aeabi_i2d>
 8010ddc:	3730      	adds	r7, #48	; 0x30
 8010dde:	4602      	mov	r2, r0
 8010de0:	460b      	mov	r3, r1
 8010de2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010de6:	f7f7 f987 	bl	80080f8 <__aeabi_dsub>
 8010dea:	f806 7b01 	strb.w	r7, [r6], #1
 8010dee:	42ae      	cmp	r6, r5
 8010df0:	e9cd 0100 	strd	r0, r1, [sp]
 8010df4:	f04f 0200 	mov.w	r2, #0
 8010df8:	d126      	bne.n	8010e48 <_dtoa_r+0x5e8>
 8010dfa:	4b1c      	ldr	r3, [pc, #112]	; (8010e6c <_dtoa_r+0x60c>)
 8010dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010e00:	f7f7 f97c 	bl	80080fc <__adddf3>
 8010e04:	4602      	mov	r2, r0
 8010e06:	460b      	mov	r3, r1
 8010e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e0c:	f7f7 fdbc 	bl	8008988 <__aeabi_dcmpgt>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d174      	bne.n	8010efe <_dtoa_r+0x69e>
 8010e14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010e18:	2000      	movs	r0, #0
 8010e1a:	4914      	ldr	r1, [pc, #80]	; (8010e6c <_dtoa_r+0x60c>)
 8010e1c:	f7f7 f96c 	bl	80080f8 <__aeabi_dsub>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e28:	f7f7 fd90 	bl	800894c <__aeabi_dcmplt>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	f43f af30 	beq.w	8010c92 <_dtoa_r+0x432>
 8010e32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e36:	2b30      	cmp	r3, #48	; 0x30
 8010e38:	f105 32ff 	add.w	r2, r5, #4294967295
 8010e3c:	d002      	beq.n	8010e44 <_dtoa_r+0x5e4>
 8010e3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010e42:	e04a      	b.n	8010eda <_dtoa_r+0x67a>
 8010e44:	4615      	mov	r5, r2
 8010e46:	e7f4      	b.n	8010e32 <_dtoa_r+0x5d2>
 8010e48:	4b05      	ldr	r3, [pc, #20]	; (8010e60 <_dtoa_r+0x600>)
 8010e4a:	f7f7 fb0d 	bl	8008468 <__aeabi_dmul>
 8010e4e:	e9cd 0100 	strd	r0, r1, [sp]
 8010e52:	e7bc      	b.n	8010dce <_dtoa_r+0x56e>
 8010e54:	08012450 	.word	0x08012450
 8010e58:	08012428 	.word	0x08012428
 8010e5c:	3ff00000 	.word	0x3ff00000
 8010e60:	40240000 	.word	0x40240000
 8010e64:	401c0000 	.word	0x401c0000
 8010e68:	40140000 	.word	0x40140000
 8010e6c:	3fe00000 	.word	0x3fe00000
 8010e70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010e74:	465d      	mov	r5, fp
 8010e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	4639      	mov	r1, r7
 8010e7e:	f7f7 fc1d 	bl	80086bc <__aeabi_ddiv>
 8010e82:	f7f7 fda1 	bl	80089c8 <__aeabi_d2iz>
 8010e86:	4680      	mov	r8, r0
 8010e88:	f7f7 fa84 	bl	8008394 <__aeabi_i2d>
 8010e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e90:	f7f7 faea 	bl	8008468 <__aeabi_dmul>
 8010e94:	4602      	mov	r2, r0
 8010e96:	460b      	mov	r3, r1
 8010e98:	4630      	mov	r0, r6
 8010e9a:	4639      	mov	r1, r7
 8010e9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010ea0:	f7f7 f92a 	bl	80080f8 <__aeabi_dsub>
 8010ea4:	f805 6b01 	strb.w	r6, [r5], #1
 8010ea8:	eba5 060b 	sub.w	r6, r5, fp
 8010eac:	45b1      	cmp	r9, r6
 8010eae:	4602      	mov	r2, r0
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	d139      	bne.n	8010f28 <_dtoa_r+0x6c8>
 8010eb4:	f7f7 f922 	bl	80080fc <__adddf3>
 8010eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	460f      	mov	r7, r1
 8010ec0:	f7f7 fd62 	bl	8008988 <__aeabi_dcmpgt>
 8010ec4:	b9c8      	cbnz	r0, 8010efa <_dtoa_r+0x69a>
 8010ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010eca:	4630      	mov	r0, r6
 8010ecc:	4639      	mov	r1, r7
 8010ece:	f7f7 fd33 	bl	8008938 <__aeabi_dcmpeq>
 8010ed2:	b110      	cbz	r0, 8010eda <_dtoa_r+0x67a>
 8010ed4:	f018 0f01 	tst.w	r8, #1
 8010ed8:	d10f      	bne.n	8010efa <_dtoa_r+0x69a>
 8010eda:	9904      	ldr	r1, [sp, #16]
 8010edc:	4620      	mov	r0, r4
 8010ede:	f000 fc9f 	bl	8011820 <_Bfree>
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ee6:	702b      	strb	r3, [r5, #0]
 8010ee8:	f10a 0301 	add.w	r3, sl, #1
 8010eec:	6013      	str	r3, [r2, #0]
 8010eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f000 8241 	beq.w	8011378 <_dtoa_r+0xb18>
 8010ef6:	601d      	str	r5, [r3, #0]
 8010ef8:	e23e      	b.n	8011378 <_dtoa_r+0xb18>
 8010efa:	f8cd a020 	str.w	sl, [sp, #32]
 8010efe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010f02:	2a39      	cmp	r2, #57	; 0x39
 8010f04:	f105 33ff 	add.w	r3, r5, #4294967295
 8010f08:	d108      	bne.n	8010f1c <_dtoa_r+0x6bc>
 8010f0a:	459b      	cmp	fp, r3
 8010f0c:	d10a      	bne.n	8010f24 <_dtoa_r+0x6c4>
 8010f0e:	9b08      	ldr	r3, [sp, #32]
 8010f10:	3301      	adds	r3, #1
 8010f12:	9308      	str	r3, [sp, #32]
 8010f14:	2330      	movs	r3, #48	; 0x30
 8010f16:	f88b 3000 	strb.w	r3, [fp]
 8010f1a:	465b      	mov	r3, fp
 8010f1c:	781a      	ldrb	r2, [r3, #0]
 8010f1e:	3201      	adds	r2, #1
 8010f20:	701a      	strb	r2, [r3, #0]
 8010f22:	e78c      	b.n	8010e3e <_dtoa_r+0x5de>
 8010f24:	461d      	mov	r5, r3
 8010f26:	e7ea      	b.n	8010efe <_dtoa_r+0x69e>
 8010f28:	2200      	movs	r2, #0
 8010f2a:	4b9b      	ldr	r3, [pc, #620]	; (8011198 <_dtoa_r+0x938>)
 8010f2c:	f7f7 fa9c 	bl	8008468 <__aeabi_dmul>
 8010f30:	2200      	movs	r2, #0
 8010f32:	2300      	movs	r3, #0
 8010f34:	4606      	mov	r6, r0
 8010f36:	460f      	mov	r7, r1
 8010f38:	f7f7 fcfe 	bl	8008938 <__aeabi_dcmpeq>
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	d09a      	beq.n	8010e76 <_dtoa_r+0x616>
 8010f40:	e7cb      	b.n	8010eda <_dtoa_r+0x67a>
 8010f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f44:	2a00      	cmp	r2, #0
 8010f46:	f000 808b 	beq.w	8011060 <_dtoa_r+0x800>
 8010f4a:	9a06      	ldr	r2, [sp, #24]
 8010f4c:	2a01      	cmp	r2, #1
 8010f4e:	dc6e      	bgt.n	801102e <_dtoa_r+0x7ce>
 8010f50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010f52:	2a00      	cmp	r2, #0
 8010f54:	d067      	beq.n	8011026 <_dtoa_r+0x7c6>
 8010f56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f5a:	9f07      	ldr	r7, [sp, #28]
 8010f5c:	9d05      	ldr	r5, [sp, #20]
 8010f5e:	9a05      	ldr	r2, [sp, #20]
 8010f60:	2101      	movs	r1, #1
 8010f62:	441a      	add	r2, r3
 8010f64:	4620      	mov	r0, r4
 8010f66:	9205      	str	r2, [sp, #20]
 8010f68:	4498      	add	r8, r3
 8010f6a:	f000 fcf9 	bl	8011960 <__i2b>
 8010f6e:	4606      	mov	r6, r0
 8010f70:	2d00      	cmp	r5, #0
 8010f72:	dd0c      	ble.n	8010f8e <_dtoa_r+0x72e>
 8010f74:	f1b8 0f00 	cmp.w	r8, #0
 8010f78:	dd09      	ble.n	8010f8e <_dtoa_r+0x72e>
 8010f7a:	4545      	cmp	r5, r8
 8010f7c:	9a05      	ldr	r2, [sp, #20]
 8010f7e:	462b      	mov	r3, r5
 8010f80:	bfa8      	it	ge
 8010f82:	4643      	movge	r3, r8
 8010f84:	1ad2      	subs	r2, r2, r3
 8010f86:	9205      	str	r2, [sp, #20]
 8010f88:	1aed      	subs	r5, r5, r3
 8010f8a:	eba8 0803 	sub.w	r8, r8, r3
 8010f8e:	9b07      	ldr	r3, [sp, #28]
 8010f90:	b1eb      	cbz	r3, 8010fce <_dtoa_r+0x76e>
 8010f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d067      	beq.n	8011068 <_dtoa_r+0x808>
 8010f98:	b18f      	cbz	r7, 8010fbe <_dtoa_r+0x75e>
 8010f9a:	4631      	mov	r1, r6
 8010f9c:	463a      	mov	r2, r7
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f000 fd7e 	bl	8011aa0 <__pow5mult>
 8010fa4:	9a04      	ldr	r2, [sp, #16]
 8010fa6:	4601      	mov	r1, r0
 8010fa8:	4606      	mov	r6, r0
 8010faa:	4620      	mov	r0, r4
 8010fac:	f000 fce1 	bl	8011972 <__multiply>
 8010fb0:	9904      	ldr	r1, [sp, #16]
 8010fb2:	9008      	str	r0, [sp, #32]
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f000 fc33 	bl	8011820 <_Bfree>
 8010fba:	9b08      	ldr	r3, [sp, #32]
 8010fbc:	9304      	str	r3, [sp, #16]
 8010fbe:	9b07      	ldr	r3, [sp, #28]
 8010fc0:	1bda      	subs	r2, r3, r7
 8010fc2:	d004      	beq.n	8010fce <_dtoa_r+0x76e>
 8010fc4:	9904      	ldr	r1, [sp, #16]
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f000 fd6a 	bl	8011aa0 <__pow5mult>
 8010fcc:	9004      	str	r0, [sp, #16]
 8010fce:	2101      	movs	r1, #1
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f000 fcc5 	bl	8011960 <__i2b>
 8010fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fd8:	4607      	mov	r7, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 81d0 	beq.w	8011380 <_dtoa_r+0xb20>
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	4601      	mov	r1, r0
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	f000 fd5b 	bl	8011aa0 <__pow5mult>
 8010fea:	9b06      	ldr	r3, [sp, #24]
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	4607      	mov	r7, r0
 8010ff0:	dc40      	bgt.n	8011074 <_dtoa_r+0x814>
 8010ff2:	9b00      	ldr	r3, [sp, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d139      	bne.n	801106c <_dtoa_r+0x80c>
 8010ff8:	9b01      	ldr	r3, [sp, #4]
 8010ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d136      	bne.n	8011070 <_dtoa_r+0x810>
 8011002:	9b01      	ldr	r3, [sp, #4]
 8011004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011008:	0d1b      	lsrs	r3, r3, #20
 801100a:	051b      	lsls	r3, r3, #20
 801100c:	b12b      	cbz	r3, 801101a <_dtoa_r+0x7ba>
 801100e:	9b05      	ldr	r3, [sp, #20]
 8011010:	3301      	adds	r3, #1
 8011012:	9305      	str	r3, [sp, #20]
 8011014:	f108 0801 	add.w	r8, r8, #1
 8011018:	2301      	movs	r3, #1
 801101a:	9307      	str	r3, [sp, #28]
 801101c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801101e:	2b00      	cmp	r3, #0
 8011020:	d12a      	bne.n	8011078 <_dtoa_r+0x818>
 8011022:	2001      	movs	r0, #1
 8011024:	e030      	b.n	8011088 <_dtoa_r+0x828>
 8011026:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011028:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801102c:	e795      	b.n	8010f5a <_dtoa_r+0x6fa>
 801102e:	9b07      	ldr	r3, [sp, #28]
 8011030:	f109 37ff 	add.w	r7, r9, #4294967295
 8011034:	42bb      	cmp	r3, r7
 8011036:	bfbf      	itttt	lt
 8011038:	9b07      	ldrlt	r3, [sp, #28]
 801103a:	9707      	strlt	r7, [sp, #28]
 801103c:	1afa      	sublt	r2, r7, r3
 801103e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011040:	bfbb      	ittet	lt
 8011042:	189b      	addlt	r3, r3, r2
 8011044:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011046:	1bdf      	subge	r7, r3, r7
 8011048:	2700      	movlt	r7, #0
 801104a:	f1b9 0f00 	cmp.w	r9, #0
 801104e:	bfb5      	itete	lt
 8011050:	9b05      	ldrlt	r3, [sp, #20]
 8011052:	9d05      	ldrge	r5, [sp, #20]
 8011054:	eba3 0509 	sublt.w	r5, r3, r9
 8011058:	464b      	movge	r3, r9
 801105a:	bfb8      	it	lt
 801105c:	2300      	movlt	r3, #0
 801105e:	e77e      	b.n	8010f5e <_dtoa_r+0x6fe>
 8011060:	9f07      	ldr	r7, [sp, #28]
 8011062:	9d05      	ldr	r5, [sp, #20]
 8011064:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011066:	e783      	b.n	8010f70 <_dtoa_r+0x710>
 8011068:	9a07      	ldr	r2, [sp, #28]
 801106a:	e7ab      	b.n	8010fc4 <_dtoa_r+0x764>
 801106c:	2300      	movs	r3, #0
 801106e:	e7d4      	b.n	801101a <_dtoa_r+0x7ba>
 8011070:	9b00      	ldr	r3, [sp, #0]
 8011072:	e7d2      	b.n	801101a <_dtoa_r+0x7ba>
 8011074:	2300      	movs	r3, #0
 8011076:	9307      	str	r3, [sp, #28]
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801107e:	6918      	ldr	r0, [r3, #16]
 8011080:	f000 fc20 	bl	80118c4 <__hi0bits>
 8011084:	f1c0 0020 	rsb	r0, r0, #32
 8011088:	4440      	add	r0, r8
 801108a:	f010 001f 	ands.w	r0, r0, #31
 801108e:	d047      	beq.n	8011120 <_dtoa_r+0x8c0>
 8011090:	f1c0 0320 	rsb	r3, r0, #32
 8011094:	2b04      	cmp	r3, #4
 8011096:	dd3b      	ble.n	8011110 <_dtoa_r+0x8b0>
 8011098:	9b05      	ldr	r3, [sp, #20]
 801109a:	f1c0 001c 	rsb	r0, r0, #28
 801109e:	4403      	add	r3, r0
 80110a0:	9305      	str	r3, [sp, #20]
 80110a2:	4405      	add	r5, r0
 80110a4:	4480      	add	r8, r0
 80110a6:	9b05      	ldr	r3, [sp, #20]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	dd05      	ble.n	80110b8 <_dtoa_r+0x858>
 80110ac:	461a      	mov	r2, r3
 80110ae:	9904      	ldr	r1, [sp, #16]
 80110b0:	4620      	mov	r0, r4
 80110b2:	f000 fd43 	bl	8011b3c <__lshift>
 80110b6:	9004      	str	r0, [sp, #16]
 80110b8:	f1b8 0f00 	cmp.w	r8, #0
 80110bc:	dd05      	ble.n	80110ca <_dtoa_r+0x86a>
 80110be:	4639      	mov	r1, r7
 80110c0:	4642      	mov	r2, r8
 80110c2:	4620      	mov	r0, r4
 80110c4:	f000 fd3a 	bl	8011b3c <__lshift>
 80110c8:	4607      	mov	r7, r0
 80110ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110cc:	b353      	cbz	r3, 8011124 <_dtoa_r+0x8c4>
 80110ce:	4639      	mov	r1, r7
 80110d0:	9804      	ldr	r0, [sp, #16]
 80110d2:	f000 fd87 	bl	8011be4 <__mcmp>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	da24      	bge.n	8011124 <_dtoa_r+0x8c4>
 80110da:	2300      	movs	r3, #0
 80110dc:	220a      	movs	r2, #10
 80110de:	9904      	ldr	r1, [sp, #16]
 80110e0:	4620      	mov	r0, r4
 80110e2:	f000 fbb4 	bl	801184e <__multadd>
 80110e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e8:	9004      	str	r0, [sp, #16]
 80110ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f000 814d 	beq.w	801138e <_dtoa_r+0xb2e>
 80110f4:	2300      	movs	r3, #0
 80110f6:	4631      	mov	r1, r6
 80110f8:	220a      	movs	r2, #10
 80110fa:	4620      	mov	r0, r4
 80110fc:	f000 fba7 	bl	801184e <__multadd>
 8011100:	9b02      	ldr	r3, [sp, #8]
 8011102:	2b00      	cmp	r3, #0
 8011104:	4606      	mov	r6, r0
 8011106:	dc4f      	bgt.n	80111a8 <_dtoa_r+0x948>
 8011108:	9b06      	ldr	r3, [sp, #24]
 801110a:	2b02      	cmp	r3, #2
 801110c:	dd4c      	ble.n	80111a8 <_dtoa_r+0x948>
 801110e:	e011      	b.n	8011134 <_dtoa_r+0x8d4>
 8011110:	d0c9      	beq.n	80110a6 <_dtoa_r+0x846>
 8011112:	9a05      	ldr	r2, [sp, #20]
 8011114:	331c      	adds	r3, #28
 8011116:	441a      	add	r2, r3
 8011118:	9205      	str	r2, [sp, #20]
 801111a:	441d      	add	r5, r3
 801111c:	4498      	add	r8, r3
 801111e:	e7c2      	b.n	80110a6 <_dtoa_r+0x846>
 8011120:	4603      	mov	r3, r0
 8011122:	e7f6      	b.n	8011112 <_dtoa_r+0x8b2>
 8011124:	f1b9 0f00 	cmp.w	r9, #0
 8011128:	dc38      	bgt.n	801119c <_dtoa_r+0x93c>
 801112a:	9b06      	ldr	r3, [sp, #24]
 801112c:	2b02      	cmp	r3, #2
 801112e:	dd35      	ble.n	801119c <_dtoa_r+0x93c>
 8011130:	f8cd 9008 	str.w	r9, [sp, #8]
 8011134:	9b02      	ldr	r3, [sp, #8]
 8011136:	b963      	cbnz	r3, 8011152 <_dtoa_r+0x8f2>
 8011138:	4639      	mov	r1, r7
 801113a:	2205      	movs	r2, #5
 801113c:	4620      	mov	r0, r4
 801113e:	f000 fb86 	bl	801184e <__multadd>
 8011142:	4601      	mov	r1, r0
 8011144:	4607      	mov	r7, r0
 8011146:	9804      	ldr	r0, [sp, #16]
 8011148:	f000 fd4c 	bl	8011be4 <__mcmp>
 801114c:	2800      	cmp	r0, #0
 801114e:	f73f adcc 	bgt.w	8010cea <_dtoa_r+0x48a>
 8011152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011154:	465d      	mov	r5, fp
 8011156:	ea6f 0a03 	mvn.w	sl, r3
 801115a:	f04f 0900 	mov.w	r9, #0
 801115e:	4639      	mov	r1, r7
 8011160:	4620      	mov	r0, r4
 8011162:	f000 fb5d 	bl	8011820 <_Bfree>
 8011166:	2e00      	cmp	r6, #0
 8011168:	f43f aeb7 	beq.w	8010eda <_dtoa_r+0x67a>
 801116c:	f1b9 0f00 	cmp.w	r9, #0
 8011170:	d005      	beq.n	801117e <_dtoa_r+0x91e>
 8011172:	45b1      	cmp	r9, r6
 8011174:	d003      	beq.n	801117e <_dtoa_r+0x91e>
 8011176:	4649      	mov	r1, r9
 8011178:	4620      	mov	r0, r4
 801117a:	f000 fb51 	bl	8011820 <_Bfree>
 801117e:	4631      	mov	r1, r6
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fb4d 	bl	8011820 <_Bfree>
 8011186:	e6a8      	b.n	8010eda <_dtoa_r+0x67a>
 8011188:	2700      	movs	r7, #0
 801118a:	463e      	mov	r6, r7
 801118c:	e7e1      	b.n	8011152 <_dtoa_r+0x8f2>
 801118e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011192:	463e      	mov	r6, r7
 8011194:	e5a9      	b.n	8010cea <_dtoa_r+0x48a>
 8011196:	bf00      	nop
 8011198:	40240000 	.word	0x40240000
 801119c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119e:	f8cd 9008 	str.w	r9, [sp, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 80fa 	beq.w	801139c <_dtoa_r+0xb3c>
 80111a8:	2d00      	cmp	r5, #0
 80111aa:	dd05      	ble.n	80111b8 <_dtoa_r+0x958>
 80111ac:	4631      	mov	r1, r6
 80111ae:	462a      	mov	r2, r5
 80111b0:	4620      	mov	r0, r4
 80111b2:	f000 fcc3 	bl	8011b3c <__lshift>
 80111b6:	4606      	mov	r6, r0
 80111b8:	9b07      	ldr	r3, [sp, #28]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d04c      	beq.n	8011258 <_dtoa_r+0x9f8>
 80111be:	6871      	ldr	r1, [r6, #4]
 80111c0:	4620      	mov	r0, r4
 80111c2:	f000 faf9 	bl	80117b8 <_Balloc>
 80111c6:	6932      	ldr	r2, [r6, #16]
 80111c8:	3202      	adds	r2, #2
 80111ca:	4605      	mov	r5, r0
 80111cc:	0092      	lsls	r2, r2, #2
 80111ce:	f106 010c 	add.w	r1, r6, #12
 80111d2:	300c      	adds	r0, #12
 80111d4:	f7fe fd0a 	bl	800fbec <memcpy>
 80111d8:	2201      	movs	r2, #1
 80111da:	4629      	mov	r1, r5
 80111dc:	4620      	mov	r0, r4
 80111de:	f000 fcad 	bl	8011b3c <__lshift>
 80111e2:	9b00      	ldr	r3, [sp, #0]
 80111e4:	f8cd b014 	str.w	fp, [sp, #20]
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	46b1      	mov	r9, r6
 80111ee:	9307      	str	r3, [sp, #28]
 80111f0:	4606      	mov	r6, r0
 80111f2:	4639      	mov	r1, r7
 80111f4:	9804      	ldr	r0, [sp, #16]
 80111f6:	f7ff faa5 	bl	8010744 <quorem>
 80111fa:	4649      	mov	r1, r9
 80111fc:	4605      	mov	r5, r0
 80111fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011202:	9804      	ldr	r0, [sp, #16]
 8011204:	f000 fcee 	bl	8011be4 <__mcmp>
 8011208:	4632      	mov	r2, r6
 801120a:	9000      	str	r0, [sp, #0]
 801120c:	4639      	mov	r1, r7
 801120e:	4620      	mov	r0, r4
 8011210:	f000 fd02 	bl	8011c18 <__mdiff>
 8011214:	68c3      	ldr	r3, [r0, #12]
 8011216:	4602      	mov	r2, r0
 8011218:	bb03      	cbnz	r3, 801125c <_dtoa_r+0x9fc>
 801121a:	4601      	mov	r1, r0
 801121c:	9008      	str	r0, [sp, #32]
 801121e:	9804      	ldr	r0, [sp, #16]
 8011220:	f000 fce0 	bl	8011be4 <__mcmp>
 8011224:	9a08      	ldr	r2, [sp, #32]
 8011226:	4603      	mov	r3, r0
 8011228:	4611      	mov	r1, r2
 801122a:	4620      	mov	r0, r4
 801122c:	9308      	str	r3, [sp, #32]
 801122e:	f000 faf7 	bl	8011820 <_Bfree>
 8011232:	9b08      	ldr	r3, [sp, #32]
 8011234:	b9a3      	cbnz	r3, 8011260 <_dtoa_r+0xa00>
 8011236:	9a06      	ldr	r2, [sp, #24]
 8011238:	b992      	cbnz	r2, 8011260 <_dtoa_r+0xa00>
 801123a:	9a07      	ldr	r2, [sp, #28]
 801123c:	b982      	cbnz	r2, 8011260 <_dtoa_r+0xa00>
 801123e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011242:	d029      	beq.n	8011298 <_dtoa_r+0xa38>
 8011244:	9b00      	ldr	r3, [sp, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	dd01      	ble.n	801124e <_dtoa_r+0x9ee>
 801124a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801124e:	9b05      	ldr	r3, [sp, #20]
 8011250:	1c5d      	adds	r5, r3, #1
 8011252:	f883 8000 	strb.w	r8, [r3]
 8011256:	e782      	b.n	801115e <_dtoa_r+0x8fe>
 8011258:	4630      	mov	r0, r6
 801125a:	e7c2      	b.n	80111e2 <_dtoa_r+0x982>
 801125c:	2301      	movs	r3, #1
 801125e:	e7e3      	b.n	8011228 <_dtoa_r+0x9c8>
 8011260:	9a00      	ldr	r2, [sp, #0]
 8011262:	2a00      	cmp	r2, #0
 8011264:	db04      	blt.n	8011270 <_dtoa_r+0xa10>
 8011266:	d125      	bne.n	80112b4 <_dtoa_r+0xa54>
 8011268:	9a06      	ldr	r2, [sp, #24]
 801126a:	bb1a      	cbnz	r2, 80112b4 <_dtoa_r+0xa54>
 801126c:	9a07      	ldr	r2, [sp, #28]
 801126e:	bb0a      	cbnz	r2, 80112b4 <_dtoa_r+0xa54>
 8011270:	2b00      	cmp	r3, #0
 8011272:	ddec      	ble.n	801124e <_dtoa_r+0x9ee>
 8011274:	2201      	movs	r2, #1
 8011276:	9904      	ldr	r1, [sp, #16]
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fc5f 	bl	8011b3c <__lshift>
 801127e:	4639      	mov	r1, r7
 8011280:	9004      	str	r0, [sp, #16]
 8011282:	f000 fcaf 	bl	8011be4 <__mcmp>
 8011286:	2800      	cmp	r0, #0
 8011288:	dc03      	bgt.n	8011292 <_dtoa_r+0xa32>
 801128a:	d1e0      	bne.n	801124e <_dtoa_r+0x9ee>
 801128c:	f018 0f01 	tst.w	r8, #1
 8011290:	d0dd      	beq.n	801124e <_dtoa_r+0x9ee>
 8011292:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011296:	d1d8      	bne.n	801124a <_dtoa_r+0x9ea>
 8011298:	9b05      	ldr	r3, [sp, #20]
 801129a:	9a05      	ldr	r2, [sp, #20]
 801129c:	1c5d      	adds	r5, r3, #1
 801129e:	2339      	movs	r3, #57	; 0x39
 80112a0:	7013      	strb	r3, [r2, #0]
 80112a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80112a6:	2b39      	cmp	r3, #57	; 0x39
 80112a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80112ac:	d04f      	beq.n	801134e <_dtoa_r+0xaee>
 80112ae:	3301      	adds	r3, #1
 80112b0:	7013      	strb	r3, [r2, #0]
 80112b2:	e754      	b.n	801115e <_dtoa_r+0x8fe>
 80112b4:	9a05      	ldr	r2, [sp, #20]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	f102 0501 	add.w	r5, r2, #1
 80112bc:	dd06      	ble.n	80112cc <_dtoa_r+0xa6c>
 80112be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80112c2:	d0e9      	beq.n	8011298 <_dtoa_r+0xa38>
 80112c4:	f108 0801 	add.w	r8, r8, #1
 80112c8:	9b05      	ldr	r3, [sp, #20]
 80112ca:	e7c2      	b.n	8011252 <_dtoa_r+0x9f2>
 80112cc:	9a02      	ldr	r2, [sp, #8]
 80112ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80112d2:	eba5 030b 	sub.w	r3, r5, fp
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d021      	beq.n	801131e <_dtoa_r+0xabe>
 80112da:	2300      	movs	r3, #0
 80112dc:	220a      	movs	r2, #10
 80112de:	9904      	ldr	r1, [sp, #16]
 80112e0:	4620      	mov	r0, r4
 80112e2:	f000 fab4 	bl	801184e <__multadd>
 80112e6:	45b1      	cmp	r9, r6
 80112e8:	9004      	str	r0, [sp, #16]
 80112ea:	f04f 0300 	mov.w	r3, #0
 80112ee:	f04f 020a 	mov.w	r2, #10
 80112f2:	4649      	mov	r1, r9
 80112f4:	4620      	mov	r0, r4
 80112f6:	d105      	bne.n	8011304 <_dtoa_r+0xaa4>
 80112f8:	f000 faa9 	bl	801184e <__multadd>
 80112fc:	4681      	mov	r9, r0
 80112fe:	4606      	mov	r6, r0
 8011300:	9505      	str	r5, [sp, #20]
 8011302:	e776      	b.n	80111f2 <_dtoa_r+0x992>
 8011304:	f000 faa3 	bl	801184e <__multadd>
 8011308:	4631      	mov	r1, r6
 801130a:	4681      	mov	r9, r0
 801130c:	2300      	movs	r3, #0
 801130e:	220a      	movs	r2, #10
 8011310:	4620      	mov	r0, r4
 8011312:	f000 fa9c 	bl	801184e <__multadd>
 8011316:	4606      	mov	r6, r0
 8011318:	e7f2      	b.n	8011300 <_dtoa_r+0xaa0>
 801131a:	f04f 0900 	mov.w	r9, #0
 801131e:	2201      	movs	r2, #1
 8011320:	9904      	ldr	r1, [sp, #16]
 8011322:	4620      	mov	r0, r4
 8011324:	f000 fc0a 	bl	8011b3c <__lshift>
 8011328:	4639      	mov	r1, r7
 801132a:	9004      	str	r0, [sp, #16]
 801132c:	f000 fc5a 	bl	8011be4 <__mcmp>
 8011330:	2800      	cmp	r0, #0
 8011332:	dcb6      	bgt.n	80112a2 <_dtoa_r+0xa42>
 8011334:	d102      	bne.n	801133c <_dtoa_r+0xadc>
 8011336:	f018 0f01 	tst.w	r8, #1
 801133a:	d1b2      	bne.n	80112a2 <_dtoa_r+0xa42>
 801133c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011340:	2b30      	cmp	r3, #48	; 0x30
 8011342:	f105 32ff 	add.w	r2, r5, #4294967295
 8011346:	f47f af0a 	bne.w	801115e <_dtoa_r+0x8fe>
 801134a:	4615      	mov	r5, r2
 801134c:	e7f6      	b.n	801133c <_dtoa_r+0xadc>
 801134e:	4593      	cmp	fp, r2
 8011350:	d105      	bne.n	801135e <_dtoa_r+0xafe>
 8011352:	2331      	movs	r3, #49	; 0x31
 8011354:	f10a 0a01 	add.w	sl, sl, #1
 8011358:	f88b 3000 	strb.w	r3, [fp]
 801135c:	e6ff      	b.n	801115e <_dtoa_r+0x8fe>
 801135e:	4615      	mov	r5, r2
 8011360:	e79f      	b.n	80112a2 <_dtoa_r+0xa42>
 8011362:	f8df b064 	ldr.w	fp, [pc, #100]	; 80113c8 <_dtoa_r+0xb68>
 8011366:	e007      	b.n	8011378 <_dtoa_r+0xb18>
 8011368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801136a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80113cc <_dtoa_r+0xb6c>
 801136e:	b11b      	cbz	r3, 8011378 <_dtoa_r+0xb18>
 8011370:	f10b 0308 	add.w	r3, fp, #8
 8011374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011376:	6013      	str	r3, [r2, #0]
 8011378:	4658      	mov	r0, fp
 801137a:	b017      	add	sp, #92	; 0x5c
 801137c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011380:	9b06      	ldr	r3, [sp, #24]
 8011382:	2b01      	cmp	r3, #1
 8011384:	f77f ae35 	ble.w	8010ff2 <_dtoa_r+0x792>
 8011388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801138a:	9307      	str	r3, [sp, #28]
 801138c:	e649      	b.n	8011022 <_dtoa_r+0x7c2>
 801138e:	9b02      	ldr	r3, [sp, #8]
 8011390:	2b00      	cmp	r3, #0
 8011392:	dc03      	bgt.n	801139c <_dtoa_r+0xb3c>
 8011394:	9b06      	ldr	r3, [sp, #24]
 8011396:	2b02      	cmp	r3, #2
 8011398:	f73f aecc 	bgt.w	8011134 <_dtoa_r+0x8d4>
 801139c:	465d      	mov	r5, fp
 801139e:	4639      	mov	r1, r7
 80113a0:	9804      	ldr	r0, [sp, #16]
 80113a2:	f7ff f9cf 	bl	8010744 <quorem>
 80113a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80113aa:	f805 8b01 	strb.w	r8, [r5], #1
 80113ae:	9a02      	ldr	r2, [sp, #8]
 80113b0:	eba5 030b 	sub.w	r3, r5, fp
 80113b4:	429a      	cmp	r2, r3
 80113b6:	ddb0      	ble.n	801131a <_dtoa_r+0xaba>
 80113b8:	2300      	movs	r3, #0
 80113ba:	220a      	movs	r2, #10
 80113bc:	9904      	ldr	r1, [sp, #16]
 80113be:	4620      	mov	r0, r4
 80113c0:	f000 fa45 	bl	801184e <__multadd>
 80113c4:	9004      	str	r0, [sp, #16]
 80113c6:	e7ea      	b.n	801139e <_dtoa_r+0xb3e>
 80113c8:	08012394 	.word	0x08012394
 80113cc:	080123b8 	.word	0x080123b8

080113d0 <__sflush_r>:
 80113d0:	898a      	ldrh	r2, [r1, #12]
 80113d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113d6:	4605      	mov	r5, r0
 80113d8:	0710      	lsls	r0, r2, #28
 80113da:	460c      	mov	r4, r1
 80113dc:	d458      	bmi.n	8011490 <__sflush_r+0xc0>
 80113de:	684b      	ldr	r3, [r1, #4]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	dc05      	bgt.n	80113f0 <__sflush_r+0x20>
 80113e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	dc02      	bgt.n	80113f0 <__sflush_r+0x20>
 80113ea:	2000      	movs	r0, #0
 80113ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113f2:	2e00      	cmp	r6, #0
 80113f4:	d0f9      	beq.n	80113ea <__sflush_r+0x1a>
 80113f6:	2300      	movs	r3, #0
 80113f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113fc:	682f      	ldr	r7, [r5, #0]
 80113fe:	6a21      	ldr	r1, [r4, #32]
 8011400:	602b      	str	r3, [r5, #0]
 8011402:	d032      	beq.n	801146a <__sflush_r+0x9a>
 8011404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011406:	89a3      	ldrh	r3, [r4, #12]
 8011408:	075a      	lsls	r2, r3, #29
 801140a:	d505      	bpl.n	8011418 <__sflush_r+0x48>
 801140c:	6863      	ldr	r3, [r4, #4]
 801140e:	1ac0      	subs	r0, r0, r3
 8011410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011412:	b10b      	cbz	r3, 8011418 <__sflush_r+0x48>
 8011414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011416:	1ac0      	subs	r0, r0, r3
 8011418:	2300      	movs	r3, #0
 801141a:	4602      	mov	r2, r0
 801141c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801141e:	6a21      	ldr	r1, [r4, #32]
 8011420:	4628      	mov	r0, r5
 8011422:	47b0      	blx	r6
 8011424:	1c43      	adds	r3, r0, #1
 8011426:	89a3      	ldrh	r3, [r4, #12]
 8011428:	d106      	bne.n	8011438 <__sflush_r+0x68>
 801142a:	6829      	ldr	r1, [r5, #0]
 801142c:	291d      	cmp	r1, #29
 801142e:	d848      	bhi.n	80114c2 <__sflush_r+0xf2>
 8011430:	4a29      	ldr	r2, [pc, #164]	; (80114d8 <__sflush_r+0x108>)
 8011432:	40ca      	lsrs	r2, r1
 8011434:	07d6      	lsls	r6, r2, #31
 8011436:	d544      	bpl.n	80114c2 <__sflush_r+0xf2>
 8011438:	2200      	movs	r2, #0
 801143a:	6062      	str	r2, [r4, #4]
 801143c:	04d9      	lsls	r1, r3, #19
 801143e:	6922      	ldr	r2, [r4, #16]
 8011440:	6022      	str	r2, [r4, #0]
 8011442:	d504      	bpl.n	801144e <__sflush_r+0x7e>
 8011444:	1c42      	adds	r2, r0, #1
 8011446:	d101      	bne.n	801144c <__sflush_r+0x7c>
 8011448:	682b      	ldr	r3, [r5, #0]
 801144a:	b903      	cbnz	r3, 801144e <__sflush_r+0x7e>
 801144c:	6560      	str	r0, [r4, #84]	; 0x54
 801144e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011450:	602f      	str	r7, [r5, #0]
 8011452:	2900      	cmp	r1, #0
 8011454:	d0c9      	beq.n	80113ea <__sflush_r+0x1a>
 8011456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801145a:	4299      	cmp	r1, r3
 801145c:	d002      	beq.n	8011464 <__sflush_r+0x94>
 801145e:	4628      	mov	r0, r5
 8011460:	f000 fc94 	bl	8011d8c <_free_r>
 8011464:	2000      	movs	r0, #0
 8011466:	6360      	str	r0, [r4, #52]	; 0x34
 8011468:	e7c0      	b.n	80113ec <__sflush_r+0x1c>
 801146a:	2301      	movs	r3, #1
 801146c:	4628      	mov	r0, r5
 801146e:	47b0      	blx	r6
 8011470:	1c41      	adds	r1, r0, #1
 8011472:	d1c8      	bne.n	8011406 <__sflush_r+0x36>
 8011474:	682b      	ldr	r3, [r5, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d0c5      	beq.n	8011406 <__sflush_r+0x36>
 801147a:	2b1d      	cmp	r3, #29
 801147c:	d001      	beq.n	8011482 <__sflush_r+0xb2>
 801147e:	2b16      	cmp	r3, #22
 8011480:	d101      	bne.n	8011486 <__sflush_r+0xb6>
 8011482:	602f      	str	r7, [r5, #0]
 8011484:	e7b1      	b.n	80113ea <__sflush_r+0x1a>
 8011486:	89a3      	ldrh	r3, [r4, #12]
 8011488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801148c:	81a3      	strh	r3, [r4, #12]
 801148e:	e7ad      	b.n	80113ec <__sflush_r+0x1c>
 8011490:	690f      	ldr	r7, [r1, #16]
 8011492:	2f00      	cmp	r7, #0
 8011494:	d0a9      	beq.n	80113ea <__sflush_r+0x1a>
 8011496:	0793      	lsls	r3, r2, #30
 8011498:	680e      	ldr	r6, [r1, #0]
 801149a:	bf08      	it	eq
 801149c:	694b      	ldreq	r3, [r1, #20]
 801149e:	600f      	str	r7, [r1, #0]
 80114a0:	bf18      	it	ne
 80114a2:	2300      	movne	r3, #0
 80114a4:	eba6 0807 	sub.w	r8, r6, r7
 80114a8:	608b      	str	r3, [r1, #8]
 80114aa:	f1b8 0f00 	cmp.w	r8, #0
 80114ae:	dd9c      	ble.n	80113ea <__sflush_r+0x1a>
 80114b0:	4643      	mov	r3, r8
 80114b2:	463a      	mov	r2, r7
 80114b4:	6a21      	ldr	r1, [r4, #32]
 80114b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114b8:	4628      	mov	r0, r5
 80114ba:	47b0      	blx	r6
 80114bc:	2800      	cmp	r0, #0
 80114be:	dc06      	bgt.n	80114ce <__sflush_r+0xfe>
 80114c0:	89a3      	ldrh	r3, [r4, #12]
 80114c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114c6:	81a3      	strh	r3, [r4, #12]
 80114c8:	f04f 30ff 	mov.w	r0, #4294967295
 80114cc:	e78e      	b.n	80113ec <__sflush_r+0x1c>
 80114ce:	4407      	add	r7, r0
 80114d0:	eba8 0800 	sub.w	r8, r8, r0
 80114d4:	e7e9      	b.n	80114aa <__sflush_r+0xda>
 80114d6:	bf00      	nop
 80114d8:	20400001 	.word	0x20400001

080114dc <_fflush_r>:
 80114dc:	b538      	push	{r3, r4, r5, lr}
 80114de:	690b      	ldr	r3, [r1, #16]
 80114e0:	4605      	mov	r5, r0
 80114e2:	460c      	mov	r4, r1
 80114e4:	b1db      	cbz	r3, 801151e <_fflush_r+0x42>
 80114e6:	b118      	cbz	r0, 80114f0 <_fflush_r+0x14>
 80114e8:	6983      	ldr	r3, [r0, #24]
 80114ea:	b90b      	cbnz	r3, 80114f0 <_fflush_r+0x14>
 80114ec:	f000 f860 	bl	80115b0 <__sinit>
 80114f0:	4b0c      	ldr	r3, [pc, #48]	; (8011524 <_fflush_r+0x48>)
 80114f2:	429c      	cmp	r4, r3
 80114f4:	d109      	bne.n	801150a <_fflush_r+0x2e>
 80114f6:	686c      	ldr	r4, [r5, #4]
 80114f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114fc:	b17b      	cbz	r3, 801151e <_fflush_r+0x42>
 80114fe:	4621      	mov	r1, r4
 8011500:	4628      	mov	r0, r5
 8011502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011506:	f7ff bf63 	b.w	80113d0 <__sflush_r>
 801150a:	4b07      	ldr	r3, [pc, #28]	; (8011528 <_fflush_r+0x4c>)
 801150c:	429c      	cmp	r4, r3
 801150e:	d101      	bne.n	8011514 <_fflush_r+0x38>
 8011510:	68ac      	ldr	r4, [r5, #8]
 8011512:	e7f1      	b.n	80114f8 <_fflush_r+0x1c>
 8011514:	4b05      	ldr	r3, [pc, #20]	; (801152c <_fflush_r+0x50>)
 8011516:	429c      	cmp	r4, r3
 8011518:	bf08      	it	eq
 801151a:	68ec      	ldreq	r4, [r5, #12]
 801151c:	e7ec      	b.n	80114f8 <_fflush_r+0x1c>
 801151e:	2000      	movs	r0, #0
 8011520:	bd38      	pop	{r3, r4, r5, pc}
 8011522:	bf00      	nop
 8011524:	080123e8 	.word	0x080123e8
 8011528:	08012408 	.word	0x08012408
 801152c:	080123c8 	.word	0x080123c8

08011530 <std>:
 8011530:	2300      	movs	r3, #0
 8011532:	b510      	push	{r4, lr}
 8011534:	4604      	mov	r4, r0
 8011536:	e9c0 3300 	strd	r3, r3, [r0]
 801153a:	6083      	str	r3, [r0, #8]
 801153c:	8181      	strh	r1, [r0, #12]
 801153e:	6643      	str	r3, [r0, #100]	; 0x64
 8011540:	81c2      	strh	r2, [r0, #14]
 8011542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011546:	6183      	str	r3, [r0, #24]
 8011548:	4619      	mov	r1, r3
 801154a:	2208      	movs	r2, #8
 801154c:	305c      	adds	r0, #92	; 0x5c
 801154e:	f7fe fb58 	bl	800fc02 <memset>
 8011552:	4b05      	ldr	r3, [pc, #20]	; (8011568 <std+0x38>)
 8011554:	6263      	str	r3, [r4, #36]	; 0x24
 8011556:	4b05      	ldr	r3, [pc, #20]	; (801156c <std+0x3c>)
 8011558:	62a3      	str	r3, [r4, #40]	; 0x28
 801155a:	4b05      	ldr	r3, [pc, #20]	; (8011570 <std+0x40>)
 801155c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801155e:	4b05      	ldr	r3, [pc, #20]	; (8011574 <std+0x44>)
 8011560:	6224      	str	r4, [r4, #32]
 8011562:	6323      	str	r3, [r4, #48]	; 0x30
 8011564:	bd10      	pop	{r4, pc}
 8011566:	bf00      	nop
 8011568:	0801217d 	.word	0x0801217d
 801156c:	0801219f 	.word	0x0801219f
 8011570:	080121d7 	.word	0x080121d7
 8011574:	080121fb 	.word	0x080121fb

08011578 <_cleanup_r>:
 8011578:	4901      	ldr	r1, [pc, #4]	; (8011580 <_cleanup_r+0x8>)
 801157a:	f000 b885 	b.w	8011688 <_fwalk_reent>
 801157e:	bf00      	nop
 8011580:	080114dd 	.word	0x080114dd

08011584 <__sfmoreglue>:
 8011584:	b570      	push	{r4, r5, r6, lr}
 8011586:	1e4a      	subs	r2, r1, #1
 8011588:	2568      	movs	r5, #104	; 0x68
 801158a:	4355      	muls	r5, r2
 801158c:	460e      	mov	r6, r1
 801158e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011592:	f000 fc49 	bl	8011e28 <_malloc_r>
 8011596:	4604      	mov	r4, r0
 8011598:	b140      	cbz	r0, 80115ac <__sfmoreglue+0x28>
 801159a:	2100      	movs	r1, #0
 801159c:	e9c0 1600 	strd	r1, r6, [r0]
 80115a0:	300c      	adds	r0, #12
 80115a2:	60a0      	str	r0, [r4, #8]
 80115a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115a8:	f7fe fb2b 	bl	800fc02 <memset>
 80115ac:	4620      	mov	r0, r4
 80115ae:	bd70      	pop	{r4, r5, r6, pc}

080115b0 <__sinit>:
 80115b0:	6983      	ldr	r3, [r0, #24]
 80115b2:	b510      	push	{r4, lr}
 80115b4:	4604      	mov	r4, r0
 80115b6:	bb33      	cbnz	r3, 8011606 <__sinit+0x56>
 80115b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80115bc:	6503      	str	r3, [r0, #80]	; 0x50
 80115be:	4b12      	ldr	r3, [pc, #72]	; (8011608 <__sinit+0x58>)
 80115c0:	4a12      	ldr	r2, [pc, #72]	; (801160c <__sinit+0x5c>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	6282      	str	r2, [r0, #40]	; 0x28
 80115c6:	4298      	cmp	r0, r3
 80115c8:	bf04      	itt	eq
 80115ca:	2301      	moveq	r3, #1
 80115cc:	6183      	streq	r3, [r0, #24]
 80115ce:	f000 f81f 	bl	8011610 <__sfp>
 80115d2:	6060      	str	r0, [r4, #4]
 80115d4:	4620      	mov	r0, r4
 80115d6:	f000 f81b 	bl	8011610 <__sfp>
 80115da:	60a0      	str	r0, [r4, #8]
 80115dc:	4620      	mov	r0, r4
 80115de:	f000 f817 	bl	8011610 <__sfp>
 80115e2:	2200      	movs	r2, #0
 80115e4:	60e0      	str	r0, [r4, #12]
 80115e6:	2104      	movs	r1, #4
 80115e8:	6860      	ldr	r0, [r4, #4]
 80115ea:	f7ff ffa1 	bl	8011530 <std>
 80115ee:	2201      	movs	r2, #1
 80115f0:	2109      	movs	r1, #9
 80115f2:	68a0      	ldr	r0, [r4, #8]
 80115f4:	f7ff ff9c 	bl	8011530 <std>
 80115f8:	2202      	movs	r2, #2
 80115fa:	2112      	movs	r1, #18
 80115fc:	68e0      	ldr	r0, [r4, #12]
 80115fe:	f7ff ff97 	bl	8011530 <std>
 8011602:	2301      	movs	r3, #1
 8011604:	61a3      	str	r3, [r4, #24]
 8011606:	bd10      	pop	{r4, pc}
 8011608:	08012380 	.word	0x08012380
 801160c:	08011579 	.word	0x08011579

08011610 <__sfp>:
 8011610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011612:	4b1b      	ldr	r3, [pc, #108]	; (8011680 <__sfp+0x70>)
 8011614:	681e      	ldr	r6, [r3, #0]
 8011616:	69b3      	ldr	r3, [r6, #24]
 8011618:	4607      	mov	r7, r0
 801161a:	b913      	cbnz	r3, 8011622 <__sfp+0x12>
 801161c:	4630      	mov	r0, r6
 801161e:	f7ff ffc7 	bl	80115b0 <__sinit>
 8011622:	3648      	adds	r6, #72	; 0x48
 8011624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011628:	3b01      	subs	r3, #1
 801162a:	d503      	bpl.n	8011634 <__sfp+0x24>
 801162c:	6833      	ldr	r3, [r6, #0]
 801162e:	b133      	cbz	r3, 801163e <__sfp+0x2e>
 8011630:	6836      	ldr	r6, [r6, #0]
 8011632:	e7f7      	b.n	8011624 <__sfp+0x14>
 8011634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011638:	b16d      	cbz	r5, 8011656 <__sfp+0x46>
 801163a:	3468      	adds	r4, #104	; 0x68
 801163c:	e7f4      	b.n	8011628 <__sfp+0x18>
 801163e:	2104      	movs	r1, #4
 8011640:	4638      	mov	r0, r7
 8011642:	f7ff ff9f 	bl	8011584 <__sfmoreglue>
 8011646:	6030      	str	r0, [r6, #0]
 8011648:	2800      	cmp	r0, #0
 801164a:	d1f1      	bne.n	8011630 <__sfp+0x20>
 801164c:	230c      	movs	r3, #12
 801164e:	603b      	str	r3, [r7, #0]
 8011650:	4604      	mov	r4, r0
 8011652:	4620      	mov	r0, r4
 8011654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011656:	4b0b      	ldr	r3, [pc, #44]	; (8011684 <__sfp+0x74>)
 8011658:	6665      	str	r5, [r4, #100]	; 0x64
 801165a:	e9c4 5500 	strd	r5, r5, [r4]
 801165e:	60a5      	str	r5, [r4, #8]
 8011660:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011664:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011668:	2208      	movs	r2, #8
 801166a:	4629      	mov	r1, r5
 801166c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011670:	f7fe fac7 	bl	800fc02 <memset>
 8011674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801167c:	e7e9      	b.n	8011652 <__sfp+0x42>
 801167e:	bf00      	nop
 8011680:	08012380 	.word	0x08012380
 8011684:	ffff0001 	.word	0xffff0001

08011688 <_fwalk_reent>:
 8011688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801168c:	4680      	mov	r8, r0
 801168e:	4689      	mov	r9, r1
 8011690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011694:	2600      	movs	r6, #0
 8011696:	b914      	cbnz	r4, 801169e <_fwalk_reent+0x16>
 8011698:	4630      	mov	r0, r6
 801169a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801169e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80116a2:	3f01      	subs	r7, #1
 80116a4:	d501      	bpl.n	80116aa <_fwalk_reent+0x22>
 80116a6:	6824      	ldr	r4, [r4, #0]
 80116a8:	e7f5      	b.n	8011696 <_fwalk_reent+0xe>
 80116aa:	89ab      	ldrh	r3, [r5, #12]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d907      	bls.n	80116c0 <_fwalk_reent+0x38>
 80116b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116b4:	3301      	adds	r3, #1
 80116b6:	d003      	beq.n	80116c0 <_fwalk_reent+0x38>
 80116b8:	4629      	mov	r1, r5
 80116ba:	4640      	mov	r0, r8
 80116bc:	47c8      	blx	r9
 80116be:	4306      	orrs	r6, r0
 80116c0:	3568      	adds	r5, #104	; 0x68
 80116c2:	e7ee      	b.n	80116a2 <_fwalk_reent+0x1a>

080116c4 <_localeconv_r>:
 80116c4:	4b04      	ldr	r3, [pc, #16]	; (80116d8 <_localeconv_r+0x14>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	6a18      	ldr	r0, [r3, #32]
 80116ca:	4b04      	ldr	r3, [pc, #16]	; (80116dc <_localeconv_r+0x18>)
 80116cc:	2800      	cmp	r0, #0
 80116ce:	bf08      	it	eq
 80116d0:	4618      	moveq	r0, r3
 80116d2:	30f0      	adds	r0, #240	; 0xf0
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop
 80116d8:	2000000c 	.word	0x2000000c
 80116dc:	20000070 	.word	0x20000070

080116e0 <__swhatbuf_r>:
 80116e0:	b570      	push	{r4, r5, r6, lr}
 80116e2:	460e      	mov	r6, r1
 80116e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116e8:	2900      	cmp	r1, #0
 80116ea:	b096      	sub	sp, #88	; 0x58
 80116ec:	4614      	mov	r4, r2
 80116ee:	461d      	mov	r5, r3
 80116f0:	da07      	bge.n	8011702 <__swhatbuf_r+0x22>
 80116f2:	2300      	movs	r3, #0
 80116f4:	602b      	str	r3, [r5, #0]
 80116f6:	89b3      	ldrh	r3, [r6, #12]
 80116f8:	061a      	lsls	r2, r3, #24
 80116fa:	d410      	bmi.n	801171e <__swhatbuf_r+0x3e>
 80116fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011700:	e00e      	b.n	8011720 <__swhatbuf_r+0x40>
 8011702:	466a      	mov	r2, sp
 8011704:	f000 fda0 	bl	8012248 <_fstat_r>
 8011708:	2800      	cmp	r0, #0
 801170a:	dbf2      	blt.n	80116f2 <__swhatbuf_r+0x12>
 801170c:	9a01      	ldr	r2, [sp, #4]
 801170e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011716:	425a      	negs	r2, r3
 8011718:	415a      	adcs	r2, r3
 801171a:	602a      	str	r2, [r5, #0]
 801171c:	e7ee      	b.n	80116fc <__swhatbuf_r+0x1c>
 801171e:	2340      	movs	r3, #64	; 0x40
 8011720:	2000      	movs	r0, #0
 8011722:	6023      	str	r3, [r4, #0]
 8011724:	b016      	add	sp, #88	; 0x58
 8011726:	bd70      	pop	{r4, r5, r6, pc}

08011728 <__smakebuf_r>:
 8011728:	898b      	ldrh	r3, [r1, #12]
 801172a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801172c:	079d      	lsls	r5, r3, #30
 801172e:	4606      	mov	r6, r0
 8011730:	460c      	mov	r4, r1
 8011732:	d507      	bpl.n	8011744 <__smakebuf_r+0x1c>
 8011734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011738:	6023      	str	r3, [r4, #0]
 801173a:	6123      	str	r3, [r4, #16]
 801173c:	2301      	movs	r3, #1
 801173e:	6163      	str	r3, [r4, #20]
 8011740:	b002      	add	sp, #8
 8011742:	bd70      	pop	{r4, r5, r6, pc}
 8011744:	ab01      	add	r3, sp, #4
 8011746:	466a      	mov	r2, sp
 8011748:	f7ff ffca 	bl	80116e0 <__swhatbuf_r>
 801174c:	9900      	ldr	r1, [sp, #0]
 801174e:	4605      	mov	r5, r0
 8011750:	4630      	mov	r0, r6
 8011752:	f000 fb69 	bl	8011e28 <_malloc_r>
 8011756:	b948      	cbnz	r0, 801176c <__smakebuf_r+0x44>
 8011758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801175c:	059a      	lsls	r2, r3, #22
 801175e:	d4ef      	bmi.n	8011740 <__smakebuf_r+0x18>
 8011760:	f023 0303 	bic.w	r3, r3, #3
 8011764:	f043 0302 	orr.w	r3, r3, #2
 8011768:	81a3      	strh	r3, [r4, #12]
 801176a:	e7e3      	b.n	8011734 <__smakebuf_r+0xc>
 801176c:	4b0d      	ldr	r3, [pc, #52]	; (80117a4 <__smakebuf_r+0x7c>)
 801176e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011770:	89a3      	ldrh	r3, [r4, #12]
 8011772:	6020      	str	r0, [r4, #0]
 8011774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011778:	81a3      	strh	r3, [r4, #12]
 801177a:	9b00      	ldr	r3, [sp, #0]
 801177c:	6163      	str	r3, [r4, #20]
 801177e:	9b01      	ldr	r3, [sp, #4]
 8011780:	6120      	str	r0, [r4, #16]
 8011782:	b15b      	cbz	r3, 801179c <__smakebuf_r+0x74>
 8011784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011788:	4630      	mov	r0, r6
 801178a:	f000 fd6f 	bl	801226c <_isatty_r>
 801178e:	b128      	cbz	r0, 801179c <__smakebuf_r+0x74>
 8011790:	89a3      	ldrh	r3, [r4, #12]
 8011792:	f023 0303 	bic.w	r3, r3, #3
 8011796:	f043 0301 	orr.w	r3, r3, #1
 801179a:	81a3      	strh	r3, [r4, #12]
 801179c:	89a3      	ldrh	r3, [r4, #12]
 801179e:	431d      	orrs	r5, r3
 80117a0:	81a5      	strh	r5, [r4, #12]
 80117a2:	e7cd      	b.n	8011740 <__smakebuf_r+0x18>
 80117a4:	08011579 	.word	0x08011579

080117a8 <malloc>:
 80117a8:	4b02      	ldr	r3, [pc, #8]	; (80117b4 <malloc+0xc>)
 80117aa:	4601      	mov	r1, r0
 80117ac:	6818      	ldr	r0, [r3, #0]
 80117ae:	f000 bb3b 	b.w	8011e28 <_malloc_r>
 80117b2:	bf00      	nop
 80117b4:	2000000c 	.word	0x2000000c

080117b8 <_Balloc>:
 80117b8:	b570      	push	{r4, r5, r6, lr}
 80117ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80117bc:	4604      	mov	r4, r0
 80117be:	460e      	mov	r6, r1
 80117c0:	b93d      	cbnz	r5, 80117d2 <_Balloc+0x1a>
 80117c2:	2010      	movs	r0, #16
 80117c4:	f7ff fff0 	bl	80117a8 <malloc>
 80117c8:	6260      	str	r0, [r4, #36]	; 0x24
 80117ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117ce:	6005      	str	r5, [r0, #0]
 80117d0:	60c5      	str	r5, [r0, #12]
 80117d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80117d4:	68eb      	ldr	r3, [r5, #12]
 80117d6:	b183      	cbz	r3, 80117fa <_Balloc+0x42>
 80117d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80117e0:	b9b8      	cbnz	r0, 8011812 <_Balloc+0x5a>
 80117e2:	2101      	movs	r1, #1
 80117e4:	fa01 f506 	lsl.w	r5, r1, r6
 80117e8:	1d6a      	adds	r2, r5, #5
 80117ea:	0092      	lsls	r2, r2, #2
 80117ec:	4620      	mov	r0, r4
 80117ee:	f000 fabf 	bl	8011d70 <_calloc_r>
 80117f2:	b160      	cbz	r0, 801180e <_Balloc+0x56>
 80117f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80117f8:	e00e      	b.n	8011818 <_Balloc+0x60>
 80117fa:	2221      	movs	r2, #33	; 0x21
 80117fc:	2104      	movs	r1, #4
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 fab6 	bl	8011d70 <_calloc_r>
 8011804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011806:	60e8      	str	r0, [r5, #12]
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d1e4      	bne.n	80117d8 <_Balloc+0x20>
 801180e:	2000      	movs	r0, #0
 8011810:	bd70      	pop	{r4, r5, r6, pc}
 8011812:	6802      	ldr	r2, [r0, #0]
 8011814:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011818:	2300      	movs	r3, #0
 801181a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801181e:	e7f7      	b.n	8011810 <_Balloc+0x58>

08011820 <_Bfree>:
 8011820:	b570      	push	{r4, r5, r6, lr}
 8011822:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011824:	4606      	mov	r6, r0
 8011826:	460d      	mov	r5, r1
 8011828:	b93c      	cbnz	r4, 801183a <_Bfree+0x1a>
 801182a:	2010      	movs	r0, #16
 801182c:	f7ff ffbc 	bl	80117a8 <malloc>
 8011830:	6270      	str	r0, [r6, #36]	; 0x24
 8011832:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011836:	6004      	str	r4, [r0, #0]
 8011838:	60c4      	str	r4, [r0, #12]
 801183a:	b13d      	cbz	r5, 801184c <_Bfree+0x2c>
 801183c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801183e:	686a      	ldr	r2, [r5, #4]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011846:	6029      	str	r1, [r5, #0]
 8011848:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801184c:	bd70      	pop	{r4, r5, r6, pc}

0801184e <__multadd>:
 801184e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011852:	690d      	ldr	r5, [r1, #16]
 8011854:	461f      	mov	r7, r3
 8011856:	4606      	mov	r6, r0
 8011858:	460c      	mov	r4, r1
 801185a:	f101 0c14 	add.w	ip, r1, #20
 801185e:	2300      	movs	r3, #0
 8011860:	f8dc 0000 	ldr.w	r0, [ip]
 8011864:	b281      	uxth	r1, r0
 8011866:	fb02 7101 	mla	r1, r2, r1, r7
 801186a:	0c0f      	lsrs	r7, r1, #16
 801186c:	0c00      	lsrs	r0, r0, #16
 801186e:	fb02 7000 	mla	r0, r2, r0, r7
 8011872:	b289      	uxth	r1, r1
 8011874:	3301      	adds	r3, #1
 8011876:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801187a:	429d      	cmp	r5, r3
 801187c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011880:	f84c 1b04 	str.w	r1, [ip], #4
 8011884:	dcec      	bgt.n	8011860 <__multadd+0x12>
 8011886:	b1d7      	cbz	r7, 80118be <__multadd+0x70>
 8011888:	68a3      	ldr	r3, [r4, #8]
 801188a:	42ab      	cmp	r3, r5
 801188c:	dc12      	bgt.n	80118b4 <__multadd+0x66>
 801188e:	6861      	ldr	r1, [r4, #4]
 8011890:	4630      	mov	r0, r6
 8011892:	3101      	adds	r1, #1
 8011894:	f7ff ff90 	bl	80117b8 <_Balloc>
 8011898:	6922      	ldr	r2, [r4, #16]
 801189a:	3202      	adds	r2, #2
 801189c:	f104 010c 	add.w	r1, r4, #12
 80118a0:	4680      	mov	r8, r0
 80118a2:	0092      	lsls	r2, r2, #2
 80118a4:	300c      	adds	r0, #12
 80118a6:	f7fe f9a1 	bl	800fbec <memcpy>
 80118aa:	4621      	mov	r1, r4
 80118ac:	4630      	mov	r0, r6
 80118ae:	f7ff ffb7 	bl	8011820 <_Bfree>
 80118b2:	4644      	mov	r4, r8
 80118b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80118b8:	3501      	adds	r5, #1
 80118ba:	615f      	str	r7, [r3, #20]
 80118bc:	6125      	str	r5, [r4, #16]
 80118be:	4620      	mov	r0, r4
 80118c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118c4 <__hi0bits>:
 80118c4:	0c02      	lsrs	r2, r0, #16
 80118c6:	0412      	lsls	r2, r2, #16
 80118c8:	4603      	mov	r3, r0
 80118ca:	b9b2      	cbnz	r2, 80118fa <__hi0bits+0x36>
 80118cc:	0403      	lsls	r3, r0, #16
 80118ce:	2010      	movs	r0, #16
 80118d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80118d4:	bf04      	itt	eq
 80118d6:	021b      	lsleq	r3, r3, #8
 80118d8:	3008      	addeq	r0, #8
 80118da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80118de:	bf04      	itt	eq
 80118e0:	011b      	lsleq	r3, r3, #4
 80118e2:	3004      	addeq	r0, #4
 80118e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80118e8:	bf04      	itt	eq
 80118ea:	009b      	lsleq	r3, r3, #2
 80118ec:	3002      	addeq	r0, #2
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	db06      	blt.n	8011900 <__hi0bits+0x3c>
 80118f2:	005b      	lsls	r3, r3, #1
 80118f4:	d503      	bpl.n	80118fe <__hi0bits+0x3a>
 80118f6:	3001      	adds	r0, #1
 80118f8:	4770      	bx	lr
 80118fa:	2000      	movs	r0, #0
 80118fc:	e7e8      	b.n	80118d0 <__hi0bits+0xc>
 80118fe:	2020      	movs	r0, #32
 8011900:	4770      	bx	lr

08011902 <__lo0bits>:
 8011902:	6803      	ldr	r3, [r0, #0]
 8011904:	f013 0207 	ands.w	r2, r3, #7
 8011908:	4601      	mov	r1, r0
 801190a:	d00b      	beq.n	8011924 <__lo0bits+0x22>
 801190c:	07da      	lsls	r2, r3, #31
 801190e:	d423      	bmi.n	8011958 <__lo0bits+0x56>
 8011910:	0798      	lsls	r0, r3, #30
 8011912:	bf49      	itett	mi
 8011914:	085b      	lsrmi	r3, r3, #1
 8011916:	089b      	lsrpl	r3, r3, #2
 8011918:	2001      	movmi	r0, #1
 801191a:	600b      	strmi	r3, [r1, #0]
 801191c:	bf5c      	itt	pl
 801191e:	600b      	strpl	r3, [r1, #0]
 8011920:	2002      	movpl	r0, #2
 8011922:	4770      	bx	lr
 8011924:	b298      	uxth	r0, r3
 8011926:	b9a8      	cbnz	r0, 8011954 <__lo0bits+0x52>
 8011928:	0c1b      	lsrs	r3, r3, #16
 801192a:	2010      	movs	r0, #16
 801192c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011930:	bf04      	itt	eq
 8011932:	0a1b      	lsreq	r3, r3, #8
 8011934:	3008      	addeq	r0, #8
 8011936:	071a      	lsls	r2, r3, #28
 8011938:	bf04      	itt	eq
 801193a:	091b      	lsreq	r3, r3, #4
 801193c:	3004      	addeq	r0, #4
 801193e:	079a      	lsls	r2, r3, #30
 8011940:	bf04      	itt	eq
 8011942:	089b      	lsreq	r3, r3, #2
 8011944:	3002      	addeq	r0, #2
 8011946:	07da      	lsls	r2, r3, #31
 8011948:	d402      	bmi.n	8011950 <__lo0bits+0x4e>
 801194a:	085b      	lsrs	r3, r3, #1
 801194c:	d006      	beq.n	801195c <__lo0bits+0x5a>
 801194e:	3001      	adds	r0, #1
 8011950:	600b      	str	r3, [r1, #0]
 8011952:	4770      	bx	lr
 8011954:	4610      	mov	r0, r2
 8011956:	e7e9      	b.n	801192c <__lo0bits+0x2a>
 8011958:	2000      	movs	r0, #0
 801195a:	4770      	bx	lr
 801195c:	2020      	movs	r0, #32
 801195e:	4770      	bx	lr

08011960 <__i2b>:
 8011960:	b510      	push	{r4, lr}
 8011962:	460c      	mov	r4, r1
 8011964:	2101      	movs	r1, #1
 8011966:	f7ff ff27 	bl	80117b8 <_Balloc>
 801196a:	2201      	movs	r2, #1
 801196c:	6144      	str	r4, [r0, #20]
 801196e:	6102      	str	r2, [r0, #16]
 8011970:	bd10      	pop	{r4, pc}

08011972 <__multiply>:
 8011972:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011976:	4614      	mov	r4, r2
 8011978:	690a      	ldr	r2, [r1, #16]
 801197a:	6923      	ldr	r3, [r4, #16]
 801197c:	429a      	cmp	r2, r3
 801197e:	bfb8      	it	lt
 8011980:	460b      	movlt	r3, r1
 8011982:	4688      	mov	r8, r1
 8011984:	bfbc      	itt	lt
 8011986:	46a0      	movlt	r8, r4
 8011988:	461c      	movlt	r4, r3
 801198a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801198e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011996:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801199a:	eb07 0609 	add.w	r6, r7, r9
 801199e:	42b3      	cmp	r3, r6
 80119a0:	bfb8      	it	lt
 80119a2:	3101      	addlt	r1, #1
 80119a4:	f7ff ff08 	bl	80117b8 <_Balloc>
 80119a8:	f100 0514 	add.w	r5, r0, #20
 80119ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80119b0:	462b      	mov	r3, r5
 80119b2:	2200      	movs	r2, #0
 80119b4:	4573      	cmp	r3, lr
 80119b6:	d316      	bcc.n	80119e6 <__multiply+0x74>
 80119b8:	f104 0214 	add.w	r2, r4, #20
 80119bc:	f108 0114 	add.w	r1, r8, #20
 80119c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80119c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	9b00      	ldr	r3, [sp, #0]
 80119cc:	9201      	str	r2, [sp, #4]
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d80c      	bhi.n	80119ec <__multiply+0x7a>
 80119d2:	2e00      	cmp	r6, #0
 80119d4:	dd03      	ble.n	80119de <__multiply+0x6c>
 80119d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d05d      	beq.n	8011a9a <__multiply+0x128>
 80119de:	6106      	str	r6, [r0, #16]
 80119e0:	b003      	add	sp, #12
 80119e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e6:	f843 2b04 	str.w	r2, [r3], #4
 80119ea:	e7e3      	b.n	80119b4 <__multiply+0x42>
 80119ec:	f8b2 b000 	ldrh.w	fp, [r2]
 80119f0:	f1bb 0f00 	cmp.w	fp, #0
 80119f4:	d023      	beq.n	8011a3e <__multiply+0xcc>
 80119f6:	4689      	mov	r9, r1
 80119f8:	46ac      	mov	ip, r5
 80119fa:	f04f 0800 	mov.w	r8, #0
 80119fe:	f859 4b04 	ldr.w	r4, [r9], #4
 8011a02:	f8dc a000 	ldr.w	sl, [ip]
 8011a06:	b2a3      	uxth	r3, r4
 8011a08:	fa1f fa8a 	uxth.w	sl, sl
 8011a0c:	fb0b a303 	mla	r3, fp, r3, sl
 8011a10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011a14:	f8dc 4000 	ldr.w	r4, [ip]
 8011a18:	4443      	add	r3, r8
 8011a1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011a1e:	fb0b 840a 	mla	r4, fp, sl, r8
 8011a22:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011a26:	46e2      	mov	sl, ip
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011a2e:	454f      	cmp	r7, r9
 8011a30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011a34:	f84a 3b04 	str.w	r3, [sl], #4
 8011a38:	d82b      	bhi.n	8011a92 <__multiply+0x120>
 8011a3a:	f8cc 8004 	str.w	r8, [ip, #4]
 8011a3e:	9b01      	ldr	r3, [sp, #4]
 8011a40:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011a44:	3204      	adds	r2, #4
 8011a46:	f1ba 0f00 	cmp.w	sl, #0
 8011a4a:	d020      	beq.n	8011a8e <__multiply+0x11c>
 8011a4c:	682b      	ldr	r3, [r5, #0]
 8011a4e:	4689      	mov	r9, r1
 8011a50:	46a8      	mov	r8, r5
 8011a52:	f04f 0b00 	mov.w	fp, #0
 8011a56:	f8b9 c000 	ldrh.w	ip, [r9]
 8011a5a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011a5e:	fb0a 440c 	mla	r4, sl, ip, r4
 8011a62:	445c      	add	r4, fp
 8011a64:	46c4      	mov	ip, r8
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011a6c:	f84c 3b04 	str.w	r3, [ip], #4
 8011a70:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a74:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011a78:	0c1b      	lsrs	r3, r3, #16
 8011a7a:	fb0a b303 	mla	r3, sl, r3, fp
 8011a7e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011a82:	454f      	cmp	r7, r9
 8011a84:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011a88:	d805      	bhi.n	8011a96 <__multiply+0x124>
 8011a8a:	f8c8 3004 	str.w	r3, [r8, #4]
 8011a8e:	3504      	adds	r5, #4
 8011a90:	e79b      	b.n	80119ca <__multiply+0x58>
 8011a92:	46d4      	mov	ip, sl
 8011a94:	e7b3      	b.n	80119fe <__multiply+0x8c>
 8011a96:	46e0      	mov	r8, ip
 8011a98:	e7dd      	b.n	8011a56 <__multiply+0xe4>
 8011a9a:	3e01      	subs	r6, #1
 8011a9c:	e799      	b.n	80119d2 <__multiply+0x60>
	...

08011aa0 <__pow5mult>:
 8011aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aa4:	4615      	mov	r5, r2
 8011aa6:	f012 0203 	ands.w	r2, r2, #3
 8011aaa:	4606      	mov	r6, r0
 8011aac:	460f      	mov	r7, r1
 8011aae:	d007      	beq.n	8011ac0 <__pow5mult+0x20>
 8011ab0:	3a01      	subs	r2, #1
 8011ab2:	4c21      	ldr	r4, [pc, #132]	; (8011b38 <__pow5mult+0x98>)
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011aba:	f7ff fec8 	bl	801184e <__multadd>
 8011abe:	4607      	mov	r7, r0
 8011ac0:	10ad      	asrs	r5, r5, #2
 8011ac2:	d035      	beq.n	8011b30 <__pow5mult+0x90>
 8011ac4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011ac6:	b93c      	cbnz	r4, 8011ad8 <__pow5mult+0x38>
 8011ac8:	2010      	movs	r0, #16
 8011aca:	f7ff fe6d 	bl	80117a8 <malloc>
 8011ace:	6270      	str	r0, [r6, #36]	; 0x24
 8011ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ad4:	6004      	str	r4, [r0, #0]
 8011ad6:	60c4      	str	r4, [r0, #12]
 8011ad8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ae0:	b94c      	cbnz	r4, 8011af6 <__pow5mult+0x56>
 8011ae2:	f240 2171 	movw	r1, #625	; 0x271
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	f7ff ff3a 	bl	8011960 <__i2b>
 8011aec:	2300      	movs	r3, #0
 8011aee:	f8c8 0008 	str.w	r0, [r8, #8]
 8011af2:	4604      	mov	r4, r0
 8011af4:	6003      	str	r3, [r0, #0]
 8011af6:	f04f 0800 	mov.w	r8, #0
 8011afa:	07eb      	lsls	r3, r5, #31
 8011afc:	d50a      	bpl.n	8011b14 <__pow5mult+0x74>
 8011afe:	4639      	mov	r1, r7
 8011b00:	4622      	mov	r2, r4
 8011b02:	4630      	mov	r0, r6
 8011b04:	f7ff ff35 	bl	8011972 <__multiply>
 8011b08:	4639      	mov	r1, r7
 8011b0a:	4681      	mov	r9, r0
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f7ff fe87 	bl	8011820 <_Bfree>
 8011b12:	464f      	mov	r7, r9
 8011b14:	106d      	asrs	r5, r5, #1
 8011b16:	d00b      	beq.n	8011b30 <__pow5mult+0x90>
 8011b18:	6820      	ldr	r0, [r4, #0]
 8011b1a:	b938      	cbnz	r0, 8011b2c <__pow5mult+0x8c>
 8011b1c:	4622      	mov	r2, r4
 8011b1e:	4621      	mov	r1, r4
 8011b20:	4630      	mov	r0, r6
 8011b22:	f7ff ff26 	bl	8011972 <__multiply>
 8011b26:	6020      	str	r0, [r4, #0]
 8011b28:	f8c0 8000 	str.w	r8, [r0]
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	e7e4      	b.n	8011afa <__pow5mult+0x5a>
 8011b30:	4638      	mov	r0, r7
 8011b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b36:	bf00      	nop
 8011b38:	08012518 	.word	0x08012518

08011b3c <__lshift>:
 8011b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b40:	460c      	mov	r4, r1
 8011b42:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b46:	6923      	ldr	r3, [r4, #16]
 8011b48:	6849      	ldr	r1, [r1, #4]
 8011b4a:	eb0a 0903 	add.w	r9, sl, r3
 8011b4e:	68a3      	ldr	r3, [r4, #8]
 8011b50:	4607      	mov	r7, r0
 8011b52:	4616      	mov	r6, r2
 8011b54:	f109 0501 	add.w	r5, r9, #1
 8011b58:	42ab      	cmp	r3, r5
 8011b5a:	db32      	blt.n	8011bc2 <__lshift+0x86>
 8011b5c:	4638      	mov	r0, r7
 8011b5e:	f7ff fe2b 	bl	80117b8 <_Balloc>
 8011b62:	2300      	movs	r3, #0
 8011b64:	4680      	mov	r8, r0
 8011b66:	f100 0114 	add.w	r1, r0, #20
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	4553      	cmp	r3, sl
 8011b6e:	db2b      	blt.n	8011bc8 <__lshift+0x8c>
 8011b70:	6920      	ldr	r0, [r4, #16]
 8011b72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b76:	f104 0314 	add.w	r3, r4, #20
 8011b7a:	f016 021f 	ands.w	r2, r6, #31
 8011b7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b82:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b86:	d025      	beq.n	8011bd4 <__lshift+0x98>
 8011b88:	f1c2 0e20 	rsb	lr, r2, #32
 8011b8c:	2000      	movs	r0, #0
 8011b8e:	681e      	ldr	r6, [r3, #0]
 8011b90:	468a      	mov	sl, r1
 8011b92:	4096      	lsls	r6, r2
 8011b94:	4330      	orrs	r0, r6
 8011b96:	f84a 0b04 	str.w	r0, [sl], #4
 8011b9a:	f853 0b04 	ldr.w	r0, [r3], #4
 8011b9e:	459c      	cmp	ip, r3
 8011ba0:	fa20 f00e 	lsr.w	r0, r0, lr
 8011ba4:	d814      	bhi.n	8011bd0 <__lshift+0x94>
 8011ba6:	6048      	str	r0, [r1, #4]
 8011ba8:	b108      	cbz	r0, 8011bae <__lshift+0x72>
 8011baa:	f109 0502 	add.w	r5, r9, #2
 8011bae:	3d01      	subs	r5, #1
 8011bb0:	4638      	mov	r0, r7
 8011bb2:	f8c8 5010 	str.w	r5, [r8, #16]
 8011bb6:	4621      	mov	r1, r4
 8011bb8:	f7ff fe32 	bl	8011820 <_Bfree>
 8011bbc:	4640      	mov	r0, r8
 8011bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bc2:	3101      	adds	r1, #1
 8011bc4:	005b      	lsls	r3, r3, #1
 8011bc6:	e7c7      	b.n	8011b58 <__lshift+0x1c>
 8011bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	e7cd      	b.n	8011b6c <__lshift+0x30>
 8011bd0:	4651      	mov	r1, sl
 8011bd2:	e7dc      	b.n	8011b8e <__lshift+0x52>
 8011bd4:	3904      	subs	r1, #4
 8011bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bda:	f841 2f04 	str.w	r2, [r1, #4]!
 8011bde:	459c      	cmp	ip, r3
 8011be0:	d8f9      	bhi.n	8011bd6 <__lshift+0x9a>
 8011be2:	e7e4      	b.n	8011bae <__lshift+0x72>

08011be4 <__mcmp>:
 8011be4:	6903      	ldr	r3, [r0, #16]
 8011be6:	690a      	ldr	r2, [r1, #16]
 8011be8:	1a9b      	subs	r3, r3, r2
 8011bea:	b530      	push	{r4, r5, lr}
 8011bec:	d10c      	bne.n	8011c08 <__mcmp+0x24>
 8011bee:	0092      	lsls	r2, r2, #2
 8011bf0:	3014      	adds	r0, #20
 8011bf2:	3114      	adds	r1, #20
 8011bf4:	1884      	adds	r4, r0, r2
 8011bf6:	4411      	add	r1, r2
 8011bf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011bfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011c00:	4295      	cmp	r5, r2
 8011c02:	d003      	beq.n	8011c0c <__mcmp+0x28>
 8011c04:	d305      	bcc.n	8011c12 <__mcmp+0x2e>
 8011c06:	2301      	movs	r3, #1
 8011c08:	4618      	mov	r0, r3
 8011c0a:	bd30      	pop	{r4, r5, pc}
 8011c0c:	42a0      	cmp	r0, r4
 8011c0e:	d3f3      	bcc.n	8011bf8 <__mcmp+0x14>
 8011c10:	e7fa      	b.n	8011c08 <__mcmp+0x24>
 8011c12:	f04f 33ff 	mov.w	r3, #4294967295
 8011c16:	e7f7      	b.n	8011c08 <__mcmp+0x24>

08011c18 <__mdiff>:
 8011c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c1c:	460d      	mov	r5, r1
 8011c1e:	4607      	mov	r7, r0
 8011c20:	4611      	mov	r1, r2
 8011c22:	4628      	mov	r0, r5
 8011c24:	4614      	mov	r4, r2
 8011c26:	f7ff ffdd 	bl	8011be4 <__mcmp>
 8011c2a:	1e06      	subs	r6, r0, #0
 8011c2c:	d108      	bne.n	8011c40 <__mdiff+0x28>
 8011c2e:	4631      	mov	r1, r6
 8011c30:	4638      	mov	r0, r7
 8011c32:	f7ff fdc1 	bl	80117b8 <_Balloc>
 8011c36:	2301      	movs	r3, #1
 8011c38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c40:	bfa4      	itt	ge
 8011c42:	4623      	movge	r3, r4
 8011c44:	462c      	movge	r4, r5
 8011c46:	4638      	mov	r0, r7
 8011c48:	6861      	ldr	r1, [r4, #4]
 8011c4a:	bfa6      	itte	ge
 8011c4c:	461d      	movge	r5, r3
 8011c4e:	2600      	movge	r6, #0
 8011c50:	2601      	movlt	r6, #1
 8011c52:	f7ff fdb1 	bl	80117b8 <_Balloc>
 8011c56:	692b      	ldr	r3, [r5, #16]
 8011c58:	60c6      	str	r6, [r0, #12]
 8011c5a:	6926      	ldr	r6, [r4, #16]
 8011c5c:	f105 0914 	add.w	r9, r5, #20
 8011c60:	f104 0214 	add.w	r2, r4, #20
 8011c64:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011c68:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011c6c:	f100 0514 	add.w	r5, r0, #20
 8011c70:	f04f 0e00 	mov.w	lr, #0
 8011c74:	f852 ab04 	ldr.w	sl, [r2], #4
 8011c78:	f859 4b04 	ldr.w	r4, [r9], #4
 8011c7c:	fa1e f18a 	uxtah	r1, lr, sl
 8011c80:	b2a3      	uxth	r3, r4
 8011c82:	1ac9      	subs	r1, r1, r3
 8011c84:	0c23      	lsrs	r3, r4, #16
 8011c86:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011c8a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011c8e:	b289      	uxth	r1, r1
 8011c90:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011c94:	45c8      	cmp	r8, r9
 8011c96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011c9a:	4694      	mov	ip, r2
 8011c9c:	f845 3b04 	str.w	r3, [r5], #4
 8011ca0:	d8e8      	bhi.n	8011c74 <__mdiff+0x5c>
 8011ca2:	45bc      	cmp	ip, r7
 8011ca4:	d304      	bcc.n	8011cb0 <__mdiff+0x98>
 8011ca6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011caa:	b183      	cbz	r3, 8011cce <__mdiff+0xb6>
 8011cac:	6106      	str	r6, [r0, #16]
 8011cae:	e7c5      	b.n	8011c3c <__mdiff+0x24>
 8011cb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011cb4:	fa1e f381 	uxtah	r3, lr, r1
 8011cb8:	141a      	asrs	r2, r3, #16
 8011cba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011cc4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011cc8:	f845 3b04 	str.w	r3, [r5], #4
 8011ccc:	e7e9      	b.n	8011ca2 <__mdiff+0x8a>
 8011cce:	3e01      	subs	r6, #1
 8011cd0:	e7e9      	b.n	8011ca6 <__mdiff+0x8e>

08011cd2 <__d2b>:
 8011cd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cd6:	460e      	mov	r6, r1
 8011cd8:	2101      	movs	r1, #1
 8011cda:	ec59 8b10 	vmov	r8, r9, d0
 8011cde:	4615      	mov	r5, r2
 8011ce0:	f7ff fd6a 	bl	80117b8 <_Balloc>
 8011ce4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011ce8:	4607      	mov	r7, r0
 8011cea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011cee:	bb34      	cbnz	r4, 8011d3e <__d2b+0x6c>
 8011cf0:	9301      	str	r3, [sp, #4]
 8011cf2:	f1b8 0300 	subs.w	r3, r8, #0
 8011cf6:	d027      	beq.n	8011d48 <__d2b+0x76>
 8011cf8:	a802      	add	r0, sp, #8
 8011cfa:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011cfe:	f7ff fe00 	bl	8011902 <__lo0bits>
 8011d02:	9900      	ldr	r1, [sp, #0]
 8011d04:	b1f0      	cbz	r0, 8011d44 <__d2b+0x72>
 8011d06:	9a01      	ldr	r2, [sp, #4]
 8011d08:	f1c0 0320 	rsb	r3, r0, #32
 8011d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d10:	430b      	orrs	r3, r1
 8011d12:	40c2      	lsrs	r2, r0
 8011d14:	617b      	str	r3, [r7, #20]
 8011d16:	9201      	str	r2, [sp, #4]
 8011d18:	9b01      	ldr	r3, [sp, #4]
 8011d1a:	61bb      	str	r3, [r7, #24]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	bf14      	ite	ne
 8011d20:	2102      	movne	r1, #2
 8011d22:	2101      	moveq	r1, #1
 8011d24:	6139      	str	r1, [r7, #16]
 8011d26:	b1c4      	cbz	r4, 8011d5a <__d2b+0x88>
 8011d28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011d2c:	4404      	add	r4, r0
 8011d2e:	6034      	str	r4, [r6, #0]
 8011d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d34:	6028      	str	r0, [r5, #0]
 8011d36:	4638      	mov	r0, r7
 8011d38:	b003      	add	sp, #12
 8011d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d42:	e7d5      	b.n	8011cf0 <__d2b+0x1e>
 8011d44:	6179      	str	r1, [r7, #20]
 8011d46:	e7e7      	b.n	8011d18 <__d2b+0x46>
 8011d48:	a801      	add	r0, sp, #4
 8011d4a:	f7ff fdda 	bl	8011902 <__lo0bits>
 8011d4e:	9b01      	ldr	r3, [sp, #4]
 8011d50:	617b      	str	r3, [r7, #20]
 8011d52:	2101      	movs	r1, #1
 8011d54:	6139      	str	r1, [r7, #16]
 8011d56:	3020      	adds	r0, #32
 8011d58:	e7e5      	b.n	8011d26 <__d2b+0x54>
 8011d5a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011d5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d62:	6030      	str	r0, [r6, #0]
 8011d64:	6918      	ldr	r0, [r3, #16]
 8011d66:	f7ff fdad 	bl	80118c4 <__hi0bits>
 8011d6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011d6e:	e7e1      	b.n	8011d34 <__d2b+0x62>

08011d70 <_calloc_r>:
 8011d70:	b538      	push	{r3, r4, r5, lr}
 8011d72:	fb02 f401 	mul.w	r4, r2, r1
 8011d76:	4621      	mov	r1, r4
 8011d78:	f000 f856 	bl	8011e28 <_malloc_r>
 8011d7c:	4605      	mov	r5, r0
 8011d7e:	b118      	cbz	r0, 8011d88 <_calloc_r+0x18>
 8011d80:	4622      	mov	r2, r4
 8011d82:	2100      	movs	r1, #0
 8011d84:	f7fd ff3d 	bl	800fc02 <memset>
 8011d88:	4628      	mov	r0, r5
 8011d8a:	bd38      	pop	{r3, r4, r5, pc}

08011d8c <_free_r>:
 8011d8c:	b538      	push	{r3, r4, r5, lr}
 8011d8e:	4605      	mov	r5, r0
 8011d90:	2900      	cmp	r1, #0
 8011d92:	d045      	beq.n	8011e20 <_free_r+0x94>
 8011d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d98:	1f0c      	subs	r4, r1, #4
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	bfb8      	it	lt
 8011d9e:	18e4      	addlt	r4, r4, r3
 8011da0:	f000 fa98 	bl	80122d4 <__malloc_lock>
 8011da4:	4a1f      	ldr	r2, [pc, #124]	; (8011e24 <_free_r+0x98>)
 8011da6:	6813      	ldr	r3, [r2, #0]
 8011da8:	4610      	mov	r0, r2
 8011daa:	b933      	cbnz	r3, 8011dba <_free_r+0x2e>
 8011dac:	6063      	str	r3, [r4, #4]
 8011dae:	6014      	str	r4, [r2, #0]
 8011db0:	4628      	mov	r0, r5
 8011db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011db6:	f000 ba8e 	b.w	80122d6 <__malloc_unlock>
 8011dba:	42a3      	cmp	r3, r4
 8011dbc:	d90c      	bls.n	8011dd8 <_free_r+0x4c>
 8011dbe:	6821      	ldr	r1, [r4, #0]
 8011dc0:	1862      	adds	r2, r4, r1
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	bf04      	itt	eq
 8011dc6:	681a      	ldreq	r2, [r3, #0]
 8011dc8:	685b      	ldreq	r3, [r3, #4]
 8011dca:	6063      	str	r3, [r4, #4]
 8011dcc:	bf04      	itt	eq
 8011dce:	1852      	addeq	r2, r2, r1
 8011dd0:	6022      	streq	r2, [r4, #0]
 8011dd2:	6004      	str	r4, [r0, #0]
 8011dd4:	e7ec      	b.n	8011db0 <_free_r+0x24>
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	685a      	ldr	r2, [r3, #4]
 8011dda:	b10a      	cbz	r2, 8011de0 <_free_r+0x54>
 8011ddc:	42a2      	cmp	r2, r4
 8011dde:	d9fa      	bls.n	8011dd6 <_free_r+0x4a>
 8011de0:	6819      	ldr	r1, [r3, #0]
 8011de2:	1858      	adds	r0, r3, r1
 8011de4:	42a0      	cmp	r0, r4
 8011de6:	d10b      	bne.n	8011e00 <_free_r+0x74>
 8011de8:	6820      	ldr	r0, [r4, #0]
 8011dea:	4401      	add	r1, r0
 8011dec:	1858      	adds	r0, r3, r1
 8011dee:	4282      	cmp	r2, r0
 8011df0:	6019      	str	r1, [r3, #0]
 8011df2:	d1dd      	bne.n	8011db0 <_free_r+0x24>
 8011df4:	6810      	ldr	r0, [r2, #0]
 8011df6:	6852      	ldr	r2, [r2, #4]
 8011df8:	605a      	str	r2, [r3, #4]
 8011dfa:	4401      	add	r1, r0
 8011dfc:	6019      	str	r1, [r3, #0]
 8011dfe:	e7d7      	b.n	8011db0 <_free_r+0x24>
 8011e00:	d902      	bls.n	8011e08 <_free_r+0x7c>
 8011e02:	230c      	movs	r3, #12
 8011e04:	602b      	str	r3, [r5, #0]
 8011e06:	e7d3      	b.n	8011db0 <_free_r+0x24>
 8011e08:	6820      	ldr	r0, [r4, #0]
 8011e0a:	1821      	adds	r1, r4, r0
 8011e0c:	428a      	cmp	r2, r1
 8011e0e:	bf04      	itt	eq
 8011e10:	6811      	ldreq	r1, [r2, #0]
 8011e12:	6852      	ldreq	r2, [r2, #4]
 8011e14:	6062      	str	r2, [r4, #4]
 8011e16:	bf04      	itt	eq
 8011e18:	1809      	addeq	r1, r1, r0
 8011e1a:	6021      	streq	r1, [r4, #0]
 8011e1c:	605c      	str	r4, [r3, #4]
 8011e1e:	e7c7      	b.n	8011db0 <_free_r+0x24>
 8011e20:	bd38      	pop	{r3, r4, r5, pc}
 8011e22:	bf00      	nop
 8011e24:	20000418 	.word	0x20000418

08011e28 <_malloc_r>:
 8011e28:	b570      	push	{r4, r5, r6, lr}
 8011e2a:	1ccd      	adds	r5, r1, #3
 8011e2c:	f025 0503 	bic.w	r5, r5, #3
 8011e30:	3508      	adds	r5, #8
 8011e32:	2d0c      	cmp	r5, #12
 8011e34:	bf38      	it	cc
 8011e36:	250c      	movcc	r5, #12
 8011e38:	2d00      	cmp	r5, #0
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	db01      	blt.n	8011e42 <_malloc_r+0x1a>
 8011e3e:	42a9      	cmp	r1, r5
 8011e40:	d903      	bls.n	8011e4a <_malloc_r+0x22>
 8011e42:	230c      	movs	r3, #12
 8011e44:	6033      	str	r3, [r6, #0]
 8011e46:	2000      	movs	r0, #0
 8011e48:	bd70      	pop	{r4, r5, r6, pc}
 8011e4a:	f000 fa43 	bl	80122d4 <__malloc_lock>
 8011e4e:	4a21      	ldr	r2, [pc, #132]	; (8011ed4 <_malloc_r+0xac>)
 8011e50:	6814      	ldr	r4, [r2, #0]
 8011e52:	4621      	mov	r1, r4
 8011e54:	b991      	cbnz	r1, 8011e7c <_malloc_r+0x54>
 8011e56:	4c20      	ldr	r4, [pc, #128]	; (8011ed8 <_malloc_r+0xb0>)
 8011e58:	6823      	ldr	r3, [r4, #0]
 8011e5a:	b91b      	cbnz	r3, 8011e64 <_malloc_r+0x3c>
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f000 f97d 	bl	801215c <_sbrk_r>
 8011e62:	6020      	str	r0, [r4, #0]
 8011e64:	4629      	mov	r1, r5
 8011e66:	4630      	mov	r0, r6
 8011e68:	f000 f978 	bl	801215c <_sbrk_r>
 8011e6c:	1c43      	adds	r3, r0, #1
 8011e6e:	d124      	bne.n	8011eba <_malloc_r+0x92>
 8011e70:	230c      	movs	r3, #12
 8011e72:	6033      	str	r3, [r6, #0]
 8011e74:	4630      	mov	r0, r6
 8011e76:	f000 fa2e 	bl	80122d6 <__malloc_unlock>
 8011e7a:	e7e4      	b.n	8011e46 <_malloc_r+0x1e>
 8011e7c:	680b      	ldr	r3, [r1, #0]
 8011e7e:	1b5b      	subs	r3, r3, r5
 8011e80:	d418      	bmi.n	8011eb4 <_malloc_r+0x8c>
 8011e82:	2b0b      	cmp	r3, #11
 8011e84:	d90f      	bls.n	8011ea6 <_malloc_r+0x7e>
 8011e86:	600b      	str	r3, [r1, #0]
 8011e88:	50cd      	str	r5, [r1, r3]
 8011e8a:	18cc      	adds	r4, r1, r3
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f000 fa22 	bl	80122d6 <__malloc_unlock>
 8011e92:	f104 000b 	add.w	r0, r4, #11
 8011e96:	1d23      	adds	r3, r4, #4
 8011e98:	f020 0007 	bic.w	r0, r0, #7
 8011e9c:	1ac3      	subs	r3, r0, r3
 8011e9e:	d0d3      	beq.n	8011e48 <_malloc_r+0x20>
 8011ea0:	425a      	negs	r2, r3
 8011ea2:	50e2      	str	r2, [r4, r3]
 8011ea4:	e7d0      	b.n	8011e48 <_malloc_r+0x20>
 8011ea6:	428c      	cmp	r4, r1
 8011ea8:	684b      	ldr	r3, [r1, #4]
 8011eaa:	bf16      	itet	ne
 8011eac:	6063      	strne	r3, [r4, #4]
 8011eae:	6013      	streq	r3, [r2, #0]
 8011eb0:	460c      	movne	r4, r1
 8011eb2:	e7eb      	b.n	8011e8c <_malloc_r+0x64>
 8011eb4:	460c      	mov	r4, r1
 8011eb6:	6849      	ldr	r1, [r1, #4]
 8011eb8:	e7cc      	b.n	8011e54 <_malloc_r+0x2c>
 8011eba:	1cc4      	adds	r4, r0, #3
 8011ebc:	f024 0403 	bic.w	r4, r4, #3
 8011ec0:	42a0      	cmp	r0, r4
 8011ec2:	d005      	beq.n	8011ed0 <_malloc_r+0xa8>
 8011ec4:	1a21      	subs	r1, r4, r0
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	f000 f948 	bl	801215c <_sbrk_r>
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d0cf      	beq.n	8011e70 <_malloc_r+0x48>
 8011ed0:	6025      	str	r5, [r4, #0]
 8011ed2:	e7db      	b.n	8011e8c <_malloc_r+0x64>
 8011ed4:	20000418 	.word	0x20000418
 8011ed8:	2000041c 	.word	0x2000041c

08011edc <__sfputc_r>:
 8011edc:	6893      	ldr	r3, [r2, #8]
 8011ede:	3b01      	subs	r3, #1
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	b410      	push	{r4}
 8011ee4:	6093      	str	r3, [r2, #8]
 8011ee6:	da08      	bge.n	8011efa <__sfputc_r+0x1e>
 8011ee8:	6994      	ldr	r4, [r2, #24]
 8011eea:	42a3      	cmp	r3, r4
 8011eec:	db01      	blt.n	8011ef2 <__sfputc_r+0x16>
 8011eee:	290a      	cmp	r1, #10
 8011ef0:	d103      	bne.n	8011efa <__sfputc_r+0x1e>
 8011ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ef6:	f7fe bb65 	b.w	80105c4 <__swbuf_r>
 8011efa:	6813      	ldr	r3, [r2, #0]
 8011efc:	1c58      	adds	r0, r3, #1
 8011efe:	6010      	str	r0, [r2, #0]
 8011f00:	7019      	strb	r1, [r3, #0]
 8011f02:	4608      	mov	r0, r1
 8011f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f08:	4770      	bx	lr

08011f0a <__sfputs_r>:
 8011f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f0c:	4606      	mov	r6, r0
 8011f0e:	460f      	mov	r7, r1
 8011f10:	4614      	mov	r4, r2
 8011f12:	18d5      	adds	r5, r2, r3
 8011f14:	42ac      	cmp	r4, r5
 8011f16:	d101      	bne.n	8011f1c <__sfputs_r+0x12>
 8011f18:	2000      	movs	r0, #0
 8011f1a:	e007      	b.n	8011f2c <__sfputs_r+0x22>
 8011f1c:	463a      	mov	r2, r7
 8011f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f22:	4630      	mov	r0, r6
 8011f24:	f7ff ffda 	bl	8011edc <__sfputc_r>
 8011f28:	1c43      	adds	r3, r0, #1
 8011f2a:	d1f3      	bne.n	8011f14 <__sfputs_r+0xa>
 8011f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f30 <_vfiprintf_r>:
 8011f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f34:	460c      	mov	r4, r1
 8011f36:	b09d      	sub	sp, #116	; 0x74
 8011f38:	4617      	mov	r7, r2
 8011f3a:	461d      	mov	r5, r3
 8011f3c:	4606      	mov	r6, r0
 8011f3e:	b118      	cbz	r0, 8011f48 <_vfiprintf_r+0x18>
 8011f40:	6983      	ldr	r3, [r0, #24]
 8011f42:	b90b      	cbnz	r3, 8011f48 <_vfiprintf_r+0x18>
 8011f44:	f7ff fb34 	bl	80115b0 <__sinit>
 8011f48:	4b7c      	ldr	r3, [pc, #496]	; (801213c <_vfiprintf_r+0x20c>)
 8011f4a:	429c      	cmp	r4, r3
 8011f4c:	d158      	bne.n	8012000 <_vfiprintf_r+0xd0>
 8011f4e:	6874      	ldr	r4, [r6, #4]
 8011f50:	89a3      	ldrh	r3, [r4, #12]
 8011f52:	0718      	lsls	r0, r3, #28
 8011f54:	d55e      	bpl.n	8012014 <_vfiprintf_r+0xe4>
 8011f56:	6923      	ldr	r3, [r4, #16]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d05b      	beq.n	8012014 <_vfiprintf_r+0xe4>
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f60:	2320      	movs	r3, #32
 8011f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f66:	2330      	movs	r3, #48	; 0x30
 8011f68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f6c:	9503      	str	r5, [sp, #12]
 8011f6e:	f04f 0b01 	mov.w	fp, #1
 8011f72:	46b8      	mov	r8, r7
 8011f74:	4645      	mov	r5, r8
 8011f76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011f7a:	b10b      	cbz	r3, 8011f80 <_vfiprintf_r+0x50>
 8011f7c:	2b25      	cmp	r3, #37	; 0x25
 8011f7e:	d154      	bne.n	801202a <_vfiprintf_r+0xfa>
 8011f80:	ebb8 0a07 	subs.w	sl, r8, r7
 8011f84:	d00b      	beq.n	8011f9e <_vfiprintf_r+0x6e>
 8011f86:	4653      	mov	r3, sl
 8011f88:	463a      	mov	r2, r7
 8011f8a:	4621      	mov	r1, r4
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	f7ff ffbc 	bl	8011f0a <__sfputs_r>
 8011f92:	3001      	adds	r0, #1
 8011f94:	f000 80c2 	beq.w	801211c <_vfiprintf_r+0x1ec>
 8011f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f9a:	4453      	add	r3, sl
 8011f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8011f9e:	f898 3000 	ldrb.w	r3, [r8]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 80ba 	beq.w	801211c <_vfiprintf_r+0x1ec>
 8011fa8:	2300      	movs	r3, #0
 8011faa:	f04f 32ff 	mov.w	r2, #4294967295
 8011fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fb2:	9304      	str	r3, [sp, #16]
 8011fb4:	9307      	str	r3, [sp, #28]
 8011fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fba:	931a      	str	r3, [sp, #104]	; 0x68
 8011fbc:	46a8      	mov	r8, r5
 8011fbe:	2205      	movs	r2, #5
 8011fc0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011fc4:	485e      	ldr	r0, [pc, #376]	; (8012140 <_vfiprintf_r+0x210>)
 8011fc6:	f7f6 f843 	bl	8008050 <memchr>
 8011fca:	9b04      	ldr	r3, [sp, #16]
 8011fcc:	bb78      	cbnz	r0, 801202e <_vfiprintf_r+0xfe>
 8011fce:	06d9      	lsls	r1, r3, #27
 8011fd0:	bf44      	itt	mi
 8011fd2:	2220      	movmi	r2, #32
 8011fd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011fd8:	071a      	lsls	r2, r3, #28
 8011fda:	bf44      	itt	mi
 8011fdc:	222b      	movmi	r2, #43	; 0x2b
 8011fde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011fe2:	782a      	ldrb	r2, [r5, #0]
 8011fe4:	2a2a      	cmp	r2, #42	; 0x2a
 8011fe6:	d02a      	beq.n	801203e <_vfiprintf_r+0x10e>
 8011fe8:	9a07      	ldr	r2, [sp, #28]
 8011fea:	46a8      	mov	r8, r5
 8011fec:	2000      	movs	r0, #0
 8011fee:	250a      	movs	r5, #10
 8011ff0:	4641      	mov	r1, r8
 8011ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ff6:	3b30      	subs	r3, #48	; 0x30
 8011ff8:	2b09      	cmp	r3, #9
 8011ffa:	d969      	bls.n	80120d0 <_vfiprintf_r+0x1a0>
 8011ffc:	b360      	cbz	r0, 8012058 <_vfiprintf_r+0x128>
 8011ffe:	e024      	b.n	801204a <_vfiprintf_r+0x11a>
 8012000:	4b50      	ldr	r3, [pc, #320]	; (8012144 <_vfiprintf_r+0x214>)
 8012002:	429c      	cmp	r4, r3
 8012004:	d101      	bne.n	801200a <_vfiprintf_r+0xda>
 8012006:	68b4      	ldr	r4, [r6, #8]
 8012008:	e7a2      	b.n	8011f50 <_vfiprintf_r+0x20>
 801200a:	4b4f      	ldr	r3, [pc, #316]	; (8012148 <_vfiprintf_r+0x218>)
 801200c:	429c      	cmp	r4, r3
 801200e:	bf08      	it	eq
 8012010:	68f4      	ldreq	r4, [r6, #12]
 8012012:	e79d      	b.n	8011f50 <_vfiprintf_r+0x20>
 8012014:	4621      	mov	r1, r4
 8012016:	4630      	mov	r0, r6
 8012018:	f7fe fb26 	bl	8010668 <__swsetup_r>
 801201c:	2800      	cmp	r0, #0
 801201e:	d09d      	beq.n	8011f5c <_vfiprintf_r+0x2c>
 8012020:	f04f 30ff 	mov.w	r0, #4294967295
 8012024:	b01d      	add	sp, #116	; 0x74
 8012026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801202a:	46a8      	mov	r8, r5
 801202c:	e7a2      	b.n	8011f74 <_vfiprintf_r+0x44>
 801202e:	4a44      	ldr	r2, [pc, #272]	; (8012140 <_vfiprintf_r+0x210>)
 8012030:	1a80      	subs	r0, r0, r2
 8012032:	fa0b f000 	lsl.w	r0, fp, r0
 8012036:	4318      	orrs	r0, r3
 8012038:	9004      	str	r0, [sp, #16]
 801203a:	4645      	mov	r5, r8
 801203c:	e7be      	b.n	8011fbc <_vfiprintf_r+0x8c>
 801203e:	9a03      	ldr	r2, [sp, #12]
 8012040:	1d11      	adds	r1, r2, #4
 8012042:	6812      	ldr	r2, [r2, #0]
 8012044:	9103      	str	r1, [sp, #12]
 8012046:	2a00      	cmp	r2, #0
 8012048:	db01      	blt.n	801204e <_vfiprintf_r+0x11e>
 801204a:	9207      	str	r2, [sp, #28]
 801204c:	e004      	b.n	8012058 <_vfiprintf_r+0x128>
 801204e:	4252      	negs	r2, r2
 8012050:	f043 0302 	orr.w	r3, r3, #2
 8012054:	9207      	str	r2, [sp, #28]
 8012056:	9304      	str	r3, [sp, #16]
 8012058:	f898 3000 	ldrb.w	r3, [r8]
 801205c:	2b2e      	cmp	r3, #46	; 0x2e
 801205e:	d10e      	bne.n	801207e <_vfiprintf_r+0x14e>
 8012060:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012064:	2b2a      	cmp	r3, #42	; 0x2a
 8012066:	d138      	bne.n	80120da <_vfiprintf_r+0x1aa>
 8012068:	9b03      	ldr	r3, [sp, #12]
 801206a:	1d1a      	adds	r2, r3, #4
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	9203      	str	r2, [sp, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	bfb8      	it	lt
 8012074:	f04f 33ff 	movlt.w	r3, #4294967295
 8012078:	f108 0802 	add.w	r8, r8, #2
 801207c:	9305      	str	r3, [sp, #20]
 801207e:	4d33      	ldr	r5, [pc, #204]	; (801214c <_vfiprintf_r+0x21c>)
 8012080:	f898 1000 	ldrb.w	r1, [r8]
 8012084:	2203      	movs	r2, #3
 8012086:	4628      	mov	r0, r5
 8012088:	f7f5 ffe2 	bl	8008050 <memchr>
 801208c:	b140      	cbz	r0, 80120a0 <_vfiprintf_r+0x170>
 801208e:	2340      	movs	r3, #64	; 0x40
 8012090:	1b40      	subs	r0, r0, r5
 8012092:	fa03 f000 	lsl.w	r0, r3, r0
 8012096:	9b04      	ldr	r3, [sp, #16]
 8012098:	4303      	orrs	r3, r0
 801209a:	f108 0801 	add.w	r8, r8, #1
 801209e:	9304      	str	r3, [sp, #16]
 80120a0:	f898 1000 	ldrb.w	r1, [r8]
 80120a4:	482a      	ldr	r0, [pc, #168]	; (8012150 <_vfiprintf_r+0x220>)
 80120a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120aa:	2206      	movs	r2, #6
 80120ac:	f108 0701 	add.w	r7, r8, #1
 80120b0:	f7f5 ffce 	bl	8008050 <memchr>
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d037      	beq.n	8012128 <_vfiprintf_r+0x1f8>
 80120b8:	4b26      	ldr	r3, [pc, #152]	; (8012154 <_vfiprintf_r+0x224>)
 80120ba:	bb1b      	cbnz	r3, 8012104 <_vfiprintf_r+0x1d4>
 80120bc:	9b03      	ldr	r3, [sp, #12]
 80120be:	3307      	adds	r3, #7
 80120c0:	f023 0307 	bic.w	r3, r3, #7
 80120c4:	3308      	adds	r3, #8
 80120c6:	9303      	str	r3, [sp, #12]
 80120c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ca:	444b      	add	r3, r9
 80120cc:	9309      	str	r3, [sp, #36]	; 0x24
 80120ce:	e750      	b.n	8011f72 <_vfiprintf_r+0x42>
 80120d0:	fb05 3202 	mla	r2, r5, r2, r3
 80120d4:	2001      	movs	r0, #1
 80120d6:	4688      	mov	r8, r1
 80120d8:	e78a      	b.n	8011ff0 <_vfiprintf_r+0xc0>
 80120da:	2300      	movs	r3, #0
 80120dc:	f108 0801 	add.w	r8, r8, #1
 80120e0:	9305      	str	r3, [sp, #20]
 80120e2:	4619      	mov	r1, r3
 80120e4:	250a      	movs	r5, #10
 80120e6:	4640      	mov	r0, r8
 80120e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120ec:	3a30      	subs	r2, #48	; 0x30
 80120ee:	2a09      	cmp	r2, #9
 80120f0:	d903      	bls.n	80120fa <_vfiprintf_r+0x1ca>
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d0c3      	beq.n	801207e <_vfiprintf_r+0x14e>
 80120f6:	9105      	str	r1, [sp, #20]
 80120f8:	e7c1      	b.n	801207e <_vfiprintf_r+0x14e>
 80120fa:	fb05 2101 	mla	r1, r5, r1, r2
 80120fe:	2301      	movs	r3, #1
 8012100:	4680      	mov	r8, r0
 8012102:	e7f0      	b.n	80120e6 <_vfiprintf_r+0x1b6>
 8012104:	ab03      	add	r3, sp, #12
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	4622      	mov	r2, r4
 801210a:	4b13      	ldr	r3, [pc, #76]	; (8012158 <_vfiprintf_r+0x228>)
 801210c:	a904      	add	r1, sp, #16
 801210e:	4630      	mov	r0, r6
 8012110:	f7fd fe14 	bl	800fd3c <_printf_float>
 8012114:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012118:	4681      	mov	r9, r0
 801211a:	d1d5      	bne.n	80120c8 <_vfiprintf_r+0x198>
 801211c:	89a3      	ldrh	r3, [r4, #12]
 801211e:	065b      	lsls	r3, r3, #25
 8012120:	f53f af7e 	bmi.w	8012020 <_vfiprintf_r+0xf0>
 8012124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012126:	e77d      	b.n	8012024 <_vfiprintf_r+0xf4>
 8012128:	ab03      	add	r3, sp, #12
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	4622      	mov	r2, r4
 801212e:	4b0a      	ldr	r3, [pc, #40]	; (8012158 <_vfiprintf_r+0x228>)
 8012130:	a904      	add	r1, sp, #16
 8012132:	4630      	mov	r0, r6
 8012134:	f7fe f8b8 	bl	80102a8 <_printf_i>
 8012138:	e7ec      	b.n	8012114 <_vfiprintf_r+0x1e4>
 801213a:	bf00      	nop
 801213c:	080123e8 	.word	0x080123e8
 8012140:	08012524 	.word	0x08012524
 8012144:	08012408 	.word	0x08012408
 8012148:	080123c8 	.word	0x080123c8
 801214c:	0801252a 	.word	0x0801252a
 8012150:	0801252e 	.word	0x0801252e
 8012154:	0800fd3d 	.word	0x0800fd3d
 8012158:	08011f0b 	.word	0x08011f0b

0801215c <_sbrk_r>:
 801215c:	b538      	push	{r3, r4, r5, lr}
 801215e:	4c06      	ldr	r4, [pc, #24]	; (8012178 <_sbrk_r+0x1c>)
 8012160:	2300      	movs	r3, #0
 8012162:	4605      	mov	r5, r0
 8012164:	4608      	mov	r0, r1
 8012166:	6023      	str	r3, [r4, #0]
 8012168:	f7f8 ff92 	bl	800b090 <_sbrk>
 801216c:	1c43      	adds	r3, r0, #1
 801216e:	d102      	bne.n	8012176 <_sbrk_r+0x1a>
 8012170:	6823      	ldr	r3, [r4, #0]
 8012172:	b103      	cbz	r3, 8012176 <_sbrk_r+0x1a>
 8012174:	602b      	str	r3, [r5, #0]
 8012176:	bd38      	pop	{r3, r4, r5, pc}
 8012178:	200007b0 	.word	0x200007b0

0801217c <__sread>:
 801217c:	b510      	push	{r4, lr}
 801217e:	460c      	mov	r4, r1
 8012180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012184:	f000 f8a8 	bl	80122d8 <_read_r>
 8012188:	2800      	cmp	r0, #0
 801218a:	bfab      	itete	ge
 801218c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801218e:	89a3      	ldrhlt	r3, [r4, #12]
 8012190:	181b      	addge	r3, r3, r0
 8012192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012196:	bfac      	ite	ge
 8012198:	6563      	strge	r3, [r4, #84]	; 0x54
 801219a:	81a3      	strhlt	r3, [r4, #12]
 801219c:	bd10      	pop	{r4, pc}

0801219e <__swrite>:
 801219e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a2:	461f      	mov	r7, r3
 80121a4:	898b      	ldrh	r3, [r1, #12]
 80121a6:	05db      	lsls	r3, r3, #23
 80121a8:	4605      	mov	r5, r0
 80121aa:	460c      	mov	r4, r1
 80121ac:	4616      	mov	r6, r2
 80121ae:	d505      	bpl.n	80121bc <__swrite+0x1e>
 80121b0:	2302      	movs	r3, #2
 80121b2:	2200      	movs	r2, #0
 80121b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121b8:	f000 f868 	bl	801228c <_lseek_r>
 80121bc:	89a3      	ldrh	r3, [r4, #12]
 80121be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121c6:	81a3      	strh	r3, [r4, #12]
 80121c8:	4632      	mov	r2, r6
 80121ca:	463b      	mov	r3, r7
 80121cc:	4628      	mov	r0, r5
 80121ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121d2:	f000 b817 	b.w	8012204 <_write_r>

080121d6 <__sseek>:
 80121d6:	b510      	push	{r4, lr}
 80121d8:	460c      	mov	r4, r1
 80121da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121de:	f000 f855 	bl	801228c <_lseek_r>
 80121e2:	1c43      	adds	r3, r0, #1
 80121e4:	89a3      	ldrh	r3, [r4, #12]
 80121e6:	bf15      	itete	ne
 80121e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80121ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80121ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80121f2:	81a3      	strheq	r3, [r4, #12]
 80121f4:	bf18      	it	ne
 80121f6:	81a3      	strhne	r3, [r4, #12]
 80121f8:	bd10      	pop	{r4, pc}

080121fa <__sclose>:
 80121fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121fe:	f000 b813 	b.w	8012228 <_close_r>
	...

08012204 <_write_r>:
 8012204:	b538      	push	{r3, r4, r5, lr}
 8012206:	4c07      	ldr	r4, [pc, #28]	; (8012224 <_write_r+0x20>)
 8012208:	4605      	mov	r5, r0
 801220a:	4608      	mov	r0, r1
 801220c:	4611      	mov	r1, r2
 801220e:	2200      	movs	r2, #0
 8012210:	6022      	str	r2, [r4, #0]
 8012212:	461a      	mov	r2, r3
 8012214:	f7f8 feeb 	bl	800afee <_write>
 8012218:	1c43      	adds	r3, r0, #1
 801221a:	d102      	bne.n	8012222 <_write_r+0x1e>
 801221c:	6823      	ldr	r3, [r4, #0]
 801221e:	b103      	cbz	r3, 8012222 <_write_r+0x1e>
 8012220:	602b      	str	r3, [r5, #0]
 8012222:	bd38      	pop	{r3, r4, r5, pc}
 8012224:	200007b0 	.word	0x200007b0

08012228 <_close_r>:
 8012228:	b538      	push	{r3, r4, r5, lr}
 801222a:	4c06      	ldr	r4, [pc, #24]	; (8012244 <_close_r+0x1c>)
 801222c:	2300      	movs	r3, #0
 801222e:	4605      	mov	r5, r0
 8012230:	4608      	mov	r0, r1
 8012232:	6023      	str	r3, [r4, #0]
 8012234:	f7f8 fef7 	bl	800b026 <_close>
 8012238:	1c43      	adds	r3, r0, #1
 801223a:	d102      	bne.n	8012242 <_close_r+0x1a>
 801223c:	6823      	ldr	r3, [r4, #0]
 801223e:	b103      	cbz	r3, 8012242 <_close_r+0x1a>
 8012240:	602b      	str	r3, [r5, #0]
 8012242:	bd38      	pop	{r3, r4, r5, pc}
 8012244:	200007b0 	.word	0x200007b0

08012248 <_fstat_r>:
 8012248:	b538      	push	{r3, r4, r5, lr}
 801224a:	4c07      	ldr	r4, [pc, #28]	; (8012268 <_fstat_r+0x20>)
 801224c:	2300      	movs	r3, #0
 801224e:	4605      	mov	r5, r0
 8012250:	4608      	mov	r0, r1
 8012252:	4611      	mov	r1, r2
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	f7f8 fef2 	bl	800b03e <_fstat>
 801225a:	1c43      	adds	r3, r0, #1
 801225c:	d102      	bne.n	8012264 <_fstat_r+0x1c>
 801225e:	6823      	ldr	r3, [r4, #0]
 8012260:	b103      	cbz	r3, 8012264 <_fstat_r+0x1c>
 8012262:	602b      	str	r3, [r5, #0]
 8012264:	bd38      	pop	{r3, r4, r5, pc}
 8012266:	bf00      	nop
 8012268:	200007b0 	.word	0x200007b0

0801226c <_isatty_r>:
 801226c:	b538      	push	{r3, r4, r5, lr}
 801226e:	4c06      	ldr	r4, [pc, #24]	; (8012288 <_isatty_r+0x1c>)
 8012270:	2300      	movs	r3, #0
 8012272:	4605      	mov	r5, r0
 8012274:	4608      	mov	r0, r1
 8012276:	6023      	str	r3, [r4, #0]
 8012278:	f7f8 fef1 	bl	800b05e <_isatty>
 801227c:	1c43      	adds	r3, r0, #1
 801227e:	d102      	bne.n	8012286 <_isatty_r+0x1a>
 8012280:	6823      	ldr	r3, [r4, #0]
 8012282:	b103      	cbz	r3, 8012286 <_isatty_r+0x1a>
 8012284:	602b      	str	r3, [r5, #0]
 8012286:	bd38      	pop	{r3, r4, r5, pc}
 8012288:	200007b0 	.word	0x200007b0

0801228c <_lseek_r>:
 801228c:	b538      	push	{r3, r4, r5, lr}
 801228e:	4c07      	ldr	r4, [pc, #28]	; (80122ac <_lseek_r+0x20>)
 8012290:	4605      	mov	r5, r0
 8012292:	4608      	mov	r0, r1
 8012294:	4611      	mov	r1, r2
 8012296:	2200      	movs	r2, #0
 8012298:	6022      	str	r2, [r4, #0]
 801229a:	461a      	mov	r2, r3
 801229c:	f7f8 feea 	bl	800b074 <_lseek>
 80122a0:	1c43      	adds	r3, r0, #1
 80122a2:	d102      	bne.n	80122aa <_lseek_r+0x1e>
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	b103      	cbz	r3, 80122aa <_lseek_r+0x1e>
 80122a8:	602b      	str	r3, [r5, #0]
 80122aa:	bd38      	pop	{r3, r4, r5, pc}
 80122ac:	200007b0 	.word	0x200007b0

080122b0 <__ascii_mbtowc>:
 80122b0:	b082      	sub	sp, #8
 80122b2:	b901      	cbnz	r1, 80122b6 <__ascii_mbtowc+0x6>
 80122b4:	a901      	add	r1, sp, #4
 80122b6:	b142      	cbz	r2, 80122ca <__ascii_mbtowc+0x1a>
 80122b8:	b14b      	cbz	r3, 80122ce <__ascii_mbtowc+0x1e>
 80122ba:	7813      	ldrb	r3, [r2, #0]
 80122bc:	600b      	str	r3, [r1, #0]
 80122be:	7812      	ldrb	r2, [r2, #0]
 80122c0:	1c10      	adds	r0, r2, #0
 80122c2:	bf18      	it	ne
 80122c4:	2001      	movne	r0, #1
 80122c6:	b002      	add	sp, #8
 80122c8:	4770      	bx	lr
 80122ca:	4610      	mov	r0, r2
 80122cc:	e7fb      	b.n	80122c6 <__ascii_mbtowc+0x16>
 80122ce:	f06f 0001 	mvn.w	r0, #1
 80122d2:	e7f8      	b.n	80122c6 <__ascii_mbtowc+0x16>

080122d4 <__malloc_lock>:
 80122d4:	4770      	bx	lr

080122d6 <__malloc_unlock>:
 80122d6:	4770      	bx	lr

080122d8 <_read_r>:
 80122d8:	b538      	push	{r3, r4, r5, lr}
 80122da:	4c07      	ldr	r4, [pc, #28]	; (80122f8 <_read_r+0x20>)
 80122dc:	4605      	mov	r5, r0
 80122de:	4608      	mov	r0, r1
 80122e0:	4611      	mov	r1, r2
 80122e2:	2200      	movs	r2, #0
 80122e4:	6022      	str	r2, [r4, #0]
 80122e6:	461a      	mov	r2, r3
 80122e8:	f7f8 fe64 	bl	800afb4 <_read>
 80122ec:	1c43      	adds	r3, r0, #1
 80122ee:	d102      	bne.n	80122f6 <_read_r+0x1e>
 80122f0:	6823      	ldr	r3, [r4, #0]
 80122f2:	b103      	cbz	r3, 80122f6 <_read_r+0x1e>
 80122f4:	602b      	str	r3, [r5, #0]
 80122f6:	bd38      	pop	{r3, r4, r5, pc}
 80122f8:	200007b0 	.word	0x200007b0

080122fc <__ascii_wctomb>:
 80122fc:	b149      	cbz	r1, 8012312 <__ascii_wctomb+0x16>
 80122fe:	2aff      	cmp	r2, #255	; 0xff
 8012300:	bf85      	ittet	hi
 8012302:	238a      	movhi	r3, #138	; 0x8a
 8012304:	6003      	strhi	r3, [r0, #0]
 8012306:	700a      	strbls	r2, [r1, #0]
 8012308:	f04f 30ff 	movhi.w	r0, #4294967295
 801230c:	bf98      	it	ls
 801230e:	2001      	movls	r0, #1
 8012310:	4770      	bx	lr
 8012312:	4608      	mov	r0, r1
 8012314:	4770      	bx	lr
	...

08012318 <_init>:
 8012318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801231a:	bf00      	nop
 801231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801231e:	bc08      	pop	{r3}
 8012320:	469e      	mov	lr, r3
 8012322:	4770      	bx	lr

08012324 <_fini>:
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012326:	bf00      	nop
 8012328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801232a:	bc08      	pop	{r3}
 801232c:	469e      	mov	lr, r3
 801232e:	4770      	bx	lr
